import{S as AQt,i as LQt,s as yQt,e as a,k as l,w as F,t as o,M as xQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as $Qt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zrt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function kQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,ey,Pf,Oe,Qe,xi,Pn,oy,Bn,Nn,ry,$i,In,ty,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),ey=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),oy=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),ry=o(`, make sure its
`),$i=a("code"),In=o("config_class"),ty=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var PS=s(p);m=r(PS,"NewModelConfig"),PS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var BS=s(Ai);Rf=r(BS,"model_type"),BS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var NS=s(Li);yi=r(NS,'"new-model"'),NS.forEach(t),ey=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),oy=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var IS=s(Bn);Nn=r(IS,"PreTrainedModel"),IS.forEach(t),ry=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);In=r(Nf,"config_class"),Nf.forEach(t),ty=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var qS=s(ki);Bf=r(qS,"NewModelConfig"),qS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,ey),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,oy),e(Oe,Bn),e(Bn,Nn),e(Oe,ry),e(Oe,$i),e($i,In),e(Oe,ty),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,ey,Pf,Oe,Qe,xi,Pn,oy,Bn,Nn,ry,$i,In,ty,ki,Bf,Sa,We,Ae,PS,Si,BS,NS,Co,Ra,IS,Nf,qS,fHe,JVe,Ri,If,Mae,ay,mHe,Eae,gHe,YVe,qn,hHe,Cae,pHe,_He,wae,uHe,bHe,KVe,ny,ZVe,jS,vHe,eXe,qf,oXe,Pi,jf,Aae,sy,FHe,Lae,THe,rXe,wo,ly,MHe,iy,EHe,DS,CHe,wHe,AHe,dy,LHe,yae,yHe,xHe,$He,Lr,cy,kHe,xae,SHe,RHe,Bi,PHe,$ae,BHe,NHe,kae,IHe,qHe,jHe,A,Df,Sae,DHe,GHe,GS,OHe,VHe,XHe,Gf,Rae,zHe,QHe,OS,WHe,HHe,UHe,Of,Pae,JHe,YHe,VS,KHe,ZHe,eUe,Vf,Bae,oUe,rUe,XS,tUe,aUe,nUe,Xf,Nae,sUe,lUe,zS,iUe,dUe,cUe,zf,Iae,fUe,mUe,QS,gUe,hUe,pUe,Qf,qae,_Ue,uUe,WS,bUe,vUe,FUe,Wf,jae,TUe,MUe,HS,EUe,CUe,wUe,Hf,Dae,AUe,LUe,US,yUe,xUe,$Ue,Uf,Gae,kUe,SUe,JS,RUe,PUe,BUe,Jf,Oae,NUe,IUe,YS,qUe,jUe,DUe,Yf,Vae,GUe,OUe,KS,VUe,XUe,zUe,Kf,Xae,QUe,WUe,ZS,HUe,UUe,JUe,Zf,zae,YUe,KUe,eR,ZUe,eJe,oJe,em,Qae,rJe,tJe,oR,aJe,nJe,sJe,om,Wae,lJe,iJe,rR,dJe,cJe,fJe,rm,Hae,mJe,gJe,tR,hJe,pJe,_Je,tm,Uae,uJe,bJe,aR,vJe,FJe,TJe,am,Jae,MJe,EJe,nR,CJe,wJe,AJe,nm,Yae,LJe,yJe,sR,xJe,$Je,kJe,sm,Kae,SJe,RJe,lR,PJe,BJe,NJe,lm,Zae,IJe,qJe,iR,jJe,DJe,GJe,im,ene,OJe,VJe,dR,XJe,zJe,QJe,dm,one,WJe,HJe,cR,UJe,JJe,YJe,cm,rne,KJe,ZJe,fR,eYe,oYe,rYe,fm,tne,tYe,aYe,mR,nYe,sYe,lYe,mm,ane,iYe,dYe,gR,cYe,fYe,mYe,gm,nne,gYe,hYe,hR,pYe,_Ye,uYe,hm,sne,bYe,vYe,pR,FYe,TYe,MYe,pm,lne,EYe,CYe,_R,wYe,AYe,LYe,_m,ine,yYe,xYe,uR,$Ye,kYe,SYe,um,dne,RYe,PYe,bR,BYe,NYe,IYe,bm,cne,qYe,jYe,vR,DYe,GYe,OYe,vm,fne,VYe,XYe,FR,zYe,QYe,WYe,Fm,mne,HYe,UYe,TR,JYe,YYe,KYe,Tm,gne,ZYe,eKe,MR,oKe,rKe,tKe,Mm,hne,aKe,nKe,ER,sKe,lKe,iKe,Em,pne,dKe,cKe,CR,fKe,mKe,gKe,Cm,_ne,hKe,pKe,wR,_Ke,uKe,bKe,wm,une,vKe,FKe,AR,TKe,MKe,EKe,Am,bne,CKe,wKe,LR,AKe,LKe,yKe,Lm,vne,xKe,$Ke,yR,kKe,SKe,RKe,ym,Fne,PKe,BKe,xR,NKe,IKe,qKe,xm,Tne,jKe,DKe,$R,GKe,OKe,VKe,$m,Mne,XKe,zKe,kR,QKe,WKe,HKe,km,Ene,UKe,JKe,SR,YKe,KKe,ZKe,Sm,Cne,eZe,oZe,RR,rZe,tZe,aZe,Rm,wne,nZe,sZe,PR,lZe,iZe,dZe,Pm,Ane,cZe,fZe,BR,mZe,gZe,hZe,Bm,Lne,pZe,_Ze,NR,uZe,bZe,vZe,Nm,yne,FZe,TZe,IR,MZe,EZe,CZe,Im,xne,wZe,AZe,qR,LZe,yZe,xZe,qm,$ne,$Ze,kZe,jR,SZe,RZe,PZe,jm,kne,BZe,NZe,DR,IZe,qZe,jZe,Dm,Sne,DZe,GZe,GR,OZe,VZe,XZe,Gm,Rne,zZe,QZe,OR,WZe,HZe,UZe,Om,Pne,JZe,YZe,VR,KZe,ZZe,eeo,Vm,Bne,oeo,reo,XR,teo,aeo,neo,Xm,Nne,seo,leo,zR,ieo,deo,ceo,zm,Ine,feo,meo,QR,geo,heo,peo,Qm,qne,_eo,ueo,WR,beo,veo,Feo,Wm,jne,Teo,Meo,HR,Eeo,Ceo,weo,Hm,Dne,Aeo,Leo,UR,yeo,xeo,$eo,Um,Gne,keo,Seo,JR,Reo,Peo,Beo,Jm,One,Neo,Ieo,YR,qeo,jeo,Deo,Ym,Vne,Geo,Oeo,KR,Veo,Xeo,zeo,Km,Xne,Qeo,Weo,ZR,Heo,Ueo,Jeo,Zm,zne,Yeo,Keo,eP,Zeo,eoo,ooo,eg,Qne,roo,too,oP,aoo,noo,soo,og,Wne,loo,ioo,rP,doo,coo,foo,rg,Hne,moo,goo,tP,hoo,poo,_oo,tg,Une,uoo,boo,aP,voo,Foo,Too,ag,Jne,Moo,Eoo,nP,Coo,woo,Aoo,ng,Yne,Loo,yoo,sP,xoo,$oo,koo,sg,Kne,Soo,Roo,lP,Poo,Boo,Noo,lg,Zne,Ioo,qoo,iP,joo,Doo,Goo,ig,ese,Ooo,Voo,dP,Xoo,zoo,Qoo,dg,ose,Woo,Hoo,cP,Uoo,Joo,Yoo,cg,rse,Koo,Zoo,fP,ero,oro,rro,fg,tse,tro,aro,mP,nro,sro,lro,mg,ase,iro,dro,gP,cro,fro,mro,gg,nse,gro,hro,hP,pro,_ro,uro,hg,sse,bro,vro,pP,Fro,Tro,Mro,pg,lse,Ero,Cro,_P,wro,Aro,Lro,_g,ise,yro,xro,uP,$ro,kro,Sro,ug,dse,Rro,Pro,bP,Bro,Nro,Iro,bg,cse,qro,jro,vP,Dro,Gro,Oro,vg,fse,Vro,Xro,FP,zro,Qro,Wro,Fg,mse,Hro,Uro,TP,Jro,Yro,Kro,Tg,gse,Zro,eto,MP,oto,rto,tto,Mg,hse,ato,nto,EP,sto,lto,ito,Eg,pse,dto,cto,CP,fto,mto,gto,Cg,_se,hto,pto,wP,_to,uto,bto,wg,use,vto,Fto,AP,Tto,Mto,Eto,Ag,bse,Cto,wto,LP,Ato,Lto,yto,Lg,vse,xto,$to,yP,kto,Sto,Rto,yg,Fse,Pto,Bto,xP,Nto,Ito,qto,xg,Tse,jto,Dto,$P,Gto,Oto,Vto,$g,Mse,Xto,zto,kP,Qto,Wto,Hto,kg,Ese,Uto,Jto,SP,Yto,Kto,Zto,Sg,Cse,eao,oao,RP,rao,tao,aao,Rg,wse,nao,sao,PP,lao,iao,dao,Pg,Ase,cao,fao,BP,mao,gao,hao,Bg,Lse,pao,_ao,NP,uao,bao,vao,Ng,yse,Fao,Tao,IP,Mao,Eao,Cao,Ig,xse,wao,Aao,qP,Lao,yao,xao,qg,$se,$ao,kao,jP,Sao,Rao,Pao,jg,kse,Bao,Nao,DP,Iao,qao,jao,Dg,Sse,Dao,Gao,GP,Oao,Vao,Xao,Gg,Rse,zao,Qao,OP,Wao,Hao,Uao,Og,Pse,Jao,Yao,VP,Kao,Zao,eno,Vg,Bse,ono,rno,XP,tno,ano,nno,Xg,Nse,sno,lno,zP,ino,dno,cno,zg,Ise,fno,mno,QP,gno,hno,pno,Qg,qse,_no,uno,WP,bno,vno,Fno,Wg,jse,Tno,Mno,HP,Eno,Cno,wno,Hg,Dse,Ano,Lno,UP,yno,xno,$no,Ug,Gse,kno,Sno,JP,Rno,Pno,Bno,Jg,Nno,Yg,fy,Ino,Ose,qno,tXe,Ni,Kg,Vse,my,jno,Xse,Dno,aXe,Ao,gy,Gno,hy,Ono,YP,Vno,Xno,zno,py,Qno,zse,Wno,Hno,Uno,yr,_y,Jno,Qse,Yno,Kno,Pa,Zno,Wse,eso,oso,Hse,rso,tso,Use,aso,nso,sso,k,jn,Jse,lso,iso,KP,dso,cso,ZP,fso,mso,gso,Dn,Yse,hso,pso,eB,_so,uso,oB,bso,vso,Fso,Gn,Kse,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,Zg,Zse,yso,xso,aB,$so,kso,Sso,On,ele,Rso,Pso,nB,Bso,Nso,sB,Iso,qso,jso,eh,ole,Dso,Gso,lB,Oso,Vso,Xso,oh,rle,zso,Qso,iB,Wso,Hso,Uso,rh,tle,Jso,Yso,dB,Kso,Zso,elo,Vn,ale,olo,rlo,cB,tlo,alo,fB,nlo,slo,llo,Xn,nle,ilo,dlo,mB,clo,flo,gB,mlo,glo,hlo,zn,sle,plo,_lo,hB,ulo,blo,pB,vlo,Flo,Tlo,th,lle,Mlo,Elo,_B,Clo,wlo,Alo,ah,ile,Llo,ylo,uB,xlo,$lo,klo,nh,dle,Slo,Rlo,bB,Plo,Blo,Nlo,Qn,cle,Ilo,qlo,vB,jlo,Dlo,FB,Glo,Olo,Vlo,sh,fle,Xlo,zlo,TB,Qlo,Wlo,Hlo,Wn,mle,Ulo,Jlo,MB,Ylo,Klo,EB,Zlo,eio,oio,Hn,gle,rio,tio,CB,aio,nio,wB,sio,lio,iio,Un,hle,dio,cio,AB,fio,mio,LB,gio,hio,pio,Jn,ple,_io,uio,yB,bio,vio,xB,Fio,Tio,Mio,lh,_le,Eio,Cio,$B,wio,Aio,Lio,Yn,ule,yio,xio,kB,$io,kio,SB,Sio,Rio,Pio,Kn,ble,Bio,Nio,RB,Iio,qio,PB,jio,Dio,Gio,Zn,vle,Oio,Vio,BB,Xio,zio,NB,Qio,Wio,Hio,es,Fle,Uio,Jio,IB,Yio,Kio,qB,Zio,edo,odo,os,Tle,rdo,tdo,jB,ado,ndo,DB,sdo,ldo,ido,rs,Mle,ddo,cdo,GB,fdo,mdo,OB,gdo,hdo,pdo,ih,Ele,_do,udo,VB,bdo,vdo,Fdo,ts,Cle,Tdo,Mdo,XB,Edo,Cdo,zB,wdo,Ado,Ldo,dh,wle,ydo,xdo,QB,$do,kdo,Sdo,as,Ale,Rdo,Pdo,WB,Bdo,Ndo,HB,Ido,qdo,jdo,ns,Lle,Ddo,Gdo,UB,Odo,Vdo,JB,Xdo,zdo,Qdo,ss,yle,Wdo,Hdo,YB,Udo,Jdo,KB,Ydo,Kdo,Zdo,ch,xle,eco,oco,ZB,rco,tco,aco,ls,$le,nco,sco,eN,lco,ico,oN,dco,cco,fco,is,kle,mco,gco,rN,hco,pco,tN,_co,uco,bco,ds,Sle,vco,Fco,aN,Tco,Mco,nN,Eco,Cco,wco,fh,Rle,Aco,Lco,sN,yco,xco,$co,cs,Ple,kco,Sco,lN,Rco,Pco,iN,Bco,Nco,Ico,fs,Ble,qco,jco,dN,Dco,Gco,cN,Oco,Vco,Xco,ms,Nle,zco,Qco,fN,Wco,Hco,mN,Uco,Jco,Yco,gs,Ile,Kco,Zco,gN,efo,ofo,hN,rfo,tfo,afo,hs,qle,nfo,sfo,pN,lfo,ifo,_N,dfo,cfo,ffo,ps,jle,mfo,gfo,uN,hfo,pfo,bN,_fo,ufo,bfo,_s,Dle,vfo,Ffo,vN,Tfo,Mfo,FN,Efo,Cfo,wfo,us,Gle,Afo,Lfo,TN,yfo,xfo,MN,$fo,kfo,Sfo,mh,Ole,Rfo,Pfo,EN,Bfo,Nfo,Ifo,bs,Vle,qfo,jfo,CN,Dfo,Gfo,wN,Ofo,Vfo,Xfo,gh,Xle,zfo,Qfo,AN,Wfo,Hfo,Ufo,hh,zle,Jfo,Yfo,LN,Kfo,Zfo,emo,vs,Qle,omo,rmo,yN,tmo,amo,xN,nmo,smo,lmo,Fs,Wle,imo,dmo,$N,cmo,fmo,kN,mmo,gmo,hmo,Ts,Hle,pmo,_mo,SN,umo,bmo,RN,vmo,Fmo,Tmo,ph,Ule,Mmo,Emo,PN,Cmo,wmo,Amo,Ms,Jle,Lmo,ymo,BN,xmo,$mo,NN,kmo,Smo,Rmo,Es,Yle,Pmo,Bmo,IN,Nmo,Imo,qN,qmo,jmo,Dmo,Cs,Kle,Gmo,Omo,jN,Vmo,Xmo,DN,zmo,Qmo,Wmo,ws,Zle,Hmo,Umo,GN,Jmo,Ymo,ON,Kmo,Zmo,ego,As,eie,ogo,rgo,VN,tgo,ago,XN,ngo,sgo,lgo,Ls,oie,igo,dgo,zN,cgo,fgo,QN,mgo,ggo,hgo,ys,rie,pgo,_go,WN,ugo,bgo,HN,vgo,Fgo,Tgo,_h,tie,Mgo,Ego,UN,Cgo,wgo,Ago,xs,aie,Lgo,ygo,JN,xgo,$go,YN,kgo,Sgo,Rgo,uh,nie,Pgo,Bgo,KN,Ngo,Igo,qgo,bh,sie,jgo,Dgo,ZN,Ggo,Ogo,Vgo,vh,lie,Xgo,zgo,eI,Qgo,Wgo,Hgo,Fh,iie,Ugo,Jgo,oI,Ygo,Kgo,Zgo,$s,die,eho,oho,rI,rho,tho,tI,aho,nho,sho,Th,cie,lho,iho,aI,dho,cho,fho,ks,fie,mho,gho,nI,hho,pho,sI,_ho,uho,bho,Ss,mie,vho,Fho,lI,Tho,Mho,iI,Eho,Cho,who,Rs,gie,Aho,Lho,dI,yho,xho,cI,$ho,kho,Sho,Ps,hie,Rho,Pho,fI,Bho,Nho,mI,Iho,qho,jho,Bs,pie,Dho,Gho,gI,Oho,Vho,hI,Xho,zho,Qho,Ns,_ie,Who,Hho,pI,Uho,Jho,_I,Yho,Kho,Zho,Mh,uie,epo,opo,uI,rpo,tpo,apo,Eh,bie,npo,spo,bI,lpo,ipo,dpo,Is,vie,cpo,fpo,vI,mpo,gpo,FI,hpo,ppo,_po,qs,Fie,upo,bpo,TI,vpo,Fpo,MI,Tpo,Mpo,Epo,js,Tie,Cpo,wpo,EI,Apo,Lpo,CI,ypo,xpo,$po,Ch,Mie,kpo,Spo,wI,Rpo,Ppo,Bpo,wh,Eie,Npo,Ipo,AI,qpo,jpo,Dpo,Ah,Cie,Gpo,Opo,LI,Vpo,Xpo,zpo,Ds,wie,Qpo,Wpo,yI,Hpo,Upo,xI,Jpo,Ypo,Kpo,Gs,Aie,Zpo,e_o,$I,o_o,r_o,kI,t_o,a_o,n_o,Lh,Lie,s_o,l_o,SI,i_o,d_o,c_o,yh,yie,f_o,m_o,RI,g_o,h_o,p_o,xh,xie,__o,u_o,PI,b_o,v_o,F_o,Os,$ie,T_o,M_o,BI,E_o,C_o,NI,w_o,A_o,L_o,$h,kie,y_o,x_o,II,$_o,k_o,S_o,kh,Sie,R_o,P_o,qI,B_o,N_o,I_o,Vs,Rie,q_o,j_o,jI,D_o,G_o,DI,O_o,V_o,X_o,Xs,Pie,z_o,Q_o,GI,W_o,H_o,OI,U_o,J_o,Y_o,zs,Bie,K_o,Z_o,VI,euo,ouo,XI,ruo,tuo,auo,Qs,Nie,nuo,suo,zI,luo,iuo,QI,duo,cuo,fuo,Sh,muo,Rh,uy,guo,Iie,huo,nXe,Ii,Ph,qie,by,puo,jie,_uo,sXe,Lo,vy,uuo,Fy,buo,WI,vuo,Fuo,Tuo,Ty,Muo,Die,Euo,Cuo,wuo,He,My,Auo,Gie,Luo,yuo,Ba,xuo,Oie,$uo,kuo,Vie,Suo,Ruo,Xie,Puo,Buo,Nuo,Y,Bh,zie,Iuo,quo,HI,juo,Duo,Guo,Nh,Qie,Ouo,Vuo,UI,Xuo,zuo,Quo,Ih,Wie,Wuo,Huo,JI,Uuo,Juo,Yuo,qh,Hie,Kuo,Zuo,YI,e1o,o1o,r1o,jh,Uie,t1o,a1o,KI,n1o,s1o,l1o,Dh,Jie,i1o,d1o,ZI,c1o,f1o,m1o,Gh,Yie,g1o,h1o,eq,p1o,_1o,u1o,Oh,Kie,b1o,v1o,oq,F1o,T1o,M1o,Vh,Zie,E1o,C1o,rq,w1o,A1o,L1o,Xh,ede,y1o,x1o,tq,$1o,k1o,S1o,zh,ode,R1o,P1o,aq,B1o,N1o,I1o,Qh,rde,q1o,j1o,nq,D1o,G1o,O1o,Wh,tde,V1o,X1o,sq,z1o,Q1o,W1o,Hh,ade,H1o,U1o,lq,J1o,Y1o,K1o,Uh,nde,Z1o,e4o,iq,o4o,r4o,t4o,Jh,sde,a4o,n4o,dq,s4o,l4o,i4o,Yh,lde,d4o,c4o,cq,f4o,m4o,g4o,Kh,ide,h4o,p4o,fq,_4o,u4o,b4o,Zh,dde,v4o,F4o,mq,T4o,M4o,E4o,ep,cde,C4o,w4o,gq,A4o,L4o,y4o,op,fde,x4o,$4o,hq,k4o,S4o,R4o,rp,mde,P4o,B4o,pq,N4o,I4o,q4o,tp,gde,j4o,D4o,_q,G4o,O4o,V4o,ap,hde,X4o,z4o,uq,Q4o,W4o,H4o,np,pde,U4o,J4o,bq,Y4o,K4o,Z4o,sp,_de,e2o,o2o,vq,r2o,t2o,a2o,lp,ude,n2o,s2o,Fq,l2o,i2o,d2o,ip,bde,c2o,f2o,Tq,m2o,g2o,h2o,dp,vde,p2o,_2o,Mq,u2o,b2o,v2o,cp,Fde,F2o,T2o,Eq,M2o,E2o,C2o,fp,Tde,w2o,A2o,Cq,L2o,y2o,x2o,mp,Mde,$2o,k2o,wq,S2o,R2o,P2o,gp,Ede,B2o,N2o,Aq,I2o,q2o,j2o,hp,Cde,D2o,G2o,Lq,O2o,V2o,X2o,pp,z2o,_p,Q2o,up,Ey,W2o,wde,H2o,lXe,qi,bp,Ade,Cy,U2o,Lde,J2o,iXe,yo,wy,Y2o,Ay,K2o,yq,Z2o,ebo,obo,Ly,rbo,yde,tbo,abo,nbo,Ue,yy,sbo,xde,lbo,ibo,ji,dbo,$de,cbo,fbo,kde,mbo,gbo,hbo,he,vp,Sde,pbo,_bo,xq,ubo,bbo,vbo,Fp,Rde,Fbo,Tbo,Pde,Mbo,Ebo,Cbo,Tp,Bde,wbo,Abo,$q,Lbo,ybo,xbo,Mp,Nde,$bo,kbo,kq,Sbo,Rbo,Pbo,Ep,Ide,Bbo,Nbo,Sq,Ibo,qbo,jbo,Cp,qde,Dbo,Gbo,Rq,Obo,Vbo,Xbo,wp,jde,zbo,Qbo,Pq,Wbo,Hbo,Ubo,Ap,Dde,Jbo,Ybo,Bq,Kbo,Zbo,evo,Lp,Gde,ovo,rvo,Nq,tvo,avo,nvo,yp,Ode,svo,lvo,Iq,ivo,dvo,cvo,xp,Vde,fvo,mvo,qq,gvo,hvo,pvo,$p,Xde,_vo,uvo,jq,bvo,vvo,Fvo,kp,zde,Tvo,Mvo,Dq,Evo,Cvo,wvo,Sp,Qde,Avo,Lvo,Gq,yvo,xvo,$vo,Rp,Wde,kvo,Svo,Oq,Rvo,Pvo,Bvo,Pp,Hde,Nvo,Ivo,Vq,qvo,jvo,Dvo,Bp,Ude,Gvo,Ovo,Xq,Vvo,Xvo,zvo,Np,Jde,Qvo,Wvo,zq,Hvo,Uvo,Jvo,Ip,Yvo,qp,Kvo,jp,xy,Zvo,Yde,e3o,dXe,Di,Dp,Kde,$y,o3o,Zde,r3o,cXe,xo,ky,t3o,Gi,a3o,Qq,n3o,s3o,Wq,l3o,i3o,d3o,Sy,c3o,ece,f3o,m3o,g3o,lt,Ry,h3o,oce,p3o,_3o,Oi,u3o,rce,b3o,v3o,Hq,F3o,T3o,M3o,Gp,E3o,Je,Py,C3o,tce,w3o,A3o,Na,L3o,ace,y3o,x3o,nce,$3o,k3o,sce,S3o,R3o,P3o,y,Op,lce,B3o,N3o,Uq,I3o,q3o,j3o,Vp,ice,D3o,G3o,Jq,O3o,V3o,X3o,Xp,dce,z3o,Q3o,Yq,W3o,H3o,U3o,zp,cce,J3o,Y3o,Kq,K3o,Z3o,e5o,Qp,fce,o5o,r5o,Zq,t5o,a5o,n5o,Wp,mce,s5o,l5o,ej,i5o,d5o,c5o,Hp,gce,f5o,m5o,oj,g5o,h5o,p5o,Up,hce,_5o,u5o,rj,b5o,v5o,F5o,Jp,pce,T5o,M5o,tj,E5o,C5o,w5o,Yp,_ce,A5o,L5o,aj,y5o,x5o,$5o,Kp,uce,k5o,S5o,nj,R5o,P5o,B5o,Zp,bce,N5o,I5o,sj,q5o,j5o,D5o,e_,vce,G5o,O5o,lj,V5o,X5o,z5o,o_,Fce,Q5o,W5o,ij,H5o,U5o,J5o,r_,Tce,Y5o,K5o,dj,Z5o,eFo,oFo,t_,Mce,rFo,tFo,cj,aFo,nFo,sFo,a_,Ece,lFo,iFo,fj,dFo,cFo,fFo,n_,Cce,mFo,gFo,mj,hFo,pFo,_Fo,s_,wce,uFo,bFo,gj,vFo,FFo,TFo,l_,Ace,MFo,EFo,hj,CFo,wFo,AFo,i_,Lce,LFo,yFo,pj,xFo,$Fo,kFo,d_,yce,SFo,RFo,_j,PFo,BFo,NFo,c_,xce,IFo,qFo,uj,jFo,DFo,GFo,f_,$ce,OFo,VFo,bj,XFo,zFo,QFo,m_,kce,WFo,HFo,vj,UFo,JFo,YFo,g_,Sce,KFo,ZFo,Fj,e6o,o6o,r6o,h_,Rce,t6o,a6o,Tj,n6o,s6o,l6o,p_,Pce,i6o,d6o,Mj,c6o,f6o,m6o,__,Bce,g6o,h6o,Ej,p6o,_6o,u6o,u_,Nce,b6o,v6o,Cj,F6o,T6o,M6o,b_,Ice,E6o,C6o,wj,w6o,A6o,L6o,v_,qce,y6o,x6o,Aj,$6o,k6o,S6o,F_,jce,R6o,P6o,Lj,B6o,N6o,I6o,T_,Dce,q6o,j6o,yj,D6o,G6o,O6o,Ws,Gce,V6o,X6o,xj,z6o,Q6o,$j,W6o,H6o,U6o,M_,Oce,J6o,Y6o,kj,K6o,Z6o,eTo,E_,Vce,oTo,rTo,Sj,tTo,aTo,nTo,C_,Xce,sTo,lTo,Rj,iTo,dTo,cTo,w_,zce,fTo,mTo,Pj,gTo,hTo,pTo,A_,Qce,_To,uTo,Bj,bTo,vTo,FTo,L_,Wce,TTo,MTo,Nj,ETo,CTo,wTo,y_,Hce,ATo,LTo,Ij,yTo,xTo,$To,x_,Uce,kTo,STo,qj,RTo,PTo,BTo,$_,Jce,NTo,ITo,jj,qTo,jTo,DTo,k_,Yce,GTo,OTo,Dj,VTo,XTo,zTo,S_,Kce,QTo,WTo,Gj,HTo,UTo,JTo,R_,Zce,YTo,KTo,Oj,ZTo,eMo,oMo,P_,efe,rMo,tMo,Vj,aMo,nMo,sMo,B_,ofe,lMo,iMo,Xj,dMo,cMo,fMo,N_,rfe,mMo,gMo,zj,hMo,pMo,_Mo,I_,tfe,uMo,bMo,Qj,vMo,FMo,TMo,q_,afe,MMo,EMo,Wj,CMo,wMo,AMo,j_,nfe,LMo,yMo,Hj,xMo,$Mo,kMo,D_,sfe,SMo,RMo,Uj,PMo,BMo,NMo,G_,lfe,IMo,qMo,Jj,jMo,DMo,GMo,O_,ife,OMo,VMo,Yj,XMo,zMo,QMo,V_,dfe,WMo,HMo,Kj,UMo,JMo,YMo,X_,cfe,KMo,ZMo,Zj,eEo,oEo,rEo,z_,ffe,tEo,aEo,eD,nEo,sEo,lEo,Q_,mfe,iEo,dEo,oD,cEo,fEo,mEo,W_,gfe,gEo,hEo,rD,pEo,_Eo,uEo,H_,hfe,bEo,vEo,tD,FEo,TEo,MEo,U_,pfe,EEo,CEo,aD,wEo,AEo,LEo,J_,_fe,yEo,xEo,nD,$Eo,kEo,SEo,Y_,ufe,REo,PEo,sD,BEo,NEo,IEo,K_,bfe,qEo,jEo,lD,DEo,GEo,OEo,Z_,vfe,VEo,XEo,iD,zEo,QEo,WEo,eu,Ffe,HEo,UEo,dD,JEo,YEo,KEo,ou,Tfe,ZEo,eCo,cD,oCo,rCo,tCo,ru,Mfe,aCo,nCo,fD,sCo,lCo,iCo,tu,Efe,dCo,cCo,mD,fCo,mCo,gCo,au,Cfe,hCo,pCo,gD,_Co,uCo,bCo,nu,wfe,vCo,FCo,hD,TCo,MCo,ECo,su,Afe,CCo,wCo,pD,ACo,LCo,yCo,lu,Lfe,xCo,$Co,_D,kCo,SCo,RCo,iu,yfe,PCo,BCo,uD,NCo,ICo,qCo,du,xfe,jCo,DCo,bD,GCo,OCo,VCo,cu,$fe,XCo,zCo,vD,QCo,WCo,HCo,fu,kfe,UCo,JCo,FD,YCo,KCo,ZCo,mu,Sfe,e0o,o0o,TD,r0o,t0o,a0o,gu,Rfe,n0o,s0o,MD,l0o,i0o,d0o,hu,Pfe,c0o,f0o,ED,m0o,g0o,h0o,pu,Bfe,p0o,_0o,CD,u0o,b0o,v0o,_u,Nfe,F0o,T0o,wD,M0o,E0o,C0o,uu,Ife,w0o,A0o,AD,L0o,y0o,x0o,bu,qfe,$0o,k0o,LD,S0o,R0o,P0o,vu,jfe,B0o,N0o,yD,I0o,q0o,j0o,Fu,Dfe,D0o,G0o,xD,O0o,V0o,X0o,Tu,Gfe,z0o,Q0o,$D,W0o,H0o,U0o,Mu,Ofe,J0o,Y0o,kD,K0o,Z0o,ewo,Eu,Vfe,owo,rwo,SD,two,awo,nwo,Cu,Xfe,swo,lwo,RD,iwo,dwo,cwo,wu,zfe,fwo,mwo,PD,gwo,hwo,pwo,Au,Qfe,_wo,uwo,BD,bwo,vwo,Fwo,Lu,Wfe,Two,Mwo,ND,Ewo,Cwo,wwo,yu,Hfe,Awo,Lwo,ID,ywo,xwo,$wo,xu,Ufe,kwo,Swo,qD,Rwo,Pwo,Bwo,$u,Jfe,Nwo,Iwo,jD,qwo,jwo,Dwo,ku,Yfe,Gwo,Owo,DD,Vwo,Xwo,zwo,Su,Kfe,Qwo,Wwo,GD,Hwo,Uwo,Jwo,Ru,Zfe,Ywo,Kwo,OD,Zwo,eAo,oAo,Pu,eme,rAo,tAo,VD,aAo,nAo,sAo,Bu,ome,lAo,iAo,XD,dAo,cAo,fAo,Nu,rme,mAo,gAo,zD,hAo,pAo,_Ao,Iu,tme,uAo,bAo,QD,vAo,FAo,TAo,qu,ame,MAo,EAo,WD,CAo,wAo,AAo,ju,nme,LAo,yAo,HD,xAo,$Ao,kAo,Du,sme,SAo,RAo,UD,PAo,BAo,NAo,Gu,lme,IAo,qAo,JD,jAo,DAo,GAo,Ou,ime,OAo,VAo,YD,XAo,zAo,QAo,Vu,dme,WAo,HAo,KD,UAo,JAo,YAo,Xu,KAo,cme,ZAo,e7o,fme,o7o,r7o,zu,fXe,Vi,Qu,mme,By,t7o,gme,a7o,mXe,$o,Ny,n7o,Xi,s7o,ZD,l7o,i7o,eG,d7o,c7o,f7o,Iy,m7o,hme,g7o,h7o,p7o,it,qy,_7o,pme,u7o,b7o,zi,v7o,_me,F7o,T7o,oG,M7o,E7o,C7o,Wu,w7o,Ye,jy,A7o,ume,L7o,y7o,Ia,x7o,bme,$7o,k7o,vme,S7o,R7o,Fme,P7o,B7o,N7o,G,Hu,Tme,I7o,q7o,rG,j7o,D7o,G7o,Uu,Mme,O7o,V7o,tG,X7o,z7o,Q7o,Ju,Eme,W7o,H7o,aG,U7o,J7o,Y7o,Yu,Cme,K7o,Z7o,nG,eLo,oLo,rLo,Ku,wme,tLo,aLo,sG,nLo,sLo,lLo,Zu,Ame,iLo,dLo,lG,cLo,fLo,mLo,e1,Lme,gLo,hLo,iG,pLo,_Lo,uLo,o1,yme,bLo,vLo,dG,FLo,TLo,MLo,r1,xme,ELo,CLo,cG,wLo,ALo,LLo,t1,$me,yLo,xLo,fG,$Lo,kLo,SLo,a1,kme,RLo,PLo,mG,BLo,NLo,ILo,n1,Sme,qLo,jLo,gG,DLo,GLo,OLo,s1,Rme,VLo,XLo,hG,zLo,QLo,WLo,l1,Pme,HLo,ULo,pG,JLo,YLo,KLo,i1,Bme,ZLo,eyo,_G,oyo,ryo,tyo,d1,Nme,ayo,nyo,uG,syo,lyo,iyo,c1,Ime,dyo,cyo,bG,fyo,myo,gyo,f1,qme,hyo,pyo,vG,_yo,uyo,byo,m1,jme,vyo,Fyo,FG,Tyo,Myo,Eyo,g1,Dme,Cyo,wyo,TG,Ayo,Lyo,yyo,h1,Gme,xyo,$yo,MG,kyo,Syo,Ryo,p1,Ome,Pyo,Byo,EG,Nyo,Iyo,qyo,_1,Vme,jyo,Dyo,CG,Gyo,Oyo,Vyo,u1,Xme,Xyo,zyo,wG,Qyo,Wyo,Hyo,b1,zme,Uyo,Jyo,AG,Yyo,Kyo,Zyo,v1,Qme,e8o,o8o,LG,r8o,t8o,a8o,F1,Wme,n8o,s8o,yG,l8o,i8o,d8o,T1,Hme,c8o,f8o,xG,m8o,g8o,h8o,M1,Ume,p8o,_8o,$G,u8o,b8o,v8o,E1,Jme,F8o,T8o,kG,M8o,E8o,C8o,C1,Yme,w8o,A8o,SG,L8o,y8o,x8o,w1,Kme,$8o,k8o,RG,S8o,R8o,P8o,A1,Zme,B8o,N8o,PG,I8o,q8o,j8o,L1,ege,D8o,G8o,BG,O8o,V8o,X8o,y1,oge,z8o,Q8o,NG,W8o,H8o,U8o,x1,rge,J8o,Y8o,IG,K8o,Z8o,e9o,$1,tge,o9o,r9o,qG,t9o,a9o,n9o,k1,age,s9o,l9o,jG,i9o,d9o,c9o,S1,nge,f9o,m9o,DG,g9o,h9o,p9o,R1,sge,_9o,u9o,GG,b9o,v9o,F9o,P1,lge,T9o,M9o,OG,E9o,C9o,w9o,B1,ige,A9o,L9o,VG,y9o,x9o,$9o,N1,dge,k9o,S9o,XG,R9o,P9o,B9o,I1,cge,N9o,I9o,zG,q9o,j9o,D9o,q1,fge,G9o,O9o,QG,V9o,X9o,z9o,j1,Q9o,mge,W9o,H9o,gge,U9o,J9o,D1,gXe,Qi,G1,hge,Dy,Y9o,pge,K9o,hXe,ko,Gy,Z9o,Wi,exo,WG,oxo,rxo,HG,txo,axo,nxo,Oy,sxo,_ge,lxo,ixo,dxo,dt,Vy,cxo,uge,fxo,mxo,Hi,gxo,bge,hxo,pxo,UG,_xo,uxo,bxo,O1,vxo,Ke,Xy,Fxo,vge,Txo,Mxo,qa,Exo,Fge,Cxo,wxo,Tge,Axo,Lxo,Mge,yxo,xxo,$xo,z,V1,Ege,kxo,Sxo,JG,Rxo,Pxo,Bxo,X1,Cge,Nxo,Ixo,YG,qxo,jxo,Dxo,z1,wge,Gxo,Oxo,KG,Vxo,Xxo,zxo,Q1,Age,Qxo,Wxo,ZG,Hxo,Uxo,Jxo,W1,Lge,Yxo,Kxo,eO,Zxo,e$o,o$o,H1,yge,r$o,t$o,oO,a$o,n$o,s$o,U1,xge,l$o,i$o,rO,d$o,c$o,f$o,J1,$ge,m$o,g$o,tO,h$o,p$o,_$o,Y1,kge,u$o,b$o,aO,v$o,F$o,T$o,K1,Sge,M$o,E$o,nO,C$o,w$o,A$o,Z1,Rge,L$o,y$o,sO,x$o,$$o,k$o,e4,Pge,S$o,R$o,lO,P$o,B$o,N$o,o4,Bge,I$o,q$o,iO,j$o,D$o,G$o,r4,Nge,O$o,V$o,dO,X$o,z$o,Q$o,t4,Ige,W$o,H$o,cO,U$o,J$o,Y$o,a4,qge,K$o,Z$o,fO,eko,oko,rko,n4,jge,tko,ako,mO,nko,sko,lko,s4,Dge,iko,dko,gO,cko,fko,mko,l4,Gge,gko,hko,hO,pko,_ko,uko,i4,Oge,bko,vko,pO,Fko,Tko,Mko,d4,Vge,Eko,Cko,_O,wko,Ako,Lko,c4,Xge,yko,xko,uO,$ko,kko,Sko,f4,zge,Rko,Pko,bO,Bko,Nko,Iko,m4,Qge,qko,jko,vO,Dko,Gko,Oko,g4,Wge,Vko,Xko,FO,zko,Qko,Wko,h4,Hge,Hko,Uko,TO,Jko,Yko,Kko,p4,Uge,Zko,eSo,MO,oSo,rSo,tSo,_4,Jge,aSo,nSo,EO,sSo,lSo,iSo,u4,Yge,dSo,cSo,CO,fSo,mSo,gSo,b4,Kge,hSo,pSo,wO,_So,uSo,bSo,v4,Zge,vSo,FSo,AO,TSo,MSo,ESo,F4,ehe,CSo,wSo,LO,ASo,LSo,ySo,T4,ohe,xSo,$So,yO,kSo,SSo,RSo,M4,rhe,PSo,BSo,xO,NSo,ISo,qSo,E4,the,jSo,DSo,$O,GSo,OSo,VSo,C4,ahe,XSo,zSo,kO,QSo,WSo,HSo,w4,nhe,USo,JSo,SO,YSo,KSo,ZSo,A4,she,eRo,oRo,RO,rRo,tRo,aRo,L4,lhe,nRo,sRo,PO,lRo,iRo,dRo,y4,ihe,cRo,fRo,BO,mRo,gRo,hRo,x4,pRo,dhe,_Ro,uRo,che,bRo,vRo,$4,pXe,Ui,k4,fhe,zy,FRo,mhe,TRo,_Xe,So,Qy,MRo,Ji,ERo,NO,CRo,wRo,IO,ARo,LRo,yRo,Wy,xRo,ghe,$Ro,kRo,SRo,ct,Hy,RRo,hhe,PRo,BRo,Yi,NRo,phe,IRo,qRo,qO,jRo,DRo,GRo,S4,ORo,Ze,Uy,VRo,_he,XRo,zRo,ja,QRo,uhe,WRo,HRo,bhe,URo,JRo,vhe,YRo,KRo,ZRo,W,R4,Fhe,ePo,oPo,jO,rPo,tPo,aPo,P4,The,nPo,sPo,DO,lPo,iPo,dPo,B4,Mhe,cPo,fPo,GO,mPo,gPo,hPo,N4,Ehe,pPo,_Po,OO,uPo,bPo,vPo,I4,Che,FPo,TPo,VO,MPo,EPo,CPo,q4,whe,wPo,APo,XO,LPo,yPo,xPo,j4,Ahe,$Po,kPo,zO,SPo,RPo,PPo,D4,Lhe,BPo,NPo,QO,IPo,qPo,jPo,G4,yhe,DPo,GPo,WO,OPo,VPo,XPo,O4,xhe,zPo,QPo,HO,WPo,HPo,UPo,V4,$he,JPo,YPo,UO,KPo,ZPo,eBo,X4,khe,oBo,rBo,JO,tBo,aBo,nBo,z4,She,sBo,lBo,YO,iBo,dBo,cBo,Q4,Rhe,fBo,mBo,KO,gBo,hBo,pBo,W4,Phe,_Bo,uBo,ZO,bBo,vBo,FBo,H4,Bhe,TBo,MBo,eV,EBo,CBo,wBo,U4,Nhe,ABo,LBo,oV,yBo,xBo,$Bo,J4,Ihe,kBo,SBo,rV,RBo,PBo,BBo,Y4,qhe,NBo,IBo,tV,qBo,jBo,DBo,K4,jhe,GBo,OBo,aV,VBo,XBo,zBo,Z4,Dhe,QBo,WBo,nV,HBo,UBo,JBo,e2,Ghe,YBo,KBo,sV,ZBo,eNo,oNo,o2,Ohe,rNo,tNo,lV,aNo,nNo,sNo,r2,Vhe,lNo,iNo,iV,dNo,cNo,fNo,t2,Xhe,mNo,gNo,dV,hNo,pNo,_No,a2,zhe,uNo,bNo,cV,vNo,FNo,TNo,n2,Qhe,MNo,ENo,fV,CNo,wNo,ANo,s2,Whe,LNo,yNo,mV,xNo,$No,kNo,l2,Hhe,SNo,RNo,gV,PNo,BNo,NNo,i2,Uhe,INo,qNo,hV,jNo,DNo,GNo,d2,Jhe,ONo,VNo,pV,XNo,zNo,QNo,c2,Yhe,WNo,HNo,_V,UNo,JNo,YNo,f2,Khe,KNo,ZNo,uV,eIo,oIo,rIo,m2,Zhe,tIo,aIo,epe,nIo,sIo,lIo,g2,ope,iIo,dIo,bV,cIo,fIo,mIo,h2,rpe,gIo,hIo,vV,pIo,_Io,uIo,p2,tpe,bIo,vIo,FV,FIo,TIo,MIo,_2,ape,EIo,CIo,TV,wIo,AIo,LIo,u2,yIo,npe,xIo,$Io,spe,kIo,SIo,b2,uXe,Ki,v2,lpe,Jy,RIo,ipe,PIo,bXe,Ro,Yy,BIo,Zi,NIo,MV,IIo,qIo,EV,jIo,DIo,GIo,Ky,OIo,dpe,VIo,XIo,zIo,ft,Zy,QIo,cpe,WIo,HIo,ed,UIo,fpe,JIo,YIo,CV,KIo,ZIo,eqo,F2,oqo,eo,e8,rqo,mpe,tqo,aqo,Da,nqo,gpe,sqo,lqo,hpe,iqo,dqo,ppe,cqo,fqo,mqo,pe,T2,_pe,gqo,hqo,wV,pqo,_qo,uqo,M2,upe,bqo,vqo,AV,Fqo,Tqo,Mqo,E2,bpe,Eqo,Cqo,LV,wqo,Aqo,Lqo,C2,vpe,yqo,xqo,yV,$qo,kqo,Sqo,w2,Fpe,Rqo,Pqo,xV,Bqo,Nqo,Iqo,A2,Tpe,qqo,jqo,$V,Dqo,Gqo,Oqo,L2,Mpe,Vqo,Xqo,kV,zqo,Qqo,Wqo,y2,Epe,Hqo,Uqo,SV,Jqo,Yqo,Kqo,x2,Cpe,Zqo,ejo,RV,ojo,rjo,tjo,$2,wpe,ajo,njo,PV,sjo,ljo,ijo,k2,Ape,djo,cjo,BV,fjo,mjo,gjo,S2,Lpe,hjo,pjo,NV,_jo,ujo,bjo,R2,ype,vjo,Fjo,IV,Tjo,Mjo,Ejo,P2,xpe,Cjo,wjo,qV,Ajo,Ljo,yjo,B2,$pe,xjo,$jo,jV,kjo,Sjo,Rjo,N2,kpe,Pjo,Bjo,DV,Njo,Ijo,qjo,I2,Spe,jjo,Djo,GV,Gjo,Ojo,Vjo,q2,Rpe,Xjo,zjo,OV,Qjo,Wjo,Hjo,j2,Ujo,Ppe,Jjo,Yjo,Bpe,Kjo,Zjo,D2,vXe,od,G2,Npe,o8,eDo,Ipe,oDo,FXe,Po,r8,rDo,rd,tDo,VV,aDo,nDo,XV,sDo,lDo,iDo,t8,dDo,qpe,cDo,fDo,mDo,mt,a8,gDo,jpe,hDo,pDo,td,_Do,Dpe,uDo,bDo,zV,vDo,FDo,TDo,O2,MDo,oo,n8,EDo,Gpe,CDo,wDo,Ga,ADo,Ope,LDo,yDo,Vpe,xDo,$Do,Xpe,kDo,SDo,RDo,I,V2,zpe,PDo,BDo,QV,NDo,IDo,qDo,X2,Qpe,jDo,DDo,WV,GDo,ODo,VDo,z2,Wpe,XDo,zDo,HV,QDo,WDo,HDo,Q2,Hpe,UDo,JDo,UV,YDo,KDo,ZDo,W2,Upe,eGo,oGo,JV,rGo,tGo,aGo,H2,Jpe,nGo,sGo,YV,lGo,iGo,dGo,U2,Ype,cGo,fGo,KV,mGo,gGo,hGo,J2,Kpe,pGo,_Go,ZV,uGo,bGo,vGo,Y2,Zpe,FGo,TGo,eX,MGo,EGo,CGo,K2,e_e,wGo,AGo,oX,LGo,yGo,xGo,Z2,o_e,$Go,kGo,rX,SGo,RGo,PGo,eb,r_e,BGo,NGo,tX,IGo,qGo,jGo,ob,t_e,DGo,GGo,aX,OGo,VGo,XGo,rb,a_e,zGo,QGo,nX,WGo,HGo,UGo,tb,n_e,JGo,YGo,sX,KGo,ZGo,eOo,ab,s_e,oOo,rOo,lX,tOo,aOo,nOo,nb,l_e,sOo,lOo,iX,iOo,dOo,cOo,sb,i_e,fOo,mOo,dX,gOo,hOo,pOo,lb,d_e,_Oo,uOo,cX,bOo,vOo,FOo,ib,c_e,TOo,MOo,fX,EOo,COo,wOo,db,f_e,AOo,LOo,mX,yOo,xOo,$Oo,cb,m_e,kOo,SOo,gX,ROo,POo,BOo,fb,g_e,NOo,IOo,hX,qOo,jOo,DOo,mb,h_e,GOo,OOo,pX,VOo,XOo,zOo,gb,p_e,QOo,WOo,_X,HOo,UOo,JOo,hb,__e,YOo,KOo,uX,ZOo,eVo,oVo,pb,u_e,rVo,tVo,bX,aVo,nVo,sVo,_b,b_e,lVo,iVo,vX,dVo,cVo,fVo,ub,v_e,mVo,gVo,FX,hVo,pVo,_Vo,bb,F_e,uVo,bVo,TX,vVo,FVo,TVo,vb,T_e,MVo,EVo,MX,CVo,wVo,AVo,Fb,M_e,LVo,yVo,EX,xVo,$Vo,kVo,Tb,E_e,SVo,RVo,CX,PVo,BVo,NVo,Mb,C_e,IVo,qVo,wX,jVo,DVo,GVo,Eb,w_e,OVo,VVo,AX,XVo,zVo,QVo,Cb,A_e,WVo,HVo,LX,UVo,JVo,YVo,wb,L_e,KVo,ZVo,yX,eXo,oXo,rXo,Ab,y_e,tXo,aXo,xX,nXo,sXo,lXo,Lb,x_e,iXo,dXo,$X,cXo,fXo,mXo,yb,$_e,gXo,hXo,kX,pXo,_Xo,uXo,xb,k_e,bXo,vXo,SX,FXo,TXo,MXo,$b,S_e,EXo,CXo,RX,wXo,AXo,LXo,kb,R_e,yXo,xXo,PX,$Xo,kXo,SXo,Sb,P_e,RXo,PXo,BX,BXo,NXo,IXo,Rb,B_e,qXo,jXo,NX,DXo,GXo,OXo,Pb,N_e,VXo,XXo,IX,zXo,QXo,WXo,Bb,I_e,HXo,UXo,qX,JXo,YXo,KXo,Nb,q_e,ZXo,ezo,jX,ozo,rzo,tzo,Ib,j_e,azo,nzo,DX,szo,lzo,izo,qb,D_e,dzo,czo,GX,fzo,mzo,gzo,jb,hzo,G_e,pzo,_zo,O_e,uzo,bzo,Db,TXe,ad,Gb,V_e,s8,vzo,X_e,Fzo,MXe,Bo,l8,Tzo,nd,Mzo,OX,Ezo,Czo,VX,wzo,Azo,Lzo,i8,yzo,z_e,xzo,$zo,kzo,gt,d8,Szo,Q_e,Rzo,Pzo,sd,Bzo,W_e,Nzo,Izo,XX,qzo,jzo,Dzo,Ob,Gzo,ro,c8,Ozo,H_e,Vzo,Xzo,Oa,zzo,U_e,Qzo,Wzo,J_e,Hzo,Uzo,Y_e,Jzo,Yzo,Kzo,Z,Vb,K_e,Zzo,eQo,zX,oQo,rQo,tQo,Xb,Z_e,aQo,nQo,QX,sQo,lQo,iQo,zb,eue,dQo,cQo,WX,fQo,mQo,gQo,Qb,oue,hQo,pQo,HX,_Qo,uQo,bQo,Wb,rue,vQo,FQo,UX,TQo,MQo,EQo,Hb,tue,CQo,wQo,JX,AQo,LQo,yQo,Ub,aue,xQo,$Qo,YX,kQo,SQo,RQo,Jb,nue,PQo,BQo,KX,NQo,IQo,qQo,Yb,sue,jQo,DQo,ZX,GQo,OQo,VQo,Kb,lue,XQo,zQo,ez,QQo,WQo,HQo,Zb,iue,UQo,JQo,oz,YQo,KQo,ZQo,ev,due,eWo,oWo,rz,rWo,tWo,aWo,ov,cue,nWo,sWo,tz,lWo,iWo,dWo,rv,fue,cWo,fWo,az,mWo,gWo,hWo,tv,mue,pWo,_Wo,nz,uWo,bWo,vWo,av,gue,FWo,TWo,sz,MWo,EWo,CWo,nv,hue,wWo,AWo,lz,LWo,yWo,xWo,sv,pue,$Wo,kWo,iz,SWo,RWo,PWo,lv,_ue,BWo,NWo,dz,IWo,qWo,jWo,iv,uue,DWo,GWo,cz,OWo,VWo,XWo,dv,bue,zWo,QWo,fz,WWo,HWo,UWo,cv,vue,JWo,YWo,mz,KWo,ZWo,eHo,fv,Fue,oHo,rHo,gz,tHo,aHo,nHo,mv,Tue,sHo,lHo,hz,iHo,dHo,cHo,gv,Mue,fHo,mHo,pz,gHo,hHo,pHo,hv,Eue,_Ho,uHo,_z,bHo,vHo,FHo,pv,Cue,THo,MHo,uz,EHo,CHo,wHo,_v,wue,AHo,LHo,bz,yHo,xHo,$Ho,uv,Aue,kHo,SHo,vz,RHo,PHo,BHo,bv,Lue,NHo,IHo,Fz,qHo,jHo,DHo,vv,GHo,yue,OHo,VHo,xue,XHo,zHo,Fv,EXe,ld,Tv,$ue,f8,QHo,kue,WHo,CXe,No,m8,HHo,id,UHo,Tz,JHo,YHo,Mz,KHo,ZHo,eUo,g8,oUo,Sue,rUo,tUo,aUo,ht,h8,nUo,Rue,sUo,lUo,dd,iUo,Pue,dUo,cUo,Ez,fUo,mUo,gUo,Mv,hUo,to,p8,pUo,Bue,_Uo,uUo,Va,bUo,Nue,vUo,FUo,Iue,TUo,MUo,que,EUo,CUo,wUo,Io,Ev,jue,AUo,LUo,Cz,yUo,xUo,$Uo,Cv,Due,kUo,SUo,wz,RUo,PUo,BUo,wv,Gue,NUo,IUo,Az,qUo,jUo,DUo,Av,Oue,GUo,OUo,Lz,VUo,XUo,zUo,Lv,Vue,QUo,WUo,yz,HUo,UUo,JUo,yv,Xue,YUo,KUo,xz,ZUo,eJo,oJo,xv,rJo,zue,tJo,aJo,Que,nJo,sJo,$v,wXe,cd,kv,Wue,_8,lJo,Hue,iJo,AXe,qo,u8,dJo,fd,cJo,$z,fJo,mJo,kz,gJo,hJo,pJo,b8,_Jo,Uue,uJo,bJo,vJo,pt,v8,FJo,Jue,TJo,MJo,md,EJo,Yue,CJo,wJo,Sz,AJo,LJo,yJo,Sv,xJo,ao,F8,$Jo,Kue,kJo,SJo,Xa,RJo,Zue,PJo,BJo,e1e,NJo,IJo,o1e,qJo,jJo,DJo,U,Rv,r1e,GJo,OJo,Rz,VJo,XJo,zJo,Pv,t1e,QJo,WJo,Pz,HJo,UJo,JJo,Bv,a1e,YJo,KJo,Bz,ZJo,eYo,oYo,Nv,n1e,rYo,tYo,Nz,aYo,nYo,sYo,Iv,s1e,lYo,iYo,Iz,dYo,cYo,fYo,qv,l1e,mYo,gYo,qz,hYo,pYo,_Yo,jv,i1e,uYo,bYo,jz,vYo,FYo,TYo,Dv,d1e,MYo,EYo,Dz,CYo,wYo,AYo,Gv,c1e,LYo,yYo,Gz,xYo,$Yo,kYo,Ov,f1e,SYo,RYo,Oz,PYo,BYo,NYo,Vv,m1e,IYo,qYo,Vz,jYo,DYo,GYo,Xv,g1e,OYo,VYo,Xz,XYo,zYo,QYo,zv,h1e,WYo,HYo,zz,UYo,JYo,YYo,Qv,p1e,KYo,ZYo,Qz,eKo,oKo,rKo,Wv,_1e,tKo,aKo,Wz,nKo,sKo,lKo,Hv,u1e,iKo,dKo,Hz,cKo,fKo,mKo,Uv,b1e,gKo,hKo,Uz,pKo,_Ko,uKo,Jv,v1e,bKo,vKo,Jz,FKo,TKo,MKo,Yv,F1e,EKo,CKo,Yz,wKo,AKo,LKo,Kv,T1e,yKo,xKo,Kz,$Ko,kKo,SKo,Zv,M1e,RKo,PKo,Zz,BKo,NKo,IKo,e3,E1e,qKo,jKo,eQ,DKo,GKo,OKo,o3,C1e,VKo,XKo,oQ,zKo,QKo,WKo,r3,w1e,HKo,UKo,rQ,JKo,YKo,KKo,t3,A1e,ZKo,eZo,tQ,oZo,rZo,tZo,a3,L1e,aZo,nZo,aQ,sZo,lZo,iZo,n3,y1e,dZo,cZo,nQ,fZo,mZo,gZo,s3,x1e,hZo,pZo,sQ,_Zo,uZo,bZo,l3,$1e,vZo,FZo,lQ,TZo,MZo,EZo,i3,k1e,CZo,wZo,iQ,AZo,LZo,yZo,d3,S1e,xZo,$Zo,dQ,kZo,SZo,RZo,c3,R1e,PZo,BZo,cQ,NZo,IZo,qZo,f3,P1e,jZo,DZo,fQ,GZo,OZo,VZo,m3,B1e,XZo,zZo,mQ,QZo,WZo,HZo,g3,N1e,UZo,JZo,gQ,YZo,KZo,ZZo,h3,I1e,eer,oer,hQ,rer,ter,aer,p3,ner,q1e,ser,ler,j1e,ier,der,_3,LXe,gd,u3,D1e,T8,cer,G1e,fer,yXe,jo,M8,mer,hd,ger,pQ,her,per,_Q,_er,uer,ber,E8,ver,O1e,Fer,Ter,Mer,_t,C8,Eer,V1e,Cer,wer,pd,Aer,X1e,Ler,yer,uQ,xer,$er,ker,b3,Ser,no,w8,Rer,z1e,Per,Ber,za,Ner,Q1e,Ier,qer,W1e,jer,Der,H1e,Ger,Oer,Ver,V,v3,U1e,Xer,zer,bQ,Qer,Wer,Her,F3,J1e,Uer,Jer,vQ,Yer,Ker,Zer,T3,Y1e,eor,oor,FQ,ror,tor,aor,M3,K1e,nor,sor,TQ,lor,ior,dor,E3,Z1e,cor,mor,MQ,gor,hor,por,C3,e4e,_or,uor,EQ,bor,vor,For,w3,o4e,Tor,Mor,CQ,Eor,Cor,wor,A3,r4e,Aor,Lor,wQ,yor,xor,$or,L3,t4e,kor,Sor,AQ,Ror,Por,Bor,y3,a4e,Nor,Ior,LQ,qor,jor,Dor,x3,n4e,Gor,Oor,yQ,Vor,Xor,zor,$3,s4e,Qor,Wor,xQ,Hor,Uor,Jor,k3,l4e,Yor,Kor,$Q,Zor,err,orr,S3,i4e,rrr,trr,kQ,arr,nrr,srr,R3,d4e,lrr,irr,SQ,drr,crr,frr,P3,c4e,mrr,grr,RQ,hrr,prr,_rr,B3,f4e,urr,brr,PQ,vrr,Frr,Trr,N3,m4e,Mrr,Err,BQ,Crr,wrr,Arr,I3,g4e,Lrr,yrr,NQ,xrr,$rr,krr,q3,h4e,Srr,Rrr,IQ,Prr,Brr,Nrr,j3,p4e,Irr,qrr,qQ,jrr,Drr,Grr,D3,_4e,Orr,Vrr,jQ,Xrr,zrr,Qrr,G3,u4e,Wrr,Hrr,DQ,Urr,Jrr,Yrr,O3,b4e,Krr,Zrr,GQ,etr,otr,rtr,V3,v4e,ttr,atr,OQ,ntr,str,ltr,X3,F4e,itr,dtr,VQ,ctr,ftr,mtr,z3,T4e,gtr,htr,XQ,ptr,_tr,utr,Q3,M4e,btr,vtr,zQ,Ftr,Ttr,Mtr,W3,E4e,Etr,Ctr,QQ,wtr,Atr,Ltr,H3,C4e,ytr,xtr,WQ,$tr,ktr,Str,U3,w4e,Rtr,Ptr,HQ,Btr,Ntr,Itr,J3,A4e,qtr,jtr,UQ,Dtr,Gtr,Otr,Y3,L4e,Vtr,Xtr,JQ,ztr,Qtr,Wtr,K3,y4e,Htr,Utr,YQ,Jtr,Ytr,Ktr,Z3,x4e,Ztr,ear,KQ,oar,rar,tar,e5,$4e,aar,nar,ZQ,sar,lar,iar,o5,k4e,dar,car,eW,far,mar,gar,r5,S4e,har,par,oW,_ar,uar,bar,t5,R4e,Far,Tar,rW,Mar,Ear,Car,a5,P4e,war,Aar,tW,Lar,yar,xar,n5,B4e,$ar,kar,aW,Sar,Rar,Par,s5,N4e,Bar,Nar,nW,Iar,qar,jar,l5,Dar,I4e,Gar,Oar,q4e,Var,Xar,i5,xXe,_d,d5,j4e,A8,zar,D4e,Qar,$Xe,Do,L8,War,ud,Har,sW,Uar,Jar,lW,Yar,Kar,Zar,y8,enr,G4e,onr,rnr,tnr,ut,x8,anr,O4e,nnr,snr,bd,lnr,V4e,inr,dnr,iW,cnr,fnr,mnr,c5,gnr,so,$8,hnr,X4e,pnr,_nr,Qa,unr,z4e,bnr,vnr,Q4e,Fnr,Tnr,W4e,Mnr,Enr,Cnr,H4e,f5,U4e,wnr,Anr,dW,Lnr,ynr,xnr,m5,$nr,J4e,knr,Snr,Y4e,Rnr,Pnr,g5,kXe,vd,h5,K4e,k8,Bnr,Z4e,Nnr,SXe,Go,S8,Inr,Fd,qnr,cW,jnr,Dnr,fW,Gnr,Onr,Vnr,R8,Xnr,e2e,znr,Qnr,Wnr,bt,P8,Hnr,o2e,Unr,Jnr,Td,Ynr,r2e,Knr,Znr,mW,esr,osr,rsr,p5,tsr,lo,B8,asr,t2e,nsr,ssr,Wa,lsr,a2e,isr,dsr,n2e,csr,fsr,s2e,msr,gsr,hsr,ve,_5,l2e,psr,_sr,gW,usr,bsr,vsr,u5,i2e,Fsr,Tsr,hW,Msr,Esr,Csr,b5,d2e,wsr,Asr,pW,Lsr,ysr,xsr,v5,c2e,$sr,ksr,_W,Ssr,Rsr,Psr,Hs,f2e,Bsr,Nsr,uW,Isr,qsr,bW,jsr,Dsr,Gsr,F5,m2e,Osr,Vsr,vW,Xsr,zsr,Qsr,Us,g2e,Wsr,Hsr,FW,Usr,Jsr,TW,Ysr,Ksr,Zsr,T5,h2e,elr,olr,MW,rlr,tlr,alr,vt,p2e,nlr,slr,EW,llr,ilr,CW,dlr,clr,wW,flr,mlr,glr,M5,_2e,hlr,plr,AW,_lr,ulr,blr,E5,u2e,vlr,Flr,LW,Tlr,Mlr,Elr,C5,b2e,Clr,wlr,yW,Alr,Llr,ylr,w5,v2e,xlr,$lr,xW,klr,Slr,Rlr,A5,F2e,Plr,Blr,$W,Nlr,Ilr,qlr,L5,T2e,jlr,Dlr,kW,Glr,Olr,Vlr,y5,M2e,Xlr,zlr,SW,Qlr,Wlr,Hlr,x5,Ulr,E2e,Jlr,Ylr,C2e,Klr,Zlr,$5,RXe,Md,k5,w2e,N8,eir,A2e,oir,PXe,Oo,I8,rir,Ed,tir,RW,air,nir,PW,sir,lir,iir,q8,dir,L2e,cir,fir,mir,Ft,j8,gir,y2e,hir,pir,Cd,_ir,x2e,uir,bir,BW,vir,Fir,Tir,S5,Mir,io,D8,Eir,$2e,Cir,wir,Ha,Air,k2e,Lir,yir,S2e,xir,$ir,R2e,kir,Sir,Rir,P2e,R5,B2e,Pir,Bir,NW,Nir,Iir,qir,P5,jir,N2e,Dir,Gir,I2e,Oir,Vir,B5,BXe,wd,N5,q2e,G8,Xir,j2e,zir,NXe,Vo,O8,Qir,Ad,Wir,IW,Hir,Uir,qW,Jir,Yir,Kir,V8,Zir,D2e,edr,odr,rdr,Tt,X8,tdr,G2e,adr,ndr,Ld,sdr,O2e,ldr,idr,jW,ddr,cdr,fdr,I5,mdr,co,z8,gdr,V2e,hdr,pdr,Ua,_dr,X2e,udr,bdr,z2e,vdr,Fdr,Q2e,Tdr,Mdr,Edr,W2e,q5,H2e,Cdr,wdr,DW,Adr,Ldr,ydr,j5,xdr,U2e,$dr,kdr,J2e,Sdr,Rdr,D5,IXe,yd,G5,Y2e,Q8,Pdr,K2e,Bdr,qXe,Xo,W8,Ndr,xd,Idr,GW,qdr,jdr,OW,Ddr,Gdr,Odr,H8,Vdr,Z2e,Xdr,zdr,Qdr,Mt,U8,Wdr,ebe,Hdr,Udr,$d,Jdr,obe,Ydr,Kdr,VW,Zdr,ecr,ocr,O5,rcr,fo,J8,tcr,rbe,acr,ncr,Ja,scr,tbe,lcr,icr,abe,dcr,ccr,nbe,fcr,mcr,gcr,Pe,V5,sbe,hcr,pcr,XW,_cr,ucr,bcr,X5,lbe,vcr,Fcr,zW,Tcr,Mcr,Ecr,z5,ibe,Ccr,wcr,QW,Acr,Lcr,ycr,Q5,dbe,xcr,$cr,WW,kcr,Scr,Rcr,W5,cbe,Pcr,Bcr,HW,Ncr,Icr,qcr,H5,fbe,jcr,Dcr,UW,Gcr,Ocr,Vcr,U5,mbe,Xcr,zcr,JW,Qcr,Wcr,Hcr,J5,gbe,Ucr,Jcr,YW,Ycr,Kcr,Zcr,Y5,hbe,efr,ofr,KW,rfr,tfr,afr,K5,nfr,pbe,sfr,lfr,_be,ifr,dfr,Z5,jXe,kd,eF,ube,Y8,cfr,bbe,ffr,DXe,zo,K8,mfr,Sd,gfr,ZW,hfr,pfr,eH,_fr,ufr,bfr,Z8,vfr,vbe,Ffr,Tfr,Mfr,Et,e9,Efr,Fbe,Cfr,wfr,Rd,Afr,Tbe,Lfr,yfr,oH,xfr,$fr,kfr,oF,Sfr,mo,o9,Rfr,Mbe,Pfr,Bfr,Ya,Nfr,Ebe,Ifr,qfr,Cbe,jfr,Dfr,wbe,Gfr,Ofr,Vfr,ot,rF,Abe,Xfr,zfr,rH,Qfr,Wfr,Hfr,tF,Lbe,Ufr,Jfr,tH,Yfr,Kfr,Zfr,aF,ybe,emr,omr,aH,rmr,tmr,amr,nF,xbe,nmr,smr,nH,lmr,imr,dmr,sF,$be,cmr,fmr,sH,mmr,gmr,hmr,lF,pmr,kbe,_mr,umr,Sbe,bmr,vmr,iF,GXe,Pd,dF,Rbe,r9,Fmr,Pbe,Tmr,OXe,Qo,t9,Mmr,Bd,Emr,lH,Cmr,wmr,iH,Amr,Lmr,ymr,a9,xmr,Bbe,$mr,kmr,Smr,Ct,n9,Rmr,Nbe,Pmr,Bmr,Nd,Nmr,Ibe,Imr,qmr,dH,jmr,Dmr,Gmr,cF,Omr,go,s9,Vmr,qbe,Xmr,zmr,Ka,Qmr,jbe,Wmr,Hmr,Dbe,Umr,Jmr,Gbe,Ymr,Kmr,Zmr,Le,fF,Obe,egr,ogr,cH,rgr,tgr,agr,mF,Vbe,ngr,sgr,fH,lgr,igr,dgr,gF,Xbe,cgr,fgr,mH,mgr,ggr,hgr,hF,zbe,pgr,_gr,gH,ugr,bgr,vgr,pF,Qbe,Fgr,Tgr,hH,Mgr,Egr,Cgr,_F,Wbe,wgr,Agr,pH,Lgr,ygr,xgr,uF,Hbe,$gr,kgr,_H,Sgr,Rgr,Pgr,bF,Ube,Bgr,Ngr,uH,Igr,qgr,jgr,vF,Jbe,Dgr,Ggr,bH,Ogr,Vgr,Xgr,FF,Ybe,zgr,Qgr,vH,Wgr,Hgr,Ugr,TF,Jgr,Kbe,Ygr,Kgr,Zbe,Zgr,ehr,MF,VXe,Id,EF,eve,l9,ohr,ove,rhr,XXe,Wo,i9,thr,qd,ahr,FH,nhr,shr,TH,lhr,ihr,dhr,d9,chr,rve,fhr,mhr,ghr,wt,c9,hhr,tve,phr,_hr,jd,uhr,ave,bhr,vhr,MH,Fhr,Thr,Mhr,CF,Ehr,ho,f9,Chr,nve,whr,Ahr,Za,Lhr,sve,yhr,xhr,lve,$hr,khr,ive,Shr,Rhr,Phr,m9,wF,dve,Bhr,Nhr,EH,Ihr,qhr,jhr,AF,cve,Dhr,Ghr,CH,Ohr,Vhr,Xhr,LF,zhr,fve,Qhr,Whr,mve,Hhr,Uhr,yF,zXe,Dd,xF,gve,g9,Jhr,hve,Yhr,QXe,Ho,h9,Khr,Gd,Zhr,wH,epr,opr,AH,rpr,tpr,apr,p9,npr,pve,spr,lpr,ipr,At,_9,dpr,_ve,cpr,fpr,Od,mpr,uve,gpr,hpr,LH,ppr,_pr,upr,$F,bpr,po,u9,vpr,bve,Fpr,Tpr,en,Mpr,vve,Epr,Cpr,Fve,wpr,Apr,Tve,Lpr,ypr,xpr,rt,kF,Mve,$pr,kpr,yH,Spr,Rpr,Ppr,SF,Eve,Bpr,Npr,xH,Ipr,qpr,jpr,RF,Cve,Dpr,Gpr,$H,Opr,Vpr,Xpr,PF,wve,zpr,Qpr,kH,Wpr,Hpr,Upr,BF,Ave,Jpr,Ypr,SH,Kpr,Zpr,e_r,NF,o_r,Lve,r_r,t_r,yve,a_r,n_r,IF,WXe,Vd,qF,xve,b9,s_r,$ve,l_r,HXe,Uo,v9,i_r,Xd,d_r,RH,c_r,f_r,PH,m_r,g_r,h_r,F9,p_r,kve,__r,u_r,b_r,Lt,T9,v_r,Sve,F_r,T_r,zd,M_r,Rve,E_r,C_r,BH,w_r,A_r,L_r,jF,y_r,_o,M9,x_r,Pve,$_r,k_r,on,S_r,Bve,R_r,P_r,Nve,B_r,N_r,Ive,I_r,q_r,j_r,Qd,DF,qve,D_r,G_r,NH,O_r,V_r,X_r,GF,jve,z_r,Q_r,IH,W_r,H_r,U_r,OF,Dve,J_r,Y_r,qH,K_r,Z_r,eur,VF,our,Gve,rur,tur,Ove,aur,nur,XF,UXe,Wd,zF,Vve,E9,sur,Xve,lur,JXe,Jo,C9,iur,Hd,dur,jH,cur,fur,DH,mur,gur,hur,w9,pur,zve,_ur,uur,bur,yt,A9,vur,Qve,Fur,Tur,Ud,Mur,Wve,Eur,Cur,GH,wur,Aur,Lur,QF,yur,uo,L9,xur,Hve,$ur,kur,rn,Sur,Uve,Rur,Pur,Jve,Bur,Nur,Yve,Iur,qur,jur,y9,WF,Kve,Dur,Gur,OH,Our,Vur,Xur,HF,Zve,zur,Qur,VH,Wur,Hur,Uur,UF,Jur,e3e,Yur,Kur,o3e,Zur,e1r,JF,YXe,Jd,YF,r3e,x9,o1r,t3e,r1r,KXe,Yo,$9,t1r,Yd,a1r,XH,n1r,s1r,zH,l1r,i1r,d1r,k9,c1r,a3e,f1r,m1r,g1r,xt,S9,h1r,n3e,p1r,_1r,Kd,u1r,s3e,b1r,v1r,QH,F1r,T1r,M1r,KF,E1r,bo,R9,C1r,l3e,w1r,A1r,tn,L1r,i3e,y1r,x1r,d3e,$1r,k1r,c3e,S1r,R1r,P1r,f3e,ZF,m3e,B1r,N1r,WH,I1r,q1r,j1r,e6,D1r,g3e,G1r,O1r,h3e,V1r,X1r,o6,ZXe,Zd,r6,p3e,P9,z1r,_3e,Q1r,eze,Ko,B9,W1r,ec,H1r,HH,U1r,J1r,UH,Y1r,K1r,Z1r,N9,e4r,u3e,o4r,r4r,t4r,$t,I9,a4r,b3e,n4r,s4r,oc,l4r,v3e,i4r,d4r,JH,c4r,f4r,m4r,t6,g4r,vo,q9,h4r,F3e,p4r,_4r,an,u4r,T3e,b4r,v4r,M3e,F4r,T4r,E3e,M4r,E4r,C4r,tt,a6,C3e,w4r,A4r,YH,L4r,y4r,x4r,n6,w3e,$4r,k4r,KH,S4r,R4r,P4r,s6,A3e,B4r,N4r,ZH,I4r,q4r,j4r,l6,L3e,D4r,G4r,eU,O4r,V4r,X4r,i6,y3e,z4r,Q4r,oU,W4r,H4r,U4r,d6,J4r,x3e,Y4r,K4r,$3e,Z4r,e2r,c6,oze,rc,f6,k3e,j9,o2r,S3e,r2r,rze,Zo,D9,t2r,tc,a2r,rU,n2r,s2r,tU,l2r,i2r,d2r,G9,c2r,R3e,f2r,m2r,g2r,kt,O9,h2r,P3e,p2r,_2r,ac,u2r,B3e,b2r,v2r,aU,F2r,T2r,M2r,m6,E2r,Fo,V9,C2r,N3e,w2r,A2r,nn,L2r,I3e,y2r,x2r,q3e,$2r,k2r,j3e,S2r,R2r,P2r,D3e,g6,G3e,B2r,N2r,nU,I2r,q2r,j2r,h6,D2r,O3e,G2r,O2r,V3e,V2r,X2r,p6,tze,nc,_6,X3e,X9,z2r,z3e,Q2r,aze,er,z9,W2r,sc,H2r,sU,U2r,J2r,lU,Y2r,K2r,Z2r,Q9,ebr,Q3e,obr,rbr,tbr,St,W9,abr,W3e,nbr,sbr,lc,lbr,H3e,ibr,dbr,iU,cbr,fbr,mbr,u6,gbr,xr,H9,hbr,U3e,pbr,_br,sn,ubr,J3e,bbr,vbr,Y3e,Fbr,Tbr,K3e,Mbr,Ebr,Cbr,q,b6,Z3e,wbr,Abr,dU,Lbr,ybr,xbr,v6,e5e,$br,kbr,cU,Sbr,Rbr,Pbr,F6,o5e,Bbr,Nbr,fU,Ibr,qbr,jbr,T6,r5e,Dbr,Gbr,mU,Obr,Vbr,Xbr,M6,t5e,zbr,Qbr,gU,Wbr,Hbr,Ubr,E6,a5e,Jbr,Ybr,hU,Kbr,Zbr,evr,C6,n5e,ovr,rvr,pU,tvr,avr,nvr,w6,s5e,svr,lvr,_U,ivr,dvr,cvr,A6,l5e,fvr,mvr,uU,gvr,hvr,pvr,L6,i5e,_vr,uvr,bU,bvr,vvr,Fvr,y6,d5e,Tvr,Mvr,vU,Evr,Cvr,wvr,x6,c5e,Avr,Lvr,FU,yvr,xvr,$vr,$6,f5e,kvr,Svr,TU,Rvr,Pvr,Bvr,k6,m5e,Nvr,Ivr,MU,qvr,jvr,Dvr,S6,g5e,Gvr,Ovr,EU,Vvr,Xvr,zvr,R6,h5e,Qvr,Wvr,CU,Hvr,Uvr,Jvr,P6,p5e,Yvr,Kvr,wU,Zvr,e3r,o3r,Js,_5e,r3r,t3r,AU,a3r,n3r,LU,s3r,l3r,i3r,B6,u5e,d3r,c3r,yU,f3r,m3r,g3r,N6,b5e,h3r,p3r,xU,_3r,u3r,b3r,I6,v5e,v3r,F3r,$U,T3r,M3r,E3r,q6,F5e,C3r,w3r,kU,A3r,L3r,y3r,j6,T5e,x3r,$3r,SU,k3r,S3r,R3r,D6,M5e,P3r,B3r,RU,N3r,I3r,q3r,G6,E5e,j3r,D3r,PU,G3r,O3r,V3r,O6,C5e,X3r,z3r,BU,Q3r,W3r,H3r,V6,w5e,U3r,J3r,NU,Y3r,K3r,Z3r,X6,A5e,e5r,o5r,IU,r5r,t5r,a5r,z6,L5e,n5r,s5r,qU,l5r,i5r,d5r,Q6,y5e,c5r,f5r,jU,m5r,g5r,h5r,W6,x5e,p5r,_5r,DU,u5r,b5r,v5r,H6,$5e,F5r,T5r,GU,M5r,E5r,C5r,U6,k5e,w5r,A5r,OU,L5r,y5r,x5r,J6,S5e,$5r,k5r,VU,S5r,R5r,P5r,Y6,R5e,B5r,N5r,XU,I5r,q5r,j5r,K6,P5e,D5r,G5r,zU,O5r,V5r,X5r,Z6,B5e,z5r,Q5r,QU,W5r,H5r,U5r,eT,N5e,J5r,Y5r,WU,K5r,Z5r,eFr,oT,I5e,oFr,rFr,HU,tFr,aFr,nFr,rT,q5e,sFr,lFr,UU,iFr,dFr,cFr,tT,j5e,fFr,mFr,JU,gFr,hFr,pFr,aT,D5e,_Fr,uFr,YU,bFr,vFr,FFr,nT,G5e,TFr,MFr,KU,EFr,CFr,wFr,sT,O5e,AFr,LFr,ZU,yFr,xFr,$Fr,lT,V5e,kFr,SFr,eJ,RFr,PFr,BFr,iT,X5e,NFr,IFr,oJ,qFr,jFr,DFr,dT,z5e,GFr,OFr,rJ,VFr,XFr,zFr,cT,Q5e,QFr,WFr,tJ,HFr,UFr,JFr,fT,W5e,YFr,KFr,aJ,ZFr,e6r,o6r,mT,H5e,r6r,t6r,nJ,a6r,n6r,s6r,gT,nze,ic,hT,U5e,U9,l6r,J5e,i6r,sze,or,J9,d6r,dc,c6r,sJ,f6r,m6r,lJ,g6r,h6r,p6r,Y9,_6r,Y5e,u6r,b6r,v6r,Rt,K9,F6r,K5e,T6r,M6r,cc,E6r,Z5e,C6r,w6r,iJ,A6r,L6r,y6r,pT,x6r,$r,Z9,$6r,eFe,k6r,S6r,ln,R6r,oFe,P6r,B6r,rFe,N6r,I6r,tFe,q6r,j6r,D6r,se,_T,aFe,G6r,O6r,dJ,V6r,X6r,z6r,uT,nFe,Q6r,W6r,cJ,H6r,U6r,J6r,bT,sFe,Y6r,K6r,fJ,Z6r,eTr,oTr,vT,lFe,rTr,tTr,mJ,aTr,nTr,sTr,FT,iFe,lTr,iTr,gJ,dTr,cTr,fTr,TT,dFe,mTr,gTr,hJ,hTr,pTr,_Tr,MT,cFe,uTr,bTr,pJ,vTr,FTr,TTr,ET,fFe,MTr,ETr,_J,CTr,wTr,ATr,CT,mFe,LTr,yTr,uJ,xTr,$Tr,kTr,wT,gFe,STr,RTr,bJ,PTr,BTr,NTr,AT,hFe,ITr,qTr,vJ,jTr,DTr,GTr,LT,pFe,OTr,VTr,FJ,XTr,zTr,QTr,yT,_Fe,WTr,HTr,TJ,UTr,JTr,YTr,xT,uFe,KTr,ZTr,MJ,eMr,oMr,rMr,$T,bFe,tMr,aMr,EJ,nMr,sMr,lMr,kT,vFe,iMr,dMr,CJ,cMr,fMr,mMr,ST,FFe,gMr,hMr,wJ,pMr,_Mr,uMr,RT,TFe,bMr,vMr,AJ,FMr,TMr,MMr,PT,MFe,EMr,CMr,LJ,wMr,AMr,LMr,BT,EFe,yMr,xMr,yJ,$Mr,kMr,SMr,NT,CFe,RMr,PMr,xJ,BMr,NMr,IMr,IT,wFe,qMr,jMr,$J,DMr,GMr,OMr,qT,AFe,VMr,XMr,kJ,zMr,QMr,WMr,jT,lze,fc,DT,LFe,ex,HMr,yFe,UMr,ize,rr,ox,JMr,mc,YMr,SJ,KMr,ZMr,RJ,eEr,oEr,rEr,rx,tEr,xFe,aEr,nEr,sEr,Pt,tx,lEr,$Fe,iEr,dEr,gc,cEr,kFe,fEr,mEr,PJ,gEr,hEr,pEr,GT,_Er,kr,ax,uEr,SFe,bEr,vEr,dn,FEr,RFe,TEr,MEr,PFe,EEr,CEr,BFe,wEr,AEr,LEr,Me,OT,NFe,yEr,xEr,BJ,$Er,kEr,SEr,VT,IFe,REr,PEr,NJ,BEr,NEr,IEr,XT,qFe,qEr,jEr,IJ,DEr,GEr,OEr,zT,jFe,VEr,XEr,qJ,zEr,QEr,WEr,QT,DFe,HEr,UEr,jJ,JEr,YEr,KEr,WT,GFe,ZEr,eCr,DJ,oCr,rCr,tCr,HT,OFe,aCr,nCr,GJ,sCr,lCr,iCr,UT,VFe,dCr,cCr,OJ,fCr,mCr,gCr,JT,XFe,hCr,pCr,VJ,_Cr,uCr,bCr,YT,zFe,vCr,FCr,XJ,TCr,MCr,ECr,KT,QFe,CCr,wCr,zJ,ACr,LCr,yCr,ZT,WFe,xCr,$Cr,QJ,kCr,SCr,RCr,eM,HFe,PCr,BCr,WJ,NCr,ICr,qCr,oM,UFe,jCr,DCr,HJ,GCr,OCr,VCr,rM,dze,hc,tM,JFe,nx,XCr,YFe,zCr,cze,tr,sx,QCr,pc,WCr,UJ,HCr,UCr,JJ,JCr,YCr,KCr,lx,ZCr,KFe,e0r,o0r,r0r,Bt,ix,t0r,ZFe,a0r,n0r,_c,s0r,e6e,l0r,i0r,YJ,d0r,c0r,f0r,aM,m0r,Sr,dx,g0r,o6e,h0r,p0r,cn,_0r,r6e,u0r,b0r,t6e,v0r,F0r,a6e,T0r,M0r,E0r,ar,nM,n6e,C0r,w0r,KJ,A0r,L0r,y0r,sM,s6e,x0r,$0r,ZJ,k0r,S0r,R0r,lM,l6e,P0r,B0r,eY,N0r,I0r,q0r,iM,i6e,j0r,D0r,oY,G0r,O0r,V0r,dM,d6e,X0r,z0r,rY,Q0r,W0r,H0r,cM,c6e,U0r,J0r,tY,Y0r,K0r,Z0r,fM,fze,uc,mM,f6e,cx,ewr,m6e,owr,mze,nr,fx,rwr,bc,twr,aY,awr,nwr,nY,swr,lwr,iwr,mx,dwr,g6e,cwr,fwr,mwr,Nt,gx,gwr,h6e,hwr,pwr,vc,_wr,p6e,uwr,bwr,sY,vwr,Fwr,Twr,gM,Mwr,Rr,hx,Ewr,_6e,Cwr,wwr,fn,Awr,u6e,Lwr,ywr,b6e,xwr,$wr,v6e,kwr,Swr,Rwr,ie,hM,F6e,Pwr,Bwr,lY,Nwr,Iwr,qwr,pM,T6e,jwr,Dwr,iY,Gwr,Owr,Vwr,_M,M6e,Xwr,zwr,dY,Qwr,Wwr,Hwr,uM,E6e,Uwr,Jwr,cY,Ywr,Kwr,Zwr,bM,C6e,eAr,oAr,fY,rAr,tAr,aAr,vM,w6e,nAr,sAr,mY,lAr,iAr,dAr,FM,A6e,cAr,fAr,gY,mAr,gAr,hAr,TM,L6e,pAr,_Ar,hY,uAr,bAr,vAr,MM,y6e,FAr,TAr,pY,MAr,EAr,CAr,EM,x6e,wAr,AAr,_Y,LAr,yAr,xAr,CM,$6e,$Ar,kAr,uY,SAr,RAr,PAr,wM,k6e,BAr,NAr,bY,IAr,qAr,jAr,AM,S6e,DAr,GAr,vY,OAr,VAr,XAr,LM,R6e,zAr,QAr,FY,WAr,HAr,UAr,yM,P6e,JAr,YAr,TY,KAr,ZAr,e7r,xM,B6e,o7r,r7r,MY,t7r,a7r,n7r,$M,N6e,s7r,l7r,EY,i7r,d7r,c7r,kM,I6e,f7r,m7r,CY,g7r,h7r,p7r,SM,q6e,_7r,u7r,wY,b7r,v7r,F7r,RM,j6e,T7r,M7r,AY,E7r,C7r,w7r,PM,gze,Fc,BM,D6e,px,A7r,G6e,L7r,hze,sr,_x,y7r,Tc,x7r,LY,$7r,k7r,yY,S7r,R7r,P7r,ux,B7r,O6e,N7r,I7r,q7r,It,bx,j7r,V6e,D7r,G7r,Mc,O7r,X6e,V7r,X7r,xY,z7r,Q7r,W7r,NM,H7r,Pr,vx,U7r,z6e,J7r,Y7r,mn,K7r,Q6e,Z7r,eLr,W6e,oLr,rLr,H6e,tLr,aLr,nLr,ye,IM,U6e,sLr,lLr,$Y,iLr,dLr,cLr,qM,J6e,fLr,mLr,kY,gLr,hLr,pLr,jM,Y6e,_Lr,uLr,SY,bLr,vLr,FLr,DM,K6e,TLr,MLr,RY,ELr,CLr,wLr,GM,Z6e,ALr,LLr,PY,yLr,xLr,$Lr,OM,eTe,kLr,SLr,BY,RLr,PLr,BLr,VM,oTe,NLr,ILr,NY,qLr,jLr,DLr,XM,rTe,GLr,OLr,IY,VLr,XLr,zLr,zM,tTe,QLr,WLr,qY,HLr,ULr,JLr,QM,aTe,YLr,KLr,jY,ZLr,eyr,oyr,WM,pze,Ec,HM,nTe,Fx,ryr,sTe,tyr,_ze,lr,Tx,ayr,Cc,nyr,DY,syr,lyr,GY,iyr,dyr,cyr,Mx,fyr,lTe,myr,gyr,hyr,qt,Ex,pyr,iTe,_yr,uyr,wc,byr,dTe,vyr,Fyr,OY,Tyr,Myr,Eyr,UM,Cyr,Br,Cx,wyr,cTe,Ayr,Lyr,gn,yyr,fTe,xyr,$yr,mTe,kyr,Syr,gTe,Ryr,Pyr,Byr,te,JM,hTe,Nyr,Iyr,VY,qyr,jyr,Dyr,YM,pTe,Gyr,Oyr,XY,Vyr,Xyr,zyr,KM,_Te,Qyr,Wyr,zY,Hyr,Uyr,Jyr,ZM,uTe,Yyr,Kyr,QY,Zyr,e8r,o8r,eE,bTe,r8r,t8r,WY,a8r,n8r,s8r,oE,vTe,l8r,i8r,HY,d8r,c8r,f8r,rE,FTe,m8r,g8r,UY,h8r,p8r,_8r,tE,TTe,u8r,b8r,JY,v8r,F8r,T8r,aE,MTe,M8r,E8r,YY,C8r,w8r,A8r,nE,ETe,L8r,y8r,KY,x8r,$8r,k8r,sE,CTe,S8r,R8r,ZY,P8r,B8r,N8r,lE,wTe,I8r,q8r,eK,j8r,D8r,G8r,iE,ATe,O8r,V8r,oK,X8r,z8r,Q8r,dE,LTe,W8r,H8r,rK,U8r,J8r,Y8r,cE,yTe,K8r,Z8r,tK,e9r,o9r,r9r,fE,xTe,t9r,a9r,aK,n9r,s9r,l9r,mE,$Te,i9r,d9r,nK,c9r,f9r,m9r,gE,kTe,g9r,h9r,sK,p9r,_9r,u9r,hE,STe,b9r,v9r,lK,F9r,T9r,M9r,pE,RTe,E9r,C9r,iK,w9r,A9r,L9r,_E,PTe,y9r,x9r,dK,$9r,k9r,S9r,uE,BTe,R9r,P9r,cK,B9r,N9r,I9r,bE,NTe,q9r,j9r,fK,D9r,G9r,O9r,vE,ITe,V9r,X9r,mK,z9r,Q9r,W9r,FE,qTe,H9r,U9r,gK,J9r,Y9r,K9r,TE,jTe,Z9r,exr,hK,oxr,rxr,txr,ME,uze,Ac,EE,DTe,wx,axr,GTe,nxr,bze,ir,Ax,sxr,Lc,lxr,pK,ixr,dxr,_K,cxr,fxr,mxr,Lx,gxr,OTe,hxr,pxr,_xr,jt,yx,uxr,VTe,bxr,vxr,yc,Fxr,XTe,Txr,Mxr,uK,Exr,Cxr,wxr,CE,Axr,Nr,xx,Lxr,zTe,yxr,xxr,hn,$xr,QTe,kxr,Sxr,WTe,Rxr,Pxr,HTe,Bxr,Nxr,Ixr,_e,wE,UTe,qxr,jxr,bK,Dxr,Gxr,Oxr,AE,JTe,Vxr,Xxr,vK,zxr,Qxr,Wxr,LE,YTe,Hxr,Uxr,FK,Jxr,Yxr,Kxr,yE,KTe,Zxr,e$r,TK,o$r,r$r,t$r,xE,ZTe,a$r,n$r,MK,s$r,l$r,i$r,$E,eMe,d$r,c$r,EK,f$r,m$r,g$r,kE,oMe,h$r,p$r,CK,_$r,u$r,b$r,SE,rMe,v$r,F$r,wK,T$r,M$r,E$r,RE,tMe,C$r,w$r,AK,A$r,L$r,y$r,PE,aMe,x$r,$$r,LK,k$r,S$r,R$r,BE,nMe,P$r,B$r,yK,N$r,I$r,q$r,NE,sMe,j$r,D$r,xK,G$r,O$r,V$r,IE,lMe,X$r,z$r,$K,Q$r,W$r,H$r,qE,iMe,U$r,J$r,kK,Y$r,K$r,Z$r,jE,dMe,ekr,okr,SK,rkr,tkr,akr,DE,cMe,nkr,skr,RK,lkr,ikr,dkr,GE,fMe,ckr,fkr,PK,mkr,gkr,hkr,OE,vze,xc,VE,mMe,$x,pkr,gMe,_kr,Fze,dr,kx,ukr,$c,bkr,BK,vkr,Fkr,NK,Tkr,Mkr,Ekr,Sx,Ckr,hMe,wkr,Akr,Lkr,Dt,Rx,ykr,pMe,xkr,$kr,kc,kkr,_Me,Skr,Rkr,IK,Pkr,Bkr,Nkr,XE,Ikr,Ir,Px,qkr,uMe,jkr,Dkr,pn,Gkr,bMe,Okr,Vkr,vMe,Xkr,zkr,FMe,Qkr,Wkr,Hkr,Bx,zE,TMe,Ukr,Jkr,qK,Ykr,Kkr,Zkr,QE,MMe,eSr,oSr,jK,rSr,tSr,aSr,WE,Tze,Sc,HE,EMe,Nx,nSr,CMe,sSr,Mze,cr,Ix,lSr,Rc,iSr,DK,dSr,cSr,GK,fSr,mSr,gSr,qx,hSr,wMe,pSr,_Sr,uSr,Gt,jx,bSr,AMe,vSr,FSr,Pc,TSr,LMe,MSr,ESr,OK,CSr,wSr,ASr,UE,LSr,qr,Dx,ySr,yMe,xSr,$Sr,_n,kSr,xMe,SSr,RSr,$Me,PSr,BSr,kMe,NSr,ISr,qSr,SMe,JE,RMe,jSr,DSr,VK,GSr,OSr,VSr,YE,Eze,Bc,KE,PMe,Gx,XSr,BMe,zSr,Cze,fr,Ox,QSr,Nc,WSr,XK,HSr,USr,zK,JSr,YSr,KSr,Vx,ZSr,NMe,eRr,oRr,rRr,Ot,Xx,tRr,IMe,aRr,nRr,Ic,sRr,qMe,lRr,iRr,QK,dRr,cRr,fRr,ZE,mRr,jr,zx,gRr,jMe,hRr,pRr,un,_Rr,DMe,uRr,bRr,GMe,vRr,FRr,OMe,TRr,MRr,ERr,de,eC,VMe,CRr,wRr,WK,ARr,LRr,yRr,oC,XMe,xRr,$Rr,HK,kRr,SRr,RRr,rC,zMe,PRr,BRr,UK,NRr,IRr,qRr,tC,QMe,jRr,DRr,JK,GRr,ORr,VRr,aC,WMe,XRr,zRr,YK,QRr,WRr,HRr,nC,HMe,URr,JRr,KK,YRr,KRr,ZRr,sC,UMe,ePr,oPr,ZK,rPr,tPr,aPr,lC,JMe,nPr,sPr,eZ,lPr,iPr,dPr,iC,YMe,cPr,fPr,oZ,mPr,gPr,hPr,dC,KMe,pPr,_Pr,rZ,uPr,bPr,vPr,cC,ZMe,FPr,TPr,tZ,MPr,EPr,CPr,fC,eEe,wPr,APr,aZ,LPr,yPr,xPr,mC,oEe,$Pr,kPr,nZ,SPr,RPr,PPr,gC,rEe,BPr,NPr,sZ,IPr,qPr,jPr,hC,tEe,DPr,GPr,lZ,OPr,VPr,XPr,pC,aEe,zPr,QPr,iZ,WPr,HPr,UPr,_C,nEe,JPr,YPr,dZ,KPr,ZPr,eBr,uC,sEe,oBr,rBr,cZ,tBr,aBr,nBr,bC,lEe,sBr,lBr,fZ,iBr,dBr,cBr,vC,iEe,fBr,mBr,mZ,gBr,hBr,pBr,FC,wze,qc,TC,dEe,Qx,_Br,cEe,uBr,Aze,mr,Wx,bBr,jc,vBr,gZ,FBr,TBr,hZ,MBr,EBr,CBr,Hx,wBr,fEe,ABr,LBr,yBr,Vt,Ux,xBr,mEe,$Br,kBr,Dc,SBr,gEe,RBr,PBr,pZ,BBr,NBr,IBr,MC,qBr,Dr,Jx,jBr,hEe,DBr,GBr,bn,OBr,pEe,VBr,XBr,_Ee,zBr,QBr,uEe,WBr,HBr,UBr,ce,EC,bEe,JBr,YBr,_Z,KBr,ZBr,eNr,CC,vEe,oNr,rNr,uZ,tNr,aNr,nNr,wC,FEe,sNr,lNr,bZ,iNr,dNr,cNr,AC,TEe,fNr,mNr,vZ,gNr,hNr,pNr,LC,MEe,_Nr,uNr,FZ,bNr,vNr,FNr,yC,EEe,TNr,MNr,TZ,ENr,CNr,wNr,xC,CEe,ANr,LNr,MZ,yNr,xNr,$Nr,$C,wEe,kNr,SNr,EZ,RNr,PNr,BNr,kC,AEe,NNr,INr,CZ,qNr,jNr,DNr,SC,LEe,GNr,ONr,wZ,VNr,XNr,zNr,RC,yEe,QNr,WNr,AZ,HNr,UNr,JNr,PC,xEe,YNr,KNr,LZ,ZNr,eIr,oIr,BC,$Ee,rIr,tIr,yZ,aIr,nIr,sIr,NC,kEe,lIr,iIr,xZ,dIr,cIr,fIr,IC,SEe,mIr,gIr,$Z,hIr,pIr,_Ir,qC,REe,uIr,bIr,kZ,vIr,FIr,TIr,jC,PEe,MIr,EIr,SZ,CIr,wIr,AIr,DC,BEe,LIr,yIr,RZ,xIr,$Ir,kIr,GC,NEe,SIr,RIr,PZ,PIr,BIr,NIr,OC,IEe,IIr,qIr,BZ,jIr,DIr,GIr,VC,Lze,Gc,XC,qEe,Yx,OIr,jEe,VIr,yze,gr,Kx,XIr,Oc,zIr,NZ,QIr,WIr,IZ,HIr,UIr,JIr,Zx,YIr,DEe,KIr,ZIr,eqr,Xt,e$,oqr,GEe,rqr,tqr,Vc,aqr,OEe,nqr,sqr,qZ,lqr,iqr,dqr,zC,cqr,Gr,o$,fqr,VEe,mqr,gqr,vn,hqr,XEe,pqr,_qr,zEe,uqr,bqr,QEe,vqr,Fqr,Tqr,WEe,QC,HEe,Mqr,Eqr,jZ,Cqr,wqr,Aqr,WC,xze,Xc,HC,UEe,r$,Lqr,JEe,yqr,$ze,hr,t$,xqr,zc,$qr,DZ,kqr,Sqr,GZ,Rqr,Pqr,Bqr,a$,Nqr,YEe,Iqr,qqr,jqr,zt,n$,Dqr,KEe,Gqr,Oqr,Qc,Vqr,ZEe,Xqr,zqr,OZ,Qqr,Wqr,Hqr,UC,Uqr,Or,s$,Jqr,eCe,Yqr,Kqr,Fn,Zqr,oCe,ejr,ojr,rCe,rjr,tjr,tCe,ajr,njr,sjr,aCe,JC,nCe,ljr,ijr,VZ,djr,cjr,fjr,YC,kze,Wc,KC,sCe,l$,mjr,lCe,gjr,Sze,pr,i$,hjr,Hc,pjr,XZ,_jr,ujr,zZ,bjr,vjr,Fjr,d$,Tjr,iCe,Mjr,Ejr,Cjr,Qt,c$,wjr,dCe,Ajr,Ljr,Uc,yjr,cCe,xjr,$jr,QZ,kjr,Sjr,Rjr,ZC,Pjr,Vr,f$,Bjr,fCe,Njr,Ijr,Tn,qjr,mCe,jjr,Djr,gCe,Gjr,Ojr,hCe,Vjr,Xjr,zjr,oe,e0,pCe,Qjr,Wjr,WZ,Hjr,Ujr,Jjr,o0,_Ce,Yjr,Kjr,HZ,Zjr,eDr,oDr,r0,uCe,rDr,tDr,UZ,aDr,nDr,sDr,t0,bCe,lDr,iDr,JZ,dDr,cDr,fDr,a0,vCe,mDr,gDr,YZ,hDr,pDr,_Dr,n0,FCe,uDr,bDr,KZ,vDr,FDr,TDr,s0,TCe,MDr,EDr,ZZ,CDr,wDr,ADr,l0,MCe,LDr,yDr,eee,xDr,$Dr,kDr,i0,ECe,SDr,RDr,oee,PDr,BDr,NDr,d0,CCe,IDr,qDr,ree,jDr,DDr,GDr,c0,wCe,ODr,VDr,tee,XDr,zDr,QDr,f0,ACe,WDr,HDr,aee,UDr,JDr,YDr,m0,LCe,KDr,ZDr,nee,eGr,oGr,rGr,g0,yCe,tGr,aGr,see,nGr,sGr,lGr,h0,xCe,iGr,dGr,lee,cGr,fGr,mGr,p0,$Ce,gGr,hGr,iee,pGr,_Gr,uGr,_0,kCe,bGr,vGr,dee,FGr,TGr,MGr,u0,SCe,EGr,CGr,cee,wGr,AGr,LGr,b0,RCe,yGr,xGr,fee,$Gr,kGr,SGr,v0,PCe,RGr,PGr,mee,BGr,NGr,IGr,F0,BCe,qGr,jGr,gee,DGr,GGr,OGr,T0,NCe,VGr,XGr,hee,zGr,QGr,WGr,M0,ICe,HGr,UGr,pee,JGr,YGr,KGr,E0,qCe,ZGr,eOr,_ee,oOr,rOr,tOr,C0,jCe,aOr,nOr,uee,sOr,lOr,iOr,w0,DCe,dOr,cOr,bee,fOr,mOr,gOr,A0,GCe,hOr,pOr,vee,_Or,uOr,bOr,L0,Rze,Jc,y0,OCe,m$,vOr,VCe,FOr,Pze,_r,g$,TOr,Yc,MOr,Fee,EOr,COr,Tee,wOr,AOr,LOr,h$,yOr,XCe,xOr,$Or,kOr,Wt,p$,SOr,zCe,ROr,POr,Kc,BOr,QCe,NOr,IOr,Mee,qOr,jOr,DOr,x0,GOr,Xr,_$,OOr,WCe,VOr,XOr,Mn,zOr,HCe,QOr,WOr,UCe,HOr,UOr,JCe,JOr,YOr,KOr,xe,$0,YCe,ZOr,eVr,Eee,oVr,rVr,tVr,k0,KCe,aVr,nVr,Cee,sVr,lVr,iVr,S0,ZCe,dVr,cVr,wee,fVr,mVr,gVr,R0,e0e,hVr,pVr,Aee,_Vr,uVr,bVr,P0,o0e,vVr,FVr,Lee,TVr,MVr,EVr,B0,r0e,CVr,wVr,yee,AVr,LVr,yVr,N0,t0e,xVr,$Vr,xee,kVr,SVr,RVr,I0,a0e,PVr,BVr,$ee,NVr,IVr,qVr,q0,n0e,jVr,DVr,kee,GVr,OVr,VVr,j0,s0e,XVr,zVr,See,QVr,WVr,HVr,D0,Bze,Zc,G0,l0e,u$,UVr,i0e,JVr,Nze,ur,b$,YVr,ef,KVr,Ree,ZVr,eXr,Pee,oXr,rXr,tXr,v$,aXr,d0e,nXr,sXr,lXr,Ht,F$,iXr,c0e,dXr,cXr,of,fXr,f0e,mXr,gXr,Bee,hXr,pXr,_Xr,O0,uXr,zr,T$,bXr,m0e,vXr,FXr,En,TXr,g0e,MXr,EXr,h0e,CXr,wXr,p0e,AXr,LXr,yXr,Ee,V0,_0e,xXr,$Xr,Nee,kXr,SXr,RXr,X0,u0e,PXr,BXr,Iee,NXr,IXr,qXr,z0,b0e,jXr,DXr,qee,GXr,OXr,VXr,Q0,v0e,XXr,zXr,jee,QXr,WXr,HXr,W0,F0e,UXr,JXr,Dee,YXr,KXr,ZXr,H0,T0e,ezr,ozr,Gee,rzr,tzr,azr,U0,M0e,nzr,szr,Oee,lzr,izr,dzr,J0,E0e,czr,fzr,Vee,mzr,gzr,hzr,Y0,C0e,pzr,_zr,Xee,uzr,bzr,vzr,K0,w0e,Fzr,Tzr,zee,Mzr,Ezr,Czr,Z0,A0e,wzr,Azr,Qee,Lzr,yzr,xzr,ew,L0e,$zr,kzr,Wee,Szr,Rzr,Pzr,ow,y0e,Bzr,Nzr,Hee,Izr,qzr,jzr,rw,Ize,rf,tw,x0e,M$,Dzr,$0e,Gzr,qze,br,E$,Ozr,tf,Vzr,Uee,Xzr,zzr,Jee,Qzr,Wzr,Hzr,C$,Uzr,k0e,Jzr,Yzr,Kzr,Ut,w$,Zzr,S0e,eQr,oQr,af,rQr,R0e,tQr,aQr,Yee,nQr,sQr,lQr,aw,iQr,Qr,A$,dQr,P0e,cQr,fQr,Cn,mQr,B0e,gQr,hQr,N0e,pQr,_Qr,I0e,uQr,bQr,vQr,$e,nw,q0e,FQr,TQr,Kee,MQr,EQr,CQr,sw,j0e,wQr,AQr,Zee,LQr,yQr,xQr,lw,D0e,$Qr,kQr,eoe,SQr,RQr,PQr,iw,G0e,BQr,NQr,ooe,IQr,qQr,jQr,dw,O0e,DQr,GQr,roe,OQr,VQr,XQr,cw,V0e,zQr,QQr,toe,WQr,HQr,UQr,fw,X0e,JQr,YQr,aoe,KQr,ZQr,eWr,mw,z0e,oWr,rWr,noe,tWr,aWr,nWr,gw,Q0e,sWr,lWr,soe,iWr,dWr,cWr,hw,W0e,fWr,mWr,loe,gWr,hWr,pWr,pw,jze,nf,_w,H0e,L$,_Wr,U0e,uWr,Dze,vr,y$,bWr,sf,vWr,ioe,FWr,TWr,doe,MWr,EWr,CWr,x$,wWr,J0e,AWr,LWr,yWr,Jt,$$,xWr,Y0e,$Wr,kWr,lf,SWr,K0e,RWr,PWr,coe,BWr,NWr,IWr,uw,qWr,Wr,k$,jWr,Z0e,DWr,GWr,wn,OWr,ewe,VWr,XWr,owe,zWr,QWr,rwe,WWr,HWr,UWr,ke,bw,twe,JWr,YWr,foe,KWr,ZWr,eHr,vw,awe,oHr,rHr,moe,tHr,aHr,nHr,Fw,nwe,sHr,lHr,goe,iHr,dHr,cHr,Tw,swe,fHr,mHr,hoe,gHr,hHr,pHr,Mw,lwe,_Hr,uHr,poe,bHr,vHr,FHr,Ew,iwe,THr,MHr,_oe,EHr,CHr,wHr,Cw,dwe,AHr,LHr,uoe,yHr,xHr,$Hr,ww,cwe,kHr,SHr,boe,RHr,PHr,BHr,Aw,fwe,NHr,IHr,voe,qHr,jHr,DHr,Lw,mwe,GHr,OHr,Foe,VHr,XHr,zHr,yw,Gze,df,xw,gwe,S$,QHr,hwe,WHr,Oze,Fr,R$,HHr,cf,UHr,Toe,JHr,YHr,Moe,KHr,ZHr,eUr,P$,oUr,pwe,rUr,tUr,aUr,Yt,B$,nUr,_we,sUr,lUr,ff,iUr,uwe,dUr,cUr,Eoe,fUr,mUr,gUr,$w,hUr,Hr,N$,pUr,bwe,_Ur,uUr,An,bUr,vwe,vUr,FUr,Fwe,TUr,MUr,Twe,EUr,CUr,wUr,Se,kw,Mwe,AUr,LUr,Coe,yUr,xUr,$Ur,Sw,Ewe,kUr,SUr,woe,RUr,PUr,BUr,Rw,Cwe,NUr,IUr,Aoe,qUr,jUr,DUr,Pw,wwe,GUr,OUr,Loe,VUr,XUr,zUr,Bw,Awe,QUr,WUr,yoe,HUr,UUr,JUr,Nw,Lwe,YUr,KUr,xoe,ZUr,eJr,oJr,Iw,ywe,rJr,tJr,$oe,aJr,nJr,sJr,qw,xwe,lJr,iJr,koe,dJr,cJr,fJr,jw,$we,mJr,gJr,Soe,hJr,pJr,_Jr,Dw,kwe,uJr,bJr,Roe,vJr,FJr,TJr,Gw,Vze,mf,Ow,Swe,I$,MJr,Rwe,EJr,Xze,Tr,q$,CJr,gf,wJr,Poe,AJr,LJr,Boe,yJr,xJr,$Jr,j$,kJr,Pwe,SJr,RJr,PJr,Kt,D$,BJr,Bwe,NJr,IJr,hf,qJr,Nwe,jJr,DJr,Noe,GJr,OJr,VJr,Vw,XJr,Ur,G$,zJr,Iwe,QJr,WJr,Ln,HJr,qwe,UJr,JJr,jwe,YJr,KJr,Dwe,ZJr,eYr,oYr,Re,Xw,Gwe,rYr,tYr,Ioe,aYr,nYr,sYr,zw,Owe,lYr,iYr,qoe,dYr,cYr,fYr,Qw,Vwe,mYr,gYr,joe,hYr,pYr,_Yr,Ww,Xwe,uYr,bYr,Doe,vYr,FYr,TYr,Hw,zwe,MYr,EYr,Goe,CYr,wYr,AYr,Uw,Qwe,LYr,yYr,Ooe,xYr,$Yr,kYr,Jw,Wwe,SYr,RYr,Voe,PYr,BYr,NYr,Yw,Hwe,IYr,qYr,Xoe,jYr,DYr,GYr,Kw,Uwe,OYr,VYr,zoe,XYr,zYr,QYr,Zw,Jwe,WYr,HYr,Qoe,UYr,JYr,YYr,eA,zze,pf,oA,Ywe,O$,KYr,Kwe,ZYr,Qze,Mr,V$,eKr,_f,oKr,Woe,rKr,tKr,Hoe,aKr,nKr,sKr,X$,lKr,Zwe,iKr,dKr,cKr,Zt,z$,fKr,eAe,mKr,gKr,uf,hKr,oAe,pKr,_Kr,Uoe,uKr,bKr,vKr,rA,FKr,Jr,Q$,TKr,rAe,MKr,EKr,yn,CKr,tAe,wKr,AKr,aAe,LKr,yKr,nAe,xKr,$Kr,kKr,Ve,tA,sAe,SKr,RKr,Joe,PKr,BKr,NKr,aA,lAe,IKr,qKr,Yoe,jKr,DKr,GKr,nA,iAe,OKr,VKr,Koe,XKr,zKr,QKr,sA,dAe,WKr,HKr,Zoe,UKr,JKr,YKr,lA,cAe,KKr,ZKr,ere,eZr,oZr,rZr,iA,fAe,tZr,aZr,ore,nZr,sZr,lZr,dA,mAe,iZr,dZr,rre,cZr,fZr,mZr,cA,gAe,gZr,hZr,tre,pZr,_Zr,uZr,fA,Wze,bf,mA,hAe,W$,bZr,pAe,vZr,Hze,Er,H$,FZr,vf,TZr,are,MZr,EZr,nre,CZr,wZr,AZr,U$,LZr,_Ae,yZr,xZr,$Zr,ea,J$,kZr,uAe,SZr,RZr,Ff,PZr,bAe,BZr,NZr,sre,IZr,qZr,jZr,gA,DZr,Yr,Y$,GZr,vAe,OZr,VZr,xn,XZr,FAe,zZr,QZr,TAe,WZr,HZr,MAe,UZr,JZr,YZr,Xe,hA,EAe,KZr,ZZr,lre,eet,oet,ret,pA,CAe,tet,aet,ire,net,set,iet,_A,wAe,det,cet,dre,fet,met,get,uA,AAe,het,pet,cre,_et,uet,bet,bA,LAe,vet,Fet,fre,Tet,Met,Eet,vA,yAe,Cet,wet,mre,Aet,Let,yet,FA,xAe,xet,$et,gre,ket,Set,Ret,TA,$Ae,Pet,Bet,hre,Net,Iet,qet,MA,Uze,Tf,EA,kAe,K$,jet,SAe,Det,Jze,Cr,Z$,Get,Mf,Oet,pre,Vet,Xet,_re,zet,Qet,Wet,ek,Het,RAe,Uet,Jet,Yet,oa,ok,Ket,PAe,Zet,eot,Ef,oot,BAe,rot,tot,ure,aot,not,sot,CA,lot,Kr,rk,iot,NAe,dot,cot,$n,fot,IAe,mot,got,qAe,hot,pot,jAe,_ot,uot,bot,DAe,wA,GAe,vot,Fot,bre,Tot,Mot,Eot,AA,Yze,Cf,LA,OAe,tk,Cot,VAe,wot,Kze,wr,ak,Aot,wf,Lot,vre,yot,xot,Fre,$ot,kot,Sot,nk,Rot,XAe,Pot,Bot,Not,ra,sk,Iot,zAe,qot,jot,Af,Dot,QAe,Got,Oot,Tre,Vot,Xot,zot,yA,Qot,Zr,lk,Wot,WAe,Hot,Uot,kn,Jot,HAe,Yot,Kot,UAe,Zot,ert,JAe,ort,rrt,trt,ik,xA,YAe,art,nrt,Mre,srt,lrt,irt,$A,KAe,drt,crt,Ere,frt,mrt,grt,kA,Zze,Lf,SA,ZAe,dk,hrt,e7e,prt,eQe,Ar,ck,_rt,yf,urt,Cre,brt,vrt,wre,Frt,Trt,Mrt,fk,Ert,o7e,Crt,wrt,Art,ta,mk,Lrt,r7e,yrt,xrt,xf,$rt,t7e,krt,Srt,Are,Rrt,Prt,Brt,RA,Nrt,et,gk,Irt,a7e,qrt,jrt,Sn,Drt,n7e,Grt,Ort,s7e,Vrt,Xrt,l7e,zrt,Qrt,Wrt,i7e,PA,d7e,Hrt,Urt,Lre,Jrt,Yrt,Krt,BA,oQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ay=new re({}),ny=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Zrt({props:{warning:!0,$$slots:{default:[kQt]},$$scope:{ctx:$}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L610"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L756"}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L403"}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L616"}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pp=new Zrt({props:{$$slots:{default:[PQt]},$$scope:{ctx:$}}}),_p=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L89"}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L103"}}),Ip=new Zrt({props:{$$slots:{default:[NQt]},$$scope:{ctx:$}}}),qp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L256"}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L782"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Gp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),By=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L789"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L804"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L811"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L818"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),F2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L827"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L872"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L879"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),_8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L865"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L836"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L843"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L888"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),N8=new re({}),I8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L927"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L854"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Q8=new re({}),W8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L934"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Y8=new re({}),K8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L957"}}),e9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),r9=new re({}),t9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L941"}}),n9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),l9=new re({}),i9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L948"}}),c9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L966"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),b9=new re({}),v9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L973"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),E9=new re({}),C9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L920"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L895"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L902"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L911"}}),O9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L527"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),$x=new re({}),kx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L534"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),Nx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),e$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L543"}}),n$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),I$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),O$=new re({}),V$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),W$=new re({}),H$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),J$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),K$=new re({}),Z$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ok=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),tk=new re({}),ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),sk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),ey=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),oy=o("AutoConfig"),Bn=o(", "),Nn=a("a"),ry=o("AutoModel"),$i=o(`, and
`),In=a("a"),ty=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),PS=o("will create a model that is an instance of "),Si=a("a"),BS=o("BertModel"),NS=o("."),Co=l(),Ra=a("p"),IS=o("There is one class of "),Nf=a("code"),qS=o("AutoModel"),fHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),JVe=l(),Ri=a("h2"),If=a("a"),Mae=a("span"),F(ay.$$.fragment),mHe=l(),Eae=a("span"),gHe=o("Extending the Auto Classes"),YVe=l(),qn=a("p"),hHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cae=a("code"),pHe=o("NewModel"),_He=o(", make sure you have a "),wae=a("code"),uHe=o("NewModelConfig"),bHe=o(` then you can add those to the auto
classes like this:`),KVe=l(),F(ny.$$.fragment),ZVe=l(),jS=a("p"),vHe=o("You will then be able to use the auto classes like you would usually do!"),eXe=l(),F(qf.$$.fragment),oXe=l(),Pi=a("h2"),jf=a("a"),Aae=a("span"),F(sy.$$.fragment),FHe=l(),Lae=a("span"),THe=o("AutoConfig"),rXe=l(),wo=a("div"),F(ly.$$.fragment),MHe=l(),iy=a("p"),EHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),DS=a("a"),CHe=o("from_pretrained()"),wHe=o(" class method."),AHe=l(),dy=a("p"),LHe=o("This class cannot be instantiated directly using "),yae=a("code"),yHe=o("__init__()"),xHe=o(" (throws an error)."),$He=l(),Lr=a("div"),F(cy.$$.fragment),kHe=l(),xae=a("p"),SHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),RHe=l(),Bi=a("p"),PHe=o("The configuration class to instantiate is selected based on the "),$ae=a("code"),BHe=o("model_type"),NHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kae=a("code"),IHe=o("pretrained_model_name_or_path"),qHe=o(":"),jHe=l(),A=a("ul"),Df=a("li"),Sae=a("strong"),DHe=o("albert"),GHe=o(" \u2014 "),GS=a("a"),OHe=o("AlbertConfig"),VHe=o(" (ALBERT model)"),XHe=l(),Gf=a("li"),Rae=a("strong"),zHe=o("bart"),QHe=o(" \u2014 "),OS=a("a"),WHe=o("BartConfig"),HHe=o(" (BART model)"),UHe=l(),Of=a("li"),Pae=a("strong"),JHe=o("beit"),YHe=o(" \u2014 "),VS=a("a"),KHe=o("BeitConfig"),ZHe=o(" (BEiT model)"),eUe=l(),Vf=a("li"),Bae=a("strong"),oUe=o("bert"),rUe=o(" \u2014 "),XS=a("a"),tUe=o("BertConfig"),aUe=o(" (BERT model)"),nUe=l(),Xf=a("li"),Nae=a("strong"),sUe=o("bert-generation"),lUe=o(" \u2014 "),zS=a("a"),iUe=o("BertGenerationConfig"),dUe=o(" (Bert Generation model)"),cUe=l(),zf=a("li"),Iae=a("strong"),fUe=o("big_bird"),mUe=o(" \u2014 "),QS=a("a"),gUe=o("BigBirdConfig"),hUe=o(" (BigBird model)"),pUe=l(),Qf=a("li"),qae=a("strong"),_Ue=o("bigbird_pegasus"),uUe=o(" \u2014 "),WS=a("a"),bUe=o("BigBirdPegasusConfig"),vUe=o(" (BigBird-Pegasus model)"),FUe=l(),Wf=a("li"),jae=a("strong"),TUe=o("blenderbot"),MUe=o(" \u2014 "),HS=a("a"),EUe=o("BlenderbotConfig"),CUe=o(" (Blenderbot model)"),wUe=l(),Hf=a("li"),Dae=a("strong"),AUe=o("blenderbot-small"),LUe=o(" \u2014 "),US=a("a"),yUe=o("BlenderbotSmallConfig"),xUe=o(" (BlenderbotSmall model)"),$Ue=l(),Uf=a("li"),Gae=a("strong"),kUe=o("bloom"),SUe=o(" \u2014 "),JS=a("a"),RUe=o("BloomConfig"),PUe=o(" (BLOOM model)"),BUe=l(),Jf=a("li"),Oae=a("strong"),NUe=o("camembert"),IUe=o(" \u2014 "),YS=a("a"),qUe=o("CamembertConfig"),jUe=o(" (CamemBERT model)"),DUe=l(),Yf=a("li"),Vae=a("strong"),GUe=o("canine"),OUe=o(" \u2014 "),KS=a("a"),VUe=o("CanineConfig"),XUe=o(" (CANINE model)"),zUe=l(),Kf=a("li"),Xae=a("strong"),QUe=o("clip"),WUe=o(" \u2014 "),ZS=a("a"),HUe=o("CLIPConfig"),UUe=o(" (CLIP model)"),JUe=l(),Zf=a("li"),zae=a("strong"),YUe=o("codegen"),KUe=o(" \u2014 "),eR=a("a"),ZUe=o("CodeGenConfig"),eJe=o(" (CodeGen model)"),oJe=l(),em=a("li"),Qae=a("strong"),rJe=o("convbert"),tJe=o(" \u2014 "),oR=a("a"),aJe=o("ConvBertConfig"),nJe=o(" (ConvBERT model)"),sJe=l(),om=a("li"),Wae=a("strong"),lJe=o("convnext"),iJe=o(" \u2014 "),rR=a("a"),dJe=o("ConvNextConfig"),cJe=o(" (ConvNeXT model)"),fJe=l(),rm=a("li"),Hae=a("strong"),mJe=o("ctrl"),gJe=o(" \u2014 "),tR=a("a"),hJe=o("CTRLConfig"),pJe=o(" (CTRL model)"),_Je=l(),tm=a("li"),Uae=a("strong"),uJe=o("cvt"),bJe=o(" \u2014 "),aR=a("a"),vJe=o("CvtConfig"),FJe=o(" (CvT model)"),TJe=l(),am=a("li"),Jae=a("strong"),MJe=o("data2vec-audio"),EJe=o(" \u2014 "),nR=a("a"),CJe=o("Data2VecAudioConfig"),wJe=o(" (Data2VecAudio model)"),AJe=l(),nm=a("li"),Yae=a("strong"),LJe=o("data2vec-text"),yJe=o(" \u2014 "),sR=a("a"),xJe=o("Data2VecTextConfig"),$Je=o(" (Data2VecText model)"),kJe=l(),sm=a("li"),Kae=a("strong"),SJe=o("data2vec-vision"),RJe=o(" \u2014 "),lR=a("a"),PJe=o("Data2VecVisionConfig"),BJe=o(" (Data2VecVision model)"),NJe=l(),lm=a("li"),Zae=a("strong"),IJe=o("deberta"),qJe=o(" \u2014 "),iR=a("a"),jJe=o("DebertaConfig"),DJe=o(" (DeBERTa model)"),GJe=l(),im=a("li"),ene=a("strong"),OJe=o("deberta-v2"),VJe=o(" \u2014 "),dR=a("a"),XJe=o("DebertaV2Config"),zJe=o(" (DeBERTa-v2 model)"),QJe=l(),dm=a("li"),one=a("strong"),WJe=o("decision_transformer"),HJe=o(" \u2014 "),cR=a("a"),UJe=o("DecisionTransformerConfig"),JJe=o(" (Decision Transformer model)"),YJe=l(),cm=a("li"),rne=a("strong"),KJe=o("deit"),ZJe=o(" \u2014 "),fR=a("a"),eYe=o("DeiTConfig"),oYe=o(" (DeiT model)"),rYe=l(),fm=a("li"),tne=a("strong"),tYe=o("detr"),aYe=o(" \u2014 "),mR=a("a"),nYe=o("DetrConfig"),sYe=o(" (DETR model)"),lYe=l(),mm=a("li"),ane=a("strong"),iYe=o("distilbert"),dYe=o(" \u2014 "),gR=a("a"),cYe=o("DistilBertConfig"),fYe=o(" (DistilBERT model)"),mYe=l(),gm=a("li"),nne=a("strong"),gYe=o("dpr"),hYe=o(" \u2014 "),hR=a("a"),pYe=o("DPRConfig"),_Ye=o(" (DPR model)"),uYe=l(),hm=a("li"),sne=a("strong"),bYe=o("dpt"),vYe=o(" \u2014 "),pR=a("a"),FYe=o("DPTConfig"),TYe=o(" (DPT model)"),MYe=l(),pm=a("li"),lne=a("strong"),EYe=o("electra"),CYe=o(" \u2014 "),_R=a("a"),wYe=o("ElectraConfig"),AYe=o(" (ELECTRA model)"),LYe=l(),_m=a("li"),ine=a("strong"),yYe=o("encoder-decoder"),xYe=o(" \u2014 "),uR=a("a"),$Ye=o("EncoderDecoderConfig"),kYe=o(" (Encoder decoder model)"),SYe=l(),um=a("li"),dne=a("strong"),RYe=o("flaubert"),PYe=o(" \u2014 "),bR=a("a"),BYe=o("FlaubertConfig"),NYe=o(" (FlauBERT model)"),IYe=l(),bm=a("li"),cne=a("strong"),qYe=o("flava"),jYe=o(" \u2014 "),vR=a("a"),DYe=o("FlavaConfig"),GYe=o(" (FLAVA model)"),OYe=l(),vm=a("li"),fne=a("strong"),VYe=o("fnet"),XYe=o(" \u2014 "),FR=a("a"),zYe=o("FNetConfig"),QYe=o(" (FNet model)"),WYe=l(),Fm=a("li"),mne=a("strong"),HYe=o("fsmt"),UYe=o(" \u2014 "),TR=a("a"),JYe=o("FSMTConfig"),YYe=o(" (FairSeq Machine-Translation model)"),KYe=l(),Tm=a("li"),gne=a("strong"),ZYe=o("funnel"),eKe=o(" \u2014 "),MR=a("a"),oKe=o("FunnelConfig"),rKe=o(" (Funnel Transformer model)"),tKe=l(),Mm=a("li"),hne=a("strong"),aKe=o("glpn"),nKe=o(" \u2014 "),ER=a("a"),sKe=o("GLPNConfig"),lKe=o(" (GLPN model)"),iKe=l(),Em=a("li"),pne=a("strong"),dKe=o("gpt2"),cKe=o(" \u2014 "),CR=a("a"),fKe=o("GPT2Config"),mKe=o(" (OpenAI GPT-2 model)"),gKe=l(),Cm=a("li"),_ne=a("strong"),hKe=o("gpt_neo"),pKe=o(" \u2014 "),wR=a("a"),_Ke=o("GPTNeoConfig"),uKe=o(" (GPT Neo model)"),bKe=l(),wm=a("li"),une=a("strong"),vKe=o("gpt_neox"),FKe=o(" \u2014 "),AR=a("a"),TKe=o("GPTNeoXConfig"),MKe=o(" (GPT NeoX model)"),EKe=l(),Am=a("li"),bne=a("strong"),CKe=o("gptj"),wKe=o(" \u2014 "),LR=a("a"),AKe=o("GPTJConfig"),LKe=o(" (GPT-J model)"),yKe=l(),Lm=a("li"),vne=a("strong"),xKe=o("groupvit"),$Ke=o(" \u2014 "),yR=a("a"),kKe=o("GroupViTConfig"),SKe=o(" (GroupViT model)"),RKe=l(),ym=a("li"),Fne=a("strong"),PKe=o("hubert"),BKe=o(" \u2014 "),xR=a("a"),NKe=o("HubertConfig"),IKe=o(" (Hubert model)"),qKe=l(),xm=a("li"),Tne=a("strong"),jKe=o("ibert"),DKe=o(" \u2014 "),$R=a("a"),GKe=o("IBertConfig"),OKe=o(" (I-BERT model)"),VKe=l(),$m=a("li"),Mne=a("strong"),XKe=o("imagegpt"),zKe=o(" \u2014 "),kR=a("a"),QKe=o("ImageGPTConfig"),WKe=o(" (ImageGPT model)"),HKe=l(),km=a("li"),Ene=a("strong"),UKe=o("layoutlm"),JKe=o(" \u2014 "),SR=a("a"),YKe=o("LayoutLMConfig"),KKe=o(" (LayoutLM model)"),ZKe=l(),Sm=a("li"),Cne=a("strong"),eZe=o("layoutlmv2"),oZe=o(" \u2014 "),RR=a("a"),rZe=o("LayoutLMv2Config"),tZe=o(" (LayoutLMv2 model)"),aZe=l(),Rm=a("li"),wne=a("strong"),nZe=o("layoutlmv3"),sZe=o(" \u2014 "),PR=a("a"),lZe=o("LayoutLMv3Config"),iZe=o(" (LayoutLMv3 model)"),dZe=l(),Pm=a("li"),Ane=a("strong"),cZe=o("led"),fZe=o(" \u2014 "),BR=a("a"),mZe=o("LEDConfig"),gZe=o(" (LED model)"),hZe=l(),Bm=a("li"),Lne=a("strong"),pZe=o("levit"),_Ze=o(" \u2014 "),NR=a("a"),uZe=o("LevitConfig"),bZe=o(" (LeViT model)"),vZe=l(),Nm=a("li"),yne=a("strong"),FZe=o("longformer"),TZe=o(" \u2014 "),IR=a("a"),MZe=o("LongformerConfig"),EZe=o(" (Longformer model)"),CZe=l(),Im=a("li"),xne=a("strong"),wZe=o("longt5"),AZe=o(" \u2014 "),qR=a("a"),LZe=o("LongT5Config"),yZe=o(" (LongT5 model)"),xZe=l(),qm=a("li"),$ne=a("strong"),$Ze=o("luke"),kZe=o(" \u2014 "),jR=a("a"),SZe=o("LukeConfig"),RZe=o(" (LUKE model)"),PZe=l(),jm=a("li"),kne=a("strong"),BZe=o("lxmert"),NZe=o(" \u2014 "),DR=a("a"),IZe=o("LxmertConfig"),qZe=o(" (LXMERT model)"),jZe=l(),Dm=a("li"),Sne=a("strong"),DZe=o("m2m_100"),GZe=o(" \u2014 "),GR=a("a"),OZe=o("M2M100Config"),VZe=o(" (M2M100 model)"),XZe=l(),Gm=a("li"),Rne=a("strong"),zZe=o("marian"),QZe=o(" \u2014 "),OR=a("a"),WZe=o("MarianConfig"),HZe=o(" (Marian model)"),UZe=l(),Om=a("li"),Pne=a("strong"),JZe=o("maskformer"),YZe=o(" \u2014 "),VR=a("a"),KZe=o("MaskFormerConfig"),ZZe=o(" (MaskFormer model)"),eeo=l(),Vm=a("li"),Bne=a("strong"),oeo=o("mbart"),reo=o(" \u2014 "),XR=a("a"),teo=o("MBartConfig"),aeo=o(" (mBART model)"),neo=l(),Xm=a("li"),Nne=a("strong"),seo=o("mctct"),leo=o(" \u2014 "),zR=a("a"),ieo=o("MCTCTConfig"),deo=o(" (M-CTC-T model)"),ceo=l(),zm=a("li"),Ine=a("strong"),feo=o("megatron-bert"),meo=o(" \u2014 "),QR=a("a"),geo=o("MegatronBertConfig"),heo=o(" (Megatron-BERT model)"),peo=l(),Qm=a("li"),qne=a("strong"),_eo=o("mobilebert"),ueo=o(" \u2014 "),WR=a("a"),beo=o("MobileBertConfig"),veo=o(" (MobileBERT model)"),Feo=l(),Wm=a("li"),jne=a("strong"),Teo=o("mobilevit"),Meo=o(" \u2014 "),HR=a("a"),Eeo=o("MobileViTConfig"),Ceo=o(" (MobileViT model)"),weo=l(),Hm=a("li"),Dne=a("strong"),Aeo=o("mpnet"),Leo=o(" \u2014 "),UR=a("a"),yeo=o("MPNetConfig"),xeo=o(" (MPNet model)"),$eo=l(),Um=a("li"),Gne=a("strong"),keo=o("mt5"),Seo=o(" \u2014 "),JR=a("a"),Reo=o("MT5Config"),Peo=o(" (MT5 model)"),Beo=l(),Jm=a("li"),One=a("strong"),Neo=o("mvp"),Ieo=o(" \u2014 "),YR=a("a"),qeo=o("MvpConfig"),jeo=o(" (MVP model)"),Deo=l(),Ym=a("li"),Vne=a("strong"),Geo=o("nezha"),Oeo=o(" \u2014 "),KR=a("a"),Veo=o("NezhaConfig"),Xeo=o(" (Nezha model)"),zeo=l(),Km=a("li"),Xne=a("strong"),Qeo=o("nystromformer"),Weo=o(" \u2014 "),ZR=a("a"),Heo=o("NystromformerConfig"),Ueo=o(" (Nystr\xF6mformer model)"),Jeo=l(),Zm=a("li"),zne=a("strong"),Yeo=o("openai-gpt"),Keo=o(" \u2014 "),eP=a("a"),Zeo=o("OpenAIGPTConfig"),eoo=o(" (OpenAI GPT model)"),ooo=l(),eg=a("li"),Qne=a("strong"),roo=o("opt"),too=o(" \u2014 "),oP=a("a"),aoo=o("OPTConfig"),noo=o(" (OPT model)"),soo=l(),og=a("li"),Wne=a("strong"),loo=o("pegasus"),ioo=o(" \u2014 "),rP=a("a"),doo=o("PegasusConfig"),coo=o(" (Pegasus model)"),foo=l(),rg=a("li"),Hne=a("strong"),moo=o("perceiver"),goo=o(" \u2014 "),tP=a("a"),hoo=o("PerceiverConfig"),poo=o(" (Perceiver model)"),_oo=l(),tg=a("li"),Une=a("strong"),uoo=o("plbart"),boo=o(" \u2014 "),aP=a("a"),voo=o("PLBartConfig"),Foo=o(" (PLBart model)"),Too=l(),ag=a("li"),Jne=a("strong"),Moo=o("poolformer"),Eoo=o(" \u2014 "),nP=a("a"),Coo=o("PoolFormerConfig"),woo=o(" (PoolFormer model)"),Aoo=l(),ng=a("li"),Yne=a("strong"),Loo=o("prophetnet"),yoo=o(" \u2014 "),sP=a("a"),xoo=o("ProphetNetConfig"),$oo=o(" (ProphetNet model)"),koo=l(),sg=a("li"),Kne=a("strong"),Soo=o("qdqbert"),Roo=o(" \u2014 "),lP=a("a"),Poo=o("QDQBertConfig"),Boo=o(" (QDQBert model)"),Noo=l(),lg=a("li"),Zne=a("strong"),Ioo=o("rag"),qoo=o(" \u2014 "),iP=a("a"),joo=o("RagConfig"),Doo=o(" (RAG model)"),Goo=l(),ig=a("li"),ese=a("strong"),Ooo=o("realm"),Voo=o(" \u2014 "),dP=a("a"),Xoo=o("RealmConfig"),zoo=o(" (REALM model)"),Qoo=l(),dg=a("li"),ose=a("strong"),Woo=o("reformer"),Hoo=o(" \u2014 "),cP=a("a"),Uoo=o("ReformerConfig"),Joo=o(" (Reformer model)"),Yoo=l(),cg=a("li"),rse=a("strong"),Koo=o("regnet"),Zoo=o(" \u2014 "),fP=a("a"),ero=o("RegNetConfig"),oro=o(" (RegNet model)"),rro=l(),fg=a("li"),tse=a("strong"),tro=o("rembert"),aro=o(" \u2014 "),mP=a("a"),nro=o("RemBertConfig"),sro=o(" (RemBERT model)"),lro=l(),mg=a("li"),ase=a("strong"),iro=o("resnet"),dro=o(" \u2014 "),gP=a("a"),cro=o("ResNetConfig"),fro=o(" (ResNet model)"),mro=l(),gg=a("li"),nse=a("strong"),gro=o("retribert"),hro=o(" \u2014 "),hP=a("a"),pro=o("RetriBertConfig"),_ro=o(" (RetriBERT model)"),uro=l(),hg=a("li"),sse=a("strong"),bro=o("roberta"),vro=o(" \u2014 "),pP=a("a"),Fro=o("RobertaConfig"),Tro=o(" (RoBERTa model)"),Mro=l(),pg=a("li"),lse=a("strong"),Ero=o("roformer"),Cro=o(" \u2014 "),_P=a("a"),wro=o("RoFormerConfig"),Aro=o(" (RoFormer model)"),Lro=l(),_g=a("li"),ise=a("strong"),yro=o("segformer"),xro=o(" \u2014 "),uP=a("a"),$ro=o("SegformerConfig"),kro=o(" (SegFormer model)"),Sro=l(),ug=a("li"),dse=a("strong"),Rro=o("sew"),Pro=o(" \u2014 "),bP=a("a"),Bro=o("SEWConfig"),Nro=o(" (SEW model)"),Iro=l(),bg=a("li"),cse=a("strong"),qro=o("sew-d"),jro=o(" \u2014 "),vP=a("a"),Dro=o("SEWDConfig"),Gro=o(" (SEW-D model)"),Oro=l(),vg=a("li"),fse=a("strong"),Vro=o("speech-encoder-decoder"),Xro=o(" \u2014 "),FP=a("a"),zro=o("SpeechEncoderDecoderConfig"),Qro=o(" (Speech Encoder decoder model)"),Wro=l(),Fg=a("li"),mse=a("strong"),Hro=o("speech_to_text"),Uro=o(" \u2014 "),TP=a("a"),Jro=o("Speech2TextConfig"),Yro=o(" (Speech2Text model)"),Kro=l(),Tg=a("li"),gse=a("strong"),Zro=o("speech_to_text_2"),eto=o(" \u2014 "),MP=a("a"),oto=o("Speech2Text2Config"),rto=o(" (Speech2Text2 model)"),tto=l(),Mg=a("li"),hse=a("strong"),ato=o("splinter"),nto=o(" \u2014 "),EP=a("a"),sto=o("SplinterConfig"),lto=o(" (Splinter model)"),ito=l(),Eg=a("li"),pse=a("strong"),dto=o("squeezebert"),cto=o(" \u2014 "),CP=a("a"),fto=o("SqueezeBertConfig"),mto=o(" (SqueezeBERT model)"),gto=l(),Cg=a("li"),_se=a("strong"),hto=o("swin"),pto=o(" \u2014 "),wP=a("a"),_to=o("SwinConfig"),uto=o(" (Swin Transformer model)"),bto=l(),wg=a("li"),use=a("strong"),vto=o("t5"),Fto=o(" \u2014 "),AP=a("a"),Tto=o("T5Config"),Mto=o(" (T5 model)"),Eto=l(),Ag=a("li"),bse=a("strong"),Cto=o("tapas"),wto=o(" \u2014 "),LP=a("a"),Ato=o("TapasConfig"),Lto=o(" (TAPAS model)"),yto=l(),Lg=a("li"),vse=a("strong"),xto=o("trajectory_transformer"),$to=o(" \u2014 "),yP=a("a"),kto=o("TrajectoryTransformerConfig"),Sto=o(" (Trajectory Transformer model)"),Rto=l(),yg=a("li"),Fse=a("strong"),Pto=o("transfo-xl"),Bto=o(" \u2014 "),xP=a("a"),Nto=o("TransfoXLConfig"),Ito=o(" (Transformer-XL model)"),qto=l(),xg=a("li"),Tse=a("strong"),jto=o("trocr"),Dto=o(" \u2014 "),$P=a("a"),Gto=o("TrOCRConfig"),Oto=o(" (TrOCR model)"),Vto=l(),$g=a("li"),Mse=a("strong"),Xto=o("unispeech"),zto=o(" \u2014 "),kP=a("a"),Qto=o("UniSpeechConfig"),Wto=o(" (UniSpeech model)"),Hto=l(),kg=a("li"),Ese=a("strong"),Uto=o("unispeech-sat"),Jto=o(" \u2014 "),SP=a("a"),Yto=o("UniSpeechSatConfig"),Kto=o(" (UniSpeechSat model)"),Zto=l(),Sg=a("li"),Cse=a("strong"),eao=o("van"),oao=o(" \u2014 "),RP=a("a"),rao=o("VanConfig"),tao=o(" (VAN model)"),aao=l(),Rg=a("li"),wse=a("strong"),nao=o("vilt"),sao=o(" \u2014 "),PP=a("a"),lao=o("ViltConfig"),iao=o(" (ViLT model)"),dao=l(),Pg=a("li"),Ase=a("strong"),cao=o("vision-encoder-decoder"),fao=o(" \u2014 "),BP=a("a"),mao=o("VisionEncoderDecoderConfig"),gao=o(" (Vision Encoder decoder model)"),hao=l(),Bg=a("li"),Lse=a("strong"),pao=o("vision-text-dual-encoder"),_ao=o(" \u2014 "),NP=a("a"),uao=o("VisionTextDualEncoderConfig"),bao=o(" (VisionTextDualEncoder model)"),vao=l(),Ng=a("li"),yse=a("strong"),Fao=o("visual_bert"),Tao=o(" \u2014 "),IP=a("a"),Mao=o("VisualBertConfig"),Eao=o(" (VisualBERT model)"),Cao=l(),Ig=a("li"),xse=a("strong"),wao=o("vit"),Aao=o(" \u2014 "),qP=a("a"),Lao=o("ViTConfig"),yao=o(" (ViT model)"),xao=l(),qg=a("li"),$se=a("strong"),$ao=o("vit_mae"),kao=o(" \u2014 "),jP=a("a"),Sao=o("ViTMAEConfig"),Rao=o(" (ViTMAE model)"),Pao=l(),jg=a("li"),kse=a("strong"),Bao=o("wav2vec2"),Nao=o(" \u2014 "),DP=a("a"),Iao=o("Wav2Vec2Config"),qao=o(" (Wav2Vec2 model)"),jao=l(),Dg=a("li"),Sse=a("strong"),Dao=o("wav2vec2-conformer"),Gao=o(" \u2014 "),GP=a("a"),Oao=o("Wav2Vec2ConformerConfig"),Vao=o(" (Wav2Vec2-Conformer model)"),Xao=l(),Gg=a("li"),Rse=a("strong"),zao=o("wavlm"),Qao=o(" \u2014 "),OP=a("a"),Wao=o("WavLMConfig"),Hao=o(" (WavLM model)"),Uao=l(),Og=a("li"),Pse=a("strong"),Jao=o("xglm"),Yao=o(" \u2014 "),VP=a("a"),Kao=o("XGLMConfig"),Zao=o(" (XGLM model)"),eno=l(),Vg=a("li"),Bse=a("strong"),ono=o("xlm"),rno=o(" \u2014 "),XP=a("a"),tno=o("XLMConfig"),ano=o(" (XLM model)"),nno=l(),Xg=a("li"),Nse=a("strong"),sno=o("xlm-prophetnet"),lno=o(" \u2014 "),zP=a("a"),ino=o("XLMProphetNetConfig"),dno=o(" (XLM-ProphetNet model)"),cno=l(),zg=a("li"),Ise=a("strong"),fno=o("xlm-roberta"),mno=o(" \u2014 "),QP=a("a"),gno=o("XLMRobertaConfig"),hno=o(" (XLM-RoBERTa model)"),pno=l(),Qg=a("li"),qse=a("strong"),_no=o("xlm-roberta-xl"),uno=o(" \u2014 "),WP=a("a"),bno=o("XLMRobertaXLConfig"),vno=o(" (XLM-RoBERTa-XL model)"),Fno=l(),Wg=a("li"),jse=a("strong"),Tno=o("xlnet"),Mno=o(" \u2014 "),HP=a("a"),Eno=o("XLNetConfig"),Cno=o(" (XLNet model)"),wno=l(),Hg=a("li"),Dse=a("strong"),Ano=o("yolos"),Lno=o(" \u2014 "),UP=a("a"),yno=o("YolosConfig"),xno=o(" (YOLOS model)"),$no=l(),Ug=a("li"),Gse=a("strong"),kno=o("yoso"),Sno=o(" \u2014 "),JP=a("a"),Rno=o("YosoConfig"),Pno=o(" (YOSO model)"),Bno=l(),F(Jg.$$.fragment),Nno=l(),Yg=a("div"),F(fy.$$.fragment),Ino=l(),Ose=a("p"),qno=o("Register a new configuration for this class."),tXe=l(),Ni=a("h2"),Kg=a("a"),Vse=a("span"),F(my.$$.fragment),jno=l(),Xse=a("span"),Dno=o("AutoTokenizer"),aXe=l(),Ao=a("div"),F(gy.$$.fragment),Gno=l(),hy=a("p"),Ono=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YP=a("a"),Vno=o("AutoTokenizer.from_pretrained()"),Xno=o(" class method."),zno=l(),py=a("p"),Qno=o("This class cannot be instantiated directly using "),zse=a("code"),Wno=o("__init__()"),Hno=o(" (throws an error)."),Uno=l(),yr=a("div"),F(_y.$$.fragment),Jno=l(),Qse=a("p"),Yno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Kno=l(),Pa=a("p"),Zno=o("The tokenizer class to instantiate is selected based on the "),Wse=a("code"),eso=o("model_type"),oso=o(` property of the config object (either
passed as an argument or loaded from `),Hse=a("code"),rso=o("pretrained_model_name_or_path"),tso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=a("code"),aso=o("pretrained_model_name_or_path"),nso=o(":"),sso=l(),k=a("ul"),jn=a("li"),Jse=a("strong"),lso=o("albert"),iso=o(" \u2014 "),KP=a("a"),dso=o("AlbertTokenizer"),cso=o(" or "),ZP=a("a"),fso=o("AlbertTokenizerFast"),mso=o(" (ALBERT model)"),gso=l(),Dn=a("li"),Yse=a("strong"),hso=o("bart"),pso=o(" \u2014 "),eB=a("a"),_so=o("BartTokenizer"),uso=o(" or "),oB=a("a"),bso=o("BartTokenizerFast"),vso=o(" (BART model)"),Fso=l(),Gn=a("li"),Kse=a("strong"),Tso=o("barthez"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("BarthezTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("BarthezTokenizerFast"),Aso=o(" (BARThez model)"),Lso=l(),Zg=a("li"),Zse=a("strong"),yso=o("bartpho"),xso=o(" \u2014 "),aB=a("a"),$so=o("BartphoTokenizer"),kso=o(" (BARTpho model)"),Sso=l(),On=a("li"),ele=a("strong"),Rso=o("bert"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("BertTokenizer"),Nso=o(" or "),sB=a("a"),Iso=o("BertTokenizerFast"),qso=o(" (BERT model)"),jso=l(),eh=a("li"),ole=a("strong"),Dso=o("bert-generation"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("BertGenerationTokenizer"),Vso=o(" (Bert Generation model)"),Xso=l(),oh=a("li"),rle=a("strong"),zso=o("bert-japanese"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("BertJapaneseTokenizer"),Hso=o(" (BertJapanese model)"),Uso=l(),rh=a("li"),tle=a("strong"),Jso=o("bertweet"),Yso=o(" \u2014 "),dB=a("a"),Kso=o("BertweetTokenizer"),Zso=o(" (BERTweet model)"),elo=l(),Vn=a("li"),ale=a("strong"),olo=o("big_bird"),rlo=o(" \u2014 "),cB=a("a"),tlo=o("BigBirdTokenizer"),alo=o(" or "),fB=a("a"),nlo=o("BigBirdTokenizerFast"),slo=o(" (BigBird model)"),llo=l(),Xn=a("li"),nle=a("strong"),ilo=o("bigbird_pegasus"),dlo=o(" \u2014 "),mB=a("a"),clo=o("PegasusTokenizer"),flo=o(" or "),gB=a("a"),mlo=o("PegasusTokenizerFast"),glo=o(" (BigBird-Pegasus model)"),hlo=l(),zn=a("li"),sle=a("strong"),plo=o("blenderbot"),_lo=o(" \u2014 "),hB=a("a"),ulo=o("BlenderbotTokenizer"),blo=o(" or "),pB=a("a"),vlo=o("BlenderbotTokenizerFast"),Flo=o(" (Blenderbot model)"),Tlo=l(),th=a("li"),lle=a("strong"),Mlo=o("blenderbot-small"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("BlenderbotSmallTokenizer"),wlo=o(" (BlenderbotSmall model)"),Alo=l(),ah=a("li"),ile=a("strong"),Llo=o("bloom"),ylo=o(" \u2014 "),uB=a("a"),xlo=o("BloomTokenizerFast"),$lo=o(" (BLOOM model)"),klo=l(),nh=a("li"),dle=a("strong"),Slo=o("byt5"),Rlo=o(" \u2014 "),bB=a("a"),Plo=o("ByT5Tokenizer"),Blo=o(" (ByT5 model)"),Nlo=l(),Qn=a("li"),cle=a("strong"),Ilo=o("camembert"),qlo=o(" \u2014 "),vB=a("a"),jlo=o("CamembertTokenizer"),Dlo=o(" or "),FB=a("a"),Glo=o("CamembertTokenizerFast"),Olo=o(" (CamemBERT model)"),Vlo=l(),sh=a("li"),fle=a("strong"),Xlo=o("canine"),zlo=o(" \u2014 "),TB=a("a"),Qlo=o("CanineTokenizer"),Wlo=o(" (CANINE model)"),Hlo=l(),Wn=a("li"),mle=a("strong"),Ulo=o("clip"),Jlo=o(" \u2014 "),MB=a("a"),Ylo=o("CLIPTokenizer"),Klo=o(" or "),EB=a("a"),Zlo=o("CLIPTokenizerFast"),eio=o(" (CLIP model)"),oio=l(),Hn=a("li"),gle=a("strong"),rio=o("codegen"),tio=o(" \u2014 "),CB=a("a"),aio=o("CodeGenTokenizer"),nio=o(" or "),wB=a("a"),sio=o("CodeGenTokenizerFast"),lio=o(" (CodeGen model)"),iio=l(),Un=a("li"),hle=a("strong"),dio=o("convbert"),cio=o(" \u2014 "),AB=a("a"),fio=o("ConvBertTokenizer"),mio=o(" or "),LB=a("a"),gio=o("ConvBertTokenizerFast"),hio=o(" (ConvBERT model)"),pio=l(),Jn=a("li"),ple=a("strong"),_io=o("cpm"),uio=o(" \u2014 "),yB=a("a"),bio=o("CpmTokenizer"),vio=o(" or "),xB=a("a"),Fio=o("CpmTokenizerFast"),Tio=o(" (CPM model)"),Mio=l(),lh=a("li"),_le=a("strong"),Eio=o("ctrl"),Cio=o(" \u2014 "),$B=a("a"),wio=o("CTRLTokenizer"),Aio=o(" (CTRL model)"),Lio=l(),Yn=a("li"),ule=a("strong"),yio=o("data2vec-text"),xio=o(" \u2014 "),kB=a("a"),$io=o("RobertaTokenizer"),kio=o(" or "),SB=a("a"),Sio=o("RobertaTokenizerFast"),Rio=o(" (Data2VecText model)"),Pio=l(),Kn=a("li"),ble=a("strong"),Bio=o("deberta"),Nio=o(" \u2014 "),RB=a("a"),Iio=o("DebertaTokenizer"),qio=o(" or "),PB=a("a"),jio=o("DebertaTokenizerFast"),Dio=o(" (DeBERTa model)"),Gio=l(),Zn=a("li"),vle=a("strong"),Oio=o("deberta-v2"),Vio=o(" \u2014 "),BB=a("a"),Xio=o("DebertaV2Tokenizer"),zio=o(" or "),NB=a("a"),Qio=o("DebertaV2TokenizerFast"),Wio=o(" (DeBERTa-v2 model)"),Hio=l(),es=a("li"),Fle=a("strong"),Uio=o("distilbert"),Jio=o(" \u2014 "),IB=a("a"),Yio=o("DistilBertTokenizer"),Kio=o(" or "),qB=a("a"),Zio=o("DistilBertTokenizerFast"),edo=o(" (DistilBERT model)"),odo=l(),os=a("li"),Tle=a("strong"),rdo=o("dpr"),tdo=o(" \u2014 "),jB=a("a"),ado=o("DPRQuestionEncoderTokenizer"),ndo=o(" or "),DB=a("a"),sdo=o("DPRQuestionEncoderTokenizerFast"),ldo=o(" (DPR model)"),ido=l(),rs=a("li"),Mle=a("strong"),ddo=o("electra"),cdo=o(" \u2014 "),GB=a("a"),fdo=o("ElectraTokenizer"),mdo=o(" or "),OB=a("a"),gdo=o("ElectraTokenizerFast"),hdo=o(" (ELECTRA model)"),pdo=l(),ih=a("li"),Ele=a("strong"),_do=o("flaubert"),udo=o(" \u2014 "),VB=a("a"),bdo=o("FlaubertTokenizer"),vdo=o(" (FlauBERT model)"),Fdo=l(),ts=a("li"),Cle=a("strong"),Tdo=o("fnet"),Mdo=o(" \u2014 "),XB=a("a"),Edo=o("FNetTokenizer"),Cdo=o(" or "),zB=a("a"),wdo=o("FNetTokenizerFast"),Ado=o(" (FNet model)"),Ldo=l(),dh=a("li"),wle=a("strong"),ydo=o("fsmt"),xdo=o(" \u2014 "),QB=a("a"),$do=o("FSMTTokenizer"),kdo=o(" (FairSeq Machine-Translation model)"),Sdo=l(),as=a("li"),Ale=a("strong"),Rdo=o("funnel"),Pdo=o(" \u2014 "),WB=a("a"),Bdo=o("FunnelTokenizer"),Ndo=o(" or "),HB=a("a"),Ido=o("FunnelTokenizerFast"),qdo=o(" (Funnel Transformer model)"),jdo=l(),ns=a("li"),Lle=a("strong"),Ddo=o("gpt2"),Gdo=o(" \u2014 "),UB=a("a"),Odo=o("GPT2Tokenizer"),Vdo=o(" or "),JB=a("a"),Xdo=o("GPT2TokenizerFast"),zdo=o(" (OpenAI GPT-2 model)"),Qdo=l(),ss=a("li"),yle=a("strong"),Wdo=o("gpt_neo"),Hdo=o(" \u2014 "),YB=a("a"),Udo=o("GPT2Tokenizer"),Jdo=o(" or "),KB=a("a"),Ydo=o("GPT2TokenizerFast"),Kdo=o(" (GPT Neo model)"),Zdo=l(),ch=a("li"),xle=a("strong"),eco=o("gpt_neox"),oco=o(" \u2014 "),ZB=a("a"),rco=o("GPTNeoXTokenizerFast"),tco=o(" (GPT NeoX model)"),aco=l(),ls=a("li"),$le=a("strong"),nco=o("gptj"),sco=o(" \u2014 "),eN=a("a"),lco=o("GPT2Tokenizer"),ico=o(" or "),oN=a("a"),dco=o("GPT2TokenizerFast"),cco=o(" (GPT-J model)"),fco=l(),is=a("li"),kle=a("strong"),mco=o("groupvit"),gco=o(" \u2014 "),rN=a("a"),hco=o("CLIPTokenizer"),pco=o(" or "),tN=a("a"),_co=o("CLIPTokenizerFast"),uco=o(" (GroupViT model)"),bco=l(),ds=a("li"),Sle=a("strong"),vco=o("herbert"),Fco=o(" \u2014 "),aN=a("a"),Tco=o("HerbertTokenizer"),Mco=o(" or "),nN=a("a"),Eco=o("HerbertTokenizerFast"),Cco=o(" (HerBERT model)"),wco=l(),fh=a("li"),Rle=a("strong"),Aco=o("hubert"),Lco=o(" \u2014 "),sN=a("a"),yco=o("Wav2Vec2CTCTokenizer"),xco=o(" (Hubert model)"),$co=l(),cs=a("li"),Ple=a("strong"),kco=o("ibert"),Sco=o(" \u2014 "),lN=a("a"),Rco=o("RobertaTokenizer"),Pco=o(" or "),iN=a("a"),Bco=o("RobertaTokenizerFast"),Nco=o(" (I-BERT model)"),Ico=l(),fs=a("li"),Ble=a("strong"),qco=o("layoutlm"),jco=o(" \u2014 "),dN=a("a"),Dco=o("LayoutLMTokenizer"),Gco=o(" or "),cN=a("a"),Oco=o("LayoutLMTokenizerFast"),Vco=o(" (LayoutLM model)"),Xco=l(),ms=a("li"),Nle=a("strong"),zco=o("layoutlmv2"),Qco=o(" \u2014 "),fN=a("a"),Wco=o("LayoutLMv2Tokenizer"),Hco=o(" or "),mN=a("a"),Uco=o("LayoutLMv2TokenizerFast"),Jco=o(" (LayoutLMv2 model)"),Yco=l(),gs=a("li"),Ile=a("strong"),Kco=o("layoutlmv3"),Zco=o(" \u2014 "),gN=a("a"),efo=o("LayoutLMv3Tokenizer"),ofo=o(" or "),hN=a("a"),rfo=o("LayoutLMv3TokenizerFast"),tfo=o(" (LayoutLMv3 model)"),afo=l(),hs=a("li"),qle=a("strong"),nfo=o("layoutxlm"),sfo=o(" \u2014 "),pN=a("a"),lfo=o("LayoutXLMTokenizer"),ifo=o(" or "),_N=a("a"),dfo=o("LayoutXLMTokenizerFast"),cfo=o(" (LayoutXLM model)"),ffo=l(),ps=a("li"),jle=a("strong"),mfo=o("led"),gfo=o(" \u2014 "),uN=a("a"),hfo=o("LEDTokenizer"),pfo=o(" or "),bN=a("a"),_fo=o("LEDTokenizerFast"),ufo=o(" (LED model)"),bfo=l(),_s=a("li"),Dle=a("strong"),vfo=o("longformer"),Ffo=o(" \u2014 "),vN=a("a"),Tfo=o("LongformerTokenizer"),Mfo=o(" or "),FN=a("a"),Efo=o("LongformerTokenizerFast"),Cfo=o(" (Longformer model)"),wfo=l(),us=a("li"),Gle=a("strong"),Afo=o("longt5"),Lfo=o(" \u2014 "),TN=a("a"),yfo=o("T5Tokenizer"),xfo=o(" or "),MN=a("a"),$fo=o("T5TokenizerFast"),kfo=o(" (LongT5 model)"),Sfo=l(),mh=a("li"),Ole=a("strong"),Rfo=o("luke"),Pfo=o(" \u2014 "),EN=a("a"),Bfo=o("LukeTokenizer"),Nfo=o(" (LUKE model)"),Ifo=l(),bs=a("li"),Vle=a("strong"),qfo=o("lxmert"),jfo=o(" \u2014 "),CN=a("a"),Dfo=o("LxmertTokenizer"),Gfo=o(" or "),wN=a("a"),Ofo=o("LxmertTokenizerFast"),Vfo=o(" (LXMERT model)"),Xfo=l(),gh=a("li"),Xle=a("strong"),zfo=o("m2m_100"),Qfo=o(" \u2014 "),AN=a("a"),Wfo=o("M2M100Tokenizer"),Hfo=o(" (M2M100 model)"),Ufo=l(),hh=a("li"),zle=a("strong"),Jfo=o("marian"),Yfo=o(" \u2014 "),LN=a("a"),Kfo=o("MarianTokenizer"),Zfo=o(" (Marian model)"),emo=l(),vs=a("li"),Qle=a("strong"),omo=o("mbart"),rmo=o(" \u2014 "),yN=a("a"),tmo=o("MBartTokenizer"),amo=o(" or "),xN=a("a"),nmo=o("MBartTokenizerFast"),smo=o(" (mBART model)"),lmo=l(),Fs=a("li"),Wle=a("strong"),imo=o("mbart50"),dmo=o(" \u2014 "),$N=a("a"),cmo=o("MBart50Tokenizer"),fmo=o(" or "),kN=a("a"),mmo=o("MBart50TokenizerFast"),gmo=o(" (mBART-50 model)"),hmo=l(),Ts=a("li"),Hle=a("strong"),pmo=o("megatron-bert"),_mo=o(" \u2014 "),SN=a("a"),umo=o("BertTokenizer"),bmo=o(" or "),RN=a("a"),vmo=o("BertTokenizerFast"),Fmo=o(" (Megatron-BERT model)"),Tmo=l(),ph=a("li"),Ule=a("strong"),Mmo=o("mluke"),Emo=o(" \u2014 "),PN=a("a"),Cmo=o("MLukeTokenizer"),wmo=o(" (mLUKE model)"),Amo=l(),Ms=a("li"),Jle=a("strong"),Lmo=o("mobilebert"),ymo=o(" \u2014 "),BN=a("a"),xmo=o("MobileBertTokenizer"),$mo=o(" or "),NN=a("a"),kmo=o("MobileBertTokenizerFast"),Smo=o(" (MobileBERT model)"),Rmo=l(),Es=a("li"),Yle=a("strong"),Pmo=o("mpnet"),Bmo=o(" \u2014 "),IN=a("a"),Nmo=o("MPNetTokenizer"),Imo=o(" or "),qN=a("a"),qmo=o("MPNetTokenizerFast"),jmo=o(" (MPNet model)"),Dmo=l(),Cs=a("li"),Kle=a("strong"),Gmo=o("mt5"),Omo=o(" \u2014 "),jN=a("a"),Vmo=o("MT5Tokenizer"),Xmo=o(" or "),DN=a("a"),zmo=o("MT5TokenizerFast"),Qmo=o(" (MT5 model)"),Wmo=l(),ws=a("li"),Zle=a("strong"),Hmo=o("mvp"),Umo=o(" \u2014 "),GN=a("a"),Jmo=o("MvpTokenizer"),Ymo=o(" or "),ON=a("a"),Kmo=o("MvpTokenizerFast"),Zmo=o(" (MVP model)"),ego=l(),As=a("li"),eie=a("strong"),ogo=o("nezha"),rgo=o(" \u2014 "),VN=a("a"),tgo=o("BertTokenizer"),ago=o(" or "),XN=a("a"),ngo=o("BertTokenizerFast"),sgo=o(" (Nezha model)"),lgo=l(),Ls=a("li"),oie=a("strong"),igo=o("nystromformer"),dgo=o(" \u2014 "),zN=a("a"),cgo=o("AlbertTokenizer"),fgo=o(" or "),QN=a("a"),mgo=o("AlbertTokenizerFast"),ggo=o(" (Nystr\xF6mformer model)"),hgo=l(),ys=a("li"),rie=a("strong"),pgo=o("openai-gpt"),_go=o(" \u2014 "),WN=a("a"),ugo=o("OpenAIGPTTokenizer"),bgo=o(" or "),HN=a("a"),vgo=o("OpenAIGPTTokenizerFast"),Fgo=o(" (OpenAI GPT model)"),Tgo=l(),_h=a("li"),tie=a("strong"),Mgo=o("opt"),Ego=o(" \u2014 "),UN=a("a"),Cgo=o("GPT2Tokenizer"),wgo=o(" (OPT model)"),Ago=l(),xs=a("li"),aie=a("strong"),Lgo=o("pegasus"),ygo=o(" \u2014 "),JN=a("a"),xgo=o("PegasusTokenizer"),$go=o(" or "),YN=a("a"),kgo=o("PegasusTokenizerFast"),Sgo=o(" (Pegasus model)"),Rgo=l(),uh=a("li"),nie=a("strong"),Pgo=o("perceiver"),Bgo=o(" \u2014 "),KN=a("a"),Ngo=o("PerceiverTokenizer"),Igo=o(" (Perceiver model)"),qgo=l(),bh=a("li"),sie=a("strong"),jgo=o("phobert"),Dgo=o(" \u2014 "),ZN=a("a"),Ggo=o("PhobertTokenizer"),Ogo=o(" (PhoBERT model)"),Vgo=l(),vh=a("li"),lie=a("strong"),Xgo=o("plbart"),zgo=o(" \u2014 "),eI=a("a"),Qgo=o("PLBartTokenizer"),Wgo=o(" (PLBart model)"),Hgo=l(),Fh=a("li"),iie=a("strong"),Ugo=o("prophetnet"),Jgo=o(" \u2014 "),oI=a("a"),Ygo=o("ProphetNetTokenizer"),Kgo=o(" (ProphetNet model)"),Zgo=l(),$s=a("li"),die=a("strong"),eho=o("qdqbert"),oho=o(" \u2014 "),rI=a("a"),rho=o("BertTokenizer"),tho=o(" or "),tI=a("a"),aho=o("BertTokenizerFast"),nho=o(" (QDQBert model)"),sho=l(),Th=a("li"),cie=a("strong"),lho=o("rag"),iho=o(" \u2014 "),aI=a("a"),dho=o("RagTokenizer"),cho=o(" (RAG model)"),fho=l(),ks=a("li"),fie=a("strong"),mho=o("realm"),gho=o(" \u2014 "),nI=a("a"),hho=o("RealmTokenizer"),pho=o(" or "),sI=a("a"),_ho=o("RealmTokenizerFast"),uho=o(" (REALM model)"),bho=l(),Ss=a("li"),mie=a("strong"),vho=o("reformer"),Fho=o(" \u2014 "),lI=a("a"),Tho=o("ReformerTokenizer"),Mho=o(" or "),iI=a("a"),Eho=o("ReformerTokenizerFast"),Cho=o(" (Reformer model)"),who=l(),Rs=a("li"),gie=a("strong"),Aho=o("rembert"),Lho=o(" \u2014 "),dI=a("a"),yho=o("RemBertTokenizer"),xho=o(" or "),cI=a("a"),$ho=o("RemBertTokenizerFast"),kho=o(" (RemBERT model)"),Sho=l(),Ps=a("li"),hie=a("strong"),Rho=o("retribert"),Pho=o(" \u2014 "),fI=a("a"),Bho=o("RetriBertTokenizer"),Nho=o(" or "),mI=a("a"),Iho=o("RetriBertTokenizerFast"),qho=o(" (RetriBERT model)"),jho=l(),Bs=a("li"),pie=a("strong"),Dho=o("roberta"),Gho=o(" \u2014 "),gI=a("a"),Oho=o("RobertaTokenizer"),Vho=o(" or "),hI=a("a"),Xho=o("RobertaTokenizerFast"),zho=o(" (RoBERTa model)"),Qho=l(),Ns=a("li"),_ie=a("strong"),Who=o("roformer"),Hho=o(" \u2014 "),pI=a("a"),Uho=o("RoFormerTokenizer"),Jho=o(" or "),_I=a("a"),Yho=o("RoFormerTokenizerFast"),Kho=o(" (RoFormer model)"),Zho=l(),Mh=a("li"),uie=a("strong"),epo=o("speech_to_text"),opo=o(" \u2014 "),uI=a("a"),rpo=o("Speech2TextTokenizer"),tpo=o(" (Speech2Text model)"),apo=l(),Eh=a("li"),bie=a("strong"),npo=o("speech_to_text_2"),spo=o(" \u2014 "),bI=a("a"),lpo=o("Speech2Text2Tokenizer"),ipo=o(" (Speech2Text2 model)"),dpo=l(),Is=a("li"),vie=a("strong"),cpo=o("splinter"),fpo=o(" \u2014 "),vI=a("a"),mpo=o("SplinterTokenizer"),gpo=o(" or "),FI=a("a"),hpo=o("SplinterTokenizerFast"),ppo=o(" (Splinter model)"),_po=l(),qs=a("li"),Fie=a("strong"),upo=o("squeezebert"),bpo=o(" \u2014 "),TI=a("a"),vpo=o("SqueezeBertTokenizer"),Fpo=o(" or "),MI=a("a"),Tpo=o("SqueezeBertTokenizerFast"),Mpo=o(" (SqueezeBERT model)"),Epo=l(),js=a("li"),Tie=a("strong"),Cpo=o("t5"),wpo=o(" \u2014 "),EI=a("a"),Apo=o("T5Tokenizer"),Lpo=o(" or "),CI=a("a"),ypo=o("T5TokenizerFast"),xpo=o(" (T5 model)"),$po=l(),Ch=a("li"),Mie=a("strong"),kpo=o("tapas"),Spo=o(" \u2014 "),wI=a("a"),Rpo=o("TapasTokenizer"),Ppo=o(" (TAPAS model)"),Bpo=l(),wh=a("li"),Eie=a("strong"),Npo=o("tapex"),Ipo=o(" \u2014 "),AI=a("a"),qpo=o("TapexTokenizer"),jpo=o(" (TAPEX model)"),Dpo=l(),Ah=a("li"),Cie=a("strong"),Gpo=o("transfo-xl"),Opo=o(" \u2014 "),LI=a("a"),Vpo=o("TransfoXLTokenizer"),Xpo=o(" (Transformer-XL model)"),zpo=l(),Ds=a("li"),wie=a("strong"),Qpo=o("vilt"),Wpo=o(" \u2014 "),yI=a("a"),Hpo=o("BertTokenizer"),Upo=o(" or "),xI=a("a"),Jpo=o("BertTokenizerFast"),Ypo=o(" (ViLT model)"),Kpo=l(),Gs=a("li"),Aie=a("strong"),Zpo=o("visual_bert"),e_o=o(" \u2014 "),$I=a("a"),o_o=o("BertTokenizer"),r_o=o(" or "),kI=a("a"),t_o=o("BertTokenizerFast"),a_o=o(" (VisualBERT model)"),n_o=l(),Lh=a("li"),Lie=a("strong"),s_o=o("wav2vec2"),l_o=o(" \u2014 "),SI=a("a"),i_o=o("Wav2Vec2CTCTokenizer"),d_o=o(" (Wav2Vec2 model)"),c_o=l(),yh=a("li"),yie=a("strong"),f_o=o("wav2vec2-conformer"),m_o=o(" \u2014 "),RI=a("a"),g_o=o("Wav2Vec2CTCTokenizer"),h_o=o(" (Wav2Vec2-Conformer model)"),p_o=l(),xh=a("li"),xie=a("strong"),__o=o("wav2vec2_phoneme"),u_o=o(" \u2014 "),PI=a("a"),b_o=o("Wav2Vec2PhonemeCTCTokenizer"),v_o=o(" (Wav2Vec2Phoneme model)"),F_o=l(),Os=a("li"),$ie=a("strong"),T_o=o("xglm"),M_o=o(" \u2014 "),BI=a("a"),E_o=o("XGLMTokenizer"),C_o=o(" or "),NI=a("a"),w_o=o("XGLMTokenizerFast"),A_o=o(" (XGLM model)"),L_o=l(),$h=a("li"),kie=a("strong"),y_o=o("xlm"),x_o=o(" \u2014 "),II=a("a"),$_o=o("XLMTokenizer"),k_o=o(" (XLM model)"),S_o=l(),kh=a("li"),Sie=a("strong"),R_o=o("xlm-prophetnet"),P_o=o(" \u2014 "),qI=a("a"),B_o=o("XLMProphetNetTokenizer"),N_o=o(" (XLM-ProphetNet model)"),I_o=l(),Vs=a("li"),Rie=a("strong"),q_o=o("xlm-roberta"),j_o=o(" \u2014 "),jI=a("a"),D_o=o("XLMRobertaTokenizer"),G_o=o(" or "),DI=a("a"),O_o=o("XLMRobertaTokenizerFast"),V_o=o(" (XLM-RoBERTa model)"),X_o=l(),Xs=a("li"),Pie=a("strong"),z_o=o("xlm-roberta-xl"),Q_o=o(" \u2014 "),GI=a("a"),W_o=o("RobertaTokenizer"),H_o=o(" or "),OI=a("a"),U_o=o("RobertaTokenizerFast"),J_o=o(" (XLM-RoBERTa-XL model)"),Y_o=l(),zs=a("li"),Bie=a("strong"),K_o=o("xlnet"),Z_o=o(" \u2014 "),VI=a("a"),euo=o("XLNetTokenizer"),ouo=o(" or "),XI=a("a"),ruo=o("XLNetTokenizerFast"),tuo=o(" (XLNet model)"),auo=l(),Qs=a("li"),Nie=a("strong"),nuo=o("yoso"),suo=o(" \u2014 "),zI=a("a"),luo=o("AlbertTokenizer"),iuo=o(" or "),QI=a("a"),duo=o("AlbertTokenizerFast"),cuo=o(" (YOSO model)"),fuo=l(),F(Sh.$$.fragment),muo=l(),Rh=a("div"),F(uy.$$.fragment),guo=l(),Iie=a("p"),huo=o("Register a new tokenizer in this mapping."),nXe=l(),Ii=a("h2"),Ph=a("a"),qie=a("span"),F(by.$$.fragment),puo=l(),jie=a("span"),_uo=o("AutoFeatureExtractor"),sXe=l(),Lo=a("div"),F(vy.$$.fragment),uuo=l(),Fy=a("p"),buo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WI=a("a"),vuo=o("AutoFeatureExtractor.from_pretrained()"),Fuo=o(" class method."),Tuo=l(),Ty=a("p"),Muo=o("This class cannot be instantiated directly using "),Die=a("code"),Euo=o("__init__()"),Cuo=o(" (throws an error)."),wuo=l(),He=a("div"),F(My.$$.fragment),Auo=l(),Gie=a("p"),Luo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yuo=l(),Ba=a("p"),xuo=o("The feature extractor class to instantiate is selected based on the "),Oie=a("code"),$uo=o("model_type"),kuo=o(` property of the config object
(either passed as an argument or loaded from `),Vie=a("code"),Suo=o("pretrained_model_name_or_path"),Ruo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xie=a("code"),Puo=o("pretrained_model_name_or_path"),Buo=o(":"),Nuo=l(),Y=a("ul"),Bh=a("li"),zie=a("strong"),Iuo=o("beit"),quo=o(" \u2014 "),HI=a("a"),juo=o("BeitFeatureExtractor"),Duo=o(" (BEiT model)"),Guo=l(),Nh=a("li"),Qie=a("strong"),Ouo=o("clip"),Vuo=o(" \u2014 "),UI=a("a"),Xuo=o("CLIPFeatureExtractor"),zuo=o(" (CLIP model)"),Quo=l(),Ih=a("li"),Wie=a("strong"),Wuo=o("convnext"),Huo=o(" \u2014 "),JI=a("a"),Uuo=o("ConvNextFeatureExtractor"),Juo=o(" (ConvNeXT model)"),Yuo=l(),qh=a("li"),Hie=a("strong"),Kuo=o("cvt"),Zuo=o(" \u2014 "),YI=a("a"),e1o=o("ConvNextFeatureExtractor"),o1o=o(" (CvT model)"),r1o=l(),jh=a("li"),Uie=a("strong"),t1o=o("data2vec-audio"),a1o=o(" \u2014 "),KI=a("a"),n1o=o("Wav2Vec2FeatureExtractor"),s1o=o(" (Data2VecAudio model)"),l1o=l(),Dh=a("li"),Jie=a("strong"),i1o=o("data2vec-vision"),d1o=o(" \u2014 "),ZI=a("a"),c1o=o("BeitFeatureExtractor"),f1o=o(" (Data2VecVision model)"),m1o=l(),Gh=a("li"),Yie=a("strong"),g1o=o("deit"),h1o=o(" \u2014 "),eq=a("a"),p1o=o("DeiTFeatureExtractor"),_1o=o(" (DeiT model)"),u1o=l(),Oh=a("li"),Kie=a("strong"),b1o=o("detr"),v1o=o(" \u2014 "),oq=a("a"),F1o=o("DetrFeatureExtractor"),T1o=o(" (DETR model)"),M1o=l(),Vh=a("li"),Zie=a("strong"),E1o=o("dpt"),C1o=o(" \u2014 "),rq=a("a"),w1o=o("DPTFeatureExtractor"),A1o=o(" (DPT model)"),L1o=l(),Xh=a("li"),ede=a("strong"),y1o=o("flava"),x1o=o(" \u2014 "),tq=a("a"),$1o=o("FlavaFeatureExtractor"),k1o=o(" (FLAVA model)"),S1o=l(),zh=a("li"),ode=a("strong"),R1o=o("glpn"),P1o=o(" \u2014 "),aq=a("a"),B1o=o("GLPNFeatureExtractor"),N1o=o(" (GLPN model)"),I1o=l(),Qh=a("li"),rde=a("strong"),q1o=o("groupvit"),j1o=o(" \u2014 "),nq=a("a"),D1o=o("CLIPFeatureExtractor"),G1o=o(" (GroupViT model)"),O1o=l(),Wh=a("li"),tde=a("strong"),V1o=o("hubert"),X1o=o(" \u2014 "),sq=a("a"),z1o=o("Wav2Vec2FeatureExtractor"),Q1o=o(" (Hubert model)"),W1o=l(),Hh=a("li"),ade=a("strong"),H1o=o("imagegpt"),U1o=o(" \u2014 "),lq=a("a"),J1o=o("ImageGPTFeatureExtractor"),Y1o=o(" (ImageGPT model)"),K1o=l(),Uh=a("li"),nde=a("strong"),Z1o=o("layoutlmv2"),e4o=o(" \u2014 "),iq=a("a"),o4o=o("LayoutLMv2FeatureExtractor"),r4o=o(" (LayoutLMv2 model)"),t4o=l(),Jh=a("li"),sde=a("strong"),a4o=o("layoutlmv3"),n4o=o(" \u2014 "),dq=a("a"),s4o=o("LayoutLMv3FeatureExtractor"),l4o=o(" (LayoutLMv3 model)"),i4o=l(),Yh=a("li"),lde=a("strong"),d4o=o("levit"),c4o=o(" \u2014 "),cq=a("a"),f4o=o("LevitFeatureExtractor"),m4o=o(" (LeViT model)"),g4o=l(),Kh=a("li"),ide=a("strong"),h4o=o("maskformer"),p4o=o(" \u2014 "),fq=a("a"),_4o=o("MaskFormerFeatureExtractor"),u4o=o(" (MaskFormer model)"),b4o=l(),Zh=a("li"),dde=a("strong"),v4o=o("mctct"),F4o=o(" \u2014 "),mq=a("a"),T4o=o("MCTCTFeatureExtractor"),M4o=o(" (M-CTC-T model)"),E4o=l(),ep=a("li"),cde=a("strong"),C4o=o("mobilevit"),w4o=o(" \u2014 "),gq=a("a"),A4o=o("MobileViTFeatureExtractor"),L4o=o(" (MobileViT model)"),y4o=l(),op=a("li"),fde=a("strong"),x4o=o("perceiver"),$4o=o(" \u2014 "),hq=a("a"),k4o=o("PerceiverFeatureExtractor"),S4o=o(" (Perceiver model)"),R4o=l(),rp=a("li"),mde=a("strong"),P4o=o("poolformer"),B4o=o(" \u2014 "),pq=a("a"),N4o=o("PoolFormerFeatureExtractor"),I4o=o(" (PoolFormer model)"),q4o=l(),tp=a("li"),gde=a("strong"),j4o=o("regnet"),D4o=o(" \u2014 "),_q=a("a"),G4o=o("ConvNextFeatureExtractor"),O4o=o(" (RegNet model)"),V4o=l(),ap=a("li"),hde=a("strong"),X4o=o("resnet"),z4o=o(" \u2014 "),uq=a("a"),Q4o=o("ConvNextFeatureExtractor"),W4o=o(" (ResNet model)"),H4o=l(),np=a("li"),pde=a("strong"),U4o=o("segformer"),J4o=o(" \u2014 "),bq=a("a"),Y4o=o("SegformerFeatureExtractor"),K4o=o(" (SegFormer model)"),Z4o=l(),sp=a("li"),_de=a("strong"),e2o=o("speech_to_text"),o2o=o(" \u2014 "),vq=a("a"),r2o=o("Speech2TextFeatureExtractor"),t2o=o(" (Speech2Text model)"),a2o=l(),lp=a("li"),ude=a("strong"),n2o=o("swin"),s2o=o(" \u2014 "),Fq=a("a"),l2o=o("ViTFeatureExtractor"),i2o=o(" (Swin Transformer model)"),d2o=l(),ip=a("li"),bde=a("strong"),c2o=o("van"),f2o=o(" \u2014 "),Tq=a("a"),m2o=o("ConvNextFeatureExtractor"),g2o=o(" (VAN model)"),h2o=l(),dp=a("li"),vde=a("strong"),p2o=o("vilt"),_2o=o(" \u2014 "),Mq=a("a"),u2o=o("ViltFeatureExtractor"),b2o=o(" (ViLT model)"),v2o=l(),cp=a("li"),Fde=a("strong"),F2o=o("vit"),T2o=o(" \u2014 "),Eq=a("a"),M2o=o("ViTFeatureExtractor"),E2o=o(" (ViT model)"),C2o=l(),fp=a("li"),Tde=a("strong"),w2o=o("vit_mae"),A2o=o(" \u2014 "),Cq=a("a"),L2o=o("ViTFeatureExtractor"),y2o=o(" (ViTMAE model)"),x2o=l(),mp=a("li"),Mde=a("strong"),$2o=o("wav2vec2"),k2o=o(" \u2014 "),wq=a("a"),S2o=o("Wav2Vec2FeatureExtractor"),R2o=o(" (Wav2Vec2 model)"),P2o=l(),gp=a("li"),Ede=a("strong"),B2o=o("wav2vec2-conformer"),N2o=o(" \u2014 "),Aq=a("a"),I2o=o("Wav2Vec2FeatureExtractor"),q2o=o(" (Wav2Vec2-Conformer model)"),j2o=l(),hp=a("li"),Cde=a("strong"),D2o=o("yolos"),G2o=o(" \u2014 "),Lq=a("a"),O2o=o("YolosFeatureExtractor"),V2o=o(" (YOLOS model)"),X2o=l(),F(pp.$$.fragment),z2o=l(),F(_p.$$.fragment),Q2o=l(),up=a("div"),F(Ey.$$.fragment),W2o=l(),wde=a("p"),H2o=o("Register a new feature extractor for this class."),lXe=l(),qi=a("h2"),bp=a("a"),Ade=a("span"),F(Cy.$$.fragment),U2o=l(),Lde=a("span"),J2o=o("AutoProcessor"),iXe=l(),yo=a("div"),F(wy.$$.fragment),Y2o=l(),Ay=a("p"),K2o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yq=a("a"),Z2o=o("AutoProcessor.from_pretrained()"),ebo=o(" class method."),obo=l(),Ly=a("p"),rbo=o("This class cannot be instantiated directly using "),yde=a("code"),tbo=o("__init__()"),abo=o(" (throws an error)."),nbo=l(),Ue=a("div"),F(yy.$$.fragment),sbo=l(),xde=a("p"),lbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ibo=l(),ji=a("p"),dbo=o("The processor class to instantiate is selected based on the "),$de=a("code"),cbo=o("model_type"),fbo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),mbo=o("pretrained_model_name_or_path"),gbo=o(" if possible):"),hbo=l(),he=a("ul"),vp=a("li"),Sde=a("strong"),pbo=o("clip"),_bo=o(" \u2014 "),xq=a("a"),ubo=o("CLIPProcessor"),bbo=o(" (CLIP model)"),vbo=l(),Fp=a("li"),Rde=a("strong"),Fbo=o("flava"),Tbo=o(" \u2014 "),Pde=a("code"),Mbo=o("FLAVAProcessor"),Ebo=o(" (FLAVA model)"),Cbo=l(),Tp=a("li"),Bde=a("strong"),wbo=o("groupvit"),Abo=o(" \u2014 "),$q=a("a"),Lbo=o("CLIPProcessor"),ybo=o(" (GroupViT model)"),xbo=l(),Mp=a("li"),Nde=a("strong"),$bo=o("layoutlmv2"),kbo=o(" \u2014 "),kq=a("a"),Sbo=o("LayoutLMv2Processor"),Rbo=o(" (LayoutLMv2 model)"),Pbo=l(),Ep=a("li"),Ide=a("strong"),Bbo=o("layoutlmv3"),Nbo=o(" \u2014 "),Sq=a("a"),Ibo=o("LayoutLMv3Processor"),qbo=o(" (LayoutLMv3 model)"),jbo=l(),Cp=a("li"),qde=a("strong"),Dbo=o("layoutxlm"),Gbo=o(" \u2014 "),Rq=a("a"),Obo=o("LayoutXLMProcessor"),Vbo=o(" (LayoutXLM model)"),Xbo=l(),wp=a("li"),jde=a("strong"),zbo=o("sew"),Qbo=o(" \u2014 "),Pq=a("a"),Wbo=o("Wav2Vec2Processor"),Hbo=o(" (SEW model)"),Ubo=l(),Ap=a("li"),Dde=a("strong"),Jbo=o("sew-d"),Ybo=o(" \u2014 "),Bq=a("a"),Kbo=o("Wav2Vec2Processor"),Zbo=o(" (SEW-D model)"),evo=l(),Lp=a("li"),Gde=a("strong"),ovo=o("speech_to_text"),rvo=o(" \u2014 "),Nq=a("a"),tvo=o("Speech2TextProcessor"),avo=o(" (Speech2Text model)"),nvo=l(),yp=a("li"),Ode=a("strong"),svo=o("speech_to_text_2"),lvo=o(" \u2014 "),Iq=a("a"),ivo=o("Speech2Text2Processor"),dvo=o(" (Speech2Text2 model)"),cvo=l(),xp=a("li"),Vde=a("strong"),fvo=o("trocr"),mvo=o(" \u2014 "),qq=a("a"),gvo=o("TrOCRProcessor"),hvo=o(" (TrOCR model)"),pvo=l(),$p=a("li"),Xde=a("strong"),_vo=o("unispeech"),uvo=o(" \u2014 "),jq=a("a"),bvo=o("Wav2Vec2Processor"),vvo=o(" (UniSpeech model)"),Fvo=l(),kp=a("li"),zde=a("strong"),Tvo=o("unispeech-sat"),Mvo=o(" \u2014 "),Dq=a("a"),Evo=o("Wav2Vec2Processor"),Cvo=o(" (UniSpeechSat model)"),wvo=l(),Sp=a("li"),Qde=a("strong"),Avo=o("vilt"),Lvo=o(" \u2014 "),Gq=a("a"),yvo=o("ViltProcessor"),xvo=o(" (ViLT model)"),$vo=l(),Rp=a("li"),Wde=a("strong"),kvo=o("vision-text-dual-encoder"),Svo=o(" \u2014 "),Oq=a("a"),Rvo=o("VisionTextDualEncoderProcessor"),Pvo=o(" (VisionTextDualEncoder model)"),Bvo=l(),Pp=a("li"),Hde=a("strong"),Nvo=o("wav2vec2"),Ivo=o(" \u2014 "),Vq=a("a"),qvo=o("Wav2Vec2Processor"),jvo=o(" (Wav2Vec2 model)"),Dvo=l(),Bp=a("li"),Ude=a("strong"),Gvo=o("wav2vec2-conformer"),Ovo=o(" \u2014 "),Xq=a("a"),Vvo=o("Wav2Vec2Processor"),Xvo=o(" (Wav2Vec2-Conformer model)"),zvo=l(),Np=a("li"),Jde=a("strong"),Qvo=o("wavlm"),Wvo=o(" \u2014 "),zq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (WavLM model)"),Jvo=l(),F(Ip.$$.fragment),Yvo=l(),F(qp.$$.fragment),Kvo=l(),jp=a("div"),F(xy.$$.fragment),Zvo=l(),Yde=a("p"),e3o=o("Register a new processor for this class."),dXe=l(),Di=a("h2"),Dp=a("a"),Kde=a("span"),F($y.$$.fragment),o3o=l(),Zde=a("span"),r3o=o("AutoModel"),cXe=l(),xo=a("div"),F(ky.$$.fragment),t3o=l(),Gi=a("p"),a3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qq=a("a"),n3o=o("from_pretrained()"),s3o=o(" class method or the "),Wq=a("a"),l3o=o("from_config()"),i3o=o(` class
method.`),d3o=l(),Sy=a("p"),c3o=o("This class cannot be instantiated directly using "),ece=a("code"),f3o=o("__init__()"),m3o=o(" (throws an error)."),g3o=l(),lt=a("div"),F(Ry.$$.fragment),h3o=l(),oce=a("p"),p3o=o("Instantiates one of the base model classes of the library from a configuration."),_3o=l(),Oi=a("p"),u3o=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),b3o=o("not"),v3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),F3o=o("from_pretrained()"),T3o=o(" to load the model weights."),M3o=l(),F(Gp.$$.fragment),E3o=l(),Je=a("div"),F(Py.$$.fragment),C3o=l(),tce=a("p"),w3o=o("Instantiate one of the base model classes of the library from a pretrained model."),A3o=l(),Na=a("p"),L3o=o("The model class to instantiate is selected based on the "),ace=a("code"),y3o=o("model_type"),x3o=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),$3o=o("pretrained_model_name_or_path"),k3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),S3o=o("pretrained_model_name_or_path"),R3o=o(":"),P3o=l(),y=a("ul"),Op=a("li"),lce=a("strong"),B3o=o("albert"),N3o=o(" \u2014 "),Uq=a("a"),I3o=o("AlbertModel"),q3o=o(" (ALBERT model)"),j3o=l(),Vp=a("li"),ice=a("strong"),D3o=o("bart"),G3o=o(" \u2014 "),Jq=a("a"),O3o=o("BartModel"),V3o=o(" (BART model)"),X3o=l(),Xp=a("li"),dce=a("strong"),z3o=o("beit"),Q3o=o(" \u2014 "),Yq=a("a"),W3o=o("BeitModel"),H3o=o(" (BEiT model)"),U3o=l(),zp=a("li"),cce=a("strong"),J3o=o("bert"),Y3o=o(" \u2014 "),Kq=a("a"),K3o=o("BertModel"),Z3o=o(" (BERT model)"),e5o=l(),Qp=a("li"),fce=a("strong"),o5o=o("bert-generation"),r5o=o(" \u2014 "),Zq=a("a"),t5o=o("BertGenerationEncoder"),a5o=o(" (Bert Generation model)"),n5o=l(),Wp=a("li"),mce=a("strong"),s5o=o("big_bird"),l5o=o(" \u2014 "),ej=a("a"),i5o=o("BigBirdModel"),d5o=o(" (BigBird model)"),c5o=l(),Hp=a("li"),gce=a("strong"),f5o=o("bigbird_pegasus"),m5o=o(" \u2014 "),oj=a("a"),g5o=o("BigBirdPegasusModel"),h5o=o(" (BigBird-Pegasus model)"),p5o=l(),Up=a("li"),hce=a("strong"),_5o=o("blenderbot"),u5o=o(" \u2014 "),rj=a("a"),b5o=o("BlenderbotModel"),v5o=o(" (Blenderbot model)"),F5o=l(),Jp=a("li"),pce=a("strong"),T5o=o("blenderbot-small"),M5o=o(" \u2014 "),tj=a("a"),E5o=o("BlenderbotSmallModel"),C5o=o(" (BlenderbotSmall model)"),w5o=l(),Yp=a("li"),_ce=a("strong"),A5o=o("bloom"),L5o=o(" \u2014 "),aj=a("a"),y5o=o("BloomModel"),x5o=o(" (BLOOM model)"),$5o=l(),Kp=a("li"),uce=a("strong"),k5o=o("camembert"),S5o=o(" \u2014 "),nj=a("a"),R5o=o("CamembertModel"),P5o=o(" (CamemBERT model)"),B5o=l(),Zp=a("li"),bce=a("strong"),N5o=o("canine"),I5o=o(" \u2014 "),sj=a("a"),q5o=o("CanineModel"),j5o=o(" (CANINE model)"),D5o=l(),e_=a("li"),vce=a("strong"),G5o=o("clip"),O5o=o(" \u2014 "),lj=a("a"),V5o=o("CLIPModel"),X5o=o(" (CLIP model)"),z5o=l(),o_=a("li"),Fce=a("strong"),Q5o=o("codegen"),W5o=o(" \u2014 "),ij=a("a"),H5o=o("CodeGenModel"),U5o=o(" (CodeGen model)"),J5o=l(),r_=a("li"),Tce=a("strong"),Y5o=o("convbert"),K5o=o(" \u2014 "),dj=a("a"),Z5o=o("ConvBertModel"),eFo=o(" (ConvBERT model)"),oFo=l(),t_=a("li"),Mce=a("strong"),rFo=o("convnext"),tFo=o(" \u2014 "),cj=a("a"),aFo=o("ConvNextModel"),nFo=o(" (ConvNeXT model)"),sFo=l(),a_=a("li"),Ece=a("strong"),lFo=o("ctrl"),iFo=o(" \u2014 "),fj=a("a"),dFo=o("CTRLModel"),cFo=o(" (CTRL model)"),fFo=l(),n_=a("li"),Cce=a("strong"),mFo=o("cvt"),gFo=o(" \u2014 "),mj=a("a"),hFo=o("CvtModel"),pFo=o(" (CvT model)"),_Fo=l(),s_=a("li"),wce=a("strong"),uFo=o("data2vec-audio"),bFo=o(" \u2014 "),gj=a("a"),vFo=o("Data2VecAudioModel"),FFo=o(" (Data2VecAudio model)"),TFo=l(),l_=a("li"),Ace=a("strong"),MFo=o("data2vec-text"),EFo=o(" \u2014 "),hj=a("a"),CFo=o("Data2VecTextModel"),wFo=o(" (Data2VecText model)"),AFo=l(),i_=a("li"),Lce=a("strong"),LFo=o("data2vec-vision"),yFo=o(" \u2014 "),pj=a("a"),xFo=o("Data2VecVisionModel"),$Fo=o(" (Data2VecVision model)"),kFo=l(),d_=a("li"),yce=a("strong"),SFo=o("deberta"),RFo=o(" \u2014 "),_j=a("a"),PFo=o("DebertaModel"),BFo=o(" (DeBERTa model)"),NFo=l(),c_=a("li"),xce=a("strong"),IFo=o("deberta-v2"),qFo=o(" \u2014 "),uj=a("a"),jFo=o("DebertaV2Model"),DFo=o(" (DeBERTa-v2 model)"),GFo=l(),f_=a("li"),$ce=a("strong"),OFo=o("decision_transformer"),VFo=o(" \u2014 "),bj=a("a"),XFo=o("DecisionTransformerModel"),zFo=o(" (Decision Transformer model)"),QFo=l(),m_=a("li"),kce=a("strong"),WFo=o("deit"),HFo=o(" \u2014 "),vj=a("a"),UFo=o("DeiTModel"),JFo=o(" (DeiT model)"),YFo=l(),g_=a("li"),Sce=a("strong"),KFo=o("detr"),ZFo=o(" \u2014 "),Fj=a("a"),e6o=o("DetrModel"),o6o=o(" (DETR model)"),r6o=l(),h_=a("li"),Rce=a("strong"),t6o=o("distilbert"),a6o=o(" \u2014 "),Tj=a("a"),n6o=o("DistilBertModel"),s6o=o(" (DistilBERT model)"),l6o=l(),p_=a("li"),Pce=a("strong"),i6o=o("dpr"),d6o=o(" \u2014 "),Mj=a("a"),c6o=o("DPRQuestionEncoder"),f6o=o(" (DPR model)"),m6o=l(),__=a("li"),Bce=a("strong"),g6o=o("dpt"),h6o=o(" \u2014 "),Ej=a("a"),p6o=o("DPTModel"),_6o=o(" (DPT model)"),u6o=l(),u_=a("li"),Nce=a("strong"),b6o=o("electra"),v6o=o(" \u2014 "),Cj=a("a"),F6o=o("ElectraModel"),T6o=o(" (ELECTRA model)"),M6o=l(),b_=a("li"),Ice=a("strong"),E6o=o("flaubert"),C6o=o(" \u2014 "),wj=a("a"),w6o=o("FlaubertModel"),A6o=o(" (FlauBERT model)"),L6o=l(),v_=a("li"),qce=a("strong"),y6o=o("flava"),x6o=o(" \u2014 "),Aj=a("a"),$6o=o("FlavaModel"),k6o=o(" (FLAVA model)"),S6o=l(),F_=a("li"),jce=a("strong"),R6o=o("fnet"),P6o=o(" \u2014 "),Lj=a("a"),B6o=o("FNetModel"),N6o=o(" (FNet model)"),I6o=l(),T_=a("li"),Dce=a("strong"),q6o=o("fsmt"),j6o=o(" \u2014 "),yj=a("a"),D6o=o("FSMTModel"),G6o=o(" (FairSeq Machine-Translation model)"),O6o=l(),Ws=a("li"),Gce=a("strong"),V6o=o("funnel"),X6o=o(" \u2014 "),xj=a("a"),z6o=o("FunnelModel"),Q6o=o(" or "),$j=a("a"),W6o=o("FunnelBaseModel"),H6o=o(" (Funnel Transformer model)"),U6o=l(),M_=a("li"),Oce=a("strong"),J6o=o("glpn"),Y6o=o(" \u2014 "),kj=a("a"),K6o=o("GLPNModel"),Z6o=o(" (GLPN model)"),eTo=l(),E_=a("li"),Vce=a("strong"),oTo=o("gpt2"),rTo=o(" \u2014 "),Sj=a("a"),tTo=o("GPT2Model"),aTo=o(" (OpenAI GPT-2 model)"),nTo=l(),C_=a("li"),Xce=a("strong"),sTo=o("gpt_neo"),lTo=o(" \u2014 "),Rj=a("a"),iTo=o("GPTNeoModel"),dTo=o(" (GPT Neo model)"),cTo=l(),w_=a("li"),zce=a("strong"),fTo=o("gpt_neox"),mTo=o(" \u2014 "),Pj=a("a"),gTo=o("GPTNeoXModel"),hTo=o(" (GPT NeoX model)"),pTo=l(),A_=a("li"),Qce=a("strong"),_To=o("gptj"),uTo=o(" \u2014 "),Bj=a("a"),bTo=o("GPTJModel"),vTo=o(" (GPT-J model)"),FTo=l(),L_=a("li"),Wce=a("strong"),TTo=o("groupvit"),MTo=o(" \u2014 "),Nj=a("a"),ETo=o("GroupViTModel"),CTo=o(" (GroupViT model)"),wTo=l(),y_=a("li"),Hce=a("strong"),ATo=o("hubert"),LTo=o(" \u2014 "),Ij=a("a"),yTo=o("HubertModel"),xTo=o(" (Hubert model)"),$To=l(),x_=a("li"),Uce=a("strong"),kTo=o("ibert"),STo=o(" \u2014 "),qj=a("a"),RTo=o("IBertModel"),PTo=o(" (I-BERT model)"),BTo=l(),$_=a("li"),Jce=a("strong"),NTo=o("imagegpt"),ITo=o(" \u2014 "),jj=a("a"),qTo=o("ImageGPTModel"),jTo=o(" (ImageGPT model)"),DTo=l(),k_=a("li"),Yce=a("strong"),GTo=o("layoutlm"),OTo=o(" \u2014 "),Dj=a("a"),VTo=o("LayoutLMModel"),XTo=o(" (LayoutLM model)"),zTo=l(),S_=a("li"),Kce=a("strong"),QTo=o("layoutlmv2"),WTo=o(" \u2014 "),Gj=a("a"),HTo=o("LayoutLMv2Model"),UTo=o(" (LayoutLMv2 model)"),JTo=l(),R_=a("li"),Zce=a("strong"),YTo=o("layoutlmv3"),KTo=o(" \u2014 "),Oj=a("a"),ZTo=o("LayoutLMv3Model"),eMo=o(" (LayoutLMv3 model)"),oMo=l(),P_=a("li"),efe=a("strong"),rMo=o("led"),tMo=o(" \u2014 "),Vj=a("a"),aMo=o("LEDModel"),nMo=o(" (LED model)"),sMo=l(),B_=a("li"),ofe=a("strong"),lMo=o("levit"),iMo=o(" \u2014 "),Xj=a("a"),dMo=o("LevitModel"),cMo=o(" (LeViT model)"),fMo=l(),N_=a("li"),rfe=a("strong"),mMo=o("longformer"),gMo=o(" \u2014 "),zj=a("a"),hMo=o("LongformerModel"),pMo=o(" (Longformer model)"),_Mo=l(),I_=a("li"),tfe=a("strong"),uMo=o("longt5"),bMo=o(" \u2014 "),Qj=a("a"),vMo=o("LongT5Model"),FMo=o(" (LongT5 model)"),TMo=l(),q_=a("li"),afe=a("strong"),MMo=o("luke"),EMo=o(" \u2014 "),Wj=a("a"),CMo=o("LukeModel"),wMo=o(" (LUKE model)"),AMo=l(),j_=a("li"),nfe=a("strong"),LMo=o("lxmert"),yMo=o(" \u2014 "),Hj=a("a"),xMo=o("LxmertModel"),$Mo=o(" (LXMERT model)"),kMo=l(),D_=a("li"),sfe=a("strong"),SMo=o("m2m_100"),RMo=o(" \u2014 "),Uj=a("a"),PMo=o("M2M100Model"),BMo=o(" (M2M100 model)"),NMo=l(),G_=a("li"),lfe=a("strong"),IMo=o("marian"),qMo=o(" \u2014 "),Jj=a("a"),jMo=o("MarianModel"),DMo=o(" (Marian model)"),GMo=l(),O_=a("li"),ife=a("strong"),OMo=o("maskformer"),VMo=o(" \u2014 "),Yj=a("a"),XMo=o("MaskFormerModel"),zMo=o(" (MaskFormer model)"),QMo=l(),V_=a("li"),dfe=a("strong"),WMo=o("mbart"),HMo=o(" \u2014 "),Kj=a("a"),UMo=o("MBartModel"),JMo=o(" (mBART model)"),YMo=l(),X_=a("li"),cfe=a("strong"),KMo=o("mctct"),ZMo=o(" \u2014 "),Zj=a("a"),eEo=o("MCTCTModel"),oEo=o(" (M-CTC-T model)"),rEo=l(),z_=a("li"),ffe=a("strong"),tEo=o("megatron-bert"),aEo=o(" \u2014 "),eD=a("a"),nEo=o("MegatronBertModel"),sEo=o(" (Megatron-BERT model)"),lEo=l(),Q_=a("li"),mfe=a("strong"),iEo=o("mobilebert"),dEo=o(" \u2014 "),oD=a("a"),cEo=o("MobileBertModel"),fEo=o(" (MobileBERT model)"),mEo=l(),W_=a("li"),gfe=a("strong"),gEo=o("mobilevit"),hEo=o(" \u2014 "),rD=a("a"),pEo=o("MobileViTModel"),_Eo=o(" (MobileViT model)"),uEo=l(),H_=a("li"),hfe=a("strong"),bEo=o("mpnet"),vEo=o(" \u2014 "),tD=a("a"),FEo=o("MPNetModel"),TEo=o(" (MPNet model)"),MEo=l(),U_=a("li"),pfe=a("strong"),EEo=o("mt5"),CEo=o(" \u2014 "),aD=a("a"),wEo=o("MT5Model"),AEo=o(" (MT5 model)"),LEo=l(),J_=a("li"),_fe=a("strong"),yEo=o("mvp"),xEo=o(" \u2014 "),nD=a("a"),$Eo=o("MvpModel"),kEo=o(" (MVP model)"),SEo=l(),Y_=a("li"),ufe=a("strong"),REo=o("nezha"),PEo=o(" \u2014 "),sD=a("a"),BEo=o("NezhaModel"),NEo=o(" (Nezha model)"),IEo=l(),K_=a("li"),bfe=a("strong"),qEo=o("nystromformer"),jEo=o(" \u2014 "),lD=a("a"),DEo=o("NystromformerModel"),GEo=o(" (Nystr\xF6mformer model)"),OEo=l(),Z_=a("li"),vfe=a("strong"),VEo=o("openai-gpt"),XEo=o(" \u2014 "),iD=a("a"),zEo=o("OpenAIGPTModel"),QEo=o(" (OpenAI GPT model)"),WEo=l(),eu=a("li"),Ffe=a("strong"),HEo=o("opt"),UEo=o(" \u2014 "),dD=a("a"),JEo=o("OPTModel"),YEo=o(" (OPT model)"),KEo=l(),ou=a("li"),Tfe=a("strong"),ZEo=o("pegasus"),eCo=o(" \u2014 "),cD=a("a"),oCo=o("PegasusModel"),rCo=o(" (Pegasus model)"),tCo=l(),ru=a("li"),Mfe=a("strong"),aCo=o("perceiver"),nCo=o(" \u2014 "),fD=a("a"),sCo=o("PerceiverModel"),lCo=o(" (Perceiver model)"),iCo=l(),tu=a("li"),Efe=a("strong"),dCo=o("plbart"),cCo=o(" \u2014 "),mD=a("a"),fCo=o("PLBartModel"),mCo=o(" (PLBart model)"),gCo=l(),au=a("li"),Cfe=a("strong"),hCo=o("poolformer"),pCo=o(" \u2014 "),gD=a("a"),_Co=o("PoolFormerModel"),uCo=o(" (PoolFormer model)"),bCo=l(),nu=a("li"),wfe=a("strong"),vCo=o("prophetnet"),FCo=o(" \u2014 "),hD=a("a"),TCo=o("ProphetNetModel"),MCo=o(" (ProphetNet model)"),ECo=l(),su=a("li"),Afe=a("strong"),CCo=o("qdqbert"),wCo=o(" \u2014 "),pD=a("a"),ACo=o("QDQBertModel"),LCo=o(" (QDQBert model)"),yCo=l(),lu=a("li"),Lfe=a("strong"),xCo=o("reformer"),$Co=o(" \u2014 "),_D=a("a"),kCo=o("ReformerModel"),SCo=o(" (Reformer model)"),RCo=l(),iu=a("li"),yfe=a("strong"),PCo=o("regnet"),BCo=o(" \u2014 "),uD=a("a"),NCo=o("RegNetModel"),ICo=o(" (RegNet model)"),qCo=l(),du=a("li"),xfe=a("strong"),jCo=o("rembert"),DCo=o(" \u2014 "),bD=a("a"),GCo=o("RemBertModel"),OCo=o(" (RemBERT model)"),VCo=l(),cu=a("li"),$fe=a("strong"),XCo=o("resnet"),zCo=o(" \u2014 "),vD=a("a"),QCo=o("ResNetModel"),WCo=o(" (ResNet model)"),HCo=l(),fu=a("li"),kfe=a("strong"),UCo=o("retribert"),JCo=o(" \u2014 "),FD=a("a"),YCo=o("RetriBertModel"),KCo=o(" (RetriBERT model)"),ZCo=l(),mu=a("li"),Sfe=a("strong"),e0o=o("roberta"),o0o=o(" \u2014 "),TD=a("a"),r0o=o("RobertaModel"),t0o=o(" (RoBERTa model)"),a0o=l(),gu=a("li"),Rfe=a("strong"),n0o=o("roformer"),s0o=o(" \u2014 "),MD=a("a"),l0o=o("RoFormerModel"),i0o=o(" (RoFormer model)"),d0o=l(),hu=a("li"),Pfe=a("strong"),c0o=o("segformer"),f0o=o(" \u2014 "),ED=a("a"),m0o=o("SegformerModel"),g0o=o(" (SegFormer model)"),h0o=l(),pu=a("li"),Bfe=a("strong"),p0o=o("sew"),_0o=o(" \u2014 "),CD=a("a"),u0o=o("SEWModel"),b0o=o(" (SEW model)"),v0o=l(),_u=a("li"),Nfe=a("strong"),F0o=o("sew-d"),T0o=o(" \u2014 "),wD=a("a"),M0o=o("SEWDModel"),E0o=o(" (SEW-D model)"),C0o=l(),uu=a("li"),Ife=a("strong"),w0o=o("speech_to_text"),A0o=o(" \u2014 "),AD=a("a"),L0o=o("Speech2TextModel"),y0o=o(" (Speech2Text model)"),x0o=l(),bu=a("li"),qfe=a("strong"),$0o=o("splinter"),k0o=o(" \u2014 "),LD=a("a"),S0o=o("SplinterModel"),R0o=o(" (Splinter model)"),P0o=l(),vu=a("li"),jfe=a("strong"),B0o=o("squeezebert"),N0o=o(" \u2014 "),yD=a("a"),I0o=o("SqueezeBertModel"),q0o=o(" (SqueezeBERT model)"),j0o=l(),Fu=a("li"),Dfe=a("strong"),D0o=o("swin"),G0o=o(" \u2014 "),xD=a("a"),O0o=o("SwinModel"),V0o=o(" (Swin Transformer model)"),X0o=l(),Tu=a("li"),Gfe=a("strong"),z0o=o("t5"),Q0o=o(" \u2014 "),$D=a("a"),W0o=o("T5Model"),H0o=o(" (T5 model)"),U0o=l(),Mu=a("li"),Ofe=a("strong"),J0o=o("tapas"),Y0o=o(" \u2014 "),kD=a("a"),K0o=o("TapasModel"),Z0o=o(" (TAPAS model)"),ewo=l(),Eu=a("li"),Vfe=a("strong"),owo=o("trajectory_transformer"),rwo=o(" \u2014 "),SD=a("a"),two=o("TrajectoryTransformerModel"),awo=o(" (Trajectory Transformer model)"),nwo=l(),Cu=a("li"),Xfe=a("strong"),swo=o("transfo-xl"),lwo=o(" \u2014 "),RD=a("a"),iwo=o("TransfoXLModel"),dwo=o(" (Transformer-XL model)"),cwo=l(),wu=a("li"),zfe=a("strong"),fwo=o("unispeech"),mwo=o(" \u2014 "),PD=a("a"),gwo=o("UniSpeechModel"),hwo=o(" (UniSpeech model)"),pwo=l(),Au=a("li"),Qfe=a("strong"),_wo=o("unispeech-sat"),uwo=o(" \u2014 "),BD=a("a"),bwo=o("UniSpeechSatModel"),vwo=o(" (UniSpeechSat model)"),Fwo=l(),Lu=a("li"),Wfe=a("strong"),Two=o("van"),Mwo=o(" \u2014 "),ND=a("a"),Ewo=o("VanModel"),Cwo=o(" (VAN model)"),wwo=l(),yu=a("li"),Hfe=a("strong"),Awo=o("vilt"),Lwo=o(" \u2014 "),ID=a("a"),ywo=o("ViltModel"),xwo=o(" (ViLT model)"),$wo=l(),xu=a("li"),Ufe=a("strong"),kwo=o("vision-text-dual-encoder"),Swo=o(" \u2014 "),qD=a("a"),Rwo=o("VisionTextDualEncoderModel"),Pwo=o(" (VisionTextDualEncoder model)"),Bwo=l(),$u=a("li"),Jfe=a("strong"),Nwo=o("visual_bert"),Iwo=o(" \u2014 "),jD=a("a"),qwo=o("VisualBertModel"),jwo=o(" (VisualBERT model)"),Dwo=l(),ku=a("li"),Yfe=a("strong"),Gwo=o("vit"),Owo=o(" \u2014 "),DD=a("a"),Vwo=o("ViTModel"),Xwo=o(" (ViT model)"),zwo=l(),Su=a("li"),Kfe=a("strong"),Qwo=o("vit_mae"),Wwo=o(" \u2014 "),GD=a("a"),Hwo=o("ViTMAEModel"),Uwo=o(" (ViTMAE model)"),Jwo=l(),Ru=a("li"),Zfe=a("strong"),Ywo=o("wav2vec2"),Kwo=o(" \u2014 "),OD=a("a"),Zwo=o("Wav2Vec2Model"),eAo=o(" (Wav2Vec2 model)"),oAo=l(),Pu=a("li"),eme=a("strong"),rAo=o("wav2vec2-conformer"),tAo=o(" \u2014 "),VD=a("a"),aAo=o("Wav2Vec2ConformerModel"),nAo=o(" (Wav2Vec2-Conformer model)"),sAo=l(),Bu=a("li"),ome=a("strong"),lAo=o("wavlm"),iAo=o(" \u2014 "),XD=a("a"),dAo=o("WavLMModel"),cAo=o(" (WavLM model)"),fAo=l(),Nu=a("li"),rme=a("strong"),mAo=o("xglm"),gAo=o(" \u2014 "),zD=a("a"),hAo=o("XGLMModel"),pAo=o(" (XGLM model)"),_Ao=l(),Iu=a("li"),tme=a("strong"),uAo=o("xlm"),bAo=o(" \u2014 "),QD=a("a"),vAo=o("XLMModel"),FAo=o(" (XLM model)"),TAo=l(),qu=a("li"),ame=a("strong"),MAo=o("xlm-prophetnet"),EAo=o(" \u2014 "),WD=a("a"),CAo=o("XLMProphetNetModel"),wAo=o(" (XLM-ProphetNet model)"),AAo=l(),ju=a("li"),nme=a("strong"),LAo=o("xlm-roberta"),yAo=o(" \u2014 "),HD=a("a"),xAo=o("XLMRobertaModel"),$Ao=o(" (XLM-RoBERTa model)"),kAo=l(),Du=a("li"),sme=a("strong"),SAo=o("xlm-roberta-xl"),RAo=o(" \u2014 "),UD=a("a"),PAo=o("XLMRobertaXLModel"),BAo=o(" (XLM-RoBERTa-XL model)"),NAo=l(),Gu=a("li"),lme=a("strong"),IAo=o("xlnet"),qAo=o(" \u2014 "),JD=a("a"),jAo=o("XLNetModel"),DAo=o(" (XLNet model)"),GAo=l(),Ou=a("li"),ime=a("strong"),OAo=o("yolos"),VAo=o(" \u2014 "),YD=a("a"),XAo=o("YolosModel"),zAo=o(" (YOLOS model)"),QAo=l(),Vu=a("li"),dme=a("strong"),WAo=o("yoso"),HAo=o(" \u2014 "),KD=a("a"),UAo=o("YosoModel"),JAo=o(" (YOSO model)"),YAo=l(),Xu=a("p"),KAo=o("The model is set in evaluation mode by default using "),cme=a("code"),ZAo=o("model.eval()"),e7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),o7o=o("model.train()"),r7o=l(),F(zu.$$.fragment),fXe=l(),Vi=a("h2"),Qu=a("a"),mme=a("span"),F(By.$$.fragment),t7o=l(),gme=a("span"),a7o=o("AutoModelForPreTraining"),mXe=l(),$o=a("div"),F(Ny.$$.fragment),n7o=l(),Xi=a("p"),s7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZD=a("a"),l7o=o("from_pretrained()"),i7o=o(" class method or the "),eG=a("a"),d7o=o("from_config()"),c7o=o(` class
method.`),f7o=l(),Iy=a("p"),m7o=o("This class cannot be instantiated directly using "),hme=a("code"),g7o=o("__init__()"),h7o=o(" (throws an error)."),p7o=l(),it=a("div"),F(qy.$$.fragment),_7o=l(),pme=a("p"),u7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b7o=l(),zi=a("p"),v7o=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),F7o=o("not"),T7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),M7o=o("from_pretrained()"),E7o=o(" to load the model weights."),C7o=l(),F(Wu.$$.fragment),w7o=l(),Ye=a("div"),F(jy.$$.fragment),A7o=l(),ume=a("p"),L7o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y7o=l(),Ia=a("p"),x7o=o("The model class to instantiate is selected based on the "),bme=a("code"),$7o=o("model_type"),k7o=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),S7o=o("pretrained_model_name_or_path"),R7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),P7o=o("pretrained_model_name_or_path"),B7o=o(":"),N7o=l(),G=a("ul"),Hu=a("li"),Tme=a("strong"),I7o=o("albert"),q7o=o(" \u2014 "),rG=a("a"),j7o=o("AlbertForPreTraining"),D7o=o(" (ALBERT model)"),G7o=l(),Uu=a("li"),Mme=a("strong"),O7o=o("bart"),V7o=o(" \u2014 "),tG=a("a"),X7o=o("BartForConditionalGeneration"),z7o=o(" (BART model)"),Q7o=l(),Ju=a("li"),Eme=a("strong"),W7o=o("bert"),H7o=o(" \u2014 "),aG=a("a"),U7o=o("BertForPreTraining"),J7o=o(" (BERT model)"),Y7o=l(),Yu=a("li"),Cme=a("strong"),K7o=o("big_bird"),Z7o=o(" \u2014 "),nG=a("a"),eLo=o("BigBirdForPreTraining"),oLo=o(" (BigBird model)"),rLo=l(),Ku=a("li"),wme=a("strong"),tLo=o("bloom"),aLo=o(" \u2014 "),sG=a("a"),nLo=o("BloomForCausalLM"),sLo=o(" (BLOOM model)"),lLo=l(),Zu=a("li"),Ame=a("strong"),iLo=o("camembert"),dLo=o(" \u2014 "),lG=a("a"),cLo=o("CamembertForMaskedLM"),fLo=o(" (CamemBERT model)"),mLo=l(),e1=a("li"),Lme=a("strong"),gLo=o("ctrl"),hLo=o(" \u2014 "),iG=a("a"),pLo=o("CTRLLMHeadModel"),_Lo=o(" (CTRL model)"),uLo=l(),o1=a("li"),yme=a("strong"),bLo=o("data2vec-text"),vLo=o(" \u2014 "),dG=a("a"),FLo=o("Data2VecTextForMaskedLM"),TLo=o(" (Data2VecText model)"),MLo=l(),r1=a("li"),xme=a("strong"),ELo=o("deberta"),CLo=o(" \u2014 "),cG=a("a"),wLo=o("DebertaForMaskedLM"),ALo=o(" (DeBERTa model)"),LLo=l(),t1=a("li"),$me=a("strong"),yLo=o("deberta-v2"),xLo=o(" \u2014 "),fG=a("a"),$Lo=o("DebertaV2ForMaskedLM"),kLo=o(" (DeBERTa-v2 model)"),SLo=l(),a1=a("li"),kme=a("strong"),RLo=o("distilbert"),PLo=o(" \u2014 "),mG=a("a"),BLo=o("DistilBertForMaskedLM"),NLo=o(" (DistilBERT model)"),ILo=l(),n1=a("li"),Sme=a("strong"),qLo=o("electra"),jLo=o(" \u2014 "),gG=a("a"),DLo=o("ElectraForPreTraining"),GLo=o(" (ELECTRA model)"),OLo=l(),s1=a("li"),Rme=a("strong"),VLo=o("flaubert"),XLo=o(" \u2014 "),hG=a("a"),zLo=o("FlaubertWithLMHeadModel"),QLo=o(" (FlauBERT model)"),WLo=l(),l1=a("li"),Pme=a("strong"),HLo=o("flava"),ULo=o(" \u2014 "),pG=a("a"),JLo=o("FlavaForPreTraining"),YLo=o(" (FLAVA model)"),KLo=l(),i1=a("li"),Bme=a("strong"),ZLo=o("fnet"),eyo=o(" \u2014 "),_G=a("a"),oyo=o("FNetForPreTraining"),ryo=o(" (FNet model)"),tyo=l(),d1=a("li"),Nme=a("strong"),ayo=o("fsmt"),nyo=o(" \u2014 "),uG=a("a"),syo=o("FSMTForConditionalGeneration"),lyo=o(" (FairSeq Machine-Translation model)"),iyo=l(),c1=a("li"),Ime=a("strong"),dyo=o("funnel"),cyo=o(" \u2014 "),bG=a("a"),fyo=o("FunnelForPreTraining"),myo=o(" (Funnel Transformer model)"),gyo=l(),f1=a("li"),qme=a("strong"),hyo=o("gpt2"),pyo=o(" \u2014 "),vG=a("a"),_yo=o("GPT2LMHeadModel"),uyo=o(" (OpenAI GPT-2 model)"),byo=l(),m1=a("li"),jme=a("strong"),vyo=o("ibert"),Fyo=o(" \u2014 "),FG=a("a"),Tyo=o("IBertForMaskedLM"),Myo=o(" (I-BERT model)"),Eyo=l(),g1=a("li"),Dme=a("strong"),Cyo=o("layoutlm"),wyo=o(" \u2014 "),TG=a("a"),Ayo=o("LayoutLMForMaskedLM"),Lyo=o(" (LayoutLM model)"),yyo=l(),h1=a("li"),Gme=a("strong"),xyo=o("longformer"),$yo=o(" \u2014 "),MG=a("a"),kyo=o("LongformerForMaskedLM"),Syo=o(" (Longformer model)"),Ryo=l(),p1=a("li"),Ome=a("strong"),Pyo=o("lxmert"),Byo=o(" \u2014 "),EG=a("a"),Nyo=o("LxmertForPreTraining"),Iyo=o(" (LXMERT model)"),qyo=l(),_1=a("li"),Vme=a("strong"),jyo=o("megatron-bert"),Dyo=o(" \u2014 "),CG=a("a"),Gyo=o("MegatronBertForPreTraining"),Oyo=o(" (Megatron-BERT model)"),Vyo=l(),u1=a("li"),Xme=a("strong"),Xyo=o("mobilebert"),zyo=o(" \u2014 "),wG=a("a"),Qyo=o("MobileBertForPreTraining"),Wyo=o(" (MobileBERT model)"),Hyo=l(),b1=a("li"),zme=a("strong"),Uyo=o("mpnet"),Jyo=o(" \u2014 "),AG=a("a"),Yyo=o("MPNetForMaskedLM"),Kyo=o(" (MPNet model)"),Zyo=l(),v1=a("li"),Qme=a("strong"),e8o=o("mvp"),o8o=o(" \u2014 "),LG=a("a"),r8o=o("MvpForConditionalGeneration"),t8o=o(" (MVP model)"),a8o=l(),F1=a("li"),Wme=a("strong"),n8o=o("nezha"),s8o=o(" \u2014 "),yG=a("a"),l8o=o("NezhaForPreTraining"),i8o=o(" (Nezha model)"),d8o=l(),T1=a("li"),Hme=a("strong"),c8o=o("openai-gpt"),f8o=o(" \u2014 "),xG=a("a"),m8o=o("OpenAIGPTLMHeadModel"),g8o=o(" (OpenAI GPT model)"),h8o=l(),M1=a("li"),Ume=a("strong"),p8o=o("retribert"),_8o=o(" \u2014 "),$G=a("a"),u8o=o("RetriBertModel"),b8o=o(" (RetriBERT model)"),v8o=l(),E1=a("li"),Jme=a("strong"),F8o=o("roberta"),T8o=o(" \u2014 "),kG=a("a"),M8o=o("RobertaForMaskedLM"),E8o=o(" (RoBERTa model)"),C8o=l(),C1=a("li"),Yme=a("strong"),w8o=o("splinter"),A8o=o(" \u2014 "),SG=a("a"),L8o=o("SplinterForPreTraining"),y8o=o(" (Splinter model)"),x8o=l(),w1=a("li"),Kme=a("strong"),$8o=o("squeezebert"),k8o=o(" \u2014 "),RG=a("a"),S8o=o("SqueezeBertForMaskedLM"),R8o=o(" (SqueezeBERT model)"),P8o=l(),A1=a("li"),Zme=a("strong"),B8o=o("t5"),N8o=o(" \u2014 "),PG=a("a"),I8o=o("T5ForConditionalGeneration"),q8o=o(" (T5 model)"),j8o=l(),L1=a("li"),ege=a("strong"),D8o=o("tapas"),G8o=o(" \u2014 "),BG=a("a"),O8o=o("TapasForMaskedLM"),V8o=o(" (TAPAS model)"),X8o=l(),y1=a("li"),oge=a("strong"),z8o=o("transfo-xl"),Q8o=o(" \u2014 "),NG=a("a"),W8o=o("TransfoXLLMHeadModel"),H8o=o(" (Transformer-XL model)"),U8o=l(),x1=a("li"),rge=a("strong"),J8o=o("unispeech"),Y8o=o(" \u2014 "),IG=a("a"),K8o=o("UniSpeechForPreTraining"),Z8o=o(" (UniSpeech model)"),e9o=l(),$1=a("li"),tge=a("strong"),o9o=o("unispeech-sat"),r9o=o(" \u2014 "),qG=a("a"),t9o=o("UniSpeechSatForPreTraining"),a9o=o(" (UniSpeechSat model)"),n9o=l(),k1=a("li"),age=a("strong"),s9o=o("visual_bert"),l9o=o(" \u2014 "),jG=a("a"),i9o=o("VisualBertForPreTraining"),d9o=o(" (VisualBERT model)"),c9o=l(),S1=a("li"),nge=a("strong"),f9o=o("vit_mae"),m9o=o(" \u2014 "),DG=a("a"),g9o=o("ViTMAEForPreTraining"),h9o=o(" (ViTMAE model)"),p9o=l(),R1=a("li"),sge=a("strong"),_9o=o("wav2vec2"),u9o=o(" \u2014 "),GG=a("a"),b9o=o("Wav2Vec2ForPreTraining"),v9o=o(" (Wav2Vec2 model)"),F9o=l(),P1=a("li"),lge=a("strong"),T9o=o("wav2vec2-conformer"),M9o=o(" \u2014 "),OG=a("a"),E9o=o("Wav2Vec2ConformerForPreTraining"),C9o=o(" (Wav2Vec2-Conformer model)"),w9o=l(),B1=a("li"),ige=a("strong"),A9o=o("xlm"),L9o=o(" \u2014 "),VG=a("a"),y9o=o("XLMWithLMHeadModel"),x9o=o(" (XLM model)"),$9o=l(),N1=a("li"),dge=a("strong"),k9o=o("xlm-roberta"),S9o=o(" \u2014 "),XG=a("a"),R9o=o("XLMRobertaForMaskedLM"),P9o=o(" (XLM-RoBERTa model)"),B9o=l(),I1=a("li"),cge=a("strong"),N9o=o("xlm-roberta-xl"),I9o=o(" \u2014 "),zG=a("a"),q9o=o("XLMRobertaXLForMaskedLM"),j9o=o(" (XLM-RoBERTa-XL model)"),D9o=l(),q1=a("li"),fge=a("strong"),G9o=o("xlnet"),O9o=o(" \u2014 "),QG=a("a"),V9o=o("XLNetLMHeadModel"),X9o=o(" (XLNet model)"),z9o=l(),j1=a("p"),Q9o=o("The model is set in evaluation mode by default using "),mge=a("code"),W9o=o("model.eval()"),H9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=a("code"),U9o=o("model.train()"),J9o=l(),F(D1.$$.fragment),gXe=l(),Qi=a("h2"),G1=a("a"),hge=a("span"),F(Dy.$$.fragment),Y9o=l(),pge=a("span"),K9o=o("AutoModelForCausalLM"),hXe=l(),ko=a("div"),F(Gy.$$.fragment),Z9o=l(),Wi=a("p"),exo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WG=a("a"),oxo=o("from_pretrained()"),rxo=o(" class method or the "),HG=a("a"),txo=o("from_config()"),axo=o(` class
method.`),nxo=l(),Oy=a("p"),sxo=o("This class cannot be instantiated directly using "),_ge=a("code"),lxo=o("__init__()"),ixo=o(" (throws an error)."),dxo=l(),dt=a("div"),F(Vy.$$.fragment),cxo=l(),uge=a("p"),fxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mxo=l(),Hi=a("p"),gxo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),hxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),_xo=o("from_pretrained()"),uxo=o(" to load the model weights."),bxo=l(),F(O1.$$.fragment),vxo=l(),Ke=a("div"),F(Xy.$$.fragment),Fxo=l(),vge=a("p"),Txo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mxo=l(),qa=a("p"),Exo=o("The model class to instantiate is selected based on the "),Fge=a("code"),Cxo=o("model_type"),wxo=o(` property of the config object (either
passed as an argument or loaded from `),Tge=a("code"),Axo=o("pretrained_model_name_or_path"),Lxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=a("code"),yxo=o("pretrained_model_name_or_path"),xxo=o(":"),$xo=l(),z=a("ul"),V1=a("li"),Ege=a("strong"),kxo=o("bart"),Sxo=o(" \u2014 "),JG=a("a"),Rxo=o("BartForCausalLM"),Pxo=o(" (BART model)"),Bxo=l(),X1=a("li"),Cge=a("strong"),Nxo=o("bert"),Ixo=o(" \u2014 "),YG=a("a"),qxo=o("BertLMHeadModel"),jxo=o(" (BERT model)"),Dxo=l(),z1=a("li"),wge=a("strong"),Gxo=o("bert-generation"),Oxo=o(" \u2014 "),KG=a("a"),Vxo=o("BertGenerationDecoder"),Xxo=o(" (Bert Generation model)"),zxo=l(),Q1=a("li"),Age=a("strong"),Qxo=o("big_bird"),Wxo=o(" \u2014 "),ZG=a("a"),Hxo=o("BigBirdForCausalLM"),Uxo=o(" (BigBird model)"),Jxo=l(),W1=a("li"),Lge=a("strong"),Yxo=o("bigbird_pegasus"),Kxo=o(" \u2014 "),eO=a("a"),Zxo=o("BigBirdPegasusForCausalLM"),e$o=o(" (BigBird-Pegasus model)"),o$o=l(),H1=a("li"),yge=a("strong"),r$o=o("blenderbot"),t$o=o(" \u2014 "),oO=a("a"),a$o=o("BlenderbotForCausalLM"),n$o=o(" (Blenderbot model)"),s$o=l(),U1=a("li"),xge=a("strong"),l$o=o("blenderbot-small"),i$o=o(" \u2014 "),rO=a("a"),d$o=o("BlenderbotSmallForCausalLM"),c$o=o(" (BlenderbotSmall model)"),f$o=l(),J1=a("li"),$ge=a("strong"),m$o=o("bloom"),g$o=o(" \u2014 "),tO=a("a"),h$o=o("BloomForCausalLM"),p$o=o(" (BLOOM model)"),_$o=l(),Y1=a("li"),kge=a("strong"),u$o=o("camembert"),b$o=o(" \u2014 "),aO=a("a"),v$o=o("CamembertForCausalLM"),F$o=o(" (CamemBERT model)"),T$o=l(),K1=a("li"),Sge=a("strong"),M$o=o("codegen"),E$o=o(" \u2014 "),nO=a("a"),C$o=o("CodeGenForCausalLM"),w$o=o(" (CodeGen model)"),A$o=l(),Z1=a("li"),Rge=a("strong"),L$o=o("ctrl"),y$o=o(" \u2014 "),sO=a("a"),x$o=o("CTRLLMHeadModel"),$$o=o(" (CTRL model)"),k$o=l(),e4=a("li"),Pge=a("strong"),S$o=o("data2vec-text"),R$o=o(" \u2014 "),lO=a("a"),P$o=o("Data2VecTextForCausalLM"),B$o=o(" (Data2VecText model)"),N$o=l(),o4=a("li"),Bge=a("strong"),I$o=o("electra"),q$o=o(" \u2014 "),iO=a("a"),j$o=o("ElectraForCausalLM"),D$o=o(" (ELECTRA model)"),G$o=l(),r4=a("li"),Nge=a("strong"),O$o=o("gpt2"),V$o=o(" \u2014 "),dO=a("a"),X$o=o("GPT2LMHeadModel"),z$o=o(" (OpenAI GPT-2 model)"),Q$o=l(),t4=a("li"),Ige=a("strong"),W$o=o("gpt_neo"),H$o=o(" \u2014 "),cO=a("a"),U$o=o("GPTNeoForCausalLM"),J$o=o(" (GPT Neo model)"),Y$o=l(),a4=a("li"),qge=a("strong"),K$o=o("gpt_neox"),Z$o=o(" \u2014 "),fO=a("a"),eko=o("GPTNeoXForCausalLM"),oko=o(" (GPT NeoX model)"),rko=l(),n4=a("li"),jge=a("strong"),tko=o("gptj"),ako=o(" \u2014 "),mO=a("a"),nko=o("GPTJForCausalLM"),sko=o(" (GPT-J model)"),lko=l(),s4=a("li"),Dge=a("strong"),iko=o("marian"),dko=o(" \u2014 "),gO=a("a"),cko=o("MarianForCausalLM"),fko=o(" (Marian model)"),mko=l(),l4=a("li"),Gge=a("strong"),gko=o("mbart"),hko=o(" \u2014 "),hO=a("a"),pko=o("MBartForCausalLM"),_ko=o(" (mBART model)"),uko=l(),i4=a("li"),Oge=a("strong"),bko=o("megatron-bert"),vko=o(" \u2014 "),pO=a("a"),Fko=o("MegatronBertForCausalLM"),Tko=o(" (Megatron-BERT model)"),Mko=l(),d4=a("li"),Vge=a("strong"),Eko=o("mvp"),Cko=o(" \u2014 "),_O=a("a"),wko=o("MvpForCausalLM"),Ako=o(" (MVP model)"),Lko=l(),c4=a("li"),Xge=a("strong"),yko=o("openai-gpt"),xko=o(" \u2014 "),uO=a("a"),$ko=o("OpenAIGPTLMHeadModel"),kko=o(" (OpenAI GPT model)"),Sko=l(),f4=a("li"),zge=a("strong"),Rko=o("opt"),Pko=o(" \u2014 "),bO=a("a"),Bko=o("OPTForCausalLM"),Nko=o(" (OPT model)"),Iko=l(),m4=a("li"),Qge=a("strong"),qko=o("pegasus"),jko=o(" \u2014 "),vO=a("a"),Dko=o("PegasusForCausalLM"),Gko=o(" (Pegasus model)"),Oko=l(),g4=a("li"),Wge=a("strong"),Vko=o("plbart"),Xko=o(" \u2014 "),FO=a("a"),zko=o("PLBartForCausalLM"),Qko=o(" (PLBart model)"),Wko=l(),h4=a("li"),Hge=a("strong"),Hko=o("prophetnet"),Uko=o(" \u2014 "),TO=a("a"),Jko=o("ProphetNetForCausalLM"),Yko=o(" (ProphetNet model)"),Kko=l(),p4=a("li"),Uge=a("strong"),Zko=o("qdqbert"),eSo=o(" \u2014 "),MO=a("a"),oSo=o("QDQBertLMHeadModel"),rSo=o(" (QDQBert model)"),tSo=l(),_4=a("li"),Jge=a("strong"),aSo=o("reformer"),nSo=o(" \u2014 "),EO=a("a"),sSo=o("ReformerModelWithLMHead"),lSo=o(" (Reformer model)"),iSo=l(),u4=a("li"),Yge=a("strong"),dSo=o("rembert"),cSo=o(" \u2014 "),CO=a("a"),fSo=o("RemBertForCausalLM"),mSo=o(" (RemBERT model)"),gSo=l(),b4=a("li"),Kge=a("strong"),hSo=o("roberta"),pSo=o(" \u2014 "),wO=a("a"),_So=o("RobertaForCausalLM"),uSo=o(" (RoBERTa model)"),bSo=l(),v4=a("li"),Zge=a("strong"),vSo=o("roformer"),FSo=o(" \u2014 "),AO=a("a"),TSo=o("RoFormerForCausalLM"),MSo=o(" (RoFormer model)"),ESo=l(),F4=a("li"),ehe=a("strong"),CSo=o("speech_to_text_2"),wSo=o(" \u2014 "),LO=a("a"),ASo=o("Speech2Text2ForCausalLM"),LSo=o(" (Speech2Text2 model)"),ySo=l(),T4=a("li"),ohe=a("strong"),xSo=o("transfo-xl"),$So=o(" \u2014 "),yO=a("a"),kSo=o("TransfoXLLMHeadModel"),SSo=o(" (Transformer-XL model)"),RSo=l(),M4=a("li"),rhe=a("strong"),PSo=o("trocr"),BSo=o(" \u2014 "),xO=a("a"),NSo=o("TrOCRForCausalLM"),ISo=o(" (TrOCR model)"),qSo=l(),E4=a("li"),the=a("strong"),jSo=o("xglm"),DSo=o(" \u2014 "),$O=a("a"),GSo=o("XGLMForCausalLM"),OSo=o(" (XGLM model)"),VSo=l(),C4=a("li"),ahe=a("strong"),XSo=o("xlm"),zSo=o(" \u2014 "),kO=a("a"),QSo=o("XLMWithLMHeadModel"),WSo=o(" (XLM model)"),HSo=l(),w4=a("li"),nhe=a("strong"),USo=o("xlm-prophetnet"),JSo=o(" \u2014 "),SO=a("a"),YSo=o("XLMProphetNetForCausalLM"),KSo=o(" (XLM-ProphetNet model)"),ZSo=l(),A4=a("li"),she=a("strong"),eRo=o("xlm-roberta"),oRo=o(" \u2014 "),RO=a("a"),rRo=o("XLMRobertaForCausalLM"),tRo=o(" (XLM-RoBERTa model)"),aRo=l(),L4=a("li"),lhe=a("strong"),nRo=o("xlm-roberta-xl"),sRo=o(" \u2014 "),PO=a("a"),lRo=o("XLMRobertaXLForCausalLM"),iRo=o(" (XLM-RoBERTa-XL model)"),dRo=l(),y4=a("li"),ihe=a("strong"),cRo=o("xlnet"),fRo=o(" \u2014 "),BO=a("a"),mRo=o("XLNetLMHeadModel"),gRo=o(" (XLNet model)"),hRo=l(),x4=a("p"),pRo=o("The model is set in evaluation mode by default using "),dhe=a("code"),_Ro=o("model.eval()"),uRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),bRo=o("model.train()"),vRo=l(),F($4.$$.fragment),pXe=l(),Ui=a("h2"),k4=a("a"),fhe=a("span"),F(zy.$$.fragment),FRo=l(),mhe=a("span"),TRo=o("AutoModelForMaskedLM"),_Xe=l(),So=a("div"),F(Qy.$$.fragment),MRo=l(),Ji=a("p"),ERo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=a("a"),CRo=o("from_pretrained()"),wRo=o(" class method or the "),IO=a("a"),ARo=o("from_config()"),LRo=o(` class
method.`),yRo=l(),Wy=a("p"),xRo=o("This class cannot be instantiated directly using "),ghe=a("code"),$Ro=o("__init__()"),kRo=o(" (throws an error)."),SRo=l(),ct=a("div"),F(Hy.$$.fragment),RRo=l(),hhe=a("p"),PRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BRo=l(),Yi=a("p"),NRo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),IRo=o("not"),qRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),jRo=o("from_pretrained()"),DRo=o(" to load the model weights."),GRo=l(),F(S4.$$.fragment),ORo=l(),Ze=a("div"),F(Uy.$$.fragment),VRo=l(),_he=a("p"),XRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zRo=l(),ja=a("p"),QRo=o("The model class to instantiate is selected based on the "),uhe=a("code"),WRo=o("model_type"),HRo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),URo=o("pretrained_model_name_or_path"),JRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),YRo=o("pretrained_model_name_or_path"),KRo=o(":"),ZRo=l(),W=a("ul"),R4=a("li"),Fhe=a("strong"),ePo=o("albert"),oPo=o(" \u2014 "),jO=a("a"),rPo=o("AlbertForMaskedLM"),tPo=o(" (ALBERT model)"),aPo=l(),P4=a("li"),The=a("strong"),nPo=o("bart"),sPo=o(" \u2014 "),DO=a("a"),lPo=o("BartForConditionalGeneration"),iPo=o(" (BART model)"),dPo=l(),B4=a("li"),Mhe=a("strong"),cPo=o("bert"),fPo=o(" \u2014 "),GO=a("a"),mPo=o("BertForMaskedLM"),gPo=o(" (BERT model)"),hPo=l(),N4=a("li"),Ehe=a("strong"),pPo=o("big_bird"),_Po=o(" \u2014 "),OO=a("a"),uPo=o("BigBirdForMaskedLM"),bPo=o(" (BigBird model)"),vPo=l(),I4=a("li"),Che=a("strong"),FPo=o("camembert"),TPo=o(" \u2014 "),VO=a("a"),MPo=o("CamembertForMaskedLM"),EPo=o(" (CamemBERT model)"),CPo=l(),q4=a("li"),whe=a("strong"),wPo=o("convbert"),APo=o(" \u2014 "),XO=a("a"),LPo=o("ConvBertForMaskedLM"),yPo=o(" (ConvBERT model)"),xPo=l(),j4=a("li"),Ahe=a("strong"),$Po=o("data2vec-text"),kPo=o(" \u2014 "),zO=a("a"),SPo=o("Data2VecTextForMaskedLM"),RPo=o(" (Data2VecText model)"),PPo=l(),D4=a("li"),Lhe=a("strong"),BPo=o("deberta"),NPo=o(" \u2014 "),QO=a("a"),IPo=o("DebertaForMaskedLM"),qPo=o(" (DeBERTa model)"),jPo=l(),G4=a("li"),yhe=a("strong"),DPo=o("deberta-v2"),GPo=o(" \u2014 "),WO=a("a"),OPo=o("DebertaV2ForMaskedLM"),VPo=o(" (DeBERTa-v2 model)"),XPo=l(),O4=a("li"),xhe=a("strong"),zPo=o("distilbert"),QPo=o(" \u2014 "),HO=a("a"),WPo=o("DistilBertForMaskedLM"),HPo=o(" (DistilBERT model)"),UPo=l(),V4=a("li"),$he=a("strong"),JPo=o("electra"),YPo=o(" \u2014 "),UO=a("a"),KPo=o("ElectraForMaskedLM"),ZPo=o(" (ELECTRA model)"),eBo=l(),X4=a("li"),khe=a("strong"),oBo=o("flaubert"),rBo=o(" \u2014 "),JO=a("a"),tBo=o("FlaubertWithLMHeadModel"),aBo=o(" (FlauBERT model)"),nBo=l(),z4=a("li"),She=a("strong"),sBo=o("fnet"),lBo=o(" \u2014 "),YO=a("a"),iBo=o("FNetForMaskedLM"),dBo=o(" (FNet model)"),cBo=l(),Q4=a("li"),Rhe=a("strong"),fBo=o("funnel"),mBo=o(" \u2014 "),KO=a("a"),gBo=o("FunnelForMaskedLM"),hBo=o(" (Funnel Transformer model)"),pBo=l(),W4=a("li"),Phe=a("strong"),_Bo=o("ibert"),uBo=o(" \u2014 "),ZO=a("a"),bBo=o("IBertForMaskedLM"),vBo=o(" (I-BERT model)"),FBo=l(),H4=a("li"),Bhe=a("strong"),TBo=o("layoutlm"),MBo=o(" \u2014 "),eV=a("a"),EBo=o("LayoutLMForMaskedLM"),CBo=o(" (LayoutLM model)"),wBo=l(),U4=a("li"),Nhe=a("strong"),ABo=o("longformer"),LBo=o(" \u2014 "),oV=a("a"),yBo=o("LongformerForMaskedLM"),xBo=o(" (Longformer model)"),$Bo=l(),J4=a("li"),Ihe=a("strong"),kBo=o("luke"),SBo=o(" \u2014 "),rV=a("a"),RBo=o("LukeForMaskedLM"),PBo=o(" (LUKE model)"),BBo=l(),Y4=a("li"),qhe=a("strong"),NBo=o("mbart"),IBo=o(" \u2014 "),tV=a("a"),qBo=o("MBartForConditionalGeneration"),jBo=o(" (mBART model)"),DBo=l(),K4=a("li"),jhe=a("strong"),GBo=o("megatron-bert"),OBo=o(" \u2014 "),aV=a("a"),VBo=o("MegatronBertForMaskedLM"),XBo=o(" (Megatron-BERT model)"),zBo=l(),Z4=a("li"),Dhe=a("strong"),QBo=o("mobilebert"),WBo=o(" \u2014 "),nV=a("a"),HBo=o("MobileBertForMaskedLM"),UBo=o(" (MobileBERT model)"),JBo=l(),e2=a("li"),Ghe=a("strong"),YBo=o("mpnet"),KBo=o(" \u2014 "),sV=a("a"),ZBo=o("MPNetForMaskedLM"),eNo=o(" (MPNet model)"),oNo=l(),o2=a("li"),Ohe=a("strong"),rNo=o("mvp"),tNo=o(" \u2014 "),lV=a("a"),aNo=o("MvpForConditionalGeneration"),nNo=o(" (MVP model)"),sNo=l(),r2=a("li"),Vhe=a("strong"),lNo=o("nezha"),iNo=o(" \u2014 "),iV=a("a"),dNo=o("NezhaForMaskedLM"),cNo=o(" (Nezha model)"),fNo=l(),t2=a("li"),Xhe=a("strong"),mNo=o("nystromformer"),gNo=o(" \u2014 "),dV=a("a"),hNo=o("NystromformerForMaskedLM"),pNo=o(" (Nystr\xF6mformer model)"),_No=l(),a2=a("li"),zhe=a("strong"),uNo=o("perceiver"),bNo=o(" \u2014 "),cV=a("a"),vNo=o("PerceiverForMaskedLM"),FNo=o(" (Perceiver model)"),TNo=l(),n2=a("li"),Qhe=a("strong"),MNo=o("qdqbert"),ENo=o(" \u2014 "),fV=a("a"),CNo=o("QDQBertForMaskedLM"),wNo=o(" (QDQBert model)"),ANo=l(),s2=a("li"),Whe=a("strong"),LNo=o("reformer"),yNo=o(" \u2014 "),mV=a("a"),xNo=o("ReformerForMaskedLM"),$No=o(" (Reformer model)"),kNo=l(),l2=a("li"),Hhe=a("strong"),SNo=o("rembert"),RNo=o(" \u2014 "),gV=a("a"),PNo=o("RemBertForMaskedLM"),BNo=o(" (RemBERT model)"),NNo=l(),i2=a("li"),Uhe=a("strong"),INo=o("roberta"),qNo=o(" \u2014 "),hV=a("a"),jNo=o("RobertaForMaskedLM"),DNo=o(" (RoBERTa model)"),GNo=l(),d2=a("li"),Jhe=a("strong"),ONo=o("roformer"),VNo=o(" \u2014 "),pV=a("a"),XNo=o("RoFormerForMaskedLM"),zNo=o(" (RoFormer model)"),QNo=l(),c2=a("li"),Yhe=a("strong"),WNo=o("squeezebert"),HNo=o(" \u2014 "),_V=a("a"),UNo=o("SqueezeBertForMaskedLM"),JNo=o(" (SqueezeBERT model)"),YNo=l(),f2=a("li"),Khe=a("strong"),KNo=o("tapas"),ZNo=o(" \u2014 "),uV=a("a"),eIo=o("TapasForMaskedLM"),oIo=o(" (TAPAS model)"),rIo=l(),m2=a("li"),Zhe=a("strong"),tIo=o("wav2vec2"),aIo=o(" \u2014 "),epe=a("code"),nIo=o("Wav2Vec2ForMaskedLM"),sIo=o(" (Wav2Vec2 model)"),lIo=l(),g2=a("li"),ope=a("strong"),iIo=o("xlm"),dIo=o(" \u2014 "),bV=a("a"),cIo=o("XLMWithLMHeadModel"),fIo=o(" (XLM model)"),mIo=l(),h2=a("li"),rpe=a("strong"),gIo=o("xlm-roberta"),hIo=o(" \u2014 "),vV=a("a"),pIo=o("XLMRobertaForMaskedLM"),_Io=o(" (XLM-RoBERTa model)"),uIo=l(),p2=a("li"),tpe=a("strong"),bIo=o("xlm-roberta-xl"),vIo=o(" \u2014 "),FV=a("a"),FIo=o("XLMRobertaXLForMaskedLM"),TIo=o(" (XLM-RoBERTa-XL model)"),MIo=l(),_2=a("li"),ape=a("strong"),EIo=o("yoso"),CIo=o(" \u2014 "),TV=a("a"),wIo=o("YosoForMaskedLM"),AIo=o(" (YOSO model)"),LIo=l(),u2=a("p"),yIo=o("The model is set in evaluation mode by default using "),npe=a("code"),xIo=o("model.eval()"),$Io=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),kIo=o("model.train()"),SIo=l(),F(b2.$$.fragment),uXe=l(),Ki=a("h2"),v2=a("a"),lpe=a("span"),F(Jy.$$.fragment),RIo=l(),ipe=a("span"),PIo=o("AutoModelForSeq2SeqLM"),bXe=l(),Ro=a("div"),F(Yy.$$.fragment),BIo=l(),Zi=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MV=a("a"),IIo=o("from_pretrained()"),qIo=o(" class method or the "),EV=a("a"),jIo=o("from_config()"),DIo=o(` class
method.`),GIo=l(),Ky=a("p"),OIo=o("This class cannot be instantiated directly using "),dpe=a("code"),VIo=o("__init__()"),XIo=o(" (throws an error)."),zIo=l(),ft=a("div"),F(Zy.$$.fragment),QIo=l(),cpe=a("p"),WIo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HIo=l(),ed=a("p"),UIo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),JIo=o("not"),YIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),KIo=o("from_pretrained()"),ZIo=o(" to load the model weights."),eqo=l(),F(F2.$$.fragment),oqo=l(),eo=a("div"),F(e8.$$.fragment),rqo=l(),mpe=a("p"),tqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aqo=l(),Da=a("p"),nqo=o("The model class to instantiate is selected based on the "),gpe=a("code"),sqo=o("model_type"),lqo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),cqo=o("pretrained_model_name_or_path"),fqo=o(":"),mqo=l(),pe=a("ul"),T2=a("li"),_pe=a("strong"),gqo=o("bart"),hqo=o(" \u2014 "),wV=a("a"),pqo=o("BartForConditionalGeneration"),_qo=o(" (BART model)"),uqo=l(),M2=a("li"),upe=a("strong"),bqo=o("bigbird_pegasus"),vqo=o(" \u2014 "),AV=a("a"),Fqo=o("BigBirdPegasusForConditionalGeneration"),Tqo=o(" (BigBird-Pegasus model)"),Mqo=l(),E2=a("li"),bpe=a("strong"),Eqo=o("blenderbot"),Cqo=o(" \u2014 "),LV=a("a"),wqo=o("BlenderbotForConditionalGeneration"),Aqo=o(" (Blenderbot model)"),Lqo=l(),C2=a("li"),vpe=a("strong"),yqo=o("blenderbot-small"),xqo=o(" \u2014 "),yV=a("a"),$qo=o("BlenderbotSmallForConditionalGeneration"),kqo=o(" (BlenderbotSmall model)"),Sqo=l(),w2=a("li"),Fpe=a("strong"),Rqo=o("encoder-decoder"),Pqo=o(" \u2014 "),xV=a("a"),Bqo=o("EncoderDecoderModel"),Nqo=o(" (Encoder decoder model)"),Iqo=l(),A2=a("li"),Tpe=a("strong"),qqo=o("fsmt"),jqo=o(" \u2014 "),$V=a("a"),Dqo=o("FSMTForConditionalGeneration"),Gqo=o(" (FairSeq Machine-Translation model)"),Oqo=l(),L2=a("li"),Mpe=a("strong"),Vqo=o("led"),Xqo=o(" \u2014 "),kV=a("a"),zqo=o("LEDForConditionalGeneration"),Qqo=o(" (LED model)"),Wqo=l(),y2=a("li"),Epe=a("strong"),Hqo=o("longt5"),Uqo=o(" \u2014 "),SV=a("a"),Jqo=o("LongT5ForConditionalGeneration"),Yqo=o(" (LongT5 model)"),Kqo=l(),x2=a("li"),Cpe=a("strong"),Zqo=o("m2m_100"),ejo=o(" \u2014 "),RV=a("a"),ojo=o("M2M100ForConditionalGeneration"),rjo=o(" (M2M100 model)"),tjo=l(),$2=a("li"),wpe=a("strong"),ajo=o("marian"),njo=o(" \u2014 "),PV=a("a"),sjo=o("MarianMTModel"),ljo=o(" (Marian model)"),ijo=l(),k2=a("li"),Ape=a("strong"),djo=o("mbart"),cjo=o(" \u2014 "),BV=a("a"),fjo=o("MBartForConditionalGeneration"),mjo=o(" (mBART model)"),gjo=l(),S2=a("li"),Lpe=a("strong"),hjo=o("mt5"),pjo=o(" \u2014 "),NV=a("a"),_jo=o("MT5ForConditionalGeneration"),ujo=o(" (MT5 model)"),bjo=l(),R2=a("li"),ype=a("strong"),vjo=o("mvp"),Fjo=o(" \u2014 "),IV=a("a"),Tjo=o("MvpForConditionalGeneration"),Mjo=o(" (MVP model)"),Ejo=l(),P2=a("li"),xpe=a("strong"),Cjo=o("pegasus"),wjo=o(" \u2014 "),qV=a("a"),Ajo=o("PegasusForConditionalGeneration"),Ljo=o(" (Pegasus model)"),yjo=l(),B2=a("li"),$pe=a("strong"),xjo=o("plbart"),$jo=o(" \u2014 "),jV=a("a"),kjo=o("PLBartForConditionalGeneration"),Sjo=o(" (PLBart model)"),Rjo=l(),N2=a("li"),kpe=a("strong"),Pjo=o("prophetnet"),Bjo=o(" \u2014 "),DV=a("a"),Njo=o("ProphetNetForConditionalGeneration"),Ijo=o(" (ProphetNet model)"),qjo=l(),I2=a("li"),Spe=a("strong"),jjo=o("t5"),Djo=o(" \u2014 "),GV=a("a"),Gjo=o("T5ForConditionalGeneration"),Ojo=o(" (T5 model)"),Vjo=l(),q2=a("li"),Rpe=a("strong"),Xjo=o("xlm-prophetnet"),zjo=o(" \u2014 "),OV=a("a"),Qjo=o("XLMProphetNetForConditionalGeneration"),Wjo=o(" (XLM-ProphetNet model)"),Hjo=l(),j2=a("p"),Ujo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),Jjo=o("model.eval()"),Yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),Kjo=o("model.train()"),Zjo=l(),F(D2.$$.fragment),vXe=l(),od=a("h2"),G2=a("a"),Npe=a("span"),F(o8.$$.fragment),eDo=l(),Ipe=a("span"),oDo=o("AutoModelForSequenceClassification"),FXe=l(),Po=a("div"),F(r8.$$.fragment),rDo=l(),rd=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VV=a("a"),aDo=o("from_pretrained()"),nDo=o(" class method or the "),XV=a("a"),sDo=o("from_config()"),lDo=o(` class
method.`),iDo=l(),t8=a("p"),dDo=o("This class cannot be instantiated directly using "),qpe=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),mt=a("div"),F(a8.$$.fragment),gDo=l(),jpe=a("p"),hDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pDo=l(),td=a("p"),_Do=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),uDo=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),vDo=o("from_pretrained()"),FDo=o(" to load the model weights."),TDo=l(),F(O2.$$.fragment),MDo=l(),oo=a("div"),F(n8.$$.fragment),EDo=l(),Gpe=a("p"),CDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wDo=l(),Ga=a("p"),ADo=o("The model class to instantiate is selected based on the "),Ope=a("code"),LDo=o("model_type"),yDo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),xDo=o("pretrained_model_name_or_path"),$Do=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),kDo=o("pretrained_model_name_or_path"),SDo=o(":"),RDo=l(),I=a("ul"),V2=a("li"),zpe=a("strong"),PDo=o("albert"),BDo=o(" \u2014 "),QV=a("a"),NDo=o("AlbertForSequenceClassification"),IDo=o(" (ALBERT model)"),qDo=l(),X2=a("li"),Qpe=a("strong"),jDo=o("bart"),DDo=o(" \u2014 "),WV=a("a"),GDo=o("BartForSequenceClassification"),ODo=o(" (BART model)"),VDo=l(),z2=a("li"),Wpe=a("strong"),XDo=o("bert"),zDo=o(" \u2014 "),HV=a("a"),QDo=o("BertForSequenceClassification"),WDo=o(" (BERT model)"),HDo=l(),Q2=a("li"),Hpe=a("strong"),UDo=o("big_bird"),JDo=o(" \u2014 "),UV=a("a"),YDo=o("BigBirdForSequenceClassification"),KDo=o(" (BigBird model)"),ZDo=l(),W2=a("li"),Upe=a("strong"),eGo=o("bigbird_pegasus"),oGo=o(" \u2014 "),JV=a("a"),rGo=o("BigBirdPegasusForSequenceClassification"),tGo=o(" (BigBird-Pegasus model)"),aGo=l(),H2=a("li"),Jpe=a("strong"),nGo=o("bloom"),sGo=o(" \u2014 "),YV=a("a"),lGo=o("BloomForSequenceClassification"),iGo=o(" (BLOOM model)"),dGo=l(),U2=a("li"),Ype=a("strong"),cGo=o("camembert"),fGo=o(" \u2014 "),KV=a("a"),mGo=o("CamembertForSequenceClassification"),gGo=o(" (CamemBERT model)"),hGo=l(),J2=a("li"),Kpe=a("strong"),pGo=o("canine"),_Go=o(" \u2014 "),ZV=a("a"),uGo=o("CanineForSequenceClassification"),bGo=o(" (CANINE model)"),vGo=l(),Y2=a("li"),Zpe=a("strong"),FGo=o("convbert"),TGo=o(" \u2014 "),eX=a("a"),MGo=o("ConvBertForSequenceClassification"),EGo=o(" (ConvBERT model)"),CGo=l(),K2=a("li"),e_e=a("strong"),wGo=o("ctrl"),AGo=o(" \u2014 "),oX=a("a"),LGo=o("CTRLForSequenceClassification"),yGo=o(" (CTRL model)"),xGo=l(),Z2=a("li"),o_e=a("strong"),$Go=o("data2vec-text"),kGo=o(" \u2014 "),rX=a("a"),SGo=o("Data2VecTextForSequenceClassification"),RGo=o(" (Data2VecText model)"),PGo=l(),eb=a("li"),r_e=a("strong"),BGo=o("deberta"),NGo=o(" \u2014 "),tX=a("a"),IGo=o("DebertaForSequenceClassification"),qGo=o(" (DeBERTa model)"),jGo=l(),ob=a("li"),t_e=a("strong"),DGo=o("deberta-v2"),GGo=o(" \u2014 "),aX=a("a"),OGo=o("DebertaV2ForSequenceClassification"),VGo=o(" (DeBERTa-v2 model)"),XGo=l(),rb=a("li"),a_e=a("strong"),zGo=o("distilbert"),QGo=o(" \u2014 "),nX=a("a"),WGo=o("DistilBertForSequenceClassification"),HGo=o(" (DistilBERT model)"),UGo=l(),tb=a("li"),n_e=a("strong"),JGo=o("electra"),YGo=o(" \u2014 "),sX=a("a"),KGo=o("ElectraForSequenceClassification"),ZGo=o(" (ELECTRA model)"),eOo=l(),ab=a("li"),s_e=a("strong"),oOo=o("flaubert"),rOo=o(" \u2014 "),lX=a("a"),tOo=o("FlaubertForSequenceClassification"),aOo=o(" (FlauBERT model)"),nOo=l(),nb=a("li"),l_e=a("strong"),sOo=o("fnet"),lOo=o(" \u2014 "),iX=a("a"),iOo=o("FNetForSequenceClassification"),dOo=o(" (FNet model)"),cOo=l(),sb=a("li"),i_e=a("strong"),fOo=o("funnel"),mOo=o(" \u2014 "),dX=a("a"),gOo=o("FunnelForSequenceClassification"),hOo=o(" (Funnel Transformer model)"),pOo=l(),lb=a("li"),d_e=a("strong"),_Oo=o("gpt2"),uOo=o(" \u2014 "),cX=a("a"),bOo=o("GPT2ForSequenceClassification"),vOo=o(" (OpenAI GPT-2 model)"),FOo=l(),ib=a("li"),c_e=a("strong"),TOo=o("gpt_neo"),MOo=o(" \u2014 "),fX=a("a"),EOo=o("GPTNeoForSequenceClassification"),COo=o(" (GPT Neo model)"),wOo=l(),db=a("li"),f_e=a("strong"),AOo=o("gptj"),LOo=o(" \u2014 "),mX=a("a"),yOo=o("GPTJForSequenceClassification"),xOo=o(" (GPT-J model)"),$Oo=l(),cb=a("li"),m_e=a("strong"),kOo=o("ibert"),SOo=o(" \u2014 "),gX=a("a"),ROo=o("IBertForSequenceClassification"),POo=o(" (I-BERT model)"),BOo=l(),fb=a("li"),g_e=a("strong"),NOo=o("layoutlm"),IOo=o(" \u2014 "),hX=a("a"),qOo=o("LayoutLMForSequenceClassification"),jOo=o(" (LayoutLM model)"),DOo=l(),mb=a("li"),h_e=a("strong"),GOo=o("layoutlmv2"),OOo=o(" \u2014 "),pX=a("a"),VOo=o("LayoutLMv2ForSequenceClassification"),XOo=o(" (LayoutLMv2 model)"),zOo=l(),gb=a("li"),p_e=a("strong"),QOo=o("layoutlmv3"),WOo=o(" \u2014 "),_X=a("a"),HOo=o("LayoutLMv3ForSequenceClassification"),UOo=o(" (LayoutLMv3 model)"),JOo=l(),hb=a("li"),__e=a("strong"),YOo=o("led"),KOo=o(" \u2014 "),uX=a("a"),ZOo=o("LEDForSequenceClassification"),eVo=o(" (LED model)"),oVo=l(),pb=a("li"),u_e=a("strong"),rVo=o("longformer"),tVo=o(" \u2014 "),bX=a("a"),aVo=o("LongformerForSequenceClassification"),nVo=o(" (Longformer model)"),sVo=l(),_b=a("li"),b_e=a("strong"),lVo=o("mbart"),iVo=o(" \u2014 "),vX=a("a"),dVo=o("MBartForSequenceClassification"),cVo=o(" (mBART model)"),fVo=l(),ub=a("li"),v_e=a("strong"),mVo=o("megatron-bert"),gVo=o(" \u2014 "),FX=a("a"),hVo=o("MegatronBertForSequenceClassification"),pVo=o(" (Megatron-BERT model)"),_Vo=l(),bb=a("li"),F_e=a("strong"),uVo=o("mobilebert"),bVo=o(" \u2014 "),TX=a("a"),vVo=o("MobileBertForSequenceClassification"),FVo=o(" (MobileBERT model)"),TVo=l(),vb=a("li"),T_e=a("strong"),MVo=o("mpnet"),EVo=o(" \u2014 "),MX=a("a"),CVo=o("MPNetForSequenceClassification"),wVo=o(" (MPNet model)"),AVo=l(),Fb=a("li"),M_e=a("strong"),LVo=o("mvp"),yVo=o(" \u2014 "),EX=a("a"),xVo=o("MvpForSequenceClassification"),$Vo=o(" (MVP model)"),kVo=l(),Tb=a("li"),E_e=a("strong"),SVo=o("nezha"),RVo=o(" \u2014 "),CX=a("a"),PVo=o("NezhaForSequenceClassification"),BVo=o(" (Nezha model)"),NVo=l(),Mb=a("li"),C_e=a("strong"),IVo=o("nystromformer"),qVo=o(" \u2014 "),wX=a("a"),jVo=o("NystromformerForSequenceClassification"),DVo=o(" (Nystr\xF6mformer model)"),GVo=l(),Eb=a("li"),w_e=a("strong"),OVo=o("openai-gpt"),VVo=o(" \u2014 "),AX=a("a"),XVo=o("OpenAIGPTForSequenceClassification"),zVo=o(" (OpenAI GPT model)"),QVo=l(),Cb=a("li"),A_e=a("strong"),WVo=o("perceiver"),HVo=o(" \u2014 "),LX=a("a"),UVo=o("PerceiverForSequenceClassification"),JVo=o(" (Perceiver model)"),YVo=l(),wb=a("li"),L_e=a("strong"),KVo=o("plbart"),ZVo=o(" \u2014 "),yX=a("a"),eXo=o("PLBartForSequenceClassification"),oXo=o(" (PLBart model)"),rXo=l(),Ab=a("li"),y_e=a("strong"),tXo=o("qdqbert"),aXo=o(" \u2014 "),xX=a("a"),nXo=o("QDQBertForSequenceClassification"),sXo=o(" (QDQBert model)"),lXo=l(),Lb=a("li"),x_e=a("strong"),iXo=o("reformer"),dXo=o(" \u2014 "),$X=a("a"),cXo=o("ReformerForSequenceClassification"),fXo=o(" (Reformer model)"),mXo=l(),yb=a("li"),$_e=a("strong"),gXo=o("rembert"),hXo=o(" \u2014 "),kX=a("a"),pXo=o("RemBertForSequenceClassification"),_Xo=o(" (RemBERT model)"),uXo=l(),xb=a("li"),k_e=a("strong"),bXo=o("roberta"),vXo=o(" \u2014 "),SX=a("a"),FXo=o("RobertaForSequenceClassification"),TXo=o(" (RoBERTa model)"),MXo=l(),$b=a("li"),S_e=a("strong"),EXo=o("roformer"),CXo=o(" \u2014 "),RX=a("a"),wXo=o("RoFormerForSequenceClassification"),AXo=o(" (RoFormer model)"),LXo=l(),kb=a("li"),R_e=a("strong"),yXo=o("squeezebert"),xXo=o(" \u2014 "),PX=a("a"),$Xo=o("SqueezeBertForSequenceClassification"),kXo=o(" (SqueezeBERT model)"),SXo=l(),Sb=a("li"),P_e=a("strong"),RXo=o("tapas"),PXo=o(" \u2014 "),BX=a("a"),BXo=o("TapasForSequenceClassification"),NXo=o(" (TAPAS model)"),IXo=l(),Rb=a("li"),B_e=a("strong"),qXo=o("transfo-xl"),jXo=o(" \u2014 "),NX=a("a"),DXo=o("TransfoXLForSequenceClassification"),GXo=o(" (Transformer-XL model)"),OXo=l(),Pb=a("li"),N_e=a("strong"),VXo=o("xlm"),XXo=o(" \u2014 "),IX=a("a"),zXo=o("XLMForSequenceClassification"),QXo=o(" (XLM model)"),WXo=l(),Bb=a("li"),I_e=a("strong"),HXo=o("xlm-roberta"),UXo=o(" \u2014 "),qX=a("a"),JXo=o("XLMRobertaForSequenceClassification"),YXo=o(" (XLM-RoBERTa model)"),KXo=l(),Nb=a("li"),q_e=a("strong"),ZXo=o("xlm-roberta-xl"),ezo=o(" \u2014 "),jX=a("a"),ozo=o("XLMRobertaXLForSequenceClassification"),rzo=o(" (XLM-RoBERTa-XL model)"),tzo=l(),Ib=a("li"),j_e=a("strong"),azo=o("xlnet"),nzo=o(" \u2014 "),DX=a("a"),szo=o("XLNetForSequenceClassification"),lzo=o(" (XLNet model)"),izo=l(),qb=a("li"),D_e=a("strong"),dzo=o("yoso"),czo=o(" \u2014 "),GX=a("a"),fzo=o("YosoForSequenceClassification"),mzo=o(" (YOSO model)"),gzo=l(),jb=a("p"),hzo=o("The model is set in evaluation mode by default using "),G_e=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),uzo=o("model.train()"),bzo=l(),F(Db.$$.fragment),TXe=l(),ad=a("h2"),Gb=a("a"),V_e=a("span"),F(s8.$$.fragment),vzo=l(),X_e=a("span"),Fzo=o("AutoModelForMultipleChoice"),MXe=l(),Bo=a("div"),F(l8.$$.fragment),Tzo=l(),nd=a("p"),Mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=a("a"),Ezo=o("from_pretrained()"),Czo=o(" class method or the "),VX=a("a"),wzo=o("from_config()"),Azo=o(` class
method.`),Lzo=l(),i8=a("p"),yzo=o("This class cannot be instantiated directly using "),z_e=a("code"),xzo=o("__init__()"),$zo=o(" (throws an error)."),kzo=l(),gt=a("div"),F(d8.$$.fragment),Szo=l(),Q_e=a("p"),Rzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pzo=l(),sd=a("p"),Bzo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),Nzo=o("not"),Izo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),qzo=o("from_pretrained()"),jzo=o(" to load the model weights."),Dzo=l(),F(Ob.$$.fragment),Gzo=l(),ro=a("div"),F(c8.$$.fragment),Ozo=l(),H_e=a("p"),Vzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xzo=l(),Oa=a("p"),zzo=o("The model class to instantiate is selected based on the "),U_e=a("code"),Qzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),Hzo=o("pretrained_model_name_or_path"),Uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Jzo=o("pretrained_model_name_or_path"),Yzo=o(":"),Kzo=l(),Z=a("ul"),Vb=a("li"),K_e=a("strong"),Zzo=o("albert"),eQo=o(" \u2014 "),zX=a("a"),oQo=o("AlbertForMultipleChoice"),rQo=o(" (ALBERT model)"),tQo=l(),Xb=a("li"),Z_e=a("strong"),aQo=o("bert"),nQo=o(" \u2014 "),QX=a("a"),sQo=o("BertForMultipleChoice"),lQo=o(" (BERT model)"),iQo=l(),zb=a("li"),eue=a("strong"),dQo=o("big_bird"),cQo=o(" \u2014 "),WX=a("a"),fQo=o("BigBirdForMultipleChoice"),mQo=o(" (BigBird model)"),gQo=l(),Qb=a("li"),oue=a("strong"),hQo=o("camembert"),pQo=o(" \u2014 "),HX=a("a"),_Qo=o("CamembertForMultipleChoice"),uQo=o(" (CamemBERT model)"),bQo=l(),Wb=a("li"),rue=a("strong"),vQo=o("canine"),FQo=o(" \u2014 "),UX=a("a"),TQo=o("CanineForMultipleChoice"),MQo=o(" (CANINE model)"),EQo=l(),Hb=a("li"),tue=a("strong"),CQo=o("convbert"),wQo=o(" \u2014 "),JX=a("a"),AQo=o("ConvBertForMultipleChoice"),LQo=o(" (ConvBERT model)"),yQo=l(),Ub=a("li"),aue=a("strong"),xQo=o("data2vec-text"),$Qo=o(" \u2014 "),YX=a("a"),kQo=o("Data2VecTextForMultipleChoice"),SQo=o(" (Data2VecText model)"),RQo=l(),Jb=a("li"),nue=a("strong"),PQo=o("deberta-v2"),BQo=o(" \u2014 "),KX=a("a"),NQo=o("DebertaV2ForMultipleChoice"),IQo=o(" (DeBERTa-v2 model)"),qQo=l(),Yb=a("li"),sue=a("strong"),jQo=o("distilbert"),DQo=o(" \u2014 "),ZX=a("a"),GQo=o("DistilBertForMultipleChoice"),OQo=o(" (DistilBERT model)"),VQo=l(),Kb=a("li"),lue=a("strong"),XQo=o("electra"),zQo=o(" \u2014 "),ez=a("a"),QQo=o("ElectraForMultipleChoice"),WQo=o(" (ELECTRA model)"),HQo=l(),Zb=a("li"),iue=a("strong"),UQo=o("flaubert"),JQo=o(" \u2014 "),oz=a("a"),YQo=o("FlaubertForMultipleChoice"),KQo=o(" (FlauBERT model)"),ZQo=l(),ev=a("li"),due=a("strong"),eWo=o("fnet"),oWo=o(" \u2014 "),rz=a("a"),rWo=o("FNetForMultipleChoice"),tWo=o(" (FNet model)"),aWo=l(),ov=a("li"),cue=a("strong"),nWo=o("funnel"),sWo=o(" \u2014 "),tz=a("a"),lWo=o("FunnelForMultipleChoice"),iWo=o(" (Funnel Transformer model)"),dWo=l(),rv=a("li"),fue=a("strong"),cWo=o("ibert"),fWo=o(" \u2014 "),az=a("a"),mWo=o("IBertForMultipleChoice"),gWo=o(" (I-BERT model)"),hWo=l(),tv=a("li"),mue=a("strong"),pWo=o("longformer"),_Wo=o(" \u2014 "),nz=a("a"),uWo=o("LongformerForMultipleChoice"),bWo=o(" (Longformer model)"),vWo=l(),av=a("li"),gue=a("strong"),FWo=o("megatron-bert"),TWo=o(" \u2014 "),sz=a("a"),MWo=o("MegatronBertForMultipleChoice"),EWo=o(" (Megatron-BERT model)"),CWo=l(),nv=a("li"),hue=a("strong"),wWo=o("mobilebert"),AWo=o(" \u2014 "),lz=a("a"),LWo=o("MobileBertForMultipleChoice"),yWo=o(" (MobileBERT model)"),xWo=l(),sv=a("li"),pue=a("strong"),$Wo=o("mpnet"),kWo=o(" \u2014 "),iz=a("a"),SWo=o("MPNetForMultipleChoice"),RWo=o(" (MPNet model)"),PWo=l(),lv=a("li"),_ue=a("strong"),BWo=o("nezha"),NWo=o(" \u2014 "),dz=a("a"),IWo=o("NezhaForMultipleChoice"),qWo=o(" (Nezha model)"),jWo=l(),iv=a("li"),uue=a("strong"),DWo=o("nystromformer"),GWo=o(" \u2014 "),cz=a("a"),OWo=o("NystromformerForMultipleChoice"),VWo=o(" (Nystr\xF6mformer model)"),XWo=l(),dv=a("li"),bue=a("strong"),zWo=o("qdqbert"),QWo=o(" \u2014 "),fz=a("a"),WWo=o("QDQBertForMultipleChoice"),HWo=o(" (QDQBert model)"),UWo=l(),cv=a("li"),vue=a("strong"),JWo=o("rembert"),YWo=o(" \u2014 "),mz=a("a"),KWo=o("RemBertForMultipleChoice"),ZWo=o(" (RemBERT model)"),eHo=l(),fv=a("li"),Fue=a("strong"),oHo=o("roberta"),rHo=o(" \u2014 "),gz=a("a"),tHo=o("RobertaForMultipleChoice"),aHo=o(" (RoBERTa model)"),nHo=l(),mv=a("li"),Tue=a("strong"),sHo=o("roformer"),lHo=o(" \u2014 "),hz=a("a"),iHo=o("RoFormerForMultipleChoice"),dHo=o(" (RoFormer model)"),cHo=l(),gv=a("li"),Mue=a("strong"),fHo=o("squeezebert"),mHo=o(" \u2014 "),pz=a("a"),gHo=o("SqueezeBertForMultipleChoice"),hHo=o(" (SqueezeBERT model)"),pHo=l(),hv=a("li"),Eue=a("strong"),_Ho=o("xlm"),uHo=o(" \u2014 "),_z=a("a"),bHo=o("XLMForMultipleChoice"),vHo=o(" (XLM model)"),FHo=l(),pv=a("li"),Cue=a("strong"),THo=o("xlm-roberta"),MHo=o(" \u2014 "),uz=a("a"),EHo=o("XLMRobertaForMultipleChoice"),CHo=o(" (XLM-RoBERTa model)"),wHo=l(),_v=a("li"),wue=a("strong"),AHo=o("xlm-roberta-xl"),LHo=o(" \u2014 "),bz=a("a"),yHo=o("XLMRobertaXLForMultipleChoice"),xHo=o(" (XLM-RoBERTa-XL model)"),$Ho=l(),uv=a("li"),Aue=a("strong"),kHo=o("xlnet"),SHo=o(" \u2014 "),vz=a("a"),RHo=o("XLNetForMultipleChoice"),PHo=o(" (XLNet model)"),BHo=l(),bv=a("li"),Lue=a("strong"),NHo=o("yoso"),IHo=o(" \u2014 "),Fz=a("a"),qHo=o("YosoForMultipleChoice"),jHo=o(" (YOSO model)"),DHo=l(),vv=a("p"),GHo=o("The model is set in evaluation mode by default using "),yue=a("code"),OHo=o("model.eval()"),VHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),XHo=o("model.train()"),zHo=l(),F(Fv.$$.fragment),EXe=l(),ld=a("h2"),Tv=a("a"),$ue=a("span"),F(f8.$$.fragment),QHo=l(),kue=a("span"),WHo=o("AutoModelForNextSentencePrediction"),CXe=l(),No=a("div"),F(m8.$$.fragment),HHo=l(),id=a("p"),UHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=a("a"),JHo=o("from_pretrained()"),YHo=o(" class method or the "),Mz=a("a"),KHo=o("from_config()"),ZHo=o(` class
method.`),eUo=l(),g8=a("p"),oUo=o("This class cannot be instantiated directly using "),Sue=a("code"),rUo=o("__init__()"),tUo=o(" (throws an error)."),aUo=l(),ht=a("div"),F(h8.$$.fragment),nUo=l(),Rue=a("p"),sUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lUo=l(),dd=a("p"),iUo=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),dUo=o("not"),cUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),fUo=o("from_pretrained()"),mUo=o(" to load the model weights."),gUo=l(),F(Mv.$$.fragment),hUo=l(),to=a("div"),F(p8.$$.fragment),pUo=l(),Bue=a("p"),_Uo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uUo=l(),Va=a("p"),bUo=o("The model class to instantiate is selected based on the "),Nue=a("code"),vUo=o("model_type"),FUo=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),TUo=o("pretrained_model_name_or_path"),MUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(":"),wUo=l(),Io=a("ul"),Ev=a("li"),jue=a("strong"),AUo=o("bert"),LUo=o(" \u2014 "),Cz=a("a"),yUo=o("BertForNextSentencePrediction"),xUo=o(" (BERT model)"),$Uo=l(),Cv=a("li"),Due=a("strong"),kUo=o("fnet"),SUo=o(" \u2014 "),wz=a("a"),RUo=o("FNetForNextSentencePrediction"),PUo=o(" (FNet model)"),BUo=l(),wv=a("li"),Gue=a("strong"),NUo=o("megatron-bert"),IUo=o(" \u2014 "),Az=a("a"),qUo=o("MegatronBertForNextSentencePrediction"),jUo=o(" (Megatron-BERT model)"),DUo=l(),Av=a("li"),Oue=a("strong"),GUo=o("mobilebert"),OUo=o(" \u2014 "),Lz=a("a"),VUo=o("MobileBertForNextSentencePrediction"),XUo=o(" (MobileBERT model)"),zUo=l(),Lv=a("li"),Vue=a("strong"),QUo=o("nezha"),WUo=o(" \u2014 "),yz=a("a"),HUo=o("NezhaForNextSentencePrediction"),UUo=o(" (Nezha model)"),JUo=l(),yv=a("li"),Xue=a("strong"),YUo=o("qdqbert"),KUo=o(" \u2014 "),xz=a("a"),ZUo=o("QDQBertForNextSentencePrediction"),eJo=o(" (QDQBert model)"),oJo=l(),xv=a("p"),rJo=o("The model is set in evaluation mode by default using "),zue=a("code"),tJo=o("model.eval()"),aJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),nJo=o("model.train()"),sJo=l(),F($v.$$.fragment),wXe=l(),cd=a("h2"),kv=a("a"),Wue=a("span"),F(_8.$$.fragment),lJo=l(),Hue=a("span"),iJo=o("AutoModelForTokenClassification"),AXe=l(),qo=a("div"),F(u8.$$.fragment),dJo=l(),fd=a("p"),cJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=a("a"),fJo=o("from_pretrained()"),mJo=o(" class method or the "),kz=a("a"),gJo=o("from_config()"),hJo=o(` class
method.`),pJo=l(),b8=a("p"),_Jo=o("This class cannot be instantiated directly using "),Uue=a("code"),uJo=o("__init__()"),bJo=o(" (throws an error)."),vJo=l(),pt=a("div"),F(v8.$$.fragment),FJo=l(),Jue=a("p"),TJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MJo=l(),md=a("p"),EJo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),CJo=o("not"),wJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),AJo=o("from_pretrained()"),LJo=o(" to load the model weights."),yJo=l(),F(Sv.$$.fragment),xJo=l(),ao=a("div"),F(F8.$$.fragment),$Jo=l(),Kue=a("p"),kJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SJo=l(),Xa=a("p"),RJo=o("The model class to instantiate is selected based on the "),Zue=a("code"),PJo=o("model_type"),BJo=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),NJo=o("pretrained_model_name_or_path"),IJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),qJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),U=a("ul"),Rv=a("li"),r1e=a("strong"),GJo=o("albert"),OJo=o(" \u2014 "),Rz=a("a"),VJo=o("AlbertForTokenClassification"),XJo=o(" (ALBERT model)"),zJo=l(),Pv=a("li"),t1e=a("strong"),QJo=o("bert"),WJo=o(" \u2014 "),Pz=a("a"),HJo=o("BertForTokenClassification"),UJo=o(" (BERT model)"),JJo=l(),Bv=a("li"),a1e=a("strong"),YJo=o("big_bird"),KJo=o(" \u2014 "),Bz=a("a"),ZJo=o("BigBirdForTokenClassification"),eYo=o(" (BigBird model)"),oYo=l(),Nv=a("li"),n1e=a("strong"),rYo=o("bloom"),tYo=o(" \u2014 "),Nz=a("a"),aYo=o("BloomForTokenClassification"),nYo=o(" (BLOOM model)"),sYo=l(),Iv=a("li"),s1e=a("strong"),lYo=o("camembert"),iYo=o(" \u2014 "),Iz=a("a"),dYo=o("CamembertForTokenClassification"),cYo=o(" (CamemBERT model)"),fYo=l(),qv=a("li"),l1e=a("strong"),mYo=o("canine"),gYo=o(" \u2014 "),qz=a("a"),hYo=o("CanineForTokenClassification"),pYo=o(" (CANINE model)"),_Yo=l(),jv=a("li"),i1e=a("strong"),uYo=o("convbert"),bYo=o(" \u2014 "),jz=a("a"),vYo=o("ConvBertForTokenClassification"),FYo=o(" (ConvBERT model)"),TYo=l(),Dv=a("li"),d1e=a("strong"),MYo=o("data2vec-text"),EYo=o(" \u2014 "),Dz=a("a"),CYo=o("Data2VecTextForTokenClassification"),wYo=o(" (Data2VecText model)"),AYo=l(),Gv=a("li"),c1e=a("strong"),LYo=o("deberta"),yYo=o(" \u2014 "),Gz=a("a"),xYo=o("DebertaForTokenClassification"),$Yo=o(" (DeBERTa model)"),kYo=l(),Ov=a("li"),f1e=a("strong"),SYo=o("deberta-v2"),RYo=o(" \u2014 "),Oz=a("a"),PYo=o("DebertaV2ForTokenClassification"),BYo=o(" (DeBERTa-v2 model)"),NYo=l(),Vv=a("li"),m1e=a("strong"),IYo=o("distilbert"),qYo=o(" \u2014 "),Vz=a("a"),jYo=o("DistilBertForTokenClassification"),DYo=o(" (DistilBERT model)"),GYo=l(),Xv=a("li"),g1e=a("strong"),OYo=o("electra"),VYo=o(" \u2014 "),Xz=a("a"),XYo=o("ElectraForTokenClassification"),zYo=o(" (ELECTRA model)"),QYo=l(),zv=a("li"),h1e=a("strong"),WYo=o("flaubert"),HYo=o(" \u2014 "),zz=a("a"),UYo=o("FlaubertForTokenClassification"),JYo=o(" (FlauBERT model)"),YYo=l(),Qv=a("li"),p1e=a("strong"),KYo=o("fnet"),ZYo=o(" \u2014 "),Qz=a("a"),eKo=o("FNetForTokenClassification"),oKo=o(" (FNet model)"),rKo=l(),Wv=a("li"),_1e=a("strong"),tKo=o("funnel"),aKo=o(" \u2014 "),Wz=a("a"),nKo=o("FunnelForTokenClassification"),sKo=o(" (Funnel Transformer model)"),lKo=l(),Hv=a("li"),u1e=a("strong"),iKo=o("gpt2"),dKo=o(" \u2014 "),Hz=a("a"),cKo=o("GPT2ForTokenClassification"),fKo=o(" (OpenAI GPT-2 model)"),mKo=l(),Uv=a("li"),b1e=a("strong"),gKo=o("ibert"),hKo=o(" \u2014 "),Uz=a("a"),pKo=o("IBertForTokenClassification"),_Ko=o(" (I-BERT model)"),uKo=l(),Jv=a("li"),v1e=a("strong"),bKo=o("layoutlm"),vKo=o(" \u2014 "),Jz=a("a"),FKo=o("LayoutLMForTokenClassification"),TKo=o(" (LayoutLM model)"),MKo=l(),Yv=a("li"),F1e=a("strong"),EKo=o("layoutlmv2"),CKo=o(" \u2014 "),Yz=a("a"),wKo=o("LayoutLMv2ForTokenClassification"),AKo=o(" (LayoutLMv2 model)"),LKo=l(),Kv=a("li"),T1e=a("strong"),yKo=o("layoutlmv3"),xKo=o(" \u2014 "),Kz=a("a"),$Ko=o("LayoutLMv3ForTokenClassification"),kKo=o(" (LayoutLMv3 model)"),SKo=l(),Zv=a("li"),M1e=a("strong"),RKo=o("longformer"),PKo=o(" \u2014 "),Zz=a("a"),BKo=o("LongformerForTokenClassification"),NKo=o(" (Longformer model)"),IKo=l(),e3=a("li"),E1e=a("strong"),qKo=o("megatron-bert"),jKo=o(" \u2014 "),eQ=a("a"),DKo=o("MegatronBertForTokenClassification"),GKo=o(" (Megatron-BERT model)"),OKo=l(),o3=a("li"),C1e=a("strong"),VKo=o("mobilebert"),XKo=o(" \u2014 "),oQ=a("a"),zKo=o("MobileBertForTokenClassification"),QKo=o(" (MobileBERT model)"),WKo=l(),r3=a("li"),w1e=a("strong"),HKo=o("mpnet"),UKo=o(" \u2014 "),rQ=a("a"),JKo=o("MPNetForTokenClassification"),YKo=o(" (MPNet model)"),KKo=l(),t3=a("li"),A1e=a("strong"),ZKo=o("nezha"),eZo=o(" \u2014 "),tQ=a("a"),oZo=o("NezhaForTokenClassification"),rZo=o(" (Nezha model)"),tZo=l(),a3=a("li"),L1e=a("strong"),aZo=o("nystromformer"),nZo=o(" \u2014 "),aQ=a("a"),sZo=o("NystromformerForTokenClassification"),lZo=o(" (Nystr\xF6mformer model)"),iZo=l(),n3=a("li"),y1e=a("strong"),dZo=o("qdqbert"),cZo=o(" \u2014 "),nQ=a("a"),fZo=o("QDQBertForTokenClassification"),mZo=o(" (QDQBert model)"),gZo=l(),s3=a("li"),x1e=a("strong"),hZo=o("rembert"),pZo=o(" \u2014 "),sQ=a("a"),_Zo=o("RemBertForTokenClassification"),uZo=o(" (RemBERT model)"),bZo=l(),l3=a("li"),$1e=a("strong"),vZo=o("roberta"),FZo=o(" \u2014 "),lQ=a("a"),TZo=o("RobertaForTokenClassification"),MZo=o(" (RoBERTa model)"),EZo=l(),i3=a("li"),k1e=a("strong"),CZo=o("roformer"),wZo=o(" \u2014 "),iQ=a("a"),AZo=o("RoFormerForTokenClassification"),LZo=o(" (RoFormer model)"),yZo=l(),d3=a("li"),S1e=a("strong"),xZo=o("squeezebert"),$Zo=o(" \u2014 "),dQ=a("a"),kZo=o("SqueezeBertForTokenClassification"),SZo=o(" (SqueezeBERT model)"),RZo=l(),c3=a("li"),R1e=a("strong"),PZo=o("xlm"),BZo=o(" \u2014 "),cQ=a("a"),NZo=o("XLMForTokenClassification"),IZo=o(" (XLM model)"),qZo=l(),f3=a("li"),P1e=a("strong"),jZo=o("xlm-roberta"),DZo=o(" \u2014 "),fQ=a("a"),GZo=o("XLMRobertaForTokenClassification"),OZo=o(" (XLM-RoBERTa model)"),VZo=l(),m3=a("li"),B1e=a("strong"),XZo=o("xlm-roberta-xl"),zZo=o(" \u2014 "),mQ=a("a"),QZo=o("XLMRobertaXLForTokenClassification"),WZo=o(" (XLM-RoBERTa-XL model)"),HZo=l(),g3=a("li"),N1e=a("strong"),UZo=o("xlnet"),JZo=o(" \u2014 "),gQ=a("a"),YZo=o("XLNetForTokenClassification"),KZo=o(" (XLNet model)"),ZZo=l(),h3=a("li"),I1e=a("strong"),eer=o("yoso"),oer=o(" \u2014 "),hQ=a("a"),rer=o("YosoForTokenClassification"),ter=o(" (YOSO model)"),aer=l(),p3=a("p"),ner=o("The model is set in evaluation mode by default using "),q1e=a("code"),ser=o("model.eval()"),ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=a("code"),ier=o("model.train()"),der=l(),F(_3.$$.fragment),LXe=l(),gd=a("h2"),u3=a("a"),D1e=a("span"),F(T8.$$.fragment),cer=l(),G1e=a("span"),fer=o("AutoModelForQuestionAnswering"),yXe=l(),jo=a("div"),F(M8.$$.fragment),mer=l(),hd=a("p"),ger=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=a("a"),her=o("from_pretrained()"),per=o(" class method or the "),_Q=a("a"),_er=o("from_config()"),uer=o(` class
method.`),ber=l(),E8=a("p"),ver=o("This class cannot be instantiated directly using "),O1e=a("code"),Fer=o("__init__()"),Ter=o(" (throws an error)."),Mer=l(),_t=a("div"),F(C8.$$.fragment),Eer=l(),V1e=a("p"),Cer=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wer=l(),pd=a("p"),Aer=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),Ler=o("not"),yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),xer=o("from_pretrained()"),$er=o(" to load the model weights."),ker=l(),F(b3.$$.fragment),Ser=l(),no=a("div"),F(w8.$$.fragment),Rer=l(),z1e=a("p"),Per=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ber=l(),za=a("p"),Ner=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Ier=o("model_type"),qer=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),jer=o("pretrained_model_name_or_path"),Der=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(":"),Ver=l(),V=a("ul"),v3=a("li"),U1e=a("strong"),Xer=o("albert"),zer=o(" \u2014 "),bQ=a("a"),Qer=o("AlbertForQuestionAnswering"),Wer=o(" (ALBERT model)"),Her=l(),F3=a("li"),J1e=a("strong"),Uer=o("bart"),Jer=o(" \u2014 "),vQ=a("a"),Yer=o("BartForQuestionAnswering"),Ker=o(" (BART model)"),Zer=l(),T3=a("li"),Y1e=a("strong"),eor=o("bert"),oor=o(" \u2014 "),FQ=a("a"),ror=o("BertForQuestionAnswering"),tor=o(" (BERT model)"),aor=l(),M3=a("li"),K1e=a("strong"),nor=o("big_bird"),sor=o(" \u2014 "),TQ=a("a"),lor=o("BigBirdForQuestionAnswering"),ior=o(" (BigBird model)"),dor=l(),E3=a("li"),Z1e=a("strong"),cor=o("bigbird_pegasus"),mor=o(" \u2014 "),MQ=a("a"),gor=o("BigBirdPegasusForQuestionAnswering"),hor=o(" (BigBird-Pegasus model)"),por=l(),C3=a("li"),e4e=a("strong"),_or=o("camembert"),uor=o(" \u2014 "),EQ=a("a"),bor=o("CamembertForQuestionAnswering"),vor=o(" (CamemBERT model)"),For=l(),w3=a("li"),o4e=a("strong"),Tor=o("canine"),Mor=o(" \u2014 "),CQ=a("a"),Eor=o("CanineForQuestionAnswering"),Cor=o(" (CANINE model)"),wor=l(),A3=a("li"),r4e=a("strong"),Aor=o("convbert"),Lor=o(" \u2014 "),wQ=a("a"),yor=o("ConvBertForQuestionAnswering"),xor=o(" (ConvBERT model)"),$or=l(),L3=a("li"),t4e=a("strong"),kor=o("data2vec-text"),Sor=o(" \u2014 "),AQ=a("a"),Ror=o("Data2VecTextForQuestionAnswering"),Por=o(" (Data2VecText model)"),Bor=l(),y3=a("li"),a4e=a("strong"),Nor=o("deberta"),Ior=o(" \u2014 "),LQ=a("a"),qor=o("DebertaForQuestionAnswering"),jor=o(" (DeBERTa model)"),Dor=l(),x3=a("li"),n4e=a("strong"),Gor=o("deberta-v2"),Oor=o(" \u2014 "),yQ=a("a"),Vor=o("DebertaV2ForQuestionAnswering"),Xor=o(" (DeBERTa-v2 model)"),zor=l(),$3=a("li"),s4e=a("strong"),Qor=o("distilbert"),Wor=o(" \u2014 "),xQ=a("a"),Hor=o("DistilBertForQuestionAnswering"),Uor=o(" (DistilBERT model)"),Jor=l(),k3=a("li"),l4e=a("strong"),Yor=o("electra"),Kor=o(" \u2014 "),$Q=a("a"),Zor=o("ElectraForQuestionAnswering"),err=o(" (ELECTRA model)"),orr=l(),S3=a("li"),i4e=a("strong"),rrr=o("flaubert"),trr=o(" \u2014 "),kQ=a("a"),arr=o("FlaubertForQuestionAnsweringSimple"),nrr=o(" (FlauBERT model)"),srr=l(),R3=a("li"),d4e=a("strong"),lrr=o("fnet"),irr=o(" \u2014 "),SQ=a("a"),drr=o("FNetForQuestionAnswering"),crr=o(" (FNet model)"),frr=l(),P3=a("li"),c4e=a("strong"),mrr=o("funnel"),grr=o(" \u2014 "),RQ=a("a"),hrr=o("FunnelForQuestionAnswering"),prr=o(" (Funnel Transformer model)"),_rr=l(),B3=a("li"),f4e=a("strong"),urr=o("gptj"),brr=o(" \u2014 "),PQ=a("a"),vrr=o("GPTJForQuestionAnswering"),Frr=o(" (GPT-J model)"),Trr=l(),N3=a("li"),m4e=a("strong"),Mrr=o("ibert"),Err=o(" \u2014 "),BQ=a("a"),Crr=o("IBertForQuestionAnswering"),wrr=o(" (I-BERT model)"),Arr=l(),I3=a("li"),g4e=a("strong"),Lrr=o("layoutlmv2"),yrr=o(" \u2014 "),NQ=a("a"),xrr=o("LayoutLMv2ForQuestionAnswering"),$rr=o(" (LayoutLMv2 model)"),krr=l(),q3=a("li"),h4e=a("strong"),Srr=o("layoutlmv3"),Rrr=o(" \u2014 "),IQ=a("a"),Prr=o("LayoutLMv3ForQuestionAnswering"),Brr=o(" (LayoutLMv3 model)"),Nrr=l(),j3=a("li"),p4e=a("strong"),Irr=o("led"),qrr=o(" \u2014 "),qQ=a("a"),jrr=o("LEDForQuestionAnswering"),Drr=o(" (LED model)"),Grr=l(),D3=a("li"),_4e=a("strong"),Orr=o("longformer"),Vrr=o(" \u2014 "),jQ=a("a"),Xrr=o("LongformerForQuestionAnswering"),zrr=o(" (Longformer model)"),Qrr=l(),G3=a("li"),u4e=a("strong"),Wrr=o("lxmert"),Hrr=o(" \u2014 "),DQ=a("a"),Urr=o("LxmertForQuestionAnswering"),Jrr=o(" (LXMERT model)"),Yrr=l(),O3=a("li"),b4e=a("strong"),Krr=o("mbart"),Zrr=o(" \u2014 "),GQ=a("a"),etr=o("MBartForQuestionAnswering"),otr=o(" (mBART model)"),rtr=l(),V3=a("li"),v4e=a("strong"),ttr=o("megatron-bert"),atr=o(" \u2014 "),OQ=a("a"),ntr=o("MegatronBertForQuestionAnswering"),str=o(" (Megatron-BERT model)"),ltr=l(),X3=a("li"),F4e=a("strong"),itr=o("mobilebert"),dtr=o(" \u2014 "),VQ=a("a"),ctr=o("MobileBertForQuestionAnswering"),ftr=o(" (MobileBERT model)"),mtr=l(),z3=a("li"),T4e=a("strong"),gtr=o("mpnet"),htr=o(" \u2014 "),XQ=a("a"),ptr=o("MPNetForQuestionAnswering"),_tr=o(" (MPNet model)"),utr=l(),Q3=a("li"),M4e=a("strong"),btr=o("mvp"),vtr=o(" \u2014 "),zQ=a("a"),Ftr=o("MvpForQuestionAnswering"),Ttr=o(" (MVP model)"),Mtr=l(),W3=a("li"),E4e=a("strong"),Etr=o("nezha"),Ctr=o(" \u2014 "),QQ=a("a"),wtr=o("NezhaForQuestionAnswering"),Atr=o(" (Nezha model)"),Ltr=l(),H3=a("li"),C4e=a("strong"),ytr=o("nystromformer"),xtr=o(" \u2014 "),WQ=a("a"),$tr=o("NystromformerForQuestionAnswering"),ktr=o(" (Nystr\xF6mformer model)"),Str=l(),U3=a("li"),w4e=a("strong"),Rtr=o("qdqbert"),Ptr=o(" \u2014 "),HQ=a("a"),Btr=o("QDQBertForQuestionAnswering"),Ntr=o(" (QDQBert model)"),Itr=l(),J3=a("li"),A4e=a("strong"),qtr=o("reformer"),jtr=o(" \u2014 "),UQ=a("a"),Dtr=o("ReformerForQuestionAnswering"),Gtr=o(" (Reformer model)"),Otr=l(),Y3=a("li"),L4e=a("strong"),Vtr=o("rembert"),Xtr=o(" \u2014 "),JQ=a("a"),ztr=o("RemBertForQuestionAnswering"),Qtr=o(" (RemBERT model)"),Wtr=l(),K3=a("li"),y4e=a("strong"),Htr=o("roberta"),Utr=o(" \u2014 "),YQ=a("a"),Jtr=o("RobertaForQuestionAnswering"),Ytr=o(" (RoBERTa model)"),Ktr=l(),Z3=a("li"),x4e=a("strong"),Ztr=o("roformer"),ear=o(" \u2014 "),KQ=a("a"),oar=o("RoFormerForQuestionAnswering"),rar=o(" (RoFormer model)"),tar=l(),e5=a("li"),$4e=a("strong"),aar=o("splinter"),nar=o(" \u2014 "),ZQ=a("a"),sar=o("SplinterForQuestionAnswering"),lar=o(" (Splinter model)"),iar=l(),o5=a("li"),k4e=a("strong"),dar=o("squeezebert"),car=o(" \u2014 "),eW=a("a"),far=o("SqueezeBertForQuestionAnswering"),mar=o(" (SqueezeBERT model)"),gar=l(),r5=a("li"),S4e=a("strong"),har=o("xlm"),par=o(" \u2014 "),oW=a("a"),_ar=o("XLMForQuestionAnsweringSimple"),uar=o(" (XLM model)"),bar=l(),t5=a("li"),R4e=a("strong"),Far=o("xlm-roberta"),Tar=o(" \u2014 "),rW=a("a"),Mar=o("XLMRobertaForQuestionAnswering"),Ear=o(" (XLM-RoBERTa model)"),Car=l(),a5=a("li"),P4e=a("strong"),war=o("xlm-roberta-xl"),Aar=o(" \u2014 "),tW=a("a"),Lar=o("XLMRobertaXLForQuestionAnswering"),yar=o(" (XLM-RoBERTa-XL model)"),xar=l(),n5=a("li"),B4e=a("strong"),$ar=o("xlnet"),kar=o(" \u2014 "),aW=a("a"),Sar=o("XLNetForQuestionAnsweringSimple"),Rar=o(" (XLNet model)"),Par=l(),s5=a("li"),N4e=a("strong"),Bar=o("yoso"),Nar=o(" \u2014 "),nW=a("a"),Iar=o("YosoForQuestionAnswering"),qar=o(" (YOSO model)"),jar=l(),l5=a("p"),Dar=o("The model is set in evaluation mode by default using "),I4e=a("code"),Gar=o("model.eval()"),Oar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),Var=o("model.train()"),Xar=l(),F(i5.$$.fragment),xXe=l(),_d=a("h2"),d5=a("a"),j4e=a("span"),F(A8.$$.fragment),zar=l(),D4e=a("span"),Qar=o("AutoModelForTableQuestionAnswering"),$Xe=l(),Do=a("div"),F(L8.$$.fragment),War=l(),ud=a("p"),Har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=a("a"),Uar=o("from_pretrained()"),Jar=o(" class method or the "),lW=a("a"),Yar=o("from_config()"),Kar=o(` class
method.`),Zar=l(),y8=a("p"),enr=o("This class cannot be instantiated directly using "),G4e=a("code"),onr=o("__init__()"),rnr=o(" (throws an error)."),tnr=l(),ut=a("div"),F(x8.$$.fragment),anr=l(),O4e=a("p"),nnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),snr=l(),bd=a("p"),lnr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),inr=o("not"),dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),cnr=o("from_pretrained()"),fnr=o(" to load the model weights."),mnr=l(),F(c5.$$.fragment),gnr=l(),so=a("div"),F($8.$$.fragment),hnr=l(),X4e=a("p"),pnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_nr=l(),Qa=a("p"),unr=o("The model class to instantiate is selected based on the "),z4e=a("code"),bnr=o("model_type"),vnr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),Mnr=o("pretrained_model_name_or_path"),Enr=o(":"),Cnr=l(),H4e=a("ul"),f5=a("li"),U4e=a("strong"),wnr=o("tapas"),Anr=o(" \u2014 "),dW=a("a"),Lnr=o("TapasForQuestionAnswering"),ynr=o(" (TAPAS model)"),xnr=l(),m5=a("p"),$nr=o("The model is set in evaluation mode by default using "),J4e=a("code"),knr=o("model.eval()"),Snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),Rnr=o("model.train()"),Pnr=l(),F(g5.$$.fragment),kXe=l(),vd=a("h2"),h5=a("a"),K4e=a("span"),F(k8.$$.fragment),Bnr=l(),Z4e=a("span"),Nnr=o("AutoModelForImageClassification"),SXe=l(),Go=a("div"),F(S8.$$.fragment),Inr=l(),Fd=a("p"),qnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),fW=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),R8=a("p"),Xnr=o("This class cannot be instantiated directly using "),e2e=a("code"),znr=o("__init__()"),Qnr=o(" (throws an error)."),Wnr=l(),bt=a("div"),F(P8.$$.fragment),Hnr=l(),o2e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jnr=l(),Td=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(p5.$$.fragment),tsr=l(),lo=a("div"),F(B8.$$.fragment),asr=l(),t2e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ssr=l(),Wa=a("p"),lsr=o("The model class to instantiate is selected based on the "),a2e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),ve=a("ul"),_5=a("li"),l2e=a("strong"),psr=o("beit"),_sr=o(" \u2014 "),gW=a("a"),usr=o("BeitForImageClassification"),bsr=o(" (BEiT model)"),vsr=l(),u5=a("li"),i2e=a("strong"),Fsr=o("convnext"),Tsr=o(" \u2014 "),hW=a("a"),Msr=o("ConvNextForImageClassification"),Esr=o(" (ConvNeXT model)"),Csr=l(),b5=a("li"),d2e=a("strong"),wsr=o("cvt"),Asr=o(" \u2014 "),pW=a("a"),Lsr=o("CvtForImageClassification"),ysr=o(" (CvT model)"),xsr=l(),v5=a("li"),c2e=a("strong"),$sr=o("data2vec-vision"),ksr=o(" \u2014 "),_W=a("a"),Ssr=o("Data2VecVisionForImageClassification"),Rsr=o(" (Data2VecVision model)"),Psr=l(),Hs=a("li"),f2e=a("strong"),Bsr=o("deit"),Nsr=o(" \u2014 "),uW=a("a"),Isr=o("DeiTForImageClassification"),qsr=o(" or "),bW=a("a"),jsr=o("DeiTForImageClassificationWithTeacher"),Dsr=o(" (DeiT model)"),Gsr=l(),F5=a("li"),m2e=a("strong"),Osr=o("imagegpt"),Vsr=o(" \u2014 "),vW=a("a"),Xsr=o("ImageGPTForImageClassification"),zsr=o(" (ImageGPT model)"),Qsr=l(),Us=a("li"),g2e=a("strong"),Wsr=o("levit"),Hsr=o(" \u2014 "),FW=a("a"),Usr=o("LevitForImageClassification"),Jsr=o(" or "),TW=a("a"),Ysr=o("LevitForImageClassificationWithTeacher"),Ksr=o(" (LeViT model)"),Zsr=l(),T5=a("li"),h2e=a("strong"),elr=o("mobilevit"),olr=o(" \u2014 "),MW=a("a"),rlr=o("MobileViTForImageClassification"),tlr=o(" (MobileViT model)"),alr=l(),vt=a("li"),p2e=a("strong"),nlr=o("perceiver"),slr=o(" \u2014 "),EW=a("a"),llr=o("PerceiverForImageClassificationLearned"),ilr=o(" or "),CW=a("a"),dlr=o("PerceiverForImageClassificationFourier"),clr=o(" or "),wW=a("a"),flr=o("PerceiverForImageClassificationConvProcessing"),mlr=o(" (Perceiver model)"),glr=l(),M5=a("li"),_2e=a("strong"),hlr=o("poolformer"),plr=o(" \u2014 "),AW=a("a"),_lr=o("PoolFormerForImageClassification"),ulr=o(" (PoolFormer model)"),blr=l(),E5=a("li"),u2e=a("strong"),vlr=o("regnet"),Flr=o(" \u2014 "),LW=a("a"),Tlr=o("RegNetForImageClassification"),Mlr=o(" (RegNet model)"),Elr=l(),C5=a("li"),b2e=a("strong"),Clr=o("resnet"),wlr=o(" \u2014 "),yW=a("a"),Alr=o("ResNetForImageClassification"),Llr=o(" (ResNet model)"),ylr=l(),w5=a("li"),v2e=a("strong"),xlr=o("segformer"),$lr=o(" \u2014 "),xW=a("a"),klr=o("SegformerForImageClassification"),Slr=o(" (SegFormer model)"),Rlr=l(),A5=a("li"),F2e=a("strong"),Plr=o("swin"),Blr=o(" \u2014 "),$W=a("a"),Nlr=o("SwinForImageClassification"),Ilr=o(" (Swin Transformer model)"),qlr=l(),L5=a("li"),T2e=a("strong"),jlr=o("van"),Dlr=o(" \u2014 "),kW=a("a"),Glr=o("VanForImageClassification"),Olr=o(" (VAN model)"),Vlr=l(),y5=a("li"),M2e=a("strong"),Xlr=o("vit"),zlr=o(" \u2014 "),SW=a("a"),Qlr=o("ViTForImageClassification"),Wlr=o(" (ViT model)"),Hlr=l(),x5=a("p"),Ulr=o("The model is set in evaluation mode by default using "),E2e=a("code"),Jlr=o("model.eval()"),Ylr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=a("code"),Klr=o("model.train()"),Zlr=l(),F($5.$$.fragment),RXe=l(),Md=a("h2"),k5=a("a"),w2e=a("span"),F(N8.$$.fragment),eir=l(),A2e=a("span"),oir=o("AutoModelForVision2Seq"),PXe=l(),Oo=a("div"),F(I8.$$.fragment),rir=l(),Ed=a("p"),tir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=a("a"),air=o("from_pretrained()"),nir=o(" class method or the "),PW=a("a"),sir=o("from_config()"),lir=o(` class
method.`),iir=l(),q8=a("p"),dir=o("This class cannot be instantiated directly using "),L2e=a("code"),cir=o("__init__()"),fir=o(" (throws an error)."),mir=l(),Ft=a("div"),F(j8.$$.fragment),gir=l(),y2e=a("p"),hir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pir=l(),Cd=a("p"),_ir=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),uir=o("not"),bir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),vir=o("from_pretrained()"),Fir=o(" to load the model weights."),Tir=l(),F(S5.$$.fragment),Mir=l(),io=a("div"),F(D8.$$.fragment),Eir=l(),$2e=a("p"),Cir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wir=l(),Ha=a("p"),Air=o("The model class to instantiate is selected based on the "),k2e=a("code"),Lir=o("model_type"),yir=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),xir=o("pretrained_model_name_or_path"),$ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),kir=o("pretrained_model_name_or_path"),Sir=o(":"),Rir=l(),P2e=a("ul"),R5=a("li"),B2e=a("strong"),Pir=o("vision-encoder-decoder"),Bir=o(" \u2014 "),NW=a("a"),Nir=o("VisionEncoderDecoderModel"),Iir=o(" (Vision Encoder decoder model)"),qir=l(),P5=a("p"),jir=o("The model is set in evaluation mode by default using "),N2e=a("code"),Dir=o("model.eval()"),Gir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=a("code"),Oir=o("model.train()"),Vir=l(),F(B5.$$.fragment),BXe=l(),wd=a("h2"),N5=a("a"),q2e=a("span"),F(G8.$$.fragment),Xir=l(),j2e=a("span"),zir=o("AutoModelForVisualQuestionAnswering"),NXe=l(),Vo=a("div"),F(O8.$$.fragment),Qir=l(),Ad=a("p"),Wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),IW=a("a"),Hir=o("from_pretrained()"),Uir=o(" class method or the "),qW=a("a"),Jir=o("from_config()"),Yir=o(` class
method.`),Kir=l(),V8=a("p"),Zir=o("This class cannot be instantiated directly using "),D2e=a("code"),edr=o("__init__()"),odr=o(" (throws an error)."),rdr=l(),Tt=a("div"),F(X8.$$.fragment),tdr=l(),G2e=a("p"),adr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ndr=l(),Ld=a("p"),sdr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),ldr=o("not"),idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),ddr=o("from_pretrained()"),cdr=o(" to load the model weights."),fdr=l(),F(I5.$$.fragment),mdr=l(),co=a("div"),F(z8.$$.fragment),gdr=l(),V2e=a("p"),hdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),pdr=l(),Ua=a("p"),_dr=o("The model class to instantiate is selected based on the "),X2e=a("code"),udr=o("model_type"),bdr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),vdr=o("pretrained_model_name_or_path"),Fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),Tdr=o("pretrained_model_name_or_path"),Mdr=o(":"),Edr=l(),W2e=a("ul"),q5=a("li"),H2e=a("strong"),Cdr=o("vilt"),wdr=o(" \u2014 "),DW=a("a"),Adr=o("ViltForQuestionAnswering"),Ldr=o(" (ViLT model)"),ydr=l(),j5=a("p"),xdr=o("The model is set in evaluation mode by default using "),U2e=a("code"),$dr=o("model.eval()"),kdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=a("code"),Sdr=o("model.train()"),Rdr=l(),F(D5.$$.fragment),IXe=l(),yd=a("h2"),G5=a("a"),Y2e=a("span"),F(Q8.$$.fragment),Pdr=l(),K2e=a("span"),Bdr=o("AutoModelForAudioClassification"),qXe=l(),Xo=a("div"),F(W8.$$.fragment),Ndr=l(),xd=a("p"),Idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=a("a"),qdr=o("from_pretrained()"),jdr=o(" class method or the "),OW=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),H8=a("p"),Vdr=o("This class cannot be instantiated directly using "),Z2e=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Qdr=l(),Mt=a("div"),F(U8.$$.fragment),Wdr=l(),ebe=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Udr=l(),$d=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(O5.$$.fragment),rcr=l(),fo=a("div"),F(J8.$$.fragment),tcr=l(),rbe=a("p"),acr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ncr=l(),Ja=a("p"),scr=o("The model class to instantiate is selected based on the "),tbe=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(":"),gcr=l(),Pe=a("ul"),V5=a("li"),sbe=a("strong"),hcr=o("data2vec-audio"),pcr=o(" \u2014 "),XW=a("a"),_cr=o("Data2VecAudioForSequenceClassification"),ucr=o(" (Data2VecAudio model)"),bcr=l(),X5=a("li"),lbe=a("strong"),vcr=o("hubert"),Fcr=o(" \u2014 "),zW=a("a"),Tcr=o("HubertForSequenceClassification"),Mcr=o(" (Hubert model)"),Ecr=l(),z5=a("li"),ibe=a("strong"),Ccr=o("sew"),wcr=o(" \u2014 "),QW=a("a"),Acr=o("SEWForSequenceClassification"),Lcr=o(" (SEW model)"),ycr=l(),Q5=a("li"),dbe=a("strong"),xcr=o("sew-d"),$cr=o(" \u2014 "),WW=a("a"),kcr=o("SEWDForSequenceClassification"),Scr=o(" (SEW-D model)"),Rcr=l(),W5=a("li"),cbe=a("strong"),Pcr=o("unispeech"),Bcr=o(" \u2014 "),HW=a("a"),Ncr=o("UniSpeechForSequenceClassification"),Icr=o(" (UniSpeech model)"),qcr=l(),H5=a("li"),fbe=a("strong"),jcr=o("unispeech-sat"),Dcr=o(" \u2014 "),UW=a("a"),Gcr=o("UniSpeechSatForSequenceClassification"),Ocr=o(" (UniSpeechSat model)"),Vcr=l(),U5=a("li"),mbe=a("strong"),Xcr=o("wav2vec2"),zcr=o(" \u2014 "),JW=a("a"),Qcr=o("Wav2Vec2ForSequenceClassification"),Wcr=o(" (Wav2Vec2 model)"),Hcr=l(),J5=a("li"),gbe=a("strong"),Ucr=o("wav2vec2-conformer"),Jcr=o(" \u2014 "),YW=a("a"),Ycr=o("Wav2Vec2ConformerForSequenceClassification"),Kcr=o(" (Wav2Vec2-Conformer model)"),Zcr=l(),Y5=a("li"),hbe=a("strong"),efr=o("wavlm"),ofr=o(" \u2014 "),KW=a("a"),rfr=o("WavLMForSequenceClassification"),tfr=o(" (WavLM model)"),afr=l(),K5=a("p"),nfr=o("The model is set in evaluation mode by default using "),pbe=a("code"),sfr=o("model.eval()"),lfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),ifr=o("model.train()"),dfr=l(),F(Z5.$$.fragment),jXe=l(),kd=a("h2"),eF=a("a"),ube=a("span"),F(Y8.$$.fragment),cfr=l(),bbe=a("span"),ffr=o("AutoModelForAudioFrameClassification"),DXe=l(),zo=a("div"),F(K8.$$.fragment),mfr=l(),Sd=a("p"),gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=a("a"),hfr=o("from_pretrained()"),pfr=o(" class method or the "),eH=a("a"),_fr=o("from_config()"),ufr=o(` class
method.`),bfr=l(),Z8=a("p"),vfr=o("This class cannot be instantiated directly using "),vbe=a("code"),Ffr=o("__init__()"),Tfr=o(" (throws an error)."),Mfr=l(),Et=a("div"),F(e9.$$.fragment),Efr=l(),Fbe=a("p"),Cfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wfr=l(),Rd=a("p"),Afr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),Lfr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),xfr=o("from_pretrained()"),$fr=o(" to load the model weights."),kfr=l(),F(oF.$$.fragment),Sfr=l(),mo=a("div"),F(o9.$$.fragment),Rfr=l(),Mbe=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bfr=l(),Ya=a("p"),Nfr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),Ifr=o("model_type"),qfr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Vfr=l(),ot=a("ul"),rF=a("li"),Abe=a("strong"),Xfr=o("data2vec-audio"),zfr=o(" \u2014 "),rH=a("a"),Qfr=o("Data2VecAudioForAudioFrameClassification"),Wfr=o(" (Data2VecAudio model)"),Hfr=l(),tF=a("li"),Lbe=a("strong"),Ufr=o("unispeech-sat"),Jfr=o(" \u2014 "),tH=a("a"),Yfr=o("UniSpeechSatForAudioFrameClassification"),Kfr=o(" (UniSpeechSat model)"),Zfr=l(),aF=a("li"),ybe=a("strong"),emr=o("wav2vec2"),omr=o(" \u2014 "),aH=a("a"),rmr=o("Wav2Vec2ForAudioFrameClassification"),tmr=o(" (Wav2Vec2 model)"),amr=l(),nF=a("li"),xbe=a("strong"),nmr=o("wav2vec2-conformer"),smr=o(" \u2014 "),nH=a("a"),lmr=o("Wav2Vec2ConformerForAudioFrameClassification"),imr=o(" (Wav2Vec2-Conformer model)"),dmr=l(),sF=a("li"),$be=a("strong"),cmr=o("wavlm"),fmr=o(" \u2014 "),sH=a("a"),mmr=o("WavLMForAudioFrameClassification"),gmr=o(" (WavLM model)"),hmr=l(),lF=a("p"),pmr=o("The model is set in evaluation mode by default using "),kbe=a("code"),_mr=o("model.eval()"),umr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),bmr=o("model.train()"),vmr=l(),F(iF.$$.fragment),GXe=l(),Pd=a("h2"),dF=a("a"),Rbe=a("span"),F(r9.$$.fragment),Fmr=l(),Pbe=a("span"),Tmr=o("AutoModelForCTC"),OXe=l(),Qo=a("div"),F(t9.$$.fragment),Mmr=l(),Bd=a("p"),Emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=a("a"),Cmr=o("from_pretrained()"),wmr=o(" class method or the "),iH=a("a"),Amr=o("from_config()"),Lmr=o(` class
method.`),ymr=l(),a9=a("p"),xmr=o("This class cannot be instantiated directly using "),Bbe=a("code"),$mr=o("__init__()"),kmr=o(" (throws an error)."),Smr=l(),Ct=a("div"),F(n9.$$.fragment),Rmr=l(),Nbe=a("p"),Pmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bmr=l(),Nd=a("p"),Nmr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),Imr=o("not"),qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),jmr=o("from_pretrained()"),Dmr=o(" to load the model weights."),Gmr=l(),F(cF.$$.fragment),Omr=l(),go=a("div"),F(s9.$$.fragment),Vmr=l(),qbe=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zmr=l(),Ka=a("p"),Qmr=o("The model class to instantiate is selected based on the "),jbe=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),Le=a("ul"),fF=a("li"),Obe=a("strong"),egr=o("data2vec-audio"),ogr=o(" \u2014 "),cH=a("a"),rgr=o("Data2VecAudioForCTC"),tgr=o(" (Data2VecAudio model)"),agr=l(),mF=a("li"),Vbe=a("strong"),ngr=o("hubert"),sgr=o(" \u2014 "),fH=a("a"),lgr=o("HubertForCTC"),igr=o(" (Hubert model)"),dgr=l(),gF=a("li"),Xbe=a("strong"),cgr=o("mctct"),fgr=o(" \u2014 "),mH=a("a"),mgr=o("MCTCTForCTC"),ggr=o(" (M-CTC-T model)"),hgr=l(),hF=a("li"),zbe=a("strong"),pgr=o("sew"),_gr=o(" \u2014 "),gH=a("a"),ugr=o("SEWForCTC"),bgr=o(" (SEW model)"),vgr=l(),pF=a("li"),Qbe=a("strong"),Fgr=o("sew-d"),Tgr=o(" \u2014 "),hH=a("a"),Mgr=o("SEWDForCTC"),Egr=o(" (SEW-D model)"),Cgr=l(),_F=a("li"),Wbe=a("strong"),wgr=o("unispeech"),Agr=o(" \u2014 "),pH=a("a"),Lgr=o("UniSpeechForCTC"),ygr=o(" (UniSpeech model)"),xgr=l(),uF=a("li"),Hbe=a("strong"),$gr=o("unispeech-sat"),kgr=o(" \u2014 "),_H=a("a"),Sgr=o("UniSpeechSatForCTC"),Rgr=o(" (UniSpeechSat model)"),Pgr=l(),bF=a("li"),Ube=a("strong"),Bgr=o("wav2vec2"),Ngr=o(" \u2014 "),uH=a("a"),Igr=o("Wav2Vec2ForCTC"),qgr=o(" (Wav2Vec2 model)"),jgr=l(),vF=a("li"),Jbe=a("strong"),Dgr=o("wav2vec2-conformer"),Ggr=o(" \u2014 "),bH=a("a"),Ogr=o("Wav2Vec2ConformerForCTC"),Vgr=o(" (Wav2Vec2-Conformer model)"),Xgr=l(),FF=a("li"),Ybe=a("strong"),zgr=o("wavlm"),Qgr=o(" \u2014 "),vH=a("a"),Wgr=o("WavLMForCTC"),Hgr=o(" (WavLM model)"),Ugr=l(),TF=a("p"),Jgr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Ygr=o("model.eval()"),Kgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),Zgr=o("model.train()"),ehr=l(),F(MF.$$.fragment),VXe=l(),Id=a("h2"),EF=a("a"),eve=a("span"),F(l9.$$.fragment),ohr=l(),ove=a("span"),rhr=o("AutoModelForSpeechSeq2Seq"),XXe=l(),Wo=a("div"),F(i9.$$.fragment),thr=l(),qd=a("p"),ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=a("a"),nhr=o("from_pretrained()"),shr=o(" class method or the "),TH=a("a"),lhr=o("from_config()"),ihr=o(` class
method.`),dhr=l(),d9=a("p"),chr=o("This class cannot be instantiated directly using "),rve=a("code"),fhr=o("__init__()"),mhr=o(" (throws an error)."),ghr=l(),wt=a("div"),F(c9.$$.fragment),hhr=l(),tve=a("p"),phr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_hr=l(),jd=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),bhr=o("not"),vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),Fhr=o("from_pretrained()"),Thr=o(" to load the model weights."),Mhr=l(),F(CF.$$.fragment),Ehr=l(),ho=a("div"),F(f9.$$.fragment),Chr=l(),nve=a("p"),whr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ahr=l(),Za=a("p"),Lhr=o("The model class to instantiate is selected based on the "),sve=a("code"),yhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),$hr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Phr=l(),m9=a("ul"),wF=a("li"),dve=a("strong"),Bhr=o("speech-encoder-decoder"),Nhr=o(" \u2014 "),EH=a("a"),Ihr=o("SpeechEncoderDecoderModel"),qhr=o(" (Speech Encoder decoder model)"),jhr=l(),AF=a("li"),cve=a("strong"),Dhr=o("speech_to_text"),Ghr=o(" \u2014 "),CH=a("a"),Ohr=o("Speech2TextForConditionalGeneration"),Vhr=o(" (Speech2Text model)"),Xhr=l(),LF=a("p"),zhr=o("The model is set in evaluation mode by default using "),fve=a("code"),Qhr=o("model.eval()"),Whr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),Hhr=o("model.train()"),Uhr=l(),F(yF.$$.fragment),zXe=l(),Dd=a("h2"),xF=a("a"),gve=a("span"),F(g9.$$.fragment),Jhr=l(),hve=a("span"),Yhr=o("AutoModelForAudioXVector"),QXe=l(),Ho=a("div"),F(h9.$$.fragment),Khr=l(),Gd=a("p"),Zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),AH=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),p9=a("p"),npr=o("This class cannot be instantiated directly using "),pve=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),At=a("div"),F(_9.$$.fragment),dpr=l(),_ve=a("p"),cpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fpr=l(),Od=a("p"),mpr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),ppr=o("from_pretrained()"),_pr=o(" to load the model weights."),upr=l(),F($F.$$.fragment),bpr=l(),po=a("div"),F(u9.$$.fragment),vpr=l(),bve=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tpr=l(),en=a("p"),Mpr=o("The model class to instantiate is selected based on the "),vve=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),Lpr=o("pretrained_model_name_or_path"),ypr=o(":"),xpr=l(),rt=a("ul"),kF=a("li"),Mve=a("strong"),$pr=o("data2vec-audio"),kpr=o(" \u2014 "),yH=a("a"),Spr=o("Data2VecAudioForXVector"),Rpr=o(" (Data2VecAudio model)"),Ppr=l(),SF=a("li"),Eve=a("strong"),Bpr=o("unispeech-sat"),Npr=o(" \u2014 "),xH=a("a"),Ipr=o("UniSpeechSatForXVector"),qpr=o(" (UniSpeechSat model)"),jpr=l(),RF=a("li"),Cve=a("strong"),Dpr=o("wav2vec2"),Gpr=o(" \u2014 "),$H=a("a"),Opr=o("Wav2Vec2ForXVector"),Vpr=o(" (Wav2Vec2 model)"),Xpr=l(),PF=a("li"),wve=a("strong"),zpr=o("wav2vec2-conformer"),Qpr=o(" \u2014 "),kH=a("a"),Wpr=o("Wav2Vec2ConformerForXVector"),Hpr=o(" (Wav2Vec2-Conformer model)"),Upr=l(),BF=a("li"),Ave=a("strong"),Jpr=o("wavlm"),Ypr=o(" \u2014 "),SH=a("a"),Kpr=o("WavLMForXVector"),Zpr=o(" (WavLM model)"),e_r=l(),NF=a("p"),o_r=o("The model is set in evaluation mode by default using "),Lve=a("code"),r_r=o("model.eval()"),t_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),a_r=o("model.train()"),n_r=l(),F(IF.$$.fragment),WXe=l(),Vd=a("h2"),qF=a("a"),xve=a("span"),F(b9.$$.fragment),s_r=l(),$ve=a("span"),l_r=o("AutoModelForMaskedImageModeling"),HXe=l(),Uo=a("div"),F(v9.$$.fragment),i_r=l(),Xd=a("p"),d_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=a("a"),c_r=o("from_pretrained()"),f_r=o(" class method or the "),PH=a("a"),m_r=o("from_config()"),g_r=o(` class
method.`),h_r=l(),F9=a("p"),p_r=o("This class cannot be instantiated directly using "),kve=a("code"),__r=o("__init__()"),u_r=o(" (throws an error)."),b_r=l(),Lt=a("div"),F(T9.$$.fragment),v_r=l(),Sve=a("p"),F_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),T_r=l(),zd=a("p"),M_r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),E_r=o("not"),C_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),w_r=o("from_pretrained()"),A_r=o(" to load the model weights."),L_r=l(),F(jF.$$.fragment),y_r=l(),_o=a("div"),F(M9.$$.fragment),x_r=l(),Pve=a("p"),$_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),k_r=l(),on=a("p"),S_r=o("The model class to instantiate is selected based on the "),Bve=a("code"),R_r=o("model_type"),P_r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),B_r=o("pretrained_model_name_or_path"),N_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),I_r=o("pretrained_model_name_or_path"),q_r=o(":"),j_r=l(),Qd=a("ul"),DF=a("li"),qve=a("strong"),D_r=o("deit"),G_r=o(" \u2014 "),NH=a("a"),O_r=o("DeiTForMaskedImageModeling"),V_r=o(" (DeiT model)"),X_r=l(),GF=a("li"),jve=a("strong"),z_r=o("swin"),Q_r=o(" \u2014 "),IH=a("a"),W_r=o("SwinForMaskedImageModeling"),H_r=o(" (Swin Transformer model)"),U_r=l(),OF=a("li"),Dve=a("strong"),J_r=o("vit"),Y_r=o(" \u2014 "),qH=a("a"),K_r=o("ViTForMaskedImageModeling"),Z_r=o(" (ViT model)"),eur=l(),VF=a("p"),our=o("The model is set in evaluation mode by default using "),Gve=a("code"),rur=o("model.eval()"),tur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),aur=o("model.train()"),nur=l(),F(XF.$$.fragment),UXe=l(),Wd=a("h2"),zF=a("a"),Vve=a("span"),F(E9.$$.fragment),sur=l(),Xve=a("span"),lur=o("AutoModelForObjectDetection"),JXe=l(),Jo=a("div"),F(C9.$$.fragment),iur=l(),Hd=a("p"),dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=a("a"),cur=o("from_pretrained()"),fur=o(" class method or the "),DH=a("a"),mur=o("from_config()"),gur=o(` class
method.`),hur=l(),w9=a("p"),pur=o("This class cannot be instantiated directly using "),zve=a("code"),_ur=o("__init__()"),uur=o(" (throws an error)."),bur=l(),yt=a("div"),F(A9.$$.fragment),vur=l(),Qve=a("p"),Fur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tur=l(),Ud=a("p"),Mur=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),Eur=o("not"),Cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),wur=o("from_pretrained()"),Aur=o(" to load the model weights."),Lur=l(),F(QF.$$.fragment),yur=l(),uo=a("div"),F(L9.$$.fragment),xur=l(),Hve=a("p"),$ur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kur=l(),rn=a("p"),Sur=o("The model class to instantiate is selected based on the "),Uve=a("code"),Rur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Bur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Iur=o("pretrained_model_name_or_path"),qur=o(":"),jur=l(),y9=a("ul"),WF=a("li"),Kve=a("strong"),Dur=o("detr"),Gur=o(" \u2014 "),OH=a("a"),Our=o("DetrForObjectDetection"),Vur=o(" (DETR model)"),Xur=l(),HF=a("li"),Zve=a("strong"),zur=o("yolos"),Qur=o(" \u2014 "),VH=a("a"),Wur=o("YolosForObjectDetection"),Hur=o(" (YOLOS model)"),Uur=l(),UF=a("p"),Jur=o("The model is set in evaluation mode by default using "),e3e=a("code"),Yur=o("model.eval()"),Kur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=a("code"),Zur=o("model.train()"),e1r=l(),F(JF.$$.fragment),YXe=l(),Jd=a("h2"),YF=a("a"),r3e=a("span"),F(x9.$$.fragment),o1r=l(),t3e=a("span"),r1r=o("AutoModelForImageSegmentation"),KXe=l(),Yo=a("div"),F($9.$$.fragment),t1r=l(),Yd=a("p"),a1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=a("a"),n1r=o("from_pretrained()"),s1r=o(" class method or the "),zH=a("a"),l1r=o("from_config()"),i1r=o(` class
method.`),d1r=l(),k9=a("p"),c1r=o("This class cannot be instantiated directly using "),a3e=a("code"),f1r=o("__init__()"),m1r=o(" (throws an error)."),g1r=l(),xt=a("div"),F(S9.$$.fragment),h1r=l(),n3e=a("p"),p1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_1r=l(),Kd=a("p"),u1r=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),b1r=o("not"),v1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),F1r=o("from_pretrained()"),T1r=o(" to load the model weights."),M1r=l(),F(KF.$$.fragment),E1r=l(),bo=a("div"),F(R9.$$.fragment),C1r=l(),l3e=a("p"),w1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),A1r=l(),tn=a("p"),L1r=o("The model class to instantiate is selected based on the "),i3e=a("code"),y1r=o("model_type"),x1r=o(` property of the config object (either
passed as an argument or loaded from `),d3e=a("code"),$1r=o("pretrained_model_name_or_path"),k1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(":"),P1r=l(),f3e=a("ul"),ZF=a("li"),m3e=a("strong"),B1r=o("detr"),N1r=o(" \u2014 "),WH=a("a"),I1r=o("DetrForSegmentation"),q1r=o(" (DETR model)"),j1r=l(),e6=a("p"),D1r=o("The model is set in evaluation mode by default using "),g3e=a("code"),G1r=o("model.eval()"),O1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=a("code"),V1r=o("model.train()"),X1r=l(),F(o6.$$.fragment),ZXe=l(),Zd=a("h2"),r6=a("a"),p3e=a("span"),F(P9.$$.fragment),z1r=l(),_3e=a("span"),Q1r=o("AutoModelForSemanticSegmentation"),eze=l(),Ko=a("div"),F(B9.$$.fragment),W1r=l(),ec=a("p"),H1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=a("a"),U1r=o("from_pretrained()"),J1r=o(" class method or the "),UH=a("a"),Y1r=o("from_config()"),K1r=o(` class
method.`),Z1r=l(),N9=a("p"),e4r=o("This class cannot be instantiated directly using "),u3e=a("code"),o4r=o("__init__()"),r4r=o(" (throws an error)."),t4r=l(),$t=a("div"),F(I9.$$.fragment),a4r=l(),b3e=a("p"),n4r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),s4r=l(),oc=a("p"),l4r=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),i4r=o("not"),d4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),c4r=o("from_pretrained()"),f4r=o(" to load the model weights."),m4r=l(),F(t6.$$.fragment),g4r=l(),vo=a("div"),F(q9.$$.fragment),h4r=l(),F3e=a("p"),p4r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_4r=l(),an=a("p"),u4r=o("The model class to instantiate is selected based on the "),T3e=a("code"),b4r=o("model_type"),v4r=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),C4r=l(),tt=a("ul"),a6=a("li"),C3e=a("strong"),w4r=o("beit"),A4r=o(" \u2014 "),YH=a("a"),L4r=o("BeitForSemanticSegmentation"),y4r=o(" (BEiT model)"),x4r=l(),n6=a("li"),w3e=a("strong"),$4r=o("data2vec-vision"),k4r=o(" \u2014 "),KH=a("a"),S4r=o("Data2VecVisionForSemanticSegmentation"),R4r=o(" (Data2VecVision model)"),P4r=l(),s6=a("li"),A3e=a("strong"),B4r=o("dpt"),N4r=o(" \u2014 "),ZH=a("a"),I4r=o("DPTForSemanticSegmentation"),q4r=o(" (DPT model)"),j4r=l(),l6=a("li"),L3e=a("strong"),D4r=o("mobilevit"),G4r=o(" \u2014 "),eU=a("a"),O4r=o("MobileViTForSemanticSegmentation"),V4r=o(" (MobileViT model)"),X4r=l(),i6=a("li"),y3e=a("strong"),z4r=o("segformer"),Q4r=o(" \u2014 "),oU=a("a"),W4r=o("SegformerForSemanticSegmentation"),H4r=o(" (SegFormer model)"),U4r=l(),d6=a("p"),J4r=o("The model is set in evaluation mode by default using "),x3e=a("code"),Y4r=o("model.eval()"),K4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=a("code"),Z4r=o("model.train()"),e2r=l(),F(c6.$$.fragment),oze=l(),rc=a("h2"),f6=a("a"),k3e=a("span"),F(j9.$$.fragment),o2r=l(),S3e=a("span"),r2r=o("AutoModelForInstanceSegmentation"),rze=l(),Zo=a("div"),F(D9.$$.fragment),t2r=l(),tc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=a("a"),n2r=o("from_pretrained()"),s2r=o(" class method or the "),tU=a("a"),l2r=o("from_config()"),i2r=o(` class
method.`),d2r=l(),G9=a("p"),c2r=o("This class cannot be instantiated directly using "),R3e=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),kt=a("div"),F(O9.$$.fragment),h2r=l(),P3e=a("p"),p2r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),_2r=l(),ac=a("p"),u2r=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),F2r=o("from_pretrained()"),T2r=o(" to load the model weights."),M2r=l(),F(m6.$$.fragment),E2r=l(),Fo=a("div"),F(V9.$$.fragment),C2r=l(),N3e=a("p"),w2r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),A2r=l(),nn=a("p"),L2r=o("The model class to instantiate is selected based on the "),I3e=a("code"),y2r=o("model_type"),x2r=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),$2r=o("pretrained_model_name_or_path"),k2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=a("code"),S2r=o("pretrained_model_name_or_path"),R2r=o(":"),P2r=l(),D3e=a("ul"),g6=a("li"),G3e=a("strong"),B2r=o("maskformer"),N2r=o(" \u2014 "),nU=a("a"),I2r=o("MaskFormerForInstanceSegmentation"),q2r=o(" (MaskFormer model)"),j2r=l(),h6=a("p"),D2r=o("The model is set in evaluation mode by default using "),O3e=a("code"),G2r=o("model.eval()"),O2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V3e=a("code"),V2r=o("model.train()"),X2r=l(),F(p6.$$.fragment),tze=l(),nc=a("h2"),_6=a("a"),X3e=a("span"),F(X9.$$.fragment),z2r=l(),z3e=a("span"),Q2r=o("TFAutoModel"),aze=l(),er=a("div"),F(z9.$$.fragment),W2r=l(),sc=a("p"),H2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=a("a"),U2r=o("from_pretrained()"),J2r=o(" class method or the "),lU=a("a"),Y2r=o("from_config()"),K2r=o(` class
method.`),Z2r=l(),Q9=a("p"),ebr=o("This class cannot be instantiated directly using "),Q3e=a("code"),obr=o("__init__()"),rbr=o(" (throws an error)."),tbr=l(),St=a("div"),F(W9.$$.fragment),abr=l(),W3e=a("p"),nbr=o("Instantiates one of the base model classes of the library from a configuration."),sbr=l(),lc=a("p"),lbr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),ibr=o("not"),dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),cbr=o("from_pretrained()"),fbr=o(" to load the model weights."),mbr=l(),F(u6.$$.fragment),gbr=l(),xr=a("div"),F(H9.$$.fragment),hbr=l(),U3e=a("p"),pbr=o("Instantiate one of the base model classes of the library from a pretrained model."),_br=l(),sn=a("p"),ubr=o("The model class to instantiate is selected based on the "),J3e=a("code"),bbr=o("model_type"),vbr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),Fbr=o("pretrained_model_name_or_path"),Tbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),Mbr=o("pretrained_model_name_or_path"),Ebr=o(":"),Cbr=l(),q=a("ul"),b6=a("li"),Z3e=a("strong"),wbr=o("albert"),Abr=o(" \u2014 "),dU=a("a"),Lbr=o("TFAlbertModel"),ybr=o(" (ALBERT model)"),xbr=l(),v6=a("li"),e5e=a("strong"),$br=o("bart"),kbr=o(" \u2014 "),cU=a("a"),Sbr=o("TFBartModel"),Rbr=o(" (BART model)"),Pbr=l(),F6=a("li"),o5e=a("strong"),Bbr=o("bert"),Nbr=o(" \u2014 "),fU=a("a"),Ibr=o("TFBertModel"),qbr=o(" (BERT model)"),jbr=l(),T6=a("li"),r5e=a("strong"),Dbr=o("blenderbot"),Gbr=o(" \u2014 "),mU=a("a"),Obr=o("TFBlenderbotModel"),Vbr=o(" (Blenderbot model)"),Xbr=l(),M6=a("li"),t5e=a("strong"),zbr=o("blenderbot-small"),Qbr=o(" \u2014 "),gU=a("a"),Wbr=o("TFBlenderbotSmallModel"),Hbr=o(" (BlenderbotSmall model)"),Ubr=l(),E6=a("li"),a5e=a("strong"),Jbr=o("camembert"),Ybr=o(" \u2014 "),hU=a("a"),Kbr=o("TFCamembertModel"),Zbr=o(" (CamemBERT model)"),evr=l(),C6=a("li"),n5e=a("strong"),ovr=o("clip"),rvr=o(" \u2014 "),pU=a("a"),tvr=o("TFCLIPModel"),avr=o(" (CLIP model)"),nvr=l(),w6=a("li"),s5e=a("strong"),svr=o("convbert"),lvr=o(" \u2014 "),_U=a("a"),ivr=o("TFConvBertModel"),dvr=o(" (ConvBERT model)"),cvr=l(),A6=a("li"),l5e=a("strong"),fvr=o("convnext"),mvr=o(" \u2014 "),uU=a("a"),gvr=o("TFConvNextModel"),hvr=o(" (ConvNeXT model)"),pvr=l(),L6=a("li"),i5e=a("strong"),_vr=o("ctrl"),uvr=o(" \u2014 "),bU=a("a"),bvr=o("TFCTRLModel"),vvr=o(" (CTRL model)"),Fvr=l(),y6=a("li"),d5e=a("strong"),Tvr=o("data2vec-vision"),Mvr=o(" \u2014 "),vU=a("a"),Evr=o("TFData2VecVisionModel"),Cvr=o(" (Data2VecVision model)"),wvr=l(),x6=a("li"),c5e=a("strong"),Avr=o("deberta"),Lvr=o(" \u2014 "),FU=a("a"),yvr=o("TFDebertaModel"),xvr=o(" (DeBERTa model)"),$vr=l(),$6=a("li"),f5e=a("strong"),kvr=o("deberta-v2"),Svr=o(" \u2014 "),TU=a("a"),Rvr=o("TFDebertaV2Model"),Pvr=o(" (DeBERTa-v2 model)"),Bvr=l(),k6=a("li"),m5e=a("strong"),Nvr=o("distilbert"),Ivr=o(" \u2014 "),MU=a("a"),qvr=o("TFDistilBertModel"),jvr=o(" (DistilBERT model)"),Dvr=l(),S6=a("li"),g5e=a("strong"),Gvr=o("dpr"),Ovr=o(" \u2014 "),EU=a("a"),Vvr=o("TFDPRQuestionEncoder"),Xvr=o(" (DPR model)"),zvr=l(),R6=a("li"),h5e=a("strong"),Qvr=o("electra"),Wvr=o(" \u2014 "),CU=a("a"),Hvr=o("TFElectraModel"),Uvr=o(" (ELECTRA model)"),Jvr=l(),P6=a("li"),p5e=a("strong"),Yvr=o("flaubert"),Kvr=o(" \u2014 "),wU=a("a"),Zvr=o("TFFlaubertModel"),e3r=o(" (FlauBERT model)"),o3r=l(),Js=a("li"),_5e=a("strong"),r3r=o("funnel"),t3r=o(" \u2014 "),AU=a("a"),a3r=o("TFFunnelModel"),n3r=o(" or "),LU=a("a"),s3r=o("TFFunnelBaseModel"),l3r=o(" (Funnel Transformer model)"),i3r=l(),B6=a("li"),u5e=a("strong"),d3r=o("gpt2"),c3r=o(" \u2014 "),yU=a("a"),f3r=o("TFGPT2Model"),m3r=o(" (OpenAI GPT-2 model)"),g3r=l(),N6=a("li"),b5e=a("strong"),h3r=o("gptj"),p3r=o(" \u2014 "),xU=a("a"),_3r=o("TFGPTJModel"),u3r=o(" (GPT-J model)"),b3r=l(),I6=a("li"),v5e=a("strong"),v3r=o("hubert"),F3r=o(" \u2014 "),$U=a("a"),T3r=o("TFHubertModel"),M3r=o(" (Hubert model)"),E3r=l(),q6=a("li"),F5e=a("strong"),C3r=o("layoutlm"),w3r=o(" \u2014 "),kU=a("a"),A3r=o("TFLayoutLMModel"),L3r=o(" (LayoutLM model)"),y3r=l(),j6=a("li"),T5e=a("strong"),x3r=o("led"),$3r=o(" \u2014 "),SU=a("a"),k3r=o("TFLEDModel"),S3r=o(" (LED model)"),R3r=l(),D6=a("li"),M5e=a("strong"),P3r=o("longformer"),B3r=o(" \u2014 "),RU=a("a"),N3r=o("TFLongformerModel"),I3r=o(" (Longformer model)"),q3r=l(),G6=a("li"),E5e=a("strong"),j3r=o("lxmert"),D3r=o(" \u2014 "),PU=a("a"),G3r=o("TFLxmertModel"),O3r=o(" (LXMERT model)"),V3r=l(),O6=a("li"),C5e=a("strong"),X3r=o("marian"),z3r=o(" \u2014 "),BU=a("a"),Q3r=o("TFMarianModel"),W3r=o(" (Marian model)"),H3r=l(),V6=a("li"),w5e=a("strong"),U3r=o("mbart"),J3r=o(" \u2014 "),NU=a("a"),Y3r=o("TFMBartModel"),K3r=o(" (mBART model)"),Z3r=l(),X6=a("li"),A5e=a("strong"),e5r=o("mobilebert"),o5r=o(" \u2014 "),IU=a("a"),r5r=o("TFMobileBertModel"),t5r=o(" (MobileBERT model)"),a5r=l(),z6=a("li"),L5e=a("strong"),n5r=o("mpnet"),s5r=o(" \u2014 "),qU=a("a"),l5r=o("TFMPNetModel"),i5r=o(" (MPNet model)"),d5r=l(),Q6=a("li"),y5e=a("strong"),c5r=o("mt5"),f5r=o(" \u2014 "),jU=a("a"),m5r=o("TFMT5Model"),g5r=o(" (MT5 model)"),h5r=l(),W6=a("li"),x5e=a("strong"),p5r=o("openai-gpt"),_5r=o(" \u2014 "),DU=a("a"),u5r=o("TFOpenAIGPTModel"),b5r=o(" (OpenAI GPT model)"),v5r=l(),H6=a("li"),$5e=a("strong"),F5r=o("opt"),T5r=o(" \u2014 "),GU=a("a"),M5r=o("TFOPTModel"),E5r=o(" (OPT model)"),C5r=l(),U6=a("li"),k5e=a("strong"),w5r=o("pegasus"),A5r=o(" \u2014 "),OU=a("a"),L5r=o("TFPegasusModel"),y5r=o(" (Pegasus model)"),x5r=l(),J6=a("li"),S5e=a("strong"),$5r=o("regnet"),k5r=o(" \u2014 "),VU=a("a"),S5r=o("TFRegNetModel"),R5r=o(" (RegNet model)"),P5r=l(),Y6=a("li"),R5e=a("strong"),B5r=o("rembert"),N5r=o(" \u2014 "),XU=a("a"),I5r=o("TFRemBertModel"),q5r=o(" (RemBERT model)"),j5r=l(),K6=a("li"),P5e=a("strong"),D5r=o("resnet"),G5r=o(" \u2014 "),zU=a("a"),O5r=o("TFResNetModel"),V5r=o(" (ResNet model)"),X5r=l(),Z6=a("li"),B5e=a("strong"),z5r=o("roberta"),Q5r=o(" \u2014 "),QU=a("a"),W5r=o("TFRobertaModel"),H5r=o(" (RoBERTa model)"),U5r=l(),eT=a("li"),N5e=a("strong"),J5r=o("roformer"),Y5r=o(" \u2014 "),WU=a("a"),K5r=o("TFRoFormerModel"),Z5r=o(" (RoFormer model)"),eFr=l(),oT=a("li"),I5e=a("strong"),oFr=o("speech_to_text"),rFr=o(" \u2014 "),HU=a("a"),tFr=o("TFSpeech2TextModel"),aFr=o(" (Speech2Text model)"),nFr=l(),rT=a("li"),q5e=a("strong"),sFr=o("swin"),lFr=o(" \u2014 "),UU=a("a"),iFr=o("TFSwinModel"),dFr=o(" (Swin Transformer model)"),cFr=l(),tT=a("li"),j5e=a("strong"),fFr=o("t5"),mFr=o(" \u2014 "),JU=a("a"),gFr=o("TFT5Model"),hFr=o(" (T5 model)"),pFr=l(),aT=a("li"),D5e=a("strong"),_Fr=o("tapas"),uFr=o(" \u2014 "),YU=a("a"),bFr=o("TFTapasModel"),vFr=o(" (TAPAS model)"),FFr=l(),nT=a("li"),G5e=a("strong"),TFr=o("transfo-xl"),MFr=o(" \u2014 "),KU=a("a"),EFr=o("TFTransfoXLModel"),CFr=o(" (Transformer-XL model)"),wFr=l(),sT=a("li"),O5e=a("strong"),AFr=o("vit"),LFr=o(" \u2014 "),ZU=a("a"),yFr=o("TFViTModel"),xFr=o(" (ViT model)"),$Fr=l(),lT=a("li"),V5e=a("strong"),kFr=o("vit_mae"),SFr=o(" \u2014 "),eJ=a("a"),RFr=o("TFViTMAEModel"),PFr=o(" (ViTMAE model)"),BFr=l(),iT=a("li"),X5e=a("strong"),NFr=o("wav2vec2"),IFr=o(" \u2014 "),oJ=a("a"),qFr=o("TFWav2Vec2Model"),jFr=o(" (Wav2Vec2 model)"),DFr=l(),dT=a("li"),z5e=a("strong"),GFr=o("xglm"),OFr=o(" \u2014 "),rJ=a("a"),VFr=o("TFXGLMModel"),XFr=o(" (XGLM model)"),zFr=l(),cT=a("li"),Q5e=a("strong"),QFr=o("xlm"),WFr=o(" \u2014 "),tJ=a("a"),HFr=o("TFXLMModel"),UFr=o(" (XLM model)"),JFr=l(),fT=a("li"),W5e=a("strong"),YFr=o("xlm-roberta"),KFr=o(" \u2014 "),aJ=a("a"),ZFr=o("TFXLMRobertaModel"),e6r=o(" (XLM-RoBERTa model)"),o6r=l(),mT=a("li"),H5e=a("strong"),r6r=o("xlnet"),t6r=o(" \u2014 "),nJ=a("a"),a6r=o("TFXLNetModel"),n6r=o(" (XLNet model)"),s6r=l(),F(gT.$$.fragment),nze=l(),ic=a("h2"),hT=a("a"),U5e=a("span"),F(U9.$$.fragment),l6r=l(),J5e=a("span"),i6r=o("TFAutoModelForPreTraining"),sze=l(),or=a("div"),F(J9.$$.fragment),d6r=l(),dc=a("p"),c6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sJ=a("a"),f6r=o("from_pretrained()"),m6r=o(" class method or the "),lJ=a("a"),g6r=o("from_config()"),h6r=o(` class
method.`),p6r=l(),Y9=a("p"),_6r=o("This class cannot be instantiated directly using "),Y5e=a("code"),u6r=o("__init__()"),b6r=o(" (throws an error)."),v6r=l(),Rt=a("div"),F(K9.$$.fragment),F6r=l(),K5e=a("p"),T6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M6r=l(),cc=a("p"),E6r=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),C6r=o("not"),w6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),A6r=o("from_pretrained()"),L6r=o(" to load the model weights."),y6r=l(),F(pT.$$.fragment),x6r=l(),$r=a("div"),F(Z9.$$.fragment),$6r=l(),eFe=a("p"),k6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S6r=l(),ln=a("p"),R6r=o("The model class to instantiate is selected based on the "),oFe=a("code"),P6r=o("model_type"),B6r=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),N6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),q6r=o("pretrained_model_name_or_path"),j6r=o(":"),D6r=l(),se=a("ul"),_T=a("li"),aFe=a("strong"),G6r=o("albert"),O6r=o(" \u2014 "),dJ=a("a"),V6r=o("TFAlbertForPreTraining"),X6r=o(" (ALBERT model)"),z6r=l(),uT=a("li"),nFe=a("strong"),Q6r=o("bart"),W6r=o(" \u2014 "),cJ=a("a"),H6r=o("TFBartForConditionalGeneration"),U6r=o(" (BART model)"),J6r=l(),bT=a("li"),sFe=a("strong"),Y6r=o("bert"),K6r=o(" \u2014 "),fJ=a("a"),Z6r=o("TFBertForPreTraining"),eTr=o(" (BERT model)"),oTr=l(),vT=a("li"),lFe=a("strong"),rTr=o("camembert"),tTr=o(" \u2014 "),mJ=a("a"),aTr=o("TFCamembertForMaskedLM"),nTr=o(" (CamemBERT model)"),sTr=l(),FT=a("li"),iFe=a("strong"),lTr=o("ctrl"),iTr=o(" \u2014 "),gJ=a("a"),dTr=o("TFCTRLLMHeadModel"),cTr=o(" (CTRL model)"),fTr=l(),TT=a("li"),dFe=a("strong"),mTr=o("distilbert"),gTr=o(" \u2014 "),hJ=a("a"),hTr=o("TFDistilBertForMaskedLM"),pTr=o(" (DistilBERT model)"),_Tr=l(),MT=a("li"),cFe=a("strong"),uTr=o("electra"),bTr=o(" \u2014 "),pJ=a("a"),vTr=o("TFElectraForPreTraining"),FTr=o(" (ELECTRA model)"),TTr=l(),ET=a("li"),fFe=a("strong"),MTr=o("flaubert"),ETr=o(" \u2014 "),_J=a("a"),CTr=o("TFFlaubertWithLMHeadModel"),wTr=o(" (FlauBERT model)"),ATr=l(),CT=a("li"),mFe=a("strong"),LTr=o("funnel"),yTr=o(" \u2014 "),uJ=a("a"),xTr=o("TFFunnelForPreTraining"),$Tr=o(" (Funnel Transformer model)"),kTr=l(),wT=a("li"),gFe=a("strong"),STr=o("gpt2"),RTr=o(" \u2014 "),bJ=a("a"),PTr=o("TFGPT2LMHeadModel"),BTr=o(" (OpenAI GPT-2 model)"),NTr=l(),AT=a("li"),hFe=a("strong"),ITr=o("layoutlm"),qTr=o(" \u2014 "),vJ=a("a"),jTr=o("TFLayoutLMForMaskedLM"),DTr=o(" (LayoutLM model)"),GTr=l(),LT=a("li"),pFe=a("strong"),OTr=o("lxmert"),VTr=o(" \u2014 "),FJ=a("a"),XTr=o("TFLxmertForPreTraining"),zTr=o(" (LXMERT model)"),QTr=l(),yT=a("li"),_Fe=a("strong"),WTr=o("mobilebert"),HTr=o(" \u2014 "),TJ=a("a"),UTr=o("TFMobileBertForPreTraining"),JTr=o(" (MobileBERT model)"),YTr=l(),xT=a("li"),uFe=a("strong"),KTr=o("mpnet"),ZTr=o(" \u2014 "),MJ=a("a"),eMr=o("TFMPNetForMaskedLM"),oMr=o(" (MPNet model)"),rMr=l(),$T=a("li"),bFe=a("strong"),tMr=o("openai-gpt"),aMr=o(" \u2014 "),EJ=a("a"),nMr=o("TFOpenAIGPTLMHeadModel"),sMr=o(" (OpenAI GPT model)"),lMr=l(),kT=a("li"),vFe=a("strong"),iMr=o("roberta"),dMr=o(" \u2014 "),CJ=a("a"),cMr=o("TFRobertaForMaskedLM"),fMr=o(" (RoBERTa model)"),mMr=l(),ST=a("li"),FFe=a("strong"),gMr=o("t5"),hMr=o(" \u2014 "),wJ=a("a"),pMr=o("TFT5ForConditionalGeneration"),_Mr=o(" (T5 model)"),uMr=l(),RT=a("li"),TFe=a("strong"),bMr=o("tapas"),vMr=o(" \u2014 "),AJ=a("a"),FMr=o("TFTapasForMaskedLM"),TMr=o(" (TAPAS model)"),MMr=l(),PT=a("li"),MFe=a("strong"),EMr=o("transfo-xl"),CMr=o(" \u2014 "),LJ=a("a"),wMr=o("TFTransfoXLLMHeadModel"),AMr=o(" (Transformer-XL model)"),LMr=l(),BT=a("li"),EFe=a("strong"),yMr=o("vit_mae"),xMr=o(" \u2014 "),yJ=a("a"),$Mr=o("TFViTMAEForPreTraining"),kMr=o(" (ViTMAE model)"),SMr=l(),NT=a("li"),CFe=a("strong"),RMr=o("xlm"),PMr=o(" \u2014 "),xJ=a("a"),BMr=o("TFXLMWithLMHeadModel"),NMr=o(" (XLM model)"),IMr=l(),IT=a("li"),wFe=a("strong"),qMr=o("xlm-roberta"),jMr=o(" \u2014 "),$J=a("a"),DMr=o("TFXLMRobertaForMaskedLM"),GMr=o(" (XLM-RoBERTa model)"),OMr=l(),qT=a("li"),AFe=a("strong"),VMr=o("xlnet"),XMr=o(" \u2014 "),kJ=a("a"),zMr=o("TFXLNetLMHeadModel"),QMr=o(" (XLNet model)"),WMr=l(),F(jT.$$.fragment),lze=l(),fc=a("h2"),DT=a("a"),LFe=a("span"),F(ex.$$.fragment),HMr=l(),yFe=a("span"),UMr=o("TFAutoModelForCausalLM"),ize=l(),rr=a("div"),F(ox.$$.fragment),JMr=l(),mc=a("p"),YMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SJ=a("a"),KMr=o("from_pretrained()"),ZMr=o(" class method or the "),RJ=a("a"),eEr=o("from_config()"),oEr=o(` class
method.`),rEr=l(),rx=a("p"),tEr=o("This class cannot be instantiated directly using "),xFe=a("code"),aEr=o("__init__()"),nEr=o(" (throws an error)."),sEr=l(),Pt=a("div"),F(tx.$$.fragment),lEr=l(),$Fe=a("p"),iEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dEr=l(),gc=a("p"),cEr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),fEr=o("not"),mEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),gEr=o("from_pretrained()"),hEr=o(" to load the model weights."),pEr=l(),F(GT.$$.fragment),_Er=l(),kr=a("div"),F(ax.$$.fragment),uEr=l(),SFe=a("p"),bEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vEr=l(),dn=a("p"),FEr=o("The model class to instantiate is selected based on the "),RFe=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),LEr=l(),Me=a("ul"),OT=a("li"),NFe=a("strong"),yEr=o("bert"),xEr=o(" \u2014 "),BJ=a("a"),$Er=o("TFBertLMHeadModel"),kEr=o(" (BERT model)"),SEr=l(),VT=a("li"),IFe=a("strong"),REr=o("camembert"),PEr=o(" \u2014 "),NJ=a("a"),BEr=o("TFCamembertForCausalLM"),NEr=o(" (CamemBERT model)"),IEr=l(),XT=a("li"),qFe=a("strong"),qEr=o("ctrl"),jEr=o(" \u2014 "),IJ=a("a"),DEr=o("TFCTRLLMHeadModel"),GEr=o(" (CTRL model)"),OEr=l(),zT=a("li"),jFe=a("strong"),VEr=o("gpt2"),XEr=o(" \u2014 "),qJ=a("a"),zEr=o("TFGPT2LMHeadModel"),QEr=o(" (OpenAI GPT-2 model)"),WEr=l(),QT=a("li"),DFe=a("strong"),HEr=o("gptj"),UEr=o(" \u2014 "),jJ=a("a"),JEr=o("TFGPTJForCausalLM"),YEr=o(" (GPT-J model)"),KEr=l(),WT=a("li"),GFe=a("strong"),ZEr=o("openai-gpt"),eCr=o(" \u2014 "),DJ=a("a"),oCr=o("TFOpenAIGPTLMHeadModel"),rCr=o(" (OpenAI GPT model)"),tCr=l(),HT=a("li"),OFe=a("strong"),aCr=o("opt"),nCr=o(" \u2014 "),GJ=a("a"),sCr=o("TFOPTForCausalLM"),lCr=o(" (OPT model)"),iCr=l(),UT=a("li"),VFe=a("strong"),dCr=o("rembert"),cCr=o(" \u2014 "),OJ=a("a"),fCr=o("TFRemBertForCausalLM"),mCr=o(" (RemBERT model)"),gCr=l(),JT=a("li"),XFe=a("strong"),hCr=o("roberta"),pCr=o(" \u2014 "),VJ=a("a"),_Cr=o("TFRobertaForCausalLM"),uCr=o(" (RoBERTa model)"),bCr=l(),YT=a("li"),zFe=a("strong"),vCr=o("roformer"),FCr=o(" \u2014 "),XJ=a("a"),TCr=o("TFRoFormerForCausalLM"),MCr=o(" (RoFormer model)"),ECr=l(),KT=a("li"),QFe=a("strong"),CCr=o("transfo-xl"),wCr=o(" \u2014 "),zJ=a("a"),ACr=o("TFTransfoXLLMHeadModel"),LCr=o(" (Transformer-XL model)"),yCr=l(),ZT=a("li"),WFe=a("strong"),xCr=o("xglm"),$Cr=o(" \u2014 "),QJ=a("a"),kCr=o("TFXGLMForCausalLM"),SCr=o(" (XGLM model)"),RCr=l(),eM=a("li"),HFe=a("strong"),PCr=o("xlm"),BCr=o(" \u2014 "),WJ=a("a"),NCr=o("TFXLMWithLMHeadModel"),ICr=o(" (XLM model)"),qCr=l(),oM=a("li"),UFe=a("strong"),jCr=o("xlnet"),DCr=o(" \u2014 "),HJ=a("a"),GCr=o("TFXLNetLMHeadModel"),OCr=o(" (XLNet model)"),VCr=l(),F(rM.$$.fragment),dze=l(),hc=a("h2"),tM=a("a"),JFe=a("span"),F(nx.$$.fragment),XCr=l(),YFe=a("span"),zCr=o("TFAutoModelForImageClassification"),cze=l(),tr=a("div"),F(sx.$$.fragment),QCr=l(),pc=a("p"),WCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=a("a"),HCr=o("from_pretrained()"),UCr=o(" class method or the "),JJ=a("a"),JCr=o("from_config()"),YCr=o(` class
method.`),KCr=l(),lx=a("p"),ZCr=o("This class cannot be instantiated directly using "),KFe=a("code"),e0r=o("__init__()"),o0r=o(" (throws an error)."),r0r=l(),Bt=a("div"),F(ix.$$.fragment),t0r=l(),ZFe=a("p"),a0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),n0r=l(),_c=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),l0r=o("not"),i0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),d0r=o("from_pretrained()"),c0r=o(" to load the model weights."),f0r=l(),F(aM.$$.fragment),m0r=l(),Sr=a("div"),F(dx.$$.fragment),g0r=l(),o6e=a("p"),h0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p0r=l(),cn=a("p"),_0r=o("The model class to instantiate is selected based on the "),r6e=a("code"),u0r=o("model_type"),b0r=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),v0r=o("pretrained_model_name_or_path"),F0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),T0r=o("pretrained_model_name_or_path"),M0r=o(":"),E0r=l(),ar=a("ul"),nM=a("li"),n6e=a("strong"),C0r=o("convnext"),w0r=o(" \u2014 "),KJ=a("a"),A0r=o("TFConvNextForImageClassification"),L0r=o(" (ConvNeXT model)"),y0r=l(),sM=a("li"),s6e=a("strong"),x0r=o("data2vec-vision"),$0r=o(" \u2014 "),ZJ=a("a"),k0r=o("TFData2VecVisionForImageClassification"),S0r=o(" (Data2VecVision model)"),R0r=l(),lM=a("li"),l6e=a("strong"),P0r=o("regnet"),B0r=o(" \u2014 "),eY=a("a"),N0r=o("TFRegNetForImageClassification"),I0r=o(" (RegNet model)"),q0r=l(),iM=a("li"),i6e=a("strong"),j0r=o("resnet"),D0r=o(" \u2014 "),oY=a("a"),G0r=o("TFResNetForImageClassification"),O0r=o(" (ResNet model)"),V0r=l(),dM=a("li"),d6e=a("strong"),X0r=o("swin"),z0r=o(" \u2014 "),rY=a("a"),Q0r=o("TFSwinForImageClassification"),W0r=o(" (Swin Transformer model)"),H0r=l(),cM=a("li"),c6e=a("strong"),U0r=o("vit"),J0r=o(" \u2014 "),tY=a("a"),Y0r=o("TFViTForImageClassification"),K0r=o(" (ViT model)"),Z0r=l(),F(fM.$$.fragment),fze=l(),uc=a("h2"),mM=a("a"),f6e=a("span"),F(cx.$$.fragment),ewr=l(),m6e=a("span"),owr=o("TFAutoModelForMaskedLM"),mze=l(),nr=a("div"),F(fx.$$.fragment),rwr=l(),bc=a("p"),twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=a("a"),awr=o("from_pretrained()"),nwr=o(" class method or the "),nY=a("a"),swr=o("from_config()"),lwr=o(` class
method.`),iwr=l(),mx=a("p"),dwr=o("This class cannot be instantiated directly using "),g6e=a("code"),cwr=o("__init__()"),fwr=o(" (throws an error)."),mwr=l(),Nt=a("div"),F(gx.$$.fragment),gwr=l(),h6e=a("p"),hwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pwr=l(),vc=a("p"),_wr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),uwr=o("not"),bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),vwr=o("from_pretrained()"),Fwr=o(" to load the model weights."),Twr=l(),F(gM.$$.fragment),Mwr=l(),Rr=a("div"),F(hx.$$.fragment),Ewr=l(),_6e=a("p"),Cwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wwr=l(),fn=a("p"),Awr=o("The model class to instantiate is selected based on the "),u6e=a("code"),Lwr=o("model_type"),ywr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),xwr=o("pretrained_model_name_or_path"),$wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),kwr=o("pretrained_model_name_or_path"),Swr=o(":"),Rwr=l(),ie=a("ul"),hM=a("li"),F6e=a("strong"),Pwr=o("albert"),Bwr=o(" \u2014 "),lY=a("a"),Nwr=o("TFAlbertForMaskedLM"),Iwr=o(" (ALBERT model)"),qwr=l(),pM=a("li"),T6e=a("strong"),jwr=o("bert"),Dwr=o(" \u2014 "),iY=a("a"),Gwr=o("TFBertForMaskedLM"),Owr=o(" (BERT model)"),Vwr=l(),_M=a("li"),M6e=a("strong"),Xwr=o("camembert"),zwr=o(" \u2014 "),dY=a("a"),Qwr=o("TFCamembertForMaskedLM"),Wwr=o(" (CamemBERT model)"),Hwr=l(),uM=a("li"),E6e=a("strong"),Uwr=o("convbert"),Jwr=o(" \u2014 "),cY=a("a"),Ywr=o("TFConvBertForMaskedLM"),Kwr=o(" (ConvBERT model)"),Zwr=l(),bM=a("li"),C6e=a("strong"),eAr=o("deberta"),oAr=o(" \u2014 "),fY=a("a"),rAr=o("TFDebertaForMaskedLM"),tAr=o(" (DeBERTa model)"),aAr=l(),vM=a("li"),w6e=a("strong"),nAr=o("deberta-v2"),sAr=o(" \u2014 "),mY=a("a"),lAr=o("TFDebertaV2ForMaskedLM"),iAr=o(" (DeBERTa-v2 model)"),dAr=l(),FM=a("li"),A6e=a("strong"),cAr=o("distilbert"),fAr=o(" \u2014 "),gY=a("a"),mAr=o("TFDistilBertForMaskedLM"),gAr=o(" (DistilBERT model)"),hAr=l(),TM=a("li"),L6e=a("strong"),pAr=o("electra"),_Ar=o(" \u2014 "),hY=a("a"),uAr=o("TFElectraForMaskedLM"),bAr=o(" (ELECTRA model)"),vAr=l(),MM=a("li"),y6e=a("strong"),FAr=o("flaubert"),TAr=o(" \u2014 "),pY=a("a"),MAr=o("TFFlaubertWithLMHeadModel"),EAr=o(" (FlauBERT model)"),CAr=l(),EM=a("li"),x6e=a("strong"),wAr=o("funnel"),AAr=o(" \u2014 "),_Y=a("a"),LAr=o("TFFunnelForMaskedLM"),yAr=o(" (Funnel Transformer model)"),xAr=l(),CM=a("li"),$6e=a("strong"),$Ar=o("layoutlm"),kAr=o(" \u2014 "),uY=a("a"),SAr=o("TFLayoutLMForMaskedLM"),RAr=o(" (LayoutLM model)"),PAr=l(),wM=a("li"),k6e=a("strong"),BAr=o("longformer"),NAr=o(" \u2014 "),bY=a("a"),IAr=o("TFLongformerForMaskedLM"),qAr=o(" (Longformer model)"),jAr=l(),AM=a("li"),S6e=a("strong"),DAr=o("mobilebert"),GAr=o(" \u2014 "),vY=a("a"),OAr=o("TFMobileBertForMaskedLM"),VAr=o(" (MobileBERT model)"),XAr=l(),LM=a("li"),R6e=a("strong"),zAr=o("mpnet"),QAr=o(" \u2014 "),FY=a("a"),WAr=o("TFMPNetForMaskedLM"),HAr=o(" (MPNet model)"),UAr=l(),yM=a("li"),P6e=a("strong"),JAr=o("rembert"),YAr=o(" \u2014 "),TY=a("a"),KAr=o("TFRemBertForMaskedLM"),ZAr=o(" (RemBERT model)"),e7r=l(),xM=a("li"),B6e=a("strong"),o7r=o("roberta"),r7r=o(" \u2014 "),MY=a("a"),t7r=o("TFRobertaForMaskedLM"),a7r=o(" (RoBERTa model)"),n7r=l(),$M=a("li"),N6e=a("strong"),s7r=o("roformer"),l7r=o(" \u2014 "),EY=a("a"),i7r=o("TFRoFormerForMaskedLM"),d7r=o(" (RoFormer model)"),c7r=l(),kM=a("li"),I6e=a("strong"),f7r=o("tapas"),m7r=o(" \u2014 "),CY=a("a"),g7r=o("TFTapasForMaskedLM"),h7r=o(" (TAPAS model)"),p7r=l(),SM=a("li"),q6e=a("strong"),_7r=o("xlm"),u7r=o(" \u2014 "),wY=a("a"),b7r=o("TFXLMWithLMHeadModel"),v7r=o(" (XLM model)"),F7r=l(),RM=a("li"),j6e=a("strong"),T7r=o("xlm-roberta"),M7r=o(" \u2014 "),AY=a("a"),E7r=o("TFXLMRobertaForMaskedLM"),C7r=o(" (XLM-RoBERTa model)"),w7r=l(),F(PM.$$.fragment),gze=l(),Fc=a("h2"),BM=a("a"),D6e=a("span"),F(px.$$.fragment),A7r=l(),G6e=a("span"),L7r=o("TFAutoModelForSeq2SeqLM"),hze=l(),sr=a("div"),F(_x.$$.fragment),y7r=l(),Tc=a("p"),x7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=a("a"),$7r=o("from_pretrained()"),k7r=o(" class method or the "),yY=a("a"),S7r=o("from_config()"),R7r=o(` class
method.`),P7r=l(),ux=a("p"),B7r=o("This class cannot be instantiated directly using "),O6e=a("code"),N7r=o("__init__()"),I7r=o(" (throws an error)."),q7r=l(),It=a("div"),F(bx.$$.fragment),j7r=l(),V6e=a("p"),D7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G7r=l(),Mc=a("p"),O7r=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),V7r=o("not"),X7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),z7r=o("from_pretrained()"),Q7r=o(" to load the model weights."),W7r=l(),F(NM.$$.fragment),H7r=l(),Pr=a("div"),F(vx.$$.fragment),U7r=l(),z6e=a("p"),J7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y7r=l(),mn=a("p"),K7r=o("The model class to instantiate is selected based on the "),Q6e=a("code"),Z7r=o("model_type"),eLr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),oLr=o("pretrained_model_name_or_path"),rLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(":"),nLr=l(),ye=a("ul"),IM=a("li"),U6e=a("strong"),sLr=o("bart"),lLr=o(" \u2014 "),$Y=a("a"),iLr=o("TFBartForConditionalGeneration"),dLr=o(" (BART model)"),cLr=l(),qM=a("li"),J6e=a("strong"),fLr=o("blenderbot"),mLr=o(" \u2014 "),kY=a("a"),gLr=o("TFBlenderbotForConditionalGeneration"),hLr=o(" (Blenderbot model)"),pLr=l(),jM=a("li"),Y6e=a("strong"),_Lr=o("blenderbot-small"),uLr=o(" \u2014 "),SY=a("a"),bLr=o("TFBlenderbotSmallForConditionalGeneration"),vLr=o(" (BlenderbotSmall model)"),FLr=l(),DM=a("li"),K6e=a("strong"),TLr=o("encoder-decoder"),MLr=o(" \u2014 "),RY=a("a"),ELr=o("TFEncoderDecoderModel"),CLr=o(" (Encoder decoder model)"),wLr=l(),GM=a("li"),Z6e=a("strong"),ALr=o("led"),LLr=o(" \u2014 "),PY=a("a"),yLr=o("TFLEDForConditionalGeneration"),xLr=o(" (LED model)"),$Lr=l(),OM=a("li"),eTe=a("strong"),kLr=o("marian"),SLr=o(" \u2014 "),BY=a("a"),RLr=o("TFMarianMTModel"),PLr=o(" (Marian model)"),BLr=l(),VM=a("li"),oTe=a("strong"),NLr=o("mbart"),ILr=o(" \u2014 "),NY=a("a"),qLr=o("TFMBartForConditionalGeneration"),jLr=o(" (mBART model)"),DLr=l(),XM=a("li"),rTe=a("strong"),GLr=o("mt5"),OLr=o(" \u2014 "),IY=a("a"),VLr=o("TFMT5ForConditionalGeneration"),XLr=o(" (MT5 model)"),zLr=l(),zM=a("li"),tTe=a("strong"),QLr=o("pegasus"),WLr=o(" \u2014 "),qY=a("a"),HLr=o("TFPegasusForConditionalGeneration"),ULr=o(" (Pegasus model)"),JLr=l(),QM=a("li"),aTe=a("strong"),YLr=o("t5"),KLr=o(" \u2014 "),jY=a("a"),ZLr=o("TFT5ForConditionalGeneration"),eyr=o(" (T5 model)"),oyr=l(),F(WM.$$.fragment),pze=l(),Ec=a("h2"),HM=a("a"),nTe=a("span"),F(Fx.$$.fragment),ryr=l(),sTe=a("span"),tyr=o("TFAutoModelForSequenceClassification"),_ze=l(),lr=a("div"),F(Tx.$$.fragment),ayr=l(),Cc=a("p"),nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=a("a"),syr=o("from_pretrained()"),lyr=o(" class method or the "),GY=a("a"),iyr=o("from_config()"),dyr=o(` class
method.`),cyr=l(),Mx=a("p"),fyr=o("This class cannot be instantiated directly using "),lTe=a("code"),myr=o("__init__()"),gyr=o(" (throws an error)."),hyr=l(),qt=a("div"),F(Ex.$$.fragment),pyr=l(),iTe=a("p"),_yr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uyr=l(),wc=a("p"),byr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),vyr=o("not"),Fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),Tyr=o("from_pretrained()"),Myr=o(" to load the model weights."),Eyr=l(),F(UM.$$.fragment),Cyr=l(),Br=a("div"),F(Cx.$$.fragment),wyr=l(),cTe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lyr=l(),gn=a("p"),yyr=o("The model class to instantiate is selected based on the "),fTe=a("code"),xyr=o("model_type"),$yr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),Ryr=o("pretrained_model_name_or_path"),Pyr=o(":"),Byr=l(),te=a("ul"),JM=a("li"),hTe=a("strong"),Nyr=o("albert"),Iyr=o(" \u2014 "),VY=a("a"),qyr=o("TFAlbertForSequenceClassification"),jyr=o(" (ALBERT model)"),Dyr=l(),YM=a("li"),pTe=a("strong"),Gyr=o("bert"),Oyr=o(" \u2014 "),XY=a("a"),Vyr=o("TFBertForSequenceClassification"),Xyr=o(" (BERT model)"),zyr=l(),KM=a("li"),_Te=a("strong"),Qyr=o("camembert"),Wyr=o(" \u2014 "),zY=a("a"),Hyr=o("TFCamembertForSequenceClassification"),Uyr=o(" (CamemBERT model)"),Jyr=l(),ZM=a("li"),uTe=a("strong"),Yyr=o("convbert"),Kyr=o(" \u2014 "),QY=a("a"),Zyr=o("TFConvBertForSequenceClassification"),e8r=o(" (ConvBERT model)"),o8r=l(),eE=a("li"),bTe=a("strong"),r8r=o("ctrl"),t8r=o(" \u2014 "),WY=a("a"),a8r=o("TFCTRLForSequenceClassification"),n8r=o(" (CTRL model)"),s8r=l(),oE=a("li"),vTe=a("strong"),l8r=o("deberta"),i8r=o(" \u2014 "),HY=a("a"),d8r=o("TFDebertaForSequenceClassification"),c8r=o(" (DeBERTa model)"),f8r=l(),rE=a("li"),FTe=a("strong"),m8r=o("deberta-v2"),g8r=o(" \u2014 "),UY=a("a"),h8r=o("TFDebertaV2ForSequenceClassification"),p8r=o(" (DeBERTa-v2 model)"),_8r=l(),tE=a("li"),TTe=a("strong"),u8r=o("distilbert"),b8r=o(" \u2014 "),JY=a("a"),v8r=o("TFDistilBertForSequenceClassification"),F8r=o(" (DistilBERT model)"),T8r=l(),aE=a("li"),MTe=a("strong"),M8r=o("electra"),E8r=o(" \u2014 "),YY=a("a"),C8r=o("TFElectraForSequenceClassification"),w8r=o(" (ELECTRA model)"),A8r=l(),nE=a("li"),ETe=a("strong"),L8r=o("flaubert"),y8r=o(" \u2014 "),KY=a("a"),x8r=o("TFFlaubertForSequenceClassification"),$8r=o(" (FlauBERT model)"),k8r=l(),sE=a("li"),CTe=a("strong"),S8r=o("funnel"),R8r=o(" \u2014 "),ZY=a("a"),P8r=o("TFFunnelForSequenceClassification"),B8r=o(" (Funnel Transformer model)"),N8r=l(),lE=a("li"),wTe=a("strong"),I8r=o("gpt2"),q8r=o(" \u2014 "),eK=a("a"),j8r=o("TFGPT2ForSequenceClassification"),D8r=o(" (OpenAI GPT-2 model)"),G8r=l(),iE=a("li"),ATe=a("strong"),O8r=o("gptj"),V8r=o(" \u2014 "),oK=a("a"),X8r=o("TFGPTJForSequenceClassification"),z8r=o(" (GPT-J model)"),Q8r=l(),dE=a("li"),LTe=a("strong"),W8r=o("layoutlm"),H8r=o(" \u2014 "),rK=a("a"),U8r=o("TFLayoutLMForSequenceClassification"),J8r=o(" (LayoutLM model)"),Y8r=l(),cE=a("li"),yTe=a("strong"),K8r=o("longformer"),Z8r=o(" \u2014 "),tK=a("a"),e9r=o("TFLongformerForSequenceClassification"),o9r=o(" (Longformer model)"),r9r=l(),fE=a("li"),xTe=a("strong"),t9r=o("mobilebert"),a9r=o(" \u2014 "),aK=a("a"),n9r=o("TFMobileBertForSequenceClassification"),s9r=o(" (MobileBERT model)"),l9r=l(),mE=a("li"),$Te=a("strong"),i9r=o("mpnet"),d9r=o(" \u2014 "),nK=a("a"),c9r=o("TFMPNetForSequenceClassification"),f9r=o(" (MPNet model)"),m9r=l(),gE=a("li"),kTe=a("strong"),g9r=o("openai-gpt"),h9r=o(" \u2014 "),sK=a("a"),p9r=o("TFOpenAIGPTForSequenceClassification"),_9r=o(" (OpenAI GPT model)"),u9r=l(),hE=a("li"),STe=a("strong"),b9r=o("rembert"),v9r=o(" \u2014 "),lK=a("a"),F9r=o("TFRemBertForSequenceClassification"),T9r=o(" (RemBERT model)"),M9r=l(),pE=a("li"),RTe=a("strong"),E9r=o("roberta"),C9r=o(" \u2014 "),iK=a("a"),w9r=o("TFRobertaForSequenceClassification"),A9r=o(" (RoBERTa model)"),L9r=l(),_E=a("li"),PTe=a("strong"),y9r=o("roformer"),x9r=o(" \u2014 "),dK=a("a"),$9r=o("TFRoFormerForSequenceClassification"),k9r=o(" (RoFormer model)"),S9r=l(),uE=a("li"),BTe=a("strong"),R9r=o("tapas"),P9r=o(" \u2014 "),cK=a("a"),B9r=o("TFTapasForSequenceClassification"),N9r=o(" (TAPAS model)"),I9r=l(),bE=a("li"),NTe=a("strong"),q9r=o("transfo-xl"),j9r=o(" \u2014 "),fK=a("a"),D9r=o("TFTransfoXLForSequenceClassification"),G9r=o(" (Transformer-XL model)"),O9r=l(),vE=a("li"),ITe=a("strong"),V9r=o("xlm"),X9r=o(" \u2014 "),mK=a("a"),z9r=o("TFXLMForSequenceClassification"),Q9r=o(" (XLM model)"),W9r=l(),FE=a("li"),qTe=a("strong"),H9r=o("xlm-roberta"),U9r=o(" \u2014 "),gK=a("a"),J9r=o("TFXLMRobertaForSequenceClassification"),Y9r=o(" (XLM-RoBERTa model)"),K9r=l(),TE=a("li"),jTe=a("strong"),Z9r=o("xlnet"),exr=o(" \u2014 "),hK=a("a"),oxr=o("TFXLNetForSequenceClassification"),rxr=o(" (XLNet model)"),txr=l(),F(ME.$$.fragment),uze=l(),Ac=a("h2"),EE=a("a"),DTe=a("span"),F(wx.$$.fragment),axr=l(),GTe=a("span"),nxr=o("TFAutoModelForMultipleChoice"),bze=l(),ir=a("div"),F(Ax.$$.fragment),sxr=l(),Lc=a("p"),lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=a("a"),ixr=o("from_pretrained()"),dxr=o(" class method or the "),_K=a("a"),cxr=o("from_config()"),fxr=o(` class
method.`),mxr=l(),Lx=a("p"),gxr=o("This class cannot be instantiated directly using "),OTe=a("code"),hxr=o("__init__()"),pxr=o(" (throws an error)."),_xr=l(),jt=a("div"),F(yx.$$.fragment),uxr=l(),VTe=a("p"),bxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vxr=l(),yc=a("p"),Fxr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),Txr=o("not"),Mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Exr=o("from_pretrained()"),Cxr=o(" to load the model weights."),wxr=l(),F(CE.$$.fragment),Axr=l(),Nr=a("div"),F(xx.$$.fragment),Lxr=l(),zTe=a("p"),yxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xxr=l(),hn=a("p"),$xr=o("The model class to instantiate is selected based on the "),QTe=a("code"),kxr=o("model_type"),Sxr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),Bxr=o("pretrained_model_name_or_path"),Nxr=o(":"),Ixr=l(),_e=a("ul"),wE=a("li"),UTe=a("strong"),qxr=o("albert"),jxr=o(" \u2014 "),bK=a("a"),Dxr=o("TFAlbertForMultipleChoice"),Gxr=o(" (ALBERT model)"),Oxr=l(),AE=a("li"),JTe=a("strong"),Vxr=o("bert"),Xxr=o(" \u2014 "),vK=a("a"),zxr=o("TFBertForMultipleChoice"),Qxr=o(" (BERT model)"),Wxr=l(),LE=a("li"),YTe=a("strong"),Hxr=o("camembert"),Uxr=o(" \u2014 "),FK=a("a"),Jxr=o("TFCamembertForMultipleChoice"),Yxr=o(" (CamemBERT model)"),Kxr=l(),yE=a("li"),KTe=a("strong"),Zxr=o("convbert"),e$r=o(" \u2014 "),TK=a("a"),o$r=o("TFConvBertForMultipleChoice"),r$r=o(" (ConvBERT model)"),t$r=l(),xE=a("li"),ZTe=a("strong"),a$r=o("distilbert"),n$r=o(" \u2014 "),MK=a("a"),s$r=o("TFDistilBertForMultipleChoice"),l$r=o(" (DistilBERT model)"),i$r=l(),$E=a("li"),eMe=a("strong"),d$r=o("electra"),c$r=o(" \u2014 "),EK=a("a"),f$r=o("TFElectraForMultipleChoice"),m$r=o(" (ELECTRA model)"),g$r=l(),kE=a("li"),oMe=a("strong"),h$r=o("flaubert"),p$r=o(" \u2014 "),CK=a("a"),_$r=o("TFFlaubertForMultipleChoice"),u$r=o(" (FlauBERT model)"),b$r=l(),SE=a("li"),rMe=a("strong"),v$r=o("funnel"),F$r=o(" \u2014 "),wK=a("a"),T$r=o("TFFunnelForMultipleChoice"),M$r=o(" (Funnel Transformer model)"),E$r=l(),RE=a("li"),tMe=a("strong"),C$r=o("longformer"),w$r=o(" \u2014 "),AK=a("a"),A$r=o("TFLongformerForMultipleChoice"),L$r=o(" (Longformer model)"),y$r=l(),PE=a("li"),aMe=a("strong"),x$r=o("mobilebert"),$$r=o(" \u2014 "),LK=a("a"),k$r=o("TFMobileBertForMultipleChoice"),S$r=o(" (MobileBERT model)"),R$r=l(),BE=a("li"),nMe=a("strong"),P$r=o("mpnet"),B$r=o(" \u2014 "),yK=a("a"),N$r=o("TFMPNetForMultipleChoice"),I$r=o(" (MPNet model)"),q$r=l(),NE=a("li"),sMe=a("strong"),j$r=o("rembert"),D$r=o(" \u2014 "),xK=a("a"),G$r=o("TFRemBertForMultipleChoice"),O$r=o(" (RemBERT model)"),V$r=l(),IE=a("li"),lMe=a("strong"),X$r=o("roberta"),z$r=o(" \u2014 "),$K=a("a"),Q$r=o("TFRobertaForMultipleChoice"),W$r=o(" (RoBERTa model)"),H$r=l(),qE=a("li"),iMe=a("strong"),U$r=o("roformer"),J$r=o(" \u2014 "),kK=a("a"),Y$r=o("TFRoFormerForMultipleChoice"),K$r=o(" (RoFormer model)"),Z$r=l(),jE=a("li"),dMe=a("strong"),ekr=o("xlm"),okr=o(" \u2014 "),SK=a("a"),rkr=o("TFXLMForMultipleChoice"),tkr=o(" (XLM model)"),akr=l(),DE=a("li"),cMe=a("strong"),nkr=o("xlm-roberta"),skr=o(" \u2014 "),RK=a("a"),lkr=o("TFXLMRobertaForMultipleChoice"),ikr=o(" (XLM-RoBERTa model)"),dkr=l(),GE=a("li"),fMe=a("strong"),ckr=o("xlnet"),fkr=o(" \u2014 "),PK=a("a"),mkr=o("TFXLNetForMultipleChoice"),gkr=o(" (XLNet model)"),hkr=l(),F(OE.$$.fragment),vze=l(),xc=a("h2"),VE=a("a"),mMe=a("span"),F($x.$$.fragment),pkr=l(),gMe=a("span"),_kr=o("TFAutoModelForNextSentencePrediction"),Fze=l(),dr=a("div"),F(kx.$$.fragment),ukr=l(),$c=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),NK=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),Sx=a("p"),Ckr=o("This class cannot be instantiated directly using "),hMe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),Lkr=l(),Dt=a("div"),F(Rx.$$.fragment),ykr=l(),pMe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$kr=l(),kc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" to load the model weights."),Nkr=l(),F(XE.$$.fragment),Ikr=l(),Ir=a("div"),F(Px.$$.fragment),qkr=l(),uMe=a("p"),jkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dkr=l(),pn=a("p"),Gkr=o("The model class to instantiate is selected based on the "),bMe=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Hkr=l(),Bx=a("ul"),zE=a("li"),TMe=a("strong"),Ukr=o("bert"),Jkr=o(" \u2014 "),qK=a("a"),Ykr=o("TFBertForNextSentencePrediction"),Kkr=o(" (BERT model)"),Zkr=l(),QE=a("li"),MMe=a("strong"),eSr=o("mobilebert"),oSr=o(" \u2014 "),jK=a("a"),rSr=o("TFMobileBertForNextSentencePrediction"),tSr=o(" (MobileBERT model)"),aSr=l(),F(WE.$$.fragment),Tze=l(),Sc=a("h2"),HE=a("a"),EMe=a("span"),F(Nx.$$.fragment),nSr=l(),CMe=a("span"),sSr=o("TFAutoModelForTableQuestionAnswering"),Mze=l(),cr=a("div"),F(Ix.$$.fragment),lSr=l(),Rc=a("p"),iSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=a("a"),dSr=o("from_pretrained()"),cSr=o(" class method or the "),GK=a("a"),fSr=o("from_config()"),mSr=o(` class
method.`),gSr=l(),qx=a("p"),hSr=o("This class cannot be instantiated directly using "),wMe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),uSr=l(),Gt=a("div"),F(jx.$$.fragment),bSr=l(),AMe=a("p"),vSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FSr=l(),Pc=a("p"),TSr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),MSr=o("not"),ESr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),CSr=o("from_pretrained()"),wSr=o(" to load the model weights."),ASr=l(),F(UE.$$.fragment),LSr=l(),qr=a("div"),F(Dx.$$.fragment),ySr=l(),yMe=a("p"),xSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Sr=l(),_n=a("p"),kSr=o("The model class to instantiate is selected based on the "),xMe=a("code"),SSr=o("model_type"),RSr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),PSr=o("pretrained_model_name_or_path"),BSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),NSr=o("pretrained_model_name_or_path"),ISr=o(":"),qSr=l(),SMe=a("ul"),JE=a("li"),RMe=a("strong"),jSr=o("tapas"),DSr=o(" \u2014 "),VK=a("a"),GSr=o("TFTapasForQuestionAnswering"),OSr=o(" (TAPAS model)"),VSr=l(),F(YE.$$.fragment),Eze=l(),Bc=a("h2"),KE=a("a"),PMe=a("span"),F(Gx.$$.fragment),XSr=l(),BMe=a("span"),zSr=o("TFAutoModelForTokenClassification"),Cze=l(),fr=a("div"),F(Ox.$$.fragment),QSr=l(),Nc=a("p"),WSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=a("a"),HSr=o("from_pretrained()"),USr=o(" class method or the "),zK=a("a"),JSr=o("from_config()"),YSr=o(` class
method.`),KSr=l(),Vx=a("p"),ZSr=o("This class cannot be instantiated directly using "),NMe=a("code"),eRr=o("__init__()"),oRr=o(" (throws an error)."),rRr=l(),Ot=a("div"),F(Xx.$$.fragment),tRr=l(),IMe=a("p"),aRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nRr=l(),Ic=a("p"),sRr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),lRr=o("not"),iRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),dRr=o("from_pretrained()"),cRr=o(" to load the model weights."),fRr=l(),F(ZE.$$.fragment),mRr=l(),jr=a("div"),F(zx.$$.fragment),gRr=l(),jMe=a("p"),hRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pRr=l(),un=a("p"),_Rr=o("The model class to instantiate is selected based on the "),DMe=a("code"),uRr=o("model_type"),bRr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),vRr=o("pretrained_model_name_or_path"),FRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),TRr=o("pretrained_model_name_or_path"),MRr=o(":"),ERr=l(),de=a("ul"),eC=a("li"),VMe=a("strong"),CRr=o("albert"),wRr=o(" \u2014 "),WK=a("a"),ARr=o("TFAlbertForTokenClassification"),LRr=o(" (ALBERT model)"),yRr=l(),oC=a("li"),XMe=a("strong"),xRr=o("bert"),$Rr=o(" \u2014 "),HK=a("a"),kRr=o("TFBertForTokenClassification"),SRr=o(" (BERT model)"),RRr=l(),rC=a("li"),zMe=a("strong"),PRr=o("camembert"),BRr=o(" \u2014 "),UK=a("a"),NRr=o("TFCamembertForTokenClassification"),IRr=o(" (CamemBERT model)"),qRr=l(),tC=a("li"),QMe=a("strong"),jRr=o("convbert"),DRr=o(" \u2014 "),JK=a("a"),GRr=o("TFConvBertForTokenClassification"),ORr=o(" (ConvBERT model)"),VRr=l(),aC=a("li"),WMe=a("strong"),XRr=o("deberta"),zRr=o(" \u2014 "),YK=a("a"),QRr=o("TFDebertaForTokenClassification"),WRr=o(" (DeBERTa model)"),HRr=l(),nC=a("li"),HMe=a("strong"),URr=o("deberta-v2"),JRr=o(" \u2014 "),KK=a("a"),YRr=o("TFDebertaV2ForTokenClassification"),KRr=o(" (DeBERTa-v2 model)"),ZRr=l(),sC=a("li"),UMe=a("strong"),ePr=o("distilbert"),oPr=o(" \u2014 "),ZK=a("a"),rPr=o("TFDistilBertForTokenClassification"),tPr=o(" (DistilBERT model)"),aPr=l(),lC=a("li"),JMe=a("strong"),nPr=o("electra"),sPr=o(" \u2014 "),eZ=a("a"),lPr=o("TFElectraForTokenClassification"),iPr=o(" (ELECTRA model)"),dPr=l(),iC=a("li"),YMe=a("strong"),cPr=o("flaubert"),fPr=o(" \u2014 "),oZ=a("a"),mPr=o("TFFlaubertForTokenClassification"),gPr=o(" (FlauBERT model)"),hPr=l(),dC=a("li"),KMe=a("strong"),pPr=o("funnel"),_Pr=o(" \u2014 "),rZ=a("a"),uPr=o("TFFunnelForTokenClassification"),bPr=o(" (Funnel Transformer model)"),vPr=l(),cC=a("li"),ZMe=a("strong"),FPr=o("layoutlm"),TPr=o(" \u2014 "),tZ=a("a"),MPr=o("TFLayoutLMForTokenClassification"),EPr=o(" (LayoutLM model)"),CPr=l(),fC=a("li"),eEe=a("strong"),wPr=o("longformer"),APr=o(" \u2014 "),aZ=a("a"),LPr=o("TFLongformerForTokenClassification"),yPr=o(" (Longformer model)"),xPr=l(),mC=a("li"),oEe=a("strong"),$Pr=o("mobilebert"),kPr=o(" \u2014 "),nZ=a("a"),SPr=o("TFMobileBertForTokenClassification"),RPr=o(" (MobileBERT model)"),PPr=l(),gC=a("li"),rEe=a("strong"),BPr=o("mpnet"),NPr=o(" \u2014 "),sZ=a("a"),IPr=o("TFMPNetForTokenClassification"),qPr=o(" (MPNet model)"),jPr=l(),hC=a("li"),tEe=a("strong"),DPr=o("rembert"),GPr=o(" \u2014 "),lZ=a("a"),OPr=o("TFRemBertForTokenClassification"),VPr=o(" (RemBERT model)"),XPr=l(),pC=a("li"),aEe=a("strong"),zPr=o("roberta"),QPr=o(" \u2014 "),iZ=a("a"),WPr=o("TFRobertaForTokenClassification"),HPr=o(" (RoBERTa model)"),UPr=l(),_C=a("li"),nEe=a("strong"),JPr=o("roformer"),YPr=o(" \u2014 "),dZ=a("a"),KPr=o("TFRoFormerForTokenClassification"),ZPr=o(" (RoFormer model)"),eBr=l(),uC=a("li"),sEe=a("strong"),oBr=o("xlm"),rBr=o(" \u2014 "),cZ=a("a"),tBr=o("TFXLMForTokenClassification"),aBr=o(" (XLM model)"),nBr=l(),bC=a("li"),lEe=a("strong"),sBr=o("xlm-roberta"),lBr=o(" \u2014 "),fZ=a("a"),iBr=o("TFXLMRobertaForTokenClassification"),dBr=o(" (XLM-RoBERTa model)"),cBr=l(),vC=a("li"),iEe=a("strong"),fBr=o("xlnet"),mBr=o(" \u2014 "),mZ=a("a"),gBr=o("TFXLNetForTokenClassification"),hBr=o(" (XLNet model)"),pBr=l(),F(FC.$$.fragment),wze=l(),qc=a("h2"),TC=a("a"),dEe=a("span"),F(Qx.$$.fragment),_Br=l(),cEe=a("span"),uBr=o("TFAutoModelForQuestionAnswering"),Aze=l(),mr=a("div"),F(Wx.$$.fragment),bBr=l(),jc=a("p"),vBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=a("a"),FBr=o("from_pretrained()"),TBr=o(" class method or the "),hZ=a("a"),MBr=o("from_config()"),EBr=o(` class
method.`),CBr=l(),Hx=a("p"),wBr=o("This class cannot be instantiated directly using "),fEe=a("code"),ABr=o("__init__()"),LBr=o(" (throws an error)."),yBr=l(),Vt=a("div"),F(Ux.$$.fragment),xBr=l(),mEe=a("p"),$Br=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kBr=l(),Dc=a("p"),SBr=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),RBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),BBr=o("from_pretrained()"),NBr=o(" to load the model weights."),IBr=l(),F(MC.$$.fragment),qBr=l(),Dr=a("div"),F(Jx.$$.fragment),jBr=l(),hEe=a("p"),DBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GBr=l(),bn=a("p"),OBr=o("The model class to instantiate is selected based on the "),pEe=a("code"),VBr=o("model_type"),XBr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),zBr=o("pretrained_model_name_or_path"),QBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),WBr=o("pretrained_model_name_or_path"),HBr=o(":"),UBr=l(),ce=a("ul"),EC=a("li"),bEe=a("strong"),JBr=o("albert"),YBr=o(" \u2014 "),_Z=a("a"),KBr=o("TFAlbertForQuestionAnswering"),ZBr=o(" (ALBERT model)"),eNr=l(),CC=a("li"),vEe=a("strong"),oNr=o("bert"),rNr=o(" \u2014 "),uZ=a("a"),tNr=o("TFBertForQuestionAnswering"),aNr=o(" (BERT model)"),nNr=l(),wC=a("li"),FEe=a("strong"),sNr=o("camembert"),lNr=o(" \u2014 "),bZ=a("a"),iNr=o("TFCamembertForQuestionAnswering"),dNr=o(" (CamemBERT model)"),cNr=l(),AC=a("li"),TEe=a("strong"),fNr=o("convbert"),mNr=o(" \u2014 "),vZ=a("a"),gNr=o("TFConvBertForQuestionAnswering"),hNr=o(" (ConvBERT model)"),pNr=l(),LC=a("li"),MEe=a("strong"),_Nr=o("deberta"),uNr=o(" \u2014 "),FZ=a("a"),bNr=o("TFDebertaForQuestionAnswering"),vNr=o(" (DeBERTa model)"),FNr=l(),yC=a("li"),EEe=a("strong"),TNr=o("deberta-v2"),MNr=o(" \u2014 "),TZ=a("a"),ENr=o("TFDebertaV2ForQuestionAnswering"),CNr=o(" (DeBERTa-v2 model)"),wNr=l(),xC=a("li"),CEe=a("strong"),ANr=o("distilbert"),LNr=o(" \u2014 "),MZ=a("a"),yNr=o("TFDistilBertForQuestionAnswering"),xNr=o(" (DistilBERT model)"),$Nr=l(),$C=a("li"),wEe=a("strong"),kNr=o("electra"),SNr=o(" \u2014 "),EZ=a("a"),RNr=o("TFElectraForQuestionAnswering"),PNr=o(" (ELECTRA model)"),BNr=l(),kC=a("li"),AEe=a("strong"),NNr=o("flaubert"),INr=o(" \u2014 "),CZ=a("a"),qNr=o("TFFlaubertForQuestionAnsweringSimple"),jNr=o(" (FlauBERT model)"),DNr=l(),SC=a("li"),LEe=a("strong"),GNr=o("funnel"),ONr=o(" \u2014 "),wZ=a("a"),VNr=o("TFFunnelForQuestionAnswering"),XNr=o(" (Funnel Transformer model)"),zNr=l(),RC=a("li"),yEe=a("strong"),QNr=o("gptj"),WNr=o(" \u2014 "),AZ=a("a"),HNr=o("TFGPTJForQuestionAnswering"),UNr=o(" (GPT-J model)"),JNr=l(),PC=a("li"),xEe=a("strong"),YNr=o("longformer"),KNr=o(" \u2014 "),LZ=a("a"),ZNr=o("TFLongformerForQuestionAnswering"),eIr=o(" (Longformer model)"),oIr=l(),BC=a("li"),$Ee=a("strong"),rIr=o("mobilebert"),tIr=o(" \u2014 "),yZ=a("a"),aIr=o("TFMobileBertForQuestionAnswering"),nIr=o(" (MobileBERT model)"),sIr=l(),NC=a("li"),kEe=a("strong"),lIr=o("mpnet"),iIr=o(" \u2014 "),xZ=a("a"),dIr=o("TFMPNetForQuestionAnswering"),cIr=o(" (MPNet model)"),fIr=l(),IC=a("li"),SEe=a("strong"),mIr=o("rembert"),gIr=o(" \u2014 "),$Z=a("a"),hIr=o("TFRemBertForQuestionAnswering"),pIr=o(" (RemBERT model)"),_Ir=l(),qC=a("li"),REe=a("strong"),uIr=o("roberta"),bIr=o(" \u2014 "),kZ=a("a"),vIr=o("TFRobertaForQuestionAnswering"),FIr=o(" (RoBERTa model)"),TIr=l(),jC=a("li"),PEe=a("strong"),MIr=o("roformer"),EIr=o(" \u2014 "),SZ=a("a"),CIr=o("TFRoFormerForQuestionAnswering"),wIr=o(" (RoFormer model)"),AIr=l(),DC=a("li"),BEe=a("strong"),LIr=o("xlm"),yIr=o(" \u2014 "),RZ=a("a"),xIr=o("TFXLMForQuestionAnsweringSimple"),$Ir=o(" (XLM model)"),kIr=l(),GC=a("li"),NEe=a("strong"),SIr=o("xlm-roberta"),RIr=o(" \u2014 "),PZ=a("a"),PIr=o("TFXLMRobertaForQuestionAnswering"),BIr=o(" (XLM-RoBERTa model)"),NIr=l(),OC=a("li"),IEe=a("strong"),IIr=o("xlnet"),qIr=o(" \u2014 "),BZ=a("a"),jIr=o("TFXLNetForQuestionAnsweringSimple"),DIr=o(" (XLNet model)"),GIr=l(),F(VC.$$.fragment),Lze=l(),Gc=a("h2"),XC=a("a"),qEe=a("span"),F(Yx.$$.fragment),OIr=l(),jEe=a("span"),VIr=o("TFAutoModelForVision2Seq"),yze=l(),gr=a("div"),F(Kx.$$.fragment),XIr=l(),Oc=a("p"),zIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NZ=a("a"),QIr=o("from_pretrained()"),WIr=o(" class method or the "),IZ=a("a"),HIr=o("from_config()"),UIr=o(` class
method.`),JIr=l(),Zx=a("p"),YIr=o("This class cannot be instantiated directly using "),DEe=a("code"),KIr=o("__init__()"),ZIr=o(" (throws an error)."),eqr=l(),Xt=a("div"),F(e$.$$.fragment),oqr=l(),GEe=a("p"),rqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tqr=l(),Vc=a("p"),aqr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),nqr=o("not"),sqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),lqr=o("from_pretrained()"),iqr=o(" to load the model weights."),dqr=l(),F(zC.$$.fragment),cqr=l(),Gr=a("div"),F(o$.$$.fragment),fqr=l(),VEe=a("p"),mqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gqr=l(),vn=a("p"),hqr=o("The model class to instantiate is selected based on the "),XEe=a("code"),pqr=o("model_type"),_qr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),uqr=o("pretrained_model_name_or_path"),bqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),vqr=o("pretrained_model_name_or_path"),Fqr=o(":"),Tqr=l(),WEe=a("ul"),QC=a("li"),HEe=a("strong"),Mqr=o("vision-encoder-decoder"),Eqr=o(" \u2014 "),jZ=a("a"),Cqr=o("TFVisionEncoderDecoderModel"),wqr=o(" (Vision Encoder decoder model)"),Aqr=l(),F(WC.$$.fragment),xze=l(),Xc=a("h2"),HC=a("a"),UEe=a("span"),F(r$.$$.fragment),Lqr=l(),JEe=a("span"),yqr=o("TFAutoModelForSpeechSeq2Seq"),$ze=l(),hr=a("div"),F(t$.$$.fragment),xqr=l(),zc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),GZ=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),a$=a("p"),Nqr=o("This class cannot be instantiated directly using "),YEe=a("code"),Iqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),zt=a("div"),F(n$.$$.fragment),Dqr=l(),KEe=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oqr=l(),Qc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" to load the model weights."),Hqr=l(),F(UC.$$.fragment),Uqr=l(),Or=a("div"),F(s$.$$.fragment),Jqr=l(),eCe=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kqr=l(),Fn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),oCe=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),aCe=a("ul"),JC=a("li"),nCe=a("strong"),ljr=o("speech_to_text"),ijr=o(" \u2014 "),VZ=a("a"),djr=o("TFSpeech2TextForConditionalGeneration"),cjr=o(" (Speech2Text model)"),fjr=l(),F(YC.$$.fragment),kze=l(),Wc=a("h2"),KC=a("a"),sCe=a("span"),F(l$.$$.fragment),mjr=l(),lCe=a("span"),gjr=o("FlaxAutoModel"),Sze=l(),pr=a("div"),F(i$.$$.fragment),hjr=l(),Hc=a("p"),pjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=a("a"),_jr=o("from_pretrained()"),ujr=o(" class method or the "),zZ=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),d$=a("p"),Tjr=o("This class cannot be instantiated directly using "),iCe=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Qt=a("div"),F(c$.$$.fragment),wjr=l(),dCe=a("p"),Ajr=o("Instantiates one of the base model classes of the library from a configuration."),Ljr=l(),Uc=a("p"),yjr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F(ZC.$$.fragment),Pjr=l(),Vr=a("div"),F(f$.$$.fragment),Bjr=l(),fCe=a("p"),Njr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ijr=l(),Tn=a("p"),qjr=o("The model class to instantiate is selected based on the "),mCe=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),oe=a("ul"),e0=a("li"),pCe=a("strong"),Qjr=o("albert"),Wjr=o(" \u2014 "),WZ=a("a"),Hjr=o("FlaxAlbertModel"),Ujr=o(" (ALBERT model)"),Jjr=l(),o0=a("li"),_Ce=a("strong"),Yjr=o("bart"),Kjr=o(" \u2014 "),HZ=a("a"),Zjr=o("FlaxBartModel"),eDr=o(" (BART model)"),oDr=l(),r0=a("li"),uCe=a("strong"),rDr=o("beit"),tDr=o(" \u2014 "),UZ=a("a"),aDr=o("FlaxBeitModel"),nDr=o(" (BEiT model)"),sDr=l(),t0=a("li"),bCe=a("strong"),lDr=o("bert"),iDr=o(" \u2014 "),JZ=a("a"),dDr=o("FlaxBertModel"),cDr=o(" (BERT model)"),fDr=l(),a0=a("li"),vCe=a("strong"),mDr=o("big_bird"),gDr=o(" \u2014 "),YZ=a("a"),hDr=o("FlaxBigBirdModel"),pDr=o(" (BigBird model)"),_Dr=l(),n0=a("li"),FCe=a("strong"),uDr=o("blenderbot"),bDr=o(" \u2014 "),KZ=a("a"),vDr=o("FlaxBlenderbotModel"),FDr=o(" (Blenderbot model)"),TDr=l(),s0=a("li"),TCe=a("strong"),MDr=o("blenderbot-small"),EDr=o(" \u2014 "),ZZ=a("a"),CDr=o("FlaxBlenderbotSmallModel"),wDr=o(" (BlenderbotSmall model)"),ADr=l(),l0=a("li"),MCe=a("strong"),LDr=o("clip"),yDr=o(" \u2014 "),eee=a("a"),xDr=o("FlaxCLIPModel"),$Dr=o(" (CLIP model)"),kDr=l(),i0=a("li"),ECe=a("strong"),SDr=o("distilbert"),RDr=o(" \u2014 "),oee=a("a"),PDr=o("FlaxDistilBertModel"),BDr=o(" (DistilBERT model)"),NDr=l(),d0=a("li"),CCe=a("strong"),IDr=o("electra"),qDr=o(" \u2014 "),ree=a("a"),jDr=o("FlaxElectraModel"),DDr=o(" (ELECTRA model)"),GDr=l(),c0=a("li"),wCe=a("strong"),ODr=o("gpt2"),VDr=o(" \u2014 "),tee=a("a"),XDr=o("FlaxGPT2Model"),zDr=o(" (OpenAI GPT-2 model)"),QDr=l(),f0=a("li"),ACe=a("strong"),WDr=o("gpt_neo"),HDr=o(" \u2014 "),aee=a("a"),UDr=o("FlaxGPTNeoModel"),JDr=o(" (GPT Neo model)"),YDr=l(),m0=a("li"),LCe=a("strong"),KDr=o("gptj"),ZDr=o(" \u2014 "),nee=a("a"),eGr=o("FlaxGPTJModel"),oGr=o(" (GPT-J model)"),rGr=l(),g0=a("li"),yCe=a("strong"),tGr=o("longt5"),aGr=o(" \u2014 "),see=a("a"),nGr=o("FlaxLongT5Model"),sGr=o(" (LongT5 model)"),lGr=l(),h0=a("li"),xCe=a("strong"),iGr=o("marian"),dGr=o(" \u2014 "),lee=a("a"),cGr=o("FlaxMarianModel"),fGr=o(" (Marian model)"),mGr=l(),p0=a("li"),$Ce=a("strong"),gGr=o("mbart"),hGr=o(" \u2014 "),iee=a("a"),pGr=o("FlaxMBartModel"),_Gr=o(" (mBART model)"),uGr=l(),_0=a("li"),kCe=a("strong"),bGr=o("mt5"),vGr=o(" \u2014 "),dee=a("a"),FGr=o("FlaxMT5Model"),TGr=o(" (MT5 model)"),MGr=l(),u0=a("li"),SCe=a("strong"),EGr=o("opt"),CGr=o(" \u2014 "),cee=a("a"),wGr=o("FlaxOPTModel"),AGr=o(" (OPT model)"),LGr=l(),b0=a("li"),RCe=a("strong"),yGr=o("pegasus"),xGr=o(" \u2014 "),fee=a("a"),$Gr=o("FlaxPegasusModel"),kGr=o(" (Pegasus model)"),SGr=l(),v0=a("li"),PCe=a("strong"),RGr=o("roberta"),PGr=o(" \u2014 "),mee=a("a"),BGr=o("FlaxRobertaModel"),NGr=o(" (RoBERTa model)"),IGr=l(),F0=a("li"),BCe=a("strong"),qGr=o("roformer"),jGr=o(" \u2014 "),gee=a("a"),DGr=o("FlaxRoFormerModel"),GGr=o(" (RoFormer model)"),OGr=l(),T0=a("li"),NCe=a("strong"),VGr=o("t5"),XGr=o(" \u2014 "),hee=a("a"),zGr=o("FlaxT5Model"),QGr=o(" (T5 model)"),WGr=l(),M0=a("li"),ICe=a("strong"),HGr=o("vision-text-dual-encoder"),UGr=o(" \u2014 "),pee=a("a"),JGr=o("FlaxVisionTextDualEncoderModel"),YGr=o(" (VisionTextDualEncoder model)"),KGr=l(),E0=a("li"),qCe=a("strong"),ZGr=o("vit"),eOr=o(" \u2014 "),_ee=a("a"),oOr=o("FlaxViTModel"),rOr=o(" (ViT model)"),tOr=l(),C0=a("li"),jCe=a("strong"),aOr=o("wav2vec2"),nOr=o(" \u2014 "),uee=a("a"),sOr=o("FlaxWav2Vec2Model"),lOr=o(" (Wav2Vec2 model)"),iOr=l(),w0=a("li"),DCe=a("strong"),dOr=o("xglm"),cOr=o(" \u2014 "),bee=a("a"),fOr=o("FlaxXGLMModel"),mOr=o(" (XGLM model)"),gOr=l(),A0=a("li"),GCe=a("strong"),hOr=o("xlm-roberta"),pOr=o(" \u2014 "),vee=a("a"),_Or=o("FlaxXLMRobertaModel"),uOr=o(" (XLM-RoBERTa model)"),bOr=l(),F(L0.$$.fragment),Rze=l(),Jc=a("h2"),y0=a("a"),OCe=a("span"),F(m$.$$.fragment),vOr=l(),VCe=a("span"),FOr=o("FlaxAutoModelForCausalLM"),Pze=l(),_r=a("div"),F(g$.$$.fragment),TOr=l(),Yc=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),Tee=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),LOr=l(),h$=a("p"),yOr=o("This class cannot be instantiated directly using "),XCe=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Wt=a("div"),F(p$.$$.fragment),SOr=l(),zCe=a("p"),ROr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),POr=l(),Kc=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),NOr=o("not"),IOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(x0.$$.fragment),GOr=l(),Xr=a("div"),F(_$.$$.fragment),OOr=l(),WCe=a("p"),VOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XOr=l(),Mn=a("p"),zOr=o("The model class to instantiate is selected based on the "),HCe=a("code"),QOr=o("model_type"),WOr=o(` property of the config object (either
passed as an argument or loaded from `),UCe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),xe=a("ul"),$0=a("li"),YCe=a("strong"),ZOr=o("bart"),eVr=o(" \u2014 "),Eee=a("a"),oVr=o("FlaxBartForCausalLM"),rVr=o(" (BART model)"),tVr=l(),k0=a("li"),KCe=a("strong"),aVr=o("bert"),nVr=o(" \u2014 "),Cee=a("a"),sVr=o("FlaxBertForCausalLM"),lVr=o(" (BERT model)"),iVr=l(),S0=a("li"),ZCe=a("strong"),dVr=o("big_bird"),cVr=o(" \u2014 "),wee=a("a"),fVr=o("FlaxBigBirdForCausalLM"),mVr=o(" (BigBird model)"),gVr=l(),R0=a("li"),e0e=a("strong"),hVr=o("electra"),pVr=o(" \u2014 "),Aee=a("a"),_Vr=o("FlaxElectraForCausalLM"),uVr=o(" (ELECTRA model)"),bVr=l(),P0=a("li"),o0e=a("strong"),vVr=o("gpt2"),FVr=o(" \u2014 "),Lee=a("a"),TVr=o("FlaxGPT2LMHeadModel"),MVr=o(" (OpenAI GPT-2 model)"),EVr=l(),B0=a("li"),r0e=a("strong"),CVr=o("gpt_neo"),wVr=o(" \u2014 "),yee=a("a"),AVr=o("FlaxGPTNeoForCausalLM"),LVr=o(" (GPT Neo model)"),yVr=l(),N0=a("li"),t0e=a("strong"),xVr=o("gptj"),$Vr=o(" \u2014 "),xee=a("a"),kVr=o("FlaxGPTJForCausalLM"),SVr=o(" (GPT-J model)"),RVr=l(),I0=a("li"),a0e=a("strong"),PVr=o("opt"),BVr=o(" \u2014 "),$ee=a("a"),NVr=o("FlaxOPTForCausalLM"),IVr=o(" (OPT model)"),qVr=l(),q0=a("li"),n0e=a("strong"),jVr=o("roberta"),DVr=o(" \u2014 "),kee=a("a"),GVr=o("FlaxRobertaForCausalLM"),OVr=o(" (RoBERTa model)"),VVr=l(),j0=a("li"),s0e=a("strong"),XVr=o("xglm"),zVr=o(" \u2014 "),See=a("a"),QVr=o("FlaxXGLMForCausalLM"),WVr=o(" (XGLM model)"),HVr=l(),F(D0.$$.fragment),Bze=l(),Zc=a("h2"),G0=a("a"),l0e=a("span"),F(u$.$$.fragment),UVr=l(),i0e=a("span"),JVr=o("FlaxAutoModelForPreTraining"),Nze=l(),ur=a("div"),F(b$.$$.fragment),YVr=l(),ef=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),Pee=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),v$=a("p"),aXr=o("This class cannot be instantiated directly using "),d0e=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Ht=a("div"),F(F$.$$.fragment),iXr=l(),c0e=a("p"),dXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cXr=l(),of=a("p"),fXr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),mXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),hXr=o("from_pretrained()"),pXr=o(" to load the model weights."),_Xr=l(),F(O0.$$.fragment),uXr=l(),zr=a("div"),F(T$.$$.fragment),bXr=l(),m0e=a("p"),vXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FXr=l(),En=a("p"),TXr=o("The model class to instantiate is selected based on the "),g0e=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),AXr=o("pretrained_model_name_or_path"),LXr=o(":"),yXr=l(),Ee=a("ul"),V0=a("li"),_0e=a("strong"),xXr=o("albert"),$Xr=o(" \u2014 "),Nee=a("a"),kXr=o("FlaxAlbertForPreTraining"),SXr=o(" (ALBERT model)"),RXr=l(),X0=a("li"),u0e=a("strong"),PXr=o("bart"),BXr=o(" \u2014 "),Iee=a("a"),NXr=o("FlaxBartForConditionalGeneration"),IXr=o(" (BART model)"),qXr=l(),z0=a("li"),b0e=a("strong"),jXr=o("bert"),DXr=o(" \u2014 "),qee=a("a"),GXr=o("FlaxBertForPreTraining"),OXr=o(" (BERT model)"),VXr=l(),Q0=a("li"),v0e=a("strong"),XXr=o("big_bird"),zXr=o(" \u2014 "),jee=a("a"),QXr=o("FlaxBigBirdForPreTraining"),WXr=o(" (BigBird model)"),HXr=l(),W0=a("li"),F0e=a("strong"),UXr=o("electra"),JXr=o(" \u2014 "),Dee=a("a"),YXr=o("FlaxElectraForPreTraining"),KXr=o(" (ELECTRA model)"),ZXr=l(),H0=a("li"),T0e=a("strong"),ezr=o("longt5"),ozr=o(" \u2014 "),Gee=a("a"),rzr=o("FlaxLongT5ForConditionalGeneration"),tzr=o(" (LongT5 model)"),azr=l(),U0=a("li"),M0e=a("strong"),nzr=o("mbart"),szr=o(" \u2014 "),Oee=a("a"),lzr=o("FlaxMBartForConditionalGeneration"),izr=o(" (mBART model)"),dzr=l(),J0=a("li"),E0e=a("strong"),czr=o("mt5"),fzr=o(" \u2014 "),Vee=a("a"),mzr=o("FlaxMT5ForConditionalGeneration"),gzr=o(" (MT5 model)"),hzr=l(),Y0=a("li"),C0e=a("strong"),pzr=o("roberta"),_zr=o(" \u2014 "),Xee=a("a"),uzr=o("FlaxRobertaForMaskedLM"),bzr=o(" (RoBERTa model)"),vzr=l(),K0=a("li"),w0e=a("strong"),Fzr=o("roformer"),Tzr=o(" \u2014 "),zee=a("a"),Mzr=o("FlaxRoFormerForMaskedLM"),Ezr=o(" (RoFormer model)"),Czr=l(),Z0=a("li"),A0e=a("strong"),wzr=o("t5"),Azr=o(" \u2014 "),Qee=a("a"),Lzr=o("FlaxT5ForConditionalGeneration"),yzr=o(" (T5 model)"),xzr=l(),ew=a("li"),L0e=a("strong"),$zr=o("wav2vec2"),kzr=o(" \u2014 "),Wee=a("a"),Szr=o("FlaxWav2Vec2ForPreTraining"),Rzr=o(" (Wav2Vec2 model)"),Pzr=l(),ow=a("li"),y0e=a("strong"),Bzr=o("xlm-roberta"),Nzr=o(" \u2014 "),Hee=a("a"),Izr=o("FlaxXLMRobertaForMaskedLM"),qzr=o(" (XLM-RoBERTa model)"),jzr=l(),F(rw.$$.fragment),Ize=l(),rf=a("h2"),tw=a("a"),x0e=a("span"),F(M$.$$.fragment),Dzr=l(),$0e=a("span"),Gzr=o("FlaxAutoModelForMaskedLM"),qze=l(),br=a("div"),F(E$.$$.fragment),Ozr=l(),tf=a("p"),Vzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" class method or the "),Jee=a("a"),Qzr=o("from_config()"),Wzr=o(` class
method.`),Hzr=l(),C$=a("p"),Uzr=o("This class cannot be instantiated directly using "),k0e=a("code"),Jzr=o("__init__()"),Yzr=o(" (throws an error)."),Kzr=l(),Ut=a("div"),F(w$.$$.fragment),Zzr=l(),S0e=a("p"),eQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oQr=l(),af=a("p"),rQr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),tQr=o("not"),aQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),nQr=o("from_pretrained()"),sQr=o(" to load the model weights."),lQr=l(),F(aw.$$.fragment),iQr=l(),Qr=a("div"),F(A$.$$.fragment),dQr=l(),P0e=a("p"),cQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fQr=l(),Cn=a("p"),mQr=o("The model class to instantiate is selected based on the "),B0e=a("code"),gQr=o("model_type"),hQr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),pQr=o("pretrained_model_name_or_path"),_Qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),uQr=o("pretrained_model_name_or_path"),bQr=o(":"),vQr=l(),$e=a("ul"),nw=a("li"),q0e=a("strong"),FQr=o("albert"),TQr=o(" \u2014 "),Kee=a("a"),MQr=o("FlaxAlbertForMaskedLM"),EQr=o(" (ALBERT model)"),CQr=l(),sw=a("li"),j0e=a("strong"),wQr=o("bart"),AQr=o(" \u2014 "),Zee=a("a"),LQr=o("FlaxBartForConditionalGeneration"),yQr=o(" (BART model)"),xQr=l(),lw=a("li"),D0e=a("strong"),$Qr=o("bert"),kQr=o(" \u2014 "),eoe=a("a"),SQr=o("FlaxBertForMaskedLM"),RQr=o(" (BERT model)"),PQr=l(),iw=a("li"),G0e=a("strong"),BQr=o("big_bird"),NQr=o(" \u2014 "),ooe=a("a"),IQr=o("FlaxBigBirdForMaskedLM"),qQr=o(" (BigBird model)"),jQr=l(),dw=a("li"),O0e=a("strong"),DQr=o("distilbert"),GQr=o(" \u2014 "),roe=a("a"),OQr=o("FlaxDistilBertForMaskedLM"),VQr=o(" (DistilBERT model)"),XQr=l(),cw=a("li"),V0e=a("strong"),zQr=o("electra"),QQr=o(" \u2014 "),toe=a("a"),WQr=o("FlaxElectraForMaskedLM"),HQr=o(" (ELECTRA model)"),UQr=l(),fw=a("li"),X0e=a("strong"),JQr=o("mbart"),YQr=o(" \u2014 "),aoe=a("a"),KQr=o("FlaxMBartForConditionalGeneration"),ZQr=o(" (mBART model)"),eWr=l(),mw=a("li"),z0e=a("strong"),oWr=o("roberta"),rWr=o(" \u2014 "),noe=a("a"),tWr=o("FlaxRobertaForMaskedLM"),aWr=o(" (RoBERTa model)"),nWr=l(),gw=a("li"),Q0e=a("strong"),sWr=o("roformer"),lWr=o(" \u2014 "),soe=a("a"),iWr=o("FlaxRoFormerForMaskedLM"),dWr=o(" (RoFormer model)"),cWr=l(),hw=a("li"),W0e=a("strong"),fWr=o("xlm-roberta"),mWr=o(" \u2014 "),loe=a("a"),gWr=o("FlaxXLMRobertaForMaskedLM"),hWr=o(" (XLM-RoBERTa model)"),pWr=l(),F(pw.$$.fragment),jze=l(),nf=a("h2"),_w=a("a"),H0e=a("span"),F(L$.$$.fragment),_Wr=l(),U0e=a("span"),uWr=o("FlaxAutoModelForSeq2SeqLM"),Dze=l(),vr=a("div"),F(y$.$$.fragment),bWr=l(),sf=a("p"),vWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=a("a"),FWr=o("from_pretrained()"),TWr=o(" class method or the "),doe=a("a"),MWr=o("from_config()"),EWr=o(` class
method.`),CWr=l(),x$=a("p"),wWr=o("This class cannot be instantiated directly using "),J0e=a("code"),AWr=o("__init__()"),LWr=o(" (throws an error)."),yWr=l(),Jt=a("div"),F($$.$$.fragment),xWr=l(),Y0e=a("p"),$Wr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kWr=l(),lf=a("p"),SWr=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),RWr=o("not"),PWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),BWr=o("from_pretrained()"),NWr=o(" to load the model weights."),IWr=l(),F(uw.$$.fragment),qWr=l(),Wr=a("div"),F(k$.$$.fragment),jWr=l(),Z0e=a("p"),DWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GWr=l(),wn=a("p"),OWr=o("The model class to instantiate is selected based on the "),ewe=a("code"),VWr=o("model_type"),XWr=o(` property of the config object (either
passed as an argument or loaded from `),owe=a("code"),zWr=o("pretrained_model_name_or_path"),QWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=a("code"),WWr=o("pretrained_model_name_or_path"),HWr=o(":"),UWr=l(),ke=a("ul"),bw=a("li"),twe=a("strong"),JWr=o("bart"),YWr=o(" \u2014 "),foe=a("a"),KWr=o("FlaxBartForConditionalGeneration"),ZWr=o(" (BART model)"),eHr=l(),vw=a("li"),awe=a("strong"),oHr=o("blenderbot"),rHr=o(" \u2014 "),moe=a("a"),tHr=o("FlaxBlenderbotForConditionalGeneration"),aHr=o(" (Blenderbot model)"),nHr=l(),Fw=a("li"),nwe=a("strong"),sHr=o("blenderbot-small"),lHr=o(" \u2014 "),goe=a("a"),iHr=o("FlaxBlenderbotSmallForConditionalGeneration"),dHr=o(" (BlenderbotSmall model)"),cHr=l(),Tw=a("li"),swe=a("strong"),fHr=o("encoder-decoder"),mHr=o(" \u2014 "),hoe=a("a"),gHr=o("FlaxEncoderDecoderModel"),hHr=o(" (Encoder decoder model)"),pHr=l(),Mw=a("li"),lwe=a("strong"),_Hr=o("longt5"),uHr=o(" \u2014 "),poe=a("a"),bHr=o("FlaxLongT5ForConditionalGeneration"),vHr=o(" (LongT5 model)"),FHr=l(),Ew=a("li"),iwe=a("strong"),THr=o("marian"),MHr=o(" \u2014 "),_oe=a("a"),EHr=o("FlaxMarianMTModel"),CHr=o(" (Marian model)"),wHr=l(),Cw=a("li"),dwe=a("strong"),AHr=o("mbart"),LHr=o(" \u2014 "),uoe=a("a"),yHr=o("FlaxMBartForConditionalGeneration"),xHr=o(" (mBART model)"),$Hr=l(),ww=a("li"),cwe=a("strong"),kHr=o("mt5"),SHr=o(" \u2014 "),boe=a("a"),RHr=o("FlaxMT5ForConditionalGeneration"),PHr=o(" (MT5 model)"),BHr=l(),Aw=a("li"),fwe=a("strong"),NHr=o("pegasus"),IHr=o(" \u2014 "),voe=a("a"),qHr=o("FlaxPegasusForConditionalGeneration"),jHr=o(" (Pegasus model)"),DHr=l(),Lw=a("li"),mwe=a("strong"),GHr=o("t5"),OHr=o(" \u2014 "),Foe=a("a"),VHr=o("FlaxT5ForConditionalGeneration"),XHr=o(" (T5 model)"),zHr=l(),F(yw.$$.fragment),Gze=l(),df=a("h2"),xw=a("a"),gwe=a("span"),F(S$.$$.fragment),QHr=l(),hwe=a("span"),WHr=o("FlaxAutoModelForSequenceClassification"),Oze=l(),Fr=a("div"),F(R$.$$.fragment),HHr=l(),cf=a("p"),UHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=a("a"),JHr=o("from_pretrained()"),YHr=o(" class method or the "),Moe=a("a"),KHr=o("from_config()"),ZHr=o(` class
method.`),eUr=l(),P$=a("p"),oUr=o("This class cannot be instantiated directly using "),pwe=a("code"),rUr=o("__init__()"),tUr=o(" (throws an error)."),aUr=l(),Yt=a("div"),F(B$.$$.fragment),nUr=l(),_we=a("p"),sUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lUr=l(),ff=a("p"),iUr=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),dUr=o("not"),cUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),fUr=o("from_pretrained()"),mUr=o(" to load the model weights."),gUr=l(),F($w.$$.fragment),hUr=l(),Hr=a("div"),F(N$.$$.fragment),pUr=l(),bwe=a("p"),_Ur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uUr=l(),An=a("p"),bUr=o("The model class to instantiate is selected based on the "),vwe=a("code"),vUr=o("model_type"),FUr=o(` property of the config object (either
passed as an argument or loaded from `),Fwe=a("code"),TUr=o("pretrained_model_name_or_path"),MUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=a("code"),EUr=o("pretrained_model_name_or_path"),CUr=o(":"),wUr=l(),Se=a("ul"),kw=a("li"),Mwe=a("strong"),AUr=o("albert"),LUr=o(" \u2014 "),Coe=a("a"),yUr=o("FlaxAlbertForSequenceClassification"),xUr=o(" (ALBERT model)"),$Ur=l(),Sw=a("li"),Ewe=a("strong"),kUr=o("bart"),SUr=o(" \u2014 "),woe=a("a"),RUr=o("FlaxBartForSequenceClassification"),PUr=o(" (BART model)"),BUr=l(),Rw=a("li"),Cwe=a("strong"),NUr=o("bert"),IUr=o(" \u2014 "),Aoe=a("a"),qUr=o("FlaxBertForSequenceClassification"),jUr=o(" (BERT model)"),DUr=l(),Pw=a("li"),wwe=a("strong"),GUr=o("big_bird"),OUr=o(" \u2014 "),Loe=a("a"),VUr=o("FlaxBigBirdForSequenceClassification"),XUr=o(" (BigBird model)"),zUr=l(),Bw=a("li"),Awe=a("strong"),QUr=o("distilbert"),WUr=o(" \u2014 "),yoe=a("a"),HUr=o("FlaxDistilBertForSequenceClassification"),UUr=o(" (DistilBERT model)"),JUr=l(),Nw=a("li"),Lwe=a("strong"),YUr=o("electra"),KUr=o(" \u2014 "),xoe=a("a"),ZUr=o("FlaxElectraForSequenceClassification"),eJr=o(" (ELECTRA model)"),oJr=l(),Iw=a("li"),ywe=a("strong"),rJr=o("mbart"),tJr=o(" \u2014 "),$oe=a("a"),aJr=o("FlaxMBartForSequenceClassification"),nJr=o(" (mBART model)"),sJr=l(),qw=a("li"),xwe=a("strong"),lJr=o("roberta"),iJr=o(" \u2014 "),koe=a("a"),dJr=o("FlaxRobertaForSequenceClassification"),cJr=o(" (RoBERTa model)"),fJr=l(),jw=a("li"),$we=a("strong"),mJr=o("roformer"),gJr=o(" \u2014 "),Soe=a("a"),hJr=o("FlaxRoFormerForSequenceClassification"),pJr=o(" (RoFormer model)"),_Jr=l(),Dw=a("li"),kwe=a("strong"),uJr=o("xlm-roberta"),bJr=o(" \u2014 "),Roe=a("a"),vJr=o("FlaxXLMRobertaForSequenceClassification"),FJr=o(" (XLM-RoBERTa model)"),TJr=l(),F(Gw.$$.fragment),Vze=l(),mf=a("h2"),Ow=a("a"),Swe=a("span"),F(I$.$$.fragment),MJr=l(),Rwe=a("span"),EJr=o("FlaxAutoModelForQuestionAnswering"),Xze=l(),Tr=a("div"),F(q$.$$.fragment),CJr=l(),gf=a("p"),wJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=a("a"),AJr=o("from_pretrained()"),LJr=o(" class method or the "),Boe=a("a"),yJr=o("from_config()"),xJr=o(` class
method.`),$Jr=l(),j$=a("p"),kJr=o("This class cannot be instantiated directly using "),Pwe=a("code"),SJr=o("__init__()"),RJr=o(" (throws an error)."),PJr=l(),Kt=a("div"),F(D$.$$.fragment),BJr=l(),Bwe=a("p"),NJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IJr=l(),hf=a("p"),qJr=o(`Note:
Loading a model from its configuration file does `),Nwe=a("strong"),jJr=o("not"),DJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),GJr=o("from_pretrained()"),OJr=o(" to load the model weights."),VJr=l(),F(Vw.$$.fragment),XJr=l(),Ur=a("div"),F(G$.$$.fragment),zJr=l(),Iwe=a("p"),QJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WJr=l(),Ln=a("p"),HJr=o("The model class to instantiate is selected based on the "),qwe=a("code"),UJr=o("model_type"),JJr=o(` property of the config object (either
passed as an argument or loaded from `),jwe=a("code"),YJr=o("pretrained_model_name_or_path"),KJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=a("code"),ZJr=o("pretrained_model_name_or_path"),eYr=o(":"),oYr=l(),Re=a("ul"),Xw=a("li"),Gwe=a("strong"),rYr=o("albert"),tYr=o(" \u2014 "),Ioe=a("a"),aYr=o("FlaxAlbertForQuestionAnswering"),nYr=o(" (ALBERT model)"),sYr=l(),zw=a("li"),Owe=a("strong"),lYr=o("bart"),iYr=o(" \u2014 "),qoe=a("a"),dYr=o("FlaxBartForQuestionAnswering"),cYr=o(" (BART model)"),fYr=l(),Qw=a("li"),Vwe=a("strong"),mYr=o("bert"),gYr=o(" \u2014 "),joe=a("a"),hYr=o("FlaxBertForQuestionAnswering"),pYr=o(" (BERT model)"),_Yr=l(),Ww=a("li"),Xwe=a("strong"),uYr=o("big_bird"),bYr=o(" \u2014 "),Doe=a("a"),vYr=o("FlaxBigBirdForQuestionAnswering"),FYr=o(" (BigBird model)"),TYr=l(),Hw=a("li"),zwe=a("strong"),MYr=o("distilbert"),EYr=o(" \u2014 "),Goe=a("a"),CYr=o("FlaxDistilBertForQuestionAnswering"),wYr=o(" (DistilBERT model)"),AYr=l(),Uw=a("li"),Qwe=a("strong"),LYr=o("electra"),yYr=o(" \u2014 "),Ooe=a("a"),xYr=o("FlaxElectraForQuestionAnswering"),$Yr=o(" (ELECTRA model)"),kYr=l(),Jw=a("li"),Wwe=a("strong"),SYr=o("mbart"),RYr=o(" \u2014 "),Voe=a("a"),PYr=o("FlaxMBartForQuestionAnswering"),BYr=o(" (mBART model)"),NYr=l(),Yw=a("li"),Hwe=a("strong"),IYr=o("roberta"),qYr=o(" \u2014 "),Xoe=a("a"),jYr=o("FlaxRobertaForQuestionAnswering"),DYr=o(" (RoBERTa model)"),GYr=l(),Kw=a("li"),Uwe=a("strong"),OYr=o("roformer"),VYr=o(" \u2014 "),zoe=a("a"),XYr=o("FlaxRoFormerForQuestionAnswering"),zYr=o(" (RoFormer model)"),QYr=l(),Zw=a("li"),Jwe=a("strong"),WYr=o("xlm-roberta"),HYr=o(" \u2014 "),Qoe=a("a"),UYr=o("FlaxXLMRobertaForQuestionAnswering"),JYr=o(" (XLM-RoBERTa model)"),YYr=l(),F(eA.$$.fragment),zze=l(),pf=a("h2"),oA=a("a"),Ywe=a("span"),F(O$.$$.fragment),KYr=l(),Kwe=a("span"),ZYr=o("FlaxAutoModelForTokenClassification"),Qze=l(),Mr=a("div"),F(V$.$$.fragment),eKr=l(),_f=a("p"),oKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=a("a"),rKr=o("from_pretrained()"),tKr=o(" class method or the "),Hoe=a("a"),aKr=o("from_config()"),nKr=o(` class
method.`),sKr=l(),X$=a("p"),lKr=o("This class cannot be instantiated directly using "),Zwe=a("code"),iKr=o("__init__()"),dKr=o(" (throws an error)."),cKr=l(),Zt=a("div"),F(z$.$$.fragment),fKr=l(),eAe=a("p"),mKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gKr=l(),uf=a("p"),hKr=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),pKr=o("not"),_Kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=a("a"),uKr=o("from_pretrained()"),bKr=o(" to load the model weights."),vKr=l(),F(rA.$$.fragment),FKr=l(),Jr=a("div"),F(Q$.$$.fragment),TKr=l(),rAe=a("p"),MKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EKr=l(),yn=a("p"),CKr=o("The model class to instantiate is selected based on the "),tAe=a("code"),wKr=o("model_type"),AKr=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),LKr=o("pretrained_model_name_or_path"),yKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),xKr=o("pretrained_model_name_or_path"),$Kr=o(":"),kKr=l(),Ve=a("ul"),tA=a("li"),sAe=a("strong"),SKr=o("albert"),RKr=o(" \u2014 "),Joe=a("a"),PKr=o("FlaxAlbertForTokenClassification"),BKr=o(" (ALBERT model)"),NKr=l(),aA=a("li"),lAe=a("strong"),IKr=o("bert"),qKr=o(" \u2014 "),Yoe=a("a"),jKr=o("FlaxBertForTokenClassification"),DKr=o(" (BERT model)"),GKr=l(),nA=a("li"),iAe=a("strong"),OKr=o("big_bird"),VKr=o(" \u2014 "),Koe=a("a"),XKr=o("FlaxBigBirdForTokenClassification"),zKr=o(" (BigBird model)"),QKr=l(),sA=a("li"),dAe=a("strong"),WKr=o("distilbert"),HKr=o(" \u2014 "),Zoe=a("a"),UKr=o("FlaxDistilBertForTokenClassification"),JKr=o(" (DistilBERT model)"),YKr=l(),lA=a("li"),cAe=a("strong"),KKr=o("electra"),ZKr=o(" \u2014 "),ere=a("a"),eZr=o("FlaxElectraForTokenClassification"),oZr=o(" (ELECTRA model)"),rZr=l(),iA=a("li"),fAe=a("strong"),tZr=o("roberta"),aZr=o(" \u2014 "),ore=a("a"),nZr=o("FlaxRobertaForTokenClassification"),sZr=o(" (RoBERTa model)"),lZr=l(),dA=a("li"),mAe=a("strong"),iZr=o("roformer"),dZr=o(" \u2014 "),rre=a("a"),cZr=o("FlaxRoFormerForTokenClassification"),fZr=o(" (RoFormer model)"),mZr=l(),cA=a("li"),gAe=a("strong"),gZr=o("xlm-roberta"),hZr=o(" \u2014 "),tre=a("a"),pZr=o("FlaxXLMRobertaForTokenClassification"),_Zr=o(" (XLM-RoBERTa model)"),uZr=l(),F(fA.$$.fragment),Wze=l(),bf=a("h2"),mA=a("a"),hAe=a("span"),F(W$.$$.fragment),bZr=l(),pAe=a("span"),vZr=o("FlaxAutoModelForMultipleChoice"),Hze=l(),Er=a("div"),F(H$.$$.fragment),FZr=l(),vf=a("p"),TZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=a("a"),MZr=o("from_pretrained()"),EZr=o(" class method or the "),nre=a("a"),CZr=o("from_config()"),wZr=o(` class
method.`),AZr=l(),U$=a("p"),LZr=o("This class cannot be instantiated directly using "),_Ae=a("code"),yZr=o("__init__()"),xZr=o(" (throws an error)."),$Zr=l(),ea=a("div"),F(J$.$$.fragment),kZr=l(),uAe=a("p"),SZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RZr=l(),Ff=a("p"),PZr=o(`Note:
Loading a model from its configuration file does `),bAe=a("strong"),BZr=o("not"),NZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),IZr=o("from_pretrained()"),qZr=o(" to load the model weights."),jZr=l(),F(gA.$$.fragment),DZr=l(),Yr=a("div"),F(Y$.$$.fragment),GZr=l(),vAe=a("p"),OZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VZr=l(),xn=a("p"),XZr=o("The model class to instantiate is selected based on the "),FAe=a("code"),zZr=o("model_type"),QZr=o(` property of the config object (either
passed as an argument or loaded from `),TAe=a("code"),WZr=o("pretrained_model_name_or_path"),HZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=a("code"),UZr=o("pretrained_model_name_or_path"),JZr=o(":"),YZr=l(),Xe=a("ul"),hA=a("li"),EAe=a("strong"),KZr=o("albert"),ZZr=o(" \u2014 "),lre=a("a"),eet=o("FlaxAlbertForMultipleChoice"),oet=o(" (ALBERT model)"),ret=l(),pA=a("li"),CAe=a("strong"),tet=o("bert"),aet=o(" \u2014 "),ire=a("a"),net=o("FlaxBertForMultipleChoice"),set=o(" (BERT model)"),iet=l(),_A=a("li"),wAe=a("strong"),det=o("big_bird"),cet=o(" \u2014 "),dre=a("a"),fet=o("FlaxBigBirdForMultipleChoice"),met=o(" (BigBird model)"),get=l(),uA=a("li"),AAe=a("strong"),het=o("distilbert"),pet=o(" \u2014 "),cre=a("a"),_et=o("FlaxDistilBertForMultipleChoice"),uet=o(" (DistilBERT model)"),bet=l(),bA=a("li"),LAe=a("strong"),vet=o("electra"),Fet=o(" \u2014 "),fre=a("a"),Tet=o("FlaxElectraForMultipleChoice"),Met=o(" (ELECTRA model)"),Eet=l(),vA=a("li"),yAe=a("strong"),Cet=o("roberta"),wet=o(" \u2014 "),mre=a("a"),Aet=o("FlaxRobertaForMultipleChoice"),Let=o(" (RoBERTa model)"),yet=l(),FA=a("li"),xAe=a("strong"),xet=o("roformer"),$et=o(" \u2014 "),gre=a("a"),ket=o("FlaxRoFormerForMultipleChoice"),Set=o(" (RoFormer model)"),Ret=l(),TA=a("li"),$Ae=a("strong"),Pet=o("xlm-roberta"),Bet=o(" \u2014 "),hre=a("a"),Net=o("FlaxXLMRobertaForMultipleChoice"),Iet=o(" (XLM-RoBERTa model)"),qet=l(),F(MA.$$.fragment),Uze=l(),Tf=a("h2"),EA=a("a"),kAe=a("span"),F(K$.$$.fragment),jet=l(),SAe=a("span"),Det=o("FlaxAutoModelForNextSentencePrediction"),Jze=l(),Cr=a("div"),F(Z$.$$.fragment),Get=l(),Mf=a("p"),Oet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=a("a"),Vet=o("from_pretrained()"),Xet=o(" class method or the "),_re=a("a"),zet=o("from_config()"),Qet=o(` class
method.`),Wet=l(),ek=a("p"),Het=o("This class cannot be instantiated directly using "),RAe=a("code"),Uet=o("__init__()"),Jet=o(" (throws an error)."),Yet=l(),oa=a("div"),F(ok.$$.fragment),Ket=l(),PAe=a("p"),Zet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eot=l(),Ef=a("p"),oot=o(`Note:
Loading a model from its configuration file does `),BAe=a("strong"),rot=o("not"),tot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),aot=o("from_pretrained()"),not=o(" to load the model weights."),sot=l(),F(CA.$$.fragment),lot=l(),Kr=a("div"),F(rk.$$.fragment),iot=l(),NAe=a("p"),dot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cot=l(),$n=a("p"),fot=o("The model class to instantiate is selected based on the "),IAe=a("code"),mot=o("model_type"),got=o(` property of the config object (either
passed as an argument or loaded from `),qAe=a("code"),hot=o("pretrained_model_name_or_path"),pot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=a("code"),_ot=o("pretrained_model_name_or_path"),uot=o(":"),bot=l(),DAe=a("ul"),wA=a("li"),GAe=a("strong"),vot=o("bert"),Fot=o(" \u2014 "),bre=a("a"),Tot=o("FlaxBertForNextSentencePrediction"),Mot=o(" (BERT model)"),Eot=l(),F(AA.$$.fragment),Yze=l(),Cf=a("h2"),LA=a("a"),OAe=a("span"),F(tk.$$.fragment),Cot=l(),VAe=a("span"),wot=o("FlaxAutoModelForImageClassification"),Kze=l(),wr=a("div"),F(ak.$$.fragment),Aot=l(),wf=a("p"),Lot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=a("a"),yot=o("from_pretrained()"),xot=o(" class method or the "),Fre=a("a"),$ot=o("from_config()"),kot=o(` class
method.`),Sot=l(),nk=a("p"),Rot=o("This class cannot be instantiated directly using "),XAe=a("code"),Pot=o("__init__()"),Bot=o(" (throws an error)."),Not=l(),ra=a("div"),F(sk.$$.fragment),Iot=l(),zAe=a("p"),qot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jot=l(),Af=a("p"),Dot=o(`Note:
Loading a model from its configuration file does `),QAe=a("strong"),Got=o("not"),Oot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),Vot=o("from_pretrained()"),Xot=o(" to load the model weights."),zot=l(),F(yA.$$.fragment),Qot=l(),Zr=a("div"),F(lk.$$.fragment),Wot=l(),WAe=a("p"),Hot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uot=l(),kn=a("p"),Jot=o("The model class to instantiate is selected based on the "),HAe=a("code"),Yot=o("model_type"),Kot=o(` property of the config object (either
passed as an argument or loaded from `),UAe=a("code"),Zot=o("pretrained_model_name_or_path"),ert=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=a("code"),ort=o("pretrained_model_name_or_path"),rrt=o(":"),trt=l(),ik=a("ul"),xA=a("li"),YAe=a("strong"),art=o("beit"),nrt=o(" \u2014 "),Mre=a("a"),srt=o("FlaxBeitForImageClassification"),lrt=o(" (BEiT model)"),irt=l(),$A=a("li"),KAe=a("strong"),drt=o("vit"),crt=o(" \u2014 "),Ere=a("a"),frt=o("FlaxViTForImageClassification"),mrt=o(" (ViT model)"),grt=l(),F(kA.$$.fragment),Zze=l(),Lf=a("h2"),SA=a("a"),ZAe=a("span"),F(dk.$$.fragment),hrt=l(),e7e=a("span"),prt=o("FlaxAutoModelForVision2Seq"),eQe=l(),Ar=a("div"),F(ck.$$.fragment),_rt=l(),yf=a("p"),urt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=a("a"),brt=o("from_pretrained()"),vrt=o(" class method or the "),wre=a("a"),Frt=o("from_config()"),Trt=o(` class
method.`),Mrt=l(),fk=a("p"),Ert=o("This class cannot be instantiated directly using "),o7e=a("code"),Crt=o("__init__()"),wrt=o(" (throws an error)."),Art=l(),ta=a("div"),F(mk.$$.fragment),Lrt=l(),r7e=a("p"),yrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xrt=l(),xf=a("p"),$rt=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),krt=o("not"),Srt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),Rrt=o("from_pretrained()"),Prt=o(" to load the model weights."),Brt=l(),F(RA.$$.fragment),Nrt=l(),et=a("div"),F(gk.$$.fragment),Irt=l(),a7e=a("p"),qrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jrt=l(),Sn=a("p"),Drt=o("The model class to instantiate is selected based on the "),n7e=a("code"),Grt=o("model_type"),Ort=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),zrt=o("pretrained_model_name_or_path"),Qrt=o(":"),Wrt=l(),i7e=a("ul"),PA=a("li"),d7e=a("strong"),Hrt=o("vision-encoder-decoder"),Urt=o(" \u2014 "),Lre=a("a"),Jrt=o("FlaxVisionEncoderDecoderModel"),Yrt=o(" (Vision Encoder decoder model)"),Krt=l(),F(BA.$$.fragment),this.h()},l(f){const u=xQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var hk=s(p);m=n(hk,"A",{id:!0,class:!0,href:!0});var c7e=s(m);_=n(c7e,"SPAN",{});var f7e=s(_);T(d.$$.fragment,f7e),f7e.forEach(t),c7e.forEach(t),h=i(hk),Eo=n(hk,"SPAN",{});var m7e=s(Eo);Ai=r(m7e,"Auto Classes"),m7e.forEach(t),hk.forEach(t),Rf=i(f),st=n(f,"P",{});var pk=s(st);Li=r(pk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(pk,"CODE",{});var g7e=s(yi);ey=r(g7e,"from_pretrained()"),g7e.forEach(t),Pf=r(pk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),pk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var h7e=s(Pn);oy=r(h7e,"AutoConfig"),h7e.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var p7e=s(Nn);ry=r(p7e,"AutoModel"),p7e.forEach(t),$i=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var _7e=s(In);ty=r(_7e,"AutoTokenizer"),_7e.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var _k=s(Ae);PS=r(_k,"will create a model that is an instance of "),Si=n(_k,"A",{href:!0});var u7e=s(Si);BS=r(u7e,"BertModel"),u7e.forEach(t),NS=r(_k,"."),_k.forEach(t),Co=i(f),Ra=n(f,"P",{});var uk=s(Ra);IS=r(uk,"There is one class of "),Nf=n(uk,"CODE",{});var b7e=s(Nf);qS=r(b7e,"AutoModel"),b7e.forEach(t),fHe=r(uk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uk.forEach(t),JVe=i(f),Ri=n(f,"H2",{class:!0});var bk=s(Ri);If=n(bk,"A",{id:!0,class:!0,href:!0});var v7e=s(If);Mae=n(v7e,"SPAN",{});var F7e=s(Mae);T(ay.$$.fragment,F7e),F7e.forEach(t),v7e.forEach(t),mHe=i(bk),Eae=n(bk,"SPAN",{});var T7e=s(Eae);gHe=r(T7e,"Extending the Auto Classes"),T7e.forEach(t),bk.forEach(t),YVe=i(f),qn=n(f,"P",{});var $f=s(qn);hHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cae=n($f,"CODE",{});var M7e=s(Cae);pHe=r(M7e,"NewModel"),M7e.forEach(t),_He=r($f,", make sure you have a "),wae=n($f,"CODE",{});var E7e=s(wae);uHe=r(E7e,"NewModelConfig"),E7e.forEach(t),bHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),KVe=i(f),T(ny.$$.fragment,f),ZVe=i(f),jS=n(f,"P",{});var C7e=s(jS);vHe=r(C7e,"You will then be able to use the auto classes like you would usually do!"),C7e.forEach(t),eXe=i(f),T(qf.$$.fragment,f),oXe=i(f),Pi=n(f,"H2",{class:!0});var vk=s(Pi);jf=n(vk,"A",{id:!0,class:!0,href:!0});var w7e=s(jf);Aae=n(w7e,"SPAN",{});var A7e=s(Aae);T(sy.$$.fragment,A7e),A7e.forEach(t),w7e.forEach(t),FHe=i(vk),Lae=n(vk,"SPAN",{});var L7e=s(Lae);THe=r(L7e,"AutoConfig"),L7e.forEach(t),vk.forEach(t),rXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(ly.$$.fragment,at),MHe=i(at),iy=n(at,"P",{});var Fk=s(iy);EHe=r(Fk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),DS=n(Fk,"A",{href:!0});var y7e=s(DS);CHe=r(y7e,"from_pretrained()"),y7e.forEach(t),wHe=r(Fk," class method."),Fk.forEach(t),AHe=i(at),dy=n(at,"P",{});var Tk=s(dy);LHe=r(Tk,"This class cannot be instantiated directly using "),yae=n(Tk,"CODE",{});var x7e=s(yae);yHe=r(x7e,"__init__()"),x7e.forEach(t),xHe=r(Tk," (throws an error)."),Tk.forEach(t),$He=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(cy.$$.fragment,nt),kHe=i(nt),xae=n(nt,"P",{});var $7e=s(xae);SHe=r($7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$7e.forEach(t),RHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);PHe=r(kf,"The configuration class to instantiate is selected based on the "),$ae=n(kf,"CODE",{});var k7e=s($ae);BHe=r(k7e,"model_type"),k7e.forEach(t),NHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kae=n(kf,"CODE",{});var S7e=s(kae);IHe=r(S7e,"pretrained_model_name_or_path"),S7e.forEach(t),qHe=r(kf,":"),kf.forEach(t),jHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var NA=s(Df);Sae=n(NA,"STRONG",{});var R7e=s(Sae);DHe=r(R7e,"albert"),R7e.forEach(t),GHe=r(NA," \u2014 "),GS=n(NA,"A",{href:!0});var P7e=s(GS);OHe=r(P7e,"AlbertConfig"),P7e.forEach(t),VHe=r(NA," (ALBERT model)"),NA.forEach(t),XHe=i(L),Gf=n(L,"LI",{});var IA=s(Gf);Rae=n(IA,"STRONG",{});var B7e=s(Rae);zHe=r(B7e,"bart"),B7e.forEach(t),QHe=r(IA," \u2014 "),OS=n(IA,"A",{href:!0});var N7e=s(OS);WHe=r(N7e,"BartConfig"),N7e.forEach(t),HHe=r(IA," (BART model)"),IA.forEach(t),UHe=i(L),Of=n(L,"LI",{});var qA=s(Of);Pae=n(qA,"STRONG",{});var I7e=s(Pae);JHe=r(I7e,"beit"),I7e.forEach(t),YHe=r(qA," \u2014 "),VS=n(qA,"A",{href:!0});var q7e=s(VS);KHe=r(q7e,"BeitConfig"),q7e.forEach(t),ZHe=r(qA," (BEiT model)"),qA.forEach(t),eUe=i(L),Vf=n(L,"LI",{});var jA=s(Vf);Bae=n(jA,"STRONG",{});var j7e=s(Bae);oUe=r(j7e,"bert"),j7e.forEach(t),rUe=r(jA," \u2014 "),XS=n(jA,"A",{href:!0});var D7e=s(XS);tUe=r(D7e,"BertConfig"),D7e.forEach(t),aUe=r(jA," (BERT model)"),jA.forEach(t),nUe=i(L),Xf=n(L,"LI",{});var DA=s(Xf);Nae=n(DA,"STRONG",{});var G7e=s(Nae);sUe=r(G7e,"bert-generation"),G7e.forEach(t),lUe=r(DA," \u2014 "),zS=n(DA,"A",{href:!0});var O7e=s(zS);iUe=r(O7e,"BertGenerationConfig"),O7e.forEach(t),dUe=r(DA," (Bert Generation model)"),DA.forEach(t),cUe=i(L),zf=n(L,"LI",{});var GA=s(zf);Iae=n(GA,"STRONG",{});var V7e=s(Iae);fUe=r(V7e,"big_bird"),V7e.forEach(t),mUe=r(GA," \u2014 "),QS=n(GA,"A",{href:!0});var X7e=s(QS);gUe=r(X7e,"BigBirdConfig"),X7e.forEach(t),hUe=r(GA," (BigBird model)"),GA.forEach(t),pUe=i(L),Qf=n(L,"LI",{});var OA=s(Qf);qae=n(OA,"STRONG",{});var z7e=s(qae);_Ue=r(z7e,"bigbird_pegasus"),z7e.forEach(t),uUe=r(OA," \u2014 "),WS=n(OA,"A",{href:!0});var Q7e=s(WS);bUe=r(Q7e,"BigBirdPegasusConfig"),Q7e.forEach(t),vUe=r(OA," (BigBird-Pegasus model)"),OA.forEach(t),FUe=i(L),Wf=n(L,"LI",{});var VA=s(Wf);jae=n(VA,"STRONG",{});var W7e=s(jae);TUe=r(W7e,"blenderbot"),W7e.forEach(t),MUe=r(VA," \u2014 "),HS=n(VA,"A",{href:!0});var H7e=s(HS);EUe=r(H7e,"BlenderbotConfig"),H7e.forEach(t),CUe=r(VA," (Blenderbot model)"),VA.forEach(t),wUe=i(L),Hf=n(L,"LI",{});var XA=s(Hf);Dae=n(XA,"STRONG",{});var U7e=s(Dae);AUe=r(U7e,"blenderbot-small"),U7e.forEach(t),LUe=r(XA," \u2014 "),US=n(XA,"A",{href:!0});var J7e=s(US);yUe=r(J7e,"BlenderbotSmallConfig"),J7e.forEach(t),xUe=r(XA," (BlenderbotSmall model)"),XA.forEach(t),$Ue=i(L),Uf=n(L,"LI",{});var zA=s(Uf);Gae=n(zA,"STRONG",{});var Y7e=s(Gae);kUe=r(Y7e,"bloom"),Y7e.forEach(t),SUe=r(zA," \u2014 "),JS=n(zA,"A",{href:!0});var K7e=s(JS);RUe=r(K7e,"BloomConfig"),K7e.forEach(t),PUe=r(zA," (BLOOM model)"),zA.forEach(t),BUe=i(L),Jf=n(L,"LI",{});var QA=s(Jf);Oae=n(QA,"STRONG",{});var Z7e=s(Oae);NUe=r(Z7e,"camembert"),Z7e.forEach(t),IUe=r(QA," \u2014 "),YS=n(QA,"A",{href:!0});var eLe=s(YS);qUe=r(eLe,"CamembertConfig"),eLe.forEach(t),jUe=r(QA," (CamemBERT model)"),QA.forEach(t),DUe=i(L),Yf=n(L,"LI",{});var WA=s(Yf);Vae=n(WA,"STRONG",{});var oLe=s(Vae);GUe=r(oLe,"canine"),oLe.forEach(t),OUe=r(WA," \u2014 "),KS=n(WA,"A",{href:!0});var rLe=s(KS);VUe=r(rLe,"CanineConfig"),rLe.forEach(t),XUe=r(WA," (CANINE model)"),WA.forEach(t),zUe=i(L),Kf=n(L,"LI",{});var HA=s(Kf);Xae=n(HA,"STRONG",{});var tLe=s(Xae);QUe=r(tLe,"clip"),tLe.forEach(t),WUe=r(HA," \u2014 "),ZS=n(HA,"A",{href:!0});var aLe=s(ZS);HUe=r(aLe,"CLIPConfig"),aLe.forEach(t),UUe=r(HA," (CLIP model)"),HA.forEach(t),JUe=i(L),Zf=n(L,"LI",{});var UA=s(Zf);zae=n(UA,"STRONG",{});var nLe=s(zae);YUe=r(nLe,"codegen"),nLe.forEach(t),KUe=r(UA," \u2014 "),eR=n(UA,"A",{href:!0});var sLe=s(eR);ZUe=r(sLe,"CodeGenConfig"),sLe.forEach(t),eJe=r(UA," (CodeGen model)"),UA.forEach(t),oJe=i(L),em=n(L,"LI",{});var JA=s(em);Qae=n(JA,"STRONG",{});var lLe=s(Qae);rJe=r(lLe,"convbert"),lLe.forEach(t),tJe=r(JA," \u2014 "),oR=n(JA,"A",{href:!0});var iLe=s(oR);aJe=r(iLe,"ConvBertConfig"),iLe.forEach(t),nJe=r(JA," (ConvBERT model)"),JA.forEach(t),sJe=i(L),om=n(L,"LI",{});var YA=s(om);Wae=n(YA,"STRONG",{});var dLe=s(Wae);lJe=r(dLe,"convnext"),dLe.forEach(t),iJe=r(YA," \u2014 "),rR=n(YA,"A",{href:!0});var cLe=s(rR);dJe=r(cLe,"ConvNextConfig"),cLe.forEach(t),cJe=r(YA," (ConvNeXT model)"),YA.forEach(t),fJe=i(L),rm=n(L,"LI",{});var KA=s(rm);Hae=n(KA,"STRONG",{});var fLe=s(Hae);mJe=r(fLe,"ctrl"),fLe.forEach(t),gJe=r(KA," \u2014 "),tR=n(KA,"A",{href:!0});var mLe=s(tR);hJe=r(mLe,"CTRLConfig"),mLe.forEach(t),pJe=r(KA," (CTRL model)"),KA.forEach(t),_Je=i(L),tm=n(L,"LI",{});var ZA=s(tm);Uae=n(ZA,"STRONG",{});var gLe=s(Uae);uJe=r(gLe,"cvt"),gLe.forEach(t),bJe=r(ZA," \u2014 "),aR=n(ZA,"A",{href:!0});var hLe=s(aR);vJe=r(hLe,"CvtConfig"),hLe.forEach(t),FJe=r(ZA," (CvT model)"),ZA.forEach(t),TJe=i(L),am=n(L,"LI",{});var e7=s(am);Jae=n(e7,"STRONG",{});var pLe=s(Jae);MJe=r(pLe,"data2vec-audio"),pLe.forEach(t),EJe=r(e7," \u2014 "),nR=n(e7,"A",{href:!0});var _Le=s(nR);CJe=r(_Le,"Data2VecAudioConfig"),_Le.forEach(t),wJe=r(e7," (Data2VecAudio model)"),e7.forEach(t),AJe=i(L),nm=n(L,"LI",{});var o7=s(nm);Yae=n(o7,"STRONG",{});var uLe=s(Yae);LJe=r(uLe,"data2vec-text"),uLe.forEach(t),yJe=r(o7," \u2014 "),sR=n(o7,"A",{href:!0});var bLe=s(sR);xJe=r(bLe,"Data2VecTextConfig"),bLe.forEach(t),$Je=r(o7," (Data2VecText model)"),o7.forEach(t),kJe=i(L),sm=n(L,"LI",{});var r7=s(sm);Kae=n(r7,"STRONG",{});var vLe=s(Kae);SJe=r(vLe,"data2vec-vision"),vLe.forEach(t),RJe=r(r7," \u2014 "),lR=n(r7,"A",{href:!0});var FLe=s(lR);PJe=r(FLe,"Data2VecVisionConfig"),FLe.forEach(t),BJe=r(r7," (Data2VecVision model)"),r7.forEach(t),NJe=i(L),lm=n(L,"LI",{});var t7=s(lm);Zae=n(t7,"STRONG",{});var TLe=s(Zae);IJe=r(TLe,"deberta"),TLe.forEach(t),qJe=r(t7," \u2014 "),iR=n(t7,"A",{href:!0});var MLe=s(iR);jJe=r(MLe,"DebertaConfig"),MLe.forEach(t),DJe=r(t7," (DeBERTa model)"),t7.forEach(t),GJe=i(L),im=n(L,"LI",{});var a7=s(im);ene=n(a7,"STRONG",{});var ELe=s(ene);OJe=r(ELe,"deberta-v2"),ELe.forEach(t),VJe=r(a7," \u2014 "),dR=n(a7,"A",{href:!0});var CLe=s(dR);XJe=r(CLe,"DebertaV2Config"),CLe.forEach(t),zJe=r(a7," (DeBERTa-v2 model)"),a7.forEach(t),QJe=i(L),dm=n(L,"LI",{});var n7=s(dm);one=n(n7,"STRONG",{});var ett=s(one);WJe=r(ett,"decision_transformer"),ett.forEach(t),HJe=r(n7," \u2014 "),cR=n(n7,"A",{href:!0});var ott=s(cR);UJe=r(ott,"DecisionTransformerConfig"),ott.forEach(t),JJe=r(n7," (Decision Transformer model)"),n7.forEach(t),YJe=i(L),cm=n(L,"LI",{});var wLe=s(cm);rne=n(wLe,"STRONG",{});var rtt=s(rne);KJe=r(rtt,"deit"),rtt.forEach(t),ZJe=r(wLe," \u2014 "),fR=n(wLe,"A",{href:!0});var ttt=s(fR);eYe=r(ttt,"DeiTConfig"),ttt.forEach(t),oYe=r(wLe," (DeiT model)"),wLe.forEach(t),rYe=i(L),fm=n(L,"LI",{});var ALe=s(fm);tne=n(ALe,"STRONG",{});var att=s(tne);tYe=r(att,"detr"),att.forEach(t),aYe=r(ALe," \u2014 "),mR=n(ALe,"A",{href:!0});var ntt=s(mR);nYe=r(ntt,"DetrConfig"),ntt.forEach(t),sYe=r(ALe," (DETR model)"),ALe.forEach(t),lYe=i(L),mm=n(L,"LI",{});var LLe=s(mm);ane=n(LLe,"STRONG",{});var stt=s(ane);iYe=r(stt,"distilbert"),stt.forEach(t),dYe=r(LLe," \u2014 "),gR=n(LLe,"A",{href:!0});var ltt=s(gR);cYe=r(ltt,"DistilBertConfig"),ltt.forEach(t),fYe=r(LLe," (DistilBERT model)"),LLe.forEach(t),mYe=i(L),gm=n(L,"LI",{});var yLe=s(gm);nne=n(yLe,"STRONG",{});var itt=s(nne);gYe=r(itt,"dpr"),itt.forEach(t),hYe=r(yLe," \u2014 "),hR=n(yLe,"A",{href:!0});var dtt=s(hR);pYe=r(dtt,"DPRConfig"),dtt.forEach(t),_Ye=r(yLe," (DPR model)"),yLe.forEach(t),uYe=i(L),hm=n(L,"LI",{});var xLe=s(hm);sne=n(xLe,"STRONG",{});var ctt=s(sne);bYe=r(ctt,"dpt"),ctt.forEach(t),vYe=r(xLe," \u2014 "),pR=n(xLe,"A",{href:!0});var ftt=s(pR);FYe=r(ftt,"DPTConfig"),ftt.forEach(t),TYe=r(xLe," (DPT model)"),xLe.forEach(t),MYe=i(L),pm=n(L,"LI",{});var $Le=s(pm);lne=n($Le,"STRONG",{});var mtt=s(lne);EYe=r(mtt,"electra"),mtt.forEach(t),CYe=r($Le," \u2014 "),_R=n($Le,"A",{href:!0});var gtt=s(_R);wYe=r(gtt,"ElectraConfig"),gtt.forEach(t),AYe=r($Le," (ELECTRA model)"),$Le.forEach(t),LYe=i(L),_m=n(L,"LI",{});var kLe=s(_m);ine=n(kLe,"STRONG",{});var htt=s(ine);yYe=r(htt,"encoder-decoder"),htt.forEach(t),xYe=r(kLe," \u2014 "),uR=n(kLe,"A",{href:!0});var ptt=s(uR);$Ye=r(ptt,"EncoderDecoderConfig"),ptt.forEach(t),kYe=r(kLe," (Encoder decoder model)"),kLe.forEach(t),SYe=i(L),um=n(L,"LI",{});var SLe=s(um);dne=n(SLe,"STRONG",{});var _tt=s(dne);RYe=r(_tt,"flaubert"),_tt.forEach(t),PYe=r(SLe," \u2014 "),bR=n(SLe,"A",{href:!0});var utt=s(bR);BYe=r(utt,"FlaubertConfig"),utt.forEach(t),NYe=r(SLe," (FlauBERT model)"),SLe.forEach(t),IYe=i(L),bm=n(L,"LI",{});var RLe=s(bm);cne=n(RLe,"STRONG",{});var btt=s(cne);qYe=r(btt,"flava"),btt.forEach(t),jYe=r(RLe," \u2014 "),vR=n(RLe,"A",{href:!0});var vtt=s(vR);DYe=r(vtt,"FlavaConfig"),vtt.forEach(t),GYe=r(RLe," (FLAVA model)"),RLe.forEach(t),OYe=i(L),vm=n(L,"LI",{});var PLe=s(vm);fne=n(PLe,"STRONG",{});var Ftt=s(fne);VYe=r(Ftt,"fnet"),Ftt.forEach(t),XYe=r(PLe," \u2014 "),FR=n(PLe,"A",{href:!0});var Ttt=s(FR);zYe=r(Ttt,"FNetConfig"),Ttt.forEach(t),QYe=r(PLe," (FNet model)"),PLe.forEach(t),WYe=i(L),Fm=n(L,"LI",{});var BLe=s(Fm);mne=n(BLe,"STRONG",{});var Mtt=s(mne);HYe=r(Mtt,"fsmt"),Mtt.forEach(t),UYe=r(BLe," \u2014 "),TR=n(BLe,"A",{href:!0});var Ett=s(TR);JYe=r(Ett,"FSMTConfig"),Ett.forEach(t),YYe=r(BLe," (FairSeq Machine-Translation model)"),BLe.forEach(t),KYe=i(L),Tm=n(L,"LI",{});var NLe=s(Tm);gne=n(NLe,"STRONG",{});var Ctt=s(gne);ZYe=r(Ctt,"funnel"),Ctt.forEach(t),eKe=r(NLe," \u2014 "),MR=n(NLe,"A",{href:!0});var wtt=s(MR);oKe=r(wtt,"FunnelConfig"),wtt.forEach(t),rKe=r(NLe," (Funnel Transformer model)"),NLe.forEach(t),tKe=i(L),Mm=n(L,"LI",{});var ILe=s(Mm);hne=n(ILe,"STRONG",{});var Att=s(hne);aKe=r(Att,"glpn"),Att.forEach(t),nKe=r(ILe," \u2014 "),ER=n(ILe,"A",{href:!0});var Ltt=s(ER);sKe=r(Ltt,"GLPNConfig"),Ltt.forEach(t),lKe=r(ILe," (GLPN model)"),ILe.forEach(t),iKe=i(L),Em=n(L,"LI",{});var qLe=s(Em);pne=n(qLe,"STRONG",{});var ytt=s(pne);dKe=r(ytt,"gpt2"),ytt.forEach(t),cKe=r(qLe," \u2014 "),CR=n(qLe,"A",{href:!0});var xtt=s(CR);fKe=r(xtt,"GPT2Config"),xtt.forEach(t),mKe=r(qLe," (OpenAI GPT-2 model)"),qLe.forEach(t),gKe=i(L),Cm=n(L,"LI",{});var jLe=s(Cm);_ne=n(jLe,"STRONG",{});var $tt=s(_ne);hKe=r($tt,"gpt_neo"),$tt.forEach(t),pKe=r(jLe," \u2014 "),wR=n(jLe,"A",{href:!0});var ktt=s(wR);_Ke=r(ktt,"GPTNeoConfig"),ktt.forEach(t),uKe=r(jLe," (GPT Neo model)"),jLe.forEach(t),bKe=i(L),wm=n(L,"LI",{});var DLe=s(wm);une=n(DLe,"STRONG",{});var Stt=s(une);vKe=r(Stt,"gpt_neox"),Stt.forEach(t),FKe=r(DLe," \u2014 "),AR=n(DLe,"A",{href:!0});var Rtt=s(AR);TKe=r(Rtt,"GPTNeoXConfig"),Rtt.forEach(t),MKe=r(DLe," (GPT NeoX model)"),DLe.forEach(t),EKe=i(L),Am=n(L,"LI",{});var GLe=s(Am);bne=n(GLe,"STRONG",{});var Ptt=s(bne);CKe=r(Ptt,"gptj"),Ptt.forEach(t),wKe=r(GLe," \u2014 "),LR=n(GLe,"A",{href:!0});var Btt=s(LR);AKe=r(Btt,"GPTJConfig"),Btt.forEach(t),LKe=r(GLe," (GPT-J model)"),GLe.forEach(t),yKe=i(L),Lm=n(L,"LI",{});var OLe=s(Lm);vne=n(OLe,"STRONG",{});var Ntt=s(vne);xKe=r(Ntt,"groupvit"),Ntt.forEach(t),$Ke=r(OLe," \u2014 "),yR=n(OLe,"A",{href:!0});var Itt=s(yR);kKe=r(Itt,"GroupViTConfig"),Itt.forEach(t),SKe=r(OLe," (GroupViT model)"),OLe.forEach(t),RKe=i(L),ym=n(L,"LI",{});var VLe=s(ym);Fne=n(VLe,"STRONG",{});var qtt=s(Fne);PKe=r(qtt,"hubert"),qtt.forEach(t),BKe=r(VLe," \u2014 "),xR=n(VLe,"A",{href:!0});var jtt=s(xR);NKe=r(jtt,"HubertConfig"),jtt.forEach(t),IKe=r(VLe," (Hubert model)"),VLe.forEach(t),qKe=i(L),xm=n(L,"LI",{});var XLe=s(xm);Tne=n(XLe,"STRONG",{});var Dtt=s(Tne);jKe=r(Dtt,"ibert"),Dtt.forEach(t),DKe=r(XLe," \u2014 "),$R=n(XLe,"A",{href:!0});var Gtt=s($R);GKe=r(Gtt,"IBertConfig"),Gtt.forEach(t),OKe=r(XLe," (I-BERT model)"),XLe.forEach(t),VKe=i(L),$m=n(L,"LI",{});var zLe=s($m);Mne=n(zLe,"STRONG",{});var Ott=s(Mne);XKe=r(Ott,"imagegpt"),Ott.forEach(t),zKe=r(zLe," \u2014 "),kR=n(zLe,"A",{href:!0});var Vtt=s(kR);QKe=r(Vtt,"ImageGPTConfig"),Vtt.forEach(t),WKe=r(zLe," (ImageGPT model)"),zLe.forEach(t),HKe=i(L),km=n(L,"LI",{});var QLe=s(km);Ene=n(QLe,"STRONG",{});var Xtt=s(Ene);UKe=r(Xtt,"layoutlm"),Xtt.forEach(t),JKe=r(QLe," \u2014 "),SR=n(QLe,"A",{href:!0});var ztt=s(SR);YKe=r(ztt,"LayoutLMConfig"),ztt.forEach(t),KKe=r(QLe," (LayoutLM model)"),QLe.forEach(t),ZKe=i(L),Sm=n(L,"LI",{});var WLe=s(Sm);Cne=n(WLe,"STRONG",{});var Qtt=s(Cne);eZe=r(Qtt,"layoutlmv2"),Qtt.forEach(t),oZe=r(WLe," \u2014 "),RR=n(WLe,"A",{href:!0});var Wtt=s(RR);rZe=r(Wtt,"LayoutLMv2Config"),Wtt.forEach(t),tZe=r(WLe," (LayoutLMv2 model)"),WLe.forEach(t),aZe=i(L),Rm=n(L,"LI",{});var HLe=s(Rm);wne=n(HLe,"STRONG",{});var Htt=s(wne);nZe=r(Htt,"layoutlmv3"),Htt.forEach(t),sZe=r(HLe," \u2014 "),PR=n(HLe,"A",{href:!0});var Utt=s(PR);lZe=r(Utt,"LayoutLMv3Config"),Utt.forEach(t),iZe=r(HLe," (LayoutLMv3 model)"),HLe.forEach(t),dZe=i(L),Pm=n(L,"LI",{});var ULe=s(Pm);Ane=n(ULe,"STRONG",{});var Jtt=s(Ane);cZe=r(Jtt,"led"),Jtt.forEach(t),fZe=r(ULe," \u2014 "),BR=n(ULe,"A",{href:!0});var Ytt=s(BR);mZe=r(Ytt,"LEDConfig"),Ytt.forEach(t),gZe=r(ULe," (LED model)"),ULe.forEach(t),hZe=i(L),Bm=n(L,"LI",{});var JLe=s(Bm);Lne=n(JLe,"STRONG",{});var Ktt=s(Lne);pZe=r(Ktt,"levit"),Ktt.forEach(t),_Ze=r(JLe," \u2014 "),NR=n(JLe,"A",{href:!0});var Ztt=s(NR);uZe=r(Ztt,"LevitConfig"),Ztt.forEach(t),bZe=r(JLe," (LeViT model)"),JLe.forEach(t),vZe=i(L),Nm=n(L,"LI",{});var YLe=s(Nm);yne=n(YLe,"STRONG",{});var eat=s(yne);FZe=r(eat,"longformer"),eat.forEach(t),TZe=r(YLe," \u2014 "),IR=n(YLe,"A",{href:!0});var oat=s(IR);MZe=r(oat,"LongformerConfig"),oat.forEach(t),EZe=r(YLe," (Longformer model)"),YLe.forEach(t),CZe=i(L),Im=n(L,"LI",{});var KLe=s(Im);xne=n(KLe,"STRONG",{});var rat=s(xne);wZe=r(rat,"longt5"),rat.forEach(t),AZe=r(KLe," \u2014 "),qR=n(KLe,"A",{href:!0});var tat=s(qR);LZe=r(tat,"LongT5Config"),tat.forEach(t),yZe=r(KLe," (LongT5 model)"),KLe.forEach(t),xZe=i(L),qm=n(L,"LI",{});var ZLe=s(qm);$ne=n(ZLe,"STRONG",{});var aat=s($ne);$Ze=r(aat,"luke"),aat.forEach(t),kZe=r(ZLe," \u2014 "),jR=n(ZLe,"A",{href:!0});var nat=s(jR);SZe=r(nat,"LukeConfig"),nat.forEach(t),RZe=r(ZLe," (LUKE model)"),ZLe.forEach(t),PZe=i(L),jm=n(L,"LI",{});var eye=s(jm);kne=n(eye,"STRONG",{});var sat=s(kne);BZe=r(sat,"lxmert"),sat.forEach(t),NZe=r(eye," \u2014 "),DR=n(eye,"A",{href:!0});var lat=s(DR);IZe=r(lat,"LxmertConfig"),lat.forEach(t),qZe=r(eye," (LXMERT model)"),eye.forEach(t),jZe=i(L),Dm=n(L,"LI",{});var oye=s(Dm);Sne=n(oye,"STRONG",{});var iat=s(Sne);DZe=r(iat,"m2m_100"),iat.forEach(t),GZe=r(oye," \u2014 "),GR=n(oye,"A",{href:!0});var dat=s(GR);OZe=r(dat,"M2M100Config"),dat.forEach(t),VZe=r(oye," (M2M100 model)"),oye.forEach(t),XZe=i(L),Gm=n(L,"LI",{});var rye=s(Gm);Rne=n(rye,"STRONG",{});var cat=s(Rne);zZe=r(cat,"marian"),cat.forEach(t),QZe=r(rye," \u2014 "),OR=n(rye,"A",{href:!0});var fat=s(OR);WZe=r(fat,"MarianConfig"),fat.forEach(t),HZe=r(rye," (Marian model)"),rye.forEach(t),UZe=i(L),Om=n(L,"LI",{});var tye=s(Om);Pne=n(tye,"STRONG",{});var mat=s(Pne);JZe=r(mat,"maskformer"),mat.forEach(t),YZe=r(tye," \u2014 "),VR=n(tye,"A",{href:!0});var gat=s(VR);KZe=r(gat,"MaskFormerConfig"),gat.forEach(t),ZZe=r(tye," (MaskFormer model)"),tye.forEach(t),eeo=i(L),Vm=n(L,"LI",{});var aye=s(Vm);Bne=n(aye,"STRONG",{});var hat=s(Bne);oeo=r(hat,"mbart"),hat.forEach(t),reo=r(aye," \u2014 "),XR=n(aye,"A",{href:!0});var pat=s(XR);teo=r(pat,"MBartConfig"),pat.forEach(t),aeo=r(aye," (mBART model)"),aye.forEach(t),neo=i(L),Xm=n(L,"LI",{});var nye=s(Xm);Nne=n(nye,"STRONG",{});var _at=s(Nne);seo=r(_at,"mctct"),_at.forEach(t),leo=r(nye," \u2014 "),zR=n(nye,"A",{href:!0});var uat=s(zR);ieo=r(uat,"MCTCTConfig"),uat.forEach(t),deo=r(nye," (M-CTC-T model)"),nye.forEach(t),ceo=i(L),zm=n(L,"LI",{});var sye=s(zm);Ine=n(sye,"STRONG",{});var bat=s(Ine);feo=r(bat,"megatron-bert"),bat.forEach(t),meo=r(sye," \u2014 "),QR=n(sye,"A",{href:!0});var vat=s(QR);geo=r(vat,"MegatronBertConfig"),vat.forEach(t),heo=r(sye," (Megatron-BERT model)"),sye.forEach(t),peo=i(L),Qm=n(L,"LI",{});var lye=s(Qm);qne=n(lye,"STRONG",{});var Fat=s(qne);_eo=r(Fat,"mobilebert"),Fat.forEach(t),ueo=r(lye," \u2014 "),WR=n(lye,"A",{href:!0});var Tat=s(WR);beo=r(Tat,"MobileBertConfig"),Tat.forEach(t),veo=r(lye," (MobileBERT model)"),lye.forEach(t),Feo=i(L),Wm=n(L,"LI",{});var iye=s(Wm);jne=n(iye,"STRONG",{});var Mat=s(jne);Teo=r(Mat,"mobilevit"),Mat.forEach(t),Meo=r(iye," \u2014 "),HR=n(iye,"A",{href:!0});var Eat=s(HR);Eeo=r(Eat,"MobileViTConfig"),Eat.forEach(t),Ceo=r(iye," (MobileViT model)"),iye.forEach(t),weo=i(L),Hm=n(L,"LI",{});var dye=s(Hm);Dne=n(dye,"STRONG",{});var Cat=s(Dne);Aeo=r(Cat,"mpnet"),Cat.forEach(t),Leo=r(dye," \u2014 "),UR=n(dye,"A",{href:!0});var wat=s(UR);yeo=r(wat,"MPNetConfig"),wat.forEach(t),xeo=r(dye," (MPNet model)"),dye.forEach(t),$eo=i(L),Um=n(L,"LI",{});var cye=s(Um);Gne=n(cye,"STRONG",{});var Aat=s(Gne);keo=r(Aat,"mt5"),Aat.forEach(t),Seo=r(cye," \u2014 "),JR=n(cye,"A",{href:!0});var Lat=s(JR);Reo=r(Lat,"MT5Config"),Lat.forEach(t),Peo=r(cye," (MT5 model)"),cye.forEach(t),Beo=i(L),Jm=n(L,"LI",{});var fye=s(Jm);One=n(fye,"STRONG",{});var yat=s(One);Neo=r(yat,"mvp"),yat.forEach(t),Ieo=r(fye," \u2014 "),YR=n(fye,"A",{href:!0});var xat=s(YR);qeo=r(xat,"MvpConfig"),xat.forEach(t),jeo=r(fye," (MVP model)"),fye.forEach(t),Deo=i(L),Ym=n(L,"LI",{});var mye=s(Ym);Vne=n(mye,"STRONG",{});var $at=s(Vne);Geo=r($at,"nezha"),$at.forEach(t),Oeo=r(mye," \u2014 "),KR=n(mye,"A",{href:!0});var kat=s(KR);Veo=r(kat,"NezhaConfig"),kat.forEach(t),Xeo=r(mye," (Nezha model)"),mye.forEach(t),zeo=i(L),Km=n(L,"LI",{});var gye=s(Km);Xne=n(gye,"STRONG",{});var Sat=s(Xne);Qeo=r(Sat,"nystromformer"),Sat.forEach(t),Weo=r(gye," \u2014 "),ZR=n(gye,"A",{href:!0});var Rat=s(ZR);Heo=r(Rat,"NystromformerConfig"),Rat.forEach(t),Ueo=r(gye," (Nystr\xF6mformer model)"),gye.forEach(t),Jeo=i(L),Zm=n(L,"LI",{});var hye=s(Zm);zne=n(hye,"STRONG",{});var Pat=s(zne);Yeo=r(Pat,"openai-gpt"),Pat.forEach(t),Keo=r(hye," \u2014 "),eP=n(hye,"A",{href:!0});var Bat=s(eP);Zeo=r(Bat,"OpenAIGPTConfig"),Bat.forEach(t),eoo=r(hye," (OpenAI GPT model)"),hye.forEach(t),ooo=i(L),eg=n(L,"LI",{});var pye=s(eg);Qne=n(pye,"STRONG",{});var Nat=s(Qne);roo=r(Nat,"opt"),Nat.forEach(t),too=r(pye," \u2014 "),oP=n(pye,"A",{href:!0});var Iat=s(oP);aoo=r(Iat,"OPTConfig"),Iat.forEach(t),noo=r(pye," (OPT model)"),pye.forEach(t),soo=i(L),og=n(L,"LI",{});var _ye=s(og);Wne=n(_ye,"STRONG",{});var qat=s(Wne);loo=r(qat,"pegasus"),qat.forEach(t),ioo=r(_ye," \u2014 "),rP=n(_ye,"A",{href:!0});var jat=s(rP);doo=r(jat,"PegasusConfig"),jat.forEach(t),coo=r(_ye," (Pegasus model)"),_ye.forEach(t),foo=i(L),rg=n(L,"LI",{});var uye=s(rg);Hne=n(uye,"STRONG",{});var Dat=s(Hne);moo=r(Dat,"perceiver"),Dat.forEach(t),goo=r(uye," \u2014 "),tP=n(uye,"A",{href:!0});var Gat=s(tP);hoo=r(Gat,"PerceiverConfig"),Gat.forEach(t),poo=r(uye," (Perceiver model)"),uye.forEach(t),_oo=i(L),tg=n(L,"LI",{});var bye=s(tg);Une=n(bye,"STRONG",{});var Oat=s(Une);uoo=r(Oat,"plbart"),Oat.forEach(t),boo=r(bye," \u2014 "),aP=n(bye,"A",{href:!0});var Vat=s(aP);voo=r(Vat,"PLBartConfig"),Vat.forEach(t),Foo=r(bye," (PLBart model)"),bye.forEach(t),Too=i(L),ag=n(L,"LI",{});var vye=s(ag);Jne=n(vye,"STRONG",{});var Xat=s(Jne);Moo=r(Xat,"poolformer"),Xat.forEach(t),Eoo=r(vye," \u2014 "),nP=n(vye,"A",{href:!0});var zat=s(nP);Coo=r(zat,"PoolFormerConfig"),zat.forEach(t),woo=r(vye," (PoolFormer model)"),vye.forEach(t),Aoo=i(L),ng=n(L,"LI",{});var Fye=s(ng);Yne=n(Fye,"STRONG",{});var Qat=s(Yne);Loo=r(Qat,"prophetnet"),Qat.forEach(t),yoo=r(Fye," \u2014 "),sP=n(Fye,"A",{href:!0});var Wat=s(sP);xoo=r(Wat,"ProphetNetConfig"),Wat.forEach(t),$oo=r(Fye," (ProphetNet model)"),Fye.forEach(t),koo=i(L),sg=n(L,"LI",{});var Tye=s(sg);Kne=n(Tye,"STRONG",{});var Hat=s(Kne);Soo=r(Hat,"qdqbert"),Hat.forEach(t),Roo=r(Tye," \u2014 "),lP=n(Tye,"A",{href:!0});var Uat=s(lP);Poo=r(Uat,"QDQBertConfig"),Uat.forEach(t),Boo=r(Tye," (QDQBert model)"),Tye.forEach(t),Noo=i(L),lg=n(L,"LI",{});var Mye=s(lg);Zne=n(Mye,"STRONG",{});var Jat=s(Zne);Ioo=r(Jat,"rag"),Jat.forEach(t),qoo=r(Mye," \u2014 "),iP=n(Mye,"A",{href:!0});var Yat=s(iP);joo=r(Yat,"RagConfig"),Yat.forEach(t),Doo=r(Mye," (RAG model)"),Mye.forEach(t),Goo=i(L),ig=n(L,"LI",{});var Eye=s(ig);ese=n(Eye,"STRONG",{});var Kat=s(ese);Ooo=r(Kat,"realm"),Kat.forEach(t),Voo=r(Eye," \u2014 "),dP=n(Eye,"A",{href:!0});var Zat=s(dP);Xoo=r(Zat,"RealmConfig"),Zat.forEach(t),zoo=r(Eye," (REALM model)"),Eye.forEach(t),Qoo=i(L),dg=n(L,"LI",{});var Cye=s(dg);ose=n(Cye,"STRONG",{});var ent=s(ose);Woo=r(ent,"reformer"),ent.forEach(t),Hoo=r(Cye," \u2014 "),cP=n(Cye,"A",{href:!0});var ont=s(cP);Uoo=r(ont,"ReformerConfig"),ont.forEach(t),Joo=r(Cye," (Reformer model)"),Cye.forEach(t),Yoo=i(L),cg=n(L,"LI",{});var wye=s(cg);rse=n(wye,"STRONG",{});var rnt=s(rse);Koo=r(rnt,"regnet"),rnt.forEach(t),Zoo=r(wye," \u2014 "),fP=n(wye,"A",{href:!0});var tnt=s(fP);ero=r(tnt,"RegNetConfig"),tnt.forEach(t),oro=r(wye," (RegNet model)"),wye.forEach(t),rro=i(L),fg=n(L,"LI",{});var Aye=s(fg);tse=n(Aye,"STRONG",{});var ant=s(tse);tro=r(ant,"rembert"),ant.forEach(t),aro=r(Aye," \u2014 "),mP=n(Aye,"A",{href:!0});var nnt=s(mP);nro=r(nnt,"RemBertConfig"),nnt.forEach(t),sro=r(Aye," (RemBERT model)"),Aye.forEach(t),lro=i(L),mg=n(L,"LI",{});var Lye=s(mg);ase=n(Lye,"STRONG",{});var snt=s(ase);iro=r(snt,"resnet"),snt.forEach(t),dro=r(Lye," \u2014 "),gP=n(Lye,"A",{href:!0});var lnt=s(gP);cro=r(lnt,"ResNetConfig"),lnt.forEach(t),fro=r(Lye," (ResNet model)"),Lye.forEach(t),mro=i(L),gg=n(L,"LI",{});var yye=s(gg);nse=n(yye,"STRONG",{});var int=s(nse);gro=r(int,"retribert"),int.forEach(t),hro=r(yye," \u2014 "),hP=n(yye,"A",{href:!0});var dnt=s(hP);pro=r(dnt,"RetriBertConfig"),dnt.forEach(t),_ro=r(yye," (RetriBERT model)"),yye.forEach(t),uro=i(L),hg=n(L,"LI",{});var xye=s(hg);sse=n(xye,"STRONG",{});var cnt=s(sse);bro=r(cnt,"roberta"),cnt.forEach(t),vro=r(xye," \u2014 "),pP=n(xye,"A",{href:!0});var fnt=s(pP);Fro=r(fnt,"RobertaConfig"),fnt.forEach(t),Tro=r(xye," (RoBERTa model)"),xye.forEach(t),Mro=i(L),pg=n(L,"LI",{});var $ye=s(pg);lse=n($ye,"STRONG",{});var mnt=s(lse);Ero=r(mnt,"roformer"),mnt.forEach(t),Cro=r($ye," \u2014 "),_P=n($ye,"A",{href:!0});var gnt=s(_P);wro=r(gnt,"RoFormerConfig"),gnt.forEach(t),Aro=r($ye," (RoFormer model)"),$ye.forEach(t),Lro=i(L),_g=n(L,"LI",{});var kye=s(_g);ise=n(kye,"STRONG",{});var hnt=s(ise);yro=r(hnt,"segformer"),hnt.forEach(t),xro=r(kye," \u2014 "),uP=n(kye,"A",{href:!0});var pnt=s(uP);$ro=r(pnt,"SegformerConfig"),pnt.forEach(t),kro=r(kye," (SegFormer model)"),kye.forEach(t),Sro=i(L),ug=n(L,"LI",{});var Sye=s(ug);dse=n(Sye,"STRONG",{});var _nt=s(dse);Rro=r(_nt,"sew"),_nt.forEach(t),Pro=r(Sye," \u2014 "),bP=n(Sye,"A",{href:!0});var unt=s(bP);Bro=r(unt,"SEWConfig"),unt.forEach(t),Nro=r(Sye," (SEW model)"),Sye.forEach(t),Iro=i(L),bg=n(L,"LI",{});var Rye=s(bg);cse=n(Rye,"STRONG",{});var bnt=s(cse);qro=r(bnt,"sew-d"),bnt.forEach(t),jro=r(Rye," \u2014 "),vP=n(Rye,"A",{href:!0});var vnt=s(vP);Dro=r(vnt,"SEWDConfig"),vnt.forEach(t),Gro=r(Rye," (SEW-D model)"),Rye.forEach(t),Oro=i(L),vg=n(L,"LI",{});var Pye=s(vg);fse=n(Pye,"STRONG",{});var Fnt=s(fse);Vro=r(Fnt,"speech-encoder-decoder"),Fnt.forEach(t),Xro=r(Pye," \u2014 "),FP=n(Pye,"A",{href:!0});var Tnt=s(FP);zro=r(Tnt,"SpeechEncoderDecoderConfig"),Tnt.forEach(t),Qro=r(Pye," (Speech Encoder decoder model)"),Pye.forEach(t),Wro=i(L),Fg=n(L,"LI",{});var Bye=s(Fg);mse=n(Bye,"STRONG",{});var Mnt=s(mse);Hro=r(Mnt,"speech_to_text"),Mnt.forEach(t),Uro=r(Bye," \u2014 "),TP=n(Bye,"A",{href:!0});var Ent=s(TP);Jro=r(Ent,"Speech2TextConfig"),Ent.forEach(t),Yro=r(Bye," (Speech2Text model)"),Bye.forEach(t),Kro=i(L),Tg=n(L,"LI",{});var Nye=s(Tg);gse=n(Nye,"STRONG",{});var Cnt=s(gse);Zro=r(Cnt,"speech_to_text_2"),Cnt.forEach(t),eto=r(Nye," \u2014 "),MP=n(Nye,"A",{href:!0});var wnt=s(MP);oto=r(wnt,"Speech2Text2Config"),wnt.forEach(t),rto=r(Nye," (Speech2Text2 model)"),Nye.forEach(t),tto=i(L),Mg=n(L,"LI",{});var Iye=s(Mg);hse=n(Iye,"STRONG",{});var Ant=s(hse);ato=r(Ant,"splinter"),Ant.forEach(t),nto=r(Iye," \u2014 "),EP=n(Iye,"A",{href:!0});var Lnt=s(EP);sto=r(Lnt,"SplinterConfig"),Lnt.forEach(t),lto=r(Iye," (Splinter model)"),Iye.forEach(t),ito=i(L),Eg=n(L,"LI",{});var qye=s(Eg);pse=n(qye,"STRONG",{});var ynt=s(pse);dto=r(ynt,"squeezebert"),ynt.forEach(t),cto=r(qye," \u2014 "),CP=n(qye,"A",{href:!0});var xnt=s(CP);fto=r(xnt,"SqueezeBertConfig"),xnt.forEach(t),mto=r(qye," (SqueezeBERT model)"),qye.forEach(t),gto=i(L),Cg=n(L,"LI",{});var jye=s(Cg);_se=n(jye,"STRONG",{});var $nt=s(_se);hto=r($nt,"swin"),$nt.forEach(t),pto=r(jye," \u2014 "),wP=n(jye,"A",{href:!0});var knt=s(wP);_to=r(knt,"SwinConfig"),knt.forEach(t),uto=r(jye," (Swin Transformer model)"),jye.forEach(t),bto=i(L),wg=n(L,"LI",{});var Dye=s(wg);use=n(Dye,"STRONG",{});var Snt=s(use);vto=r(Snt,"t5"),Snt.forEach(t),Fto=r(Dye," \u2014 "),AP=n(Dye,"A",{href:!0});var Rnt=s(AP);Tto=r(Rnt,"T5Config"),Rnt.forEach(t),Mto=r(Dye," (T5 model)"),Dye.forEach(t),Eto=i(L),Ag=n(L,"LI",{});var Gye=s(Ag);bse=n(Gye,"STRONG",{});var Pnt=s(bse);Cto=r(Pnt,"tapas"),Pnt.forEach(t),wto=r(Gye," \u2014 "),LP=n(Gye,"A",{href:!0});var Bnt=s(LP);Ato=r(Bnt,"TapasConfig"),Bnt.forEach(t),Lto=r(Gye," (TAPAS model)"),Gye.forEach(t),yto=i(L),Lg=n(L,"LI",{});var Oye=s(Lg);vse=n(Oye,"STRONG",{});var Nnt=s(vse);xto=r(Nnt,"trajectory_transformer"),Nnt.forEach(t),$to=r(Oye," \u2014 "),yP=n(Oye,"A",{href:!0});var Int=s(yP);kto=r(Int,"TrajectoryTransformerConfig"),Int.forEach(t),Sto=r(Oye," (Trajectory Transformer model)"),Oye.forEach(t),Rto=i(L),yg=n(L,"LI",{});var Vye=s(yg);Fse=n(Vye,"STRONG",{});var qnt=s(Fse);Pto=r(qnt,"transfo-xl"),qnt.forEach(t),Bto=r(Vye," \u2014 "),xP=n(Vye,"A",{href:!0});var jnt=s(xP);Nto=r(jnt,"TransfoXLConfig"),jnt.forEach(t),Ito=r(Vye," (Transformer-XL model)"),Vye.forEach(t),qto=i(L),xg=n(L,"LI",{});var Xye=s(xg);Tse=n(Xye,"STRONG",{});var Dnt=s(Tse);jto=r(Dnt,"trocr"),Dnt.forEach(t),Dto=r(Xye," \u2014 "),$P=n(Xye,"A",{href:!0});var Gnt=s($P);Gto=r(Gnt,"TrOCRConfig"),Gnt.forEach(t),Oto=r(Xye," (TrOCR model)"),Xye.forEach(t),Vto=i(L),$g=n(L,"LI",{});var zye=s($g);Mse=n(zye,"STRONG",{});var Ont=s(Mse);Xto=r(Ont,"unispeech"),Ont.forEach(t),zto=r(zye," \u2014 "),kP=n(zye,"A",{href:!0});var Vnt=s(kP);Qto=r(Vnt,"UniSpeechConfig"),Vnt.forEach(t),Wto=r(zye," (UniSpeech model)"),zye.forEach(t),Hto=i(L),kg=n(L,"LI",{});var Qye=s(kg);Ese=n(Qye,"STRONG",{});var Xnt=s(Ese);Uto=r(Xnt,"unispeech-sat"),Xnt.forEach(t),Jto=r(Qye," \u2014 "),SP=n(Qye,"A",{href:!0});var znt=s(SP);Yto=r(znt,"UniSpeechSatConfig"),znt.forEach(t),Kto=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),Zto=i(L),Sg=n(L,"LI",{});var Wye=s(Sg);Cse=n(Wye,"STRONG",{});var Qnt=s(Cse);eao=r(Qnt,"van"),Qnt.forEach(t),oao=r(Wye," \u2014 "),RP=n(Wye,"A",{href:!0});var Wnt=s(RP);rao=r(Wnt,"VanConfig"),Wnt.forEach(t),tao=r(Wye," (VAN model)"),Wye.forEach(t),aao=i(L),Rg=n(L,"LI",{});var Hye=s(Rg);wse=n(Hye,"STRONG",{});var Hnt=s(wse);nao=r(Hnt,"vilt"),Hnt.forEach(t),sao=r(Hye," \u2014 "),PP=n(Hye,"A",{href:!0});var Unt=s(PP);lao=r(Unt,"ViltConfig"),Unt.forEach(t),iao=r(Hye," (ViLT model)"),Hye.forEach(t),dao=i(L),Pg=n(L,"LI",{});var Uye=s(Pg);Ase=n(Uye,"STRONG",{});var Jnt=s(Ase);cao=r(Jnt,"vision-encoder-decoder"),Jnt.forEach(t),fao=r(Uye," \u2014 "),BP=n(Uye,"A",{href:!0});var Ynt=s(BP);mao=r(Ynt,"VisionEncoderDecoderConfig"),Ynt.forEach(t),gao=r(Uye," (Vision Encoder decoder model)"),Uye.forEach(t),hao=i(L),Bg=n(L,"LI",{});var Jye=s(Bg);Lse=n(Jye,"STRONG",{});var Knt=s(Lse);pao=r(Knt,"vision-text-dual-encoder"),Knt.forEach(t),_ao=r(Jye," \u2014 "),NP=n(Jye,"A",{href:!0});var Znt=s(NP);uao=r(Znt,"VisionTextDualEncoderConfig"),Znt.forEach(t),bao=r(Jye," (VisionTextDualEncoder model)"),Jye.forEach(t),vao=i(L),Ng=n(L,"LI",{});var Yye=s(Ng);yse=n(Yye,"STRONG",{});var est=s(yse);Fao=r(est,"visual_bert"),est.forEach(t),Tao=r(Yye," \u2014 "),IP=n(Yye,"A",{href:!0});var ost=s(IP);Mao=r(ost,"VisualBertConfig"),ost.forEach(t),Eao=r(Yye," (VisualBERT model)"),Yye.forEach(t),Cao=i(L),Ig=n(L,"LI",{});var Kye=s(Ig);xse=n(Kye,"STRONG",{});var rst=s(xse);wao=r(rst,"vit"),rst.forEach(t),Aao=r(Kye," \u2014 "),qP=n(Kye,"A",{href:!0});var tst=s(qP);Lao=r(tst,"ViTConfig"),tst.forEach(t),yao=r(Kye," (ViT model)"),Kye.forEach(t),xao=i(L),qg=n(L,"LI",{});var Zye=s(qg);$se=n(Zye,"STRONG",{});var ast=s($se);$ao=r(ast,"vit_mae"),ast.forEach(t),kao=r(Zye," \u2014 "),jP=n(Zye,"A",{href:!0});var nst=s(jP);Sao=r(nst,"ViTMAEConfig"),nst.forEach(t),Rao=r(Zye," (ViTMAE model)"),Zye.forEach(t),Pao=i(L),jg=n(L,"LI",{});var e8e=s(jg);kse=n(e8e,"STRONG",{});var sst=s(kse);Bao=r(sst,"wav2vec2"),sst.forEach(t),Nao=r(e8e," \u2014 "),DP=n(e8e,"A",{href:!0});var lst=s(DP);Iao=r(lst,"Wav2Vec2Config"),lst.forEach(t),qao=r(e8e," (Wav2Vec2 model)"),e8e.forEach(t),jao=i(L),Dg=n(L,"LI",{});var o8e=s(Dg);Sse=n(o8e,"STRONG",{});var ist=s(Sse);Dao=r(ist,"wav2vec2-conformer"),ist.forEach(t),Gao=r(o8e," \u2014 "),GP=n(o8e,"A",{href:!0});var dst=s(GP);Oao=r(dst,"Wav2Vec2ConformerConfig"),dst.forEach(t),Vao=r(o8e," (Wav2Vec2-Conformer model)"),o8e.forEach(t),Xao=i(L),Gg=n(L,"LI",{});var r8e=s(Gg);Rse=n(r8e,"STRONG",{});var cst=s(Rse);zao=r(cst,"wavlm"),cst.forEach(t),Qao=r(r8e," \u2014 "),OP=n(r8e,"A",{href:!0});var fst=s(OP);Wao=r(fst,"WavLMConfig"),fst.forEach(t),Hao=r(r8e," (WavLM model)"),r8e.forEach(t),Uao=i(L),Og=n(L,"LI",{});var t8e=s(Og);Pse=n(t8e,"STRONG",{});var mst=s(Pse);Jao=r(mst,"xglm"),mst.forEach(t),Yao=r(t8e," \u2014 "),VP=n(t8e,"A",{href:!0});var gst=s(VP);Kao=r(gst,"XGLMConfig"),gst.forEach(t),Zao=r(t8e," (XGLM model)"),t8e.forEach(t),eno=i(L),Vg=n(L,"LI",{});var a8e=s(Vg);Bse=n(a8e,"STRONG",{});var hst=s(Bse);ono=r(hst,"xlm"),hst.forEach(t),rno=r(a8e," \u2014 "),XP=n(a8e,"A",{href:!0});var pst=s(XP);tno=r(pst,"XLMConfig"),pst.forEach(t),ano=r(a8e," (XLM model)"),a8e.forEach(t),nno=i(L),Xg=n(L,"LI",{});var n8e=s(Xg);Nse=n(n8e,"STRONG",{});var _st=s(Nse);sno=r(_st,"xlm-prophetnet"),_st.forEach(t),lno=r(n8e," \u2014 "),zP=n(n8e,"A",{href:!0});var ust=s(zP);ino=r(ust,"XLMProphetNetConfig"),ust.forEach(t),dno=r(n8e," (XLM-ProphetNet model)"),n8e.forEach(t),cno=i(L),zg=n(L,"LI",{});var s8e=s(zg);Ise=n(s8e,"STRONG",{});var bst=s(Ise);fno=r(bst,"xlm-roberta"),bst.forEach(t),mno=r(s8e," \u2014 "),QP=n(s8e,"A",{href:!0});var vst=s(QP);gno=r(vst,"XLMRobertaConfig"),vst.forEach(t),hno=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),pno=i(L),Qg=n(L,"LI",{});var l8e=s(Qg);qse=n(l8e,"STRONG",{});var Fst=s(qse);_no=r(Fst,"xlm-roberta-xl"),Fst.forEach(t),uno=r(l8e," \u2014 "),WP=n(l8e,"A",{href:!0});var Tst=s(WP);bno=r(Tst,"XLMRobertaXLConfig"),Tst.forEach(t),vno=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),Fno=i(L),Wg=n(L,"LI",{});var i8e=s(Wg);jse=n(i8e,"STRONG",{});var Mst=s(jse);Tno=r(Mst,"xlnet"),Mst.forEach(t),Mno=r(i8e," \u2014 "),HP=n(i8e,"A",{href:!0});var Est=s(HP);Eno=r(Est,"XLNetConfig"),Est.forEach(t),Cno=r(i8e," (XLNet model)"),i8e.forEach(t),wno=i(L),Hg=n(L,"LI",{});var d8e=s(Hg);Dse=n(d8e,"STRONG",{});var Cst=s(Dse);Ano=r(Cst,"yolos"),Cst.forEach(t),Lno=r(d8e," \u2014 "),UP=n(d8e,"A",{href:!0});var wst=s(UP);yno=r(wst,"YolosConfig"),wst.forEach(t),xno=r(d8e," (YOLOS model)"),d8e.forEach(t),$no=i(L),Ug=n(L,"LI",{});var c8e=s(Ug);Gse=n(c8e,"STRONG",{});var Ast=s(Gse);kno=r(Ast,"yoso"),Ast.forEach(t),Sno=r(c8e," \u2014 "),JP=n(c8e,"A",{href:!0});var Lst=s(JP);Rno=r(Lst,"YosoConfig"),Lst.forEach(t),Pno=r(c8e," (YOSO model)"),c8e.forEach(t),L.forEach(t),Bno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),Nno=i(at),Yg=n(at,"DIV",{class:!0});var rQe=s(Yg);T(fy.$$.fragment,rQe),Ino=i(rQe),Ose=n(rQe,"P",{});var yst=s(Ose);qno=r(yst,"Register a new configuration for this class."),yst.forEach(t),rQe.forEach(t),at.forEach(t),tXe=i(f),Ni=n(f,"H2",{class:!0});var tQe=s(Ni);Kg=n(tQe,"A",{id:!0,class:!0,href:!0});var xst=s(Kg);Vse=n(xst,"SPAN",{});var $st=s(Vse);T(my.$$.fragment,$st),$st.forEach(t),xst.forEach(t),jno=i(tQe),Xse=n(tQe,"SPAN",{});var kst=s(Xse);Dno=r(kst,"AutoTokenizer"),kst.forEach(t),tQe.forEach(t),aXe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(gy.$$.fragment,Ys),Gno=i(Ys),hy=n(Ys,"P",{});var aQe=s(hy);Ono=r(aQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),YP=n(aQe,"A",{href:!0});var Sst=s(YP);Vno=r(Sst,"AutoTokenizer.from_pretrained()"),Sst.forEach(t),Xno=r(aQe," class method."),aQe.forEach(t),zno=i(Ys),py=n(Ys,"P",{});var nQe=s(py);Qno=r(nQe,"This class cannot be instantiated directly using "),zse=n(nQe,"CODE",{});var Rst=s(zse);Wno=r(Rst,"__init__()"),Rst.forEach(t),Hno=r(nQe," (throws an error)."),nQe.forEach(t),Uno=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(_y.$$.fragment,Ks),Jno=i(Ks),Qse=n(Ks,"P",{});var Pst=s(Qse);Yno=r(Pst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Pst.forEach(t),Kno=i(Ks),Pa=n(Ks,"P",{});var s7=s(Pa);Zno=r(s7,"The tokenizer class to instantiate is selected based on the "),Wse=n(s7,"CODE",{});var Bst=s(Wse);eso=r(Bst,"model_type"),Bst.forEach(t),oso=r(s7,` property of the config object (either
passed as an argument or loaded from `),Hse=n(s7,"CODE",{});var Nst=s(Hse);rso=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),tso=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=n(s7,"CODE",{});var Ist=s(Use);aso=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),nso=r(s7,":"),s7.forEach(t),sso=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Mk=s(jn);Jse=n(Mk,"STRONG",{});var qst=s(Jse);lso=r(qst,"albert"),qst.forEach(t),iso=r(Mk," \u2014 "),KP=n(Mk,"A",{href:!0});var jst=s(KP);dso=r(jst,"AlbertTokenizer"),jst.forEach(t),cso=r(Mk," or "),ZP=n(Mk,"A",{href:!0});var Dst=s(ZP);fso=r(Dst,"AlbertTokenizerFast"),Dst.forEach(t),mso=r(Mk," (ALBERT model)"),Mk.forEach(t),gso=i(S),Dn=n(S,"LI",{});var Ek=s(Dn);Yse=n(Ek,"STRONG",{});var Gst=s(Yse);hso=r(Gst,"bart"),Gst.forEach(t),pso=r(Ek," \u2014 "),eB=n(Ek,"A",{href:!0});var Ost=s(eB);_so=r(Ost,"BartTokenizer"),Ost.forEach(t),uso=r(Ek," or "),oB=n(Ek,"A",{href:!0});var Vst=s(oB);bso=r(Vst,"BartTokenizerFast"),Vst.forEach(t),vso=r(Ek," (BART model)"),Ek.forEach(t),Fso=i(S),Gn=n(S,"LI",{});var Ck=s(Gn);Kse=n(Ck,"STRONG",{});var Xst=s(Kse);Tso=r(Xst,"barthez"),Xst.forEach(t),Mso=r(Ck," \u2014 "),rB=n(Ck,"A",{href:!0});var zst=s(rB);Eso=r(zst,"BarthezTokenizer"),zst.forEach(t),Cso=r(Ck," or "),tB=n(Ck,"A",{href:!0});var Qst=s(tB);wso=r(Qst,"BarthezTokenizerFast"),Qst.forEach(t),Aso=r(Ck," (BARThez model)"),Ck.forEach(t),Lso=i(S),Zg=n(S,"LI",{});var f8e=s(Zg);Zse=n(f8e,"STRONG",{});var Wst=s(Zse);yso=r(Wst,"bartpho"),Wst.forEach(t),xso=r(f8e," \u2014 "),aB=n(f8e,"A",{href:!0});var Hst=s(aB);$so=r(Hst,"BartphoTokenizer"),Hst.forEach(t),kso=r(f8e," (BARTpho model)"),f8e.forEach(t),Sso=i(S),On=n(S,"LI",{});var wk=s(On);ele=n(wk,"STRONG",{});var Ust=s(ele);Rso=r(Ust,"bert"),Ust.forEach(t),Pso=r(wk," \u2014 "),nB=n(wk,"A",{href:!0});var Jst=s(nB);Bso=r(Jst,"BertTokenizer"),Jst.forEach(t),Nso=r(wk," or "),sB=n(wk,"A",{href:!0});var Yst=s(sB);Iso=r(Yst,"BertTokenizerFast"),Yst.forEach(t),qso=r(wk," (BERT model)"),wk.forEach(t),jso=i(S),eh=n(S,"LI",{});var m8e=s(eh);ole=n(m8e,"STRONG",{});var Kst=s(ole);Dso=r(Kst,"bert-generation"),Kst.forEach(t),Gso=r(m8e," \u2014 "),lB=n(m8e,"A",{href:!0});var Zst=s(lB);Oso=r(Zst,"BertGenerationTokenizer"),Zst.forEach(t),Vso=r(m8e," (Bert Generation model)"),m8e.forEach(t),Xso=i(S),oh=n(S,"LI",{});var g8e=s(oh);rle=n(g8e,"STRONG",{});var elt=s(rle);zso=r(elt,"bert-japanese"),elt.forEach(t),Qso=r(g8e," \u2014 "),iB=n(g8e,"A",{href:!0});var olt=s(iB);Wso=r(olt,"BertJapaneseTokenizer"),olt.forEach(t),Hso=r(g8e," (BertJapanese model)"),g8e.forEach(t),Uso=i(S),rh=n(S,"LI",{});var h8e=s(rh);tle=n(h8e,"STRONG",{});var rlt=s(tle);Jso=r(rlt,"bertweet"),rlt.forEach(t),Yso=r(h8e," \u2014 "),dB=n(h8e,"A",{href:!0});var tlt=s(dB);Kso=r(tlt,"BertweetTokenizer"),tlt.forEach(t),Zso=r(h8e," (BERTweet model)"),h8e.forEach(t),elo=i(S),Vn=n(S,"LI",{});var Ak=s(Vn);ale=n(Ak,"STRONG",{});var alt=s(ale);olo=r(alt,"big_bird"),alt.forEach(t),rlo=r(Ak," \u2014 "),cB=n(Ak,"A",{href:!0});var nlt=s(cB);tlo=r(nlt,"BigBirdTokenizer"),nlt.forEach(t),alo=r(Ak," or "),fB=n(Ak,"A",{href:!0});var slt=s(fB);nlo=r(slt,"BigBirdTokenizerFast"),slt.forEach(t),slo=r(Ak," (BigBird model)"),Ak.forEach(t),llo=i(S),Xn=n(S,"LI",{});var Lk=s(Xn);nle=n(Lk,"STRONG",{});var llt=s(nle);ilo=r(llt,"bigbird_pegasus"),llt.forEach(t),dlo=r(Lk," \u2014 "),mB=n(Lk,"A",{href:!0});var ilt=s(mB);clo=r(ilt,"PegasusTokenizer"),ilt.forEach(t),flo=r(Lk," or "),gB=n(Lk,"A",{href:!0});var dlt=s(gB);mlo=r(dlt,"PegasusTokenizerFast"),dlt.forEach(t),glo=r(Lk," (BigBird-Pegasus model)"),Lk.forEach(t),hlo=i(S),zn=n(S,"LI",{});var yk=s(zn);sle=n(yk,"STRONG",{});var clt=s(sle);plo=r(clt,"blenderbot"),clt.forEach(t),_lo=r(yk," \u2014 "),hB=n(yk,"A",{href:!0});var flt=s(hB);ulo=r(flt,"BlenderbotTokenizer"),flt.forEach(t),blo=r(yk," or "),pB=n(yk,"A",{href:!0});var mlt=s(pB);vlo=r(mlt,"BlenderbotTokenizerFast"),mlt.forEach(t),Flo=r(yk," (Blenderbot model)"),yk.forEach(t),Tlo=i(S),th=n(S,"LI",{});var p8e=s(th);lle=n(p8e,"STRONG",{});var glt=s(lle);Mlo=r(glt,"blenderbot-small"),glt.forEach(t),Elo=r(p8e," \u2014 "),_B=n(p8e,"A",{href:!0});var hlt=s(_B);Clo=r(hlt,"BlenderbotSmallTokenizer"),hlt.forEach(t),wlo=r(p8e," (BlenderbotSmall model)"),p8e.forEach(t),Alo=i(S),ah=n(S,"LI",{});var _8e=s(ah);ile=n(_8e,"STRONG",{});var plt=s(ile);Llo=r(plt,"bloom"),plt.forEach(t),ylo=r(_8e," \u2014 "),uB=n(_8e,"A",{href:!0});var _lt=s(uB);xlo=r(_lt,"BloomTokenizerFast"),_lt.forEach(t),$lo=r(_8e," (BLOOM model)"),_8e.forEach(t),klo=i(S),nh=n(S,"LI",{});var u8e=s(nh);dle=n(u8e,"STRONG",{});var ult=s(dle);Slo=r(ult,"byt5"),ult.forEach(t),Rlo=r(u8e," \u2014 "),bB=n(u8e,"A",{href:!0});var blt=s(bB);Plo=r(blt,"ByT5Tokenizer"),blt.forEach(t),Blo=r(u8e," (ByT5 model)"),u8e.forEach(t),Nlo=i(S),Qn=n(S,"LI",{});var xk=s(Qn);cle=n(xk,"STRONG",{});var vlt=s(cle);Ilo=r(vlt,"camembert"),vlt.forEach(t),qlo=r(xk," \u2014 "),vB=n(xk,"A",{href:!0});var Flt=s(vB);jlo=r(Flt,"CamembertTokenizer"),Flt.forEach(t),Dlo=r(xk," or "),FB=n(xk,"A",{href:!0});var Tlt=s(FB);Glo=r(Tlt,"CamembertTokenizerFast"),Tlt.forEach(t),Olo=r(xk," (CamemBERT model)"),xk.forEach(t),Vlo=i(S),sh=n(S,"LI",{});var b8e=s(sh);fle=n(b8e,"STRONG",{});var Mlt=s(fle);Xlo=r(Mlt,"canine"),Mlt.forEach(t),zlo=r(b8e," \u2014 "),TB=n(b8e,"A",{href:!0});var Elt=s(TB);Qlo=r(Elt,"CanineTokenizer"),Elt.forEach(t),Wlo=r(b8e," (CANINE model)"),b8e.forEach(t),Hlo=i(S),Wn=n(S,"LI",{});var $k=s(Wn);mle=n($k,"STRONG",{});var Clt=s(mle);Ulo=r(Clt,"clip"),Clt.forEach(t),Jlo=r($k," \u2014 "),MB=n($k,"A",{href:!0});var wlt=s(MB);Ylo=r(wlt,"CLIPTokenizer"),wlt.forEach(t),Klo=r($k," or "),EB=n($k,"A",{href:!0});var Alt=s(EB);Zlo=r(Alt,"CLIPTokenizerFast"),Alt.forEach(t),eio=r($k," (CLIP model)"),$k.forEach(t),oio=i(S),Hn=n(S,"LI",{});var kk=s(Hn);gle=n(kk,"STRONG",{});var Llt=s(gle);rio=r(Llt,"codegen"),Llt.forEach(t),tio=r(kk," \u2014 "),CB=n(kk,"A",{href:!0});var ylt=s(CB);aio=r(ylt,"CodeGenTokenizer"),ylt.forEach(t),nio=r(kk," or "),wB=n(kk,"A",{href:!0});var xlt=s(wB);sio=r(xlt,"CodeGenTokenizerFast"),xlt.forEach(t),lio=r(kk," (CodeGen model)"),kk.forEach(t),iio=i(S),Un=n(S,"LI",{});var Sk=s(Un);hle=n(Sk,"STRONG",{});var $lt=s(hle);dio=r($lt,"convbert"),$lt.forEach(t),cio=r(Sk," \u2014 "),AB=n(Sk,"A",{href:!0});var klt=s(AB);fio=r(klt,"ConvBertTokenizer"),klt.forEach(t),mio=r(Sk," or "),LB=n(Sk,"A",{href:!0});var Slt=s(LB);gio=r(Slt,"ConvBertTokenizerFast"),Slt.forEach(t),hio=r(Sk," (ConvBERT model)"),Sk.forEach(t),pio=i(S),Jn=n(S,"LI",{});var Rk=s(Jn);ple=n(Rk,"STRONG",{});var Rlt=s(ple);_io=r(Rlt,"cpm"),Rlt.forEach(t),uio=r(Rk," \u2014 "),yB=n(Rk,"A",{href:!0});var Plt=s(yB);bio=r(Plt,"CpmTokenizer"),Plt.forEach(t),vio=r(Rk," or "),xB=n(Rk,"A",{href:!0});var Blt=s(xB);Fio=r(Blt,"CpmTokenizerFast"),Blt.forEach(t),Tio=r(Rk," (CPM model)"),Rk.forEach(t),Mio=i(S),lh=n(S,"LI",{});var v8e=s(lh);_le=n(v8e,"STRONG",{});var Nlt=s(_le);Eio=r(Nlt,"ctrl"),Nlt.forEach(t),Cio=r(v8e," \u2014 "),$B=n(v8e,"A",{href:!0});var Ilt=s($B);wio=r(Ilt,"CTRLTokenizer"),Ilt.forEach(t),Aio=r(v8e," (CTRL model)"),v8e.forEach(t),Lio=i(S),Yn=n(S,"LI",{});var Pk=s(Yn);ule=n(Pk,"STRONG",{});var qlt=s(ule);yio=r(qlt,"data2vec-text"),qlt.forEach(t),xio=r(Pk," \u2014 "),kB=n(Pk,"A",{href:!0});var jlt=s(kB);$io=r(jlt,"RobertaTokenizer"),jlt.forEach(t),kio=r(Pk," or "),SB=n(Pk,"A",{href:!0});var Dlt=s(SB);Sio=r(Dlt,"RobertaTokenizerFast"),Dlt.forEach(t),Rio=r(Pk," (Data2VecText model)"),Pk.forEach(t),Pio=i(S),Kn=n(S,"LI",{});var Bk=s(Kn);ble=n(Bk,"STRONG",{});var Glt=s(ble);Bio=r(Glt,"deberta"),Glt.forEach(t),Nio=r(Bk," \u2014 "),RB=n(Bk,"A",{href:!0});var Olt=s(RB);Iio=r(Olt,"DebertaTokenizer"),Olt.forEach(t),qio=r(Bk," or "),PB=n(Bk,"A",{href:!0});var Vlt=s(PB);jio=r(Vlt,"DebertaTokenizerFast"),Vlt.forEach(t),Dio=r(Bk," (DeBERTa model)"),Bk.forEach(t),Gio=i(S),Zn=n(S,"LI",{});var Nk=s(Zn);vle=n(Nk,"STRONG",{});var Xlt=s(vle);Oio=r(Xlt,"deberta-v2"),Xlt.forEach(t),Vio=r(Nk," \u2014 "),BB=n(Nk,"A",{href:!0});var zlt=s(BB);Xio=r(zlt,"DebertaV2Tokenizer"),zlt.forEach(t),zio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var Qlt=s(NB);Qio=r(Qlt,"DebertaV2TokenizerFast"),Qlt.forEach(t),Wio=r(Nk," (DeBERTa-v2 model)"),Nk.forEach(t),Hio=i(S),es=n(S,"LI",{});var Ik=s(es);Fle=n(Ik,"STRONG",{});var Wlt=s(Fle);Uio=r(Wlt,"distilbert"),Wlt.forEach(t),Jio=r(Ik," \u2014 "),IB=n(Ik,"A",{href:!0});var Hlt=s(IB);Yio=r(Hlt,"DistilBertTokenizer"),Hlt.forEach(t),Kio=r(Ik," or "),qB=n(Ik,"A",{href:!0});var Ult=s(qB);Zio=r(Ult,"DistilBertTokenizerFast"),Ult.forEach(t),edo=r(Ik," (DistilBERT model)"),Ik.forEach(t),odo=i(S),os=n(S,"LI",{});var qk=s(os);Tle=n(qk,"STRONG",{});var Jlt=s(Tle);rdo=r(Jlt,"dpr"),Jlt.forEach(t),tdo=r(qk," \u2014 "),jB=n(qk,"A",{href:!0});var Ylt=s(jB);ado=r(Ylt,"DPRQuestionEncoderTokenizer"),Ylt.forEach(t),ndo=r(qk," or "),DB=n(qk,"A",{href:!0});var Klt=s(DB);sdo=r(Klt,"DPRQuestionEncoderTokenizerFast"),Klt.forEach(t),ldo=r(qk," (DPR model)"),qk.forEach(t),ido=i(S),rs=n(S,"LI",{});var jk=s(rs);Mle=n(jk,"STRONG",{});var Zlt=s(Mle);ddo=r(Zlt,"electra"),Zlt.forEach(t),cdo=r(jk," \u2014 "),GB=n(jk,"A",{href:!0});var eit=s(GB);fdo=r(eit,"ElectraTokenizer"),eit.forEach(t),mdo=r(jk," or "),OB=n(jk,"A",{href:!0});var oit=s(OB);gdo=r(oit,"ElectraTokenizerFast"),oit.forEach(t),hdo=r(jk," (ELECTRA model)"),jk.forEach(t),pdo=i(S),ih=n(S,"LI",{});var F8e=s(ih);Ele=n(F8e,"STRONG",{});var rit=s(Ele);_do=r(rit,"flaubert"),rit.forEach(t),udo=r(F8e," \u2014 "),VB=n(F8e,"A",{href:!0});var tit=s(VB);bdo=r(tit,"FlaubertTokenizer"),tit.forEach(t),vdo=r(F8e," (FlauBERT model)"),F8e.forEach(t),Fdo=i(S),ts=n(S,"LI",{});var Dk=s(ts);Cle=n(Dk,"STRONG",{});var ait=s(Cle);Tdo=r(ait,"fnet"),ait.forEach(t),Mdo=r(Dk," \u2014 "),XB=n(Dk,"A",{href:!0});var nit=s(XB);Edo=r(nit,"FNetTokenizer"),nit.forEach(t),Cdo=r(Dk," or "),zB=n(Dk,"A",{href:!0});var sit=s(zB);wdo=r(sit,"FNetTokenizerFast"),sit.forEach(t),Ado=r(Dk," (FNet model)"),Dk.forEach(t),Ldo=i(S),dh=n(S,"LI",{});var T8e=s(dh);wle=n(T8e,"STRONG",{});var lit=s(wle);ydo=r(lit,"fsmt"),lit.forEach(t),xdo=r(T8e," \u2014 "),QB=n(T8e,"A",{href:!0});var iit=s(QB);$do=r(iit,"FSMTTokenizer"),iit.forEach(t),kdo=r(T8e," (FairSeq Machine-Translation model)"),T8e.forEach(t),Sdo=i(S),as=n(S,"LI",{});var Gk=s(as);Ale=n(Gk,"STRONG",{});var dit=s(Ale);Rdo=r(dit,"funnel"),dit.forEach(t),Pdo=r(Gk," \u2014 "),WB=n(Gk,"A",{href:!0});var cit=s(WB);Bdo=r(cit,"FunnelTokenizer"),cit.forEach(t),Ndo=r(Gk," or "),HB=n(Gk,"A",{href:!0});var fit=s(HB);Ido=r(fit,"FunnelTokenizerFast"),fit.forEach(t),qdo=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),jdo=i(S),ns=n(S,"LI",{});var Ok=s(ns);Lle=n(Ok,"STRONG",{});var mit=s(Lle);Ddo=r(mit,"gpt2"),mit.forEach(t),Gdo=r(Ok," \u2014 "),UB=n(Ok,"A",{href:!0});var git=s(UB);Odo=r(git,"GPT2Tokenizer"),git.forEach(t),Vdo=r(Ok," or "),JB=n(Ok,"A",{href:!0});var hit=s(JB);Xdo=r(hit,"GPT2TokenizerFast"),hit.forEach(t),zdo=r(Ok," (OpenAI GPT-2 model)"),Ok.forEach(t),Qdo=i(S),ss=n(S,"LI",{});var Vk=s(ss);yle=n(Vk,"STRONG",{});var pit=s(yle);Wdo=r(pit,"gpt_neo"),pit.forEach(t),Hdo=r(Vk," \u2014 "),YB=n(Vk,"A",{href:!0});var _it=s(YB);Udo=r(_it,"GPT2Tokenizer"),_it.forEach(t),Jdo=r(Vk," or "),KB=n(Vk,"A",{href:!0});var uit=s(KB);Ydo=r(uit,"GPT2TokenizerFast"),uit.forEach(t),Kdo=r(Vk," (GPT Neo model)"),Vk.forEach(t),Zdo=i(S),ch=n(S,"LI",{});var M8e=s(ch);xle=n(M8e,"STRONG",{});var bit=s(xle);eco=r(bit,"gpt_neox"),bit.forEach(t),oco=r(M8e," \u2014 "),ZB=n(M8e,"A",{href:!0});var vit=s(ZB);rco=r(vit,"GPTNeoXTokenizerFast"),vit.forEach(t),tco=r(M8e," (GPT NeoX model)"),M8e.forEach(t),aco=i(S),ls=n(S,"LI",{});var Xk=s(ls);$le=n(Xk,"STRONG",{});var Fit=s($le);nco=r(Fit,"gptj"),Fit.forEach(t),sco=r(Xk," \u2014 "),eN=n(Xk,"A",{href:!0});var Tit=s(eN);lco=r(Tit,"GPT2Tokenizer"),Tit.forEach(t),ico=r(Xk," or "),oN=n(Xk,"A",{href:!0});var Mit=s(oN);dco=r(Mit,"GPT2TokenizerFast"),Mit.forEach(t),cco=r(Xk," (GPT-J model)"),Xk.forEach(t),fco=i(S),is=n(S,"LI",{});var zk=s(is);kle=n(zk,"STRONG",{});var Eit=s(kle);mco=r(Eit,"groupvit"),Eit.forEach(t),gco=r(zk," \u2014 "),rN=n(zk,"A",{href:!0});var Cit=s(rN);hco=r(Cit,"CLIPTokenizer"),Cit.forEach(t),pco=r(zk," or "),tN=n(zk,"A",{href:!0});var wit=s(tN);_co=r(wit,"CLIPTokenizerFast"),wit.forEach(t),uco=r(zk," (GroupViT model)"),zk.forEach(t),bco=i(S),ds=n(S,"LI",{});var Qk=s(ds);Sle=n(Qk,"STRONG",{});var Ait=s(Sle);vco=r(Ait,"herbert"),Ait.forEach(t),Fco=r(Qk," \u2014 "),aN=n(Qk,"A",{href:!0});var Lit=s(aN);Tco=r(Lit,"HerbertTokenizer"),Lit.forEach(t),Mco=r(Qk," or "),nN=n(Qk,"A",{href:!0});var yit=s(nN);Eco=r(yit,"HerbertTokenizerFast"),yit.forEach(t),Cco=r(Qk," (HerBERT model)"),Qk.forEach(t),wco=i(S),fh=n(S,"LI",{});var E8e=s(fh);Rle=n(E8e,"STRONG",{});var xit=s(Rle);Aco=r(xit,"hubert"),xit.forEach(t),Lco=r(E8e," \u2014 "),sN=n(E8e,"A",{href:!0});var $it=s(sN);yco=r($it,"Wav2Vec2CTCTokenizer"),$it.forEach(t),xco=r(E8e," (Hubert model)"),E8e.forEach(t),$co=i(S),cs=n(S,"LI",{});var Wk=s(cs);Ple=n(Wk,"STRONG",{});var kit=s(Ple);kco=r(kit,"ibert"),kit.forEach(t),Sco=r(Wk," \u2014 "),lN=n(Wk,"A",{href:!0});var Sit=s(lN);Rco=r(Sit,"RobertaTokenizer"),Sit.forEach(t),Pco=r(Wk," or "),iN=n(Wk,"A",{href:!0});var Rit=s(iN);Bco=r(Rit,"RobertaTokenizerFast"),Rit.forEach(t),Nco=r(Wk," (I-BERT model)"),Wk.forEach(t),Ico=i(S),fs=n(S,"LI",{});var Hk=s(fs);Ble=n(Hk,"STRONG",{});var Pit=s(Ble);qco=r(Pit,"layoutlm"),Pit.forEach(t),jco=r(Hk," \u2014 "),dN=n(Hk,"A",{href:!0});var Bit=s(dN);Dco=r(Bit,"LayoutLMTokenizer"),Bit.forEach(t),Gco=r(Hk," or "),cN=n(Hk,"A",{href:!0});var Nit=s(cN);Oco=r(Nit,"LayoutLMTokenizerFast"),Nit.forEach(t),Vco=r(Hk," (LayoutLM model)"),Hk.forEach(t),Xco=i(S),ms=n(S,"LI",{});var Uk=s(ms);Nle=n(Uk,"STRONG",{});var Iit=s(Nle);zco=r(Iit,"layoutlmv2"),Iit.forEach(t),Qco=r(Uk," \u2014 "),fN=n(Uk,"A",{href:!0});var qit=s(fN);Wco=r(qit,"LayoutLMv2Tokenizer"),qit.forEach(t),Hco=r(Uk," or "),mN=n(Uk,"A",{href:!0});var jit=s(mN);Uco=r(jit,"LayoutLMv2TokenizerFast"),jit.forEach(t),Jco=r(Uk," (LayoutLMv2 model)"),Uk.forEach(t),Yco=i(S),gs=n(S,"LI",{});var Jk=s(gs);Ile=n(Jk,"STRONG",{});var Dit=s(Ile);Kco=r(Dit,"layoutlmv3"),Dit.forEach(t),Zco=r(Jk," \u2014 "),gN=n(Jk,"A",{href:!0});var Git=s(gN);efo=r(Git,"LayoutLMv3Tokenizer"),Git.forEach(t),ofo=r(Jk," or "),hN=n(Jk,"A",{href:!0});var Oit=s(hN);rfo=r(Oit,"LayoutLMv3TokenizerFast"),Oit.forEach(t),tfo=r(Jk," (LayoutLMv3 model)"),Jk.forEach(t),afo=i(S),hs=n(S,"LI",{});var Yk=s(hs);qle=n(Yk,"STRONG",{});var Vit=s(qle);nfo=r(Vit,"layoutxlm"),Vit.forEach(t),sfo=r(Yk," \u2014 "),pN=n(Yk,"A",{href:!0});var Xit=s(pN);lfo=r(Xit,"LayoutXLMTokenizer"),Xit.forEach(t),ifo=r(Yk," or "),_N=n(Yk,"A",{href:!0});var zit=s(_N);dfo=r(zit,"LayoutXLMTokenizerFast"),zit.forEach(t),cfo=r(Yk," (LayoutXLM model)"),Yk.forEach(t),ffo=i(S),ps=n(S,"LI",{});var Kk=s(ps);jle=n(Kk,"STRONG",{});var Qit=s(jle);mfo=r(Qit,"led"),Qit.forEach(t),gfo=r(Kk," \u2014 "),uN=n(Kk,"A",{href:!0});var Wit=s(uN);hfo=r(Wit,"LEDTokenizer"),Wit.forEach(t),pfo=r(Kk," or "),bN=n(Kk,"A",{href:!0});var Hit=s(bN);_fo=r(Hit,"LEDTokenizerFast"),Hit.forEach(t),ufo=r(Kk," (LED model)"),Kk.forEach(t),bfo=i(S),_s=n(S,"LI",{});var Zk=s(_s);Dle=n(Zk,"STRONG",{});var Uit=s(Dle);vfo=r(Uit,"longformer"),Uit.forEach(t),Ffo=r(Zk," \u2014 "),vN=n(Zk,"A",{href:!0});var Jit=s(vN);Tfo=r(Jit,"LongformerTokenizer"),Jit.forEach(t),Mfo=r(Zk," or "),FN=n(Zk,"A",{href:!0});var Yit=s(FN);Efo=r(Yit,"LongformerTokenizerFast"),Yit.forEach(t),Cfo=r(Zk," (Longformer model)"),Zk.forEach(t),wfo=i(S),us=n(S,"LI",{});var eS=s(us);Gle=n(eS,"STRONG",{});var Kit=s(Gle);Afo=r(Kit,"longt5"),Kit.forEach(t),Lfo=r(eS," \u2014 "),TN=n(eS,"A",{href:!0});var Zit=s(TN);yfo=r(Zit,"T5Tokenizer"),Zit.forEach(t),xfo=r(eS," or "),MN=n(eS,"A",{href:!0});var edt=s(MN);$fo=r(edt,"T5TokenizerFast"),edt.forEach(t),kfo=r(eS," (LongT5 model)"),eS.forEach(t),Sfo=i(S),mh=n(S,"LI",{});var C8e=s(mh);Ole=n(C8e,"STRONG",{});var odt=s(Ole);Rfo=r(odt,"luke"),odt.forEach(t),Pfo=r(C8e," \u2014 "),EN=n(C8e,"A",{href:!0});var rdt=s(EN);Bfo=r(rdt,"LukeTokenizer"),rdt.forEach(t),Nfo=r(C8e," (LUKE model)"),C8e.forEach(t),Ifo=i(S),bs=n(S,"LI",{});var oS=s(bs);Vle=n(oS,"STRONG",{});var tdt=s(Vle);qfo=r(tdt,"lxmert"),tdt.forEach(t),jfo=r(oS," \u2014 "),CN=n(oS,"A",{href:!0});var adt=s(CN);Dfo=r(adt,"LxmertTokenizer"),adt.forEach(t),Gfo=r(oS," or "),wN=n(oS,"A",{href:!0});var ndt=s(wN);Ofo=r(ndt,"LxmertTokenizerFast"),ndt.forEach(t),Vfo=r(oS," (LXMERT model)"),oS.forEach(t),Xfo=i(S),gh=n(S,"LI",{});var w8e=s(gh);Xle=n(w8e,"STRONG",{});var sdt=s(Xle);zfo=r(sdt,"m2m_100"),sdt.forEach(t),Qfo=r(w8e," \u2014 "),AN=n(w8e,"A",{href:!0});var ldt=s(AN);Wfo=r(ldt,"M2M100Tokenizer"),ldt.forEach(t),Hfo=r(w8e," (M2M100 model)"),w8e.forEach(t),Ufo=i(S),hh=n(S,"LI",{});var A8e=s(hh);zle=n(A8e,"STRONG",{});var idt=s(zle);Jfo=r(idt,"marian"),idt.forEach(t),Yfo=r(A8e," \u2014 "),LN=n(A8e,"A",{href:!0});var ddt=s(LN);Kfo=r(ddt,"MarianTokenizer"),ddt.forEach(t),Zfo=r(A8e," (Marian model)"),A8e.forEach(t),emo=i(S),vs=n(S,"LI",{});var rS=s(vs);Qle=n(rS,"STRONG",{});var cdt=s(Qle);omo=r(cdt,"mbart"),cdt.forEach(t),rmo=r(rS," \u2014 "),yN=n(rS,"A",{href:!0});var fdt=s(yN);tmo=r(fdt,"MBartTokenizer"),fdt.forEach(t),amo=r(rS," or "),xN=n(rS,"A",{href:!0});var mdt=s(xN);nmo=r(mdt,"MBartTokenizerFast"),mdt.forEach(t),smo=r(rS," (mBART model)"),rS.forEach(t),lmo=i(S),Fs=n(S,"LI",{});var tS=s(Fs);Wle=n(tS,"STRONG",{});var gdt=s(Wle);imo=r(gdt,"mbart50"),gdt.forEach(t),dmo=r(tS," \u2014 "),$N=n(tS,"A",{href:!0});var hdt=s($N);cmo=r(hdt,"MBart50Tokenizer"),hdt.forEach(t),fmo=r(tS," or "),kN=n(tS,"A",{href:!0});var pdt=s(kN);mmo=r(pdt,"MBart50TokenizerFast"),pdt.forEach(t),gmo=r(tS," (mBART-50 model)"),tS.forEach(t),hmo=i(S),Ts=n(S,"LI",{});var aS=s(Ts);Hle=n(aS,"STRONG",{});var _dt=s(Hle);pmo=r(_dt,"megatron-bert"),_dt.forEach(t),_mo=r(aS," \u2014 "),SN=n(aS,"A",{href:!0});var udt=s(SN);umo=r(udt,"BertTokenizer"),udt.forEach(t),bmo=r(aS," or "),RN=n(aS,"A",{href:!0});var bdt=s(RN);vmo=r(bdt,"BertTokenizerFast"),bdt.forEach(t),Fmo=r(aS," (Megatron-BERT model)"),aS.forEach(t),Tmo=i(S),ph=n(S,"LI",{});var L8e=s(ph);Ule=n(L8e,"STRONG",{});var vdt=s(Ule);Mmo=r(vdt,"mluke"),vdt.forEach(t),Emo=r(L8e," \u2014 "),PN=n(L8e,"A",{href:!0});var Fdt=s(PN);Cmo=r(Fdt,"MLukeTokenizer"),Fdt.forEach(t),wmo=r(L8e," (mLUKE model)"),L8e.forEach(t),Amo=i(S),Ms=n(S,"LI",{});var nS=s(Ms);Jle=n(nS,"STRONG",{});var Tdt=s(Jle);Lmo=r(Tdt,"mobilebert"),Tdt.forEach(t),ymo=r(nS," \u2014 "),BN=n(nS,"A",{href:!0});var Mdt=s(BN);xmo=r(Mdt,"MobileBertTokenizer"),Mdt.forEach(t),$mo=r(nS," or "),NN=n(nS,"A",{href:!0});var Edt=s(NN);kmo=r(Edt,"MobileBertTokenizerFast"),Edt.forEach(t),Smo=r(nS," (MobileBERT model)"),nS.forEach(t),Rmo=i(S),Es=n(S,"LI",{});var sS=s(Es);Yle=n(sS,"STRONG",{});var Cdt=s(Yle);Pmo=r(Cdt,"mpnet"),Cdt.forEach(t),Bmo=r(sS," \u2014 "),IN=n(sS,"A",{href:!0});var wdt=s(IN);Nmo=r(wdt,"MPNetTokenizer"),wdt.forEach(t),Imo=r(sS," or "),qN=n(sS,"A",{href:!0});var Adt=s(qN);qmo=r(Adt,"MPNetTokenizerFast"),Adt.forEach(t),jmo=r(sS," (MPNet model)"),sS.forEach(t),Dmo=i(S),Cs=n(S,"LI",{});var lS=s(Cs);Kle=n(lS,"STRONG",{});var Ldt=s(Kle);Gmo=r(Ldt,"mt5"),Ldt.forEach(t),Omo=r(lS," \u2014 "),jN=n(lS,"A",{href:!0});var ydt=s(jN);Vmo=r(ydt,"MT5Tokenizer"),ydt.forEach(t),Xmo=r(lS," or "),DN=n(lS,"A",{href:!0});var xdt=s(DN);zmo=r(xdt,"MT5TokenizerFast"),xdt.forEach(t),Qmo=r(lS," (MT5 model)"),lS.forEach(t),Wmo=i(S),ws=n(S,"LI",{});var iS=s(ws);Zle=n(iS,"STRONG",{});var $dt=s(Zle);Hmo=r($dt,"mvp"),$dt.forEach(t),Umo=r(iS," \u2014 "),GN=n(iS,"A",{href:!0});var kdt=s(GN);Jmo=r(kdt,"MvpTokenizer"),kdt.forEach(t),Ymo=r(iS," or "),ON=n(iS,"A",{href:!0});var Sdt=s(ON);Kmo=r(Sdt,"MvpTokenizerFast"),Sdt.forEach(t),Zmo=r(iS," (MVP model)"),iS.forEach(t),ego=i(S),As=n(S,"LI",{});var dS=s(As);eie=n(dS,"STRONG",{});var Rdt=s(eie);ogo=r(Rdt,"nezha"),Rdt.forEach(t),rgo=r(dS," \u2014 "),VN=n(dS,"A",{href:!0});var Pdt=s(VN);tgo=r(Pdt,"BertTokenizer"),Pdt.forEach(t),ago=r(dS," or "),XN=n(dS,"A",{href:!0});var Bdt=s(XN);ngo=r(Bdt,"BertTokenizerFast"),Bdt.forEach(t),sgo=r(dS," (Nezha model)"),dS.forEach(t),lgo=i(S),Ls=n(S,"LI",{});var cS=s(Ls);oie=n(cS,"STRONG",{});var Ndt=s(oie);igo=r(Ndt,"nystromformer"),Ndt.forEach(t),dgo=r(cS," \u2014 "),zN=n(cS,"A",{href:!0});var Idt=s(zN);cgo=r(Idt,"AlbertTokenizer"),Idt.forEach(t),fgo=r(cS," or "),QN=n(cS,"A",{href:!0});var qdt=s(QN);mgo=r(qdt,"AlbertTokenizerFast"),qdt.forEach(t),ggo=r(cS," (Nystr\xF6mformer model)"),cS.forEach(t),hgo=i(S),ys=n(S,"LI",{});var fS=s(ys);rie=n(fS,"STRONG",{});var jdt=s(rie);pgo=r(jdt,"openai-gpt"),jdt.forEach(t),_go=r(fS," \u2014 "),WN=n(fS,"A",{href:!0});var Ddt=s(WN);ugo=r(Ddt,"OpenAIGPTTokenizer"),Ddt.forEach(t),bgo=r(fS," or "),HN=n(fS,"A",{href:!0});var Gdt=s(HN);vgo=r(Gdt,"OpenAIGPTTokenizerFast"),Gdt.forEach(t),Fgo=r(fS," (OpenAI GPT model)"),fS.forEach(t),Tgo=i(S),_h=n(S,"LI",{});var y8e=s(_h);tie=n(y8e,"STRONG",{});var Odt=s(tie);Mgo=r(Odt,"opt"),Odt.forEach(t),Ego=r(y8e," \u2014 "),UN=n(y8e,"A",{href:!0});var Vdt=s(UN);Cgo=r(Vdt,"GPT2Tokenizer"),Vdt.forEach(t),wgo=r(y8e," (OPT model)"),y8e.forEach(t),Ago=i(S),xs=n(S,"LI",{});var mS=s(xs);aie=n(mS,"STRONG",{});var Xdt=s(aie);Lgo=r(Xdt,"pegasus"),Xdt.forEach(t),ygo=r(mS," \u2014 "),JN=n(mS,"A",{href:!0});var zdt=s(JN);xgo=r(zdt,"PegasusTokenizer"),zdt.forEach(t),$go=r(mS," or "),YN=n(mS,"A",{href:!0});var Qdt=s(YN);kgo=r(Qdt,"PegasusTokenizerFast"),Qdt.forEach(t),Sgo=r(mS," (Pegasus model)"),mS.forEach(t),Rgo=i(S),uh=n(S,"LI",{});var x8e=s(uh);nie=n(x8e,"STRONG",{});var Wdt=s(nie);Pgo=r(Wdt,"perceiver"),Wdt.forEach(t),Bgo=r(x8e," \u2014 "),KN=n(x8e,"A",{href:!0});var Hdt=s(KN);Ngo=r(Hdt,"PerceiverTokenizer"),Hdt.forEach(t),Igo=r(x8e," (Perceiver model)"),x8e.forEach(t),qgo=i(S),bh=n(S,"LI",{});var $8e=s(bh);sie=n($8e,"STRONG",{});var Udt=s(sie);jgo=r(Udt,"phobert"),Udt.forEach(t),Dgo=r($8e," \u2014 "),ZN=n($8e,"A",{href:!0});var Jdt=s(ZN);Ggo=r(Jdt,"PhobertTokenizer"),Jdt.forEach(t),Ogo=r($8e," (PhoBERT model)"),$8e.forEach(t),Vgo=i(S),vh=n(S,"LI",{});var k8e=s(vh);lie=n(k8e,"STRONG",{});var Ydt=s(lie);Xgo=r(Ydt,"plbart"),Ydt.forEach(t),zgo=r(k8e," \u2014 "),eI=n(k8e,"A",{href:!0});var Kdt=s(eI);Qgo=r(Kdt,"PLBartTokenizer"),Kdt.forEach(t),Wgo=r(k8e," (PLBart model)"),k8e.forEach(t),Hgo=i(S),Fh=n(S,"LI",{});var S8e=s(Fh);iie=n(S8e,"STRONG",{});var Zdt=s(iie);Ugo=r(Zdt,"prophetnet"),Zdt.forEach(t),Jgo=r(S8e," \u2014 "),oI=n(S8e,"A",{href:!0});var ect=s(oI);Ygo=r(ect,"ProphetNetTokenizer"),ect.forEach(t),Kgo=r(S8e," (ProphetNet model)"),S8e.forEach(t),Zgo=i(S),$s=n(S,"LI",{});var gS=s($s);die=n(gS,"STRONG",{});var oct=s(die);eho=r(oct,"qdqbert"),oct.forEach(t),oho=r(gS," \u2014 "),rI=n(gS,"A",{href:!0});var rct=s(rI);rho=r(rct,"BertTokenizer"),rct.forEach(t),tho=r(gS," or "),tI=n(gS,"A",{href:!0});var tct=s(tI);aho=r(tct,"BertTokenizerFast"),tct.forEach(t),nho=r(gS," (QDQBert model)"),gS.forEach(t),sho=i(S),Th=n(S,"LI",{});var R8e=s(Th);cie=n(R8e,"STRONG",{});var act=s(cie);lho=r(act,"rag"),act.forEach(t),iho=r(R8e," \u2014 "),aI=n(R8e,"A",{href:!0});var nct=s(aI);dho=r(nct,"RagTokenizer"),nct.forEach(t),cho=r(R8e," (RAG model)"),R8e.forEach(t),fho=i(S),ks=n(S,"LI",{});var hS=s(ks);fie=n(hS,"STRONG",{});var sct=s(fie);mho=r(sct,"realm"),sct.forEach(t),gho=r(hS," \u2014 "),nI=n(hS,"A",{href:!0});var lct=s(nI);hho=r(lct,"RealmTokenizer"),lct.forEach(t),pho=r(hS," or "),sI=n(hS,"A",{href:!0});var ict=s(sI);_ho=r(ict,"RealmTokenizerFast"),ict.forEach(t),uho=r(hS," (REALM model)"),hS.forEach(t),bho=i(S),Ss=n(S,"LI",{});var pS=s(Ss);mie=n(pS,"STRONG",{});var dct=s(mie);vho=r(dct,"reformer"),dct.forEach(t),Fho=r(pS," \u2014 "),lI=n(pS,"A",{href:!0});var cct=s(lI);Tho=r(cct,"ReformerTokenizer"),cct.forEach(t),Mho=r(pS," or "),iI=n(pS,"A",{href:!0});var fct=s(iI);Eho=r(fct,"ReformerTokenizerFast"),fct.forEach(t),Cho=r(pS," (Reformer model)"),pS.forEach(t),who=i(S),Rs=n(S,"LI",{});var _S=s(Rs);gie=n(_S,"STRONG",{});var mct=s(gie);Aho=r(mct,"rembert"),mct.forEach(t),Lho=r(_S," \u2014 "),dI=n(_S,"A",{href:!0});var gct=s(dI);yho=r(gct,"RemBertTokenizer"),gct.forEach(t),xho=r(_S," or "),cI=n(_S,"A",{href:!0});var hct=s(cI);$ho=r(hct,"RemBertTokenizerFast"),hct.forEach(t),kho=r(_S," (RemBERT model)"),_S.forEach(t),Sho=i(S),Ps=n(S,"LI",{});var uS=s(Ps);hie=n(uS,"STRONG",{});var pct=s(hie);Rho=r(pct,"retribert"),pct.forEach(t),Pho=r(uS," \u2014 "),fI=n(uS,"A",{href:!0});var _ct=s(fI);Bho=r(_ct,"RetriBertTokenizer"),_ct.forEach(t),Nho=r(uS," or "),mI=n(uS,"A",{href:!0});var uct=s(mI);Iho=r(uct,"RetriBertTokenizerFast"),uct.forEach(t),qho=r(uS," (RetriBERT model)"),uS.forEach(t),jho=i(S),Bs=n(S,"LI",{});var bS=s(Bs);pie=n(bS,"STRONG",{});var bct=s(pie);Dho=r(bct,"roberta"),bct.forEach(t),Gho=r(bS," \u2014 "),gI=n(bS,"A",{href:!0});var vct=s(gI);Oho=r(vct,"RobertaTokenizer"),vct.forEach(t),Vho=r(bS," or "),hI=n(bS,"A",{href:!0});var Fct=s(hI);Xho=r(Fct,"RobertaTokenizerFast"),Fct.forEach(t),zho=r(bS," (RoBERTa model)"),bS.forEach(t),Qho=i(S),Ns=n(S,"LI",{});var vS=s(Ns);_ie=n(vS,"STRONG",{});var Tct=s(_ie);Who=r(Tct,"roformer"),Tct.forEach(t),Hho=r(vS," \u2014 "),pI=n(vS,"A",{href:!0});var Mct=s(pI);Uho=r(Mct,"RoFormerTokenizer"),Mct.forEach(t),Jho=r(vS," or "),_I=n(vS,"A",{href:!0});var Ect=s(_I);Yho=r(Ect,"RoFormerTokenizerFast"),Ect.forEach(t),Kho=r(vS," (RoFormer model)"),vS.forEach(t),Zho=i(S),Mh=n(S,"LI",{});var P8e=s(Mh);uie=n(P8e,"STRONG",{});var Cct=s(uie);epo=r(Cct,"speech_to_text"),Cct.forEach(t),opo=r(P8e," \u2014 "),uI=n(P8e,"A",{href:!0});var wct=s(uI);rpo=r(wct,"Speech2TextTokenizer"),wct.forEach(t),tpo=r(P8e," (Speech2Text model)"),P8e.forEach(t),apo=i(S),Eh=n(S,"LI",{});var B8e=s(Eh);bie=n(B8e,"STRONG",{});var Act=s(bie);npo=r(Act,"speech_to_text_2"),Act.forEach(t),spo=r(B8e," \u2014 "),bI=n(B8e,"A",{href:!0});var Lct=s(bI);lpo=r(Lct,"Speech2Text2Tokenizer"),Lct.forEach(t),ipo=r(B8e," (Speech2Text2 model)"),B8e.forEach(t),dpo=i(S),Is=n(S,"LI",{});var FS=s(Is);vie=n(FS,"STRONG",{});var yct=s(vie);cpo=r(yct,"splinter"),yct.forEach(t),fpo=r(FS," \u2014 "),vI=n(FS,"A",{href:!0});var xct=s(vI);mpo=r(xct,"SplinterTokenizer"),xct.forEach(t),gpo=r(FS," or "),FI=n(FS,"A",{href:!0});var $ct=s(FI);hpo=r($ct,"SplinterTokenizerFast"),$ct.forEach(t),ppo=r(FS," (Splinter model)"),FS.forEach(t),_po=i(S),qs=n(S,"LI",{});var TS=s(qs);Fie=n(TS,"STRONG",{});var kct=s(Fie);upo=r(kct,"squeezebert"),kct.forEach(t),bpo=r(TS," \u2014 "),TI=n(TS,"A",{href:!0});var Sct=s(TI);vpo=r(Sct,"SqueezeBertTokenizer"),Sct.forEach(t),Fpo=r(TS," or "),MI=n(TS,"A",{href:!0});var Rct=s(MI);Tpo=r(Rct,"SqueezeBertTokenizerFast"),Rct.forEach(t),Mpo=r(TS," (SqueezeBERT model)"),TS.forEach(t),Epo=i(S),js=n(S,"LI",{});var MS=s(js);Tie=n(MS,"STRONG",{});var Pct=s(Tie);Cpo=r(Pct,"t5"),Pct.forEach(t),wpo=r(MS," \u2014 "),EI=n(MS,"A",{href:!0});var Bct=s(EI);Apo=r(Bct,"T5Tokenizer"),Bct.forEach(t),Lpo=r(MS," or "),CI=n(MS,"A",{href:!0});var Nct=s(CI);ypo=r(Nct,"T5TokenizerFast"),Nct.forEach(t),xpo=r(MS," (T5 model)"),MS.forEach(t),$po=i(S),Ch=n(S,"LI",{});var N8e=s(Ch);Mie=n(N8e,"STRONG",{});var Ict=s(Mie);kpo=r(Ict,"tapas"),Ict.forEach(t),Spo=r(N8e," \u2014 "),wI=n(N8e,"A",{href:!0});var qct=s(wI);Rpo=r(qct,"TapasTokenizer"),qct.forEach(t),Ppo=r(N8e," (TAPAS model)"),N8e.forEach(t),Bpo=i(S),wh=n(S,"LI",{});var I8e=s(wh);Eie=n(I8e,"STRONG",{});var jct=s(Eie);Npo=r(jct,"tapex"),jct.forEach(t),Ipo=r(I8e," \u2014 "),AI=n(I8e,"A",{href:!0});var Dct=s(AI);qpo=r(Dct,"TapexTokenizer"),Dct.forEach(t),jpo=r(I8e," (TAPEX model)"),I8e.forEach(t),Dpo=i(S),Ah=n(S,"LI",{});var q8e=s(Ah);Cie=n(q8e,"STRONG",{});var Gct=s(Cie);Gpo=r(Gct,"transfo-xl"),Gct.forEach(t),Opo=r(q8e," \u2014 "),LI=n(q8e,"A",{href:!0});var Oct=s(LI);Vpo=r(Oct,"TransfoXLTokenizer"),Oct.forEach(t),Xpo=r(q8e," (Transformer-XL model)"),q8e.forEach(t),zpo=i(S),Ds=n(S,"LI",{});var ES=s(Ds);wie=n(ES,"STRONG",{});var Vct=s(wie);Qpo=r(Vct,"vilt"),Vct.forEach(t),Wpo=r(ES," \u2014 "),yI=n(ES,"A",{href:!0});var Xct=s(yI);Hpo=r(Xct,"BertTokenizer"),Xct.forEach(t),Upo=r(ES," or "),xI=n(ES,"A",{href:!0});var zct=s(xI);Jpo=r(zct,"BertTokenizerFast"),zct.forEach(t),Ypo=r(ES," (ViLT model)"),ES.forEach(t),Kpo=i(S),Gs=n(S,"LI",{});var CS=s(Gs);Aie=n(CS,"STRONG",{});var Qct=s(Aie);Zpo=r(Qct,"visual_bert"),Qct.forEach(t),e_o=r(CS," \u2014 "),$I=n(CS,"A",{href:!0});var Wct=s($I);o_o=r(Wct,"BertTokenizer"),Wct.forEach(t),r_o=r(CS," or "),kI=n(CS,"A",{href:!0});var Hct=s(kI);t_o=r(Hct,"BertTokenizerFast"),Hct.forEach(t),a_o=r(CS," (VisualBERT model)"),CS.forEach(t),n_o=i(S),Lh=n(S,"LI",{});var j8e=s(Lh);Lie=n(j8e,"STRONG",{});var Uct=s(Lie);s_o=r(Uct,"wav2vec2"),Uct.forEach(t),l_o=r(j8e," \u2014 "),SI=n(j8e,"A",{href:!0});var Jct=s(SI);i_o=r(Jct,"Wav2Vec2CTCTokenizer"),Jct.forEach(t),d_o=r(j8e," (Wav2Vec2 model)"),j8e.forEach(t),c_o=i(S),yh=n(S,"LI",{});var D8e=s(yh);yie=n(D8e,"STRONG",{});var Yct=s(yie);f_o=r(Yct,"wav2vec2-conformer"),Yct.forEach(t),m_o=r(D8e," \u2014 "),RI=n(D8e,"A",{href:!0});var Kct=s(RI);g_o=r(Kct,"Wav2Vec2CTCTokenizer"),Kct.forEach(t),h_o=r(D8e," (Wav2Vec2-Conformer model)"),D8e.forEach(t),p_o=i(S),xh=n(S,"LI",{});var G8e=s(xh);xie=n(G8e,"STRONG",{});var Zct=s(xie);__o=r(Zct,"wav2vec2_phoneme"),Zct.forEach(t),u_o=r(G8e," \u2014 "),PI=n(G8e,"A",{href:!0});var eft=s(PI);b_o=r(eft,"Wav2Vec2PhonemeCTCTokenizer"),eft.forEach(t),v_o=r(G8e," (Wav2Vec2Phoneme model)"),G8e.forEach(t),F_o=i(S),Os=n(S,"LI",{});var wS=s(Os);$ie=n(wS,"STRONG",{});var oft=s($ie);T_o=r(oft,"xglm"),oft.forEach(t),M_o=r(wS," \u2014 "),BI=n(wS,"A",{href:!0});var rft=s(BI);E_o=r(rft,"XGLMTokenizer"),rft.forEach(t),C_o=r(wS," or "),NI=n(wS,"A",{href:!0});var tft=s(NI);w_o=r(tft,"XGLMTokenizerFast"),tft.forEach(t),A_o=r(wS," (XGLM model)"),wS.forEach(t),L_o=i(S),$h=n(S,"LI",{});var O8e=s($h);kie=n(O8e,"STRONG",{});var aft=s(kie);y_o=r(aft,"xlm"),aft.forEach(t),x_o=r(O8e," \u2014 "),II=n(O8e,"A",{href:!0});var nft=s(II);$_o=r(nft,"XLMTokenizer"),nft.forEach(t),k_o=r(O8e," (XLM model)"),O8e.forEach(t),S_o=i(S),kh=n(S,"LI",{});var V8e=s(kh);Sie=n(V8e,"STRONG",{});var sft=s(Sie);R_o=r(sft,"xlm-prophetnet"),sft.forEach(t),P_o=r(V8e," \u2014 "),qI=n(V8e,"A",{href:!0});var lft=s(qI);B_o=r(lft,"XLMProphetNetTokenizer"),lft.forEach(t),N_o=r(V8e," (XLM-ProphetNet model)"),V8e.forEach(t),I_o=i(S),Vs=n(S,"LI",{});var AS=s(Vs);Rie=n(AS,"STRONG",{});var ift=s(Rie);q_o=r(ift,"xlm-roberta"),ift.forEach(t),j_o=r(AS," \u2014 "),jI=n(AS,"A",{href:!0});var dft=s(jI);D_o=r(dft,"XLMRobertaTokenizer"),dft.forEach(t),G_o=r(AS," or "),DI=n(AS,"A",{href:!0});var cft=s(DI);O_o=r(cft,"XLMRobertaTokenizerFast"),cft.forEach(t),V_o=r(AS," (XLM-RoBERTa model)"),AS.forEach(t),X_o=i(S),Xs=n(S,"LI",{});var LS=s(Xs);Pie=n(LS,"STRONG",{});var fft=s(Pie);z_o=r(fft,"xlm-roberta-xl"),fft.forEach(t),Q_o=r(LS," \u2014 "),GI=n(LS,"A",{href:!0});var mft=s(GI);W_o=r(mft,"RobertaTokenizer"),mft.forEach(t),H_o=r(LS," or "),OI=n(LS,"A",{href:!0});var gft=s(OI);U_o=r(gft,"RobertaTokenizerFast"),gft.forEach(t),J_o=r(LS," (XLM-RoBERTa-XL model)"),LS.forEach(t),Y_o=i(S),zs=n(S,"LI",{});var yS=s(zs);Bie=n(yS,"STRONG",{});var hft=s(Bie);K_o=r(hft,"xlnet"),hft.forEach(t),Z_o=r(yS," \u2014 "),VI=n(yS,"A",{href:!0});var pft=s(VI);euo=r(pft,"XLNetTokenizer"),pft.forEach(t),ouo=r(yS," or "),XI=n(yS,"A",{href:!0});var _ft=s(XI);ruo=r(_ft,"XLNetTokenizerFast"),_ft.forEach(t),tuo=r(yS," (XLNet model)"),yS.forEach(t),auo=i(S),Qs=n(S,"LI",{});var xS=s(Qs);Nie=n(xS,"STRONG",{});var uft=s(Nie);nuo=r(uft,"yoso"),uft.forEach(t),suo=r(xS," \u2014 "),zI=n(xS,"A",{href:!0});var bft=s(zI);luo=r(bft,"AlbertTokenizer"),bft.forEach(t),iuo=r(xS," or "),QI=n(xS,"A",{href:!0});var vft=s(QI);duo=r(vft,"AlbertTokenizerFast"),vft.forEach(t),cuo=r(xS," (YOSO model)"),xS.forEach(t),S.forEach(t),fuo=i(Ks),T(Sh.$$.fragment,Ks),Ks.forEach(t),muo=i(Ys),Rh=n(Ys,"DIV",{class:!0});var sQe=s(Rh);T(uy.$$.fragment,sQe),guo=i(sQe),Iie=n(sQe,"P",{});var Fft=s(Iie);huo=r(Fft,"Register a new tokenizer in this mapping."),Fft.forEach(t),sQe.forEach(t),Ys.forEach(t),nXe=i(f),Ii=n(f,"H2",{class:!0});var lQe=s(Ii);Ph=n(lQe,"A",{id:!0,class:!0,href:!0});var Tft=s(Ph);qie=n(Tft,"SPAN",{});var Mft=s(qie);T(by.$$.fragment,Mft),Mft.forEach(t),Tft.forEach(t),puo=i(lQe),jie=n(lQe,"SPAN",{});var Eft=s(jie);_uo=r(Eft,"AutoFeatureExtractor"),Eft.forEach(t),lQe.forEach(t),sXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(vy.$$.fragment,Zs),uuo=i(Zs),Fy=n(Zs,"P",{});var iQe=s(Fy);buo=r(iQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),WI=n(iQe,"A",{href:!0});var Cft=s(WI);vuo=r(Cft,"AutoFeatureExtractor.from_pretrained()"),Cft.forEach(t),Fuo=r(iQe," class method."),iQe.forEach(t),Tuo=i(Zs),Ty=n(Zs,"P",{});var dQe=s(Ty);Muo=r(dQe,"This class cannot be instantiated directly using "),Die=n(dQe,"CODE",{});var wft=s(Die);Euo=r(wft,"__init__()"),wft.forEach(t),Cuo=r(dQe," (throws an error)."),dQe.forEach(t),wuo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(My.$$.fragment,aa),Auo=i(aa),Gie=n(aa,"P",{});var Aft=s(Gie);Luo=r(Aft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Aft.forEach(t),yuo=i(aa),Ba=n(aa,"P",{});var l7=s(Ba);xuo=r(l7,"The feature extractor class to instantiate is selected based on the "),Oie=n(l7,"CODE",{});var Lft=s(Oie);$uo=r(Lft,"model_type"),Lft.forEach(t),kuo=r(l7,` property of the config object
(either passed as an argument or loaded from `),Vie=n(l7,"CODE",{});var yft=s(Vie);Suo=r(yft,"pretrained_model_name_or_path"),yft.forEach(t),Ruo=r(l7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xie=n(l7,"CODE",{});var xft=s(Xie);Puo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),Buo=r(l7,":"),l7.forEach(t),Nuo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var X8e=s(Bh);zie=n(X8e,"STRONG",{});var $ft=s(zie);Iuo=r($ft,"beit"),$ft.forEach(t),quo=r(X8e," \u2014 "),HI=n(X8e,"A",{href:!0});var kft=s(HI);juo=r(kft,"BeitFeatureExtractor"),kft.forEach(t),Duo=r(X8e," (BEiT model)"),X8e.forEach(t),Guo=i(K),Nh=n(K,"LI",{});var z8e=s(Nh);Qie=n(z8e,"STRONG",{});var Sft=s(Qie);Ouo=r(Sft,"clip"),Sft.forEach(t),Vuo=r(z8e," \u2014 "),UI=n(z8e,"A",{href:!0});var Rft=s(UI);Xuo=r(Rft,"CLIPFeatureExtractor"),Rft.forEach(t),zuo=r(z8e," (CLIP model)"),z8e.forEach(t),Quo=i(K),Ih=n(K,"LI",{});var Q8e=s(Ih);Wie=n(Q8e,"STRONG",{});var Pft=s(Wie);Wuo=r(Pft,"convnext"),Pft.forEach(t),Huo=r(Q8e," \u2014 "),JI=n(Q8e,"A",{href:!0});var Bft=s(JI);Uuo=r(Bft,"ConvNextFeatureExtractor"),Bft.forEach(t),Juo=r(Q8e," (ConvNeXT model)"),Q8e.forEach(t),Yuo=i(K),qh=n(K,"LI",{});var W8e=s(qh);Hie=n(W8e,"STRONG",{});var Nft=s(Hie);Kuo=r(Nft,"cvt"),Nft.forEach(t),Zuo=r(W8e," \u2014 "),YI=n(W8e,"A",{href:!0});var Ift=s(YI);e1o=r(Ift,"ConvNextFeatureExtractor"),Ift.forEach(t),o1o=r(W8e," (CvT model)"),W8e.forEach(t),r1o=i(K),jh=n(K,"LI",{});var H8e=s(jh);Uie=n(H8e,"STRONG",{});var qft=s(Uie);t1o=r(qft,"data2vec-audio"),qft.forEach(t),a1o=r(H8e," \u2014 "),KI=n(H8e,"A",{href:!0});var jft=s(KI);n1o=r(jft,"Wav2Vec2FeatureExtractor"),jft.forEach(t),s1o=r(H8e," (Data2VecAudio model)"),H8e.forEach(t),l1o=i(K),Dh=n(K,"LI",{});var U8e=s(Dh);Jie=n(U8e,"STRONG",{});var Dft=s(Jie);i1o=r(Dft,"data2vec-vision"),Dft.forEach(t),d1o=r(U8e," \u2014 "),ZI=n(U8e,"A",{href:!0});var Gft=s(ZI);c1o=r(Gft,"BeitFeatureExtractor"),Gft.forEach(t),f1o=r(U8e," (Data2VecVision model)"),U8e.forEach(t),m1o=i(K),Gh=n(K,"LI",{});var J8e=s(Gh);Yie=n(J8e,"STRONG",{});var Oft=s(Yie);g1o=r(Oft,"deit"),Oft.forEach(t),h1o=r(J8e," \u2014 "),eq=n(J8e,"A",{href:!0});var Vft=s(eq);p1o=r(Vft,"DeiTFeatureExtractor"),Vft.forEach(t),_1o=r(J8e," (DeiT model)"),J8e.forEach(t),u1o=i(K),Oh=n(K,"LI",{});var Y8e=s(Oh);Kie=n(Y8e,"STRONG",{});var Xft=s(Kie);b1o=r(Xft,"detr"),Xft.forEach(t),v1o=r(Y8e," \u2014 "),oq=n(Y8e,"A",{href:!0});var zft=s(oq);F1o=r(zft,"DetrFeatureExtractor"),zft.forEach(t),T1o=r(Y8e," (DETR model)"),Y8e.forEach(t),M1o=i(K),Vh=n(K,"LI",{});var K8e=s(Vh);Zie=n(K8e,"STRONG",{});var Qft=s(Zie);E1o=r(Qft,"dpt"),Qft.forEach(t),C1o=r(K8e," \u2014 "),rq=n(K8e,"A",{href:!0});var Wft=s(rq);w1o=r(Wft,"DPTFeatureExtractor"),Wft.forEach(t),A1o=r(K8e," (DPT model)"),K8e.forEach(t),L1o=i(K),Xh=n(K,"LI",{});var Z8e=s(Xh);ede=n(Z8e,"STRONG",{});var Hft=s(ede);y1o=r(Hft,"flava"),Hft.forEach(t),x1o=r(Z8e," \u2014 "),tq=n(Z8e,"A",{href:!0});var Uft=s(tq);$1o=r(Uft,"FlavaFeatureExtractor"),Uft.forEach(t),k1o=r(Z8e," (FLAVA model)"),Z8e.forEach(t),S1o=i(K),zh=n(K,"LI",{});var e9e=s(zh);ode=n(e9e,"STRONG",{});var Jft=s(ode);R1o=r(Jft,"glpn"),Jft.forEach(t),P1o=r(e9e," \u2014 "),aq=n(e9e,"A",{href:!0});var Yft=s(aq);B1o=r(Yft,"GLPNFeatureExtractor"),Yft.forEach(t),N1o=r(e9e," (GLPN model)"),e9e.forEach(t),I1o=i(K),Qh=n(K,"LI",{});var o9e=s(Qh);rde=n(o9e,"STRONG",{});var Kft=s(rde);q1o=r(Kft,"groupvit"),Kft.forEach(t),j1o=r(o9e," \u2014 "),nq=n(o9e,"A",{href:!0});var Zft=s(nq);D1o=r(Zft,"CLIPFeatureExtractor"),Zft.forEach(t),G1o=r(o9e," (GroupViT model)"),o9e.forEach(t),O1o=i(K),Wh=n(K,"LI",{});var r9e=s(Wh);tde=n(r9e,"STRONG",{});var emt=s(tde);V1o=r(emt,"hubert"),emt.forEach(t),X1o=r(r9e," \u2014 "),sq=n(r9e,"A",{href:!0});var omt=s(sq);z1o=r(omt,"Wav2Vec2FeatureExtractor"),omt.forEach(t),Q1o=r(r9e," (Hubert model)"),r9e.forEach(t),W1o=i(K),Hh=n(K,"LI",{});var t9e=s(Hh);ade=n(t9e,"STRONG",{});var rmt=s(ade);H1o=r(rmt,"imagegpt"),rmt.forEach(t),U1o=r(t9e," \u2014 "),lq=n(t9e,"A",{href:!0});var tmt=s(lq);J1o=r(tmt,"ImageGPTFeatureExtractor"),tmt.forEach(t),Y1o=r(t9e," (ImageGPT model)"),t9e.forEach(t),K1o=i(K),Uh=n(K,"LI",{});var a9e=s(Uh);nde=n(a9e,"STRONG",{});var amt=s(nde);Z1o=r(amt,"layoutlmv2"),amt.forEach(t),e4o=r(a9e," \u2014 "),iq=n(a9e,"A",{href:!0});var nmt=s(iq);o4o=r(nmt,"LayoutLMv2FeatureExtractor"),nmt.forEach(t),r4o=r(a9e," (LayoutLMv2 model)"),a9e.forEach(t),t4o=i(K),Jh=n(K,"LI",{});var n9e=s(Jh);sde=n(n9e,"STRONG",{});var smt=s(sde);a4o=r(smt,"layoutlmv3"),smt.forEach(t),n4o=r(n9e," \u2014 "),dq=n(n9e,"A",{href:!0});var lmt=s(dq);s4o=r(lmt,"LayoutLMv3FeatureExtractor"),lmt.forEach(t),l4o=r(n9e," (LayoutLMv3 model)"),n9e.forEach(t),i4o=i(K),Yh=n(K,"LI",{});var s9e=s(Yh);lde=n(s9e,"STRONG",{});var imt=s(lde);d4o=r(imt,"levit"),imt.forEach(t),c4o=r(s9e," \u2014 "),cq=n(s9e,"A",{href:!0});var dmt=s(cq);f4o=r(dmt,"LevitFeatureExtractor"),dmt.forEach(t),m4o=r(s9e," (LeViT model)"),s9e.forEach(t),g4o=i(K),Kh=n(K,"LI",{});var l9e=s(Kh);ide=n(l9e,"STRONG",{});var cmt=s(ide);h4o=r(cmt,"maskformer"),cmt.forEach(t),p4o=r(l9e," \u2014 "),fq=n(l9e,"A",{href:!0});var fmt=s(fq);_4o=r(fmt,"MaskFormerFeatureExtractor"),fmt.forEach(t),u4o=r(l9e," (MaskFormer model)"),l9e.forEach(t),b4o=i(K),Zh=n(K,"LI",{});var i9e=s(Zh);dde=n(i9e,"STRONG",{});var mmt=s(dde);v4o=r(mmt,"mctct"),mmt.forEach(t),F4o=r(i9e," \u2014 "),mq=n(i9e,"A",{href:!0});var gmt=s(mq);T4o=r(gmt,"MCTCTFeatureExtractor"),gmt.forEach(t),M4o=r(i9e," (M-CTC-T model)"),i9e.forEach(t),E4o=i(K),ep=n(K,"LI",{});var d9e=s(ep);cde=n(d9e,"STRONG",{});var hmt=s(cde);C4o=r(hmt,"mobilevit"),hmt.forEach(t),w4o=r(d9e," \u2014 "),gq=n(d9e,"A",{href:!0});var pmt=s(gq);A4o=r(pmt,"MobileViTFeatureExtractor"),pmt.forEach(t),L4o=r(d9e," (MobileViT model)"),d9e.forEach(t),y4o=i(K),op=n(K,"LI",{});var c9e=s(op);fde=n(c9e,"STRONG",{});var _mt=s(fde);x4o=r(_mt,"perceiver"),_mt.forEach(t),$4o=r(c9e," \u2014 "),hq=n(c9e,"A",{href:!0});var umt=s(hq);k4o=r(umt,"PerceiverFeatureExtractor"),umt.forEach(t),S4o=r(c9e," (Perceiver model)"),c9e.forEach(t),R4o=i(K),rp=n(K,"LI",{});var f9e=s(rp);mde=n(f9e,"STRONG",{});var bmt=s(mde);P4o=r(bmt,"poolformer"),bmt.forEach(t),B4o=r(f9e," \u2014 "),pq=n(f9e,"A",{href:!0});var vmt=s(pq);N4o=r(vmt,"PoolFormerFeatureExtractor"),vmt.forEach(t),I4o=r(f9e," (PoolFormer model)"),f9e.forEach(t),q4o=i(K),tp=n(K,"LI",{});var m9e=s(tp);gde=n(m9e,"STRONG",{});var Fmt=s(gde);j4o=r(Fmt,"regnet"),Fmt.forEach(t),D4o=r(m9e," \u2014 "),_q=n(m9e,"A",{href:!0});var Tmt=s(_q);G4o=r(Tmt,"ConvNextFeatureExtractor"),Tmt.forEach(t),O4o=r(m9e," (RegNet model)"),m9e.forEach(t),V4o=i(K),ap=n(K,"LI",{});var g9e=s(ap);hde=n(g9e,"STRONG",{});var Mmt=s(hde);X4o=r(Mmt,"resnet"),Mmt.forEach(t),z4o=r(g9e," \u2014 "),uq=n(g9e,"A",{href:!0});var Emt=s(uq);Q4o=r(Emt,"ConvNextFeatureExtractor"),Emt.forEach(t),W4o=r(g9e," (ResNet model)"),g9e.forEach(t),H4o=i(K),np=n(K,"LI",{});var h9e=s(np);pde=n(h9e,"STRONG",{});var Cmt=s(pde);U4o=r(Cmt,"segformer"),Cmt.forEach(t),J4o=r(h9e," \u2014 "),bq=n(h9e,"A",{href:!0});var wmt=s(bq);Y4o=r(wmt,"SegformerFeatureExtractor"),wmt.forEach(t),K4o=r(h9e," (SegFormer model)"),h9e.forEach(t),Z4o=i(K),sp=n(K,"LI",{});var p9e=s(sp);_de=n(p9e,"STRONG",{});var Amt=s(_de);e2o=r(Amt,"speech_to_text"),Amt.forEach(t),o2o=r(p9e," \u2014 "),vq=n(p9e,"A",{href:!0});var Lmt=s(vq);r2o=r(Lmt,"Speech2TextFeatureExtractor"),Lmt.forEach(t),t2o=r(p9e," (Speech2Text model)"),p9e.forEach(t),a2o=i(K),lp=n(K,"LI",{});var _9e=s(lp);ude=n(_9e,"STRONG",{});var ymt=s(ude);n2o=r(ymt,"swin"),ymt.forEach(t),s2o=r(_9e," \u2014 "),Fq=n(_9e,"A",{href:!0});var xmt=s(Fq);l2o=r(xmt,"ViTFeatureExtractor"),xmt.forEach(t),i2o=r(_9e," (Swin Transformer model)"),_9e.forEach(t),d2o=i(K),ip=n(K,"LI",{});var u9e=s(ip);bde=n(u9e,"STRONG",{});var $mt=s(bde);c2o=r($mt,"van"),$mt.forEach(t),f2o=r(u9e," \u2014 "),Tq=n(u9e,"A",{href:!0});var kmt=s(Tq);m2o=r(kmt,"ConvNextFeatureExtractor"),kmt.forEach(t),g2o=r(u9e," (VAN model)"),u9e.forEach(t),h2o=i(K),dp=n(K,"LI",{});var b9e=s(dp);vde=n(b9e,"STRONG",{});var Smt=s(vde);p2o=r(Smt,"vilt"),Smt.forEach(t),_2o=r(b9e," \u2014 "),Mq=n(b9e,"A",{href:!0});var Rmt=s(Mq);u2o=r(Rmt,"ViltFeatureExtractor"),Rmt.forEach(t),b2o=r(b9e," (ViLT model)"),b9e.forEach(t),v2o=i(K),cp=n(K,"LI",{});var v9e=s(cp);Fde=n(v9e,"STRONG",{});var Pmt=s(Fde);F2o=r(Pmt,"vit"),Pmt.forEach(t),T2o=r(v9e," \u2014 "),Eq=n(v9e,"A",{href:!0});var Bmt=s(Eq);M2o=r(Bmt,"ViTFeatureExtractor"),Bmt.forEach(t),E2o=r(v9e," (ViT model)"),v9e.forEach(t),C2o=i(K),fp=n(K,"LI",{});var F9e=s(fp);Tde=n(F9e,"STRONG",{});var Nmt=s(Tde);w2o=r(Nmt,"vit_mae"),Nmt.forEach(t),A2o=r(F9e," \u2014 "),Cq=n(F9e,"A",{href:!0});var Imt=s(Cq);L2o=r(Imt,"ViTFeatureExtractor"),Imt.forEach(t),y2o=r(F9e," (ViTMAE model)"),F9e.forEach(t),x2o=i(K),mp=n(K,"LI",{});var T9e=s(mp);Mde=n(T9e,"STRONG",{});var qmt=s(Mde);$2o=r(qmt,"wav2vec2"),qmt.forEach(t),k2o=r(T9e," \u2014 "),wq=n(T9e,"A",{href:!0});var jmt=s(wq);S2o=r(jmt,"Wav2Vec2FeatureExtractor"),jmt.forEach(t),R2o=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),P2o=i(K),gp=n(K,"LI",{});var M9e=s(gp);Ede=n(M9e,"STRONG",{});var Dmt=s(Ede);B2o=r(Dmt,"wav2vec2-conformer"),Dmt.forEach(t),N2o=r(M9e," \u2014 "),Aq=n(M9e,"A",{href:!0});var Gmt=s(Aq);I2o=r(Gmt,"Wav2Vec2FeatureExtractor"),Gmt.forEach(t),q2o=r(M9e," (Wav2Vec2-Conformer model)"),M9e.forEach(t),j2o=i(K),hp=n(K,"LI",{});var E9e=s(hp);Cde=n(E9e,"STRONG",{});var Omt=s(Cde);D2o=r(Omt,"yolos"),Omt.forEach(t),G2o=r(E9e," \u2014 "),Lq=n(E9e,"A",{href:!0});var Vmt=s(Lq);O2o=r(Vmt,"YolosFeatureExtractor"),Vmt.forEach(t),V2o=r(E9e," (YOLOS model)"),E9e.forEach(t),K.forEach(t),X2o=i(aa),T(pp.$$.fragment,aa),z2o=i(aa),T(_p.$$.fragment,aa),aa.forEach(t),Q2o=i(Zs),up=n(Zs,"DIV",{class:!0});var cQe=s(up);T(Ey.$$.fragment,cQe),W2o=i(cQe),wde=n(cQe,"P",{});var Xmt=s(wde);H2o=r(Xmt,"Register a new feature extractor for this class."),Xmt.forEach(t),cQe.forEach(t),Zs.forEach(t),lXe=i(f),qi=n(f,"H2",{class:!0});var fQe=s(qi);bp=n(fQe,"A",{id:!0,class:!0,href:!0});var zmt=s(bp);Ade=n(zmt,"SPAN",{});var Qmt=s(Ade);T(Cy.$$.fragment,Qmt),Qmt.forEach(t),zmt.forEach(t),U2o=i(fQe),Lde=n(fQe,"SPAN",{});var Wmt=s(Lde);J2o=r(Wmt,"AutoProcessor"),Wmt.forEach(t),fQe.forEach(t),iXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(wy.$$.fragment,el),Y2o=i(el),Ay=n(el,"P",{});var mQe=s(Ay);K2o=r(mQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),yq=n(mQe,"A",{href:!0});var Hmt=s(yq);Z2o=r(Hmt,"AutoProcessor.from_pretrained()"),Hmt.forEach(t),ebo=r(mQe," class method."),mQe.forEach(t),obo=i(el),Ly=n(el,"P",{});var gQe=s(Ly);rbo=r(gQe,"This class cannot be instantiated directly using "),yde=n(gQe,"CODE",{});var Umt=s(yde);tbo=r(Umt,"__init__()"),Umt.forEach(t),abo=r(gQe," (throws an error)."),gQe.forEach(t),nbo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(yy.$$.fragment,na),sbo=i(na),xde=n(na,"P",{});var Jmt=s(xde);lbo=r(Jmt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jmt.forEach(t),ibo=i(na),ji=n(na,"P",{});var yre=s(ji);dbo=r(yre,"The processor class to instantiate is selected based on the "),$de=n(yre,"CODE",{});var Ymt=s($de);cbo=r(Ymt,"model_type"),Ymt.forEach(t),fbo=r(yre,` property of the config object (either
passed as an argument or loaded from `),kde=n(yre,"CODE",{});var Kmt=s(kde);mbo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),gbo=r(yre," if possible):"),yre.forEach(t),hbo=i(na),he=n(na,"UL",{});var ue=s(he);vp=n(ue,"LI",{});var C9e=s(vp);Sde=n(C9e,"STRONG",{});var Zmt=s(Sde);pbo=r(Zmt,"clip"),Zmt.forEach(t),_bo=r(C9e," \u2014 "),xq=n(C9e,"A",{href:!0});var egt=s(xq);ubo=r(egt,"CLIPProcessor"),egt.forEach(t),bbo=r(C9e," (CLIP model)"),C9e.forEach(t),vbo=i(ue),Fp=n(ue,"LI",{});var w9e=s(Fp);Rde=n(w9e,"STRONG",{});var ogt=s(Rde);Fbo=r(ogt,"flava"),ogt.forEach(t),Tbo=r(w9e," \u2014 "),Pde=n(w9e,"CODE",{});var rgt=s(Pde);Mbo=r(rgt,"FLAVAProcessor"),rgt.forEach(t),Ebo=r(w9e," (FLAVA model)"),w9e.forEach(t),Cbo=i(ue),Tp=n(ue,"LI",{});var A9e=s(Tp);Bde=n(A9e,"STRONG",{});var tgt=s(Bde);wbo=r(tgt,"groupvit"),tgt.forEach(t),Abo=r(A9e," \u2014 "),$q=n(A9e,"A",{href:!0});var agt=s($q);Lbo=r(agt,"CLIPProcessor"),agt.forEach(t),ybo=r(A9e," (GroupViT model)"),A9e.forEach(t),xbo=i(ue),Mp=n(ue,"LI",{});var L9e=s(Mp);Nde=n(L9e,"STRONG",{});var ngt=s(Nde);$bo=r(ngt,"layoutlmv2"),ngt.forEach(t),kbo=r(L9e," \u2014 "),kq=n(L9e,"A",{href:!0});var sgt=s(kq);Sbo=r(sgt,"LayoutLMv2Processor"),sgt.forEach(t),Rbo=r(L9e," (LayoutLMv2 model)"),L9e.forEach(t),Pbo=i(ue),Ep=n(ue,"LI",{});var y9e=s(Ep);Ide=n(y9e,"STRONG",{});var lgt=s(Ide);Bbo=r(lgt,"layoutlmv3"),lgt.forEach(t),Nbo=r(y9e," \u2014 "),Sq=n(y9e,"A",{href:!0});var igt=s(Sq);Ibo=r(igt,"LayoutLMv3Processor"),igt.forEach(t),qbo=r(y9e," (LayoutLMv3 model)"),y9e.forEach(t),jbo=i(ue),Cp=n(ue,"LI",{});var x9e=s(Cp);qde=n(x9e,"STRONG",{});var dgt=s(qde);Dbo=r(dgt,"layoutxlm"),dgt.forEach(t),Gbo=r(x9e," \u2014 "),Rq=n(x9e,"A",{href:!0});var cgt=s(Rq);Obo=r(cgt,"LayoutXLMProcessor"),cgt.forEach(t),Vbo=r(x9e," (LayoutXLM model)"),x9e.forEach(t),Xbo=i(ue),wp=n(ue,"LI",{});var $9e=s(wp);jde=n($9e,"STRONG",{});var fgt=s(jde);zbo=r(fgt,"sew"),fgt.forEach(t),Qbo=r($9e," \u2014 "),Pq=n($9e,"A",{href:!0});var mgt=s(Pq);Wbo=r(mgt,"Wav2Vec2Processor"),mgt.forEach(t),Hbo=r($9e," (SEW model)"),$9e.forEach(t),Ubo=i(ue),Ap=n(ue,"LI",{});var k9e=s(Ap);Dde=n(k9e,"STRONG",{});var ggt=s(Dde);Jbo=r(ggt,"sew-d"),ggt.forEach(t),Ybo=r(k9e," \u2014 "),Bq=n(k9e,"A",{href:!0});var hgt=s(Bq);Kbo=r(hgt,"Wav2Vec2Processor"),hgt.forEach(t),Zbo=r(k9e," (SEW-D model)"),k9e.forEach(t),evo=i(ue),Lp=n(ue,"LI",{});var S9e=s(Lp);Gde=n(S9e,"STRONG",{});var pgt=s(Gde);ovo=r(pgt,"speech_to_text"),pgt.forEach(t),rvo=r(S9e," \u2014 "),Nq=n(S9e,"A",{href:!0});var _gt=s(Nq);tvo=r(_gt,"Speech2TextProcessor"),_gt.forEach(t),avo=r(S9e," (Speech2Text model)"),S9e.forEach(t),nvo=i(ue),yp=n(ue,"LI",{});var R9e=s(yp);Ode=n(R9e,"STRONG",{});var ugt=s(Ode);svo=r(ugt,"speech_to_text_2"),ugt.forEach(t),lvo=r(R9e," \u2014 "),Iq=n(R9e,"A",{href:!0});var bgt=s(Iq);ivo=r(bgt,"Speech2Text2Processor"),bgt.forEach(t),dvo=r(R9e," (Speech2Text2 model)"),R9e.forEach(t),cvo=i(ue),xp=n(ue,"LI",{});var P9e=s(xp);Vde=n(P9e,"STRONG",{});var vgt=s(Vde);fvo=r(vgt,"trocr"),vgt.forEach(t),mvo=r(P9e," \u2014 "),qq=n(P9e,"A",{href:!0});var Fgt=s(qq);gvo=r(Fgt,"TrOCRProcessor"),Fgt.forEach(t),hvo=r(P9e," (TrOCR model)"),P9e.forEach(t),pvo=i(ue),$p=n(ue,"LI",{});var B9e=s($p);Xde=n(B9e,"STRONG",{});var Tgt=s(Xde);_vo=r(Tgt,"unispeech"),Tgt.forEach(t),uvo=r(B9e," \u2014 "),jq=n(B9e,"A",{href:!0});var Mgt=s(jq);bvo=r(Mgt,"Wav2Vec2Processor"),Mgt.forEach(t),vvo=r(B9e," (UniSpeech model)"),B9e.forEach(t),Fvo=i(ue),kp=n(ue,"LI",{});var N9e=s(kp);zde=n(N9e,"STRONG",{});var Egt=s(zde);Tvo=r(Egt,"unispeech-sat"),Egt.forEach(t),Mvo=r(N9e," \u2014 "),Dq=n(N9e,"A",{href:!0});var Cgt=s(Dq);Evo=r(Cgt,"Wav2Vec2Processor"),Cgt.forEach(t),Cvo=r(N9e," (UniSpeechSat model)"),N9e.forEach(t),wvo=i(ue),Sp=n(ue,"LI",{});var I9e=s(Sp);Qde=n(I9e,"STRONG",{});var wgt=s(Qde);Avo=r(wgt,"vilt"),wgt.forEach(t),Lvo=r(I9e," \u2014 "),Gq=n(I9e,"A",{href:!0});var Agt=s(Gq);yvo=r(Agt,"ViltProcessor"),Agt.forEach(t),xvo=r(I9e," (ViLT model)"),I9e.forEach(t),$vo=i(ue),Rp=n(ue,"LI",{});var q9e=s(Rp);Wde=n(q9e,"STRONG",{});var Lgt=s(Wde);kvo=r(Lgt,"vision-text-dual-encoder"),Lgt.forEach(t),Svo=r(q9e," \u2014 "),Oq=n(q9e,"A",{href:!0});var ygt=s(Oq);Rvo=r(ygt,"VisionTextDualEncoderProcessor"),ygt.forEach(t),Pvo=r(q9e," (VisionTextDualEncoder model)"),q9e.forEach(t),Bvo=i(ue),Pp=n(ue,"LI",{});var j9e=s(Pp);Hde=n(j9e,"STRONG",{});var xgt=s(Hde);Nvo=r(xgt,"wav2vec2"),xgt.forEach(t),Ivo=r(j9e," \u2014 "),Vq=n(j9e,"A",{href:!0});var $gt=s(Vq);qvo=r($gt,"Wav2Vec2Processor"),$gt.forEach(t),jvo=r(j9e," (Wav2Vec2 model)"),j9e.forEach(t),Dvo=i(ue),Bp=n(ue,"LI",{});var D9e=s(Bp);Ude=n(D9e,"STRONG",{});var kgt=s(Ude);Gvo=r(kgt,"wav2vec2-conformer"),kgt.forEach(t),Ovo=r(D9e," \u2014 "),Xq=n(D9e,"A",{href:!0});var Sgt=s(Xq);Vvo=r(Sgt,"Wav2Vec2Processor"),Sgt.forEach(t),Xvo=r(D9e," (Wav2Vec2-Conformer model)"),D9e.forEach(t),zvo=i(ue),Np=n(ue,"LI",{});var G9e=s(Np);Jde=n(G9e,"STRONG",{});var Rgt=s(Jde);Qvo=r(Rgt,"wavlm"),Rgt.forEach(t),Wvo=r(G9e," \u2014 "),zq=n(G9e,"A",{href:!0});var Pgt=s(zq);Hvo=r(Pgt,"Wav2Vec2Processor"),Pgt.forEach(t),Uvo=r(G9e," (WavLM model)"),G9e.forEach(t),ue.forEach(t),Jvo=i(na),T(Ip.$$.fragment,na),Yvo=i(na),T(qp.$$.fragment,na),na.forEach(t),Kvo=i(el),jp=n(el,"DIV",{class:!0});var hQe=s(jp);T(xy.$$.fragment,hQe),Zvo=i(hQe),Yde=n(hQe,"P",{});var Bgt=s(Yde);e3o=r(Bgt,"Register a new processor for this class."),Bgt.forEach(t),hQe.forEach(t),el.forEach(t),dXe=i(f),Di=n(f,"H2",{class:!0});var pQe=s(Di);Dp=n(pQe,"A",{id:!0,class:!0,href:!0});var Ngt=s(Dp);Kde=n(Ngt,"SPAN",{});var Igt=s(Kde);T($y.$$.fragment,Igt),Igt.forEach(t),Ngt.forEach(t),o3o=i(pQe),Zde=n(pQe,"SPAN",{});var qgt=s(Zde);r3o=r(qgt,"AutoModel"),qgt.forEach(t),pQe.forEach(t),cXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(ky.$$.fragment,ol),t3o=i(ol),Gi=n(ol,"P",{});var xre=s(Gi);a3o=r(xre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Qq=n(xre,"A",{href:!0});var jgt=s(Qq);n3o=r(jgt,"from_pretrained()"),jgt.forEach(t),s3o=r(xre," class method or the "),Wq=n(xre,"A",{href:!0});var Dgt=s(Wq);l3o=r(Dgt,"from_config()"),Dgt.forEach(t),i3o=r(xre,` class
method.`),xre.forEach(t),d3o=i(ol),Sy=n(ol,"P",{});var _Qe=s(Sy);c3o=r(_Qe,"This class cannot be instantiated directly using "),ece=n(_Qe,"CODE",{});var Ggt=s(ece);f3o=r(Ggt,"__init__()"),Ggt.forEach(t),m3o=r(_Qe," (throws an error)."),_Qe.forEach(t),g3o=i(ol),lt=n(ol,"DIV",{class:!0});var i7=s(lt);T(Ry.$$.fragment,i7),h3o=i(i7),oce=n(i7,"P",{});var Ogt=s(oce);p3o=r(Ogt,"Instantiates one of the base model classes of the library from a configuration."),Ogt.forEach(t),_3o=i(i7),Oi=n(i7,"P",{});var $re=s(Oi);u3o=r($re,`Note:
Loading a model from its configuration file does `),rce=n($re,"STRONG",{});var Vgt=s(rce);b3o=r(Vgt,"not"),Vgt.forEach(t),v3o=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n($re,"A",{href:!0});var Xgt=s(Hq);F3o=r(Xgt,"from_pretrained()"),Xgt.forEach(t),T3o=r($re," to load the model weights."),$re.forEach(t),M3o=i(i7),T(Gp.$$.fragment,i7),i7.forEach(t),E3o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(Py.$$.fragment,sa),C3o=i(sa),tce=n(sa,"P",{});var zgt=s(tce);w3o=r(zgt,"Instantiate one of the base model classes of the library from a pretrained model."),zgt.forEach(t),A3o=i(sa),Na=n(sa,"P",{});var d7=s(Na);L3o=r(d7,"The model class to instantiate is selected based on the "),ace=n(d7,"CODE",{});var Qgt=s(ace);y3o=r(Qgt,"model_type"),Qgt.forEach(t),x3o=r(d7,` property of the config object (either
passed as an argument or loaded from `),nce=n(d7,"CODE",{});var Wgt=s(nce);$3o=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),k3o=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(d7,"CODE",{});var Hgt=s(sce);S3o=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),R3o=r(d7,":"),d7.forEach(t),P3o=i(sa),y=n(sa,"UL",{});var x=s(y);Op=n(x,"LI",{});var O9e=s(Op);lce=n(O9e,"STRONG",{});var Ugt=s(lce);B3o=r(Ugt,"albert"),Ugt.forEach(t),N3o=r(O9e," \u2014 "),Uq=n(O9e,"A",{href:!0});var Jgt=s(Uq);I3o=r(Jgt,"AlbertModel"),Jgt.forEach(t),q3o=r(O9e," (ALBERT model)"),O9e.forEach(t),j3o=i(x),Vp=n(x,"LI",{});var V9e=s(Vp);ice=n(V9e,"STRONG",{});var Ygt=s(ice);D3o=r(Ygt,"bart"),Ygt.forEach(t),G3o=r(V9e," \u2014 "),Jq=n(V9e,"A",{href:!0});var Kgt=s(Jq);O3o=r(Kgt,"BartModel"),Kgt.forEach(t),V3o=r(V9e," (BART model)"),V9e.forEach(t),X3o=i(x),Xp=n(x,"LI",{});var X9e=s(Xp);dce=n(X9e,"STRONG",{});var Zgt=s(dce);z3o=r(Zgt,"beit"),Zgt.forEach(t),Q3o=r(X9e," \u2014 "),Yq=n(X9e,"A",{href:!0});var eht=s(Yq);W3o=r(eht,"BeitModel"),eht.forEach(t),H3o=r(X9e," (BEiT model)"),X9e.forEach(t),U3o=i(x),zp=n(x,"LI",{});var z9e=s(zp);cce=n(z9e,"STRONG",{});var oht=s(cce);J3o=r(oht,"bert"),oht.forEach(t),Y3o=r(z9e," \u2014 "),Kq=n(z9e,"A",{href:!0});var rht=s(Kq);K3o=r(rht,"BertModel"),rht.forEach(t),Z3o=r(z9e," (BERT model)"),z9e.forEach(t),e5o=i(x),Qp=n(x,"LI",{});var Q9e=s(Qp);fce=n(Q9e,"STRONG",{});var tht=s(fce);o5o=r(tht,"bert-generation"),tht.forEach(t),r5o=r(Q9e," \u2014 "),Zq=n(Q9e,"A",{href:!0});var aht=s(Zq);t5o=r(aht,"BertGenerationEncoder"),aht.forEach(t),a5o=r(Q9e," (Bert Generation model)"),Q9e.forEach(t),n5o=i(x),Wp=n(x,"LI",{});var W9e=s(Wp);mce=n(W9e,"STRONG",{});var nht=s(mce);s5o=r(nht,"big_bird"),nht.forEach(t),l5o=r(W9e," \u2014 "),ej=n(W9e,"A",{href:!0});var sht=s(ej);i5o=r(sht,"BigBirdModel"),sht.forEach(t),d5o=r(W9e," (BigBird model)"),W9e.forEach(t),c5o=i(x),Hp=n(x,"LI",{});var H9e=s(Hp);gce=n(H9e,"STRONG",{});var lht=s(gce);f5o=r(lht,"bigbird_pegasus"),lht.forEach(t),m5o=r(H9e," \u2014 "),oj=n(H9e,"A",{href:!0});var iht=s(oj);g5o=r(iht,"BigBirdPegasusModel"),iht.forEach(t),h5o=r(H9e," (BigBird-Pegasus model)"),H9e.forEach(t),p5o=i(x),Up=n(x,"LI",{});var U9e=s(Up);hce=n(U9e,"STRONG",{});var dht=s(hce);_5o=r(dht,"blenderbot"),dht.forEach(t),u5o=r(U9e," \u2014 "),rj=n(U9e,"A",{href:!0});var cht=s(rj);b5o=r(cht,"BlenderbotModel"),cht.forEach(t),v5o=r(U9e," (Blenderbot model)"),U9e.forEach(t),F5o=i(x),Jp=n(x,"LI",{});var J9e=s(Jp);pce=n(J9e,"STRONG",{});var fht=s(pce);T5o=r(fht,"blenderbot-small"),fht.forEach(t),M5o=r(J9e," \u2014 "),tj=n(J9e,"A",{href:!0});var mht=s(tj);E5o=r(mht,"BlenderbotSmallModel"),mht.forEach(t),C5o=r(J9e," (BlenderbotSmall model)"),J9e.forEach(t),w5o=i(x),Yp=n(x,"LI",{});var Y9e=s(Yp);_ce=n(Y9e,"STRONG",{});var ght=s(_ce);A5o=r(ght,"bloom"),ght.forEach(t),L5o=r(Y9e," \u2014 "),aj=n(Y9e,"A",{href:!0});var hht=s(aj);y5o=r(hht,"BloomModel"),hht.forEach(t),x5o=r(Y9e," (BLOOM model)"),Y9e.forEach(t),$5o=i(x),Kp=n(x,"LI",{});var K9e=s(Kp);uce=n(K9e,"STRONG",{});var pht=s(uce);k5o=r(pht,"camembert"),pht.forEach(t),S5o=r(K9e," \u2014 "),nj=n(K9e,"A",{href:!0});var _ht=s(nj);R5o=r(_ht,"CamembertModel"),_ht.forEach(t),P5o=r(K9e," (CamemBERT model)"),K9e.forEach(t),B5o=i(x),Zp=n(x,"LI",{});var Z9e=s(Zp);bce=n(Z9e,"STRONG",{});var uht=s(bce);N5o=r(uht,"canine"),uht.forEach(t),I5o=r(Z9e," \u2014 "),sj=n(Z9e,"A",{href:!0});var bht=s(sj);q5o=r(bht,"CanineModel"),bht.forEach(t),j5o=r(Z9e," (CANINE model)"),Z9e.forEach(t),D5o=i(x),e_=n(x,"LI",{});var exe=s(e_);vce=n(exe,"STRONG",{});var vht=s(vce);G5o=r(vht,"clip"),vht.forEach(t),O5o=r(exe," \u2014 "),lj=n(exe,"A",{href:!0});var Fht=s(lj);V5o=r(Fht,"CLIPModel"),Fht.forEach(t),X5o=r(exe," (CLIP model)"),exe.forEach(t),z5o=i(x),o_=n(x,"LI",{});var oxe=s(o_);Fce=n(oxe,"STRONG",{});var Tht=s(Fce);Q5o=r(Tht,"codegen"),Tht.forEach(t),W5o=r(oxe," \u2014 "),ij=n(oxe,"A",{href:!0});var Mht=s(ij);H5o=r(Mht,"CodeGenModel"),Mht.forEach(t),U5o=r(oxe," (CodeGen model)"),oxe.forEach(t),J5o=i(x),r_=n(x,"LI",{});var rxe=s(r_);Tce=n(rxe,"STRONG",{});var Eht=s(Tce);Y5o=r(Eht,"convbert"),Eht.forEach(t),K5o=r(rxe," \u2014 "),dj=n(rxe,"A",{href:!0});var Cht=s(dj);Z5o=r(Cht,"ConvBertModel"),Cht.forEach(t),eFo=r(rxe," (ConvBERT model)"),rxe.forEach(t),oFo=i(x),t_=n(x,"LI",{});var txe=s(t_);Mce=n(txe,"STRONG",{});var wht=s(Mce);rFo=r(wht,"convnext"),wht.forEach(t),tFo=r(txe," \u2014 "),cj=n(txe,"A",{href:!0});var Aht=s(cj);aFo=r(Aht,"ConvNextModel"),Aht.forEach(t),nFo=r(txe," (ConvNeXT model)"),txe.forEach(t),sFo=i(x),a_=n(x,"LI",{});var axe=s(a_);Ece=n(axe,"STRONG",{});var Lht=s(Ece);lFo=r(Lht,"ctrl"),Lht.forEach(t),iFo=r(axe," \u2014 "),fj=n(axe,"A",{href:!0});var yht=s(fj);dFo=r(yht,"CTRLModel"),yht.forEach(t),cFo=r(axe," (CTRL model)"),axe.forEach(t),fFo=i(x),n_=n(x,"LI",{});var nxe=s(n_);Cce=n(nxe,"STRONG",{});var xht=s(Cce);mFo=r(xht,"cvt"),xht.forEach(t),gFo=r(nxe," \u2014 "),mj=n(nxe,"A",{href:!0});var $ht=s(mj);hFo=r($ht,"CvtModel"),$ht.forEach(t),pFo=r(nxe," (CvT model)"),nxe.forEach(t),_Fo=i(x),s_=n(x,"LI",{});var sxe=s(s_);wce=n(sxe,"STRONG",{});var kht=s(wce);uFo=r(kht,"data2vec-audio"),kht.forEach(t),bFo=r(sxe," \u2014 "),gj=n(sxe,"A",{href:!0});var Sht=s(gj);vFo=r(Sht,"Data2VecAudioModel"),Sht.forEach(t),FFo=r(sxe," (Data2VecAudio model)"),sxe.forEach(t),TFo=i(x),l_=n(x,"LI",{});var lxe=s(l_);Ace=n(lxe,"STRONG",{});var Rht=s(Ace);MFo=r(Rht,"data2vec-text"),Rht.forEach(t),EFo=r(lxe," \u2014 "),hj=n(lxe,"A",{href:!0});var Pht=s(hj);CFo=r(Pht,"Data2VecTextModel"),Pht.forEach(t),wFo=r(lxe," (Data2VecText model)"),lxe.forEach(t),AFo=i(x),i_=n(x,"LI",{});var ixe=s(i_);Lce=n(ixe,"STRONG",{});var Bht=s(Lce);LFo=r(Bht,"data2vec-vision"),Bht.forEach(t),yFo=r(ixe," \u2014 "),pj=n(ixe,"A",{href:!0});var Nht=s(pj);xFo=r(Nht,"Data2VecVisionModel"),Nht.forEach(t),$Fo=r(ixe," (Data2VecVision model)"),ixe.forEach(t),kFo=i(x),d_=n(x,"LI",{});var dxe=s(d_);yce=n(dxe,"STRONG",{});var Iht=s(yce);SFo=r(Iht,"deberta"),Iht.forEach(t),RFo=r(dxe," \u2014 "),_j=n(dxe,"A",{href:!0});var qht=s(_j);PFo=r(qht,"DebertaModel"),qht.forEach(t),BFo=r(dxe," (DeBERTa model)"),dxe.forEach(t),NFo=i(x),c_=n(x,"LI",{});var cxe=s(c_);xce=n(cxe,"STRONG",{});var jht=s(xce);IFo=r(jht,"deberta-v2"),jht.forEach(t),qFo=r(cxe," \u2014 "),uj=n(cxe,"A",{href:!0});var Dht=s(uj);jFo=r(Dht,"DebertaV2Model"),Dht.forEach(t),DFo=r(cxe," (DeBERTa-v2 model)"),cxe.forEach(t),GFo=i(x),f_=n(x,"LI",{});var fxe=s(f_);$ce=n(fxe,"STRONG",{});var Ght=s($ce);OFo=r(Ght,"decision_transformer"),Ght.forEach(t),VFo=r(fxe," \u2014 "),bj=n(fxe,"A",{href:!0});var Oht=s(bj);XFo=r(Oht,"DecisionTransformerModel"),Oht.forEach(t),zFo=r(fxe," (Decision Transformer model)"),fxe.forEach(t),QFo=i(x),m_=n(x,"LI",{});var mxe=s(m_);kce=n(mxe,"STRONG",{});var Vht=s(kce);WFo=r(Vht,"deit"),Vht.forEach(t),HFo=r(mxe," \u2014 "),vj=n(mxe,"A",{href:!0});var Xht=s(vj);UFo=r(Xht,"DeiTModel"),Xht.forEach(t),JFo=r(mxe," (DeiT model)"),mxe.forEach(t),YFo=i(x),g_=n(x,"LI",{});var gxe=s(g_);Sce=n(gxe,"STRONG",{});var zht=s(Sce);KFo=r(zht,"detr"),zht.forEach(t),ZFo=r(gxe," \u2014 "),Fj=n(gxe,"A",{href:!0});var Qht=s(Fj);e6o=r(Qht,"DetrModel"),Qht.forEach(t),o6o=r(gxe," (DETR model)"),gxe.forEach(t),r6o=i(x),h_=n(x,"LI",{});var hxe=s(h_);Rce=n(hxe,"STRONG",{});var Wht=s(Rce);t6o=r(Wht,"distilbert"),Wht.forEach(t),a6o=r(hxe," \u2014 "),Tj=n(hxe,"A",{href:!0});var Hht=s(Tj);n6o=r(Hht,"DistilBertModel"),Hht.forEach(t),s6o=r(hxe," (DistilBERT model)"),hxe.forEach(t),l6o=i(x),p_=n(x,"LI",{});var pxe=s(p_);Pce=n(pxe,"STRONG",{});var Uht=s(Pce);i6o=r(Uht,"dpr"),Uht.forEach(t),d6o=r(pxe," \u2014 "),Mj=n(pxe,"A",{href:!0});var Jht=s(Mj);c6o=r(Jht,"DPRQuestionEncoder"),Jht.forEach(t),f6o=r(pxe," (DPR model)"),pxe.forEach(t),m6o=i(x),__=n(x,"LI",{});var _xe=s(__);Bce=n(_xe,"STRONG",{});var Yht=s(Bce);g6o=r(Yht,"dpt"),Yht.forEach(t),h6o=r(_xe," \u2014 "),Ej=n(_xe,"A",{href:!0});var Kht=s(Ej);p6o=r(Kht,"DPTModel"),Kht.forEach(t),_6o=r(_xe," (DPT model)"),_xe.forEach(t),u6o=i(x),u_=n(x,"LI",{});var uxe=s(u_);Nce=n(uxe,"STRONG",{});var Zht=s(Nce);b6o=r(Zht,"electra"),Zht.forEach(t),v6o=r(uxe," \u2014 "),Cj=n(uxe,"A",{href:!0});var ept=s(Cj);F6o=r(ept,"ElectraModel"),ept.forEach(t),T6o=r(uxe," (ELECTRA model)"),uxe.forEach(t),M6o=i(x),b_=n(x,"LI",{});var bxe=s(b_);Ice=n(bxe,"STRONG",{});var opt=s(Ice);E6o=r(opt,"flaubert"),opt.forEach(t),C6o=r(bxe," \u2014 "),wj=n(bxe,"A",{href:!0});var rpt=s(wj);w6o=r(rpt,"FlaubertModel"),rpt.forEach(t),A6o=r(bxe," (FlauBERT model)"),bxe.forEach(t),L6o=i(x),v_=n(x,"LI",{});var vxe=s(v_);qce=n(vxe,"STRONG",{});var tpt=s(qce);y6o=r(tpt,"flava"),tpt.forEach(t),x6o=r(vxe," \u2014 "),Aj=n(vxe,"A",{href:!0});var apt=s(Aj);$6o=r(apt,"FlavaModel"),apt.forEach(t),k6o=r(vxe," (FLAVA model)"),vxe.forEach(t),S6o=i(x),F_=n(x,"LI",{});var Fxe=s(F_);jce=n(Fxe,"STRONG",{});var npt=s(jce);R6o=r(npt,"fnet"),npt.forEach(t),P6o=r(Fxe," \u2014 "),Lj=n(Fxe,"A",{href:!0});var spt=s(Lj);B6o=r(spt,"FNetModel"),spt.forEach(t),N6o=r(Fxe," (FNet model)"),Fxe.forEach(t),I6o=i(x),T_=n(x,"LI",{});var Txe=s(T_);Dce=n(Txe,"STRONG",{});var lpt=s(Dce);q6o=r(lpt,"fsmt"),lpt.forEach(t),j6o=r(Txe," \u2014 "),yj=n(Txe,"A",{href:!0});var ipt=s(yj);D6o=r(ipt,"FSMTModel"),ipt.forEach(t),G6o=r(Txe," (FairSeq Machine-Translation model)"),Txe.forEach(t),O6o=i(x),Ws=n(x,"LI",{});var $S=s(Ws);Gce=n($S,"STRONG",{});var dpt=s(Gce);V6o=r(dpt,"funnel"),dpt.forEach(t),X6o=r($S," \u2014 "),xj=n($S,"A",{href:!0});var cpt=s(xj);z6o=r(cpt,"FunnelModel"),cpt.forEach(t),Q6o=r($S," or "),$j=n($S,"A",{href:!0});var fpt=s($j);W6o=r(fpt,"FunnelBaseModel"),fpt.forEach(t),H6o=r($S," (Funnel Transformer model)"),$S.forEach(t),U6o=i(x),M_=n(x,"LI",{});var Mxe=s(M_);Oce=n(Mxe,"STRONG",{});var mpt=s(Oce);J6o=r(mpt,"glpn"),mpt.forEach(t),Y6o=r(Mxe," \u2014 "),kj=n(Mxe,"A",{href:!0});var gpt=s(kj);K6o=r(gpt,"GLPNModel"),gpt.forEach(t),Z6o=r(Mxe," (GLPN model)"),Mxe.forEach(t),eTo=i(x),E_=n(x,"LI",{});var Exe=s(E_);Vce=n(Exe,"STRONG",{});var hpt=s(Vce);oTo=r(hpt,"gpt2"),hpt.forEach(t),rTo=r(Exe," \u2014 "),Sj=n(Exe,"A",{href:!0});var ppt=s(Sj);tTo=r(ppt,"GPT2Model"),ppt.forEach(t),aTo=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),nTo=i(x),C_=n(x,"LI",{});var Cxe=s(C_);Xce=n(Cxe,"STRONG",{});var _pt=s(Xce);sTo=r(_pt,"gpt_neo"),_pt.forEach(t),lTo=r(Cxe," \u2014 "),Rj=n(Cxe,"A",{href:!0});var upt=s(Rj);iTo=r(upt,"GPTNeoModel"),upt.forEach(t),dTo=r(Cxe," (GPT Neo model)"),Cxe.forEach(t),cTo=i(x),w_=n(x,"LI",{});var wxe=s(w_);zce=n(wxe,"STRONG",{});var bpt=s(zce);fTo=r(bpt,"gpt_neox"),bpt.forEach(t),mTo=r(wxe," \u2014 "),Pj=n(wxe,"A",{href:!0});var vpt=s(Pj);gTo=r(vpt,"GPTNeoXModel"),vpt.forEach(t),hTo=r(wxe," (GPT NeoX model)"),wxe.forEach(t),pTo=i(x),A_=n(x,"LI",{});var Axe=s(A_);Qce=n(Axe,"STRONG",{});var Fpt=s(Qce);_To=r(Fpt,"gptj"),Fpt.forEach(t),uTo=r(Axe," \u2014 "),Bj=n(Axe,"A",{href:!0});var Tpt=s(Bj);bTo=r(Tpt,"GPTJModel"),Tpt.forEach(t),vTo=r(Axe," (GPT-J model)"),Axe.forEach(t),FTo=i(x),L_=n(x,"LI",{});var Lxe=s(L_);Wce=n(Lxe,"STRONG",{});var Mpt=s(Wce);TTo=r(Mpt,"groupvit"),Mpt.forEach(t),MTo=r(Lxe," \u2014 "),Nj=n(Lxe,"A",{href:!0});var Ept=s(Nj);ETo=r(Ept,"GroupViTModel"),Ept.forEach(t),CTo=r(Lxe," (GroupViT model)"),Lxe.forEach(t),wTo=i(x),y_=n(x,"LI",{});var yxe=s(y_);Hce=n(yxe,"STRONG",{});var Cpt=s(Hce);ATo=r(Cpt,"hubert"),Cpt.forEach(t),LTo=r(yxe," \u2014 "),Ij=n(yxe,"A",{href:!0});var wpt=s(Ij);yTo=r(wpt,"HubertModel"),wpt.forEach(t),xTo=r(yxe," (Hubert model)"),yxe.forEach(t),$To=i(x),x_=n(x,"LI",{});var xxe=s(x_);Uce=n(xxe,"STRONG",{});var Apt=s(Uce);kTo=r(Apt,"ibert"),Apt.forEach(t),STo=r(xxe," \u2014 "),qj=n(xxe,"A",{href:!0});var Lpt=s(qj);RTo=r(Lpt,"IBertModel"),Lpt.forEach(t),PTo=r(xxe," (I-BERT model)"),xxe.forEach(t),BTo=i(x),$_=n(x,"LI",{});var $xe=s($_);Jce=n($xe,"STRONG",{});var ypt=s(Jce);NTo=r(ypt,"imagegpt"),ypt.forEach(t),ITo=r($xe," \u2014 "),jj=n($xe,"A",{href:!0});var xpt=s(jj);qTo=r(xpt,"ImageGPTModel"),xpt.forEach(t),jTo=r($xe," (ImageGPT model)"),$xe.forEach(t),DTo=i(x),k_=n(x,"LI",{});var kxe=s(k_);Yce=n(kxe,"STRONG",{});var $pt=s(Yce);GTo=r($pt,"layoutlm"),$pt.forEach(t),OTo=r(kxe," \u2014 "),Dj=n(kxe,"A",{href:!0});var kpt=s(Dj);VTo=r(kpt,"LayoutLMModel"),kpt.forEach(t),XTo=r(kxe," (LayoutLM model)"),kxe.forEach(t),zTo=i(x),S_=n(x,"LI",{});var Sxe=s(S_);Kce=n(Sxe,"STRONG",{});var Spt=s(Kce);QTo=r(Spt,"layoutlmv2"),Spt.forEach(t),WTo=r(Sxe," \u2014 "),Gj=n(Sxe,"A",{href:!0});var Rpt=s(Gj);HTo=r(Rpt,"LayoutLMv2Model"),Rpt.forEach(t),UTo=r(Sxe," (LayoutLMv2 model)"),Sxe.forEach(t),JTo=i(x),R_=n(x,"LI",{});var Rxe=s(R_);Zce=n(Rxe,"STRONG",{});var Ppt=s(Zce);YTo=r(Ppt,"layoutlmv3"),Ppt.forEach(t),KTo=r(Rxe," \u2014 "),Oj=n(Rxe,"A",{href:!0});var Bpt=s(Oj);ZTo=r(Bpt,"LayoutLMv3Model"),Bpt.forEach(t),eMo=r(Rxe," (LayoutLMv3 model)"),Rxe.forEach(t),oMo=i(x),P_=n(x,"LI",{});var Pxe=s(P_);efe=n(Pxe,"STRONG",{});var Npt=s(efe);rMo=r(Npt,"led"),Npt.forEach(t),tMo=r(Pxe," \u2014 "),Vj=n(Pxe,"A",{href:!0});var Ipt=s(Vj);aMo=r(Ipt,"LEDModel"),Ipt.forEach(t),nMo=r(Pxe," (LED model)"),Pxe.forEach(t),sMo=i(x),B_=n(x,"LI",{});var Bxe=s(B_);ofe=n(Bxe,"STRONG",{});var qpt=s(ofe);lMo=r(qpt,"levit"),qpt.forEach(t),iMo=r(Bxe," \u2014 "),Xj=n(Bxe,"A",{href:!0});var jpt=s(Xj);dMo=r(jpt,"LevitModel"),jpt.forEach(t),cMo=r(Bxe," (LeViT model)"),Bxe.forEach(t),fMo=i(x),N_=n(x,"LI",{});var Nxe=s(N_);rfe=n(Nxe,"STRONG",{});var Dpt=s(rfe);mMo=r(Dpt,"longformer"),Dpt.forEach(t),gMo=r(Nxe," \u2014 "),zj=n(Nxe,"A",{href:!0});var Gpt=s(zj);hMo=r(Gpt,"LongformerModel"),Gpt.forEach(t),pMo=r(Nxe," (Longformer model)"),Nxe.forEach(t),_Mo=i(x),I_=n(x,"LI",{});var Ixe=s(I_);tfe=n(Ixe,"STRONG",{});var Opt=s(tfe);uMo=r(Opt,"longt5"),Opt.forEach(t),bMo=r(Ixe," \u2014 "),Qj=n(Ixe,"A",{href:!0});var Vpt=s(Qj);vMo=r(Vpt,"LongT5Model"),Vpt.forEach(t),FMo=r(Ixe," (LongT5 model)"),Ixe.forEach(t),TMo=i(x),q_=n(x,"LI",{});var qxe=s(q_);afe=n(qxe,"STRONG",{});var Xpt=s(afe);MMo=r(Xpt,"luke"),Xpt.forEach(t),EMo=r(qxe," \u2014 "),Wj=n(qxe,"A",{href:!0});var zpt=s(Wj);CMo=r(zpt,"LukeModel"),zpt.forEach(t),wMo=r(qxe," (LUKE model)"),qxe.forEach(t),AMo=i(x),j_=n(x,"LI",{});var jxe=s(j_);nfe=n(jxe,"STRONG",{});var Qpt=s(nfe);LMo=r(Qpt,"lxmert"),Qpt.forEach(t),yMo=r(jxe," \u2014 "),Hj=n(jxe,"A",{href:!0});var Wpt=s(Hj);xMo=r(Wpt,"LxmertModel"),Wpt.forEach(t),$Mo=r(jxe," (LXMERT model)"),jxe.forEach(t),kMo=i(x),D_=n(x,"LI",{});var Dxe=s(D_);sfe=n(Dxe,"STRONG",{});var Hpt=s(sfe);SMo=r(Hpt,"m2m_100"),Hpt.forEach(t),RMo=r(Dxe," \u2014 "),Uj=n(Dxe,"A",{href:!0});var Upt=s(Uj);PMo=r(Upt,"M2M100Model"),Upt.forEach(t),BMo=r(Dxe," (M2M100 model)"),Dxe.forEach(t),NMo=i(x),G_=n(x,"LI",{});var Gxe=s(G_);lfe=n(Gxe,"STRONG",{});var Jpt=s(lfe);IMo=r(Jpt,"marian"),Jpt.forEach(t),qMo=r(Gxe," \u2014 "),Jj=n(Gxe,"A",{href:!0});var Ypt=s(Jj);jMo=r(Ypt,"MarianModel"),Ypt.forEach(t),DMo=r(Gxe," (Marian model)"),Gxe.forEach(t),GMo=i(x),O_=n(x,"LI",{});var Oxe=s(O_);ife=n(Oxe,"STRONG",{});var Kpt=s(ife);OMo=r(Kpt,"maskformer"),Kpt.forEach(t),VMo=r(Oxe," \u2014 "),Yj=n(Oxe,"A",{href:!0});var Zpt=s(Yj);XMo=r(Zpt,"MaskFormerModel"),Zpt.forEach(t),zMo=r(Oxe," (MaskFormer model)"),Oxe.forEach(t),QMo=i(x),V_=n(x,"LI",{});var Vxe=s(V_);dfe=n(Vxe,"STRONG",{});var e_t=s(dfe);WMo=r(e_t,"mbart"),e_t.forEach(t),HMo=r(Vxe," \u2014 "),Kj=n(Vxe,"A",{href:!0});var o_t=s(Kj);UMo=r(o_t,"MBartModel"),o_t.forEach(t),JMo=r(Vxe," (mBART model)"),Vxe.forEach(t),YMo=i(x),X_=n(x,"LI",{});var Xxe=s(X_);cfe=n(Xxe,"STRONG",{});var r_t=s(cfe);KMo=r(r_t,"mctct"),r_t.forEach(t),ZMo=r(Xxe," \u2014 "),Zj=n(Xxe,"A",{href:!0});var t_t=s(Zj);eEo=r(t_t,"MCTCTModel"),t_t.forEach(t),oEo=r(Xxe," (M-CTC-T model)"),Xxe.forEach(t),rEo=i(x),z_=n(x,"LI",{});var zxe=s(z_);ffe=n(zxe,"STRONG",{});var a_t=s(ffe);tEo=r(a_t,"megatron-bert"),a_t.forEach(t),aEo=r(zxe," \u2014 "),eD=n(zxe,"A",{href:!0});var n_t=s(eD);nEo=r(n_t,"MegatronBertModel"),n_t.forEach(t),sEo=r(zxe," (Megatron-BERT model)"),zxe.forEach(t),lEo=i(x),Q_=n(x,"LI",{});var Qxe=s(Q_);mfe=n(Qxe,"STRONG",{});var s_t=s(mfe);iEo=r(s_t,"mobilebert"),s_t.forEach(t),dEo=r(Qxe," \u2014 "),oD=n(Qxe,"A",{href:!0});var l_t=s(oD);cEo=r(l_t,"MobileBertModel"),l_t.forEach(t),fEo=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),mEo=i(x),W_=n(x,"LI",{});var Wxe=s(W_);gfe=n(Wxe,"STRONG",{});var i_t=s(gfe);gEo=r(i_t,"mobilevit"),i_t.forEach(t),hEo=r(Wxe," \u2014 "),rD=n(Wxe,"A",{href:!0});var d_t=s(rD);pEo=r(d_t,"MobileViTModel"),d_t.forEach(t),_Eo=r(Wxe," (MobileViT model)"),Wxe.forEach(t),uEo=i(x),H_=n(x,"LI",{});var Hxe=s(H_);hfe=n(Hxe,"STRONG",{});var c_t=s(hfe);bEo=r(c_t,"mpnet"),c_t.forEach(t),vEo=r(Hxe," \u2014 "),tD=n(Hxe,"A",{href:!0});var f_t=s(tD);FEo=r(f_t,"MPNetModel"),f_t.forEach(t),TEo=r(Hxe," (MPNet model)"),Hxe.forEach(t),MEo=i(x),U_=n(x,"LI",{});var Uxe=s(U_);pfe=n(Uxe,"STRONG",{});var m_t=s(pfe);EEo=r(m_t,"mt5"),m_t.forEach(t),CEo=r(Uxe," \u2014 "),aD=n(Uxe,"A",{href:!0});var g_t=s(aD);wEo=r(g_t,"MT5Model"),g_t.forEach(t),AEo=r(Uxe," (MT5 model)"),Uxe.forEach(t),LEo=i(x),J_=n(x,"LI",{});var Jxe=s(J_);_fe=n(Jxe,"STRONG",{});var h_t=s(_fe);yEo=r(h_t,"mvp"),h_t.forEach(t),xEo=r(Jxe," \u2014 "),nD=n(Jxe,"A",{href:!0});var p_t=s(nD);$Eo=r(p_t,"MvpModel"),p_t.forEach(t),kEo=r(Jxe," (MVP model)"),Jxe.forEach(t),SEo=i(x),Y_=n(x,"LI",{});var Yxe=s(Y_);ufe=n(Yxe,"STRONG",{});var __t=s(ufe);REo=r(__t,"nezha"),__t.forEach(t),PEo=r(Yxe," \u2014 "),sD=n(Yxe,"A",{href:!0});var u_t=s(sD);BEo=r(u_t,"NezhaModel"),u_t.forEach(t),NEo=r(Yxe," (Nezha model)"),Yxe.forEach(t),IEo=i(x),K_=n(x,"LI",{});var Kxe=s(K_);bfe=n(Kxe,"STRONG",{});var b_t=s(bfe);qEo=r(b_t,"nystromformer"),b_t.forEach(t),jEo=r(Kxe," \u2014 "),lD=n(Kxe,"A",{href:!0});var v_t=s(lD);DEo=r(v_t,"NystromformerModel"),v_t.forEach(t),GEo=r(Kxe," (Nystr\xF6mformer model)"),Kxe.forEach(t),OEo=i(x),Z_=n(x,"LI",{});var Zxe=s(Z_);vfe=n(Zxe,"STRONG",{});var F_t=s(vfe);VEo=r(F_t,"openai-gpt"),F_t.forEach(t),XEo=r(Zxe," \u2014 "),iD=n(Zxe,"A",{href:!0});var T_t=s(iD);zEo=r(T_t,"OpenAIGPTModel"),T_t.forEach(t),QEo=r(Zxe," (OpenAI GPT model)"),Zxe.forEach(t),WEo=i(x),eu=n(x,"LI",{});var e$e=s(eu);Ffe=n(e$e,"STRONG",{});var M_t=s(Ffe);HEo=r(M_t,"opt"),M_t.forEach(t),UEo=r(e$e," \u2014 "),dD=n(e$e,"A",{href:!0});var E_t=s(dD);JEo=r(E_t,"OPTModel"),E_t.forEach(t),YEo=r(e$e," (OPT model)"),e$e.forEach(t),KEo=i(x),ou=n(x,"LI",{});var o$e=s(ou);Tfe=n(o$e,"STRONG",{});var C_t=s(Tfe);ZEo=r(C_t,"pegasus"),C_t.forEach(t),eCo=r(o$e," \u2014 "),cD=n(o$e,"A",{href:!0});var w_t=s(cD);oCo=r(w_t,"PegasusModel"),w_t.forEach(t),rCo=r(o$e," (Pegasus model)"),o$e.forEach(t),tCo=i(x),ru=n(x,"LI",{});var r$e=s(ru);Mfe=n(r$e,"STRONG",{});var A_t=s(Mfe);aCo=r(A_t,"perceiver"),A_t.forEach(t),nCo=r(r$e," \u2014 "),fD=n(r$e,"A",{href:!0});var L_t=s(fD);sCo=r(L_t,"PerceiverModel"),L_t.forEach(t),lCo=r(r$e," (Perceiver model)"),r$e.forEach(t),iCo=i(x),tu=n(x,"LI",{});var t$e=s(tu);Efe=n(t$e,"STRONG",{});var y_t=s(Efe);dCo=r(y_t,"plbart"),y_t.forEach(t),cCo=r(t$e," \u2014 "),mD=n(t$e,"A",{href:!0});var x_t=s(mD);fCo=r(x_t,"PLBartModel"),x_t.forEach(t),mCo=r(t$e," (PLBart model)"),t$e.forEach(t),gCo=i(x),au=n(x,"LI",{});var a$e=s(au);Cfe=n(a$e,"STRONG",{});var $_t=s(Cfe);hCo=r($_t,"poolformer"),$_t.forEach(t),pCo=r(a$e," \u2014 "),gD=n(a$e,"A",{href:!0});var k_t=s(gD);_Co=r(k_t,"PoolFormerModel"),k_t.forEach(t),uCo=r(a$e," (PoolFormer model)"),a$e.forEach(t),bCo=i(x),nu=n(x,"LI",{});var n$e=s(nu);wfe=n(n$e,"STRONG",{});var S_t=s(wfe);vCo=r(S_t,"prophetnet"),S_t.forEach(t),FCo=r(n$e," \u2014 "),hD=n(n$e,"A",{href:!0});var R_t=s(hD);TCo=r(R_t,"ProphetNetModel"),R_t.forEach(t),MCo=r(n$e," (ProphetNet model)"),n$e.forEach(t),ECo=i(x),su=n(x,"LI",{});var s$e=s(su);Afe=n(s$e,"STRONG",{});var P_t=s(Afe);CCo=r(P_t,"qdqbert"),P_t.forEach(t),wCo=r(s$e," \u2014 "),pD=n(s$e,"A",{href:!0});var B_t=s(pD);ACo=r(B_t,"QDQBertModel"),B_t.forEach(t),LCo=r(s$e," (QDQBert model)"),s$e.forEach(t),yCo=i(x),lu=n(x,"LI",{});var l$e=s(lu);Lfe=n(l$e,"STRONG",{});var N_t=s(Lfe);xCo=r(N_t,"reformer"),N_t.forEach(t),$Co=r(l$e," \u2014 "),_D=n(l$e,"A",{href:!0});var I_t=s(_D);kCo=r(I_t,"ReformerModel"),I_t.forEach(t),SCo=r(l$e," (Reformer model)"),l$e.forEach(t),RCo=i(x),iu=n(x,"LI",{});var i$e=s(iu);yfe=n(i$e,"STRONG",{});var q_t=s(yfe);PCo=r(q_t,"regnet"),q_t.forEach(t),BCo=r(i$e," \u2014 "),uD=n(i$e,"A",{href:!0});var j_t=s(uD);NCo=r(j_t,"RegNetModel"),j_t.forEach(t),ICo=r(i$e," (RegNet model)"),i$e.forEach(t),qCo=i(x),du=n(x,"LI",{});var d$e=s(du);xfe=n(d$e,"STRONG",{});var D_t=s(xfe);jCo=r(D_t,"rembert"),D_t.forEach(t),DCo=r(d$e," \u2014 "),bD=n(d$e,"A",{href:!0});var G_t=s(bD);GCo=r(G_t,"RemBertModel"),G_t.forEach(t),OCo=r(d$e," (RemBERT model)"),d$e.forEach(t),VCo=i(x),cu=n(x,"LI",{});var c$e=s(cu);$fe=n(c$e,"STRONG",{});var O_t=s($fe);XCo=r(O_t,"resnet"),O_t.forEach(t),zCo=r(c$e," \u2014 "),vD=n(c$e,"A",{href:!0});var V_t=s(vD);QCo=r(V_t,"ResNetModel"),V_t.forEach(t),WCo=r(c$e," (ResNet model)"),c$e.forEach(t),HCo=i(x),fu=n(x,"LI",{});var f$e=s(fu);kfe=n(f$e,"STRONG",{});var X_t=s(kfe);UCo=r(X_t,"retribert"),X_t.forEach(t),JCo=r(f$e," \u2014 "),FD=n(f$e,"A",{href:!0});var z_t=s(FD);YCo=r(z_t,"RetriBertModel"),z_t.forEach(t),KCo=r(f$e," (RetriBERT model)"),f$e.forEach(t),ZCo=i(x),mu=n(x,"LI",{});var m$e=s(mu);Sfe=n(m$e,"STRONG",{});var Q_t=s(Sfe);e0o=r(Q_t,"roberta"),Q_t.forEach(t),o0o=r(m$e," \u2014 "),TD=n(m$e,"A",{href:!0});var W_t=s(TD);r0o=r(W_t,"RobertaModel"),W_t.forEach(t),t0o=r(m$e," (RoBERTa model)"),m$e.forEach(t),a0o=i(x),gu=n(x,"LI",{});var g$e=s(gu);Rfe=n(g$e,"STRONG",{});var H_t=s(Rfe);n0o=r(H_t,"roformer"),H_t.forEach(t),s0o=r(g$e," \u2014 "),MD=n(g$e,"A",{href:!0});var U_t=s(MD);l0o=r(U_t,"RoFormerModel"),U_t.forEach(t),i0o=r(g$e," (RoFormer model)"),g$e.forEach(t),d0o=i(x),hu=n(x,"LI",{});var h$e=s(hu);Pfe=n(h$e,"STRONG",{});var J_t=s(Pfe);c0o=r(J_t,"segformer"),J_t.forEach(t),f0o=r(h$e," \u2014 "),ED=n(h$e,"A",{href:!0});var Y_t=s(ED);m0o=r(Y_t,"SegformerModel"),Y_t.forEach(t),g0o=r(h$e," (SegFormer model)"),h$e.forEach(t),h0o=i(x),pu=n(x,"LI",{});var p$e=s(pu);Bfe=n(p$e,"STRONG",{});var K_t=s(Bfe);p0o=r(K_t,"sew"),K_t.forEach(t),_0o=r(p$e," \u2014 "),CD=n(p$e,"A",{href:!0});var Z_t=s(CD);u0o=r(Z_t,"SEWModel"),Z_t.forEach(t),b0o=r(p$e," (SEW model)"),p$e.forEach(t),v0o=i(x),_u=n(x,"LI",{});var _$e=s(_u);Nfe=n(_$e,"STRONG",{});var eut=s(Nfe);F0o=r(eut,"sew-d"),eut.forEach(t),T0o=r(_$e," \u2014 "),wD=n(_$e,"A",{href:!0});var out=s(wD);M0o=r(out,"SEWDModel"),out.forEach(t),E0o=r(_$e," (SEW-D model)"),_$e.forEach(t),C0o=i(x),uu=n(x,"LI",{});var u$e=s(uu);Ife=n(u$e,"STRONG",{});var rut=s(Ife);w0o=r(rut,"speech_to_text"),rut.forEach(t),A0o=r(u$e," \u2014 "),AD=n(u$e,"A",{href:!0});var tut=s(AD);L0o=r(tut,"Speech2TextModel"),tut.forEach(t),y0o=r(u$e," (Speech2Text model)"),u$e.forEach(t),x0o=i(x),bu=n(x,"LI",{});var b$e=s(bu);qfe=n(b$e,"STRONG",{});var aut=s(qfe);$0o=r(aut,"splinter"),aut.forEach(t),k0o=r(b$e," \u2014 "),LD=n(b$e,"A",{href:!0});var nut=s(LD);S0o=r(nut,"SplinterModel"),nut.forEach(t),R0o=r(b$e," (Splinter model)"),b$e.forEach(t),P0o=i(x),vu=n(x,"LI",{});var v$e=s(vu);jfe=n(v$e,"STRONG",{});var sut=s(jfe);B0o=r(sut,"squeezebert"),sut.forEach(t),N0o=r(v$e," \u2014 "),yD=n(v$e,"A",{href:!0});var lut=s(yD);I0o=r(lut,"SqueezeBertModel"),lut.forEach(t),q0o=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),j0o=i(x),Fu=n(x,"LI",{});var F$e=s(Fu);Dfe=n(F$e,"STRONG",{});var iut=s(Dfe);D0o=r(iut,"swin"),iut.forEach(t),G0o=r(F$e," \u2014 "),xD=n(F$e,"A",{href:!0});var dut=s(xD);O0o=r(dut,"SwinModel"),dut.forEach(t),V0o=r(F$e," (Swin Transformer model)"),F$e.forEach(t),X0o=i(x),Tu=n(x,"LI",{});var T$e=s(Tu);Gfe=n(T$e,"STRONG",{});var cut=s(Gfe);z0o=r(cut,"t5"),cut.forEach(t),Q0o=r(T$e," \u2014 "),$D=n(T$e,"A",{href:!0});var fut=s($D);W0o=r(fut,"T5Model"),fut.forEach(t),H0o=r(T$e," (T5 model)"),T$e.forEach(t),U0o=i(x),Mu=n(x,"LI",{});var M$e=s(Mu);Ofe=n(M$e,"STRONG",{});var mut=s(Ofe);J0o=r(mut,"tapas"),mut.forEach(t),Y0o=r(M$e," \u2014 "),kD=n(M$e,"A",{href:!0});var gut=s(kD);K0o=r(gut,"TapasModel"),gut.forEach(t),Z0o=r(M$e," (TAPAS model)"),M$e.forEach(t),ewo=i(x),Eu=n(x,"LI",{});var E$e=s(Eu);Vfe=n(E$e,"STRONG",{});var hut=s(Vfe);owo=r(hut,"trajectory_transformer"),hut.forEach(t),rwo=r(E$e," \u2014 "),SD=n(E$e,"A",{href:!0});var put=s(SD);two=r(put,"TrajectoryTransformerModel"),put.forEach(t),awo=r(E$e," (Trajectory Transformer model)"),E$e.forEach(t),nwo=i(x),Cu=n(x,"LI",{});var C$e=s(Cu);Xfe=n(C$e,"STRONG",{});var _ut=s(Xfe);swo=r(_ut,"transfo-xl"),_ut.forEach(t),lwo=r(C$e," \u2014 "),RD=n(C$e,"A",{href:!0});var uut=s(RD);iwo=r(uut,"TransfoXLModel"),uut.forEach(t),dwo=r(C$e," (Transformer-XL model)"),C$e.forEach(t),cwo=i(x),wu=n(x,"LI",{});var w$e=s(wu);zfe=n(w$e,"STRONG",{});var but=s(zfe);fwo=r(but,"unispeech"),but.forEach(t),mwo=r(w$e," \u2014 "),PD=n(w$e,"A",{href:!0});var vut=s(PD);gwo=r(vut,"UniSpeechModel"),vut.forEach(t),hwo=r(w$e," (UniSpeech model)"),w$e.forEach(t),pwo=i(x),Au=n(x,"LI",{});var A$e=s(Au);Qfe=n(A$e,"STRONG",{});var Fut=s(Qfe);_wo=r(Fut,"unispeech-sat"),Fut.forEach(t),uwo=r(A$e," \u2014 "),BD=n(A$e,"A",{href:!0});var Tut=s(BD);bwo=r(Tut,"UniSpeechSatModel"),Tut.forEach(t),vwo=r(A$e," (UniSpeechSat model)"),A$e.forEach(t),Fwo=i(x),Lu=n(x,"LI",{});var L$e=s(Lu);Wfe=n(L$e,"STRONG",{});var Mut=s(Wfe);Two=r(Mut,"van"),Mut.forEach(t),Mwo=r(L$e," \u2014 "),ND=n(L$e,"A",{href:!0});var Eut=s(ND);Ewo=r(Eut,"VanModel"),Eut.forEach(t),Cwo=r(L$e," (VAN model)"),L$e.forEach(t),wwo=i(x),yu=n(x,"LI",{});var y$e=s(yu);Hfe=n(y$e,"STRONG",{});var Cut=s(Hfe);Awo=r(Cut,"vilt"),Cut.forEach(t),Lwo=r(y$e," \u2014 "),ID=n(y$e,"A",{href:!0});var wut=s(ID);ywo=r(wut,"ViltModel"),wut.forEach(t),xwo=r(y$e," (ViLT model)"),y$e.forEach(t),$wo=i(x),xu=n(x,"LI",{});var x$e=s(xu);Ufe=n(x$e,"STRONG",{});var Aut=s(Ufe);kwo=r(Aut,"vision-text-dual-encoder"),Aut.forEach(t),Swo=r(x$e," \u2014 "),qD=n(x$e,"A",{href:!0});var Lut=s(qD);Rwo=r(Lut,"VisionTextDualEncoderModel"),Lut.forEach(t),Pwo=r(x$e," (VisionTextDualEncoder model)"),x$e.forEach(t),Bwo=i(x),$u=n(x,"LI",{});var $$e=s($u);Jfe=n($$e,"STRONG",{});var yut=s(Jfe);Nwo=r(yut,"visual_bert"),yut.forEach(t),Iwo=r($$e," \u2014 "),jD=n($$e,"A",{href:!0});var xut=s(jD);qwo=r(xut,"VisualBertModel"),xut.forEach(t),jwo=r($$e," (VisualBERT model)"),$$e.forEach(t),Dwo=i(x),ku=n(x,"LI",{});var k$e=s(ku);Yfe=n(k$e,"STRONG",{});var $ut=s(Yfe);Gwo=r($ut,"vit"),$ut.forEach(t),Owo=r(k$e," \u2014 "),DD=n(k$e,"A",{href:!0});var kut=s(DD);Vwo=r(kut,"ViTModel"),kut.forEach(t),Xwo=r(k$e," (ViT model)"),k$e.forEach(t),zwo=i(x),Su=n(x,"LI",{});var S$e=s(Su);Kfe=n(S$e,"STRONG",{});var Sut=s(Kfe);Qwo=r(Sut,"vit_mae"),Sut.forEach(t),Wwo=r(S$e," \u2014 "),GD=n(S$e,"A",{href:!0});var Rut=s(GD);Hwo=r(Rut,"ViTMAEModel"),Rut.forEach(t),Uwo=r(S$e," (ViTMAE model)"),S$e.forEach(t),Jwo=i(x),Ru=n(x,"LI",{});var R$e=s(Ru);Zfe=n(R$e,"STRONG",{});var Put=s(Zfe);Ywo=r(Put,"wav2vec2"),Put.forEach(t),Kwo=r(R$e," \u2014 "),OD=n(R$e,"A",{href:!0});var But=s(OD);Zwo=r(But,"Wav2Vec2Model"),But.forEach(t),eAo=r(R$e," (Wav2Vec2 model)"),R$e.forEach(t),oAo=i(x),Pu=n(x,"LI",{});var P$e=s(Pu);eme=n(P$e,"STRONG",{});var Nut=s(eme);rAo=r(Nut,"wav2vec2-conformer"),Nut.forEach(t),tAo=r(P$e," \u2014 "),VD=n(P$e,"A",{href:!0});var Iut=s(VD);aAo=r(Iut,"Wav2Vec2ConformerModel"),Iut.forEach(t),nAo=r(P$e," (Wav2Vec2-Conformer model)"),P$e.forEach(t),sAo=i(x),Bu=n(x,"LI",{});var B$e=s(Bu);ome=n(B$e,"STRONG",{});var qut=s(ome);lAo=r(qut,"wavlm"),qut.forEach(t),iAo=r(B$e," \u2014 "),XD=n(B$e,"A",{href:!0});var jut=s(XD);dAo=r(jut,"WavLMModel"),jut.forEach(t),cAo=r(B$e," (WavLM model)"),B$e.forEach(t),fAo=i(x),Nu=n(x,"LI",{});var N$e=s(Nu);rme=n(N$e,"STRONG",{});var Dut=s(rme);mAo=r(Dut,"xglm"),Dut.forEach(t),gAo=r(N$e," \u2014 "),zD=n(N$e,"A",{href:!0});var Gut=s(zD);hAo=r(Gut,"XGLMModel"),Gut.forEach(t),pAo=r(N$e," (XGLM model)"),N$e.forEach(t),_Ao=i(x),Iu=n(x,"LI",{});var I$e=s(Iu);tme=n(I$e,"STRONG",{});var Out=s(tme);uAo=r(Out,"xlm"),Out.forEach(t),bAo=r(I$e," \u2014 "),QD=n(I$e,"A",{href:!0});var Vut=s(QD);vAo=r(Vut,"XLMModel"),Vut.forEach(t),FAo=r(I$e," (XLM model)"),I$e.forEach(t),TAo=i(x),qu=n(x,"LI",{});var q$e=s(qu);ame=n(q$e,"STRONG",{});var Xut=s(ame);MAo=r(Xut,"xlm-prophetnet"),Xut.forEach(t),EAo=r(q$e," \u2014 "),WD=n(q$e,"A",{href:!0});var zut=s(WD);CAo=r(zut,"XLMProphetNetModel"),zut.forEach(t),wAo=r(q$e," (XLM-ProphetNet model)"),q$e.forEach(t),AAo=i(x),ju=n(x,"LI",{});var j$e=s(ju);nme=n(j$e,"STRONG",{});var Qut=s(nme);LAo=r(Qut,"xlm-roberta"),Qut.forEach(t),yAo=r(j$e," \u2014 "),HD=n(j$e,"A",{href:!0});var Wut=s(HD);xAo=r(Wut,"XLMRobertaModel"),Wut.forEach(t),$Ao=r(j$e," (XLM-RoBERTa model)"),j$e.forEach(t),kAo=i(x),Du=n(x,"LI",{});var D$e=s(Du);sme=n(D$e,"STRONG",{});var Hut=s(sme);SAo=r(Hut,"xlm-roberta-xl"),Hut.forEach(t),RAo=r(D$e," \u2014 "),UD=n(D$e,"A",{href:!0});var Uut=s(UD);PAo=r(Uut,"XLMRobertaXLModel"),Uut.forEach(t),BAo=r(D$e," (XLM-RoBERTa-XL model)"),D$e.forEach(t),NAo=i(x),Gu=n(x,"LI",{});var G$e=s(Gu);lme=n(G$e,"STRONG",{});var Jut=s(lme);IAo=r(Jut,"xlnet"),Jut.forEach(t),qAo=r(G$e," \u2014 "),JD=n(G$e,"A",{href:!0});var Yut=s(JD);jAo=r(Yut,"XLNetModel"),Yut.forEach(t),DAo=r(G$e," (XLNet model)"),G$e.forEach(t),GAo=i(x),Ou=n(x,"LI",{});var O$e=s(Ou);ime=n(O$e,"STRONG",{});var Kut=s(ime);OAo=r(Kut,"yolos"),Kut.forEach(t),VAo=r(O$e," \u2014 "),YD=n(O$e,"A",{href:!0});var Zut=s(YD);XAo=r(Zut,"YolosModel"),Zut.forEach(t),zAo=r(O$e," (YOLOS model)"),O$e.forEach(t),QAo=i(x),Vu=n(x,"LI",{});var V$e=s(Vu);dme=n(V$e,"STRONG",{});var e1t=s(dme);WAo=r(e1t,"yoso"),e1t.forEach(t),HAo=r(V$e," \u2014 "),KD=n(V$e,"A",{href:!0});var o1t=s(KD);UAo=r(o1t,"YosoModel"),o1t.forEach(t),JAo=r(V$e," (YOSO model)"),V$e.forEach(t),x.forEach(t),YAo=i(sa),Xu=n(sa,"P",{});var X$e=s(Xu);KAo=r(X$e,"The model is set in evaluation mode by default using "),cme=n(X$e,"CODE",{});var r1t=s(cme);ZAo=r(r1t,"model.eval()"),r1t.forEach(t),e7o=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(X$e,"CODE",{});var t1t=s(fme);o7o=r(t1t,"model.train()"),t1t.forEach(t),X$e.forEach(t),r7o=i(sa),T(zu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),fXe=i(f),Vi=n(f,"H2",{class:!0});var uQe=s(Vi);Qu=n(uQe,"A",{id:!0,class:!0,href:!0});var a1t=s(Qu);mme=n(a1t,"SPAN",{});var n1t=s(mme);T(By.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),t7o=i(uQe),gme=n(uQe,"SPAN",{});var s1t=s(gme);a7o=r(s1t,"AutoModelForPreTraining"),s1t.forEach(t),uQe.forEach(t),mXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(Ny.$$.fragment,rl),n7o=i(rl),Xi=n(rl,"P",{});var kre=s(Xi);s7o=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZD=n(kre,"A",{href:!0});var l1t=s(ZD);l7o=r(l1t,"from_pretrained()"),l1t.forEach(t),i7o=r(kre," class method or the "),eG=n(kre,"A",{href:!0});var i1t=s(eG);d7o=r(i1t,"from_config()"),i1t.forEach(t),c7o=r(kre,` class
method.`),kre.forEach(t),f7o=i(rl),Iy=n(rl,"P",{});var bQe=s(Iy);m7o=r(bQe,"This class cannot be instantiated directly using "),hme=n(bQe,"CODE",{});var d1t=s(hme);g7o=r(d1t,"__init__()"),d1t.forEach(t),h7o=r(bQe," (throws an error)."),bQe.forEach(t),p7o=i(rl),it=n(rl,"DIV",{class:!0});var c7=s(it);T(qy.$$.fragment,c7),_7o=i(c7),pme=n(c7,"P",{});var c1t=s(pme);u7o=r(c1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c1t.forEach(t),b7o=i(c7),zi=n(c7,"P",{});var Sre=s(zi);v7o=r(Sre,`Note:
Loading a model from its configuration file does `),_me=n(Sre,"STRONG",{});var f1t=s(_me);F7o=r(f1t,"not"),f1t.forEach(t),T7o=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(Sre,"A",{href:!0});var m1t=s(oG);M7o=r(m1t,"from_pretrained()"),m1t.forEach(t),E7o=r(Sre," to load the model weights."),Sre.forEach(t),C7o=i(c7),T(Wu.$$.fragment,c7),c7.forEach(t),w7o=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(jy.$$.fragment,la),A7o=i(la),ume=n(la,"P",{});var g1t=s(ume);L7o=r(g1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g1t.forEach(t),y7o=i(la),Ia=n(la,"P",{});var f7=s(Ia);x7o=r(f7,"The model class to instantiate is selected based on the "),bme=n(f7,"CODE",{});var h1t=s(bme);$7o=r(h1t,"model_type"),h1t.forEach(t),k7o=r(f7,` property of the config object (either
passed as an argument or loaded from `),vme=n(f7,"CODE",{});var p1t=s(vme);S7o=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),R7o=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(f7,"CODE",{});var _1t=s(Fme);P7o=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),B7o=r(f7,":"),f7.forEach(t),N7o=i(la),G=n(la,"UL",{});var O=s(G);Hu=n(O,"LI",{});var z$e=s(Hu);Tme=n(z$e,"STRONG",{});var u1t=s(Tme);I7o=r(u1t,"albert"),u1t.forEach(t),q7o=r(z$e," \u2014 "),rG=n(z$e,"A",{href:!0});var b1t=s(rG);j7o=r(b1t,"AlbertForPreTraining"),b1t.forEach(t),D7o=r(z$e," (ALBERT model)"),z$e.forEach(t),G7o=i(O),Uu=n(O,"LI",{});var Q$e=s(Uu);Mme=n(Q$e,"STRONG",{});var v1t=s(Mme);O7o=r(v1t,"bart"),v1t.forEach(t),V7o=r(Q$e," \u2014 "),tG=n(Q$e,"A",{href:!0});var F1t=s(tG);X7o=r(F1t,"BartForConditionalGeneration"),F1t.forEach(t),z7o=r(Q$e," (BART model)"),Q$e.forEach(t),Q7o=i(O),Ju=n(O,"LI",{});var W$e=s(Ju);Eme=n(W$e,"STRONG",{});var T1t=s(Eme);W7o=r(T1t,"bert"),T1t.forEach(t),H7o=r(W$e," \u2014 "),aG=n(W$e,"A",{href:!0});var M1t=s(aG);U7o=r(M1t,"BertForPreTraining"),M1t.forEach(t),J7o=r(W$e," (BERT model)"),W$e.forEach(t),Y7o=i(O),Yu=n(O,"LI",{});var H$e=s(Yu);Cme=n(H$e,"STRONG",{});var E1t=s(Cme);K7o=r(E1t,"big_bird"),E1t.forEach(t),Z7o=r(H$e," \u2014 "),nG=n(H$e,"A",{href:!0});var C1t=s(nG);eLo=r(C1t,"BigBirdForPreTraining"),C1t.forEach(t),oLo=r(H$e," (BigBird model)"),H$e.forEach(t),rLo=i(O),Ku=n(O,"LI",{});var U$e=s(Ku);wme=n(U$e,"STRONG",{});var w1t=s(wme);tLo=r(w1t,"bloom"),w1t.forEach(t),aLo=r(U$e," \u2014 "),sG=n(U$e,"A",{href:!0});var A1t=s(sG);nLo=r(A1t,"BloomForCausalLM"),A1t.forEach(t),sLo=r(U$e," (BLOOM model)"),U$e.forEach(t),lLo=i(O),Zu=n(O,"LI",{});var J$e=s(Zu);Ame=n(J$e,"STRONG",{});var L1t=s(Ame);iLo=r(L1t,"camembert"),L1t.forEach(t),dLo=r(J$e," \u2014 "),lG=n(J$e,"A",{href:!0});var y1t=s(lG);cLo=r(y1t,"CamembertForMaskedLM"),y1t.forEach(t),fLo=r(J$e," (CamemBERT model)"),J$e.forEach(t),mLo=i(O),e1=n(O,"LI",{});var Y$e=s(e1);Lme=n(Y$e,"STRONG",{});var x1t=s(Lme);gLo=r(x1t,"ctrl"),x1t.forEach(t),hLo=r(Y$e," \u2014 "),iG=n(Y$e,"A",{href:!0});var $1t=s(iG);pLo=r($1t,"CTRLLMHeadModel"),$1t.forEach(t),_Lo=r(Y$e," (CTRL model)"),Y$e.forEach(t),uLo=i(O),o1=n(O,"LI",{});var K$e=s(o1);yme=n(K$e,"STRONG",{});var k1t=s(yme);bLo=r(k1t,"data2vec-text"),k1t.forEach(t),vLo=r(K$e," \u2014 "),dG=n(K$e,"A",{href:!0});var S1t=s(dG);FLo=r(S1t,"Data2VecTextForMaskedLM"),S1t.forEach(t),TLo=r(K$e," (Data2VecText model)"),K$e.forEach(t),MLo=i(O),r1=n(O,"LI",{});var Z$e=s(r1);xme=n(Z$e,"STRONG",{});var R1t=s(xme);ELo=r(R1t,"deberta"),R1t.forEach(t),CLo=r(Z$e," \u2014 "),cG=n(Z$e,"A",{href:!0});var P1t=s(cG);wLo=r(P1t,"DebertaForMaskedLM"),P1t.forEach(t),ALo=r(Z$e," (DeBERTa model)"),Z$e.forEach(t),LLo=i(O),t1=n(O,"LI",{});var eke=s(t1);$me=n(eke,"STRONG",{});var B1t=s($me);yLo=r(B1t,"deberta-v2"),B1t.forEach(t),xLo=r(eke," \u2014 "),fG=n(eke,"A",{href:!0});var N1t=s(fG);$Lo=r(N1t,"DebertaV2ForMaskedLM"),N1t.forEach(t),kLo=r(eke," (DeBERTa-v2 model)"),eke.forEach(t),SLo=i(O),a1=n(O,"LI",{});var oke=s(a1);kme=n(oke,"STRONG",{});var I1t=s(kme);RLo=r(I1t,"distilbert"),I1t.forEach(t),PLo=r(oke," \u2014 "),mG=n(oke,"A",{href:!0});var q1t=s(mG);BLo=r(q1t,"DistilBertForMaskedLM"),q1t.forEach(t),NLo=r(oke," (DistilBERT model)"),oke.forEach(t),ILo=i(O),n1=n(O,"LI",{});var rke=s(n1);Sme=n(rke,"STRONG",{});var j1t=s(Sme);qLo=r(j1t,"electra"),j1t.forEach(t),jLo=r(rke," \u2014 "),gG=n(rke,"A",{href:!0});var D1t=s(gG);DLo=r(D1t,"ElectraForPreTraining"),D1t.forEach(t),GLo=r(rke," (ELECTRA model)"),rke.forEach(t),OLo=i(O),s1=n(O,"LI",{});var tke=s(s1);Rme=n(tke,"STRONG",{});var G1t=s(Rme);VLo=r(G1t,"flaubert"),G1t.forEach(t),XLo=r(tke," \u2014 "),hG=n(tke,"A",{href:!0});var O1t=s(hG);zLo=r(O1t,"FlaubertWithLMHeadModel"),O1t.forEach(t),QLo=r(tke," (FlauBERT model)"),tke.forEach(t),WLo=i(O),l1=n(O,"LI",{});var ake=s(l1);Pme=n(ake,"STRONG",{});var V1t=s(Pme);HLo=r(V1t,"flava"),V1t.forEach(t),ULo=r(ake," \u2014 "),pG=n(ake,"A",{href:!0});var X1t=s(pG);JLo=r(X1t,"FlavaForPreTraining"),X1t.forEach(t),YLo=r(ake," (FLAVA model)"),ake.forEach(t),KLo=i(O),i1=n(O,"LI",{});var nke=s(i1);Bme=n(nke,"STRONG",{});var z1t=s(Bme);ZLo=r(z1t,"fnet"),z1t.forEach(t),eyo=r(nke," \u2014 "),_G=n(nke,"A",{href:!0});var Q1t=s(_G);oyo=r(Q1t,"FNetForPreTraining"),Q1t.forEach(t),ryo=r(nke," (FNet model)"),nke.forEach(t),tyo=i(O),d1=n(O,"LI",{});var ske=s(d1);Nme=n(ske,"STRONG",{});var W1t=s(Nme);ayo=r(W1t,"fsmt"),W1t.forEach(t),nyo=r(ske," \u2014 "),uG=n(ske,"A",{href:!0});var H1t=s(uG);syo=r(H1t,"FSMTForConditionalGeneration"),H1t.forEach(t),lyo=r(ske," (FairSeq Machine-Translation model)"),ske.forEach(t),iyo=i(O),c1=n(O,"LI",{});var lke=s(c1);Ime=n(lke,"STRONG",{});var U1t=s(Ime);dyo=r(U1t,"funnel"),U1t.forEach(t),cyo=r(lke," \u2014 "),bG=n(lke,"A",{href:!0});var J1t=s(bG);fyo=r(J1t,"FunnelForPreTraining"),J1t.forEach(t),myo=r(lke," (Funnel Transformer model)"),lke.forEach(t),gyo=i(O),f1=n(O,"LI",{});var ike=s(f1);qme=n(ike,"STRONG",{});var Y1t=s(qme);hyo=r(Y1t,"gpt2"),Y1t.forEach(t),pyo=r(ike," \u2014 "),vG=n(ike,"A",{href:!0});var K1t=s(vG);_yo=r(K1t,"GPT2LMHeadModel"),K1t.forEach(t),uyo=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),byo=i(O),m1=n(O,"LI",{});var dke=s(m1);jme=n(dke,"STRONG",{});var Z1t=s(jme);vyo=r(Z1t,"ibert"),Z1t.forEach(t),Fyo=r(dke," \u2014 "),FG=n(dke,"A",{href:!0});var e4t=s(FG);Tyo=r(e4t,"IBertForMaskedLM"),e4t.forEach(t),Myo=r(dke," (I-BERT model)"),dke.forEach(t),Eyo=i(O),g1=n(O,"LI",{});var cke=s(g1);Dme=n(cke,"STRONG",{});var o4t=s(Dme);Cyo=r(o4t,"layoutlm"),o4t.forEach(t),wyo=r(cke," \u2014 "),TG=n(cke,"A",{href:!0});var r4t=s(TG);Ayo=r(r4t,"LayoutLMForMaskedLM"),r4t.forEach(t),Lyo=r(cke," (LayoutLM model)"),cke.forEach(t),yyo=i(O),h1=n(O,"LI",{});var fke=s(h1);Gme=n(fke,"STRONG",{});var t4t=s(Gme);xyo=r(t4t,"longformer"),t4t.forEach(t),$yo=r(fke," \u2014 "),MG=n(fke,"A",{href:!0});var a4t=s(MG);kyo=r(a4t,"LongformerForMaskedLM"),a4t.forEach(t),Syo=r(fke," (Longformer model)"),fke.forEach(t),Ryo=i(O),p1=n(O,"LI",{});var mke=s(p1);Ome=n(mke,"STRONG",{});var n4t=s(Ome);Pyo=r(n4t,"lxmert"),n4t.forEach(t),Byo=r(mke," \u2014 "),EG=n(mke,"A",{href:!0});var s4t=s(EG);Nyo=r(s4t,"LxmertForPreTraining"),s4t.forEach(t),Iyo=r(mke," (LXMERT model)"),mke.forEach(t),qyo=i(O),_1=n(O,"LI",{});var gke=s(_1);Vme=n(gke,"STRONG",{});var l4t=s(Vme);jyo=r(l4t,"megatron-bert"),l4t.forEach(t),Dyo=r(gke," \u2014 "),CG=n(gke,"A",{href:!0});var i4t=s(CG);Gyo=r(i4t,"MegatronBertForPreTraining"),i4t.forEach(t),Oyo=r(gke," (Megatron-BERT model)"),gke.forEach(t),Vyo=i(O),u1=n(O,"LI",{});var hke=s(u1);Xme=n(hke,"STRONG",{});var d4t=s(Xme);Xyo=r(d4t,"mobilebert"),d4t.forEach(t),zyo=r(hke," \u2014 "),wG=n(hke,"A",{href:!0});var c4t=s(wG);Qyo=r(c4t,"MobileBertForPreTraining"),c4t.forEach(t),Wyo=r(hke," (MobileBERT model)"),hke.forEach(t),Hyo=i(O),b1=n(O,"LI",{});var pke=s(b1);zme=n(pke,"STRONG",{});var f4t=s(zme);Uyo=r(f4t,"mpnet"),f4t.forEach(t),Jyo=r(pke," \u2014 "),AG=n(pke,"A",{href:!0});var m4t=s(AG);Yyo=r(m4t,"MPNetForMaskedLM"),m4t.forEach(t),Kyo=r(pke," (MPNet model)"),pke.forEach(t),Zyo=i(O),v1=n(O,"LI",{});var _ke=s(v1);Qme=n(_ke,"STRONG",{});var g4t=s(Qme);e8o=r(g4t,"mvp"),g4t.forEach(t),o8o=r(_ke," \u2014 "),LG=n(_ke,"A",{href:!0});var h4t=s(LG);r8o=r(h4t,"MvpForConditionalGeneration"),h4t.forEach(t),t8o=r(_ke," (MVP model)"),_ke.forEach(t),a8o=i(O),F1=n(O,"LI",{});var uke=s(F1);Wme=n(uke,"STRONG",{});var p4t=s(Wme);n8o=r(p4t,"nezha"),p4t.forEach(t),s8o=r(uke," \u2014 "),yG=n(uke,"A",{href:!0});var _4t=s(yG);l8o=r(_4t,"NezhaForPreTraining"),_4t.forEach(t),i8o=r(uke," (Nezha model)"),uke.forEach(t),d8o=i(O),T1=n(O,"LI",{});var bke=s(T1);Hme=n(bke,"STRONG",{});var u4t=s(Hme);c8o=r(u4t,"openai-gpt"),u4t.forEach(t),f8o=r(bke," \u2014 "),xG=n(bke,"A",{href:!0});var b4t=s(xG);m8o=r(b4t,"OpenAIGPTLMHeadModel"),b4t.forEach(t),g8o=r(bke," (OpenAI GPT model)"),bke.forEach(t),h8o=i(O),M1=n(O,"LI",{});var vke=s(M1);Ume=n(vke,"STRONG",{});var v4t=s(Ume);p8o=r(v4t,"retribert"),v4t.forEach(t),_8o=r(vke," \u2014 "),$G=n(vke,"A",{href:!0});var F4t=s($G);u8o=r(F4t,"RetriBertModel"),F4t.forEach(t),b8o=r(vke," (RetriBERT model)"),vke.forEach(t),v8o=i(O),E1=n(O,"LI",{});var Fke=s(E1);Jme=n(Fke,"STRONG",{});var T4t=s(Jme);F8o=r(T4t,"roberta"),T4t.forEach(t),T8o=r(Fke," \u2014 "),kG=n(Fke,"A",{href:!0});var M4t=s(kG);M8o=r(M4t,"RobertaForMaskedLM"),M4t.forEach(t),E8o=r(Fke," (RoBERTa model)"),Fke.forEach(t),C8o=i(O),C1=n(O,"LI",{});var Tke=s(C1);Yme=n(Tke,"STRONG",{});var E4t=s(Yme);w8o=r(E4t,"splinter"),E4t.forEach(t),A8o=r(Tke," \u2014 "),SG=n(Tke,"A",{href:!0});var C4t=s(SG);L8o=r(C4t,"SplinterForPreTraining"),C4t.forEach(t),y8o=r(Tke," (Splinter model)"),Tke.forEach(t),x8o=i(O),w1=n(O,"LI",{});var Mke=s(w1);Kme=n(Mke,"STRONG",{});var w4t=s(Kme);$8o=r(w4t,"squeezebert"),w4t.forEach(t),k8o=r(Mke," \u2014 "),RG=n(Mke,"A",{href:!0});var A4t=s(RG);S8o=r(A4t,"SqueezeBertForMaskedLM"),A4t.forEach(t),R8o=r(Mke," (SqueezeBERT model)"),Mke.forEach(t),P8o=i(O),A1=n(O,"LI",{});var Eke=s(A1);Zme=n(Eke,"STRONG",{});var L4t=s(Zme);B8o=r(L4t,"t5"),L4t.forEach(t),N8o=r(Eke," \u2014 "),PG=n(Eke,"A",{href:!0});var y4t=s(PG);I8o=r(y4t,"T5ForConditionalGeneration"),y4t.forEach(t),q8o=r(Eke," (T5 model)"),Eke.forEach(t),j8o=i(O),L1=n(O,"LI",{});var Cke=s(L1);ege=n(Cke,"STRONG",{});var x4t=s(ege);D8o=r(x4t,"tapas"),x4t.forEach(t),G8o=r(Cke," \u2014 "),BG=n(Cke,"A",{href:!0});var $4t=s(BG);O8o=r($4t,"TapasForMaskedLM"),$4t.forEach(t),V8o=r(Cke," (TAPAS model)"),Cke.forEach(t),X8o=i(O),y1=n(O,"LI",{});var wke=s(y1);oge=n(wke,"STRONG",{});var k4t=s(oge);z8o=r(k4t,"transfo-xl"),k4t.forEach(t),Q8o=r(wke," \u2014 "),NG=n(wke,"A",{href:!0});var S4t=s(NG);W8o=r(S4t,"TransfoXLLMHeadModel"),S4t.forEach(t),H8o=r(wke," (Transformer-XL model)"),wke.forEach(t),U8o=i(O),x1=n(O,"LI",{});var Ake=s(x1);rge=n(Ake,"STRONG",{});var R4t=s(rge);J8o=r(R4t,"unispeech"),R4t.forEach(t),Y8o=r(Ake," \u2014 "),IG=n(Ake,"A",{href:!0});var P4t=s(IG);K8o=r(P4t,"UniSpeechForPreTraining"),P4t.forEach(t),Z8o=r(Ake," (UniSpeech model)"),Ake.forEach(t),e9o=i(O),$1=n(O,"LI",{});var Lke=s($1);tge=n(Lke,"STRONG",{});var B4t=s(tge);o9o=r(B4t,"unispeech-sat"),B4t.forEach(t),r9o=r(Lke," \u2014 "),qG=n(Lke,"A",{href:!0});var N4t=s(qG);t9o=r(N4t,"UniSpeechSatForPreTraining"),N4t.forEach(t),a9o=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),n9o=i(O),k1=n(O,"LI",{});var yke=s(k1);age=n(yke,"STRONG",{});var I4t=s(age);s9o=r(I4t,"visual_bert"),I4t.forEach(t),l9o=r(yke," \u2014 "),jG=n(yke,"A",{href:!0});var q4t=s(jG);i9o=r(q4t,"VisualBertForPreTraining"),q4t.forEach(t),d9o=r(yke," (VisualBERT model)"),yke.forEach(t),c9o=i(O),S1=n(O,"LI",{});var xke=s(S1);nge=n(xke,"STRONG",{});var j4t=s(nge);f9o=r(j4t,"vit_mae"),j4t.forEach(t),m9o=r(xke," \u2014 "),DG=n(xke,"A",{href:!0});var D4t=s(DG);g9o=r(D4t,"ViTMAEForPreTraining"),D4t.forEach(t),h9o=r(xke," (ViTMAE model)"),xke.forEach(t),p9o=i(O),R1=n(O,"LI",{});var $ke=s(R1);sge=n($ke,"STRONG",{});var G4t=s(sge);_9o=r(G4t,"wav2vec2"),G4t.forEach(t),u9o=r($ke," \u2014 "),GG=n($ke,"A",{href:!0});var O4t=s(GG);b9o=r(O4t,"Wav2Vec2ForPreTraining"),O4t.forEach(t),v9o=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),F9o=i(O),P1=n(O,"LI",{});var kke=s(P1);lge=n(kke,"STRONG",{});var V4t=s(lge);T9o=r(V4t,"wav2vec2-conformer"),V4t.forEach(t),M9o=r(kke," \u2014 "),OG=n(kke,"A",{href:!0});var X4t=s(OG);E9o=r(X4t,"Wav2Vec2ConformerForPreTraining"),X4t.forEach(t),C9o=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),w9o=i(O),B1=n(O,"LI",{});var Ske=s(B1);ige=n(Ske,"STRONG",{});var z4t=s(ige);A9o=r(z4t,"xlm"),z4t.forEach(t),L9o=r(Ske," \u2014 "),VG=n(Ske,"A",{href:!0});var Q4t=s(VG);y9o=r(Q4t,"XLMWithLMHeadModel"),Q4t.forEach(t),x9o=r(Ske," (XLM model)"),Ske.forEach(t),$9o=i(O),N1=n(O,"LI",{});var Rke=s(N1);dge=n(Rke,"STRONG",{});var W4t=s(dge);k9o=r(W4t,"xlm-roberta"),W4t.forEach(t),S9o=r(Rke," \u2014 "),XG=n(Rke,"A",{href:!0});var H4t=s(XG);R9o=r(H4t,"XLMRobertaForMaskedLM"),H4t.forEach(t),P9o=r(Rke," (XLM-RoBERTa model)"),Rke.forEach(t),B9o=i(O),I1=n(O,"LI",{});var Pke=s(I1);cge=n(Pke,"STRONG",{});var U4t=s(cge);N9o=r(U4t,"xlm-roberta-xl"),U4t.forEach(t),I9o=r(Pke," \u2014 "),zG=n(Pke,"A",{href:!0});var J4t=s(zG);q9o=r(J4t,"XLMRobertaXLForMaskedLM"),J4t.forEach(t),j9o=r(Pke," (XLM-RoBERTa-XL model)"),Pke.forEach(t),D9o=i(O),q1=n(O,"LI",{});var Bke=s(q1);fge=n(Bke,"STRONG",{});var Y4t=s(fge);G9o=r(Y4t,"xlnet"),Y4t.forEach(t),O9o=r(Bke," \u2014 "),QG=n(Bke,"A",{href:!0});var K4t=s(QG);V9o=r(K4t,"XLNetLMHeadModel"),K4t.forEach(t),X9o=r(Bke," (XLNet model)"),Bke.forEach(t),O.forEach(t),z9o=i(la),j1=n(la,"P",{});var Nke=s(j1);Q9o=r(Nke,"The model is set in evaluation mode by default using "),mge=n(Nke,"CODE",{});var Z4t=s(mge);W9o=r(Z4t,"model.eval()"),Z4t.forEach(t),H9o=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=n(Nke,"CODE",{});var e2t=s(gge);U9o=r(e2t,"model.train()"),e2t.forEach(t),Nke.forEach(t),J9o=i(la),T(D1.$$.fragment,la),la.forEach(t),rl.forEach(t),gXe=i(f),Qi=n(f,"H2",{class:!0});var vQe=s(Qi);G1=n(vQe,"A",{id:!0,class:!0,href:!0});var o2t=s(G1);hge=n(o2t,"SPAN",{});var r2t=s(hge);T(Dy.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),Y9o=i(vQe),pge=n(vQe,"SPAN",{});var t2t=s(pge);K9o=r(t2t,"AutoModelForCausalLM"),t2t.forEach(t),vQe.forEach(t),hXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(Gy.$$.fragment,tl),Z9o=i(tl),Wi=n(tl,"P",{});var Rre=s(Wi);exo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WG=n(Rre,"A",{href:!0});var a2t=s(WG);oxo=r(a2t,"from_pretrained()"),a2t.forEach(t),rxo=r(Rre," class method or the "),HG=n(Rre,"A",{href:!0});var n2t=s(HG);txo=r(n2t,"from_config()"),n2t.forEach(t),axo=r(Rre,` class
method.`),Rre.forEach(t),nxo=i(tl),Oy=n(tl,"P",{});var FQe=s(Oy);sxo=r(FQe,"This class cannot be instantiated directly using "),_ge=n(FQe,"CODE",{});var s2t=s(_ge);lxo=r(s2t,"__init__()"),s2t.forEach(t),ixo=r(FQe," (throws an error)."),FQe.forEach(t),dxo=i(tl),dt=n(tl,"DIV",{class:!0});var m7=s(dt);T(Vy.$$.fragment,m7),cxo=i(m7),uge=n(m7,"P",{});var l2t=s(uge);fxo=r(l2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l2t.forEach(t),mxo=i(m7),Hi=n(m7,"P",{});var Pre=s(Hi);gxo=r(Pre,`Note:
Loading a model from its configuration file does `),bge=n(Pre,"STRONG",{});var i2t=s(bge);hxo=r(i2t,"not"),i2t.forEach(t),pxo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n(Pre,"A",{href:!0});var d2t=s(UG);_xo=r(d2t,"from_pretrained()"),d2t.forEach(t),uxo=r(Pre," to load the model weights."),Pre.forEach(t),bxo=i(m7),T(O1.$$.fragment,m7),m7.forEach(t),vxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(Xy.$$.fragment,ia),Fxo=i(ia),vge=n(ia,"P",{});var c2t=s(vge);Txo=r(c2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c2t.forEach(t),Mxo=i(ia),qa=n(ia,"P",{});var g7=s(qa);Exo=r(g7,"The model class to instantiate is selected based on the "),Fge=n(g7,"CODE",{});var f2t=s(Fge);Cxo=r(f2t,"model_type"),f2t.forEach(t),wxo=r(g7,` property of the config object (either
passed as an argument or loaded from `),Tge=n(g7,"CODE",{});var m2t=s(Tge);Axo=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Lxo=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=n(g7,"CODE",{});var g2t=s(Mge);yxo=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),xxo=r(g7,":"),g7.forEach(t),$xo=i(ia),z=n(ia,"UL",{});var Q=s(z);V1=n(Q,"LI",{});var Ike=s(V1);Ege=n(Ike,"STRONG",{});var h2t=s(Ege);kxo=r(h2t,"bart"),h2t.forEach(t),Sxo=r(Ike," \u2014 "),JG=n(Ike,"A",{href:!0});var p2t=s(JG);Rxo=r(p2t,"BartForCausalLM"),p2t.forEach(t),Pxo=r(Ike," (BART model)"),Ike.forEach(t),Bxo=i(Q),X1=n(Q,"LI",{});var qke=s(X1);Cge=n(qke,"STRONG",{});var _2t=s(Cge);Nxo=r(_2t,"bert"),_2t.forEach(t),Ixo=r(qke," \u2014 "),YG=n(qke,"A",{href:!0});var u2t=s(YG);qxo=r(u2t,"BertLMHeadModel"),u2t.forEach(t),jxo=r(qke," (BERT model)"),qke.forEach(t),Dxo=i(Q),z1=n(Q,"LI",{});var jke=s(z1);wge=n(jke,"STRONG",{});var b2t=s(wge);Gxo=r(b2t,"bert-generation"),b2t.forEach(t),Oxo=r(jke," \u2014 "),KG=n(jke,"A",{href:!0});var v2t=s(KG);Vxo=r(v2t,"BertGenerationDecoder"),v2t.forEach(t),Xxo=r(jke," (Bert Generation model)"),jke.forEach(t),zxo=i(Q),Q1=n(Q,"LI",{});var Dke=s(Q1);Age=n(Dke,"STRONG",{});var F2t=s(Age);Qxo=r(F2t,"big_bird"),F2t.forEach(t),Wxo=r(Dke," \u2014 "),ZG=n(Dke,"A",{href:!0});var T2t=s(ZG);Hxo=r(T2t,"BigBirdForCausalLM"),T2t.forEach(t),Uxo=r(Dke," (BigBird model)"),Dke.forEach(t),Jxo=i(Q),W1=n(Q,"LI",{});var Gke=s(W1);Lge=n(Gke,"STRONG",{});var M2t=s(Lge);Yxo=r(M2t,"bigbird_pegasus"),M2t.forEach(t),Kxo=r(Gke," \u2014 "),eO=n(Gke,"A",{href:!0});var E2t=s(eO);Zxo=r(E2t,"BigBirdPegasusForCausalLM"),E2t.forEach(t),e$o=r(Gke," (BigBird-Pegasus model)"),Gke.forEach(t),o$o=i(Q),H1=n(Q,"LI",{});var Oke=s(H1);yge=n(Oke,"STRONG",{});var C2t=s(yge);r$o=r(C2t,"blenderbot"),C2t.forEach(t),t$o=r(Oke," \u2014 "),oO=n(Oke,"A",{href:!0});var w2t=s(oO);a$o=r(w2t,"BlenderbotForCausalLM"),w2t.forEach(t),n$o=r(Oke," (Blenderbot model)"),Oke.forEach(t),s$o=i(Q),U1=n(Q,"LI",{});var Vke=s(U1);xge=n(Vke,"STRONG",{});var A2t=s(xge);l$o=r(A2t,"blenderbot-small"),A2t.forEach(t),i$o=r(Vke," \u2014 "),rO=n(Vke,"A",{href:!0});var L2t=s(rO);d$o=r(L2t,"BlenderbotSmallForCausalLM"),L2t.forEach(t),c$o=r(Vke," (BlenderbotSmall model)"),Vke.forEach(t),f$o=i(Q),J1=n(Q,"LI",{});var Xke=s(J1);$ge=n(Xke,"STRONG",{});var y2t=s($ge);m$o=r(y2t,"bloom"),y2t.forEach(t),g$o=r(Xke," \u2014 "),tO=n(Xke,"A",{href:!0});var x2t=s(tO);h$o=r(x2t,"BloomForCausalLM"),x2t.forEach(t),p$o=r(Xke," (BLOOM model)"),Xke.forEach(t),_$o=i(Q),Y1=n(Q,"LI",{});var zke=s(Y1);kge=n(zke,"STRONG",{});var $2t=s(kge);u$o=r($2t,"camembert"),$2t.forEach(t),b$o=r(zke," \u2014 "),aO=n(zke,"A",{href:!0});var k2t=s(aO);v$o=r(k2t,"CamembertForCausalLM"),k2t.forEach(t),F$o=r(zke," (CamemBERT model)"),zke.forEach(t),T$o=i(Q),K1=n(Q,"LI",{});var Qke=s(K1);Sge=n(Qke,"STRONG",{});var S2t=s(Sge);M$o=r(S2t,"codegen"),S2t.forEach(t),E$o=r(Qke," \u2014 "),nO=n(Qke,"A",{href:!0});var R2t=s(nO);C$o=r(R2t,"CodeGenForCausalLM"),R2t.forEach(t),w$o=r(Qke," (CodeGen model)"),Qke.forEach(t),A$o=i(Q),Z1=n(Q,"LI",{});var Wke=s(Z1);Rge=n(Wke,"STRONG",{});var P2t=s(Rge);L$o=r(P2t,"ctrl"),P2t.forEach(t),y$o=r(Wke," \u2014 "),sO=n(Wke,"A",{href:!0});var B2t=s(sO);x$o=r(B2t,"CTRLLMHeadModel"),B2t.forEach(t),$$o=r(Wke," (CTRL model)"),Wke.forEach(t),k$o=i(Q),e4=n(Q,"LI",{});var Hke=s(e4);Pge=n(Hke,"STRONG",{});var N2t=s(Pge);S$o=r(N2t,"data2vec-text"),N2t.forEach(t),R$o=r(Hke," \u2014 "),lO=n(Hke,"A",{href:!0});var I2t=s(lO);P$o=r(I2t,"Data2VecTextForCausalLM"),I2t.forEach(t),B$o=r(Hke," (Data2VecText model)"),Hke.forEach(t),N$o=i(Q),o4=n(Q,"LI",{});var Uke=s(o4);Bge=n(Uke,"STRONG",{});var q2t=s(Bge);I$o=r(q2t,"electra"),q2t.forEach(t),q$o=r(Uke," \u2014 "),iO=n(Uke,"A",{href:!0});var j2t=s(iO);j$o=r(j2t,"ElectraForCausalLM"),j2t.forEach(t),D$o=r(Uke," (ELECTRA model)"),Uke.forEach(t),G$o=i(Q),r4=n(Q,"LI",{});var Jke=s(r4);Nge=n(Jke,"STRONG",{});var D2t=s(Nge);O$o=r(D2t,"gpt2"),D2t.forEach(t),V$o=r(Jke," \u2014 "),dO=n(Jke,"A",{href:!0});var G2t=s(dO);X$o=r(G2t,"GPT2LMHeadModel"),G2t.forEach(t),z$o=r(Jke," (OpenAI GPT-2 model)"),Jke.forEach(t),Q$o=i(Q),t4=n(Q,"LI",{});var Yke=s(t4);Ige=n(Yke,"STRONG",{});var O2t=s(Ige);W$o=r(O2t,"gpt_neo"),O2t.forEach(t),H$o=r(Yke," \u2014 "),cO=n(Yke,"A",{href:!0});var V2t=s(cO);U$o=r(V2t,"GPTNeoForCausalLM"),V2t.forEach(t),J$o=r(Yke," (GPT Neo model)"),Yke.forEach(t),Y$o=i(Q),a4=n(Q,"LI",{});var Kke=s(a4);qge=n(Kke,"STRONG",{});var X2t=s(qge);K$o=r(X2t,"gpt_neox"),X2t.forEach(t),Z$o=r(Kke," \u2014 "),fO=n(Kke,"A",{href:!0});var z2t=s(fO);eko=r(z2t,"GPTNeoXForCausalLM"),z2t.forEach(t),oko=r(Kke," (GPT NeoX model)"),Kke.forEach(t),rko=i(Q),n4=n(Q,"LI",{});var Zke=s(n4);jge=n(Zke,"STRONG",{});var Q2t=s(jge);tko=r(Q2t,"gptj"),Q2t.forEach(t),ako=r(Zke," \u2014 "),mO=n(Zke,"A",{href:!0});var W2t=s(mO);nko=r(W2t,"GPTJForCausalLM"),W2t.forEach(t),sko=r(Zke," (GPT-J model)"),Zke.forEach(t),lko=i(Q),s4=n(Q,"LI",{});var eSe=s(s4);Dge=n(eSe,"STRONG",{});var H2t=s(Dge);iko=r(H2t,"marian"),H2t.forEach(t),dko=r(eSe," \u2014 "),gO=n(eSe,"A",{href:!0});var U2t=s(gO);cko=r(U2t,"MarianForCausalLM"),U2t.forEach(t),fko=r(eSe," (Marian model)"),eSe.forEach(t),mko=i(Q),l4=n(Q,"LI",{});var oSe=s(l4);Gge=n(oSe,"STRONG",{});var J2t=s(Gge);gko=r(J2t,"mbart"),J2t.forEach(t),hko=r(oSe," \u2014 "),hO=n(oSe,"A",{href:!0});var Y2t=s(hO);pko=r(Y2t,"MBartForCausalLM"),Y2t.forEach(t),_ko=r(oSe," (mBART model)"),oSe.forEach(t),uko=i(Q),i4=n(Q,"LI",{});var rSe=s(i4);Oge=n(rSe,"STRONG",{});var K2t=s(Oge);bko=r(K2t,"megatron-bert"),K2t.forEach(t),vko=r(rSe," \u2014 "),pO=n(rSe,"A",{href:!0});var Z2t=s(pO);Fko=r(Z2t,"MegatronBertForCausalLM"),Z2t.forEach(t),Tko=r(rSe," (Megatron-BERT model)"),rSe.forEach(t),Mko=i(Q),d4=n(Q,"LI",{});var tSe=s(d4);Vge=n(tSe,"STRONG",{});var ebt=s(Vge);Eko=r(ebt,"mvp"),ebt.forEach(t),Cko=r(tSe," \u2014 "),_O=n(tSe,"A",{href:!0});var obt=s(_O);wko=r(obt,"MvpForCausalLM"),obt.forEach(t),Ako=r(tSe," (MVP model)"),tSe.forEach(t),Lko=i(Q),c4=n(Q,"LI",{});var aSe=s(c4);Xge=n(aSe,"STRONG",{});var rbt=s(Xge);yko=r(rbt,"openai-gpt"),rbt.forEach(t),xko=r(aSe," \u2014 "),uO=n(aSe,"A",{href:!0});var tbt=s(uO);$ko=r(tbt,"OpenAIGPTLMHeadModel"),tbt.forEach(t),kko=r(aSe," (OpenAI GPT model)"),aSe.forEach(t),Sko=i(Q),f4=n(Q,"LI",{});var nSe=s(f4);zge=n(nSe,"STRONG",{});var abt=s(zge);Rko=r(abt,"opt"),abt.forEach(t),Pko=r(nSe," \u2014 "),bO=n(nSe,"A",{href:!0});var nbt=s(bO);Bko=r(nbt,"OPTForCausalLM"),nbt.forEach(t),Nko=r(nSe," (OPT model)"),nSe.forEach(t),Iko=i(Q),m4=n(Q,"LI",{});var sSe=s(m4);Qge=n(sSe,"STRONG",{});var sbt=s(Qge);qko=r(sbt,"pegasus"),sbt.forEach(t),jko=r(sSe," \u2014 "),vO=n(sSe,"A",{href:!0});var lbt=s(vO);Dko=r(lbt,"PegasusForCausalLM"),lbt.forEach(t),Gko=r(sSe," (Pegasus model)"),sSe.forEach(t),Oko=i(Q),g4=n(Q,"LI",{});var lSe=s(g4);Wge=n(lSe,"STRONG",{});var ibt=s(Wge);Vko=r(ibt,"plbart"),ibt.forEach(t),Xko=r(lSe," \u2014 "),FO=n(lSe,"A",{href:!0});var dbt=s(FO);zko=r(dbt,"PLBartForCausalLM"),dbt.forEach(t),Qko=r(lSe," (PLBart model)"),lSe.forEach(t),Wko=i(Q),h4=n(Q,"LI",{});var iSe=s(h4);Hge=n(iSe,"STRONG",{});var cbt=s(Hge);Hko=r(cbt,"prophetnet"),cbt.forEach(t),Uko=r(iSe," \u2014 "),TO=n(iSe,"A",{href:!0});var fbt=s(TO);Jko=r(fbt,"ProphetNetForCausalLM"),fbt.forEach(t),Yko=r(iSe," (ProphetNet model)"),iSe.forEach(t),Kko=i(Q),p4=n(Q,"LI",{});var dSe=s(p4);Uge=n(dSe,"STRONG",{});var mbt=s(Uge);Zko=r(mbt,"qdqbert"),mbt.forEach(t),eSo=r(dSe," \u2014 "),MO=n(dSe,"A",{href:!0});var gbt=s(MO);oSo=r(gbt,"QDQBertLMHeadModel"),gbt.forEach(t),rSo=r(dSe," (QDQBert model)"),dSe.forEach(t),tSo=i(Q),_4=n(Q,"LI",{});var cSe=s(_4);Jge=n(cSe,"STRONG",{});var hbt=s(Jge);aSo=r(hbt,"reformer"),hbt.forEach(t),nSo=r(cSe," \u2014 "),EO=n(cSe,"A",{href:!0});var pbt=s(EO);sSo=r(pbt,"ReformerModelWithLMHead"),pbt.forEach(t),lSo=r(cSe," (Reformer model)"),cSe.forEach(t),iSo=i(Q),u4=n(Q,"LI",{});var fSe=s(u4);Yge=n(fSe,"STRONG",{});var _bt=s(Yge);dSo=r(_bt,"rembert"),_bt.forEach(t),cSo=r(fSe," \u2014 "),CO=n(fSe,"A",{href:!0});var ubt=s(CO);fSo=r(ubt,"RemBertForCausalLM"),ubt.forEach(t),mSo=r(fSe," (RemBERT model)"),fSe.forEach(t),gSo=i(Q),b4=n(Q,"LI",{});var mSe=s(b4);Kge=n(mSe,"STRONG",{});var bbt=s(Kge);hSo=r(bbt,"roberta"),bbt.forEach(t),pSo=r(mSe," \u2014 "),wO=n(mSe,"A",{href:!0});var vbt=s(wO);_So=r(vbt,"RobertaForCausalLM"),vbt.forEach(t),uSo=r(mSe," (RoBERTa model)"),mSe.forEach(t),bSo=i(Q),v4=n(Q,"LI",{});var gSe=s(v4);Zge=n(gSe,"STRONG",{});var Fbt=s(Zge);vSo=r(Fbt,"roformer"),Fbt.forEach(t),FSo=r(gSe," \u2014 "),AO=n(gSe,"A",{href:!0});var Tbt=s(AO);TSo=r(Tbt,"RoFormerForCausalLM"),Tbt.forEach(t),MSo=r(gSe," (RoFormer model)"),gSe.forEach(t),ESo=i(Q),F4=n(Q,"LI",{});var hSe=s(F4);ehe=n(hSe,"STRONG",{});var Mbt=s(ehe);CSo=r(Mbt,"speech_to_text_2"),Mbt.forEach(t),wSo=r(hSe," \u2014 "),LO=n(hSe,"A",{href:!0});var Ebt=s(LO);ASo=r(Ebt,"Speech2Text2ForCausalLM"),Ebt.forEach(t),LSo=r(hSe," (Speech2Text2 model)"),hSe.forEach(t),ySo=i(Q),T4=n(Q,"LI",{});var pSe=s(T4);ohe=n(pSe,"STRONG",{});var Cbt=s(ohe);xSo=r(Cbt,"transfo-xl"),Cbt.forEach(t),$So=r(pSe," \u2014 "),yO=n(pSe,"A",{href:!0});var wbt=s(yO);kSo=r(wbt,"TransfoXLLMHeadModel"),wbt.forEach(t),SSo=r(pSe," (Transformer-XL model)"),pSe.forEach(t),RSo=i(Q),M4=n(Q,"LI",{});var _Se=s(M4);rhe=n(_Se,"STRONG",{});var Abt=s(rhe);PSo=r(Abt,"trocr"),Abt.forEach(t),BSo=r(_Se," \u2014 "),xO=n(_Se,"A",{href:!0});var Lbt=s(xO);NSo=r(Lbt,"TrOCRForCausalLM"),Lbt.forEach(t),ISo=r(_Se," (TrOCR model)"),_Se.forEach(t),qSo=i(Q),E4=n(Q,"LI",{});var uSe=s(E4);the=n(uSe,"STRONG",{});var ybt=s(the);jSo=r(ybt,"xglm"),ybt.forEach(t),DSo=r(uSe," \u2014 "),$O=n(uSe,"A",{href:!0});var xbt=s($O);GSo=r(xbt,"XGLMForCausalLM"),xbt.forEach(t),OSo=r(uSe," (XGLM model)"),uSe.forEach(t),VSo=i(Q),C4=n(Q,"LI",{});var bSe=s(C4);ahe=n(bSe,"STRONG",{});var $bt=s(ahe);XSo=r($bt,"xlm"),$bt.forEach(t),zSo=r(bSe," \u2014 "),kO=n(bSe,"A",{href:!0});var kbt=s(kO);QSo=r(kbt,"XLMWithLMHeadModel"),kbt.forEach(t),WSo=r(bSe," (XLM model)"),bSe.forEach(t),HSo=i(Q),w4=n(Q,"LI",{});var vSe=s(w4);nhe=n(vSe,"STRONG",{});var Sbt=s(nhe);USo=r(Sbt,"xlm-prophetnet"),Sbt.forEach(t),JSo=r(vSe," \u2014 "),SO=n(vSe,"A",{href:!0});var Rbt=s(SO);YSo=r(Rbt,"XLMProphetNetForCausalLM"),Rbt.forEach(t),KSo=r(vSe," (XLM-ProphetNet model)"),vSe.forEach(t),ZSo=i(Q),A4=n(Q,"LI",{});var FSe=s(A4);she=n(FSe,"STRONG",{});var Pbt=s(she);eRo=r(Pbt,"xlm-roberta"),Pbt.forEach(t),oRo=r(FSe," \u2014 "),RO=n(FSe,"A",{href:!0});var Bbt=s(RO);rRo=r(Bbt,"XLMRobertaForCausalLM"),Bbt.forEach(t),tRo=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),aRo=i(Q),L4=n(Q,"LI",{});var TSe=s(L4);lhe=n(TSe,"STRONG",{});var Nbt=s(lhe);nRo=r(Nbt,"xlm-roberta-xl"),Nbt.forEach(t),sRo=r(TSe," \u2014 "),PO=n(TSe,"A",{href:!0});var Ibt=s(PO);lRo=r(Ibt,"XLMRobertaXLForCausalLM"),Ibt.forEach(t),iRo=r(TSe," (XLM-RoBERTa-XL model)"),TSe.forEach(t),dRo=i(Q),y4=n(Q,"LI",{});var MSe=s(y4);ihe=n(MSe,"STRONG",{});var qbt=s(ihe);cRo=r(qbt,"xlnet"),qbt.forEach(t),fRo=r(MSe," \u2014 "),BO=n(MSe,"A",{href:!0});var jbt=s(BO);mRo=r(jbt,"XLNetLMHeadModel"),jbt.forEach(t),gRo=r(MSe," (XLNet model)"),MSe.forEach(t),Q.forEach(t),hRo=i(ia),x4=n(ia,"P",{});var ESe=s(x4);pRo=r(ESe,"The model is set in evaluation mode by default using "),dhe=n(ESe,"CODE",{});var Dbt=s(dhe);_Ro=r(Dbt,"model.eval()"),Dbt.forEach(t),uRo=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(ESe,"CODE",{});var Gbt=s(che);bRo=r(Gbt,"model.train()"),Gbt.forEach(t),ESe.forEach(t),vRo=i(ia),T($4.$$.fragment,ia),ia.forEach(t),tl.forEach(t),pXe=i(f),Ui=n(f,"H2",{class:!0});var TQe=s(Ui);k4=n(TQe,"A",{id:!0,class:!0,href:!0});var Obt=s(k4);fhe=n(Obt,"SPAN",{});var Vbt=s(fhe);T(zy.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),FRo=i(TQe),mhe=n(TQe,"SPAN",{});var Xbt=s(mhe);TRo=r(Xbt,"AutoModelForMaskedLM"),Xbt.forEach(t),TQe.forEach(t),_Xe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(Qy.$$.fragment,al),MRo=i(al),Ji=n(al,"P",{});var Bre=s(Ji);ERo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NO=n(Bre,"A",{href:!0});var zbt=s(NO);CRo=r(zbt,"from_pretrained()"),zbt.forEach(t),wRo=r(Bre," class method or the "),IO=n(Bre,"A",{href:!0});var Qbt=s(IO);ARo=r(Qbt,"from_config()"),Qbt.forEach(t),LRo=r(Bre,` class
method.`),Bre.forEach(t),yRo=i(al),Wy=n(al,"P",{});var MQe=s(Wy);xRo=r(MQe,"This class cannot be instantiated directly using "),ghe=n(MQe,"CODE",{});var Wbt=s(ghe);$Ro=r(Wbt,"__init__()"),Wbt.forEach(t),kRo=r(MQe," (throws an error)."),MQe.forEach(t),SRo=i(al),ct=n(al,"DIV",{class:!0});var h7=s(ct);T(Hy.$$.fragment,h7),RRo=i(h7),hhe=n(h7,"P",{});var Hbt=s(hhe);PRo=r(Hbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hbt.forEach(t),BRo=i(h7),Yi=n(h7,"P",{});var Nre=s(Yi);NRo=r(Nre,`Note:
Loading a model from its configuration file does `),phe=n(Nre,"STRONG",{});var Ubt=s(phe);IRo=r(Ubt,"not"),Ubt.forEach(t),qRo=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(Nre,"A",{href:!0});var Jbt=s(qO);jRo=r(Jbt,"from_pretrained()"),Jbt.forEach(t),DRo=r(Nre," to load the model weights."),Nre.forEach(t),GRo=i(h7),T(S4.$$.fragment,h7),h7.forEach(t),ORo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(Uy.$$.fragment,da),VRo=i(da),_he=n(da,"P",{});var Ybt=s(_he);XRo=r(Ybt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ybt.forEach(t),zRo=i(da),ja=n(da,"P",{});var p7=s(ja);QRo=r(p7,"The model class to instantiate is selected based on the "),uhe=n(p7,"CODE",{});var Kbt=s(uhe);WRo=r(Kbt,"model_type"),Kbt.forEach(t),HRo=r(p7,` property of the config object (either
passed as an argument or loaded from `),bhe=n(p7,"CODE",{});var Zbt=s(bhe);URo=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),JRo=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(p7,"CODE",{});var evt=s(vhe);YRo=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),KRo=r(p7,":"),p7.forEach(t),ZRo=i(da),W=n(da,"UL",{});var H=s(W);R4=n(H,"LI",{});var CSe=s(R4);Fhe=n(CSe,"STRONG",{});var ovt=s(Fhe);ePo=r(ovt,"albert"),ovt.forEach(t),oPo=r(CSe," \u2014 "),jO=n(CSe,"A",{href:!0});var rvt=s(jO);rPo=r(rvt,"AlbertForMaskedLM"),rvt.forEach(t),tPo=r(CSe," (ALBERT model)"),CSe.forEach(t),aPo=i(H),P4=n(H,"LI",{});var wSe=s(P4);The=n(wSe,"STRONG",{});var tvt=s(The);nPo=r(tvt,"bart"),tvt.forEach(t),sPo=r(wSe," \u2014 "),DO=n(wSe,"A",{href:!0});var avt=s(DO);lPo=r(avt,"BartForConditionalGeneration"),avt.forEach(t),iPo=r(wSe," (BART model)"),wSe.forEach(t),dPo=i(H),B4=n(H,"LI",{});var ASe=s(B4);Mhe=n(ASe,"STRONG",{});var nvt=s(Mhe);cPo=r(nvt,"bert"),nvt.forEach(t),fPo=r(ASe," \u2014 "),GO=n(ASe,"A",{href:!0});var svt=s(GO);mPo=r(svt,"BertForMaskedLM"),svt.forEach(t),gPo=r(ASe," (BERT model)"),ASe.forEach(t),hPo=i(H),N4=n(H,"LI",{});var LSe=s(N4);Ehe=n(LSe,"STRONG",{});var lvt=s(Ehe);pPo=r(lvt,"big_bird"),lvt.forEach(t),_Po=r(LSe," \u2014 "),OO=n(LSe,"A",{href:!0});var ivt=s(OO);uPo=r(ivt,"BigBirdForMaskedLM"),ivt.forEach(t),bPo=r(LSe," (BigBird model)"),LSe.forEach(t),vPo=i(H),I4=n(H,"LI",{});var ySe=s(I4);Che=n(ySe,"STRONG",{});var dvt=s(Che);FPo=r(dvt,"camembert"),dvt.forEach(t),TPo=r(ySe," \u2014 "),VO=n(ySe,"A",{href:!0});var cvt=s(VO);MPo=r(cvt,"CamembertForMaskedLM"),cvt.forEach(t),EPo=r(ySe," (CamemBERT model)"),ySe.forEach(t),CPo=i(H),q4=n(H,"LI",{});var xSe=s(q4);whe=n(xSe,"STRONG",{});var fvt=s(whe);wPo=r(fvt,"convbert"),fvt.forEach(t),APo=r(xSe," \u2014 "),XO=n(xSe,"A",{href:!0});var mvt=s(XO);LPo=r(mvt,"ConvBertForMaskedLM"),mvt.forEach(t),yPo=r(xSe," (ConvBERT model)"),xSe.forEach(t),xPo=i(H),j4=n(H,"LI",{});var $Se=s(j4);Ahe=n($Se,"STRONG",{});var gvt=s(Ahe);$Po=r(gvt,"data2vec-text"),gvt.forEach(t),kPo=r($Se," \u2014 "),zO=n($Se,"A",{href:!0});var hvt=s(zO);SPo=r(hvt,"Data2VecTextForMaskedLM"),hvt.forEach(t),RPo=r($Se," (Data2VecText model)"),$Se.forEach(t),PPo=i(H),D4=n(H,"LI",{});var kSe=s(D4);Lhe=n(kSe,"STRONG",{});var pvt=s(Lhe);BPo=r(pvt,"deberta"),pvt.forEach(t),NPo=r(kSe," \u2014 "),QO=n(kSe,"A",{href:!0});var _vt=s(QO);IPo=r(_vt,"DebertaForMaskedLM"),_vt.forEach(t),qPo=r(kSe," (DeBERTa model)"),kSe.forEach(t),jPo=i(H),G4=n(H,"LI",{});var SSe=s(G4);yhe=n(SSe,"STRONG",{});var uvt=s(yhe);DPo=r(uvt,"deberta-v2"),uvt.forEach(t),GPo=r(SSe," \u2014 "),WO=n(SSe,"A",{href:!0});var bvt=s(WO);OPo=r(bvt,"DebertaV2ForMaskedLM"),bvt.forEach(t),VPo=r(SSe," (DeBERTa-v2 model)"),SSe.forEach(t),XPo=i(H),O4=n(H,"LI",{});var RSe=s(O4);xhe=n(RSe,"STRONG",{});var vvt=s(xhe);zPo=r(vvt,"distilbert"),vvt.forEach(t),QPo=r(RSe," \u2014 "),HO=n(RSe,"A",{href:!0});var Fvt=s(HO);WPo=r(Fvt,"DistilBertForMaskedLM"),Fvt.forEach(t),HPo=r(RSe," (DistilBERT model)"),RSe.forEach(t),UPo=i(H),V4=n(H,"LI",{});var PSe=s(V4);$he=n(PSe,"STRONG",{});var Tvt=s($he);JPo=r(Tvt,"electra"),Tvt.forEach(t),YPo=r(PSe," \u2014 "),UO=n(PSe,"A",{href:!0});var Mvt=s(UO);KPo=r(Mvt,"ElectraForMaskedLM"),Mvt.forEach(t),ZPo=r(PSe," (ELECTRA model)"),PSe.forEach(t),eBo=i(H),X4=n(H,"LI",{});var BSe=s(X4);khe=n(BSe,"STRONG",{});var Evt=s(khe);oBo=r(Evt,"flaubert"),Evt.forEach(t),rBo=r(BSe," \u2014 "),JO=n(BSe,"A",{href:!0});var Cvt=s(JO);tBo=r(Cvt,"FlaubertWithLMHeadModel"),Cvt.forEach(t),aBo=r(BSe," (FlauBERT model)"),BSe.forEach(t),nBo=i(H),z4=n(H,"LI",{});var NSe=s(z4);She=n(NSe,"STRONG",{});var wvt=s(She);sBo=r(wvt,"fnet"),wvt.forEach(t),lBo=r(NSe," \u2014 "),YO=n(NSe,"A",{href:!0});var Avt=s(YO);iBo=r(Avt,"FNetForMaskedLM"),Avt.forEach(t),dBo=r(NSe," (FNet model)"),NSe.forEach(t),cBo=i(H),Q4=n(H,"LI",{});var ISe=s(Q4);Rhe=n(ISe,"STRONG",{});var Lvt=s(Rhe);fBo=r(Lvt,"funnel"),Lvt.forEach(t),mBo=r(ISe," \u2014 "),KO=n(ISe,"A",{href:!0});var yvt=s(KO);gBo=r(yvt,"FunnelForMaskedLM"),yvt.forEach(t),hBo=r(ISe," (Funnel Transformer model)"),ISe.forEach(t),pBo=i(H),W4=n(H,"LI",{});var qSe=s(W4);Phe=n(qSe,"STRONG",{});var xvt=s(Phe);_Bo=r(xvt,"ibert"),xvt.forEach(t),uBo=r(qSe," \u2014 "),ZO=n(qSe,"A",{href:!0});var $vt=s(ZO);bBo=r($vt,"IBertForMaskedLM"),$vt.forEach(t),vBo=r(qSe," (I-BERT model)"),qSe.forEach(t),FBo=i(H),H4=n(H,"LI",{});var jSe=s(H4);Bhe=n(jSe,"STRONG",{});var kvt=s(Bhe);TBo=r(kvt,"layoutlm"),kvt.forEach(t),MBo=r(jSe," \u2014 "),eV=n(jSe,"A",{href:!0});var Svt=s(eV);EBo=r(Svt,"LayoutLMForMaskedLM"),Svt.forEach(t),CBo=r(jSe," (LayoutLM model)"),jSe.forEach(t),wBo=i(H),U4=n(H,"LI",{});var DSe=s(U4);Nhe=n(DSe,"STRONG",{});var Rvt=s(Nhe);ABo=r(Rvt,"longformer"),Rvt.forEach(t),LBo=r(DSe," \u2014 "),oV=n(DSe,"A",{href:!0});var Pvt=s(oV);yBo=r(Pvt,"LongformerForMaskedLM"),Pvt.forEach(t),xBo=r(DSe," (Longformer model)"),DSe.forEach(t),$Bo=i(H),J4=n(H,"LI",{});var GSe=s(J4);Ihe=n(GSe,"STRONG",{});var Bvt=s(Ihe);kBo=r(Bvt,"luke"),Bvt.forEach(t),SBo=r(GSe," \u2014 "),rV=n(GSe,"A",{href:!0});var Nvt=s(rV);RBo=r(Nvt,"LukeForMaskedLM"),Nvt.forEach(t),PBo=r(GSe," (LUKE model)"),GSe.forEach(t),BBo=i(H),Y4=n(H,"LI",{});var OSe=s(Y4);qhe=n(OSe,"STRONG",{});var Ivt=s(qhe);NBo=r(Ivt,"mbart"),Ivt.forEach(t),IBo=r(OSe," \u2014 "),tV=n(OSe,"A",{href:!0});var qvt=s(tV);qBo=r(qvt,"MBartForConditionalGeneration"),qvt.forEach(t),jBo=r(OSe," (mBART model)"),OSe.forEach(t),DBo=i(H),K4=n(H,"LI",{});var VSe=s(K4);jhe=n(VSe,"STRONG",{});var jvt=s(jhe);GBo=r(jvt,"megatron-bert"),jvt.forEach(t),OBo=r(VSe," \u2014 "),aV=n(VSe,"A",{href:!0});var Dvt=s(aV);VBo=r(Dvt,"MegatronBertForMaskedLM"),Dvt.forEach(t),XBo=r(VSe," (Megatron-BERT model)"),VSe.forEach(t),zBo=i(H),Z4=n(H,"LI",{});var XSe=s(Z4);Dhe=n(XSe,"STRONG",{});var Gvt=s(Dhe);QBo=r(Gvt,"mobilebert"),Gvt.forEach(t),WBo=r(XSe," \u2014 "),nV=n(XSe,"A",{href:!0});var Ovt=s(nV);HBo=r(Ovt,"MobileBertForMaskedLM"),Ovt.forEach(t),UBo=r(XSe," (MobileBERT model)"),XSe.forEach(t),JBo=i(H),e2=n(H,"LI",{});var zSe=s(e2);Ghe=n(zSe,"STRONG",{});var Vvt=s(Ghe);YBo=r(Vvt,"mpnet"),Vvt.forEach(t),KBo=r(zSe," \u2014 "),sV=n(zSe,"A",{href:!0});var Xvt=s(sV);ZBo=r(Xvt,"MPNetForMaskedLM"),Xvt.forEach(t),eNo=r(zSe," (MPNet model)"),zSe.forEach(t),oNo=i(H),o2=n(H,"LI",{});var QSe=s(o2);Ohe=n(QSe,"STRONG",{});var zvt=s(Ohe);rNo=r(zvt,"mvp"),zvt.forEach(t),tNo=r(QSe," \u2014 "),lV=n(QSe,"A",{href:!0});var Qvt=s(lV);aNo=r(Qvt,"MvpForConditionalGeneration"),Qvt.forEach(t),nNo=r(QSe," (MVP model)"),QSe.forEach(t),sNo=i(H),r2=n(H,"LI",{});var WSe=s(r2);Vhe=n(WSe,"STRONG",{});var Wvt=s(Vhe);lNo=r(Wvt,"nezha"),Wvt.forEach(t),iNo=r(WSe," \u2014 "),iV=n(WSe,"A",{href:!0});var Hvt=s(iV);dNo=r(Hvt,"NezhaForMaskedLM"),Hvt.forEach(t),cNo=r(WSe," (Nezha model)"),WSe.forEach(t),fNo=i(H),t2=n(H,"LI",{});var HSe=s(t2);Xhe=n(HSe,"STRONG",{});var Uvt=s(Xhe);mNo=r(Uvt,"nystromformer"),Uvt.forEach(t),gNo=r(HSe," \u2014 "),dV=n(HSe,"A",{href:!0});var Jvt=s(dV);hNo=r(Jvt,"NystromformerForMaskedLM"),Jvt.forEach(t),pNo=r(HSe," (Nystr\xF6mformer model)"),HSe.forEach(t),_No=i(H),a2=n(H,"LI",{});var USe=s(a2);zhe=n(USe,"STRONG",{});var Yvt=s(zhe);uNo=r(Yvt,"perceiver"),Yvt.forEach(t),bNo=r(USe," \u2014 "),cV=n(USe,"A",{href:!0});var Kvt=s(cV);vNo=r(Kvt,"PerceiverForMaskedLM"),Kvt.forEach(t),FNo=r(USe," (Perceiver model)"),USe.forEach(t),TNo=i(H),n2=n(H,"LI",{});var JSe=s(n2);Qhe=n(JSe,"STRONG",{});var Zvt=s(Qhe);MNo=r(Zvt,"qdqbert"),Zvt.forEach(t),ENo=r(JSe," \u2014 "),fV=n(JSe,"A",{href:!0});var e3t=s(fV);CNo=r(e3t,"QDQBertForMaskedLM"),e3t.forEach(t),wNo=r(JSe," (QDQBert model)"),JSe.forEach(t),ANo=i(H),s2=n(H,"LI",{});var YSe=s(s2);Whe=n(YSe,"STRONG",{});var o3t=s(Whe);LNo=r(o3t,"reformer"),o3t.forEach(t),yNo=r(YSe," \u2014 "),mV=n(YSe,"A",{href:!0});var r3t=s(mV);xNo=r(r3t,"ReformerForMaskedLM"),r3t.forEach(t),$No=r(YSe," (Reformer model)"),YSe.forEach(t),kNo=i(H),l2=n(H,"LI",{});var KSe=s(l2);Hhe=n(KSe,"STRONG",{});var t3t=s(Hhe);SNo=r(t3t,"rembert"),t3t.forEach(t),RNo=r(KSe," \u2014 "),gV=n(KSe,"A",{href:!0});var a3t=s(gV);PNo=r(a3t,"RemBertForMaskedLM"),a3t.forEach(t),BNo=r(KSe," (RemBERT model)"),KSe.forEach(t),NNo=i(H),i2=n(H,"LI",{});var ZSe=s(i2);Uhe=n(ZSe,"STRONG",{});var n3t=s(Uhe);INo=r(n3t,"roberta"),n3t.forEach(t),qNo=r(ZSe," \u2014 "),hV=n(ZSe,"A",{href:!0});var s3t=s(hV);jNo=r(s3t,"RobertaForMaskedLM"),s3t.forEach(t),DNo=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),GNo=i(H),d2=n(H,"LI",{});var eRe=s(d2);Jhe=n(eRe,"STRONG",{});var l3t=s(Jhe);ONo=r(l3t,"roformer"),l3t.forEach(t),VNo=r(eRe," \u2014 "),pV=n(eRe,"A",{href:!0});var i3t=s(pV);XNo=r(i3t,"RoFormerForMaskedLM"),i3t.forEach(t),zNo=r(eRe," (RoFormer model)"),eRe.forEach(t),QNo=i(H),c2=n(H,"LI",{});var oRe=s(c2);Yhe=n(oRe,"STRONG",{});var d3t=s(Yhe);WNo=r(d3t,"squeezebert"),d3t.forEach(t),HNo=r(oRe," \u2014 "),_V=n(oRe,"A",{href:!0});var c3t=s(_V);UNo=r(c3t,"SqueezeBertForMaskedLM"),c3t.forEach(t),JNo=r(oRe," (SqueezeBERT model)"),oRe.forEach(t),YNo=i(H),f2=n(H,"LI",{});var rRe=s(f2);Khe=n(rRe,"STRONG",{});var f3t=s(Khe);KNo=r(f3t,"tapas"),f3t.forEach(t),ZNo=r(rRe," \u2014 "),uV=n(rRe,"A",{href:!0});var m3t=s(uV);eIo=r(m3t,"TapasForMaskedLM"),m3t.forEach(t),oIo=r(rRe," (TAPAS model)"),rRe.forEach(t),rIo=i(H),m2=n(H,"LI",{});var tRe=s(m2);Zhe=n(tRe,"STRONG",{});var g3t=s(Zhe);tIo=r(g3t,"wav2vec2"),g3t.forEach(t),aIo=r(tRe," \u2014 "),epe=n(tRe,"CODE",{});var h3t=s(epe);nIo=r(h3t,"Wav2Vec2ForMaskedLM"),h3t.forEach(t),sIo=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),lIo=i(H),g2=n(H,"LI",{});var aRe=s(g2);ope=n(aRe,"STRONG",{});var p3t=s(ope);iIo=r(p3t,"xlm"),p3t.forEach(t),dIo=r(aRe," \u2014 "),bV=n(aRe,"A",{href:!0});var _3t=s(bV);cIo=r(_3t,"XLMWithLMHeadModel"),_3t.forEach(t),fIo=r(aRe," (XLM model)"),aRe.forEach(t),mIo=i(H),h2=n(H,"LI",{});var nRe=s(h2);rpe=n(nRe,"STRONG",{});var u3t=s(rpe);gIo=r(u3t,"xlm-roberta"),u3t.forEach(t),hIo=r(nRe," \u2014 "),vV=n(nRe,"A",{href:!0});var b3t=s(vV);pIo=r(b3t,"XLMRobertaForMaskedLM"),b3t.forEach(t),_Io=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),uIo=i(H),p2=n(H,"LI",{});var sRe=s(p2);tpe=n(sRe,"STRONG",{});var v3t=s(tpe);bIo=r(v3t,"xlm-roberta-xl"),v3t.forEach(t),vIo=r(sRe," \u2014 "),FV=n(sRe,"A",{href:!0});var F3t=s(FV);FIo=r(F3t,"XLMRobertaXLForMaskedLM"),F3t.forEach(t),TIo=r(sRe," (XLM-RoBERTa-XL model)"),sRe.forEach(t),MIo=i(H),_2=n(H,"LI",{});var lRe=s(_2);ape=n(lRe,"STRONG",{});var T3t=s(ape);EIo=r(T3t,"yoso"),T3t.forEach(t),CIo=r(lRe," \u2014 "),TV=n(lRe,"A",{href:!0});var M3t=s(TV);wIo=r(M3t,"YosoForMaskedLM"),M3t.forEach(t),AIo=r(lRe," (YOSO model)"),lRe.forEach(t),H.forEach(t),LIo=i(da),u2=n(da,"P",{});var iRe=s(u2);yIo=r(iRe,"The model is set in evaluation mode by default using "),npe=n(iRe,"CODE",{});var E3t=s(npe);xIo=r(E3t,"model.eval()"),E3t.forEach(t),$Io=r(iRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(iRe,"CODE",{});var C3t=s(spe);kIo=r(C3t,"model.train()"),C3t.forEach(t),iRe.forEach(t),SIo=i(da),T(b2.$$.fragment,da),da.forEach(t),al.forEach(t),uXe=i(f),Ki=n(f,"H2",{class:!0});var EQe=s(Ki);v2=n(EQe,"A",{id:!0,class:!0,href:!0});var w3t=s(v2);lpe=n(w3t,"SPAN",{});var A3t=s(lpe);T(Jy.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),RIo=i(EQe),ipe=n(EQe,"SPAN",{});var L3t=s(ipe);PIo=r(L3t,"AutoModelForSeq2SeqLM"),L3t.forEach(t),EQe.forEach(t),bXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(Yy.$$.fragment,nl),BIo=i(nl),Zi=n(nl,"P",{});var Ire=s(Zi);NIo=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MV=n(Ire,"A",{href:!0});var y3t=s(MV);IIo=r(y3t,"from_pretrained()"),y3t.forEach(t),qIo=r(Ire," class method or the "),EV=n(Ire,"A",{href:!0});var x3t=s(EV);jIo=r(x3t,"from_config()"),x3t.forEach(t),DIo=r(Ire,` class
method.`),Ire.forEach(t),GIo=i(nl),Ky=n(nl,"P",{});var CQe=s(Ky);OIo=r(CQe,"This class cannot be instantiated directly using "),dpe=n(CQe,"CODE",{});var $3t=s(dpe);VIo=r($3t,"__init__()"),$3t.forEach(t),XIo=r(CQe," (throws an error)."),CQe.forEach(t),zIo=i(nl),ft=n(nl,"DIV",{class:!0});var _7=s(ft);T(Zy.$$.fragment,_7),QIo=i(_7),cpe=n(_7,"P",{});var k3t=s(cpe);WIo=r(k3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k3t.forEach(t),HIo=i(_7),ed=n(_7,"P",{});var qre=s(ed);UIo=r(qre,`Note:
Loading a model from its configuration file does `),fpe=n(qre,"STRONG",{});var S3t=s(fpe);JIo=r(S3t,"not"),S3t.forEach(t),YIo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(qre,"A",{href:!0});var R3t=s(CV);KIo=r(R3t,"from_pretrained()"),R3t.forEach(t),ZIo=r(qre," to load the model weights."),qre.forEach(t),eqo=i(_7),T(F2.$$.fragment,_7),_7.forEach(t),oqo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(e8.$$.fragment,ca),rqo=i(ca),mpe=n(ca,"P",{});var P3t=s(mpe);tqo=r(P3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P3t.forEach(t),aqo=i(ca),Da=n(ca,"P",{});var u7=s(Da);nqo=r(u7,"The model class to instantiate is selected based on the "),gpe=n(u7,"CODE",{});var B3t=s(gpe);sqo=r(B3t,"model_type"),B3t.forEach(t),lqo=r(u7,` property of the config object (either
passed as an argument or loaded from `),hpe=n(u7,"CODE",{});var N3t=s(hpe);iqo=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),dqo=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(u7,"CODE",{});var I3t=s(ppe);cqo=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),fqo=r(u7,":"),u7.forEach(t),mqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);T2=n(be,"LI",{});var dRe=s(T2);_pe=n(dRe,"STRONG",{});var q3t=s(_pe);gqo=r(q3t,"bart"),q3t.forEach(t),hqo=r(dRe," \u2014 "),wV=n(dRe,"A",{href:!0});var j3t=s(wV);pqo=r(j3t,"BartForConditionalGeneration"),j3t.forEach(t),_qo=r(dRe," (BART model)"),dRe.forEach(t),uqo=i(be),M2=n(be,"LI",{});var cRe=s(M2);upe=n(cRe,"STRONG",{});var D3t=s(upe);bqo=r(D3t,"bigbird_pegasus"),D3t.forEach(t),vqo=r(cRe," \u2014 "),AV=n(cRe,"A",{href:!0});var G3t=s(AV);Fqo=r(G3t,"BigBirdPegasusForConditionalGeneration"),G3t.forEach(t),Tqo=r(cRe," (BigBird-Pegasus model)"),cRe.forEach(t),Mqo=i(be),E2=n(be,"LI",{});var fRe=s(E2);bpe=n(fRe,"STRONG",{});var O3t=s(bpe);Eqo=r(O3t,"blenderbot"),O3t.forEach(t),Cqo=r(fRe," \u2014 "),LV=n(fRe,"A",{href:!0});var V3t=s(LV);wqo=r(V3t,"BlenderbotForConditionalGeneration"),V3t.forEach(t),Aqo=r(fRe," (Blenderbot model)"),fRe.forEach(t),Lqo=i(be),C2=n(be,"LI",{});var mRe=s(C2);vpe=n(mRe,"STRONG",{});var X3t=s(vpe);yqo=r(X3t,"blenderbot-small"),X3t.forEach(t),xqo=r(mRe," \u2014 "),yV=n(mRe,"A",{href:!0});var z3t=s(yV);$qo=r(z3t,"BlenderbotSmallForConditionalGeneration"),z3t.forEach(t),kqo=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),Sqo=i(be),w2=n(be,"LI",{});var gRe=s(w2);Fpe=n(gRe,"STRONG",{});var Q3t=s(Fpe);Rqo=r(Q3t,"encoder-decoder"),Q3t.forEach(t),Pqo=r(gRe," \u2014 "),xV=n(gRe,"A",{href:!0});var W3t=s(xV);Bqo=r(W3t,"EncoderDecoderModel"),W3t.forEach(t),Nqo=r(gRe," (Encoder decoder model)"),gRe.forEach(t),Iqo=i(be),A2=n(be,"LI",{});var hRe=s(A2);Tpe=n(hRe,"STRONG",{});var H3t=s(Tpe);qqo=r(H3t,"fsmt"),H3t.forEach(t),jqo=r(hRe," \u2014 "),$V=n(hRe,"A",{href:!0});var U3t=s($V);Dqo=r(U3t,"FSMTForConditionalGeneration"),U3t.forEach(t),Gqo=r(hRe," (FairSeq Machine-Translation model)"),hRe.forEach(t),Oqo=i(be),L2=n(be,"LI",{});var pRe=s(L2);Mpe=n(pRe,"STRONG",{});var J3t=s(Mpe);Vqo=r(J3t,"led"),J3t.forEach(t),Xqo=r(pRe," \u2014 "),kV=n(pRe,"A",{href:!0});var Y3t=s(kV);zqo=r(Y3t,"LEDForConditionalGeneration"),Y3t.forEach(t),Qqo=r(pRe," (LED model)"),pRe.forEach(t),Wqo=i(be),y2=n(be,"LI",{});var _Re=s(y2);Epe=n(_Re,"STRONG",{});var K3t=s(Epe);Hqo=r(K3t,"longt5"),K3t.forEach(t),Uqo=r(_Re," \u2014 "),SV=n(_Re,"A",{href:!0});var Z3t=s(SV);Jqo=r(Z3t,"LongT5ForConditionalGeneration"),Z3t.forEach(t),Yqo=r(_Re," (LongT5 model)"),_Re.forEach(t),Kqo=i(be),x2=n(be,"LI",{});var uRe=s(x2);Cpe=n(uRe,"STRONG",{});var e5t=s(Cpe);Zqo=r(e5t,"m2m_100"),e5t.forEach(t),ejo=r(uRe," \u2014 "),RV=n(uRe,"A",{href:!0});var o5t=s(RV);ojo=r(o5t,"M2M100ForConditionalGeneration"),o5t.forEach(t),rjo=r(uRe," (M2M100 model)"),uRe.forEach(t),tjo=i(be),$2=n(be,"LI",{});var bRe=s($2);wpe=n(bRe,"STRONG",{});var r5t=s(wpe);ajo=r(r5t,"marian"),r5t.forEach(t),njo=r(bRe," \u2014 "),PV=n(bRe,"A",{href:!0});var t5t=s(PV);sjo=r(t5t,"MarianMTModel"),t5t.forEach(t),ljo=r(bRe," (Marian model)"),bRe.forEach(t),ijo=i(be),k2=n(be,"LI",{});var vRe=s(k2);Ape=n(vRe,"STRONG",{});var a5t=s(Ape);djo=r(a5t,"mbart"),a5t.forEach(t),cjo=r(vRe," \u2014 "),BV=n(vRe,"A",{href:!0});var n5t=s(BV);fjo=r(n5t,"MBartForConditionalGeneration"),n5t.forEach(t),mjo=r(vRe," (mBART model)"),vRe.forEach(t),gjo=i(be),S2=n(be,"LI",{});var FRe=s(S2);Lpe=n(FRe,"STRONG",{});var s5t=s(Lpe);hjo=r(s5t,"mt5"),s5t.forEach(t),pjo=r(FRe," \u2014 "),NV=n(FRe,"A",{href:!0});var l5t=s(NV);_jo=r(l5t,"MT5ForConditionalGeneration"),l5t.forEach(t),ujo=r(FRe," (MT5 model)"),FRe.forEach(t),bjo=i(be),R2=n(be,"LI",{});var TRe=s(R2);ype=n(TRe,"STRONG",{});var i5t=s(ype);vjo=r(i5t,"mvp"),i5t.forEach(t),Fjo=r(TRe," \u2014 "),IV=n(TRe,"A",{href:!0});var d5t=s(IV);Tjo=r(d5t,"MvpForConditionalGeneration"),d5t.forEach(t),Mjo=r(TRe," (MVP model)"),TRe.forEach(t),Ejo=i(be),P2=n(be,"LI",{});var MRe=s(P2);xpe=n(MRe,"STRONG",{});var c5t=s(xpe);Cjo=r(c5t,"pegasus"),c5t.forEach(t),wjo=r(MRe," \u2014 "),qV=n(MRe,"A",{href:!0});var f5t=s(qV);Ajo=r(f5t,"PegasusForConditionalGeneration"),f5t.forEach(t),Ljo=r(MRe," (Pegasus model)"),MRe.forEach(t),yjo=i(be),B2=n(be,"LI",{});var ERe=s(B2);$pe=n(ERe,"STRONG",{});var m5t=s($pe);xjo=r(m5t,"plbart"),m5t.forEach(t),$jo=r(ERe," \u2014 "),jV=n(ERe,"A",{href:!0});var g5t=s(jV);kjo=r(g5t,"PLBartForConditionalGeneration"),g5t.forEach(t),Sjo=r(ERe," (PLBart model)"),ERe.forEach(t),Rjo=i(be),N2=n(be,"LI",{});var CRe=s(N2);kpe=n(CRe,"STRONG",{});var h5t=s(kpe);Pjo=r(h5t,"prophetnet"),h5t.forEach(t),Bjo=r(CRe," \u2014 "),DV=n(CRe,"A",{href:!0});var p5t=s(DV);Njo=r(p5t,"ProphetNetForConditionalGeneration"),p5t.forEach(t),Ijo=r(CRe," (ProphetNet model)"),CRe.forEach(t),qjo=i(be),I2=n(be,"LI",{});var wRe=s(I2);Spe=n(wRe,"STRONG",{});var _5t=s(Spe);jjo=r(_5t,"t5"),_5t.forEach(t),Djo=r(wRe," \u2014 "),GV=n(wRe,"A",{href:!0});var u5t=s(GV);Gjo=r(u5t,"T5ForConditionalGeneration"),u5t.forEach(t),Ojo=r(wRe," (T5 model)"),wRe.forEach(t),Vjo=i(be),q2=n(be,"LI",{});var ARe=s(q2);Rpe=n(ARe,"STRONG",{});var b5t=s(Rpe);Xjo=r(b5t,"xlm-prophetnet"),b5t.forEach(t),zjo=r(ARe," \u2014 "),OV=n(ARe,"A",{href:!0});var v5t=s(OV);Qjo=r(v5t,"XLMProphetNetForConditionalGeneration"),v5t.forEach(t),Wjo=r(ARe," (XLM-ProphetNet model)"),ARe.forEach(t),be.forEach(t),Hjo=i(ca),j2=n(ca,"P",{});var LRe=s(j2);Ujo=r(LRe,"The model is set in evaluation mode by default using "),Ppe=n(LRe,"CODE",{});var F5t=s(Ppe);Jjo=r(F5t,"model.eval()"),F5t.forEach(t),Yjo=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(LRe,"CODE",{});var T5t=s(Bpe);Kjo=r(T5t,"model.train()"),T5t.forEach(t),LRe.forEach(t),Zjo=i(ca),T(D2.$$.fragment,ca),ca.forEach(t),nl.forEach(t),vXe=i(f),od=n(f,"H2",{class:!0});var wQe=s(od);G2=n(wQe,"A",{id:!0,class:!0,href:!0});var M5t=s(G2);Npe=n(M5t,"SPAN",{});var E5t=s(Npe);T(o8.$$.fragment,E5t),E5t.forEach(t),M5t.forEach(t),eDo=i(wQe),Ipe=n(wQe,"SPAN",{});var C5t=s(Ipe);oDo=r(C5t,"AutoModelForSequenceClassification"),C5t.forEach(t),wQe.forEach(t),FXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(r8.$$.fragment,sl),rDo=i(sl),rd=n(sl,"P",{});var jre=s(rd);tDo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VV=n(jre,"A",{href:!0});var w5t=s(VV);aDo=r(w5t,"from_pretrained()"),w5t.forEach(t),nDo=r(jre," class method or the "),XV=n(jre,"A",{href:!0});var A5t=s(XV);sDo=r(A5t,"from_config()"),A5t.forEach(t),lDo=r(jre,` class
method.`),jre.forEach(t),iDo=i(sl),t8=n(sl,"P",{});var AQe=s(t8);dDo=r(AQe,"This class cannot be instantiated directly using "),qpe=n(AQe,"CODE",{});var L5t=s(qpe);cDo=r(L5t,"__init__()"),L5t.forEach(t),fDo=r(AQe," (throws an error)."),AQe.forEach(t),mDo=i(sl),mt=n(sl,"DIV",{class:!0});var b7=s(mt);T(a8.$$.fragment,b7),gDo=i(b7),jpe=n(b7,"P",{});var y5t=s(jpe);hDo=r(y5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y5t.forEach(t),pDo=i(b7),td=n(b7,"P",{});var Dre=s(td);_Do=r(Dre,`Note:
Loading a model from its configuration file does `),Dpe=n(Dre,"STRONG",{});var x5t=s(Dpe);uDo=r(x5t,"not"),x5t.forEach(t),bDo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(Dre,"A",{href:!0});var $5t=s(zV);vDo=r($5t,"from_pretrained()"),$5t.forEach(t),FDo=r(Dre," to load the model weights."),Dre.forEach(t),TDo=i(b7),T(O2.$$.fragment,b7),b7.forEach(t),MDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(n8.$$.fragment,fa),EDo=i(fa),Gpe=n(fa,"P",{});var k5t=s(Gpe);CDo=r(k5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),k5t.forEach(t),wDo=i(fa),Ga=n(fa,"P",{});var v7=s(Ga);ADo=r(v7,"The model class to instantiate is selected based on the "),Ope=n(v7,"CODE",{});var S5t=s(Ope);LDo=r(S5t,"model_type"),S5t.forEach(t),yDo=r(v7,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(v7,"CODE",{});var R5t=s(Vpe);xDo=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),$Do=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(v7,"CODE",{});var P5t=s(Xpe);kDo=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),SDo=r(v7,":"),v7.forEach(t),RDo=i(fa),I=n(fa,"UL",{});var j=s(I);V2=n(j,"LI",{});var yRe=s(V2);zpe=n(yRe,"STRONG",{});var B5t=s(zpe);PDo=r(B5t,"albert"),B5t.forEach(t),BDo=r(yRe," \u2014 "),QV=n(yRe,"A",{href:!0});var N5t=s(QV);NDo=r(N5t,"AlbertForSequenceClassification"),N5t.forEach(t),IDo=r(yRe," (ALBERT model)"),yRe.forEach(t),qDo=i(j),X2=n(j,"LI",{});var xRe=s(X2);Qpe=n(xRe,"STRONG",{});var I5t=s(Qpe);jDo=r(I5t,"bart"),I5t.forEach(t),DDo=r(xRe," \u2014 "),WV=n(xRe,"A",{href:!0});var q5t=s(WV);GDo=r(q5t,"BartForSequenceClassification"),q5t.forEach(t),ODo=r(xRe," (BART model)"),xRe.forEach(t),VDo=i(j),z2=n(j,"LI",{});var $Re=s(z2);Wpe=n($Re,"STRONG",{});var j5t=s(Wpe);XDo=r(j5t,"bert"),j5t.forEach(t),zDo=r($Re," \u2014 "),HV=n($Re,"A",{href:!0});var D5t=s(HV);QDo=r(D5t,"BertForSequenceClassification"),D5t.forEach(t),WDo=r($Re," (BERT model)"),$Re.forEach(t),HDo=i(j),Q2=n(j,"LI",{});var kRe=s(Q2);Hpe=n(kRe,"STRONG",{});var G5t=s(Hpe);UDo=r(G5t,"big_bird"),G5t.forEach(t),JDo=r(kRe," \u2014 "),UV=n(kRe,"A",{href:!0});var O5t=s(UV);YDo=r(O5t,"BigBirdForSequenceClassification"),O5t.forEach(t),KDo=r(kRe," (BigBird model)"),kRe.forEach(t),ZDo=i(j),W2=n(j,"LI",{});var SRe=s(W2);Upe=n(SRe,"STRONG",{});var V5t=s(Upe);eGo=r(V5t,"bigbird_pegasus"),V5t.forEach(t),oGo=r(SRe," \u2014 "),JV=n(SRe,"A",{href:!0});var X5t=s(JV);rGo=r(X5t,"BigBirdPegasusForSequenceClassification"),X5t.forEach(t),tGo=r(SRe," (BigBird-Pegasus model)"),SRe.forEach(t),aGo=i(j),H2=n(j,"LI",{});var RRe=s(H2);Jpe=n(RRe,"STRONG",{});var z5t=s(Jpe);nGo=r(z5t,"bloom"),z5t.forEach(t),sGo=r(RRe," \u2014 "),YV=n(RRe,"A",{href:!0});var Q5t=s(YV);lGo=r(Q5t,"BloomForSequenceClassification"),Q5t.forEach(t),iGo=r(RRe," (BLOOM model)"),RRe.forEach(t),dGo=i(j),U2=n(j,"LI",{});var PRe=s(U2);Ype=n(PRe,"STRONG",{});var W5t=s(Ype);cGo=r(W5t,"camembert"),W5t.forEach(t),fGo=r(PRe," \u2014 "),KV=n(PRe,"A",{href:!0});var H5t=s(KV);mGo=r(H5t,"CamembertForSequenceClassification"),H5t.forEach(t),gGo=r(PRe," (CamemBERT model)"),PRe.forEach(t),hGo=i(j),J2=n(j,"LI",{});var BRe=s(J2);Kpe=n(BRe,"STRONG",{});var U5t=s(Kpe);pGo=r(U5t,"canine"),U5t.forEach(t),_Go=r(BRe," \u2014 "),ZV=n(BRe,"A",{href:!0});var J5t=s(ZV);uGo=r(J5t,"CanineForSequenceClassification"),J5t.forEach(t),bGo=r(BRe," (CANINE model)"),BRe.forEach(t),vGo=i(j),Y2=n(j,"LI",{});var NRe=s(Y2);Zpe=n(NRe,"STRONG",{});var Y5t=s(Zpe);FGo=r(Y5t,"convbert"),Y5t.forEach(t),TGo=r(NRe," \u2014 "),eX=n(NRe,"A",{href:!0});var K5t=s(eX);MGo=r(K5t,"ConvBertForSequenceClassification"),K5t.forEach(t),EGo=r(NRe," (ConvBERT model)"),NRe.forEach(t),CGo=i(j),K2=n(j,"LI",{});var IRe=s(K2);e_e=n(IRe,"STRONG",{});var Z5t=s(e_e);wGo=r(Z5t,"ctrl"),Z5t.forEach(t),AGo=r(IRe," \u2014 "),oX=n(IRe,"A",{href:!0});var eFt=s(oX);LGo=r(eFt,"CTRLForSequenceClassification"),eFt.forEach(t),yGo=r(IRe," (CTRL model)"),IRe.forEach(t),xGo=i(j),Z2=n(j,"LI",{});var qRe=s(Z2);o_e=n(qRe,"STRONG",{});var oFt=s(o_e);$Go=r(oFt,"data2vec-text"),oFt.forEach(t),kGo=r(qRe," \u2014 "),rX=n(qRe,"A",{href:!0});var rFt=s(rX);SGo=r(rFt,"Data2VecTextForSequenceClassification"),rFt.forEach(t),RGo=r(qRe," (Data2VecText model)"),qRe.forEach(t),PGo=i(j),eb=n(j,"LI",{});var jRe=s(eb);r_e=n(jRe,"STRONG",{});var tFt=s(r_e);BGo=r(tFt,"deberta"),tFt.forEach(t),NGo=r(jRe," \u2014 "),tX=n(jRe,"A",{href:!0});var aFt=s(tX);IGo=r(aFt,"DebertaForSequenceClassification"),aFt.forEach(t),qGo=r(jRe," (DeBERTa model)"),jRe.forEach(t),jGo=i(j),ob=n(j,"LI",{});var DRe=s(ob);t_e=n(DRe,"STRONG",{});var nFt=s(t_e);DGo=r(nFt,"deberta-v2"),nFt.forEach(t),GGo=r(DRe," \u2014 "),aX=n(DRe,"A",{href:!0});var sFt=s(aX);OGo=r(sFt,"DebertaV2ForSequenceClassification"),sFt.forEach(t),VGo=r(DRe," (DeBERTa-v2 model)"),DRe.forEach(t),XGo=i(j),rb=n(j,"LI",{});var GRe=s(rb);a_e=n(GRe,"STRONG",{});var lFt=s(a_e);zGo=r(lFt,"distilbert"),lFt.forEach(t),QGo=r(GRe," \u2014 "),nX=n(GRe,"A",{href:!0});var iFt=s(nX);WGo=r(iFt,"DistilBertForSequenceClassification"),iFt.forEach(t),HGo=r(GRe," (DistilBERT model)"),GRe.forEach(t),UGo=i(j),tb=n(j,"LI",{});var ORe=s(tb);n_e=n(ORe,"STRONG",{});var dFt=s(n_e);JGo=r(dFt,"electra"),dFt.forEach(t),YGo=r(ORe," \u2014 "),sX=n(ORe,"A",{href:!0});var cFt=s(sX);KGo=r(cFt,"ElectraForSequenceClassification"),cFt.forEach(t),ZGo=r(ORe," (ELECTRA model)"),ORe.forEach(t),eOo=i(j),ab=n(j,"LI",{});var VRe=s(ab);s_e=n(VRe,"STRONG",{});var fFt=s(s_e);oOo=r(fFt,"flaubert"),fFt.forEach(t),rOo=r(VRe," \u2014 "),lX=n(VRe,"A",{href:!0});var mFt=s(lX);tOo=r(mFt,"FlaubertForSequenceClassification"),mFt.forEach(t),aOo=r(VRe," (FlauBERT model)"),VRe.forEach(t),nOo=i(j),nb=n(j,"LI",{});var XRe=s(nb);l_e=n(XRe,"STRONG",{});var gFt=s(l_e);sOo=r(gFt,"fnet"),gFt.forEach(t),lOo=r(XRe," \u2014 "),iX=n(XRe,"A",{href:!0});var hFt=s(iX);iOo=r(hFt,"FNetForSequenceClassification"),hFt.forEach(t),dOo=r(XRe," (FNet model)"),XRe.forEach(t),cOo=i(j),sb=n(j,"LI",{});var zRe=s(sb);i_e=n(zRe,"STRONG",{});var pFt=s(i_e);fOo=r(pFt,"funnel"),pFt.forEach(t),mOo=r(zRe," \u2014 "),dX=n(zRe,"A",{href:!0});var _Ft=s(dX);gOo=r(_Ft,"FunnelForSequenceClassification"),_Ft.forEach(t),hOo=r(zRe," (Funnel Transformer model)"),zRe.forEach(t),pOo=i(j),lb=n(j,"LI",{});var QRe=s(lb);d_e=n(QRe,"STRONG",{});var uFt=s(d_e);_Oo=r(uFt,"gpt2"),uFt.forEach(t),uOo=r(QRe," \u2014 "),cX=n(QRe,"A",{href:!0});var bFt=s(cX);bOo=r(bFt,"GPT2ForSequenceClassification"),bFt.forEach(t),vOo=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),FOo=i(j),ib=n(j,"LI",{});var WRe=s(ib);c_e=n(WRe,"STRONG",{});var vFt=s(c_e);TOo=r(vFt,"gpt_neo"),vFt.forEach(t),MOo=r(WRe," \u2014 "),fX=n(WRe,"A",{href:!0});var FFt=s(fX);EOo=r(FFt,"GPTNeoForSequenceClassification"),FFt.forEach(t),COo=r(WRe," (GPT Neo model)"),WRe.forEach(t),wOo=i(j),db=n(j,"LI",{});var HRe=s(db);f_e=n(HRe,"STRONG",{});var TFt=s(f_e);AOo=r(TFt,"gptj"),TFt.forEach(t),LOo=r(HRe," \u2014 "),mX=n(HRe,"A",{href:!0});var MFt=s(mX);yOo=r(MFt,"GPTJForSequenceClassification"),MFt.forEach(t),xOo=r(HRe," (GPT-J model)"),HRe.forEach(t),$Oo=i(j),cb=n(j,"LI",{});var URe=s(cb);m_e=n(URe,"STRONG",{});var EFt=s(m_e);kOo=r(EFt,"ibert"),EFt.forEach(t),SOo=r(URe," \u2014 "),gX=n(URe,"A",{href:!0});var CFt=s(gX);ROo=r(CFt,"IBertForSequenceClassification"),CFt.forEach(t),POo=r(URe," (I-BERT model)"),URe.forEach(t),BOo=i(j),fb=n(j,"LI",{});var JRe=s(fb);g_e=n(JRe,"STRONG",{});var wFt=s(g_e);NOo=r(wFt,"layoutlm"),wFt.forEach(t),IOo=r(JRe," \u2014 "),hX=n(JRe,"A",{href:!0});var AFt=s(hX);qOo=r(AFt,"LayoutLMForSequenceClassification"),AFt.forEach(t),jOo=r(JRe," (LayoutLM model)"),JRe.forEach(t),DOo=i(j),mb=n(j,"LI",{});var YRe=s(mb);h_e=n(YRe,"STRONG",{});var LFt=s(h_e);GOo=r(LFt,"layoutlmv2"),LFt.forEach(t),OOo=r(YRe," \u2014 "),pX=n(YRe,"A",{href:!0});var yFt=s(pX);VOo=r(yFt,"LayoutLMv2ForSequenceClassification"),yFt.forEach(t),XOo=r(YRe," (LayoutLMv2 model)"),YRe.forEach(t),zOo=i(j),gb=n(j,"LI",{});var KRe=s(gb);p_e=n(KRe,"STRONG",{});var xFt=s(p_e);QOo=r(xFt,"layoutlmv3"),xFt.forEach(t),WOo=r(KRe," \u2014 "),_X=n(KRe,"A",{href:!0});var $Ft=s(_X);HOo=r($Ft,"LayoutLMv3ForSequenceClassification"),$Ft.forEach(t),UOo=r(KRe," (LayoutLMv3 model)"),KRe.forEach(t),JOo=i(j),hb=n(j,"LI",{});var ZRe=s(hb);__e=n(ZRe,"STRONG",{});var kFt=s(__e);YOo=r(kFt,"led"),kFt.forEach(t),KOo=r(ZRe," \u2014 "),uX=n(ZRe,"A",{href:!0});var SFt=s(uX);ZOo=r(SFt,"LEDForSequenceClassification"),SFt.forEach(t),eVo=r(ZRe," (LED model)"),ZRe.forEach(t),oVo=i(j),pb=n(j,"LI",{});var ePe=s(pb);u_e=n(ePe,"STRONG",{});var RFt=s(u_e);rVo=r(RFt,"longformer"),RFt.forEach(t),tVo=r(ePe," \u2014 "),bX=n(ePe,"A",{href:!0});var PFt=s(bX);aVo=r(PFt,"LongformerForSequenceClassification"),PFt.forEach(t),nVo=r(ePe," (Longformer model)"),ePe.forEach(t),sVo=i(j),_b=n(j,"LI",{});var oPe=s(_b);b_e=n(oPe,"STRONG",{});var BFt=s(b_e);lVo=r(BFt,"mbart"),BFt.forEach(t),iVo=r(oPe," \u2014 "),vX=n(oPe,"A",{href:!0});var NFt=s(vX);dVo=r(NFt,"MBartForSequenceClassification"),NFt.forEach(t),cVo=r(oPe," (mBART model)"),oPe.forEach(t),fVo=i(j),ub=n(j,"LI",{});var rPe=s(ub);v_e=n(rPe,"STRONG",{});var IFt=s(v_e);mVo=r(IFt,"megatron-bert"),IFt.forEach(t),gVo=r(rPe," \u2014 "),FX=n(rPe,"A",{href:!0});var qFt=s(FX);hVo=r(qFt,"MegatronBertForSequenceClassification"),qFt.forEach(t),pVo=r(rPe," (Megatron-BERT model)"),rPe.forEach(t),_Vo=i(j),bb=n(j,"LI",{});var tPe=s(bb);F_e=n(tPe,"STRONG",{});var jFt=s(F_e);uVo=r(jFt,"mobilebert"),jFt.forEach(t),bVo=r(tPe," \u2014 "),TX=n(tPe,"A",{href:!0});var DFt=s(TX);vVo=r(DFt,"MobileBertForSequenceClassification"),DFt.forEach(t),FVo=r(tPe," (MobileBERT model)"),tPe.forEach(t),TVo=i(j),vb=n(j,"LI",{});var aPe=s(vb);T_e=n(aPe,"STRONG",{});var GFt=s(T_e);MVo=r(GFt,"mpnet"),GFt.forEach(t),EVo=r(aPe," \u2014 "),MX=n(aPe,"A",{href:!0});var OFt=s(MX);CVo=r(OFt,"MPNetForSequenceClassification"),OFt.forEach(t),wVo=r(aPe," (MPNet model)"),aPe.forEach(t),AVo=i(j),Fb=n(j,"LI",{});var nPe=s(Fb);M_e=n(nPe,"STRONG",{});var VFt=s(M_e);LVo=r(VFt,"mvp"),VFt.forEach(t),yVo=r(nPe," \u2014 "),EX=n(nPe,"A",{href:!0});var XFt=s(EX);xVo=r(XFt,"MvpForSequenceClassification"),XFt.forEach(t),$Vo=r(nPe," (MVP model)"),nPe.forEach(t),kVo=i(j),Tb=n(j,"LI",{});var sPe=s(Tb);E_e=n(sPe,"STRONG",{});var zFt=s(E_e);SVo=r(zFt,"nezha"),zFt.forEach(t),RVo=r(sPe," \u2014 "),CX=n(sPe,"A",{href:!0});var QFt=s(CX);PVo=r(QFt,"NezhaForSequenceClassification"),QFt.forEach(t),BVo=r(sPe," (Nezha model)"),sPe.forEach(t),NVo=i(j),Mb=n(j,"LI",{});var lPe=s(Mb);C_e=n(lPe,"STRONG",{});var WFt=s(C_e);IVo=r(WFt,"nystromformer"),WFt.forEach(t),qVo=r(lPe," \u2014 "),wX=n(lPe,"A",{href:!0});var HFt=s(wX);jVo=r(HFt,"NystromformerForSequenceClassification"),HFt.forEach(t),DVo=r(lPe," (Nystr\xF6mformer model)"),lPe.forEach(t),GVo=i(j),Eb=n(j,"LI",{});var iPe=s(Eb);w_e=n(iPe,"STRONG",{});var UFt=s(w_e);OVo=r(UFt,"openai-gpt"),UFt.forEach(t),VVo=r(iPe," \u2014 "),AX=n(iPe,"A",{href:!0});var JFt=s(AX);XVo=r(JFt,"OpenAIGPTForSequenceClassification"),JFt.forEach(t),zVo=r(iPe," (OpenAI GPT model)"),iPe.forEach(t),QVo=i(j),Cb=n(j,"LI",{});var dPe=s(Cb);A_e=n(dPe,"STRONG",{});var YFt=s(A_e);WVo=r(YFt,"perceiver"),YFt.forEach(t),HVo=r(dPe," \u2014 "),LX=n(dPe,"A",{href:!0});var KFt=s(LX);UVo=r(KFt,"PerceiverForSequenceClassification"),KFt.forEach(t),JVo=r(dPe," (Perceiver model)"),dPe.forEach(t),YVo=i(j),wb=n(j,"LI",{});var cPe=s(wb);L_e=n(cPe,"STRONG",{});var ZFt=s(L_e);KVo=r(ZFt,"plbart"),ZFt.forEach(t),ZVo=r(cPe," \u2014 "),yX=n(cPe,"A",{href:!0});var e6t=s(yX);eXo=r(e6t,"PLBartForSequenceClassification"),e6t.forEach(t),oXo=r(cPe," (PLBart model)"),cPe.forEach(t),rXo=i(j),Ab=n(j,"LI",{});var fPe=s(Ab);y_e=n(fPe,"STRONG",{});var o6t=s(y_e);tXo=r(o6t,"qdqbert"),o6t.forEach(t),aXo=r(fPe," \u2014 "),xX=n(fPe,"A",{href:!0});var r6t=s(xX);nXo=r(r6t,"QDQBertForSequenceClassification"),r6t.forEach(t),sXo=r(fPe," (QDQBert model)"),fPe.forEach(t),lXo=i(j),Lb=n(j,"LI",{});var mPe=s(Lb);x_e=n(mPe,"STRONG",{});var t6t=s(x_e);iXo=r(t6t,"reformer"),t6t.forEach(t),dXo=r(mPe," \u2014 "),$X=n(mPe,"A",{href:!0});var a6t=s($X);cXo=r(a6t,"ReformerForSequenceClassification"),a6t.forEach(t),fXo=r(mPe," (Reformer model)"),mPe.forEach(t),mXo=i(j),yb=n(j,"LI",{});var gPe=s(yb);$_e=n(gPe,"STRONG",{});var n6t=s($_e);gXo=r(n6t,"rembert"),n6t.forEach(t),hXo=r(gPe," \u2014 "),kX=n(gPe,"A",{href:!0});var s6t=s(kX);pXo=r(s6t,"RemBertForSequenceClassification"),s6t.forEach(t),_Xo=r(gPe," (RemBERT model)"),gPe.forEach(t),uXo=i(j),xb=n(j,"LI",{});var hPe=s(xb);k_e=n(hPe,"STRONG",{});var l6t=s(k_e);bXo=r(l6t,"roberta"),l6t.forEach(t),vXo=r(hPe," \u2014 "),SX=n(hPe,"A",{href:!0});var i6t=s(SX);FXo=r(i6t,"RobertaForSequenceClassification"),i6t.forEach(t),TXo=r(hPe," (RoBERTa model)"),hPe.forEach(t),MXo=i(j),$b=n(j,"LI",{});var pPe=s($b);S_e=n(pPe,"STRONG",{});var d6t=s(S_e);EXo=r(d6t,"roformer"),d6t.forEach(t),CXo=r(pPe," \u2014 "),RX=n(pPe,"A",{href:!0});var c6t=s(RX);wXo=r(c6t,"RoFormerForSequenceClassification"),c6t.forEach(t),AXo=r(pPe," (RoFormer model)"),pPe.forEach(t),LXo=i(j),kb=n(j,"LI",{});var _Pe=s(kb);R_e=n(_Pe,"STRONG",{});var f6t=s(R_e);yXo=r(f6t,"squeezebert"),f6t.forEach(t),xXo=r(_Pe," \u2014 "),PX=n(_Pe,"A",{href:!0});var m6t=s(PX);$Xo=r(m6t,"SqueezeBertForSequenceClassification"),m6t.forEach(t),kXo=r(_Pe," (SqueezeBERT model)"),_Pe.forEach(t),SXo=i(j),Sb=n(j,"LI",{});var uPe=s(Sb);P_e=n(uPe,"STRONG",{});var g6t=s(P_e);RXo=r(g6t,"tapas"),g6t.forEach(t),PXo=r(uPe," \u2014 "),BX=n(uPe,"A",{href:!0});var h6t=s(BX);BXo=r(h6t,"TapasForSequenceClassification"),h6t.forEach(t),NXo=r(uPe," (TAPAS model)"),uPe.forEach(t),IXo=i(j),Rb=n(j,"LI",{});var bPe=s(Rb);B_e=n(bPe,"STRONG",{});var p6t=s(B_e);qXo=r(p6t,"transfo-xl"),p6t.forEach(t),jXo=r(bPe," \u2014 "),NX=n(bPe,"A",{href:!0});var _6t=s(NX);DXo=r(_6t,"TransfoXLForSequenceClassification"),_6t.forEach(t),GXo=r(bPe," (Transformer-XL model)"),bPe.forEach(t),OXo=i(j),Pb=n(j,"LI",{});var vPe=s(Pb);N_e=n(vPe,"STRONG",{});var u6t=s(N_e);VXo=r(u6t,"xlm"),u6t.forEach(t),XXo=r(vPe," \u2014 "),IX=n(vPe,"A",{href:!0});var b6t=s(IX);zXo=r(b6t,"XLMForSequenceClassification"),b6t.forEach(t),QXo=r(vPe," (XLM model)"),vPe.forEach(t),WXo=i(j),Bb=n(j,"LI",{});var FPe=s(Bb);I_e=n(FPe,"STRONG",{});var v6t=s(I_e);HXo=r(v6t,"xlm-roberta"),v6t.forEach(t),UXo=r(FPe," \u2014 "),qX=n(FPe,"A",{href:!0});var F6t=s(qX);JXo=r(F6t,"XLMRobertaForSequenceClassification"),F6t.forEach(t),YXo=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),KXo=i(j),Nb=n(j,"LI",{});var TPe=s(Nb);q_e=n(TPe,"STRONG",{});var T6t=s(q_e);ZXo=r(T6t,"xlm-roberta-xl"),T6t.forEach(t),ezo=r(TPe," \u2014 "),jX=n(TPe,"A",{href:!0});var M6t=s(jX);ozo=r(M6t,"XLMRobertaXLForSequenceClassification"),M6t.forEach(t),rzo=r(TPe," (XLM-RoBERTa-XL model)"),TPe.forEach(t),tzo=i(j),Ib=n(j,"LI",{});var MPe=s(Ib);j_e=n(MPe,"STRONG",{});var E6t=s(j_e);azo=r(E6t,"xlnet"),E6t.forEach(t),nzo=r(MPe," \u2014 "),DX=n(MPe,"A",{href:!0});var C6t=s(DX);szo=r(C6t,"XLNetForSequenceClassification"),C6t.forEach(t),lzo=r(MPe," (XLNet model)"),MPe.forEach(t),izo=i(j),qb=n(j,"LI",{});var EPe=s(qb);D_e=n(EPe,"STRONG",{});var w6t=s(D_e);dzo=r(w6t,"yoso"),w6t.forEach(t),czo=r(EPe," \u2014 "),GX=n(EPe,"A",{href:!0});var A6t=s(GX);fzo=r(A6t,"YosoForSequenceClassification"),A6t.forEach(t),mzo=r(EPe," (YOSO model)"),EPe.forEach(t),j.forEach(t),gzo=i(fa),jb=n(fa,"P",{});var CPe=s(jb);hzo=r(CPe,"The model is set in evaluation mode by default using "),G_e=n(CPe,"CODE",{});var L6t=s(G_e);pzo=r(L6t,"model.eval()"),L6t.forEach(t),_zo=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(CPe,"CODE",{});var y6t=s(O_e);uzo=r(y6t,"model.train()"),y6t.forEach(t),CPe.forEach(t),bzo=i(fa),T(Db.$$.fragment,fa),fa.forEach(t),sl.forEach(t),TXe=i(f),ad=n(f,"H2",{class:!0});var LQe=s(ad);Gb=n(LQe,"A",{id:!0,class:!0,href:!0});var x6t=s(Gb);V_e=n(x6t,"SPAN",{});var $6t=s(V_e);T(s8.$$.fragment,$6t),$6t.forEach(t),x6t.forEach(t),vzo=i(LQe),X_e=n(LQe,"SPAN",{});var k6t=s(X_e);Fzo=r(k6t,"AutoModelForMultipleChoice"),k6t.forEach(t),LQe.forEach(t),MXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(l8.$$.fragment,ll),Tzo=i(ll),nd=n(ll,"P",{});var Gre=s(nd);Mzo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OX=n(Gre,"A",{href:!0});var S6t=s(OX);Ezo=r(S6t,"from_pretrained()"),S6t.forEach(t),Czo=r(Gre," class method or the "),VX=n(Gre,"A",{href:!0});var R6t=s(VX);wzo=r(R6t,"from_config()"),R6t.forEach(t),Azo=r(Gre,` class
method.`),Gre.forEach(t),Lzo=i(ll),i8=n(ll,"P",{});var yQe=s(i8);yzo=r(yQe,"This class cannot be instantiated directly using "),z_e=n(yQe,"CODE",{});var P6t=s(z_e);xzo=r(P6t,"__init__()"),P6t.forEach(t),$zo=r(yQe," (throws an error)."),yQe.forEach(t),kzo=i(ll),gt=n(ll,"DIV",{class:!0});var F7=s(gt);T(d8.$$.fragment,F7),Szo=i(F7),Q_e=n(F7,"P",{});var B6t=s(Q_e);Rzo=r(B6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B6t.forEach(t),Pzo=i(F7),sd=n(F7,"P",{});var Ore=s(sd);Bzo=r(Ore,`Note:
Loading a model from its configuration file does `),W_e=n(Ore,"STRONG",{});var N6t=s(W_e);Nzo=r(N6t,"not"),N6t.forEach(t),Izo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(Ore,"A",{href:!0});var I6t=s(XX);qzo=r(I6t,"from_pretrained()"),I6t.forEach(t),jzo=r(Ore," to load the model weights."),Ore.forEach(t),Dzo=i(F7),T(Ob.$$.fragment,F7),F7.forEach(t),Gzo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(c8.$$.fragment,ma),Ozo=i(ma),H_e=n(ma,"P",{});var q6t=s(H_e);Vzo=r(q6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),q6t.forEach(t),Xzo=i(ma),Oa=n(ma,"P",{});var T7=s(Oa);zzo=r(T7,"The model class to instantiate is selected based on the "),U_e=n(T7,"CODE",{});var j6t=s(U_e);Qzo=r(j6t,"model_type"),j6t.forEach(t),Wzo=r(T7,` property of the config object (either
passed as an argument or loaded from `),J_e=n(T7,"CODE",{});var D6t=s(J_e);Hzo=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),Uzo=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(T7,"CODE",{});var G6t=s(Y_e);Jzo=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),Yzo=r(T7,":"),T7.forEach(t),Kzo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Vb=n(ee,"LI",{});var wPe=s(Vb);K_e=n(wPe,"STRONG",{});var O6t=s(K_e);Zzo=r(O6t,"albert"),O6t.forEach(t),eQo=r(wPe," \u2014 "),zX=n(wPe,"A",{href:!0});var V6t=s(zX);oQo=r(V6t,"AlbertForMultipleChoice"),V6t.forEach(t),rQo=r(wPe," (ALBERT model)"),wPe.forEach(t),tQo=i(ee),Xb=n(ee,"LI",{});var APe=s(Xb);Z_e=n(APe,"STRONG",{});var X6t=s(Z_e);aQo=r(X6t,"bert"),X6t.forEach(t),nQo=r(APe," \u2014 "),QX=n(APe,"A",{href:!0});var z6t=s(QX);sQo=r(z6t,"BertForMultipleChoice"),z6t.forEach(t),lQo=r(APe," (BERT model)"),APe.forEach(t),iQo=i(ee),zb=n(ee,"LI",{});var LPe=s(zb);eue=n(LPe,"STRONG",{});var Q6t=s(eue);dQo=r(Q6t,"big_bird"),Q6t.forEach(t),cQo=r(LPe," \u2014 "),WX=n(LPe,"A",{href:!0});var W6t=s(WX);fQo=r(W6t,"BigBirdForMultipleChoice"),W6t.forEach(t),mQo=r(LPe," (BigBird model)"),LPe.forEach(t),gQo=i(ee),Qb=n(ee,"LI",{});var yPe=s(Qb);oue=n(yPe,"STRONG",{});var H6t=s(oue);hQo=r(H6t,"camembert"),H6t.forEach(t),pQo=r(yPe," \u2014 "),HX=n(yPe,"A",{href:!0});var U6t=s(HX);_Qo=r(U6t,"CamembertForMultipleChoice"),U6t.forEach(t),uQo=r(yPe," (CamemBERT model)"),yPe.forEach(t),bQo=i(ee),Wb=n(ee,"LI",{});var xPe=s(Wb);rue=n(xPe,"STRONG",{});var J6t=s(rue);vQo=r(J6t,"canine"),J6t.forEach(t),FQo=r(xPe," \u2014 "),UX=n(xPe,"A",{href:!0});var Y6t=s(UX);TQo=r(Y6t,"CanineForMultipleChoice"),Y6t.forEach(t),MQo=r(xPe," (CANINE model)"),xPe.forEach(t),EQo=i(ee),Hb=n(ee,"LI",{});var $Pe=s(Hb);tue=n($Pe,"STRONG",{});var K6t=s(tue);CQo=r(K6t,"convbert"),K6t.forEach(t),wQo=r($Pe," \u2014 "),JX=n($Pe,"A",{href:!0});var Z6t=s(JX);AQo=r(Z6t,"ConvBertForMultipleChoice"),Z6t.forEach(t),LQo=r($Pe," (ConvBERT model)"),$Pe.forEach(t),yQo=i(ee),Ub=n(ee,"LI",{});var kPe=s(Ub);aue=n(kPe,"STRONG",{});var eTt=s(aue);xQo=r(eTt,"data2vec-text"),eTt.forEach(t),$Qo=r(kPe," \u2014 "),YX=n(kPe,"A",{href:!0});var oTt=s(YX);kQo=r(oTt,"Data2VecTextForMultipleChoice"),oTt.forEach(t),SQo=r(kPe," (Data2VecText model)"),kPe.forEach(t),RQo=i(ee),Jb=n(ee,"LI",{});var SPe=s(Jb);nue=n(SPe,"STRONG",{});var rTt=s(nue);PQo=r(rTt,"deberta-v2"),rTt.forEach(t),BQo=r(SPe," \u2014 "),KX=n(SPe,"A",{href:!0});var tTt=s(KX);NQo=r(tTt,"DebertaV2ForMultipleChoice"),tTt.forEach(t),IQo=r(SPe," (DeBERTa-v2 model)"),SPe.forEach(t),qQo=i(ee),Yb=n(ee,"LI",{});var RPe=s(Yb);sue=n(RPe,"STRONG",{});var aTt=s(sue);jQo=r(aTt,"distilbert"),aTt.forEach(t),DQo=r(RPe," \u2014 "),ZX=n(RPe,"A",{href:!0});var nTt=s(ZX);GQo=r(nTt,"DistilBertForMultipleChoice"),nTt.forEach(t),OQo=r(RPe," (DistilBERT model)"),RPe.forEach(t),VQo=i(ee),Kb=n(ee,"LI",{});var PPe=s(Kb);lue=n(PPe,"STRONG",{});var sTt=s(lue);XQo=r(sTt,"electra"),sTt.forEach(t),zQo=r(PPe," \u2014 "),ez=n(PPe,"A",{href:!0});var lTt=s(ez);QQo=r(lTt,"ElectraForMultipleChoice"),lTt.forEach(t),WQo=r(PPe," (ELECTRA model)"),PPe.forEach(t),HQo=i(ee),Zb=n(ee,"LI",{});var BPe=s(Zb);iue=n(BPe,"STRONG",{});var iTt=s(iue);UQo=r(iTt,"flaubert"),iTt.forEach(t),JQo=r(BPe," \u2014 "),oz=n(BPe,"A",{href:!0});var dTt=s(oz);YQo=r(dTt,"FlaubertForMultipleChoice"),dTt.forEach(t),KQo=r(BPe," (FlauBERT model)"),BPe.forEach(t),ZQo=i(ee),ev=n(ee,"LI",{});var NPe=s(ev);due=n(NPe,"STRONG",{});var cTt=s(due);eWo=r(cTt,"fnet"),cTt.forEach(t),oWo=r(NPe," \u2014 "),rz=n(NPe,"A",{href:!0});var fTt=s(rz);rWo=r(fTt,"FNetForMultipleChoice"),fTt.forEach(t),tWo=r(NPe," (FNet model)"),NPe.forEach(t),aWo=i(ee),ov=n(ee,"LI",{});var IPe=s(ov);cue=n(IPe,"STRONG",{});var mTt=s(cue);nWo=r(mTt,"funnel"),mTt.forEach(t),sWo=r(IPe," \u2014 "),tz=n(IPe,"A",{href:!0});var gTt=s(tz);lWo=r(gTt,"FunnelForMultipleChoice"),gTt.forEach(t),iWo=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),dWo=i(ee),rv=n(ee,"LI",{});var qPe=s(rv);fue=n(qPe,"STRONG",{});var hTt=s(fue);cWo=r(hTt,"ibert"),hTt.forEach(t),fWo=r(qPe," \u2014 "),az=n(qPe,"A",{href:!0});var pTt=s(az);mWo=r(pTt,"IBertForMultipleChoice"),pTt.forEach(t),gWo=r(qPe," (I-BERT model)"),qPe.forEach(t),hWo=i(ee),tv=n(ee,"LI",{});var jPe=s(tv);mue=n(jPe,"STRONG",{});var _Tt=s(mue);pWo=r(_Tt,"longformer"),_Tt.forEach(t),_Wo=r(jPe," \u2014 "),nz=n(jPe,"A",{href:!0});var uTt=s(nz);uWo=r(uTt,"LongformerForMultipleChoice"),uTt.forEach(t),bWo=r(jPe," (Longformer model)"),jPe.forEach(t),vWo=i(ee),av=n(ee,"LI",{});var DPe=s(av);gue=n(DPe,"STRONG",{});var bTt=s(gue);FWo=r(bTt,"megatron-bert"),bTt.forEach(t),TWo=r(DPe," \u2014 "),sz=n(DPe,"A",{href:!0});var vTt=s(sz);MWo=r(vTt,"MegatronBertForMultipleChoice"),vTt.forEach(t),EWo=r(DPe," (Megatron-BERT model)"),DPe.forEach(t),CWo=i(ee),nv=n(ee,"LI",{});var GPe=s(nv);hue=n(GPe,"STRONG",{});var FTt=s(hue);wWo=r(FTt,"mobilebert"),FTt.forEach(t),AWo=r(GPe," \u2014 "),lz=n(GPe,"A",{href:!0});var TTt=s(lz);LWo=r(TTt,"MobileBertForMultipleChoice"),TTt.forEach(t),yWo=r(GPe," (MobileBERT model)"),GPe.forEach(t),xWo=i(ee),sv=n(ee,"LI",{});var OPe=s(sv);pue=n(OPe,"STRONG",{});var MTt=s(pue);$Wo=r(MTt,"mpnet"),MTt.forEach(t),kWo=r(OPe," \u2014 "),iz=n(OPe,"A",{href:!0});var ETt=s(iz);SWo=r(ETt,"MPNetForMultipleChoice"),ETt.forEach(t),RWo=r(OPe," (MPNet model)"),OPe.forEach(t),PWo=i(ee),lv=n(ee,"LI",{});var VPe=s(lv);_ue=n(VPe,"STRONG",{});var CTt=s(_ue);BWo=r(CTt,"nezha"),CTt.forEach(t),NWo=r(VPe," \u2014 "),dz=n(VPe,"A",{href:!0});var wTt=s(dz);IWo=r(wTt,"NezhaForMultipleChoice"),wTt.forEach(t),qWo=r(VPe," (Nezha model)"),VPe.forEach(t),jWo=i(ee),iv=n(ee,"LI",{});var XPe=s(iv);uue=n(XPe,"STRONG",{});var ATt=s(uue);DWo=r(ATt,"nystromformer"),ATt.forEach(t),GWo=r(XPe," \u2014 "),cz=n(XPe,"A",{href:!0});var LTt=s(cz);OWo=r(LTt,"NystromformerForMultipleChoice"),LTt.forEach(t),VWo=r(XPe," (Nystr\xF6mformer model)"),XPe.forEach(t),XWo=i(ee),dv=n(ee,"LI",{});var zPe=s(dv);bue=n(zPe,"STRONG",{});var yTt=s(bue);zWo=r(yTt,"qdqbert"),yTt.forEach(t),QWo=r(zPe," \u2014 "),fz=n(zPe,"A",{href:!0});var xTt=s(fz);WWo=r(xTt,"QDQBertForMultipleChoice"),xTt.forEach(t),HWo=r(zPe," (QDQBert model)"),zPe.forEach(t),UWo=i(ee),cv=n(ee,"LI",{});var QPe=s(cv);vue=n(QPe,"STRONG",{});var $Tt=s(vue);JWo=r($Tt,"rembert"),$Tt.forEach(t),YWo=r(QPe," \u2014 "),mz=n(QPe,"A",{href:!0});var kTt=s(mz);KWo=r(kTt,"RemBertForMultipleChoice"),kTt.forEach(t),ZWo=r(QPe," (RemBERT model)"),QPe.forEach(t),eHo=i(ee),fv=n(ee,"LI",{});var WPe=s(fv);Fue=n(WPe,"STRONG",{});var STt=s(Fue);oHo=r(STt,"roberta"),STt.forEach(t),rHo=r(WPe," \u2014 "),gz=n(WPe,"A",{href:!0});var RTt=s(gz);tHo=r(RTt,"RobertaForMultipleChoice"),RTt.forEach(t),aHo=r(WPe," (RoBERTa model)"),WPe.forEach(t),nHo=i(ee),mv=n(ee,"LI",{});var HPe=s(mv);Tue=n(HPe,"STRONG",{});var PTt=s(Tue);sHo=r(PTt,"roformer"),PTt.forEach(t),lHo=r(HPe," \u2014 "),hz=n(HPe,"A",{href:!0});var BTt=s(hz);iHo=r(BTt,"RoFormerForMultipleChoice"),BTt.forEach(t),dHo=r(HPe," (RoFormer model)"),HPe.forEach(t),cHo=i(ee),gv=n(ee,"LI",{});var UPe=s(gv);Mue=n(UPe,"STRONG",{});var NTt=s(Mue);fHo=r(NTt,"squeezebert"),NTt.forEach(t),mHo=r(UPe," \u2014 "),pz=n(UPe,"A",{href:!0});var ITt=s(pz);gHo=r(ITt,"SqueezeBertForMultipleChoice"),ITt.forEach(t),hHo=r(UPe," (SqueezeBERT model)"),UPe.forEach(t),pHo=i(ee),hv=n(ee,"LI",{});var JPe=s(hv);Eue=n(JPe,"STRONG",{});var qTt=s(Eue);_Ho=r(qTt,"xlm"),qTt.forEach(t),uHo=r(JPe," \u2014 "),_z=n(JPe,"A",{href:!0});var jTt=s(_z);bHo=r(jTt,"XLMForMultipleChoice"),jTt.forEach(t),vHo=r(JPe," (XLM model)"),JPe.forEach(t),FHo=i(ee),pv=n(ee,"LI",{});var YPe=s(pv);Cue=n(YPe,"STRONG",{});var DTt=s(Cue);THo=r(DTt,"xlm-roberta"),DTt.forEach(t),MHo=r(YPe," \u2014 "),uz=n(YPe,"A",{href:!0});var GTt=s(uz);EHo=r(GTt,"XLMRobertaForMultipleChoice"),GTt.forEach(t),CHo=r(YPe," (XLM-RoBERTa model)"),YPe.forEach(t),wHo=i(ee),_v=n(ee,"LI",{});var KPe=s(_v);wue=n(KPe,"STRONG",{});var OTt=s(wue);AHo=r(OTt,"xlm-roberta-xl"),OTt.forEach(t),LHo=r(KPe," \u2014 "),bz=n(KPe,"A",{href:!0});var VTt=s(bz);yHo=r(VTt,"XLMRobertaXLForMultipleChoice"),VTt.forEach(t),xHo=r(KPe," (XLM-RoBERTa-XL model)"),KPe.forEach(t),$Ho=i(ee),uv=n(ee,"LI",{});var ZPe=s(uv);Aue=n(ZPe,"STRONG",{});var XTt=s(Aue);kHo=r(XTt,"xlnet"),XTt.forEach(t),SHo=r(ZPe," \u2014 "),vz=n(ZPe,"A",{href:!0});var zTt=s(vz);RHo=r(zTt,"XLNetForMultipleChoice"),zTt.forEach(t),PHo=r(ZPe," (XLNet model)"),ZPe.forEach(t),BHo=i(ee),bv=n(ee,"LI",{});var eBe=s(bv);Lue=n(eBe,"STRONG",{});var QTt=s(Lue);NHo=r(QTt,"yoso"),QTt.forEach(t),IHo=r(eBe," \u2014 "),Fz=n(eBe,"A",{href:!0});var WTt=s(Fz);qHo=r(WTt,"YosoForMultipleChoice"),WTt.forEach(t),jHo=r(eBe," (YOSO model)"),eBe.forEach(t),ee.forEach(t),DHo=i(ma),vv=n(ma,"P",{});var oBe=s(vv);GHo=r(oBe,"The model is set in evaluation mode by default using "),yue=n(oBe,"CODE",{});var HTt=s(yue);OHo=r(HTt,"model.eval()"),HTt.forEach(t),VHo=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(oBe,"CODE",{});var UTt=s(xue);XHo=r(UTt,"model.train()"),UTt.forEach(t),oBe.forEach(t),zHo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),EXe=i(f),ld=n(f,"H2",{class:!0});var xQe=s(ld);Tv=n(xQe,"A",{id:!0,class:!0,href:!0});var JTt=s(Tv);$ue=n(JTt,"SPAN",{});var YTt=s($ue);T(f8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),QHo=i(xQe),kue=n(xQe,"SPAN",{});var KTt=s(kue);WHo=r(KTt,"AutoModelForNextSentencePrediction"),KTt.forEach(t),xQe.forEach(t),CXe=i(f),No=n(f,"DIV",{class:!0});var il=s(No);T(m8.$$.fragment,il),HHo=i(il),id=n(il,"P",{});var Vre=s(id);UHo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tz=n(Vre,"A",{href:!0});var ZTt=s(Tz);JHo=r(ZTt,"from_pretrained()"),ZTt.forEach(t),YHo=r(Vre," class method or the "),Mz=n(Vre,"A",{href:!0});var eMt=s(Mz);KHo=r(eMt,"from_config()"),eMt.forEach(t),ZHo=r(Vre,` class
method.`),Vre.forEach(t),eUo=i(il),g8=n(il,"P",{});var $Qe=s(g8);oUo=r($Qe,"This class cannot be instantiated directly using "),Sue=n($Qe,"CODE",{});var oMt=s(Sue);rUo=r(oMt,"__init__()"),oMt.forEach(t),tUo=r($Qe," (throws an error)."),$Qe.forEach(t),aUo=i(il),ht=n(il,"DIV",{class:!0});var M7=s(ht);T(h8.$$.fragment,M7),nUo=i(M7),Rue=n(M7,"P",{});var rMt=s(Rue);sUo=r(rMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rMt.forEach(t),lUo=i(M7),dd=n(M7,"P",{});var Xre=s(dd);iUo=r(Xre,`Note:
Loading a model from its configuration file does `),Pue=n(Xre,"STRONG",{});var tMt=s(Pue);dUo=r(tMt,"not"),tMt.forEach(t),cUo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(Xre,"A",{href:!0});var aMt=s(Ez);fUo=r(aMt,"from_pretrained()"),aMt.forEach(t),mUo=r(Xre," to load the model weights."),Xre.forEach(t),gUo=i(M7),T(Mv.$$.fragment,M7),M7.forEach(t),hUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(p8.$$.fragment,ga),pUo=i(ga),Bue=n(ga,"P",{});var nMt=s(Bue);_Uo=r(nMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nMt.forEach(t),uUo=i(ga),Va=n(ga,"P",{});var E7=s(Va);bUo=r(E7,"The model class to instantiate is selected based on the "),Nue=n(E7,"CODE",{});var sMt=s(Nue);vUo=r(sMt,"model_type"),sMt.forEach(t),FUo=r(E7,` property of the config object (either
passed as an argument or loaded from `),Iue=n(E7,"CODE",{});var lMt=s(Iue);TUo=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),MUo=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),que=n(E7,"CODE",{});var iMt=s(que);EUo=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),CUo=r(E7,":"),E7.forEach(t),wUo=i(ga),Io=n(ga,"UL",{});var ha=s(Io);Ev=n(ha,"LI",{});var rBe=s(Ev);jue=n(rBe,"STRONG",{});var dMt=s(jue);AUo=r(dMt,"bert"),dMt.forEach(t),LUo=r(rBe," \u2014 "),Cz=n(rBe,"A",{href:!0});var cMt=s(Cz);yUo=r(cMt,"BertForNextSentencePrediction"),cMt.forEach(t),xUo=r(rBe," (BERT model)"),rBe.forEach(t),$Uo=i(ha),Cv=n(ha,"LI",{});var tBe=s(Cv);Due=n(tBe,"STRONG",{});var fMt=s(Due);kUo=r(fMt,"fnet"),fMt.forEach(t),SUo=r(tBe," \u2014 "),wz=n(tBe,"A",{href:!0});var mMt=s(wz);RUo=r(mMt,"FNetForNextSentencePrediction"),mMt.forEach(t),PUo=r(tBe," (FNet model)"),tBe.forEach(t),BUo=i(ha),wv=n(ha,"LI",{});var aBe=s(wv);Gue=n(aBe,"STRONG",{});var gMt=s(Gue);NUo=r(gMt,"megatron-bert"),gMt.forEach(t),IUo=r(aBe," \u2014 "),Az=n(aBe,"A",{href:!0});var hMt=s(Az);qUo=r(hMt,"MegatronBertForNextSentencePrediction"),hMt.forEach(t),jUo=r(aBe," (Megatron-BERT model)"),aBe.forEach(t),DUo=i(ha),Av=n(ha,"LI",{});var nBe=s(Av);Oue=n(nBe,"STRONG",{});var pMt=s(Oue);GUo=r(pMt,"mobilebert"),pMt.forEach(t),OUo=r(nBe," \u2014 "),Lz=n(nBe,"A",{href:!0});var _Mt=s(Lz);VUo=r(_Mt,"MobileBertForNextSentencePrediction"),_Mt.forEach(t),XUo=r(nBe," (MobileBERT model)"),nBe.forEach(t),zUo=i(ha),Lv=n(ha,"LI",{});var sBe=s(Lv);Vue=n(sBe,"STRONG",{});var uMt=s(Vue);QUo=r(uMt,"nezha"),uMt.forEach(t),WUo=r(sBe," \u2014 "),yz=n(sBe,"A",{href:!0});var bMt=s(yz);HUo=r(bMt,"NezhaForNextSentencePrediction"),bMt.forEach(t),UUo=r(sBe," (Nezha model)"),sBe.forEach(t),JUo=i(ha),yv=n(ha,"LI",{});var lBe=s(yv);Xue=n(lBe,"STRONG",{});var vMt=s(Xue);YUo=r(vMt,"qdqbert"),vMt.forEach(t),KUo=r(lBe," \u2014 "),xz=n(lBe,"A",{href:!0});var FMt=s(xz);ZUo=r(FMt,"QDQBertForNextSentencePrediction"),FMt.forEach(t),eJo=r(lBe," (QDQBert model)"),lBe.forEach(t),ha.forEach(t),oJo=i(ga),xv=n(ga,"P",{});var iBe=s(xv);rJo=r(iBe,"The model is set in evaluation mode by default using "),zue=n(iBe,"CODE",{});var TMt=s(zue);tJo=r(TMt,"model.eval()"),TMt.forEach(t),aJo=r(iBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(iBe,"CODE",{});var MMt=s(Que);nJo=r(MMt,"model.train()"),MMt.forEach(t),iBe.forEach(t),sJo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),il.forEach(t),wXe=i(f),cd=n(f,"H2",{class:!0});var kQe=s(cd);kv=n(kQe,"A",{id:!0,class:!0,href:!0});var EMt=s(kv);Wue=n(EMt,"SPAN",{});var CMt=s(Wue);T(_8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),lJo=i(kQe),Hue=n(kQe,"SPAN",{});var wMt=s(Hue);iJo=r(wMt,"AutoModelForTokenClassification"),wMt.forEach(t),kQe.forEach(t),AXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(u8.$$.fragment,dl),dJo=i(dl),fd=n(dl,"P",{});var zre=s(fd);cJo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=n(zre,"A",{href:!0});var AMt=s($z);fJo=r(AMt,"from_pretrained()"),AMt.forEach(t),mJo=r(zre," class method or the "),kz=n(zre,"A",{href:!0});var LMt=s(kz);gJo=r(LMt,"from_config()"),LMt.forEach(t),hJo=r(zre,` class
method.`),zre.forEach(t),pJo=i(dl),b8=n(dl,"P",{});var SQe=s(b8);_Jo=r(SQe,"This class cannot be instantiated directly using "),Uue=n(SQe,"CODE",{});var yMt=s(Uue);uJo=r(yMt,"__init__()"),yMt.forEach(t),bJo=r(SQe," (throws an error)."),SQe.forEach(t),vJo=i(dl),pt=n(dl,"DIV",{class:!0});var C7=s(pt);T(v8.$$.fragment,C7),FJo=i(C7),Jue=n(C7,"P",{});var xMt=s(Jue);TJo=r(xMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xMt.forEach(t),MJo=i(C7),md=n(C7,"P",{});var Qre=s(md);EJo=r(Qre,`Note:
Loading a model from its configuration file does `),Yue=n(Qre,"STRONG",{});var $Mt=s(Yue);CJo=r($Mt,"not"),$Mt.forEach(t),wJo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(Qre,"A",{href:!0});var kMt=s(Sz);AJo=r(kMt,"from_pretrained()"),kMt.forEach(t),LJo=r(Qre," to load the model weights."),Qre.forEach(t),yJo=i(C7),T(Sv.$$.fragment,C7),C7.forEach(t),xJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(F8.$$.fragment,pa),$Jo=i(pa),Kue=n(pa,"P",{});var SMt=s(Kue);kJo=r(SMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SMt.forEach(t),SJo=i(pa),Xa=n(pa,"P",{});var w7=s(Xa);RJo=r(w7,"The model class to instantiate is selected based on the "),Zue=n(w7,"CODE",{});var RMt=s(Zue);PJo=r(RMt,"model_type"),RMt.forEach(t),BJo=r(w7,` property of the config object (either
passed as an argument or loaded from `),e1e=n(w7,"CODE",{});var PMt=s(e1e);NJo=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),IJo=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(w7,"CODE",{});var BMt=s(o1e);qJo=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),jJo=r(w7,":"),w7.forEach(t),DJo=i(pa),U=n(pa,"UL",{});var J=s(U);Rv=n(J,"LI",{});var dBe=s(Rv);r1e=n(dBe,"STRONG",{});var NMt=s(r1e);GJo=r(NMt,"albert"),NMt.forEach(t),OJo=r(dBe," \u2014 "),Rz=n(dBe,"A",{href:!0});var IMt=s(Rz);VJo=r(IMt,"AlbertForTokenClassification"),IMt.forEach(t),XJo=r(dBe," (ALBERT model)"),dBe.forEach(t),zJo=i(J),Pv=n(J,"LI",{});var cBe=s(Pv);t1e=n(cBe,"STRONG",{});var qMt=s(t1e);QJo=r(qMt,"bert"),qMt.forEach(t),WJo=r(cBe," \u2014 "),Pz=n(cBe,"A",{href:!0});var jMt=s(Pz);HJo=r(jMt,"BertForTokenClassification"),jMt.forEach(t),UJo=r(cBe," (BERT model)"),cBe.forEach(t),JJo=i(J),Bv=n(J,"LI",{});var fBe=s(Bv);a1e=n(fBe,"STRONG",{});var DMt=s(a1e);YJo=r(DMt,"big_bird"),DMt.forEach(t),KJo=r(fBe," \u2014 "),Bz=n(fBe,"A",{href:!0});var GMt=s(Bz);ZJo=r(GMt,"BigBirdForTokenClassification"),GMt.forEach(t),eYo=r(fBe," (BigBird model)"),fBe.forEach(t),oYo=i(J),Nv=n(J,"LI",{});var mBe=s(Nv);n1e=n(mBe,"STRONG",{});var OMt=s(n1e);rYo=r(OMt,"bloom"),OMt.forEach(t),tYo=r(mBe," \u2014 "),Nz=n(mBe,"A",{href:!0});var VMt=s(Nz);aYo=r(VMt,"BloomForTokenClassification"),VMt.forEach(t),nYo=r(mBe," (BLOOM model)"),mBe.forEach(t),sYo=i(J),Iv=n(J,"LI",{});var gBe=s(Iv);s1e=n(gBe,"STRONG",{});var XMt=s(s1e);lYo=r(XMt,"camembert"),XMt.forEach(t),iYo=r(gBe," \u2014 "),Iz=n(gBe,"A",{href:!0});var zMt=s(Iz);dYo=r(zMt,"CamembertForTokenClassification"),zMt.forEach(t),cYo=r(gBe," (CamemBERT model)"),gBe.forEach(t),fYo=i(J),qv=n(J,"LI",{});var hBe=s(qv);l1e=n(hBe,"STRONG",{});var QMt=s(l1e);mYo=r(QMt,"canine"),QMt.forEach(t),gYo=r(hBe," \u2014 "),qz=n(hBe,"A",{href:!0});var WMt=s(qz);hYo=r(WMt,"CanineForTokenClassification"),WMt.forEach(t),pYo=r(hBe," (CANINE model)"),hBe.forEach(t),_Yo=i(J),jv=n(J,"LI",{});var pBe=s(jv);i1e=n(pBe,"STRONG",{});var HMt=s(i1e);uYo=r(HMt,"convbert"),HMt.forEach(t),bYo=r(pBe," \u2014 "),jz=n(pBe,"A",{href:!0});var UMt=s(jz);vYo=r(UMt,"ConvBertForTokenClassification"),UMt.forEach(t),FYo=r(pBe," (ConvBERT model)"),pBe.forEach(t),TYo=i(J),Dv=n(J,"LI",{});var _Be=s(Dv);d1e=n(_Be,"STRONG",{});var JMt=s(d1e);MYo=r(JMt,"data2vec-text"),JMt.forEach(t),EYo=r(_Be," \u2014 "),Dz=n(_Be,"A",{href:!0});var YMt=s(Dz);CYo=r(YMt,"Data2VecTextForTokenClassification"),YMt.forEach(t),wYo=r(_Be," (Data2VecText model)"),_Be.forEach(t),AYo=i(J),Gv=n(J,"LI",{});var uBe=s(Gv);c1e=n(uBe,"STRONG",{});var KMt=s(c1e);LYo=r(KMt,"deberta"),KMt.forEach(t),yYo=r(uBe," \u2014 "),Gz=n(uBe,"A",{href:!0});var ZMt=s(Gz);xYo=r(ZMt,"DebertaForTokenClassification"),ZMt.forEach(t),$Yo=r(uBe," (DeBERTa model)"),uBe.forEach(t),kYo=i(J),Ov=n(J,"LI",{});var bBe=s(Ov);f1e=n(bBe,"STRONG",{});var eEt=s(f1e);SYo=r(eEt,"deberta-v2"),eEt.forEach(t),RYo=r(bBe," \u2014 "),Oz=n(bBe,"A",{href:!0});var oEt=s(Oz);PYo=r(oEt,"DebertaV2ForTokenClassification"),oEt.forEach(t),BYo=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),NYo=i(J),Vv=n(J,"LI",{});var vBe=s(Vv);m1e=n(vBe,"STRONG",{});var rEt=s(m1e);IYo=r(rEt,"distilbert"),rEt.forEach(t),qYo=r(vBe," \u2014 "),Vz=n(vBe,"A",{href:!0});var tEt=s(Vz);jYo=r(tEt,"DistilBertForTokenClassification"),tEt.forEach(t),DYo=r(vBe," (DistilBERT model)"),vBe.forEach(t),GYo=i(J),Xv=n(J,"LI",{});var FBe=s(Xv);g1e=n(FBe,"STRONG",{});var aEt=s(g1e);OYo=r(aEt,"electra"),aEt.forEach(t),VYo=r(FBe," \u2014 "),Xz=n(FBe,"A",{href:!0});var nEt=s(Xz);XYo=r(nEt,"ElectraForTokenClassification"),nEt.forEach(t),zYo=r(FBe," (ELECTRA model)"),FBe.forEach(t),QYo=i(J),zv=n(J,"LI",{});var TBe=s(zv);h1e=n(TBe,"STRONG",{});var sEt=s(h1e);WYo=r(sEt,"flaubert"),sEt.forEach(t),HYo=r(TBe," \u2014 "),zz=n(TBe,"A",{href:!0});var lEt=s(zz);UYo=r(lEt,"FlaubertForTokenClassification"),lEt.forEach(t),JYo=r(TBe," (FlauBERT model)"),TBe.forEach(t),YYo=i(J),Qv=n(J,"LI",{});var MBe=s(Qv);p1e=n(MBe,"STRONG",{});var iEt=s(p1e);KYo=r(iEt,"fnet"),iEt.forEach(t),ZYo=r(MBe," \u2014 "),Qz=n(MBe,"A",{href:!0});var dEt=s(Qz);eKo=r(dEt,"FNetForTokenClassification"),dEt.forEach(t),oKo=r(MBe," (FNet model)"),MBe.forEach(t),rKo=i(J),Wv=n(J,"LI",{});var EBe=s(Wv);_1e=n(EBe,"STRONG",{});var cEt=s(_1e);tKo=r(cEt,"funnel"),cEt.forEach(t),aKo=r(EBe," \u2014 "),Wz=n(EBe,"A",{href:!0});var fEt=s(Wz);nKo=r(fEt,"FunnelForTokenClassification"),fEt.forEach(t),sKo=r(EBe," (Funnel Transformer model)"),EBe.forEach(t),lKo=i(J),Hv=n(J,"LI",{});var CBe=s(Hv);u1e=n(CBe,"STRONG",{});var mEt=s(u1e);iKo=r(mEt,"gpt2"),mEt.forEach(t),dKo=r(CBe," \u2014 "),Hz=n(CBe,"A",{href:!0});var gEt=s(Hz);cKo=r(gEt,"GPT2ForTokenClassification"),gEt.forEach(t),fKo=r(CBe," (OpenAI GPT-2 model)"),CBe.forEach(t),mKo=i(J),Uv=n(J,"LI",{});var wBe=s(Uv);b1e=n(wBe,"STRONG",{});var hEt=s(b1e);gKo=r(hEt,"ibert"),hEt.forEach(t),hKo=r(wBe," \u2014 "),Uz=n(wBe,"A",{href:!0});var pEt=s(Uz);pKo=r(pEt,"IBertForTokenClassification"),pEt.forEach(t),_Ko=r(wBe," (I-BERT model)"),wBe.forEach(t),uKo=i(J),Jv=n(J,"LI",{});var ABe=s(Jv);v1e=n(ABe,"STRONG",{});var _Et=s(v1e);bKo=r(_Et,"layoutlm"),_Et.forEach(t),vKo=r(ABe," \u2014 "),Jz=n(ABe,"A",{href:!0});var uEt=s(Jz);FKo=r(uEt,"LayoutLMForTokenClassification"),uEt.forEach(t),TKo=r(ABe," (LayoutLM model)"),ABe.forEach(t),MKo=i(J),Yv=n(J,"LI",{});var LBe=s(Yv);F1e=n(LBe,"STRONG",{});var bEt=s(F1e);EKo=r(bEt,"layoutlmv2"),bEt.forEach(t),CKo=r(LBe," \u2014 "),Yz=n(LBe,"A",{href:!0});var vEt=s(Yz);wKo=r(vEt,"LayoutLMv2ForTokenClassification"),vEt.forEach(t),AKo=r(LBe," (LayoutLMv2 model)"),LBe.forEach(t),LKo=i(J),Kv=n(J,"LI",{});var yBe=s(Kv);T1e=n(yBe,"STRONG",{});var FEt=s(T1e);yKo=r(FEt,"layoutlmv3"),FEt.forEach(t),xKo=r(yBe," \u2014 "),Kz=n(yBe,"A",{href:!0});var TEt=s(Kz);$Ko=r(TEt,"LayoutLMv3ForTokenClassification"),TEt.forEach(t),kKo=r(yBe," (LayoutLMv3 model)"),yBe.forEach(t),SKo=i(J),Zv=n(J,"LI",{});var xBe=s(Zv);M1e=n(xBe,"STRONG",{});var MEt=s(M1e);RKo=r(MEt,"longformer"),MEt.forEach(t),PKo=r(xBe," \u2014 "),Zz=n(xBe,"A",{href:!0});var EEt=s(Zz);BKo=r(EEt,"LongformerForTokenClassification"),EEt.forEach(t),NKo=r(xBe," (Longformer model)"),xBe.forEach(t),IKo=i(J),e3=n(J,"LI",{});var $Be=s(e3);E1e=n($Be,"STRONG",{});var CEt=s(E1e);qKo=r(CEt,"megatron-bert"),CEt.forEach(t),jKo=r($Be," \u2014 "),eQ=n($Be,"A",{href:!0});var wEt=s(eQ);DKo=r(wEt,"MegatronBertForTokenClassification"),wEt.forEach(t),GKo=r($Be," (Megatron-BERT model)"),$Be.forEach(t),OKo=i(J),o3=n(J,"LI",{});var kBe=s(o3);C1e=n(kBe,"STRONG",{});var AEt=s(C1e);VKo=r(AEt,"mobilebert"),AEt.forEach(t),XKo=r(kBe," \u2014 "),oQ=n(kBe,"A",{href:!0});var LEt=s(oQ);zKo=r(LEt,"MobileBertForTokenClassification"),LEt.forEach(t),QKo=r(kBe," (MobileBERT model)"),kBe.forEach(t),WKo=i(J),r3=n(J,"LI",{});var SBe=s(r3);w1e=n(SBe,"STRONG",{});var yEt=s(w1e);HKo=r(yEt,"mpnet"),yEt.forEach(t),UKo=r(SBe," \u2014 "),rQ=n(SBe,"A",{href:!0});var xEt=s(rQ);JKo=r(xEt,"MPNetForTokenClassification"),xEt.forEach(t),YKo=r(SBe," (MPNet model)"),SBe.forEach(t),KKo=i(J),t3=n(J,"LI",{});var RBe=s(t3);A1e=n(RBe,"STRONG",{});var $Et=s(A1e);ZKo=r($Et,"nezha"),$Et.forEach(t),eZo=r(RBe," \u2014 "),tQ=n(RBe,"A",{href:!0});var kEt=s(tQ);oZo=r(kEt,"NezhaForTokenClassification"),kEt.forEach(t),rZo=r(RBe," (Nezha model)"),RBe.forEach(t),tZo=i(J),a3=n(J,"LI",{});var PBe=s(a3);L1e=n(PBe,"STRONG",{});var SEt=s(L1e);aZo=r(SEt,"nystromformer"),SEt.forEach(t),nZo=r(PBe," \u2014 "),aQ=n(PBe,"A",{href:!0});var REt=s(aQ);sZo=r(REt,"NystromformerForTokenClassification"),REt.forEach(t),lZo=r(PBe," (Nystr\xF6mformer model)"),PBe.forEach(t),iZo=i(J),n3=n(J,"LI",{});var BBe=s(n3);y1e=n(BBe,"STRONG",{});var PEt=s(y1e);dZo=r(PEt,"qdqbert"),PEt.forEach(t),cZo=r(BBe," \u2014 "),nQ=n(BBe,"A",{href:!0});var BEt=s(nQ);fZo=r(BEt,"QDQBertForTokenClassification"),BEt.forEach(t),mZo=r(BBe," (QDQBert model)"),BBe.forEach(t),gZo=i(J),s3=n(J,"LI",{});var NBe=s(s3);x1e=n(NBe,"STRONG",{});var NEt=s(x1e);hZo=r(NEt,"rembert"),NEt.forEach(t),pZo=r(NBe," \u2014 "),sQ=n(NBe,"A",{href:!0});var IEt=s(sQ);_Zo=r(IEt,"RemBertForTokenClassification"),IEt.forEach(t),uZo=r(NBe," (RemBERT model)"),NBe.forEach(t),bZo=i(J),l3=n(J,"LI",{});var IBe=s(l3);$1e=n(IBe,"STRONG",{});var qEt=s($1e);vZo=r(qEt,"roberta"),qEt.forEach(t),FZo=r(IBe," \u2014 "),lQ=n(IBe,"A",{href:!0});var jEt=s(lQ);TZo=r(jEt,"RobertaForTokenClassification"),jEt.forEach(t),MZo=r(IBe," (RoBERTa model)"),IBe.forEach(t),EZo=i(J),i3=n(J,"LI",{});var qBe=s(i3);k1e=n(qBe,"STRONG",{});var DEt=s(k1e);CZo=r(DEt,"roformer"),DEt.forEach(t),wZo=r(qBe," \u2014 "),iQ=n(qBe,"A",{href:!0});var GEt=s(iQ);AZo=r(GEt,"RoFormerForTokenClassification"),GEt.forEach(t),LZo=r(qBe," (RoFormer model)"),qBe.forEach(t),yZo=i(J),d3=n(J,"LI",{});var jBe=s(d3);S1e=n(jBe,"STRONG",{});var OEt=s(S1e);xZo=r(OEt,"squeezebert"),OEt.forEach(t),$Zo=r(jBe," \u2014 "),dQ=n(jBe,"A",{href:!0});var VEt=s(dQ);kZo=r(VEt,"SqueezeBertForTokenClassification"),VEt.forEach(t),SZo=r(jBe," (SqueezeBERT model)"),jBe.forEach(t),RZo=i(J),c3=n(J,"LI",{});var DBe=s(c3);R1e=n(DBe,"STRONG",{});var XEt=s(R1e);PZo=r(XEt,"xlm"),XEt.forEach(t),BZo=r(DBe," \u2014 "),cQ=n(DBe,"A",{href:!0});var zEt=s(cQ);NZo=r(zEt,"XLMForTokenClassification"),zEt.forEach(t),IZo=r(DBe," (XLM model)"),DBe.forEach(t),qZo=i(J),f3=n(J,"LI",{});var GBe=s(f3);P1e=n(GBe,"STRONG",{});var QEt=s(P1e);jZo=r(QEt,"xlm-roberta"),QEt.forEach(t),DZo=r(GBe," \u2014 "),fQ=n(GBe,"A",{href:!0});var WEt=s(fQ);GZo=r(WEt,"XLMRobertaForTokenClassification"),WEt.forEach(t),OZo=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),VZo=i(J),m3=n(J,"LI",{});var OBe=s(m3);B1e=n(OBe,"STRONG",{});var HEt=s(B1e);XZo=r(HEt,"xlm-roberta-xl"),HEt.forEach(t),zZo=r(OBe," \u2014 "),mQ=n(OBe,"A",{href:!0});var UEt=s(mQ);QZo=r(UEt,"XLMRobertaXLForTokenClassification"),UEt.forEach(t),WZo=r(OBe," (XLM-RoBERTa-XL model)"),OBe.forEach(t),HZo=i(J),g3=n(J,"LI",{});var VBe=s(g3);N1e=n(VBe,"STRONG",{});var JEt=s(N1e);UZo=r(JEt,"xlnet"),JEt.forEach(t),JZo=r(VBe," \u2014 "),gQ=n(VBe,"A",{href:!0});var YEt=s(gQ);YZo=r(YEt,"XLNetForTokenClassification"),YEt.forEach(t),KZo=r(VBe," (XLNet model)"),VBe.forEach(t),ZZo=i(J),h3=n(J,"LI",{});var XBe=s(h3);I1e=n(XBe,"STRONG",{});var KEt=s(I1e);eer=r(KEt,"yoso"),KEt.forEach(t),oer=r(XBe," \u2014 "),hQ=n(XBe,"A",{href:!0});var ZEt=s(hQ);rer=r(ZEt,"YosoForTokenClassification"),ZEt.forEach(t),ter=r(XBe," (YOSO model)"),XBe.forEach(t),J.forEach(t),aer=i(pa),p3=n(pa,"P",{});var zBe=s(p3);ner=r(zBe,"The model is set in evaluation mode by default using "),q1e=n(zBe,"CODE",{});var eCt=s(q1e);ser=r(eCt,"model.eval()"),eCt.forEach(t),ler=r(zBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j1e=n(zBe,"CODE",{});var oCt=s(j1e);ier=r(oCt,"model.train()"),oCt.forEach(t),zBe.forEach(t),der=i(pa),T(_3.$$.fragment,pa),pa.forEach(t),dl.forEach(t),LXe=i(f),gd=n(f,"H2",{class:!0});var RQe=s(gd);u3=n(RQe,"A",{id:!0,class:!0,href:!0});var rCt=s(u3);D1e=n(rCt,"SPAN",{});var tCt=s(D1e);T(T8.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),cer=i(RQe),G1e=n(RQe,"SPAN",{});var aCt=s(G1e);fer=r(aCt,"AutoModelForQuestionAnswering"),aCt.forEach(t),RQe.forEach(t),yXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(M8.$$.fragment,cl),mer=i(cl),hd=n(cl,"P",{});var Wre=s(hd);ger=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=n(Wre,"A",{href:!0});var nCt=s(pQ);her=r(nCt,"from_pretrained()"),nCt.forEach(t),per=r(Wre," class method or the "),_Q=n(Wre,"A",{href:!0});var sCt=s(_Q);_er=r(sCt,"from_config()"),sCt.forEach(t),uer=r(Wre,` class
method.`),Wre.forEach(t),ber=i(cl),E8=n(cl,"P",{});var PQe=s(E8);ver=r(PQe,"This class cannot be instantiated directly using "),O1e=n(PQe,"CODE",{});var lCt=s(O1e);Fer=r(lCt,"__init__()"),lCt.forEach(t),Ter=r(PQe," (throws an error)."),PQe.forEach(t),Mer=i(cl),_t=n(cl,"DIV",{class:!0});var A7=s(_t);T(C8.$$.fragment,A7),Eer=i(A7),V1e=n(A7,"P",{});var iCt=s(V1e);Cer=r(iCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iCt.forEach(t),wer=i(A7),pd=n(A7,"P",{});var Hre=s(pd);Aer=r(Hre,`Note:
Loading a model from its configuration file does `),X1e=n(Hre,"STRONG",{});var dCt=s(X1e);Ler=r(dCt,"not"),dCt.forEach(t),yer=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(Hre,"A",{href:!0});var cCt=s(uQ);xer=r(cCt,"from_pretrained()"),cCt.forEach(t),$er=r(Hre," to load the model weights."),Hre.forEach(t),ker=i(A7),T(b3.$$.fragment,A7),A7.forEach(t),Ser=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(w8.$$.fragment,_a),Rer=i(_a),z1e=n(_a,"P",{});var fCt=s(z1e);Per=r(fCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fCt.forEach(t),Ber=i(_a),za=n(_a,"P",{});var L7=s(za);Ner=r(L7,"The model class to instantiate is selected based on the "),Q1e=n(L7,"CODE",{});var mCt=s(Q1e);Ier=r(mCt,"model_type"),mCt.forEach(t),qer=r(L7,` property of the config object (either
passed as an argument or loaded from `),W1e=n(L7,"CODE",{});var gCt=s(W1e);jer=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),Der=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(L7,"CODE",{});var hCt=s(H1e);Ger=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),Oer=r(L7,":"),L7.forEach(t),Ver=i(_a),V=n(_a,"UL",{});var X=s(V);v3=n(X,"LI",{});var QBe=s(v3);U1e=n(QBe,"STRONG",{});var pCt=s(U1e);Xer=r(pCt,"albert"),pCt.forEach(t),zer=r(QBe," \u2014 "),bQ=n(QBe,"A",{href:!0});var _Ct=s(bQ);Qer=r(_Ct,"AlbertForQuestionAnswering"),_Ct.forEach(t),Wer=r(QBe," (ALBERT model)"),QBe.forEach(t),Her=i(X),F3=n(X,"LI",{});var WBe=s(F3);J1e=n(WBe,"STRONG",{});var uCt=s(J1e);Uer=r(uCt,"bart"),uCt.forEach(t),Jer=r(WBe," \u2014 "),vQ=n(WBe,"A",{href:!0});var bCt=s(vQ);Yer=r(bCt,"BartForQuestionAnswering"),bCt.forEach(t),Ker=r(WBe," (BART model)"),WBe.forEach(t),Zer=i(X),T3=n(X,"LI",{});var HBe=s(T3);Y1e=n(HBe,"STRONG",{});var vCt=s(Y1e);eor=r(vCt,"bert"),vCt.forEach(t),oor=r(HBe," \u2014 "),FQ=n(HBe,"A",{href:!0});var FCt=s(FQ);ror=r(FCt,"BertForQuestionAnswering"),FCt.forEach(t),tor=r(HBe," (BERT model)"),HBe.forEach(t),aor=i(X),M3=n(X,"LI",{});var UBe=s(M3);K1e=n(UBe,"STRONG",{});var TCt=s(K1e);nor=r(TCt,"big_bird"),TCt.forEach(t),sor=r(UBe," \u2014 "),TQ=n(UBe,"A",{href:!0});var MCt=s(TQ);lor=r(MCt,"BigBirdForQuestionAnswering"),MCt.forEach(t),ior=r(UBe," (BigBird model)"),UBe.forEach(t),dor=i(X),E3=n(X,"LI",{});var JBe=s(E3);Z1e=n(JBe,"STRONG",{});var ECt=s(Z1e);cor=r(ECt,"bigbird_pegasus"),ECt.forEach(t),mor=r(JBe," \u2014 "),MQ=n(JBe,"A",{href:!0});var CCt=s(MQ);gor=r(CCt,"BigBirdPegasusForQuestionAnswering"),CCt.forEach(t),hor=r(JBe," (BigBird-Pegasus model)"),JBe.forEach(t),por=i(X),C3=n(X,"LI",{});var YBe=s(C3);e4e=n(YBe,"STRONG",{});var wCt=s(e4e);_or=r(wCt,"camembert"),wCt.forEach(t),uor=r(YBe," \u2014 "),EQ=n(YBe,"A",{href:!0});var ACt=s(EQ);bor=r(ACt,"CamembertForQuestionAnswering"),ACt.forEach(t),vor=r(YBe," (CamemBERT model)"),YBe.forEach(t),For=i(X),w3=n(X,"LI",{});var KBe=s(w3);o4e=n(KBe,"STRONG",{});var LCt=s(o4e);Tor=r(LCt,"canine"),LCt.forEach(t),Mor=r(KBe," \u2014 "),CQ=n(KBe,"A",{href:!0});var yCt=s(CQ);Eor=r(yCt,"CanineForQuestionAnswering"),yCt.forEach(t),Cor=r(KBe," (CANINE model)"),KBe.forEach(t),wor=i(X),A3=n(X,"LI",{});var ZBe=s(A3);r4e=n(ZBe,"STRONG",{});var xCt=s(r4e);Aor=r(xCt,"convbert"),xCt.forEach(t),Lor=r(ZBe," \u2014 "),wQ=n(ZBe,"A",{href:!0});var $Ct=s(wQ);yor=r($Ct,"ConvBertForQuestionAnswering"),$Ct.forEach(t),xor=r(ZBe," (ConvBERT model)"),ZBe.forEach(t),$or=i(X),L3=n(X,"LI",{});var eNe=s(L3);t4e=n(eNe,"STRONG",{});var kCt=s(t4e);kor=r(kCt,"data2vec-text"),kCt.forEach(t),Sor=r(eNe," \u2014 "),AQ=n(eNe,"A",{href:!0});var SCt=s(AQ);Ror=r(SCt,"Data2VecTextForQuestionAnswering"),SCt.forEach(t),Por=r(eNe," (Data2VecText model)"),eNe.forEach(t),Bor=i(X),y3=n(X,"LI",{});var oNe=s(y3);a4e=n(oNe,"STRONG",{});var RCt=s(a4e);Nor=r(RCt,"deberta"),RCt.forEach(t),Ior=r(oNe," \u2014 "),LQ=n(oNe,"A",{href:!0});var PCt=s(LQ);qor=r(PCt,"DebertaForQuestionAnswering"),PCt.forEach(t),jor=r(oNe," (DeBERTa model)"),oNe.forEach(t),Dor=i(X),x3=n(X,"LI",{});var rNe=s(x3);n4e=n(rNe,"STRONG",{});var BCt=s(n4e);Gor=r(BCt,"deberta-v2"),BCt.forEach(t),Oor=r(rNe," \u2014 "),yQ=n(rNe,"A",{href:!0});var NCt=s(yQ);Vor=r(NCt,"DebertaV2ForQuestionAnswering"),NCt.forEach(t),Xor=r(rNe," (DeBERTa-v2 model)"),rNe.forEach(t),zor=i(X),$3=n(X,"LI",{});var tNe=s($3);s4e=n(tNe,"STRONG",{});var ICt=s(s4e);Qor=r(ICt,"distilbert"),ICt.forEach(t),Wor=r(tNe," \u2014 "),xQ=n(tNe,"A",{href:!0});var qCt=s(xQ);Hor=r(qCt,"DistilBertForQuestionAnswering"),qCt.forEach(t),Uor=r(tNe," (DistilBERT model)"),tNe.forEach(t),Jor=i(X),k3=n(X,"LI",{});var aNe=s(k3);l4e=n(aNe,"STRONG",{});var jCt=s(l4e);Yor=r(jCt,"electra"),jCt.forEach(t),Kor=r(aNe," \u2014 "),$Q=n(aNe,"A",{href:!0});var DCt=s($Q);Zor=r(DCt,"ElectraForQuestionAnswering"),DCt.forEach(t),err=r(aNe," (ELECTRA model)"),aNe.forEach(t),orr=i(X),S3=n(X,"LI",{});var nNe=s(S3);i4e=n(nNe,"STRONG",{});var GCt=s(i4e);rrr=r(GCt,"flaubert"),GCt.forEach(t),trr=r(nNe," \u2014 "),kQ=n(nNe,"A",{href:!0});var OCt=s(kQ);arr=r(OCt,"FlaubertForQuestionAnsweringSimple"),OCt.forEach(t),nrr=r(nNe," (FlauBERT model)"),nNe.forEach(t),srr=i(X),R3=n(X,"LI",{});var sNe=s(R3);d4e=n(sNe,"STRONG",{});var VCt=s(d4e);lrr=r(VCt,"fnet"),VCt.forEach(t),irr=r(sNe," \u2014 "),SQ=n(sNe,"A",{href:!0});var XCt=s(SQ);drr=r(XCt,"FNetForQuestionAnswering"),XCt.forEach(t),crr=r(sNe," (FNet model)"),sNe.forEach(t),frr=i(X),P3=n(X,"LI",{});var lNe=s(P3);c4e=n(lNe,"STRONG",{});var zCt=s(c4e);mrr=r(zCt,"funnel"),zCt.forEach(t),grr=r(lNe," \u2014 "),RQ=n(lNe,"A",{href:!0});var QCt=s(RQ);hrr=r(QCt,"FunnelForQuestionAnswering"),QCt.forEach(t),prr=r(lNe," (Funnel Transformer model)"),lNe.forEach(t),_rr=i(X),B3=n(X,"LI",{});var iNe=s(B3);f4e=n(iNe,"STRONG",{});var WCt=s(f4e);urr=r(WCt,"gptj"),WCt.forEach(t),brr=r(iNe," \u2014 "),PQ=n(iNe,"A",{href:!0});var HCt=s(PQ);vrr=r(HCt,"GPTJForQuestionAnswering"),HCt.forEach(t),Frr=r(iNe," (GPT-J model)"),iNe.forEach(t),Trr=i(X),N3=n(X,"LI",{});var dNe=s(N3);m4e=n(dNe,"STRONG",{});var UCt=s(m4e);Mrr=r(UCt,"ibert"),UCt.forEach(t),Err=r(dNe," \u2014 "),BQ=n(dNe,"A",{href:!0});var JCt=s(BQ);Crr=r(JCt,"IBertForQuestionAnswering"),JCt.forEach(t),wrr=r(dNe," (I-BERT model)"),dNe.forEach(t),Arr=i(X),I3=n(X,"LI",{});var cNe=s(I3);g4e=n(cNe,"STRONG",{});var YCt=s(g4e);Lrr=r(YCt,"layoutlmv2"),YCt.forEach(t),yrr=r(cNe," \u2014 "),NQ=n(cNe,"A",{href:!0});var KCt=s(NQ);xrr=r(KCt,"LayoutLMv2ForQuestionAnswering"),KCt.forEach(t),$rr=r(cNe," (LayoutLMv2 model)"),cNe.forEach(t),krr=i(X),q3=n(X,"LI",{});var fNe=s(q3);h4e=n(fNe,"STRONG",{});var ZCt=s(h4e);Srr=r(ZCt,"layoutlmv3"),ZCt.forEach(t),Rrr=r(fNe," \u2014 "),IQ=n(fNe,"A",{href:!0});var e0t=s(IQ);Prr=r(e0t,"LayoutLMv3ForQuestionAnswering"),e0t.forEach(t),Brr=r(fNe," (LayoutLMv3 model)"),fNe.forEach(t),Nrr=i(X),j3=n(X,"LI",{});var mNe=s(j3);p4e=n(mNe,"STRONG",{});var o0t=s(p4e);Irr=r(o0t,"led"),o0t.forEach(t),qrr=r(mNe," \u2014 "),qQ=n(mNe,"A",{href:!0});var r0t=s(qQ);jrr=r(r0t,"LEDForQuestionAnswering"),r0t.forEach(t),Drr=r(mNe," (LED model)"),mNe.forEach(t),Grr=i(X),D3=n(X,"LI",{});var gNe=s(D3);_4e=n(gNe,"STRONG",{});var t0t=s(_4e);Orr=r(t0t,"longformer"),t0t.forEach(t),Vrr=r(gNe," \u2014 "),jQ=n(gNe,"A",{href:!0});var a0t=s(jQ);Xrr=r(a0t,"LongformerForQuestionAnswering"),a0t.forEach(t),zrr=r(gNe," (Longformer model)"),gNe.forEach(t),Qrr=i(X),G3=n(X,"LI",{});var hNe=s(G3);u4e=n(hNe,"STRONG",{});var n0t=s(u4e);Wrr=r(n0t,"lxmert"),n0t.forEach(t),Hrr=r(hNe," \u2014 "),DQ=n(hNe,"A",{href:!0});var s0t=s(DQ);Urr=r(s0t,"LxmertForQuestionAnswering"),s0t.forEach(t),Jrr=r(hNe," (LXMERT model)"),hNe.forEach(t),Yrr=i(X),O3=n(X,"LI",{});var pNe=s(O3);b4e=n(pNe,"STRONG",{});var l0t=s(b4e);Krr=r(l0t,"mbart"),l0t.forEach(t),Zrr=r(pNe," \u2014 "),GQ=n(pNe,"A",{href:!0});var i0t=s(GQ);etr=r(i0t,"MBartForQuestionAnswering"),i0t.forEach(t),otr=r(pNe," (mBART model)"),pNe.forEach(t),rtr=i(X),V3=n(X,"LI",{});var _Ne=s(V3);v4e=n(_Ne,"STRONG",{});var d0t=s(v4e);ttr=r(d0t,"megatron-bert"),d0t.forEach(t),atr=r(_Ne," \u2014 "),OQ=n(_Ne,"A",{href:!0});var c0t=s(OQ);ntr=r(c0t,"MegatronBertForQuestionAnswering"),c0t.forEach(t),str=r(_Ne," (Megatron-BERT model)"),_Ne.forEach(t),ltr=i(X),X3=n(X,"LI",{});var uNe=s(X3);F4e=n(uNe,"STRONG",{});var f0t=s(F4e);itr=r(f0t,"mobilebert"),f0t.forEach(t),dtr=r(uNe," \u2014 "),VQ=n(uNe,"A",{href:!0});var m0t=s(VQ);ctr=r(m0t,"MobileBertForQuestionAnswering"),m0t.forEach(t),ftr=r(uNe," (MobileBERT model)"),uNe.forEach(t),mtr=i(X),z3=n(X,"LI",{});var bNe=s(z3);T4e=n(bNe,"STRONG",{});var g0t=s(T4e);gtr=r(g0t,"mpnet"),g0t.forEach(t),htr=r(bNe," \u2014 "),XQ=n(bNe,"A",{href:!0});var h0t=s(XQ);ptr=r(h0t,"MPNetForQuestionAnswering"),h0t.forEach(t),_tr=r(bNe," (MPNet model)"),bNe.forEach(t),utr=i(X),Q3=n(X,"LI",{});var vNe=s(Q3);M4e=n(vNe,"STRONG",{});var p0t=s(M4e);btr=r(p0t,"mvp"),p0t.forEach(t),vtr=r(vNe," \u2014 "),zQ=n(vNe,"A",{href:!0});var _0t=s(zQ);Ftr=r(_0t,"MvpForQuestionAnswering"),_0t.forEach(t),Ttr=r(vNe," (MVP model)"),vNe.forEach(t),Mtr=i(X),W3=n(X,"LI",{});var FNe=s(W3);E4e=n(FNe,"STRONG",{});var u0t=s(E4e);Etr=r(u0t,"nezha"),u0t.forEach(t),Ctr=r(FNe," \u2014 "),QQ=n(FNe,"A",{href:!0});var b0t=s(QQ);wtr=r(b0t,"NezhaForQuestionAnswering"),b0t.forEach(t),Atr=r(FNe," (Nezha model)"),FNe.forEach(t),Ltr=i(X),H3=n(X,"LI",{});var TNe=s(H3);C4e=n(TNe,"STRONG",{});var v0t=s(C4e);ytr=r(v0t,"nystromformer"),v0t.forEach(t),xtr=r(TNe," \u2014 "),WQ=n(TNe,"A",{href:!0});var F0t=s(WQ);$tr=r(F0t,"NystromformerForQuestionAnswering"),F0t.forEach(t),ktr=r(TNe," (Nystr\xF6mformer model)"),TNe.forEach(t),Str=i(X),U3=n(X,"LI",{});var MNe=s(U3);w4e=n(MNe,"STRONG",{});var T0t=s(w4e);Rtr=r(T0t,"qdqbert"),T0t.forEach(t),Ptr=r(MNe," \u2014 "),HQ=n(MNe,"A",{href:!0});var M0t=s(HQ);Btr=r(M0t,"QDQBertForQuestionAnswering"),M0t.forEach(t),Ntr=r(MNe," (QDQBert model)"),MNe.forEach(t),Itr=i(X),J3=n(X,"LI",{});var ENe=s(J3);A4e=n(ENe,"STRONG",{});var E0t=s(A4e);qtr=r(E0t,"reformer"),E0t.forEach(t),jtr=r(ENe," \u2014 "),UQ=n(ENe,"A",{href:!0});var C0t=s(UQ);Dtr=r(C0t,"ReformerForQuestionAnswering"),C0t.forEach(t),Gtr=r(ENe," (Reformer model)"),ENe.forEach(t),Otr=i(X),Y3=n(X,"LI",{});var CNe=s(Y3);L4e=n(CNe,"STRONG",{});var w0t=s(L4e);Vtr=r(w0t,"rembert"),w0t.forEach(t),Xtr=r(CNe," \u2014 "),JQ=n(CNe,"A",{href:!0});var A0t=s(JQ);ztr=r(A0t,"RemBertForQuestionAnswering"),A0t.forEach(t),Qtr=r(CNe," (RemBERT model)"),CNe.forEach(t),Wtr=i(X),K3=n(X,"LI",{});var wNe=s(K3);y4e=n(wNe,"STRONG",{});var L0t=s(y4e);Htr=r(L0t,"roberta"),L0t.forEach(t),Utr=r(wNe," \u2014 "),YQ=n(wNe,"A",{href:!0});var y0t=s(YQ);Jtr=r(y0t,"RobertaForQuestionAnswering"),y0t.forEach(t),Ytr=r(wNe," (RoBERTa model)"),wNe.forEach(t),Ktr=i(X),Z3=n(X,"LI",{});var ANe=s(Z3);x4e=n(ANe,"STRONG",{});var x0t=s(x4e);Ztr=r(x0t,"roformer"),x0t.forEach(t),ear=r(ANe," \u2014 "),KQ=n(ANe,"A",{href:!0});var $0t=s(KQ);oar=r($0t,"RoFormerForQuestionAnswering"),$0t.forEach(t),rar=r(ANe," (RoFormer model)"),ANe.forEach(t),tar=i(X),e5=n(X,"LI",{});var LNe=s(e5);$4e=n(LNe,"STRONG",{});var k0t=s($4e);aar=r(k0t,"splinter"),k0t.forEach(t),nar=r(LNe," \u2014 "),ZQ=n(LNe,"A",{href:!0});var S0t=s(ZQ);sar=r(S0t,"SplinterForQuestionAnswering"),S0t.forEach(t),lar=r(LNe," (Splinter model)"),LNe.forEach(t),iar=i(X),o5=n(X,"LI",{});var yNe=s(o5);k4e=n(yNe,"STRONG",{});var R0t=s(k4e);dar=r(R0t,"squeezebert"),R0t.forEach(t),car=r(yNe," \u2014 "),eW=n(yNe,"A",{href:!0});var P0t=s(eW);far=r(P0t,"SqueezeBertForQuestionAnswering"),P0t.forEach(t),mar=r(yNe," (SqueezeBERT model)"),yNe.forEach(t),gar=i(X),r5=n(X,"LI",{});var xNe=s(r5);S4e=n(xNe,"STRONG",{});var B0t=s(S4e);har=r(B0t,"xlm"),B0t.forEach(t),par=r(xNe," \u2014 "),oW=n(xNe,"A",{href:!0});var N0t=s(oW);_ar=r(N0t,"XLMForQuestionAnsweringSimple"),N0t.forEach(t),uar=r(xNe," (XLM model)"),xNe.forEach(t),bar=i(X),t5=n(X,"LI",{});var $Ne=s(t5);R4e=n($Ne,"STRONG",{});var I0t=s(R4e);Far=r(I0t,"xlm-roberta"),I0t.forEach(t),Tar=r($Ne," \u2014 "),rW=n($Ne,"A",{href:!0});var q0t=s(rW);Mar=r(q0t,"XLMRobertaForQuestionAnswering"),q0t.forEach(t),Ear=r($Ne," (XLM-RoBERTa model)"),$Ne.forEach(t),Car=i(X),a5=n(X,"LI",{});var kNe=s(a5);P4e=n(kNe,"STRONG",{});var j0t=s(P4e);war=r(j0t,"xlm-roberta-xl"),j0t.forEach(t),Aar=r(kNe," \u2014 "),tW=n(kNe,"A",{href:!0});var D0t=s(tW);Lar=r(D0t,"XLMRobertaXLForQuestionAnswering"),D0t.forEach(t),yar=r(kNe," (XLM-RoBERTa-XL model)"),kNe.forEach(t),xar=i(X),n5=n(X,"LI",{});var SNe=s(n5);B4e=n(SNe,"STRONG",{});var G0t=s(B4e);$ar=r(G0t,"xlnet"),G0t.forEach(t),kar=r(SNe," \u2014 "),aW=n(SNe,"A",{href:!0});var O0t=s(aW);Sar=r(O0t,"XLNetForQuestionAnsweringSimple"),O0t.forEach(t),Rar=r(SNe," (XLNet model)"),SNe.forEach(t),Par=i(X),s5=n(X,"LI",{});var RNe=s(s5);N4e=n(RNe,"STRONG",{});var V0t=s(N4e);Bar=r(V0t,"yoso"),V0t.forEach(t),Nar=r(RNe," \u2014 "),nW=n(RNe,"A",{href:!0});var X0t=s(nW);Iar=r(X0t,"YosoForQuestionAnswering"),X0t.forEach(t),qar=r(RNe," (YOSO model)"),RNe.forEach(t),X.forEach(t),jar=i(_a),l5=n(_a,"P",{});var PNe=s(l5);Dar=r(PNe,"The model is set in evaluation mode by default using "),I4e=n(PNe,"CODE",{});var z0t=s(I4e);Gar=r(z0t,"model.eval()"),z0t.forEach(t),Oar=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(PNe,"CODE",{});var Q0t=s(q4e);Var=r(Q0t,"model.train()"),Q0t.forEach(t),PNe.forEach(t),Xar=i(_a),T(i5.$$.fragment,_a),_a.forEach(t),cl.forEach(t),xXe=i(f),_d=n(f,"H2",{class:!0});var BQe=s(_d);d5=n(BQe,"A",{id:!0,class:!0,href:!0});var W0t=s(d5);j4e=n(W0t,"SPAN",{});var H0t=s(j4e);T(A8.$$.fragment,H0t),H0t.forEach(t),W0t.forEach(t),zar=i(BQe),D4e=n(BQe,"SPAN",{});var U0t=s(D4e);Qar=r(U0t,"AutoModelForTableQuestionAnswering"),U0t.forEach(t),BQe.forEach(t),$Xe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(L8.$$.fragment,fl),War=i(fl),ud=n(fl,"P",{});var Ure=s(ud);Har=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sW=n(Ure,"A",{href:!0});var J0t=s(sW);Uar=r(J0t,"from_pretrained()"),J0t.forEach(t),Jar=r(Ure," class method or the "),lW=n(Ure,"A",{href:!0});var Y0t=s(lW);Yar=r(Y0t,"from_config()"),Y0t.forEach(t),Kar=r(Ure,` class
method.`),Ure.forEach(t),Zar=i(fl),y8=n(fl,"P",{});var NQe=s(y8);enr=r(NQe,"This class cannot be instantiated directly using "),G4e=n(NQe,"CODE",{});var K0t=s(G4e);onr=r(K0t,"__init__()"),K0t.forEach(t),rnr=r(NQe," (throws an error)."),NQe.forEach(t),tnr=i(fl),ut=n(fl,"DIV",{class:!0});var y7=s(ut);T(x8.$$.fragment,y7),anr=i(y7),O4e=n(y7,"P",{});var Z0t=s(O4e);nnr=r(Z0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z0t.forEach(t),snr=i(y7),bd=n(y7,"P",{});var Jre=s(bd);lnr=r(Jre,`Note:
Loading a model from its configuration file does `),V4e=n(Jre,"STRONG",{});var ewt=s(V4e);inr=r(ewt,"not"),ewt.forEach(t),dnr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Jre,"A",{href:!0});var owt=s(iW);cnr=r(owt,"from_pretrained()"),owt.forEach(t),fnr=r(Jre," to load the model weights."),Jre.forEach(t),mnr=i(y7),T(c5.$$.fragment,y7),y7.forEach(t),gnr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T($8.$$.fragment,ua),hnr=i(ua),X4e=n(ua,"P",{});var rwt=s(X4e);pnr=r(rwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rwt.forEach(t),_nr=i(ua),Qa=n(ua,"P",{});var x7=s(Qa);unr=r(x7,"The model class to instantiate is selected based on the "),z4e=n(x7,"CODE",{});var twt=s(z4e);bnr=r(twt,"model_type"),twt.forEach(t),vnr=r(x7,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(x7,"CODE",{});var awt=s(Q4e);Fnr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),Tnr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(x7,"CODE",{});var nwt=s(W4e);Mnr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),Enr=r(x7,":"),x7.forEach(t),Cnr=i(ua),H4e=n(ua,"UL",{});var swt=s(H4e);f5=n(swt,"LI",{});var BNe=s(f5);U4e=n(BNe,"STRONG",{});var lwt=s(U4e);wnr=r(lwt,"tapas"),lwt.forEach(t),Anr=r(BNe," \u2014 "),dW=n(BNe,"A",{href:!0});var iwt=s(dW);Lnr=r(iwt,"TapasForQuestionAnswering"),iwt.forEach(t),ynr=r(BNe," (TAPAS model)"),BNe.forEach(t),swt.forEach(t),xnr=i(ua),m5=n(ua,"P",{});var NNe=s(m5);$nr=r(NNe,"The model is set in evaluation mode by default using "),J4e=n(NNe,"CODE",{});var dwt=s(J4e);knr=r(dwt,"model.eval()"),dwt.forEach(t),Snr=r(NNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(NNe,"CODE",{});var cwt=s(Y4e);Rnr=r(cwt,"model.train()"),cwt.forEach(t),NNe.forEach(t),Pnr=i(ua),T(g5.$$.fragment,ua),ua.forEach(t),fl.forEach(t),kXe=i(f),vd=n(f,"H2",{class:!0});var IQe=s(vd);h5=n(IQe,"A",{id:!0,class:!0,href:!0});var fwt=s(h5);K4e=n(fwt,"SPAN",{});var mwt=s(K4e);T(k8.$$.fragment,mwt),mwt.forEach(t),fwt.forEach(t),Bnr=i(IQe),Z4e=n(IQe,"SPAN",{});var gwt=s(Z4e);Nnr=r(gwt,"AutoModelForImageClassification"),gwt.forEach(t),IQe.forEach(t),SXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(S8.$$.fragment,ml),Inr=i(ml),Fd=n(ml,"P",{});var Yre=s(Fd);qnr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cW=n(Yre,"A",{href:!0});var hwt=s(cW);jnr=r(hwt,"from_pretrained()"),hwt.forEach(t),Dnr=r(Yre," class method or the "),fW=n(Yre,"A",{href:!0});var pwt=s(fW);Gnr=r(pwt,"from_config()"),pwt.forEach(t),Onr=r(Yre,` class
method.`),Yre.forEach(t),Vnr=i(ml),R8=n(ml,"P",{});var qQe=s(R8);Xnr=r(qQe,"This class cannot be instantiated directly using "),e2e=n(qQe,"CODE",{});var _wt=s(e2e);znr=r(_wt,"__init__()"),_wt.forEach(t),Qnr=r(qQe," (throws an error)."),qQe.forEach(t),Wnr=i(ml),bt=n(ml,"DIV",{class:!0});var $7=s(bt);T(P8.$$.fragment,$7),Hnr=i($7),o2e=n($7,"P",{});var uwt=s(o2e);Unr=r(uwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uwt.forEach(t),Jnr=i($7),Td=n($7,"P",{});var Kre=s(Td);Ynr=r(Kre,`Note:
Loading a model from its configuration file does `),r2e=n(Kre,"STRONG",{});var bwt=s(r2e);Knr=r(bwt,"not"),bwt.forEach(t),Znr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Kre,"A",{href:!0});var vwt=s(mW);esr=r(vwt,"from_pretrained()"),vwt.forEach(t),osr=r(Kre," to load the model weights."),Kre.forEach(t),rsr=i($7),T(p5.$$.fragment,$7),$7.forEach(t),tsr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(B8.$$.fragment,ba),asr=i(ba),t2e=n(ba,"P",{});var Fwt=s(t2e);nsr=r(Fwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fwt.forEach(t),ssr=i(ba),Wa=n(ba,"P",{});var k7=s(Wa);lsr=r(k7,"The model class to instantiate is selected based on the "),a2e=n(k7,"CODE",{});var Twt=s(a2e);isr=r(Twt,"model_type"),Twt.forEach(t),dsr=r(k7,` property of the config object (either
passed as an argument or loaded from `),n2e=n(k7,"CODE",{});var Mwt=s(n2e);csr=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),fsr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(k7,"CODE",{});var Ewt=s(s2e);msr=r(Ewt,"pretrained_model_name_or_path"),Ewt.forEach(t),gsr=r(k7,":"),k7.forEach(t),hsr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);_5=n(Te,"LI",{});var INe=s(_5);l2e=n(INe,"STRONG",{});var Cwt=s(l2e);psr=r(Cwt,"beit"),Cwt.forEach(t),_sr=r(INe," \u2014 "),gW=n(INe,"A",{href:!0});var wwt=s(gW);usr=r(wwt,"BeitForImageClassification"),wwt.forEach(t),bsr=r(INe," (BEiT model)"),INe.forEach(t),vsr=i(Te),u5=n(Te,"LI",{});var qNe=s(u5);i2e=n(qNe,"STRONG",{});var Awt=s(i2e);Fsr=r(Awt,"convnext"),Awt.forEach(t),Tsr=r(qNe," \u2014 "),hW=n(qNe,"A",{href:!0});var Lwt=s(hW);Msr=r(Lwt,"ConvNextForImageClassification"),Lwt.forEach(t),Esr=r(qNe," (ConvNeXT model)"),qNe.forEach(t),Csr=i(Te),b5=n(Te,"LI",{});var jNe=s(b5);d2e=n(jNe,"STRONG",{});var ywt=s(d2e);wsr=r(ywt,"cvt"),ywt.forEach(t),Asr=r(jNe," \u2014 "),pW=n(jNe,"A",{href:!0});var xwt=s(pW);Lsr=r(xwt,"CvtForImageClassification"),xwt.forEach(t),ysr=r(jNe," (CvT model)"),jNe.forEach(t),xsr=i(Te),v5=n(Te,"LI",{});var DNe=s(v5);c2e=n(DNe,"STRONG",{});var $wt=s(c2e);$sr=r($wt,"data2vec-vision"),$wt.forEach(t),ksr=r(DNe," \u2014 "),_W=n(DNe,"A",{href:!0});var kwt=s(_W);Ssr=r(kwt,"Data2VecVisionForImageClassification"),kwt.forEach(t),Rsr=r(DNe," (Data2VecVision model)"),DNe.forEach(t),Psr=i(Te),Hs=n(Te,"LI",{});var kS=s(Hs);f2e=n(kS,"STRONG",{});var Swt=s(f2e);Bsr=r(Swt,"deit"),Swt.forEach(t),Nsr=r(kS," \u2014 "),uW=n(kS,"A",{href:!0});var Rwt=s(uW);Isr=r(Rwt,"DeiTForImageClassification"),Rwt.forEach(t),qsr=r(kS," or "),bW=n(kS,"A",{href:!0});var Pwt=s(bW);jsr=r(Pwt,"DeiTForImageClassificationWithTeacher"),Pwt.forEach(t),Dsr=r(kS," (DeiT model)"),kS.forEach(t),Gsr=i(Te),F5=n(Te,"LI",{});var GNe=s(F5);m2e=n(GNe,"STRONG",{});var Bwt=s(m2e);Osr=r(Bwt,"imagegpt"),Bwt.forEach(t),Vsr=r(GNe," \u2014 "),vW=n(GNe,"A",{href:!0});var Nwt=s(vW);Xsr=r(Nwt,"ImageGPTForImageClassification"),Nwt.forEach(t),zsr=r(GNe," (ImageGPT model)"),GNe.forEach(t),Qsr=i(Te),Us=n(Te,"LI",{});var SS=s(Us);g2e=n(SS,"STRONG",{});var Iwt=s(g2e);Wsr=r(Iwt,"levit"),Iwt.forEach(t),Hsr=r(SS," \u2014 "),FW=n(SS,"A",{href:!0});var qwt=s(FW);Usr=r(qwt,"LevitForImageClassification"),qwt.forEach(t),Jsr=r(SS," or "),TW=n(SS,"A",{href:!0});var jwt=s(TW);Ysr=r(jwt,"LevitForImageClassificationWithTeacher"),jwt.forEach(t),Ksr=r(SS," (LeViT model)"),SS.forEach(t),Zsr=i(Te),T5=n(Te,"LI",{});var ONe=s(T5);h2e=n(ONe,"STRONG",{});var Dwt=s(h2e);elr=r(Dwt,"mobilevit"),Dwt.forEach(t),olr=r(ONe," \u2014 "),MW=n(ONe,"A",{href:!0});var Gwt=s(MW);rlr=r(Gwt,"MobileViTForImageClassification"),Gwt.forEach(t),tlr=r(ONe," (MobileViT model)"),ONe.forEach(t),alr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);p2e=n(Sf,"STRONG",{});var Owt=s(p2e);nlr=r(Owt,"perceiver"),Owt.forEach(t),slr=r(Sf," \u2014 "),EW=n(Sf,"A",{href:!0});var Vwt=s(EW);llr=r(Vwt,"PerceiverForImageClassificationLearned"),Vwt.forEach(t),ilr=r(Sf," or "),CW=n(Sf,"A",{href:!0});var Xwt=s(CW);dlr=r(Xwt,"PerceiverForImageClassificationFourier"),Xwt.forEach(t),clr=r(Sf," or "),wW=n(Sf,"A",{href:!0});var zwt=s(wW);flr=r(zwt,"PerceiverForImageClassificationConvProcessing"),zwt.forEach(t),mlr=r(Sf," (Perceiver model)"),Sf.forEach(t),glr=i(Te),M5=n(Te,"LI",{});var VNe=s(M5);_2e=n(VNe,"STRONG",{});var Qwt=s(_2e);hlr=r(Qwt,"poolformer"),Qwt.forEach(t),plr=r(VNe," \u2014 "),AW=n(VNe,"A",{href:!0});var Wwt=s(AW);_lr=r(Wwt,"PoolFormerForImageClassification"),Wwt.forEach(t),ulr=r(VNe," (PoolFormer model)"),VNe.forEach(t),blr=i(Te),E5=n(Te,"LI",{});var XNe=s(E5);u2e=n(XNe,"STRONG",{});var Hwt=s(u2e);vlr=r(Hwt,"regnet"),Hwt.forEach(t),Flr=r(XNe," \u2014 "),LW=n(XNe,"A",{href:!0});var Uwt=s(LW);Tlr=r(Uwt,"RegNetForImageClassification"),Uwt.forEach(t),Mlr=r(XNe," (RegNet model)"),XNe.forEach(t),Elr=i(Te),C5=n(Te,"LI",{});var zNe=s(C5);b2e=n(zNe,"STRONG",{});var Jwt=s(b2e);Clr=r(Jwt,"resnet"),Jwt.forEach(t),wlr=r(zNe," \u2014 "),yW=n(zNe,"A",{href:!0});var Ywt=s(yW);Alr=r(Ywt,"ResNetForImageClassification"),Ywt.forEach(t),Llr=r(zNe," (ResNet model)"),zNe.forEach(t),ylr=i(Te),w5=n(Te,"LI",{});var QNe=s(w5);v2e=n(QNe,"STRONG",{});var Kwt=s(v2e);xlr=r(Kwt,"segformer"),Kwt.forEach(t),$lr=r(QNe," \u2014 "),xW=n(QNe,"A",{href:!0});var Zwt=s(xW);klr=r(Zwt,"SegformerForImageClassification"),Zwt.forEach(t),Slr=r(QNe," (SegFormer model)"),QNe.forEach(t),Rlr=i(Te),A5=n(Te,"LI",{});var WNe=s(A5);F2e=n(WNe,"STRONG",{});var eAt=s(F2e);Plr=r(eAt,"swin"),eAt.forEach(t),Blr=r(WNe," \u2014 "),$W=n(WNe,"A",{href:!0});var oAt=s($W);Nlr=r(oAt,"SwinForImageClassification"),oAt.forEach(t),Ilr=r(WNe," (Swin Transformer model)"),WNe.forEach(t),qlr=i(Te),L5=n(Te,"LI",{});var HNe=s(L5);T2e=n(HNe,"STRONG",{});var rAt=s(T2e);jlr=r(rAt,"van"),rAt.forEach(t),Dlr=r(HNe," \u2014 "),kW=n(HNe,"A",{href:!0});var tAt=s(kW);Glr=r(tAt,"VanForImageClassification"),tAt.forEach(t),Olr=r(HNe," (VAN model)"),HNe.forEach(t),Vlr=i(Te),y5=n(Te,"LI",{});var UNe=s(y5);M2e=n(UNe,"STRONG",{});var aAt=s(M2e);Xlr=r(aAt,"vit"),aAt.forEach(t),zlr=r(UNe," \u2014 "),SW=n(UNe,"A",{href:!0});var nAt=s(SW);Qlr=r(nAt,"ViTForImageClassification"),nAt.forEach(t),Wlr=r(UNe," (ViT model)"),UNe.forEach(t),Te.forEach(t),Hlr=i(ba),x5=n(ba,"P",{});var JNe=s(x5);Ulr=r(JNe,"The model is set in evaluation mode by default using "),E2e=n(JNe,"CODE",{});var sAt=s(E2e);Jlr=r(sAt,"model.eval()"),sAt.forEach(t),Ylr=r(JNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=n(JNe,"CODE",{});var lAt=s(C2e);Klr=r(lAt,"model.train()"),lAt.forEach(t),JNe.forEach(t),Zlr=i(ba),T($5.$$.fragment,ba),ba.forEach(t),ml.forEach(t),RXe=i(f),Md=n(f,"H2",{class:!0});var jQe=s(Md);k5=n(jQe,"A",{id:!0,class:!0,href:!0});var iAt=s(k5);w2e=n(iAt,"SPAN",{});var dAt=s(w2e);T(N8.$$.fragment,dAt),dAt.forEach(t),iAt.forEach(t),eir=i(jQe),A2e=n(jQe,"SPAN",{});var cAt=s(A2e);oir=r(cAt,"AutoModelForVision2Seq"),cAt.forEach(t),jQe.forEach(t),PXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(I8.$$.fragment,gl),rir=i(gl),Ed=n(gl,"P",{});var Zre=s(Ed);tir=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=n(Zre,"A",{href:!0});var fAt=s(RW);air=r(fAt,"from_pretrained()"),fAt.forEach(t),nir=r(Zre," class method or the "),PW=n(Zre,"A",{href:!0});var mAt=s(PW);sir=r(mAt,"from_config()"),mAt.forEach(t),lir=r(Zre,` class
method.`),Zre.forEach(t),iir=i(gl),q8=n(gl,"P",{});var DQe=s(q8);dir=r(DQe,"This class cannot be instantiated directly using "),L2e=n(DQe,"CODE",{});var gAt=s(L2e);cir=r(gAt,"__init__()"),gAt.forEach(t),fir=r(DQe," (throws an error)."),DQe.forEach(t),mir=i(gl),Ft=n(gl,"DIV",{class:!0});var S7=s(Ft);T(j8.$$.fragment,S7),gir=i(S7),y2e=n(S7,"P",{});var hAt=s(y2e);hir=r(hAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hAt.forEach(t),pir=i(S7),Cd=n(S7,"P",{});var ete=s(Cd);_ir=r(ete,`Note:
Loading a model from its configuration file does `),x2e=n(ete,"STRONG",{});var pAt=s(x2e);uir=r(pAt,"not"),pAt.forEach(t),bir=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(ete,"A",{href:!0});var _At=s(BW);vir=r(_At,"from_pretrained()"),_At.forEach(t),Fir=r(ete," to load the model weights."),ete.forEach(t),Tir=i(S7),T(S5.$$.fragment,S7),S7.forEach(t),Mir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(D8.$$.fragment,va),Eir=i(va),$2e=n(va,"P",{});var uAt=s($2e);Cir=r(uAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uAt.forEach(t),wir=i(va),Ha=n(va,"P",{});var R7=s(Ha);Air=r(R7,"The model class to instantiate is selected based on the "),k2e=n(R7,"CODE",{});var bAt=s(k2e);Lir=r(bAt,"model_type"),bAt.forEach(t),yir=r(R7,` property of the config object (either
passed as an argument or loaded from `),S2e=n(R7,"CODE",{});var vAt=s(S2e);xir=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),$ir=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(R7,"CODE",{});var FAt=s(R2e);kir=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),Sir=r(R7,":"),R7.forEach(t),Rir=i(va),P2e=n(va,"UL",{});var TAt=s(P2e);R5=n(TAt,"LI",{});var YNe=s(R5);B2e=n(YNe,"STRONG",{});var MAt=s(B2e);Pir=r(MAt,"vision-encoder-decoder"),MAt.forEach(t),Bir=r(YNe," \u2014 "),NW=n(YNe,"A",{href:!0});var EAt=s(NW);Nir=r(EAt,"VisionEncoderDecoderModel"),EAt.forEach(t),Iir=r(YNe," (Vision Encoder decoder model)"),YNe.forEach(t),TAt.forEach(t),qir=i(va),P5=n(va,"P",{});var KNe=s(P5);jir=r(KNe,"The model is set in evaluation mode by default using "),N2e=n(KNe,"CODE",{});var CAt=s(N2e);Dir=r(CAt,"model.eval()"),CAt.forEach(t),Gir=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I2e=n(KNe,"CODE",{});var wAt=s(I2e);Oir=r(wAt,"model.train()"),wAt.forEach(t),KNe.forEach(t),Vir=i(va),T(B5.$$.fragment,va),va.forEach(t),gl.forEach(t),BXe=i(f),wd=n(f,"H2",{class:!0});var GQe=s(wd);N5=n(GQe,"A",{id:!0,class:!0,href:!0});var AAt=s(N5);q2e=n(AAt,"SPAN",{});var LAt=s(q2e);T(G8.$$.fragment,LAt),LAt.forEach(t),AAt.forEach(t),Xir=i(GQe),j2e=n(GQe,"SPAN",{});var yAt=s(j2e);zir=r(yAt,"AutoModelForVisualQuestionAnswering"),yAt.forEach(t),GQe.forEach(t),NXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(O8.$$.fragment,hl),Qir=i(hl),Ad=n(hl,"P",{});var ote=s(Ad);Wir=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),IW=n(ote,"A",{href:!0});var xAt=s(IW);Hir=r(xAt,"from_pretrained()"),xAt.forEach(t),Uir=r(ote," class method or the "),qW=n(ote,"A",{href:!0});var $At=s(qW);Jir=r($At,"from_config()"),$At.forEach(t),Yir=r(ote,` class
method.`),ote.forEach(t),Kir=i(hl),V8=n(hl,"P",{});var OQe=s(V8);Zir=r(OQe,"This class cannot be instantiated directly using "),D2e=n(OQe,"CODE",{});var kAt=s(D2e);edr=r(kAt,"__init__()"),kAt.forEach(t),odr=r(OQe," (throws an error)."),OQe.forEach(t),rdr=i(hl),Tt=n(hl,"DIV",{class:!0});var P7=s(Tt);T(X8.$$.fragment,P7),tdr=i(P7),G2e=n(P7,"P",{});var SAt=s(G2e);adr=r(SAt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),SAt.forEach(t),ndr=i(P7),Ld=n(P7,"P",{});var rte=s(Ld);sdr=r(rte,`Note:
Loading a model from its configuration file does `),O2e=n(rte,"STRONG",{});var RAt=s(O2e);ldr=r(RAt,"not"),RAt.forEach(t),idr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(rte,"A",{href:!0});var PAt=s(jW);ddr=r(PAt,"from_pretrained()"),PAt.forEach(t),cdr=r(rte," to load the model weights."),rte.forEach(t),fdr=i(P7),T(I5.$$.fragment,P7),P7.forEach(t),mdr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(z8.$$.fragment,Fa),gdr=i(Fa),V2e=n(Fa,"P",{});var BAt=s(V2e);hdr=r(BAt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),BAt.forEach(t),pdr=i(Fa),Ua=n(Fa,"P",{});var B7=s(Ua);_dr=r(B7,"The model class to instantiate is selected based on the "),X2e=n(B7,"CODE",{});var NAt=s(X2e);udr=r(NAt,"model_type"),NAt.forEach(t),bdr=r(B7,` property of the config object (either
passed as an argument or loaded from `),z2e=n(B7,"CODE",{});var IAt=s(z2e);vdr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),Fdr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(B7,"CODE",{});var qAt=s(Q2e);Tdr=r(qAt,"pretrained_model_name_or_path"),qAt.forEach(t),Mdr=r(B7,":"),B7.forEach(t),Edr=i(Fa),W2e=n(Fa,"UL",{});var jAt=s(W2e);q5=n(jAt,"LI",{});var ZNe=s(q5);H2e=n(ZNe,"STRONG",{});var DAt=s(H2e);Cdr=r(DAt,"vilt"),DAt.forEach(t),wdr=r(ZNe," \u2014 "),DW=n(ZNe,"A",{href:!0});var GAt=s(DW);Adr=r(GAt,"ViltForQuestionAnswering"),GAt.forEach(t),Ldr=r(ZNe," (ViLT model)"),ZNe.forEach(t),jAt.forEach(t),ydr=i(Fa),j5=n(Fa,"P",{});var eIe=s(j5);xdr=r(eIe,"The model is set in evaluation mode by default using "),U2e=n(eIe,"CODE",{});var OAt=s(U2e);$dr=r(OAt,"model.eval()"),OAt.forEach(t),kdr=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J2e=n(eIe,"CODE",{});var VAt=s(J2e);Sdr=r(VAt,"model.train()"),VAt.forEach(t),eIe.forEach(t),Rdr=i(Fa),T(D5.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),IXe=i(f),yd=n(f,"H2",{class:!0});var VQe=s(yd);G5=n(VQe,"A",{id:!0,class:!0,href:!0});var XAt=s(G5);Y2e=n(XAt,"SPAN",{});var zAt=s(Y2e);T(Q8.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),Pdr=i(VQe),K2e=n(VQe,"SPAN",{});var QAt=s(K2e);Bdr=r(QAt,"AutoModelForAudioClassification"),QAt.forEach(t),VQe.forEach(t),qXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(W8.$$.fragment,pl),Ndr=i(pl),xd=n(pl,"P",{});var tte=s(xd);Idr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GW=n(tte,"A",{href:!0});var WAt=s(GW);qdr=r(WAt,"from_pretrained()"),WAt.forEach(t),jdr=r(tte," class method or the "),OW=n(tte,"A",{href:!0});var HAt=s(OW);Ddr=r(HAt,"from_config()"),HAt.forEach(t),Gdr=r(tte,` class
method.`),tte.forEach(t),Odr=i(pl),H8=n(pl,"P",{});var XQe=s(H8);Vdr=r(XQe,"This class cannot be instantiated directly using "),Z2e=n(XQe,"CODE",{});var UAt=s(Z2e);Xdr=r(UAt,"__init__()"),UAt.forEach(t),zdr=r(XQe," (throws an error)."),XQe.forEach(t),Qdr=i(pl),Mt=n(pl,"DIV",{class:!0});var N7=s(Mt);T(U8.$$.fragment,N7),Wdr=i(N7),ebe=n(N7,"P",{});var JAt=s(ebe);Hdr=r(JAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JAt.forEach(t),Udr=i(N7),$d=n(N7,"P",{});var ate=s($d);Jdr=r(ate,`Note:
Loading a model from its configuration file does `),obe=n(ate,"STRONG",{});var YAt=s(obe);Ydr=r(YAt,"not"),YAt.forEach(t),Kdr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(ate,"A",{href:!0});var KAt=s(VW);Zdr=r(KAt,"from_pretrained()"),KAt.forEach(t),ecr=r(ate," to load the model weights."),ate.forEach(t),ocr=i(N7),T(O5.$$.fragment,N7),N7.forEach(t),rcr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(J8.$$.fragment,Ta),tcr=i(Ta),rbe=n(Ta,"P",{});var ZAt=s(rbe);acr=r(ZAt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZAt.forEach(t),ncr=i(Ta),Ja=n(Ta,"P",{});var I7=s(Ja);scr=r(I7,"The model class to instantiate is selected based on the "),tbe=n(I7,"CODE",{});var e7t=s(tbe);lcr=r(e7t,"model_type"),e7t.forEach(t),icr=r(I7,` property of the config object (either
passed as an argument or loaded from `),abe=n(I7,"CODE",{});var o7t=s(abe);dcr=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),ccr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(I7,"CODE",{});var r7t=s(nbe);fcr=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),mcr=r(I7,":"),I7.forEach(t),gcr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);V5=n(ze,"LI",{});var oIe=s(V5);sbe=n(oIe,"STRONG",{});var t7t=s(sbe);hcr=r(t7t,"data2vec-audio"),t7t.forEach(t),pcr=r(oIe," \u2014 "),XW=n(oIe,"A",{href:!0});var a7t=s(XW);_cr=r(a7t,"Data2VecAudioForSequenceClassification"),a7t.forEach(t),ucr=r(oIe," (Data2VecAudio model)"),oIe.forEach(t),bcr=i(ze),X5=n(ze,"LI",{});var rIe=s(X5);lbe=n(rIe,"STRONG",{});var n7t=s(lbe);vcr=r(n7t,"hubert"),n7t.forEach(t),Fcr=r(rIe," \u2014 "),zW=n(rIe,"A",{href:!0});var s7t=s(zW);Tcr=r(s7t,"HubertForSequenceClassification"),s7t.forEach(t),Mcr=r(rIe," (Hubert model)"),rIe.forEach(t),Ecr=i(ze),z5=n(ze,"LI",{});var tIe=s(z5);ibe=n(tIe,"STRONG",{});var l7t=s(ibe);Ccr=r(l7t,"sew"),l7t.forEach(t),wcr=r(tIe," \u2014 "),QW=n(tIe,"A",{href:!0});var i7t=s(QW);Acr=r(i7t,"SEWForSequenceClassification"),i7t.forEach(t),Lcr=r(tIe," (SEW model)"),tIe.forEach(t),ycr=i(ze),Q5=n(ze,"LI",{});var aIe=s(Q5);dbe=n(aIe,"STRONG",{});var d7t=s(dbe);xcr=r(d7t,"sew-d"),d7t.forEach(t),$cr=r(aIe," \u2014 "),WW=n(aIe,"A",{href:!0});var c7t=s(WW);kcr=r(c7t,"SEWDForSequenceClassification"),c7t.forEach(t),Scr=r(aIe," (SEW-D model)"),aIe.forEach(t),Rcr=i(ze),W5=n(ze,"LI",{});var nIe=s(W5);cbe=n(nIe,"STRONG",{});var f7t=s(cbe);Pcr=r(f7t,"unispeech"),f7t.forEach(t),Bcr=r(nIe," \u2014 "),HW=n(nIe,"A",{href:!0});var m7t=s(HW);Ncr=r(m7t,"UniSpeechForSequenceClassification"),m7t.forEach(t),Icr=r(nIe," (UniSpeech model)"),nIe.forEach(t),qcr=i(ze),H5=n(ze,"LI",{});var sIe=s(H5);fbe=n(sIe,"STRONG",{});var g7t=s(fbe);jcr=r(g7t,"unispeech-sat"),g7t.forEach(t),Dcr=r(sIe," \u2014 "),UW=n(sIe,"A",{href:!0});var h7t=s(UW);Gcr=r(h7t,"UniSpeechSatForSequenceClassification"),h7t.forEach(t),Ocr=r(sIe," (UniSpeechSat model)"),sIe.forEach(t),Vcr=i(ze),U5=n(ze,"LI",{});var lIe=s(U5);mbe=n(lIe,"STRONG",{});var p7t=s(mbe);Xcr=r(p7t,"wav2vec2"),p7t.forEach(t),zcr=r(lIe," \u2014 "),JW=n(lIe,"A",{href:!0});var _7t=s(JW);Qcr=r(_7t,"Wav2Vec2ForSequenceClassification"),_7t.forEach(t),Wcr=r(lIe," (Wav2Vec2 model)"),lIe.forEach(t),Hcr=i(ze),J5=n(ze,"LI",{});var iIe=s(J5);gbe=n(iIe,"STRONG",{});var u7t=s(gbe);Ucr=r(u7t,"wav2vec2-conformer"),u7t.forEach(t),Jcr=r(iIe," \u2014 "),YW=n(iIe,"A",{href:!0});var b7t=s(YW);Ycr=r(b7t,"Wav2Vec2ConformerForSequenceClassification"),b7t.forEach(t),Kcr=r(iIe," (Wav2Vec2-Conformer model)"),iIe.forEach(t),Zcr=i(ze),Y5=n(ze,"LI",{});var dIe=s(Y5);hbe=n(dIe,"STRONG",{});var v7t=s(hbe);efr=r(v7t,"wavlm"),v7t.forEach(t),ofr=r(dIe," \u2014 "),KW=n(dIe,"A",{href:!0});var F7t=s(KW);rfr=r(F7t,"WavLMForSequenceClassification"),F7t.forEach(t),tfr=r(dIe," (WavLM model)"),dIe.forEach(t),ze.forEach(t),afr=i(Ta),K5=n(Ta,"P",{});var cIe=s(K5);nfr=r(cIe,"The model is set in evaluation mode by default using "),pbe=n(cIe,"CODE",{});var T7t=s(pbe);sfr=r(T7t,"model.eval()"),T7t.forEach(t),lfr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(cIe,"CODE",{});var M7t=s(_be);ifr=r(M7t,"model.train()"),M7t.forEach(t),cIe.forEach(t),dfr=i(Ta),T(Z5.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),jXe=i(f),kd=n(f,"H2",{class:!0});var zQe=s(kd);eF=n(zQe,"A",{id:!0,class:!0,href:!0});var E7t=s(eF);ube=n(E7t,"SPAN",{});var C7t=s(ube);T(Y8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),cfr=i(zQe),bbe=n(zQe,"SPAN",{});var w7t=s(bbe);ffr=r(w7t,"AutoModelForAudioFrameClassification"),w7t.forEach(t),zQe.forEach(t),DXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(K8.$$.fragment,_l),mfr=i(_l),Sd=n(_l,"P",{});var nte=s(Sd);gfr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ZW=n(nte,"A",{href:!0});var A7t=s(ZW);hfr=r(A7t,"from_pretrained()"),A7t.forEach(t),pfr=r(nte," class method or the "),eH=n(nte,"A",{href:!0});var L7t=s(eH);_fr=r(L7t,"from_config()"),L7t.forEach(t),ufr=r(nte,` class
method.`),nte.forEach(t),bfr=i(_l),Z8=n(_l,"P",{});var QQe=s(Z8);vfr=r(QQe,"This class cannot be instantiated directly using "),vbe=n(QQe,"CODE",{});var y7t=s(vbe);Ffr=r(y7t,"__init__()"),y7t.forEach(t),Tfr=r(QQe," (throws an error)."),QQe.forEach(t),Mfr=i(_l),Et=n(_l,"DIV",{class:!0});var q7=s(Et);T(e9.$$.fragment,q7),Efr=i(q7),Fbe=n(q7,"P",{});var x7t=s(Fbe);Cfr=r(x7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),x7t.forEach(t),wfr=i(q7),Rd=n(q7,"P",{});var ste=s(Rd);Afr=r(ste,`Note:
Loading a model from its configuration file does `),Tbe=n(ste,"STRONG",{});var $7t=s(Tbe);Lfr=r($7t,"not"),$7t.forEach(t),yfr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(ste,"A",{href:!0});var k7t=s(oH);xfr=r(k7t,"from_pretrained()"),k7t.forEach(t),$fr=r(ste," to load the model weights."),ste.forEach(t),kfr=i(q7),T(oF.$$.fragment,q7),q7.forEach(t),Sfr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(o9.$$.fragment,Ma),Rfr=i(Ma),Mbe=n(Ma,"P",{});var S7t=s(Mbe);Pfr=r(S7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),S7t.forEach(t),Bfr=i(Ma),Ya=n(Ma,"P",{});var j7=s(Ya);Nfr=r(j7,"The model class to instantiate is selected based on the "),Ebe=n(j7,"CODE",{});var R7t=s(Ebe);Ifr=r(R7t,"model_type"),R7t.forEach(t),qfr=r(j7,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(j7,"CODE",{});var P7t=s(Cbe);jfr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),Dfr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(j7,"CODE",{});var B7t=s(wbe);Gfr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),Ofr=r(j7,":"),j7.forEach(t),Vfr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);rF=n(ul,"LI",{});var fIe=s(rF);Abe=n(fIe,"STRONG",{});var N7t=s(Abe);Xfr=r(N7t,"data2vec-audio"),N7t.forEach(t),zfr=r(fIe," \u2014 "),rH=n(fIe,"A",{href:!0});var I7t=s(rH);Qfr=r(I7t,"Data2VecAudioForAudioFrameClassification"),I7t.forEach(t),Wfr=r(fIe," (Data2VecAudio model)"),fIe.forEach(t),Hfr=i(ul),tF=n(ul,"LI",{});var mIe=s(tF);Lbe=n(mIe,"STRONG",{});var q7t=s(Lbe);Ufr=r(q7t,"unispeech-sat"),q7t.forEach(t),Jfr=r(mIe," \u2014 "),tH=n(mIe,"A",{href:!0});var j7t=s(tH);Yfr=r(j7t,"UniSpeechSatForAudioFrameClassification"),j7t.forEach(t),Kfr=r(mIe," (UniSpeechSat model)"),mIe.forEach(t),Zfr=i(ul),aF=n(ul,"LI",{});var gIe=s(aF);ybe=n(gIe,"STRONG",{});var D7t=s(ybe);emr=r(D7t,"wav2vec2"),D7t.forEach(t),omr=r(gIe," \u2014 "),aH=n(gIe,"A",{href:!0});var G7t=s(aH);rmr=r(G7t,"Wav2Vec2ForAudioFrameClassification"),G7t.forEach(t),tmr=r(gIe," (Wav2Vec2 model)"),gIe.forEach(t),amr=i(ul),nF=n(ul,"LI",{});var hIe=s(nF);xbe=n(hIe,"STRONG",{});var O7t=s(xbe);nmr=r(O7t,"wav2vec2-conformer"),O7t.forEach(t),smr=r(hIe," \u2014 "),nH=n(hIe,"A",{href:!0});var V7t=s(nH);lmr=r(V7t,"Wav2Vec2ConformerForAudioFrameClassification"),V7t.forEach(t),imr=r(hIe," (Wav2Vec2-Conformer model)"),hIe.forEach(t),dmr=i(ul),sF=n(ul,"LI",{});var pIe=s(sF);$be=n(pIe,"STRONG",{});var X7t=s($be);cmr=r(X7t,"wavlm"),X7t.forEach(t),fmr=r(pIe," \u2014 "),sH=n(pIe,"A",{href:!0});var z7t=s(sH);mmr=r(z7t,"WavLMForAudioFrameClassification"),z7t.forEach(t),gmr=r(pIe," (WavLM model)"),pIe.forEach(t),ul.forEach(t),hmr=i(Ma),lF=n(Ma,"P",{});var _Ie=s(lF);pmr=r(_Ie,"The model is set in evaluation mode by default using "),kbe=n(_Ie,"CODE",{});var Q7t=s(kbe);_mr=r(Q7t,"model.eval()"),Q7t.forEach(t),umr=r(_Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(_Ie,"CODE",{});var W7t=s(Sbe);bmr=r(W7t,"model.train()"),W7t.forEach(t),_Ie.forEach(t),vmr=i(Ma),T(iF.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),GXe=i(f),Pd=n(f,"H2",{class:!0});var WQe=s(Pd);dF=n(WQe,"A",{id:!0,class:!0,href:!0});var H7t=s(dF);Rbe=n(H7t,"SPAN",{});var U7t=s(Rbe);T(r9.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),Fmr=i(WQe),Pbe=n(WQe,"SPAN",{});var J7t=s(Pbe);Tmr=r(J7t,"AutoModelForCTC"),J7t.forEach(t),WQe.forEach(t),OXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(t9.$$.fragment,bl),Mmr=i(bl),Bd=n(bl,"P",{});var lte=s(Bd);Emr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),lH=n(lte,"A",{href:!0});var Y7t=s(lH);Cmr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),wmr=r(lte," class method or the "),iH=n(lte,"A",{href:!0});var K7t=s(iH);Amr=r(K7t,"from_config()"),K7t.forEach(t),Lmr=r(lte,` class
method.`),lte.forEach(t),ymr=i(bl),a9=n(bl,"P",{});var HQe=s(a9);xmr=r(HQe,"This class cannot be instantiated directly using "),Bbe=n(HQe,"CODE",{});var Z7t=s(Bbe);$mr=r(Z7t,"__init__()"),Z7t.forEach(t),kmr=r(HQe," (throws an error)."),HQe.forEach(t),Smr=i(bl),Ct=n(bl,"DIV",{class:!0});var D7=s(Ct);T(n9.$$.fragment,D7),Rmr=i(D7),Nbe=n(D7,"P",{});var eLt=s(Nbe);Pmr=r(eLt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eLt.forEach(t),Bmr=i(D7),Nd=n(D7,"P",{});var ite=s(Nd);Nmr=r(ite,`Note:
Loading a model from its configuration file does `),Ibe=n(ite,"STRONG",{});var oLt=s(Ibe);Imr=r(oLt,"not"),oLt.forEach(t),qmr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(ite,"A",{href:!0});var rLt=s(dH);jmr=r(rLt,"from_pretrained()"),rLt.forEach(t),Dmr=r(ite," to load the model weights."),ite.forEach(t),Gmr=i(D7),T(cF.$$.fragment,D7),D7.forEach(t),Omr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(s9.$$.fragment,Ea),Vmr=i(Ea),qbe=n(Ea,"P",{});var tLt=s(qbe);Xmr=r(tLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tLt.forEach(t),zmr=i(Ea),Ka=n(Ea,"P",{});var G7=s(Ka);Qmr=r(G7,"The model class to instantiate is selected based on the "),jbe=n(G7,"CODE",{});var aLt=s(jbe);Wmr=r(aLt,"model_type"),aLt.forEach(t),Hmr=r(G7,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(G7,"CODE",{});var nLt=s(Dbe);Umr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),Jmr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(G7,"CODE",{});var sLt=s(Gbe);Ymr=r(sLt,"pretrained_model_name_or_path"),sLt.forEach(t),Kmr=r(G7,":"),G7.forEach(t),Zmr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);fF=n(Be,"LI",{});var uIe=s(fF);Obe=n(uIe,"STRONG",{});var lLt=s(Obe);egr=r(lLt,"data2vec-audio"),lLt.forEach(t),ogr=r(uIe," \u2014 "),cH=n(uIe,"A",{href:!0});var iLt=s(cH);rgr=r(iLt,"Data2VecAudioForCTC"),iLt.forEach(t),tgr=r(uIe," (Data2VecAudio model)"),uIe.forEach(t),agr=i(Be),mF=n(Be,"LI",{});var bIe=s(mF);Vbe=n(bIe,"STRONG",{});var dLt=s(Vbe);ngr=r(dLt,"hubert"),dLt.forEach(t),sgr=r(bIe," \u2014 "),fH=n(bIe,"A",{href:!0});var cLt=s(fH);lgr=r(cLt,"HubertForCTC"),cLt.forEach(t),igr=r(bIe," (Hubert model)"),bIe.forEach(t),dgr=i(Be),gF=n(Be,"LI",{});var vIe=s(gF);Xbe=n(vIe,"STRONG",{});var fLt=s(Xbe);cgr=r(fLt,"mctct"),fLt.forEach(t),fgr=r(vIe," \u2014 "),mH=n(vIe,"A",{href:!0});var mLt=s(mH);mgr=r(mLt,"MCTCTForCTC"),mLt.forEach(t),ggr=r(vIe," (M-CTC-T model)"),vIe.forEach(t),hgr=i(Be),hF=n(Be,"LI",{});var FIe=s(hF);zbe=n(FIe,"STRONG",{});var gLt=s(zbe);pgr=r(gLt,"sew"),gLt.forEach(t),_gr=r(FIe," \u2014 "),gH=n(FIe,"A",{href:!0});var hLt=s(gH);ugr=r(hLt,"SEWForCTC"),hLt.forEach(t),bgr=r(FIe," (SEW model)"),FIe.forEach(t),vgr=i(Be),pF=n(Be,"LI",{});var TIe=s(pF);Qbe=n(TIe,"STRONG",{});var pLt=s(Qbe);Fgr=r(pLt,"sew-d"),pLt.forEach(t),Tgr=r(TIe," \u2014 "),hH=n(TIe,"A",{href:!0});var _Lt=s(hH);Mgr=r(_Lt,"SEWDForCTC"),_Lt.forEach(t),Egr=r(TIe," (SEW-D model)"),TIe.forEach(t),Cgr=i(Be),_F=n(Be,"LI",{});var MIe=s(_F);Wbe=n(MIe,"STRONG",{});var uLt=s(Wbe);wgr=r(uLt,"unispeech"),uLt.forEach(t),Agr=r(MIe," \u2014 "),pH=n(MIe,"A",{href:!0});var bLt=s(pH);Lgr=r(bLt,"UniSpeechForCTC"),bLt.forEach(t),ygr=r(MIe," (UniSpeech model)"),MIe.forEach(t),xgr=i(Be),uF=n(Be,"LI",{});var EIe=s(uF);Hbe=n(EIe,"STRONG",{});var vLt=s(Hbe);$gr=r(vLt,"unispeech-sat"),vLt.forEach(t),kgr=r(EIe," \u2014 "),_H=n(EIe,"A",{href:!0});var FLt=s(_H);Sgr=r(FLt,"UniSpeechSatForCTC"),FLt.forEach(t),Rgr=r(EIe," (UniSpeechSat model)"),EIe.forEach(t),Pgr=i(Be),bF=n(Be,"LI",{});var CIe=s(bF);Ube=n(CIe,"STRONG",{});var TLt=s(Ube);Bgr=r(TLt,"wav2vec2"),TLt.forEach(t),Ngr=r(CIe," \u2014 "),uH=n(CIe,"A",{href:!0});var MLt=s(uH);Igr=r(MLt,"Wav2Vec2ForCTC"),MLt.forEach(t),qgr=r(CIe," (Wav2Vec2 model)"),CIe.forEach(t),jgr=i(Be),vF=n(Be,"LI",{});var wIe=s(vF);Jbe=n(wIe,"STRONG",{});var ELt=s(Jbe);Dgr=r(ELt,"wav2vec2-conformer"),ELt.forEach(t),Ggr=r(wIe," \u2014 "),bH=n(wIe,"A",{href:!0});var CLt=s(bH);Ogr=r(CLt,"Wav2Vec2ConformerForCTC"),CLt.forEach(t),Vgr=r(wIe," (Wav2Vec2-Conformer model)"),wIe.forEach(t),Xgr=i(Be),FF=n(Be,"LI",{});var AIe=s(FF);Ybe=n(AIe,"STRONG",{});var wLt=s(Ybe);zgr=r(wLt,"wavlm"),wLt.forEach(t),Qgr=r(AIe," \u2014 "),vH=n(AIe,"A",{href:!0});var ALt=s(vH);Wgr=r(ALt,"WavLMForCTC"),ALt.forEach(t),Hgr=r(AIe," (WavLM model)"),AIe.forEach(t),Be.forEach(t),Ugr=i(Ea),TF=n(Ea,"P",{});var LIe=s(TF);Jgr=r(LIe,"The model is set in evaluation mode by default using "),Kbe=n(LIe,"CODE",{});var LLt=s(Kbe);Ygr=r(LLt,"model.eval()"),LLt.forEach(t),Kgr=r(LIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(LIe,"CODE",{});var yLt=s(Zbe);Zgr=r(yLt,"model.train()"),yLt.forEach(t),LIe.forEach(t),ehr=i(Ea),T(MF.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),VXe=i(f),Id=n(f,"H2",{class:!0});var UQe=s(Id);EF=n(UQe,"A",{id:!0,class:!0,href:!0});var xLt=s(EF);eve=n(xLt,"SPAN",{});var $Lt=s(eve);T(l9.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),ohr=i(UQe),ove=n(UQe,"SPAN",{});var kLt=s(ove);rhr=r(kLt,"AutoModelForSpeechSeq2Seq"),kLt.forEach(t),UQe.forEach(t),XXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(i9.$$.fragment,vl),thr=i(vl),qd=n(vl,"P",{});var dte=s(qd);ahr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FH=n(dte,"A",{href:!0});var SLt=s(FH);nhr=r(SLt,"from_pretrained()"),SLt.forEach(t),shr=r(dte," class method or the "),TH=n(dte,"A",{href:!0});var RLt=s(TH);lhr=r(RLt,"from_config()"),RLt.forEach(t),ihr=r(dte,` class
method.`),dte.forEach(t),dhr=i(vl),d9=n(vl,"P",{});var JQe=s(d9);chr=r(JQe,"This class cannot be instantiated directly using "),rve=n(JQe,"CODE",{});var PLt=s(rve);fhr=r(PLt,"__init__()"),PLt.forEach(t),mhr=r(JQe," (throws an error)."),JQe.forEach(t),ghr=i(vl),wt=n(vl,"DIV",{class:!0});var O7=s(wt);T(c9.$$.fragment,O7),hhr=i(O7),tve=n(O7,"P",{});var BLt=s(tve);phr=r(BLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BLt.forEach(t),_hr=i(O7),jd=n(O7,"P",{});var cte=s(jd);uhr=r(cte,`Note:
Loading a model from its configuration file does `),ave=n(cte,"STRONG",{});var NLt=s(ave);bhr=r(NLt,"not"),NLt.forEach(t),vhr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(cte,"A",{href:!0});var ILt=s(MH);Fhr=r(ILt,"from_pretrained()"),ILt.forEach(t),Thr=r(cte," to load the model weights."),cte.forEach(t),Mhr=i(O7),T(CF.$$.fragment,O7),O7.forEach(t),Ehr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(f9.$$.fragment,Ca),Chr=i(Ca),nve=n(Ca,"P",{});var qLt=s(nve);whr=r(qLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qLt.forEach(t),Ahr=i(Ca),Za=n(Ca,"P",{});var V7=s(Za);Lhr=r(V7,"The model class to instantiate is selected based on the "),sve=n(V7,"CODE",{});var jLt=s(sve);yhr=r(jLt,"model_type"),jLt.forEach(t),xhr=r(V7,` property of the config object (either
passed as an argument or loaded from `),lve=n(V7,"CODE",{});var DLt=s(lve);$hr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),khr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(V7,"CODE",{});var GLt=s(ive);Shr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),Rhr=r(V7,":"),V7.forEach(t),Phr=i(Ca),m9=n(Ca,"UL",{});var YQe=s(m9);wF=n(YQe,"LI",{});var yIe=s(wF);dve=n(yIe,"STRONG",{});var OLt=s(dve);Bhr=r(OLt,"speech-encoder-decoder"),OLt.forEach(t),Nhr=r(yIe," \u2014 "),EH=n(yIe,"A",{href:!0});var VLt=s(EH);Ihr=r(VLt,"SpeechEncoderDecoderModel"),VLt.forEach(t),qhr=r(yIe," (Speech Encoder decoder model)"),yIe.forEach(t),jhr=i(YQe),AF=n(YQe,"LI",{});var xIe=s(AF);cve=n(xIe,"STRONG",{});var XLt=s(cve);Dhr=r(XLt,"speech_to_text"),XLt.forEach(t),Ghr=r(xIe," \u2014 "),CH=n(xIe,"A",{href:!0});var zLt=s(CH);Ohr=r(zLt,"Speech2TextForConditionalGeneration"),zLt.forEach(t),Vhr=r(xIe," (Speech2Text model)"),xIe.forEach(t),YQe.forEach(t),Xhr=i(Ca),LF=n(Ca,"P",{});var $Ie=s(LF);zhr=r($Ie,"The model is set in evaluation mode by default using "),fve=n($Ie,"CODE",{});var QLt=s(fve);Qhr=r(QLt,"model.eval()"),QLt.forEach(t),Whr=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n($Ie,"CODE",{});var WLt=s(mve);Hhr=r(WLt,"model.train()"),WLt.forEach(t),$Ie.forEach(t),Uhr=i(Ca),T(yF.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),zXe=i(f),Dd=n(f,"H2",{class:!0});var KQe=s(Dd);xF=n(KQe,"A",{id:!0,class:!0,href:!0});var HLt=s(xF);gve=n(HLt,"SPAN",{});var ULt=s(gve);T(g9.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),Jhr=i(KQe),hve=n(KQe,"SPAN",{});var JLt=s(hve);Yhr=r(JLt,"AutoModelForAudioXVector"),JLt.forEach(t),KQe.forEach(t),QXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(h9.$$.fragment,Fl),Khr=i(Fl),Gd=n(Fl,"P",{});var fte=s(Gd);Zhr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wH=n(fte,"A",{href:!0});var YLt=s(wH);epr=r(YLt,"from_pretrained()"),YLt.forEach(t),opr=r(fte," class method or the "),AH=n(fte,"A",{href:!0});var KLt=s(AH);rpr=r(KLt,"from_config()"),KLt.forEach(t),tpr=r(fte,` class
method.`),fte.forEach(t),apr=i(Fl),p9=n(Fl,"P",{});var ZQe=s(p9);npr=r(ZQe,"This class cannot be instantiated directly using "),pve=n(ZQe,"CODE",{});var ZLt=s(pve);spr=r(ZLt,"__init__()"),ZLt.forEach(t),lpr=r(ZQe," (throws an error)."),ZQe.forEach(t),ipr=i(Fl),At=n(Fl,"DIV",{class:!0});var X7=s(At);T(_9.$$.fragment,X7),dpr=i(X7),_ve=n(X7,"P",{});var eyt=s(_ve);cpr=r(eyt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eyt.forEach(t),fpr=i(X7),Od=n(X7,"P",{});var mte=s(Od);mpr=r(mte,`Note:
Loading a model from its configuration file does `),uve=n(mte,"STRONG",{});var oyt=s(uve);gpr=r(oyt,"not"),oyt.forEach(t),hpr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(mte,"A",{href:!0});var ryt=s(LH);ppr=r(ryt,"from_pretrained()"),ryt.forEach(t),_pr=r(mte," to load the model weights."),mte.forEach(t),upr=i(X7),T($F.$$.fragment,X7),X7.forEach(t),bpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(u9.$$.fragment,wa),vpr=i(wa),bve=n(wa,"P",{});var tyt=s(bve);Fpr=r(tyt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tyt.forEach(t),Tpr=i(wa),en=n(wa,"P",{});var z7=s(en);Mpr=r(z7,"The model class to instantiate is selected based on the "),vve=n(z7,"CODE",{});var ayt=s(vve);Epr=r(ayt,"model_type"),ayt.forEach(t),Cpr=r(z7,` property of the config object (either
passed as an argument or loaded from `),Fve=n(z7,"CODE",{});var nyt=s(Fve);wpr=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),Apr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(z7,"CODE",{});var syt=s(Tve);Lpr=r(syt,"pretrained_model_name_or_path"),syt.forEach(t),ypr=r(z7,":"),z7.forEach(t),xpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);kF=n(Tl,"LI",{});var kIe=s(kF);Mve=n(kIe,"STRONG",{});var lyt=s(Mve);$pr=r(lyt,"data2vec-audio"),lyt.forEach(t),kpr=r(kIe," \u2014 "),yH=n(kIe,"A",{href:!0});var iyt=s(yH);Spr=r(iyt,"Data2VecAudioForXVector"),iyt.forEach(t),Rpr=r(kIe," (Data2VecAudio model)"),kIe.forEach(t),Ppr=i(Tl),SF=n(Tl,"LI",{});var SIe=s(SF);Eve=n(SIe,"STRONG",{});var dyt=s(Eve);Bpr=r(dyt,"unispeech-sat"),dyt.forEach(t),Npr=r(SIe," \u2014 "),xH=n(SIe,"A",{href:!0});var cyt=s(xH);Ipr=r(cyt,"UniSpeechSatForXVector"),cyt.forEach(t),qpr=r(SIe," (UniSpeechSat model)"),SIe.forEach(t),jpr=i(Tl),RF=n(Tl,"LI",{});var RIe=s(RF);Cve=n(RIe,"STRONG",{});var fyt=s(Cve);Dpr=r(fyt,"wav2vec2"),fyt.forEach(t),Gpr=r(RIe," \u2014 "),$H=n(RIe,"A",{href:!0});var myt=s($H);Opr=r(myt,"Wav2Vec2ForXVector"),myt.forEach(t),Vpr=r(RIe," (Wav2Vec2 model)"),RIe.forEach(t),Xpr=i(Tl),PF=n(Tl,"LI",{});var PIe=s(PF);wve=n(PIe,"STRONG",{});var gyt=s(wve);zpr=r(gyt,"wav2vec2-conformer"),gyt.forEach(t),Qpr=r(PIe," \u2014 "),kH=n(PIe,"A",{href:!0});var hyt=s(kH);Wpr=r(hyt,"Wav2Vec2ConformerForXVector"),hyt.forEach(t),Hpr=r(PIe," (Wav2Vec2-Conformer model)"),PIe.forEach(t),Upr=i(Tl),BF=n(Tl,"LI",{});var BIe=s(BF);Ave=n(BIe,"STRONG",{});var pyt=s(Ave);Jpr=r(pyt,"wavlm"),pyt.forEach(t),Ypr=r(BIe," \u2014 "),SH=n(BIe,"A",{href:!0});var _yt=s(SH);Kpr=r(_yt,"WavLMForXVector"),_yt.forEach(t),Zpr=r(BIe," (WavLM model)"),BIe.forEach(t),Tl.forEach(t),e_r=i(wa),NF=n(wa,"P",{});var NIe=s(NF);o_r=r(NIe,"The model is set in evaluation mode by default using "),Lve=n(NIe,"CODE",{});var uyt=s(Lve);r_r=r(uyt,"model.eval()"),uyt.forEach(t),t_r=r(NIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(NIe,"CODE",{});var byt=s(yve);a_r=r(byt,"model.train()"),byt.forEach(t),NIe.forEach(t),n_r=i(wa),T(IF.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),WXe=i(f),Vd=n(f,"H2",{class:!0});var eWe=s(Vd);qF=n(eWe,"A",{id:!0,class:!0,href:!0});var vyt=s(qF);xve=n(vyt,"SPAN",{});var Fyt=s(xve);T(b9.$$.fragment,Fyt),Fyt.forEach(t),vyt.forEach(t),s_r=i(eWe),$ve=n(eWe,"SPAN",{});var Tyt=s($ve);l_r=r(Tyt,"AutoModelForMaskedImageModeling"),Tyt.forEach(t),eWe.forEach(t),HXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(v9.$$.fragment,Ml),i_r=i(Ml),Xd=n(Ml,"P",{});var gte=s(Xd);d_r=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RH=n(gte,"A",{href:!0});var Myt=s(RH);c_r=r(Myt,"from_pretrained()"),Myt.forEach(t),f_r=r(gte," class method or the "),PH=n(gte,"A",{href:!0});var Eyt=s(PH);m_r=r(Eyt,"from_config()"),Eyt.forEach(t),g_r=r(gte,` class
method.`),gte.forEach(t),h_r=i(Ml),F9=n(Ml,"P",{});var oWe=s(F9);p_r=r(oWe,"This class cannot be instantiated directly using "),kve=n(oWe,"CODE",{});var Cyt=s(kve);__r=r(Cyt,"__init__()"),Cyt.forEach(t),u_r=r(oWe," (throws an error)."),oWe.forEach(t),b_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Q7=s(Lt);T(T9.$$.fragment,Q7),v_r=i(Q7),Sve=n(Q7,"P",{});var wyt=s(Sve);F_r=r(wyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wyt.forEach(t),T_r=i(Q7),zd=n(Q7,"P",{});var hte=s(zd);M_r=r(hte,`Note:
Loading a model from its configuration file does `),Rve=n(hte,"STRONG",{});var Ayt=s(Rve);E_r=r(Ayt,"not"),Ayt.forEach(t),C_r=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(hte,"A",{href:!0});var Lyt=s(BH);w_r=r(Lyt,"from_pretrained()"),Lyt.forEach(t),A_r=r(hte," to load the model weights."),hte.forEach(t),L_r=i(Q7),T(jF.$$.fragment,Q7),Q7.forEach(t),y_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(M9.$$.fragment,Aa),x_r=i(Aa),Pve=n(Aa,"P",{});var yyt=s(Pve);$_r=r(yyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yyt.forEach(t),k_r=i(Aa),on=n(Aa,"P",{});var W7=s(on);S_r=r(W7,"The model class to instantiate is selected based on the "),Bve=n(W7,"CODE",{});var xyt=s(Bve);R_r=r(xyt,"model_type"),xyt.forEach(t),P_r=r(W7,` property of the config object (either
passed as an argument or loaded from `),Nve=n(W7,"CODE",{});var $yt=s(Nve);B_r=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),N_r=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(W7,"CODE",{});var kyt=s(Ive);I_r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),q_r=r(W7,":"),W7.forEach(t),j_r=i(Aa),Qd=n(Aa,"UL",{});var pte=s(Qd);DF=n(pte,"LI",{});var IIe=s(DF);qve=n(IIe,"STRONG",{});var Syt=s(qve);D_r=r(Syt,"deit"),Syt.forEach(t),G_r=r(IIe," \u2014 "),NH=n(IIe,"A",{href:!0});var Ryt=s(NH);O_r=r(Ryt,"DeiTForMaskedImageModeling"),Ryt.forEach(t),V_r=r(IIe," (DeiT model)"),IIe.forEach(t),X_r=i(pte),GF=n(pte,"LI",{});var qIe=s(GF);jve=n(qIe,"STRONG",{});var Pyt=s(jve);z_r=r(Pyt,"swin"),Pyt.forEach(t),Q_r=r(qIe," \u2014 "),IH=n(qIe,"A",{href:!0});var Byt=s(IH);W_r=r(Byt,"SwinForMaskedImageModeling"),Byt.forEach(t),H_r=r(qIe," (Swin Transformer model)"),qIe.forEach(t),U_r=i(pte),OF=n(pte,"LI",{});var jIe=s(OF);Dve=n(jIe,"STRONG",{});var Nyt=s(Dve);J_r=r(Nyt,"vit"),Nyt.forEach(t),Y_r=r(jIe," \u2014 "),qH=n(jIe,"A",{href:!0});var Iyt=s(qH);K_r=r(Iyt,"ViTForMaskedImageModeling"),Iyt.forEach(t),Z_r=r(jIe," (ViT model)"),jIe.forEach(t),pte.forEach(t),eur=i(Aa),VF=n(Aa,"P",{});var DIe=s(VF);our=r(DIe,"The model is set in evaluation mode by default using "),Gve=n(DIe,"CODE",{});var qyt=s(Gve);rur=r(qyt,"model.eval()"),qyt.forEach(t),tur=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(DIe,"CODE",{});var jyt=s(Ove);aur=r(jyt,"model.train()"),jyt.forEach(t),DIe.forEach(t),nur=i(Aa),T(XF.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),UXe=i(f),Wd=n(f,"H2",{class:!0});var rWe=s(Wd);zF=n(rWe,"A",{id:!0,class:!0,href:!0});var Dyt=s(zF);Vve=n(Dyt,"SPAN",{});var Gyt=s(Vve);T(E9.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),sur=i(rWe),Xve=n(rWe,"SPAN",{});var Oyt=s(Xve);lur=r(Oyt,"AutoModelForObjectDetection"),Oyt.forEach(t),rWe.forEach(t),JXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(C9.$$.fragment,El),iur=i(El),Hd=n(El,"P",{});var _te=s(Hd);dur=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jH=n(_te,"A",{href:!0});var Vyt=s(jH);cur=r(Vyt,"from_pretrained()"),Vyt.forEach(t),fur=r(_te," class method or the "),DH=n(_te,"A",{href:!0});var Xyt=s(DH);mur=r(Xyt,"from_config()"),Xyt.forEach(t),gur=r(_te,` class
method.`),_te.forEach(t),hur=i(El),w9=n(El,"P",{});var tWe=s(w9);pur=r(tWe,"This class cannot be instantiated directly using "),zve=n(tWe,"CODE",{});var zyt=s(zve);_ur=r(zyt,"__init__()"),zyt.forEach(t),uur=r(tWe," (throws an error)."),tWe.forEach(t),bur=i(El),yt=n(El,"DIV",{class:!0});var H7=s(yt);T(A9.$$.fragment,H7),vur=i(H7),Qve=n(H7,"P",{});var Qyt=s(Qve);Fur=r(Qyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qyt.forEach(t),Tur=i(H7),Ud=n(H7,"P",{});var ute=s(Ud);Mur=r(ute,`Note:
Loading a model from its configuration file does `),Wve=n(ute,"STRONG",{});var Wyt=s(Wve);Eur=r(Wyt,"not"),Wyt.forEach(t),Cur=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(ute,"A",{href:!0});var Hyt=s(GH);wur=r(Hyt,"from_pretrained()"),Hyt.forEach(t),Aur=r(ute," to load the model weights."),ute.forEach(t),Lur=i(H7),T(QF.$$.fragment,H7),H7.forEach(t),yur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(L9.$$.fragment,La),xur=i(La),Hve=n(La,"P",{});var Uyt=s(Hve);$ur=r(Uyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Uyt.forEach(t),kur=i(La),rn=n(La,"P",{});var U7=s(rn);Sur=r(U7,"The model class to instantiate is selected based on the "),Uve=n(U7,"CODE",{});var Jyt=s(Uve);Rur=r(Jyt,"model_type"),Jyt.forEach(t),Pur=r(U7,` property of the config object (either
passed as an argument or loaded from `),Jve=n(U7,"CODE",{});var Yyt=s(Jve);Bur=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),Nur=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(U7,"CODE",{});var Kyt=s(Yve);Iur=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),qur=r(U7,":"),U7.forEach(t),jur=i(La),y9=n(La,"UL",{});var aWe=s(y9);WF=n(aWe,"LI",{});var GIe=s(WF);Kve=n(GIe,"STRONG",{});var Zyt=s(Kve);Dur=r(Zyt,"detr"),Zyt.forEach(t),Gur=r(GIe," \u2014 "),OH=n(GIe,"A",{href:!0});var e8t=s(OH);Our=r(e8t,"DetrForObjectDetection"),e8t.forEach(t),Vur=r(GIe," (DETR model)"),GIe.forEach(t),Xur=i(aWe),HF=n(aWe,"LI",{});var OIe=s(HF);Zve=n(OIe,"STRONG",{});var o8t=s(Zve);zur=r(o8t,"yolos"),o8t.forEach(t),Qur=r(OIe," \u2014 "),VH=n(OIe,"A",{href:!0});var r8t=s(VH);Wur=r(r8t,"YolosForObjectDetection"),r8t.forEach(t),Hur=r(OIe," (YOLOS model)"),OIe.forEach(t),aWe.forEach(t),Uur=i(La),UF=n(La,"P",{});var VIe=s(UF);Jur=r(VIe,"The model is set in evaluation mode by default using "),e3e=n(VIe,"CODE",{});var t8t=s(e3e);Yur=r(t8t,"model.eval()"),t8t.forEach(t),Kur=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o3e=n(VIe,"CODE",{});var a8t=s(o3e);Zur=r(a8t,"model.train()"),a8t.forEach(t),VIe.forEach(t),e1r=i(La),T(JF.$$.fragment,La),La.forEach(t),El.forEach(t),YXe=i(f),Jd=n(f,"H2",{class:!0});var nWe=s(Jd);YF=n(nWe,"A",{id:!0,class:!0,href:!0});var n8t=s(YF);r3e=n(n8t,"SPAN",{});var s8t=s(r3e);T(x9.$$.fragment,s8t),s8t.forEach(t),n8t.forEach(t),o1r=i(nWe),t3e=n(nWe,"SPAN",{});var l8t=s(t3e);r1r=r(l8t,"AutoModelForImageSegmentation"),l8t.forEach(t),nWe.forEach(t),KXe=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T($9.$$.fragment,Cl),t1r=i(Cl),Yd=n(Cl,"P",{});var bte=s(Yd);a1r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),XH=n(bte,"A",{href:!0});var i8t=s(XH);n1r=r(i8t,"from_pretrained()"),i8t.forEach(t),s1r=r(bte," class method or the "),zH=n(bte,"A",{href:!0});var d8t=s(zH);l1r=r(d8t,"from_config()"),d8t.forEach(t),i1r=r(bte,` class
method.`),bte.forEach(t),d1r=i(Cl),k9=n(Cl,"P",{});var sWe=s(k9);c1r=r(sWe,"This class cannot be instantiated directly using "),a3e=n(sWe,"CODE",{});var c8t=s(a3e);f1r=r(c8t,"__init__()"),c8t.forEach(t),m1r=r(sWe," (throws an error)."),sWe.forEach(t),g1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var J7=s(xt);T(S9.$$.fragment,J7),h1r=i(J7),n3e=n(J7,"P",{});var f8t=s(n3e);p1r=r(f8t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),f8t.forEach(t),_1r=i(J7),Kd=n(J7,"P",{});var vte=s(Kd);u1r=r(vte,`Note:
Loading a model from its configuration file does `),s3e=n(vte,"STRONG",{});var m8t=s(s3e);b1r=r(m8t,"not"),m8t.forEach(t),v1r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(vte,"A",{href:!0});var g8t=s(QH);F1r=r(g8t,"from_pretrained()"),g8t.forEach(t),T1r=r(vte," to load the model weights."),vte.forEach(t),M1r=i(J7),T(KF.$$.fragment,J7),J7.forEach(t),E1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(R9.$$.fragment,ya),C1r=i(ya),l3e=n(ya,"P",{});var h8t=s(l3e);w1r=r(h8t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),h8t.forEach(t),A1r=i(ya),tn=n(ya,"P",{});var Y7=s(tn);L1r=r(Y7,"The model class to instantiate is selected based on the "),i3e=n(Y7,"CODE",{});var p8t=s(i3e);y1r=r(p8t,"model_type"),p8t.forEach(t),x1r=r(Y7,` property of the config object (either
passed as an argument or loaded from `),d3e=n(Y7,"CODE",{});var _8t=s(d3e);$1r=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),k1r=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c3e=n(Y7,"CODE",{});var u8t=s(c3e);S1r=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),R1r=r(Y7,":"),Y7.forEach(t),P1r=i(ya),f3e=n(ya,"UL",{});var b8t=s(f3e);ZF=n(b8t,"LI",{});var XIe=s(ZF);m3e=n(XIe,"STRONG",{});var v8t=s(m3e);B1r=r(v8t,"detr"),v8t.forEach(t),N1r=r(XIe," \u2014 "),WH=n(XIe,"A",{href:!0});var F8t=s(WH);I1r=r(F8t,"DetrForSegmentation"),F8t.forEach(t),q1r=r(XIe," (DETR model)"),XIe.forEach(t),b8t.forEach(t),j1r=i(ya),e6=n(ya,"P",{});var zIe=s(e6);D1r=r(zIe,"The model is set in evaluation mode by default using "),g3e=n(zIe,"CODE",{});var T8t=s(g3e);G1r=r(T8t,"model.eval()"),T8t.forEach(t),O1r=r(zIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h3e=n(zIe,"CODE",{});var M8t=s(h3e);V1r=r(M8t,"model.train()"),M8t.forEach(t),zIe.forEach(t),X1r=i(ya),T(o6.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),ZXe=i(f),Zd=n(f,"H2",{class:!0});var lWe=s(Zd);r6=n(lWe,"A",{id:!0,class:!0,href:!0});var E8t=s(r6);p3e=n(E8t,"SPAN",{});var C8t=s(p3e);T(P9.$$.fragment,C8t),C8t.forEach(t),E8t.forEach(t),z1r=i(lWe),_3e=n(lWe,"SPAN",{});var w8t=s(_3e);Q1r=r(w8t,"AutoModelForSemanticSegmentation"),w8t.forEach(t),lWe.forEach(t),eze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(B9.$$.fragment,wl),W1r=i(wl),ec=n(wl,"P",{});var Fte=s(ec);H1r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),HH=n(Fte,"A",{href:!0});var A8t=s(HH);U1r=r(A8t,"from_pretrained()"),A8t.forEach(t),J1r=r(Fte," class method or the "),UH=n(Fte,"A",{href:!0});var L8t=s(UH);Y1r=r(L8t,"from_config()"),L8t.forEach(t),K1r=r(Fte,` class
method.`),Fte.forEach(t),Z1r=i(wl),N9=n(wl,"P",{});var iWe=s(N9);e4r=r(iWe,"This class cannot be instantiated directly using "),u3e=n(iWe,"CODE",{});var y8t=s(u3e);o4r=r(y8t,"__init__()"),y8t.forEach(t),r4r=r(iWe," (throws an error)."),iWe.forEach(t),t4r=i(wl),$t=n(wl,"DIV",{class:!0});var K7=s($t);T(I9.$$.fragment,K7),a4r=i(K7),b3e=n(K7,"P",{});var x8t=s(b3e);n4r=r(x8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),x8t.forEach(t),s4r=i(K7),oc=n(K7,"P",{});var Tte=s(oc);l4r=r(Tte,`Note:
Loading a model from its configuration file does `),v3e=n(Tte,"STRONG",{});var $8t=s(v3e);i4r=r($8t,"not"),$8t.forEach(t),d4r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(Tte,"A",{href:!0});var k8t=s(JH);c4r=r(k8t,"from_pretrained()"),k8t.forEach(t),f4r=r(Tte," to load the model weights."),Tte.forEach(t),m4r=i(K7),T(t6.$$.fragment,K7),K7.forEach(t),g4r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(q9.$$.fragment,xa),h4r=i(xa),F3e=n(xa,"P",{});var S8t=s(F3e);p4r=r(S8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),S8t.forEach(t),_4r=i(xa),an=n(xa,"P",{});var Z7=s(an);u4r=r(Z7,"The model class to instantiate is selected based on the "),T3e=n(Z7,"CODE",{});var R8t=s(T3e);b4r=r(R8t,"model_type"),R8t.forEach(t),v4r=r(Z7,` property of the config object (either
passed as an argument or loaded from `),M3e=n(Z7,"CODE",{});var P8t=s(M3e);F4r=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),T4r=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(Z7,"CODE",{});var B8t=s(E3e);M4r=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),E4r=r(Z7,":"),Z7.forEach(t),C4r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);a6=n(Al,"LI",{});var QIe=s(a6);C3e=n(QIe,"STRONG",{});var N8t=s(C3e);w4r=r(N8t,"beit"),N8t.forEach(t),A4r=r(QIe," \u2014 "),YH=n(QIe,"A",{href:!0});var I8t=s(YH);L4r=r(I8t,"BeitForSemanticSegmentation"),I8t.forEach(t),y4r=r(QIe," (BEiT model)"),QIe.forEach(t),x4r=i(Al),n6=n(Al,"LI",{});var WIe=s(n6);w3e=n(WIe,"STRONG",{});var q8t=s(w3e);$4r=r(q8t,"data2vec-vision"),q8t.forEach(t),k4r=r(WIe," \u2014 "),KH=n(WIe,"A",{href:!0});var j8t=s(KH);S4r=r(j8t,"Data2VecVisionForSemanticSegmentation"),j8t.forEach(t),R4r=r(WIe," (Data2VecVision model)"),WIe.forEach(t),P4r=i(Al),s6=n(Al,"LI",{});var HIe=s(s6);A3e=n(HIe,"STRONG",{});var D8t=s(A3e);B4r=r(D8t,"dpt"),D8t.forEach(t),N4r=r(HIe," \u2014 "),ZH=n(HIe,"A",{href:!0});var G8t=s(ZH);I4r=r(G8t,"DPTForSemanticSegmentation"),G8t.forEach(t),q4r=r(HIe," (DPT model)"),HIe.forEach(t),j4r=i(Al),l6=n(Al,"LI",{});var UIe=s(l6);L3e=n(UIe,"STRONG",{});var O8t=s(L3e);D4r=r(O8t,"mobilevit"),O8t.forEach(t),G4r=r(UIe," \u2014 "),eU=n(UIe,"A",{href:!0});var V8t=s(eU);O4r=r(V8t,"MobileViTForSemanticSegmentation"),V8t.forEach(t),V4r=r(UIe," (MobileViT model)"),UIe.forEach(t),X4r=i(Al),i6=n(Al,"LI",{});var JIe=s(i6);y3e=n(JIe,"STRONG",{});var X8t=s(y3e);z4r=r(X8t,"segformer"),X8t.forEach(t),Q4r=r(JIe," \u2014 "),oU=n(JIe,"A",{href:!0});var z8t=s(oU);W4r=r(z8t,"SegformerForSemanticSegmentation"),z8t.forEach(t),H4r=r(JIe," (SegFormer model)"),JIe.forEach(t),Al.forEach(t),U4r=i(xa),d6=n(xa,"P",{});var YIe=s(d6);J4r=r(YIe,"The model is set in evaluation mode by default using "),x3e=n(YIe,"CODE",{});var Q8t=s(x3e);Y4r=r(Q8t,"model.eval()"),Q8t.forEach(t),K4r=r(YIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$3e=n(YIe,"CODE",{});var W8t=s($3e);Z4r=r(W8t,"model.train()"),W8t.forEach(t),YIe.forEach(t),e2r=i(xa),T(c6.$$.fragment,xa),xa.forEach(t),wl.forEach(t),oze=i(f),rc=n(f,"H2",{class:!0});var dWe=s(rc);f6=n(dWe,"A",{id:!0,class:!0,href:!0});var H8t=s(f6);k3e=n(H8t,"SPAN",{});var U8t=s(k3e);T(j9.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),o2r=i(dWe),S3e=n(dWe,"SPAN",{});var J8t=s(S3e);r2r=r(J8t,"AutoModelForInstanceSegmentation"),J8t.forEach(t),dWe.forEach(t),rze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(D9.$$.fragment,Ll),t2r=i(Ll),tc=n(Ll,"P",{});var Mte=s(tc);a2r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rU=n(Mte,"A",{href:!0});var Y8t=s(rU);n2r=r(Y8t,"from_pretrained()"),Y8t.forEach(t),s2r=r(Mte," class method or the "),tU=n(Mte,"A",{href:!0});var K8t=s(tU);l2r=r(K8t,"from_config()"),K8t.forEach(t),i2r=r(Mte,` class
method.`),Mte.forEach(t),d2r=i(Ll),G9=n(Ll,"P",{});var cWe=s(G9);c2r=r(cWe,"This class cannot be instantiated directly using "),R3e=n(cWe,"CODE",{});var Z8t=s(R3e);f2r=r(Z8t,"__init__()"),Z8t.forEach(t),m2r=r(cWe," (throws an error)."),cWe.forEach(t),g2r=i(Ll),kt=n(Ll,"DIV",{class:!0});var eL=s(kt);T(O9.$$.fragment,eL),h2r=i(eL),P3e=n(eL,"P",{});var e9t=s(P3e);p2r=r(e9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),e9t.forEach(t),_2r=i(eL),ac=n(eL,"P",{});var Ete=s(ac);u2r=r(Ete,`Note:
Loading a model from its configuration file does `),B3e=n(Ete,"STRONG",{});var o9t=s(B3e);b2r=r(o9t,"not"),o9t.forEach(t),v2r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Ete,"A",{href:!0});var r9t=s(aU);F2r=r(r9t,"from_pretrained()"),r9t.forEach(t),T2r=r(Ete," to load the model weights."),Ete.forEach(t),M2r=i(eL),T(m6.$$.fragment,eL),eL.forEach(t),E2r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(V9.$$.fragment,$a),C2r=i($a),N3e=n($a,"P",{});var t9t=s(N3e);w2r=r(t9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),t9t.forEach(t),A2r=i($a),nn=n($a,"P",{});var oL=s(nn);L2r=r(oL,"The model class to instantiate is selected based on the "),I3e=n(oL,"CODE",{});var a9t=s(I3e);y2r=r(a9t,"model_type"),a9t.forEach(t),x2r=r(oL,` property of the config object (either
passed as an argument or loaded from `),q3e=n(oL,"CODE",{});var n9t=s(q3e);$2r=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),k2r=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j3e=n(oL,"CODE",{});var s9t=s(j3e);S2r=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),R2r=r(oL,":"),oL.forEach(t),P2r=i($a),D3e=n($a,"UL",{});var l9t=s(D3e);g6=n(l9t,"LI",{});var KIe=s(g6);G3e=n(KIe,"STRONG",{});var i9t=s(G3e);B2r=r(i9t,"maskformer"),i9t.forEach(t),N2r=r(KIe," \u2014 "),nU=n(KIe,"A",{href:!0});var d9t=s(nU);I2r=r(d9t,"MaskFormerForInstanceSegmentation"),d9t.forEach(t),q2r=r(KIe," (MaskFormer model)"),KIe.forEach(t),l9t.forEach(t),j2r=i($a),h6=n($a,"P",{});var ZIe=s(h6);D2r=r(ZIe,"The model is set in evaluation mode by default using "),O3e=n(ZIe,"CODE",{});var c9t=s(O3e);G2r=r(c9t,"model.eval()"),c9t.forEach(t),O2r=r(ZIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V3e=n(ZIe,"CODE",{});var f9t=s(V3e);V2r=r(f9t,"model.train()"),f9t.forEach(t),ZIe.forEach(t),X2r=i($a),T(p6.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),tze=i(f),nc=n(f,"H2",{class:!0});var fWe=s(nc);_6=n(fWe,"A",{id:!0,class:!0,href:!0});var m9t=s(_6);X3e=n(m9t,"SPAN",{});var g9t=s(X3e);T(X9.$$.fragment,g9t),g9t.forEach(t),m9t.forEach(t),z2r=i(fWe),z3e=n(fWe,"SPAN",{});var h9t=s(z3e);Q2r=r(h9t,"TFAutoModel"),h9t.forEach(t),fWe.forEach(t),aze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(z9.$$.fragment,yl),W2r=i(yl),sc=n(yl,"P",{});var Cte=s(sc);H2r=r(Cte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sU=n(Cte,"A",{href:!0});var p9t=s(sU);U2r=r(p9t,"from_pretrained()"),p9t.forEach(t),J2r=r(Cte," class method or the "),lU=n(Cte,"A",{href:!0});var _9t=s(lU);Y2r=r(_9t,"from_config()"),_9t.forEach(t),K2r=r(Cte,` class
method.`),Cte.forEach(t),Z2r=i(yl),Q9=n(yl,"P",{});var mWe=s(Q9);ebr=r(mWe,"This class cannot be instantiated directly using "),Q3e=n(mWe,"CODE",{});var u9t=s(Q3e);obr=r(u9t,"__init__()"),u9t.forEach(t),rbr=r(mWe," (throws an error)."),mWe.forEach(t),tbr=i(yl),St=n(yl,"DIV",{class:!0});var rL=s(St);T(W9.$$.fragment,rL),abr=i(rL),W3e=n(rL,"P",{});var b9t=s(W3e);nbr=r(b9t,"Instantiates one of the base model classes of the library from a configuration."),b9t.forEach(t),sbr=i(rL),lc=n(rL,"P",{});var wte=s(lc);lbr=r(wte,`Note:
Loading a model from its configuration file does `),H3e=n(wte,"STRONG",{});var v9t=s(H3e);ibr=r(v9t,"not"),v9t.forEach(t),dbr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(wte,"A",{href:!0});var F9t=s(iU);cbr=r(F9t,"from_pretrained()"),F9t.forEach(t),fbr=r(wte," to load the model weights."),wte.forEach(t),mbr=i(rL),T(u6.$$.fragment,rL),rL.forEach(t),gbr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(H9.$$.fragment,xl),hbr=i(xl),U3e=n(xl,"P",{});var T9t=s(U3e);pbr=r(T9t,"Instantiate one of the base model classes of the library from a pretrained model."),T9t.forEach(t),_br=i(xl),sn=n(xl,"P",{});var tL=s(sn);ubr=r(tL,"The model class to instantiate is selected based on the "),J3e=n(tL,"CODE",{});var M9t=s(J3e);bbr=r(M9t,"model_type"),M9t.forEach(t),vbr=r(tL,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(tL,"CODE",{});var E9t=s(Y3e);Fbr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),Tbr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(tL,"CODE",{});var C9t=s(K3e);Mbr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),Ebr=r(tL,":"),tL.forEach(t),Cbr=i(xl),q=n(xl,"UL",{});var D=s(q);b6=n(D,"LI",{});var eqe=s(b6);Z3e=n(eqe,"STRONG",{});var w9t=s(Z3e);wbr=r(w9t,"albert"),w9t.forEach(t),Abr=r(eqe," \u2014 "),dU=n(eqe,"A",{href:!0});var A9t=s(dU);Lbr=r(A9t,"TFAlbertModel"),A9t.forEach(t),ybr=r(eqe," (ALBERT model)"),eqe.forEach(t),xbr=i(D),v6=n(D,"LI",{});var oqe=s(v6);e5e=n(oqe,"STRONG",{});var L9t=s(e5e);$br=r(L9t,"bart"),L9t.forEach(t),kbr=r(oqe," \u2014 "),cU=n(oqe,"A",{href:!0});var y9t=s(cU);Sbr=r(y9t,"TFBartModel"),y9t.forEach(t),Rbr=r(oqe," (BART model)"),oqe.forEach(t),Pbr=i(D),F6=n(D,"LI",{});var rqe=s(F6);o5e=n(rqe,"STRONG",{});var x9t=s(o5e);Bbr=r(x9t,"bert"),x9t.forEach(t),Nbr=r(rqe," \u2014 "),fU=n(rqe,"A",{href:!0});var $9t=s(fU);Ibr=r($9t,"TFBertModel"),$9t.forEach(t),qbr=r(rqe," (BERT model)"),rqe.forEach(t),jbr=i(D),T6=n(D,"LI",{});var tqe=s(T6);r5e=n(tqe,"STRONG",{});var k9t=s(r5e);Dbr=r(k9t,"blenderbot"),k9t.forEach(t),Gbr=r(tqe," \u2014 "),mU=n(tqe,"A",{href:!0});var S9t=s(mU);Obr=r(S9t,"TFBlenderbotModel"),S9t.forEach(t),Vbr=r(tqe," (Blenderbot model)"),tqe.forEach(t),Xbr=i(D),M6=n(D,"LI",{});var aqe=s(M6);t5e=n(aqe,"STRONG",{});var R9t=s(t5e);zbr=r(R9t,"blenderbot-small"),R9t.forEach(t),Qbr=r(aqe," \u2014 "),gU=n(aqe,"A",{href:!0});var P9t=s(gU);Wbr=r(P9t,"TFBlenderbotSmallModel"),P9t.forEach(t),Hbr=r(aqe," (BlenderbotSmall model)"),aqe.forEach(t),Ubr=i(D),E6=n(D,"LI",{});var nqe=s(E6);a5e=n(nqe,"STRONG",{});var B9t=s(a5e);Jbr=r(B9t,"camembert"),B9t.forEach(t),Ybr=r(nqe," \u2014 "),hU=n(nqe,"A",{href:!0});var N9t=s(hU);Kbr=r(N9t,"TFCamembertModel"),N9t.forEach(t),Zbr=r(nqe," (CamemBERT model)"),nqe.forEach(t),evr=i(D),C6=n(D,"LI",{});var sqe=s(C6);n5e=n(sqe,"STRONG",{});var I9t=s(n5e);ovr=r(I9t,"clip"),I9t.forEach(t),rvr=r(sqe," \u2014 "),pU=n(sqe,"A",{href:!0});var q9t=s(pU);tvr=r(q9t,"TFCLIPModel"),q9t.forEach(t),avr=r(sqe," (CLIP model)"),sqe.forEach(t),nvr=i(D),w6=n(D,"LI",{});var lqe=s(w6);s5e=n(lqe,"STRONG",{});var j9t=s(s5e);svr=r(j9t,"convbert"),j9t.forEach(t),lvr=r(lqe," \u2014 "),_U=n(lqe,"A",{href:!0});var D9t=s(_U);ivr=r(D9t,"TFConvBertModel"),D9t.forEach(t),dvr=r(lqe," (ConvBERT model)"),lqe.forEach(t),cvr=i(D),A6=n(D,"LI",{});var iqe=s(A6);l5e=n(iqe,"STRONG",{});var G9t=s(l5e);fvr=r(G9t,"convnext"),G9t.forEach(t),mvr=r(iqe," \u2014 "),uU=n(iqe,"A",{href:!0});var O9t=s(uU);gvr=r(O9t,"TFConvNextModel"),O9t.forEach(t),hvr=r(iqe," (ConvNeXT model)"),iqe.forEach(t),pvr=i(D),L6=n(D,"LI",{});var dqe=s(L6);i5e=n(dqe,"STRONG",{});var V9t=s(i5e);_vr=r(V9t,"ctrl"),V9t.forEach(t),uvr=r(dqe," \u2014 "),bU=n(dqe,"A",{href:!0});var X9t=s(bU);bvr=r(X9t,"TFCTRLModel"),X9t.forEach(t),vvr=r(dqe," (CTRL model)"),dqe.forEach(t),Fvr=i(D),y6=n(D,"LI",{});var cqe=s(y6);d5e=n(cqe,"STRONG",{});var z9t=s(d5e);Tvr=r(z9t,"data2vec-vision"),z9t.forEach(t),Mvr=r(cqe," \u2014 "),vU=n(cqe,"A",{href:!0});var Q9t=s(vU);Evr=r(Q9t,"TFData2VecVisionModel"),Q9t.forEach(t),Cvr=r(cqe," (Data2VecVision model)"),cqe.forEach(t),wvr=i(D),x6=n(D,"LI",{});var fqe=s(x6);c5e=n(fqe,"STRONG",{});var W9t=s(c5e);Avr=r(W9t,"deberta"),W9t.forEach(t),Lvr=r(fqe," \u2014 "),FU=n(fqe,"A",{href:!0});var H9t=s(FU);yvr=r(H9t,"TFDebertaModel"),H9t.forEach(t),xvr=r(fqe," (DeBERTa model)"),fqe.forEach(t),$vr=i(D),$6=n(D,"LI",{});var mqe=s($6);f5e=n(mqe,"STRONG",{});var U9t=s(f5e);kvr=r(U9t,"deberta-v2"),U9t.forEach(t),Svr=r(mqe," \u2014 "),TU=n(mqe,"A",{href:!0});var J9t=s(TU);Rvr=r(J9t,"TFDebertaV2Model"),J9t.forEach(t),Pvr=r(mqe," (DeBERTa-v2 model)"),mqe.forEach(t),Bvr=i(D),k6=n(D,"LI",{});var gqe=s(k6);m5e=n(gqe,"STRONG",{});var Y9t=s(m5e);Nvr=r(Y9t,"distilbert"),Y9t.forEach(t),Ivr=r(gqe," \u2014 "),MU=n(gqe,"A",{href:!0});var K9t=s(MU);qvr=r(K9t,"TFDistilBertModel"),K9t.forEach(t),jvr=r(gqe," (DistilBERT model)"),gqe.forEach(t),Dvr=i(D),S6=n(D,"LI",{});var hqe=s(S6);g5e=n(hqe,"STRONG",{});var Z9t=s(g5e);Gvr=r(Z9t,"dpr"),Z9t.forEach(t),Ovr=r(hqe," \u2014 "),EU=n(hqe,"A",{href:!0});var ext=s(EU);Vvr=r(ext,"TFDPRQuestionEncoder"),ext.forEach(t),Xvr=r(hqe," (DPR model)"),hqe.forEach(t),zvr=i(D),R6=n(D,"LI",{});var pqe=s(R6);h5e=n(pqe,"STRONG",{});var oxt=s(h5e);Qvr=r(oxt,"electra"),oxt.forEach(t),Wvr=r(pqe," \u2014 "),CU=n(pqe,"A",{href:!0});var rxt=s(CU);Hvr=r(rxt,"TFElectraModel"),rxt.forEach(t),Uvr=r(pqe," (ELECTRA model)"),pqe.forEach(t),Jvr=i(D),P6=n(D,"LI",{});var _qe=s(P6);p5e=n(_qe,"STRONG",{});var txt=s(p5e);Yvr=r(txt,"flaubert"),txt.forEach(t),Kvr=r(_qe," \u2014 "),wU=n(_qe,"A",{href:!0});var axt=s(wU);Zvr=r(axt,"TFFlaubertModel"),axt.forEach(t),e3r=r(_qe," (FlauBERT model)"),_qe.forEach(t),o3r=i(D),Js=n(D,"LI",{});var RS=s(Js);_5e=n(RS,"STRONG",{});var nxt=s(_5e);r3r=r(nxt,"funnel"),nxt.forEach(t),t3r=r(RS," \u2014 "),AU=n(RS,"A",{href:!0});var sxt=s(AU);a3r=r(sxt,"TFFunnelModel"),sxt.forEach(t),n3r=r(RS," or "),LU=n(RS,"A",{href:!0});var lxt=s(LU);s3r=r(lxt,"TFFunnelBaseModel"),lxt.forEach(t),l3r=r(RS," (Funnel Transformer model)"),RS.forEach(t),i3r=i(D),B6=n(D,"LI",{});var uqe=s(B6);u5e=n(uqe,"STRONG",{});var ixt=s(u5e);d3r=r(ixt,"gpt2"),ixt.forEach(t),c3r=r(uqe," \u2014 "),yU=n(uqe,"A",{href:!0});var dxt=s(yU);f3r=r(dxt,"TFGPT2Model"),dxt.forEach(t),m3r=r(uqe," (OpenAI GPT-2 model)"),uqe.forEach(t),g3r=i(D),N6=n(D,"LI",{});var bqe=s(N6);b5e=n(bqe,"STRONG",{});var cxt=s(b5e);h3r=r(cxt,"gptj"),cxt.forEach(t),p3r=r(bqe," \u2014 "),xU=n(bqe,"A",{href:!0});var fxt=s(xU);_3r=r(fxt,"TFGPTJModel"),fxt.forEach(t),u3r=r(bqe," (GPT-J model)"),bqe.forEach(t),b3r=i(D),I6=n(D,"LI",{});var vqe=s(I6);v5e=n(vqe,"STRONG",{});var mxt=s(v5e);v3r=r(mxt,"hubert"),mxt.forEach(t),F3r=r(vqe," \u2014 "),$U=n(vqe,"A",{href:!0});var gxt=s($U);T3r=r(gxt,"TFHubertModel"),gxt.forEach(t),M3r=r(vqe," (Hubert model)"),vqe.forEach(t),E3r=i(D),q6=n(D,"LI",{});var Fqe=s(q6);F5e=n(Fqe,"STRONG",{});var hxt=s(F5e);C3r=r(hxt,"layoutlm"),hxt.forEach(t),w3r=r(Fqe," \u2014 "),kU=n(Fqe,"A",{href:!0});var pxt=s(kU);A3r=r(pxt,"TFLayoutLMModel"),pxt.forEach(t),L3r=r(Fqe," (LayoutLM model)"),Fqe.forEach(t),y3r=i(D),j6=n(D,"LI",{});var Tqe=s(j6);T5e=n(Tqe,"STRONG",{});var _xt=s(T5e);x3r=r(_xt,"led"),_xt.forEach(t),$3r=r(Tqe," \u2014 "),SU=n(Tqe,"A",{href:!0});var uxt=s(SU);k3r=r(uxt,"TFLEDModel"),uxt.forEach(t),S3r=r(Tqe," (LED model)"),Tqe.forEach(t),R3r=i(D),D6=n(D,"LI",{});var Mqe=s(D6);M5e=n(Mqe,"STRONG",{});var bxt=s(M5e);P3r=r(bxt,"longformer"),bxt.forEach(t),B3r=r(Mqe," \u2014 "),RU=n(Mqe,"A",{href:!0});var vxt=s(RU);N3r=r(vxt,"TFLongformerModel"),vxt.forEach(t),I3r=r(Mqe," (Longformer model)"),Mqe.forEach(t),q3r=i(D),G6=n(D,"LI",{});var Eqe=s(G6);E5e=n(Eqe,"STRONG",{});var Fxt=s(E5e);j3r=r(Fxt,"lxmert"),Fxt.forEach(t),D3r=r(Eqe," \u2014 "),PU=n(Eqe,"A",{href:!0});var Txt=s(PU);G3r=r(Txt,"TFLxmertModel"),Txt.forEach(t),O3r=r(Eqe," (LXMERT model)"),Eqe.forEach(t),V3r=i(D),O6=n(D,"LI",{});var Cqe=s(O6);C5e=n(Cqe,"STRONG",{});var Mxt=s(C5e);X3r=r(Mxt,"marian"),Mxt.forEach(t),z3r=r(Cqe," \u2014 "),BU=n(Cqe,"A",{href:!0});var Ext=s(BU);Q3r=r(Ext,"TFMarianModel"),Ext.forEach(t),W3r=r(Cqe," (Marian model)"),Cqe.forEach(t),H3r=i(D),V6=n(D,"LI",{});var wqe=s(V6);w5e=n(wqe,"STRONG",{});var Cxt=s(w5e);U3r=r(Cxt,"mbart"),Cxt.forEach(t),J3r=r(wqe," \u2014 "),NU=n(wqe,"A",{href:!0});var wxt=s(NU);Y3r=r(wxt,"TFMBartModel"),wxt.forEach(t),K3r=r(wqe," (mBART model)"),wqe.forEach(t),Z3r=i(D),X6=n(D,"LI",{});var Aqe=s(X6);A5e=n(Aqe,"STRONG",{});var Axt=s(A5e);e5r=r(Axt,"mobilebert"),Axt.forEach(t),o5r=r(Aqe," \u2014 "),IU=n(Aqe,"A",{href:!0});var Lxt=s(IU);r5r=r(Lxt,"TFMobileBertModel"),Lxt.forEach(t),t5r=r(Aqe," (MobileBERT model)"),Aqe.forEach(t),a5r=i(D),z6=n(D,"LI",{});var Lqe=s(z6);L5e=n(Lqe,"STRONG",{});var yxt=s(L5e);n5r=r(yxt,"mpnet"),yxt.forEach(t),s5r=r(Lqe," \u2014 "),qU=n(Lqe,"A",{href:!0});var xxt=s(qU);l5r=r(xxt,"TFMPNetModel"),xxt.forEach(t),i5r=r(Lqe," (MPNet model)"),Lqe.forEach(t),d5r=i(D),Q6=n(D,"LI",{});var yqe=s(Q6);y5e=n(yqe,"STRONG",{});var $xt=s(y5e);c5r=r($xt,"mt5"),$xt.forEach(t),f5r=r(yqe," \u2014 "),jU=n(yqe,"A",{href:!0});var kxt=s(jU);m5r=r(kxt,"TFMT5Model"),kxt.forEach(t),g5r=r(yqe," (MT5 model)"),yqe.forEach(t),h5r=i(D),W6=n(D,"LI",{});var xqe=s(W6);x5e=n(xqe,"STRONG",{});var Sxt=s(x5e);p5r=r(Sxt,"openai-gpt"),Sxt.forEach(t),_5r=r(xqe," \u2014 "),DU=n(xqe,"A",{href:!0});var Rxt=s(DU);u5r=r(Rxt,"TFOpenAIGPTModel"),Rxt.forEach(t),b5r=r(xqe," (OpenAI GPT model)"),xqe.forEach(t),v5r=i(D),H6=n(D,"LI",{});var $qe=s(H6);$5e=n($qe,"STRONG",{});var Pxt=s($5e);F5r=r(Pxt,"opt"),Pxt.forEach(t),T5r=r($qe," \u2014 "),GU=n($qe,"A",{href:!0});var Bxt=s(GU);M5r=r(Bxt,"TFOPTModel"),Bxt.forEach(t),E5r=r($qe," (OPT model)"),$qe.forEach(t),C5r=i(D),U6=n(D,"LI",{});var kqe=s(U6);k5e=n(kqe,"STRONG",{});var Nxt=s(k5e);w5r=r(Nxt,"pegasus"),Nxt.forEach(t),A5r=r(kqe," \u2014 "),OU=n(kqe,"A",{href:!0});var Ixt=s(OU);L5r=r(Ixt,"TFPegasusModel"),Ixt.forEach(t),y5r=r(kqe," (Pegasus model)"),kqe.forEach(t),x5r=i(D),J6=n(D,"LI",{});var Sqe=s(J6);S5e=n(Sqe,"STRONG",{});var qxt=s(S5e);$5r=r(qxt,"regnet"),qxt.forEach(t),k5r=r(Sqe," \u2014 "),VU=n(Sqe,"A",{href:!0});var jxt=s(VU);S5r=r(jxt,"TFRegNetModel"),jxt.forEach(t),R5r=r(Sqe," (RegNet model)"),Sqe.forEach(t),P5r=i(D),Y6=n(D,"LI",{});var Rqe=s(Y6);R5e=n(Rqe,"STRONG",{});var Dxt=s(R5e);B5r=r(Dxt,"rembert"),Dxt.forEach(t),N5r=r(Rqe," \u2014 "),XU=n(Rqe,"A",{href:!0});var Gxt=s(XU);I5r=r(Gxt,"TFRemBertModel"),Gxt.forEach(t),q5r=r(Rqe," (RemBERT model)"),Rqe.forEach(t),j5r=i(D),K6=n(D,"LI",{});var Pqe=s(K6);P5e=n(Pqe,"STRONG",{});var Oxt=s(P5e);D5r=r(Oxt,"resnet"),Oxt.forEach(t),G5r=r(Pqe," \u2014 "),zU=n(Pqe,"A",{href:!0});var Vxt=s(zU);O5r=r(Vxt,"TFResNetModel"),Vxt.forEach(t),V5r=r(Pqe," (ResNet model)"),Pqe.forEach(t),X5r=i(D),Z6=n(D,"LI",{});var Bqe=s(Z6);B5e=n(Bqe,"STRONG",{});var Xxt=s(B5e);z5r=r(Xxt,"roberta"),Xxt.forEach(t),Q5r=r(Bqe," \u2014 "),QU=n(Bqe,"A",{href:!0});var zxt=s(QU);W5r=r(zxt,"TFRobertaModel"),zxt.forEach(t),H5r=r(Bqe," (RoBERTa model)"),Bqe.forEach(t),U5r=i(D),eT=n(D,"LI",{});var Nqe=s(eT);N5e=n(Nqe,"STRONG",{});var Qxt=s(N5e);J5r=r(Qxt,"roformer"),Qxt.forEach(t),Y5r=r(Nqe," \u2014 "),WU=n(Nqe,"A",{href:!0});var Wxt=s(WU);K5r=r(Wxt,"TFRoFormerModel"),Wxt.forEach(t),Z5r=r(Nqe," (RoFormer model)"),Nqe.forEach(t),eFr=i(D),oT=n(D,"LI",{});var Iqe=s(oT);I5e=n(Iqe,"STRONG",{});var Hxt=s(I5e);oFr=r(Hxt,"speech_to_text"),Hxt.forEach(t),rFr=r(Iqe," \u2014 "),HU=n(Iqe,"A",{href:!0});var Uxt=s(HU);tFr=r(Uxt,"TFSpeech2TextModel"),Uxt.forEach(t),aFr=r(Iqe," (Speech2Text model)"),Iqe.forEach(t),nFr=i(D),rT=n(D,"LI",{});var qqe=s(rT);q5e=n(qqe,"STRONG",{});var Jxt=s(q5e);sFr=r(Jxt,"swin"),Jxt.forEach(t),lFr=r(qqe," \u2014 "),UU=n(qqe,"A",{href:!0});var Yxt=s(UU);iFr=r(Yxt,"TFSwinModel"),Yxt.forEach(t),dFr=r(qqe," (Swin Transformer model)"),qqe.forEach(t),cFr=i(D),tT=n(D,"LI",{});var jqe=s(tT);j5e=n(jqe,"STRONG",{});var Kxt=s(j5e);fFr=r(Kxt,"t5"),Kxt.forEach(t),mFr=r(jqe," \u2014 "),JU=n(jqe,"A",{href:!0});var Zxt=s(JU);gFr=r(Zxt,"TFT5Model"),Zxt.forEach(t),hFr=r(jqe," (T5 model)"),jqe.forEach(t),pFr=i(D),aT=n(D,"LI",{});var Dqe=s(aT);D5e=n(Dqe,"STRONG",{});var e$t=s(D5e);_Fr=r(e$t,"tapas"),e$t.forEach(t),uFr=r(Dqe," \u2014 "),YU=n(Dqe,"A",{href:!0});var o$t=s(YU);bFr=r(o$t,"TFTapasModel"),o$t.forEach(t),vFr=r(Dqe," (TAPAS model)"),Dqe.forEach(t),FFr=i(D),nT=n(D,"LI",{});var Gqe=s(nT);G5e=n(Gqe,"STRONG",{});var r$t=s(G5e);TFr=r(r$t,"transfo-xl"),r$t.forEach(t),MFr=r(Gqe," \u2014 "),KU=n(Gqe,"A",{href:!0});var t$t=s(KU);EFr=r(t$t,"TFTransfoXLModel"),t$t.forEach(t),CFr=r(Gqe," (Transformer-XL model)"),Gqe.forEach(t),wFr=i(D),sT=n(D,"LI",{});var Oqe=s(sT);O5e=n(Oqe,"STRONG",{});var a$t=s(O5e);AFr=r(a$t,"vit"),a$t.forEach(t),LFr=r(Oqe," \u2014 "),ZU=n(Oqe,"A",{href:!0});var n$t=s(ZU);yFr=r(n$t,"TFViTModel"),n$t.forEach(t),xFr=r(Oqe," (ViT model)"),Oqe.forEach(t),$Fr=i(D),lT=n(D,"LI",{});var Vqe=s(lT);V5e=n(Vqe,"STRONG",{});var s$t=s(V5e);kFr=r(s$t,"vit_mae"),s$t.forEach(t),SFr=r(Vqe," \u2014 "),eJ=n(Vqe,"A",{href:!0});var l$t=s(eJ);RFr=r(l$t,"TFViTMAEModel"),l$t.forEach(t),PFr=r(Vqe," (ViTMAE model)"),Vqe.forEach(t),BFr=i(D),iT=n(D,"LI",{});var Xqe=s(iT);X5e=n(Xqe,"STRONG",{});var i$t=s(X5e);NFr=r(i$t,"wav2vec2"),i$t.forEach(t),IFr=r(Xqe," \u2014 "),oJ=n(Xqe,"A",{href:!0});var d$t=s(oJ);qFr=r(d$t,"TFWav2Vec2Model"),d$t.forEach(t),jFr=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),DFr=i(D),dT=n(D,"LI",{});var zqe=s(dT);z5e=n(zqe,"STRONG",{});var c$t=s(z5e);GFr=r(c$t,"xglm"),c$t.forEach(t),OFr=r(zqe," \u2014 "),rJ=n(zqe,"A",{href:!0});var f$t=s(rJ);VFr=r(f$t,"TFXGLMModel"),f$t.forEach(t),XFr=r(zqe," (XGLM model)"),zqe.forEach(t),zFr=i(D),cT=n(D,"LI",{});var Qqe=s(cT);Q5e=n(Qqe,"STRONG",{});var m$t=s(Q5e);QFr=r(m$t,"xlm"),m$t.forEach(t),WFr=r(Qqe," \u2014 "),tJ=n(Qqe,"A",{href:!0});var g$t=s(tJ);HFr=r(g$t,"TFXLMModel"),g$t.forEach(t),UFr=r(Qqe," (XLM model)"),Qqe.forEach(t),JFr=i(D),fT=n(D,"LI",{});var Wqe=s(fT);W5e=n(Wqe,"STRONG",{});var h$t=s(W5e);YFr=r(h$t,"xlm-roberta"),h$t.forEach(t),KFr=r(Wqe," \u2014 "),aJ=n(Wqe,"A",{href:!0});var p$t=s(aJ);ZFr=r(p$t,"TFXLMRobertaModel"),p$t.forEach(t),e6r=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),o6r=i(D),mT=n(D,"LI",{});var Hqe=s(mT);H5e=n(Hqe,"STRONG",{});var _$t=s(H5e);r6r=r(_$t,"xlnet"),_$t.forEach(t),t6r=r(Hqe," \u2014 "),nJ=n(Hqe,"A",{href:!0});var u$t=s(nJ);a6r=r(u$t,"TFXLNetModel"),u$t.forEach(t),n6r=r(Hqe," (XLNet model)"),Hqe.forEach(t),D.forEach(t),s6r=i(xl),T(gT.$$.fragment,xl),xl.forEach(t),yl.forEach(t),nze=i(f),ic=n(f,"H2",{class:!0});var gWe=s(ic);hT=n(gWe,"A",{id:!0,class:!0,href:!0});var b$t=s(hT);U5e=n(b$t,"SPAN",{});var v$t=s(U5e);T(U9.$$.fragment,v$t),v$t.forEach(t),b$t.forEach(t),l6r=i(gWe),J5e=n(gWe,"SPAN",{});var F$t=s(J5e);i6r=r(F$t,"TFAutoModelForPreTraining"),F$t.forEach(t),gWe.forEach(t),sze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(J9.$$.fragment,$l),d6r=i($l),dc=n($l,"P",{});var Ate=s(dc);c6r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sJ=n(Ate,"A",{href:!0});var T$t=s(sJ);f6r=r(T$t,"from_pretrained()"),T$t.forEach(t),m6r=r(Ate," class method or the "),lJ=n(Ate,"A",{href:!0});var M$t=s(lJ);g6r=r(M$t,"from_config()"),M$t.forEach(t),h6r=r(Ate,` class
method.`),Ate.forEach(t),p6r=i($l),Y9=n($l,"P",{});var hWe=s(Y9);_6r=r(hWe,"This class cannot be instantiated directly using "),Y5e=n(hWe,"CODE",{});var E$t=s(Y5e);u6r=r(E$t,"__init__()"),E$t.forEach(t),b6r=r(hWe," (throws an error)."),hWe.forEach(t),v6r=i($l),Rt=n($l,"DIV",{class:!0});var aL=s(Rt);T(K9.$$.fragment,aL),F6r=i(aL),K5e=n(aL,"P",{});var C$t=s(K5e);T6r=r(C$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C$t.forEach(t),M6r=i(aL),cc=n(aL,"P",{});var Lte=s(cc);E6r=r(Lte,`Note:
Loading a model from its configuration file does `),Z5e=n(Lte,"STRONG",{});var w$t=s(Z5e);C6r=r(w$t,"not"),w$t.forEach(t),w6r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(Lte,"A",{href:!0});var A$t=s(iJ);A6r=r(A$t,"from_pretrained()"),A$t.forEach(t),L6r=r(Lte," to load the model weights."),Lte.forEach(t),y6r=i(aL),T(pT.$$.fragment,aL),aL.forEach(t),x6r=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(Z9.$$.fragment,kl),$6r=i(kl),eFe=n(kl,"P",{});var L$t=s(eFe);k6r=r(L$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L$t.forEach(t),S6r=i(kl),ln=n(kl,"P",{});var nL=s(ln);R6r=r(nL,"The model class to instantiate is selected based on the "),oFe=n(nL,"CODE",{});var y$t=s(oFe);P6r=r(y$t,"model_type"),y$t.forEach(t),B6r=r(nL,` property of the config object (either
passed as an argument or loaded from `),rFe=n(nL,"CODE",{});var x$t=s(rFe);N6r=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),I6r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(nL,"CODE",{});var $$t=s(tFe);q6r=r($$t,"pretrained_model_name_or_path"),$$t.forEach(t),j6r=r(nL,":"),nL.forEach(t),D6r=i(kl),se=n(kl,"UL",{});var le=s(se);_T=n(le,"LI",{});var Uqe=s(_T);aFe=n(Uqe,"STRONG",{});var k$t=s(aFe);G6r=r(k$t,"albert"),k$t.forEach(t),O6r=r(Uqe," \u2014 "),dJ=n(Uqe,"A",{href:!0});var S$t=s(dJ);V6r=r(S$t,"TFAlbertForPreTraining"),S$t.forEach(t),X6r=r(Uqe," (ALBERT model)"),Uqe.forEach(t),z6r=i(le),uT=n(le,"LI",{});var Jqe=s(uT);nFe=n(Jqe,"STRONG",{});var R$t=s(nFe);Q6r=r(R$t,"bart"),R$t.forEach(t),W6r=r(Jqe," \u2014 "),cJ=n(Jqe,"A",{href:!0});var P$t=s(cJ);H6r=r(P$t,"TFBartForConditionalGeneration"),P$t.forEach(t),U6r=r(Jqe," (BART model)"),Jqe.forEach(t),J6r=i(le),bT=n(le,"LI",{});var Yqe=s(bT);sFe=n(Yqe,"STRONG",{});var B$t=s(sFe);Y6r=r(B$t,"bert"),B$t.forEach(t),K6r=r(Yqe," \u2014 "),fJ=n(Yqe,"A",{href:!0});var N$t=s(fJ);Z6r=r(N$t,"TFBertForPreTraining"),N$t.forEach(t),eTr=r(Yqe," (BERT model)"),Yqe.forEach(t),oTr=i(le),vT=n(le,"LI",{});var Kqe=s(vT);lFe=n(Kqe,"STRONG",{});var I$t=s(lFe);rTr=r(I$t,"camembert"),I$t.forEach(t),tTr=r(Kqe," \u2014 "),mJ=n(Kqe,"A",{href:!0});var q$t=s(mJ);aTr=r(q$t,"TFCamembertForMaskedLM"),q$t.forEach(t),nTr=r(Kqe," (CamemBERT model)"),Kqe.forEach(t),sTr=i(le),FT=n(le,"LI",{});var Zqe=s(FT);iFe=n(Zqe,"STRONG",{});var j$t=s(iFe);lTr=r(j$t,"ctrl"),j$t.forEach(t),iTr=r(Zqe," \u2014 "),gJ=n(Zqe,"A",{href:!0});var D$t=s(gJ);dTr=r(D$t,"TFCTRLLMHeadModel"),D$t.forEach(t),cTr=r(Zqe," (CTRL model)"),Zqe.forEach(t),fTr=i(le),TT=n(le,"LI",{});var eje=s(TT);dFe=n(eje,"STRONG",{});var G$t=s(dFe);mTr=r(G$t,"distilbert"),G$t.forEach(t),gTr=r(eje," \u2014 "),hJ=n(eje,"A",{href:!0});var O$t=s(hJ);hTr=r(O$t,"TFDistilBertForMaskedLM"),O$t.forEach(t),pTr=r(eje," (DistilBERT model)"),eje.forEach(t),_Tr=i(le),MT=n(le,"LI",{});var oje=s(MT);cFe=n(oje,"STRONG",{});var V$t=s(cFe);uTr=r(V$t,"electra"),V$t.forEach(t),bTr=r(oje," \u2014 "),pJ=n(oje,"A",{href:!0});var X$t=s(pJ);vTr=r(X$t,"TFElectraForPreTraining"),X$t.forEach(t),FTr=r(oje," (ELECTRA model)"),oje.forEach(t),TTr=i(le),ET=n(le,"LI",{});var rje=s(ET);fFe=n(rje,"STRONG",{});var z$t=s(fFe);MTr=r(z$t,"flaubert"),z$t.forEach(t),ETr=r(rje," \u2014 "),_J=n(rje,"A",{href:!0});var Q$t=s(_J);CTr=r(Q$t,"TFFlaubertWithLMHeadModel"),Q$t.forEach(t),wTr=r(rje," (FlauBERT model)"),rje.forEach(t),ATr=i(le),CT=n(le,"LI",{});var tje=s(CT);mFe=n(tje,"STRONG",{});var W$t=s(mFe);LTr=r(W$t,"funnel"),W$t.forEach(t),yTr=r(tje," \u2014 "),uJ=n(tje,"A",{href:!0});var H$t=s(uJ);xTr=r(H$t,"TFFunnelForPreTraining"),H$t.forEach(t),$Tr=r(tje," (Funnel Transformer model)"),tje.forEach(t),kTr=i(le),wT=n(le,"LI",{});var aje=s(wT);gFe=n(aje,"STRONG",{});var U$t=s(gFe);STr=r(U$t,"gpt2"),U$t.forEach(t),RTr=r(aje," \u2014 "),bJ=n(aje,"A",{href:!0});var J$t=s(bJ);PTr=r(J$t,"TFGPT2LMHeadModel"),J$t.forEach(t),BTr=r(aje," (OpenAI GPT-2 model)"),aje.forEach(t),NTr=i(le),AT=n(le,"LI",{});var nje=s(AT);hFe=n(nje,"STRONG",{});var Y$t=s(hFe);ITr=r(Y$t,"layoutlm"),Y$t.forEach(t),qTr=r(nje," \u2014 "),vJ=n(nje,"A",{href:!0});var K$t=s(vJ);jTr=r(K$t,"TFLayoutLMForMaskedLM"),K$t.forEach(t),DTr=r(nje," (LayoutLM model)"),nje.forEach(t),GTr=i(le),LT=n(le,"LI",{});var sje=s(LT);pFe=n(sje,"STRONG",{});var Z$t=s(pFe);OTr=r(Z$t,"lxmert"),Z$t.forEach(t),VTr=r(sje," \u2014 "),FJ=n(sje,"A",{href:!0});var ekt=s(FJ);XTr=r(ekt,"TFLxmertForPreTraining"),ekt.forEach(t),zTr=r(sje," (LXMERT model)"),sje.forEach(t),QTr=i(le),yT=n(le,"LI",{});var lje=s(yT);_Fe=n(lje,"STRONG",{});var okt=s(_Fe);WTr=r(okt,"mobilebert"),okt.forEach(t),HTr=r(lje," \u2014 "),TJ=n(lje,"A",{href:!0});var rkt=s(TJ);UTr=r(rkt,"TFMobileBertForPreTraining"),rkt.forEach(t),JTr=r(lje," (MobileBERT model)"),lje.forEach(t),YTr=i(le),xT=n(le,"LI",{});var ije=s(xT);uFe=n(ije,"STRONG",{});var tkt=s(uFe);KTr=r(tkt,"mpnet"),tkt.forEach(t),ZTr=r(ije," \u2014 "),MJ=n(ije,"A",{href:!0});var akt=s(MJ);eMr=r(akt,"TFMPNetForMaskedLM"),akt.forEach(t),oMr=r(ije," (MPNet model)"),ije.forEach(t),rMr=i(le),$T=n(le,"LI",{});var dje=s($T);bFe=n(dje,"STRONG",{});var nkt=s(bFe);tMr=r(nkt,"openai-gpt"),nkt.forEach(t),aMr=r(dje," \u2014 "),EJ=n(dje,"A",{href:!0});var skt=s(EJ);nMr=r(skt,"TFOpenAIGPTLMHeadModel"),skt.forEach(t),sMr=r(dje," (OpenAI GPT model)"),dje.forEach(t),lMr=i(le),kT=n(le,"LI",{});var cje=s(kT);vFe=n(cje,"STRONG",{});var lkt=s(vFe);iMr=r(lkt,"roberta"),lkt.forEach(t),dMr=r(cje," \u2014 "),CJ=n(cje,"A",{href:!0});var ikt=s(CJ);cMr=r(ikt,"TFRobertaForMaskedLM"),ikt.forEach(t),fMr=r(cje," (RoBERTa model)"),cje.forEach(t),mMr=i(le),ST=n(le,"LI",{});var fje=s(ST);FFe=n(fje,"STRONG",{});var dkt=s(FFe);gMr=r(dkt,"t5"),dkt.forEach(t),hMr=r(fje," \u2014 "),wJ=n(fje,"A",{href:!0});var ckt=s(wJ);pMr=r(ckt,"TFT5ForConditionalGeneration"),ckt.forEach(t),_Mr=r(fje," (T5 model)"),fje.forEach(t),uMr=i(le),RT=n(le,"LI",{});var mje=s(RT);TFe=n(mje,"STRONG",{});var fkt=s(TFe);bMr=r(fkt,"tapas"),fkt.forEach(t),vMr=r(mje," \u2014 "),AJ=n(mje,"A",{href:!0});var mkt=s(AJ);FMr=r(mkt,"TFTapasForMaskedLM"),mkt.forEach(t),TMr=r(mje," (TAPAS model)"),mje.forEach(t),MMr=i(le),PT=n(le,"LI",{});var gje=s(PT);MFe=n(gje,"STRONG",{});var gkt=s(MFe);EMr=r(gkt,"transfo-xl"),gkt.forEach(t),CMr=r(gje," \u2014 "),LJ=n(gje,"A",{href:!0});var hkt=s(LJ);wMr=r(hkt,"TFTransfoXLLMHeadModel"),hkt.forEach(t),AMr=r(gje," (Transformer-XL model)"),gje.forEach(t),LMr=i(le),BT=n(le,"LI",{});var hje=s(BT);EFe=n(hje,"STRONG",{});var pkt=s(EFe);yMr=r(pkt,"vit_mae"),pkt.forEach(t),xMr=r(hje," \u2014 "),yJ=n(hje,"A",{href:!0});var _kt=s(yJ);$Mr=r(_kt,"TFViTMAEForPreTraining"),_kt.forEach(t),kMr=r(hje," (ViTMAE model)"),hje.forEach(t),SMr=i(le),NT=n(le,"LI",{});var pje=s(NT);CFe=n(pje,"STRONG",{});var ukt=s(CFe);RMr=r(ukt,"xlm"),ukt.forEach(t),PMr=r(pje," \u2014 "),xJ=n(pje,"A",{href:!0});var bkt=s(xJ);BMr=r(bkt,"TFXLMWithLMHeadModel"),bkt.forEach(t),NMr=r(pje," (XLM model)"),pje.forEach(t),IMr=i(le),IT=n(le,"LI",{});var _je=s(IT);wFe=n(_je,"STRONG",{});var vkt=s(wFe);qMr=r(vkt,"xlm-roberta"),vkt.forEach(t),jMr=r(_je," \u2014 "),$J=n(_je,"A",{href:!0});var Fkt=s($J);DMr=r(Fkt,"TFXLMRobertaForMaskedLM"),Fkt.forEach(t),GMr=r(_je," (XLM-RoBERTa model)"),_je.forEach(t),OMr=i(le),qT=n(le,"LI",{});var uje=s(qT);AFe=n(uje,"STRONG",{});var Tkt=s(AFe);VMr=r(Tkt,"xlnet"),Tkt.forEach(t),XMr=r(uje," \u2014 "),kJ=n(uje,"A",{href:!0});var Mkt=s(kJ);zMr=r(Mkt,"TFXLNetLMHeadModel"),Mkt.forEach(t),QMr=r(uje," (XLNet model)"),uje.forEach(t),le.forEach(t),WMr=i(kl),T(jT.$$.fragment,kl),kl.forEach(t),$l.forEach(t),lze=i(f),fc=n(f,"H2",{class:!0});var pWe=s(fc);DT=n(pWe,"A",{id:!0,class:!0,href:!0});var Ekt=s(DT);LFe=n(Ekt,"SPAN",{});var Ckt=s(LFe);T(ex.$$.fragment,Ckt),Ckt.forEach(t),Ekt.forEach(t),HMr=i(pWe),yFe=n(pWe,"SPAN",{});var wkt=s(yFe);UMr=r(wkt,"TFAutoModelForCausalLM"),wkt.forEach(t),pWe.forEach(t),ize=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ox.$$.fragment,Sl),JMr=i(Sl),mc=n(Sl,"P",{});var yte=s(mc);YMr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SJ=n(yte,"A",{href:!0});var Akt=s(SJ);KMr=r(Akt,"from_pretrained()"),Akt.forEach(t),ZMr=r(yte," class method or the "),RJ=n(yte,"A",{href:!0});var Lkt=s(RJ);eEr=r(Lkt,"from_config()"),Lkt.forEach(t),oEr=r(yte,` class
method.`),yte.forEach(t),rEr=i(Sl),rx=n(Sl,"P",{});var _We=s(rx);tEr=r(_We,"This class cannot be instantiated directly using "),xFe=n(_We,"CODE",{});var ykt=s(xFe);aEr=r(ykt,"__init__()"),ykt.forEach(t),nEr=r(_We," (throws an error)."),_We.forEach(t),sEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var sL=s(Pt);T(tx.$$.fragment,sL),lEr=i(sL),$Fe=n(sL,"P",{});var xkt=s($Fe);iEr=r(xkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xkt.forEach(t),dEr=i(sL),gc=n(sL,"P",{});var xte=s(gc);cEr=r(xte,`Note:
Loading a model from its configuration file does `),kFe=n(xte,"STRONG",{});var $kt=s(kFe);fEr=r($kt,"not"),$kt.forEach(t),mEr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(xte,"A",{href:!0});var kkt=s(PJ);gEr=r(kkt,"from_pretrained()"),kkt.forEach(t),hEr=r(xte," to load the model weights."),xte.forEach(t),pEr=i(sL),T(GT.$$.fragment,sL),sL.forEach(t),_Er=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(ax.$$.fragment,Rl),uEr=i(Rl),SFe=n(Rl,"P",{});var Skt=s(SFe);bEr=r(Skt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Skt.forEach(t),vEr=i(Rl),dn=n(Rl,"P",{});var lL=s(dn);FEr=r(lL,"The model class to instantiate is selected based on the "),RFe=n(lL,"CODE",{});var Rkt=s(RFe);TEr=r(Rkt,"model_type"),Rkt.forEach(t),MEr=r(lL,` property of the config object (either
passed as an argument or loaded from `),PFe=n(lL,"CODE",{});var Pkt=s(PFe);EEr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),CEr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(lL,"CODE",{});var Bkt=s(BFe);wEr=r(Bkt,"pretrained_model_name_or_path"),Bkt.forEach(t),AEr=r(lL,":"),lL.forEach(t),LEr=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);OT=n(Ce,"LI",{});var bje=s(OT);NFe=n(bje,"STRONG",{});var Nkt=s(NFe);yEr=r(Nkt,"bert"),Nkt.forEach(t),xEr=r(bje," \u2014 "),BJ=n(bje,"A",{href:!0});var Ikt=s(BJ);$Er=r(Ikt,"TFBertLMHeadModel"),Ikt.forEach(t),kEr=r(bje," (BERT model)"),bje.forEach(t),SEr=i(Ce),VT=n(Ce,"LI",{});var vje=s(VT);IFe=n(vje,"STRONG",{});var qkt=s(IFe);REr=r(qkt,"camembert"),qkt.forEach(t),PEr=r(vje," \u2014 "),NJ=n(vje,"A",{href:!0});var jkt=s(NJ);BEr=r(jkt,"TFCamembertForCausalLM"),jkt.forEach(t),NEr=r(vje," (CamemBERT model)"),vje.forEach(t),IEr=i(Ce),XT=n(Ce,"LI",{});var Fje=s(XT);qFe=n(Fje,"STRONG",{});var Dkt=s(qFe);qEr=r(Dkt,"ctrl"),Dkt.forEach(t),jEr=r(Fje," \u2014 "),IJ=n(Fje,"A",{href:!0});var Gkt=s(IJ);DEr=r(Gkt,"TFCTRLLMHeadModel"),Gkt.forEach(t),GEr=r(Fje," (CTRL model)"),Fje.forEach(t),OEr=i(Ce),zT=n(Ce,"LI",{});var Tje=s(zT);jFe=n(Tje,"STRONG",{});var Okt=s(jFe);VEr=r(Okt,"gpt2"),Okt.forEach(t),XEr=r(Tje," \u2014 "),qJ=n(Tje,"A",{href:!0});var Vkt=s(qJ);zEr=r(Vkt,"TFGPT2LMHeadModel"),Vkt.forEach(t),QEr=r(Tje," (OpenAI GPT-2 model)"),Tje.forEach(t),WEr=i(Ce),QT=n(Ce,"LI",{});var Mje=s(QT);DFe=n(Mje,"STRONG",{});var Xkt=s(DFe);HEr=r(Xkt,"gptj"),Xkt.forEach(t),UEr=r(Mje," \u2014 "),jJ=n(Mje,"A",{href:!0});var zkt=s(jJ);JEr=r(zkt,"TFGPTJForCausalLM"),zkt.forEach(t),YEr=r(Mje," (GPT-J model)"),Mje.forEach(t),KEr=i(Ce),WT=n(Ce,"LI",{});var Eje=s(WT);GFe=n(Eje,"STRONG",{});var Qkt=s(GFe);ZEr=r(Qkt,"openai-gpt"),Qkt.forEach(t),eCr=r(Eje," \u2014 "),DJ=n(Eje,"A",{href:!0});var Wkt=s(DJ);oCr=r(Wkt,"TFOpenAIGPTLMHeadModel"),Wkt.forEach(t),rCr=r(Eje," (OpenAI GPT model)"),Eje.forEach(t),tCr=i(Ce),HT=n(Ce,"LI",{});var Cje=s(HT);OFe=n(Cje,"STRONG",{});var Hkt=s(OFe);aCr=r(Hkt,"opt"),Hkt.forEach(t),nCr=r(Cje," \u2014 "),GJ=n(Cje,"A",{href:!0});var Ukt=s(GJ);sCr=r(Ukt,"TFOPTForCausalLM"),Ukt.forEach(t),lCr=r(Cje," (OPT model)"),Cje.forEach(t),iCr=i(Ce),UT=n(Ce,"LI",{});var wje=s(UT);VFe=n(wje,"STRONG",{});var Jkt=s(VFe);dCr=r(Jkt,"rembert"),Jkt.forEach(t),cCr=r(wje," \u2014 "),OJ=n(wje,"A",{href:!0});var Ykt=s(OJ);fCr=r(Ykt,"TFRemBertForCausalLM"),Ykt.forEach(t),mCr=r(wje," (RemBERT model)"),wje.forEach(t),gCr=i(Ce),JT=n(Ce,"LI",{});var Aje=s(JT);XFe=n(Aje,"STRONG",{});var Kkt=s(XFe);hCr=r(Kkt,"roberta"),Kkt.forEach(t),pCr=r(Aje," \u2014 "),VJ=n(Aje,"A",{href:!0});var Zkt=s(VJ);_Cr=r(Zkt,"TFRobertaForCausalLM"),Zkt.forEach(t),uCr=r(Aje," (RoBERTa model)"),Aje.forEach(t),bCr=i(Ce),YT=n(Ce,"LI",{});var Lje=s(YT);zFe=n(Lje,"STRONG",{});var eSt=s(zFe);vCr=r(eSt,"roformer"),eSt.forEach(t),FCr=r(Lje," \u2014 "),XJ=n(Lje,"A",{href:!0});var oSt=s(XJ);TCr=r(oSt,"TFRoFormerForCausalLM"),oSt.forEach(t),MCr=r(Lje," (RoFormer model)"),Lje.forEach(t),ECr=i(Ce),KT=n(Ce,"LI",{});var yje=s(KT);QFe=n(yje,"STRONG",{});var rSt=s(QFe);CCr=r(rSt,"transfo-xl"),rSt.forEach(t),wCr=r(yje," \u2014 "),zJ=n(yje,"A",{href:!0});var tSt=s(zJ);ACr=r(tSt,"TFTransfoXLLMHeadModel"),tSt.forEach(t),LCr=r(yje," (Transformer-XL model)"),yje.forEach(t),yCr=i(Ce),ZT=n(Ce,"LI",{});var xje=s(ZT);WFe=n(xje,"STRONG",{});var aSt=s(WFe);xCr=r(aSt,"xglm"),aSt.forEach(t),$Cr=r(xje," \u2014 "),QJ=n(xje,"A",{href:!0});var nSt=s(QJ);kCr=r(nSt,"TFXGLMForCausalLM"),nSt.forEach(t),SCr=r(xje," (XGLM model)"),xje.forEach(t),RCr=i(Ce),eM=n(Ce,"LI",{});var $je=s(eM);HFe=n($je,"STRONG",{});var sSt=s(HFe);PCr=r(sSt,"xlm"),sSt.forEach(t),BCr=r($je," \u2014 "),WJ=n($je,"A",{href:!0});var lSt=s(WJ);NCr=r(lSt,"TFXLMWithLMHeadModel"),lSt.forEach(t),ICr=r($je," (XLM model)"),$je.forEach(t),qCr=i(Ce),oM=n(Ce,"LI",{});var kje=s(oM);UFe=n(kje,"STRONG",{});var iSt=s(UFe);jCr=r(iSt,"xlnet"),iSt.forEach(t),DCr=r(kje," \u2014 "),HJ=n(kje,"A",{href:!0});var dSt=s(HJ);GCr=r(dSt,"TFXLNetLMHeadModel"),dSt.forEach(t),OCr=r(kje," (XLNet model)"),kje.forEach(t),Ce.forEach(t),VCr=i(Rl),T(rM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),dze=i(f),hc=n(f,"H2",{class:!0});var uWe=s(hc);tM=n(uWe,"A",{id:!0,class:!0,href:!0});var cSt=s(tM);JFe=n(cSt,"SPAN",{});var fSt=s(JFe);T(nx.$$.fragment,fSt),fSt.forEach(t),cSt.forEach(t),XCr=i(uWe),YFe=n(uWe,"SPAN",{});var mSt=s(YFe);zCr=r(mSt,"TFAutoModelForImageClassification"),mSt.forEach(t),uWe.forEach(t),cze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(sx.$$.fragment,Pl),QCr=i(Pl),pc=n(Pl,"P",{});var $te=s(pc);WCr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=n($te,"A",{href:!0});var gSt=s(UJ);HCr=r(gSt,"from_pretrained()"),gSt.forEach(t),UCr=r($te," class method or the "),JJ=n($te,"A",{href:!0});var hSt=s(JJ);JCr=r(hSt,"from_config()"),hSt.forEach(t),YCr=r($te,` class
method.`),$te.forEach(t),KCr=i(Pl),lx=n(Pl,"P",{});var bWe=s(lx);ZCr=r(bWe,"This class cannot be instantiated directly using "),KFe=n(bWe,"CODE",{});var pSt=s(KFe);e0r=r(pSt,"__init__()"),pSt.forEach(t),o0r=r(bWe," (throws an error)."),bWe.forEach(t),r0r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var iL=s(Bt);T(ix.$$.fragment,iL),t0r=i(iL),ZFe=n(iL,"P",{});var _St=s(ZFe);a0r=r(_St,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_St.forEach(t),n0r=i(iL),_c=n(iL,"P",{});var kte=s(_c);s0r=r(kte,`Note:
Loading a model from its configuration file does `),e6e=n(kte,"STRONG",{});var uSt=s(e6e);l0r=r(uSt,"not"),uSt.forEach(t),i0r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(kte,"A",{href:!0});var bSt=s(YJ);d0r=r(bSt,"from_pretrained()"),bSt.forEach(t),c0r=r(kte," to load the model weights."),kte.forEach(t),f0r=i(iL),T(aM.$$.fragment,iL),iL.forEach(t),m0r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(dx.$$.fragment,Bl),g0r=i(Bl),o6e=n(Bl,"P",{});var vSt=s(o6e);h0r=r(vSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vSt.forEach(t),p0r=i(Bl),cn=n(Bl,"P",{});var dL=s(cn);_0r=r(dL,"The model class to instantiate is selected based on the "),r6e=n(dL,"CODE",{});var FSt=s(r6e);u0r=r(FSt,"model_type"),FSt.forEach(t),b0r=r(dL,` property of the config object (either
passed as an argument or loaded from `),t6e=n(dL,"CODE",{});var TSt=s(t6e);v0r=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),F0r=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(dL,"CODE",{});var MSt=s(a6e);T0r=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),M0r=r(dL,":"),dL.forEach(t),E0r=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);nM=n(ka,"LI",{});var Sje=s(nM);n6e=n(Sje,"STRONG",{});var ESt=s(n6e);C0r=r(ESt,"convnext"),ESt.forEach(t),w0r=r(Sje," \u2014 "),KJ=n(Sje,"A",{href:!0});var CSt=s(KJ);A0r=r(CSt,"TFConvNextForImageClassification"),CSt.forEach(t),L0r=r(Sje," (ConvNeXT model)"),Sje.forEach(t),y0r=i(ka),sM=n(ka,"LI",{});var Rje=s(sM);s6e=n(Rje,"STRONG",{});var wSt=s(s6e);x0r=r(wSt,"data2vec-vision"),wSt.forEach(t),$0r=r(Rje," \u2014 "),ZJ=n(Rje,"A",{href:!0});var ASt=s(ZJ);k0r=r(ASt,"TFData2VecVisionForImageClassification"),ASt.forEach(t),S0r=r(Rje," (Data2VecVision model)"),Rje.forEach(t),R0r=i(ka),lM=n(ka,"LI",{});var Pje=s(lM);l6e=n(Pje,"STRONG",{});var LSt=s(l6e);P0r=r(LSt,"regnet"),LSt.forEach(t),B0r=r(Pje," \u2014 "),eY=n(Pje,"A",{href:!0});var ySt=s(eY);N0r=r(ySt,"TFRegNetForImageClassification"),ySt.forEach(t),I0r=r(Pje," (RegNet model)"),Pje.forEach(t),q0r=i(ka),iM=n(ka,"LI",{});var Bje=s(iM);i6e=n(Bje,"STRONG",{});var xSt=s(i6e);j0r=r(xSt,"resnet"),xSt.forEach(t),D0r=r(Bje," \u2014 "),oY=n(Bje,"A",{href:!0});var $St=s(oY);G0r=r($St,"TFResNetForImageClassification"),$St.forEach(t),O0r=r(Bje," (ResNet model)"),Bje.forEach(t),V0r=i(ka),dM=n(ka,"LI",{});var Nje=s(dM);d6e=n(Nje,"STRONG",{});var kSt=s(d6e);X0r=r(kSt,"swin"),kSt.forEach(t),z0r=r(Nje," \u2014 "),rY=n(Nje,"A",{href:!0});var SSt=s(rY);Q0r=r(SSt,"TFSwinForImageClassification"),SSt.forEach(t),W0r=r(Nje," (Swin Transformer model)"),Nje.forEach(t),H0r=i(ka),cM=n(ka,"LI",{});var Ije=s(cM);c6e=n(Ije,"STRONG",{});var RSt=s(c6e);U0r=r(RSt,"vit"),RSt.forEach(t),J0r=r(Ije," \u2014 "),tY=n(Ije,"A",{href:!0});var PSt=s(tY);Y0r=r(PSt,"TFViTForImageClassification"),PSt.forEach(t),K0r=r(Ije," (ViT model)"),Ije.forEach(t),ka.forEach(t),Z0r=i(Bl),T(fM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),fze=i(f),uc=n(f,"H2",{class:!0});var vWe=s(uc);mM=n(vWe,"A",{id:!0,class:!0,href:!0});var BSt=s(mM);f6e=n(BSt,"SPAN",{});var NSt=s(f6e);T(cx.$$.fragment,NSt),NSt.forEach(t),BSt.forEach(t),ewr=i(vWe),m6e=n(vWe,"SPAN",{});var ISt=s(m6e);owr=r(ISt,"TFAutoModelForMaskedLM"),ISt.forEach(t),vWe.forEach(t),mze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(fx.$$.fragment,Nl),rwr=i(Nl),bc=n(Nl,"P",{});var Ste=s(bc);twr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=n(Ste,"A",{href:!0});var qSt=s(aY);awr=r(qSt,"from_pretrained()"),qSt.forEach(t),nwr=r(Ste," class method or the "),nY=n(Ste,"A",{href:!0});var jSt=s(nY);swr=r(jSt,"from_config()"),jSt.forEach(t),lwr=r(Ste,` class
method.`),Ste.forEach(t),iwr=i(Nl),mx=n(Nl,"P",{});var FWe=s(mx);dwr=r(FWe,"This class cannot be instantiated directly using "),g6e=n(FWe,"CODE",{});var DSt=s(g6e);cwr=r(DSt,"__init__()"),DSt.forEach(t),fwr=r(FWe," (throws an error)."),FWe.forEach(t),mwr=i(Nl),Nt=n(Nl,"DIV",{class:!0});var cL=s(Nt);T(gx.$$.fragment,cL),gwr=i(cL),h6e=n(cL,"P",{});var GSt=s(h6e);hwr=r(GSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GSt.forEach(t),pwr=i(cL),vc=n(cL,"P",{});var Rte=s(vc);_wr=r(Rte,`Note:
Loading a model from its configuration file does `),p6e=n(Rte,"STRONG",{});var OSt=s(p6e);uwr=r(OSt,"not"),OSt.forEach(t),bwr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(Rte,"A",{href:!0});var VSt=s(sY);vwr=r(VSt,"from_pretrained()"),VSt.forEach(t),Fwr=r(Rte," to load the model weights."),Rte.forEach(t),Twr=i(cL),T(gM.$$.fragment,cL),cL.forEach(t),Mwr=i(Nl),Rr=n(Nl,"DIV",{class:!0});var Il=s(Rr);T(hx.$$.fragment,Il),Ewr=i(Il),_6e=n(Il,"P",{});var XSt=s(_6e);Cwr=r(XSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XSt.forEach(t),wwr=i(Il),fn=n(Il,"P",{});var fL=s(fn);Awr=r(fL,"The model class to instantiate is selected based on the "),u6e=n(fL,"CODE",{});var zSt=s(u6e);Lwr=r(zSt,"model_type"),zSt.forEach(t),ywr=r(fL,` property of the config object (either
passed as an argument or loaded from `),b6e=n(fL,"CODE",{});var QSt=s(b6e);xwr=r(QSt,"pretrained_model_name_or_path"),QSt.forEach(t),$wr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(fL,"CODE",{});var WSt=s(v6e);kwr=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),Swr=r(fL,":"),fL.forEach(t),Rwr=i(Il),ie=n(Il,"UL",{});var fe=s(ie);hM=n(fe,"LI",{});var qje=s(hM);F6e=n(qje,"STRONG",{});var HSt=s(F6e);Pwr=r(HSt,"albert"),HSt.forEach(t),Bwr=r(qje," \u2014 "),lY=n(qje,"A",{href:!0});var USt=s(lY);Nwr=r(USt,"TFAlbertForMaskedLM"),USt.forEach(t),Iwr=r(qje," (ALBERT model)"),qje.forEach(t),qwr=i(fe),pM=n(fe,"LI",{});var jje=s(pM);T6e=n(jje,"STRONG",{});var JSt=s(T6e);jwr=r(JSt,"bert"),JSt.forEach(t),Dwr=r(jje," \u2014 "),iY=n(jje,"A",{href:!0});var YSt=s(iY);Gwr=r(YSt,"TFBertForMaskedLM"),YSt.forEach(t),Owr=r(jje," (BERT model)"),jje.forEach(t),Vwr=i(fe),_M=n(fe,"LI",{});var Dje=s(_M);M6e=n(Dje,"STRONG",{});var KSt=s(M6e);Xwr=r(KSt,"camembert"),KSt.forEach(t),zwr=r(Dje," \u2014 "),dY=n(Dje,"A",{href:!0});var ZSt=s(dY);Qwr=r(ZSt,"TFCamembertForMaskedLM"),ZSt.forEach(t),Wwr=r(Dje," (CamemBERT model)"),Dje.forEach(t),Hwr=i(fe),uM=n(fe,"LI",{});var Gje=s(uM);E6e=n(Gje,"STRONG",{});var eRt=s(E6e);Uwr=r(eRt,"convbert"),eRt.forEach(t),Jwr=r(Gje," \u2014 "),cY=n(Gje,"A",{href:!0});var oRt=s(cY);Ywr=r(oRt,"TFConvBertForMaskedLM"),oRt.forEach(t),Kwr=r(Gje," (ConvBERT model)"),Gje.forEach(t),Zwr=i(fe),bM=n(fe,"LI",{});var Oje=s(bM);C6e=n(Oje,"STRONG",{});var rRt=s(C6e);eAr=r(rRt,"deberta"),rRt.forEach(t),oAr=r(Oje," \u2014 "),fY=n(Oje,"A",{href:!0});var tRt=s(fY);rAr=r(tRt,"TFDebertaForMaskedLM"),tRt.forEach(t),tAr=r(Oje," (DeBERTa model)"),Oje.forEach(t),aAr=i(fe),vM=n(fe,"LI",{});var Vje=s(vM);w6e=n(Vje,"STRONG",{});var aRt=s(w6e);nAr=r(aRt,"deberta-v2"),aRt.forEach(t),sAr=r(Vje," \u2014 "),mY=n(Vje,"A",{href:!0});var nRt=s(mY);lAr=r(nRt,"TFDebertaV2ForMaskedLM"),nRt.forEach(t),iAr=r(Vje," (DeBERTa-v2 model)"),Vje.forEach(t),dAr=i(fe),FM=n(fe,"LI",{});var Xje=s(FM);A6e=n(Xje,"STRONG",{});var sRt=s(A6e);cAr=r(sRt,"distilbert"),sRt.forEach(t),fAr=r(Xje," \u2014 "),gY=n(Xje,"A",{href:!0});var lRt=s(gY);mAr=r(lRt,"TFDistilBertForMaskedLM"),lRt.forEach(t),gAr=r(Xje," (DistilBERT model)"),Xje.forEach(t),hAr=i(fe),TM=n(fe,"LI",{});var zje=s(TM);L6e=n(zje,"STRONG",{});var iRt=s(L6e);pAr=r(iRt,"electra"),iRt.forEach(t),_Ar=r(zje," \u2014 "),hY=n(zje,"A",{href:!0});var dRt=s(hY);uAr=r(dRt,"TFElectraForMaskedLM"),dRt.forEach(t),bAr=r(zje," (ELECTRA model)"),zje.forEach(t),vAr=i(fe),MM=n(fe,"LI",{});var Qje=s(MM);y6e=n(Qje,"STRONG",{});var cRt=s(y6e);FAr=r(cRt,"flaubert"),cRt.forEach(t),TAr=r(Qje," \u2014 "),pY=n(Qje,"A",{href:!0});var fRt=s(pY);MAr=r(fRt,"TFFlaubertWithLMHeadModel"),fRt.forEach(t),EAr=r(Qje," (FlauBERT model)"),Qje.forEach(t),CAr=i(fe),EM=n(fe,"LI",{});var Wje=s(EM);x6e=n(Wje,"STRONG",{});var mRt=s(x6e);wAr=r(mRt,"funnel"),mRt.forEach(t),AAr=r(Wje," \u2014 "),_Y=n(Wje,"A",{href:!0});var gRt=s(_Y);LAr=r(gRt,"TFFunnelForMaskedLM"),gRt.forEach(t),yAr=r(Wje," (Funnel Transformer model)"),Wje.forEach(t),xAr=i(fe),CM=n(fe,"LI",{});var Hje=s(CM);$6e=n(Hje,"STRONG",{});var hRt=s($6e);$Ar=r(hRt,"layoutlm"),hRt.forEach(t),kAr=r(Hje," \u2014 "),uY=n(Hje,"A",{href:!0});var pRt=s(uY);SAr=r(pRt,"TFLayoutLMForMaskedLM"),pRt.forEach(t),RAr=r(Hje," (LayoutLM model)"),Hje.forEach(t),PAr=i(fe),wM=n(fe,"LI",{});var Uje=s(wM);k6e=n(Uje,"STRONG",{});var _Rt=s(k6e);BAr=r(_Rt,"longformer"),_Rt.forEach(t),NAr=r(Uje," \u2014 "),bY=n(Uje,"A",{href:!0});var uRt=s(bY);IAr=r(uRt,"TFLongformerForMaskedLM"),uRt.forEach(t),qAr=r(Uje," (Longformer model)"),Uje.forEach(t),jAr=i(fe),AM=n(fe,"LI",{});var Jje=s(AM);S6e=n(Jje,"STRONG",{});var bRt=s(S6e);DAr=r(bRt,"mobilebert"),bRt.forEach(t),GAr=r(Jje," \u2014 "),vY=n(Jje,"A",{href:!0});var vRt=s(vY);OAr=r(vRt,"TFMobileBertForMaskedLM"),vRt.forEach(t),VAr=r(Jje," (MobileBERT model)"),Jje.forEach(t),XAr=i(fe),LM=n(fe,"LI",{});var Yje=s(LM);R6e=n(Yje,"STRONG",{});var FRt=s(R6e);zAr=r(FRt,"mpnet"),FRt.forEach(t),QAr=r(Yje," \u2014 "),FY=n(Yje,"A",{href:!0});var TRt=s(FY);WAr=r(TRt,"TFMPNetForMaskedLM"),TRt.forEach(t),HAr=r(Yje," (MPNet model)"),Yje.forEach(t),UAr=i(fe),yM=n(fe,"LI",{});var Kje=s(yM);P6e=n(Kje,"STRONG",{});var MRt=s(P6e);JAr=r(MRt,"rembert"),MRt.forEach(t),YAr=r(Kje," \u2014 "),TY=n(Kje,"A",{href:!0});var ERt=s(TY);KAr=r(ERt,"TFRemBertForMaskedLM"),ERt.forEach(t),ZAr=r(Kje," (RemBERT model)"),Kje.forEach(t),e7r=i(fe),xM=n(fe,"LI",{});var Zje=s(xM);B6e=n(Zje,"STRONG",{});var CRt=s(B6e);o7r=r(CRt,"roberta"),CRt.forEach(t),r7r=r(Zje," \u2014 "),MY=n(Zje,"A",{href:!0});var wRt=s(MY);t7r=r(wRt,"TFRobertaForMaskedLM"),wRt.forEach(t),a7r=r(Zje," (RoBERTa model)"),Zje.forEach(t),n7r=i(fe),$M=n(fe,"LI",{});var eDe=s($M);N6e=n(eDe,"STRONG",{});var ARt=s(N6e);s7r=r(ARt,"roformer"),ARt.forEach(t),l7r=r(eDe," \u2014 "),EY=n(eDe,"A",{href:!0});var LRt=s(EY);i7r=r(LRt,"TFRoFormerForMaskedLM"),LRt.forEach(t),d7r=r(eDe," (RoFormer model)"),eDe.forEach(t),c7r=i(fe),kM=n(fe,"LI",{});var oDe=s(kM);I6e=n(oDe,"STRONG",{});var yRt=s(I6e);f7r=r(yRt,"tapas"),yRt.forEach(t),m7r=r(oDe," \u2014 "),CY=n(oDe,"A",{href:!0});var xRt=s(CY);g7r=r(xRt,"TFTapasForMaskedLM"),xRt.forEach(t),h7r=r(oDe," (TAPAS model)"),oDe.forEach(t),p7r=i(fe),SM=n(fe,"LI",{});var rDe=s(SM);q6e=n(rDe,"STRONG",{});var $Rt=s(q6e);_7r=r($Rt,"xlm"),$Rt.forEach(t),u7r=r(rDe," \u2014 "),wY=n(rDe,"A",{href:!0});var kRt=s(wY);b7r=r(kRt,"TFXLMWithLMHeadModel"),kRt.forEach(t),v7r=r(rDe," (XLM model)"),rDe.forEach(t),F7r=i(fe),RM=n(fe,"LI",{});var tDe=s(RM);j6e=n(tDe,"STRONG",{});var SRt=s(j6e);T7r=r(SRt,"xlm-roberta"),SRt.forEach(t),M7r=r(tDe," \u2014 "),AY=n(tDe,"A",{href:!0});var RRt=s(AY);E7r=r(RRt,"TFXLMRobertaForMaskedLM"),RRt.forEach(t),C7r=r(tDe," (XLM-RoBERTa model)"),tDe.forEach(t),fe.forEach(t),w7r=i(Il),T(PM.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),gze=i(f),Fc=n(f,"H2",{class:!0});var TWe=s(Fc);BM=n(TWe,"A",{id:!0,class:!0,href:!0});var PRt=s(BM);D6e=n(PRt,"SPAN",{});var BRt=s(D6e);T(px.$$.fragment,BRt),BRt.forEach(t),PRt.forEach(t),A7r=i(TWe),G6e=n(TWe,"SPAN",{});var NRt=s(G6e);L7r=r(NRt,"TFAutoModelForSeq2SeqLM"),NRt.forEach(t),TWe.forEach(t),hze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(_x.$$.fragment,ql),y7r=i(ql),Tc=n(ql,"P",{});var Pte=s(Tc);x7r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=n(Pte,"A",{href:!0});var IRt=s(LY);$7r=r(IRt,"from_pretrained()"),IRt.forEach(t),k7r=r(Pte," class method or the "),yY=n(Pte,"A",{href:!0});var qRt=s(yY);S7r=r(qRt,"from_config()"),qRt.forEach(t),R7r=r(Pte,` class
method.`),Pte.forEach(t),P7r=i(ql),ux=n(ql,"P",{});var MWe=s(ux);B7r=r(MWe,"This class cannot be instantiated directly using "),O6e=n(MWe,"CODE",{});var jRt=s(O6e);N7r=r(jRt,"__init__()"),jRt.forEach(t),I7r=r(MWe," (throws an error)."),MWe.forEach(t),q7r=i(ql),It=n(ql,"DIV",{class:!0});var mL=s(It);T(bx.$$.fragment,mL),j7r=i(mL),V6e=n(mL,"P",{});var DRt=s(V6e);D7r=r(DRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DRt.forEach(t),G7r=i(mL),Mc=n(mL,"P",{});var Bte=s(Mc);O7r=r(Bte,`Note:
Loading a model from its configuration file does `),X6e=n(Bte,"STRONG",{});var GRt=s(X6e);V7r=r(GRt,"not"),GRt.forEach(t),X7r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Bte,"A",{href:!0});var ORt=s(xY);z7r=r(ORt,"from_pretrained()"),ORt.forEach(t),Q7r=r(Bte," to load the model weights."),Bte.forEach(t),W7r=i(mL),T(NM.$$.fragment,mL),mL.forEach(t),H7r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(vx.$$.fragment,jl),U7r=i(jl),z6e=n(jl,"P",{});var VRt=s(z6e);J7r=r(VRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VRt.forEach(t),Y7r=i(jl),mn=n(jl,"P",{});var gL=s(mn);K7r=r(gL,"The model class to instantiate is selected based on the "),Q6e=n(gL,"CODE",{});var XRt=s(Q6e);Z7r=r(XRt,"model_type"),XRt.forEach(t),eLr=r(gL,` property of the config object (either
passed as an argument or loaded from `),W6e=n(gL,"CODE",{});var zRt=s(W6e);oLr=r(zRt,"pretrained_model_name_or_path"),zRt.forEach(t),rLr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(gL,"CODE",{});var QRt=s(H6e);tLr=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),aLr=r(gL,":"),gL.forEach(t),nLr=i(jl),ye=n(jl,"UL",{});var Ne=s(ye);IM=n(Ne,"LI",{});var aDe=s(IM);U6e=n(aDe,"STRONG",{});var WRt=s(U6e);sLr=r(WRt,"bart"),WRt.forEach(t),lLr=r(aDe," \u2014 "),$Y=n(aDe,"A",{href:!0});var HRt=s($Y);iLr=r(HRt,"TFBartForConditionalGeneration"),HRt.forEach(t),dLr=r(aDe," (BART model)"),aDe.forEach(t),cLr=i(Ne),qM=n(Ne,"LI",{});var nDe=s(qM);J6e=n(nDe,"STRONG",{});var URt=s(J6e);fLr=r(URt,"blenderbot"),URt.forEach(t),mLr=r(nDe," \u2014 "),kY=n(nDe,"A",{href:!0});var JRt=s(kY);gLr=r(JRt,"TFBlenderbotForConditionalGeneration"),JRt.forEach(t),hLr=r(nDe," (Blenderbot model)"),nDe.forEach(t),pLr=i(Ne),jM=n(Ne,"LI",{});var sDe=s(jM);Y6e=n(sDe,"STRONG",{});var YRt=s(Y6e);_Lr=r(YRt,"blenderbot-small"),YRt.forEach(t),uLr=r(sDe," \u2014 "),SY=n(sDe,"A",{href:!0});var KRt=s(SY);bLr=r(KRt,"TFBlenderbotSmallForConditionalGeneration"),KRt.forEach(t),vLr=r(sDe," (BlenderbotSmall model)"),sDe.forEach(t),FLr=i(Ne),DM=n(Ne,"LI",{});var lDe=s(DM);K6e=n(lDe,"STRONG",{});var ZRt=s(K6e);TLr=r(ZRt,"encoder-decoder"),ZRt.forEach(t),MLr=r(lDe," \u2014 "),RY=n(lDe,"A",{href:!0});var ePt=s(RY);ELr=r(ePt,"TFEncoderDecoderModel"),ePt.forEach(t),CLr=r(lDe," (Encoder decoder model)"),lDe.forEach(t),wLr=i(Ne),GM=n(Ne,"LI",{});var iDe=s(GM);Z6e=n(iDe,"STRONG",{});var oPt=s(Z6e);ALr=r(oPt,"led"),oPt.forEach(t),LLr=r(iDe," \u2014 "),PY=n(iDe,"A",{href:!0});var rPt=s(PY);yLr=r(rPt,"TFLEDForConditionalGeneration"),rPt.forEach(t),xLr=r(iDe," (LED model)"),iDe.forEach(t),$Lr=i(Ne),OM=n(Ne,"LI",{});var dDe=s(OM);eTe=n(dDe,"STRONG",{});var tPt=s(eTe);kLr=r(tPt,"marian"),tPt.forEach(t),SLr=r(dDe," \u2014 "),BY=n(dDe,"A",{href:!0});var aPt=s(BY);RLr=r(aPt,"TFMarianMTModel"),aPt.forEach(t),PLr=r(dDe," (Marian model)"),dDe.forEach(t),BLr=i(Ne),VM=n(Ne,"LI",{});var cDe=s(VM);oTe=n(cDe,"STRONG",{});var nPt=s(oTe);NLr=r(nPt,"mbart"),nPt.forEach(t),ILr=r(cDe," \u2014 "),NY=n(cDe,"A",{href:!0});var sPt=s(NY);qLr=r(sPt,"TFMBartForConditionalGeneration"),sPt.forEach(t),jLr=r(cDe," (mBART model)"),cDe.forEach(t),DLr=i(Ne),XM=n(Ne,"LI",{});var fDe=s(XM);rTe=n(fDe,"STRONG",{});var lPt=s(rTe);GLr=r(lPt,"mt5"),lPt.forEach(t),OLr=r(fDe," \u2014 "),IY=n(fDe,"A",{href:!0});var iPt=s(IY);VLr=r(iPt,"TFMT5ForConditionalGeneration"),iPt.forEach(t),XLr=r(fDe," (MT5 model)"),fDe.forEach(t),zLr=i(Ne),zM=n(Ne,"LI",{});var mDe=s(zM);tTe=n(mDe,"STRONG",{});var dPt=s(tTe);QLr=r(dPt,"pegasus"),dPt.forEach(t),WLr=r(mDe," \u2014 "),qY=n(mDe,"A",{href:!0});var cPt=s(qY);HLr=r(cPt,"TFPegasusForConditionalGeneration"),cPt.forEach(t),ULr=r(mDe," (Pegasus model)"),mDe.forEach(t),JLr=i(Ne),QM=n(Ne,"LI",{});var gDe=s(QM);aTe=n(gDe,"STRONG",{});var fPt=s(aTe);YLr=r(fPt,"t5"),fPt.forEach(t),KLr=r(gDe," \u2014 "),jY=n(gDe,"A",{href:!0});var mPt=s(jY);ZLr=r(mPt,"TFT5ForConditionalGeneration"),mPt.forEach(t),eyr=r(gDe," (T5 model)"),gDe.forEach(t),Ne.forEach(t),oyr=i(jl),T(WM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),pze=i(f),Ec=n(f,"H2",{class:!0});var EWe=s(Ec);HM=n(EWe,"A",{id:!0,class:!0,href:!0});var gPt=s(HM);nTe=n(gPt,"SPAN",{});var hPt=s(nTe);T(Fx.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),ryr=i(EWe),sTe=n(EWe,"SPAN",{});var pPt=s(sTe);tyr=r(pPt,"TFAutoModelForSequenceClassification"),pPt.forEach(t),EWe.forEach(t),_ze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Tx.$$.fragment,Dl),ayr=i(Dl),Cc=n(Dl,"P",{});var Nte=s(Cc);nyr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=n(Nte,"A",{href:!0});var _Pt=s(DY);syr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),lyr=r(Nte," class method or the "),GY=n(Nte,"A",{href:!0});var uPt=s(GY);iyr=r(uPt,"from_config()"),uPt.forEach(t),dyr=r(Nte,` class
method.`),Nte.forEach(t),cyr=i(Dl),Mx=n(Dl,"P",{});var CWe=s(Mx);fyr=r(CWe,"This class cannot be instantiated directly using "),lTe=n(CWe,"CODE",{});var bPt=s(lTe);myr=r(bPt,"__init__()"),bPt.forEach(t),gyr=r(CWe," (throws an error)."),CWe.forEach(t),hyr=i(Dl),qt=n(Dl,"DIV",{class:!0});var hL=s(qt);T(Ex.$$.fragment,hL),pyr=i(hL),iTe=n(hL,"P",{});var vPt=s(iTe);_yr=r(vPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vPt.forEach(t),uyr=i(hL),wc=n(hL,"P",{});var Ite=s(wc);byr=r(Ite,`Note:
Loading a model from its configuration file does `),dTe=n(Ite,"STRONG",{});var FPt=s(dTe);vyr=r(FPt,"not"),FPt.forEach(t),Fyr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Ite,"A",{href:!0});var TPt=s(OY);Tyr=r(TPt,"from_pretrained()"),TPt.forEach(t),Myr=r(Ite," to load the model weights."),Ite.forEach(t),Eyr=i(hL),T(UM.$$.fragment,hL),hL.forEach(t),Cyr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Cx.$$.fragment,Gl),wyr=i(Gl),cTe=n(Gl,"P",{});var MPt=s(cTe);Ayr=r(MPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MPt.forEach(t),Lyr=i(Gl),gn=n(Gl,"P",{});var pL=s(gn);yyr=r(pL,"The model class to instantiate is selected based on the "),fTe=n(pL,"CODE",{});var EPt=s(fTe);xyr=r(EPt,"model_type"),EPt.forEach(t),$yr=r(pL,` property of the config object (either
passed as an argument or loaded from `),mTe=n(pL,"CODE",{});var CPt=s(mTe);kyr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),Syr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(pL,"CODE",{});var wPt=s(gTe);Ryr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),Pyr=r(pL,":"),pL.forEach(t),Byr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);JM=n(ne,"LI",{});var hDe=s(JM);hTe=n(hDe,"STRONG",{});var APt=s(hTe);Nyr=r(APt,"albert"),APt.forEach(t),Iyr=r(hDe," \u2014 "),VY=n(hDe,"A",{href:!0});var LPt=s(VY);qyr=r(LPt,"TFAlbertForSequenceClassification"),LPt.forEach(t),jyr=r(hDe," (ALBERT model)"),hDe.forEach(t),Dyr=i(ne),YM=n(ne,"LI",{});var pDe=s(YM);pTe=n(pDe,"STRONG",{});var yPt=s(pTe);Gyr=r(yPt,"bert"),yPt.forEach(t),Oyr=r(pDe," \u2014 "),XY=n(pDe,"A",{href:!0});var xPt=s(XY);Vyr=r(xPt,"TFBertForSequenceClassification"),xPt.forEach(t),Xyr=r(pDe," (BERT model)"),pDe.forEach(t),zyr=i(ne),KM=n(ne,"LI",{});var _De=s(KM);_Te=n(_De,"STRONG",{});var $Pt=s(_Te);Qyr=r($Pt,"camembert"),$Pt.forEach(t),Wyr=r(_De," \u2014 "),zY=n(_De,"A",{href:!0});var kPt=s(zY);Hyr=r(kPt,"TFCamembertForSequenceClassification"),kPt.forEach(t),Uyr=r(_De," (CamemBERT model)"),_De.forEach(t),Jyr=i(ne),ZM=n(ne,"LI",{});var uDe=s(ZM);uTe=n(uDe,"STRONG",{});var SPt=s(uTe);Yyr=r(SPt,"convbert"),SPt.forEach(t),Kyr=r(uDe," \u2014 "),QY=n(uDe,"A",{href:!0});var RPt=s(QY);Zyr=r(RPt,"TFConvBertForSequenceClassification"),RPt.forEach(t),e8r=r(uDe," (ConvBERT model)"),uDe.forEach(t),o8r=i(ne),eE=n(ne,"LI",{});var bDe=s(eE);bTe=n(bDe,"STRONG",{});var PPt=s(bTe);r8r=r(PPt,"ctrl"),PPt.forEach(t),t8r=r(bDe," \u2014 "),WY=n(bDe,"A",{href:!0});var BPt=s(WY);a8r=r(BPt,"TFCTRLForSequenceClassification"),BPt.forEach(t),n8r=r(bDe," (CTRL model)"),bDe.forEach(t),s8r=i(ne),oE=n(ne,"LI",{});var vDe=s(oE);vTe=n(vDe,"STRONG",{});var NPt=s(vTe);l8r=r(NPt,"deberta"),NPt.forEach(t),i8r=r(vDe," \u2014 "),HY=n(vDe,"A",{href:!0});var IPt=s(HY);d8r=r(IPt,"TFDebertaForSequenceClassification"),IPt.forEach(t),c8r=r(vDe," (DeBERTa model)"),vDe.forEach(t),f8r=i(ne),rE=n(ne,"LI",{});var FDe=s(rE);FTe=n(FDe,"STRONG",{});var qPt=s(FTe);m8r=r(qPt,"deberta-v2"),qPt.forEach(t),g8r=r(FDe," \u2014 "),UY=n(FDe,"A",{href:!0});var jPt=s(UY);h8r=r(jPt,"TFDebertaV2ForSequenceClassification"),jPt.forEach(t),p8r=r(FDe," (DeBERTa-v2 model)"),FDe.forEach(t),_8r=i(ne),tE=n(ne,"LI",{});var TDe=s(tE);TTe=n(TDe,"STRONG",{});var DPt=s(TTe);u8r=r(DPt,"distilbert"),DPt.forEach(t),b8r=r(TDe," \u2014 "),JY=n(TDe,"A",{href:!0});var GPt=s(JY);v8r=r(GPt,"TFDistilBertForSequenceClassification"),GPt.forEach(t),F8r=r(TDe," (DistilBERT model)"),TDe.forEach(t),T8r=i(ne),aE=n(ne,"LI",{});var MDe=s(aE);MTe=n(MDe,"STRONG",{});var OPt=s(MTe);M8r=r(OPt,"electra"),OPt.forEach(t),E8r=r(MDe," \u2014 "),YY=n(MDe,"A",{href:!0});var VPt=s(YY);C8r=r(VPt,"TFElectraForSequenceClassification"),VPt.forEach(t),w8r=r(MDe," (ELECTRA model)"),MDe.forEach(t),A8r=i(ne),nE=n(ne,"LI",{});var EDe=s(nE);ETe=n(EDe,"STRONG",{});var XPt=s(ETe);L8r=r(XPt,"flaubert"),XPt.forEach(t),y8r=r(EDe," \u2014 "),KY=n(EDe,"A",{href:!0});var zPt=s(KY);x8r=r(zPt,"TFFlaubertForSequenceClassification"),zPt.forEach(t),$8r=r(EDe," (FlauBERT model)"),EDe.forEach(t),k8r=i(ne),sE=n(ne,"LI",{});var CDe=s(sE);CTe=n(CDe,"STRONG",{});var QPt=s(CTe);S8r=r(QPt,"funnel"),QPt.forEach(t),R8r=r(CDe," \u2014 "),ZY=n(CDe,"A",{href:!0});var WPt=s(ZY);P8r=r(WPt,"TFFunnelForSequenceClassification"),WPt.forEach(t),B8r=r(CDe," (Funnel Transformer model)"),CDe.forEach(t),N8r=i(ne),lE=n(ne,"LI",{});var wDe=s(lE);wTe=n(wDe,"STRONG",{});var HPt=s(wTe);I8r=r(HPt,"gpt2"),HPt.forEach(t),q8r=r(wDe," \u2014 "),eK=n(wDe,"A",{href:!0});var UPt=s(eK);j8r=r(UPt,"TFGPT2ForSequenceClassification"),UPt.forEach(t),D8r=r(wDe," (OpenAI GPT-2 model)"),wDe.forEach(t),G8r=i(ne),iE=n(ne,"LI",{});var ADe=s(iE);ATe=n(ADe,"STRONG",{});var JPt=s(ATe);O8r=r(JPt,"gptj"),JPt.forEach(t),V8r=r(ADe," \u2014 "),oK=n(ADe,"A",{href:!0});var YPt=s(oK);X8r=r(YPt,"TFGPTJForSequenceClassification"),YPt.forEach(t),z8r=r(ADe," (GPT-J model)"),ADe.forEach(t),Q8r=i(ne),dE=n(ne,"LI",{});var LDe=s(dE);LTe=n(LDe,"STRONG",{});var KPt=s(LTe);W8r=r(KPt,"layoutlm"),KPt.forEach(t),H8r=r(LDe," \u2014 "),rK=n(LDe,"A",{href:!0});var ZPt=s(rK);U8r=r(ZPt,"TFLayoutLMForSequenceClassification"),ZPt.forEach(t),J8r=r(LDe," (LayoutLM model)"),LDe.forEach(t),Y8r=i(ne),cE=n(ne,"LI",{});var yDe=s(cE);yTe=n(yDe,"STRONG",{});var eBt=s(yTe);K8r=r(eBt,"longformer"),eBt.forEach(t),Z8r=r(yDe," \u2014 "),tK=n(yDe,"A",{href:!0});var oBt=s(tK);e9r=r(oBt,"TFLongformerForSequenceClassification"),oBt.forEach(t),o9r=r(yDe," (Longformer model)"),yDe.forEach(t),r9r=i(ne),fE=n(ne,"LI",{});var xDe=s(fE);xTe=n(xDe,"STRONG",{});var rBt=s(xTe);t9r=r(rBt,"mobilebert"),rBt.forEach(t),a9r=r(xDe," \u2014 "),aK=n(xDe,"A",{href:!0});var tBt=s(aK);n9r=r(tBt,"TFMobileBertForSequenceClassification"),tBt.forEach(t),s9r=r(xDe," (MobileBERT model)"),xDe.forEach(t),l9r=i(ne),mE=n(ne,"LI",{});var $De=s(mE);$Te=n($De,"STRONG",{});var aBt=s($Te);i9r=r(aBt,"mpnet"),aBt.forEach(t),d9r=r($De," \u2014 "),nK=n($De,"A",{href:!0});var nBt=s(nK);c9r=r(nBt,"TFMPNetForSequenceClassification"),nBt.forEach(t),f9r=r($De," (MPNet model)"),$De.forEach(t),m9r=i(ne),gE=n(ne,"LI",{});var kDe=s(gE);kTe=n(kDe,"STRONG",{});var sBt=s(kTe);g9r=r(sBt,"openai-gpt"),sBt.forEach(t),h9r=r(kDe," \u2014 "),sK=n(kDe,"A",{href:!0});var lBt=s(sK);p9r=r(lBt,"TFOpenAIGPTForSequenceClassification"),lBt.forEach(t),_9r=r(kDe," (OpenAI GPT model)"),kDe.forEach(t),u9r=i(ne),hE=n(ne,"LI",{});var SDe=s(hE);STe=n(SDe,"STRONG",{});var iBt=s(STe);b9r=r(iBt,"rembert"),iBt.forEach(t),v9r=r(SDe," \u2014 "),lK=n(SDe,"A",{href:!0});var dBt=s(lK);F9r=r(dBt,"TFRemBertForSequenceClassification"),dBt.forEach(t),T9r=r(SDe," (RemBERT model)"),SDe.forEach(t),M9r=i(ne),pE=n(ne,"LI",{});var RDe=s(pE);RTe=n(RDe,"STRONG",{});var cBt=s(RTe);E9r=r(cBt,"roberta"),cBt.forEach(t),C9r=r(RDe," \u2014 "),iK=n(RDe,"A",{href:!0});var fBt=s(iK);w9r=r(fBt,"TFRobertaForSequenceClassification"),fBt.forEach(t),A9r=r(RDe," (RoBERTa model)"),RDe.forEach(t),L9r=i(ne),_E=n(ne,"LI",{});var PDe=s(_E);PTe=n(PDe,"STRONG",{});var mBt=s(PTe);y9r=r(mBt,"roformer"),mBt.forEach(t),x9r=r(PDe," \u2014 "),dK=n(PDe,"A",{href:!0});var gBt=s(dK);$9r=r(gBt,"TFRoFormerForSequenceClassification"),gBt.forEach(t),k9r=r(PDe," (RoFormer model)"),PDe.forEach(t),S9r=i(ne),uE=n(ne,"LI",{});var BDe=s(uE);BTe=n(BDe,"STRONG",{});var hBt=s(BTe);R9r=r(hBt,"tapas"),hBt.forEach(t),P9r=r(BDe," \u2014 "),cK=n(BDe,"A",{href:!0});var pBt=s(cK);B9r=r(pBt,"TFTapasForSequenceClassification"),pBt.forEach(t),N9r=r(BDe," (TAPAS model)"),BDe.forEach(t),I9r=i(ne),bE=n(ne,"LI",{});var NDe=s(bE);NTe=n(NDe,"STRONG",{});var _Bt=s(NTe);q9r=r(_Bt,"transfo-xl"),_Bt.forEach(t),j9r=r(NDe," \u2014 "),fK=n(NDe,"A",{href:!0});var uBt=s(fK);D9r=r(uBt,"TFTransfoXLForSequenceClassification"),uBt.forEach(t),G9r=r(NDe," (Transformer-XL model)"),NDe.forEach(t),O9r=i(ne),vE=n(ne,"LI",{});var IDe=s(vE);ITe=n(IDe,"STRONG",{});var bBt=s(ITe);V9r=r(bBt,"xlm"),bBt.forEach(t),X9r=r(IDe," \u2014 "),mK=n(IDe,"A",{href:!0});var vBt=s(mK);z9r=r(vBt,"TFXLMForSequenceClassification"),vBt.forEach(t),Q9r=r(IDe," (XLM model)"),IDe.forEach(t),W9r=i(ne),FE=n(ne,"LI",{});var qDe=s(FE);qTe=n(qDe,"STRONG",{});var FBt=s(qTe);H9r=r(FBt,"xlm-roberta"),FBt.forEach(t),U9r=r(qDe," \u2014 "),gK=n(qDe,"A",{href:!0});var TBt=s(gK);J9r=r(TBt,"TFXLMRobertaForSequenceClassification"),TBt.forEach(t),Y9r=r(qDe," (XLM-RoBERTa model)"),qDe.forEach(t),K9r=i(ne),TE=n(ne,"LI",{});var jDe=s(TE);jTe=n(jDe,"STRONG",{});var MBt=s(jTe);Z9r=r(MBt,"xlnet"),MBt.forEach(t),exr=r(jDe," \u2014 "),hK=n(jDe,"A",{href:!0});var EBt=s(hK);oxr=r(EBt,"TFXLNetForSequenceClassification"),EBt.forEach(t),rxr=r(jDe," (XLNet model)"),jDe.forEach(t),ne.forEach(t),txr=i(Gl),T(ME.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),uze=i(f),Ac=n(f,"H2",{class:!0});var wWe=s(Ac);EE=n(wWe,"A",{id:!0,class:!0,href:!0});var CBt=s(EE);DTe=n(CBt,"SPAN",{});var wBt=s(DTe);T(wx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),axr=i(wWe),GTe=n(wWe,"SPAN",{});var ABt=s(GTe);nxr=r(ABt,"TFAutoModelForMultipleChoice"),ABt.forEach(t),wWe.forEach(t),bze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Ax.$$.fragment,Ol),sxr=i(Ol),Lc=n(Ol,"P",{});var qte=s(Lc);lxr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=n(qte,"A",{href:!0});var LBt=s(pK);ixr=r(LBt,"from_pretrained()"),LBt.forEach(t),dxr=r(qte," class method or the "),_K=n(qte,"A",{href:!0});var yBt=s(_K);cxr=r(yBt,"from_config()"),yBt.forEach(t),fxr=r(qte,` class
method.`),qte.forEach(t),mxr=i(Ol),Lx=n(Ol,"P",{});var AWe=s(Lx);gxr=r(AWe,"This class cannot be instantiated directly using "),OTe=n(AWe,"CODE",{});var xBt=s(OTe);hxr=r(xBt,"__init__()"),xBt.forEach(t),pxr=r(AWe," (throws an error)."),AWe.forEach(t),_xr=i(Ol),jt=n(Ol,"DIV",{class:!0});var _L=s(jt);T(yx.$$.fragment,_L),uxr=i(_L),VTe=n(_L,"P",{});var $Bt=s(VTe);bxr=r($Bt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Bt.forEach(t),vxr=i(_L),yc=n(_L,"P",{});var jte=s(yc);Fxr=r(jte,`Note:
Loading a model from its configuration file does `),XTe=n(jte,"STRONG",{});var kBt=s(XTe);Txr=r(kBt,"not"),kBt.forEach(t),Mxr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(jte,"A",{href:!0});var SBt=s(uK);Exr=r(SBt,"from_pretrained()"),SBt.forEach(t),Cxr=r(jte," to load the model weights."),jte.forEach(t),wxr=i(_L),T(CE.$$.fragment,_L),_L.forEach(t),Axr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(xx.$$.fragment,Vl),Lxr=i(Vl),zTe=n(Vl,"P",{});var RBt=s(zTe);yxr=r(RBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),RBt.forEach(t),xxr=i(Vl),hn=n(Vl,"P",{});var uL=s(hn);$xr=r(uL,"The model class to instantiate is selected based on the "),QTe=n(uL,"CODE",{});var PBt=s(QTe);kxr=r(PBt,"model_type"),PBt.forEach(t),Sxr=r(uL,` property of the config object (either
passed as an argument or loaded from `),WTe=n(uL,"CODE",{});var BBt=s(WTe);Rxr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),Pxr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(uL,"CODE",{});var NBt=s(HTe);Bxr=r(NBt,"pretrained_model_name_or_path"),NBt.forEach(t),Nxr=r(uL,":"),uL.forEach(t),Ixr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);wE=n(Fe,"LI",{});var DDe=s(wE);UTe=n(DDe,"STRONG",{});var IBt=s(UTe);qxr=r(IBt,"albert"),IBt.forEach(t),jxr=r(DDe," \u2014 "),bK=n(DDe,"A",{href:!0});var qBt=s(bK);Dxr=r(qBt,"TFAlbertForMultipleChoice"),qBt.forEach(t),Gxr=r(DDe," (ALBERT model)"),DDe.forEach(t),Oxr=i(Fe),AE=n(Fe,"LI",{});var GDe=s(AE);JTe=n(GDe,"STRONG",{});var jBt=s(JTe);Vxr=r(jBt,"bert"),jBt.forEach(t),Xxr=r(GDe," \u2014 "),vK=n(GDe,"A",{href:!0});var DBt=s(vK);zxr=r(DBt,"TFBertForMultipleChoice"),DBt.forEach(t),Qxr=r(GDe," (BERT model)"),GDe.forEach(t),Wxr=i(Fe),LE=n(Fe,"LI",{});var ODe=s(LE);YTe=n(ODe,"STRONG",{});var GBt=s(YTe);Hxr=r(GBt,"camembert"),GBt.forEach(t),Uxr=r(ODe," \u2014 "),FK=n(ODe,"A",{href:!0});var OBt=s(FK);Jxr=r(OBt,"TFCamembertForMultipleChoice"),OBt.forEach(t),Yxr=r(ODe," (CamemBERT model)"),ODe.forEach(t),Kxr=i(Fe),yE=n(Fe,"LI",{});var VDe=s(yE);KTe=n(VDe,"STRONG",{});var VBt=s(KTe);Zxr=r(VBt,"convbert"),VBt.forEach(t),e$r=r(VDe," \u2014 "),TK=n(VDe,"A",{href:!0});var XBt=s(TK);o$r=r(XBt,"TFConvBertForMultipleChoice"),XBt.forEach(t),r$r=r(VDe," (ConvBERT model)"),VDe.forEach(t),t$r=i(Fe),xE=n(Fe,"LI",{});var XDe=s(xE);ZTe=n(XDe,"STRONG",{});var zBt=s(ZTe);a$r=r(zBt,"distilbert"),zBt.forEach(t),n$r=r(XDe," \u2014 "),MK=n(XDe,"A",{href:!0});var QBt=s(MK);s$r=r(QBt,"TFDistilBertForMultipleChoice"),QBt.forEach(t),l$r=r(XDe," (DistilBERT model)"),XDe.forEach(t),i$r=i(Fe),$E=n(Fe,"LI",{});var zDe=s($E);eMe=n(zDe,"STRONG",{});var WBt=s(eMe);d$r=r(WBt,"electra"),WBt.forEach(t),c$r=r(zDe," \u2014 "),EK=n(zDe,"A",{href:!0});var HBt=s(EK);f$r=r(HBt,"TFElectraForMultipleChoice"),HBt.forEach(t),m$r=r(zDe," (ELECTRA model)"),zDe.forEach(t),g$r=i(Fe),kE=n(Fe,"LI",{});var QDe=s(kE);oMe=n(QDe,"STRONG",{});var UBt=s(oMe);h$r=r(UBt,"flaubert"),UBt.forEach(t),p$r=r(QDe," \u2014 "),CK=n(QDe,"A",{href:!0});var JBt=s(CK);_$r=r(JBt,"TFFlaubertForMultipleChoice"),JBt.forEach(t),u$r=r(QDe," (FlauBERT model)"),QDe.forEach(t),b$r=i(Fe),SE=n(Fe,"LI",{});var WDe=s(SE);rMe=n(WDe,"STRONG",{});var YBt=s(rMe);v$r=r(YBt,"funnel"),YBt.forEach(t),F$r=r(WDe," \u2014 "),wK=n(WDe,"A",{href:!0});var KBt=s(wK);T$r=r(KBt,"TFFunnelForMultipleChoice"),KBt.forEach(t),M$r=r(WDe," (Funnel Transformer model)"),WDe.forEach(t),E$r=i(Fe),RE=n(Fe,"LI",{});var HDe=s(RE);tMe=n(HDe,"STRONG",{});var ZBt=s(tMe);C$r=r(ZBt,"longformer"),ZBt.forEach(t),w$r=r(HDe," \u2014 "),AK=n(HDe,"A",{href:!0});var eNt=s(AK);A$r=r(eNt,"TFLongformerForMultipleChoice"),eNt.forEach(t),L$r=r(HDe," (Longformer model)"),HDe.forEach(t),y$r=i(Fe),PE=n(Fe,"LI",{});var UDe=s(PE);aMe=n(UDe,"STRONG",{});var oNt=s(aMe);x$r=r(oNt,"mobilebert"),oNt.forEach(t),$$r=r(UDe," \u2014 "),LK=n(UDe,"A",{href:!0});var rNt=s(LK);k$r=r(rNt,"TFMobileBertForMultipleChoice"),rNt.forEach(t),S$r=r(UDe," (MobileBERT model)"),UDe.forEach(t),R$r=i(Fe),BE=n(Fe,"LI",{});var JDe=s(BE);nMe=n(JDe,"STRONG",{});var tNt=s(nMe);P$r=r(tNt,"mpnet"),tNt.forEach(t),B$r=r(JDe," \u2014 "),yK=n(JDe,"A",{href:!0});var aNt=s(yK);N$r=r(aNt,"TFMPNetForMultipleChoice"),aNt.forEach(t),I$r=r(JDe," (MPNet model)"),JDe.forEach(t),q$r=i(Fe),NE=n(Fe,"LI",{});var YDe=s(NE);sMe=n(YDe,"STRONG",{});var nNt=s(sMe);j$r=r(nNt,"rembert"),nNt.forEach(t),D$r=r(YDe," \u2014 "),xK=n(YDe,"A",{href:!0});var sNt=s(xK);G$r=r(sNt,"TFRemBertForMultipleChoice"),sNt.forEach(t),O$r=r(YDe," (RemBERT model)"),YDe.forEach(t),V$r=i(Fe),IE=n(Fe,"LI",{});var KDe=s(IE);lMe=n(KDe,"STRONG",{});var lNt=s(lMe);X$r=r(lNt,"roberta"),lNt.forEach(t),z$r=r(KDe," \u2014 "),$K=n(KDe,"A",{href:!0});var iNt=s($K);Q$r=r(iNt,"TFRobertaForMultipleChoice"),iNt.forEach(t),W$r=r(KDe," (RoBERTa model)"),KDe.forEach(t),H$r=i(Fe),qE=n(Fe,"LI",{});var ZDe=s(qE);iMe=n(ZDe,"STRONG",{});var dNt=s(iMe);U$r=r(dNt,"roformer"),dNt.forEach(t),J$r=r(ZDe," \u2014 "),kK=n(ZDe,"A",{href:!0});var cNt=s(kK);Y$r=r(cNt,"TFRoFormerForMultipleChoice"),cNt.forEach(t),K$r=r(ZDe," (RoFormer model)"),ZDe.forEach(t),Z$r=i(Fe),jE=n(Fe,"LI",{});var eGe=s(jE);dMe=n(eGe,"STRONG",{});var fNt=s(dMe);ekr=r(fNt,"xlm"),fNt.forEach(t),okr=r(eGe," \u2014 "),SK=n(eGe,"A",{href:!0});var mNt=s(SK);rkr=r(mNt,"TFXLMForMultipleChoice"),mNt.forEach(t),tkr=r(eGe," (XLM model)"),eGe.forEach(t),akr=i(Fe),DE=n(Fe,"LI",{});var oGe=s(DE);cMe=n(oGe,"STRONG",{});var gNt=s(cMe);nkr=r(gNt,"xlm-roberta"),gNt.forEach(t),skr=r(oGe," \u2014 "),RK=n(oGe,"A",{href:!0});var hNt=s(RK);lkr=r(hNt,"TFXLMRobertaForMultipleChoice"),hNt.forEach(t),ikr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),dkr=i(Fe),GE=n(Fe,"LI",{});var rGe=s(GE);fMe=n(rGe,"STRONG",{});var pNt=s(fMe);ckr=r(pNt,"xlnet"),pNt.forEach(t),fkr=r(rGe," \u2014 "),PK=n(rGe,"A",{href:!0});var _Nt=s(PK);mkr=r(_Nt,"TFXLNetForMultipleChoice"),_Nt.forEach(t),gkr=r(rGe," (XLNet model)"),rGe.forEach(t),Fe.forEach(t),hkr=i(Vl),T(OE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),vze=i(f),xc=n(f,"H2",{class:!0});var LWe=s(xc);VE=n(LWe,"A",{id:!0,class:!0,href:!0});var uNt=s(VE);mMe=n(uNt,"SPAN",{});var bNt=s(mMe);T($x.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),pkr=i(LWe),gMe=n(LWe,"SPAN",{});var vNt=s(gMe);_kr=r(vNt,"TFAutoModelForNextSentencePrediction"),vNt.forEach(t),LWe.forEach(t),Fze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(kx.$$.fragment,Xl),ukr=i(Xl),$c=n(Xl,"P",{});var Dte=s($c);bkr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=n(Dte,"A",{href:!0});var FNt=s(BK);vkr=r(FNt,"from_pretrained()"),FNt.forEach(t),Fkr=r(Dte," class method or the "),NK=n(Dte,"A",{href:!0});var TNt=s(NK);Tkr=r(TNt,"from_config()"),TNt.forEach(t),Mkr=r(Dte,` class
method.`),Dte.forEach(t),Ekr=i(Xl),Sx=n(Xl,"P",{});var yWe=s(Sx);Ckr=r(yWe,"This class cannot be instantiated directly using "),hMe=n(yWe,"CODE",{});var MNt=s(hMe);wkr=r(MNt,"__init__()"),MNt.forEach(t),Akr=r(yWe," (throws an error)."),yWe.forEach(t),Lkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var bL=s(Dt);T(Rx.$$.fragment,bL),ykr=i(bL),pMe=n(bL,"P",{});var ENt=s(pMe);xkr=r(ENt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ENt.forEach(t),$kr=i(bL),kc=n(bL,"P",{});var Gte=s(kc);kkr=r(Gte,`Note:
Loading a model from its configuration file does `),_Me=n(Gte,"STRONG",{});var CNt=s(_Me);Skr=r(CNt,"not"),CNt.forEach(t),Rkr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Gte,"A",{href:!0});var wNt=s(IK);Pkr=r(wNt,"from_pretrained()"),wNt.forEach(t),Bkr=r(Gte," to load the model weights."),Gte.forEach(t),Nkr=i(bL),T(XE.$$.fragment,bL),bL.forEach(t),Ikr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Px.$$.fragment,zl),qkr=i(zl),uMe=n(zl,"P",{});var ANt=s(uMe);jkr=r(ANt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ANt.forEach(t),Dkr=i(zl),pn=n(zl,"P",{});var vL=s(pn);Gkr=r(vL,"The model class to instantiate is selected based on the "),bMe=n(vL,"CODE",{});var LNt=s(bMe);Okr=r(LNt,"model_type"),LNt.forEach(t),Vkr=r(vL,` property of the config object (either
passed as an argument or loaded from `),vMe=n(vL,"CODE",{});var yNt=s(vMe);Xkr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),zkr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(vL,"CODE",{});var xNt=s(FMe);Qkr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),Wkr=r(vL,":"),vL.forEach(t),Hkr=i(zl),Bx=n(zl,"UL",{});var xWe=s(Bx);zE=n(xWe,"LI",{});var tGe=s(zE);TMe=n(tGe,"STRONG",{});var $Nt=s(TMe);Ukr=r($Nt,"bert"),$Nt.forEach(t),Jkr=r(tGe," \u2014 "),qK=n(tGe,"A",{href:!0});var kNt=s(qK);Ykr=r(kNt,"TFBertForNextSentencePrediction"),kNt.forEach(t),Kkr=r(tGe," (BERT model)"),tGe.forEach(t),Zkr=i(xWe),QE=n(xWe,"LI",{});var aGe=s(QE);MMe=n(aGe,"STRONG",{});var SNt=s(MMe);eSr=r(SNt,"mobilebert"),SNt.forEach(t),oSr=r(aGe," \u2014 "),jK=n(aGe,"A",{href:!0});var RNt=s(jK);rSr=r(RNt,"TFMobileBertForNextSentencePrediction"),RNt.forEach(t),tSr=r(aGe," (MobileBERT model)"),aGe.forEach(t),xWe.forEach(t),aSr=i(zl),T(WE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Tze=i(f),Sc=n(f,"H2",{class:!0});var $We=s(Sc);HE=n($We,"A",{id:!0,class:!0,href:!0});var PNt=s(HE);EMe=n(PNt,"SPAN",{});var BNt=s(EMe);T(Nx.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),nSr=i($We),CMe=n($We,"SPAN",{});var NNt=s(CMe);sSr=r(NNt,"TFAutoModelForTableQuestionAnswering"),NNt.forEach(t),$We.forEach(t),Mze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Ix.$$.fragment,Ql),lSr=i(Ql),Rc=n(Ql,"P",{});var Ote=s(Rc);iSr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=n(Ote,"A",{href:!0});var INt=s(DK);dSr=r(INt,"from_pretrained()"),INt.forEach(t),cSr=r(Ote," class method or the "),GK=n(Ote,"A",{href:!0});var qNt=s(GK);fSr=r(qNt,"from_config()"),qNt.forEach(t),mSr=r(Ote,` class
method.`),Ote.forEach(t),gSr=i(Ql),qx=n(Ql,"P",{});var kWe=s(qx);hSr=r(kWe,"This class cannot be instantiated directly using "),wMe=n(kWe,"CODE",{});var jNt=s(wMe);pSr=r(jNt,"__init__()"),jNt.forEach(t),_Sr=r(kWe," (throws an error)."),kWe.forEach(t),uSr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var FL=s(Gt);T(jx.$$.fragment,FL),bSr=i(FL),AMe=n(FL,"P",{});var DNt=s(AMe);vSr=r(DNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DNt.forEach(t),FSr=i(FL),Pc=n(FL,"P",{});var Vte=s(Pc);TSr=r(Vte,`Note:
Loading a model from its configuration file does `),LMe=n(Vte,"STRONG",{});var GNt=s(LMe);MSr=r(GNt,"not"),GNt.forEach(t),ESr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Vte,"A",{href:!0});var ONt=s(OK);CSr=r(ONt,"from_pretrained()"),ONt.forEach(t),wSr=r(Vte," to load the model weights."),Vte.forEach(t),ASr=i(FL),T(UE.$$.fragment,FL),FL.forEach(t),LSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Dx.$$.fragment,Wl),ySr=i(Wl),yMe=n(Wl,"P",{});var VNt=s(yMe);xSr=r(VNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VNt.forEach(t),$Sr=i(Wl),_n=n(Wl,"P",{});var TL=s(_n);kSr=r(TL,"The model class to instantiate is selected based on the "),xMe=n(TL,"CODE",{});var XNt=s(xMe);SSr=r(XNt,"model_type"),XNt.forEach(t),RSr=r(TL,` property of the config object (either
passed as an argument or loaded from `),$Me=n(TL,"CODE",{});var zNt=s($Me);PSr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),BSr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(TL,"CODE",{});var QNt=s(kMe);NSr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),ISr=r(TL,":"),TL.forEach(t),qSr=i(Wl),SMe=n(Wl,"UL",{});var WNt=s(SMe);JE=n(WNt,"LI",{});var nGe=s(JE);RMe=n(nGe,"STRONG",{});var HNt=s(RMe);jSr=r(HNt,"tapas"),HNt.forEach(t),DSr=r(nGe," \u2014 "),VK=n(nGe,"A",{href:!0});var UNt=s(VK);GSr=r(UNt,"TFTapasForQuestionAnswering"),UNt.forEach(t),OSr=r(nGe," (TAPAS model)"),nGe.forEach(t),WNt.forEach(t),VSr=i(Wl),T(YE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Eze=i(f),Bc=n(f,"H2",{class:!0});var SWe=s(Bc);KE=n(SWe,"A",{id:!0,class:!0,href:!0});var JNt=s(KE);PMe=n(JNt,"SPAN",{});var YNt=s(PMe);T(Gx.$$.fragment,YNt),YNt.forEach(t),JNt.forEach(t),XSr=i(SWe),BMe=n(SWe,"SPAN",{});var KNt=s(BMe);zSr=r(KNt,"TFAutoModelForTokenClassification"),KNt.forEach(t),SWe.forEach(t),Cze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Ox.$$.fragment,Hl),QSr=i(Hl),Nc=n(Hl,"P",{});var Xte=s(Nc);WSr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=n(Xte,"A",{href:!0});var ZNt=s(XK);HSr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),USr=r(Xte," class method or the "),zK=n(Xte,"A",{href:!0});var eIt=s(zK);JSr=r(eIt,"from_config()"),eIt.forEach(t),YSr=r(Xte,` class
method.`),Xte.forEach(t),KSr=i(Hl),Vx=n(Hl,"P",{});var RWe=s(Vx);ZSr=r(RWe,"This class cannot be instantiated directly using "),NMe=n(RWe,"CODE",{});var oIt=s(NMe);eRr=r(oIt,"__init__()"),oIt.forEach(t),oRr=r(RWe," (throws an error)."),RWe.forEach(t),rRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var ML=s(Ot);T(Xx.$$.fragment,ML),tRr=i(ML),IMe=n(ML,"P",{});var rIt=s(IMe);aRr=r(rIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rIt.forEach(t),nRr=i(ML),Ic=n(ML,"P",{});var zte=s(Ic);sRr=r(zte,`Note:
Loading a model from its configuration file does `),qMe=n(zte,"STRONG",{});var tIt=s(qMe);lRr=r(tIt,"not"),tIt.forEach(t),iRr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(zte,"A",{href:!0});var aIt=s(QK);dRr=r(aIt,"from_pretrained()"),aIt.forEach(t),cRr=r(zte," to load the model weights."),zte.forEach(t),fRr=i(ML),T(ZE.$$.fragment,ML),ML.forEach(t),mRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(zx.$$.fragment,Ul),gRr=i(Ul),jMe=n(Ul,"P",{});var nIt=s(jMe);hRr=r(nIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nIt.forEach(t),pRr=i(Ul),un=n(Ul,"P",{});var EL=s(un);_Rr=r(EL,"The model class to instantiate is selected based on the "),DMe=n(EL,"CODE",{});var sIt=s(DMe);uRr=r(sIt,"model_type"),sIt.forEach(t),bRr=r(EL,` property of the config object (either
passed as an argument or loaded from `),GMe=n(EL,"CODE",{});var lIt=s(GMe);vRr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),FRr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(EL,"CODE",{});var iIt=s(OMe);TRr=r(iIt,"pretrained_model_name_or_path"),iIt.forEach(t),MRr=r(EL,":"),EL.forEach(t),ERr=i(Ul),de=n(Ul,"UL",{});var me=s(de);eC=n(me,"LI",{});var sGe=s(eC);VMe=n(sGe,"STRONG",{});var dIt=s(VMe);CRr=r(dIt,"albert"),dIt.forEach(t),wRr=r(sGe," \u2014 "),WK=n(sGe,"A",{href:!0});var cIt=s(WK);ARr=r(cIt,"TFAlbertForTokenClassification"),cIt.forEach(t),LRr=r(sGe," (ALBERT model)"),sGe.forEach(t),yRr=i(me),oC=n(me,"LI",{});var lGe=s(oC);XMe=n(lGe,"STRONG",{});var fIt=s(XMe);xRr=r(fIt,"bert"),fIt.forEach(t),$Rr=r(lGe," \u2014 "),HK=n(lGe,"A",{href:!0});var mIt=s(HK);kRr=r(mIt,"TFBertForTokenClassification"),mIt.forEach(t),SRr=r(lGe," (BERT model)"),lGe.forEach(t),RRr=i(me),rC=n(me,"LI",{});var iGe=s(rC);zMe=n(iGe,"STRONG",{});var gIt=s(zMe);PRr=r(gIt,"camembert"),gIt.forEach(t),BRr=r(iGe," \u2014 "),UK=n(iGe,"A",{href:!0});var hIt=s(UK);NRr=r(hIt,"TFCamembertForTokenClassification"),hIt.forEach(t),IRr=r(iGe," (CamemBERT model)"),iGe.forEach(t),qRr=i(me),tC=n(me,"LI",{});var dGe=s(tC);QMe=n(dGe,"STRONG",{});var pIt=s(QMe);jRr=r(pIt,"convbert"),pIt.forEach(t),DRr=r(dGe," \u2014 "),JK=n(dGe,"A",{href:!0});var _It=s(JK);GRr=r(_It,"TFConvBertForTokenClassification"),_It.forEach(t),ORr=r(dGe," (ConvBERT model)"),dGe.forEach(t),VRr=i(me),aC=n(me,"LI",{});var cGe=s(aC);WMe=n(cGe,"STRONG",{});var uIt=s(WMe);XRr=r(uIt,"deberta"),uIt.forEach(t),zRr=r(cGe," \u2014 "),YK=n(cGe,"A",{href:!0});var bIt=s(YK);QRr=r(bIt,"TFDebertaForTokenClassification"),bIt.forEach(t),WRr=r(cGe," (DeBERTa model)"),cGe.forEach(t),HRr=i(me),nC=n(me,"LI",{});var fGe=s(nC);HMe=n(fGe,"STRONG",{});var vIt=s(HMe);URr=r(vIt,"deberta-v2"),vIt.forEach(t),JRr=r(fGe," \u2014 "),KK=n(fGe,"A",{href:!0});var FIt=s(KK);YRr=r(FIt,"TFDebertaV2ForTokenClassification"),FIt.forEach(t),KRr=r(fGe," (DeBERTa-v2 model)"),fGe.forEach(t),ZRr=i(me),sC=n(me,"LI",{});var mGe=s(sC);UMe=n(mGe,"STRONG",{});var TIt=s(UMe);ePr=r(TIt,"distilbert"),TIt.forEach(t),oPr=r(mGe," \u2014 "),ZK=n(mGe,"A",{href:!0});var MIt=s(ZK);rPr=r(MIt,"TFDistilBertForTokenClassification"),MIt.forEach(t),tPr=r(mGe," (DistilBERT model)"),mGe.forEach(t),aPr=i(me),lC=n(me,"LI",{});var gGe=s(lC);JMe=n(gGe,"STRONG",{});var EIt=s(JMe);nPr=r(EIt,"electra"),EIt.forEach(t),sPr=r(gGe," \u2014 "),eZ=n(gGe,"A",{href:!0});var CIt=s(eZ);lPr=r(CIt,"TFElectraForTokenClassification"),CIt.forEach(t),iPr=r(gGe," (ELECTRA model)"),gGe.forEach(t),dPr=i(me),iC=n(me,"LI",{});var hGe=s(iC);YMe=n(hGe,"STRONG",{});var wIt=s(YMe);cPr=r(wIt,"flaubert"),wIt.forEach(t),fPr=r(hGe," \u2014 "),oZ=n(hGe,"A",{href:!0});var AIt=s(oZ);mPr=r(AIt,"TFFlaubertForTokenClassification"),AIt.forEach(t),gPr=r(hGe," (FlauBERT model)"),hGe.forEach(t),hPr=i(me),dC=n(me,"LI",{});var pGe=s(dC);KMe=n(pGe,"STRONG",{});var LIt=s(KMe);pPr=r(LIt,"funnel"),LIt.forEach(t),_Pr=r(pGe," \u2014 "),rZ=n(pGe,"A",{href:!0});var yIt=s(rZ);uPr=r(yIt,"TFFunnelForTokenClassification"),yIt.forEach(t),bPr=r(pGe," (Funnel Transformer model)"),pGe.forEach(t),vPr=i(me),cC=n(me,"LI",{});var _Ge=s(cC);ZMe=n(_Ge,"STRONG",{});var xIt=s(ZMe);FPr=r(xIt,"layoutlm"),xIt.forEach(t),TPr=r(_Ge," \u2014 "),tZ=n(_Ge,"A",{href:!0});var $It=s(tZ);MPr=r($It,"TFLayoutLMForTokenClassification"),$It.forEach(t),EPr=r(_Ge," (LayoutLM model)"),_Ge.forEach(t),CPr=i(me),fC=n(me,"LI",{});var uGe=s(fC);eEe=n(uGe,"STRONG",{});var kIt=s(eEe);wPr=r(kIt,"longformer"),kIt.forEach(t),APr=r(uGe," \u2014 "),aZ=n(uGe,"A",{href:!0});var SIt=s(aZ);LPr=r(SIt,"TFLongformerForTokenClassification"),SIt.forEach(t),yPr=r(uGe," (Longformer model)"),uGe.forEach(t),xPr=i(me),mC=n(me,"LI",{});var bGe=s(mC);oEe=n(bGe,"STRONG",{});var RIt=s(oEe);$Pr=r(RIt,"mobilebert"),RIt.forEach(t),kPr=r(bGe," \u2014 "),nZ=n(bGe,"A",{href:!0});var PIt=s(nZ);SPr=r(PIt,"TFMobileBertForTokenClassification"),PIt.forEach(t),RPr=r(bGe," (MobileBERT model)"),bGe.forEach(t),PPr=i(me),gC=n(me,"LI",{});var vGe=s(gC);rEe=n(vGe,"STRONG",{});var BIt=s(rEe);BPr=r(BIt,"mpnet"),BIt.forEach(t),NPr=r(vGe," \u2014 "),sZ=n(vGe,"A",{href:!0});var NIt=s(sZ);IPr=r(NIt,"TFMPNetForTokenClassification"),NIt.forEach(t),qPr=r(vGe," (MPNet model)"),vGe.forEach(t),jPr=i(me),hC=n(me,"LI",{});var FGe=s(hC);tEe=n(FGe,"STRONG",{});var IIt=s(tEe);DPr=r(IIt,"rembert"),IIt.forEach(t),GPr=r(FGe," \u2014 "),lZ=n(FGe,"A",{href:!0});var qIt=s(lZ);OPr=r(qIt,"TFRemBertForTokenClassification"),qIt.forEach(t),VPr=r(FGe," (RemBERT model)"),FGe.forEach(t),XPr=i(me),pC=n(me,"LI",{});var TGe=s(pC);aEe=n(TGe,"STRONG",{});var jIt=s(aEe);zPr=r(jIt,"roberta"),jIt.forEach(t),QPr=r(TGe," \u2014 "),iZ=n(TGe,"A",{href:!0});var DIt=s(iZ);WPr=r(DIt,"TFRobertaForTokenClassification"),DIt.forEach(t),HPr=r(TGe," (RoBERTa model)"),TGe.forEach(t),UPr=i(me),_C=n(me,"LI",{});var MGe=s(_C);nEe=n(MGe,"STRONG",{});var GIt=s(nEe);JPr=r(GIt,"roformer"),GIt.forEach(t),YPr=r(MGe," \u2014 "),dZ=n(MGe,"A",{href:!0});var OIt=s(dZ);KPr=r(OIt,"TFRoFormerForTokenClassification"),OIt.forEach(t),ZPr=r(MGe," (RoFormer model)"),MGe.forEach(t),eBr=i(me),uC=n(me,"LI",{});var EGe=s(uC);sEe=n(EGe,"STRONG",{});var VIt=s(sEe);oBr=r(VIt,"xlm"),VIt.forEach(t),rBr=r(EGe," \u2014 "),cZ=n(EGe,"A",{href:!0});var XIt=s(cZ);tBr=r(XIt,"TFXLMForTokenClassification"),XIt.forEach(t),aBr=r(EGe," (XLM model)"),EGe.forEach(t),nBr=i(me),bC=n(me,"LI",{});var CGe=s(bC);lEe=n(CGe,"STRONG",{});var zIt=s(lEe);sBr=r(zIt,"xlm-roberta"),zIt.forEach(t),lBr=r(CGe," \u2014 "),fZ=n(CGe,"A",{href:!0});var QIt=s(fZ);iBr=r(QIt,"TFXLMRobertaForTokenClassification"),QIt.forEach(t),dBr=r(CGe," (XLM-RoBERTa model)"),CGe.forEach(t),cBr=i(me),vC=n(me,"LI",{});var wGe=s(vC);iEe=n(wGe,"STRONG",{});var WIt=s(iEe);fBr=r(WIt,"xlnet"),WIt.forEach(t),mBr=r(wGe," \u2014 "),mZ=n(wGe,"A",{href:!0});var HIt=s(mZ);gBr=r(HIt,"TFXLNetForTokenClassification"),HIt.forEach(t),hBr=r(wGe," (XLNet model)"),wGe.forEach(t),me.forEach(t),pBr=i(Ul),T(FC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),wze=i(f),qc=n(f,"H2",{class:!0});var PWe=s(qc);TC=n(PWe,"A",{id:!0,class:!0,href:!0});var UIt=s(TC);dEe=n(UIt,"SPAN",{});var JIt=s(dEe);T(Qx.$$.fragment,JIt),JIt.forEach(t),UIt.forEach(t),_Br=i(PWe),cEe=n(PWe,"SPAN",{});var YIt=s(cEe);uBr=r(YIt,"TFAutoModelForQuestionAnswering"),YIt.forEach(t),PWe.forEach(t),Aze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Wx.$$.fragment,Jl),bBr=i(Jl),jc=n(Jl,"P",{});var Qte=s(jc);vBr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=n(Qte,"A",{href:!0});var KIt=s(gZ);FBr=r(KIt,"from_pretrained()"),KIt.forEach(t),TBr=r(Qte," class method or the "),hZ=n(Qte,"A",{href:!0});var ZIt=s(hZ);MBr=r(ZIt,"from_config()"),ZIt.forEach(t),EBr=r(Qte,` class
method.`),Qte.forEach(t),CBr=i(Jl),Hx=n(Jl,"P",{});var BWe=s(Hx);wBr=r(BWe,"This class cannot be instantiated directly using "),fEe=n(BWe,"CODE",{});var eqt=s(fEe);ABr=r(eqt,"__init__()"),eqt.forEach(t),LBr=r(BWe," (throws an error)."),BWe.forEach(t),yBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var CL=s(Vt);T(Ux.$$.fragment,CL),xBr=i(CL),mEe=n(CL,"P",{});var oqt=s(mEe);$Br=r(oqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oqt.forEach(t),kBr=i(CL),Dc=n(CL,"P",{});var Wte=s(Dc);SBr=r(Wte,`Note:
Loading a model from its configuration file does `),gEe=n(Wte,"STRONG",{});var rqt=s(gEe);RBr=r(rqt,"not"),rqt.forEach(t),PBr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Wte,"A",{href:!0});var tqt=s(pZ);BBr=r(tqt,"from_pretrained()"),tqt.forEach(t),NBr=r(Wte," to load the model weights."),Wte.forEach(t),IBr=i(CL),T(MC.$$.fragment,CL),CL.forEach(t),qBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Jx.$$.fragment,Yl),jBr=i(Yl),hEe=n(Yl,"P",{});var aqt=s(hEe);DBr=r(aqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aqt.forEach(t),GBr=i(Yl),bn=n(Yl,"P",{});var wL=s(bn);OBr=r(wL,"The model class to instantiate is selected based on the "),pEe=n(wL,"CODE",{});var nqt=s(pEe);VBr=r(nqt,"model_type"),nqt.forEach(t),XBr=r(wL,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(wL,"CODE",{});var sqt=s(_Ee);zBr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),QBr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(wL,"CODE",{});var lqt=s(uEe);WBr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),HBr=r(wL,":"),wL.forEach(t),UBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);EC=n(ge,"LI",{});var AGe=s(EC);bEe=n(AGe,"STRONG",{});var iqt=s(bEe);JBr=r(iqt,"albert"),iqt.forEach(t),YBr=r(AGe," \u2014 "),_Z=n(AGe,"A",{href:!0});var dqt=s(_Z);KBr=r(dqt,"TFAlbertForQuestionAnswering"),dqt.forEach(t),ZBr=r(AGe," (ALBERT model)"),AGe.forEach(t),eNr=i(ge),CC=n(ge,"LI",{});var LGe=s(CC);vEe=n(LGe,"STRONG",{});var cqt=s(vEe);oNr=r(cqt,"bert"),cqt.forEach(t),rNr=r(LGe," \u2014 "),uZ=n(LGe,"A",{href:!0});var fqt=s(uZ);tNr=r(fqt,"TFBertForQuestionAnswering"),fqt.forEach(t),aNr=r(LGe," (BERT model)"),LGe.forEach(t),nNr=i(ge),wC=n(ge,"LI",{});var yGe=s(wC);FEe=n(yGe,"STRONG",{});var mqt=s(FEe);sNr=r(mqt,"camembert"),mqt.forEach(t),lNr=r(yGe," \u2014 "),bZ=n(yGe,"A",{href:!0});var gqt=s(bZ);iNr=r(gqt,"TFCamembertForQuestionAnswering"),gqt.forEach(t),dNr=r(yGe," (CamemBERT model)"),yGe.forEach(t),cNr=i(ge),AC=n(ge,"LI",{});var xGe=s(AC);TEe=n(xGe,"STRONG",{});var hqt=s(TEe);fNr=r(hqt,"convbert"),hqt.forEach(t),mNr=r(xGe," \u2014 "),vZ=n(xGe,"A",{href:!0});var pqt=s(vZ);gNr=r(pqt,"TFConvBertForQuestionAnswering"),pqt.forEach(t),hNr=r(xGe," (ConvBERT model)"),xGe.forEach(t),pNr=i(ge),LC=n(ge,"LI",{});var $Ge=s(LC);MEe=n($Ge,"STRONG",{});var _qt=s(MEe);_Nr=r(_qt,"deberta"),_qt.forEach(t),uNr=r($Ge," \u2014 "),FZ=n($Ge,"A",{href:!0});var uqt=s(FZ);bNr=r(uqt,"TFDebertaForQuestionAnswering"),uqt.forEach(t),vNr=r($Ge," (DeBERTa model)"),$Ge.forEach(t),FNr=i(ge),yC=n(ge,"LI",{});var kGe=s(yC);EEe=n(kGe,"STRONG",{});var bqt=s(EEe);TNr=r(bqt,"deberta-v2"),bqt.forEach(t),MNr=r(kGe," \u2014 "),TZ=n(kGe,"A",{href:!0});var vqt=s(TZ);ENr=r(vqt,"TFDebertaV2ForQuestionAnswering"),vqt.forEach(t),CNr=r(kGe," (DeBERTa-v2 model)"),kGe.forEach(t),wNr=i(ge),xC=n(ge,"LI",{});var SGe=s(xC);CEe=n(SGe,"STRONG",{});var Fqt=s(CEe);ANr=r(Fqt,"distilbert"),Fqt.forEach(t),LNr=r(SGe," \u2014 "),MZ=n(SGe,"A",{href:!0});var Tqt=s(MZ);yNr=r(Tqt,"TFDistilBertForQuestionAnswering"),Tqt.forEach(t),xNr=r(SGe," (DistilBERT model)"),SGe.forEach(t),$Nr=i(ge),$C=n(ge,"LI",{});var RGe=s($C);wEe=n(RGe,"STRONG",{});var Mqt=s(wEe);kNr=r(Mqt,"electra"),Mqt.forEach(t),SNr=r(RGe," \u2014 "),EZ=n(RGe,"A",{href:!0});var Eqt=s(EZ);RNr=r(Eqt,"TFElectraForQuestionAnswering"),Eqt.forEach(t),PNr=r(RGe," (ELECTRA model)"),RGe.forEach(t),BNr=i(ge),kC=n(ge,"LI",{});var PGe=s(kC);AEe=n(PGe,"STRONG",{});var Cqt=s(AEe);NNr=r(Cqt,"flaubert"),Cqt.forEach(t),INr=r(PGe," \u2014 "),CZ=n(PGe,"A",{href:!0});var wqt=s(CZ);qNr=r(wqt,"TFFlaubertForQuestionAnsweringSimple"),wqt.forEach(t),jNr=r(PGe," (FlauBERT model)"),PGe.forEach(t),DNr=i(ge),SC=n(ge,"LI",{});var BGe=s(SC);LEe=n(BGe,"STRONG",{});var Aqt=s(LEe);GNr=r(Aqt,"funnel"),Aqt.forEach(t),ONr=r(BGe," \u2014 "),wZ=n(BGe,"A",{href:!0});var Lqt=s(wZ);VNr=r(Lqt,"TFFunnelForQuestionAnswering"),Lqt.forEach(t),XNr=r(BGe," (Funnel Transformer model)"),BGe.forEach(t),zNr=i(ge),RC=n(ge,"LI",{});var NGe=s(RC);yEe=n(NGe,"STRONG",{});var yqt=s(yEe);QNr=r(yqt,"gptj"),yqt.forEach(t),WNr=r(NGe," \u2014 "),AZ=n(NGe,"A",{href:!0});var xqt=s(AZ);HNr=r(xqt,"TFGPTJForQuestionAnswering"),xqt.forEach(t),UNr=r(NGe," (GPT-J model)"),NGe.forEach(t),JNr=i(ge),PC=n(ge,"LI",{});var IGe=s(PC);xEe=n(IGe,"STRONG",{});var $qt=s(xEe);YNr=r($qt,"longformer"),$qt.forEach(t),KNr=r(IGe," \u2014 "),LZ=n(IGe,"A",{href:!0});var kqt=s(LZ);ZNr=r(kqt,"TFLongformerForQuestionAnswering"),kqt.forEach(t),eIr=r(IGe," (Longformer model)"),IGe.forEach(t),oIr=i(ge),BC=n(ge,"LI",{});var qGe=s(BC);$Ee=n(qGe,"STRONG",{});var Sqt=s($Ee);rIr=r(Sqt,"mobilebert"),Sqt.forEach(t),tIr=r(qGe," \u2014 "),yZ=n(qGe,"A",{href:!0});var Rqt=s(yZ);aIr=r(Rqt,"TFMobileBertForQuestionAnswering"),Rqt.forEach(t),nIr=r(qGe," (MobileBERT model)"),qGe.forEach(t),sIr=i(ge),NC=n(ge,"LI",{});var jGe=s(NC);kEe=n(jGe,"STRONG",{});var Pqt=s(kEe);lIr=r(Pqt,"mpnet"),Pqt.forEach(t),iIr=r(jGe," \u2014 "),xZ=n(jGe,"A",{href:!0});var Bqt=s(xZ);dIr=r(Bqt,"TFMPNetForQuestionAnswering"),Bqt.forEach(t),cIr=r(jGe," (MPNet model)"),jGe.forEach(t),fIr=i(ge),IC=n(ge,"LI",{});var DGe=s(IC);SEe=n(DGe,"STRONG",{});var Nqt=s(SEe);mIr=r(Nqt,"rembert"),Nqt.forEach(t),gIr=r(DGe," \u2014 "),$Z=n(DGe,"A",{href:!0});var Iqt=s($Z);hIr=r(Iqt,"TFRemBertForQuestionAnswering"),Iqt.forEach(t),pIr=r(DGe," (RemBERT model)"),DGe.forEach(t),_Ir=i(ge),qC=n(ge,"LI",{});var GGe=s(qC);REe=n(GGe,"STRONG",{});var qqt=s(REe);uIr=r(qqt,"roberta"),qqt.forEach(t),bIr=r(GGe," \u2014 "),kZ=n(GGe,"A",{href:!0});var jqt=s(kZ);vIr=r(jqt,"TFRobertaForQuestionAnswering"),jqt.forEach(t),FIr=r(GGe," (RoBERTa model)"),GGe.forEach(t),TIr=i(ge),jC=n(ge,"LI",{});var OGe=s(jC);PEe=n(OGe,"STRONG",{});var Dqt=s(PEe);MIr=r(Dqt,"roformer"),Dqt.forEach(t),EIr=r(OGe," \u2014 "),SZ=n(OGe,"A",{href:!0});var Gqt=s(SZ);CIr=r(Gqt,"TFRoFormerForQuestionAnswering"),Gqt.forEach(t),wIr=r(OGe," (RoFormer model)"),OGe.forEach(t),AIr=i(ge),DC=n(ge,"LI",{});var VGe=s(DC);BEe=n(VGe,"STRONG",{});var Oqt=s(BEe);LIr=r(Oqt,"xlm"),Oqt.forEach(t),yIr=r(VGe," \u2014 "),RZ=n(VGe,"A",{href:!0});var Vqt=s(RZ);xIr=r(Vqt,"TFXLMForQuestionAnsweringSimple"),Vqt.forEach(t),$Ir=r(VGe," (XLM model)"),VGe.forEach(t),kIr=i(ge),GC=n(ge,"LI",{});var XGe=s(GC);NEe=n(XGe,"STRONG",{});var Xqt=s(NEe);SIr=r(Xqt,"xlm-roberta"),Xqt.forEach(t),RIr=r(XGe," \u2014 "),PZ=n(XGe,"A",{href:!0});var zqt=s(PZ);PIr=r(zqt,"TFXLMRobertaForQuestionAnswering"),zqt.forEach(t),BIr=r(XGe," (XLM-RoBERTa model)"),XGe.forEach(t),NIr=i(ge),OC=n(ge,"LI",{});var zGe=s(OC);IEe=n(zGe,"STRONG",{});var Qqt=s(IEe);IIr=r(Qqt,"xlnet"),Qqt.forEach(t),qIr=r(zGe," \u2014 "),BZ=n(zGe,"A",{href:!0});var Wqt=s(BZ);jIr=r(Wqt,"TFXLNetForQuestionAnsweringSimple"),Wqt.forEach(t),DIr=r(zGe," (XLNet model)"),zGe.forEach(t),ge.forEach(t),GIr=i(Yl),T(VC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Lze=i(f),Gc=n(f,"H2",{class:!0});var NWe=s(Gc);XC=n(NWe,"A",{id:!0,class:!0,href:!0});var Hqt=s(XC);qEe=n(Hqt,"SPAN",{});var Uqt=s(qEe);T(Yx.$$.fragment,Uqt),Uqt.forEach(t),Hqt.forEach(t),OIr=i(NWe),jEe=n(NWe,"SPAN",{});var Jqt=s(jEe);VIr=r(Jqt,"TFAutoModelForVision2Seq"),Jqt.forEach(t),NWe.forEach(t),yze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Kx.$$.fragment,Kl),XIr=i(Kl),Oc=n(Kl,"P",{});var Hte=s(Oc);zIr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NZ=n(Hte,"A",{href:!0});var Yqt=s(NZ);QIr=r(Yqt,"from_pretrained()"),Yqt.forEach(t),WIr=r(Hte," class method or the "),IZ=n(Hte,"A",{href:!0});var Kqt=s(IZ);HIr=r(Kqt,"from_config()"),Kqt.forEach(t),UIr=r(Hte,` class
method.`),Hte.forEach(t),JIr=i(Kl),Zx=n(Kl,"P",{});var IWe=s(Zx);YIr=r(IWe,"This class cannot be instantiated directly using "),DEe=n(IWe,"CODE",{});var Zqt=s(DEe);KIr=r(Zqt,"__init__()"),Zqt.forEach(t),ZIr=r(IWe," (throws an error)."),IWe.forEach(t),eqr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var AL=s(Xt);T(e$.$$.fragment,AL),oqr=i(AL),GEe=n(AL,"P",{});var ejt=s(GEe);rqr=r(ejt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ejt.forEach(t),tqr=i(AL),Vc=n(AL,"P",{});var Ute=s(Vc);aqr=r(Ute,`Note:
Loading a model from its configuration file does `),OEe=n(Ute,"STRONG",{});var ojt=s(OEe);nqr=r(ojt,"not"),ojt.forEach(t),sqr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Ute,"A",{href:!0});var rjt=s(qZ);lqr=r(rjt,"from_pretrained()"),rjt.forEach(t),iqr=r(Ute," to load the model weights."),Ute.forEach(t),dqr=i(AL),T(zC.$$.fragment,AL),AL.forEach(t),cqr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(o$.$$.fragment,Zl),fqr=i(Zl),VEe=n(Zl,"P",{});var tjt=s(VEe);mqr=r(tjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tjt.forEach(t),gqr=i(Zl),vn=n(Zl,"P",{});var LL=s(vn);hqr=r(LL,"The model class to instantiate is selected based on the "),XEe=n(LL,"CODE",{});var ajt=s(XEe);pqr=r(ajt,"model_type"),ajt.forEach(t),_qr=r(LL,` property of the config object (either
passed as an argument or loaded from `),zEe=n(LL,"CODE",{});var njt=s(zEe);uqr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),bqr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(LL,"CODE",{});var sjt=s(QEe);vqr=r(sjt,"pretrained_model_name_or_path"),sjt.forEach(t),Fqr=r(LL,":"),LL.forEach(t),Tqr=i(Zl),WEe=n(Zl,"UL",{});var ljt=s(WEe);QC=n(ljt,"LI",{});var QGe=s(QC);HEe=n(QGe,"STRONG",{});var ijt=s(HEe);Mqr=r(ijt,"vision-encoder-decoder"),ijt.forEach(t),Eqr=r(QGe," \u2014 "),jZ=n(QGe,"A",{href:!0});var djt=s(jZ);Cqr=r(djt,"TFVisionEncoderDecoderModel"),djt.forEach(t),wqr=r(QGe," (Vision Encoder decoder model)"),QGe.forEach(t),ljt.forEach(t),Aqr=i(Zl),T(WC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),xze=i(f),Xc=n(f,"H2",{class:!0});var qWe=s(Xc);HC=n(qWe,"A",{id:!0,class:!0,href:!0});var cjt=s(HC);UEe=n(cjt,"SPAN",{});var fjt=s(UEe);T(r$.$$.fragment,fjt),fjt.forEach(t),cjt.forEach(t),Lqr=i(qWe),JEe=n(qWe,"SPAN",{});var mjt=s(JEe);yqr=r(mjt,"TFAutoModelForSpeechSeq2Seq"),mjt.forEach(t),qWe.forEach(t),$ze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(t$.$$.fragment,ei),xqr=i(ei),zc=n(ei,"P",{});var Jte=s(zc);$qr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=n(Jte,"A",{href:!0});var gjt=s(DZ);kqr=r(gjt,"from_pretrained()"),gjt.forEach(t),Sqr=r(Jte," class method or the "),GZ=n(Jte,"A",{href:!0});var hjt=s(GZ);Rqr=r(hjt,"from_config()"),hjt.forEach(t),Pqr=r(Jte,` class
method.`),Jte.forEach(t),Bqr=i(ei),a$=n(ei,"P",{});var jWe=s(a$);Nqr=r(jWe,"This class cannot be instantiated directly using "),YEe=n(jWe,"CODE",{});var pjt=s(YEe);Iqr=r(pjt,"__init__()"),pjt.forEach(t),qqr=r(jWe," (throws an error)."),jWe.forEach(t),jqr=i(ei),zt=n(ei,"DIV",{class:!0});var yL=s(zt);T(n$.$$.fragment,yL),Dqr=i(yL),KEe=n(yL,"P",{});var _jt=s(KEe);Gqr=r(_jt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_jt.forEach(t),Oqr=i(yL),Qc=n(yL,"P",{});var Yte=s(Qc);Vqr=r(Yte,`Note:
Loading a model from its configuration file does `),ZEe=n(Yte,"STRONG",{});var ujt=s(ZEe);Xqr=r(ujt,"not"),ujt.forEach(t),zqr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Yte,"A",{href:!0});var bjt=s(OZ);Qqr=r(bjt,"from_pretrained()"),bjt.forEach(t),Wqr=r(Yte," to load the model weights."),Yte.forEach(t),Hqr=i(yL),T(UC.$$.fragment,yL),yL.forEach(t),Uqr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(s$.$$.fragment,oi),Jqr=i(oi),eCe=n(oi,"P",{});var vjt=s(eCe);Yqr=r(vjt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vjt.forEach(t),Kqr=i(oi),Fn=n(oi,"P",{});var xL=s(Fn);Zqr=r(xL,"The model class to instantiate is selected based on the "),oCe=n(xL,"CODE",{});var Fjt=s(oCe);ejr=r(Fjt,"model_type"),Fjt.forEach(t),ojr=r(xL,` property of the config object (either
passed as an argument or loaded from `),rCe=n(xL,"CODE",{});var Tjt=s(rCe);rjr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),tjr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(xL,"CODE",{});var Mjt=s(tCe);ajr=r(Mjt,"pretrained_model_name_or_path"),Mjt.forEach(t),njr=r(xL,":"),xL.forEach(t),sjr=i(oi),aCe=n(oi,"UL",{});var Ejt=s(aCe);JC=n(Ejt,"LI",{});var WGe=s(JC);nCe=n(WGe,"STRONG",{});var Cjt=s(nCe);ljr=r(Cjt,"speech_to_text"),Cjt.forEach(t),ijr=r(WGe," \u2014 "),VZ=n(WGe,"A",{href:!0});var wjt=s(VZ);djr=r(wjt,"TFSpeech2TextForConditionalGeneration"),wjt.forEach(t),cjr=r(WGe," (Speech2Text model)"),WGe.forEach(t),Ejt.forEach(t),fjr=i(oi),T(YC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),kze=i(f),Wc=n(f,"H2",{class:!0});var DWe=s(Wc);KC=n(DWe,"A",{id:!0,class:!0,href:!0});var Ajt=s(KC);sCe=n(Ajt,"SPAN",{});var Ljt=s(sCe);T(l$.$$.fragment,Ljt),Ljt.forEach(t),Ajt.forEach(t),mjr=i(DWe),lCe=n(DWe,"SPAN",{});var yjt=s(lCe);gjr=r(yjt,"FlaxAutoModel"),yjt.forEach(t),DWe.forEach(t),Sze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(i$.$$.fragment,ri),hjr=i(ri),Hc=n(ri,"P",{});var Kte=s(Hc);pjr=r(Kte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=n(Kte,"A",{href:!0});var xjt=s(XZ);_jr=r(xjt,"from_pretrained()"),xjt.forEach(t),ujr=r(Kte," class method or the "),zZ=n(Kte,"A",{href:!0});var $jt=s(zZ);bjr=r($jt,"from_config()"),$jt.forEach(t),vjr=r(Kte,` class
method.`),Kte.forEach(t),Fjr=i(ri),d$=n(ri,"P",{});var GWe=s(d$);Tjr=r(GWe,"This class cannot be instantiated directly using "),iCe=n(GWe,"CODE",{});var kjt=s(iCe);Mjr=r(kjt,"__init__()"),kjt.forEach(t),Ejr=r(GWe," (throws an error)."),GWe.forEach(t),Cjr=i(ri),Qt=n(ri,"DIV",{class:!0});var $L=s(Qt);T(c$.$$.fragment,$L),wjr=i($L),dCe=n($L,"P",{});var Sjt=s(dCe);Ajr=r(Sjt,"Instantiates one of the base model classes of the library from a configuration."),Sjt.forEach(t),Ljr=i($L),Uc=n($L,"P",{});var Zte=s(Uc);yjr=r(Zte,`Note:
Loading a model from its configuration file does `),cCe=n(Zte,"STRONG",{});var Rjt=s(cCe);xjr=r(Rjt,"not"),Rjt.forEach(t),$jr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Zte,"A",{href:!0});var Pjt=s(QZ);kjr=r(Pjt,"from_pretrained()"),Pjt.forEach(t),Sjr=r(Zte," to load the model weights."),Zte.forEach(t),Rjr=i($L),T(ZC.$$.fragment,$L),$L.forEach(t),Pjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(f$.$$.fragment,ti),Bjr=i(ti),fCe=n(ti,"P",{});var Bjt=s(fCe);Njr=r(Bjt,"Instantiate one of the base model classes of the library from a pretrained model."),Bjt.forEach(t),Ijr=i(ti),Tn=n(ti,"P",{});var kL=s(Tn);qjr=r(kL,"The model class to instantiate is selected based on the "),mCe=n(kL,"CODE",{});var Njt=s(mCe);jjr=r(Njt,"model_type"),Njt.forEach(t),Djr=r(kL,` property of the config object (either
passed as an argument or loaded from `),gCe=n(kL,"CODE",{});var Ijt=s(gCe);Gjr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),Ojr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(kL,"CODE",{});var qjt=s(hCe);Vjr=r(qjt,"pretrained_model_name_or_path"),qjt.forEach(t),Xjr=r(kL,":"),kL.forEach(t),zjr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);e0=n(ae,"LI",{});var HGe=s(e0);pCe=n(HGe,"STRONG",{});var jjt=s(pCe);Qjr=r(jjt,"albert"),jjt.forEach(t),Wjr=r(HGe," \u2014 "),WZ=n(HGe,"A",{href:!0});var Djt=s(WZ);Hjr=r(Djt,"FlaxAlbertModel"),Djt.forEach(t),Ujr=r(HGe," (ALBERT model)"),HGe.forEach(t),Jjr=i(ae),o0=n(ae,"LI",{});var UGe=s(o0);_Ce=n(UGe,"STRONG",{});var Gjt=s(_Ce);Yjr=r(Gjt,"bart"),Gjt.forEach(t),Kjr=r(UGe," \u2014 "),HZ=n(UGe,"A",{href:!0});var Ojt=s(HZ);Zjr=r(Ojt,"FlaxBartModel"),Ojt.forEach(t),eDr=r(UGe," (BART model)"),UGe.forEach(t),oDr=i(ae),r0=n(ae,"LI",{});var JGe=s(r0);uCe=n(JGe,"STRONG",{});var Vjt=s(uCe);rDr=r(Vjt,"beit"),Vjt.forEach(t),tDr=r(JGe," \u2014 "),UZ=n(JGe,"A",{href:!0});var Xjt=s(UZ);aDr=r(Xjt,"FlaxBeitModel"),Xjt.forEach(t),nDr=r(JGe," (BEiT model)"),JGe.forEach(t),sDr=i(ae),t0=n(ae,"LI",{});var YGe=s(t0);bCe=n(YGe,"STRONG",{});var zjt=s(bCe);lDr=r(zjt,"bert"),zjt.forEach(t),iDr=r(YGe," \u2014 "),JZ=n(YGe,"A",{href:!0});var Qjt=s(JZ);dDr=r(Qjt,"FlaxBertModel"),Qjt.forEach(t),cDr=r(YGe," (BERT model)"),YGe.forEach(t),fDr=i(ae),a0=n(ae,"LI",{});var KGe=s(a0);vCe=n(KGe,"STRONG",{});var Wjt=s(vCe);mDr=r(Wjt,"big_bird"),Wjt.forEach(t),gDr=r(KGe," \u2014 "),YZ=n(KGe,"A",{href:!0});var Hjt=s(YZ);hDr=r(Hjt,"FlaxBigBirdModel"),Hjt.forEach(t),pDr=r(KGe," (BigBird model)"),KGe.forEach(t),_Dr=i(ae),n0=n(ae,"LI",{});var ZGe=s(n0);FCe=n(ZGe,"STRONG",{});var Ujt=s(FCe);uDr=r(Ujt,"blenderbot"),Ujt.forEach(t),bDr=r(ZGe," \u2014 "),KZ=n(ZGe,"A",{href:!0});var Jjt=s(KZ);vDr=r(Jjt,"FlaxBlenderbotModel"),Jjt.forEach(t),FDr=r(ZGe," (Blenderbot model)"),ZGe.forEach(t),TDr=i(ae),s0=n(ae,"LI",{});var eOe=s(s0);TCe=n(eOe,"STRONG",{});var Yjt=s(TCe);MDr=r(Yjt,"blenderbot-small"),Yjt.forEach(t),EDr=r(eOe," \u2014 "),ZZ=n(eOe,"A",{href:!0});var Kjt=s(ZZ);CDr=r(Kjt,"FlaxBlenderbotSmallModel"),Kjt.forEach(t),wDr=r(eOe," (BlenderbotSmall model)"),eOe.forEach(t),ADr=i(ae),l0=n(ae,"LI",{});var oOe=s(l0);MCe=n(oOe,"STRONG",{});var Zjt=s(MCe);LDr=r(Zjt,"clip"),Zjt.forEach(t),yDr=r(oOe," \u2014 "),eee=n(oOe,"A",{href:!0});var eDt=s(eee);xDr=r(eDt,"FlaxCLIPModel"),eDt.forEach(t),$Dr=r(oOe," (CLIP model)"),oOe.forEach(t),kDr=i(ae),i0=n(ae,"LI",{});var rOe=s(i0);ECe=n(rOe,"STRONG",{});var oDt=s(ECe);SDr=r(oDt,"distilbert"),oDt.forEach(t),RDr=r(rOe," \u2014 "),oee=n(rOe,"A",{href:!0});var rDt=s(oee);PDr=r(rDt,"FlaxDistilBertModel"),rDt.forEach(t),BDr=r(rOe," (DistilBERT model)"),rOe.forEach(t),NDr=i(ae),d0=n(ae,"LI",{});var tOe=s(d0);CCe=n(tOe,"STRONG",{});var tDt=s(CCe);IDr=r(tDt,"electra"),tDt.forEach(t),qDr=r(tOe," \u2014 "),ree=n(tOe,"A",{href:!0});var aDt=s(ree);jDr=r(aDt,"FlaxElectraModel"),aDt.forEach(t),DDr=r(tOe," (ELECTRA model)"),tOe.forEach(t),GDr=i(ae),c0=n(ae,"LI",{});var aOe=s(c0);wCe=n(aOe,"STRONG",{});var nDt=s(wCe);ODr=r(nDt,"gpt2"),nDt.forEach(t),VDr=r(aOe," \u2014 "),tee=n(aOe,"A",{href:!0});var sDt=s(tee);XDr=r(sDt,"FlaxGPT2Model"),sDt.forEach(t),zDr=r(aOe," (OpenAI GPT-2 model)"),aOe.forEach(t),QDr=i(ae),f0=n(ae,"LI",{});var nOe=s(f0);ACe=n(nOe,"STRONG",{});var lDt=s(ACe);WDr=r(lDt,"gpt_neo"),lDt.forEach(t),HDr=r(nOe," \u2014 "),aee=n(nOe,"A",{href:!0});var iDt=s(aee);UDr=r(iDt,"FlaxGPTNeoModel"),iDt.forEach(t),JDr=r(nOe," (GPT Neo model)"),nOe.forEach(t),YDr=i(ae),m0=n(ae,"LI",{});var sOe=s(m0);LCe=n(sOe,"STRONG",{});var dDt=s(LCe);KDr=r(dDt,"gptj"),dDt.forEach(t),ZDr=r(sOe," \u2014 "),nee=n(sOe,"A",{href:!0});var cDt=s(nee);eGr=r(cDt,"FlaxGPTJModel"),cDt.forEach(t),oGr=r(sOe," (GPT-J model)"),sOe.forEach(t),rGr=i(ae),g0=n(ae,"LI",{});var lOe=s(g0);yCe=n(lOe,"STRONG",{});var fDt=s(yCe);tGr=r(fDt,"longt5"),fDt.forEach(t),aGr=r(lOe," \u2014 "),see=n(lOe,"A",{href:!0});var mDt=s(see);nGr=r(mDt,"FlaxLongT5Model"),mDt.forEach(t),sGr=r(lOe," (LongT5 model)"),lOe.forEach(t),lGr=i(ae),h0=n(ae,"LI",{});var iOe=s(h0);xCe=n(iOe,"STRONG",{});var gDt=s(xCe);iGr=r(gDt,"marian"),gDt.forEach(t),dGr=r(iOe," \u2014 "),lee=n(iOe,"A",{href:!0});var hDt=s(lee);cGr=r(hDt,"FlaxMarianModel"),hDt.forEach(t),fGr=r(iOe," (Marian model)"),iOe.forEach(t),mGr=i(ae),p0=n(ae,"LI",{});var dOe=s(p0);$Ce=n(dOe,"STRONG",{});var pDt=s($Ce);gGr=r(pDt,"mbart"),pDt.forEach(t),hGr=r(dOe," \u2014 "),iee=n(dOe,"A",{href:!0});var _Dt=s(iee);pGr=r(_Dt,"FlaxMBartModel"),_Dt.forEach(t),_Gr=r(dOe," (mBART model)"),dOe.forEach(t),uGr=i(ae),_0=n(ae,"LI",{});var cOe=s(_0);kCe=n(cOe,"STRONG",{});var uDt=s(kCe);bGr=r(uDt,"mt5"),uDt.forEach(t),vGr=r(cOe," \u2014 "),dee=n(cOe,"A",{href:!0});var bDt=s(dee);FGr=r(bDt,"FlaxMT5Model"),bDt.forEach(t),TGr=r(cOe," (MT5 model)"),cOe.forEach(t),MGr=i(ae),u0=n(ae,"LI",{});var fOe=s(u0);SCe=n(fOe,"STRONG",{});var vDt=s(SCe);EGr=r(vDt,"opt"),vDt.forEach(t),CGr=r(fOe," \u2014 "),cee=n(fOe,"A",{href:!0});var FDt=s(cee);wGr=r(FDt,"FlaxOPTModel"),FDt.forEach(t),AGr=r(fOe," (OPT model)"),fOe.forEach(t),LGr=i(ae),b0=n(ae,"LI",{});var mOe=s(b0);RCe=n(mOe,"STRONG",{});var TDt=s(RCe);yGr=r(TDt,"pegasus"),TDt.forEach(t),xGr=r(mOe," \u2014 "),fee=n(mOe,"A",{href:!0});var MDt=s(fee);$Gr=r(MDt,"FlaxPegasusModel"),MDt.forEach(t),kGr=r(mOe," (Pegasus model)"),mOe.forEach(t),SGr=i(ae),v0=n(ae,"LI",{});var gOe=s(v0);PCe=n(gOe,"STRONG",{});var EDt=s(PCe);RGr=r(EDt,"roberta"),EDt.forEach(t),PGr=r(gOe," \u2014 "),mee=n(gOe,"A",{href:!0});var CDt=s(mee);BGr=r(CDt,"FlaxRobertaModel"),CDt.forEach(t),NGr=r(gOe," (RoBERTa model)"),gOe.forEach(t),IGr=i(ae),F0=n(ae,"LI",{});var hOe=s(F0);BCe=n(hOe,"STRONG",{});var wDt=s(BCe);qGr=r(wDt,"roformer"),wDt.forEach(t),jGr=r(hOe," \u2014 "),gee=n(hOe,"A",{href:!0});var ADt=s(gee);DGr=r(ADt,"FlaxRoFormerModel"),ADt.forEach(t),GGr=r(hOe," (RoFormer model)"),hOe.forEach(t),OGr=i(ae),T0=n(ae,"LI",{});var pOe=s(T0);NCe=n(pOe,"STRONG",{});var LDt=s(NCe);VGr=r(LDt,"t5"),LDt.forEach(t),XGr=r(pOe," \u2014 "),hee=n(pOe,"A",{href:!0});var yDt=s(hee);zGr=r(yDt,"FlaxT5Model"),yDt.forEach(t),QGr=r(pOe," (T5 model)"),pOe.forEach(t),WGr=i(ae),M0=n(ae,"LI",{});var _Oe=s(M0);ICe=n(_Oe,"STRONG",{});var xDt=s(ICe);HGr=r(xDt,"vision-text-dual-encoder"),xDt.forEach(t),UGr=r(_Oe," \u2014 "),pee=n(_Oe,"A",{href:!0});var $Dt=s(pee);JGr=r($Dt,"FlaxVisionTextDualEncoderModel"),$Dt.forEach(t),YGr=r(_Oe," (VisionTextDualEncoder model)"),_Oe.forEach(t),KGr=i(ae),E0=n(ae,"LI",{});var uOe=s(E0);qCe=n(uOe,"STRONG",{});var kDt=s(qCe);ZGr=r(kDt,"vit"),kDt.forEach(t),eOr=r(uOe," \u2014 "),_ee=n(uOe,"A",{href:!0});var SDt=s(_ee);oOr=r(SDt,"FlaxViTModel"),SDt.forEach(t),rOr=r(uOe," (ViT model)"),uOe.forEach(t),tOr=i(ae),C0=n(ae,"LI",{});var bOe=s(C0);jCe=n(bOe,"STRONG",{});var RDt=s(jCe);aOr=r(RDt,"wav2vec2"),RDt.forEach(t),nOr=r(bOe," \u2014 "),uee=n(bOe,"A",{href:!0});var PDt=s(uee);sOr=r(PDt,"FlaxWav2Vec2Model"),PDt.forEach(t),lOr=r(bOe," (Wav2Vec2 model)"),bOe.forEach(t),iOr=i(ae),w0=n(ae,"LI",{});var vOe=s(w0);DCe=n(vOe,"STRONG",{});var BDt=s(DCe);dOr=r(BDt,"xglm"),BDt.forEach(t),cOr=r(vOe," \u2014 "),bee=n(vOe,"A",{href:!0});var NDt=s(bee);fOr=r(NDt,"FlaxXGLMModel"),NDt.forEach(t),mOr=r(vOe," (XGLM model)"),vOe.forEach(t),gOr=i(ae),A0=n(ae,"LI",{});var FOe=s(A0);GCe=n(FOe,"STRONG",{});var IDt=s(GCe);hOr=r(IDt,"xlm-roberta"),IDt.forEach(t),pOr=r(FOe," \u2014 "),vee=n(FOe,"A",{href:!0});var qDt=s(vee);_Or=r(qDt,"FlaxXLMRobertaModel"),qDt.forEach(t),uOr=r(FOe," (XLM-RoBERTa model)"),FOe.forEach(t),ae.forEach(t),bOr=i(ti),T(L0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Rze=i(f),Jc=n(f,"H2",{class:!0});var OWe=s(Jc);y0=n(OWe,"A",{id:!0,class:!0,href:!0});var jDt=s(y0);OCe=n(jDt,"SPAN",{});var DDt=s(OCe);T(m$.$$.fragment,DDt),DDt.forEach(t),jDt.forEach(t),vOr=i(OWe),VCe=n(OWe,"SPAN",{});var GDt=s(VCe);FOr=r(GDt,"FlaxAutoModelForCausalLM"),GDt.forEach(t),OWe.forEach(t),Pze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(g$.$$.fragment,ai),TOr=i(ai),Yc=n(ai,"P",{});var eae=s(Yc);MOr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=n(eae,"A",{href:!0});var ODt=s(Fee);EOr=r(ODt,"from_pretrained()"),ODt.forEach(t),COr=r(eae," class method or the "),Tee=n(eae,"A",{href:!0});var VDt=s(Tee);wOr=r(VDt,"from_config()"),VDt.forEach(t),AOr=r(eae,` class
method.`),eae.forEach(t),LOr=i(ai),h$=n(ai,"P",{});var VWe=s(h$);yOr=r(VWe,"This class cannot be instantiated directly using "),XCe=n(VWe,"CODE",{});var XDt=s(XCe);xOr=r(XDt,"__init__()"),XDt.forEach(t),$Or=r(VWe," (throws an error)."),VWe.forEach(t),kOr=i(ai),Wt=n(ai,"DIV",{class:!0});var SL=s(Wt);T(p$.$$.fragment,SL),SOr=i(SL),zCe=n(SL,"P",{});var zDt=s(zCe);ROr=r(zDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zDt.forEach(t),POr=i(SL),Kc=n(SL,"P",{});var oae=s(Kc);BOr=r(oae,`Note:
Loading a model from its configuration file does `),QCe=n(oae,"STRONG",{});var QDt=s(QCe);NOr=r(QDt,"not"),QDt.forEach(t),IOr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(oae,"A",{href:!0});var WDt=s(Mee);qOr=r(WDt,"from_pretrained()"),WDt.forEach(t),jOr=r(oae," to load the model weights."),oae.forEach(t),DOr=i(SL),T(x0.$$.fragment,SL),SL.forEach(t),GOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(_$.$$.fragment,ni),OOr=i(ni),WCe=n(ni,"P",{});var HDt=s(WCe);VOr=r(HDt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HDt.forEach(t),XOr=i(ni),Mn=n(ni,"P",{});var RL=s(Mn);zOr=r(RL,"The model class to instantiate is selected based on the "),HCe=n(RL,"CODE",{});var UDt=s(HCe);QOr=r(UDt,"model_type"),UDt.forEach(t),WOr=r(RL,` property of the config object (either
passed as an argument or loaded from `),UCe=n(RL,"CODE",{});var JDt=s(UCe);HOr=r(JDt,"pretrained_model_name_or_path"),JDt.forEach(t),UOr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(RL,"CODE",{});var YDt=s(JCe);JOr=r(YDt,"pretrained_model_name_or_path"),YDt.forEach(t),YOr=r(RL,":"),RL.forEach(t),KOr=i(ni),xe=n(ni,"UL",{});var Ie=s(xe);$0=n(Ie,"LI",{});var TOe=s($0);YCe=n(TOe,"STRONG",{});var KDt=s(YCe);ZOr=r(KDt,"bart"),KDt.forEach(t),eVr=r(TOe," \u2014 "),Eee=n(TOe,"A",{href:!0});var ZDt=s(Eee);oVr=r(ZDt,"FlaxBartForCausalLM"),ZDt.forEach(t),rVr=r(TOe," (BART model)"),TOe.forEach(t),tVr=i(Ie),k0=n(Ie,"LI",{});var MOe=s(k0);KCe=n(MOe,"STRONG",{});var eGt=s(KCe);aVr=r(eGt,"bert"),eGt.forEach(t),nVr=r(MOe," \u2014 "),Cee=n(MOe,"A",{href:!0});var oGt=s(Cee);sVr=r(oGt,"FlaxBertForCausalLM"),oGt.forEach(t),lVr=r(MOe," (BERT model)"),MOe.forEach(t),iVr=i(Ie),S0=n(Ie,"LI",{});var EOe=s(S0);ZCe=n(EOe,"STRONG",{});var rGt=s(ZCe);dVr=r(rGt,"big_bird"),rGt.forEach(t),cVr=r(EOe," \u2014 "),wee=n(EOe,"A",{href:!0});var tGt=s(wee);fVr=r(tGt,"FlaxBigBirdForCausalLM"),tGt.forEach(t),mVr=r(EOe," (BigBird model)"),EOe.forEach(t),gVr=i(Ie),R0=n(Ie,"LI",{});var COe=s(R0);e0e=n(COe,"STRONG",{});var aGt=s(e0e);hVr=r(aGt,"electra"),aGt.forEach(t),pVr=r(COe," \u2014 "),Aee=n(COe,"A",{href:!0});var nGt=s(Aee);_Vr=r(nGt,"FlaxElectraForCausalLM"),nGt.forEach(t),uVr=r(COe," (ELECTRA model)"),COe.forEach(t),bVr=i(Ie),P0=n(Ie,"LI",{});var wOe=s(P0);o0e=n(wOe,"STRONG",{});var sGt=s(o0e);vVr=r(sGt,"gpt2"),sGt.forEach(t),FVr=r(wOe," \u2014 "),Lee=n(wOe,"A",{href:!0});var lGt=s(Lee);TVr=r(lGt,"FlaxGPT2LMHeadModel"),lGt.forEach(t),MVr=r(wOe," (OpenAI GPT-2 model)"),wOe.forEach(t),EVr=i(Ie),B0=n(Ie,"LI",{});var AOe=s(B0);r0e=n(AOe,"STRONG",{});var iGt=s(r0e);CVr=r(iGt,"gpt_neo"),iGt.forEach(t),wVr=r(AOe," \u2014 "),yee=n(AOe,"A",{href:!0});var dGt=s(yee);AVr=r(dGt,"FlaxGPTNeoForCausalLM"),dGt.forEach(t),LVr=r(AOe," (GPT Neo model)"),AOe.forEach(t),yVr=i(Ie),N0=n(Ie,"LI",{});var LOe=s(N0);t0e=n(LOe,"STRONG",{});var cGt=s(t0e);xVr=r(cGt,"gptj"),cGt.forEach(t),$Vr=r(LOe," \u2014 "),xee=n(LOe,"A",{href:!0});var fGt=s(xee);kVr=r(fGt,"FlaxGPTJForCausalLM"),fGt.forEach(t),SVr=r(LOe," (GPT-J model)"),LOe.forEach(t),RVr=i(Ie),I0=n(Ie,"LI",{});var yOe=s(I0);a0e=n(yOe,"STRONG",{});var mGt=s(a0e);PVr=r(mGt,"opt"),mGt.forEach(t),BVr=r(yOe," \u2014 "),$ee=n(yOe,"A",{href:!0});var gGt=s($ee);NVr=r(gGt,"FlaxOPTForCausalLM"),gGt.forEach(t),IVr=r(yOe," (OPT model)"),yOe.forEach(t),qVr=i(Ie),q0=n(Ie,"LI",{});var xOe=s(q0);n0e=n(xOe,"STRONG",{});var hGt=s(n0e);jVr=r(hGt,"roberta"),hGt.forEach(t),DVr=r(xOe," \u2014 "),kee=n(xOe,"A",{href:!0});var pGt=s(kee);GVr=r(pGt,"FlaxRobertaForCausalLM"),pGt.forEach(t),OVr=r(xOe," (RoBERTa model)"),xOe.forEach(t),VVr=i(Ie),j0=n(Ie,"LI",{});var $Oe=s(j0);s0e=n($Oe,"STRONG",{});var _Gt=s(s0e);XVr=r(_Gt,"xglm"),_Gt.forEach(t),zVr=r($Oe," \u2014 "),See=n($Oe,"A",{href:!0});var uGt=s(See);QVr=r(uGt,"FlaxXGLMForCausalLM"),uGt.forEach(t),WVr=r($Oe," (XGLM model)"),$Oe.forEach(t),Ie.forEach(t),HVr=i(ni),T(D0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Bze=i(f),Zc=n(f,"H2",{class:!0});var XWe=s(Zc);G0=n(XWe,"A",{id:!0,class:!0,href:!0});var bGt=s(G0);l0e=n(bGt,"SPAN",{});var vGt=s(l0e);T(u$.$$.fragment,vGt),vGt.forEach(t),bGt.forEach(t),UVr=i(XWe),i0e=n(XWe,"SPAN",{});var FGt=s(i0e);JVr=r(FGt,"FlaxAutoModelForPreTraining"),FGt.forEach(t),XWe.forEach(t),Nze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(b$.$$.fragment,si),YVr=i(si),ef=n(si,"P",{});var rae=s(ef);KVr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=n(rae,"A",{href:!0});var TGt=s(Ree);ZVr=r(TGt,"from_pretrained()"),TGt.forEach(t),eXr=r(rae," class method or the "),Pee=n(rae,"A",{href:!0});var MGt=s(Pee);oXr=r(MGt,"from_config()"),MGt.forEach(t),rXr=r(rae,` class
method.`),rae.forEach(t),tXr=i(si),v$=n(si,"P",{});var zWe=s(v$);aXr=r(zWe,"This class cannot be instantiated directly using "),d0e=n(zWe,"CODE",{});var EGt=s(d0e);nXr=r(EGt,"__init__()"),EGt.forEach(t),sXr=r(zWe," (throws an error)."),zWe.forEach(t),lXr=i(si),Ht=n(si,"DIV",{class:!0});var PL=s(Ht);T(F$.$$.fragment,PL),iXr=i(PL),c0e=n(PL,"P",{});var CGt=s(c0e);dXr=r(CGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CGt.forEach(t),cXr=i(PL),of=n(PL,"P",{});var tae=s(of);fXr=r(tae,`Note:
Loading a model from its configuration file does `),f0e=n(tae,"STRONG",{});var wGt=s(f0e);mXr=r(wGt,"not"),wGt.forEach(t),gXr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(tae,"A",{href:!0});var AGt=s(Bee);hXr=r(AGt,"from_pretrained()"),AGt.forEach(t),pXr=r(tae," to load the model weights."),tae.forEach(t),_Xr=i(PL),T(O0.$$.fragment,PL),PL.forEach(t),uXr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(T$.$$.fragment,li),bXr=i(li),m0e=n(li,"P",{});var LGt=s(m0e);vXr=r(LGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LGt.forEach(t),FXr=i(li),En=n(li,"P",{});var BL=s(En);TXr=r(BL,"The model class to instantiate is selected based on the "),g0e=n(BL,"CODE",{});var yGt=s(g0e);MXr=r(yGt,"model_type"),yGt.forEach(t),EXr=r(BL,` property of the config object (either
passed as an argument or loaded from `),h0e=n(BL,"CODE",{});var xGt=s(h0e);CXr=r(xGt,"pretrained_model_name_or_path"),xGt.forEach(t),wXr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(BL,"CODE",{});var $Gt=s(p0e);AXr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),LXr=r(BL,":"),BL.forEach(t),yXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);V0=n(we,"LI",{});var kOe=s(V0);_0e=n(kOe,"STRONG",{});var kGt=s(_0e);xXr=r(kGt,"albert"),kGt.forEach(t),$Xr=r(kOe," \u2014 "),Nee=n(kOe,"A",{href:!0});var SGt=s(Nee);kXr=r(SGt,"FlaxAlbertForPreTraining"),SGt.forEach(t),SXr=r(kOe," (ALBERT model)"),kOe.forEach(t),RXr=i(we),X0=n(we,"LI",{});var SOe=s(X0);u0e=n(SOe,"STRONG",{});var RGt=s(u0e);PXr=r(RGt,"bart"),RGt.forEach(t),BXr=r(SOe," \u2014 "),Iee=n(SOe,"A",{href:!0});var PGt=s(Iee);NXr=r(PGt,"FlaxBartForConditionalGeneration"),PGt.forEach(t),IXr=r(SOe," (BART model)"),SOe.forEach(t),qXr=i(we),z0=n(we,"LI",{});var ROe=s(z0);b0e=n(ROe,"STRONG",{});var BGt=s(b0e);jXr=r(BGt,"bert"),BGt.forEach(t),DXr=r(ROe," \u2014 "),qee=n(ROe,"A",{href:!0});var NGt=s(qee);GXr=r(NGt,"FlaxBertForPreTraining"),NGt.forEach(t),OXr=r(ROe," (BERT model)"),ROe.forEach(t),VXr=i(we),Q0=n(we,"LI",{});var POe=s(Q0);v0e=n(POe,"STRONG",{});var IGt=s(v0e);XXr=r(IGt,"big_bird"),IGt.forEach(t),zXr=r(POe," \u2014 "),jee=n(POe,"A",{href:!0});var qGt=s(jee);QXr=r(qGt,"FlaxBigBirdForPreTraining"),qGt.forEach(t),WXr=r(POe," (BigBird model)"),POe.forEach(t),HXr=i(we),W0=n(we,"LI",{});var BOe=s(W0);F0e=n(BOe,"STRONG",{});var jGt=s(F0e);UXr=r(jGt,"electra"),jGt.forEach(t),JXr=r(BOe," \u2014 "),Dee=n(BOe,"A",{href:!0});var DGt=s(Dee);YXr=r(DGt,"FlaxElectraForPreTraining"),DGt.forEach(t),KXr=r(BOe," (ELECTRA model)"),BOe.forEach(t),ZXr=i(we),H0=n(we,"LI",{});var NOe=s(H0);T0e=n(NOe,"STRONG",{});var GGt=s(T0e);ezr=r(GGt,"longt5"),GGt.forEach(t),ozr=r(NOe," \u2014 "),Gee=n(NOe,"A",{href:!0});var OGt=s(Gee);rzr=r(OGt,"FlaxLongT5ForConditionalGeneration"),OGt.forEach(t),tzr=r(NOe," (LongT5 model)"),NOe.forEach(t),azr=i(we),U0=n(we,"LI",{});var IOe=s(U0);M0e=n(IOe,"STRONG",{});var VGt=s(M0e);nzr=r(VGt,"mbart"),VGt.forEach(t),szr=r(IOe," \u2014 "),Oee=n(IOe,"A",{href:!0});var XGt=s(Oee);lzr=r(XGt,"FlaxMBartForConditionalGeneration"),XGt.forEach(t),izr=r(IOe," (mBART model)"),IOe.forEach(t),dzr=i(we),J0=n(we,"LI",{});var qOe=s(J0);E0e=n(qOe,"STRONG",{});var zGt=s(E0e);czr=r(zGt,"mt5"),zGt.forEach(t),fzr=r(qOe," \u2014 "),Vee=n(qOe,"A",{href:!0});var QGt=s(Vee);mzr=r(QGt,"FlaxMT5ForConditionalGeneration"),QGt.forEach(t),gzr=r(qOe," (MT5 model)"),qOe.forEach(t),hzr=i(we),Y0=n(we,"LI",{});var jOe=s(Y0);C0e=n(jOe,"STRONG",{});var WGt=s(C0e);pzr=r(WGt,"roberta"),WGt.forEach(t),_zr=r(jOe," \u2014 "),Xee=n(jOe,"A",{href:!0});var HGt=s(Xee);uzr=r(HGt,"FlaxRobertaForMaskedLM"),HGt.forEach(t),bzr=r(jOe," (RoBERTa model)"),jOe.forEach(t),vzr=i(we),K0=n(we,"LI",{});var DOe=s(K0);w0e=n(DOe,"STRONG",{});var UGt=s(w0e);Fzr=r(UGt,"roformer"),UGt.forEach(t),Tzr=r(DOe," \u2014 "),zee=n(DOe,"A",{href:!0});var JGt=s(zee);Mzr=r(JGt,"FlaxRoFormerForMaskedLM"),JGt.forEach(t),Ezr=r(DOe," (RoFormer model)"),DOe.forEach(t),Czr=i(we),Z0=n(we,"LI",{});var GOe=s(Z0);A0e=n(GOe,"STRONG",{});var YGt=s(A0e);wzr=r(YGt,"t5"),YGt.forEach(t),Azr=r(GOe," \u2014 "),Qee=n(GOe,"A",{href:!0});var KGt=s(Qee);Lzr=r(KGt,"FlaxT5ForConditionalGeneration"),KGt.forEach(t),yzr=r(GOe," (T5 model)"),GOe.forEach(t),xzr=i(we),ew=n(we,"LI",{});var OOe=s(ew);L0e=n(OOe,"STRONG",{});var ZGt=s(L0e);$zr=r(ZGt,"wav2vec2"),ZGt.forEach(t),kzr=r(OOe," \u2014 "),Wee=n(OOe,"A",{href:!0});var eOt=s(Wee);Szr=r(eOt,"FlaxWav2Vec2ForPreTraining"),eOt.forEach(t),Rzr=r(OOe," (Wav2Vec2 model)"),OOe.forEach(t),Pzr=i(we),ow=n(we,"LI",{});var VOe=s(ow);y0e=n(VOe,"STRONG",{});var oOt=s(y0e);Bzr=r(oOt,"xlm-roberta"),oOt.forEach(t),Nzr=r(VOe," \u2014 "),Hee=n(VOe,"A",{href:!0});var rOt=s(Hee);Izr=r(rOt,"FlaxXLMRobertaForMaskedLM"),rOt.forEach(t),qzr=r(VOe," (XLM-RoBERTa model)"),VOe.forEach(t),we.forEach(t),jzr=i(li),T(rw.$$.fragment,li),li.forEach(t),si.forEach(t),Ize=i(f),rf=n(f,"H2",{class:!0});var QWe=s(rf);tw=n(QWe,"A",{id:!0,class:!0,href:!0});var tOt=s(tw);x0e=n(tOt,"SPAN",{});var aOt=s(x0e);T(M$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),Dzr=i(QWe),$0e=n(QWe,"SPAN",{});var nOt=s($0e);Gzr=r(nOt,"FlaxAutoModelForMaskedLM"),nOt.forEach(t),QWe.forEach(t),qze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(E$.$$.fragment,ii),Ozr=i(ii),tf=n(ii,"P",{});var aae=s(tf);Vzr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=n(aae,"A",{href:!0});var sOt=s(Uee);Xzr=r(sOt,"from_pretrained()"),sOt.forEach(t),zzr=r(aae," class method or the "),Jee=n(aae,"A",{href:!0});var lOt=s(Jee);Qzr=r(lOt,"from_config()"),lOt.forEach(t),Wzr=r(aae,` class
method.`),aae.forEach(t),Hzr=i(ii),C$=n(ii,"P",{});var WWe=s(C$);Uzr=r(WWe,"This class cannot be instantiated directly using "),k0e=n(WWe,"CODE",{});var iOt=s(k0e);Jzr=r(iOt,"__init__()"),iOt.forEach(t),Yzr=r(WWe," (throws an error)."),WWe.forEach(t),Kzr=i(ii),Ut=n(ii,"DIV",{class:!0});var NL=s(Ut);T(w$.$$.fragment,NL),Zzr=i(NL),S0e=n(NL,"P",{});var dOt=s(S0e);eQr=r(dOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dOt.forEach(t),oQr=i(NL),af=n(NL,"P",{});var nae=s(af);rQr=r(nae,`Note:
Loading a model from its configuration file does `),R0e=n(nae,"STRONG",{});var cOt=s(R0e);tQr=r(cOt,"not"),cOt.forEach(t),aQr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(nae,"A",{href:!0});var fOt=s(Yee);nQr=r(fOt,"from_pretrained()"),fOt.forEach(t),sQr=r(nae," to load the model weights."),nae.forEach(t),lQr=i(NL),T(aw.$$.fragment,NL),NL.forEach(t),iQr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(A$.$$.fragment,di),dQr=i(di),P0e=n(di,"P",{});var mOt=s(P0e);cQr=r(mOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mOt.forEach(t),fQr=i(di),Cn=n(di,"P",{});var IL=s(Cn);mQr=r(IL,"The model class to instantiate is selected based on the "),B0e=n(IL,"CODE",{});var gOt=s(B0e);gQr=r(gOt,"model_type"),gOt.forEach(t),hQr=r(IL,` property of the config object (either
passed as an argument or loaded from `),N0e=n(IL,"CODE",{});var hOt=s(N0e);pQr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),_Qr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(IL,"CODE",{});var pOt=s(I0e);uQr=r(pOt,"pretrained_model_name_or_path"),pOt.forEach(t),bQr=r(IL,":"),IL.forEach(t),vQr=i(di),$e=n(di,"UL",{});var qe=s($e);nw=n(qe,"LI",{});var XOe=s(nw);q0e=n(XOe,"STRONG",{});var _Ot=s(q0e);FQr=r(_Ot,"albert"),_Ot.forEach(t),TQr=r(XOe," \u2014 "),Kee=n(XOe,"A",{href:!0});var uOt=s(Kee);MQr=r(uOt,"FlaxAlbertForMaskedLM"),uOt.forEach(t),EQr=r(XOe," (ALBERT model)"),XOe.forEach(t),CQr=i(qe),sw=n(qe,"LI",{});var zOe=s(sw);j0e=n(zOe,"STRONG",{});var bOt=s(j0e);wQr=r(bOt,"bart"),bOt.forEach(t),AQr=r(zOe," \u2014 "),Zee=n(zOe,"A",{href:!0});var vOt=s(Zee);LQr=r(vOt,"FlaxBartForConditionalGeneration"),vOt.forEach(t),yQr=r(zOe," (BART model)"),zOe.forEach(t),xQr=i(qe),lw=n(qe,"LI",{});var QOe=s(lw);D0e=n(QOe,"STRONG",{});var FOt=s(D0e);$Qr=r(FOt,"bert"),FOt.forEach(t),kQr=r(QOe," \u2014 "),eoe=n(QOe,"A",{href:!0});var TOt=s(eoe);SQr=r(TOt,"FlaxBertForMaskedLM"),TOt.forEach(t),RQr=r(QOe," (BERT model)"),QOe.forEach(t),PQr=i(qe),iw=n(qe,"LI",{});var WOe=s(iw);G0e=n(WOe,"STRONG",{});var MOt=s(G0e);BQr=r(MOt,"big_bird"),MOt.forEach(t),NQr=r(WOe," \u2014 "),ooe=n(WOe,"A",{href:!0});var EOt=s(ooe);IQr=r(EOt,"FlaxBigBirdForMaskedLM"),EOt.forEach(t),qQr=r(WOe," (BigBird model)"),WOe.forEach(t),jQr=i(qe),dw=n(qe,"LI",{});var HOe=s(dw);O0e=n(HOe,"STRONG",{});var COt=s(O0e);DQr=r(COt,"distilbert"),COt.forEach(t),GQr=r(HOe," \u2014 "),roe=n(HOe,"A",{href:!0});var wOt=s(roe);OQr=r(wOt,"FlaxDistilBertForMaskedLM"),wOt.forEach(t),VQr=r(HOe," (DistilBERT model)"),HOe.forEach(t),XQr=i(qe),cw=n(qe,"LI",{});var UOe=s(cw);V0e=n(UOe,"STRONG",{});var AOt=s(V0e);zQr=r(AOt,"electra"),AOt.forEach(t),QQr=r(UOe," \u2014 "),toe=n(UOe,"A",{href:!0});var LOt=s(toe);WQr=r(LOt,"FlaxElectraForMaskedLM"),LOt.forEach(t),HQr=r(UOe," (ELECTRA model)"),UOe.forEach(t),UQr=i(qe),fw=n(qe,"LI",{});var JOe=s(fw);X0e=n(JOe,"STRONG",{});var yOt=s(X0e);JQr=r(yOt,"mbart"),yOt.forEach(t),YQr=r(JOe," \u2014 "),aoe=n(JOe,"A",{href:!0});var xOt=s(aoe);KQr=r(xOt,"FlaxMBartForConditionalGeneration"),xOt.forEach(t),ZQr=r(JOe," (mBART model)"),JOe.forEach(t),eWr=i(qe),mw=n(qe,"LI",{});var YOe=s(mw);z0e=n(YOe,"STRONG",{});var $Ot=s(z0e);oWr=r($Ot,"roberta"),$Ot.forEach(t),rWr=r(YOe," \u2014 "),noe=n(YOe,"A",{href:!0});var kOt=s(noe);tWr=r(kOt,"FlaxRobertaForMaskedLM"),kOt.forEach(t),aWr=r(YOe," (RoBERTa model)"),YOe.forEach(t),nWr=i(qe),gw=n(qe,"LI",{});var KOe=s(gw);Q0e=n(KOe,"STRONG",{});var SOt=s(Q0e);sWr=r(SOt,"roformer"),SOt.forEach(t),lWr=r(KOe," \u2014 "),soe=n(KOe,"A",{href:!0});var ROt=s(soe);iWr=r(ROt,"FlaxRoFormerForMaskedLM"),ROt.forEach(t),dWr=r(KOe," (RoFormer model)"),KOe.forEach(t),cWr=i(qe),hw=n(qe,"LI",{});var ZOe=s(hw);W0e=n(ZOe,"STRONG",{});var POt=s(W0e);fWr=r(POt,"xlm-roberta"),POt.forEach(t),mWr=r(ZOe," \u2014 "),loe=n(ZOe,"A",{href:!0});var BOt=s(loe);gWr=r(BOt,"FlaxXLMRobertaForMaskedLM"),BOt.forEach(t),hWr=r(ZOe," (XLM-RoBERTa model)"),ZOe.forEach(t),qe.forEach(t),pWr=i(di),T(pw.$$.fragment,di),di.forEach(t),ii.forEach(t),jze=i(f),nf=n(f,"H2",{class:!0});var HWe=s(nf);_w=n(HWe,"A",{id:!0,class:!0,href:!0});var NOt=s(_w);H0e=n(NOt,"SPAN",{});var IOt=s(H0e);T(L$.$$.fragment,IOt),IOt.forEach(t),NOt.forEach(t),_Wr=i(HWe),U0e=n(HWe,"SPAN",{});var qOt=s(U0e);uWr=r(qOt,"FlaxAutoModelForSeq2SeqLM"),qOt.forEach(t),HWe.forEach(t),Dze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(y$.$$.fragment,ci),bWr=i(ci),sf=n(ci,"P",{});var sae=s(sf);vWr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=n(sae,"A",{href:!0});var jOt=s(ioe);FWr=r(jOt,"from_pretrained()"),jOt.forEach(t),TWr=r(sae," class method or the "),doe=n(sae,"A",{href:!0});var DOt=s(doe);MWr=r(DOt,"from_config()"),DOt.forEach(t),EWr=r(sae,` class
method.`),sae.forEach(t),CWr=i(ci),x$=n(ci,"P",{});var UWe=s(x$);wWr=r(UWe,"This class cannot be instantiated directly using "),J0e=n(UWe,"CODE",{});var GOt=s(J0e);AWr=r(GOt,"__init__()"),GOt.forEach(t),LWr=r(UWe," (throws an error)."),UWe.forEach(t),yWr=i(ci),Jt=n(ci,"DIV",{class:!0});var qL=s(Jt);T($$.$$.fragment,qL),xWr=i(qL),Y0e=n(qL,"P",{});var OOt=s(Y0e);$Wr=r(OOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OOt.forEach(t),kWr=i(qL),lf=n(qL,"P",{});var lae=s(lf);SWr=r(lae,`Note:
Loading a model from its configuration file does `),K0e=n(lae,"STRONG",{});var VOt=s(K0e);RWr=r(VOt,"not"),VOt.forEach(t),PWr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(lae,"A",{href:!0});var XOt=s(coe);BWr=r(XOt,"from_pretrained()"),XOt.forEach(t),NWr=r(lae," to load the model weights."),lae.forEach(t),IWr=i(qL),T(uw.$$.fragment,qL),qL.forEach(t),qWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(k$.$$.fragment,fi),jWr=i(fi),Z0e=n(fi,"P",{});var zOt=s(Z0e);DWr=r(zOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zOt.forEach(t),GWr=i(fi),wn=n(fi,"P",{});var jL=s(wn);OWr=r(jL,"The model class to instantiate is selected based on the "),ewe=n(jL,"CODE",{});var QOt=s(ewe);VWr=r(QOt,"model_type"),QOt.forEach(t),XWr=r(jL,` property of the config object (either
passed as an argument or loaded from `),owe=n(jL,"CODE",{});var WOt=s(owe);zWr=r(WOt,"pretrained_model_name_or_path"),WOt.forEach(t),QWr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=n(jL,"CODE",{});var HOt=s(rwe);WWr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),HWr=r(jL,":"),jL.forEach(t),UWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);bw=n(je,"LI",{});var eVe=s(bw);twe=n(eVe,"STRONG",{});var UOt=s(twe);JWr=r(UOt,"bart"),UOt.forEach(t),YWr=r(eVe," \u2014 "),foe=n(eVe,"A",{href:!0});var JOt=s(foe);KWr=r(JOt,"FlaxBartForConditionalGeneration"),JOt.forEach(t),ZWr=r(eVe," (BART model)"),eVe.forEach(t),eHr=i(je),vw=n(je,"LI",{});var oVe=s(vw);awe=n(oVe,"STRONG",{});var YOt=s(awe);oHr=r(YOt,"blenderbot"),YOt.forEach(t),rHr=r(oVe," \u2014 "),moe=n(oVe,"A",{href:!0});var KOt=s(moe);tHr=r(KOt,"FlaxBlenderbotForConditionalGeneration"),KOt.forEach(t),aHr=r(oVe," (Blenderbot model)"),oVe.forEach(t),nHr=i(je),Fw=n(je,"LI",{});var rVe=s(Fw);nwe=n(rVe,"STRONG",{});var ZOt=s(nwe);sHr=r(ZOt,"blenderbot-small"),ZOt.forEach(t),lHr=r(rVe," \u2014 "),goe=n(rVe,"A",{href:!0});var eVt=s(goe);iHr=r(eVt,"FlaxBlenderbotSmallForConditionalGeneration"),eVt.forEach(t),dHr=r(rVe," (BlenderbotSmall model)"),rVe.forEach(t),cHr=i(je),Tw=n(je,"LI",{});var tVe=s(Tw);swe=n(tVe,"STRONG",{});var oVt=s(swe);fHr=r(oVt,"encoder-decoder"),oVt.forEach(t),mHr=r(tVe," \u2014 "),hoe=n(tVe,"A",{href:!0});var rVt=s(hoe);gHr=r(rVt,"FlaxEncoderDecoderModel"),rVt.forEach(t),hHr=r(tVe," (Encoder decoder model)"),tVe.forEach(t),pHr=i(je),Mw=n(je,"LI",{});var aVe=s(Mw);lwe=n(aVe,"STRONG",{});var tVt=s(lwe);_Hr=r(tVt,"longt5"),tVt.forEach(t),uHr=r(aVe," \u2014 "),poe=n(aVe,"A",{href:!0});var aVt=s(poe);bHr=r(aVt,"FlaxLongT5ForConditionalGeneration"),aVt.forEach(t),vHr=r(aVe," (LongT5 model)"),aVe.forEach(t),FHr=i(je),Ew=n(je,"LI",{});var nVe=s(Ew);iwe=n(nVe,"STRONG",{});var nVt=s(iwe);THr=r(nVt,"marian"),nVt.forEach(t),MHr=r(nVe," \u2014 "),_oe=n(nVe,"A",{href:!0});var sVt=s(_oe);EHr=r(sVt,"FlaxMarianMTModel"),sVt.forEach(t),CHr=r(nVe," (Marian model)"),nVe.forEach(t),wHr=i(je),Cw=n(je,"LI",{});var sVe=s(Cw);dwe=n(sVe,"STRONG",{});var lVt=s(dwe);AHr=r(lVt,"mbart"),lVt.forEach(t),LHr=r(sVe," \u2014 "),uoe=n(sVe,"A",{href:!0});var iVt=s(uoe);yHr=r(iVt,"FlaxMBartForConditionalGeneration"),iVt.forEach(t),xHr=r(sVe," (mBART model)"),sVe.forEach(t),$Hr=i(je),ww=n(je,"LI",{});var lVe=s(ww);cwe=n(lVe,"STRONG",{});var dVt=s(cwe);kHr=r(dVt,"mt5"),dVt.forEach(t),SHr=r(lVe," \u2014 "),boe=n(lVe,"A",{href:!0});var cVt=s(boe);RHr=r(cVt,"FlaxMT5ForConditionalGeneration"),cVt.forEach(t),PHr=r(lVe," (MT5 model)"),lVe.forEach(t),BHr=i(je),Aw=n(je,"LI",{});var iVe=s(Aw);fwe=n(iVe,"STRONG",{});var fVt=s(fwe);NHr=r(fVt,"pegasus"),fVt.forEach(t),IHr=r(iVe," \u2014 "),voe=n(iVe,"A",{href:!0});var mVt=s(voe);qHr=r(mVt,"FlaxPegasusForConditionalGeneration"),mVt.forEach(t),jHr=r(iVe," (Pegasus model)"),iVe.forEach(t),DHr=i(je),Lw=n(je,"LI",{});var dVe=s(Lw);mwe=n(dVe,"STRONG",{});var gVt=s(mwe);GHr=r(gVt,"t5"),gVt.forEach(t),OHr=r(dVe," \u2014 "),Foe=n(dVe,"A",{href:!0});var hVt=s(Foe);VHr=r(hVt,"FlaxT5ForConditionalGeneration"),hVt.forEach(t),XHr=r(dVe," (T5 model)"),dVe.forEach(t),je.forEach(t),zHr=i(fi),T(yw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Gze=i(f),df=n(f,"H2",{class:!0});var JWe=s(df);xw=n(JWe,"A",{id:!0,class:!0,href:!0});var pVt=s(xw);gwe=n(pVt,"SPAN",{});var _Vt=s(gwe);T(S$.$$.fragment,_Vt),_Vt.forEach(t),pVt.forEach(t),QHr=i(JWe),hwe=n(JWe,"SPAN",{});var uVt=s(hwe);WHr=r(uVt,"FlaxAutoModelForSequenceClassification"),uVt.forEach(t),JWe.forEach(t),Oze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(R$.$$.fragment,mi),HHr=i(mi),cf=n(mi,"P",{});var iae=s(cf);UHr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=n(iae,"A",{href:!0});var bVt=s(Toe);JHr=r(bVt,"from_pretrained()"),bVt.forEach(t),YHr=r(iae," class method or the "),Moe=n(iae,"A",{href:!0});var vVt=s(Moe);KHr=r(vVt,"from_config()"),vVt.forEach(t),ZHr=r(iae,` class
method.`),iae.forEach(t),eUr=i(mi),P$=n(mi,"P",{});var YWe=s(P$);oUr=r(YWe,"This class cannot be instantiated directly using "),pwe=n(YWe,"CODE",{});var FVt=s(pwe);rUr=r(FVt,"__init__()"),FVt.forEach(t),tUr=r(YWe," (throws an error)."),YWe.forEach(t),aUr=i(mi),Yt=n(mi,"DIV",{class:!0});var DL=s(Yt);T(B$.$$.fragment,DL),nUr=i(DL),_we=n(DL,"P",{});var TVt=s(_we);sUr=r(TVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TVt.forEach(t),lUr=i(DL),ff=n(DL,"P",{});var dae=s(ff);iUr=r(dae,`Note:
Loading a model from its configuration file does `),uwe=n(dae,"STRONG",{});var MVt=s(uwe);dUr=r(MVt,"not"),MVt.forEach(t),cUr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(dae,"A",{href:!0});var EVt=s(Eoe);fUr=r(EVt,"from_pretrained()"),EVt.forEach(t),mUr=r(dae," to load the model weights."),dae.forEach(t),gUr=i(DL),T($w.$$.fragment,DL),DL.forEach(t),hUr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(N$.$$.fragment,gi),pUr=i(gi),bwe=n(gi,"P",{});var CVt=s(bwe);_Ur=r(CVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CVt.forEach(t),uUr=i(gi),An=n(gi,"P",{});var GL=s(An);bUr=r(GL,"The model class to instantiate is selected based on the "),vwe=n(GL,"CODE",{});var wVt=s(vwe);vUr=r(wVt,"model_type"),wVt.forEach(t),FUr=r(GL,` property of the config object (either
passed as an argument or loaded from `),Fwe=n(GL,"CODE",{});var AVt=s(Fwe);TUr=r(AVt,"pretrained_model_name_or_path"),AVt.forEach(t),MUr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=n(GL,"CODE",{});var LVt=s(Twe);EUr=r(LVt,"pretrained_model_name_or_path"),LVt.forEach(t),CUr=r(GL,":"),GL.forEach(t),wUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);kw=n(De,"LI",{});var cVe=s(kw);Mwe=n(cVe,"STRONG",{});var yVt=s(Mwe);AUr=r(yVt,"albert"),yVt.forEach(t),LUr=r(cVe," \u2014 "),Coe=n(cVe,"A",{href:!0});var xVt=s(Coe);yUr=r(xVt,"FlaxAlbertForSequenceClassification"),xVt.forEach(t),xUr=r(cVe," (ALBERT model)"),cVe.forEach(t),$Ur=i(De),Sw=n(De,"LI",{});var fVe=s(Sw);Ewe=n(fVe,"STRONG",{});var $Vt=s(Ewe);kUr=r($Vt,"bart"),$Vt.forEach(t),SUr=r(fVe," \u2014 "),woe=n(fVe,"A",{href:!0});var kVt=s(woe);RUr=r(kVt,"FlaxBartForSequenceClassification"),kVt.forEach(t),PUr=r(fVe," (BART model)"),fVe.forEach(t),BUr=i(De),Rw=n(De,"LI",{});var mVe=s(Rw);Cwe=n(mVe,"STRONG",{});var SVt=s(Cwe);NUr=r(SVt,"bert"),SVt.forEach(t),IUr=r(mVe," \u2014 "),Aoe=n(mVe,"A",{href:!0});var RVt=s(Aoe);qUr=r(RVt,"FlaxBertForSequenceClassification"),RVt.forEach(t),jUr=r(mVe," (BERT model)"),mVe.forEach(t),DUr=i(De),Pw=n(De,"LI",{});var gVe=s(Pw);wwe=n(gVe,"STRONG",{});var PVt=s(wwe);GUr=r(PVt,"big_bird"),PVt.forEach(t),OUr=r(gVe," \u2014 "),Loe=n(gVe,"A",{href:!0});var BVt=s(Loe);VUr=r(BVt,"FlaxBigBirdForSequenceClassification"),BVt.forEach(t),XUr=r(gVe," (BigBird model)"),gVe.forEach(t),zUr=i(De),Bw=n(De,"LI",{});var hVe=s(Bw);Awe=n(hVe,"STRONG",{});var NVt=s(Awe);QUr=r(NVt,"distilbert"),NVt.forEach(t),WUr=r(hVe," \u2014 "),yoe=n(hVe,"A",{href:!0});var IVt=s(yoe);HUr=r(IVt,"FlaxDistilBertForSequenceClassification"),IVt.forEach(t),UUr=r(hVe," (DistilBERT model)"),hVe.forEach(t),JUr=i(De),Nw=n(De,"LI",{});var pVe=s(Nw);Lwe=n(pVe,"STRONG",{});var qVt=s(Lwe);YUr=r(qVt,"electra"),qVt.forEach(t),KUr=r(pVe," \u2014 "),xoe=n(pVe,"A",{href:!0});var jVt=s(xoe);ZUr=r(jVt,"FlaxElectraForSequenceClassification"),jVt.forEach(t),eJr=r(pVe," (ELECTRA model)"),pVe.forEach(t),oJr=i(De),Iw=n(De,"LI",{});var _Ve=s(Iw);ywe=n(_Ve,"STRONG",{});var DVt=s(ywe);rJr=r(DVt,"mbart"),DVt.forEach(t),tJr=r(_Ve," \u2014 "),$oe=n(_Ve,"A",{href:!0});var GVt=s($oe);aJr=r(GVt,"FlaxMBartForSequenceClassification"),GVt.forEach(t),nJr=r(_Ve," (mBART model)"),_Ve.forEach(t),sJr=i(De),qw=n(De,"LI",{});var uVe=s(qw);xwe=n(uVe,"STRONG",{});var OVt=s(xwe);lJr=r(OVt,"roberta"),OVt.forEach(t),iJr=r(uVe," \u2014 "),koe=n(uVe,"A",{href:!0});var VVt=s(koe);dJr=r(VVt,"FlaxRobertaForSequenceClassification"),VVt.forEach(t),cJr=r(uVe," (RoBERTa model)"),uVe.forEach(t),fJr=i(De),jw=n(De,"LI",{});var bVe=s(jw);$we=n(bVe,"STRONG",{});var XVt=s($we);mJr=r(XVt,"roformer"),XVt.forEach(t),gJr=r(bVe," \u2014 "),Soe=n(bVe,"A",{href:!0});var zVt=s(Soe);hJr=r(zVt,"FlaxRoFormerForSequenceClassification"),zVt.forEach(t),pJr=r(bVe," (RoFormer model)"),bVe.forEach(t),_Jr=i(De),Dw=n(De,"LI",{});var vVe=s(Dw);kwe=n(vVe,"STRONG",{});var QVt=s(kwe);uJr=r(QVt,"xlm-roberta"),QVt.forEach(t),bJr=r(vVe," \u2014 "),Roe=n(vVe,"A",{href:!0});var WVt=s(Roe);vJr=r(WVt,"FlaxXLMRobertaForSequenceClassification"),WVt.forEach(t),FJr=r(vVe," (XLM-RoBERTa model)"),vVe.forEach(t),De.forEach(t),TJr=i(gi),T(Gw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Vze=i(f),mf=n(f,"H2",{class:!0});var KWe=s(mf);Ow=n(KWe,"A",{id:!0,class:!0,href:!0});var HVt=s(Ow);Swe=n(HVt,"SPAN",{});var UVt=s(Swe);T(I$.$$.fragment,UVt),UVt.forEach(t),HVt.forEach(t),MJr=i(KWe),Rwe=n(KWe,"SPAN",{});var JVt=s(Rwe);EJr=r(JVt,"FlaxAutoModelForQuestionAnswering"),JVt.forEach(t),KWe.forEach(t),Xze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(q$.$$.fragment,hi),CJr=i(hi),gf=n(hi,"P",{});var cae=s(gf);wJr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=n(cae,"A",{href:!0});var YVt=s(Poe);AJr=r(YVt,"from_pretrained()"),YVt.forEach(t),LJr=r(cae," class method or the "),Boe=n(cae,"A",{href:!0});var KVt=s(Boe);yJr=r(KVt,"from_config()"),KVt.forEach(t),xJr=r(cae,` class
method.`),cae.forEach(t),$Jr=i(hi),j$=n(hi,"P",{});var ZWe=s(j$);kJr=r(ZWe,"This class cannot be instantiated directly using "),Pwe=n(ZWe,"CODE",{});var ZVt=s(Pwe);SJr=r(ZVt,"__init__()"),ZVt.forEach(t),RJr=r(ZWe," (throws an error)."),ZWe.forEach(t),PJr=i(hi),Kt=n(hi,"DIV",{class:!0});var OL=s(Kt);T(D$.$$.fragment,OL),BJr=i(OL),Bwe=n(OL,"P",{});var eXt=s(Bwe);NJr=r(eXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eXt.forEach(t),IJr=i(OL),hf=n(OL,"P",{});var fae=s(hf);qJr=r(fae,`Note:
Loading a model from its configuration file does `),Nwe=n(fae,"STRONG",{});var oXt=s(Nwe);jJr=r(oXt,"not"),oXt.forEach(t),DJr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(fae,"A",{href:!0});var rXt=s(Noe);GJr=r(rXt,"from_pretrained()"),rXt.forEach(t),OJr=r(fae," to load the model weights."),fae.forEach(t),VJr=i(OL),T(Vw.$$.fragment,OL),OL.forEach(t),XJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(G$.$$.fragment,pi),zJr=i(pi),Iwe=n(pi,"P",{});var tXt=s(Iwe);QJr=r(tXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tXt.forEach(t),WJr=i(pi),Ln=n(pi,"P",{});var VL=s(Ln);HJr=r(VL,"The model class to instantiate is selected based on the "),qwe=n(VL,"CODE",{});var aXt=s(qwe);UJr=r(aXt,"model_type"),aXt.forEach(t),JJr=r(VL,` property of the config object (either
passed as an argument or loaded from `),jwe=n(VL,"CODE",{});var nXt=s(jwe);YJr=r(nXt,"pretrained_model_name_or_path"),nXt.forEach(t),KJr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=n(VL,"CODE",{});var sXt=s(Dwe);ZJr=r(sXt,"pretrained_model_name_or_path"),sXt.forEach(t),eYr=r(VL,":"),VL.forEach(t),oYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);Xw=n(Ge,"LI",{});var FVe=s(Xw);Gwe=n(FVe,"STRONG",{});var lXt=s(Gwe);rYr=r(lXt,"albert"),lXt.forEach(t),tYr=r(FVe," \u2014 "),Ioe=n(FVe,"A",{href:!0});var iXt=s(Ioe);aYr=r(iXt,"FlaxAlbertForQuestionAnswering"),iXt.forEach(t),nYr=r(FVe," (ALBERT model)"),FVe.forEach(t),sYr=i(Ge),zw=n(Ge,"LI",{});var TVe=s(zw);Owe=n(TVe,"STRONG",{});var dXt=s(Owe);lYr=r(dXt,"bart"),dXt.forEach(t),iYr=r(TVe," \u2014 "),qoe=n(TVe,"A",{href:!0});var cXt=s(qoe);dYr=r(cXt,"FlaxBartForQuestionAnswering"),cXt.forEach(t),cYr=r(TVe," (BART model)"),TVe.forEach(t),fYr=i(Ge),Qw=n(Ge,"LI",{});var MVe=s(Qw);Vwe=n(MVe,"STRONG",{});var fXt=s(Vwe);mYr=r(fXt,"bert"),fXt.forEach(t),gYr=r(MVe," \u2014 "),joe=n(MVe,"A",{href:!0});var mXt=s(joe);hYr=r(mXt,"FlaxBertForQuestionAnswering"),mXt.forEach(t),pYr=r(MVe," (BERT model)"),MVe.forEach(t),_Yr=i(Ge),Ww=n(Ge,"LI",{});var EVe=s(Ww);Xwe=n(EVe,"STRONG",{});var gXt=s(Xwe);uYr=r(gXt,"big_bird"),gXt.forEach(t),bYr=r(EVe," \u2014 "),Doe=n(EVe,"A",{href:!0});var hXt=s(Doe);vYr=r(hXt,"FlaxBigBirdForQuestionAnswering"),hXt.forEach(t),FYr=r(EVe," (BigBird model)"),EVe.forEach(t),TYr=i(Ge),Hw=n(Ge,"LI",{});var CVe=s(Hw);zwe=n(CVe,"STRONG",{});var pXt=s(zwe);MYr=r(pXt,"distilbert"),pXt.forEach(t),EYr=r(CVe," \u2014 "),Goe=n(CVe,"A",{href:!0});var _Xt=s(Goe);CYr=r(_Xt,"FlaxDistilBertForQuestionAnswering"),_Xt.forEach(t),wYr=r(CVe," (DistilBERT model)"),CVe.forEach(t),AYr=i(Ge),Uw=n(Ge,"LI",{});var wVe=s(Uw);Qwe=n(wVe,"STRONG",{});var uXt=s(Qwe);LYr=r(uXt,"electra"),uXt.forEach(t),yYr=r(wVe," \u2014 "),Ooe=n(wVe,"A",{href:!0});var bXt=s(Ooe);xYr=r(bXt,"FlaxElectraForQuestionAnswering"),bXt.forEach(t),$Yr=r(wVe," (ELECTRA model)"),wVe.forEach(t),kYr=i(Ge),Jw=n(Ge,"LI",{});var AVe=s(Jw);Wwe=n(AVe,"STRONG",{});var vXt=s(Wwe);SYr=r(vXt,"mbart"),vXt.forEach(t),RYr=r(AVe," \u2014 "),Voe=n(AVe,"A",{href:!0});var FXt=s(Voe);PYr=r(FXt,"FlaxMBartForQuestionAnswering"),FXt.forEach(t),BYr=r(AVe," (mBART model)"),AVe.forEach(t),NYr=i(Ge),Yw=n(Ge,"LI",{});var LVe=s(Yw);Hwe=n(LVe,"STRONG",{});var TXt=s(Hwe);IYr=r(TXt,"roberta"),TXt.forEach(t),qYr=r(LVe," \u2014 "),Xoe=n(LVe,"A",{href:!0});var MXt=s(Xoe);jYr=r(MXt,"FlaxRobertaForQuestionAnswering"),MXt.forEach(t),DYr=r(LVe," (RoBERTa model)"),LVe.forEach(t),GYr=i(Ge),Kw=n(Ge,"LI",{});var yVe=s(Kw);Uwe=n(yVe,"STRONG",{});var EXt=s(Uwe);OYr=r(EXt,"roformer"),EXt.forEach(t),VYr=r(yVe," \u2014 "),zoe=n(yVe,"A",{href:!0});var CXt=s(zoe);XYr=r(CXt,"FlaxRoFormerForQuestionAnswering"),CXt.forEach(t),zYr=r(yVe," (RoFormer model)"),yVe.forEach(t),QYr=i(Ge),Zw=n(Ge,"LI",{});var xVe=s(Zw);Jwe=n(xVe,"STRONG",{});var wXt=s(Jwe);WYr=r(wXt,"xlm-roberta"),wXt.forEach(t),HYr=r(xVe," \u2014 "),Qoe=n(xVe,"A",{href:!0});var AXt=s(Qoe);UYr=r(AXt,"FlaxXLMRobertaForQuestionAnswering"),AXt.forEach(t),JYr=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),Ge.forEach(t),YYr=i(pi),T(eA.$$.fragment,pi),pi.forEach(t),hi.forEach(t),zze=i(f),pf=n(f,"H2",{class:!0});var eHe=s(pf);oA=n(eHe,"A",{id:!0,class:!0,href:!0});var LXt=s(oA);Ywe=n(LXt,"SPAN",{});var yXt=s(Ywe);T(O$.$$.fragment,yXt),yXt.forEach(t),LXt.forEach(t),KYr=i(eHe),Kwe=n(eHe,"SPAN",{});var xXt=s(Kwe);ZYr=r(xXt,"FlaxAutoModelForTokenClassification"),xXt.forEach(t),eHe.forEach(t),Qze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(V$.$$.fragment,_i),eKr=i(_i),_f=n(_i,"P",{});var mae=s(_f);oKr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=n(mae,"A",{href:!0});var $Xt=s(Woe);rKr=r($Xt,"from_pretrained()"),$Xt.forEach(t),tKr=r(mae," class method or the "),Hoe=n(mae,"A",{href:!0});var kXt=s(Hoe);aKr=r(kXt,"from_config()"),kXt.forEach(t),nKr=r(mae,` class
method.`),mae.forEach(t),sKr=i(_i),X$=n(_i,"P",{});var oHe=s(X$);lKr=r(oHe,"This class cannot be instantiated directly using "),Zwe=n(oHe,"CODE",{});var SXt=s(Zwe);iKr=r(SXt,"__init__()"),SXt.forEach(t),dKr=r(oHe," (throws an error)."),oHe.forEach(t),cKr=i(_i),Zt=n(_i,"DIV",{class:!0});var XL=s(Zt);T(z$.$$.fragment,XL),fKr=i(XL),eAe=n(XL,"P",{});var RXt=s(eAe);mKr=r(RXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RXt.forEach(t),gKr=i(XL),uf=n(XL,"P",{});var gae=s(uf);hKr=r(gae,`Note:
Loading a model from its configuration file does `),oAe=n(gae,"STRONG",{});var PXt=s(oAe);pKr=r(PXt,"not"),PXt.forEach(t),_Kr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=n(gae,"A",{href:!0});var BXt=s(Uoe);uKr=r(BXt,"from_pretrained()"),BXt.forEach(t),bKr=r(gae," to load the model weights."),gae.forEach(t),vKr=i(XL),T(rA.$$.fragment,XL),XL.forEach(t),FKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(Q$.$$.fragment,ui),TKr=i(ui),rAe=n(ui,"P",{});var NXt=s(rAe);MKr=r(NXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NXt.forEach(t),EKr=i(ui),yn=n(ui,"P",{});var zL=s(yn);CKr=r(zL,"The model class to instantiate is selected based on the "),tAe=n(zL,"CODE",{});var IXt=s(tAe);wKr=r(IXt,"model_type"),IXt.forEach(t),AKr=r(zL,` property of the config object (either
passed as an argument or loaded from `),aAe=n(zL,"CODE",{});var qXt=s(aAe);LKr=r(qXt,"pretrained_model_name_or_path"),qXt.forEach(t),yKr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(zL,"CODE",{});var jXt=s(nAe);xKr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),$Kr=r(zL,":"),zL.forEach(t),kKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);tA=n(To,"LI",{});var $Ve=s(tA);sAe=n($Ve,"STRONG",{});var DXt=s(sAe);SKr=r(DXt,"albert"),DXt.forEach(t),RKr=r($Ve," \u2014 "),Joe=n($Ve,"A",{href:!0});var GXt=s(Joe);PKr=r(GXt,"FlaxAlbertForTokenClassification"),GXt.forEach(t),BKr=r($Ve," (ALBERT model)"),$Ve.forEach(t),NKr=i(To),aA=n(To,"LI",{});var kVe=s(aA);lAe=n(kVe,"STRONG",{});var OXt=s(lAe);IKr=r(OXt,"bert"),OXt.forEach(t),qKr=r(kVe," \u2014 "),Yoe=n(kVe,"A",{href:!0});var VXt=s(Yoe);jKr=r(VXt,"FlaxBertForTokenClassification"),VXt.forEach(t),DKr=r(kVe," (BERT model)"),kVe.forEach(t),GKr=i(To),nA=n(To,"LI",{});var SVe=s(nA);iAe=n(SVe,"STRONG",{});var XXt=s(iAe);OKr=r(XXt,"big_bird"),XXt.forEach(t),VKr=r(SVe," \u2014 "),Koe=n(SVe,"A",{href:!0});var zXt=s(Koe);XKr=r(zXt,"FlaxBigBirdForTokenClassification"),zXt.forEach(t),zKr=r(SVe," (BigBird model)"),SVe.forEach(t),QKr=i(To),sA=n(To,"LI",{});var RVe=s(sA);dAe=n(RVe,"STRONG",{});var QXt=s(dAe);WKr=r(QXt,"distilbert"),QXt.forEach(t),HKr=r(RVe," \u2014 "),Zoe=n(RVe,"A",{href:!0});var WXt=s(Zoe);UKr=r(WXt,"FlaxDistilBertForTokenClassification"),WXt.forEach(t),JKr=r(RVe," (DistilBERT model)"),RVe.forEach(t),YKr=i(To),lA=n(To,"LI",{});var PVe=s(lA);cAe=n(PVe,"STRONG",{});var HXt=s(cAe);KKr=r(HXt,"electra"),HXt.forEach(t),ZKr=r(PVe," \u2014 "),ere=n(PVe,"A",{href:!0});var UXt=s(ere);eZr=r(UXt,"FlaxElectraForTokenClassification"),UXt.forEach(t),oZr=r(PVe," (ELECTRA model)"),PVe.forEach(t),rZr=i(To),iA=n(To,"LI",{});var BVe=s(iA);fAe=n(BVe,"STRONG",{});var JXt=s(fAe);tZr=r(JXt,"roberta"),JXt.forEach(t),aZr=r(BVe," \u2014 "),ore=n(BVe,"A",{href:!0});var YXt=s(ore);nZr=r(YXt,"FlaxRobertaForTokenClassification"),YXt.forEach(t),sZr=r(BVe," (RoBERTa model)"),BVe.forEach(t),lZr=i(To),dA=n(To,"LI",{});var NVe=s(dA);mAe=n(NVe,"STRONG",{});var KXt=s(mAe);iZr=r(KXt,"roformer"),KXt.forEach(t),dZr=r(NVe," \u2014 "),rre=n(NVe,"A",{href:!0});var ZXt=s(rre);cZr=r(ZXt,"FlaxRoFormerForTokenClassification"),ZXt.forEach(t),fZr=r(NVe," (RoFormer model)"),NVe.forEach(t),mZr=i(To),cA=n(To,"LI",{});var IVe=s(cA);gAe=n(IVe,"STRONG",{});var ezt=s(gAe);gZr=r(ezt,"xlm-roberta"),ezt.forEach(t),hZr=r(IVe," \u2014 "),tre=n(IVe,"A",{href:!0});var ozt=s(tre);pZr=r(ozt,"FlaxXLMRobertaForTokenClassification"),ozt.forEach(t),_Zr=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),To.forEach(t),uZr=i(ui),T(fA.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Wze=i(f),bf=n(f,"H2",{class:!0});var rHe=s(bf);mA=n(rHe,"A",{id:!0,class:!0,href:!0});var rzt=s(mA);hAe=n(rzt,"SPAN",{});var tzt=s(hAe);T(W$.$$.fragment,tzt),tzt.forEach(t),rzt.forEach(t),bZr=i(rHe),pAe=n(rHe,"SPAN",{});var azt=s(pAe);vZr=r(azt,"FlaxAutoModelForMultipleChoice"),azt.forEach(t),rHe.forEach(t),Hze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(H$.$$.fragment,bi),FZr=i(bi),vf=n(bi,"P",{});var hae=s(vf);TZr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=n(hae,"A",{href:!0});var nzt=s(are);MZr=r(nzt,"from_pretrained()"),nzt.forEach(t),EZr=r(hae," class method or the "),nre=n(hae,"A",{href:!0});var szt=s(nre);CZr=r(szt,"from_config()"),szt.forEach(t),wZr=r(hae,` class
method.`),hae.forEach(t),AZr=i(bi),U$=n(bi,"P",{});var tHe=s(U$);LZr=r(tHe,"This class cannot be instantiated directly using "),_Ae=n(tHe,"CODE",{});var lzt=s(_Ae);yZr=r(lzt,"__init__()"),lzt.forEach(t),xZr=r(tHe," (throws an error)."),tHe.forEach(t),$Zr=i(bi),ea=n(bi,"DIV",{class:!0});var QL=s(ea);T(J$.$$.fragment,QL),kZr=i(QL),uAe=n(QL,"P",{});var izt=s(uAe);SZr=r(izt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),izt.forEach(t),RZr=i(QL),Ff=n(QL,"P",{});var pae=s(Ff);PZr=r(pae,`Note:
Loading a model from its configuration file does `),bAe=n(pae,"STRONG",{});var dzt=s(bAe);BZr=r(dzt,"not"),dzt.forEach(t),NZr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(pae,"A",{href:!0});var czt=s(sre);IZr=r(czt,"from_pretrained()"),czt.forEach(t),qZr=r(pae," to load the model weights."),pae.forEach(t),jZr=i(QL),T(gA.$$.fragment,QL),QL.forEach(t),DZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(Y$.$$.fragment,vi),GZr=i(vi),vAe=n(vi,"P",{});var fzt=s(vAe);OZr=r(fzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fzt.forEach(t),VZr=i(vi),xn=n(vi,"P",{});var WL=s(xn);XZr=r(WL,"The model class to instantiate is selected based on the "),FAe=n(WL,"CODE",{});var mzt=s(FAe);zZr=r(mzt,"model_type"),mzt.forEach(t),QZr=r(WL,` property of the config object (either
passed as an argument or loaded from `),TAe=n(WL,"CODE",{});var gzt=s(TAe);WZr=r(gzt,"pretrained_model_name_or_path"),gzt.forEach(t),HZr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=n(WL,"CODE",{});var hzt=s(MAe);UZr=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),JZr=r(WL,":"),WL.forEach(t),YZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);hA=n(Mo,"LI",{});var qVe=s(hA);EAe=n(qVe,"STRONG",{});var pzt=s(EAe);KZr=r(pzt,"albert"),pzt.forEach(t),ZZr=r(qVe," \u2014 "),lre=n(qVe,"A",{href:!0});var _zt=s(lre);eet=r(_zt,"FlaxAlbertForMultipleChoice"),_zt.forEach(t),oet=r(qVe," (ALBERT model)"),qVe.forEach(t),ret=i(Mo),pA=n(Mo,"LI",{});var jVe=s(pA);CAe=n(jVe,"STRONG",{});var uzt=s(CAe);tet=r(uzt,"bert"),uzt.forEach(t),aet=r(jVe," \u2014 "),ire=n(jVe,"A",{href:!0});var bzt=s(ire);net=r(bzt,"FlaxBertForMultipleChoice"),bzt.forEach(t),set=r(jVe," (BERT model)"),jVe.forEach(t),iet=i(Mo),_A=n(Mo,"LI",{});var DVe=s(_A);wAe=n(DVe,"STRONG",{});var vzt=s(wAe);det=r(vzt,"big_bird"),vzt.forEach(t),cet=r(DVe," \u2014 "),dre=n(DVe,"A",{href:!0});var Fzt=s(dre);fet=r(Fzt,"FlaxBigBirdForMultipleChoice"),Fzt.forEach(t),met=r(DVe," (BigBird model)"),DVe.forEach(t),get=i(Mo),uA=n(Mo,"LI",{});var GVe=s(uA);AAe=n(GVe,"STRONG",{});var Tzt=s(AAe);het=r(Tzt,"distilbert"),Tzt.forEach(t),pet=r(GVe," \u2014 "),cre=n(GVe,"A",{href:!0});var Mzt=s(cre);_et=r(Mzt,"FlaxDistilBertForMultipleChoice"),Mzt.forEach(t),uet=r(GVe," (DistilBERT model)"),GVe.forEach(t),bet=i(Mo),bA=n(Mo,"LI",{});var OVe=s(bA);LAe=n(OVe,"STRONG",{});var Ezt=s(LAe);vet=r(Ezt,"electra"),Ezt.forEach(t),Fet=r(OVe," \u2014 "),fre=n(OVe,"A",{href:!0});var Czt=s(fre);Tet=r(Czt,"FlaxElectraForMultipleChoice"),Czt.forEach(t),Met=r(OVe," (ELECTRA model)"),OVe.forEach(t),Eet=i(Mo),vA=n(Mo,"LI",{});var VVe=s(vA);yAe=n(VVe,"STRONG",{});var wzt=s(yAe);Cet=r(wzt,"roberta"),wzt.forEach(t),wet=r(VVe," \u2014 "),mre=n(VVe,"A",{href:!0});var Azt=s(mre);Aet=r(Azt,"FlaxRobertaForMultipleChoice"),Azt.forEach(t),Let=r(VVe," (RoBERTa model)"),VVe.forEach(t),yet=i(Mo),FA=n(Mo,"LI",{});var XVe=s(FA);xAe=n(XVe,"STRONG",{});var Lzt=s(xAe);xet=r(Lzt,"roformer"),Lzt.forEach(t),$et=r(XVe," \u2014 "),gre=n(XVe,"A",{href:!0});var yzt=s(gre);ket=r(yzt,"FlaxRoFormerForMultipleChoice"),yzt.forEach(t),Set=r(XVe," (RoFormer model)"),XVe.forEach(t),Ret=i(Mo),TA=n(Mo,"LI",{});var zVe=s(TA);$Ae=n(zVe,"STRONG",{});var xzt=s($Ae);Pet=r(xzt,"xlm-roberta"),xzt.forEach(t),Bet=r(zVe," \u2014 "),hre=n(zVe,"A",{href:!0});var $zt=s(hre);Net=r($zt,"FlaxXLMRobertaForMultipleChoice"),$zt.forEach(t),Iet=r(zVe," (XLM-RoBERTa model)"),zVe.forEach(t),Mo.forEach(t),qet=i(vi),T(MA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Uze=i(f),Tf=n(f,"H2",{class:!0});var aHe=s(Tf);EA=n(aHe,"A",{id:!0,class:!0,href:!0});var kzt=s(EA);kAe=n(kzt,"SPAN",{});var Szt=s(kAe);T(K$.$$.fragment,Szt),Szt.forEach(t),kzt.forEach(t),jet=i(aHe),SAe=n(aHe,"SPAN",{});var Rzt=s(SAe);Det=r(Rzt,"FlaxAutoModelForNextSentencePrediction"),Rzt.forEach(t),aHe.forEach(t),Jze=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(Z$.$$.fragment,Fi),Get=i(Fi),Mf=n(Fi,"P",{});var _ae=s(Mf);Oet=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=n(_ae,"A",{href:!0});var Pzt=s(pre);Vet=r(Pzt,"from_pretrained()"),Pzt.forEach(t),Xet=r(_ae," class method or the "),_re=n(_ae,"A",{href:!0});var Bzt=s(_re);zet=r(Bzt,"from_config()"),Bzt.forEach(t),Qet=r(_ae,` class
method.`),_ae.forEach(t),Wet=i(Fi),ek=n(Fi,"P",{});var nHe=s(ek);Het=r(nHe,"This class cannot be instantiated directly using "),RAe=n(nHe,"CODE",{});var Nzt=s(RAe);Uet=r(Nzt,"__init__()"),Nzt.forEach(t),Jet=r(nHe," (throws an error)."),nHe.forEach(t),Yet=i(Fi),oa=n(Fi,"DIV",{class:!0});var HL=s(oa);T(ok.$$.fragment,HL),Ket=i(HL),PAe=n(HL,"P",{});var Izt=s(PAe);Zet=r(Izt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Izt.forEach(t),eot=i(HL),Ef=n(HL,"P",{});var uae=s(Ef);oot=r(uae,`Note:
Loading a model from its configuration file does `),BAe=n(uae,"STRONG",{});var qzt=s(BAe);rot=r(qzt,"not"),qzt.forEach(t),tot=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(uae,"A",{href:!0});var jzt=s(ure);aot=r(jzt,"from_pretrained()"),jzt.forEach(t),not=r(uae," to load the model weights."),uae.forEach(t),sot=i(HL),T(CA.$$.fragment,HL),HL.forEach(t),lot=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(rk.$$.fragment,Ti),iot=i(Ti),NAe=n(Ti,"P",{});var Dzt=s(NAe);dot=r(Dzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dzt.forEach(t),cot=i(Ti),$n=n(Ti,"P",{});var UL=s($n);fot=r(UL,"The model class to instantiate is selected based on the "),IAe=n(UL,"CODE",{});var Gzt=s(IAe);mot=r(Gzt,"model_type"),Gzt.forEach(t),got=r(UL,` property of the config object (either
passed as an argument or loaded from `),qAe=n(UL,"CODE",{});var Ozt=s(qAe);hot=r(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(t),pot=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=n(UL,"CODE",{});var Vzt=s(jAe);_ot=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),uot=r(UL,":"),UL.forEach(t),bot=i(Ti),DAe=n(Ti,"UL",{});var Xzt=s(DAe);wA=n(Xzt,"LI",{});var QVe=s(wA);GAe=n(QVe,"STRONG",{});var zzt=s(GAe);vot=r(zzt,"bert"),zzt.forEach(t),Fot=r(QVe," \u2014 "),bre=n(QVe,"A",{href:!0});var Qzt=s(bre);Tot=r(Qzt,"FlaxBertForNextSentencePrediction"),Qzt.forEach(t),Mot=r(QVe," (BERT model)"),QVe.forEach(t),Xzt.forEach(t),Eot=i(Ti),T(AA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Yze=i(f),Cf=n(f,"H2",{class:!0});var sHe=s(Cf);LA=n(sHe,"A",{id:!0,class:!0,href:!0});var Wzt=s(LA);OAe=n(Wzt,"SPAN",{});var Hzt=s(OAe);T(tk.$$.fragment,Hzt),Hzt.forEach(t),Wzt.forEach(t),Cot=i(sHe),VAe=n(sHe,"SPAN",{});var Uzt=s(VAe);wot=r(Uzt,"FlaxAutoModelForImageClassification"),Uzt.forEach(t),sHe.forEach(t),Kze=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(ak.$$.fragment,Mi),Aot=i(Mi),wf=n(Mi,"P",{});var bae=s(wf);Lot=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=n(bae,"A",{href:!0});var Jzt=s(vre);yot=r(Jzt,"from_pretrained()"),Jzt.forEach(t),xot=r(bae," class method or the "),Fre=n(bae,"A",{href:!0});var Yzt=s(Fre);$ot=r(Yzt,"from_config()"),Yzt.forEach(t),kot=r(bae,` class
method.`),bae.forEach(t),Sot=i(Mi),nk=n(Mi,"P",{});var lHe=s(nk);Rot=r(lHe,"This class cannot be instantiated directly using "),XAe=n(lHe,"CODE",{});var Kzt=s(XAe);Pot=r(Kzt,"__init__()"),Kzt.forEach(t),Bot=r(lHe," (throws an error)."),lHe.forEach(t),Not=i(Mi),ra=n(Mi,"DIV",{class:!0});var JL=s(ra);T(sk.$$.fragment,JL),Iot=i(JL),zAe=n(JL,"P",{});var Zzt=s(zAe);qot=r(Zzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zzt.forEach(t),jot=i(JL),Af=n(JL,"P",{});var vae=s(Af);Dot=r(vae,`Note:
Loading a model from its configuration file does `),QAe=n(vae,"STRONG",{});var eQt=s(QAe);Got=r(eQt,"not"),eQt.forEach(t),Oot=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(vae,"A",{href:!0});var oQt=s(Tre);Vot=r(oQt,"from_pretrained()"),oQt.forEach(t),Xot=r(vae," to load the model weights."),vae.forEach(t),zot=i(JL),T(yA.$$.fragment,JL),JL.forEach(t),Qot=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(lk.$$.fragment,Ei),Wot=i(Ei),WAe=n(Ei,"P",{});var rQt=s(WAe);Hot=r(rQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rQt.forEach(t),Uot=i(Ei),kn=n(Ei,"P",{});var YL=s(kn);Jot=r(YL,"The model class to instantiate is selected based on the "),HAe=n(YL,"CODE",{});var tQt=s(HAe);Yot=r(tQt,"model_type"),tQt.forEach(t),Kot=r(YL,` property of the config object (either
passed as an argument or loaded from `),UAe=n(YL,"CODE",{});var aQt=s(UAe);Zot=r(aQt,"pretrained_model_name_or_path"),aQt.forEach(t),ert=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=n(YL,"CODE",{});var nQt=s(JAe);ort=r(nQt,"pretrained_model_name_or_path"),nQt.forEach(t),rrt=r(YL,":"),YL.forEach(t),trt=i(Ei),ik=n(Ei,"UL",{});var iHe=s(ik);xA=n(iHe,"LI",{});var WVe=s(xA);YAe=n(WVe,"STRONG",{});var sQt=s(YAe);art=r(sQt,"beit"),sQt.forEach(t),nrt=r(WVe," \u2014 "),Mre=n(WVe,"A",{href:!0});var lQt=s(Mre);srt=r(lQt,"FlaxBeitForImageClassification"),lQt.forEach(t),lrt=r(WVe," (BEiT model)"),WVe.forEach(t),irt=i(iHe),$A=n(iHe,"LI",{});var HVe=s($A);KAe=n(HVe,"STRONG",{});var iQt=s(KAe);drt=r(iQt,"vit"),iQt.forEach(t),crt=r(HVe," \u2014 "),Ere=n(HVe,"A",{href:!0});var dQt=s(Ere);frt=r(dQt,"FlaxViTForImageClassification"),dQt.forEach(t),mrt=r(HVe," (ViT model)"),HVe.forEach(t),iHe.forEach(t),grt=i(Ei),T(kA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),Zze=i(f),Lf=n(f,"H2",{class:!0});var dHe=s(Lf);SA=n(dHe,"A",{id:!0,class:!0,href:!0});var cQt=s(SA);ZAe=n(cQt,"SPAN",{});var fQt=s(ZAe);T(dk.$$.fragment,fQt),fQt.forEach(t),cQt.forEach(t),hrt=i(dHe),e7e=n(dHe,"SPAN",{});var mQt=s(e7e);prt=r(mQt,"FlaxAutoModelForVision2Seq"),mQt.forEach(t),dHe.forEach(t),eQe=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(ck.$$.fragment,Ci),_rt=i(Ci),yf=n(Ci,"P",{});var Fae=s(yf);urt=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=n(Fae,"A",{href:!0});var gQt=s(Cre);brt=r(gQt,"from_pretrained()"),gQt.forEach(t),vrt=r(Fae," class method or the "),wre=n(Fae,"A",{href:!0});var hQt=s(wre);Frt=r(hQt,"from_config()"),hQt.forEach(t),Trt=r(Fae,` class
method.`),Fae.forEach(t),Mrt=i(Ci),fk=n(Ci,"P",{});var cHe=s(fk);Ert=r(cHe,"This class cannot be instantiated directly using "),o7e=n(cHe,"CODE",{});var pQt=s(o7e);Crt=r(pQt,"__init__()"),pQt.forEach(t),wrt=r(cHe," (throws an error)."),cHe.forEach(t),Art=i(Ci),ta=n(Ci,"DIV",{class:!0});var KL=s(ta);T(mk.$$.fragment,KL),Lrt=i(KL),r7e=n(KL,"P",{});var _Qt=s(r7e);yrt=r(_Qt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Qt.forEach(t),xrt=i(KL),xf=n(KL,"P",{});var Tae=s(xf);$rt=r(Tae,`Note:
Loading a model from its configuration file does `),t7e=n(Tae,"STRONG",{});var uQt=s(t7e);krt=r(uQt,"not"),uQt.forEach(t),Srt=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Tae,"A",{href:!0});var bQt=s(Are);Rrt=r(bQt,"from_pretrained()"),bQt.forEach(t),Prt=r(Tae," to load the model weights."),Tae.forEach(t),Brt=i(KL),T(RA.$$.fragment,KL),KL.forEach(t),Nrt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(gk.$$.fragment,wi),Irt=i(wi),a7e=n(wi,"P",{});var vQt=s(a7e);qrt=r(vQt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vQt.forEach(t),jrt=i(wi),Sn=n(wi,"P",{});var ZL=s(Sn);Drt=r(ZL,"The model class to instantiate is selected based on the "),n7e=n(ZL,"CODE",{});var FQt=s(n7e);Grt=r(FQt,"model_type"),FQt.forEach(t),Ort=r(ZL,` property of the config object (either
passed as an argument or loaded from `),s7e=n(ZL,"CODE",{});var TQt=s(s7e);Vrt=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),Xrt=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(ZL,"CODE",{});var MQt=s(l7e);zrt=r(MQt,"pretrained_model_name_or_path"),MQt.forEach(t),Qrt=r(ZL,":"),ZL.forEach(t),Wrt=i(wi),i7e=n(wi,"UL",{});var EQt=s(i7e);PA=n(EQt,"LI",{});var UVe=s(PA);d7e=n(UVe,"STRONG",{});var CQt=s(d7e);Hrt=r(CQt,"vision-encoder-decoder"),CQt.forEach(t),Urt=r(UVe," \u2014 "),Lre=n(UVe,"A",{href:!0});var wQt=s(Lre);Jrt=r(wQt,"FlaxVisionEncoderDecoderModel"),wQt.forEach(t),Yrt=r(UVe," (Vision Encoder decoder model)"),UVe.forEach(t),EQt.forEach(t),Krt=i(wi),T(BA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomConfig"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenConfig"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtConfig"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTConfig"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitConfig"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Config"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTConfig"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpConfig"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaConfig"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpTokenizer"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Tokenizer"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5TokenizerFast"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoProcessor"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"id","transformers.AutoModel"),c(Dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomModel"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenModel"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtModel"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/groupvit#transformers.GroupViTModel"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitModel"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5Model"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTModel"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTModel"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpModel"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaModel"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoModelForPreTraining"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForCausalLM"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForCausalLM"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.AutoModelForMaskedLM"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeForMaskedLM"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v2,"id","transformers.AutoModelForSeq2SeqLM"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForSequenceClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForMultipleChoice"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForNextSentencePrediction"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForTokenClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.AutoModelForQuestionAnswering"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForTableQuestionAnswering"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.AutoModelForImageClassification"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassification"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForVision2Seq"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.AutoModelForVisualQuestionAnswering"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.AutoModelForAudioClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioFrameClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForCTC"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/mctct#transformers.MCTCTForCTC"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForAudioXVector"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForMaskedImageModeling"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForObjectDetection"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForImageSegmentation"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForSemanticSegmentation"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.AutoModelForInstanceSegmentation"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.TFAutoModel"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTModel"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetModel"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetModel"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.TFAutoModelForPreTraining"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForCausalLM"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForImageClassification"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForMaskedLM"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForSequenceClassification"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForMultipleChoice"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(jK,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(DK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForTokenClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(XK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(HK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(UK,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(JK,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(YK,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(ZK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(oZ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(tZ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(aZ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(nZ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(lZ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(dZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(cZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(fZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForQuestionAnswering"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(gZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(wZ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(PZ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForVision2Seq"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(NZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModel"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HZ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(UZ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(JZ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(YZ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZZ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eee,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oee,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ree,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(tee,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aee,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nee,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(see,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(lee,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(iee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dee,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cee,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTModel"),c(fee,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(mee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(gee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(hee,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(pee,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_ee,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(uee,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(bee,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(vee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.FlaxAutoModelForCausalLM"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(Fee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Cee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(wee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Aee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Lee,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yee,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(xee,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c($ee,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(kee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(See,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.FlaxAutoModelForPreTraining"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(Ree,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Iee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jee,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Dee,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Gee,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zee,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Qee,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Hee,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tw,"id","transformers.FlaxAutoModelForMaskedLM"),c(tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(Uee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(roe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(toe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(aoe,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(soe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(loe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(ioe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(goe,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(poe,"href","/docs/transformers/pr_16543/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uoe,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(Toe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($oe,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(koe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Poe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ioe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oA,"id","transformers.FlaxAutoModelForTokenClassification"),c(oA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Woe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uoe,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Koe,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ere,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ore,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rre,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tre,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(mA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(are,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ire,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dre,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cre,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fre,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mre,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gre,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hre,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(EA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(pre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForImageClassification"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(vre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ere,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForVision2Seq"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,ey),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,oy),e(Qe,Bn),e(Qe,Nn),e(Nn,ry),e(Qe,$i),e(Qe,In),e(In,ty),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,PS),e(Ae,Si),e(Si,BS),e(Ae,NS),b(f,Co,u),b(f,Ra,u),e(Ra,IS),e(Ra,Nf),e(Nf,qS),e(Ra,fHe),b(f,JVe,u),b(f,Ri,u),e(Ri,If),e(If,Mae),M(ay,Mae,null),e(Ri,mHe),e(Ri,Eae),e(Eae,gHe),b(f,YVe,u),b(f,qn,u),e(qn,hHe),e(qn,Cae),e(Cae,pHe),e(qn,_He),e(qn,wae),e(wae,uHe),e(qn,bHe),b(f,KVe,u),M(ny,f,u),b(f,ZVe,u),b(f,jS,u),e(jS,vHe),b(f,eXe,u),M(qf,f,u),b(f,oXe,u),b(f,Pi,u),e(Pi,jf),e(jf,Aae),M(sy,Aae,null),e(Pi,FHe),e(Pi,Lae),e(Lae,THe),b(f,rXe,u),b(f,wo,u),M(ly,wo,null),e(wo,MHe),e(wo,iy),e(iy,EHe),e(iy,DS),e(DS,CHe),e(iy,wHe),e(wo,AHe),e(wo,dy),e(dy,LHe),e(dy,yae),e(yae,yHe),e(dy,xHe),e(wo,$He),e(wo,Lr),M(cy,Lr,null),e(Lr,kHe),e(Lr,xae),e(xae,SHe),e(Lr,RHe),e(Lr,Bi),e(Bi,PHe),e(Bi,$ae),e($ae,BHe),e(Bi,NHe),e(Bi,kae),e(kae,IHe),e(Bi,qHe),e(Lr,jHe),e(Lr,A),e(A,Df),e(Df,Sae),e(Sae,DHe),e(Df,GHe),e(Df,GS),e(GS,OHe),e(Df,VHe),e(A,XHe),e(A,Gf),e(Gf,Rae),e(Rae,zHe),e(Gf,QHe),e(Gf,OS),e(OS,WHe),e(Gf,HHe),e(A,UHe),e(A,Of),e(Of,Pae),e(Pae,JHe),e(Of,YHe),e(Of,VS),e(VS,KHe),e(Of,ZHe),e(A,eUe),e(A,Vf),e(Vf,Bae),e(Bae,oUe),e(Vf,rUe),e(Vf,XS),e(XS,tUe),e(Vf,aUe),e(A,nUe),e(A,Xf),e(Xf,Nae),e(Nae,sUe),e(Xf,lUe),e(Xf,zS),e(zS,iUe),e(Xf,dUe),e(A,cUe),e(A,zf),e(zf,Iae),e(Iae,fUe),e(zf,mUe),e(zf,QS),e(QS,gUe),e(zf,hUe),e(A,pUe),e(A,Qf),e(Qf,qae),e(qae,_Ue),e(Qf,uUe),e(Qf,WS),e(WS,bUe),e(Qf,vUe),e(A,FUe),e(A,Wf),e(Wf,jae),e(jae,TUe),e(Wf,MUe),e(Wf,HS),e(HS,EUe),e(Wf,CUe),e(A,wUe),e(A,Hf),e(Hf,Dae),e(Dae,AUe),e(Hf,LUe),e(Hf,US),e(US,yUe),e(Hf,xUe),e(A,$Ue),e(A,Uf),e(Uf,Gae),e(Gae,kUe),e(Uf,SUe),e(Uf,JS),e(JS,RUe),e(Uf,PUe),e(A,BUe),e(A,Jf),e(Jf,Oae),e(Oae,NUe),e(Jf,IUe),e(Jf,YS),e(YS,qUe),e(Jf,jUe),e(A,DUe),e(A,Yf),e(Yf,Vae),e(Vae,GUe),e(Yf,OUe),e(Yf,KS),e(KS,VUe),e(Yf,XUe),e(A,zUe),e(A,Kf),e(Kf,Xae),e(Xae,QUe),e(Kf,WUe),e(Kf,ZS),e(ZS,HUe),e(Kf,UUe),e(A,JUe),e(A,Zf),e(Zf,zae),e(zae,YUe),e(Zf,KUe),e(Zf,eR),e(eR,ZUe),e(Zf,eJe),e(A,oJe),e(A,em),e(em,Qae),e(Qae,rJe),e(em,tJe),e(em,oR),e(oR,aJe),e(em,nJe),e(A,sJe),e(A,om),e(om,Wae),e(Wae,lJe),e(om,iJe),e(om,rR),e(rR,dJe),e(om,cJe),e(A,fJe),e(A,rm),e(rm,Hae),e(Hae,mJe),e(rm,gJe),e(rm,tR),e(tR,hJe),e(rm,pJe),e(A,_Je),e(A,tm),e(tm,Uae),e(Uae,uJe),e(tm,bJe),e(tm,aR),e(aR,vJe),e(tm,FJe),e(A,TJe),e(A,am),e(am,Jae),e(Jae,MJe),e(am,EJe),e(am,nR),e(nR,CJe),e(am,wJe),e(A,AJe),e(A,nm),e(nm,Yae),e(Yae,LJe),e(nm,yJe),e(nm,sR),e(sR,xJe),e(nm,$Je),e(A,kJe),e(A,sm),e(sm,Kae),e(Kae,SJe),e(sm,RJe),e(sm,lR),e(lR,PJe),e(sm,BJe),e(A,NJe),e(A,lm),e(lm,Zae),e(Zae,IJe),e(lm,qJe),e(lm,iR),e(iR,jJe),e(lm,DJe),e(A,GJe),e(A,im),e(im,ene),e(ene,OJe),e(im,VJe),e(im,dR),e(dR,XJe),e(im,zJe),e(A,QJe),e(A,dm),e(dm,one),e(one,WJe),e(dm,HJe),e(dm,cR),e(cR,UJe),e(dm,JJe),e(A,YJe),e(A,cm),e(cm,rne),e(rne,KJe),e(cm,ZJe),e(cm,fR),e(fR,eYe),e(cm,oYe),e(A,rYe),e(A,fm),e(fm,tne),e(tne,tYe),e(fm,aYe),e(fm,mR),e(mR,nYe),e(fm,sYe),e(A,lYe),e(A,mm),e(mm,ane),e(ane,iYe),e(mm,dYe),e(mm,gR),e(gR,cYe),e(mm,fYe),e(A,mYe),e(A,gm),e(gm,nne),e(nne,gYe),e(gm,hYe),e(gm,hR),e(hR,pYe),e(gm,_Ye),e(A,uYe),e(A,hm),e(hm,sne),e(sne,bYe),e(hm,vYe),e(hm,pR),e(pR,FYe),e(hm,TYe),e(A,MYe),e(A,pm),e(pm,lne),e(lne,EYe),e(pm,CYe),e(pm,_R),e(_R,wYe),e(pm,AYe),e(A,LYe),e(A,_m),e(_m,ine),e(ine,yYe),e(_m,xYe),e(_m,uR),e(uR,$Ye),e(_m,kYe),e(A,SYe),e(A,um),e(um,dne),e(dne,RYe),e(um,PYe),e(um,bR),e(bR,BYe),e(um,NYe),e(A,IYe),e(A,bm),e(bm,cne),e(cne,qYe),e(bm,jYe),e(bm,vR),e(vR,DYe),e(bm,GYe),e(A,OYe),e(A,vm),e(vm,fne),e(fne,VYe),e(vm,XYe),e(vm,FR),e(FR,zYe),e(vm,QYe),e(A,WYe),e(A,Fm),e(Fm,mne),e(mne,HYe),e(Fm,UYe),e(Fm,TR),e(TR,JYe),e(Fm,YYe),e(A,KYe),e(A,Tm),e(Tm,gne),e(gne,ZYe),e(Tm,eKe),e(Tm,MR),e(MR,oKe),e(Tm,rKe),e(A,tKe),e(A,Mm),e(Mm,hne),e(hne,aKe),e(Mm,nKe),e(Mm,ER),e(ER,sKe),e(Mm,lKe),e(A,iKe),e(A,Em),e(Em,pne),e(pne,dKe),e(Em,cKe),e(Em,CR),e(CR,fKe),e(Em,mKe),e(A,gKe),e(A,Cm),e(Cm,_ne),e(_ne,hKe),e(Cm,pKe),e(Cm,wR),e(wR,_Ke),e(Cm,uKe),e(A,bKe),e(A,wm),e(wm,une),e(une,vKe),e(wm,FKe),e(wm,AR),e(AR,TKe),e(wm,MKe),e(A,EKe),e(A,Am),e(Am,bne),e(bne,CKe),e(Am,wKe),e(Am,LR),e(LR,AKe),e(Am,LKe),e(A,yKe),e(A,Lm),e(Lm,vne),e(vne,xKe),e(Lm,$Ke),e(Lm,yR),e(yR,kKe),e(Lm,SKe),e(A,RKe),e(A,ym),e(ym,Fne),e(Fne,PKe),e(ym,BKe),e(ym,xR),e(xR,NKe),e(ym,IKe),e(A,qKe),e(A,xm),e(xm,Tne),e(Tne,jKe),e(xm,DKe),e(xm,$R),e($R,GKe),e(xm,OKe),e(A,VKe),e(A,$m),e($m,Mne),e(Mne,XKe),e($m,zKe),e($m,kR),e(kR,QKe),e($m,WKe),e(A,HKe),e(A,km),e(km,Ene),e(Ene,UKe),e(km,JKe),e(km,SR),e(SR,YKe),e(km,KKe),e(A,ZKe),e(A,Sm),e(Sm,Cne),e(Cne,eZe),e(Sm,oZe),e(Sm,RR),e(RR,rZe),e(Sm,tZe),e(A,aZe),e(A,Rm),e(Rm,wne),e(wne,nZe),e(Rm,sZe),e(Rm,PR),e(PR,lZe),e(Rm,iZe),e(A,dZe),e(A,Pm),e(Pm,Ane),e(Ane,cZe),e(Pm,fZe),e(Pm,BR),e(BR,mZe),e(Pm,gZe),e(A,hZe),e(A,Bm),e(Bm,Lne),e(Lne,pZe),e(Bm,_Ze),e(Bm,NR),e(NR,uZe),e(Bm,bZe),e(A,vZe),e(A,Nm),e(Nm,yne),e(yne,FZe),e(Nm,TZe),e(Nm,IR),e(IR,MZe),e(Nm,EZe),e(A,CZe),e(A,Im),e(Im,xne),e(xne,wZe),e(Im,AZe),e(Im,qR),e(qR,LZe),e(Im,yZe),e(A,xZe),e(A,qm),e(qm,$ne),e($ne,$Ze),e(qm,kZe),e(qm,jR),e(jR,SZe),e(qm,RZe),e(A,PZe),e(A,jm),e(jm,kne),e(kne,BZe),e(jm,NZe),e(jm,DR),e(DR,IZe),e(jm,qZe),e(A,jZe),e(A,Dm),e(Dm,Sne),e(Sne,DZe),e(Dm,GZe),e(Dm,GR),e(GR,OZe),e(Dm,VZe),e(A,XZe),e(A,Gm),e(Gm,Rne),e(Rne,zZe),e(Gm,QZe),e(Gm,OR),e(OR,WZe),e(Gm,HZe),e(A,UZe),e(A,Om),e(Om,Pne),e(Pne,JZe),e(Om,YZe),e(Om,VR),e(VR,KZe),e(Om,ZZe),e(A,eeo),e(A,Vm),e(Vm,Bne),e(Bne,oeo),e(Vm,reo),e(Vm,XR),e(XR,teo),e(Vm,aeo),e(A,neo),e(A,Xm),e(Xm,Nne),e(Nne,seo),e(Xm,leo),e(Xm,zR),e(zR,ieo),e(Xm,deo),e(A,ceo),e(A,zm),e(zm,Ine),e(Ine,feo),e(zm,meo),e(zm,QR),e(QR,geo),e(zm,heo),e(A,peo),e(A,Qm),e(Qm,qne),e(qne,_eo),e(Qm,ueo),e(Qm,WR),e(WR,beo),e(Qm,veo),e(A,Feo),e(A,Wm),e(Wm,jne),e(jne,Teo),e(Wm,Meo),e(Wm,HR),e(HR,Eeo),e(Wm,Ceo),e(A,weo),e(A,Hm),e(Hm,Dne),e(Dne,Aeo),e(Hm,Leo),e(Hm,UR),e(UR,yeo),e(Hm,xeo),e(A,$eo),e(A,Um),e(Um,Gne),e(Gne,keo),e(Um,Seo),e(Um,JR),e(JR,Reo),e(Um,Peo),e(A,Beo),e(A,Jm),e(Jm,One),e(One,Neo),e(Jm,Ieo),e(Jm,YR),e(YR,qeo),e(Jm,jeo),e(A,Deo),e(A,Ym),e(Ym,Vne),e(Vne,Geo),e(Ym,Oeo),e(Ym,KR),e(KR,Veo),e(Ym,Xeo),e(A,zeo),e(A,Km),e(Km,Xne),e(Xne,Qeo),e(Km,Weo),e(Km,ZR),e(ZR,Heo),e(Km,Ueo),e(A,Jeo),e(A,Zm),e(Zm,zne),e(zne,Yeo),e(Zm,Keo),e(Zm,eP),e(eP,Zeo),e(Zm,eoo),e(A,ooo),e(A,eg),e(eg,Qne),e(Qne,roo),e(eg,too),e(eg,oP),e(oP,aoo),e(eg,noo),e(A,soo),e(A,og),e(og,Wne),e(Wne,loo),e(og,ioo),e(og,rP),e(rP,doo),e(og,coo),e(A,foo),e(A,rg),e(rg,Hne),e(Hne,moo),e(rg,goo),e(rg,tP),e(tP,hoo),e(rg,poo),e(A,_oo),e(A,tg),e(tg,Une),e(Une,uoo),e(tg,boo),e(tg,aP),e(aP,voo),e(tg,Foo),e(A,Too),e(A,ag),e(ag,Jne),e(Jne,Moo),e(ag,Eoo),e(ag,nP),e(nP,Coo),e(ag,woo),e(A,Aoo),e(A,ng),e(ng,Yne),e(Yne,Loo),e(ng,yoo),e(ng,sP),e(sP,xoo),e(ng,$oo),e(A,koo),e(A,sg),e(sg,Kne),e(Kne,Soo),e(sg,Roo),e(sg,lP),e(lP,Poo),e(sg,Boo),e(A,Noo),e(A,lg),e(lg,Zne),e(Zne,Ioo),e(lg,qoo),e(lg,iP),e(iP,joo),e(lg,Doo),e(A,Goo),e(A,ig),e(ig,ese),e(ese,Ooo),e(ig,Voo),e(ig,dP),e(dP,Xoo),e(ig,zoo),e(A,Qoo),e(A,dg),e(dg,ose),e(ose,Woo),e(dg,Hoo),e(dg,cP),e(cP,Uoo),e(dg,Joo),e(A,Yoo),e(A,cg),e(cg,rse),e(rse,Koo),e(cg,Zoo),e(cg,fP),e(fP,ero),e(cg,oro),e(A,rro),e(A,fg),e(fg,tse),e(tse,tro),e(fg,aro),e(fg,mP),e(mP,nro),e(fg,sro),e(A,lro),e(A,mg),e(mg,ase),e(ase,iro),e(mg,dro),e(mg,gP),e(gP,cro),e(mg,fro),e(A,mro),e(A,gg),e(gg,nse),e(nse,gro),e(gg,hro),e(gg,hP),e(hP,pro),e(gg,_ro),e(A,uro),e(A,hg),e(hg,sse),e(sse,bro),e(hg,vro),e(hg,pP),e(pP,Fro),e(hg,Tro),e(A,Mro),e(A,pg),e(pg,lse),e(lse,Ero),e(pg,Cro),e(pg,_P),e(_P,wro),e(pg,Aro),e(A,Lro),e(A,_g),e(_g,ise),e(ise,yro),e(_g,xro),e(_g,uP),e(uP,$ro),e(_g,kro),e(A,Sro),e(A,ug),e(ug,dse),e(dse,Rro),e(ug,Pro),e(ug,bP),e(bP,Bro),e(ug,Nro),e(A,Iro),e(A,bg),e(bg,cse),e(cse,qro),e(bg,jro),e(bg,vP),e(vP,Dro),e(bg,Gro),e(A,Oro),e(A,vg),e(vg,fse),e(fse,Vro),e(vg,Xro),e(vg,FP),e(FP,zro),e(vg,Qro),e(A,Wro),e(A,Fg),e(Fg,mse),e(mse,Hro),e(Fg,Uro),e(Fg,TP),e(TP,Jro),e(Fg,Yro),e(A,Kro),e(A,Tg),e(Tg,gse),e(gse,Zro),e(Tg,eto),e(Tg,MP),e(MP,oto),e(Tg,rto),e(A,tto),e(A,Mg),e(Mg,hse),e(hse,ato),e(Mg,nto),e(Mg,EP),e(EP,sto),e(Mg,lto),e(A,ito),e(A,Eg),e(Eg,pse),e(pse,dto),e(Eg,cto),e(Eg,CP),e(CP,fto),e(Eg,mto),e(A,gto),e(A,Cg),e(Cg,_se),e(_se,hto),e(Cg,pto),e(Cg,wP),e(wP,_to),e(Cg,uto),e(A,bto),e(A,wg),e(wg,use),e(use,vto),e(wg,Fto),e(wg,AP),e(AP,Tto),e(wg,Mto),e(A,Eto),e(A,Ag),e(Ag,bse),e(bse,Cto),e(Ag,wto),e(Ag,LP),e(LP,Ato),e(Ag,Lto),e(A,yto),e(A,Lg),e(Lg,vse),e(vse,xto),e(Lg,$to),e(Lg,yP),e(yP,kto),e(Lg,Sto),e(A,Rto),e(A,yg),e(yg,Fse),e(Fse,Pto),e(yg,Bto),e(yg,xP),e(xP,Nto),e(yg,Ito),e(A,qto),e(A,xg),e(xg,Tse),e(Tse,jto),e(xg,Dto),e(xg,$P),e($P,Gto),e(xg,Oto),e(A,Vto),e(A,$g),e($g,Mse),e(Mse,Xto),e($g,zto),e($g,kP),e(kP,Qto),e($g,Wto),e(A,Hto),e(A,kg),e(kg,Ese),e(Ese,Uto),e(kg,Jto),e(kg,SP),e(SP,Yto),e(kg,Kto),e(A,Zto),e(A,Sg),e(Sg,Cse),e(Cse,eao),e(Sg,oao),e(Sg,RP),e(RP,rao),e(Sg,tao),e(A,aao),e(A,Rg),e(Rg,wse),e(wse,nao),e(Rg,sao),e(Rg,PP),e(PP,lao),e(Rg,iao),e(A,dao),e(A,Pg),e(Pg,Ase),e(Ase,cao),e(Pg,fao),e(Pg,BP),e(BP,mao),e(Pg,gao),e(A,hao),e(A,Bg),e(Bg,Lse),e(Lse,pao),e(Bg,_ao),e(Bg,NP),e(NP,uao),e(Bg,bao),e(A,vao),e(A,Ng),e(Ng,yse),e(yse,Fao),e(Ng,Tao),e(Ng,IP),e(IP,Mao),e(Ng,Eao),e(A,Cao),e(A,Ig),e(Ig,xse),e(xse,wao),e(Ig,Aao),e(Ig,qP),e(qP,Lao),e(Ig,yao),e(A,xao),e(A,qg),e(qg,$se),e($se,$ao),e(qg,kao),e(qg,jP),e(jP,Sao),e(qg,Rao),e(A,Pao),e(A,jg),e(jg,kse),e(kse,Bao),e(jg,Nao),e(jg,DP),e(DP,Iao),e(jg,qao),e(A,jao),e(A,Dg),e(Dg,Sse),e(Sse,Dao),e(Dg,Gao),e(Dg,GP),e(GP,Oao),e(Dg,Vao),e(A,Xao),e(A,Gg),e(Gg,Rse),e(Rse,zao),e(Gg,Qao),e(Gg,OP),e(OP,Wao),e(Gg,Hao),e(A,Uao),e(A,Og),e(Og,Pse),e(Pse,Jao),e(Og,Yao),e(Og,VP),e(VP,Kao),e(Og,Zao),e(A,eno),e(A,Vg),e(Vg,Bse),e(Bse,ono),e(Vg,rno),e(Vg,XP),e(XP,tno),e(Vg,ano),e(A,nno),e(A,Xg),e(Xg,Nse),e(Nse,sno),e(Xg,lno),e(Xg,zP),e(zP,ino),e(Xg,dno),e(A,cno),e(A,zg),e(zg,Ise),e(Ise,fno),e(zg,mno),e(zg,QP),e(QP,gno),e(zg,hno),e(A,pno),e(A,Qg),e(Qg,qse),e(qse,_no),e(Qg,uno),e(Qg,WP),e(WP,bno),e(Qg,vno),e(A,Fno),e(A,Wg),e(Wg,jse),e(jse,Tno),e(Wg,Mno),e(Wg,HP),e(HP,Eno),e(Wg,Cno),e(A,wno),e(A,Hg),e(Hg,Dse),e(Dse,Ano),e(Hg,Lno),e(Hg,UP),e(UP,yno),e(Hg,xno),e(A,$no),e(A,Ug),e(Ug,Gse),e(Gse,kno),e(Ug,Sno),e(Ug,JP),e(JP,Rno),e(Ug,Pno),e(Lr,Bno),M(Jg,Lr,null),e(wo,Nno),e(wo,Yg),M(fy,Yg,null),e(Yg,Ino),e(Yg,Ose),e(Ose,qno),b(f,tXe,u),b(f,Ni,u),e(Ni,Kg),e(Kg,Vse),M(my,Vse,null),e(Ni,jno),e(Ni,Xse),e(Xse,Dno),b(f,aXe,u),b(f,Ao,u),M(gy,Ao,null),e(Ao,Gno),e(Ao,hy),e(hy,Ono),e(hy,YP),e(YP,Vno),e(hy,Xno),e(Ao,zno),e(Ao,py),e(py,Qno),e(py,zse),e(zse,Wno),e(py,Hno),e(Ao,Uno),e(Ao,yr),M(_y,yr,null),e(yr,Jno),e(yr,Qse),e(Qse,Yno),e(yr,Kno),e(yr,Pa),e(Pa,Zno),e(Pa,Wse),e(Wse,eso),e(Pa,oso),e(Pa,Hse),e(Hse,rso),e(Pa,tso),e(Pa,Use),e(Use,aso),e(Pa,nso),e(yr,sso),e(yr,k),e(k,jn),e(jn,Jse),e(Jse,lso),e(jn,iso),e(jn,KP),e(KP,dso),e(jn,cso),e(jn,ZP),e(ZP,fso),e(jn,mso),e(k,gso),e(k,Dn),e(Dn,Yse),e(Yse,hso),e(Dn,pso),e(Dn,eB),e(eB,_so),e(Dn,uso),e(Dn,oB),e(oB,bso),e(Dn,vso),e(k,Fso),e(k,Gn),e(Gn,Kse),e(Kse,Tso),e(Gn,Mso),e(Gn,rB),e(rB,Eso),e(Gn,Cso),e(Gn,tB),e(tB,wso),e(Gn,Aso),e(k,Lso),e(k,Zg),e(Zg,Zse),e(Zse,yso),e(Zg,xso),e(Zg,aB),e(aB,$so),e(Zg,kso),e(k,Sso),e(k,On),e(On,ele),e(ele,Rso),e(On,Pso),e(On,nB),e(nB,Bso),e(On,Nso),e(On,sB),e(sB,Iso),e(On,qso),e(k,jso),e(k,eh),e(eh,ole),e(ole,Dso),e(eh,Gso),e(eh,lB),e(lB,Oso),e(eh,Vso),e(k,Xso),e(k,oh),e(oh,rle),e(rle,zso),e(oh,Qso),e(oh,iB),e(iB,Wso),e(oh,Hso),e(k,Uso),e(k,rh),e(rh,tle),e(tle,Jso),e(rh,Yso),e(rh,dB),e(dB,Kso),e(rh,Zso),e(k,elo),e(k,Vn),e(Vn,ale),e(ale,olo),e(Vn,rlo),e(Vn,cB),e(cB,tlo),e(Vn,alo),e(Vn,fB),e(fB,nlo),e(Vn,slo),e(k,llo),e(k,Xn),e(Xn,nle),e(nle,ilo),e(Xn,dlo),e(Xn,mB),e(mB,clo),e(Xn,flo),e(Xn,gB),e(gB,mlo),e(Xn,glo),e(k,hlo),e(k,zn),e(zn,sle),e(sle,plo),e(zn,_lo),e(zn,hB),e(hB,ulo),e(zn,blo),e(zn,pB),e(pB,vlo),e(zn,Flo),e(k,Tlo),e(k,th),e(th,lle),e(lle,Mlo),e(th,Elo),e(th,_B),e(_B,Clo),e(th,wlo),e(k,Alo),e(k,ah),e(ah,ile),e(ile,Llo),e(ah,ylo),e(ah,uB),e(uB,xlo),e(ah,$lo),e(k,klo),e(k,nh),e(nh,dle),e(dle,Slo),e(nh,Rlo),e(nh,bB),e(bB,Plo),e(nh,Blo),e(k,Nlo),e(k,Qn),e(Qn,cle),e(cle,Ilo),e(Qn,qlo),e(Qn,vB),e(vB,jlo),e(Qn,Dlo),e(Qn,FB),e(FB,Glo),e(Qn,Olo),e(k,Vlo),e(k,sh),e(sh,fle),e(fle,Xlo),e(sh,zlo),e(sh,TB),e(TB,Qlo),e(sh,Wlo),e(k,Hlo),e(k,Wn),e(Wn,mle),e(mle,Ulo),e(Wn,Jlo),e(Wn,MB),e(MB,Ylo),e(Wn,Klo),e(Wn,EB),e(EB,Zlo),e(Wn,eio),e(k,oio),e(k,Hn),e(Hn,gle),e(gle,rio),e(Hn,tio),e(Hn,CB),e(CB,aio),e(Hn,nio),e(Hn,wB),e(wB,sio),e(Hn,lio),e(k,iio),e(k,Un),e(Un,hle),e(hle,dio),e(Un,cio),e(Un,AB),e(AB,fio),e(Un,mio),e(Un,LB),e(LB,gio),e(Un,hio),e(k,pio),e(k,Jn),e(Jn,ple),e(ple,_io),e(Jn,uio),e(Jn,yB),e(yB,bio),e(Jn,vio),e(Jn,xB),e(xB,Fio),e(Jn,Tio),e(k,Mio),e(k,lh),e(lh,_le),e(_le,Eio),e(lh,Cio),e(lh,$B),e($B,wio),e(lh,Aio),e(k,Lio),e(k,Yn),e(Yn,ule),e(ule,yio),e(Yn,xio),e(Yn,kB),e(kB,$io),e(Yn,kio),e(Yn,SB),e(SB,Sio),e(Yn,Rio),e(k,Pio),e(k,Kn),e(Kn,ble),e(ble,Bio),e(Kn,Nio),e(Kn,RB),e(RB,Iio),e(Kn,qio),e(Kn,PB),e(PB,jio),e(Kn,Dio),e(k,Gio),e(k,Zn),e(Zn,vle),e(vle,Oio),e(Zn,Vio),e(Zn,BB),e(BB,Xio),e(Zn,zio),e(Zn,NB),e(NB,Qio),e(Zn,Wio),e(k,Hio),e(k,es),e(es,Fle),e(Fle,Uio),e(es,Jio),e(es,IB),e(IB,Yio),e(es,Kio),e(es,qB),e(qB,Zio),e(es,edo),e(k,odo),e(k,os),e(os,Tle),e(Tle,rdo),e(os,tdo),e(os,jB),e(jB,ado),e(os,ndo),e(os,DB),e(DB,sdo),e(os,ldo),e(k,ido),e(k,rs),e(rs,Mle),e(Mle,ddo),e(rs,cdo),e(rs,GB),e(GB,fdo),e(rs,mdo),e(rs,OB),e(OB,gdo),e(rs,hdo),e(k,pdo),e(k,ih),e(ih,Ele),e(Ele,_do),e(ih,udo),e(ih,VB),e(VB,bdo),e(ih,vdo),e(k,Fdo),e(k,ts),e(ts,Cle),e(Cle,Tdo),e(ts,Mdo),e(ts,XB),e(XB,Edo),e(ts,Cdo),e(ts,zB),e(zB,wdo),e(ts,Ado),e(k,Ldo),e(k,dh),e(dh,wle),e(wle,ydo),e(dh,xdo),e(dh,QB),e(QB,$do),e(dh,kdo),e(k,Sdo),e(k,as),e(as,Ale),e(Ale,Rdo),e(as,Pdo),e(as,WB),e(WB,Bdo),e(as,Ndo),e(as,HB),e(HB,Ido),e(as,qdo),e(k,jdo),e(k,ns),e(ns,Lle),e(Lle,Ddo),e(ns,Gdo),e(ns,UB),e(UB,Odo),e(ns,Vdo),e(ns,JB),e(JB,Xdo),e(ns,zdo),e(k,Qdo),e(k,ss),e(ss,yle),e(yle,Wdo),e(ss,Hdo),e(ss,YB),e(YB,Udo),e(ss,Jdo),e(ss,KB),e(KB,Ydo),e(ss,Kdo),e(k,Zdo),e(k,ch),e(ch,xle),e(xle,eco),e(ch,oco),e(ch,ZB),e(ZB,rco),e(ch,tco),e(k,aco),e(k,ls),e(ls,$le),e($le,nco),e(ls,sco),e(ls,eN),e(eN,lco),e(ls,ico),e(ls,oN),e(oN,dco),e(ls,cco),e(k,fco),e(k,is),e(is,kle),e(kle,mco),e(is,gco),e(is,rN),e(rN,hco),e(is,pco),e(is,tN),e(tN,_co),e(is,uco),e(k,bco),e(k,ds),e(ds,Sle),e(Sle,vco),e(ds,Fco),e(ds,aN),e(aN,Tco),e(ds,Mco),e(ds,nN),e(nN,Eco),e(ds,Cco),e(k,wco),e(k,fh),e(fh,Rle),e(Rle,Aco),e(fh,Lco),e(fh,sN),e(sN,yco),e(fh,xco),e(k,$co),e(k,cs),e(cs,Ple),e(Ple,kco),e(cs,Sco),e(cs,lN),e(lN,Rco),e(cs,Pco),e(cs,iN),e(iN,Bco),e(cs,Nco),e(k,Ico),e(k,fs),e(fs,Ble),e(Ble,qco),e(fs,jco),e(fs,dN),e(dN,Dco),e(fs,Gco),e(fs,cN),e(cN,Oco),e(fs,Vco),e(k,Xco),e(k,ms),e(ms,Nle),e(Nle,zco),e(ms,Qco),e(ms,fN),e(fN,Wco),e(ms,Hco),e(ms,mN),e(mN,Uco),e(ms,Jco),e(k,Yco),e(k,gs),e(gs,Ile),e(Ile,Kco),e(gs,Zco),e(gs,gN),e(gN,efo),e(gs,ofo),e(gs,hN),e(hN,rfo),e(gs,tfo),e(k,afo),e(k,hs),e(hs,qle),e(qle,nfo),e(hs,sfo),e(hs,pN),e(pN,lfo),e(hs,ifo),e(hs,_N),e(_N,dfo),e(hs,cfo),e(k,ffo),e(k,ps),e(ps,jle),e(jle,mfo),e(ps,gfo),e(ps,uN),e(uN,hfo),e(ps,pfo),e(ps,bN),e(bN,_fo),e(ps,ufo),e(k,bfo),e(k,_s),e(_s,Dle),e(Dle,vfo),e(_s,Ffo),e(_s,vN),e(vN,Tfo),e(_s,Mfo),e(_s,FN),e(FN,Efo),e(_s,Cfo),e(k,wfo),e(k,us),e(us,Gle),e(Gle,Afo),e(us,Lfo),e(us,TN),e(TN,yfo),e(us,xfo),e(us,MN),e(MN,$fo),e(us,kfo),e(k,Sfo),e(k,mh),e(mh,Ole),e(Ole,Rfo),e(mh,Pfo),e(mh,EN),e(EN,Bfo),e(mh,Nfo),e(k,Ifo),e(k,bs),e(bs,Vle),e(Vle,qfo),e(bs,jfo),e(bs,CN),e(CN,Dfo),e(bs,Gfo),e(bs,wN),e(wN,Ofo),e(bs,Vfo),e(k,Xfo),e(k,gh),e(gh,Xle),e(Xle,zfo),e(gh,Qfo),e(gh,AN),e(AN,Wfo),e(gh,Hfo),e(k,Ufo),e(k,hh),e(hh,zle),e(zle,Jfo),e(hh,Yfo),e(hh,LN),e(LN,Kfo),e(hh,Zfo),e(k,emo),e(k,vs),e(vs,Qle),e(Qle,omo),e(vs,rmo),e(vs,yN),e(yN,tmo),e(vs,amo),e(vs,xN),e(xN,nmo),e(vs,smo),e(k,lmo),e(k,Fs),e(Fs,Wle),e(Wle,imo),e(Fs,dmo),e(Fs,$N),e($N,cmo),e(Fs,fmo),e(Fs,kN),e(kN,mmo),e(Fs,gmo),e(k,hmo),e(k,Ts),e(Ts,Hle),e(Hle,pmo),e(Ts,_mo),e(Ts,SN),e(SN,umo),e(Ts,bmo),e(Ts,RN),e(RN,vmo),e(Ts,Fmo),e(k,Tmo),e(k,ph),e(ph,Ule),e(Ule,Mmo),e(ph,Emo),e(ph,PN),e(PN,Cmo),e(ph,wmo),e(k,Amo),e(k,Ms),e(Ms,Jle),e(Jle,Lmo),e(Ms,ymo),e(Ms,BN),e(BN,xmo),e(Ms,$mo),e(Ms,NN),e(NN,kmo),e(Ms,Smo),e(k,Rmo),e(k,Es),e(Es,Yle),e(Yle,Pmo),e(Es,Bmo),e(Es,IN),e(IN,Nmo),e(Es,Imo),e(Es,qN),e(qN,qmo),e(Es,jmo),e(k,Dmo),e(k,Cs),e(Cs,Kle),e(Kle,Gmo),e(Cs,Omo),e(Cs,jN),e(jN,Vmo),e(Cs,Xmo),e(Cs,DN),e(DN,zmo),e(Cs,Qmo),e(k,Wmo),e(k,ws),e(ws,Zle),e(Zle,Hmo),e(ws,Umo),e(ws,GN),e(GN,Jmo),e(ws,Ymo),e(ws,ON),e(ON,Kmo),e(ws,Zmo),e(k,ego),e(k,As),e(As,eie),e(eie,ogo),e(As,rgo),e(As,VN),e(VN,tgo),e(As,ago),e(As,XN),e(XN,ngo),e(As,sgo),e(k,lgo),e(k,Ls),e(Ls,oie),e(oie,igo),e(Ls,dgo),e(Ls,zN),e(zN,cgo),e(Ls,fgo),e(Ls,QN),e(QN,mgo),e(Ls,ggo),e(k,hgo),e(k,ys),e(ys,rie),e(rie,pgo),e(ys,_go),e(ys,WN),e(WN,ugo),e(ys,bgo),e(ys,HN),e(HN,vgo),e(ys,Fgo),e(k,Tgo),e(k,_h),e(_h,tie),e(tie,Mgo),e(_h,Ego),e(_h,UN),e(UN,Cgo),e(_h,wgo),e(k,Ago),e(k,xs),e(xs,aie),e(aie,Lgo),e(xs,ygo),e(xs,JN),e(JN,xgo),e(xs,$go),e(xs,YN),e(YN,kgo),e(xs,Sgo),e(k,Rgo),e(k,uh),e(uh,nie),e(nie,Pgo),e(uh,Bgo),e(uh,KN),e(KN,Ngo),e(uh,Igo),e(k,qgo),e(k,bh),e(bh,sie),e(sie,jgo),e(bh,Dgo),e(bh,ZN),e(ZN,Ggo),e(bh,Ogo),e(k,Vgo),e(k,vh),e(vh,lie),e(lie,Xgo),e(vh,zgo),e(vh,eI),e(eI,Qgo),e(vh,Wgo),e(k,Hgo),e(k,Fh),e(Fh,iie),e(iie,Ugo),e(Fh,Jgo),e(Fh,oI),e(oI,Ygo),e(Fh,Kgo),e(k,Zgo),e(k,$s),e($s,die),e(die,eho),e($s,oho),e($s,rI),e(rI,rho),e($s,tho),e($s,tI),e(tI,aho),e($s,nho),e(k,sho),e(k,Th),e(Th,cie),e(cie,lho),e(Th,iho),e(Th,aI),e(aI,dho),e(Th,cho),e(k,fho),e(k,ks),e(ks,fie),e(fie,mho),e(ks,gho),e(ks,nI),e(nI,hho),e(ks,pho),e(ks,sI),e(sI,_ho),e(ks,uho),e(k,bho),e(k,Ss),e(Ss,mie),e(mie,vho),e(Ss,Fho),e(Ss,lI),e(lI,Tho),e(Ss,Mho),e(Ss,iI),e(iI,Eho),e(Ss,Cho),e(k,who),e(k,Rs),e(Rs,gie),e(gie,Aho),e(Rs,Lho),e(Rs,dI),e(dI,yho),e(Rs,xho),e(Rs,cI),e(cI,$ho),e(Rs,kho),e(k,Sho),e(k,Ps),e(Ps,hie),e(hie,Rho),e(Ps,Pho),e(Ps,fI),e(fI,Bho),e(Ps,Nho),e(Ps,mI),e(mI,Iho),e(Ps,qho),e(k,jho),e(k,Bs),e(Bs,pie),e(pie,Dho),e(Bs,Gho),e(Bs,gI),e(gI,Oho),e(Bs,Vho),e(Bs,hI),e(hI,Xho),e(Bs,zho),e(k,Qho),e(k,Ns),e(Ns,_ie),e(_ie,Who),e(Ns,Hho),e(Ns,pI),e(pI,Uho),e(Ns,Jho),e(Ns,_I),e(_I,Yho),e(Ns,Kho),e(k,Zho),e(k,Mh),e(Mh,uie),e(uie,epo),e(Mh,opo),e(Mh,uI),e(uI,rpo),e(Mh,tpo),e(k,apo),e(k,Eh),e(Eh,bie),e(bie,npo),e(Eh,spo),e(Eh,bI),e(bI,lpo),e(Eh,ipo),e(k,dpo),e(k,Is),e(Is,vie),e(vie,cpo),e(Is,fpo),e(Is,vI),e(vI,mpo),e(Is,gpo),e(Is,FI),e(FI,hpo),e(Is,ppo),e(k,_po),e(k,qs),e(qs,Fie),e(Fie,upo),e(qs,bpo),e(qs,TI),e(TI,vpo),e(qs,Fpo),e(qs,MI),e(MI,Tpo),e(qs,Mpo),e(k,Epo),e(k,js),e(js,Tie),e(Tie,Cpo),e(js,wpo),e(js,EI),e(EI,Apo),e(js,Lpo),e(js,CI),e(CI,ypo),e(js,xpo),e(k,$po),e(k,Ch),e(Ch,Mie),e(Mie,kpo),e(Ch,Spo),e(Ch,wI),e(wI,Rpo),e(Ch,Ppo),e(k,Bpo),e(k,wh),e(wh,Eie),e(Eie,Npo),e(wh,Ipo),e(wh,AI),e(AI,qpo),e(wh,jpo),e(k,Dpo),e(k,Ah),e(Ah,Cie),e(Cie,Gpo),e(Ah,Opo),e(Ah,LI),e(LI,Vpo),e(Ah,Xpo),e(k,zpo),e(k,Ds),e(Ds,wie),e(wie,Qpo),e(Ds,Wpo),e(Ds,yI),e(yI,Hpo),e(Ds,Upo),e(Ds,xI),e(xI,Jpo),e(Ds,Ypo),e(k,Kpo),e(k,Gs),e(Gs,Aie),e(Aie,Zpo),e(Gs,e_o),e(Gs,$I),e($I,o_o),e(Gs,r_o),e(Gs,kI),e(kI,t_o),e(Gs,a_o),e(k,n_o),e(k,Lh),e(Lh,Lie),e(Lie,s_o),e(Lh,l_o),e(Lh,SI),e(SI,i_o),e(Lh,d_o),e(k,c_o),e(k,yh),e(yh,yie),e(yie,f_o),e(yh,m_o),e(yh,RI),e(RI,g_o),e(yh,h_o),e(k,p_o),e(k,xh),e(xh,xie),e(xie,__o),e(xh,u_o),e(xh,PI),e(PI,b_o),e(xh,v_o),e(k,F_o),e(k,Os),e(Os,$ie),e($ie,T_o),e(Os,M_o),e(Os,BI),e(BI,E_o),e(Os,C_o),e(Os,NI),e(NI,w_o),e(Os,A_o),e(k,L_o),e(k,$h),e($h,kie),e(kie,y_o),e($h,x_o),e($h,II),e(II,$_o),e($h,k_o),e(k,S_o),e(k,kh),e(kh,Sie),e(Sie,R_o),e(kh,P_o),e(kh,qI),e(qI,B_o),e(kh,N_o),e(k,I_o),e(k,Vs),e(Vs,Rie),e(Rie,q_o),e(Vs,j_o),e(Vs,jI),e(jI,D_o),e(Vs,G_o),e(Vs,DI),e(DI,O_o),e(Vs,V_o),e(k,X_o),e(k,Xs),e(Xs,Pie),e(Pie,z_o),e(Xs,Q_o),e(Xs,GI),e(GI,W_o),e(Xs,H_o),e(Xs,OI),e(OI,U_o),e(Xs,J_o),e(k,Y_o),e(k,zs),e(zs,Bie),e(Bie,K_o),e(zs,Z_o),e(zs,VI),e(VI,euo),e(zs,ouo),e(zs,XI),e(XI,ruo),e(zs,tuo),e(k,auo),e(k,Qs),e(Qs,Nie),e(Nie,nuo),e(Qs,suo),e(Qs,zI),e(zI,luo),e(Qs,iuo),e(Qs,QI),e(QI,duo),e(Qs,cuo),e(yr,fuo),M(Sh,yr,null),e(Ao,muo),e(Ao,Rh),M(uy,Rh,null),e(Rh,guo),e(Rh,Iie),e(Iie,huo),b(f,nXe,u),b(f,Ii,u),e(Ii,Ph),e(Ph,qie),M(by,qie,null),e(Ii,puo),e(Ii,jie),e(jie,_uo),b(f,sXe,u),b(f,Lo,u),M(vy,Lo,null),e(Lo,uuo),e(Lo,Fy),e(Fy,buo),e(Fy,WI),e(WI,vuo),e(Fy,Fuo),e(Lo,Tuo),e(Lo,Ty),e(Ty,Muo),e(Ty,Die),e(Die,Euo),e(Ty,Cuo),e(Lo,wuo),e(Lo,He),M(My,He,null),e(He,Auo),e(He,Gie),e(Gie,Luo),e(He,yuo),e(He,Ba),e(Ba,xuo),e(Ba,Oie),e(Oie,$uo),e(Ba,kuo),e(Ba,Vie),e(Vie,Suo),e(Ba,Ruo),e(Ba,Xie),e(Xie,Puo),e(Ba,Buo),e(He,Nuo),e(He,Y),e(Y,Bh),e(Bh,zie),e(zie,Iuo),e(Bh,quo),e(Bh,HI),e(HI,juo),e(Bh,Duo),e(Y,Guo),e(Y,Nh),e(Nh,Qie),e(Qie,Ouo),e(Nh,Vuo),e(Nh,UI),e(UI,Xuo),e(Nh,zuo),e(Y,Quo),e(Y,Ih),e(Ih,Wie),e(Wie,Wuo),e(Ih,Huo),e(Ih,JI),e(JI,Uuo),e(Ih,Juo),e(Y,Yuo),e(Y,qh),e(qh,Hie),e(Hie,Kuo),e(qh,Zuo),e(qh,YI),e(YI,e1o),e(qh,o1o),e(Y,r1o),e(Y,jh),e(jh,Uie),e(Uie,t1o),e(jh,a1o),e(jh,KI),e(KI,n1o),e(jh,s1o),e(Y,l1o),e(Y,Dh),e(Dh,Jie),e(Jie,i1o),e(Dh,d1o),e(Dh,ZI),e(ZI,c1o),e(Dh,f1o),e(Y,m1o),e(Y,Gh),e(Gh,Yie),e(Yie,g1o),e(Gh,h1o),e(Gh,eq),e(eq,p1o),e(Gh,_1o),e(Y,u1o),e(Y,Oh),e(Oh,Kie),e(Kie,b1o),e(Oh,v1o),e(Oh,oq),e(oq,F1o),e(Oh,T1o),e(Y,M1o),e(Y,Vh),e(Vh,Zie),e(Zie,E1o),e(Vh,C1o),e(Vh,rq),e(rq,w1o),e(Vh,A1o),e(Y,L1o),e(Y,Xh),e(Xh,ede),e(ede,y1o),e(Xh,x1o),e(Xh,tq),e(tq,$1o),e(Xh,k1o),e(Y,S1o),e(Y,zh),e(zh,ode),e(ode,R1o),e(zh,P1o),e(zh,aq),e(aq,B1o),e(zh,N1o),e(Y,I1o),e(Y,Qh),e(Qh,rde),e(rde,q1o),e(Qh,j1o),e(Qh,nq),e(nq,D1o),e(Qh,G1o),e(Y,O1o),e(Y,Wh),e(Wh,tde),e(tde,V1o),e(Wh,X1o),e(Wh,sq),e(sq,z1o),e(Wh,Q1o),e(Y,W1o),e(Y,Hh),e(Hh,ade),e(ade,H1o),e(Hh,U1o),e(Hh,lq),e(lq,J1o),e(Hh,Y1o),e(Y,K1o),e(Y,Uh),e(Uh,nde),e(nde,Z1o),e(Uh,e4o),e(Uh,iq),e(iq,o4o),e(Uh,r4o),e(Y,t4o),e(Y,Jh),e(Jh,sde),e(sde,a4o),e(Jh,n4o),e(Jh,dq),e(dq,s4o),e(Jh,l4o),e(Y,i4o),e(Y,Yh),e(Yh,lde),e(lde,d4o),e(Yh,c4o),e(Yh,cq),e(cq,f4o),e(Yh,m4o),e(Y,g4o),e(Y,Kh),e(Kh,ide),e(ide,h4o),e(Kh,p4o),e(Kh,fq),e(fq,_4o),e(Kh,u4o),e(Y,b4o),e(Y,Zh),e(Zh,dde),e(dde,v4o),e(Zh,F4o),e(Zh,mq),e(mq,T4o),e(Zh,M4o),e(Y,E4o),e(Y,ep),e(ep,cde),e(cde,C4o),e(ep,w4o),e(ep,gq),e(gq,A4o),e(ep,L4o),e(Y,y4o),e(Y,op),e(op,fde),e(fde,x4o),e(op,$4o),e(op,hq),e(hq,k4o),e(op,S4o),e(Y,R4o),e(Y,rp),e(rp,mde),e(mde,P4o),e(rp,B4o),e(rp,pq),e(pq,N4o),e(rp,I4o),e(Y,q4o),e(Y,tp),e(tp,gde),e(gde,j4o),e(tp,D4o),e(tp,_q),e(_q,G4o),e(tp,O4o),e(Y,V4o),e(Y,ap),e(ap,hde),e(hde,X4o),e(ap,z4o),e(ap,uq),e(uq,Q4o),e(ap,W4o),e(Y,H4o),e(Y,np),e(np,pde),e(pde,U4o),e(np,J4o),e(np,bq),e(bq,Y4o),e(np,K4o),e(Y,Z4o),e(Y,sp),e(sp,_de),e(_de,e2o),e(sp,o2o),e(sp,vq),e(vq,r2o),e(sp,t2o),e(Y,a2o),e(Y,lp),e(lp,ude),e(ude,n2o),e(lp,s2o),e(lp,Fq),e(Fq,l2o),e(lp,i2o),e(Y,d2o),e(Y,ip),e(ip,bde),e(bde,c2o),e(ip,f2o),e(ip,Tq),e(Tq,m2o),e(ip,g2o),e(Y,h2o),e(Y,dp),e(dp,vde),e(vde,p2o),e(dp,_2o),e(dp,Mq),e(Mq,u2o),e(dp,b2o),e(Y,v2o),e(Y,cp),e(cp,Fde),e(Fde,F2o),e(cp,T2o),e(cp,Eq),e(Eq,M2o),e(cp,E2o),e(Y,C2o),e(Y,fp),e(fp,Tde),e(Tde,w2o),e(fp,A2o),e(fp,Cq),e(Cq,L2o),e(fp,y2o),e(Y,x2o),e(Y,mp),e(mp,Mde),e(Mde,$2o),e(mp,k2o),e(mp,wq),e(wq,S2o),e(mp,R2o),e(Y,P2o),e(Y,gp),e(gp,Ede),e(Ede,B2o),e(gp,N2o),e(gp,Aq),e(Aq,I2o),e(gp,q2o),e(Y,j2o),e(Y,hp),e(hp,Cde),e(Cde,D2o),e(hp,G2o),e(hp,Lq),e(Lq,O2o),e(hp,V2o),e(He,X2o),M(pp,He,null),e(He,z2o),M(_p,He,null),e(Lo,Q2o),e(Lo,up),M(Ey,up,null),e(up,W2o),e(up,wde),e(wde,H2o),b(f,lXe,u),b(f,qi,u),e(qi,bp),e(bp,Ade),M(Cy,Ade,null),e(qi,U2o),e(qi,Lde),e(Lde,J2o),b(f,iXe,u),b(f,yo,u),M(wy,yo,null),e(yo,Y2o),e(yo,Ay),e(Ay,K2o),e(Ay,yq),e(yq,Z2o),e(Ay,ebo),e(yo,obo),e(yo,Ly),e(Ly,rbo),e(Ly,yde),e(yde,tbo),e(Ly,abo),e(yo,nbo),e(yo,Ue),M(yy,Ue,null),e(Ue,sbo),e(Ue,xde),e(xde,lbo),e(Ue,ibo),e(Ue,ji),e(ji,dbo),e(ji,$de),e($de,cbo),e(ji,fbo),e(ji,kde),e(kde,mbo),e(ji,gbo),e(Ue,hbo),e(Ue,he),e(he,vp),e(vp,Sde),e(Sde,pbo),e(vp,_bo),e(vp,xq),e(xq,ubo),e(vp,bbo),e(he,vbo),e(he,Fp),e(Fp,Rde),e(Rde,Fbo),e(Fp,Tbo),e(Fp,Pde),e(Pde,Mbo),e(Fp,Ebo),e(he,Cbo),e(he,Tp),e(Tp,Bde),e(Bde,wbo),e(Tp,Abo),e(Tp,$q),e($q,Lbo),e(Tp,ybo),e(he,xbo),e(he,Mp),e(Mp,Nde),e(Nde,$bo),e(Mp,kbo),e(Mp,kq),e(kq,Sbo),e(Mp,Rbo),e(he,Pbo),e(he,Ep),e(Ep,Ide),e(Ide,Bbo),e(Ep,Nbo),e(Ep,Sq),e(Sq,Ibo),e(Ep,qbo),e(he,jbo),e(he,Cp),e(Cp,qde),e(qde,Dbo),e(Cp,Gbo),e(Cp,Rq),e(Rq,Obo),e(Cp,Vbo),e(he,Xbo),e(he,wp),e(wp,jde),e(jde,zbo),e(wp,Qbo),e(wp,Pq),e(Pq,Wbo),e(wp,Hbo),e(he,Ubo),e(he,Ap),e(Ap,Dde),e(Dde,Jbo),e(Ap,Ybo),e(Ap,Bq),e(Bq,Kbo),e(Ap,Zbo),e(he,evo),e(he,Lp),e(Lp,Gde),e(Gde,ovo),e(Lp,rvo),e(Lp,Nq),e(Nq,tvo),e(Lp,avo),e(he,nvo),e(he,yp),e(yp,Ode),e(Ode,svo),e(yp,lvo),e(yp,Iq),e(Iq,ivo),e(yp,dvo),e(he,cvo),e(he,xp),e(xp,Vde),e(Vde,fvo),e(xp,mvo),e(xp,qq),e(qq,gvo),e(xp,hvo),e(he,pvo),e(he,$p),e($p,Xde),e(Xde,_vo),e($p,uvo),e($p,jq),e(jq,bvo),e($p,vvo),e(he,Fvo),e(he,kp),e(kp,zde),e(zde,Tvo),e(kp,Mvo),e(kp,Dq),e(Dq,Evo),e(kp,Cvo),e(he,wvo),e(he,Sp),e(Sp,Qde),e(Qde,Avo),e(Sp,Lvo),e(Sp,Gq),e(Gq,yvo),e(Sp,xvo),e(he,$vo),e(he,Rp),e(Rp,Wde),e(Wde,kvo),e(Rp,Svo),e(Rp,Oq),e(Oq,Rvo),e(Rp,Pvo),e(he,Bvo),e(he,Pp),e(Pp,Hde),e(Hde,Nvo),e(Pp,Ivo),e(Pp,Vq),e(Vq,qvo),e(Pp,jvo),e(he,Dvo),e(he,Bp),e(Bp,Ude),e(Ude,Gvo),e(Bp,Ovo),e(Bp,Xq),e(Xq,Vvo),e(Bp,Xvo),e(he,zvo),e(he,Np),e(Np,Jde),e(Jde,Qvo),e(Np,Wvo),e(Np,zq),e(zq,Hvo),e(Np,Uvo),e(Ue,Jvo),M(Ip,Ue,null),e(Ue,Yvo),M(qp,Ue,null),e(yo,Kvo),e(yo,jp),M(xy,jp,null),e(jp,Zvo),e(jp,Yde),e(Yde,e3o),b(f,dXe,u),b(f,Di,u),e(Di,Dp),e(Dp,Kde),M($y,Kde,null),e(Di,o3o),e(Di,Zde),e(Zde,r3o),b(f,cXe,u),b(f,xo,u),M(ky,xo,null),e(xo,t3o),e(xo,Gi),e(Gi,a3o),e(Gi,Qq),e(Qq,n3o),e(Gi,s3o),e(Gi,Wq),e(Wq,l3o),e(Gi,i3o),e(xo,d3o),e(xo,Sy),e(Sy,c3o),e(Sy,ece),e(ece,f3o),e(Sy,m3o),e(xo,g3o),e(xo,lt),M(Ry,lt,null),e(lt,h3o),e(lt,oce),e(oce,p3o),e(lt,_3o),e(lt,Oi),e(Oi,u3o),e(Oi,rce),e(rce,b3o),e(Oi,v3o),e(Oi,Hq),e(Hq,F3o),e(Oi,T3o),e(lt,M3o),M(Gp,lt,null),e(xo,E3o),e(xo,Je),M(Py,Je,null),e(Je,C3o),e(Je,tce),e(tce,w3o),e(Je,A3o),e(Je,Na),e(Na,L3o),e(Na,ace),e(ace,y3o),e(Na,x3o),e(Na,nce),e(nce,$3o),e(Na,k3o),e(Na,sce),e(sce,S3o),e(Na,R3o),e(Je,P3o),e(Je,y),e(y,Op),e(Op,lce),e(lce,B3o),e(Op,N3o),e(Op,Uq),e(Uq,I3o),e(Op,q3o),e(y,j3o),e(y,Vp),e(Vp,ice),e(ice,D3o),e(Vp,G3o),e(Vp,Jq),e(Jq,O3o),e(Vp,V3o),e(y,X3o),e(y,Xp),e(Xp,dce),e(dce,z3o),e(Xp,Q3o),e(Xp,Yq),e(Yq,W3o),e(Xp,H3o),e(y,U3o),e(y,zp),e(zp,cce),e(cce,J3o),e(zp,Y3o),e(zp,Kq),e(Kq,K3o),e(zp,Z3o),e(y,e5o),e(y,Qp),e(Qp,fce),e(fce,o5o),e(Qp,r5o),e(Qp,Zq),e(Zq,t5o),e(Qp,a5o),e(y,n5o),e(y,Wp),e(Wp,mce),e(mce,s5o),e(Wp,l5o),e(Wp,ej),e(ej,i5o),e(Wp,d5o),e(y,c5o),e(y,Hp),e(Hp,gce),e(gce,f5o),e(Hp,m5o),e(Hp,oj),e(oj,g5o),e(Hp,h5o),e(y,p5o),e(y,Up),e(Up,hce),e(hce,_5o),e(Up,u5o),e(Up,rj),e(rj,b5o),e(Up,v5o),e(y,F5o),e(y,Jp),e(Jp,pce),e(pce,T5o),e(Jp,M5o),e(Jp,tj),e(tj,E5o),e(Jp,C5o),e(y,w5o),e(y,Yp),e(Yp,_ce),e(_ce,A5o),e(Yp,L5o),e(Yp,aj),e(aj,y5o),e(Yp,x5o),e(y,$5o),e(y,Kp),e(Kp,uce),e(uce,k5o),e(Kp,S5o),e(Kp,nj),e(nj,R5o),e(Kp,P5o),e(y,B5o),e(y,Zp),e(Zp,bce),e(bce,N5o),e(Zp,I5o),e(Zp,sj),e(sj,q5o),e(Zp,j5o),e(y,D5o),e(y,e_),e(e_,vce),e(vce,G5o),e(e_,O5o),e(e_,lj),e(lj,V5o),e(e_,X5o),e(y,z5o),e(y,o_),e(o_,Fce),e(Fce,Q5o),e(o_,W5o),e(o_,ij),e(ij,H5o),e(o_,U5o),e(y,J5o),e(y,r_),e(r_,Tce),e(Tce,Y5o),e(r_,K5o),e(r_,dj),e(dj,Z5o),e(r_,eFo),e(y,oFo),e(y,t_),e(t_,Mce),e(Mce,rFo),e(t_,tFo),e(t_,cj),e(cj,aFo),e(t_,nFo),e(y,sFo),e(y,a_),e(a_,Ece),e(Ece,lFo),e(a_,iFo),e(a_,fj),e(fj,dFo),e(a_,cFo),e(y,fFo),e(y,n_),e(n_,Cce),e(Cce,mFo),e(n_,gFo),e(n_,mj),e(mj,hFo),e(n_,pFo),e(y,_Fo),e(y,s_),e(s_,wce),e(wce,uFo),e(s_,bFo),e(s_,gj),e(gj,vFo),e(s_,FFo),e(y,TFo),e(y,l_),e(l_,Ace),e(Ace,MFo),e(l_,EFo),e(l_,hj),e(hj,CFo),e(l_,wFo),e(y,AFo),e(y,i_),e(i_,Lce),e(Lce,LFo),e(i_,yFo),e(i_,pj),e(pj,xFo),e(i_,$Fo),e(y,kFo),e(y,d_),e(d_,yce),e(yce,SFo),e(d_,RFo),e(d_,_j),e(_j,PFo),e(d_,BFo),e(y,NFo),e(y,c_),e(c_,xce),e(xce,IFo),e(c_,qFo),e(c_,uj),e(uj,jFo),e(c_,DFo),e(y,GFo),e(y,f_),e(f_,$ce),e($ce,OFo),e(f_,VFo),e(f_,bj),e(bj,XFo),e(f_,zFo),e(y,QFo),e(y,m_),e(m_,kce),e(kce,WFo),e(m_,HFo),e(m_,vj),e(vj,UFo),e(m_,JFo),e(y,YFo),e(y,g_),e(g_,Sce),e(Sce,KFo),e(g_,ZFo),e(g_,Fj),e(Fj,e6o),e(g_,o6o),e(y,r6o),e(y,h_),e(h_,Rce),e(Rce,t6o),e(h_,a6o),e(h_,Tj),e(Tj,n6o),e(h_,s6o),e(y,l6o),e(y,p_),e(p_,Pce),e(Pce,i6o),e(p_,d6o),e(p_,Mj),e(Mj,c6o),e(p_,f6o),e(y,m6o),e(y,__),e(__,Bce),e(Bce,g6o),e(__,h6o),e(__,Ej),e(Ej,p6o),e(__,_6o),e(y,u6o),e(y,u_),e(u_,Nce),e(Nce,b6o),e(u_,v6o),e(u_,Cj),e(Cj,F6o),e(u_,T6o),e(y,M6o),e(y,b_),e(b_,Ice),e(Ice,E6o),e(b_,C6o),e(b_,wj),e(wj,w6o),e(b_,A6o),e(y,L6o),e(y,v_),e(v_,qce),e(qce,y6o),e(v_,x6o),e(v_,Aj),e(Aj,$6o),e(v_,k6o),e(y,S6o),e(y,F_),e(F_,jce),e(jce,R6o),e(F_,P6o),e(F_,Lj),e(Lj,B6o),e(F_,N6o),e(y,I6o),e(y,T_),e(T_,Dce),e(Dce,q6o),e(T_,j6o),e(T_,yj),e(yj,D6o),e(T_,G6o),e(y,O6o),e(y,Ws),e(Ws,Gce),e(Gce,V6o),e(Ws,X6o),e(Ws,xj),e(xj,z6o),e(Ws,Q6o),e(Ws,$j),e($j,W6o),e(Ws,H6o),e(y,U6o),e(y,M_),e(M_,Oce),e(Oce,J6o),e(M_,Y6o),e(M_,kj),e(kj,K6o),e(M_,Z6o),e(y,eTo),e(y,E_),e(E_,Vce),e(Vce,oTo),e(E_,rTo),e(E_,Sj),e(Sj,tTo),e(E_,aTo),e(y,nTo),e(y,C_),e(C_,Xce),e(Xce,sTo),e(C_,lTo),e(C_,Rj),e(Rj,iTo),e(C_,dTo),e(y,cTo),e(y,w_),e(w_,zce),e(zce,fTo),e(w_,mTo),e(w_,Pj),e(Pj,gTo),e(w_,hTo),e(y,pTo),e(y,A_),e(A_,Qce),e(Qce,_To),e(A_,uTo),e(A_,Bj),e(Bj,bTo),e(A_,vTo),e(y,FTo),e(y,L_),e(L_,Wce),e(Wce,TTo),e(L_,MTo),e(L_,Nj),e(Nj,ETo),e(L_,CTo),e(y,wTo),e(y,y_),e(y_,Hce),e(Hce,ATo),e(y_,LTo),e(y_,Ij),e(Ij,yTo),e(y_,xTo),e(y,$To),e(y,x_),e(x_,Uce),e(Uce,kTo),e(x_,STo),e(x_,qj),e(qj,RTo),e(x_,PTo),e(y,BTo),e(y,$_),e($_,Jce),e(Jce,NTo),e($_,ITo),e($_,jj),e(jj,qTo),e($_,jTo),e(y,DTo),e(y,k_),e(k_,Yce),e(Yce,GTo),e(k_,OTo),e(k_,Dj),e(Dj,VTo),e(k_,XTo),e(y,zTo),e(y,S_),e(S_,Kce),e(Kce,QTo),e(S_,WTo),e(S_,Gj),e(Gj,HTo),e(S_,UTo),e(y,JTo),e(y,R_),e(R_,Zce),e(Zce,YTo),e(R_,KTo),e(R_,Oj),e(Oj,ZTo),e(R_,eMo),e(y,oMo),e(y,P_),e(P_,efe),e(efe,rMo),e(P_,tMo),e(P_,Vj),e(Vj,aMo),e(P_,nMo),e(y,sMo),e(y,B_),e(B_,ofe),e(ofe,lMo),e(B_,iMo),e(B_,Xj),e(Xj,dMo),e(B_,cMo),e(y,fMo),e(y,N_),e(N_,rfe),e(rfe,mMo),e(N_,gMo),e(N_,zj),e(zj,hMo),e(N_,pMo),e(y,_Mo),e(y,I_),e(I_,tfe),e(tfe,uMo),e(I_,bMo),e(I_,Qj),e(Qj,vMo),e(I_,FMo),e(y,TMo),e(y,q_),e(q_,afe),e(afe,MMo),e(q_,EMo),e(q_,Wj),e(Wj,CMo),e(q_,wMo),e(y,AMo),e(y,j_),e(j_,nfe),e(nfe,LMo),e(j_,yMo),e(j_,Hj),e(Hj,xMo),e(j_,$Mo),e(y,kMo),e(y,D_),e(D_,sfe),e(sfe,SMo),e(D_,RMo),e(D_,Uj),e(Uj,PMo),e(D_,BMo),e(y,NMo),e(y,G_),e(G_,lfe),e(lfe,IMo),e(G_,qMo),e(G_,Jj),e(Jj,jMo),e(G_,DMo),e(y,GMo),e(y,O_),e(O_,ife),e(ife,OMo),e(O_,VMo),e(O_,Yj),e(Yj,XMo),e(O_,zMo),e(y,QMo),e(y,V_),e(V_,dfe),e(dfe,WMo),e(V_,HMo),e(V_,Kj),e(Kj,UMo),e(V_,JMo),e(y,YMo),e(y,X_),e(X_,cfe),e(cfe,KMo),e(X_,ZMo),e(X_,Zj),e(Zj,eEo),e(X_,oEo),e(y,rEo),e(y,z_),e(z_,ffe),e(ffe,tEo),e(z_,aEo),e(z_,eD),e(eD,nEo),e(z_,sEo),e(y,lEo),e(y,Q_),e(Q_,mfe),e(mfe,iEo),e(Q_,dEo),e(Q_,oD),e(oD,cEo),e(Q_,fEo),e(y,mEo),e(y,W_),e(W_,gfe),e(gfe,gEo),e(W_,hEo),e(W_,rD),e(rD,pEo),e(W_,_Eo),e(y,uEo),e(y,H_),e(H_,hfe),e(hfe,bEo),e(H_,vEo),e(H_,tD),e(tD,FEo),e(H_,TEo),e(y,MEo),e(y,U_),e(U_,pfe),e(pfe,EEo),e(U_,CEo),e(U_,aD),e(aD,wEo),e(U_,AEo),e(y,LEo),e(y,J_),e(J_,_fe),e(_fe,yEo),e(J_,xEo),e(J_,nD),e(nD,$Eo),e(J_,kEo),e(y,SEo),e(y,Y_),e(Y_,ufe),e(ufe,REo),e(Y_,PEo),e(Y_,sD),e(sD,BEo),e(Y_,NEo),e(y,IEo),e(y,K_),e(K_,bfe),e(bfe,qEo),e(K_,jEo),e(K_,lD),e(lD,DEo),e(K_,GEo),e(y,OEo),e(y,Z_),e(Z_,vfe),e(vfe,VEo),e(Z_,XEo),e(Z_,iD),e(iD,zEo),e(Z_,QEo),e(y,WEo),e(y,eu),e(eu,Ffe),e(Ffe,HEo),e(eu,UEo),e(eu,dD),e(dD,JEo),e(eu,YEo),e(y,KEo),e(y,ou),e(ou,Tfe),e(Tfe,ZEo),e(ou,eCo),e(ou,cD),e(cD,oCo),e(ou,rCo),e(y,tCo),e(y,ru),e(ru,Mfe),e(Mfe,aCo),e(ru,nCo),e(ru,fD),e(fD,sCo),e(ru,lCo),e(y,iCo),e(y,tu),e(tu,Efe),e(Efe,dCo),e(tu,cCo),e(tu,mD),e(mD,fCo),e(tu,mCo),e(y,gCo),e(y,au),e(au,Cfe),e(Cfe,hCo),e(au,pCo),e(au,gD),e(gD,_Co),e(au,uCo),e(y,bCo),e(y,nu),e(nu,wfe),e(wfe,vCo),e(nu,FCo),e(nu,hD),e(hD,TCo),e(nu,MCo),e(y,ECo),e(y,su),e(su,Afe),e(Afe,CCo),e(su,wCo),e(su,pD),e(pD,ACo),e(su,LCo),e(y,yCo),e(y,lu),e(lu,Lfe),e(Lfe,xCo),e(lu,$Co),e(lu,_D),e(_D,kCo),e(lu,SCo),e(y,RCo),e(y,iu),e(iu,yfe),e(yfe,PCo),e(iu,BCo),e(iu,uD),e(uD,NCo),e(iu,ICo),e(y,qCo),e(y,du),e(du,xfe),e(xfe,jCo),e(du,DCo),e(du,bD),e(bD,GCo),e(du,OCo),e(y,VCo),e(y,cu),e(cu,$fe),e($fe,XCo),e(cu,zCo),e(cu,vD),e(vD,QCo),e(cu,WCo),e(y,HCo),e(y,fu),e(fu,kfe),e(kfe,UCo),e(fu,JCo),e(fu,FD),e(FD,YCo),e(fu,KCo),e(y,ZCo),e(y,mu),e(mu,Sfe),e(Sfe,e0o),e(mu,o0o),e(mu,TD),e(TD,r0o),e(mu,t0o),e(y,a0o),e(y,gu),e(gu,Rfe),e(Rfe,n0o),e(gu,s0o),e(gu,MD),e(MD,l0o),e(gu,i0o),e(y,d0o),e(y,hu),e(hu,Pfe),e(Pfe,c0o),e(hu,f0o),e(hu,ED),e(ED,m0o),e(hu,g0o),e(y,h0o),e(y,pu),e(pu,Bfe),e(Bfe,p0o),e(pu,_0o),e(pu,CD),e(CD,u0o),e(pu,b0o),e(y,v0o),e(y,_u),e(_u,Nfe),e(Nfe,F0o),e(_u,T0o),e(_u,wD),e(wD,M0o),e(_u,E0o),e(y,C0o),e(y,uu),e(uu,Ife),e(Ife,w0o),e(uu,A0o),e(uu,AD),e(AD,L0o),e(uu,y0o),e(y,x0o),e(y,bu),e(bu,qfe),e(qfe,$0o),e(bu,k0o),e(bu,LD),e(LD,S0o),e(bu,R0o),e(y,P0o),e(y,vu),e(vu,jfe),e(jfe,B0o),e(vu,N0o),e(vu,yD),e(yD,I0o),e(vu,q0o),e(y,j0o),e(y,Fu),e(Fu,Dfe),e(Dfe,D0o),e(Fu,G0o),e(Fu,xD),e(xD,O0o),e(Fu,V0o),e(y,X0o),e(y,Tu),e(Tu,Gfe),e(Gfe,z0o),e(Tu,Q0o),e(Tu,$D),e($D,W0o),e(Tu,H0o),e(y,U0o),e(y,Mu),e(Mu,Ofe),e(Ofe,J0o),e(Mu,Y0o),e(Mu,kD),e(kD,K0o),e(Mu,Z0o),e(y,ewo),e(y,Eu),e(Eu,Vfe),e(Vfe,owo),e(Eu,rwo),e(Eu,SD),e(SD,two),e(Eu,awo),e(y,nwo),e(y,Cu),e(Cu,Xfe),e(Xfe,swo),e(Cu,lwo),e(Cu,RD),e(RD,iwo),e(Cu,dwo),e(y,cwo),e(y,wu),e(wu,zfe),e(zfe,fwo),e(wu,mwo),e(wu,PD),e(PD,gwo),e(wu,hwo),e(y,pwo),e(y,Au),e(Au,Qfe),e(Qfe,_wo),e(Au,uwo),e(Au,BD),e(BD,bwo),e(Au,vwo),e(y,Fwo),e(y,Lu),e(Lu,Wfe),e(Wfe,Two),e(Lu,Mwo),e(Lu,ND),e(ND,Ewo),e(Lu,Cwo),e(y,wwo),e(y,yu),e(yu,Hfe),e(Hfe,Awo),e(yu,Lwo),e(yu,ID),e(ID,ywo),e(yu,xwo),e(y,$wo),e(y,xu),e(xu,Ufe),e(Ufe,kwo),e(xu,Swo),e(xu,qD),e(qD,Rwo),e(xu,Pwo),e(y,Bwo),e(y,$u),e($u,Jfe),e(Jfe,Nwo),e($u,Iwo),e($u,jD),e(jD,qwo),e($u,jwo),e(y,Dwo),e(y,ku),e(ku,Yfe),e(Yfe,Gwo),e(ku,Owo),e(ku,DD),e(DD,Vwo),e(ku,Xwo),e(y,zwo),e(y,Su),e(Su,Kfe),e(Kfe,Qwo),e(Su,Wwo),e(Su,GD),e(GD,Hwo),e(Su,Uwo),e(y,Jwo),e(y,Ru),e(Ru,Zfe),e(Zfe,Ywo),e(Ru,Kwo),e(Ru,OD),e(OD,Zwo),e(Ru,eAo),e(y,oAo),e(y,Pu),e(Pu,eme),e(eme,rAo),e(Pu,tAo),e(Pu,VD),e(VD,aAo),e(Pu,nAo),e(y,sAo),e(y,Bu),e(Bu,ome),e(ome,lAo),e(Bu,iAo),e(Bu,XD),e(XD,dAo),e(Bu,cAo),e(y,fAo),e(y,Nu),e(Nu,rme),e(rme,mAo),e(Nu,gAo),e(Nu,zD),e(zD,hAo),e(Nu,pAo),e(y,_Ao),e(y,Iu),e(Iu,tme),e(tme,uAo),e(Iu,bAo),e(Iu,QD),e(QD,vAo),e(Iu,FAo),e(y,TAo),e(y,qu),e(qu,ame),e(ame,MAo),e(qu,EAo),e(qu,WD),e(WD,CAo),e(qu,wAo),e(y,AAo),e(y,ju),e(ju,nme),e(nme,LAo),e(ju,yAo),e(ju,HD),e(HD,xAo),e(ju,$Ao),e(y,kAo),e(y,Du),e(Du,sme),e(sme,SAo),e(Du,RAo),e(Du,UD),e(UD,PAo),e(Du,BAo),e(y,NAo),e(y,Gu),e(Gu,lme),e(lme,IAo),e(Gu,qAo),e(Gu,JD),e(JD,jAo),e(Gu,DAo),e(y,GAo),e(y,Ou),e(Ou,ime),e(ime,OAo),e(Ou,VAo),e(Ou,YD),e(YD,XAo),e(Ou,zAo),e(y,QAo),e(y,Vu),e(Vu,dme),e(dme,WAo),e(Vu,HAo),e(Vu,KD),e(KD,UAo),e(Vu,JAo),e(Je,YAo),e(Je,Xu),e(Xu,KAo),e(Xu,cme),e(cme,ZAo),e(Xu,e7o),e(Xu,fme),e(fme,o7o),e(Je,r7o),M(zu,Je,null),b(f,fXe,u),b(f,Vi,u),e(Vi,Qu),e(Qu,mme),M(By,mme,null),e(Vi,t7o),e(Vi,gme),e(gme,a7o),b(f,mXe,u),b(f,$o,u),M(Ny,$o,null),e($o,n7o),e($o,Xi),e(Xi,s7o),e(Xi,ZD),e(ZD,l7o),e(Xi,i7o),e(Xi,eG),e(eG,d7o),e(Xi,c7o),e($o,f7o),e($o,Iy),e(Iy,m7o),e(Iy,hme),e(hme,g7o),e(Iy,h7o),e($o,p7o),e($o,it),M(qy,it,null),e(it,_7o),e(it,pme),e(pme,u7o),e(it,b7o),e(it,zi),e(zi,v7o),e(zi,_me),e(_me,F7o),e(zi,T7o),e(zi,oG),e(oG,M7o),e(zi,E7o),e(it,C7o),M(Wu,it,null),e($o,w7o),e($o,Ye),M(jy,Ye,null),e(Ye,A7o),e(Ye,ume),e(ume,L7o),e(Ye,y7o),e(Ye,Ia),e(Ia,x7o),e(Ia,bme),e(bme,$7o),e(Ia,k7o),e(Ia,vme),e(vme,S7o),e(Ia,R7o),e(Ia,Fme),e(Fme,P7o),e(Ia,B7o),e(Ye,N7o),e(Ye,G),e(G,Hu),e(Hu,Tme),e(Tme,I7o),e(Hu,q7o),e(Hu,rG),e(rG,j7o),e(Hu,D7o),e(G,G7o),e(G,Uu),e(Uu,Mme),e(Mme,O7o),e(Uu,V7o),e(Uu,tG),e(tG,X7o),e(Uu,z7o),e(G,Q7o),e(G,Ju),e(Ju,Eme),e(Eme,W7o),e(Ju,H7o),e(Ju,aG),e(aG,U7o),e(Ju,J7o),e(G,Y7o),e(G,Yu),e(Yu,Cme),e(Cme,K7o),e(Yu,Z7o),e(Yu,nG),e(nG,eLo),e(Yu,oLo),e(G,rLo),e(G,Ku),e(Ku,wme),e(wme,tLo),e(Ku,aLo),e(Ku,sG),e(sG,nLo),e(Ku,sLo),e(G,lLo),e(G,Zu),e(Zu,Ame),e(Ame,iLo),e(Zu,dLo),e(Zu,lG),e(lG,cLo),e(Zu,fLo),e(G,mLo),e(G,e1),e(e1,Lme),e(Lme,gLo),e(e1,hLo),e(e1,iG),e(iG,pLo),e(e1,_Lo),e(G,uLo),e(G,o1),e(o1,yme),e(yme,bLo),e(o1,vLo),e(o1,dG),e(dG,FLo),e(o1,TLo),e(G,MLo),e(G,r1),e(r1,xme),e(xme,ELo),e(r1,CLo),e(r1,cG),e(cG,wLo),e(r1,ALo),e(G,LLo),e(G,t1),e(t1,$me),e($me,yLo),e(t1,xLo),e(t1,fG),e(fG,$Lo),e(t1,kLo),e(G,SLo),e(G,a1),e(a1,kme),e(kme,RLo),e(a1,PLo),e(a1,mG),e(mG,BLo),e(a1,NLo),e(G,ILo),e(G,n1),e(n1,Sme),e(Sme,qLo),e(n1,jLo),e(n1,gG),e(gG,DLo),e(n1,GLo),e(G,OLo),e(G,s1),e(s1,Rme),e(Rme,VLo),e(s1,XLo),e(s1,hG),e(hG,zLo),e(s1,QLo),e(G,WLo),e(G,l1),e(l1,Pme),e(Pme,HLo),e(l1,ULo),e(l1,pG),e(pG,JLo),e(l1,YLo),e(G,KLo),e(G,i1),e(i1,Bme),e(Bme,ZLo),e(i1,eyo),e(i1,_G),e(_G,oyo),e(i1,ryo),e(G,tyo),e(G,d1),e(d1,Nme),e(Nme,ayo),e(d1,nyo),e(d1,uG),e(uG,syo),e(d1,lyo),e(G,iyo),e(G,c1),e(c1,Ime),e(Ime,dyo),e(c1,cyo),e(c1,bG),e(bG,fyo),e(c1,myo),e(G,gyo),e(G,f1),e(f1,qme),e(qme,hyo),e(f1,pyo),e(f1,vG),e(vG,_yo),e(f1,uyo),e(G,byo),e(G,m1),e(m1,jme),e(jme,vyo),e(m1,Fyo),e(m1,FG),e(FG,Tyo),e(m1,Myo),e(G,Eyo),e(G,g1),e(g1,Dme),e(Dme,Cyo),e(g1,wyo),e(g1,TG),e(TG,Ayo),e(g1,Lyo),e(G,yyo),e(G,h1),e(h1,Gme),e(Gme,xyo),e(h1,$yo),e(h1,MG),e(MG,kyo),e(h1,Syo),e(G,Ryo),e(G,p1),e(p1,Ome),e(Ome,Pyo),e(p1,Byo),e(p1,EG),e(EG,Nyo),e(p1,Iyo),e(G,qyo),e(G,_1),e(_1,Vme),e(Vme,jyo),e(_1,Dyo),e(_1,CG),e(CG,Gyo),e(_1,Oyo),e(G,Vyo),e(G,u1),e(u1,Xme),e(Xme,Xyo),e(u1,zyo),e(u1,wG),e(wG,Qyo),e(u1,Wyo),e(G,Hyo),e(G,b1),e(b1,zme),e(zme,Uyo),e(b1,Jyo),e(b1,AG),e(AG,Yyo),e(b1,Kyo),e(G,Zyo),e(G,v1),e(v1,Qme),e(Qme,e8o),e(v1,o8o),e(v1,LG),e(LG,r8o),e(v1,t8o),e(G,a8o),e(G,F1),e(F1,Wme),e(Wme,n8o),e(F1,s8o),e(F1,yG),e(yG,l8o),e(F1,i8o),e(G,d8o),e(G,T1),e(T1,Hme),e(Hme,c8o),e(T1,f8o),e(T1,xG),e(xG,m8o),e(T1,g8o),e(G,h8o),e(G,M1),e(M1,Ume),e(Ume,p8o),e(M1,_8o),e(M1,$G),e($G,u8o),e(M1,b8o),e(G,v8o),e(G,E1),e(E1,Jme),e(Jme,F8o),e(E1,T8o),e(E1,kG),e(kG,M8o),e(E1,E8o),e(G,C8o),e(G,C1),e(C1,Yme),e(Yme,w8o),e(C1,A8o),e(C1,SG),e(SG,L8o),e(C1,y8o),e(G,x8o),e(G,w1),e(w1,Kme),e(Kme,$8o),e(w1,k8o),e(w1,RG),e(RG,S8o),e(w1,R8o),e(G,P8o),e(G,A1),e(A1,Zme),e(Zme,B8o),e(A1,N8o),e(A1,PG),e(PG,I8o),e(A1,q8o),e(G,j8o),e(G,L1),e(L1,ege),e(ege,D8o),e(L1,G8o),e(L1,BG),e(BG,O8o),e(L1,V8o),e(G,X8o),e(G,y1),e(y1,oge),e(oge,z8o),e(y1,Q8o),e(y1,NG),e(NG,W8o),e(y1,H8o),e(G,U8o),e(G,x1),e(x1,rge),e(rge,J8o),e(x1,Y8o),e(x1,IG),e(IG,K8o),e(x1,Z8o),e(G,e9o),e(G,$1),e($1,tge),e(tge,o9o),e($1,r9o),e($1,qG),e(qG,t9o),e($1,a9o),e(G,n9o),e(G,k1),e(k1,age),e(age,s9o),e(k1,l9o),e(k1,jG),e(jG,i9o),e(k1,d9o),e(G,c9o),e(G,S1),e(S1,nge),e(nge,f9o),e(S1,m9o),e(S1,DG),e(DG,g9o),e(S1,h9o),e(G,p9o),e(G,R1),e(R1,sge),e(sge,_9o),e(R1,u9o),e(R1,GG),e(GG,b9o),e(R1,v9o),e(G,F9o),e(G,P1),e(P1,lge),e(lge,T9o),e(P1,M9o),e(P1,OG),e(OG,E9o),e(P1,C9o),e(G,w9o),e(G,B1),e(B1,ige),e(ige,A9o),e(B1,L9o),e(B1,VG),e(VG,y9o),e(B1,x9o),e(G,$9o),e(G,N1),e(N1,dge),e(dge,k9o),e(N1,S9o),e(N1,XG),e(XG,R9o),e(N1,P9o),e(G,B9o),e(G,I1),e(I1,cge),e(cge,N9o),e(I1,I9o),e(I1,zG),e(zG,q9o),e(I1,j9o),e(G,D9o),e(G,q1),e(q1,fge),e(fge,G9o),e(q1,O9o),e(q1,QG),e(QG,V9o),e(q1,X9o),e(Ye,z9o),e(Ye,j1),e(j1,Q9o),e(j1,mge),e(mge,W9o),e(j1,H9o),e(j1,gge),e(gge,U9o),e(Ye,J9o),M(D1,Ye,null),b(f,gXe,u),b(f,Qi,u),e(Qi,G1),e(G1,hge),M(Dy,hge,null),e(Qi,Y9o),e(Qi,pge),e(pge,K9o),b(f,hXe,u),b(f,ko,u),M(Gy,ko,null),e(ko,Z9o),e(ko,Wi),e(Wi,exo),e(Wi,WG),e(WG,oxo),e(Wi,rxo),e(Wi,HG),e(HG,txo),e(Wi,axo),e(ko,nxo),e(ko,Oy),e(Oy,sxo),e(Oy,_ge),e(_ge,lxo),e(Oy,ixo),e(ko,dxo),e(ko,dt),M(Vy,dt,null),e(dt,cxo),e(dt,uge),e(uge,fxo),e(dt,mxo),e(dt,Hi),e(Hi,gxo),e(Hi,bge),e(bge,hxo),e(Hi,pxo),e(Hi,UG),e(UG,_xo),e(Hi,uxo),e(dt,bxo),M(O1,dt,null),e(ko,vxo),e(ko,Ke),M(Xy,Ke,null),e(Ke,Fxo),e(Ke,vge),e(vge,Txo),e(Ke,Mxo),e(Ke,qa),e(qa,Exo),e(qa,Fge),e(Fge,Cxo),e(qa,wxo),e(qa,Tge),e(Tge,Axo),e(qa,Lxo),e(qa,Mge),e(Mge,yxo),e(qa,xxo),e(Ke,$xo),e(Ke,z),e(z,V1),e(V1,Ege),e(Ege,kxo),e(V1,Sxo),e(V1,JG),e(JG,Rxo),e(V1,Pxo),e(z,Bxo),e(z,X1),e(X1,Cge),e(Cge,Nxo),e(X1,Ixo),e(X1,YG),e(YG,qxo),e(X1,jxo),e(z,Dxo),e(z,z1),e(z1,wge),e(wge,Gxo),e(z1,Oxo),e(z1,KG),e(KG,Vxo),e(z1,Xxo),e(z,zxo),e(z,Q1),e(Q1,Age),e(Age,Qxo),e(Q1,Wxo),e(Q1,ZG),e(ZG,Hxo),e(Q1,Uxo),e(z,Jxo),e(z,W1),e(W1,Lge),e(Lge,Yxo),e(W1,Kxo),e(W1,eO),e(eO,Zxo),e(W1,e$o),e(z,o$o),e(z,H1),e(H1,yge),e(yge,r$o),e(H1,t$o),e(H1,oO),e(oO,a$o),e(H1,n$o),e(z,s$o),e(z,U1),e(U1,xge),e(xge,l$o),e(U1,i$o),e(U1,rO),e(rO,d$o),e(U1,c$o),e(z,f$o),e(z,J1),e(J1,$ge),e($ge,m$o),e(J1,g$o),e(J1,tO),e(tO,h$o),e(J1,p$o),e(z,_$o),e(z,Y1),e(Y1,kge),e(kge,u$o),e(Y1,b$o),e(Y1,aO),e(aO,v$o),e(Y1,F$o),e(z,T$o),e(z,K1),e(K1,Sge),e(Sge,M$o),e(K1,E$o),e(K1,nO),e(nO,C$o),e(K1,w$o),e(z,A$o),e(z,Z1),e(Z1,Rge),e(Rge,L$o),e(Z1,y$o),e(Z1,sO),e(sO,x$o),e(Z1,$$o),e(z,k$o),e(z,e4),e(e4,Pge),e(Pge,S$o),e(e4,R$o),e(e4,lO),e(lO,P$o),e(e4,B$o),e(z,N$o),e(z,o4),e(o4,Bge),e(Bge,I$o),e(o4,q$o),e(o4,iO),e(iO,j$o),e(o4,D$o),e(z,G$o),e(z,r4),e(r4,Nge),e(Nge,O$o),e(r4,V$o),e(r4,dO),e(dO,X$o),e(r4,z$o),e(z,Q$o),e(z,t4),e(t4,Ige),e(Ige,W$o),e(t4,H$o),e(t4,cO),e(cO,U$o),e(t4,J$o),e(z,Y$o),e(z,a4),e(a4,qge),e(qge,K$o),e(a4,Z$o),e(a4,fO),e(fO,eko),e(a4,oko),e(z,rko),e(z,n4),e(n4,jge),e(jge,tko),e(n4,ako),e(n4,mO),e(mO,nko),e(n4,sko),e(z,lko),e(z,s4),e(s4,Dge),e(Dge,iko),e(s4,dko),e(s4,gO),e(gO,cko),e(s4,fko),e(z,mko),e(z,l4),e(l4,Gge),e(Gge,gko),e(l4,hko),e(l4,hO),e(hO,pko),e(l4,_ko),e(z,uko),e(z,i4),e(i4,Oge),e(Oge,bko),e(i4,vko),e(i4,pO),e(pO,Fko),e(i4,Tko),e(z,Mko),e(z,d4),e(d4,Vge),e(Vge,Eko),e(d4,Cko),e(d4,_O),e(_O,wko),e(d4,Ako),e(z,Lko),e(z,c4),e(c4,Xge),e(Xge,yko),e(c4,xko),e(c4,uO),e(uO,$ko),e(c4,kko),e(z,Sko),e(z,f4),e(f4,zge),e(zge,Rko),e(f4,Pko),e(f4,bO),e(bO,Bko),e(f4,Nko),e(z,Iko),e(z,m4),e(m4,Qge),e(Qge,qko),e(m4,jko),e(m4,vO),e(vO,Dko),e(m4,Gko),e(z,Oko),e(z,g4),e(g4,Wge),e(Wge,Vko),e(g4,Xko),e(g4,FO),e(FO,zko),e(g4,Qko),e(z,Wko),e(z,h4),e(h4,Hge),e(Hge,Hko),e(h4,Uko),e(h4,TO),e(TO,Jko),e(h4,Yko),e(z,Kko),e(z,p4),e(p4,Uge),e(Uge,Zko),e(p4,eSo),e(p4,MO),e(MO,oSo),e(p4,rSo),e(z,tSo),e(z,_4),e(_4,Jge),e(Jge,aSo),e(_4,nSo),e(_4,EO),e(EO,sSo),e(_4,lSo),e(z,iSo),e(z,u4),e(u4,Yge),e(Yge,dSo),e(u4,cSo),e(u4,CO),e(CO,fSo),e(u4,mSo),e(z,gSo),e(z,b4),e(b4,Kge),e(Kge,hSo),e(b4,pSo),e(b4,wO),e(wO,_So),e(b4,uSo),e(z,bSo),e(z,v4),e(v4,Zge),e(Zge,vSo),e(v4,FSo),e(v4,AO),e(AO,TSo),e(v4,MSo),e(z,ESo),e(z,F4),e(F4,ehe),e(ehe,CSo),e(F4,wSo),e(F4,LO),e(LO,ASo),e(F4,LSo),e(z,ySo),e(z,T4),e(T4,ohe),e(ohe,xSo),e(T4,$So),e(T4,yO),e(yO,kSo),e(T4,SSo),e(z,RSo),e(z,M4),e(M4,rhe),e(rhe,PSo),e(M4,BSo),e(M4,xO),e(xO,NSo),e(M4,ISo),e(z,qSo),e(z,E4),e(E4,the),e(the,jSo),e(E4,DSo),e(E4,$O),e($O,GSo),e(E4,OSo),e(z,VSo),e(z,C4),e(C4,ahe),e(ahe,XSo),e(C4,zSo),e(C4,kO),e(kO,QSo),e(C4,WSo),e(z,HSo),e(z,w4),e(w4,nhe),e(nhe,USo),e(w4,JSo),e(w4,SO),e(SO,YSo),e(w4,KSo),e(z,ZSo),e(z,A4),e(A4,she),e(she,eRo),e(A4,oRo),e(A4,RO),e(RO,rRo),e(A4,tRo),e(z,aRo),e(z,L4),e(L4,lhe),e(lhe,nRo),e(L4,sRo),e(L4,PO),e(PO,lRo),e(L4,iRo),e(z,dRo),e(z,y4),e(y4,ihe),e(ihe,cRo),e(y4,fRo),e(y4,BO),e(BO,mRo),e(y4,gRo),e(Ke,hRo),e(Ke,x4),e(x4,pRo),e(x4,dhe),e(dhe,_Ro),e(x4,uRo),e(x4,che),e(che,bRo),e(Ke,vRo),M($4,Ke,null),b(f,pXe,u),b(f,Ui,u),e(Ui,k4),e(k4,fhe),M(zy,fhe,null),e(Ui,FRo),e(Ui,mhe),e(mhe,TRo),b(f,_Xe,u),b(f,So,u),M(Qy,So,null),e(So,MRo),e(So,Ji),e(Ji,ERo),e(Ji,NO),e(NO,CRo),e(Ji,wRo),e(Ji,IO),e(IO,ARo),e(Ji,LRo),e(So,yRo),e(So,Wy),e(Wy,xRo),e(Wy,ghe),e(ghe,$Ro),e(Wy,kRo),e(So,SRo),e(So,ct),M(Hy,ct,null),e(ct,RRo),e(ct,hhe),e(hhe,PRo),e(ct,BRo),e(ct,Yi),e(Yi,NRo),e(Yi,phe),e(phe,IRo),e(Yi,qRo),e(Yi,qO),e(qO,jRo),e(Yi,DRo),e(ct,GRo),M(S4,ct,null),e(So,ORo),e(So,Ze),M(Uy,Ze,null),e(Ze,VRo),e(Ze,_he),e(_he,XRo),e(Ze,zRo),e(Ze,ja),e(ja,QRo),e(ja,uhe),e(uhe,WRo),e(ja,HRo),e(ja,bhe),e(bhe,URo),e(ja,JRo),e(ja,vhe),e(vhe,YRo),e(ja,KRo),e(Ze,ZRo),e(Ze,W),e(W,R4),e(R4,Fhe),e(Fhe,ePo),e(R4,oPo),e(R4,jO),e(jO,rPo),e(R4,tPo),e(W,aPo),e(W,P4),e(P4,The),e(The,nPo),e(P4,sPo),e(P4,DO),e(DO,lPo),e(P4,iPo),e(W,dPo),e(W,B4),e(B4,Mhe),e(Mhe,cPo),e(B4,fPo),e(B4,GO),e(GO,mPo),e(B4,gPo),e(W,hPo),e(W,N4),e(N4,Ehe),e(Ehe,pPo),e(N4,_Po),e(N4,OO),e(OO,uPo),e(N4,bPo),e(W,vPo),e(W,I4),e(I4,Che),e(Che,FPo),e(I4,TPo),e(I4,VO),e(VO,MPo),e(I4,EPo),e(W,CPo),e(W,q4),e(q4,whe),e(whe,wPo),e(q4,APo),e(q4,XO),e(XO,LPo),e(q4,yPo),e(W,xPo),e(W,j4),e(j4,Ahe),e(Ahe,$Po),e(j4,kPo),e(j4,zO),e(zO,SPo),e(j4,RPo),e(W,PPo),e(W,D4),e(D4,Lhe),e(Lhe,BPo),e(D4,NPo),e(D4,QO),e(QO,IPo),e(D4,qPo),e(W,jPo),e(W,G4),e(G4,yhe),e(yhe,DPo),e(G4,GPo),e(G4,WO),e(WO,OPo),e(G4,VPo),e(W,XPo),e(W,O4),e(O4,xhe),e(xhe,zPo),e(O4,QPo),e(O4,HO),e(HO,WPo),e(O4,HPo),e(W,UPo),e(W,V4),e(V4,$he),e($he,JPo),e(V4,YPo),e(V4,UO),e(UO,KPo),e(V4,ZPo),e(W,eBo),e(W,X4),e(X4,khe),e(khe,oBo),e(X4,rBo),e(X4,JO),e(JO,tBo),e(X4,aBo),e(W,nBo),e(W,z4),e(z4,She),e(She,sBo),e(z4,lBo),e(z4,YO),e(YO,iBo),e(z4,dBo),e(W,cBo),e(W,Q4),e(Q4,Rhe),e(Rhe,fBo),e(Q4,mBo),e(Q4,KO),e(KO,gBo),e(Q4,hBo),e(W,pBo),e(W,W4),e(W4,Phe),e(Phe,_Bo),e(W4,uBo),e(W4,ZO),e(ZO,bBo),e(W4,vBo),e(W,FBo),e(W,H4),e(H4,Bhe),e(Bhe,TBo),e(H4,MBo),e(H4,eV),e(eV,EBo),e(H4,CBo),e(W,wBo),e(W,U4),e(U4,Nhe),e(Nhe,ABo),e(U4,LBo),e(U4,oV),e(oV,yBo),e(U4,xBo),e(W,$Bo),e(W,J4),e(J4,Ihe),e(Ihe,kBo),e(J4,SBo),e(J4,rV),e(rV,RBo),e(J4,PBo),e(W,BBo),e(W,Y4),e(Y4,qhe),e(qhe,NBo),e(Y4,IBo),e(Y4,tV),e(tV,qBo),e(Y4,jBo),e(W,DBo),e(W,K4),e(K4,jhe),e(jhe,GBo),e(K4,OBo),e(K4,aV),e(aV,VBo),e(K4,XBo),e(W,zBo),e(W,Z4),e(Z4,Dhe),e(Dhe,QBo),e(Z4,WBo),e(Z4,nV),e(nV,HBo),e(Z4,UBo),e(W,JBo),e(W,e2),e(e2,Ghe),e(Ghe,YBo),e(e2,KBo),e(e2,sV),e(sV,ZBo),e(e2,eNo),e(W,oNo),e(W,o2),e(o2,Ohe),e(Ohe,rNo),e(o2,tNo),e(o2,lV),e(lV,aNo),e(o2,nNo),e(W,sNo),e(W,r2),e(r2,Vhe),e(Vhe,lNo),e(r2,iNo),e(r2,iV),e(iV,dNo),e(r2,cNo),e(W,fNo),e(W,t2),e(t2,Xhe),e(Xhe,mNo),e(t2,gNo),e(t2,dV),e(dV,hNo),e(t2,pNo),e(W,_No),e(W,a2),e(a2,zhe),e(zhe,uNo),e(a2,bNo),e(a2,cV),e(cV,vNo),e(a2,FNo),e(W,TNo),e(W,n2),e(n2,Qhe),e(Qhe,MNo),e(n2,ENo),e(n2,fV),e(fV,CNo),e(n2,wNo),e(W,ANo),e(W,s2),e(s2,Whe),e(Whe,LNo),e(s2,yNo),e(s2,mV),e(mV,xNo),e(s2,$No),e(W,kNo),e(W,l2),e(l2,Hhe),e(Hhe,SNo),e(l2,RNo),e(l2,gV),e(gV,PNo),e(l2,BNo),e(W,NNo),e(W,i2),e(i2,Uhe),e(Uhe,INo),e(i2,qNo),e(i2,hV),e(hV,jNo),e(i2,DNo),e(W,GNo),e(W,d2),e(d2,Jhe),e(Jhe,ONo),e(d2,VNo),e(d2,pV),e(pV,XNo),e(d2,zNo),e(W,QNo),e(W,c2),e(c2,Yhe),e(Yhe,WNo),e(c2,HNo),e(c2,_V),e(_V,UNo),e(c2,JNo),e(W,YNo),e(W,f2),e(f2,Khe),e(Khe,KNo),e(f2,ZNo),e(f2,uV),e(uV,eIo),e(f2,oIo),e(W,rIo),e(W,m2),e(m2,Zhe),e(Zhe,tIo),e(m2,aIo),e(m2,epe),e(epe,nIo),e(m2,sIo),e(W,lIo),e(W,g2),e(g2,ope),e(ope,iIo),e(g2,dIo),e(g2,bV),e(bV,cIo),e(g2,fIo),e(W,mIo),e(W,h2),e(h2,rpe),e(rpe,gIo),e(h2,hIo),e(h2,vV),e(vV,pIo),e(h2,_Io),e(W,uIo),e(W,p2),e(p2,tpe),e(tpe,bIo),e(p2,vIo),e(p2,FV),e(FV,FIo),e(p2,TIo),e(W,MIo),e(W,_2),e(_2,ape),e(ape,EIo),e(_2,CIo),e(_2,TV),e(TV,wIo),e(_2,AIo),e(Ze,LIo),e(Ze,u2),e(u2,yIo),e(u2,npe),e(npe,xIo),e(u2,$Io),e(u2,spe),e(spe,kIo),e(Ze,SIo),M(b2,Ze,null),b(f,uXe,u),b(f,Ki,u),e(Ki,v2),e(v2,lpe),M(Jy,lpe,null),e(Ki,RIo),e(Ki,ipe),e(ipe,PIo),b(f,bXe,u),b(f,Ro,u),M(Yy,Ro,null),e(Ro,BIo),e(Ro,Zi),e(Zi,NIo),e(Zi,MV),e(MV,IIo),e(Zi,qIo),e(Zi,EV),e(EV,jIo),e(Zi,DIo),e(Ro,GIo),e(Ro,Ky),e(Ky,OIo),e(Ky,dpe),e(dpe,VIo),e(Ky,XIo),e(Ro,zIo),e(Ro,ft),M(Zy,ft,null),e(ft,QIo),e(ft,cpe),e(cpe,WIo),e(ft,HIo),e(ft,ed),e(ed,UIo),e(ed,fpe),e(fpe,JIo),e(ed,YIo),e(ed,CV),e(CV,KIo),e(ed,ZIo),e(ft,eqo),M(F2,ft,null),e(Ro,oqo),e(Ro,eo),M(e8,eo,null),e(eo,rqo),e(eo,mpe),e(mpe,tqo),e(eo,aqo),e(eo,Da),e(Da,nqo),e(Da,gpe),e(gpe,sqo),e(Da,lqo),e(Da,hpe),e(hpe,iqo),e(Da,dqo),e(Da,ppe),e(ppe,cqo),e(Da,fqo),e(eo,mqo),e(eo,pe),e(pe,T2),e(T2,_pe),e(_pe,gqo),e(T2,hqo),e(T2,wV),e(wV,pqo),e(T2,_qo),e(pe,uqo),e(pe,M2),e(M2,upe),e(upe,bqo),e(M2,vqo),e(M2,AV),e(AV,Fqo),e(M2,Tqo),e(pe,Mqo),e(pe,E2),e(E2,bpe),e(bpe,Eqo),e(E2,Cqo),e(E2,LV),e(LV,wqo),e(E2,Aqo),e(pe,Lqo),e(pe,C2),e(C2,vpe),e(vpe,yqo),e(C2,xqo),e(C2,yV),e(yV,$qo),e(C2,kqo),e(pe,Sqo),e(pe,w2),e(w2,Fpe),e(Fpe,Rqo),e(w2,Pqo),e(w2,xV),e(xV,Bqo),e(w2,Nqo),e(pe,Iqo),e(pe,A2),e(A2,Tpe),e(Tpe,qqo),e(A2,jqo),e(A2,$V),e($V,Dqo),e(A2,Gqo),e(pe,Oqo),e(pe,L2),e(L2,Mpe),e(Mpe,Vqo),e(L2,Xqo),e(L2,kV),e(kV,zqo),e(L2,Qqo),e(pe,Wqo),e(pe,y2),e(y2,Epe),e(Epe,Hqo),e(y2,Uqo),e(y2,SV),e(SV,Jqo),e(y2,Yqo),e(pe,Kqo),e(pe,x2),e(x2,Cpe),e(Cpe,Zqo),e(x2,ejo),e(x2,RV),e(RV,ojo),e(x2,rjo),e(pe,tjo),e(pe,$2),e($2,wpe),e(wpe,ajo),e($2,njo),e($2,PV),e(PV,sjo),e($2,ljo),e(pe,ijo),e(pe,k2),e(k2,Ape),e(Ape,djo),e(k2,cjo),e(k2,BV),e(BV,fjo),e(k2,mjo),e(pe,gjo),e(pe,S2),e(S2,Lpe),e(Lpe,hjo),e(S2,pjo),e(S2,NV),e(NV,_jo),e(S2,ujo),e(pe,bjo),e(pe,R2),e(R2,ype),e(ype,vjo),e(R2,Fjo),e(R2,IV),e(IV,Tjo),e(R2,Mjo),e(pe,Ejo),e(pe,P2),e(P2,xpe),e(xpe,Cjo),e(P2,wjo),e(P2,qV),e(qV,Ajo),e(P2,Ljo),e(pe,yjo),e(pe,B2),e(B2,$pe),e($pe,xjo),e(B2,$jo),e(B2,jV),e(jV,kjo),e(B2,Sjo),e(pe,Rjo),e(pe,N2),e(N2,kpe),e(kpe,Pjo),e(N2,Bjo),e(N2,DV),e(DV,Njo),e(N2,Ijo),e(pe,qjo),e(pe,I2),e(I2,Spe),e(Spe,jjo),e(I2,Djo),e(I2,GV),e(GV,Gjo),e(I2,Ojo),e(pe,Vjo),e(pe,q2),e(q2,Rpe),e(Rpe,Xjo),e(q2,zjo),e(q2,OV),e(OV,Qjo),e(q2,Wjo),e(eo,Hjo),e(eo,j2),e(j2,Ujo),e(j2,Ppe),e(Ppe,Jjo),e(j2,Yjo),e(j2,Bpe),e(Bpe,Kjo),e(eo,Zjo),M(D2,eo,null),b(f,vXe,u),b(f,od,u),e(od,G2),e(G2,Npe),M(o8,Npe,null),e(od,eDo),e(od,Ipe),e(Ipe,oDo),b(f,FXe,u),b(f,Po,u),M(r8,Po,null),e(Po,rDo),e(Po,rd),e(rd,tDo),e(rd,VV),e(VV,aDo),e(rd,nDo),e(rd,XV),e(XV,sDo),e(rd,lDo),e(Po,iDo),e(Po,t8),e(t8,dDo),e(t8,qpe),e(qpe,cDo),e(t8,fDo),e(Po,mDo),e(Po,mt),M(a8,mt,null),e(mt,gDo),e(mt,jpe),e(jpe,hDo),e(mt,pDo),e(mt,td),e(td,_Do),e(td,Dpe),e(Dpe,uDo),e(td,bDo),e(td,zV),e(zV,vDo),e(td,FDo),e(mt,TDo),M(O2,mt,null),e(Po,MDo),e(Po,oo),M(n8,oo,null),e(oo,EDo),e(oo,Gpe),e(Gpe,CDo),e(oo,wDo),e(oo,Ga),e(Ga,ADo),e(Ga,Ope),e(Ope,LDo),e(Ga,yDo),e(Ga,Vpe),e(Vpe,xDo),e(Ga,$Do),e(Ga,Xpe),e(Xpe,kDo),e(Ga,SDo),e(oo,RDo),e(oo,I),e(I,V2),e(V2,zpe),e(zpe,PDo),e(V2,BDo),e(V2,QV),e(QV,NDo),e(V2,IDo),e(I,qDo),e(I,X2),e(X2,Qpe),e(Qpe,jDo),e(X2,DDo),e(X2,WV),e(WV,GDo),e(X2,ODo),e(I,VDo),e(I,z2),e(z2,Wpe),e(Wpe,XDo),e(z2,zDo),e(z2,HV),e(HV,QDo),e(z2,WDo),e(I,HDo),e(I,Q2),e(Q2,Hpe),e(Hpe,UDo),e(Q2,JDo),e(Q2,UV),e(UV,YDo),e(Q2,KDo),e(I,ZDo),e(I,W2),e(W2,Upe),e(Upe,eGo),e(W2,oGo),e(W2,JV),e(JV,rGo),e(W2,tGo),e(I,aGo),e(I,H2),e(H2,Jpe),e(Jpe,nGo),e(H2,sGo),e(H2,YV),e(YV,lGo),e(H2,iGo),e(I,dGo),e(I,U2),e(U2,Ype),e(Ype,cGo),e(U2,fGo),e(U2,KV),e(KV,mGo),e(U2,gGo),e(I,hGo),e(I,J2),e(J2,Kpe),e(Kpe,pGo),e(J2,_Go),e(J2,ZV),e(ZV,uGo),e(J2,bGo),e(I,vGo),e(I,Y2),e(Y2,Zpe),e(Zpe,FGo),e(Y2,TGo),e(Y2,eX),e(eX,MGo),e(Y2,EGo),e(I,CGo),e(I,K2),e(K2,e_e),e(e_e,wGo),e(K2,AGo),e(K2,oX),e(oX,LGo),e(K2,yGo),e(I,xGo),e(I,Z2),e(Z2,o_e),e(o_e,$Go),e(Z2,kGo),e(Z2,rX),e(rX,SGo),e(Z2,RGo),e(I,PGo),e(I,eb),e(eb,r_e),e(r_e,BGo),e(eb,NGo),e(eb,tX),e(tX,IGo),e(eb,qGo),e(I,jGo),e(I,ob),e(ob,t_e),e(t_e,DGo),e(ob,GGo),e(ob,aX),e(aX,OGo),e(ob,VGo),e(I,XGo),e(I,rb),e(rb,a_e),e(a_e,zGo),e(rb,QGo),e(rb,nX),e(nX,WGo),e(rb,HGo),e(I,UGo),e(I,tb),e(tb,n_e),e(n_e,JGo),e(tb,YGo),e(tb,sX),e(sX,KGo),e(tb,ZGo),e(I,eOo),e(I,ab),e(ab,s_e),e(s_e,oOo),e(ab,rOo),e(ab,lX),e(lX,tOo),e(ab,aOo),e(I,nOo),e(I,nb),e(nb,l_e),e(l_e,sOo),e(nb,lOo),e(nb,iX),e(iX,iOo),e(nb,dOo),e(I,cOo),e(I,sb),e(sb,i_e),e(i_e,fOo),e(sb,mOo),e(sb,dX),e(dX,gOo),e(sb,hOo),e(I,pOo),e(I,lb),e(lb,d_e),e(d_e,_Oo),e(lb,uOo),e(lb,cX),e(cX,bOo),e(lb,vOo),e(I,FOo),e(I,ib),e(ib,c_e),e(c_e,TOo),e(ib,MOo),e(ib,fX),e(fX,EOo),e(ib,COo),e(I,wOo),e(I,db),e(db,f_e),e(f_e,AOo),e(db,LOo),e(db,mX),e(mX,yOo),e(db,xOo),e(I,$Oo),e(I,cb),e(cb,m_e),e(m_e,kOo),e(cb,SOo),e(cb,gX),e(gX,ROo),e(cb,POo),e(I,BOo),e(I,fb),e(fb,g_e),e(g_e,NOo),e(fb,IOo),e(fb,hX),e(hX,qOo),e(fb,jOo),e(I,DOo),e(I,mb),e(mb,h_e),e(h_e,GOo),e(mb,OOo),e(mb,pX),e(pX,VOo),e(mb,XOo),e(I,zOo),e(I,gb),e(gb,p_e),e(p_e,QOo),e(gb,WOo),e(gb,_X),e(_X,HOo),e(gb,UOo),e(I,JOo),e(I,hb),e(hb,__e),e(__e,YOo),e(hb,KOo),e(hb,uX),e(uX,ZOo),e(hb,eVo),e(I,oVo),e(I,pb),e(pb,u_e),e(u_e,rVo),e(pb,tVo),e(pb,bX),e(bX,aVo),e(pb,nVo),e(I,sVo),e(I,_b),e(_b,b_e),e(b_e,lVo),e(_b,iVo),e(_b,vX),e(vX,dVo),e(_b,cVo),e(I,fVo),e(I,ub),e(ub,v_e),e(v_e,mVo),e(ub,gVo),e(ub,FX),e(FX,hVo),e(ub,pVo),e(I,_Vo),e(I,bb),e(bb,F_e),e(F_e,uVo),e(bb,bVo),e(bb,TX),e(TX,vVo),e(bb,FVo),e(I,TVo),e(I,vb),e(vb,T_e),e(T_e,MVo),e(vb,EVo),e(vb,MX),e(MX,CVo),e(vb,wVo),e(I,AVo),e(I,Fb),e(Fb,M_e),e(M_e,LVo),e(Fb,yVo),e(Fb,EX),e(EX,xVo),e(Fb,$Vo),e(I,kVo),e(I,Tb),e(Tb,E_e),e(E_e,SVo),e(Tb,RVo),e(Tb,CX),e(CX,PVo),e(Tb,BVo),e(I,NVo),e(I,Mb),e(Mb,C_e),e(C_e,IVo),e(Mb,qVo),e(Mb,wX),e(wX,jVo),e(Mb,DVo),e(I,GVo),e(I,Eb),e(Eb,w_e),e(w_e,OVo),e(Eb,VVo),e(Eb,AX),e(AX,XVo),e(Eb,zVo),e(I,QVo),e(I,Cb),e(Cb,A_e),e(A_e,WVo),e(Cb,HVo),e(Cb,LX),e(LX,UVo),e(Cb,JVo),e(I,YVo),e(I,wb),e(wb,L_e),e(L_e,KVo),e(wb,ZVo),e(wb,yX),e(yX,eXo),e(wb,oXo),e(I,rXo),e(I,Ab),e(Ab,y_e),e(y_e,tXo),e(Ab,aXo),e(Ab,xX),e(xX,nXo),e(Ab,sXo),e(I,lXo),e(I,Lb),e(Lb,x_e),e(x_e,iXo),e(Lb,dXo),e(Lb,$X),e($X,cXo),e(Lb,fXo),e(I,mXo),e(I,yb),e(yb,$_e),e($_e,gXo),e(yb,hXo),e(yb,kX),e(kX,pXo),e(yb,_Xo),e(I,uXo),e(I,xb),e(xb,k_e),e(k_e,bXo),e(xb,vXo),e(xb,SX),e(SX,FXo),e(xb,TXo),e(I,MXo),e(I,$b),e($b,S_e),e(S_e,EXo),e($b,CXo),e($b,RX),e(RX,wXo),e($b,AXo),e(I,LXo),e(I,kb),e(kb,R_e),e(R_e,yXo),e(kb,xXo),e(kb,PX),e(PX,$Xo),e(kb,kXo),e(I,SXo),e(I,Sb),e(Sb,P_e),e(P_e,RXo),e(Sb,PXo),e(Sb,BX),e(BX,BXo),e(Sb,NXo),e(I,IXo),e(I,Rb),e(Rb,B_e),e(B_e,qXo),e(Rb,jXo),e(Rb,NX),e(NX,DXo),e(Rb,GXo),e(I,OXo),e(I,Pb),e(Pb,N_e),e(N_e,VXo),e(Pb,XXo),e(Pb,IX),e(IX,zXo),e(Pb,QXo),e(I,WXo),e(I,Bb),e(Bb,I_e),e(I_e,HXo),e(Bb,UXo),e(Bb,qX),e(qX,JXo),e(Bb,YXo),e(I,KXo),e(I,Nb),e(Nb,q_e),e(q_e,ZXo),e(Nb,ezo),e(Nb,jX),e(jX,ozo),e(Nb,rzo),e(I,tzo),e(I,Ib),e(Ib,j_e),e(j_e,azo),e(Ib,nzo),e(Ib,DX),e(DX,szo),e(Ib,lzo),e(I,izo),e(I,qb),e(qb,D_e),e(D_e,dzo),e(qb,czo),e(qb,GX),e(GX,fzo),e(qb,mzo),e(oo,gzo),e(oo,jb),e(jb,hzo),e(jb,G_e),e(G_e,pzo),e(jb,_zo),e(jb,O_e),e(O_e,uzo),e(oo,bzo),M(Db,oo,null),b(f,TXe,u),b(f,ad,u),e(ad,Gb),e(Gb,V_e),M(s8,V_e,null),e(ad,vzo),e(ad,X_e),e(X_e,Fzo),b(f,MXe,u),b(f,Bo,u),M(l8,Bo,null),e(Bo,Tzo),e(Bo,nd),e(nd,Mzo),e(nd,OX),e(OX,Ezo),e(nd,Czo),e(nd,VX),e(VX,wzo),e(nd,Azo),e(Bo,Lzo),e(Bo,i8),e(i8,yzo),e(i8,z_e),e(z_e,xzo),e(i8,$zo),e(Bo,kzo),e(Bo,gt),M(d8,gt,null),e(gt,Szo),e(gt,Q_e),e(Q_e,Rzo),e(gt,Pzo),e(gt,sd),e(sd,Bzo),e(sd,W_e),e(W_e,Nzo),e(sd,Izo),e(sd,XX),e(XX,qzo),e(sd,jzo),e(gt,Dzo),M(Ob,gt,null),e(Bo,Gzo),e(Bo,ro),M(c8,ro,null),e(ro,Ozo),e(ro,H_e),e(H_e,Vzo),e(ro,Xzo),e(ro,Oa),e(Oa,zzo),e(Oa,U_e),e(U_e,Qzo),e(Oa,Wzo),e(Oa,J_e),e(J_e,Hzo),e(Oa,Uzo),e(Oa,Y_e),e(Y_e,Jzo),e(Oa,Yzo),e(ro,Kzo),e(ro,Z),e(Z,Vb),e(Vb,K_e),e(K_e,Zzo),e(Vb,eQo),e(Vb,zX),e(zX,oQo),e(Vb,rQo),e(Z,tQo),e(Z,Xb),e(Xb,Z_e),e(Z_e,aQo),e(Xb,nQo),e(Xb,QX),e(QX,sQo),e(Xb,lQo),e(Z,iQo),e(Z,zb),e(zb,eue),e(eue,dQo),e(zb,cQo),e(zb,WX),e(WX,fQo),e(zb,mQo),e(Z,gQo),e(Z,Qb),e(Qb,oue),e(oue,hQo),e(Qb,pQo),e(Qb,HX),e(HX,_Qo),e(Qb,uQo),e(Z,bQo),e(Z,Wb),e(Wb,rue),e(rue,vQo),e(Wb,FQo),e(Wb,UX),e(UX,TQo),e(Wb,MQo),e(Z,EQo),e(Z,Hb),e(Hb,tue),e(tue,CQo),e(Hb,wQo),e(Hb,JX),e(JX,AQo),e(Hb,LQo),e(Z,yQo),e(Z,Ub),e(Ub,aue),e(aue,xQo),e(Ub,$Qo),e(Ub,YX),e(YX,kQo),e(Ub,SQo),e(Z,RQo),e(Z,Jb),e(Jb,nue),e(nue,PQo),e(Jb,BQo),e(Jb,KX),e(KX,NQo),e(Jb,IQo),e(Z,qQo),e(Z,Yb),e(Yb,sue),e(sue,jQo),e(Yb,DQo),e(Yb,ZX),e(ZX,GQo),e(Yb,OQo),e(Z,VQo),e(Z,Kb),e(Kb,lue),e(lue,XQo),e(Kb,zQo),e(Kb,ez),e(ez,QQo),e(Kb,WQo),e(Z,HQo),e(Z,Zb),e(Zb,iue),e(iue,UQo),e(Zb,JQo),e(Zb,oz),e(oz,YQo),e(Zb,KQo),e(Z,ZQo),e(Z,ev),e(ev,due),e(due,eWo),e(ev,oWo),e(ev,rz),e(rz,rWo),e(ev,tWo),e(Z,aWo),e(Z,ov),e(ov,cue),e(cue,nWo),e(ov,sWo),e(ov,tz),e(tz,lWo),e(ov,iWo),e(Z,dWo),e(Z,rv),e(rv,fue),e(fue,cWo),e(rv,fWo),e(rv,az),e(az,mWo),e(rv,gWo),e(Z,hWo),e(Z,tv),e(tv,mue),e(mue,pWo),e(tv,_Wo),e(tv,nz),e(nz,uWo),e(tv,bWo),e(Z,vWo),e(Z,av),e(av,gue),e(gue,FWo),e(av,TWo),e(av,sz),e(sz,MWo),e(av,EWo),e(Z,CWo),e(Z,nv),e(nv,hue),e(hue,wWo),e(nv,AWo),e(nv,lz),e(lz,LWo),e(nv,yWo),e(Z,xWo),e(Z,sv),e(sv,pue),e(pue,$Wo),e(sv,kWo),e(sv,iz),e(iz,SWo),e(sv,RWo),e(Z,PWo),e(Z,lv),e(lv,_ue),e(_ue,BWo),e(lv,NWo),e(lv,dz),e(dz,IWo),e(lv,qWo),e(Z,jWo),e(Z,iv),e(iv,uue),e(uue,DWo),e(iv,GWo),e(iv,cz),e(cz,OWo),e(iv,VWo),e(Z,XWo),e(Z,dv),e(dv,bue),e(bue,zWo),e(dv,QWo),e(dv,fz),e(fz,WWo),e(dv,HWo),e(Z,UWo),e(Z,cv),e(cv,vue),e(vue,JWo),e(cv,YWo),e(cv,mz),e(mz,KWo),e(cv,ZWo),e(Z,eHo),e(Z,fv),e(fv,Fue),e(Fue,oHo),e(fv,rHo),e(fv,gz),e(gz,tHo),e(fv,aHo),e(Z,nHo),e(Z,mv),e(mv,Tue),e(Tue,sHo),e(mv,lHo),e(mv,hz),e(hz,iHo),e(mv,dHo),e(Z,cHo),e(Z,gv),e(gv,Mue),e(Mue,fHo),e(gv,mHo),e(gv,pz),e(pz,gHo),e(gv,hHo),e(Z,pHo),e(Z,hv),e(hv,Eue),e(Eue,_Ho),e(hv,uHo),e(hv,_z),e(_z,bHo),e(hv,vHo),e(Z,FHo),e(Z,pv),e(pv,Cue),e(Cue,THo),e(pv,MHo),e(pv,uz),e(uz,EHo),e(pv,CHo),e(Z,wHo),e(Z,_v),e(_v,wue),e(wue,AHo),e(_v,LHo),e(_v,bz),e(bz,yHo),e(_v,xHo),e(Z,$Ho),e(Z,uv),e(uv,Aue),e(Aue,kHo),e(uv,SHo),e(uv,vz),e(vz,RHo),e(uv,PHo),e(Z,BHo),e(Z,bv),e(bv,Lue),e(Lue,NHo),e(bv,IHo),e(bv,Fz),e(Fz,qHo),e(bv,jHo),e(ro,DHo),e(ro,vv),e(vv,GHo),e(vv,yue),e(yue,OHo),e(vv,VHo),e(vv,xue),e(xue,XHo),e(ro,zHo),M(Fv,ro,null),b(f,EXe,u),b(f,ld,u),e(ld,Tv),e(Tv,$ue),M(f8,$ue,null),e(ld,QHo),e(ld,kue),e(kue,WHo),b(f,CXe,u),b(f,No,u),M(m8,No,null),e(No,HHo),e(No,id),e(id,UHo),e(id,Tz),e(Tz,JHo),e(id,YHo),e(id,Mz),e(Mz,KHo),e(id,ZHo),e(No,eUo),e(No,g8),e(g8,oUo),e(g8,Sue),e(Sue,rUo),e(g8,tUo),e(No,aUo),e(No,ht),M(h8,ht,null),e(ht,nUo),e(ht,Rue),e(Rue,sUo),e(ht,lUo),e(ht,dd),e(dd,iUo),e(dd,Pue),e(Pue,dUo),e(dd,cUo),e(dd,Ez),e(Ez,fUo),e(dd,mUo),e(ht,gUo),M(Mv,ht,null),e(No,hUo),e(No,to),M(p8,to,null),e(to,pUo),e(to,Bue),e(Bue,_Uo),e(to,uUo),e(to,Va),e(Va,bUo),e(Va,Nue),e(Nue,vUo),e(Va,FUo),e(Va,Iue),e(Iue,TUo),e(Va,MUo),e(Va,que),e(que,EUo),e(Va,CUo),e(to,wUo),e(to,Io),e(Io,Ev),e(Ev,jue),e(jue,AUo),e(Ev,LUo),e(Ev,Cz),e(Cz,yUo),e(Ev,xUo),e(Io,$Uo),e(Io,Cv),e(Cv,Due),e(Due,kUo),e(Cv,SUo),e(Cv,wz),e(wz,RUo),e(Cv,PUo),e(Io,BUo),e(Io,wv),e(wv,Gue),e(Gue,NUo),e(wv,IUo),e(wv,Az),e(Az,qUo),e(wv,jUo),e(Io,DUo),e(Io,Av),e(Av,Oue),e(Oue,GUo),e(Av,OUo),e(Av,Lz),e(Lz,VUo),e(Av,XUo),e(Io,zUo),e(Io,Lv),e(Lv,Vue),e(Vue,QUo),e(Lv,WUo),e(Lv,yz),e(yz,HUo),e(Lv,UUo),e(Io,JUo),e(Io,yv),e(yv,Xue),e(Xue,YUo),e(yv,KUo),e(yv,xz),e(xz,ZUo),e(yv,eJo),e(to,oJo),e(to,xv),e(xv,rJo),e(xv,zue),e(zue,tJo),e(xv,aJo),e(xv,Que),e(Que,nJo),e(to,sJo),M($v,to,null),b(f,wXe,u),b(f,cd,u),e(cd,kv),e(kv,Wue),M(_8,Wue,null),e(cd,lJo),e(cd,Hue),e(Hue,iJo),b(f,AXe,u),b(f,qo,u),M(u8,qo,null),e(qo,dJo),e(qo,fd),e(fd,cJo),e(fd,$z),e($z,fJo),e(fd,mJo),e(fd,kz),e(kz,gJo),e(fd,hJo),e(qo,pJo),e(qo,b8),e(b8,_Jo),e(b8,Uue),e(Uue,uJo),e(b8,bJo),e(qo,vJo),e(qo,pt),M(v8,pt,null),e(pt,FJo),e(pt,Jue),e(Jue,TJo),e(pt,MJo),e(pt,md),e(md,EJo),e(md,Yue),e(Yue,CJo),e(md,wJo),e(md,Sz),e(Sz,AJo),e(md,LJo),e(pt,yJo),M(Sv,pt,null),e(qo,xJo),e(qo,ao),M(F8,ao,null),e(ao,$Jo),e(ao,Kue),e(Kue,kJo),e(ao,SJo),e(ao,Xa),e(Xa,RJo),e(Xa,Zue),e(Zue,PJo),e(Xa,BJo),e(Xa,e1e),e(e1e,NJo),e(Xa,IJo),e(Xa,o1e),e(o1e,qJo),e(Xa,jJo),e(ao,DJo),e(ao,U),e(U,Rv),e(Rv,r1e),e(r1e,GJo),e(Rv,OJo),e(Rv,Rz),e(Rz,VJo),e(Rv,XJo),e(U,zJo),e(U,Pv),e(Pv,t1e),e(t1e,QJo),e(Pv,WJo),e(Pv,Pz),e(Pz,HJo),e(Pv,UJo),e(U,JJo),e(U,Bv),e(Bv,a1e),e(a1e,YJo),e(Bv,KJo),e(Bv,Bz),e(Bz,ZJo),e(Bv,eYo),e(U,oYo),e(U,Nv),e(Nv,n1e),e(n1e,rYo),e(Nv,tYo),e(Nv,Nz),e(Nz,aYo),e(Nv,nYo),e(U,sYo),e(U,Iv),e(Iv,s1e),e(s1e,lYo),e(Iv,iYo),e(Iv,Iz),e(Iz,dYo),e(Iv,cYo),e(U,fYo),e(U,qv),e(qv,l1e),e(l1e,mYo),e(qv,gYo),e(qv,qz),e(qz,hYo),e(qv,pYo),e(U,_Yo),e(U,jv),e(jv,i1e),e(i1e,uYo),e(jv,bYo),e(jv,jz),e(jz,vYo),e(jv,FYo),e(U,TYo),e(U,Dv),e(Dv,d1e),e(d1e,MYo),e(Dv,EYo),e(Dv,Dz),e(Dz,CYo),e(Dv,wYo),e(U,AYo),e(U,Gv),e(Gv,c1e),e(c1e,LYo),e(Gv,yYo),e(Gv,Gz),e(Gz,xYo),e(Gv,$Yo),e(U,kYo),e(U,Ov),e(Ov,f1e),e(f1e,SYo),e(Ov,RYo),e(Ov,Oz),e(Oz,PYo),e(Ov,BYo),e(U,NYo),e(U,Vv),e(Vv,m1e),e(m1e,IYo),e(Vv,qYo),e(Vv,Vz),e(Vz,jYo),e(Vv,DYo),e(U,GYo),e(U,Xv),e(Xv,g1e),e(g1e,OYo),e(Xv,VYo),e(Xv,Xz),e(Xz,XYo),e(Xv,zYo),e(U,QYo),e(U,zv),e(zv,h1e),e(h1e,WYo),e(zv,HYo),e(zv,zz),e(zz,UYo),e(zv,JYo),e(U,YYo),e(U,Qv),e(Qv,p1e),e(p1e,KYo),e(Qv,ZYo),e(Qv,Qz),e(Qz,eKo),e(Qv,oKo),e(U,rKo),e(U,Wv),e(Wv,_1e),e(_1e,tKo),e(Wv,aKo),e(Wv,Wz),e(Wz,nKo),e(Wv,sKo),e(U,lKo),e(U,Hv),e(Hv,u1e),e(u1e,iKo),e(Hv,dKo),e(Hv,Hz),e(Hz,cKo),e(Hv,fKo),e(U,mKo),e(U,Uv),e(Uv,b1e),e(b1e,gKo),e(Uv,hKo),e(Uv,Uz),e(Uz,pKo),e(Uv,_Ko),e(U,uKo),e(U,Jv),e(Jv,v1e),e(v1e,bKo),e(Jv,vKo),e(Jv,Jz),e(Jz,FKo),e(Jv,TKo),e(U,MKo),e(U,Yv),e(Yv,F1e),e(F1e,EKo),e(Yv,CKo),e(Yv,Yz),e(Yz,wKo),e(Yv,AKo),e(U,LKo),e(U,Kv),e(Kv,T1e),e(T1e,yKo),e(Kv,xKo),e(Kv,Kz),e(Kz,$Ko),e(Kv,kKo),e(U,SKo),e(U,Zv),e(Zv,M1e),e(M1e,RKo),e(Zv,PKo),e(Zv,Zz),e(Zz,BKo),e(Zv,NKo),e(U,IKo),e(U,e3),e(e3,E1e),e(E1e,qKo),e(e3,jKo),e(e3,eQ),e(eQ,DKo),e(e3,GKo),e(U,OKo),e(U,o3),e(o3,C1e),e(C1e,VKo),e(o3,XKo),e(o3,oQ),e(oQ,zKo),e(o3,QKo),e(U,WKo),e(U,r3),e(r3,w1e),e(w1e,HKo),e(r3,UKo),e(r3,rQ),e(rQ,JKo),e(r3,YKo),e(U,KKo),e(U,t3),e(t3,A1e),e(A1e,ZKo),e(t3,eZo),e(t3,tQ),e(tQ,oZo),e(t3,rZo),e(U,tZo),e(U,a3),e(a3,L1e),e(L1e,aZo),e(a3,nZo),e(a3,aQ),e(aQ,sZo),e(a3,lZo),e(U,iZo),e(U,n3),e(n3,y1e),e(y1e,dZo),e(n3,cZo),e(n3,nQ),e(nQ,fZo),e(n3,mZo),e(U,gZo),e(U,s3),e(s3,x1e),e(x1e,hZo),e(s3,pZo),e(s3,sQ),e(sQ,_Zo),e(s3,uZo),e(U,bZo),e(U,l3),e(l3,$1e),e($1e,vZo),e(l3,FZo),e(l3,lQ),e(lQ,TZo),e(l3,MZo),e(U,EZo),e(U,i3),e(i3,k1e),e(k1e,CZo),e(i3,wZo),e(i3,iQ),e(iQ,AZo),e(i3,LZo),e(U,yZo),e(U,d3),e(d3,S1e),e(S1e,xZo),e(d3,$Zo),e(d3,dQ),e(dQ,kZo),e(d3,SZo),e(U,RZo),e(U,c3),e(c3,R1e),e(R1e,PZo),e(c3,BZo),e(c3,cQ),e(cQ,NZo),e(c3,IZo),e(U,qZo),e(U,f3),e(f3,P1e),e(P1e,jZo),e(f3,DZo),e(f3,fQ),e(fQ,GZo),e(f3,OZo),e(U,VZo),e(U,m3),e(m3,B1e),e(B1e,XZo),e(m3,zZo),e(m3,mQ),e(mQ,QZo),e(m3,WZo),e(U,HZo),e(U,g3),e(g3,N1e),e(N1e,UZo),e(g3,JZo),e(g3,gQ),e(gQ,YZo),e(g3,KZo),e(U,ZZo),e(U,h3),e(h3,I1e),e(I1e,eer),e(h3,oer),e(h3,hQ),e(hQ,rer),e(h3,ter),e(ao,aer),e(ao,p3),e(p3,ner),e(p3,q1e),e(q1e,ser),e(p3,ler),e(p3,j1e),e(j1e,ier),e(ao,der),M(_3,ao,null),b(f,LXe,u),b(f,gd,u),e(gd,u3),e(u3,D1e),M(T8,D1e,null),e(gd,cer),e(gd,G1e),e(G1e,fer),b(f,yXe,u),b(f,jo,u),M(M8,jo,null),e(jo,mer),e(jo,hd),e(hd,ger),e(hd,pQ),e(pQ,her),e(hd,per),e(hd,_Q),e(_Q,_er),e(hd,uer),e(jo,ber),e(jo,E8),e(E8,ver),e(E8,O1e),e(O1e,Fer),e(E8,Ter),e(jo,Mer),e(jo,_t),M(C8,_t,null),e(_t,Eer),e(_t,V1e),e(V1e,Cer),e(_t,wer),e(_t,pd),e(pd,Aer),e(pd,X1e),e(X1e,Ler),e(pd,yer),e(pd,uQ),e(uQ,xer),e(pd,$er),e(_t,ker),M(b3,_t,null),e(jo,Ser),e(jo,no),M(w8,no,null),e(no,Rer),e(no,z1e),e(z1e,Per),e(no,Ber),e(no,za),e(za,Ner),e(za,Q1e),e(Q1e,Ier),e(za,qer),e(za,W1e),e(W1e,jer),e(za,Der),e(za,H1e),e(H1e,Ger),e(za,Oer),e(no,Ver),e(no,V),e(V,v3),e(v3,U1e),e(U1e,Xer),e(v3,zer),e(v3,bQ),e(bQ,Qer),e(v3,Wer),e(V,Her),e(V,F3),e(F3,J1e),e(J1e,Uer),e(F3,Jer),e(F3,vQ),e(vQ,Yer),e(F3,Ker),e(V,Zer),e(V,T3),e(T3,Y1e),e(Y1e,eor),e(T3,oor),e(T3,FQ),e(FQ,ror),e(T3,tor),e(V,aor),e(V,M3),e(M3,K1e),e(K1e,nor),e(M3,sor),e(M3,TQ),e(TQ,lor),e(M3,ior),e(V,dor),e(V,E3),e(E3,Z1e),e(Z1e,cor),e(E3,mor),e(E3,MQ),e(MQ,gor),e(E3,hor),e(V,por),e(V,C3),e(C3,e4e),e(e4e,_or),e(C3,uor),e(C3,EQ),e(EQ,bor),e(C3,vor),e(V,For),e(V,w3),e(w3,o4e),e(o4e,Tor),e(w3,Mor),e(w3,CQ),e(CQ,Eor),e(w3,Cor),e(V,wor),e(V,A3),e(A3,r4e),e(r4e,Aor),e(A3,Lor),e(A3,wQ),e(wQ,yor),e(A3,xor),e(V,$or),e(V,L3),e(L3,t4e),e(t4e,kor),e(L3,Sor),e(L3,AQ),e(AQ,Ror),e(L3,Por),e(V,Bor),e(V,y3),e(y3,a4e),e(a4e,Nor),e(y3,Ior),e(y3,LQ),e(LQ,qor),e(y3,jor),e(V,Dor),e(V,x3),e(x3,n4e),e(n4e,Gor),e(x3,Oor),e(x3,yQ),e(yQ,Vor),e(x3,Xor),e(V,zor),e(V,$3),e($3,s4e),e(s4e,Qor),e($3,Wor),e($3,xQ),e(xQ,Hor),e($3,Uor),e(V,Jor),e(V,k3),e(k3,l4e),e(l4e,Yor),e(k3,Kor),e(k3,$Q),e($Q,Zor),e(k3,err),e(V,orr),e(V,S3),e(S3,i4e),e(i4e,rrr),e(S3,trr),e(S3,kQ),e(kQ,arr),e(S3,nrr),e(V,srr),e(V,R3),e(R3,d4e),e(d4e,lrr),e(R3,irr),e(R3,SQ),e(SQ,drr),e(R3,crr),e(V,frr),e(V,P3),e(P3,c4e),e(c4e,mrr),e(P3,grr),e(P3,RQ),e(RQ,hrr),e(P3,prr),e(V,_rr),e(V,B3),e(B3,f4e),e(f4e,urr),e(B3,brr),e(B3,PQ),e(PQ,vrr),e(B3,Frr),e(V,Trr),e(V,N3),e(N3,m4e),e(m4e,Mrr),e(N3,Err),e(N3,BQ),e(BQ,Crr),e(N3,wrr),e(V,Arr),e(V,I3),e(I3,g4e),e(g4e,Lrr),e(I3,yrr),e(I3,NQ),e(NQ,xrr),e(I3,$rr),e(V,krr),e(V,q3),e(q3,h4e),e(h4e,Srr),e(q3,Rrr),e(q3,IQ),e(IQ,Prr),e(q3,Brr),e(V,Nrr),e(V,j3),e(j3,p4e),e(p4e,Irr),e(j3,qrr),e(j3,qQ),e(qQ,jrr),e(j3,Drr),e(V,Grr),e(V,D3),e(D3,_4e),e(_4e,Orr),e(D3,Vrr),e(D3,jQ),e(jQ,Xrr),e(D3,zrr),e(V,Qrr),e(V,G3),e(G3,u4e),e(u4e,Wrr),e(G3,Hrr),e(G3,DQ),e(DQ,Urr),e(G3,Jrr),e(V,Yrr),e(V,O3),e(O3,b4e),e(b4e,Krr),e(O3,Zrr),e(O3,GQ),e(GQ,etr),e(O3,otr),e(V,rtr),e(V,V3),e(V3,v4e),e(v4e,ttr),e(V3,atr),e(V3,OQ),e(OQ,ntr),e(V3,str),e(V,ltr),e(V,X3),e(X3,F4e),e(F4e,itr),e(X3,dtr),e(X3,VQ),e(VQ,ctr),e(X3,ftr),e(V,mtr),e(V,z3),e(z3,T4e),e(T4e,gtr),e(z3,htr),e(z3,XQ),e(XQ,ptr),e(z3,_tr),e(V,utr),e(V,Q3),e(Q3,M4e),e(M4e,btr),e(Q3,vtr),e(Q3,zQ),e(zQ,Ftr),e(Q3,Ttr),e(V,Mtr),e(V,W3),e(W3,E4e),e(E4e,Etr),e(W3,Ctr),e(W3,QQ),e(QQ,wtr),e(W3,Atr),e(V,Ltr),e(V,H3),e(H3,C4e),e(C4e,ytr),e(H3,xtr),e(H3,WQ),e(WQ,$tr),e(H3,ktr),e(V,Str),e(V,U3),e(U3,w4e),e(w4e,Rtr),e(U3,Ptr),e(U3,HQ),e(HQ,Btr),e(U3,Ntr),e(V,Itr),e(V,J3),e(J3,A4e),e(A4e,qtr),e(J3,jtr),e(J3,UQ),e(UQ,Dtr),e(J3,Gtr),e(V,Otr),e(V,Y3),e(Y3,L4e),e(L4e,Vtr),e(Y3,Xtr),e(Y3,JQ),e(JQ,ztr),e(Y3,Qtr),e(V,Wtr),e(V,K3),e(K3,y4e),e(y4e,Htr),e(K3,Utr),e(K3,YQ),e(YQ,Jtr),e(K3,Ytr),e(V,Ktr),e(V,Z3),e(Z3,x4e),e(x4e,Ztr),e(Z3,ear),e(Z3,KQ),e(KQ,oar),e(Z3,rar),e(V,tar),e(V,e5),e(e5,$4e),e($4e,aar),e(e5,nar),e(e5,ZQ),e(ZQ,sar),e(e5,lar),e(V,iar),e(V,o5),e(o5,k4e),e(k4e,dar),e(o5,car),e(o5,eW),e(eW,far),e(o5,mar),e(V,gar),e(V,r5),e(r5,S4e),e(S4e,har),e(r5,par),e(r5,oW),e(oW,_ar),e(r5,uar),e(V,bar),e(V,t5),e(t5,R4e),e(R4e,Far),e(t5,Tar),e(t5,rW),e(rW,Mar),e(t5,Ear),e(V,Car),e(V,a5),e(a5,P4e),e(P4e,war),e(a5,Aar),e(a5,tW),e(tW,Lar),e(a5,yar),e(V,xar),e(V,n5),e(n5,B4e),e(B4e,$ar),e(n5,kar),e(n5,aW),e(aW,Sar),e(n5,Rar),e(V,Par),e(V,s5),e(s5,N4e),e(N4e,Bar),e(s5,Nar),e(s5,nW),e(nW,Iar),e(s5,qar),e(no,jar),e(no,l5),e(l5,Dar),e(l5,I4e),e(I4e,Gar),e(l5,Oar),e(l5,q4e),e(q4e,Var),e(no,Xar),M(i5,no,null),b(f,xXe,u),b(f,_d,u),e(_d,d5),e(d5,j4e),M(A8,j4e,null),e(_d,zar),e(_d,D4e),e(D4e,Qar),b(f,$Xe,u),b(f,Do,u),M(L8,Do,null),e(Do,War),e(Do,ud),e(ud,Har),e(ud,sW),e(sW,Uar),e(ud,Jar),e(ud,lW),e(lW,Yar),e(ud,Kar),e(Do,Zar),e(Do,y8),e(y8,enr),e(y8,G4e),e(G4e,onr),e(y8,rnr),e(Do,tnr),e(Do,ut),M(x8,ut,null),e(ut,anr),e(ut,O4e),e(O4e,nnr),e(ut,snr),e(ut,bd),e(bd,lnr),e(bd,V4e),e(V4e,inr),e(bd,dnr),e(bd,iW),e(iW,cnr),e(bd,fnr),e(ut,mnr),M(c5,ut,null),e(Do,gnr),e(Do,so),M($8,so,null),e(so,hnr),e(so,X4e),e(X4e,pnr),e(so,_nr),e(so,Qa),e(Qa,unr),e(Qa,z4e),e(z4e,bnr),e(Qa,vnr),e(Qa,Q4e),e(Q4e,Fnr),e(Qa,Tnr),e(Qa,W4e),e(W4e,Mnr),e(Qa,Enr),e(so,Cnr),e(so,H4e),e(H4e,f5),e(f5,U4e),e(U4e,wnr),e(f5,Anr),e(f5,dW),e(dW,Lnr),e(f5,ynr),e(so,xnr),e(so,m5),e(m5,$nr),e(m5,J4e),e(J4e,knr),e(m5,Snr),e(m5,Y4e),e(Y4e,Rnr),e(so,Pnr),M(g5,so,null),b(f,kXe,u),b(f,vd,u),e(vd,h5),e(h5,K4e),M(k8,K4e,null),e(vd,Bnr),e(vd,Z4e),e(Z4e,Nnr),b(f,SXe,u),b(f,Go,u),M(S8,Go,null),e(Go,Inr),e(Go,Fd),e(Fd,qnr),e(Fd,cW),e(cW,jnr),e(Fd,Dnr),e(Fd,fW),e(fW,Gnr),e(Fd,Onr),e(Go,Vnr),e(Go,R8),e(R8,Xnr),e(R8,e2e),e(e2e,znr),e(R8,Qnr),e(Go,Wnr),e(Go,bt),M(P8,bt,null),e(bt,Hnr),e(bt,o2e),e(o2e,Unr),e(bt,Jnr),e(bt,Td),e(Td,Ynr),e(Td,r2e),e(r2e,Knr),e(Td,Znr),e(Td,mW),e(mW,esr),e(Td,osr),e(bt,rsr),M(p5,bt,null),e(Go,tsr),e(Go,lo),M(B8,lo,null),e(lo,asr),e(lo,t2e),e(t2e,nsr),e(lo,ssr),e(lo,Wa),e(Wa,lsr),e(Wa,a2e),e(a2e,isr),e(Wa,dsr),e(Wa,n2e),e(n2e,csr),e(Wa,fsr),e(Wa,s2e),e(s2e,msr),e(Wa,gsr),e(lo,hsr),e(lo,ve),e(ve,_5),e(_5,l2e),e(l2e,psr),e(_5,_sr),e(_5,gW),e(gW,usr),e(_5,bsr),e(ve,vsr),e(ve,u5),e(u5,i2e),e(i2e,Fsr),e(u5,Tsr),e(u5,hW),e(hW,Msr),e(u5,Esr),e(ve,Csr),e(ve,b5),e(b5,d2e),e(d2e,wsr),e(b5,Asr),e(b5,pW),e(pW,Lsr),e(b5,ysr),e(ve,xsr),e(ve,v5),e(v5,c2e),e(c2e,$sr),e(v5,ksr),e(v5,_W),e(_W,Ssr),e(v5,Rsr),e(ve,Psr),e(ve,Hs),e(Hs,f2e),e(f2e,Bsr),e(Hs,Nsr),e(Hs,uW),e(uW,Isr),e(Hs,qsr),e(Hs,bW),e(bW,jsr),e(Hs,Dsr),e(ve,Gsr),e(ve,F5),e(F5,m2e),e(m2e,Osr),e(F5,Vsr),e(F5,vW),e(vW,Xsr),e(F5,zsr),e(ve,Qsr),e(ve,Us),e(Us,g2e),e(g2e,Wsr),e(Us,Hsr),e(Us,FW),e(FW,Usr),e(Us,Jsr),e(Us,TW),e(TW,Ysr),e(Us,Ksr),e(ve,Zsr),e(ve,T5),e(T5,h2e),e(h2e,elr),e(T5,olr),e(T5,MW),e(MW,rlr),e(T5,tlr),e(ve,alr),e(ve,vt),e(vt,p2e),e(p2e,nlr),e(vt,slr),e(vt,EW),e(EW,llr),e(vt,ilr),e(vt,CW),e(CW,dlr),e(vt,clr),e(vt,wW),e(wW,flr),e(vt,mlr),e(ve,glr),e(ve,M5),e(M5,_2e),e(_2e,hlr),e(M5,plr),e(M5,AW),e(AW,_lr),e(M5,ulr),e(ve,blr),e(ve,E5),e(E5,u2e),e(u2e,vlr),e(E5,Flr),e(E5,LW),e(LW,Tlr),e(E5,Mlr),e(ve,Elr),e(ve,C5),e(C5,b2e),e(b2e,Clr),e(C5,wlr),e(C5,yW),e(yW,Alr),e(C5,Llr),e(ve,ylr),e(ve,w5),e(w5,v2e),e(v2e,xlr),e(w5,$lr),e(w5,xW),e(xW,klr),e(w5,Slr),e(ve,Rlr),e(ve,A5),e(A5,F2e),e(F2e,Plr),e(A5,Blr),e(A5,$W),e($W,Nlr),e(A5,Ilr),e(ve,qlr),e(ve,L5),e(L5,T2e),e(T2e,jlr),e(L5,Dlr),e(L5,kW),e(kW,Glr),e(L5,Olr),e(ve,Vlr),e(ve,y5),e(y5,M2e),e(M2e,Xlr),e(y5,zlr),e(y5,SW),e(SW,Qlr),e(y5,Wlr),e(lo,Hlr),e(lo,x5),e(x5,Ulr),e(x5,E2e),e(E2e,Jlr),e(x5,Ylr),e(x5,C2e),e(C2e,Klr),e(lo,Zlr),M($5,lo,null),b(f,RXe,u),b(f,Md,u),e(Md,k5),e(k5,w2e),M(N8,w2e,null),e(Md,eir),e(Md,A2e),e(A2e,oir),b(f,PXe,u),b(f,Oo,u),M(I8,Oo,null),e(Oo,rir),e(Oo,Ed),e(Ed,tir),e(Ed,RW),e(RW,air),e(Ed,nir),e(Ed,PW),e(PW,sir),e(Ed,lir),e(Oo,iir),e(Oo,q8),e(q8,dir),e(q8,L2e),e(L2e,cir),e(q8,fir),e(Oo,mir),e(Oo,Ft),M(j8,Ft,null),e(Ft,gir),e(Ft,y2e),e(y2e,hir),e(Ft,pir),e(Ft,Cd),e(Cd,_ir),e(Cd,x2e),e(x2e,uir),e(Cd,bir),e(Cd,BW),e(BW,vir),e(Cd,Fir),e(Ft,Tir),M(S5,Ft,null),e(Oo,Mir),e(Oo,io),M(D8,io,null),e(io,Eir),e(io,$2e),e($2e,Cir),e(io,wir),e(io,Ha),e(Ha,Air),e(Ha,k2e),e(k2e,Lir),e(Ha,yir),e(Ha,S2e),e(S2e,xir),e(Ha,$ir),e(Ha,R2e),e(R2e,kir),e(Ha,Sir),e(io,Rir),e(io,P2e),e(P2e,R5),e(R5,B2e),e(B2e,Pir),e(R5,Bir),e(R5,NW),e(NW,Nir),e(R5,Iir),e(io,qir),e(io,P5),e(P5,jir),e(P5,N2e),e(N2e,Dir),e(P5,Gir),e(P5,I2e),e(I2e,Oir),e(io,Vir),M(B5,io,null),b(f,BXe,u),b(f,wd,u),e(wd,N5),e(N5,q2e),M(G8,q2e,null),e(wd,Xir),e(wd,j2e),e(j2e,zir),b(f,NXe,u),b(f,Vo,u),M(O8,Vo,null),e(Vo,Qir),e(Vo,Ad),e(Ad,Wir),e(Ad,IW),e(IW,Hir),e(Ad,Uir),e(Ad,qW),e(qW,Jir),e(Ad,Yir),e(Vo,Kir),e(Vo,V8),e(V8,Zir),e(V8,D2e),e(D2e,edr),e(V8,odr),e(Vo,rdr),e(Vo,Tt),M(X8,Tt,null),e(Tt,tdr),e(Tt,G2e),e(G2e,adr),e(Tt,ndr),e(Tt,Ld),e(Ld,sdr),e(Ld,O2e),e(O2e,ldr),e(Ld,idr),e(Ld,jW),e(jW,ddr),e(Ld,cdr),e(Tt,fdr),M(I5,Tt,null),e(Vo,mdr),e(Vo,co),M(z8,co,null),e(co,gdr),e(co,V2e),e(V2e,hdr),e(co,pdr),e(co,Ua),e(Ua,_dr),e(Ua,X2e),e(X2e,udr),e(Ua,bdr),e(Ua,z2e),e(z2e,vdr),e(Ua,Fdr),e(Ua,Q2e),e(Q2e,Tdr),e(Ua,Mdr),e(co,Edr),e(co,W2e),e(W2e,q5),e(q5,H2e),e(H2e,Cdr),e(q5,wdr),e(q5,DW),e(DW,Adr),e(q5,Ldr),e(co,ydr),e(co,j5),e(j5,xdr),e(j5,U2e),e(U2e,$dr),e(j5,kdr),e(j5,J2e),e(J2e,Sdr),e(co,Rdr),M(D5,co,null),b(f,IXe,u),b(f,yd,u),e(yd,G5),e(G5,Y2e),M(Q8,Y2e,null),e(yd,Pdr),e(yd,K2e),e(K2e,Bdr),b(f,qXe,u),b(f,Xo,u),M(W8,Xo,null),e(Xo,Ndr),e(Xo,xd),e(xd,Idr),e(xd,GW),e(GW,qdr),e(xd,jdr),e(xd,OW),e(OW,Ddr),e(xd,Gdr),e(Xo,Odr),e(Xo,H8),e(H8,Vdr),e(H8,Z2e),e(Z2e,Xdr),e(H8,zdr),e(Xo,Qdr),e(Xo,Mt),M(U8,Mt,null),e(Mt,Wdr),e(Mt,ebe),e(ebe,Hdr),e(Mt,Udr),e(Mt,$d),e($d,Jdr),e($d,obe),e(obe,Ydr),e($d,Kdr),e($d,VW),e(VW,Zdr),e($d,ecr),e(Mt,ocr),M(O5,Mt,null),e(Xo,rcr),e(Xo,fo),M(J8,fo,null),e(fo,tcr),e(fo,rbe),e(rbe,acr),e(fo,ncr),e(fo,Ja),e(Ja,scr),e(Ja,tbe),e(tbe,lcr),e(Ja,icr),e(Ja,abe),e(abe,dcr),e(Ja,ccr),e(Ja,nbe),e(nbe,fcr),e(Ja,mcr),e(fo,gcr),e(fo,Pe),e(Pe,V5),e(V5,sbe),e(sbe,hcr),e(V5,pcr),e(V5,XW),e(XW,_cr),e(V5,ucr),e(Pe,bcr),e(Pe,X5),e(X5,lbe),e(lbe,vcr),e(X5,Fcr),e(X5,zW),e(zW,Tcr),e(X5,Mcr),e(Pe,Ecr),e(Pe,z5),e(z5,ibe),e(ibe,Ccr),e(z5,wcr),e(z5,QW),e(QW,Acr),e(z5,Lcr),e(Pe,ycr),e(Pe,Q5),e(Q5,dbe),e(dbe,xcr),e(Q5,$cr),e(Q5,WW),e(WW,kcr),e(Q5,Scr),e(Pe,Rcr),e(Pe,W5),e(W5,cbe),e(cbe,Pcr),e(W5,Bcr),e(W5,HW),e(HW,Ncr),e(W5,Icr),e(Pe,qcr),e(Pe,H5),e(H5,fbe),e(fbe,jcr),e(H5,Dcr),e(H5,UW),e(UW,Gcr),e(H5,Ocr),e(Pe,Vcr),e(Pe,U5),e(U5,mbe),e(mbe,Xcr),e(U5,zcr),e(U5,JW),e(JW,Qcr),e(U5,Wcr),e(Pe,Hcr),e(Pe,J5),e(J5,gbe),e(gbe,Ucr),e(J5,Jcr),e(J5,YW),e(YW,Ycr),e(J5,Kcr),e(Pe,Zcr),e(Pe,Y5),e(Y5,hbe),e(hbe,efr),e(Y5,ofr),e(Y5,KW),e(KW,rfr),e(Y5,tfr),e(fo,afr),e(fo,K5),e(K5,nfr),e(K5,pbe),e(pbe,sfr),e(K5,lfr),e(K5,_be),e(_be,ifr),e(fo,dfr),M(Z5,fo,null),b(f,jXe,u),b(f,kd,u),e(kd,eF),e(eF,ube),M(Y8,ube,null),e(kd,cfr),e(kd,bbe),e(bbe,ffr),b(f,DXe,u),b(f,zo,u),M(K8,zo,null),e(zo,mfr),e(zo,Sd),e(Sd,gfr),e(Sd,ZW),e(ZW,hfr),e(Sd,pfr),e(Sd,eH),e(eH,_fr),e(Sd,ufr),e(zo,bfr),e(zo,Z8),e(Z8,vfr),e(Z8,vbe),e(vbe,Ffr),e(Z8,Tfr),e(zo,Mfr),e(zo,Et),M(e9,Et,null),e(Et,Efr),e(Et,Fbe),e(Fbe,Cfr),e(Et,wfr),e(Et,Rd),e(Rd,Afr),e(Rd,Tbe),e(Tbe,Lfr),e(Rd,yfr),e(Rd,oH),e(oH,xfr),e(Rd,$fr),e(Et,kfr),M(oF,Et,null),e(zo,Sfr),e(zo,mo),M(o9,mo,null),e(mo,Rfr),e(mo,Mbe),e(Mbe,Pfr),e(mo,Bfr),e(mo,Ya),e(Ya,Nfr),e(Ya,Ebe),e(Ebe,Ifr),e(Ya,qfr),e(Ya,Cbe),e(Cbe,jfr),e(Ya,Dfr),e(Ya,wbe),e(wbe,Gfr),e(Ya,Ofr),e(mo,Vfr),e(mo,ot),e(ot,rF),e(rF,Abe),e(Abe,Xfr),e(rF,zfr),e(rF,rH),e(rH,Qfr),e(rF,Wfr),e(ot,Hfr),e(ot,tF),e(tF,Lbe),e(Lbe,Ufr),e(tF,Jfr),e(tF,tH),e(tH,Yfr),e(tF,Kfr),e(ot,Zfr),e(ot,aF),e(aF,ybe),e(ybe,emr),e(aF,omr),e(aF,aH),e(aH,rmr),e(aF,tmr),e(ot,amr),e(ot,nF),e(nF,xbe),e(xbe,nmr),e(nF,smr),e(nF,nH),e(nH,lmr),e(nF,imr),e(ot,dmr),e(ot,sF),e(sF,$be),e($be,cmr),e(sF,fmr),e(sF,sH),e(sH,mmr),e(sF,gmr),e(mo,hmr),e(mo,lF),e(lF,pmr),e(lF,kbe),e(kbe,_mr),e(lF,umr),e(lF,Sbe),e(Sbe,bmr),e(mo,vmr),M(iF,mo,null),b(f,GXe,u),b(f,Pd,u),e(Pd,dF),e(dF,Rbe),M(r9,Rbe,null),e(Pd,Fmr),e(Pd,Pbe),e(Pbe,Tmr),b(f,OXe,u),b(f,Qo,u),M(t9,Qo,null),e(Qo,Mmr),e(Qo,Bd),e(Bd,Emr),e(Bd,lH),e(lH,Cmr),e(Bd,wmr),e(Bd,iH),e(iH,Amr),e(Bd,Lmr),e(Qo,ymr),e(Qo,a9),e(a9,xmr),e(a9,Bbe),e(Bbe,$mr),e(a9,kmr),e(Qo,Smr),e(Qo,Ct),M(n9,Ct,null),e(Ct,Rmr),e(Ct,Nbe),e(Nbe,Pmr),e(Ct,Bmr),e(Ct,Nd),e(Nd,Nmr),e(Nd,Ibe),e(Ibe,Imr),e(Nd,qmr),e(Nd,dH),e(dH,jmr),e(Nd,Dmr),e(Ct,Gmr),M(cF,Ct,null),e(Qo,Omr),e(Qo,go),M(s9,go,null),e(go,Vmr),e(go,qbe),e(qbe,Xmr),e(go,zmr),e(go,Ka),e(Ka,Qmr),e(Ka,jbe),e(jbe,Wmr),e(Ka,Hmr),e(Ka,Dbe),e(Dbe,Umr),e(Ka,Jmr),e(Ka,Gbe),e(Gbe,Ymr),e(Ka,Kmr),e(go,Zmr),e(go,Le),e(Le,fF),e(fF,Obe),e(Obe,egr),e(fF,ogr),e(fF,cH),e(cH,rgr),e(fF,tgr),e(Le,agr),e(Le,mF),e(mF,Vbe),e(Vbe,ngr),e(mF,sgr),e(mF,fH),e(fH,lgr),e(mF,igr),e(Le,dgr),e(Le,gF),e(gF,Xbe),e(Xbe,cgr),e(gF,fgr),e(gF,mH),e(mH,mgr),e(gF,ggr),e(Le,hgr),e(Le,hF),e(hF,zbe),e(zbe,pgr),e(hF,_gr),e(hF,gH),e(gH,ugr),e(hF,bgr),e(Le,vgr),e(Le,pF),e(pF,Qbe),e(Qbe,Fgr),e(pF,Tgr),e(pF,hH),e(hH,Mgr),e(pF,Egr),e(Le,Cgr),e(Le,_F),e(_F,Wbe),e(Wbe,wgr),e(_F,Agr),e(_F,pH),e(pH,Lgr),e(_F,ygr),e(Le,xgr),e(Le,uF),e(uF,Hbe),e(Hbe,$gr),e(uF,kgr),e(uF,_H),e(_H,Sgr),e(uF,Rgr),e(Le,Pgr),e(Le,bF),e(bF,Ube),e(Ube,Bgr),e(bF,Ngr),e(bF,uH),e(uH,Igr),e(bF,qgr),e(Le,jgr),e(Le,vF),e(vF,Jbe),e(Jbe,Dgr),e(vF,Ggr),e(vF,bH),e(bH,Ogr),e(vF,Vgr),e(Le,Xgr),e(Le,FF),e(FF,Ybe),e(Ybe,zgr),e(FF,Qgr),e(FF,vH),e(vH,Wgr),e(FF,Hgr),e(go,Ugr),e(go,TF),e(TF,Jgr),e(TF,Kbe),e(Kbe,Ygr),e(TF,Kgr),e(TF,Zbe),e(Zbe,Zgr),e(go,ehr),M(MF,go,null),b(f,VXe,u),b(f,Id,u),e(Id,EF),e(EF,eve),M(l9,eve,null),e(Id,ohr),e(Id,ove),e(ove,rhr),b(f,XXe,u),b(f,Wo,u),M(i9,Wo,null),e(Wo,thr),e(Wo,qd),e(qd,ahr),e(qd,FH),e(FH,nhr),e(qd,shr),e(qd,TH),e(TH,lhr),e(qd,ihr),e(Wo,dhr),e(Wo,d9),e(d9,chr),e(d9,rve),e(rve,fhr),e(d9,mhr),e(Wo,ghr),e(Wo,wt),M(c9,wt,null),e(wt,hhr),e(wt,tve),e(tve,phr),e(wt,_hr),e(wt,jd),e(jd,uhr),e(jd,ave),e(ave,bhr),e(jd,vhr),e(jd,MH),e(MH,Fhr),e(jd,Thr),e(wt,Mhr),M(CF,wt,null),e(Wo,Ehr),e(Wo,ho),M(f9,ho,null),e(ho,Chr),e(ho,nve),e(nve,whr),e(ho,Ahr),e(ho,Za),e(Za,Lhr),e(Za,sve),e(sve,yhr),e(Za,xhr),e(Za,lve),e(lve,$hr),e(Za,khr),e(Za,ive),e(ive,Shr),e(Za,Rhr),e(ho,Phr),e(ho,m9),e(m9,wF),e(wF,dve),e(dve,Bhr),e(wF,Nhr),e(wF,EH),e(EH,Ihr),e(wF,qhr),e(m9,jhr),e(m9,AF),e(AF,cve),e(cve,Dhr),e(AF,Ghr),e(AF,CH),e(CH,Ohr),e(AF,Vhr),e(ho,Xhr),e(ho,LF),e(LF,zhr),e(LF,fve),e(fve,Qhr),e(LF,Whr),e(LF,mve),e(mve,Hhr),e(ho,Uhr),M(yF,ho,null),b(f,zXe,u),b(f,Dd,u),e(Dd,xF),e(xF,gve),M(g9,gve,null),e(Dd,Jhr),e(Dd,hve),e(hve,Yhr),b(f,QXe,u),b(f,Ho,u),M(h9,Ho,null),e(Ho,Khr),e(Ho,Gd),e(Gd,Zhr),e(Gd,wH),e(wH,epr),e(Gd,opr),e(Gd,AH),e(AH,rpr),e(Gd,tpr),e(Ho,apr),e(Ho,p9),e(p9,npr),e(p9,pve),e(pve,spr),e(p9,lpr),e(Ho,ipr),e(Ho,At),M(_9,At,null),e(At,dpr),e(At,_ve),e(_ve,cpr),e(At,fpr),e(At,Od),e(Od,mpr),e(Od,uve),e(uve,gpr),e(Od,hpr),e(Od,LH),e(LH,ppr),e(Od,_pr),e(At,upr),M($F,At,null),e(Ho,bpr),e(Ho,po),M(u9,po,null),e(po,vpr),e(po,bve),e(bve,Fpr),e(po,Tpr),e(po,en),e(en,Mpr),e(en,vve),e(vve,Epr),e(en,Cpr),e(en,Fve),e(Fve,wpr),e(en,Apr),e(en,Tve),e(Tve,Lpr),e(en,ypr),e(po,xpr),e(po,rt),e(rt,kF),e(kF,Mve),e(Mve,$pr),e(kF,kpr),e(kF,yH),e(yH,Spr),e(kF,Rpr),e(rt,Ppr),e(rt,SF),e(SF,Eve),e(Eve,Bpr),e(SF,Npr),e(SF,xH),e(xH,Ipr),e(SF,qpr),e(rt,jpr),e(rt,RF),e(RF,Cve),e(Cve,Dpr),e(RF,Gpr),e(RF,$H),e($H,Opr),e(RF,Vpr),e(rt,Xpr),e(rt,PF),e(PF,wve),e(wve,zpr),e(PF,Qpr),e(PF,kH),e(kH,Wpr),e(PF,Hpr),e(rt,Upr),e(rt,BF),e(BF,Ave),e(Ave,Jpr),e(BF,Ypr),e(BF,SH),e(SH,Kpr),e(BF,Zpr),e(po,e_r),e(po,NF),e(NF,o_r),e(NF,Lve),e(Lve,r_r),e(NF,t_r),e(NF,yve),e(yve,a_r),e(po,n_r),M(IF,po,null),b(f,WXe,u),b(f,Vd,u),e(Vd,qF),e(qF,xve),M(b9,xve,null),e(Vd,s_r),e(Vd,$ve),e($ve,l_r),b(f,HXe,u),b(f,Uo,u),M(v9,Uo,null),e(Uo,i_r),e(Uo,Xd),e(Xd,d_r),e(Xd,RH),e(RH,c_r),e(Xd,f_r),e(Xd,PH),e(PH,m_r),e(Xd,g_r),e(Uo,h_r),e(Uo,F9),e(F9,p_r),e(F9,kve),e(kve,__r),e(F9,u_r),e(Uo,b_r),e(Uo,Lt),M(T9,Lt,null),e(Lt,v_r),e(Lt,Sve),e(Sve,F_r),e(Lt,T_r),e(Lt,zd),e(zd,M_r),e(zd,Rve),e(Rve,E_r),e(zd,C_r),e(zd,BH),e(BH,w_r),e(zd,A_r),e(Lt,L_r),M(jF,Lt,null),e(Uo,y_r),e(Uo,_o),M(M9,_o,null),e(_o,x_r),e(_o,Pve),e(Pve,$_r),e(_o,k_r),e(_o,on),e(on,S_r),e(on,Bve),e(Bve,R_r),e(on,P_r),e(on,Nve),e(Nve,B_r),e(on,N_r),e(on,Ive),e(Ive,I_r),e(on,q_r),e(_o,j_r),e(_o,Qd),e(Qd,DF),e(DF,qve),e(qve,D_r),e(DF,G_r),e(DF,NH),e(NH,O_r),e(DF,V_r),e(Qd,X_r),e(Qd,GF),e(GF,jve),e(jve,z_r),e(GF,Q_r),e(GF,IH),e(IH,W_r),e(GF,H_r),e(Qd,U_r),e(Qd,OF),e(OF,Dve),e(Dve,J_r),e(OF,Y_r),e(OF,qH),e(qH,K_r),e(OF,Z_r),e(_o,eur),e(_o,VF),e(VF,our),e(VF,Gve),e(Gve,rur),e(VF,tur),e(VF,Ove),e(Ove,aur),e(_o,nur),M(XF,_o,null),b(f,UXe,u),b(f,Wd,u),e(Wd,zF),e(zF,Vve),M(E9,Vve,null),e(Wd,sur),e(Wd,Xve),e(Xve,lur),b(f,JXe,u),b(f,Jo,u),M(C9,Jo,null),e(Jo,iur),e(Jo,Hd),e(Hd,dur),e(Hd,jH),e(jH,cur),e(Hd,fur),e(Hd,DH),e(DH,mur),e(Hd,gur),e(Jo,hur),e(Jo,w9),e(w9,pur),e(w9,zve),e(zve,_ur),e(w9,uur),e(Jo,bur),e(Jo,yt),M(A9,yt,null),e(yt,vur),e(yt,Qve),e(Qve,Fur),e(yt,Tur),e(yt,Ud),e(Ud,Mur),e(Ud,Wve),e(Wve,Eur),e(Ud,Cur),e(Ud,GH),e(GH,wur),e(Ud,Aur),e(yt,Lur),M(QF,yt,null),e(Jo,yur),e(Jo,uo),M(L9,uo,null),e(uo,xur),e(uo,Hve),e(Hve,$ur),e(uo,kur),e(uo,rn),e(rn,Sur),e(rn,Uve),e(Uve,Rur),e(rn,Pur),e(rn,Jve),e(Jve,Bur),e(rn,Nur),e(rn,Yve),e(Yve,Iur),e(rn,qur),e(uo,jur),e(uo,y9),e(y9,WF),e(WF,Kve),e(Kve,Dur),e(WF,Gur),e(WF,OH),e(OH,Our),e(WF,Vur),e(y9,Xur),e(y9,HF),e(HF,Zve),e(Zve,zur),e(HF,Qur),e(HF,VH),e(VH,Wur),e(HF,Hur),e(uo,Uur),e(uo,UF),e(UF,Jur),e(UF,e3e),e(e3e,Yur),e(UF,Kur),e(UF,o3e),e(o3e,Zur),e(uo,e1r),M(JF,uo,null),b(f,YXe,u),b(f,Jd,u),e(Jd,YF),e(YF,r3e),M(x9,r3e,null),e(Jd,o1r),e(Jd,t3e),e(t3e,r1r),b(f,KXe,u),b(f,Yo,u),M($9,Yo,null),e(Yo,t1r),e(Yo,Yd),e(Yd,a1r),e(Yd,XH),e(XH,n1r),e(Yd,s1r),e(Yd,zH),e(zH,l1r),e(Yd,i1r),e(Yo,d1r),e(Yo,k9),e(k9,c1r),e(k9,a3e),e(a3e,f1r),e(k9,m1r),e(Yo,g1r),e(Yo,xt),M(S9,xt,null),e(xt,h1r),e(xt,n3e),e(n3e,p1r),e(xt,_1r),e(xt,Kd),e(Kd,u1r),e(Kd,s3e),e(s3e,b1r),e(Kd,v1r),e(Kd,QH),e(QH,F1r),e(Kd,T1r),e(xt,M1r),M(KF,xt,null),e(Yo,E1r),e(Yo,bo),M(R9,bo,null),e(bo,C1r),e(bo,l3e),e(l3e,w1r),e(bo,A1r),e(bo,tn),e(tn,L1r),e(tn,i3e),e(i3e,y1r),e(tn,x1r),e(tn,d3e),e(d3e,$1r),e(tn,k1r),e(tn,c3e),e(c3e,S1r),e(tn,R1r),e(bo,P1r),e(bo,f3e),e(f3e,ZF),e(ZF,m3e),e(m3e,B1r),e(ZF,N1r),e(ZF,WH),e(WH,I1r),e(ZF,q1r),e(bo,j1r),e(bo,e6),e(e6,D1r),e(e6,g3e),e(g3e,G1r),e(e6,O1r),e(e6,h3e),e(h3e,V1r),e(bo,X1r),M(o6,bo,null),b(f,ZXe,u),b(f,Zd,u),e(Zd,r6),e(r6,p3e),M(P9,p3e,null),e(Zd,z1r),e(Zd,_3e),e(_3e,Q1r),b(f,eze,u),b(f,Ko,u),M(B9,Ko,null),e(Ko,W1r),e(Ko,ec),e(ec,H1r),e(ec,HH),e(HH,U1r),e(ec,J1r),e(ec,UH),e(UH,Y1r),e(ec,K1r),e(Ko,Z1r),e(Ko,N9),e(N9,e4r),e(N9,u3e),e(u3e,o4r),e(N9,r4r),e(Ko,t4r),e(Ko,$t),M(I9,$t,null),e($t,a4r),e($t,b3e),e(b3e,n4r),e($t,s4r),e($t,oc),e(oc,l4r),e(oc,v3e),e(v3e,i4r),e(oc,d4r),e(oc,JH),e(JH,c4r),e(oc,f4r),e($t,m4r),M(t6,$t,null),e(Ko,g4r),e(Ko,vo),M(q9,vo,null),e(vo,h4r),e(vo,F3e),e(F3e,p4r),e(vo,_4r),e(vo,an),e(an,u4r),e(an,T3e),e(T3e,b4r),e(an,v4r),e(an,M3e),e(M3e,F4r),e(an,T4r),e(an,E3e),e(E3e,M4r),e(an,E4r),e(vo,C4r),e(vo,tt),e(tt,a6),e(a6,C3e),e(C3e,w4r),e(a6,A4r),e(a6,YH),e(YH,L4r),e(a6,y4r),e(tt,x4r),e(tt,n6),e(n6,w3e),e(w3e,$4r),e(n6,k4r),e(n6,KH),e(KH,S4r),e(n6,R4r),e(tt,P4r),e(tt,s6),e(s6,A3e),e(A3e,B4r),e(s6,N4r),e(s6,ZH),e(ZH,I4r),e(s6,q4r),e(tt,j4r),e(tt,l6),e(l6,L3e),e(L3e,D4r),e(l6,G4r),e(l6,eU),e(eU,O4r),e(l6,V4r),e(tt,X4r),e(tt,i6),e(i6,y3e),e(y3e,z4r),e(i6,Q4r),e(i6,oU),e(oU,W4r),e(i6,H4r),e(vo,U4r),e(vo,d6),e(d6,J4r),e(d6,x3e),e(x3e,Y4r),e(d6,K4r),e(d6,$3e),e($3e,Z4r),e(vo,e2r),M(c6,vo,null),b(f,oze,u),b(f,rc,u),e(rc,f6),e(f6,k3e),M(j9,k3e,null),e(rc,o2r),e(rc,S3e),e(S3e,r2r),b(f,rze,u),b(f,Zo,u),M(D9,Zo,null),e(Zo,t2r),e(Zo,tc),e(tc,a2r),e(tc,rU),e(rU,n2r),e(tc,s2r),e(tc,tU),e(tU,l2r),e(tc,i2r),e(Zo,d2r),e(Zo,G9),e(G9,c2r),e(G9,R3e),e(R3e,f2r),e(G9,m2r),e(Zo,g2r),e(Zo,kt),M(O9,kt,null),e(kt,h2r),e(kt,P3e),e(P3e,p2r),e(kt,_2r),e(kt,ac),e(ac,u2r),e(ac,B3e),e(B3e,b2r),e(ac,v2r),e(ac,aU),e(aU,F2r),e(ac,T2r),e(kt,M2r),M(m6,kt,null),e(Zo,E2r),e(Zo,Fo),M(V9,Fo,null),e(Fo,C2r),e(Fo,N3e),e(N3e,w2r),e(Fo,A2r),e(Fo,nn),e(nn,L2r),e(nn,I3e),e(I3e,y2r),e(nn,x2r),e(nn,q3e),e(q3e,$2r),e(nn,k2r),e(nn,j3e),e(j3e,S2r),e(nn,R2r),e(Fo,P2r),e(Fo,D3e),e(D3e,g6),e(g6,G3e),e(G3e,B2r),e(g6,N2r),e(g6,nU),e(nU,I2r),e(g6,q2r),e(Fo,j2r),e(Fo,h6),e(h6,D2r),e(h6,O3e),e(O3e,G2r),e(h6,O2r),e(h6,V3e),e(V3e,V2r),e(Fo,X2r),M(p6,Fo,null),b(f,tze,u),b(f,nc,u),e(nc,_6),e(_6,X3e),M(X9,X3e,null),e(nc,z2r),e(nc,z3e),e(z3e,Q2r),b(f,aze,u),b(f,er,u),M(z9,er,null),e(er,W2r),e(er,sc),e(sc,H2r),e(sc,sU),e(sU,U2r),e(sc,J2r),e(sc,lU),e(lU,Y2r),e(sc,K2r),e(er,Z2r),e(er,Q9),e(Q9,ebr),e(Q9,Q3e),e(Q3e,obr),e(Q9,rbr),e(er,tbr),e(er,St),M(W9,St,null),e(St,abr),e(St,W3e),e(W3e,nbr),e(St,sbr),e(St,lc),e(lc,lbr),e(lc,H3e),e(H3e,ibr),e(lc,dbr),e(lc,iU),e(iU,cbr),e(lc,fbr),e(St,mbr),M(u6,St,null),e(er,gbr),e(er,xr),M(H9,xr,null),e(xr,hbr),e(xr,U3e),e(U3e,pbr),e(xr,_br),e(xr,sn),e(sn,ubr),e(sn,J3e),e(J3e,bbr),e(sn,vbr),e(sn,Y3e),e(Y3e,Fbr),e(sn,Tbr),e(sn,K3e),e(K3e,Mbr),e(sn,Ebr),e(xr,Cbr),e(xr,q),e(q,b6),e(b6,Z3e),e(Z3e,wbr),e(b6,Abr),e(b6,dU),e(dU,Lbr),e(b6,ybr),e(q,xbr),e(q,v6),e(v6,e5e),e(e5e,$br),e(v6,kbr),e(v6,cU),e(cU,Sbr),e(v6,Rbr),e(q,Pbr),e(q,F6),e(F6,o5e),e(o5e,Bbr),e(F6,Nbr),e(F6,fU),e(fU,Ibr),e(F6,qbr),e(q,jbr),e(q,T6),e(T6,r5e),e(r5e,Dbr),e(T6,Gbr),e(T6,mU),e(mU,Obr),e(T6,Vbr),e(q,Xbr),e(q,M6),e(M6,t5e),e(t5e,zbr),e(M6,Qbr),e(M6,gU),e(gU,Wbr),e(M6,Hbr),e(q,Ubr),e(q,E6),e(E6,a5e),e(a5e,Jbr),e(E6,Ybr),e(E6,hU),e(hU,Kbr),e(E6,Zbr),e(q,evr),e(q,C6),e(C6,n5e),e(n5e,ovr),e(C6,rvr),e(C6,pU),e(pU,tvr),e(C6,avr),e(q,nvr),e(q,w6),e(w6,s5e),e(s5e,svr),e(w6,lvr),e(w6,_U),e(_U,ivr),e(w6,dvr),e(q,cvr),e(q,A6),e(A6,l5e),e(l5e,fvr),e(A6,mvr),e(A6,uU),e(uU,gvr),e(A6,hvr),e(q,pvr),e(q,L6),e(L6,i5e),e(i5e,_vr),e(L6,uvr),e(L6,bU),e(bU,bvr),e(L6,vvr),e(q,Fvr),e(q,y6),e(y6,d5e),e(d5e,Tvr),e(y6,Mvr),e(y6,vU),e(vU,Evr),e(y6,Cvr),e(q,wvr),e(q,x6),e(x6,c5e),e(c5e,Avr),e(x6,Lvr),e(x6,FU),e(FU,yvr),e(x6,xvr),e(q,$vr),e(q,$6),e($6,f5e),e(f5e,kvr),e($6,Svr),e($6,TU),e(TU,Rvr),e($6,Pvr),e(q,Bvr),e(q,k6),e(k6,m5e),e(m5e,Nvr),e(k6,Ivr),e(k6,MU),e(MU,qvr),e(k6,jvr),e(q,Dvr),e(q,S6),e(S6,g5e),e(g5e,Gvr),e(S6,Ovr),e(S6,EU),e(EU,Vvr),e(S6,Xvr),e(q,zvr),e(q,R6),e(R6,h5e),e(h5e,Qvr),e(R6,Wvr),e(R6,CU),e(CU,Hvr),e(R6,Uvr),e(q,Jvr),e(q,P6),e(P6,p5e),e(p5e,Yvr),e(P6,Kvr),e(P6,wU),e(wU,Zvr),e(P6,e3r),e(q,o3r),e(q,Js),e(Js,_5e),e(_5e,r3r),e(Js,t3r),e(Js,AU),e(AU,a3r),e(Js,n3r),e(Js,LU),e(LU,s3r),e(Js,l3r),e(q,i3r),e(q,B6),e(B6,u5e),e(u5e,d3r),e(B6,c3r),e(B6,yU),e(yU,f3r),e(B6,m3r),e(q,g3r),e(q,N6),e(N6,b5e),e(b5e,h3r),e(N6,p3r),e(N6,xU),e(xU,_3r),e(N6,u3r),e(q,b3r),e(q,I6),e(I6,v5e),e(v5e,v3r),e(I6,F3r),e(I6,$U),e($U,T3r),e(I6,M3r),e(q,E3r),e(q,q6),e(q6,F5e),e(F5e,C3r),e(q6,w3r),e(q6,kU),e(kU,A3r),e(q6,L3r),e(q,y3r),e(q,j6),e(j6,T5e),e(T5e,x3r),e(j6,$3r),e(j6,SU),e(SU,k3r),e(j6,S3r),e(q,R3r),e(q,D6),e(D6,M5e),e(M5e,P3r),e(D6,B3r),e(D6,RU),e(RU,N3r),e(D6,I3r),e(q,q3r),e(q,G6),e(G6,E5e),e(E5e,j3r),e(G6,D3r),e(G6,PU),e(PU,G3r),e(G6,O3r),e(q,V3r),e(q,O6),e(O6,C5e),e(C5e,X3r),e(O6,z3r),e(O6,BU),e(BU,Q3r),e(O6,W3r),e(q,H3r),e(q,V6),e(V6,w5e),e(w5e,U3r),e(V6,J3r),e(V6,NU),e(NU,Y3r),e(V6,K3r),e(q,Z3r),e(q,X6),e(X6,A5e),e(A5e,e5r),e(X6,o5r),e(X6,IU),e(IU,r5r),e(X6,t5r),e(q,a5r),e(q,z6),e(z6,L5e),e(L5e,n5r),e(z6,s5r),e(z6,qU),e(qU,l5r),e(z6,i5r),e(q,d5r),e(q,Q6),e(Q6,y5e),e(y5e,c5r),e(Q6,f5r),e(Q6,jU),e(jU,m5r),e(Q6,g5r),e(q,h5r),e(q,W6),e(W6,x5e),e(x5e,p5r),e(W6,_5r),e(W6,DU),e(DU,u5r),e(W6,b5r),e(q,v5r),e(q,H6),e(H6,$5e),e($5e,F5r),e(H6,T5r),e(H6,GU),e(GU,M5r),e(H6,E5r),e(q,C5r),e(q,U6),e(U6,k5e),e(k5e,w5r),e(U6,A5r),e(U6,OU),e(OU,L5r),e(U6,y5r),e(q,x5r),e(q,J6),e(J6,S5e),e(S5e,$5r),e(J6,k5r),e(J6,VU),e(VU,S5r),e(J6,R5r),e(q,P5r),e(q,Y6),e(Y6,R5e),e(R5e,B5r),e(Y6,N5r),e(Y6,XU),e(XU,I5r),e(Y6,q5r),e(q,j5r),e(q,K6),e(K6,P5e),e(P5e,D5r),e(K6,G5r),e(K6,zU),e(zU,O5r),e(K6,V5r),e(q,X5r),e(q,Z6),e(Z6,B5e),e(B5e,z5r),e(Z6,Q5r),e(Z6,QU),e(QU,W5r),e(Z6,H5r),e(q,U5r),e(q,eT),e(eT,N5e),e(N5e,J5r),e(eT,Y5r),e(eT,WU),e(WU,K5r),e(eT,Z5r),e(q,eFr),e(q,oT),e(oT,I5e),e(I5e,oFr),e(oT,rFr),e(oT,HU),e(HU,tFr),e(oT,aFr),e(q,nFr),e(q,rT),e(rT,q5e),e(q5e,sFr),e(rT,lFr),e(rT,UU),e(UU,iFr),e(rT,dFr),e(q,cFr),e(q,tT),e(tT,j5e),e(j5e,fFr),e(tT,mFr),e(tT,JU),e(JU,gFr),e(tT,hFr),e(q,pFr),e(q,aT),e(aT,D5e),e(D5e,_Fr),e(aT,uFr),e(aT,YU),e(YU,bFr),e(aT,vFr),e(q,FFr),e(q,nT),e(nT,G5e),e(G5e,TFr),e(nT,MFr),e(nT,KU),e(KU,EFr),e(nT,CFr),e(q,wFr),e(q,sT),e(sT,O5e),e(O5e,AFr),e(sT,LFr),e(sT,ZU),e(ZU,yFr),e(sT,xFr),e(q,$Fr),e(q,lT),e(lT,V5e),e(V5e,kFr),e(lT,SFr),e(lT,eJ),e(eJ,RFr),e(lT,PFr),e(q,BFr),e(q,iT),e(iT,X5e),e(X5e,NFr),e(iT,IFr),e(iT,oJ),e(oJ,qFr),e(iT,jFr),e(q,DFr),e(q,dT),e(dT,z5e),e(z5e,GFr),e(dT,OFr),e(dT,rJ),e(rJ,VFr),e(dT,XFr),e(q,zFr),e(q,cT),e(cT,Q5e),e(Q5e,QFr),e(cT,WFr),e(cT,tJ),e(tJ,HFr),e(cT,UFr),e(q,JFr),e(q,fT),e(fT,W5e),e(W5e,YFr),e(fT,KFr),e(fT,aJ),e(aJ,ZFr),e(fT,e6r),e(q,o6r),e(q,mT),e(mT,H5e),e(H5e,r6r),e(mT,t6r),e(mT,nJ),e(nJ,a6r),e(mT,n6r),e(xr,s6r),M(gT,xr,null),b(f,nze,u),b(f,ic,u),e(ic,hT),e(hT,U5e),M(U9,U5e,null),e(ic,l6r),e(ic,J5e),e(J5e,i6r),b(f,sze,u),b(f,or,u),M(J9,or,null),e(or,d6r),e(or,dc),e(dc,c6r),e(dc,sJ),e(sJ,f6r),e(dc,m6r),e(dc,lJ),e(lJ,g6r),e(dc,h6r),e(or,p6r),e(or,Y9),e(Y9,_6r),e(Y9,Y5e),e(Y5e,u6r),e(Y9,b6r),e(or,v6r),e(or,Rt),M(K9,Rt,null),e(Rt,F6r),e(Rt,K5e),e(K5e,T6r),e(Rt,M6r),e(Rt,cc),e(cc,E6r),e(cc,Z5e),e(Z5e,C6r),e(cc,w6r),e(cc,iJ),e(iJ,A6r),e(cc,L6r),e(Rt,y6r),M(pT,Rt,null),e(or,x6r),e(or,$r),M(Z9,$r,null),e($r,$6r),e($r,eFe),e(eFe,k6r),e($r,S6r),e($r,ln),e(ln,R6r),e(ln,oFe),e(oFe,P6r),e(ln,B6r),e(ln,rFe),e(rFe,N6r),e(ln,I6r),e(ln,tFe),e(tFe,q6r),e(ln,j6r),e($r,D6r),e($r,se),e(se,_T),e(_T,aFe),e(aFe,G6r),e(_T,O6r),e(_T,dJ),e(dJ,V6r),e(_T,X6r),e(se,z6r),e(se,uT),e(uT,nFe),e(nFe,Q6r),e(uT,W6r),e(uT,cJ),e(cJ,H6r),e(uT,U6r),e(se,J6r),e(se,bT),e(bT,sFe),e(sFe,Y6r),e(bT,K6r),e(bT,fJ),e(fJ,Z6r),e(bT,eTr),e(se,oTr),e(se,vT),e(vT,lFe),e(lFe,rTr),e(vT,tTr),e(vT,mJ),e(mJ,aTr),e(vT,nTr),e(se,sTr),e(se,FT),e(FT,iFe),e(iFe,lTr),e(FT,iTr),e(FT,gJ),e(gJ,dTr),e(FT,cTr),e(se,fTr),e(se,TT),e(TT,dFe),e(dFe,mTr),e(TT,gTr),e(TT,hJ),e(hJ,hTr),e(TT,pTr),e(se,_Tr),e(se,MT),e(MT,cFe),e(cFe,uTr),e(MT,bTr),e(MT,pJ),e(pJ,vTr),e(MT,FTr),e(se,TTr),e(se,ET),e(ET,fFe),e(fFe,MTr),e(ET,ETr),e(ET,_J),e(_J,CTr),e(ET,wTr),e(se,ATr),e(se,CT),e(CT,mFe),e(mFe,LTr),e(CT,yTr),e(CT,uJ),e(uJ,xTr),e(CT,$Tr),e(se,kTr),e(se,wT),e(wT,gFe),e(gFe,STr),e(wT,RTr),e(wT,bJ),e(bJ,PTr),e(wT,BTr),e(se,NTr),e(se,AT),e(AT,hFe),e(hFe,ITr),e(AT,qTr),e(AT,vJ),e(vJ,jTr),e(AT,DTr),e(se,GTr),e(se,LT),e(LT,pFe),e(pFe,OTr),e(LT,VTr),e(LT,FJ),e(FJ,XTr),e(LT,zTr),e(se,QTr),e(se,yT),e(yT,_Fe),e(_Fe,WTr),e(yT,HTr),e(yT,TJ),e(TJ,UTr),e(yT,JTr),e(se,YTr),e(se,xT),e(xT,uFe),e(uFe,KTr),e(xT,ZTr),e(xT,MJ),e(MJ,eMr),e(xT,oMr),e(se,rMr),e(se,$T),e($T,bFe),e(bFe,tMr),e($T,aMr),e($T,EJ),e(EJ,nMr),e($T,sMr),e(se,lMr),e(se,kT),e(kT,vFe),e(vFe,iMr),e(kT,dMr),e(kT,CJ),e(CJ,cMr),e(kT,fMr),e(se,mMr),e(se,ST),e(ST,FFe),e(FFe,gMr),e(ST,hMr),e(ST,wJ),e(wJ,pMr),e(ST,_Mr),e(se,uMr),e(se,RT),e(RT,TFe),e(TFe,bMr),e(RT,vMr),e(RT,AJ),e(AJ,FMr),e(RT,TMr),e(se,MMr),e(se,PT),e(PT,MFe),e(MFe,EMr),e(PT,CMr),e(PT,LJ),e(LJ,wMr),e(PT,AMr),e(se,LMr),e(se,BT),e(BT,EFe),e(EFe,yMr),e(BT,xMr),e(BT,yJ),e(yJ,$Mr),e(BT,kMr),e(se,SMr),e(se,NT),e(NT,CFe),e(CFe,RMr),e(NT,PMr),e(NT,xJ),e(xJ,BMr),e(NT,NMr),e(se,IMr),e(se,IT),e(IT,wFe),e(wFe,qMr),e(IT,jMr),e(IT,$J),e($J,DMr),e(IT,GMr),e(se,OMr),e(se,qT),e(qT,AFe),e(AFe,VMr),e(qT,XMr),e(qT,kJ),e(kJ,zMr),e(qT,QMr),e($r,WMr),M(jT,$r,null),b(f,lze,u),b(f,fc,u),e(fc,DT),e(DT,LFe),M(ex,LFe,null),e(fc,HMr),e(fc,yFe),e(yFe,UMr),b(f,ize,u),b(f,rr,u),M(ox,rr,null),e(rr,JMr),e(rr,mc),e(mc,YMr),e(mc,SJ),e(SJ,KMr),e(mc,ZMr),e(mc,RJ),e(RJ,eEr),e(mc,oEr),e(rr,rEr),e(rr,rx),e(rx,tEr),e(rx,xFe),e(xFe,aEr),e(rx,nEr),e(rr,sEr),e(rr,Pt),M(tx,Pt,null),e(Pt,lEr),e(Pt,$Fe),e($Fe,iEr),e(Pt,dEr),e(Pt,gc),e(gc,cEr),e(gc,kFe),e(kFe,fEr),e(gc,mEr),e(gc,PJ),e(PJ,gEr),e(gc,hEr),e(Pt,pEr),M(GT,Pt,null),e(rr,_Er),e(rr,kr),M(ax,kr,null),e(kr,uEr),e(kr,SFe),e(SFe,bEr),e(kr,vEr),e(kr,dn),e(dn,FEr),e(dn,RFe),e(RFe,TEr),e(dn,MEr),e(dn,PFe),e(PFe,EEr),e(dn,CEr),e(dn,BFe),e(BFe,wEr),e(dn,AEr),e(kr,LEr),e(kr,Me),e(Me,OT),e(OT,NFe),e(NFe,yEr),e(OT,xEr),e(OT,BJ),e(BJ,$Er),e(OT,kEr),e(Me,SEr),e(Me,VT),e(VT,IFe),e(IFe,REr),e(VT,PEr),e(VT,NJ),e(NJ,BEr),e(VT,NEr),e(Me,IEr),e(Me,XT),e(XT,qFe),e(qFe,qEr),e(XT,jEr),e(XT,IJ),e(IJ,DEr),e(XT,GEr),e(Me,OEr),e(Me,zT),e(zT,jFe),e(jFe,VEr),e(zT,XEr),e(zT,qJ),e(qJ,zEr),e(zT,QEr),e(Me,WEr),e(Me,QT),e(QT,DFe),e(DFe,HEr),e(QT,UEr),e(QT,jJ),e(jJ,JEr),e(QT,YEr),e(Me,KEr),e(Me,WT),e(WT,GFe),e(GFe,ZEr),e(WT,eCr),e(WT,DJ),e(DJ,oCr),e(WT,rCr),e(Me,tCr),e(Me,HT),e(HT,OFe),e(OFe,aCr),e(HT,nCr),e(HT,GJ),e(GJ,sCr),e(HT,lCr),e(Me,iCr),e(Me,UT),e(UT,VFe),e(VFe,dCr),e(UT,cCr),e(UT,OJ),e(OJ,fCr),e(UT,mCr),e(Me,gCr),e(Me,JT),e(JT,XFe),e(XFe,hCr),e(JT,pCr),e(JT,VJ),e(VJ,_Cr),e(JT,uCr),e(Me,bCr),e(Me,YT),e(YT,zFe),e(zFe,vCr),e(YT,FCr),e(YT,XJ),e(XJ,TCr),e(YT,MCr),e(Me,ECr),e(Me,KT),e(KT,QFe),e(QFe,CCr),e(KT,wCr),e(KT,zJ),e(zJ,ACr),e(KT,LCr),e(Me,yCr),e(Me,ZT),e(ZT,WFe),e(WFe,xCr),e(ZT,$Cr),e(ZT,QJ),e(QJ,kCr),e(ZT,SCr),e(Me,RCr),e(Me,eM),e(eM,HFe),e(HFe,PCr),e(eM,BCr),e(eM,WJ),e(WJ,NCr),e(eM,ICr),e(Me,qCr),e(Me,oM),e(oM,UFe),e(UFe,jCr),e(oM,DCr),e(oM,HJ),e(HJ,GCr),e(oM,OCr),e(kr,VCr),M(rM,kr,null),b(f,dze,u),b(f,hc,u),e(hc,tM),e(tM,JFe),M(nx,JFe,null),e(hc,XCr),e(hc,YFe),e(YFe,zCr),b(f,cze,u),b(f,tr,u),M(sx,tr,null),e(tr,QCr),e(tr,pc),e(pc,WCr),e(pc,UJ),e(UJ,HCr),e(pc,UCr),e(pc,JJ),e(JJ,JCr),e(pc,YCr),e(tr,KCr),e(tr,lx),e(lx,ZCr),e(lx,KFe),e(KFe,e0r),e(lx,o0r),e(tr,r0r),e(tr,Bt),M(ix,Bt,null),e(Bt,t0r),e(Bt,ZFe),e(ZFe,a0r),e(Bt,n0r),e(Bt,_c),e(_c,s0r),e(_c,e6e),e(e6e,l0r),e(_c,i0r),e(_c,YJ),e(YJ,d0r),e(_c,c0r),e(Bt,f0r),M(aM,Bt,null),e(tr,m0r),e(tr,Sr),M(dx,Sr,null),e(Sr,g0r),e(Sr,o6e),e(o6e,h0r),e(Sr,p0r),e(Sr,cn),e(cn,_0r),e(cn,r6e),e(r6e,u0r),e(cn,b0r),e(cn,t6e),e(t6e,v0r),e(cn,F0r),e(cn,a6e),e(a6e,T0r),e(cn,M0r),e(Sr,E0r),e(Sr,ar),e(ar,nM),e(nM,n6e),e(n6e,C0r),e(nM,w0r),e(nM,KJ),e(KJ,A0r),e(nM,L0r),e(ar,y0r),e(ar,sM),e(sM,s6e),e(s6e,x0r),e(sM,$0r),e(sM,ZJ),e(ZJ,k0r),e(sM,S0r),e(ar,R0r),e(ar,lM),e(lM,l6e),e(l6e,P0r),e(lM,B0r),e(lM,eY),e(eY,N0r),e(lM,I0r),e(ar,q0r),e(ar,iM),e(iM,i6e),e(i6e,j0r),e(iM,D0r),e(iM,oY),e(oY,G0r),e(iM,O0r),e(ar,V0r),e(ar,dM),e(dM,d6e),e(d6e,X0r),e(dM,z0r),e(dM,rY),e(rY,Q0r),e(dM,W0r),e(ar,H0r),e(ar,cM),e(cM,c6e),e(c6e,U0r),e(cM,J0r),e(cM,tY),e(tY,Y0r),e(cM,K0r),e(Sr,Z0r),M(fM,Sr,null),b(f,fze,u),b(f,uc,u),e(uc,mM),e(mM,f6e),M(cx,f6e,null),e(uc,ewr),e(uc,m6e),e(m6e,owr),b(f,mze,u),b(f,nr,u),M(fx,nr,null),e(nr,rwr),e(nr,bc),e(bc,twr),e(bc,aY),e(aY,awr),e(bc,nwr),e(bc,nY),e(nY,swr),e(bc,lwr),e(nr,iwr),e(nr,mx),e(mx,dwr),e(mx,g6e),e(g6e,cwr),e(mx,fwr),e(nr,mwr),e(nr,Nt),M(gx,Nt,null),e(Nt,gwr),e(Nt,h6e),e(h6e,hwr),e(Nt,pwr),e(Nt,vc),e(vc,_wr),e(vc,p6e),e(p6e,uwr),e(vc,bwr),e(vc,sY),e(sY,vwr),e(vc,Fwr),e(Nt,Twr),M(gM,Nt,null),e(nr,Mwr),e(nr,Rr),M(hx,Rr,null),e(Rr,Ewr),e(Rr,_6e),e(_6e,Cwr),e(Rr,wwr),e(Rr,fn),e(fn,Awr),e(fn,u6e),e(u6e,Lwr),e(fn,ywr),e(fn,b6e),e(b6e,xwr),e(fn,$wr),e(fn,v6e),e(v6e,kwr),e(fn,Swr),e(Rr,Rwr),e(Rr,ie),e(ie,hM),e(hM,F6e),e(F6e,Pwr),e(hM,Bwr),e(hM,lY),e(lY,Nwr),e(hM,Iwr),e(ie,qwr),e(ie,pM),e(pM,T6e),e(T6e,jwr),e(pM,Dwr),e(pM,iY),e(iY,Gwr),e(pM,Owr),e(ie,Vwr),e(ie,_M),e(_M,M6e),e(M6e,Xwr),e(_M,zwr),e(_M,dY),e(dY,Qwr),e(_M,Wwr),e(ie,Hwr),e(ie,uM),e(uM,E6e),e(E6e,Uwr),e(uM,Jwr),e(uM,cY),e(cY,Ywr),e(uM,Kwr),e(ie,Zwr),e(ie,bM),e(bM,C6e),e(C6e,eAr),e(bM,oAr),e(bM,fY),e(fY,rAr),e(bM,tAr),e(ie,aAr),e(ie,vM),e(vM,w6e),e(w6e,nAr),e(vM,sAr),e(vM,mY),e(mY,lAr),e(vM,iAr),e(ie,dAr),e(ie,FM),e(FM,A6e),e(A6e,cAr),e(FM,fAr),e(FM,gY),e(gY,mAr),e(FM,gAr),e(ie,hAr),e(ie,TM),e(TM,L6e),e(L6e,pAr),e(TM,_Ar),e(TM,hY),e(hY,uAr),e(TM,bAr),e(ie,vAr),e(ie,MM),e(MM,y6e),e(y6e,FAr),e(MM,TAr),e(MM,pY),e(pY,MAr),e(MM,EAr),e(ie,CAr),e(ie,EM),e(EM,x6e),e(x6e,wAr),e(EM,AAr),e(EM,_Y),e(_Y,LAr),e(EM,yAr),e(ie,xAr),e(ie,CM),e(CM,$6e),e($6e,$Ar),e(CM,kAr),e(CM,uY),e(uY,SAr),e(CM,RAr),e(ie,PAr),e(ie,wM),e(wM,k6e),e(k6e,BAr),e(wM,NAr),e(wM,bY),e(bY,IAr),e(wM,qAr),e(ie,jAr),e(ie,AM),e(AM,S6e),e(S6e,DAr),e(AM,GAr),e(AM,vY),e(vY,OAr),e(AM,VAr),e(ie,XAr),e(ie,LM),e(LM,R6e),e(R6e,zAr),e(LM,QAr),e(LM,FY),e(FY,WAr),e(LM,HAr),e(ie,UAr),e(ie,yM),e(yM,P6e),e(P6e,JAr),e(yM,YAr),e(yM,TY),e(TY,KAr),e(yM,ZAr),e(ie,e7r),e(ie,xM),e(xM,B6e),e(B6e,o7r),e(xM,r7r),e(xM,MY),e(MY,t7r),e(xM,a7r),e(ie,n7r),e(ie,$M),e($M,N6e),e(N6e,s7r),e($M,l7r),e($M,EY),e(EY,i7r),e($M,d7r),e(ie,c7r),e(ie,kM),e(kM,I6e),e(I6e,f7r),e(kM,m7r),e(kM,CY),e(CY,g7r),e(kM,h7r),e(ie,p7r),e(ie,SM),e(SM,q6e),e(q6e,_7r),e(SM,u7r),e(SM,wY),e(wY,b7r),e(SM,v7r),e(ie,F7r),e(ie,RM),e(RM,j6e),e(j6e,T7r),e(RM,M7r),e(RM,AY),e(AY,E7r),e(RM,C7r),e(Rr,w7r),M(PM,Rr,null),b(f,gze,u),b(f,Fc,u),e(Fc,BM),e(BM,D6e),M(px,D6e,null),e(Fc,A7r),e(Fc,G6e),e(G6e,L7r),b(f,hze,u),b(f,sr,u),M(_x,sr,null),e(sr,y7r),e(sr,Tc),e(Tc,x7r),e(Tc,LY),e(LY,$7r),e(Tc,k7r),e(Tc,yY),e(yY,S7r),e(Tc,R7r),e(sr,P7r),e(sr,ux),e(ux,B7r),e(ux,O6e),e(O6e,N7r),e(ux,I7r),e(sr,q7r),e(sr,It),M(bx,It,null),e(It,j7r),e(It,V6e),e(V6e,D7r),e(It,G7r),e(It,Mc),e(Mc,O7r),e(Mc,X6e),e(X6e,V7r),e(Mc,X7r),e(Mc,xY),e(xY,z7r),e(Mc,Q7r),e(It,W7r),M(NM,It,null),e(sr,H7r),e(sr,Pr),M(vx,Pr,null),e(Pr,U7r),e(Pr,z6e),e(z6e,J7r),e(Pr,Y7r),e(Pr,mn),e(mn,K7r),e(mn,Q6e),e(Q6e,Z7r),e(mn,eLr),e(mn,W6e),e(W6e,oLr),e(mn,rLr),e(mn,H6e),e(H6e,tLr),e(mn,aLr),e(Pr,nLr),e(Pr,ye),e(ye,IM),e(IM,U6e),e(U6e,sLr),e(IM,lLr),e(IM,$Y),e($Y,iLr),e(IM,dLr),e(ye,cLr),e(ye,qM),e(qM,J6e),e(J6e,fLr),e(qM,mLr),e(qM,kY),e(kY,gLr),e(qM,hLr),e(ye,pLr),e(ye,jM),e(jM,Y6e),e(Y6e,_Lr),e(jM,uLr),e(jM,SY),e(SY,bLr),e(jM,vLr),e(ye,FLr),e(ye,DM),e(DM,K6e),e(K6e,TLr),e(DM,MLr),e(DM,RY),e(RY,ELr),e(DM,CLr),e(ye,wLr),e(ye,GM),e(GM,Z6e),e(Z6e,ALr),e(GM,LLr),e(GM,PY),e(PY,yLr),e(GM,xLr),e(ye,$Lr),e(ye,OM),e(OM,eTe),e(eTe,kLr),e(OM,SLr),e(OM,BY),e(BY,RLr),e(OM,PLr),e(ye,BLr),e(ye,VM),e(VM,oTe),e(oTe,NLr),e(VM,ILr),e(VM,NY),e(NY,qLr),e(VM,jLr),e(ye,DLr),e(ye,XM),e(XM,rTe),e(rTe,GLr),e(XM,OLr),e(XM,IY),e(IY,VLr),e(XM,XLr),e(ye,zLr),e(ye,zM),e(zM,tTe),e(tTe,QLr),e(zM,WLr),e(zM,qY),e(qY,HLr),e(zM,ULr),e(ye,JLr),e(ye,QM),e(QM,aTe),e(aTe,YLr),e(QM,KLr),e(QM,jY),e(jY,ZLr),e(QM,eyr),e(Pr,oyr),M(WM,Pr,null),b(f,pze,u),b(f,Ec,u),e(Ec,HM),e(HM,nTe),M(Fx,nTe,null),e(Ec,ryr),e(Ec,sTe),e(sTe,tyr),b(f,_ze,u),b(f,lr,u),M(Tx,lr,null),e(lr,ayr),e(lr,Cc),e(Cc,nyr),e(Cc,DY),e(DY,syr),e(Cc,lyr),e(Cc,GY),e(GY,iyr),e(Cc,dyr),e(lr,cyr),e(lr,Mx),e(Mx,fyr),e(Mx,lTe),e(lTe,myr),e(Mx,gyr),e(lr,hyr),e(lr,qt),M(Ex,qt,null),e(qt,pyr),e(qt,iTe),e(iTe,_yr),e(qt,uyr),e(qt,wc),e(wc,byr),e(wc,dTe),e(dTe,vyr),e(wc,Fyr),e(wc,OY),e(OY,Tyr),e(wc,Myr),e(qt,Eyr),M(UM,qt,null),e(lr,Cyr),e(lr,Br),M(Cx,Br,null),e(Br,wyr),e(Br,cTe),e(cTe,Ayr),e(Br,Lyr),e(Br,gn),e(gn,yyr),e(gn,fTe),e(fTe,xyr),e(gn,$yr),e(gn,mTe),e(mTe,kyr),e(gn,Syr),e(gn,gTe),e(gTe,Ryr),e(gn,Pyr),e(Br,Byr),e(Br,te),e(te,JM),e(JM,hTe),e(hTe,Nyr),e(JM,Iyr),e(JM,VY),e(VY,qyr),e(JM,jyr),e(te,Dyr),e(te,YM),e(YM,pTe),e(pTe,Gyr),e(YM,Oyr),e(YM,XY),e(XY,Vyr),e(YM,Xyr),e(te,zyr),e(te,KM),e(KM,_Te),e(_Te,Qyr),e(KM,Wyr),e(KM,zY),e(zY,Hyr),e(KM,Uyr),e(te,Jyr),e(te,ZM),e(ZM,uTe),e(uTe,Yyr),e(ZM,Kyr),e(ZM,QY),e(QY,Zyr),e(ZM,e8r),e(te,o8r),e(te,eE),e(eE,bTe),e(bTe,r8r),e(eE,t8r),e(eE,WY),e(WY,a8r),e(eE,n8r),e(te,s8r),e(te,oE),e(oE,vTe),e(vTe,l8r),e(oE,i8r),e(oE,HY),e(HY,d8r),e(oE,c8r),e(te,f8r),e(te,rE),e(rE,FTe),e(FTe,m8r),e(rE,g8r),e(rE,UY),e(UY,h8r),e(rE,p8r),e(te,_8r),e(te,tE),e(tE,TTe),e(TTe,u8r),e(tE,b8r),e(tE,JY),e(JY,v8r),e(tE,F8r),e(te,T8r),e(te,aE),e(aE,MTe),e(MTe,M8r),e(aE,E8r),e(aE,YY),e(YY,C8r),e(aE,w8r),e(te,A8r),e(te,nE),e(nE,ETe),e(ETe,L8r),e(nE,y8r),e(nE,KY),e(KY,x8r),e(nE,$8r),e(te,k8r),e(te,sE),e(sE,CTe),e(CTe,S8r),e(sE,R8r),e(sE,ZY),e(ZY,P8r),e(sE,B8r),e(te,N8r),e(te,lE),e(lE,wTe),e(wTe,I8r),e(lE,q8r),e(lE,eK),e(eK,j8r),e(lE,D8r),e(te,G8r),e(te,iE),e(iE,ATe),e(ATe,O8r),e(iE,V8r),e(iE,oK),e(oK,X8r),e(iE,z8r),e(te,Q8r),e(te,dE),e(dE,LTe),e(LTe,W8r),e(dE,H8r),e(dE,rK),e(rK,U8r),e(dE,J8r),e(te,Y8r),e(te,cE),e(cE,yTe),e(yTe,K8r),e(cE,Z8r),e(cE,tK),e(tK,e9r),e(cE,o9r),e(te,r9r),e(te,fE),e(fE,xTe),e(xTe,t9r),e(fE,a9r),e(fE,aK),e(aK,n9r),e(fE,s9r),e(te,l9r),e(te,mE),e(mE,$Te),e($Te,i9r),e(mE,d9r),e(mE,nK),e(nK,c9r),e(mE,f9r),e(te,m9r),e(te,gE),e(gE,kTe),e(kTe,g9r),e(gE,h9r),e(gE,sK),e(sK,p9r),e(gE,_9r),e(te,u9r),e(te,hE),e(hE,STe),e(STe,b9r),e(hE,v9r),e(hE,lK),e(lK,F9r),e(hE,T9r),e(te,M9r),e(te,pE),e(pE,RTe),e(RTe,E9r),e(pE,C9r),e(pE,iK),e(iK,w9r),e(pE,A9r),e(te,L9r),e(te,_E),e(_E,PTe),e(PTe,y9r),e(_E,x9r),e(_E,dK),e(dK,$9r),e(_E,k9r),e(te,S9r),e(te,uE),e(uE,BTe),e(BTe,R9r),e(uE,P9r),e(uE,cK),e(cK,B9r),e(uE,N9r),e(te,I9r),e(te,bE),e(bE,NTe),e(NTe,q9r),e(bE,j9r),e(bE,fK),e(fK,D9r),e(bE,G9r),e(te,O9r),e(te,vE),e(vE,ITe),e(ITe,V9r),e(vE,X9r),e(vE,mK),e(mK,z9r),e(vE,Q9r),e(te,W9r),e(te,FE),e(FE,qTe),e(qTe,H9r),e(FE,U9r),e(FE,gK),e(gK,J9r),e(FE,Y9r),e(te,K9r),e(te,TE),e(TE,jTe),e(jTe,Z9r),e(TE,exr),e(TE,hK),e(hK,oxr),e(TE,rxr),e(Br,txr),M(ME,Br,null),b(f,uze,u),b(f,Ac,u),e(Ac,EE),e(EE,DTe),M(wx,DTe,null),e(Ac,axr),e(Ac,GTe),e(GTe,nxr),b(f,bze,u),b(f,ir,u),M(Ax,ir,null),e(ir,sxr),e(ir,Lc),e(Lc,lxr),e(Lc,pK),e(pK,ixr),e(Lc,dxr),e(Lc,_K),e(_K,cxr),e(Lc,fxr),e(ir,mxr),e(ir,Lx),e(Lx,gxr),e(Lx,OTe),e(OTe,hxr),e(Lx,pxr),e(ir,_xr),e(ir,jt),M(yx,jt,null),e(jt,uxr),e(jt,VTe),e(VTe,bxr),e(jt,vxr),e(jt,yc),e(yc,Fxr),e(yc,XTe),e(XTe,Txr),e(yc,Mxr),e(yc,uK),e(uK,Exr),e(yc,Cxr),e(jt,wxr),M(CE,jt,null),e(ir,Axr),e(ir,Nr),M(xx,Nr,null),e(Nr,Lxr),e(Nr,zTe),e(zTe,yxr),e(Nr,xxr),e(Nr,hn),e(hn,$xr),e(hn,QTe),e(QTe,kxr),e(hn,Sxr),e(hn,WTe),e(WTe,Rxr),e(hn,Pxr),e(hn,HTe),e(HTe,Bxr),e(hn,Nxr),e(Nr,Ixr),e(Nr,_e),e(_e,wE),e(wE,UTe),e(UTe,qxr),e(wE,jxr),e(wE,bK),e(bK,Dxr),e(wE,Gxr),e(_e,Oxr),e(_e,AE),e(AE,JTe),e(JTe,Vxr),e(AE,Xxr),e(AE,vK),e(vK,zxr),e(AE,Qxr),e(_e,Wxr),e(_e,LE),e(LE,YTe),e(YTe,Hxr),e(LE,Uxr),e(LE,FK),e(FK,Jxr),e(LE,Yxr),e(_e,Kxr),e(_e,yE),e(yE,KTe),e(KTe,Zxr),e(yE,e$r),e(yE,TK),e(TK,o$r),e(yE,r$r),e(_e,t$r),e(_e,xE),e(xE,ZTe),e(ZTe,a$r),e(xE,n$r),e(xE,MK),e(MK,s$r),e(xE,l$r),e(_e,i$r),e(_e,$E),e($E,eMe),e(eMe,d$r),e($E,c$r),e($E,EK),e(EK,f$r),e($E,m$r),e(_e,g$r),e(_e,kE),e(kE,oMe),e(oMe,h$r),e(kE,p$r),e(kE,CK),e(CK,_$r),e(kE,u$r),e(_e,b$r),e(_e,SE),e(SE,rMe),e(rMe,v$r),e(SE,F$r),e(SE,wK),e(wK,T$r),e(SE,M$r),e(_e,E$r),e(_e,RE),e(RE,tMe),e(tMe,C$r),e(RE,w$r),e(RE,AK),e(AK,A$r),e(RE,L$r),e(_e,y$r),e(_e,PE),e(PE,aMe),e(aMe,x$r),e(PE,$$r),e(PE,LK),e(LK,k$r),e(PE,S$r),e(_e,R$r),e(_e,BE),e(BE,nMe),e(nMe,P$r),e(BE,B$r),e(BE,yK),e(yK,N$r),e(BE,I$r),e(_e,q$r),e(_e,NE),e(NE,sMe),e(sMe,j$r),e(NE,D$r),e(NE,xK),e(xK,G$r),e(NE,O$r),e(_e,V$r),e(_e,IE),e(IE,lMe),e(lMe,X$r),e(IE,z$r),e(IE,$K),e($K,Q$r),e(IE,W$r),e(_e,H$r),e(_e,qE),e(qE,iMe),e(iMe,U$r),e(qE,J$r),e(qE,kK),e(kK,Y$r),e(qE,K$r),e(_e,Z$r),e(_e,jE),e(jE,dMe),e(dMe,ekr),e(jE,okr),e(jE,SK),e(SK,rkr),e(jE,tkr),e(_e,akr),e(_e,DE),e(DE,cMe),e(cMe,nkr),e(DE,skr),e(DE,RK),e(RK,lkr),e(DE,ikr),e(_e,dkr),e(_e,GE),e(GE,fMe),e(fMe,ckr),e(GE,fkr),e(GE,PK),e(PK,mkr),e(GE,gkr),e(Nr,hkr),M(OE,Nr,null),b(f,vze,u),b(f,xc,u),e(xc,VE),e(VE,mMe),M($x,mMe,null),e(xc,pkr),e(xc,gMe),e(gMe,_kr),b(f,Fze,u),b(f,dr,u),M(kx,dr,null),e(dr,ukr),e(dr,$c),e($c,bkr),e($c,BK),e(BK,vkr),e($c,Fkr),e($c,NK),e(NK,Tkr),e($c,Mkr),e(dr,Ekr),e(dr,Sx),e(Sx,Ckr),e(Sx,hMe),e(hMe,wkr),e(Sx,Akr),e(dr,Lkr),e(dr,Dt),M(Rx,Dt,null),e(Dt,ykr),e(Dt,pMe),e(pMe,xkr),e(Dt,$kr),e(Dt,kc),e(kc,kkr),e(kc,_Me),e(_Me,Skr),e(kc,Rkr),e(kc,IK),e(IK,Pkr),e(kc,Bkr),e(Dt,Nkr),M(XE,Dt,null),e(dr,Ikr),e(dr,Ir),M(Px,Ir,null),e(Ir,qkr),e(Ir,uMe),e(uMe,jkr),e(Ir,Dkr),e(Ir,pn),e(pn,Gkr),e(pn,bMe),e(bMe,Okr),e(pn,Vkr),e(pn,vMe),e(vMe,Xkr),e(pn,zkr),e(pn,FMe),e(FMe,Qkr),e(pn,Wkr),e(Ir,Hkr),e(Ir,Bx),e(Bx,zE),e(zE,TMe),e(TMe,Ukr),e(zE,Jkr),e(zE,qK),e(qK,Ykr),e(zE,Kkr),e(Bx,Zkr),e(Bx,QE),e(QE,MMe),e(MMe,eSr),e(QE,oSr),e(QE,jK),e(jK,rSr),e(QE,tSr),e(Ir,aSr),M(WE,Ir,null),b(f,Tze,u),b(f,Sc,u),e(Sc,HE),e(HE,EMe),M(Nx,EMe,null),e(Sc,nSr),e(Sc,CMe),e(CMe,sSr),b(f,Mze,u),b(f,cr,u),M(Ix,cr,null),e(cr,lSr),e(cr,Rc),e(Rc,iSr),e(Rc,DK),e(DK,dSr),e(Rc,cSr),e(Rc,GK),e(GK,fSr),e(Rc,mSr),e(cr,gSr),e(cr,qx),e(qx,hSr),e(qx,wMe),e(wMe,pSr),e(qx,_Sr),e(cr,uSr),e(cr,Gt),M(jx,Gt,null),e(Gt,bSr),e(Gt,AMe),e(AMe,vSr),e(Gt,FSr),e(Gt,Pc),e(Pc,TSr),e(Pc,LMe),e(LMe,MSr),e(Pc,ESr),e(Pc,OK),e(OK,CSr),e(Pc,wSr),e(Gt,ASr),M(UE,Gt,null),e(cr,LSr),e(cr,qr),M(Dx,qr,null),e(qr,ySr),e(qr,yMe),e(yMe,xSr),e(qr,$Sr),e(qr,_n),e(_n,kSr),e(_n,xMe),e(xMe,SSr),e(_n,RSr),e(_n,$Me),e($Me,PSr),e(_n,BSr),e(_n,kMe),e(kMe,NSr),e(_n,ISr),e(qr,qSr),e(qr,SMe),e(SMe,JE),e(JE,RMe),e(RMe,jSr),e(JE,DSr),e(JE,VK),e(VK,GSr),e(JE,OSr),e(qr,VSr),M(YE,qr,null),b(f,Eze,u),b(f,Bc,u),e(Bc,KE),e(KE,PMe),M(Gx,PMe,null),e(Bc,XSr),e(Bc,BMe),e(BMe,zSr),b(f,Cze,u),b(f,fr,u),M(Ox,fr,null),e(fr,QSr),e(fr,Nc),e(Nc,WSr),e(Nc,XK),e(XK,HSr),e(Nc,USr),e(Nc,zK),e(zK,JSr),e(Nc,YSr),e(fr,KSr),e(fr,Vx),e(Vx,ZSr),e(Vx,NMe),e(NMe,eRr),e(Vx,oRr),e(fr,rRr),e(fr,Ot),M(Xx,Ot,null),e(Ot,tRr),e(Ot,IMe),e(IMe,aRr),e(Ot,nRr),e(Ot,Ic),e(Ic,sRr),e(Ic,qMe),e(qMe,lRr),e(Ic,iRr),e(Ic,QK),e(QK,dRr),e(Ic,cRr),e(Ot,fRr),M(ZE,Ot,null),e(fr,mRr),e(fr,jr),M(zx,jr,null),e(jr,gRr),e(jr,jMe),e(jMe,hRr),e(jr,pRr),e(jr,un),e(un,_Rr),e(un,DMe),e(DMe,uRr),e(un,bRr),e(un,GMe),e(GMe,vRr),e(un,FRr),e(un,OMe),e(OMe,TRr),e(un,MRr),e(jr,ERr),e(jr,de),e(de,eC),e(eC,VMe),e(VMe,CRr),e(eC,wRr),e(eC,WK),e(WK,ARr),e(eC,LRr),e(de,yRr),e(de,oC),e(oC,XMe),e(XMe,xRr),e(oC,$Rr),e(oC,HK),e(HK,kRr),e(oC,SRr),e(de,RRr),e(de,rC),e(rC,zMe),e(zMe,PRr),e(rC,BRr),e(rC,UK),e(UK,NRr),e(rC,IRr),e(de,qRr),e(de,tC),e(tC,QMe),e(QMe,jRr),e(tC,DRr),e(tC,JK),e(JK,GRr),e(tC,ORr),e(de,VRr),e(de,aC),e(aC,WMe),e(WMe,XRr),e(aC,zRr),e(aC,YK),e(YK,QRr),e(aC,WRr),e(de,HRr),e(de,nC),e(nC,HMe),e(HMe,URr),e(nC,JRr),e(nC,KK),e(KK,YRr),e(nC,KRr),e(de,ZRr),e(de,sC),e(sC,UMe),e(UMe,ePr),e(sC,oPr),e(sC,ZK),e(ZK,rPr),e(sC,tPr),e(de,aPr),e(de,lC),e(lC,JMe),e(JMe,nPr),e(lC,sPr),e(lC,eZ),e(eZ,lPr),e(lC,iPr),e(de,dPr),e(de,iC),e(iC,YMe),e(YMe,cPr),e(iC,fPr),e(iC,oZ),e(oZ,mPr),e(iC,gPr),e(de,hPr),e(de,dC),e(dC,KMe),e(KMe,pPr),e(dC,_Pr),e(dC,rZ),e(rZ,uPr),e(dC,bPr),e(de,vPr),e(de,cC),e(cC,ZMe),e(ZMe,FPr),e(cC,TPr),e(cC,tZ),e(tZ,MPr),e(cC,EPr),e(de,CPr),e(de,fC),e(fC,eEe),e(eEe,wPr),e(fC,APr),e(fC,aZ),e(aZ,LPr),e(fC,yPr),e(de,xPr),e(de,mC),e(mC,oEe),e(oEe,$Pr),e(mC,kPr),e(mC,nZ),e(nZ,SPr),e(mC,RPr),e(de,PPr),e(de,gC),e(gC,rEe),e(rEe,BPr),e(gC,NPr),e(gC,sZ),e(sZ,IPr),e(gC,qPr),e(de,jPr),e(de,hC),e(hC,tEe),e(tEe,DPr),e(hC,GPr),e(hC,lZ),e(lZ,OPr),e(hC,VPr),e(de,XPr),e(de,pC),e(pC,aEe),e(aEe,zPr),e(pC,QPr),e(pC,iZ),e(iZ,WPr),e(pC,HPr),e(de,UPr),e(de,_C),e(_C,nEe),e(nEe,JPr),e(_C,YPr),e(_C,dZ),e(dZ,KPr),e(_C,ZPr),e(de,eBr),e(de,uC),e(uC,sEe),e(sEe,oBr),e(uC,rBr),e(uC,cZ),e(cZ,tBr),e(uC,aBr),e(de,nBr),e(de,bC),e(bC,lEe),e(lEe,sBr),e(bC,lBr),e(bC,fZ),e(fZ,iBr),e(bC,dBr),e(de,cBr),e(de,vC),e(vC,iEe),e(iEe,fBr),e(vC,mBr),e(vC,mZ),e(mZ,gBr),e(vC,hBr),e(jr,pBr),M(FC,jr,null),b(f,wze,u),b(f,qc,u),e(qc,TC),e(TC,dEe),M(Qx,dEe,null),e(qc,_Br),e(qc,cEe),e(cEe,uBr),b(f,Aze,u),b(f,mr,u),M(Wx,mr,null),e(mr,bBr),e(mr,jc),e(jc,vBr),e(jc,gZ),e(gZ,FBr),e(jc,TBr),e(jc,hZ),e(hZ,MBr),e(jc,EBr),e(mr,CBr),e(mr,Hx),e(Hx,wBr),e(Hx,fEe),e(fEe,ABr),e(Hx,LBr),e(mr,yBr),e(mr,Vt),M(Ux,Vt,null),e(Vt,xBr),e(Vt,mEe),e(mEe,$Br),e(Vt,kBr),e(Vt,Dc),e(Dc,SBr),e(Dc,gEe),e(gEe,RBr),e(Dc,PBr),e(Dc,pZ),e(pZ,BBr),e(Dc,NBr),e(Vt,IBr),M(MC,Vt,null),e(mr,qBr),e(mr,Dr),M(Jx,Dr,null),e(Dr,jBr),e(Dr,hEe),e(hEe,DBr),e(Dr,GBr),e(Dr,bn),e(bn,OBr),e(bn,pEe),e(pEe,VBr),e(bn,XBr),e(bn,_Ee),e(_Ee,zBr),e(bn,QBr),e(bn,uEe),e(uEe,WBr),e(bn,HBr),e(Dr,UBr),e(Dr,ce),e(ce,EC),e(EC,bEe),e(bEe,JBr),e(EC,YBr),e(EC,_Z),e(_Z,KBr),e(EC,ZBr),e(ce,eNr),e(ce,CC),e(CC,vEe),e(vEe,oNr),e(CC,rNr),e(CC,uZ),e(uZ,tNr),e(CC,aNr),e(ce,nNr),e(ce,wC),e(wC,FEe),e(FEe,sNr),e(wC,lNr),e(wC,bZ),e(bZ,iNr),e(wC,dNr),e(ce,cNr),e(ce,AC),e(AC,TEe),e(TEe,fNr),e(AC,mNr),e(AC,vZ),e(vZ,gNr),e(AC,hNr),e(ce,pNr),e(ce,LC),e(LC,MEe),e(MEe,_Nr),e(LC,uNr),e(LC,FZ),e(FZ,bNr),e(LC,vNr),e(ce,FNr),e(ce,yC),e(yC,EEe),e(EEe,TNr),e(yC,MNr),e(yC,TZ),e(TZ,ENr),e(yC,CNr),e(ce,wNr),e(ce,xC),e(xC,CEe),e(CEe,ANr),e(xC,LNr),e(xC,MZ),e(MZ,yNr),e(xC,xNr),e(ce,$Nr),e(ce,$C),e($C,wEe),e(wEe,kNr),e($C,SNr),e($C,EZ),e(EZ,RNr),e($C,PNr),e(ce,BNr),e(ce,kC),e(kC,AEe),e(AEe,NNr),e(kC,INr),e(kC,CZ),e(CZ,qNr),e(kC,jNr),e(ce,DNr),e(ce,SC),e(SC,LEe),e(LEe,GNr),e(SC,ONr),e(SC,wZ),e(wZ,VNr),e(SC,XNr),e(ce,zNr),e(ce,RC),e(RC,yEe),e(yEe,QNr),e(RC,WNr),e(RC,AZ),e(AZ,HNr),e(RC,UNr),e(ce,JNr),e(ce,PC),e(PC,xEe),e(xEe,YNr),e(PC,KNr),e(PC,LZ),e(LZ,ZNr),e(PC,eIr),e(ce,oIr),e(ce,BC),e(BC,$Ee),e($Ee,rIr),e(BC,tIr),e(BC,yZ),e(yZ,aIr),e(BC,nIr),e(ce,sIr),e(ce,NC),e(NC,kEe),e(kEe,lIr),e(NC,iIr),e(NC,xZ),e(xZ,dIr),e(NC,cIr),e(ce,fIr),e(ce,IC),e(IC,SEe),e(SEe,mIr),e(IC,gIr),e(IC,$Z),e($Z,hIr),e(IC,pIr),e(ce,_Ir),e(ce,qC),e(qC,REe),e(REe,uIr),e(qC,bIr),e(qC,kZ),e(kZ,vIr),e(qC,FIr),e(ce,TIr),e(ce,jC),e(jC,PEe),e(PEe,MIr),e(jC,EIr),e(jC,SZ),e(SZ,CIr),e(jC,wIr),e(ce,AIr),e(ce,DC),e(DC,BEe),e(BEe,LIr),e(DC,yIr),e(DC,RZ),e(RZ,xIr),e(DC,$Ir),e(ce,kIr),e(ce,GC),e(GC,NEe),e(NEe,SIr),e(GC,RIr),e(GC,PZ),e(PZ,PIr),e(GC,BIr),e(ce,NIr),e(ce,OC),e(OC,IEe),e(IEe,IIr),e(OC,qIr),e(OC,BZ),e(BZ,jIr),e(OC,DIr),e(Dr,GIr),M(VC,Dr,null),b(f,Lze,u),b(f,Gc,u),e(Gc,XC),e(XC,qEe),M(Yx,qEe,null),e(Gc,OIr),e(Gc,jEe),e(jEe,VIr),b(f,yze,u),b(f,gr,u),M(Kx,gr,null),e(gr,XIr),e(gr,Oc),e(Oc,zIr),e(Oc,NZ),e(NZ,QIr),e(Oc,WIr),e(Oc,IZ),e(IZ,HIr),e(Oc,UIr),e(gr,JIr),e(gr,Zx),e(Zx,YIr),e(Zx,DEe),e(DEe,KIr),e(Zx,ZIr),e(gr,eqr),e(gr,Xt),M(e$,Xt,null),e(Xt,oqr),e(Xt,GEe),e(GEe,rqr),e(Xt,tqr),e(Xt,Vc),e(Vc,aqr),e(Vc,OEe),e(OEe,nqr),e(Vc,sqr),e(Vc,qZ),e(qZ,lqr),e(Vc,iqr),e(Xt,dqr),M(zC,Xt,null),e(gr,cqr),e(gr,Gr),M(o$,Gr,null),e(Gr,fqr),e(Gr,VEe),e(VEe,mqr),e(Gr,gqr),e(Gr,vn),e(vn,hqr),e(vn,XEe),e(XEe,pqr),e(vn,_qr),e(vn,zEe),e(zEe,uqr),e(vn,bqr),e(vn,QEe),e(QEe,vqr),e(vn,Fqr),e(Gr,Tqr),e(Gr,WEe),e(WEe,QC),e(QC,HEe),e(HEe,Mqr),e(QC,Eqr),e(QC,jZ),e(jZ,Cqr),e(QC,wqr),e(Gr,Aqr),M(WC,Gr,null),b(f,xze,u),b(f,Xc,u),e(Xc,HC),e(HC,UEe),M(r$,UEe,null),e(Xc,Lqr),e(Xc,JEe),e(JEe,yqr),b(f,$ze,u),b(f,hr,u),M(t$,hr,null),e(hr,xqr),e(hr,zc),e(zc,$qr),e(zc,DZ),e(DZ,kqr),e(zc,Sqr),e(zc,GZ),e(GZ,Rqr),e(zc,Pqr),e(hr,Bqr),e(hr,a$),e(a$,Nqr),e(a$,YEe),e(YEe,Iqr),e(a$,qqr),e(hr,jqr),e(hr,zt),M(n$,zt,null),e(zt,Dqr),e(zt,KEe),e(KEe,Gqr),e(zt,Oqr),e(zt,Qc),e(Qc,Vqr),e(Qc,ZEe),e(ZEe,Xqr),e(Qc,zqr),e(Qc,OZ),e(OZ,Qqr),e(Qc,Wqr),e(zt,Hqr),M(UC,zt,null),e(hr,Uqr),e(hr,Or),M(s$,Or,null),e(Or,Jqr),e(Or,eCe),e(eCe,Yqr),e(Or,Kqr),e(Or,Fn),e(Fn,Zqr),e(Fn,oCe),e(oCe,ejr),e(Fn,ojr),e(Fn,rCe),e(rCe,rjr),e(Fn,tjr),e(Fn,tCe),e(tCe,ajr),e(Fn,njr),e(Or,sjr),e(Or,aCe),e(aCe,JC),e(JC,nCe),e(nCe,ljr),e(JC,ijr),e(JC,VZ),e(VZ,djr),e(JC,cjr),e(Or,fjr),M(YC,Or,null),b(f,kze,u),b(f,Wc,u),e(Wc,KC),e(KC,sCe),M(l$,sCe,null),e(Wc,mjr),e(Wc,lCe),e(lCe,gjr),b(f,Sze,u),b(f,pr,u),M(i$,pr,null),e(pr,hjr),e(pr,Hc),e(Hc,pjr),e(Hc,XZ),e(XZ,_jr),e(Hc,ujr),e(Hc,zZ),e(zZ,bjr),e(Hc,vjr),e(pr,Fjr),e(pr,d$),e(d$,Tjr),e(d$,iCe),e(iCe,Mjr),e(d$,Ejr),e(pr,Cjr),e(pr,Qt),M(c$,Qt,null),e(Qt,wjr),e(Qt,dCe),e(dCe,Ajr),e(Qt,Ljr),e(Qt,Uc),e(Uc,yjr),e(Uc,cCe),e(cCe,xjr),e(Uc,$jr),e(Uc,QZ),e(QZ,kjr),e(Uc,Sjr),e(Qt,Rjr),M(ZC,Qt,null),e(pr,Pjr),e(pr,Vr),M(f$,Vr,null),e(Vr,Bjr),e(Vr,fCe),e(fCe,Njr),e(Vr,Ijr),e(Vr,Tn),e(Tn,qjr),e(Tn,mCe),e(mCe,jjr),e(Tn,Djr),e(Tn,gCe),e(gCe,Gjr),e(Tn,Ojr),e(Tn,hCe),e(hCe,Vjr),e(Tn,Xjr),e(Vr,zjr),e(Vr,oe),e(oe,e0),e(e0,pCe),e(pCe,Qjr),e(e0,Wjr),e(e0,WZ),e(WZ,Hjr),e(e0,Ujr),e(oe,Jjr),e(oe,o0),e(o0,_Ce),e(_Ce,Yjr),e(o0,Kjr),e(o0,HZ),e(HZ,Zjr),e(o0,eDr),e(oe,oDr),e(oe,r0),e(r0,uCe),e(uCe,rDr),e(r0,tDr),e(r0,UZ),e(UZ,aDr),e(r0,nDr),e(oe,sDr),e(oe,t0),e(t0,bCe),e(bCe,lDr),e(t0,iDr),e(t0,JZ),e(JZ,dDr),e(t0,cDr),e(oe,fDr),e(oe,a0),e(a0,vCe),e(vCe,mDr),e(a0,gDr),e(a0,YZ),e(YZ,hDr),e(a0,pDr),e(oe,_Dr),e(oe,n0),e(n0,FCe),e(FCe,uDr),e(n0,bDr),e(n0,KZ),e(KZ,vDr),e(n0,FDr),e(oe,TDr),e(oe,s0),e(s0,TCe),e(TCe,MDr),e(s0,EDr),e(s0,ZZ),e(ZZ,CDr),e(s0,wDr),e(oe,ADr),e(oe,l0),e(l0,MCe),e(MCe,LDr),e(l0,yDr),e(l0,eee),e(eee,xDr),e(l0,$Dr),e(oe,kDr),e(oe,i0),e(i0,ECe),e(ECe,SDr),e(i0,RDr),e(i0,oee),e(oee,PDr),e(i0,BDr),e(oe,NDr),e(oe,d0),e(d0,CCe),e(CCe,IDr),e(d0,qDr),e(d0,ree),e(ree,jDr),e(d0,DDr),e(oe,GDr),e(oe,c0),e(c0,wCe),e(wCe,ODr),e(c0,VDr),e(c0,tee),e(tee,XDr),e(c0,zDr),e(oe,QDr),e(oe,f0),e(f0,ACe),e(ACe,WDr),e(f0,HDr),e(f0,aee),e(aee,UDr),e(f0,JDr),e(oe,YDr),e(oe,m0),e(m0,LCe),e(LCe,KDr),e(m0,ZDr),e(m0,nee),e(nee,eGr),e(m0,oGr),e(oe,rGr),e(oe,g0),e(g0,yCe),e(yCe,tGr),e(g0,aGr),e(g0,see),e(see,nGr),e(g0,sGr),e(oe,lGr),e(oe,h0),e(h0,xCe),e(xCe,iGr),e(h0,dGr),e(h0,lee),e(lee,cGr),e(h0,fGr),e(oe,mGr),e(oe,p0),e(p0,$Ce),e($Ce,gGr),e(p0,hGr),e(p0,iee),e(iee,pGr),e(p0,_Gr),e(oe,uGr),e(oe,_0),e(_0,kCe),e(kCe,bGr),e(_0,vGr),e(_0,dee),e(dee,FGr),e(_0,TGr),e(oe,MGr),e(oe,u0),e(u0,SCe),e(SCe,EGr),e(u0,CGr),e(u0,cee),e(cee,wGr),e(u0,AGr),e(oe,LGr),e(oe,b0),e(b0,RCe),e(RCe,yGr),e(b0,xGr),e(b0,fee),e(fee,$Gr),e(b0,kGr),e(oe,SGr),e(oe,v0),e(v0,PCe),e(PCe,RGr),e(v0,PGr),e(v0,mee),e(mee,BGr),e(v0,NGr),e(oe,IGr),e(oe,F0),e(F0,BCe),e(BCe,qGr),e(F0,jGr),e(F0,gee),e(gee,DGr),e(F0,GGr),e(oe,OGr),e(oe,T0),e(T0,NCe),e(NCe,VGr),e(T0,XGr),e(T0,hee),e(hee,zGr),e(T0,QGr),e(oe,WGr),e(oe,M0),e(M0,ICe),e(ICe,HGr),e(M0,UGr),e(M0,pee),e(pee,JGr),e(M0,YGr),e(oe,KGr),e(oe,E0),e(E0,qCe),e(qCe,ZGr),e(E0,eOr),e(E0,_ee),e(_ee,oOr),e(E0,rOr),e(oe,tOr),e(oe,C0),e(C0,jCe),e(jCe,aOr),e(C0,nOr),e(C0,uee),e(uee,sOr),e(C0,lOr),e(oe,iOr),e(oe,w0),e(w0,DCe),e(DCe,dOr),e(w0,cOr),e(w0,bee),e(bee,fOr),e(w0,mOr),e(oe,gOr),e(oe,A0),e(A0,GCe),e(GCe,hOr),e(A0,pOr),e(A0,vee),e(vee,_Or),e(A0,uOr),e(Vr,bOr),M(L0,Vr,null),b(f,Rze,u),b(f,Jc,u),e(Jc,y0),e(y0,OCe),M(m$,OCe,null),e(Jc,vOr),e(Jc,VCe),e(VCe,FOr),b(f,Pze,u),b(f,_r,u),M(g$,_r,null),e(_r,TOr),e(_r,Yc),e(Yc,MOr),e(Yc,Fee),e(Fee,EOr),e(Yc,COr),e(Yc,Tee),e(Tee,wOr),e(Yc,AOr),e(_r,LOr),e(_r,h$),e(h$,yOr),e(h$,XCe),e(XCe,xOr),e(h$,$Or),e(_r,kOr),e(_r,Wt),M(p$,Wt,null),e(Wt,SOr),e(Wt,zCe),e(zCe,ROr),e(Wt,POr),e(Wt,Kc),e(Kc,BOr),e(Kc,QCe),e(QCe,NOr),e(Kc,IOr),e(Kc,Mee),e(Mee,qOr),e(Kc,jOr),e(Wt,DOr),M(x0,Wt,null),e(_r,GOr),e(_r,Xr),M(_$,Xr,null),e(Xr,OOr),e(Xr,WCe),e(WCe,VOr),e(Xr,XOr),e(Xr,Mn),e(Mn,zOr),e(Mn,HCe),e(HCe,QOr),e(Mn,WOr),e(Mn,UCe),e(UCe,HOr),e(Mn,UOr),e(Mn,JCe),e(JCe,JOr),e(Mn,YOr),e(Xr,KOr),e(Xr,xe),e(xe,$0),e($0,YCe),e(YCe,ZOr),e($0,eVr),e($0,Eee),e(Eee,oVr),e($0,rVr),e(xe,tVr),e(xe,k0),e(k0,KCe),e(KCe,aVr),e(k0,nVr),e(k0,Cee),e(Cee,sVr),e(k0,lVr),e(xe,iVr),e(xe,S0),e(S0,ZCe),e(ZCe,dVr),e(S0,cVr),e(S0,wee),e(wee,fVr),e(S0,mVr),e(xe,gVr),e(xe,R0),e(R0,e0e),e(e0e,hVr),e(R0,pVr),e(R0,Aee),e(Aee,_Vr),e(R0,uVr),e(xe,bVr),e(xe,P0),e(P0,o0e),e(o0e,vVr),e(P0,FVr),e(P0,Lee),e(Lee,TVr),e(P0,MVr),e(xe,EVr),e(xe,B0),e(B0,r0e),e(r0e,CVr),e(B0,wVr),e(B0,yee),e(yee,AVr),e(B0,LVr),e(xe,yVr),e(xe,N0),e(N0,t0e),e(t0e,xVr),e(N0,$Vr),e(N0,xee),e(xee,kVr),e(N0,SVr),e(xe,RVr),e(xe,I0),e(I0,a0e),e(a0e,PVr),e(I0,BVr),e(I0,$ee),e($ee,NVr),e(I0,IVr),e(xe,qVr),e(xe,q0),e(q0,n0e),e(n0e,jVr),e(q0,DVr),e(q0,kee),e(kee,GVr),e(q0,OVr),e(xe,VVr),e(xe,j0),e(j0,s0e),e(s0e,XVr),e(j0,zVr),e(j0,See),e(See,QVr),e(j0,WVr),e(Xr,HVr),M(D0,Xr,null),b(f,Bze,u),b(f,Zc,u),e(Zc,G0),e(G0,l0e),M(u$,l0e,null),e(Zc,UVr),e(Zc,i0e),e(i0e,JVr),b(f,Nze,u),b(f,ur,u),M(b$,ur,null),e(ur,YVr),e(ur,ef),e(ef,KVr),e(ef,Ree),e(Ree,ZVr),e(ef,eXr),e(ef,Pee),e(Pee,oXr),e(ef,rXr),e(ur,tXr),e(ur,v$),e(v$,aXr),e(v$,d0e),e(d0e,nXr),e(v$,sXr),e(ur,lXr),e(ur,Ht),M(F$,Ht,null),e(Ht,iXr),e(Ht,c0e),e(c0e,dXr),e(Ht,cXr),e(Ht,of),e(of,fXr),e(of,f0e),e(f0e,mXr),e(of,gXr),e(of,Bee),e(Bee,hXr),e(of,pXr),e(Ht,_Xr),M(O0,Ht,null),e(ur,uXr),e(ur,zr),M(T$,zr,null),e(zr,bXr),e(zr,m0e),e(m0e,vXr),e(zr,FXr),e(zr,En),e(En,TXr),e(En,g0e),e(g0e,MXr),e(En,EXr),e(En,h0e),e(h0e,CXr),e(En,wXr),e(En,p0e),e(p0e,AXr),e(En,LXr),e(zr,yXr),e(zr,Ee),e(Ee,V0),e(V0,_0e),e(_0e,xXr),e(V0,$Xr),e(V0,Nee),e(Nee,kXr),e(V0,SXr),e(Ee,RXr),e(Ee,X0),e(X0,u0e),e(u0e,PXr),e(X0,BXr),e(X0,Iee),e(Iee,NXr),e(X0,IXr),e(Ee,qXr),e(Ee,z0),e(z0,b0e),e(b0e,jXr),e(z0,DXr),e(z0,qee),e(qee,GXr),e(z0,OXr),e(Ee,VXr),e(Ee,Q0),e(Q0,v0e),e(v0e,XXr),e(Q0,zXr),e(Q0,jee),e(jee,QXr),e(Q0,WXr),e(Ee,HXr),e(Ee,W0),e(W0,F0e),e(F0e,UXr),e(W0,JXr),e(W0,Dee),e(Dee,YXr),e(W0,KXr),e(Ee,ZXr),e(Ee,H0),e(H0,T0e),e(T0e,ezr),e(H0,ozr),e(H0,Gee),e(Gee,rzr),e(H0,tzr),e(Ee,azr),e(Ee,U0),e(U0,M0e),e(M0e,nzr),e(U0,szr),e(U0,Oee),e(Oee,lzr),e(U0,izr),e(Ee,dzr),e(Ee,J0),e(J0,E0e),e(E0e,czr),e(J0,fzr),e(J0,Vee),e(Vee,mzr),e(J0,gzr),e(Ee,hzr),e(Ee,Y0),e(Y0,C0e),e(C0e,pzr),e(Y0,_zr),e(Y0,Xee),e(Xee,uzr),e(Y0,bzr),e(Ee,vzr),e(Ee,K0),e(K0,w0e),e(w0e,Fzr),e(K0,Tzr),e(K0,zee),e(zee,Mzr),e(K0,Ezr),e(Ee,Czr),e(Ee,Z0),e(Z0,A0e),e(A0e,wzr),e(Z0,Azr),e(Z0,Qee),e(Qee,Lzr),e(Z0,yzr),e(Ee,xzr),e(Ee,ew),e(ew,L0e),e(L0e,$zr),e(ew,kzr),e(ew,Wee),e(Wee,Szr),e(ew,Rzr),e(Ee,Pzr),e(Ee,ow),e(ow,y0e),e(y0e,Bzr),e(ow,Nzr),e(ow,Hee),e(Hee,Izr),e(ow,qzr),e(zr,jzr),M(rw,zr,null),b(f,Ize,u),b(f,rf,u),e(rf,tw),e(tw,x0e),M(M$,x0e,null),e(rf,Dzr),e(rf,$0e),e($0e,Gzr),b(f,qze,u),b(f,br,u),M(E$,br,null),e(br,Ozr),e(br,tf),e(tf,Vzr),e(tf,Uee),e(Uee,Xzr),e(tf,zzr),e(tf,Jee),e(Jee,Qzr),e(tf,Wzr),e(br,Hzr),e(br,C$),e(C$,Uzr),e(C$,k0e),e(k0e,Jzr),e(C$,Yzr),e(br,Kzr),e(br,Ut),M(w$,Ut,null),e(Ut,Zzr),e(Ut,S0e),e(S0e,eQr),e(Ut,oQr),e(Ut,af),e(af,rQr),e(af,R0e),e(R0e,tQr),e(af,aQr),e(af,Yee),e(Yee,nQr),e(af,sQr),e(Ut,lQr),M(aw,Ut,null),e(br,iQr),e(br,Qr),M(A$,Qr,null),e(Qr,dQr),e(Qr,P0e),e(P0e,cQr),e(Qr,fQr),e(Qr,Cn),e(Cn,mQr),e(Cn,B0e),e(B0e,gQr),e(Cn,hQr),e(Cn,N0e),e(N0e,pQr),e(Cn,_Qr),e(Cn,I0e),e(I0e,uQr),e(Cn,bQr),e(Qr,vQr),e(Qr,$e),e($e,nw),e(nw,q0e),e(q0e,FQr),e(nw,TQr),e(nw,Kee),e(Kee,MQr),e(nw,EQr),e($e,CQr),e($e,sw),e(sw,j0e),e(j0e,wQr),e(sw,AQr),e(sw,Zee),e(Zee,LQr),e(sw,yQr),e($e,xQr),e($e,lw),e(lw,D0e),e(D0e,$Qr),e(lw,kQr),e(lw,eoe),e(eoe,SQr),e(lw,RQr),e($e,PQr),e($e,iw),e(iw,G0e),e(G0e,BQr),e(iw,NQr),e(iw,ooe),e(ooe,IQr),e(iw,qQr),e($e,jQr),e($e,dw),e(dw,O0e),e(O0e,DQr),e(dw,GQr),e(dw,roe),e(roe,OQr),e(dw,VQr),e($e,XQr),e($e,cw),e(cw,V0e),e(V0e,zQr),e(cw,QQr),e(cw,toe),e(toe,WQr),e(cw,HQr),e($e,UQr),e($e,fw),e(fw,X0e),e(X0e,JQr),e(fw,YQr),e(fw,aoe),e(aoe,KQr),e(fw,ZQr),e($e,eWr),e($e,mw),e(mw,z0e),e(z0e,oWr),e(mw,rWr),e(mw,noe),e(noe,tWr),e(mw,aWr),e($e,nWr),e($e,gw),e(gw,Q0e),e(Q0e,sWr),e(gw,lWr),e(gw,soe),e(soe,iWr),e(gw,dWr),e($e,cWr),e($e,hw),e(hw,W0e),e(W0e,fWr),e(hw,mWr),e(hw,loe),e(loe,gWr),e(hw,hWr),e(Qr,pWr),M(pw,Qr,null),b(f,jze,u),b(f,nf,u),e(nf,_w),e(_w,H0e),M(L$,H0e,null),e(nf,_Wr),e(nf,U0e),e(U0e,uWr),b(f,Dze,u),b(f,vr,u),M(y$,vr,null),e(vr,bWr),e(vr,sf),e(sf,vWr),e(sf,ioe),e(ioe,FWr),e(sf,TWr),e(sf,doe),e(doe,MWr),e(sf,EWr),e(vr,CWr),e(vr,x$),e(x$,wWr),e(x$,J0e),e(J0e,AWr),e(x$,LWr),e(vr,yWr),e(vr,Jt),M($$,Jt,null),e(Jt,xWr),e(Jt,Y0e),e(Y0e,$Wr),e(Jt,kWr),e(Jt,lf),e(lf,SWr),e(lf,K0e),e(K0e,RWr),e(lf,PWr),e(lf,coe),e(coe,BWr),e(lf,NWr),e(Jt,IWr),M(uw,Jt,null),e(vr,qWr),e(vr,Wr),M(k$,Wr,null),e(Wr,jWr),e(Wr,Z0e),e(Z0e,DWr),e(Wr,GWr),e(Wr,wn),e(wn,OWr),e(wn,ewe),e(ewe,VWr),e(wn,XWr),e(wn,owe),e(owe,zWr),e(wn,QWr),e(wn,rwe),e(rwe,WWr),e(wn,HWr),e(Wr,UWr),e(Wr,ke),e(ke,bw),e(bw,twe),e(twe,JWr),e(bw,YWr),e(bw,foe),e(foe,KWr),e(bw,ZWr),e(ke,eHr),e(ke,vw),e(vw,awe),e(awe,oHr),e(vw,rHr),e(vw,moe),e(moe,tHr),e(vw,aHr),e(ke,nHr),e(ke,Fw),e(Fw,nwe),e(nwe,sHr),e(Fw,lHr),e(Fw,goe),e(goe,iHr),e(Fw,dHr),e(ke,cHr),e(ke,Tw),e(Tw,swe),e(swe,fHr),e(Tw,mHr),e(Tw,hoe),e(hoe,gHr),e(Tw,hHr),e(ke,pHr),e(ke,Mw),e(Mw,lwe),e(lwe,_Hr),e(Mw,uHr),e(Mw,poe),e(poe,bHr),e(Mw,vHr),e(ke,FHr),e(ke,Ew),e(Ew,iwe),e(iwe,THr),e(Ew,MHr),e(Ew,_oe),e(_oe,EHr),e(Ew,CHr),e(ke,wHr),e(ke,Cw),e(Cw,dwe),e(dwe,AHr),e(Cw,LHr),e(Cw,uoe),e(uoe,yHr),e(Cw,xHr),e(ke,$Hr),e(ke,ww),e(ww,cwe),e(cwe,kHr),e(ww,SHr),e(ww,boe),e(boe,RHr),e(ww,PHr),e(ke,BHr),e(ke,Aw),e(Aw,fwe),e(fwe,NHr),e(Aw,IHr),e(Aw,voe),e(voe,qHr),e(Aw,jHr),e(ke,DHr),e(ke,Lw),e(Lw,mwe),e(mwe,GHr),e(Lw,OHr),e(Lw,Foe),e(Foe,VHr),e(Lw,XHr),e(Wr,zHr),M(yw,Wr,null),b(f,Gze,u),b(f,df,u),e(df,xw),e(xw,gwe),M(S$,gwe,null),e(df,QHr),e(df,hwe),e(hwe,WHr),b(f,Oze,u),b(f,Fr,u),M(R$,Fr,null),e(Fr,HHr),e(Fr,cf),e(cf,UHr),e(cf,Toe),e(Toe,JHr),e(cf,YHr),e(cf,Moe),e(Moe,KHr),e(cf,ZHr),e(Fr,eUr),e(Fr,P$),e(P$,oUr),e(P$,pwe),e(pwe,rUr),e(P$,tUr),e(Fr,aUr),e(Fr,Yt),M(B$,Yt,null),e(Yt,nUr),e(Yt,_we),e(_we,sUr),e(Yt,lUr),e(Yt,ff),e(ff,iUr),e(ff,uwe),e(uwe,dUr),e(ff,cUr),e(ff,Eoe),e(Eoe,fUr),e(ff,mUr),e(Yt,gUr),M($w,Yt,null),e(Fr,hUr),e(Fr,Hr),M(N$,Hr,null),e(Hr,pUr),e(Hr,bwe),e(bwe,_Ur),e(Hr,uUr),e(Hr,An),e(An,bUr),e(An,vwe),e(vwe,vUr),e(An,FUr),e(An,Fwe),e(Fwe,TUr),e(An,MUr),e(An,Twe),e(Twe,EUr),e(An,CUr),e(Hr,wUr),e(Hr,Se),e(Se,kw),e(kw,Mwe),e(Mwe,AUr),e(kw,LUr),e(kw,Coe),e(Coe,yUr),e(kw,xUr),e(Se,$Ur),e(Se,Sw),e(Sw,Ewe),e(Ewe,kUr),e(Sw,SUr),e(Sw,woe),e(woe,RUr),e(Sw,PUr),e(Se,BUr),e(Se,Rw),e(Rw,Cwe),e(Cwe,NUr),e(Rw,IUr),e(Rw,Aoe),e(Aoe,qUr),e(Rw,jUr),e(Se,DUr),e(Se,Pw),e(Pw,wwe),e(wwe,GUr),e(Pw,OUr),e(Pw,Loe),e(Loe,VUr),e(Pw,XUr),e(Se,zUr),e(Se,Bw),e(Bw,Awe),e(Awe,QUr),e(Bw,WUr),e(Bw,yoe),e(yoe,HUr),e(Bw,UUr),e(Se,JUr),e(Se,Nw),e(Nw,Lwe),e(Lwe,YUr),e(Nw,KUr),e(Nw,xoe),e(xoe,ZUr),e(Nw,eJr),e(Se,oJr),e(Se,Iw),e(Iw,ywe),e(ywe,rJr),e(Iw,tJr),e(Iw,$oe),e($oe,aJr),e(Iw,nJr),e(Se,sJr),e(Se,qw),e(qw,xwe),e(xwe,lJr),e(qw,iJr),e(qw,koe),e(koe,dJr),e(qw,cJr),e(Se,fJr),e(Se,jw),e(jw,$we),e($we,mJr),e(jw,gJr),e(jw,Soe),e(Soe,hJr),e(jw,pJr),e(Se,_Jr),e(Se,Dw),e(Dw,kwe),e(kwe,uJr),e(Dw,bJr),e(Dw,Roe),e(Roe,vJr),e(Dw,FJr),e(Hr,TJr),M(Gw,Hr,null),b(f,Vze,u),b(f,mf,u),e(mf,Ow),e(Ow,Swe),M(I$,Swe,null),e(mf,MJr),e(mf,Rwe),e(Rwe,EJr),b(f,Xze,u),b(f,Tr,u),M(q$,Tr,null),e(Tr,CJr),e(Tr,gf),e(gf,wJr),e(gf,Poe),e(Poe,AJr),e(gf,LJr),e(gf,Boe),e(Boe,yJr),e(gf,xJr),e(Tr,$Jr),e(Tr,j$),e(j$,kJr),e(j$,Pwe),e(Pwe,SJr),e(j$,RJr),e(Tr,PJr),e(Tr,Kt),M(D$,Kt,null),e(Kt,BJr),e(Kt,Bwe),e(Bwe,NJr),e(Kt,IJr),e(Kt,hf),e(hf,qJr),e(hf,Nwe),e(Nwe,jJr),e(hf,DJr),e(hf,Noe),e(Noe,GJr),e(hf,OJr),e(Kt,VJr),M(Vw,Kt,null),e(Tr,XJr),e(Tr,Ur),M(G$,Ur,null),e(Ur,zJr),e(Ur,Iwe),e(Iwe,QJr),e(Ur,WJr),e(Ur,Ln),e(Ln,HJr),e(Ln,qwe),e(qwe,UJr),e(Ln,JJr),e(Ln,jwe),e(jwe,YJr),e(Ln,KJr),e(Ln,Dwe),e(Dwe,ZJr),e(Ln,eYr),e(Ur,oYr),e(Ur,Re),e(Re,Xw),e(Xw,Gwe),e(Gwe,rYr),e(Xw,tYr),e(Xw,Ioe),e(Ioe,aYr),e(Xw,nYr),e(Re,sYr),e(Re,zw),e(zw,Owe),e(Owe,lYr),e(zw,iYr),e(zw,qoe),e(qoe,dYr),e(zw,cYr),e(Re,fYr),e(Re,Qw),e(Qw,Vwe),e(Vwe,mYr),e(Qw,gYr),e(Qw,joe),e(joe,hYr),e(Qw,pYr),e(Re,_Yr),e(Re,Ww),e(Ww,Xwe),e(Xwe,uYr),e(Ww,bYr),e(Ww,Doe),e(Doe,vYr),e(Ww,FYr),e(Re,TYr),e(Re,Hw),e(Hw,zwe),e(zwe,MYr),e(Hw,EYr),e(Hw,Goe),e(Goe,CYr),e(Hw,wYr),e(Re,AYr),e(Re,Uw),e(Uw,Qwe),e(Qwe,LYr),e(Uw,yYr),e(Uw,Ooe),e(Ooe,xYr),e(Uw,$Yr),e(Re,kYr),e(Re,Jw),e(Jw,Wwe),e(Wwe,SYr),e(Jw,RYr),e(Jw,Voe),e(Voe,PYr),e(Jw,BYr),e(Re,NYr),e(Re,Yw),e(Yw,Hwe),e(Hwe,IYr),e(Yw,qYr),e(Yw,Xoe),e(Xoe,jYr),e(Yw,DYr),e(Re,GYr),e(Re,Kw),e(Kw,Uwe),e(Uwe,OYr),e(Kw,VYr),e(Kw,zoe),e(zoe,XYr),e(Kw,zYr),e(Re,QYr),e(Re,Zw),e(Zw,Jwe),e(Jwe,WYr),e(Zw,HYr),e(Zw,Qoe),e(Qoe,UYr),e(Zw,JYr),e(Ur,YYr),M(eA,Ur,null),b(f,zze,u),b(f,pf,u),e(pf,oA),e(oA,Ywe),M(O$,Ywe,null),e(pf,KYr),e(pf,Kwe),e(Kwe,ZYr),b(f,Qze,u),b(f,Mr,u),M(V$,Mr,null),e(Mr,eKr),e(Mr,_f),e(_f,oKr),e(_f,Woe),e(Woe,rKr),e(_f,tKr),e(_f,Hoe),e(Hoe,aKr),e(_f,nKr),e(Mr,sKr),e(Mr,X$),e(X$,lKr),e(X$,Zwe),e(Zwe,iKr),e(X$,dKr),e(Mr,cKr),e(Mr,Zt),M(z$,Zt,null),e(Zt,fKr),e(Zt,eAe),e(eAe,mKr),e(Zt,gKr),e(Zt,uf),e(uf,hKr),e(uf,oAe),e(oAe,pKr),e(uf,_Kr),e(uf,Uoe),e(Uoe,uKr),e(uf,bKr),e(Zt,vKr),M(rA,Zt,null),e(Mr,FKr),e(Mr,Jr),M(Q$,Jr,null),e(Jr,TKr),e(Jr,rAe),e(rAe,MKr),e(Jr,EKr),e(Jr,yn),e(yn,CKr),e(yn,tAe),e(tAe,wKr),e(yn,AKr),e(yn,aAe),e(aAe,LKr),e(yn,yKr),e(yn,nAe),e(nAe,xKr),e(yn,$Kr),e(Jr,kKr),e(Jr,Ve),e(Ve,tA),e(tA,sAe),e(sAe,SKr),e(tA,RKr),e(tA,Joe),e(Joe,PKr),e(tA,BKr),e(Ve,NKr),e(Ve,aA),e(aA,lAe),e(lAe,IKr),e(aA,qKr),e(aA,Yoe),e(Yoe,jKr),e(aA,DKr),e(Ve,GKr),e(Ve,nA),e(nA,iAe),e(iAe,OKr),e(nA,VKr),e(nA,Koe),e(Koe,XKr),e(nA,zKr),e(Ve,QKr),e(Ve,sA),e(sA,dAe),e(dAe,WKr),e(sA,HKr),e(sA,Zoe),e(Zoe,UKr),e(sA,JKr),e(Ve,YKr),e(Ve,lA),e(lA,cAe),e(cAe,KKr),e(lA,ZKr),e(lA,ere),e(ere,eZr),e(lA,oZr),e(Ve,rZr),e(Ve,iA),e(iA,fAe),e(fAe,tZr),e(iA,aZr),e(iA,ore),e(ore,nZr),e(iA,sZr),e(Ve,lZr),e(Ve,dA),e(dA,mAe),e(mAe,iZr),e(dA,dZr),e(dA,rre),e(rre,cZr),e(dA,fZr),e(Ve,mZr),e(Ve,cA),e(cA,gAe),e(gAe,gZr),e(cA,hZr),e(cA,tre),e(tre,pZr),e(cA,_Zr),e(Jr,uZr),M(fA,Jr,null),b(f,Wze,u),b(f,bf,u),e(bf,mA),e(mA,hAe),M(W$,hAe,null),e(bf,bZr),e(bf,pAe),e(pAe,vZr),b(f,Hze,u),b(f,Er,u),M(H$,Er,null),e(Er,FZr),e(Er,vf),e(vf,TZr),e(vf,are),e(are,MZr),e(vf,EZr),e(vf,nre),e(nre,CZr),e(vf,wZr),e(Er,AZr),e(Er,U$),e(U$,LZr),e(U$,_Ae),e(_Ae,yZr),e(U$,xZr),e(Er,$Zr),e(Er,ea),M(J$,ea,null),e(ea,kZr),e(ea,uAe),e(uAe,SZr),e(ea,RZr),e(ea,Ff),e(Ff,PZr),e(Ff,bAe),e(bAe,BZr),e(Ff,NZr),e(Ff,sre),e(sre,IZr),e(Ff,qZr),e(ea,jZr),M(gA,ea,null),e(Er,DZr),e(Er,Yr),M(Y$,Yr,null),e(Yr,GZr),e(Yr,vAe),e(vAe,OZr),e(Yr,VZr),e(Yr,xn),e(xn,XZr),e(xn,FAe),e(FAe,zZr),e(xn,QZr),e(xn,TAe),e(TAe,WZr),e(xn,HZr),e(xn,MAe),e(MAe,UZr),e(xn,JZr),e(Yr,YZr),e(Yr,Xe),e(Xe,hA),e(hA,EAe),e(EAe,KZr),e(hA,ZZr),e(hA,lre),e(lre,eet),e(hA,oet),e(Xe,ret),e(Xe,pA),e(pA,CAe),e(CAe,tet),e(pA,aet),e(pA,ire),e(ire,net),e(pA,set),e(Xe,iet),e(Xe,_A),e(_A,wAe),e(wAe,det),e(_A,cet),e(_A,dre),e(dre,fet),e(_A,met),e(Xe,get),e(Xe,uA),e(uA,AAe),e(AAe,het),e(uA,pet),e(uA,cre),e(cre,_et),e(uA,uet),e(Xe,bet),e(Xe,bA),e(bA,LAe),e(LAe,vet),e(bA,Fet),e(bA,fre),e(fre,Tet),e(bA,Met),e(Xe,Eet),e(Xe,vA),e(vA,yAe),e(yAe,Cet),e(vA,wet),e(vA,mre),e(mre,Aet),e(vA,Let),e(Xe,yet),e(Xe,FA),e(FA,xAe),e(xAe,xet),e(FA,$et),e(FA,gre),e(gre,ket),e(FA,Set),e(Xe,Ret),e(Xe,TA),e(TA,$Ae),e($Ae,Pet),e(TA,Bet),e(TA,hre),e(hre,Net),e(TA,Iet),e(Yr,qet),M(MA,Yr,null),b(f,Uze,u),b(f,Tf,u),e(Tf,EA),e(EA,kAe),M(K$,kAe,null),e(Tf,jet),e(Tf,SAe),e(SAe,Det),b(f,Jze,u),b(f,Cr,u),M(Z$,Cr,null),e(Cr,Get),e(Cr,Mf),e(Mf,Oet),e(Mf,pre),e(pre,Vet),e(Mf,Xet),e(Mf,_re),e(_re,zet),e(Mf,Qet),e(Cr,Wet),e(Cr,ek),e(ek,Het),e(ek,RAe),e(RAe,Uet),e(ek,Jet),e(Cr,Yet),e(Cr,oa),M(ok,oa,null),e(oa,Ket),e(oa,PAe),e(PAe,Zet),e(oa,eot),e(oa,Ef),e(Ef,oot),e(Ef,BAe),e(BAe,rot),e(Ef,tot),e(Ef,ure),e(ure,aot),e(Ef,not),e(oa,sot),M(CA,oa,null),e(Cr,lot),e(Cr,Kr),M(rk,Kr,null),e(Kr,iot),e(Kr,NAe),e(NAe,dot),e(Kr,cot),e(Kr,$n),e($n,fot),e($n,IAe),e(IAe,mot),e($n,got),e($n,qAe),e(qAe,hot),e($n,pot),e($n,jAe),e(jAe,_ot),e($n,uot),e(Kr,bot),e(Kr,DAe),e(DAe,wA),e(wA,GAe),e(GAe,vot),e(wA,Fot),e(wA,bre),e(bre,Tot),e(wA,Mot),e(Kr,Eot),M(AA,Kr,null),b(f,Yze,u),b(f,Cf,u),e(Cf,LA),e(LA,OAe),M(tk,OAe,null),e(Cf,Cot),e(Cf,VAe),e(VAe,wot),b(f,Kze,u),b(f,wr,u),M(ak,wr,null),e(wr,Aot),e(wr,wf),e(wf,Lot),e(wf,vre),e(vre,yot),e(wf,xot),e(wf,Fre),e(Fre,$ot),e(wf,kot),e(wr,Sot),e(wr,nk),e(nk,Rot),e(nk,XAe),e(XAe,Pot),e(nk,Bot),e(wr,Not),e(wr,ra),M(sk,ra,null),e(ra,Iot),e(ra,zAe),e(zAe,qot),e(ra,jot),e(ra,Af),e(Af,Dot),e(Af,QAe),e(QAe,Got),e(Af,Oot),e(Af,Tre),e(Tre,Vot),e(Af,Xot),e(ra,zot),M(yA,ra,null),e(wr,Qot),e(wr,Zr),M(lk,Zr,null),e(Zr,Wot),e(Zr,WAe),e(WAe,Hot),e(Zr,Uot),e(Zr,kn),e(kn,Jot),e(kn,HAe),e(HAe,Yot),e(kn,Kot),e(kn,UAe),e(UAe,Zot),e(kn,ert),e(kn,JAe),e(JAe,ort),e(kn,rrt),e(Zr,trt),e(Zr,ik),e(ik,xA),e(xA,YAe),e(YAe,art),e(xA,nrt),e(xA,Mre),e(Mre,srt),e(xA,lrt),e(ik,irt),e(ik,$A),e($A,KAe),e(KAe,drt),e($A,crt),e($A,Ere),e(Ere,frt),e($A,mrt),e(Zr,grt),M(kA,Zr,null),b(f,Zze,u),b(f,Lf,u),e(Lf,SA),e(SA,ZAe),M(dk,ZAe,null),e(Lf,hrt),e(Lf,e7e),e(e7e,prt),b(f,eQe,u),b(f,Ar,u),M(ck,Ar,null),e(Ar,_rt),e(Ar,yf),e(yf,urt),e(yf,Cre),e(Cre,brt),e(yf,vrt),e(yf,wre),e(wre,Frt),e(yf,Trt),e(Ar,Mrt),e(Ar,fk),e(fk,Ert),e(fk,o7e),e(o7e,Crt),e(fk,wrt),e(Ar,Art),e(Ar,ta),M(mk,ta,null),e(ta,Lrt),e(ta,r7e),e(r7e,yrt),e(ta,xrt),e(ta,xf),e(xf,$rt),e(xf,t7e),e(t7e,krt),e(xf,Srt),e(xf,Are),e(Are,Rrt),e(xf,Prt),e(ta,Brt),M(RA,ta,null),e(Ar,Nrt),e(Ar,et),M(gk,et,null),e(et,Irt),e(et,a7e),e(a7e,qrt),e(et,jrt),e(et,Sn),e(Sn,Drt),e(Sn,n7e),e(n7e,Grt),e(Sn,Ort),e(Sn,s7e),e(s7e,Vrt),e(Sn,Xrt),e(Sn,l7e),e(l7e,zrt),e(Sn,Qrt),e(et,Wrt),e(et,i7e),e(i7e,PA),e(PA,d7e),e(d7e,Hrt),e(PA,Urt),e(PA,Lre),e(Lre,Jrt),e(PA,Yrt),e(et,Krt),M(BA,et,null),oQe=!0},p(f,[u]){const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),qf.$set(hk);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),Jg.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),Sh.$set(f7e);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),pp.$set(m7e);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),_p.$set(pk);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),Ip.$set(g7e);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),qp.$set(Rn);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),Gp.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),zu.$set(p7e);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),Wu.$set(_7e);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),D1.$set(_k);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),O1.$set(u7e);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),$4.$set(uk);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),S4.$set(b7e);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),b2.$set(bk);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),F2.$set(v7e);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),D2.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),O2.$set(T7e);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Db.$set($f);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),Ob.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),Fv.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),Mv.$set(C7e);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),$v.$set(vk);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),Sv.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),_3.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),b3.$set(L7e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),i5.$set(at);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),c5.$set(Fk);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),g5.$set(y7e);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),p5.$set(Tk);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),$5.$set(x7e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),S5.$set(nt);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),B5.$set($7e);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),I5.$set(kf);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),D5.$set(k7e);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),O5.$set(S7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),Z5.$set(L);const NA={};u&2&&(NA.$$scope={dirty:u,ctx:f}),oF.$set(NA);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),iF.$set(R7e);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),cF.$set(P7e);const IA={};u&2&&(IA.$$scope={dirty:u,ctx:f}),MF.$set(IA);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),CF.$set(B7e);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),yF.$set(N7e);const qA={};u&2&&(qA.$$scope={dirty:u,ctx:f}),$F.$set(qA);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),IF.$set(I7e);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),jF.$set(q7e);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),XF.$set(jA);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),QF.$set(j7e);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),JF.$set(D7e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),KF.$set(DA);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),o6.$set(G7e);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),t6.$set(O7e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),c6.$set(GA);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),m6.$set(V7e);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),p6.$set(X7e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),u6.$set(OA);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),gT.$set(z7e);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),pT.$set(Q7e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),jT.$set(VA);const W7e={};u&2&&(W7e.$$scope={dirty:u,ctx:f}),GT.$set(W7e);const H7e={};u&2&&(H7e.$$scope={dirty:u,ctx:f}),rM.$set(H7e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),aM.$set(XA);const U7e={};u&2&&(U7e.$$scope={dirty:u,ctx:f}),fM.$set(U7e);const J7e={};u&2&&(J7e.$$scope={dirty:u,ctx:f}),gM.$set(J7e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),PM.$set(zA);const Y7e={};u&2&&(Y7e.$$scope={dirty:u,ctx:f}),NM.$set(Y7e);const K7e={};u&2&&(K7e.$$scope={dirty:u,ctx:f}),WM.$set(K7e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),UM.$set(QA);const Z7e={};u&2&&(Z7e.$$scope={dirty:u,ctx:f}),ME.$set(Z7e);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),CE.$set(eLe);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),OE.$set(WA);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),XE.$set(oLe);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),WE.$set(rLe);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),UE.$set(HA);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),YE.$set(tLe);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),ZE.$set(aLe);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),FC.$set(UA);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),MC.$set(nLe);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),VC.$set(sLe);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),zC.$set(JA);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),WC.$set(lLe);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),UC.$set(iLe);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),YC.$set(YA);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),ZC.$set(dLe);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),L0.$set(cLe);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),x0.$set(KA);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),D0.$set(fLe);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),O0.$set(mLe);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),rw.$set(ZA);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),aw.$set(gLe);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),pw.$set(hLe);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),uw.$set(e7);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),yw.$set(pLe);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),$w.$set(_Le);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),Gw.$set(o7);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),Vw.$set(uLe);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),eA.$set(bLe);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),rA.$set(r7);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),fA.$set(vLe);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),gA.$set(FLe);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),MA.$set(t7);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),CA.$set(TLe);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),AA.$set(MLe);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),yA.$set(a7);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),kA.$set(ELe);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),RA.$set(CLe);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),BA.$set(n7)},i(f){oQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(qf.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(cy.$$.fragment,f),E(Jg.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(_y.$$.fragment,f),E(Sh.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(My.$$.fragment,f),E(pp.$$.fragment,f),E(_p.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Ip.$$.fragment,f),E(qp.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(Gp.$$.fragment,f),E(Py.$$.fragment,f),E(zu.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Wu.$$.fragment,f),E(jy.$$.fragment,f),E(D1.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(O1.$$.fragment,f),E(Xy.$$.fragment,f),E($4.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(S4.$$.fragment,f),E(Uy.$$.fragment,f),E(b2.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(F2.$$.fragment,f),E(e8.$$.fragment,f),E(D2.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(O2.$$.fragment,f),E(n8.$$.fragment,f),E(Db.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(Ob.$$.fragment,f),E(c8.$$.fragment,f),E(Fv.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(Mv.$$.fragment,f),E(p8.$$.fragment,f),E($v.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(Sv.$$.fragment,f),E(F8.$$.fragment,f),E(_3.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(b3.$$.fragment,f),E(w8.$$.fragment,f),E(i5.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(c5.$$.fragment,f),E($8.$$.fragment,f),E(g5.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(p5.$$.fragment,f),E(B8.$$.fragment,f),E($5.$$.fragment,f),E(N8.$$.fragment,f),E(I8.$$.fragment,f),E(j8.$$.fragment,f),E(S5.$$.fragment,f),E(D8.$$.fragment,f),E(B5.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(I5.$$.fragment,f),E(z8.$$.fragment,f),E(D5.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(O5.$$.fragment,f),E(J8.$$.fragment,f),E(Z5.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(oF.$$.fragment,f),E(o9.$$.fragment,f),E(iF.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(cF.$$.fragment,f),E(s9.$$.fragment,f),E(MF.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(CF.$$.fragment,f),E(f9.$$.fragment,f),E(yF.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E($F.$$.fragment,f),E(u9.$$.fragment,f),E(IF.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(jF.$$.fragment,f),E(M9.$$.fragment,f),E(XF.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(QF.$$.fragment,f),E(L9.$$.fragment,f),E(JF.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(KF.$$.fragment,f),E(R9.$$.fragment,f),E(o6.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(t6.$$.fragment,f),E(q9.$$.fragment,f),E(c6.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(m6.$$.fragment,f),E(V9.$$.fragment,f),E(p6.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(u6.$$.fragment,f),E(H9.$$.fragment,f),E(gT.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(pT.$$.fragment,f),E(Z9.$$.fragment,f),E(jT.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(GT.$$.fragment,f),E(ax.$$.fragment,f),E(rM.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(aM.$$.fragment,f),E(dx.$$.fragment,f),E(fM.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(gM.$$.fragment,f),E(hx.$$.fragment,f),E(PM.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(NM.$$.fragment,f),E(vx.$$.fragment,f),E(WM.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(UM.$$.fragment,f),E(Cx.$$.fragment,f),E(ME.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(CE.$$.fragment,f),E(xx.$$.fragment,f),E(OE.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(XE.$$.fragment,f),E(Px.$$.fragment,f),E(WE.$$.fragment,f),E(Nx.$$.fragment,f),E(Ix.$$.fragment,f),E(jx.$$.fragment,f),E(UE.$$.fragment,f),E(Dx.$$.fragment,f),E(YE.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(ZE.$$.fragment,f),E(zx.$$.fragment,f),E(FC.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(MC.$$.fragment,f),E(Jx.$$.fragment,f),E(VC.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(zC.$$.fragment,f),E(o$.$$.fragment,f),E(WC.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(UC.$$.fragment,f),E(s$.$$.fragment,f),E(YC.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(ZC.$$.fragment,f),E(f$.$$.fragment,f),E(L0.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(x0.$$.fragment,f),E(_$.$$.fragment,f),E(D0.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(O0.$$.fragment,f),E(T$.$$.fragment,f),E(rw.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(aw.$$.fragment,f),E(A$.$$.fragment,f),E(pw.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(uw.$$.fragment,f),E(k$.$$.fragment,f),E(yw.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E($w.$$.fragment,f),E(N$.$$.fragment,f),E(Gw.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(Vw.$$.fragment,f),E(G$.$$.fragment,f),E(eA.$$.fragment,f),E(O$.$$.fragment,f),E(V$.$$.fragment,f),E(z$.$$.fragment,f),E(rA.$$.fragment,f),E(Q$.$$.fragment,f),E(fA.$$.fragment,f),E(W$.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(gA.$$.fragment,f),E(Y$.$$.fragment,f),E(MA.$$.fragment,f),E(K$.$$.fragment,f),E(Z$.$$.fragment,f),E(ok.$$.fragment,f),E(CA.$$.fragment,f),E(rk.$$.fragment,f),E(AA.$$.fragment,f),E(tk.$$.fragment,f),E(ak.$$.fragment,f),E(sk.$$.fragment,f),E(yA.$$.fragment,f),E(lk.$$.fragment,f),E(kA.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(RA.$$.fragment,f),E(gk.$$.fragment,f),E(BA.$$.fragment,f),oQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(qf.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(cy.$$.fragment,f),C(Jg.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(_y.$$.fragment,f),C(Sh.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(My.$$.fragment,f),C(pp.$$.fragment,f),C(_p.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Ip.$$.fragment,f),C(qp.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(Gp.$$.fragment,f),C(Py.$$.fragment,f),C(zu.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Wu.$$.fragment,f),C(jy.$$.fragment,f),C(D1.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(O1.$$.fragment,f),C(Xy.$$.fragment,f),C($4.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(S4.$$.fragment,f),C(Uy.$$.fragment,f),C(b2.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(F2.$$.fragment,f),C(e8.$$.fragment,f),C(D2.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(O2.$$.fragment,f),C(n8.$$.fragment,f),C(Db.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(Ob.$$.fragment,f),C(c8.$$.fragment,f),C(Fv.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(Mv.$$.fragment,f),C(p8.$$.fragment,f),C($v.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(Sv.$$.fragment,f),C(F8.$$.fragment,f),C(_3.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(b3.$$.fragment,f),C(w8.$$.fragment,f),C(i5.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(c5.$$.fragment,f),C($8.$$.fragment,f),C(g5.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(p5.$$.fragment,f),C(B8.$$.fragment,f),C($5.$$.fragment,f),C(N8.$$.fragment,f),C(I8.$$.fragment,f),C(j8.$$.fragment,f),C(S5.$$.fragment,f),C(D8.$$.fragment,f),C(B5.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(I5.$$.fragment,f),C(z8.$$.fragment,f),C(D5.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(O5.$$.fragment,f),C(J8.$$.fragment,f),C(Z5.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(oF.$$.fragment,f),C(o9.$$.fragment,f),C(iF.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(cF.$$.fragment,f),C(s9.$$.fragment,f),C(MF.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(CF.$$.fragment,f),C(f9.$$.fragment,f),C(yF.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C($F.$$.fragment,f),C(u9.$$.fragment,f),C(IF.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(jF.$$.fragment,f),C(M9.$$.fragment,f),C(XF.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(QF.$$.fragment,f),C(L9.$$.fragment,f),C(JF.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(KF.$$.fragment,f),C(R9.$$.fragment,f),C(o6.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(t6.$$.fragment,f),C(q9.$$.fragment,f),C(c6.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(m6.$$.fragment,f),C(V9.$$.fragment,f),C(p6.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(u6.$$.fragment,f),C(H9.$$.fragment,f),C(gT.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(pT.$$.fragment,f),C(Z9.$$.fragment,f),C(jT.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(GT.$$.fragment,f),C(ax.$$.fragment,f),C(rM.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(aM.$$.fragment,f),C(dx.$$.fragment,f),C(fM.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(gM.$$.fragment,f),C(hx.$$.fragment,f),C(PM.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(NM.$$.fragment,f),C(vx.$$.fragment,f),C(WM.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(UM.$$.fragment,f),C(Cx.$$.fragment,f),C(ME.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(CE.$$.fragment,f),C(xx.$$.fragment,f),C(OE.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(XE.$$.fragment,f),C(Px.$$.fragment,f),C(WE.$$.fragment,f),C(Nx.$$.fragment,f),C(Ix.$$.fragment,f),C(jx.$$.fragment,f),C(UE.$$.fragment,f),C(Dx.$$.fragment,f),C(YE.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(ZE.$$.fragment,f),C(zx.$$.fragment,f),C(FC.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(MC.$$.fragment,f),C(Jx.$$.fragment,f),C(VC.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(zC.$$.fragment,f),C(o$.$$.fragment,f),C(WC.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(UC.$$.fragment,f),C(s$.$$.fragment,f),C(YC.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(ZC.$$.fragment,f),C(f$.$$.fragment,f),C(L0.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(x0.$$.fragment,f),C(_$.$$.fragment,f),C(D0.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(O0.$$.fragment,f),C(T$.$$.fragment,f),C(rw.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(aw.$$.fragment,f),C(A$.$$.fragment,f),C(pw.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(uw.$$.fragment,f),C(k$.$$.fragment,f),C(yw.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C($w.$$.fragment,f),C(N$.$$.fragment,f),C(Gw.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(Vw.$$.fragment,f),C(G$.$$.fragment,f),C(eA.$$.fragment,f),C(O$.$$.fragment,f),C(V$.$$.fragment,f),C(z$.$$.fragment,f),C(rA.$$.fragment,f),C(Q$.$$.fragment,f),C(fA.$$.fragment,f),C(W$.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(gA.$$.fragment,f),C(Y$.$$.fragment,f),C(MA.$$.fragment,f),C(K$.$$.fragment,f),C(Z$.$$.fragment,f),C(ok.$$.fragment,f),C(CA.$$.fragment,f),C(rk.$$.fragment,f),C(AA.$$.fragment,f),C(tk.$$.fragment,f),C(ak.$$.fragment,f),C(sk.$$.fragment,f),C(yA.$$.fragment,f),C(lk.$$.fragment,f),C(kA.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(RA.$$.fragment,f),C(gk.$$.fragment,f),C(BA.$$.fragment,f),oQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(JVe),f&&t(Ri),w(ay),f&&t(YVe),f&&t(qn),f&&t(KVe),w(ny,f),f&&t(ZVe),f&&t(jS),f&&t(eXe),w(qf,f),f&&t(oXe),f&&t(Pi),w(sy),f&&t(rXe),f&&t(wo),w(ly),w(cy),w(Jg),w(fy),f&&t(tXe),f&&t(Ni),w(my),f&&t(aXe),f&&t(Ao),w(gy),w(_y),w(Sh),w(uy),f&&t(nXe),f&&t(Ii),w(by),f&&t(sXe),f&&t(Lo),w(vy),w(My),w(pp),w(_p),w(Ey),f&&t(lXe),f&&t(qi),w(Cy),f&&t(iXe),f&&t(yo),w(wy),w(yy),w(Ip),w(qp),w(xy),f&&t(dXe),f&&t(Di),w($y),f&&t(cXe),f&&t(xo),w(ky),w(Ry),w(Gp),w(Py),w(zu),f&&t(fXe),f&&t(Vi),w(By),f&&t(mXe),f&&t($o),w(Ny),w(qy),w(Wu),w(jy),w(D1),f&&t(gXe),f&&t(Qi),w(Dy),f&&t(hXe),f&&t(ko),w(Gy),w(Vy),w(O1),w(Xy),w($4),f&&t(pXe),f&&t(Ui),w(zy),f&&t(_Xe),f&&t(So),w(Qy),w(Hy),w(S4),w(Uy),w(b2),f&&t(uXe),f&&t(Ki),w(Jy),f&&t(bXe),f&&t(Ro),w(Yy),w(Zy),w(F2),w(e8),w(D2),f&&t(vXe),f&&t(od),w(o8),f&&t(FXe),f&&t(Po),w(r8),w(a8),w(O2),w(n8),w(Db),f&&t(TXe),f&&t(ad),w(s8),f&&t(MXe),f&&t(Bo),w(l8),w(d8),w(Ob),w(c8),w(Fv),f&&t(EXe),f&&t(ld),w(f8),f&&t(CXe),f&&t(No),w(m8),w(h8),w(Mv),w(p8),w($v),f&&t(wXe),f&&t(cd),w(_8),f&&t(AXe),f&&t(qo),w(u8),w(v8),w(Sv),w(F8),w(_3),f&&t(LXe),f&&t(gd),w(T8),f&&t(yXe),f&&t(jo),w(M8),w(C8),w(b3),w(w8),w(i5),f&&t(xXe),f&&t(_d),w(A8),f&&t($Xe),f&&t(Do),w(L8),w(x8),w(c5),w($8),w(g5),f&&t(kXe),f&&t(vd),w(k8),f&&t(SXe),f&&t(Go),w(S8),w(P8),w(p5),w(B8),w($5),f&&t(RXe),f&&t(Md),w(N8),f&&t(PXe),f&&t(Oo),w(I8),w(j8),w(S5),w(D8),w(B5),f&&t(BXe),f&&t(wd),w(G8),f&&t(NXe),f&&t(Vo),w(O8),w(X8),w(I5),w(z8),w(D5),f&&t(IXe),f&&t(yd),w(Q8),f&&t(qXe),f&&t(Xo),w(W8),w(U8),w(O5),w(J8),w(Z5),f&&t(jXe),f&&t(kd),w(Y8),f&&t(DXe),f&&t(zo),w(K8),w(e9),w(oF),w(o9),w(iF),f&&t(GXe),f&&t(Pd),w(r9),f&&t(OXe),f&&t(Qo),w(t9),w(n9),w(cF),w(s9),w(MF),f&&t(VXe),f&&t(Id),w(l9),f&&t(XXe),f&&t(Wo),w(i9),w(c9),w(CF),w(f9),w(yF),f&&t(zXe),f&&t(Dd),w(g9),f&&t(QXe),f&&t(Ho),w(h9),w(_9),w($F),w(u9),w(IF),f&&t(WXe),f&&t(Vd),w(b9),f&&t(HXe),f&&t(Uo),w(v9),w(T9),w(jF),w(M9),w(XF),f&&t(UXe),f&&t(Wd),w(E9),f&&t(JXe),f&&t(Jo),w(C9),w(A9),w(QF),w(L9),w(JF),f&&t(YXe),f&&t(Jd),w(x9),f&&t(KXe),f&&t(Yo),w($9),w(S9),w(KF),w(R9),w(o6),f&&t(ZXe),f&&t(Zd),w(P9),f&&t(eze),f&&t(Ko),w(B9),w(I9),w(t6),w(q9),w(c6),f&&t(oze),f&&t(rc),w(j9),f&&t(rze),f&&t(Zo),w(D9),w(O9),w(m6),w(V9),w(p6),f&&t(tze),f&&t(nc),w(X9),f&&t(aze),f&&t(er),w(z9),w(W9),w(u6),w(H9),w(gT),f&&t(nze),f&&t(ic),w(U9),f&&t(sze),f&&t(or),w(J9),w(K9),w(pT),w(Z9),w(jT),f&&t(lze),f&&t(fc),w(ex),f&&t(ize),f&&t(rr),w(ox),w(tx),w(GT),w(ax),w(rM),f&&t(dze),f&&t(hc),w(nx),f&&t(cze),f&&t(tr),w(sx),w(ix),w(aM),w(dx),w(fM),f&&t(fze),f&&t(uc),w(cx),f&&t(mze),f&&t(nr),w(fx),w(gx),w(gM),w(hx),w(PM),f&&t(gze),f&&t(Fc),w(px),f&&t(hze),f&&t(sr),w(_x),w(bx),w(NM),w(vx),w(WM),f&&t(pze),f&&t(Ec),w(Fx),f&&t(_ze),f&&t(lr),w(Tx),w(Ex),w(UM),w(Cx),w(ME),f&&t(uze),f&&t(Ac),w(wx),f&&t(bze),f&&t(ir),w(Ax),w(yx),w(CE),w(xx),w(OE),f&&t(vze),f&&t(xc),w($x),f&&t(Fze),f&&t(dr),w(kx),w(Rx),w(XE),w(Px),w(WE),f&&t(Tze),f&&t(Sc),w(Nx),f&&t(Mze),f&&t(cr),w(Ix),w(jx),w(UE),w(Dx),w(YE),f&&t(Eze),f&&t(Bc),w(Gx),f&&t(Cze),f&&t(fr),w(Ox),w(Xx),w(ZE),w(zx),w(FC),f&&t(wze),f&&t(qc),w(Qx),f&&t(Aze),f&&t(mr),w(Wx),w(Ux),w(MC),w(Jx),w(VC),f&&t(Lze),f&&t(Gc),w(Yx),f&&t(yze),f&&t(gr),w(Kx),w(e$),w(zC),w(o$),w(WC),f&&t(xze),f&&t(Xc),w(r$),f&&t($ze),f&&t(hr),w(t$),w(n$),w(UC),w(s$),w(YC),f&&t(kze),f&&t(Wc),w(l$),f&&t(Sze),f&&t(pr),w(i$),w(c$),w(ZC),w(f$),w(L0),f&&t(Rze),f&&t(Jc),w(m$),f&&t(Pze),f&&t(_r),w(g$),w(p$),w(x0),w(_$),w(D0),f&&t(Bze),f&&t(Zc),w(u$),f&&t(Nze),f&&t(ur),w(b$),w(F$),w(O0),w(T$),w(rw),f&&t(Ize),f&&t(rf),w(M$),f&&t(qze),f&&t(br),w(E$),w(w$),w(aw),w(A$),w(pw),f&&t(jze),f&&t(nf),w(L$),f&&t(Dze),f&&t(vr),w(y$),w($$),w(uw),w(k$),w(yw),f&&t(Gze),f&&t(df),w(S$),f&&t(Oze),f&&t(Fr),w(R$),w(B$),w($w),w(N$),w(Gw),f&&t(Vze),f&&t(mf),w(I$),f&&t(Xze),f&&t(Tr),w(q$),w(D$),w(Vw),w(G$),w(eA),f&&t(zze),f&&t(pf),w(O$),f&&t(Qze),f&&t(Mr),w(V$),w(z$),w(rA),w(Q$),w(fA),f&&t(Wze),f&&t(bf),w(W$),f&&t(Hze),f&&t(Er),w(H$),w(J$),w(gA),w(Y$),w(MA),f&&t(Uze),f&&t(Tf),w(K$),f&&t(Jze),f&&t(Cr),w(Z$),w(ok),w(CA),w(rk),w(AA),f&&t(Yze),f&&t(Cf),w(tk),f&&t(Kze),f&&t(wr),w(ak),w(sk),w(yA),w(lk),w(kA),f&&t(Zze),f&&t(Lf),w(dk),f&&t(eQe),f&&t(Ar),w(ck),w(mk),w(RA),w(gk),w(BA)}}}const kHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SHt($){return $Qt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jHt extends AQt{constructor(g){super();LQt(this,g,SHt,$Ht,yQt,{})}}export{jHt as default,kHt as metadata};
