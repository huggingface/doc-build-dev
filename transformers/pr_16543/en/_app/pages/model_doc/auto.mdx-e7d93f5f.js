import{S as F8t,i as T8t,s as M8t,e as a,k as l,w as F,t as o,M as E8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as C8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function w8t(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,ny,pf,je,We,gi,yn,sy,Ln,xn,ly,hi,$n,iy,pi,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),ny=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),sy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),ly=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),iy=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var A$=s(p);m=r(A$,"NewModelConfig"),A$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var y$=s(ci);hf=r(y$,"model_type"),y$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var L$=s(fi);mi=r(L$,'"new-model"'),L$.forEach(t),ny=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),sy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var x$=s(Ln);xn=r(x$,"PreTrainedModel"),x$.forEach(t),ly=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var _f=s(hi);$n=r(_f,"config_class"),_f.forEach(t),iy=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var $$=s(pi);uf=r($$,"NewModelConfig"),$$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,ny),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,sy),e(je,Ln),e(Ln,xn),e(je,ly),e(je,hi),e(hi,$n),e(je,iy),e(je,pi),e(pi,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function A8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function x8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function k8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T7t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M7t(L){let g,v,p,m,u,d,h,Mo,ci,hf,rt,fi,mi,ny,pf,je,We,gi,yn,sy,Ln,xn,ly,hi,$n,iy,pi,uf,Ca,Qe,Ae,A$,ui,y$,L$,Eo,wa,x$,_f,$$,XDe,RIe,_i,bf,Mee,dy,zDe,Eee,WDe,PIe,kn,QDe,Cee,HDe,UDe,wee,JDe,YDe,BIe,cy,IIe,k$,KDe,qIe,vf,NIe,bi,Ff,Aee,fy,ZDe,yee,eGe,jIe,Co,my,oGe,gy,rGe,S$,tGe,aGe,nGe,hy,sGe,Lee,lGe,iGe,dGe,Er,py,cGe,xee,fGe,mGe,vi,gGe,$ee,hGe,pGe,kee,uGe,_Ge,bGe,A,Tf,See,vGe,FGe,R$,TGe,MGe,EGe,Mf,Ree,CGe,wGe,P$,AGe,yGe,LGe,Ef,Pee,xGe,$Ge,B$,kGe,SGe,RGe,Cf,Bee,PGe,BGe,I$,IGe,qGe,NGe,wf,Iee,jGe,DGe,q$,GGe,OGe,VGe,Af,qee,XGe,zGe,N$,WGe,QGe,HGe,yf,Nee,UGe,JGe,j$,YGe,KGe,ZGe,Lf,jee,eOe,oOe,D$,rOe,tOe,aOe,xf,Dee,nOe,sOe,G$,lOe,iOe,dOe,$f,Gee,cOe,fOe,O$,mOe,gOe,hOe,kf,Oee,pOe,uOe,V$,_Oe,bOe,vOe,Sf,Vee,FOe,TOe,X$,MOe,EOe,COe,Rf,Xee,wOe,AOe,z$,yOe,LOe,xOe,Pf,zee,$Oe,kOe,W$,SOe,ROe,POe,Bf,Wee,BOe,IOe,Q$,qOe,NOe,jOe,If,Qee,DOe,GOe,H$,OOe,VOe,XOe,qf,Hee,zOe,WOe,U$,QOe,HOe,UOe,Nf,Uee,JOe,YOe,J$,KOe,ZOe,eVe,jf,Jee,oVe,rVe,Y$,tVe,aVe,nVe,Df,Yee,sVe,lVe,K$,iVe,dVe,cVe,Gf,Kee,fVe,mVe,Z$,gVe,hVe,pVe,Of,Zee,uVe,_Ve,ek,bVe,vVe,FVe,Vf,eoe,TVe,MVe,ok,EVe,CVe,wVe,Xf,ooe,AVe,yVe,rk,LVe,xVe,$Ve,zf,roe,kVe,SVe,tk,RVe,PVe,BVe,Wf,toe,IVe,qVe,ak,NVe,jVe,DVe,Qf,aoe,GVe,OVe,nk,VVe,XVe,zVe,Hf,noe,WVe,QVe,sk,HVe,UVe,JVe,Uf,soe,YVe,KVe,lk,ZVe,eXe,oXe,Jf,loe,rXe,tXe,ik,aXe,nXe,sXe,Yf,ioe,lXe,iXe,dk,dXe,cXe,fXe,Kf,doe,mXe,gXe,ck,hXe,pXe,uXe,Zf,coe,_Xe,bXe,fk,vXe,FXe,TXe,em,foe,MXe,EXe,mk,CXe,wXe,AXe,om,moe,yXe,LXe,gk,xXe,$Xe,kXe,rm,goe,SXe,RXe,hk,PXe,BXe,IXe,tm,hoe,qXe,NXe,pk,jXe,DXe,GXe,am,poe,OXe,VXe,uk,XXe,zXe,WXe,nm,uoe,QXe,HXe,_k,UXe,JXe,YXe,sm,_oe,KXe,ZXe,bk,eze,oze,rze,lm,boe,tze,aze,vk,nze,sze,lze,im,voe,ize,dze,Fk,cze,fze,mze,dm,Foe,gze,hze,Tk,pze,uze,_ze,cm,Toe,bze,vze,Mk,Fze,Tze,Mze,fm,Moe,Eze,Cze,Ek,wze,Aze,yze,mm,Eoe,Lze,xze,Ck,$ze,kze,Sze,gm,Coe,Rze,Pze,wk,Bze,Ize,qze,hm,woe,Nze,jze,Ak,Dze,Gze,Oze,pm,Aoe,Vze,Xze,yk,zze,Wze,Qze,um,yoe,Hze,Uze,Lk,Jze,Yze,Kze,_m,Loe,Zze,eWe,xk,oWe,rWe,tWe,bm,xoe,aWe,nWe,$k,sWe,lWe,iWe,vm,$oe,dWe,cWe,kk,fWe,mWe,gWe,Fm,koe,hWe,pWe,Sk,uWe,_We,bWe,Tm,Soe,vWe,FWe,Rk,TWe,MWe,EWe,Mm,Roe,CWe,wWe,Pk,AWe,yWe,LWe,Em,Poe,xWe,$We,Bk,kWe,SWe,RWe,Cm,Boe,PWe,BWe,Ik,IWe,qWe,NWe,wm,Ioe,jWe,DWe,qk,GWe,OWe,VWe,Am,qoe,XWe,zWe,Nk,WWe,QWe,HWe,ym,Noe,UWe,JWe,jk,YWe,KWe,ZWe,Lm,joe,eQe,oQe,Dk,rQe,tQe,aQe,xm,Doe,nQe,sQe,Gk,lQe,iQe,dQe,$m,Goe,cQe,fQe,Ok,mQe,gQe,hQe,km,Ooe,pQe,uQe,Vk,_Qe,bQe,vQe,Sm,Voe,FQe,TQe,Xk,MQe,EQe,CQe,Rm,Xoe,wQe,AQe,zk,yQe,LQe,xQe,Pm,zoe,$Qe,kQe,Wk,SQe,RQe,PQe,Bm,Woe,BQe,IQe,Qk,qQe,NQe,jQe,Im,Qoe,DQe,GQe,Hk,OQe,VQe,XQe,qm,Hoe,zQe,WQe,Uk,QQe,HQe,UQe,Nm,Uoe,JQe,YQe,Jk,KQe,ZQe,eHe,jm,Joe,oHe,rHe,Yk,tHe,aHe,nHe,Dm,Yoe,sHe,lHe,Kk,iHe,dHe,cHe,Gm,Koe,fHe,mHe,Zk,gHe,hHe,pHe,Om,Zoe,uHe,_He,eS,bHe,vHe,FHe,Vm,ere,THe,MHe,oS,EHe,CHe,wHe,Xm,ore,AHe,yHe,rS,LHe,xHe,$He,zm,rre,kHe,SHe,tS,RHe,PHe,BHe,Wm,tre,IHe,qHe,aS,NHe,jHe,DHe,Qm,are,GHe,OHe,nS,VHe,XHe,zHe,Hm,nre,WHe,QHe,sS,HHe,UHe,JHe,Um,sre,YHe,KHe,lS,ZHe,eUe,oUe,Jm,lre,rUe,tUe,iS,aUe,nUe,sUe,Ym,ire,lUe,iUe,dS,dUe,cUe,fUe,Km,dre,mUe,gUe,cS,hUe,pUe,uUe,Zm,cre,_Ue,bUe,fS,vUe,FUe,TUe,eg,fre,MUe,EUe,mS,CUe,wUe,AUe,og,mre,yUe,LUe,gS,xUe,$Ue,kUe,rg,gre,SUe,RUe,hS,PUe,BUe,IUe,tg,hre,qUe,NUe,pS,jUe,DUe,GUe,ag,pre,OUe,VUe,uS,XUe,zUe,WUe,ng,ure,QUe,HUe,_S,UUe,JUe,YUe,sg,_re,KUe,ZUe,bS,eJe,oJe,rJe,lg,bre,tJe,aJe,vS,nJe,sJe,lJe,ig,vre,iJe,dJe,FS,cJe,fJe,mJe,dg,Fre,gJe,hJe,TS,pJe,uJe,_Je,cg,Tre,bJe,vJe,MS,FJe,TJe,MJe,fg,Mre,EJe,CJe,ES,wJe,AJe,yJe,mg,Ere,LJe,xJe,CS,$Je,kJe,SJe,gg,Cre,RJe,PJe,wS,BJe,IJe,qJe,hg,wre,NJe,jJe,AS,DJe,GJe,OJe,pg,Are,VJe,XJe,yS,zJe,WJe,QJe,ug,yre,HJe,UJe,LS,JJe,YJe,KJe,_g,Lre,ZJe,eYe,xS,oYe,rYe,tYe,bg,aYe,vg,uy,nYe,xre,sYe,DIe,Fi,Fg,$re,_y,lYe,kre,iYe,GIe,wo,by,dYe,vy,cYe,$S,fYe,mYe,gYe,Fy,hYe,Sre,pYe,uYe,_Ye,Cr,Ty,bYe,Rre,vYe,FYe,Aa,TYe,Pre,MYe,EYe,Bre,CYe,wYe,Ire,AYe,yYe,LYe,k,Sn,qre,xYe,$Ye,kS,kYe,SYe,SS,RYe,PYe,BYe,Rn,Nre,IYe,qYe,RS,NYe,jYe,PS,DYe,GYe,OYe,Pn,jre,VYe,XYe,BS,zYe,WYe,IS,QYe,HYe,UYe,Tg,Dre,JYe,YYe,qS,KYe,ZYe,eKe,Bn,Gre,oKe,rKe,NS,tKe,aKe,jS,nKe,sKe,lKe,Mg,Ore,iKe,dKe,DS,cKe,fKe,mKe,Eg,Vre,gKe,hKe,GS,pKe,uKe,_Ke,Cg,Xre,bKe,vKe,OS,FKe,TKe,MKe,In,zre,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,qn,Wre,$Ke,kKe,zS,SKe,RKe,WS,PKe,BKe,IKe,Nn,Qre,qKe,NKe,QS,jKe,DKe,HS,GKe,OKe,VKe,wg,Hre,XKe,zKe,US,WKe,QKe,HKe,Ag,Ure,UKe,JKe,JS,YKe,KKe,ZKe,jn,Jre,eZe,oZe,YS,rZe,tZe,KS,aZe,nZe,sZe,yg,Yre,lZe,iZe,ZS,dZe,cZe,fZe,Dn,Kre,mZe,gZe,eR,hZe,pZe,oR,uZe,_Ze,bZe,Gn,Zre,vZe,FZe,rR,TZe,MZe,tR,EZe,CZe,wZe,On,ete,AZe,yZe,aR,LZe,xZe,nR,$Ze,kZe,SZe,Lg,ote,RZe,PZe,sR,BZe,IZe,qZe,Vn,rte,NZe,jZe,lR,DZe,GZe,iR,OZe,VZe,XZe,Xn,tte,zZe,WZe,dR,QZe,HZe,cR,UZe,JZe,YZe,zn,ate,KZe,ZZe,fR,eeo,oeo,mR,reo,teo,aeo,Wn,nte,neo,seo,gR,leo,ieo,hR,deo,ceo,feo,Qn,ste,meo,geo,pR,heo,peo,uR,ueo,_eo,beo,Hn,lte,veo,Feo,_R,Teo,Meo,bR,Eeo,Ceo,weo,xg,ite,Aeo,yeo,vR,Leo,xeo,$eo,Un,dte,keo,Seo,FR,Reo,Peo,TR,Beo,Ieo,qeo,$g,cte,Neo,jeo,MR,Deo,Geo,Oeo,Jn,fte,Veo,Xeo,ER,zeo,Weo,CR,Qeo,Heo,Ueo,Yn,mte,Jeo,Yeo,wR,Keo,Zeo,AR,eoo,ooo,roo,Kn,gte,too,aoo,yR,noo,soo,LR,loo,ioo,doo,Zn,hte,coo,foo,xR,moo,goo,$R,hoo,poo,uoo,es,pte,_oo,boo,kR,voo,Foo,SR,Too,Moo,Eoo,kg,ute,Coo,woo,RR,Aoo,yoo,Loo,os,_te,xoo,$oo,PR,koo,Soo,BR,Roo,Poo,Boo,rs,bte,Ioo,qoo,IR,Noo,joo,qR,Doo,Goo,Ooo,ts,vte,Voo,Xoo,NR,zoo,Woo,jR,Qoo,Hoo,Uoo,as,Fte,Joo,Yoo,DR,Koo,Zoo,GR,ero,oro,rro,ns,Tte,tro,aro,OR,nro,sro,VR,lro,iro,dro,ss,Mte,cro,fro,XR,mro,gro,zR,hro,pro,uro,Sg,Ete,_ro,bro,WR,vro,Fro,Tro,ls,Cte,Mro,Ero,QR,Cro,wro,HR,Aro,yro,Lro,Rg,wte,xro,$ro,UR,kro,Sro,Rro,Pg,Ate,Pro,Bro,JR,Iro,qro,Nro,is,yte,jro,Dro,YR,Gro,Oro,KR,Vro,Xro,zro,ds,Lte,Wro,Qro,ZR,Hro,Uro,eP,Jro,Yro,Kro,cs,xte,Zro,eto,oP,oto,rto,rP,tto,ato,nto,Bg,$te,sto,lto,tP,ito,dto,cto,fs,kte,fto,mto,aP,gto,hto,nP,pto,uto,_to,ms,Ste,bto,vto,sP,Fto,Tto,lP,Mto,Eto,Cto,gs,Rte,wto,Ato,iP,yto,Lto,dP,xto,$to,kto,hs,Pte,Sto,Rto,cP,Pto,Bto,fP,Ito,qto,Nto,ps,Bte,jto,Dto,mP,Gto,Oto,gP,Vto,Xto,zto,Ig,Ite,Wto,Qto,hP,Hto,Uto,Jto,us,qte,Yto,Kto,pP,Zto,eao,uP,oao,rao,tao,qg,Nte,aao,nao,_P,sao,lao,iao,Ng,jte,dao,cao,bP,fao,mao,gao,jg,Dte,hao,pao,vP,uao,_ao,bao,Dg,Gte,vao,Fao,FP,Tao,Mao,Eao,_s,Ote,Cao,wao,TP,Aao,yao,MP,Lao,xao,$ao,Gg,Vte,kao,Sao,EP,Rao,Pao,Bao,bs,Xte,Iao,qao,CP,Nao,jao,wP,Dao,Gao,Oao,vs,zte,Vao,Xao,AP,zao,Wao,yP,Qao,Hao,Uao,Fs,Wte,Jao,Yao,LP,Kao,Zao,xP,eno,ono,rno,Ts,Qte,tno,ano,$P,nno,sno,kP,lno,ino,dno,Ms,Hte,cno,fno,SP,mno,gno,RP,hno,pno,uno,Es,Ute,_no,bno,PP,vno,Fno,BP,Tno,Mno,Eno,Og,Jte,Cno,wno,IP,Ano,yno,Lno,Vg,Yte,xno,$no,qP,kno,Sno,Rno,Cs,Kte,Pno,Bno,NP,Ino,qno,jP,Nno,jno,Dno,ws,Zte,Gno,Ono,DP,Vno,Xno,GP,zno,Wno,Qno,As,eae,Hno,Uno,OP,Jno,Yno,VP,Kno,Zno,eso,Xg,oae,oso,rso,XP,tso,aso,nso,zg,rae,sso,lso,zP,iso,dso,cso,Wg,tae,fso,mso,WP,gso,hso,pso,ys,aae,uso,_so,QP,bso,vso,HP,Fso,Tso,Mso,Qg,nae,Eso,Cso,UP,wso,Aso,yso,Hg,sae,Lso,xso,JP,$so,kso,Sso,Ug,lae,Rso,Pso,YP,Bso,Iso,qso,Ls,iae,Nso,jso,KP,Dso,Gso,ZP,Oso,Vso,Xso,Jg,dae,zso,Wso,eB,Qso,Hso,Uso,Yg,cae,Jso,Yso,oB,Kso,Zso,elo,xs,fae,olo,rlo,rB,tlo,alo,tB,nlo,slo,llo,$s,mae,ilo,dlo,aB,clo,flo,nB,mlo,glo,hlo,ks,gae,plo,ulo,sB,_lo,blo,lB,vlo,Flo,Tlo,Ss,hae,Mlo,Elo,iB,Clo,wlo,dB,Alo,ylo,Llo,Kg,xlo,Zg,My,$lo,pae,klo,OIe,Ti,eh,uae,Ey,Slo,_ae,Rlo,VIe,Ao,Cy,Plo,wy,Blo,cB,Ilo,qlo,Nlo,Ay,jlo,bae,Dlo,Glo,Olo,He,yy,Vlo,vae,Xlo,zlo,ya,Wlo,Fae,Qlo,Hlo,Tae,Ulo,Jlo,Mae,Ylo,Klo,Zlo,Z,oh,Eae,eio,oio,fB,rio,tio,aio,rh,Cae,nio,sio,mB,lio,iio,dio,th,wae,cio,fio,gB,mio,gio,hio,ah,Aae,pio,uio,hB,_io,bio,vio,nh,yae,Fio,Tio,pB,Mio,Eio,Cio,sh,Lae,wio,Aio,uB,yio,Lio,xio,lh,xae,$io,kio,_B,Sio,Rio,Pio,ih,$ae,Bio,Iio,bB,qio,Nio,jio,dh,kae,Dio,Gio,vB,Oio,Vio,Xio,ch,Sae,zio,Wio,FB,Qio,Hio,Uio,fh,Rae,Jio,Yio,TB,Kio,Zio,edo,mh,Pae,odo,rdo,MB,tdo,ado,ndo,gh,Bae,sdo,ldo,EB,ido,ddo,cdo,hh,Iae,fdo,mdo,CB,gdo,hdo,pdo,ph,qae,udo,_do,wB,bdo,vdo,Fdo,uh,Nae,Tdo,Mdo,AB,Edo,Cdo,wdo,_h,jae,Ado,ydo,yB,Ldo,xdo,$do,bh,Dae,kdo,Sdo,LB,Rdo,Pdo,Bdo,vh,Gae,Ido,qdo,xB,Ndo,jdo,Ddo,Fh,Oae,Gdo,Odo,$B,Vdo,Xdo,zdo,Th,Vae,Wdo,Qdo,kB,Hdo,Udo,Jdo,Mh,Xae,Ydo,Kdo,SB,Zdo,eco,oco,Eh,zae,rco,tco,RB,aco,nco,sco,Ch,Wae,lco,ico,PB,dco,cco,fco,wh,Qae,mco,gco,BB,hco,pco,uco,Ah,Hae,_co,bco,IB,vco,Fco,Tco,yh,Mco,Lh,Eco,xh,Ly,Cco,Uae,wco,XIe,Mi,$h,Jae,xy,Aco,Yae,yco,zIe,yo,$y,Lco,ky,xco,qB,$co,kco,Sco,Sy,Rco,Kae,Pco,Bco,Ico,Ue,Ry,qco,Zae,Nco,jco,Ei,Dco,ene,Gco,Oco,one,Vco,Xco,zco,pe,kh,rne,Wco,Qco,NB,Hco,Uco,Jco,Sh,tne,Yco,Kco,ane,Zco,efo,ofo,Rh,nne,rfo,tfo,jB,afo,nfo,sfo,Ph,sne,lfo,ifo,DB,dfo,cfo,ffo,Bh,lne,mfo,gfo,GB,hfo,pfo,ufo,Ih,ine,_fo,bfo,OB,vfo,Ffo,Tfo,qh,dne,Mfo,Efo,VB,Cfo,wfo,Afo,Nh,cne,yfo,Lfo,XB,xfo,$fo,kfo,jh,fne,Sfo,Rfo,zB,Pfo,Bfo,Ifo,Dh,mne,qfo,Nfo,WB,jfo,Dfo,Gfo,Gh,gne,Ofo,Vfo,QB,Xfo,zfo,Wfo,Oh,hne,Qfo,Hfo,HB,Ufo,Jfo,Yfo,Vh,pne,Kfo,Zfo,UB,emo,omo,rmo,Xh,une,tmo,amo,JB,nmo,smo,lmo,zh,_ne,imo,dmo,YB,cmo,fmo,mmo,Wh,bne,gmo,hmo,KB,pmo,umo,_mo,Qh,bmo,Hh,vmo,Uh,Py,Fmo,vne,Tmo,WIe,Ci,Jh,Fne,By,Mmo,Tne,Emo,QIe,Lo,Iy,Cmo,wi,wmo,ZB,Amo,ymo,eI,Lmo,xmo,$mo,qy,kmo,Mne,Smo,Rmo,Pmo,tt,Ny,Bmo,Ene,Imo,qmo,Ai,Nmo,Cne,jmo,Dmo,oI,Gmo,Omo,Vmo,Yh,Xmo,Je,jy,zmo,wne,Wmo,Qmo,La,Hmo,Ane,Umo,Jmo,yne,Ymo,Kmo,Lne,Zmo,ego,ogo,x,Kh,xne,rgo,tgo,rI,ago,ngo,sgo,Zh,$ne,lgo,igo,tI,dgo,cgo,fgo,ep,kne,mgo,ggo,aI,hgo,pgo,ugo,op,Sne,_go,bgo,nI,vgo,Fgo,Tgo,rp,Rne,Mgo,Ego,sI,Cgo,wgo,Ago,tp,Pne,ygo,Lgo,lI,xgo,$go,kgo,ap,Bne,Sgo,Rgo,iI,Pgo,Bgo,Igo,np,Ine,qgo,Ngo,dI,jgo,Dgo,Ggo,sp,qne,Ogo,Vgo,cI,Xgo,zgo,Wgo,lp,Nne,Qgo,Hgo,fI,Ugo,Jgo,Ygo,ip,jne,Kgo,Zgo,mI,eho,oho,rho,dp,Dne,tho,aho,gI,nho,sho,lho,cp,Gne,iho,dho,hI,cho,fho,mho,fp,One,gho,hho,pI,pho,uho,_ho,mp,Vne,bho,vho,uI,Fho,Tho,Mho,gp,Xne,Eho,Cho,_I,who,Aho,yho,hp,zne,Lho,xho,bI,$ho,kho,Sho,pp,Wne,Rho,Pho,vI,Bho,Iho,qho,up,Qne,Nho,jho,FI,Dho,Gho,Oho,_p,Hne,Vho,Xho,TI,zho,Who,Qho,bp,Une,Hho,Uho,MI,Jho,Yho,Kho,vp,Jne,Zho,epo,EI,opo,rpo,tpo,Fp,Yne,apo,npo,CI,spo,lpo,ipo,Tp,Kne,dpo,cpo,wI,fpo,mpo,gpo,Mp,Zne,hpo,ppo,AI,upo,_po,bpo,Ep,ese,vpo,Fpo,yI,Tpo,Mpo,Epo,Cp,ose,Cpo,wpo,LI,Apo,ypo,Lpo,wp,rse,xpo,$po,xI,kpo,Spo,Rpo,Ap,tse,Ppo,Bpo,$I,Ipo,qpo,Npo,yp,ase,jpo,Dpo,kI,Gpo,Opo,Vpo,Lp,nse,Xpo,zpo,SI,Wpo,Qpo,Hpo,Rs,sse,Upo,Jpo,RI,Ypo,Kpo,PI,Zpo,euo,ouo,xp,lse,ruo,tuo,BI,auo,nuo,suo,$p,ise,luo,iuo,II,duo,cuo,fuo,kp,dse,muo,guo,qI,huo,puo,uuo,Sp,cse,_uo,buo,NI,vuo,Fuo,Tuo,Rp,fse,Muo,Euo,jI,Cuo,wuo,Auo,Pp,mse,yuo,Luo,DI,xuo,$uo,kuo,Bp,gse,Suo,Ruo,GI,Puo,Buo,Iuo,Ip,hse,quo,Nuo,OI,juo,Duo,Guo,qp,pse,Ouo,Vuo,VI,Xuo,zuo,Wuo,Np,use,Quo,Huo,XI,Uuo,Juo,Yuo,jp,_se,Kuo,Zuo,zI,e_o,o_o,r_o,Dp,bse,t_o,a_o,WI,n_o,s_o,l_o,Gp,vse,i_o,d_o,QI,c_o,f_o,m_o,Op,Fse,g_o,h_o,HI,p_o,u_o,__o,Vp,Tse,b_o,v_o,UI,F_o,T_o,M_o,Xp,Mse,E_o,C_o,JI,w_o,A_o,y_o,zp,Ese,L_o,x_o,YI,$_o,k_o,S_o,Wp,Cse,R_o,P_o,KI,B_o,I_o,q_o,Qp,wse,N_o,j_o,ZI,D_o,G_o,O_o,Hp,Ase,V_o,X_o,eq,z_o,W_o,Q_o,Up,yse,H_o,U_o,oq,J_o,Y_o,K_o,Jp,Lse,Z_o,e1o,rq,o1o,r1o,t1o,Yp,xse,a1o,n1o,tq,s1o,l1o,i1o,Kp,$se,d1o,c1o,aq,f1o,m1o,g1o,Zp,kse,h1o,p1o,nq,u1o,_1o,b1o,eu,Sse,v1o,F1o,sq,T1o,M1o,E1o,ou,Rse,C1o,w1o,lq,A1o,y1o,L1o,ru,Pse,x1o,$1o,iq,k1o,S1o,R1o,tu,Bse,P1o,B1o,dq,I1o,q1o,N1o,au,Ise,j1o,D1o,cq,G1o,O1o,V1o,nu,qse,X1o,z1o,fq,W1o,Q1o,H1o,su,Nse,U1o,J1o,mq,Y1o,K1o,Z1o,lu,jse,ebo,obo,gq,rbo,tbo,abo,iu,Dse,nbo,sbo,hq,lbo,ibo,dbo,du,Gse,cbo,fbo,pq,mbo,gbo,hbo,cu,Ose,pbo,ubo,uq,_bo,bbo,vbo,fu,Vse,Fbo,Tbo,_q,Mbo,Ebo,Cbo,mu,Xse,wbo,Abo,bq,ybo,Lbo,xbo,gu,zse,$bo,kbo,vq,Sbo,Rbo,Pbo,hu,Wse,Bbo,Ibo,Fq,qbo,Nbo,jbo,pu,Qse,Dbo,Gbo,Tq,Obo,Vbo,Xbo,uu,Hse,zbo,Wbo,Mq,Qbo,Hbo,Ubo,_u,Use,Jbo,Ybo,Eq,Kbo,Zbo,e2o,bu,Jse,o2o,r2o,Cq,t2o,a2o,n2o,vu,Yse,s2o,l2o,wq,i2o,d2o,c2o,Fu,Kse,f2o,m2o,Aq,g2o,h2o,p2o,Tu,Zse,u2o,_2o,yq,b2o,v2o,F2o,Mu,ele,T2o,M2o,Lq,E2o,C2o,w2o,Eu,ole,A2o,y2o,xq,L2o,x2o,$2o,Cu,rle,k2o,S2o,$q,R2o,P2o,B2o,wu,tle,I2o,q2o,kq,N2o,j2o,D2o,Au,ale,G2o,O2o,Sq,V2o,X2o,z2o,yu,nle,W2o,Q2o,Rq,H2o,U2o,J2o,Lu,sle,Y2o,K2o,Pq,Z2o,e4o,o4o,xu,lle,r4o,t4o,Bq,a4o,n4o,s4o,$u,ile,l4o,i4o,Iq,d4o,c4o,f4o,ku,dle,m4o,g4o,qq,h4o,p4o,u4o,Su,cle,_4o,b4o,Nq,v4o,F4o,T4o,Ru,fle,M4o,E4o,jq,C4o,w4o,A4o,Pu,mle,y4o,L4o,Dq,x4o,$4o,k4o,Bu,gle,S4o,R4o,Gq,P4o,B4o,I4o,Iu,hle,q4o,N4o,Oq,j4o,D4o,G4o,qu,ple,O4o,V4o,Vq,X4o,z4o,W4o,Nu,ule,Q4o,H4o,Xq,U4o,J4o,Y4o,ju,_le,K4o,Z4o,zq,e5o,o5o,r5o,Du,ble,t5o,a5o,Wq,n5o,s5o,l5o,Gu,i5o,vle,d5o,c5o,Fle,f5o,m5o,Ou,HIe,yi,Vu,Tle,Dy,g5o,Mle,h5o,UIe,xo,Gy,p5o,Li,u5o,Qq,_5o,b5o,Hq,v5o,F5o,T5o,Oy,M5o,Ele,E5o,C5o,w5o,at,Vy,A5o,Cle,y5o,L5o,xi,x5o,wle,$5o,k5o,Uq,S5o,R5o,P5o,Xu,B5o,Ye,Xy,I5o,Ale,q5o,N5o,xa,j5o,yle,D5o,G5o,Lle,O5o,V5o,xle,X5o,z5o,W5o,G,zu,$le,Q5o,H5o,Jq,U5o,J5o,Y5o,Wu,kle,K5o,Z5o,Yq,evo,ovo,rvo,Qu,Sle,tvo,avo,Kq,nvo,svo,lvo,Hu,Rle,ivo,dvo,Zq,cvo,fvo,mvo,Uu,Ple,gvo,hvo,eN,pvo,uvo,_vo,Ju,Ble,bvo,vvo,oN,Fvo,Tvo,Mvo,Yu,Ile,Evo,Cvo,rN,wvo,Avo,yvo,Ku,qle,Lvo,xvo,tN,$vo,kvo,Svo,Zu,Nle,Rvo,Pvo,aN,Bvo,Ivo,qvo,e_,jle,Nvo,jvo,nN,Dvo,Gvo,Ovo,o_,Dle,Vvo,Xvo,sN,zvo,Wvo,Qvo,r_,Gle,Hvo,Uvo,lN,Jvo,Yvo,Kvo,t_,Ole,Zvo,e3o,iN,o3o,r3o,t3o,a_,Vle,a3o,n3o,dN,s3o,l3o,i3o,n_,Xle,d3o,c3o,cN,f3o,m3o,g3o,s_,zle,h3o,p3o,fN,u3o,_3o,b3o,l_,Wle,v3o,F3o,mN,T3o,M3o,E3o,i_,Qle,C3o,w3o,gN,A3o,y3o,L3o,d_,Hle,x3o,$3o,hN,k3o,S3o,R3o,c_,Ule,P3o,B3o,pN,I3o,q3o,N3o,f_,Jle,j3o,D3o,uN,G3o,O3o,V3o,m_,Yle,X3o,z3o,_N,W3o,Q3o,H3o,g_,Kle,U3o,J3o,bN,Y3o,K3o,Z3o,h_,Zle,eFo,oFo,vN,rFo,tFo,aFo,p_,eie,nFo,sFo,FN,lFo,iFo,dFo,u_,oie,cFo,fFo,TN,mFo,gFo,hFo,__,rie,pFo,uFo,MN,_Fo,bFo,vFo,b_,tie,FFo,TFo,EN,MFo,EFo,CFo,v_,aie,wFo,AFo,CN,yFo,LFo,xFo,F_,nie,$Fo,kFo,wN,SFo,RFo,PFo,T_,sie,BFo,IFo,AN,qFo,NFo,jFo,M_,lie,DFo,GFo,yN,OFo,VFo,XFo,E_,iie,zFo,WFo,LN,QFo,HFo,UFo,C_,die,JFo,YFo,xN,KFo,ZFo,e6o,w_,cie,o6o,r6o,$N,t6o,a6o,n6o,A_,fie,s6o,l6o,kN,i6o,d6o,c6o,y_,mie,f6o,m6o,SN,g6o,h6o,p6o,L_,gie,u6o,_6o,RN,b6o,v6o,F6o,x_,hie,T6o,M6o,PN,E6o,C6o,w6o,$_,pie,A6o,y6o,BN,L6o,x6o,$6o,k_,uie,k6o,S6o,IN,R6o,P6o,B6o,S_,I6o,_ie,q6o,N6o,bie,j6o,D6o,R_,JIe,$i,P_,vie,zy,G6o,Fie,O6o,YIe,$o,Wy,V6o,ki,X6o,qN,z6o,W6o,NN,Q6o,H6o,U6o,Qy,J6o,Tie,Y6o,K6o,Z6o,nt,Hy,eTo,Mie,oTo,rTo,Si,tTo,Eie,aTo,nTo,jN,sTo,lTo,iTo,B_,dTo,Ke,Uy,cTo,Cie,fTo,mTo,$a,gTo,wie,hTo,pTo,Aie,uTo,_To,yie,bTo,vTo,FTo,z,I_,Lie,TTo,MTo,DN,ETo,CTo,wTo,q_,xie,ATo,yTo,GN,LTo,xTo,$To,N_,$ie,kTo,STo,ON,RTo,PTo,BTo,j_,kie,ITo,qTo,VN,NTo,jTo,DTo,D_,Sie,GTo,OTo,XN,VTo,XTo,zTo,G_,Rie,WTo,QTo,zN,HTo,UTo,JTo,O_,Pie,YTo,KTo,WN,ZTo,eMo,oMo,V_,Bie,rMo,tMo,QN,aMo,nMo,sMo,X_,Iie,lMo,iMo,HN,dMo,cMo,fMo,z_,qie,mMo,gMo,UN,hMo,pMo,uMo,W_,Nie,_Mo,bMo,JN,vMo,FMo,TMo,Q_,jie,MMo,EMo,YN,CMo,wMo,AMo,H_,Die,yMo,LMo,KN,xMo,$Mo,kMo,U_,Gie,SMo,RMo,ZN,PMo,BMo,IMo,J_,Oie,qMo,NMo,ej,jMo,DMo,GMo,Y_,Vie,OMo,VMo,oj,XMo,zMo,WMo,K_,Xie,QMo,HMo,rj,UMo,JMo,YMo,Z_,zie,KMo,ZMo,tj,eEo,oEo,rEo,e1,Wie,tEo,aEo,aj,nEo,sEo,lEo,o1,Qie,iEo,dEo,nj,cEo,fEo,mEo,r1,Hie,gEo,hEo,sj,pEo,uEo,_Eo,t1,Uie,bEo,vEo,lj,FEo,TEo,MEo,a1,Jie,EEo,CEo,ij,wEo,AEo,yEo,n1,Yie,LEo,xEo,dj,$Eo,kEo,SEo,s1,Kie,REo,PEo,cj,BEo,IEo,qEo,l1,Zie,NEo,jEo,fj,DEo,GEo,OEo,i1,ede,VEo,XEo,mj,zEo,WEo,QEo,d1,ode,HEo,UEo,gj,JEo,YEo,KEo,c1,rde,ZEo,eCo,hj,oCo,rCo,tCo,f1,tde,aCo,nCo,pj,sCo,lCo,iCo,m1,ade,dCo,cCo,uj,fCo,mCo,gCo,g1,nde,hCo,pCo,_j,uCo,_Co,bCo,h1,sde,vCo,FCo,bj,TCo,MCo,ECo,p1,lde,CCo,wCo,vj,ACo,yCo,LCo,u1,ide,xCo,$Co,Fj,kCo,SCo,RCo,_1,dde,PCo,BCo,Tj,ICo,qCo,NCo,b1,jCo,cde,DCo,GCo,fde,OCo,VCo,v1,KIe,Ri,F1,mde,Jy,XCo,gde,zCo,ZIe,ko,Yy,WCo,Pi,QCo,Mj,HCo,UCo,Ej,JCo,YCo,KCo,Ky,ZCo,hde,ewo,owo,rwo,st,Zy,two,pde,awo,nwo,Bi,swo,ude,lwo,iwo,Cj,dwo,cwo,fwo,T1,mwo,Ze,eL,gwo,_de,hwo,pwo,ka,uwo,bde,_wo,bwo,vde,vwo,Fwo,Fde,Two,Mwo,Ewo,W,M1,Tde,Cwo,wwo,wj,Awo,ywo,Lwo,E1,Mde,xwo,$wo,Aj,kwo,Swo,Rwo,C1,Ede,Pwo,Bwo,yj,Iwo,qwo,Nwo,w1,Cde,jwo,Dwo,Lj,Gwo,Owo,Vwo,A1,wde,Xwo,zwo,xj,Wwo,Qwo,Hwo,y1,Ade,Uwo,Jwo,$j,Ywo,Kwo,Zwo,L1,yde,eAo,oAo,kj,rAo,tAo,aAo,x1,Lde,nAo,sAo,Sj,lAo,iAo,dAo,$1,xde,cAo,fAo,Rj,mAo,gAo,hAo,k1,$de,pAo,uAo,Pj,_Ao,bAo,vAo,S1,kde,FAo,TAo,Bj,MAo,EAo,CAo,R1,Sde,wAo,AAo,Ij,yAo,LAo,xAo,P1,Rde,$Ao,kAo,qj,SAo,RAo,PAo,B1,Pde,BAo,IAo,Nj,qAo,NAo,jAo,I1,Bde,DAo,GAo,jj,OAo,VAo,XAo,q1,Ide,zAo,WAo,Dj,QAo,HAo,UAo,N1,qde,JAo,YAo,Gj,KAo,ZAo,e0o,j1,Nde,o0o,r0o,Oj,t0o,a0o,n0o,D1,jde,s0o,l0o,Vj,i0o,d0o,c0o,G1,Dde,f0o,m0o,Xj,g0o,h0o,p0o,O1,Gde,u0o,_0o,zj,b0o,v0o,F0o,V1,Ode,T0o,M0o,Wj,E0o,C0o,w0o,X1,Vde,A0o,y0o,Qj,L0o,x0o,$0o,z1,Xde,k0o,S0o,Hj,R0o,P0o,B0o,W1,zde,I0o,q0o,Uj,N0o,j0o,D0o,Q1,Wde,G0o,O0o,Jj,V0o,X0o,z0o,H1,Qde,W0o,Q0o,Yj,H0o,U0o,J0o,U1,Hde,Y0o,K0o,Kj,Z0o,eyo,oyo,J1,Ude,ryo,tyo,Zj,ayo,nyo,syo,Y1,Jde,lyo,iyo,eD,dyo,cyo,fyo,K1,Yde,myo,gyo,Kde,hyo,pyo,uyo,Z1,Zde,_yo,byo,oD,vyo,Fyo,Tyo,eb,ece,Myo,Eyo,rD,Cyo,wyo,Ayo,ob,oce,yyo,Lyo,tD,xyo,$yo,kyo,rb,rce,Syo,Ryo,aD,Pyo,Byo,Iyo,tb,qyo,tce,Nyo,jyo,ace,Dyo,Gyo,ab,eqe,Ii,nb,nce,oL,Oyo,sce,Vyo,oqe,So,rL,Xyo,qi,zyo,nD,Wyo,Qyo,sD,Hyo,Uyo,Jyo,tL,Yyo,lce,Kyo,Zyo,eLo,lt,aL,oLo,ice,rLo,tLo,Ni,aLo,dce,nLo,sLo,lD,lLo,iLo,dLo,sb,cLo,eo,nL,fLo,cce,mLo,gLo,Sa,hLo,fce,pLo,uLo,mce,_Lo,bLo,gce,vLo,FLo,TLo,ue,lb,hce,MLo,ELo,iD,CLo,wLo,ALo,ib,pce,yLo,LLo,dD,xLo,$Lo,kLo,db,uce,SLo,RLo,cD,PLo,BLo,ILo,cb,_ce,qLo,NLo,fD,jLo,DLo,GLo,fb,bce,OLo,VLo,mD,XLo,zLo,WLo,mb,vce,QLo,HLo,gD,ULo,JLo,YLo,gb,Fce,KLo,ZLo,hD,e8o,o8o,r8o,hb,Tce,t8o,a8o,pD,n8o,s8o,l8o,pb,Mce,i8o,d8o,uD,c8o,f8o,m8o,ub,Ece,g8o,h8o,_D,p8o,u8o,_8o,_b,Cce,b8o,v8o,bD,F8o,T8o,M8o,bb,wce,E8o,C8o,vD,w8o,A8o,y8o,vb,Ace,L8o,x8o,FD,$8o,k8o,S8o,Fb,yce,R8o,P8o,TD,B8o,I8o,q8o,Tb,Lce,N8o,j8o,MD,D8o,G8o,O8o,Mb,xce,V8o,X8o,ED,z8o,W8o,Q8o,Eb,H8o,$ce,U8o,J8o,kce,Y8o,K8o,Cb,rqe,ji,wb,Sce,sL,Z8o,Rce,exo,tqe,Ro,lL,oxo,Di,rxo,CD,txo,axo,wD,nxo,sxo,lxo,iL,ixo,Pce,dxo,cxo,fxo,it,dL,mxo,Bce,gxo,hxo,Gi,pxo,Ice,uxo,_xo,AD,bxo,vxo,Fxo,Ab,Txo,oo,cL,Mxo,qce,Exo,Cxo,Ra,wxo,Nce,Axo,yxo,jce,Lxo,xxo,Dce,$xo,kxo,Sxo,N,yb,Gce,Rxo,Pxo,yD,Bxo,Ixo,qxo,Lb,Oce,Nxo,jxo,LD,Dxo,Gxo,Oxo,xb,Vce,Vxo,Xxo,xD,zxo,Wxo,Qxo,$b,Xce,Hxo,Uxo,$D,Jxo,Yxo,Kxo,kb,zce,Zxo,e7o,kD,o7o,r7o,t7o,Sb,Wce,a7o,n7o,SD,s7o,l7o,i7o,Rb,Qce,d7o,c7o,RD,f7o,m7o,g7o,Pb,Hce,h7o,p7o,PD,u7o,_7o,b7o,Bb,Uce,v7o,F7o,BD,T7o,M7o,E7o,Ib,Jce,C7o,w7o,ID,A7o,y7o,L7o,qb,Yce,x7o,$7o,qD,k7o,S7o,R7o,Nb,Kce,P7o,B7o,ND,I7o,q7o,N7o,jb,Zce,j7o,D7o,jD,G7o,O7o,V7o,Db,efe,X7o,z7o,DD,W7o,Q7o,H7o,Gb,ofe,U7o,J7o,GD,Y7o,K7o,Z7o,Ob,rfe,e9o,o9o,OD,r9o,t9o,a9o,Vb,tfe,n9o,s9o,VD,l9o,i9o,d9o,Xb,afe,c9o,f9o,XD,m9o,g9o,h9o,zb,nfe,p9o,u9o,zD,_9o,b9o,v9o,Wb,sfe,F9o,T9o,WD,M9o,E9o,C9o,Qb,lfe,w9o,A9o,QD,y9o,L9o,x9o,Hb,ife,$9o,k9o,HD,S9o,R9o,P9o,Ub,dfe,B9o,I9o,UD,q9o,N9o,j9o,Jb,cfe,D9o,G9o,JD,O9o,V9o,X9o,Yb,ffe,z9o,W9o,YD,Q9o,H9o,U9o,Kb,mfe,J9o,Y9o,KD,K9o,Z9o,e$o,Zb,gfe,o$o,r$o,ZD,t$o,a$o,n$o,e2,hfe,s$o,l$o,eG,i$o,d$o,c$o,o2,pfe,f$o,m$o,oG,g$o,h$o,p$o,r2,ufe,u$o,_$o,rG,b$o,v$o,F$o,t2,_fe,T$o,M$o,tG,E$o,C$o,w$o,a2,bfe,A$o,y$o,aG,L$o,x$o,$$o,n2,vfe,k$o,S$o,nG,R$o,P$o,B$o,s2,Ffe,I$o,q$o,sG,N$o,j$o,D$o,l2,Tfe,G$o,O$o,lG,V$o,X$o,z$o,i2,Mfe,W$o,Q$o,iG,H$o,U$o,J$o,d2,Efe,Y$o,K$o,dG,Z$o,eko,oko,c2,Cfe,rko,tko,cG,ako,nko,sko,f2,wfe,lko,iko,fG,dko,cko,fko,m2,Afe,mko,gko,mG,hko,pko,uko,g2,yfe,_ko,bko,gG,vko,Fko,Tko,h2,Lfe,Mko,Eko,hG,Cko,wko,Ako,p2,xfe,yko,Lko,pG,xko,$ko,kko,u2,$fe,Sko,Rko,uG,Pko,Bko,Iko,_2,kfe,qko,Nko,_G,jko,Dko,Gko,b2,Sfe,Oko,Vko,bG,Xko,zko,Wko,v2,Qko,Rfe,Hko,Uko,Pfe,Jko,Yko,F2,aqe,Oi,T2,Bfe,fL,Kko,Ife,Zko,nqe,Po,mL,eSo,Vi,oSo,vG,rSo,tSo,FG,aSo,nSo,sSo,gL,lSo,qfe,iSo,dSo,cSo,dt,hL,fSo,Nfe,mSo,gSo,Xi,hSo,jfe,pSo,uSo,TG,_So,bSo,vSo,M2,FSo,ro,pL,TSo,Dfe,MSo,ESo,Pa,CSo,Gfe,wSo,ASo,Ofe,ySo,LSo,Vfe,xSo,$So,kSo,Y,E2,Xfe,SSo,RSo,MG,PSo,BSo,ISo,C2,zfe,qSo,NSo,EG,jSo,DSo,GSo,w2,Wfe,OSo,VSo,CG,XSo,zSo,WSo,A2,Qfe,QSo,HSo,wG,USo,JSo,YSo,y2,Hfe,KSo,ZSo,AG,eRo,oRo,rRo,L2,Ufe,tRo,aRo,yG,nRo,sRo,lRo,x2,Jfe,iRo,dRo,LG,cRo,fRo,mRo,$2,Yfe,gRo,hRo,xG,pRo,uRo,_Ro,k2,Kfe,bRo,vRo,$G,FRo,TRo,MRo,S2,Zfe,ERo,CRo,kG,wRo,ARo,yRo,R2,eme,LRo,xRo,SG,$Ro,kRo,SRo,P2,ome,RRo,PRo,RG,BRo,IRo,qRo,B2,rme,NRo,jRo,PG,DRo,GRo,ORo,I2,tme,VRo,XRo,BG,zRo,WRo,QRo,q2,ame,HRo,URo,IG,JRo,YRo,KRo,N2,nme,ZRo,ePo,qG,oPo,rPo,tPo,j2,sme,aPo,nPo,NG,sPo,lPo,iPo,D2,lme,dPo,cPo,jG,fPo,mPo,gPo,G2,ime,hPo,pPo,DG,uPo,_Po,bPo,O2,dme,vPo,FPo,GG,TPo,MPo,EPo,V2,cme,CPo,wPo,OG,APo,yPo,LPo,X2,fme,xPo,$Po,VG,kPo,SPo,RPo,z2,mme,PPo,BPo,XG,IPo,qPo,NPo,W2,gme,jPo,DPo,zG,GPo,OPo,VPo,Q2,hme,XPo,zPo,WG,WPo,QPo,HPo,H2,pme,UPo,JPo,QG,YPo,KPo,ZPo,U2,ume,eBo,oBo,HG,rBo,tBo,aBo,J2,_me,nBo,sBo,UG,lBo,iBo,dBo,Y2,bme,cBo,fBo,JG,mBo,gBo,hBo,K2,pBo,vme,uBo,_Bo,Fme,bBo,vBo,Z2,sqe,zi,e4,Tme,uL,FBo,Mme,TBo,lqe,Bo,_L,MBo,Wi,EBo,YG,CBo,wBo,KG,ABo,yBo,LBo,bL,xBo,Eme,$Bo,kBo,SBo,ct,vL,RBo,Cme,PBo,BBo,Qi,IBo,wme,qBo,NBo,ZG,jBo,DBo,GBo,o4,OBo,to,FL,VBo,Ame,XBo,zBo,Ba,WBo,yme,QBo,HBo,Lme,UBo,JBo,xme,YBo,KBo,ZBo,Yr,r4,$me,eIo,oIo,eO,rIo,tIo,aIo,t4,kme,nIo,sIo,oO,lIo,iIo,dIo,a4,Sme,cIo,fIo,rO,mIo,gIo,hIo,n4,Rme,pIo,uIo,tO,_Io,bIo,vIo,s4,Pme,FIo,TIo,aO,MIo,EIo,CIo,l4,wIo,Bme,AIo,yIo,Ime,LIo,xIo,i4,iqe,Hi,d4,qme,TL,$Io,Nme,kIo,dqe,Io,ML,SIo,Ui,RIo,nO,PIo,BIo,sO,IIo,qIo,NIo,EL,jIo,jme,DIo,GIo,OIo,ft,CL,VIo,Dme,XIo,zIo,Ji,WIo,Gme,QIo,HIo,lO,UIo,JIo,YIo,c4,KIo,ao,wL,ZIo,Ome,eqo,oqo,Ia,rqo,Vme,tqo,aqo,Xme,nqo,sqo,zme,lqo,iqo,dqo,U,f4,Wme,cqo,fqo,iO,mqo,gqo,hqo,m4,Qme,pqo,uqo,dO,_qo,bqo,vqo,g4,Hme,Fqo,Tqo,cO,Mqo,Eqo,Cqo,h4,Ume,wqo,Aqo,fO,yqo,Lqo,xqo,p4,Jme,$qo,kqo,mO,Sqo,Rqo,Pqo,u4,Yme,Bqo,Iqo,gO,qqo,Nqo,jqo,_4,Kme,Dqo,Gqo,hO,Oqo,Vqo,Xqo,b4,Zme,zqo,Wqo,pO,Qqo,Hqo,Uqo,v4,ege,Jqo,Yqo,uO,Kqo,Zqo,eNo,F4,oge,oNo,rNo,_O,tNo,aNo,nNo,T4,rge,sNo,lNo,bO,iNo,dNo,cNo,M4,tge,fNo,mNo,vO,gNo,hNo,pNo,E4,age,uNo,_No,FO,bNo,vNo,FNo,C4,nge,TNo,MNo,TO,ENo,CNo,wNo,w4,sge,ANo,yNo,MO,LNo,xNo,$No,A4,lge,kNo,SNo,EO,RNo,PNo,BNo,y4,ige,INo,qNo,CO,NNo,jNo,DNo,L4,dge,GNo,ONo,wO,VNo,XNo,zNo,x4,cge,WNo,QNo,AO,HNo,UNo,JNo,$4,fge,YNo,KNo,yO,ZNo,ejo,ojo,k4,mge,rjo,tjo,LO,ajo,njo,sjo,S4,gge,ljo,ijo,xO,djo,cjo,fjo,R4,hge,mjo,gjo,$O,hjo,pjo,ujo,P4,pge,_jo,bjo,kO,vjo,Fjo,Tjo,B4,uge,Mjo,Ejo,SO,Cjo,wjo,Ajo,I4,_ge,yjo,Ljo,RO,xjo,$jo,kjo,q4,bge,Sjo,Rjo,PO,Pjo,Bjo,Ijo,N4,vge,qjo,Njo,BO,jjo,Djo,Gjo,j4,Fge,Ojo,Vjo,IO,Xjo,zjo,Wjo,D4,Tge,Qjo,Hjo,qO,Ujo,Jjo,Yjo,G4,Mge,Kjo,Zjo,NO,eDo,oDo,rDo,O4,Ege,tDo,aDo,jO,nDo,sDo,lDo,V4,Cge,iDo,dDo,DO,cDo,fDo,mDo,X4,gDo,wge,hDo,pDo,Age,uDo,_Do,z4,cqe,Yi,W4,yge,AL,bDo,Lge,vDo,fqe,qo,yL,FDo,Ki,TDo,GO,MDo,EDo,OO,CDo,wDo,ADo,LL,yDo,xge,LDo,xDo,$Do,mt,xL,kDo,$ge,SDo,RDo,Zi,PDo,kge,BDo,IDo,VO,qDo,NDo,jDo,Q4,DDo,no,$L,GDo,Sge,ODo,VDo,qa,XDo,Rge,zDo,WDo,Pge,QDo,HDo,Bge,UDo,JDo,YDo,V,H4,Ige,KDo,ZDo,XO,eGo,oGo,rGo,U4,qge,tGo,aGo,zO,nGo,sGo,lGo,J4,Nge,iGo,dGo,WO,cGo,fGo,mGo,Y4,jge,gGo,hGo,QO,pGo,uGo,_Go,K4,Dge,bGo,vGo,HO,FGo,TGo,MGo,Z4,Gge,EGo,CGo,UO,wGo,AGo,yGo,e5,Oge,LGo,xGo,JO,$Go,kGo,SGo,o5,Vge,RGo,PGo,YO,BGo,IGo,qGo,r5,Xge,NGo,jGo,KO,DGo,GGo,OGo,t5,zge,VGo,XGo,ZO,zGo,WGo,QGo,a5,Wge,HGo,UGo,eV,JGo,YGo,KGo,n5,Qge,ZGo,eOo,oV,oOo,rOo,tOo,s5,Hge,aOo,nOo,rV,sOo,lOo,iOo,l5,Uge,dOo,cOo,tV,fOo,mOo,gOo,i5,Jge,hOo,pOo,aV,uOo,_Oo,bOo,d5,Yge,vOo,FOo,nV,TOo,MOo,EOo,c5,Kge,COo,wOo,sV,AOo,yOo,LOo,f5,Zge,xOo,$Oo,lV,kOo,SOo,ROo,m5,ehe,POo,BOo,iV,IOo,qOo,NOo,g5,ohe,jOo,DOo,dV,GOo,OOo,VOo,h5,rhe,XOo,zOo,cV,WOo,QOo,HOo,p5,the,UOo,JOo,fV,YOo,KOo,ZOo,u5,ahe,eVo,oVo,mV,rVo,tVo,aVo,_5,nhe,nVo,sVo,gV,lVo,iVo,dVo,b5,she,cVo,fVo,hV,mVo,gVo,hVo,v5,lhe,pVo,uVo,pV,_Vo,bVo,vVo,F5,ihe,FVo,TVo,uV,MVo,EVo,CVo,T5,dhe,wVo,AVo,_V,yVo,LVo,xVo,M5,che,$Vo,kVo,bV,SVo,RVo,PVo,E5,fhe,BVo,IVo,vV,qVo,NVo,jVo,C5,mhe,DVo,GVo,FV,OVo,VVo,XVo,w5,ghe,zVo,WVo,TV,QVo,HVo,UVo,A5,hhe,JVo,YVo,MV,KVo,ZVo,eXo,y5,phe,oXo,rXo,EV,tXo,aXo,nXo,L5,uhe,sXo,lXo,CV,iXo,dXo,cXo,x5,_he,fXo,mXo,wV,gXo,hXo,pXo,$5,bhe,uXo,_Xo,AV,bXo,vXo,FXo,k5,vhe,TXo,MXo,yV,EXo,CXo,wXo,S5,Fhe,AXo,yXo,LV,LXo,xXo,$Xo,R5,kXo,The,SXo,RXo,Mhe,PXo,BXo,P5,mqe,ed,B5,Ehe,kL,IXo,Che,qXo,gqe,No,SL,NXo,od,jXo,xV,DXo,GXo,$V,OXo,VXo,XXo,RL,zXo,whe,WXo,QXo,HXo,gt,PL,UXo,Ahe,JXo,YXo,rd,KXo,yhe,ZXo,ezo,kV,ozo,rzo,tzo,I5,azo,so,BL,nzo,Lhe,szo,lzo,Na,izo,xhe,dzo,czo,$he,fzo,mzo,khe,gzo,hzo,pzo,She,q5,Rhe,uzo,_zo,SV,bzo,vzo,Fzo,N5,Tzo,Phe,Mzo,Ezo,Bhe,Czo,wzo,j5,hqe,td,D5,Ihe,IL,Azo,qhe,yzo,pqe,jo,qL,Lzo,ad,xzo,RV,$zo,kzo,PV,Szo,Rzo,Pzo,NL,Bzo,Nhe,Izo,qzo,Nzo,ht,jL,jzo,jhe,Dzo,Gzo,nd,Ozo,Dhe,Vzo,Xzo,BV,zzo,Wzo,Qzo,G5,Hzo,lo,DL,Uzo,Ghe,Jzo,Yzo,ja,Kzo,Ohe,Zzo,eWo,Vhe,oWo,rWo,Xhe,tWo,aWo,nWo,Fe,O5,zhe,sWo,lWo,IV,iWo,dWo,cWo,V5,Whe,fWo,mWo,qV,gWo,hWo,pWo,X5,Qhe,uWo,_Wo,NV,bWo,vWo,FWo,Ps,Hhe,TWo,MWo,jV,EWo,CWo,DV,wWo,AWo,yWo,z5,Uhe,LWo,xWo,GV,$Wo,kWo,SWo,pt,Jhe,RWo,PWo,OV,BWo,IWo,VV,qWo,NWo,XV,jWo,DWo,GWo,W5,Yhe,OWo,VWo,zV,XWo,zWo,WWo,Q5,Khe,QWo,HWo,WV,UWo,JWo,YWo,H5,Zhe,KWo,ZWo,QV,eQo,oQo,rQo,U5,epe,tQo,aQo,HV,nQo,sQo,lQo,J5,ope,iQo,dQo,UV,cQo,fQo,mQo,Y5,rpe,gQo,hQo,JV,pQo,uQo,_Qo,K5,tpe,bQo,vQo,YV,FQo,TQo,MQo,Z5,EQo,ape,CQo,wQo,npe,AQo,yQo,ev,uqe,sd,ov,spe,GL,LQo,lpe,xQo,_qe,Do,OL,$Qo,ld,kQo,KV,SQo,RQo,ZV,PQo,BQo,IQo,VL,qQo,ipe,NQo,jQo,DQo,ut,XL,GQo,dpe,OQo,VQo,id,XQo,cpe,zQo,WQo,eX,QQo,HQo,UQo,rv,JQo,io,zL,YQo,fpe,KQo,ZQo,Da,eHo,mpe,oHo,rHo,gpe,tHo,aHo,hpe,nHo,sHo,lHo,ppe,tv,upe,iHo,dHo,oX,cHo,fHo,mHo,av,gHo,_pe,hHo,pHo,bpe,uHo,_Ho,nv,bqe,dd,sv,vpe,WL,bHo,Fpe,vHo,vqe,Go,QL,FHo,cd,THo,rX,MHo,EHo,tX,CHo,wHo,AHo,HL,yHo,Tpe,LHo,xHo,$Ho,_t,UL,kHo,Mpe,SHo,RHo,fd,PHo,Epe,BHo,IHo,aX,qHo,NHo,jHo,lv,DHo,co,JL,GHo,Cpe,OHo,VHo,Ga,XHo,wpe,zHo,WHo,Ape,QHo,HHo,ype,UHo,JHo,YHo,ke,iv,Lpe,KHo,ZHo,nX,eUo,oUo,rUo,dv,xpe,tUo,aUo,sX,nUo,sUo,lUo,cv,$pe,iUo,dUo,lX,cUo,fUo,mUo,fv,kpe,gUo,hUo,iX,pUo,uUo,_Uo,mv,Spe,bUo,vUo,dX,FUo,TUo,MUo,gv,Rpe,EUo,CUo,cX,wUo,AUo,yUo,hv,Ppe,LUo,xUo,fX,$Uo,kUo,SUo,pv,Bpe,RUo,PUo,mX,BUo,IUo,qUo,uv,Ipe,NUo,jUo,gX,DUo,GUo,OUo,_v,VUo,qpe,XUo,zUo,Npe,WUo,QUo,bv,Fqe,md,vv,jpe,YL,HUo,Dpe,UUo,Tqe,Oo,KL,JUo,gd,YUo,hX,KUo,ZUo,pX,eJo,oJo,rJo,ZL,tJo,Gpe,aJo,nJo,sJo,bt,e8,lJo,Ope,iJo,dJo,hd,cJo,Vpe,fJo,mJo,uX,gJo,hJo,pJo,Fv,uJo,fo,o8,_Jo,Xpe,bJo,vJo,Oa,FJo,zpe,TJo,MJo,Wpe,EJo,CJo,Qpe,wJo,AJo,yJo,Kr,Tv,Hpe,LJo,xJo,_X,$Jo,kJo,SJo,Mv,Upe,RJo,PJo,bX,BJo,IJo,qJo,Ev,Jpe,NJo,jJo,vX,DJo,GJo,OJo,Cv,Ype,VJo,XJo,FX,zJo,WJo,QJo,wv,Kpe,HJo,UJo,TX,JJo,YJo,KJo,Av,ZJo,Zpe,eYo,oYo,eue,rYo,tYo,yv,Mqe,pd,Lv,oue,r8,aYo,rue,nYo,Eqe,Vo,t8,sYo,ud,lYo,MX,iYo,dYo,EX,cYo,fYo,mYo,a8,gYo,tue,hYo,pYo,uYo,vt,n8,_Yo,aue,bYo,vYo,_d,FYo,nue,TYo,MYo,CX,EYo,CYo,wYo,xv,AYo,mo,s8,yYo,sue,LYo,xYo,Va,$Yo,lue,kYo,SYo,iue,RYo,PYo,due,BYo,IYo,qYo,Se,$v,cue,NYo,jYo,wX,DYo,GYo,OYo,kv,fue,VYo,XYo,AX,zYo,WYo,QYo,Sv,mue,HYo,UYo,yX,JYo,YYo,KYo,Rv,gue,ZYo,eKo,LX,oKo,rKo,tKo,Pv,hue,aKo,nKo,xX,sKo,lKo,iKo,Bv,pue,dKo,cKo,$X,fKo,mKo,gKo,Iv,uue,hKo,pKo,kX,uKo,_Ko,bKo,qv,_ue,vKo,FKo,SX,TKo,MKo,EKo,Nv,bue,CKo,wKo,RX,AKo,yKo,LKo,jv,xKo,vue,$Ko,kKo,Fue,SKo,RKo,Dv,Cqe,bd,Gv,Tue,l8,PKo,Mue,BKo,wqe,Xo,i8,IKo,vd,qKo,PX,NKo,jKo,BX,DKo,GKo,OKo,d8,VKo,Eue,XKo,zKo,WKo,Ft,c8,QKo,Cue,HKo,UKo,Fd,JKo,wue,YKo,KKo,IX,ZKo,eZo,oZo,Ov,rZo,go,f8,tZo,Aue,aZo,nZo,Xa,sZo,yue,lZo,iZo,Lue,dZo,cZo,xue,fZo,mZo,gZo,m8,Vv,$ue,hZo,pZo,qX,uZo,_Zo,bZo,Xv,kue,vZo,FZo,NX,TZo,MZo,EZo,zv,CZo,Sue,wZo,AZo,Rue,yZo,LZo,Wv,Aqe,Td,Qv,Pue,g8,xZo,Bue,$Zo,yqe,zo,h8,kZo,Md,SZo,jX,RZo,PZo,DX,BZo,IZo,qZo,p8,NZo,Iue,jZo,DZo,GZo,Tt,u8,OZo,que,VZo,XZo,Ed,zZo,Nue,WZo,QZo,GX,HZo,UZo,JZo,Hv,YZo,ho,_8,KZo,jue,ZZo,eer,za,oer,Due,rer,ter,Gue,aer,ner,Oue,ser,ler,ier,Zr,Uv,Vue,der,cer,OX,fer,mer,ger,Jv,Xue,her,per,VX,uer,_er,ber,Yv,zue,ver,Fer,XX,Ter,Mer,Eer,Kv,Wue,Cer,wer,zX,Aer,yer,Ler,Zv,Que,xer,$er,WX,ker,Ser,Rer,e3,Per,Hue,Ber,Ier,Uue,qer,Ner,o3,Lqe,Cd,r3,Jue,b8,jer,Yue,Der,xqe,Wo,v8,Ger,wd,Oer,QX,Ver,Xer,HX,zer,Wer,Qer,F8,Her,Kue,Uer,Jer,Yer,Mt,T8,Ker,Zue,Zer,eor,Ad,oor,e_e,ror,tor,UX,aor,nor,sor,t3,lor,po,M8,ior,o_e,dor,cor,Wa,mor,r_e,gor,hor,t_e,por,uor,a_e,_or,bor,vor,yd,a3,n_e,For,Tor,JX,Mor,Eor,Cor,n3,s_e,wor,Aor,YX,yor,Lor,xor,s3,l_e,$or,kor,KX,Sor,Ror,Por,l3,Bor,i_e,Ior,qor,d_e,Nor,jor,i3,$qe,Ld,d3,c_e,E8,Dor,f_e,Gor,kqe,Qo,C8,Oor,xd,Vor,ZX,Xor,zor,ez,Wor,Qor,Hor,w8,Uor,m_e,Jor,Yor,Kor,Et,A8,Zor,g_e,err,orr,$d,rrr,h_e,trr,arr,oz,nrr,srr,lrr,c3,irr,uo,y8,drr,p_e,crr,frr,Qa,mrr,u_e,grr,hrr,__e,prr,urr,b_e,_rr,brr,vrr,L8,f3,v_e,Frr,Trr,rz,Mrr,Err,Crr,m3,F_e,wrr,Arr,tz,yrr,Lrr,xrr,g3,$rr,T_e,krr,Srr,M_e,Rrr,Prr,h3,Sqe,kd,p3,E_e,x8,Brr,C_e,Irr,Rqe,Ho,$8,qrr,Sd,Nrr,az,jrr,Drr,nz,Grr,Orr,Vrr,k8,Xrr,w_e,zrr,Wrr,Qrr,Ct,S8,Hrr,A_e,Urr,Jrr,Rd,Yrr,y_e,Krr,Zrr,sz,etr,otr,rtr,u3,ttr,_o,R8,atr,L_e,ntr,str,Ha,ltr,x_e,itr,dtr,$_e,ctr,ftr,k_e,mtr,gtr,htr,S_e,_3,R_e,ptr,utr,lz,_tr,btr,vtr,b3,Ftr,P_e,Ttr,Mtr,B_e,Etr,Ctr,v3,Pqe,Pd,F3,I_e,P8,wtr,q_e,Atr,Bqe,Uo,B8,ytr,Bd,Ltr,iz,xtr,$tr,dz,ktr,Str,Rtr,I8,Ptr,N_e,Btr,Itr,qtr,wt,q8,Ntr,j_e,jtr,Dtr,Id,Gtr,D_e,Otr,Vtr,cz,Xtr,ztr,Wtr,T3,Qtr,bo,N8,Htr,G_e,Utr,Jtr,Ua,Ytr,O_e,Ktr,Ztr,V_e,ear,oar,X_e,rar,tar,aar,Ja,M3,z_e,nar,sar,fz,lar,iar,dar,E3,W_e,car,far,mz,mar,gar,har,C3,Q_e,par,uar,gz,_ar,bar,Far,w3,H_e,Tar,Mar,hz,Ear,Car,war,A3,Aar,U_e,yar,Lar,J_e,xar,$ar,y3,Iqe,qd,L3,Y_e,j8,kar,K_e,Sar,qqe,Jo,D8,Rar,Nd,Par,pz,Bar,Iar,uz,qar,Nar,jar,G8,Dar,Z_e,Gar,Oar,Var,At,O8,Xar,e1e,zar,War,jd,Qar,o1e,Har,Uar,_z,Jar,Yar,Kar,x3,Zar,vo,V8,enr,r1e,onr,rnr,Ya,tnr,t1e,anr,nnr,a1e,snr,lnr,n1e,inr,dnr,cnr,s1e,$3,l1e,fnr,mnr,bz,gnr,hnr,pnr,k3,unr,i1e,_nr,bnr,d1e,vnr,Fnr,S3,Nqe,Dd,R3,c1e,X8,Tnr,f1e,Mnr,jqe,Yo,z8,Enr,Gd,Cnr,vz,wnr,Anr,Fz,ynr,Lnr,xnr,W8,$nr,m1e,knr,Snr,Rnr,yt,Q8,Pnr,g1e,Bnr,Inr,Od,qnr,h1e,Nnr,jnr,Tz,Dnr,Gnr,Onr,P3,Vnr,wr,H8,Xnr,p1e,znr,Wnr,Ka,Qnr,u1e,Hnr,Unr,_1e,Jnr,Ynr,b1e,Knr,Znr,esr,q,B3,v1e,osr,rsr,Mz,tsr,asr,nsr,I3,F1e,ssr,lsr,Ez,isr,dsr,csr,q3,T1e,fsr,msr,Cz,gsr,hsr,psr,N3,M1e,usr,_sr,wz,bsr,vsr,Fsr,j3,E1e,Tsr,Msr,Az,Esr,Csr,wsr,D3,C1e,Asr,ysr,yz,Lsr,xsr,$sr,G3,w1e,ksr,Ssr,Lz,Rsr,Psr,Bsr,O3,A1e,Isr,qsr,xz,Nsr,jsr,Dsr,V3,y1e,Gsr,Osr,$z,Vsr,Xsr,zsr,X3,L1e,Wsr,Qsr,kz,Hsr,Usr,Jsr,z3,x1e,Ysr,Ksr,Sz,Zsr,elr,olr,W3,$1e,rlr,tlr,Rz,alr,nlr,slr,Q3,k1e,llr,ilr,Pz,dlr,clr,flr,H3,S1e,mlr,glr,Bz,hlr,plr,ulr,U3,R1e,_lr,blr,Iz,vlr,Flr,Tlr,J3,P1e,Mlr,Elr,qz,Clr,wlr,Alr,Y3,B1e,ylr,Llr,Nz,xlr,$lr,klr,Bs,I1e,Slr,Rlr,jz,Plr,Blr,Dz,Ilr,qlr,Nlr,K3,q1e,jlr,Dlr,Gz,Glr,Olr,Vlr,Z3,N1e,Xlr,zlr,Oz,Wlr,Qlr,Hlr,eF,j1e,Ulr,Jlr,Vz,Ylr,Klr,Zlr,oF,D1e,eir,oir,Xz,rir,tir,air,rF,G1e,nir,sir,zz,lir,iir,dir,tF,O1e,cir,fir,Wz,mir,gir,hir,aF,V1e,pir,uir,Qz,_ir,bir,vir,nF,X1e,Fir,Tir,Hz,Mir,Eir,Cir,sF,z1e,wir,Air,Uz,yir,Lir,xir,lF,W1e,$ir,kir,Jz,Sir,Rir,Pir,iF,Q1e,Bir,Iir,Yz,qir,Nir,jir,dF,H1e,Dir,Gir,Kz,Oir,Vir,Xir,cF,U1e,zir,Wir,Zz,Qir,Hir,Uir,fF,J1e,Jir,Yir,eW,Kir,Zir,edr,mF,Y1e,odr,rdr,oW,tdr,adr,ndr,gF,K1e,sdr,ldr,rW,idr,ddr,cdr,hF,Z1e,fdr,mdr,tW,gdr,hdr,pdr,pF,ebe,udr,_dr,aW,bdr,vdr,Fdr,uF,obe,Tdr,Mdr,nW,Edr,Cdr,wdr,_F,rbe,Adr,ydr,sW,Ldr,xdr,$dr,bF,tbe,kdr,Sdr,lW,Rdr,Pdr,Bdr,vF,abe,Idr,qdr,iW,Ndr,jdr,Ddr,FF,nbe,Gdr,Odr,dW,Vdr,Xdr,zdr,TF,sbe,Wdr,Qdr,cW,Hdr,Udr,Jdr,MF,lbe,Ydr,Kdr,fW,Zdr,ecr,ocr,EF,ibe,rcr,tcr,mW,acr,ncr,scr,CF,dbe,lcr,icr,gW,dcr,ccr,fcr,wF,cbe,mcr,gcr,hW,hcr,pcr,ucr,AF,fbe,_cr,bcr,pW,vcr,Fcr,Tcr,yF,Dqe,Vd,LF,mbe,U8,Mcr,gbe,Ecr,Gqe,Ko,J8,Ccr,Xd,wcr,uW,Acr,ycr,_W,Lcr,xcr,$cr,Y8,kcr,hbe,Scr,Rcr,Pcr,Lt,K8,Bcr,pbe,Icr,qcr,zd,Ncr,ube,jcr,Dcr,bW,Gcr,Ocr,Vcr,xF,Xcr,Ar,Z8,zcr,_be,Wcr,Qcr,Za,Hcr,bbe,Ucr,Jcr,vbe,Ycr,Kcr,Fbe,Zcr,efr,ofr,se,$F,Tbe,rfr,tfr,vW,afr,nfr,sfr,kF,Mbe,lfr,ifr,FW,dfr,cfr,ffr,SF,Ebe,mfr,gfr,TW,hfr,pfr,ufr,RF,Cbe,_fr,bfr,MW,vfr,Ffr,Tfr,PF,wbe,Mfr,Efr,EW,Cfr,wfr,Afr,BF,Abe,yfr,Lfr,CW,xfr,$fr,kfr,IF,ybe,Sfr,Rfr,wW,Pfr,Bfr,Ifr,qF,Lbe,qfr,Nfr,AW,jfr,Dfr,Gfr,NF,xbe,Ofr,Vfr,yW,Xfr,zfr,Wfr,jF,$be,Qfr,Hfr,LW,Ufr,Jfr,Yfr,DF,kbe,Kfr,Zfr,xW,emr,omr,rmr,GF,Sbe,tmr,amr,$W,nmr,smr,lmr,OF,Rbe,imr,dmr,kW,cmr,fmr,mmr,VF,Pbe,gmr,hmr,SW,pmr,umr,_mr,XF,Bbe,bmr,vmr,RW,Fmr,Tmr,Mmr,zF,Ibe,Emr,Cmr,PW,wmr,Amr,ymr,WF,qbe,Lmr,xmr,BW,$mr,kmr,Smr,QF,Nbe,Rmr,Pmr,IW,Bmr,Imr,qmr,HF,jbe,Nmr,jmr,qW,Dmr,Gmr,Omr,UF,Dbe,Vmr,Xmr,NW,zmr,Wmr,Qmr,JF,Gbe,Hmr,Umr,jW,Jmr,Ymr,Kmr,YF,Obe,Zmr,egr,DW,ogr,rgr,tgr,KF,Vbe,agr,ngr,GW,sgr,lgr,igr,ZF,Oqe,Wd,e6,Xbe,ex,dgr,zbe,cgr,Vqe,Zo,ox,fgr,Qd,mgr,OW,ggr,hgr,VW,pgr,ugr,_gr,rx,bgr,Wbe,vgr,Fgr,Tgr,xt,tx,Mgr,Qbe,Egr,Cgr,Hd,wgr,Hbe,Agr,ygr,XW,Lgr,xgr,$gr,o6,kgr,yr,ax,Sgr,Ube,Rgr,Pgr,en,Bgr,Jbe,Igr,qgr,Ybe,Ngr,jgr,Kbe,Dgr,Ggr,Ogr,Te,r6,Zbe,Vgr,Xgr,zW,zgr,Wgr,Qgr,t6,e2e,Hgr,Ugr,WW,Jgr,Ygr,Kgr,a6,o2e,Zgr,ehr,QW,ohr,rhr,thr,n6,r2e,ahr,nhr,HW,shr,lhr,ihr,s6,t2e,dhr,chr,UW,fhr,mhr,ghr,l6,a2e,hhr,phr,JW,uhr,_hr,bhr,i6,n2e,vhr,Fhr,YW,Thr,Mhr,Ehr,d6,s2e,Chr,whr,KW,Ahr,yhr,Lhr,c6,l2e,xhr,$hr,ZW,khr,Shr,Rhr,f6,i2e,Phr,Bhr,eQ,Ihr,qhr,Nhr,m6,d2e,jhr,Dhr,oQ,Ghr,Ohr,Vhr,g6,c2e,Xhr,zhr,rQ,Whr,Qhr,Hhr,h6,f2e,Uhr,Jhr,tQ,Yhr,Khr,Zhr,p6,Xqe,Ud,u6,m2e,nx,epr,g2e,opr,zqe,er,sx,rpr,Jd,tpr,aQ,apr,npr,nQ,spr,lpr,ipr,lx,dpr,h2e,cpr,fpr,mpr,$t,ix,gpr,p2e,hpr,ppr,Yd,upr,u2e,_pr,bpr,sQ,vpr,Fpr,Tpr,_6,Mpr,Lr,dx,Epr,_2e,Cpr,wpr,on,Apr,b2e,ypr,Lpr,v2e,xpr,$pr,F2e,kpr,Spr,Rpr,rn,b6,T2e,Ppr,Bpr,lQ,Ipr,qpr,Npr,v6,M2e,jpr,Dpr,iQ,Gpr,Opr,Vpr,F6,E2e,Xpr,zpr,dQ,Wpr,Qpr,Hpr,T6,C2e,Upr,Jpr,cQ,Ypr,Kpr,Zpr,M6,Wqe,Kd,E6,w2e,cx,eur,A2e,our,Qqe,or,fx,rur,Zd,tur,fQ,aur,nur,mQ,sur,lur,iur,mx,dur,y2e,cur,fur,mur,kt,gx,gur,L2e,hur,pur,ec,uur,x2e,_ur,bur,gQ,vur,Fur,Tur,C6,Mur,xr,hx,Eur,$2e,Cur,wur,tn,Aur,k2e,yur,Lur,S2e,xur,$ur,R2e,kur,Sur,Rur,ie,w6,P2e,Pur,Bur,hQ,Iur,qur,Nur,A6,B2e,jur,Dur,pQ,Gur,Our,Vur,y6,I2e,Xur,zur,uQ,Wur,Qur,Hur,L6,q2e,Uur,Jur,_Q,Yur,Kur,Zur,x6,N2e,e_r,o_r,bQ,r_r,t_r,a_r,$6,j2e,n_r,s_r,vQ,l_r,i_r,d_r,k6,D2e,c_r,f_r,FQ,m_r,g_r,h_r,S6,G2e,p_r,u_r,TQ,__r,b_r,v_r,R6,O2e,F_r,T_r,MQ,M_r,E_r,C_r,P6,V2e,w_r,A_r,EQ,y_r,L_r,x_r,B6,X2e,$_r,k_r,CQ,S_r,R_r,P_r,I6,z2e,B_r,I_r,wQ,q_r,N_r,j_r,q6,W2e,D_r,G_r,AQ,O_r,V_r,X_r,N6,Q2e,z_r,W_r,yQ,Q_r,H_r,U_r,j6,H2e,J_r,Y_r,LQ,K_r,Z_r,e1r,D6,U2e,o1r,r1r,xQ,t1r,a1r,n1r,G6,J2e,s1r,l1r,$Q,i1r,d1r,c1r,O6,Y2e,f1r,m1r,kQ,g1r,h1r,p1r,V6,K2e,u1r,_1r,SQ,b1r,v1r,F1r,X6,Z2e,T1r,M1r,RQ,E1r,C1r,w1r,z6,Hqe,oc,W6,e4e,px,A1r,o4e,y1r,Uqe,rr,ux,L1r,rc,x1r,PQ,$1r,k1r,BQ,S1r,R1r,P1r,_x,B1r,r4e,I1r,q1r,N1r,St,bx,j1r,t4e,D1r,G1r,tc,O1r,a4e,V1r,X1r,IQ,z1r,W1r,Q1r,Q6,H1r,$r,vx,U1r,n4e,J1r,Y1r,an,K1r,s4e,Z1r,ebr,l4e,obr,rbr,i4e,tbr,abr,nbr,ye,H6,d4e,sbr,lbr,qQ,ibr,dbr,cbr,U6,c4e,fbr,mbr,NQ,gbr,hbr,pbr,J6,f4e,ubr,_br,jQ,bbr,vbr,Fbr,Y6,m4e,Tbr,Mbr,DQ,Ebr,Cbr,wbr,K6,g4e,Abr,ybr,GQ,Lbr,xbr,$br,Z6,h4e,kbr,Sbr,OQ,Rbr,Pbr,Bbr,eT,p4e,Ibr,qbr,VQ,Nbr,jbr,Dbr,oT,u4e,Gbr,Obr,XQ,Vbr,Xbr,zbr,rT,_4e,Wbr,Qbr,zQ,Hbr,Ubr,Jbr,tT,b4e,Ybr,Kbr,WQ,Zbr,e2r,o2r,aT,Jqe,ac,nT,v4e,Fx,r2r,F4e,t2r,Yqe,tr,Tx,a2r,nc,n2r,QQ,s2r,l2r,HQ,i2r,d2r,c2r,Mx,f2r,T4e,m2r,g2r,h2r,Rt,Ex,p2r,M4e,u2r,_2r,sc,b2r,E4e,v2r,F2r,UQ,T2r,M2r,E2r,sT,C2r,kr,Cx,w2r,C4e,A2r,y2r,nn,L2r,w4e,x2r,$2r,A4e,k2r,S2r,y4e,R2r,P2r,B2r,ee,lT,L4e,I2r,q2r,JQ,N2r,j2r,D2r,iT,x4e,G2r,O2r,YQ,V2r,X2r,z2r,dT,$4e,W2r,Q2r,KQ,H2r,U2r,J2r,cT,k4e,Y2r,K2r,ZQ,Z2r,e4r,o4r,fT,S4e,r4r,t4r,eH,a4r,n4r,s4r,mT,R4e,l4r,i4r,oH,d4r,c4r,f4r,gT,P4e,m4r,g4r,rH,h4r,p4r,u4r,hT,B4e,_4r,b4r,tH,v4r,F4r,T4r,pT,I4e,M4r,E4r,aH,C4r,w4r,A4r,uT,q4e,y4r,L4r,nH,x4r,$4r,k4r,_T,N4e,S4r,R4r,sH,P4r,B4r,I4r,bT,j4e,q4r,N4r,lH,j4r,D4r,G4r,vT,D4e,O4r,V4r,iH,X4r,z4r,W4r,FT,G4e,Q4r,H4r,dH,U4r,J4r,Y4r,TT,O4e,K4r,Z4r,cH,e5r,o5r,r5r,MT,V4e,t5r,a5r,fH,n5r,s5r,l5r,ET,X4e,i5r,d5r,mH,c5r,f5r,m5r,CT,z4e,g5r,h5r,gH,p5r,u5r,_5r,wT,W4e,b5r,v5r,hH,F5r,T5r,M5r,AT,Q4e,E5r,C5r,pH,w5r,A5r,y5r,yT,H4e,L5r,x5r,uH,$5r,k5r,S5r,LT,U4e,R5r,P5r,_H,B5r,I5r,q5r,xT,J4e,N5r,j5r,bH,D5r,G5r,O5r,$T,Y4e,V5r,X5r,vH,z5r,W5r,Q5r,kT,K4e,H5r,U5r,FH,J5r,Y5r,K5r,ST,Z4e,Z5r,evr,TH,ovr,rvr,tvr,RT,Kqe,lc,PT,e5e,wx,avr,o5e,nvr,Zqe,ar,Ax,svr,ic,lvr,MH,ivr,dvr,EH,cvr,fvr,mvr,yx,gvr,r5e,hvr,pvr,uvr,Pt,Lx,_vr,t5e,bvr,vvr,dc,Fvr,a5e,Tvr,Mvr,CH,Evr,Cvr,wvr,BT,Avr,Sr,xx,yvr,n5e,Lvr,xvr,sn,$vr,s5e,kvr,Svr,l5e,Rvr,Pvr,i5e,Bvr,Ivr,qvr,he,IT,d5e,Nvr,jvr,wH,Dvr,Gvr,Ovr,qT,c5e,Vvr,Xvr,AH,zvr,Wvr,Qvr,NT,f5e,Hvr,Uvr,yH,Jvr,Yvr,Kvr,jT,m5e,Zvr,e3r,LH,o3r,r3r,t3r,DT,g5e,a3r,n3r,xH,s3r,l3r,i3r,GT,h5e,d3r,c3r,$H,f3r,m3r,g3r,OT,p5e,h3r,p3r,kH,u3r,_3r,b3r,VT,u5e,v3r,F3r,SH,T3r,M3r,E3r,XT,_5e,C3r,w3r,RH,A3r,y3r,L3r,zT,b5e,x3r,$3r,PH,k3r,S3r,R3r,WT,v5e,P3r,B3r,BH,I3r,q3r,N3r,QT,F5e,j3r,D3r,IH,G3r,O3r,V3r,HT,T5e,X3r,z3r,qH,W3r,Q3r,H3r,UT,M5e,U3r,J3r,NH,Y3r,K3r,Z3r,JT,E5e,eFr,oFr,jH,rFr,tFr,aFr,YT,C5e,nFr,sFr,DH,lFr,iFr,dFr,KT,w5e,cFr,fFr,GH,mFr,gFr,hFr,ZT,eNe,cc,eM,A5e,$x,pFr,y5e,uFr,oNe,nr,kx,_Fr,fc,bFr,OH,vFr,FFr,VH,TFr,MFr,EFr,Sx,CFr,L5e,wFr,AFr,yFr,Bt,Rx,LFr,x5e,xFr,$Fr,mc,kFr,$5e,SFr,RFr,XH,PFr,BFr,IFr,oM,qFr,Rr,Px,NFr,k5e,jFr,DFr,ln,GFr,S5e,OFr,VFr,R5e,XFr,zFr,P5e,WFr,QFr,HFr,Bx,rM,B5e,UFr,JFr,zH,YFr,KFr,ZFr,tM,I5e,e6r,o6r,WH,r6r,t6r,a6r,aM,rNe,gc,nM,q5e,Ix,n6r,N5e,s6r,tNe,sr,qx,l6r,hc,i6r,QH,d6r,c6r,HH,f6r,m6r,g6r,Nx,h6r,j5e,p6r,u6r,_6r,It,jx,b6r,D5e,v6r,F6r,pc,T6r,G5e,M6r,E6r,UH,C6r,w6r,A6r,sM,y6r,Pr,Dx,L6r,O5e,x6r,$6r,dn,k6r,V5e,S6r,R6r,X5e,P6r,B6r,z5e,I6r,q6r,N6r,W5e,lM,Q5e,j6r,D6r,JH,G6r,O6r,V6r,iM,aNe,uc,dM,H5e,Gx,X6r,U5e,z6r,nNe,lr,Ox,W6r,_c,Q6r,YH,H6r,U6r,KH,J6r,Y6r,K6r,Vx,Z6r,J5e,eTr,oTr,rTr,qt,Xx,tTr,Y5e,aTr,nTr,bc,sTr,K5e,lTr,iTr,ZH,dTr,cTr,fTr,cM,mTr,Br,zx,gTr,Z5e,hTr,pTr,cn,uTr,eve,_Tr,bTr,ove,vTr,FTr,rve,TTr,MTr,ETr,de,fM,tve,CTr,wTr,eU,ATr,yTr,LTr,mM,ave,xTr,$Tr,oU,kTr,STr,RTr,gM,nve,PTr,BTr,rU,ITr,qTr,NTr,hM,sve,jTr,DTr,tU,GTr,OTr,VTr,pM,lve,XTr,zTr,aU,WTr,QTr,HTr,uM,ive,UTr,JTr,nU,YTr,KTr,ZTr,_M,dve,eMr,oMr,sU,rMr,tMr,aMr,bM,cve,nMr,sMr,lU,lMr,iMr,dMr,vM,fve,cMr,fMr,iU,mMr,gMr,hMr,FM,mve,pMr,uMr,dU,_Mr,bMr,vMr,TM,gve,FMr,TMr,cU,MMr,EMr,CMr,MM,hve,wMr,AMr,fU,yMr,LMr,xMr,EM,pve,$Mr,kMr,mU,SMr,RMr,PMr,CM,uve,BMr,IMr,gU,qMr,NMr,jMr,wM,_ve,DMr,GMr,hU,OMr,VMr,XMr,AM,bve,zMr,WMr,pU,QMr,HMr,UMr,yM,vve,JMr,YMr,uU,KMr,ZMr,eEr,LM,Fve,oEr,rEr,_U,tEr,aEr,nEr,xM,Tve,sEr,lEr,bU,iEr,dEr,cEr,$M,Mve,fEr,mEr,vU,gEr,hEr,pEr,kM,sNe,vc,SM,Eve,Wx,uEr,Cve,_Er,lNe,ir,Qx,bEr,Fc,vEr,FU,FEr,TEr,TU,MEr,EEr,CEr,Hx,wEr,wve,AEr,yEr,LEr,Nt,Ux,xEr,Ave,$Er,kEr,Tc,SEr,yve,REr,PEr,MU,BEr,IEr,qEr,RM,NEr,Ir,Jx,jEr,Lve,DEr,GEr,fn,OEr,xve,VEr,XEr,$ve,zEr,WEr,kve,QEr,HEr,UEr,ce,PM,Sve,JEr,YEr,EU,KEr,ZEr,eCr,BM,Rve,oCr,rCr,CU,tCr,aCr,nCr,IM,Pve,sCr,lCr,wU,iCr,dCr,cCr,qM,Bve,fCr,mCr,AU,gCr,hCr,pCr,NM,Ive,uCr,_Cr,yU,bCr,vCr,FCr,jM,qve,TCr,MCr,LU,ECr,CCr,wCr,DM,Nve,ACr,yCr,xU,LCr,xCr,$Cr,GM,jve,kCr,SCr,$U,RCr,PCr,BCr,OM,Dve,ICr,qCr,kU,NCr,jCr,DCr,VM,Gve,GCr,OCr,SU,VCr,XCr,zCr,XM,Ove,WCr,QCr,RU,HCr,UCr,JCr,zM,Vve,YCr,KCr,PU,ZCr,ewr,owr,WM,Xve,rwr,twr,BU,awr,nwr,swr,QM,zve,lwr,iwr,IU,dwr,cwr,fwr,HM,Wve,mwr,gwr,qU,hwr,pwr,uwr,UM,Qve,_wr,bwr,NU,vwr,Fwr,Twr,JM,Hve,Mwr,Ewr,jU,Cwr,wwr,Awr,YM,Uve,ywr,Lwr,DU,xwr,$wr,kwr,KM,Jve,Swr,Rwr,GU,Pwr,Bwr,Iwr,ZM,Yve,qwr,Nwr,OU,jwr,Dwr,Gwr,eE,iNe,Mc,oE,Kve,Yx,Owr,Zve,Vwr,dNe,dr,Kx,Xwr,Ec,zwr,VU,Wwr,Qwr,XU,Hwr,Uwr,Jwr,Zx,Ywr,e3e,Kwr,Zwr,eAr,jt,e7,oAr,o3e,rAr,tAr,Cc,aAr,r3e,nAr,sAr,zU,lAr,iAr,dAr,rE,cAr,qr,o7,fAr,t3e,mAr,gAr,mn,hAr,a3e,pAr,uAr,n3e,_Ar,bAr,s3e,vAr,FAr,TAr,l3e,tE,i3e,MAr,EAr,WU,CAr,wAr,AAr,aE,cNe,wc,nE,d3e,r7,yAr,c3e,LAr,fNe,cr,t7,xAr,Ac,$Ar,QU,kAr,SAr,HU,RAr,PAr,BAr,a7,IAr,f3e,qAr,NAr,jAr,Dt,n7,DAr,m3e,GAr,OAr,yc,VAr,g3e,XAr,zAr,UU,WAr,QAr,HAr,sE,UAr,Nr,s7,JAr,h3e,YAr,KAr,gn,ZAr,p3e,e0r,o0r,u3e,r0r,t0r,_3e,a0r,n0r,s0r,b3e,lE,v3e,l0r,i0r,JU,d0r,c0r,f0r,iE,mNe,Lc,dE,F3e,l7,m0r,T3e,g0r,gNe,fr,i7,h0r,xc,p0r,YU,u0r,_0r,KU,b0r,v0r,F0r,d7,T0r,M3e,M0r,E0r,C0r,Gt,c7,w0r,E3e,A0r,y0r,$c,L0r,C3e,x0r,$0r,ZU,k0r,S0r,R0r,cE,P0r,jr,f7,B0r,w3e,I0r,q0r,hn,N0r,A3e,j0r,D0r,y3e,G0r,O0r,L3e,V0r,X0r,z0r,re,fE,x3e,W0r,Q0r,eJ,H0r,U0r,J0r,mE,$3e,Y0r,K0r,oJ,Z0r,eyr,oyr,gE,k3e,ryr,tyr,rJ,ayr,nyr,syr,hE,S3e,lyr,iyr,tJ,dyr,cyr,fyr,pE,R3e,myr,gyr,aJ,hyr,pyr,uyr,uE,P3e,_yr,byr,nJ,vyr,Fyr,Tyr,_E,B3e,Myr,Eyr,sJ,Cyr,wyr,Ayr,bE,I3e,yyr,Lyr,lJ,xyr,$yr,kyr,vE,q3e,Syr,Ryr,iJ,Pyr,Byr,Iyr,FE,N3e,qyr,Nyr,dJ,jyr,Dyr,Gyr,TE,j3e,Oyr,Vyr,cJ,Xyr,zyr,Wyr,ME,D3e,Qyr,Hyr,fJ,Uyr,Jyr,Yyr,EE,G3e,Kyr,Zyr,mJ,eLr,oLr,rLr,CE,O3e,tLr,aLr,gJ,nLr,sLr,lLr,wE,V3e,iLr,dLr,hJ,cLr,fLr,mLr,AE,X3e,gLr,hLr,pJ,pLr,uLr,_Lr,yE,z3e,bLr,vLr,uJ,FLr,TLr,MLr,LE,W3e,ELr,CLr,_J,wLr,ALr,yLr,xE,Q3e,LLr,xLr,bJ,$Lr,kLr,SLr,$E,H3e,RLr,PLr,vJ,BLr,ILr,qLr,kE,U3e,NLr,jLr,FJ,DLr,GLr,OLr,SE,J3e,VLr,XLr,TJ,zLr,WLr,QLr,RE,Y3e,HLr,ULr,MJ,JLr,YLr,KLr,PE,K3e,ZLr,e8r,EJ,o8r,r8r,t8r,BE,Z3e,a8r,n8r,CJ,s8r,l8r,i8r,IE,hNe,kc,qE,eFe,m7,d8r,oFe,c8r,pNe,mr,g7,f8r,Sc,m8r,wJ,g8r,h8r,AJ,p8r,u8r,_8r,h7,b8r,rFe,v8r,F8r,T8r,Ot,p7,M8r,tFe,E8r,C8r,Rc,w8r,aFe,A8r,y8r,yJ,L8r,x8r,$8r,NE,k8r,Dr,u7,S8r,nFe,R8r,P8r,pn,B8r,sFe,I8r,q8r,lFe,N8r,j8r,iFe,D8r,G8r,O8r,Re,jE,dFe,V8r,X8r,LJ,z8r,W8r,Q8r,DE,cFe,H8r,U8r,xJ,J8r,Y8r,K8r,GE,fFe,Z8r,exr,$J,oxr,rxr,txr,OE,mFe,axr,nxr,kJ,sxr,lxr,ixr,VE,gFe,dxr,cxr,SJ,fxr,mxr,gxr,XE,hFe,hxr,pxr,RJ,uxr,_xr,bxr,zE,pFe,vxr,Fxr,PJ,Txr,Mxr,Exr,WE,uFe,Cxr,wxr,BJ,Axr,yxr,Lxr,QE,_Fe,xxr,$xr,IJ,kxr,Sxr,Rxr,HE,uNe,Pc,UE,bFe,_7,Pxr,vFe,Bxr,_Ne,gr,b7,Ixr,Bc,qxr,qJ,Nxr,jxr,NJ,Dxr,Gxr,Oxr,v7,Vxr,FFe,Xxr,zxr,Wxr,Vt,F7,Qxr,TFe,Hxr,Uxr,Ic,Jxr,MFe,Yxr,Kxr,jJ,Zxr,e7r,o7r,JE,r7r,Gr,T7,t7r,EFe,a7r,n7r,un,s7r,CFe,l7r,i7r,wFe,d7r,c7r,AFe,f7r,m7r,g7r,Me,YE,yFe,h7r,p7r,DJ,u7r,_7r,b7r,KE,LFe,v7r,F7r,GJ,T7r,M7r,E7r,ZE,xFe,C7r,w7r,OJ,A7r,y7r,L7r,eC,$Fe,x7r,$7r,VJ,k7r,S7r,R7r,oC,kFe,P7r,B7r,XJ,I7r,q7r,N7r,rC,SFe,j7r,D7r,zJ,G7r,O7r,V7r,tC,RFe,X7r,z7r,WJ,W7r,Q7r,H7r,aC,PFe,U7r,J7r,QJ,Y7r,K7r,Z7r,nC,BFe,e9r,o9r,HJ,r9r,t9r,a9r,sC,IFe,n9r,s9r,UJ,l9r,i9r,d9r,lC,qFe,c9r,f9r,JJ,m9r,g9r,h9r,iC,NFe,p9r,u9r,YJ,_9r,b9r,v9r,dC,bNe,qc,cC,jFe,M7,F9r,DFe,T9r,vNe,hr,E7,M9r,Nc,E9r,KJ,C9r,w9r,ZJ,A9r,y9r,L9r,C7,x9r,GFe,$9r,k9r,S9r,Xt,w7,R9r,OFe,P9r,B9r,jc,I9r,VFe,q9r,N9r,eY,j9r,D9r,G9r,fC,O9r,Or,A7,V9r,XFe,X9r,z9r,_n,W9r,zFe,Q9r,H9r,WFe,U9r,J9r,QFe,Y9r,K9r,Z9r,Le,mC,HFe,e$r,o$r,oY,r$r,t$r,a$r,gC,UFe,n$r,s$r,rY,l$r,i$r,d$r,hC,JFe,c$r,f$r,tY,m$r,g$r,h$r,pC,YFe,p$r,u$r,aY,_$r,b$r,v$r,uC,KFe,F$r,T$r,nY,M$r,E$r,C$r,_C,ZFe,w$r,A$r,sY,y$r,L$r,x$r,bC,e6e,$$r,k$r,lY,S$r,R$r,P$r,vC,o6e,B$r,I$r,iY,q$r,N$r,j$r,FC,r6e,D$r,G$r,dY,O$r,V$r,X$r,TC,t6e,z$r,W$r,cY,Q$r,H$r,U$r,MC,FNe,Dc,EC,a6e,y7,J$r,n6e,Y$r,TNe,pr,L7,K$r,Gc,Z$r,fY,ekr,okr,mY,rkr,tkr,akr,x7,nkr,s6e,skr,lkr,ikr,zt,$7,dkr,l6e,ckr,fkr,Oc,mkr,i6e,gkr,hkr,gY,pkr,ukr,_kr,CC,bkr,Vr,k7,vkr,d6e,Fkr,Tkr,bn,Mkr,c6e,Ekr,Ckr,f6e,wkr,Akr,m6e,ykr,Lkr,xkr,Pe,wC,g6e,$kr,kkr,hY,Skr,Rkr,Pkr,AC,h6e,Bkr,Ikr,pY,qkr,Nkr,jkr,yC,p6e,Dkr,Gkr,uY,Okr,Vkr,Xkr,LC,u6e,zkr,Wkr,_Y,Qkr,Hkr,Ukr,xC,_6e,Jkr,Ykr,bY,Kkr,Zkr,eSr,$C,b6e,oSr,rSr,vY,tSr,aSr,nSr,kC,v6e,sSr,lSr,FY,iSr,dSr,cSr,SC,F6e,fSr,mSr,TY,gSr,hSr,pSr,RC,T6e,uSr,_Sr,MY,bSr,vSr,FSr,PC,MNe,Vc,BC,M6e,S7,TSr,E6e,MSr,ENe,ur,R7,ESr,Xc,CSr,EY,wSr,ASr,CY,ySr,LSr,xSr,P7,$Sr,C6e,kSr,SSr,RSr,Wt,B7,PSr,w6e,BSr,ISr,zc,qSr,A6e,NSr,jSr,wY,DSr,GSr,OSr,IC,VSr,Xr,I7,XSr,y6e,zSr,WSr,vn,QSr,L6e,HSr,USr,x6e,JSr,YSr,$6e,KSr,ZSr,eRr,xe,qC,k6e,oRr,rRr,AY,tRr,aRr,nRr,NC,S6e,sRr,lRr,yY,iRr,dRr,cRr,jC,R6e,fRr,mRr,LY,gRr,hRr,pRr,DC,P6e,uRr,_Rr,xY,bRr,vRr,FRr,GC,B6e,TRr,MRr,$Y,ERr,CRr,wRr,OC,I6e,ARr,yRr,kY,LRr,xRr,$Rr,VC,q6e,kRr,SRr,SY,RRr,PRr,BRr,XC,N6e,IRr,qRr,RY,NRr,jRr,DRr,zC,j6e,GRr,ORr,PY,VRr,XRr,zRr,WC,D6e,WRr,QRr,BY,HRr,URr,JRr,QC,CNe,Wc,HC,G6e,q7,YRr,O6e,KRr,wNe,_r,N7,ZRr,Qc,ePr,IY,oPr,rPr,qY,tPr,aPr,nPr,j7,sPr,V6e,lPr,iPr,dPr,Qt,D7,cPr,X6e,fPr,mPr,Hc,gPr,z6e,hPr,pPr,NY,uPr,_Pr,bPr,UC,vPr,zr,G7,FPr,W6e,TPr,MPr,Fn,EPr,Q6e,CPr,wPr,H6e,APr,yPr,U6e,LPr,xPr,$Pr,$e,JC,J6e,kPr,SPr,jY,RPr,PPr,BPr,YC,Y6e,IPr,qPr,DY,NPr,jPr,DPr,KC,K6e,GPr,OPr,GY,VPr,XPr,zPr,ZC,Z6e,WPr,QPr,OY,HPr,UPr,JPr,ew,eTe,YPr,KPr,VY,ZPr,eBr,oBr,ow,oTe,rBr,tBr,XY,aBr,nBr,sBr,rw,rTe,lBr,iBr,zY,dBr,cBr,fBr,tw,tTe,mBr,gBr,WY,hBr,pBr,uBr,aw,aTe,_Br,bBr,QY,vBr,FBr,TBr,nw,nTe,MBr,EBr,HY,CBr,wBr,ABr,sw,ANe,Uc,lw,sTe,O7,yBr,lTe,LBr,yNe,br,V7,xBr,Jc,$Br,UY,kBr,SBr,JY,RBr,PBr,BBr,X7,IBr,iTe,qBr,NBr,jBr,Ht,z7,DBr,dTe,GBr,OBr,Yc,VBr,cTe,XBr,zBr,YY,WBr,QBr,HBr,iw,UBr,Wr,W7,JBr,fTe,YBr,KBr,Tn,ZBr,mTe,eIr,oIr,gTe,rIr,tIr,hTe,aIr,nIr,sIr,De,dw,pTe,lIr,iIr,KY,dIr,cIr,fIr,cw,uTe,mIr,gIr,ZY,hIr,pIr,uIr,fw,_Te,_Ir,bIr,eK,vIr,FIr,TIr,mw,bTe,MIr,EIr,oK,CIr,wIr,AIr,gw,vTe,yIr,LIr,rK,xIr,$Ir,kIr,hw,FTe,SIr,RIr,tK,PIr,BIr,IIr,pw,TTe,qIr,NIr,aK,jIr,DIr,GIr,uw,MTe,OIr,VIr,nK,XIr,zIr,WIr,_w,LNe,Kc,bw,ETe,Q7,QIr,CTe,HIr,xNe,vr,H7,UIr,Zc,JIr,sK,YIr,KIr,lK,ZIr,eqr,oqr,U7,rqr,wTe,tqr,aqr,nqr,Ut,J7,sqr,ATe,lqr,iqr,ef,dqr,yTe,cqr,fqr,iK,mqr,gqr,hqr,vw,pqr,Qr,Y7,uqr,LTe,_qr,bqr,Mn,vqr,xTe,Fqr,Tqr,$Te,Mqr,Eqr,kTe,Cqr,wqr,Aqr,Ge,Fw,STe,yqr,Lqr,dK,xqr,$qr,kqr,Tw,RTe,Sqr,Rqr,cK,Pqr,Bqr,Iqr,Mw,PTe,qqr,Nqr,fK,jqr,Dqr,Gqr,Ew,BTe,Oqr,Vqr,mK,Xqr,zqr,Wqr,Cw,ITe,Qqr,Hqr,gK,Uqr,Jqr,Yqr,ww,qTe,Kqr,Zqr,hK,eNr,oNr,rNr,Aw,NTe,tNr,aNr,pK,nNr,sNr,lNr,yw,jTe,iNr,dNr,uK,cNr,fNr,mNr,Lw,$Ne,of,xw,DTe,K7,gNr,GTe,hNr,kNe,Fr,Z7,pNr,rf,uNr,_K,_Nr,bNr,bK,vNr,FNr,TNr,e9,MNr,OTe,ENr,CNr,wNr,Jt,o9,ANr,VTe,yNr,LNr,tf,xNr,XTe,$Nr,kNr,vK,SNr,RNr,PNr,$w,BNr,Hr,r9,INr,zTe,qNr,NNr,En,jNr,WTe,DNr,GNr,QTe,ONr,VNr,HTe,XNr,zNr,WNr,UTe,kw,JTe,QNr,HNr,FK,UNr,JNr,YNr,Sw,SNe,af,Rw,YTe,t9,KNr,KTe,ZNr,RNe,Tr,a9,ejr,nf,ojr,TK,rjr,tjr,MK,ajr,njr,sjr,n9,ljr,ZTe,ijr,djr,cjr,Yt,s9,fjr,eMe,mjr,gjr,sf,hjr,oMe,pjr,ujr,EK,_jr,bjr,vjr,Pw,Fjr,Ur,l9,Tjr,rMe,Mjr,Ejr,Cn,Cjr,tMe,wjr,Ajr,aMe,yjr,Ljr,nMe,xjr,$jr,kjr,i9,Bw,sMe,Sjr,Rjr,CK,Pjr,Bjr,Ijr,Iw,lMe,qjr,Njr,wK,jjr,Djr,Gjr,qw,PNe,lf,Nw,iMe,d9,Ojr,dMe,Vjr,BNe,Mr,c9,Xjr,df,zjr,AK,Wjr,Qjr,yK,Hjr,Ujr,Jjr,f9,Yjr,cMe,Kjr,Zjr,eDr,Kt,m9,oDr,fMe,rDr,tDr,cf,aDr,mMe,nDr,sDr,LK,lDr,iDr,dDr,jw,cDr,Jr,g9,fDr,gMe,mDr,gDr,wn,hDr,hMe,pDr,uDr,pMe,_Dr,bDr,uMe,vDr,FDr,TDr,_Me,Dw,bMe,MDr,EDr,xK,CDr,wDr,ADr,Gw,INe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),dy=new oe({}),cy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new yDr({props:{warning:!0,$$slots:{default:[w8t]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L573"}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L719"}}),_y=new oe({}),by=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L388"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),My=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L598"}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new yDr({props:{$$slots:{default:[L8t]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L87"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new yDr({props:{$$slots:{default:[$8t]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L254"}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L725"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Ou=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L732"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Xu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),R_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L747"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),B_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L754"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ab=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),oL=new oe({}),rL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L761"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),sL=new oe({}),lL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L770"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),fL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L804"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Z2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),uL=new oe({}),_L=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L811"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L797"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L779"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),kL=new oe({}),SL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L786"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),IL=new oe({}),qL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L820"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L859"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L866"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L889"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),r8=new oe({}),t8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L873"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),l8=new oe({}),i8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L880"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L898"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),o3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L905"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),t3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L852"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),x8=new oe({}),$8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L827"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),P8=new oe({}),B8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L834"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L843"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),Ix=new oe({}),qx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),Wx=new oe({}),Qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),e7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),r7=new oe({}),t7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),n7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),l7=new oe({}),i7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),c7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),m7=new oe({}),g7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),p7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[e7t]},$$scope:{ctx:L}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[o7t]},$$scope:{ctx:L}}}),_7=new oe({}),b7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),F7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[r7t]},$$scope:{ctx:L}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[t7t]},$$scope:{ctx:L}}}),M7=new oe({}),E7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),w7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[a7t]},$$scope:{ctx:L}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[n7t]},$$scope:{ctx:L}}}),y7=new oe({}),L7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),$7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[s7t]},$$scope:{ctx:L}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[l7t]},$$scope:{ctx:L}}}),S7=new oe({}),R7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),B7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[i7t]},$$scope:{ctx:L}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[d7t]},$$scope:{ctx:L}}}),q7=new oe({}),N7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),D7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[c7t]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[f7t]},$$scope:{ctx:L}}}),O7=new oe({}),V7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[m7t]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[g7t]},$$scope:{ctx:L}}}),Q7=new oe({}),H7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),J7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[h7t]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[p7t]},$$scope:{ctx:L}}}),K7=new oe({}),Z7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),o9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[u7t]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_7t]},$$scope:{ctx:L}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),s9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[b7t]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[v7t]},$$scope:{ctx:L}}}),d9=new oe({}),c9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),m9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[F7t]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[T7t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),ny=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),sy=o("AutoConfig"),Ln=o(", "),xn=a("a"),ly=o("AutoModel"),hi=o(`, and
`),$n=a("a"),iy=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),A$=o("will create a model that is an instance of "),ui=a("a"),y$=o("BertModel"),L$=o("."),Eo=l(),wa=a("p"),x$=o("There is one class of "),_f=a("code"),$$=o("AutoModel"),XDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RIe=l(),_i=a("h2"),bf=a("a"),Mee=a("span"),F(dy.$$.fragment),zDe=l(),Eee=a("span"),WDe=o("Extending the Auto Classes"),PIe=l(),kn=a("p"),QDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cee=a("code"),HDe=o("NewModel"),UDe=o(", make sure you have a "),wee=a("code"),JDe=o("NewModelConfig"),YDe=o(` then you can add those to the auto
classes like this:`),BIe=l(),F(cy.$$.fragment),IIe=l(),k$=a("p"),KDe=o("You will then be able to use the auto classes like you would usually do!"),qIe=l(),F(vf.$$.fragment),NIe=l(),bi=a("h2"),Ff=a("a"),Aee=a("span"),F(fy.$$.fragment),ZDe=l(),yee=a("span"),eGe=o("AutoConfig"),jIe=l(),Co=a("div"),F(my.$$.fragment),oGe=l(),gy=a("p"),rGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),S$=a("a"),tGe=o("from_pretrained()"),aGe=o(" class method."),nGe=l(),hy=a("p"),sGe=o("This class cannot be instantiated directly using "),Lee=a("code"),lGe=o("__init__()"),iGe=o(" (throws an error)."),dGe=l(),Er=a("div"),F(py.$$.fragment),cGe=l(),xee=a("p"),fGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mGe=l(),vi=a("p"),gGe=o("The configuration class to instantiate is selected based on the "),$ee=a("code"),hGe=o("model_type"),pGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kee=a("code"),uGe=o("pretrained_model_name_or_path"),_Ge=o(":"),bGe=l(),A=a("ul"),Tf=a("li"),See=a("strong"),vGe=o("albert"),FGe=o(" \u2014 "),R$=a("a"),TGe=o("AlbertConfig"),MGe=o(" (ALBERT model)"),EGe=l(),Mf=a("li"),Ree=a("strong"),CGe=o("bart"),wGe=o(" \u2014 "),P$=a("a"),AGe=o("BartConfig"),yGe=o(" (BART model)"),LGe=l(),Ef=a("li"),Pee=a("strong"),xGe=o("beit"),$Ge=o(" \u2014 "),B$=a("a"),kGe=o("BeitConfig"),SGe=o(" (BEiT model)"),RGe=l(),Cf=a("li"),Bee=a("strong"),PGe=o("bert"),BGe=o(" \u2014 "),I$=a("a"),IGe=o("BertConfig"),qGe=o(" (BERT model)"),NGe=l(),wf=a("li"),Iee=a("strong"),jGe=o("bert-generation"),DGe=o(" \u2014 "),q$=a("a"),GGe=o("BertGenerationConfig"),OGe=o(" (Bert Generation model)"),VGe=l(),Af=a("li"),qee=a("strong"),XGe=o("big_bird"),zGe=o(" \u2014 "),N$=a("a"),WGe=o("BigBirdConfig"),QGe=o(" (BigBird model)"),HGe=l(),yf=a("li"),Nee=a("strong"),UGe=o("bigbird_pegasus"),JGe=o(" \u2014 "),j$=a("a"),YGe=o("BigBirdPegasusConfig"),KGe=o(" (BigBirdPegasus model)"),ZGe=l(),Lf=a("li"),jee=a("strong"),eOe=o("blenderbot"),oOe=o(" \u2014 "),D$=a("a"),rOe=o("BlenderbotConfig"),tOe=o(" (Blenderbot model)"),aOe=l(),xf=a("li"),Dee=a("strong"),nOe=o("blenderbot-small"),sOe=o(" \u2014 "),G$=a("a"),lOe=o("BlenderbotSmallConfig"),iOe=o(" (BlenderbotSmall model)"),dOe=l(),$f=a("li"),Gee=a("strong"),cOe=o("camembert"),fOe=o(" \u2014 "),O$=a("a"),mOe=o("CamembertConfig"),gOe=o(" (CamemBERT model)"),hOe=l(),kf=a("li"),Oee=a("strong"),pOe=o("canine"),uOe=o(" \u2014 "),V$=a("a"),_Oe=o("CanineConfig"),bOe=o(" (Canine model)"),vOe=l(),Sf=a("li"),Vee=a("strong"),FOe=o("clip"),TOe=o(" \u2014 "),X$=a("a"),MOe=o("CLIPConfig"),EOe=o(" (CLIP model)"),COe=l(),Rf=a("li"),Xee=a("strong"),wOe=o("convbert"),AOe=o(" \u2014 "),z$=a("a"),yOe=o("ConvBertConfig"),LOe=o(" (ConvBERT model)"),xOe=l(),Pf=a("li"),zee=a("strong"),$Oe=o("convnext"),kOe=o(" \u2014 "),W$=a("a"),SOe=o("ConvNextConfig"),ROe=o(" (ConvNext model)"),POe=l(),Bf=a("li"),Wee=a("strong"),BOe=o("ctrl"),IOe=o(" \u2014 "),Q$=a("a"),qOe=o("CTRLConfig"),NOe=o(" (CTRL model)"),jOe=l(),If=a("li"),Qee=a("strong"),DOe=o("data2vec-audio"),GOe=o(" \u2014 "),H$=a("a"),OOe=o("Data2VecAudioConfig"),VOe=o(" (Data2VecAudio model)"),XOe=l(),qf=a("li"),Hee=a("strong"),zOe=o("data2vec-text"),WOe=o(" \u2014 "),U$=a("a"),QOe=o("Data2VecTextConfig"),HOe=o(" (Data2VecText model)"),UOe=l(),Nf=a("li"),Uee=a("strong"),JOe=o("data2vec-vision"),YOe=o(" \u2014 "),J$=a("a"),KOe=o("Data2VecVisionConfig"),ZOe=o(" (Data2VecVision model)"),eVe=l(),jf=a("li"),Jee=a("strong"),oVe=o("deberta"),rVe=o(" \u2014 "),Y$=a("a"),tVe=o("DebertaConfig"),aVe=o(" (DeBERTa model)"),nVe=l(),Df=a("li"),Yee=a("strong"),sVe=o("deberta-v2"),lVe=o(" \u2014 "),K$=a("a"),iVe=o("DebertaV2Config"),dVe=o(" (DeBERTa-v2 model)"),cVe=l(),Gf=a("li"),Kee=a("strong"),fVe=o("decision_transformer"),mVe=o(" \u2014 "),Z$=a("a"),gVe=o("DecisionTransformerConfig"),hVe=o(" (Decision Transformer model)"),pVe=l(),Of=a("li"),Zee=a("strong"),uVe=o("deit"),_Ve=o(" \u2014 "),ek=a("a"),bVe=o("DeiTConfig"),vVe=o(" (DeiT model)"),FVe=l(),Vf=a("li"),eoe=a("strong"),TVe=o("detr"),MVe=o(" \u2014 "),ok=a("a"),EVe=o("DetrConfig"),CVe=o(" (DETR model)"),wVe=l(),Xf=a("li"),ooe=a("strong"),AVe=o("distilbert"),yVe=o(" \u2014 "),rk=a("a"),LVe=o("DistilBertConfig"),xVe=o(" (DistilBERT model)"),$Ve=l(),zf=a("li"),roe=a("strong"),kVe=o("dpr"),SVe=o(" \u2014 "),tk=a("a"),RVe=o("DPRConfig"),PVe=o(" (DPR model)"),BVe=l(),Wf=a("li"),toe=a("strong"),IVe=o("dpt"),qVe=o(" \u2014 "),ak=a("a"),NVe=o("DPTConfig"),jVe=o(" (DPT model)"),DVe=l(),Qf=a("li"),aoe=a("strong"),GVe=o("electra"),OVe=o(" \u2014 "),nk=a("a"),VVe=o("ElectraConfig"),XVe=o(" (ELECTRA model)"),zVe=l(),Hf=a("li"),noe=a("strong"),WVe=o("encoder-decoder"),QVe=o(" \u2014 "),sk=a("a"),HVe=o("EncoderDecoderConfig"),UVe=o(" (Encoder decoder model)"),JVe=l(),Uf=a("li"),soe=a("strong"),YVe=o("flaubert"),KVe=o(" \u2014 "),lk=a("a"),ZVe=o("FlaubertConfig"),eXe=o(" (FlauBERT model)"),oXe=l(),Jf=a("li"),loe=a("strong"),rXe=o("flava"),tXe=o(" \u2014 "),ik=a("a"),aXe=o("FlavaConfig"),nXe=o(" (Flava model)"),sXe=l(),Yf=a("li"),ioe=a("strong"),lXe=o("fnet"),iXe=o(" \u2014 "),dk=a("a"),dXe=o("FNetConfig"),cXe=o(" (FNet model)"),fXe=l(),Kf=a("li"),doe=a("strong"),mXe=o("fsmt"),gXe=o(" \u2014 "),ck=a("a"),hXe=o("FSMTConfig"),pXe=o(" (FairSeq Machine-Translation model)"),uXe=l(),Zf=a("li"),coe=a("strong"),_Xe=o("funnel"),bXe=o(" \u2014 "),fk=a("a"),vXe=o("FunnelConfig"),FXe=o(" (Funnel Transformer model)"),TXe=l(),em=a("li"),foe=a("strong"),MXe=o("glpn"),EXe=o(" \u2014 "),mk=a("a"),CXe=o("GLPNConfig"),wXe=o(" (GLPN model)"),AXe=l(),om=a("li"),moe=a("strong"),yXe=o("gpt2"),LXe=o(" \u2014 "),gk=a("a"),xXe=o("GPT2Config"),$Xe=o(" (OpenAI GPT-2 model)"),kXe=l(),rm=a("li"),goe=a("strong"),SXe=o("gpt_neo"),RXe=o(" \u2014 "),hk=a("a"),PXe=o("GPTNeoConfig"),BXe=o(" (GPT Neo model)"),IXe=l(),tm=a("li"),hoe=a("strong"),qXe=o("gptj"),NXe=o(" \u2014 "),pk=a("a"),jXe=o("GPTJConfig"),DXe=o(" (GPT-J model)"),GXe=l(),am=a("li"),poe=a("strong"),OXe=o("hubert"),VXe=o(" \u2014 "),uk=a("a"),XXe=o("HubertConfig"),zXe=o(" (Hubert model)"),WXe=l(),nm=a("li"),uoe=a("strong"),QXe=o("ibert"),HXe=o(" \u2014 "),_k=a("a"),UXe=o("IBertConfig"),JXe=o(" (I-BERT model)"),YXe=l(),sm=a("li"),_oe=a("strong"),KXe=o("imagegpt"),ZXe=o(" \u2014 "),bk=a("a"),eze=o("ImageGPTConfig"),oze=o(" (ImageGPT model)"),rze=l(),lm=a("li"),boe=a("strong"),tze=o("layoutlm"),aze=o(" \u2014 "),vk=a("a"),nze=o("LayoutLMConfig"),sze=o(" (LayoutLM model)"),lze=l(),im=a("li"),voe=a("strong"),ize=o("layoutlmv2"),dze=o(" \u2014 "),Fk=a("a"),cze=o("LayoutLMv2Config"),fze=o(" (LayoutLMv2 model)"),mze=l(),dm=a("li"),Foe=a("strong"),gze=o("led"),hze=o(" \u2014 "),Tk=a("a"),pze=o("LEDConfig"),uze=o(" (LED model)"),_ze=l(),cm=a("li"),Toe=a("strong"),bze=o("longformer"),vze=o(" \u2014 "),Mk=a("a"),Fze=o("LongformerConfig"),Tze=o(" (Longformer model)"),Mze=l(),fm=a("li"),Moe=a("strong"),Eze=o("luke"),Cze=o(" \u2014 "),Ek=a("a"),wze=o("LukeConfig"),Aze=o(" (LUKE model)"),yze=l(),mm=a("li"),Eoe=a("strong"),Lze=o("lxmert"),xze=o(" \u2014 "),Ck=a("a"),$ze=o("LxmertConfig"),kze=o(" (LXMERT model)"),Sze=l(),gm=a("li"),Coe=a("strong"),Rze=o("m2m_100"),Pze=o(" \u2014 "),wk=a("a"),Bze=o("M2M100Config"),Ize=o(" (M2M100 model)"),qze=l(),hm=a("li"),woe=a("strong"),Nze=o("marian"),jze=o(" \u2014 "),Ak=a("a"),Dze=o("MarianConfig"),Gze=o(" (Marian model)"),Oze=l(),pm=a("li"),Aoe=a("strong"),Vze=o("maskformer"),Xze=o(" \u2014 "),yk=a("a"),zze=o("MaskFormerConfig"),Wze=o(" (MaskFormer model)"),Qze=l(),um=a("li"),yoe=a("strong"),Hze=o("mbart"),Uze=o(" \u2014 "),Lk=a("a"),Jze=o("MBartConfig"),Yze=o(" (mBART model)"),Kze=l(),_m=a("li"),Loe=a("strong"),Zze=o("megatron-bert"),eWe=o(" \u2014 "),xk=a("a"),oWe=o("MegatronBertConfig"),rWe=o(" (MegatronBert model)"),tWe=l(),bm=a("li"),xoe=a("strong"),aWe=o("mobilebert"),nWe=o(" \u2014 "),$k=a("a"),sWe=o("MobileBertConfig"),lWe=o(" (MobileBERT model)"),iWe=l(),vm=a("li"),$oe=a("strong"),dWe=o("mpnet"),cWe=o(" \u2014 "),kk=a("a"),fWe=o("MPNetConfig"),mWe=o(" (MPNet model)"),gWe=l(),Fm=a("li"),koe=a("strong"),hWe=o("mt5"),pWe=o(" \u2014 "),Sk=a("a"),uWe=o("MT5Config"),_We=o(" (mT5 model)"),bWe=l(),Tm=a("li"),Soe=a("strong"),vWe=o("nystromformer"),FWe=o(" \u2014 "),Rk=a("a"),TWe=o("NystromformerConfig"),MWe=o(" (Nystromformer model)"),EWe=l(),Mm=a("li"),Roe=a("strong"),CWe=o("openai-gpt"),wWe=o(" \u2014 "),Pk=a("a"),AWe=o("OpenAIGPTConfig"),yWe=o(" (OpenAI GPT model)"),LWe=l(),Em=a("li"),Poe=a("strong"),xWe=o("opt"),$We=o(" \u2014 "),Bk=a("a"),kWe=o("OPTConfig"),SWe=o(" (OPT model)"),RWe=l(),Cm=a("li"),Boe=a("strong"),PWe=o("pegasus"),BWe=o(" \u2014 "),Ik=a("a"),IWe=o("PegasusConfig"),qWe=o(" (Pegasus model)"),NWe=l(),wm=a("li"),Ioe=a("strong"),jWe=o("perceiver"),DWe=o(" \u2014 "),qk=a("a"),GWe=o("PerceiverConfig"),OWe=o(" (Perceiver model)"),VWe=l(),Am=a("li"),qoe=a("strong"),XWe=o("plbart"),zWe=o(" \u2014 "),Nk=a("a"),WWe=o("PLBartConfig"),QWe=o(" (PLBart model)"),HWe=l(),ym=a("li"),Noe=a("strong"),UWe=o("poolformer"),JWe=o(" \u2014 "),jk=a("a"),YWe=o("PoolFormerConfig"),KWe=o(" (PoolFormer model)"),ZWe=l(),Lm=a("li"),joe=a("strong"),eQe=o("prophetnet"),oQe=o(" \u2014 "),Dk=a("a"),rQe=o("ProphetNetConfig"),tQe=o(" (ProphetNet model)"),aQe=l(),xm=a("li"),Doe=a("strong"),nQe=o("qdqbert"),sQe=o(" \u2014 "),Gk=a("a"),lQe=o("QDQBertConfig"),iQe=o(" (QDQBert model)"),dQe=l(),$m=a("li"),Goe=a("strong"),cQe=o("rag"),fQe=o(" \u2014 "),Ok=a("a"),mQe=o("RagConfig"),gQe=o(" (RAG model)"),hQe=l(),km=a("li"),Ooe=a("strong"),pQe=o("realm"),uQe=o(" \u2014 "),Vk=a("a"),_Qe=o("RealmConfig"),bQe=o(" (Realm model)"),vQe=l(),Sm=a("li"),Voe=a("strong"),FQe=o("reformer"),TQe=o(" \u2014 "),Xk=a("a"),MQe=o("ReformerConfig"),EQe=o(" (Reformer model)"),CQe=l(),Rm=a("li"),Xoe=a("strong"),wQe=o("regnet"),AQe=o(" \u2014 "),zk=a("a"),yQe=o("RegNetConfig"),LQe=o(" (RegNet model)"),xQe=l(),Pm=a("li"),zoe=a("strong"),$Qe=o("rembert"),kQe=o(" \u2014 "),Wk=a("a"),SQe=o("RemBertConfig"),RQe=o(" (RemBERT model)"),PQe=l(),Bm=a("li"),Woe=a("strong"),BQe=o("resnet"),IQe=o(" \u2014 "),Qk=a("a"),qQe=o("ResNetConfig"),NQe=o(" (ResNet model)"),jQe=l(),Im=a("li"),Qoe=a("strong"),DQe=o("retribert"),GQe=o(" \u2014 "),Hk=a("a"),OQe=o("RetriBertConfig"),VQe=o(" (RetriBERT model)"),XQe=l(),qm=a("li"),Hoe=a("strong"),zQe=o("roberta"),WQe=o(" \u2014 "),Uk=a("a"),QQe=o("RobertaConfig"),HQe=o(" (RoBERTa model)"),UQe=l(),Nm=a("li"),Uoe=a("strong"),JQe=o("roformer"),YQe=o(" \u2014 "),Jk=a("a"),KQe=o("RoFormerConfig"),ZQe=o(" (RoFormer model)"),eHe=l(),jm=a("li"),Joe=a("strong"),oHe=o("segformer"),rHe=o(" \u2014 "),Yk=a("a"),tHe=o("SegformerConfig"),aHe=o(" (SegFormer model)"),nHe=l(),Dm=a("li"),Yoe=a("strong"),sHe=o("sew"),lHe=o(" \u2014 "),Kk=a("a"),iHe=o("SEWConfig"),dHe=o(" (SEW model)"),cHe=l(),Gm=a("li"),Koe=a("strong"),fHe=o("sew-d"),mHe=o(" \u2014 "),Zk=a("a"),gHe=o("SEWDConfig"),hHe=o(" (SEW-D model)"),pHe=l(),Om=a("li"),Zoe=a("strong"),uHe=o("speech-encoder-decoder"),_He=o(" \u2014 "),eS=a("a"),bHe=o("SpeechEncoderDecoderConfig"),vHe=o(" (Speech Encoder decoder model)"),FHe=l(),Vm=a("li"),ere=a("strong"),THe=o("speech_to_text"),MHe=o(" \u2014 "),oS=a("a"),EHe=o("Speech2TextConfig"),CHe=o(" (Speech2Text model)"),wHe=l(),Xm=a("li"),ore=a("strong"),AHe=o("speech_to_text_2"),yHe=o(" \u2014 "),rS=a("a"),LHe=o("Speech2Text2Config"),xHe=o(" (Speech2Text2 model)"),$He=l(),zm=a("li"),rre=a("strong"),kHe=o("splinter"),SHe=o(" \u2014 "),tS=a("a"),RHe=o("SplinterConfig"),PHe=o(" (Splinter model)"),BHe=l(),Wm=a("li"),tre=a("strong"),IHe=o("squeezebert"),qHe=o(" \u2014 "),aS=a("a"),NHe=o("SqueezeBertConfig"),jHe=o(" (SqueezeBERT model)"),DHe=l(),Qm=a("li"),are=a("strong"),GHe=o("swin"),OHe=o(" \u2014 "),nS=a("a"),VHe=o("SwinConfig"),XHe=o(" (Swin model)"),zHe=l(),Hm=a("li"),nre=a("strong"),WHe=o("t5"),QHe=o(" \u2014 "),sS=a("a"),HHe=o("T5Config"),UHe=o(" (T5 model)"),JHe=l(),Um=a("li"),sre=a("strong"),YHe=o("tapas"),KHe=o(" \u2014 "),lS=a("a"),ZHe=o("TapasConfig"),eUe=o(" (TAPAS model)"),oUe=l(),Jm=a("li"),lre=a("strong"),rUe=o("transfo-xl"),tUe=o(" \u2014 "),iS=a("a"),aUe=o("TransfoXLConfig"),nUe=o(" (Transformer-XL model)"),sUe=l(),Ym=a("li"),ire=a("strong"),lUe=o("trocr"),iUe=o(" \u2014 "),dS=a("a"),dUe=o("TrOCRConfig"),cUe=o(" (TrOCR model)"),fUe=l(),Km=a("li"),dre=a("strong"),mUe=o("unispeech"),gUe=o(" \u2014 "),cS=a("a"),hUe=o("UniSpeechConfig"),pUe=o(" (UniSpeech model)"),uUe=l(),Zm=a("li"),cre=a("strong"),_Ue=o("unispeech-sat"),bUe=o(" \u2014 "),fS=a("a"),vUe=o("UniSpeechSatConfig"),FUe=o(" (UniSpeechSat model)"),TUe=l(),eg=a("li"),fre=a("strong"),MUe=o("van"),EUe=o(" \u2014 "),mS=a("a"),CUe=o("VanConfig"),wUe=o(" (VAN model)"),AUe=l(),og=a("li"),mre=a("strong"),yUe=o("vilt"),LUe=o(" \u2014 "),gS=a("a"),xUe=o("ViltConfig"),$Ue=o(" (ViLT model)"),kUe=l(),rg=a("li"),gre=a("strong"),SUe=o("vision-encoder-decoder"),RUe=o(" \u2014 "),hS=a("a"),PUe=o("VisionEncoderDecoderConfig"),BUe=o(" (Vision Encoder decoder model)"),IUe=l(),tg=a("li"),hre=a("strong"),qUe=o("vision-text-dual-encoder"),NUe=o(" \u2014 "),pS=a("a"),jUe=o("VisionTextDualEncoderConfig"),DUe=o(" (VisionTextDualEncoder model)"),GUe=l(),ag=a("li"),pre=a("strong"),OUe=o("visual_bert"),VUe=o(" \u2014 "),uS=a("a"),XUe=o("VisualBertConfig"),zUe=o(" (VisualBert model)"),WUe=l(),ng=a("li"),ure=a("strong"),QUe=o("vit"),HUe=o(" \u2014 "),_S=a("a"),UUe=o("ViTConfig"),JUe=o(" (ViT model)"),YUe=l(),sg=a("li"),_re=a("strong"),KUe=o("vit_mae"),ZUe=o(" \u2014 "),bS=a("a"),eJe=o("ViTMAEConfig"),oJe=o(" (ViTMAE model)"),rJe=l(),lg=a("li"),bre=a("strong"),tJe=o("wav2vec2"),aJe=o(" \u2014 "),vS=a("a"),nJe=o("Wav2Vec2Config"),sJe=o(" (Wav2Vec2 model)"),lJe=l(),ig=a("li"),vre=a("strong"),iJe=o("wav2vec2-conformer"),dJe=o(" \u2014 "),FS=a("a"),cJe=o("Wav2Vec2ConformerConfig"),fJe=o(" (Wav2Vec2-Conformer model)"),mJe=l(),dg=a("li"),Fre=a("strong"),gJe=o("wavlm"),hJe=o(" \u2014 "),TS=a("a"),pJe=o("WavLMConfig"),uJe=o(" (WavLM model)"),_Je=l(),cg=a("li"),Tre=a("strong"),bJe=o("xglm"),vJe=o(" \u2014 "),MS=a("a"),FJe=o("XGLMConfig"),TJe=o(" (XGLM model)"),MJe=l(),fg=a("li"),Mre=a("strong"),EJe=o("xlm"),CJe=o(" \u2014 "),ES=a("a"),wJe=o("XLMConfig"),AJe=o(" (XLM model)"),yJe=l(),mg=a("li"),Ere=a("strong"),LJe=o("xlm-prophetnet"),xJe=o(" \u2014 "),CS=a("a"),$Je=o("XLMProphetNetConfig"),kJe=o(" (XLMProphetNet model)"),SJe=l(),gg=a("li"),Cre=a("strong"),RJe=o("xlm-roberta"),PJe=o(" \u2014 "),wS=a("a"),BJe=o("XLMRobertaConfig"),IJe=o(" (XLM-RoBERTa model)"),qJe=l(),hg=a("li"),wre=a("strong"),NJe=o("xlm-roberta-xl"),jJe=o(" \u2014 "),AS=a("a"),DJe=o("XLMRobertaXLConfig"),GJe=o(" (XLM-RoBERTa-XL model)"),OJe=l(),pg=a("li"),Are=a("strong"),VJe=o("xlnet"),XJe=o(" \u2014 "),yS=a("a"),zJe=o("XLNetConfig"),WJe=o(" (XLNet model)"),QJe=l(),ug=a("li"),yre=a("strong"),HJe=o("yolos"),UJe=o(" \u2014 "),LS=a("a"),JJe=o("YolosConfig"),YJe=o(" (YOLOS model)"),KJe=l(),_g=a("li"),Lre=a("strong"),ZJe=o("yoso"),eYe=o(" \u2014 "),xS=a("a"),oYe=o("YosoConfig"),rYe=o(" (YOSO model)"),tYe=l(),F(bg.$$.fragment),aYe=l(),vg=a("div"),F(uy.$$.fragment),nYe=l(),xre=a("p"),sYe=o("Register a new configuration for this class."),DIe=l(),Fi=a("h2"),Fg=a("a"),$re=a("span"),F(_y.$$.fragment),lYe=l(),kre=a("span"),iYe=o("AutoTokenizer"),GIe=l(),wo=a("div"),F(by.$$.fragment),dYe=l(),vy=a("p"),cYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$S=a("a"),fYe=o("AutoTokenizer.from_pretrained()"),mYe=o(" class method."),gYe=l(),Fy=a("p"),hYe=o("This class cannot be instantiated directly using "),Sre=a("code"),pYe=o("__init__()"),uYe=o(" (throws an error)."),_Ye=l(),Cr=a("div"),F(Ty.$$.fragment),bYe=l(),Rre=a("p"),vYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FYe=l(),Aa=a("p"),TYe=o("The tokenizer class to instantiate is selected based on the "),Pre=a("code"),MYe=o("model_type"),EYe=o(` property of the config object (either
passed as an argument or loaded from `),Bre=a("code"),CYe=o("pretrained_model_name_or_path"),wYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=a("code"),AYe=o("pretrained_model_name_or_path"),yYe=o(":"),LYe=l(),k=a("ul"),Sn=a("li"),qre=a("strong"),xYe=o("albert"),$Ye=o(" \u2014 "),kS=a("a"),kYe=o("AlbertTokenizer"),SYe=o(" or "),SS=a("a"),RYe=o("AlbertTokenizerFast"),PYe=o(" (ALBERT model)"),BYe=l(),Rn=a("li"),Nre=a("strong"),IYe=o("bart"),qYe=o(" \u2014 "),RS=a("a"),NYe=o("BartTokenizer"),jYe=o(" or "),PS=a("a"),DYe=o("BartTokenizerFast"),GYe=o(" (BART model)"),OYe=l(),Pn=a("li"),jre=a("strong"),VYe=o("barthez"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("BarthezTokenizer"),WYe=o(" or "),IS=a("a"),QYe=o("BarthezTokenizerFast"),HYe=o(" (BARThez model)"),UYe=l(),Tg=a("li"),Dre=a("strong"),JYe=o("bartpho"),YYe=o(" \u2014 "),qS=a("a"),KYe=o("BartphoTokenizer"),ZYe=o(" (BARTpho model)"),eKe=l(),Bn=a("li"),Gre=a("strong"),oKe=o("bert"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("BertTokenizer"),aKe=o(" or "),jS=a("a"),nKe=o("BertTokenizerFast"),sKe=o(" (BERT model)"),lKe=l(),Mg=a("li"),Ore=a("strong"),iKe=o("bert-generation"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("BertGenerationTokenizer"),fKe=o(" (Bert Generation model)"),mKe=l(),Eg=a("li"),Vre=a("strong"),gKe=o("bert-japanese"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("BertJapaneseTokenizer"),uKe=o(" (BertJapanese model)"),_Ke=l(),Cg=a("li"),Xre=a("strong"),bKe=o("bertweet"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("BertweetTokenizer"),TKe=o(" (Bertweet model)"),MKe=l(),In=a("li"),zre=a("strong"),EKe=o("big_bird"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("BigBirdTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("BigBirdTokenizerFast"),LKe=o(" (BigBird model)"),xKe=l(),qn=a("li"),Wre=a("strong"),$Ke=o("bigbird_pegasus"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("PegasusTokenizer"),RKe=o(" or "),WS=a("a"),PKe=o("PegasusTokenizerFast"),BKe=o(" (BigBirdPegasus model)"),IKe=l(),Nn=a("li"),Qre=a("strong"),qKe=o("blenderbot"),NKe=o(" \u2014 "),QS=a("a"),jKe=o("BlenderbotTokenizer"),DKe=o(" or "),HS=a("a"),GKe=o("BlenderbotTokenizerFast"),OKe=o(" (Blenderbot model)"),VKe=l(),wg=a("li"),Hre=a("strong"),XKe=o("blenderbot-small"),zKe=o(" \u2014 "),US=a("a"),WKe=o("BlenderbotSmallTokenizer"),QKe=o(" (BlenderbotSmall model)"),HKe=l(),Ag=a("li"),Ure=a("strong"),UKe=o("byt5"),JKe=o(" \u2014 "),JS=a("a"),YKe=o("ByT5Tokenizer"),KKe=o(" (ByT5 model)"),ZKe=l(),jn=a("li"),Jre=a("strong"),eZe=o("camembert"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("CamembertTokenizer"),tZe=o(" or "),KS=a("a"),aZe=o("CamembertTokenizerFast"),nZe=o(" (CamemBERT model)"),sZe=l(),yg=a("li"),Yre=a("strong"),lZe=o("canine"),iZe=o(" \u2014 "),ZS=a("a"),dZe=o("CanineTokenizer"),cZe=o(" (Canine model)"),fZe=l(),Dn=a("li"),Kre=a("strong"),mZe=o("clip"),gZe=o(" \u2014 "),eR=a("a"),hZe=o("CLIPTokenizer"),pZe=o(" or "),oR=a("a"),uZe=o("CLIPTokenizerFast"),_Ze=o(" (CLIP model)"),bZe=l(),Gn=a("li"),Zre=a("strong"),vZe=o("convbert"),FZe=o(" \u2014 "),rR=a("a"),TZe=o("ConvBertTokenizer"),MZe=o(" or "),tR=a("a"),EZe=o("ConvBertTokenizerFast"),CZe=o(" (ConvBERT model)"),wZe=l(),On=a("li"),ete=a("strong"),AZe=o("cpm"),yZe=o(" \u2014 "),aR=a("a"),LZe=o("CpmTokenizer"),xZe=o(" or "),nR=a("a"),$Ze=o("CpmTokenizerFast"),kZe=o(" (CPM model)"),SZe=l(),Lg=a("li"),ote=a("strong"),RZe=o("ctrl"),PZe=o(" \u2014 "),sR=a("a"),BZe=o("CTRLTokenizer"),IZe=o(" (CTRL model)"),qZe=l(),Vn=a("li"),rte=a("strong"),NZe=o("data2vec-text"),jZe=o(" \u2014 "),lR=a("a"),DZe=o("RobertaTokenizer"),GZe=o(" or "),iR=a("a"),OZe=o("RobertaTokenizerFast"),VZe=o(" (Data2VecText model)"),XZe=l(),Xn=a("li"),tte=a("strong"),zZe=o("deberta"),WZe=o(" \u2014 "),dR=a("a"),QZe=o("DebertaTokenizer"),HZe=o(" or "),cR=a("a"),UZe=o("DebertaTokenizerFast"),JZe=o(" (DeBERTa model)"),YZe=l(),zn=a("li"),ate=a("strong"),KZe=o("deberta-v2"),ZZe=o(" \u2014 "),fR=a("a"),eeo=o("DebertaV2Tokenizer"),oeo=o(" or "),mR=a("a"),reo=o("DebertaV2TokenizerFast"),teo=o(" (DeBERTa-v2 model)"),aeo=l(),Wn=a("li"),nte=a("strong"),neo=o("distilbert"),seo=o(" \u2014 "),gR=a("a"),leo=o("DistilBertTokenizer"),ieo=o(" or "),hR=a("a"),deo=o("DistilBertTokenizerFast"),ceo=o(" (DistilBERT model)"),feo=l(),Qn=a("li"),ste=a("strong"),meo=o("dpr"),geo=o(" \u2014 "),pR=a("a"),heo=o("DPRQuestionEncoderTokenizer"),peo=o(" or "),uR=a("a"),ueo=o("DPRQuestionEncoderTokenizerFast"),_eo=o(" (DPR model)"),beo=l(),Hn=a("li"),lte=a("strong"),veo=o("electra"),Feo=o(" \u2014 "),_R=a("a"),Teo=o("ElectraTokenizer"),Meo=o(" or "),bR=a("a"),Eeo=o("ElectraTokenizerFast"),Ceo=o(" (ELECTRA model)"),weo=l(),xg=a("li"),ite=a("strong"),Aeo=o("flaubert"),yeo=o(" \u2014 "),vR=a("a"),Leo=o("FlaubertTokenizer"),xeo=o(" (FlauBERT model)"),$eo=l(),Un=a("li"),dte=a("strong"),keo=o("fnet"),Seo=o(" \u2014 "),FR=a("a"),Reo=o("FNetTokenizer"),Peo=o(" or "),TR=a("a"),Beo=o("FNetTokenizerFast"),Ieo=o(" (FNet model)"),qeo=l(),$g=a("li"),cte=a("strong"),Neo=o("fsmt"),jeo=o(" \u2014 "),MR=a("a"),Deo=o("FSMTTokenizer"),Geo=o(" (FairSeq Machine-Translation model)"),Oeo=l(),Jn=a("li"),fte=a("strong"),Veo=o("funnel"),Xeo=o(" \u2014 "),ER=a("a"),zeo=o("FunnelTokenizer"),Weo=o(" or "),CR=a("a"),Qeo=o("FunnelTokenizerFast"),Heo=o(" (Funnel Transformer model)"),Ueo=l(),Yn=a("li"),mte=a("strong"),Jeo=o("gpt2"),Yeo=o(" \u2014 "),wR=a("a"),Keo=o("GPT2Tokenizer"),Zeo=o(" or "),AR=a("a"),eoo=o("GPT2TokenizerFast"),ooo=o(" (OpenAI GPT-2 model)"),roo=l(),Kn=a("li"),gte=a("strong"),too=o("gpt_neo"),aoo=o(" \u2014 "),yR=a("a"),noo=o("GPT2Tokenizer"),soo=o(" or "),LR=a("a"),loo=o("GPT2TokenizerFast"),ioo=o(" (GPT Neo model)"),doo=l(),Zn=a("li"),hte=a("strong"),coo=o("gptj"),foo=o(" \u2014 "),xR=a("a"),moo=o("GPT2Tokenizer"),goo=o(" or "),$R=a("a"),hoo=o("GPT2TokenizerFast"),poo=o(" (GPT-J model)"),uoo=l(),es=a("li"),pte=a("strong"),_oo=o("herbert"),boo=o(" \u2014 "),kR=a("a"),voo=o("HerbertTokenizer"),Foo=o(" or "),SR=a("a"),Too=o("HerbertTokenizerFast"),Moo=o(" (HerBERT model)"),Eoo=l(),kg=a("li"),ute=a("strong"),Coo=o("hubert"),woo=o(" \u2014 "),RR=a("a"),Aoo=o("Wav2Vec2CTCTokenizer"),yoo=o(" (Hubert model)"),Loo=l(),os=a("li"),_te=a("strong"),xoo=o("ibert"),$oo=o(" \u2014 "),PR=a("a"),koo=o("RobertaTokenizer"),Soo=o(" or "),BR=a("a"),Roo=o("RobertaTokenizerFast"),Poo=o(" (I-BERT model)"),Boo=l(),rs=a("li"),bte=a("strong"),Ioo=o("layoutlm"),qoo=o(" \u2014 "),IR=a("a"),Noo=o("LayoutLMTokenizer"),joo=o(" or "),qR=a("a"),Doo=o("LayoutLMTokenizerFast"),Goo=o(" (LayoutLM model)"),Ooo=l(),ts=a("li"),vte=a("strong"),Voo=o("layoutlmv2"),Xoo=o(" \u2014 "),NR=a("a"),zoo=o("LayoutLMv2Tokenizer"),Woo=o(" or "),jR=a("a"),Qoo=o("LayoutLMv2TokenizerFast"),Hoo=o(" (LayoutLMv2 model)"),Uoo=l(),as=a("li"),Fte=a("strong"),Joo=o("layoutxlm"),Yoo=o(" \u2014 "),DR=a("a"),Koo=o("LayoutXLMTokenizer"),Zoo=o(" or "),GR=a("a"),ero=o("LayoutXLMTokenizerFast"),oro=o(" (LayoutXLM model)"),rro=l(),ns=a("li"),Tte=a("strong"),tro=o("led"),aro=o(" \u2014 "),OR=a("a"),nro=o("LEDTokenizer"),sro=o(" or "),VR=a("a"),lro=o("LEDTokenizerFast"),iro=o(" (LED model)"),dro=l(),ss=a("li"),Mte=a("strong"),cro=o("longformer"),fro=o(" \u2014 "),XR=a("a"),mro=o("LongformerTokenizer"),gro=o(" or "),zR=a("a"),hro=o("LongformerTokenizerFast"),pro=o(" (Longformer model)"),uro=l(),Sg=a("li"),Ete=a("strong"),_ro=o("luke"),bro=o(" \u2014 "),WR=a("a"),vro=o("LukeTokenizer"),Fro=o(" (LUKE model)"),Tro=l(),ls=a("li"),Cte=a("strong"),Mro=o("lxmert"),Ero=o(" \u2014 "),QR=a("a"),Cro=o("LxmertTokenizer"),wro=o(" or "),HR=a("a"),Aro=o("LxmertTokenizerFast"),yro=o(" (LXMERT model)"),Lro=l(),Rg=a("li"),wte=a("strong"),xro=o("m2m_100"),$ro=o(" \u2014 "),UR=a("a"),kro=o("M2M100Tokenizer"),Sro=o(" (M2M100 model)"),Rro=l(),Pg=a("li"),Ate=a("strong"),Pro=o("marian"),Bro=o(" \u2014 "),JR=a("a"),Iro=o("MarianTokenizer"),qro=o(" (Marian model)"),Nro=l(),is=a("li"),yte=a("strong"),jro=o("mbart"),Dro=o(" \u2014 "),YR=a("a"),Gro=o("MBartTokenizer"),Oro=o(" or "),KR=a("a"),Vro=o("MBartTokenizerFast"),Xro=o(" (mBART model)"),zro=l(),ds=a("li"),Lte=a("strong"),Wro=o("mbart50"),Qro=o(" \u2014 "),ZR=a("a"),Hro=o("MBart50Tokenizer"),Uro=o(" or "),eP=a("a"),Jro=o("MBart50TokenizerFast"),Yro=o(" (mBART-50 model)"),Kro=l(),cs=a("li"),xte=a("strong"),Zro=o("megatron-bert"),eto=o(" \u2014 "),oP=a("a"),oto=o("BertTokenizer"),rto=o(" or "),rP=a("a"),tto=o("BertTokenizerFast"),ato=o(" (MegatronBert model)"),nto=l(),Bg=a("li"),$te=a("strong"),sto=o("mluke"),lto=o(" \u2014 "),tP=a("a"),ito=o("MLukeTokenizer"),dto=o(" (mLUKE model)"),cto=l(),fs=a("li"),kte=a("strong"),fto=o("mobilebert"),mto=o(" \u2014 "),aP=a("a"),gto=o("MobileBertTokenizer"),hto=o(" or "),nP=a("a"),pto=o("MobileBertTokenizerFast"),uto=o(" (MobileBERT model)"),_to=l(),ms=a("li"),Ste=a("strong"),bto=o("mpnet"),vto=o(" \u2014 "),sP=a("a"),Fto=o("MPNetTokenizer"),Tto=o(" or "),lP=a("a"),Mto=o("MPNetTokenizerFast"),Eto=o(" (MPNet model)"),Cto=l(),gs=a("li"),Rte=a("strong"),wto=o("mt5"),Ato=o(" \u2014 "),iP=a("a"),yto=o("MT5Tokenizer"),Lto=o(" or "),dP=a("a"),xto=o("MT5TokenizerFast"),$to=o(" (mT5 model)"),kto=l(),hs=a("li"),Pte=a("strong"),Sto=o("nystromformer"),Rto=o(" \u2014 "),cP=a("a"),Pto=o("AlbertTokenizer"),Bto=o(" or "),fP=a("a"),Ito=o("AlbertTokenizerFast"),qto=o(" (Nystromformer model)"),Nto=l(),ps=a("li"),Bte=a("strong"),jto=o("openai-gpt"),Dto=o(" \u2014 "),mP=a("a"),Gto=o("OpenAIGPTTokenizer"),Oto=o(" or "),gP=a("a"),Vto=o("OpenAIGPTTokenizerFast"),Xto=o(" (OpenAI GPT model)"),zto=l(),Ig=a("li"),Ite=a("strong"),Wto=o("opt"),Qto=o(" \u2014 "),hP=a("a"),Hto=o("GPT2Tokenizer"),Uto=o(" (OPT model)"),Jto=l(),us=a("li"),qte=a("strong"),Yto=o("pegasus"),Kto=o(" \u2014 "),pP=a("a"),Zto=o("PegasusTokenizer"),eao=o(" or "),uP=a("a"),oao=o("PegasusTokenizerFast"),rao=o(" (Pegasus model)"),tao=l(),qg=a("li"),Nte=a("strong"),aao=o("perceiver"),nao=o(" \u2014 "),_P=a("a"),sao=o("PerceiverTokenizer"),lao=o(" (Perceiver model)"),iao=l(),Ng=a("li"),jte=a("strong"),dao=o("phobert"),cao=o(" \u2014 "),bP=a("a"),fao=o("PhobertTokenizer"),mao=o(" (PhoBERT model)"),gao=l(),jg=a("li"),Dte=a("strong"),hao=o("plbart"),pao=o(" \u2014 "),vP=a("a"),uao=o("PLBartTokenizer"),_ao=o(" (PLBart model)"),bao=l(),Dg=a("li"),Gte=a("strong"),vao=o("prophetnet"),Fao=o(" \u2014 "),FP=a("a"),Tao=o("ProphetNetTokenizer"),Mao=o(" (ProphetNet model)"),Eao=l(),_s=a("li"),Ote=a("strong"),Cao=o("qdqbert"),wao=o(" \u2014 "),TP=a("a"),Aao=o("BertTokenizer"),yao=o(" or "),MP=a("a"),Lao=o("BertTokenizerFast"),xao=o(" (QDQBert model)"),$ao=l(),Gg=a("li"),Vte=a("strong"),kao=o("rag"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("RagTokenizer"),Pao=o(" (RAG model)"),Bao=l(),bs=a("li"),Xte=a("strong"),Iao=o("realm"),qao=o(" \u2014 "),CP=a("a"),Nao=o("RealmTokenizer"),jao=o(" or "),wP=a("a"),Dao=o("RealmTokenizerFast"),Gao=o(" (Realm model)"),Oao=l(),vs=a("li"),zte=a("strong"),Vao=o("reformer"),Xao=o(" \u2014 "),AP=a("a"),zao=o("ReformerTokenizer"),Wao=o(" or "),yP=a("a"),Qao=o("ReformerTokenizerFast"),Hao=o(" (Reformer model)"),Uao=l(),Fs=a("li"),Wte=a("strong"),Jao=o("rembert"),Yao=o(" \u2014 "),LP=a("a"),Kao=o("RemBertTokenizer"),Zao=o(" or "),xP=a("a"),eno=o("RemBertTokenizerFast"),ono=o(" (RemBERT model)"),rno=l(),Ts=a("li"),Qte=a("strong"),tno=o("retribert"),ano=o(" \u2014 "),$P=a("a"),nno=o("RetriBertTokenizer"),sno=o(" or "),kP=a("a"),lno=o("RetriBertTokenizerFast"),ino=o(" (RetriBERT model)"),dno=l(),Ms=a("li"),Hte=a("strong"),cno=o("roberta"),fno=o(" \u2014 "),SP=a("a"),mno=o("RobertaTokenizer"),gno=o(" or "),RP=a("a"),hno=o("RobertaTokenizerFast"),pno=o(" (RoBERTa model)"),uno=l(),Es=a("li"),Ute=a("strong"),_no=o("roformer"),bno=o(" \u2014 "),PP=a("a"),vno=o("RoFormerTokenizer"),Fno=o(" or "),BP=a("a"),Tno=o("RoFormerTokenizerFast"),Mno=o(" (RoFormer model)"),Eno=l(),Og=a("li"),Jte=a("strong"),Cno=o("speech_to_text"),wno=o(" \u2014 "),IP=a("a"),Ano=o("Speech2TextTokenizer"),yno=o(" (Speech2Text model)"),Lno=l(),Vg=a("li"),Yte=a("strong"),xno=o("speech_to_text_2"),$no=o(" \u2014 "),qP=a("a"),kno=o("Speech2Text2Tokenizer"),Sno=o(" (Speech2Text2 model)"),Rno=l(),Cs=a("li"),Kte=a("strong"),Pno=o("splinter"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("SplinterTokenizer"),qno=o(" or "),jP=a("a"),Nno=o("SplinterTokenizerFast"),jno=o(" (Splinter model)"),Dno=l(),ws=a("li"),Zte=a("strong"),Gno=o("squeezebert"),Ono=o(" \u2014 "),DP=a("a"),Vno=o("SqueezeBertTokenizer"),Xno=o(" or "),GP=a("a"),zno=o("SqueezeBertTokenizerFast"),Wno=o(" (SqueezeBERT model)"),Qno=l(),As=a("li"),eae=a("strong"),Hno=o("t5"),Uno=o(" \u2014 "),OP=a("a"),Jno=o("T5Tokenizer"),Yno=o(" or "),VP=a("a"),Kno=o("T5TokenizerFast"),Zno=o(" (T5 model)"),eso=l(),Xg=a("li"),oae=a("strong"),oso=o("tapas"),rso=o(" \u2014 "),XP=a("a"),tso=o("TapasTokenizer"),aso=o(" (TAPAS model)"),nso=l(),zg=a("li"),rae=a("strong"),sso=o("tapex"),lso=o(" \u2014 "),zP=a("a"),iso=o("TapexTokenizer"),dso=o(" (TAPEX model)"),cso=l(),Wg=a("li"),tae=a("strong"),fso=o("transfo-xl"),mso=o(" \u2014 "),WP=a("a"),gso=o("TransfoXLTokenizer"),hso=o(" (Transformer-XL model)"),pso=l(),ys=a("li"),aae=a("strong"),uso=o("visual_bert"),_so=o(" \u2014 "),QP=a("a"),bso=o("BertTokenizer"),vso=o(" or "),HP=a("a"),Fso=o("BertTokenizerFast"),Tso=o(" (VisualBert model)"),Mso=l(),Qg=a("li"),nae=a("strong"),Eso=o("wav2vec2"),Cso=o(" \u2014 "),UP=a("a"),wso=o("Wav2Vec2CTCTokenizer"),Aso=o(" (Wav2Vec2 model)"),yso=l(),Hg=a("li"),sae=a("strong"),Lso=o("wav2vec2-conformer"),xso=o(" \u2014 "),JP=a("a"),$so=o("Wav2Vec2CTCTokenizer"),kso=o(" (Wav2Vec2-Conformer model)"),Sso=l(),Ug=a("li"),lae=a("strong"),Rso=o("wav2vec2_phoneme"),Pso=o(" \u2014 "),YP=a("a"),Bso=o("Wav2Vec2PhonemeCTCTokenizer"),Iso=o(" (Wav2Vec2Phoneme model)"),qso=l(),Ls=a("li"),iae=a("strong"),Nso=o("xglm"),jso=o(" \u2014 "),KP=a("a"),Dso=o("XGLMTokenizer"),Gso=o(" or "),ZP=a("a"),Oso=o("XGLMTokenizerFast"),Vso=o(" (XGLM model)"),Xso=l(),Jg=a("li"),dae=a("strong"),zso=o("xlm"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("XLMTokenizer"),Hso=o(" (XLM model)"),Uso=l(),Yg=a("li"),cae=a("strong"),Jso=o("xlm-prophetnet"),Yso=o(" \u2014 "),oB=a("a"),Kso=o("XLMProphetNetTokenizer"),Zso=o(" (XLMProphetNet model)"),elo=l(),xs=a("li"),fae=a("strong"),olo=o("xlm-roberta"),rlo=o(" \u2014 "),rB=a("a"),tlo=o("XLMRobertaTokenizer"),alo=o(" or "),tB=a("a"),nlo=o("XLMRobertaTokenizerFast"),slo=o(" (XLM-RoBERTa model)"),llo=l(),$s=a("li"),mae=a("strong"),ilo=o("xlm-roberta-xl"),dlo=o(" \u2014 "),aB=a("a"),clo=o("RobertaTokenizer"),flo=o(" or "),nB=a("a"),mlo=o("RobertaTokenizerFast"),glo=o(" (XLM-RoBERTa-XL model)"),hlo=l(),ks=a("li"),gae=a("strong"),plo=o("xlnet"),ulo=o(" \u2014 "),sB=a("a"),_lo=o("XLNetTokenizer"),blo=o(" or "),lB=a("a"),vlo=o("XLNetTokenizerFast"),Flo=o(" (XLNet model)"),Tlo=l(),Ss=a("li"),hae=a("strong"),Mlo=o("yoso"),Elo=o(" \u2014 "),iB=a("a"),Clo=o("AlbertTokenizer"),wlo=o(" or "),dB=a("a"),Alo=o("AlbertTokenizerFast"),ylo=o(" (YOSO model)"),Llo=l(),F(Kg.$$.fragment),xlo=l(),Zg=a("div"),F(My.$$.fragment),$lo=l(),pae=a("p"),klo=o("Register a new tokenizer in this mapping."),OIe=l(),Ti=a("h2"),eh=a("a"),uae=a("span"),F(Ey.$$.fragment),Slo=l(),_ae=a("span"),Rlo=o("AutoFeatureExtractor"),VIe=l(),Ao=a("div"),F(Cy.$$.fragment),Plo=l(),wy=a("p"),Blo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cB=a("a"),Ilo=o("AutoFeatureExtractor.from_pretrained()"),qlo=o(" class method."),Nlo=l(),Ay=a("p"),jlo=o("This class cannot be instantiated directly using "),bae=a("code"),Dlo=o("__init__()"),Glo=o(" (throws an error)."),Olo=l(),He=a("div"),F(yy.$$.fragment),Vlo=l(),vae=a("p"),Xlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zlo=l(),ya=a("p"),Wlo=o("The feature extractor class to instantiate is selected based on the "),Fae=a("code"),Qlo=o("model_type"),Hlo=o(` property of the config object
(either passed as an argument or loaded from `),Tae=a("code"),Ulo=o("pretrained_model_name_or_path"),Jlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mae=a("code"),Ylo=o("pretrained_model_name_or_path"),Klo=o(":"),Zlo=l(),Z=a("ul"),oh=a("li"),Eae=a("strong"),eio=o("beit"),oio=o(" \u2014 "),fB=a("a"),rio=o("BeitFeatureExtractor"),tio=o(" (BEiT model)"),aio=l(),rh=a("li"),Cae=a("strong"),nio=o("clip"),sio=o(" \u2014 "),mB=a("a"),lio=o("CLIPFeatureExtractor"),iio=o(" (CLIP model)"),dio=l(),th=a("li"),wae=a("strong"),cio=o("convnext"),fio=o(" \u2014 "),gB=a("a"),mio=o("ConvNextFeatureExtractor"),gio=o(" (ConvNext model)"),hio=l(),ah=a("li"),Aae=a("strong"),pio=o("data2vec-audio"),uio=o(" \u2014 "),hB=a("a"),_io=o("Wav2Vec2FeatureExtractor"),bio=o(" (Data2VecAudio model)"),vio=l(),nh=a("li"),yae=a("strong"),Fio=o("data2vec-vision"),Tio=o(" \u2014 "),pB=a("a"),Mio=o("BeitFeatureExtractor"),Eio=o(" (Data2VecVision model)"),Cio=l(),sh=a("li"),Lae=a("strong"),wio=o("deit"),Aio=o(" \u2014 "),uB=a("a"),yio=o("DeiTFeatureExtractor"),Lio=o(" (DeiT model)"),xio=l(),lh=a("li"),xae=a("strong"),$io=o("detr"),kio=o(" \u2014 "),_B=a("a"),Sio=o("DetrFeatureExtractor"),Rio=o(" (DETR model)"),Pio=l(),ih=a("li"),$ae=a("strong"),Bio=o("dpt"),Iio=o(" \u2014 "),bB=a("a"),qio=o("DPTFeatureExtractor"),Nio=o(" (DPT model)"),jio=l(),dh=a("li"),kae=a("strong"),Dio=o("flava"),Gio=o(" \u2014 "),vB=a("a"),Oio=o("FlavaFeatureExtractor"),Vio=o(" (Flava model)"),Xio=l(),ch=a("li"),Sae=a("strong"),zio=o("glpn"),Wio=o(" \u2014 "),FB=a("a"),Qio=o("GLPNFeatureExtractor"),Hio=o(" (GLPN model)"),Uio=l(),fh=a("li"),Rae=a("strong"),Jio=o("hubert"),Yio=o(" \u2014 "),TB=a("a"),Kio=o("Wav2Vec2FeatureExtractor"),Zio=o(" (Hubert model)"),edo=l(),mh=a("li"),Pae=a("strong"),odo=o("layoutlmv2"),rdo=o(" \u2014 "),MB=a("a"),tdo=o("LayoutLMv2FeatureExtractor"),ado=o(" (LayoutLMv2 model)"),ndo=l(),gh=a("li"),Bae=a("strong"),sdo=o("maskformer"),ldo=o(" \u2014 "),EB=a("a"),ido=o("MaskFormerFeatureExtractor"),ddo=o(" (MaskFormer model)"),cdo=l(),hh=a("li"),Iae=a("strong"),fdo=o("perceiver"),mdo=o(" \u2014 "),CB=a("a"),gdo=o("PerceiverFeatureExtractor"),hdo=o(" (Perceiver model)"),pdo=l(),ph=a("li"),qae=a("strong"),udo=o("poolformer"),_do=o(" \u2014 "),wB=a("a"),bdo=o("PoolFormerFeatureExtractor"),vdo=o(" (PoolFormer model)"),Fdo=l(),uh=a("li"),Nae=a("strong"),Tdo=o("regnet"),Mdo=o(" \u2014 "),AB=a("a"),Edo=o("ConvNextFeatureExtractor"),Cdo=o(" (RegNet model)"),wdo=l(),_h=a("li"),jae=a("strong"),Ado=o("resnet"),ydo=o(" \u2014 "),yB=a("a"),Ldo=o("ConvNextFeatureExtractor"),xdo=o(" (ResNet model)"),$do=l(),bh=a("li"),Dae=a("strong"),kdo=o("segformer"),Sdo=o(" \u2014 "),LB=a("a"),Rdo=o("SegformerFeatureExtractor"),Pdo=o(" (SegFormer model)"),Bdo=l(),vh=a("li"),Gae=a("strong"),Ido=o("speech_to_text"),qdo=o(" \u2014 "),xB=a("a"),Ndo=o("Speech2TextFeatureExtractor"),jdo=o(" (Speech2Text model)"),Ddo=l(),Fh=a("li"),Oae=a("strong"),Gdo=o("swin"),Odo=o(" \u2014 "),$B=a("a"),Vdo=o("ViTFeatureExtractor"),Xdo=o(" (Swin model)"),zdo=l(),Th=a("li"),Vae=a("strong"),Wdo=o("van"),Qdo=o(" \u2014 "),kB=a("a"),Hdo=o("ConvNextFeatureExtractor"),Udo=o(" (VAN model)"),Jdo=l(),Mh=a("li"),Xae=a("strong"),Ydo=o("vit"),Kdo=o(" \u2014 "),SB=a("a"),Zdo=o("ViTFeatureExtractor"),eco=o(" (ViT model)"),oco=l(),Eh=a("li"),zae=a("strong"),rco=o("vit_mae"),tco=o(" \u2014 "),RB=a("a"),aco=o("ViTFeatureExtractor"),nco=o(" (ViTMAE model)"),sco=l(),Ch=a("li"),Wae=a("strong"),lco=o("wav2vec2"),ico=o(" \u2014 "),PB=a("a"),dco=o("Wav2Vec2FeatureExtractor"),cco=o(" (Wav2Vec2 model)"),fco=l(),wh=a("li"),Qae=a("strong"),mco=o("wav2vec2-conformer"),gco=o(" \u2014 "),BB=a("a"),hco=o("Wav2Vec2FeatureExtractor"),pco=o(" (Wav2Vec2-Conformer model)"),uco=l(),Ah=a("li"),Hae=a("strong"),_co=o("yolos"),bco=o(" \u2014 "),IB=a("a"),vco=o("YolosFeatureExtractor"),Fco=o(" (YOLOS model)"),Tco=l(),F(yh.$$.fragment),Mco=l(),F(Lh.$$.fragment),Eco=l(),xh=a("div"),F(Ly.$$.fragment),Cco=l(),Uae=a("p"),wco=o("Register a new feature extractor for this class."),XIe=l(),Mi=a("h2"),$h=a("a"),Jae=a("span"),F(xy.$$.fragment),Aco=l(),Yae=a("span"),yco=o("AutoProcessor"),zIe=l(),yo=a("div"),F($y.$$.fragment),Lco=l(),ky=a("p"),xco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qB=a("a"),$co=o("AutoProcessor.from_pretrained()"),kco=o(" class method."),Sco=l(),Sy=a("p"),Rco=o("This class cannot be instantiated directly using "),Kae=a("code"),Pco=o("__init__()"),Bco=o(" (throws an error)."),Ico=l(),Ue=a("div"),F(Ry.$$.fragment),qco=l(),Zae=a("p"),Nco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jco=l(),Ei=a("p"),Dco=o("The processor class to instantiate is selected based on the "),ene=a("code"),Gco=o("model_type"),Oco=o(` property of the config object (either
passed as an argument or loaded from `),one=a("code"),Vco=o("pretrained_model_name_or_path"),Xco=o(" if possible):"),zco=l(),pe=a("ul"),kh=a("li"),rne=a("strong"),Wco=o("clip"),Qco=o(" \u2014 "),NB=a("a"),Hco=o("CLIPProcessor"),Uco=o(" (CLIP model)"),Jco=l(),Sh=a("li"),tne=a("strong"),Yco=o("flava"),Kco=o(" \u2014 "),ane=a("code"),Zco=o("FLAVAProcessor"),efo=o(" (Flava model)"),ofo=l(),Rh=a("li"),nne=a("strong"),rfo=o("layoutlmv2"),tfo=o(" \u2014 "),jB=a("a"),afo=o("LayoutLMv2Processor"),nfo=o(" (LayoutLMv2 model)"),sfo=l(),Ph=a("li"),sne=a("strong"),lfo=o("layoutxlm"),ifo=o(" \u2014 "),DB=a("a"),dfo=o("LayoutXLMProcessor"),cfo=o(" (LayoutXLM model)"),ffo=l(),Bh=a("li"),lne=a("strong"),mfo=o("sew"),gfo=o(" \u2014 "),GB=a("a"),hfo=o("Wav2Vec2Processor"),pfo=o(" (SEW model)"),ufo=l(),Ih=a("li"),ine=a("strong"),_fo=o("sew-d"),bfo=o(" \u2014 "),OB=a("a"),vfo=o("Wav2Vec2Processor"),Ffo=o(" (SEW-D model)"),Tfo=l(),qh=a("li"),dne=a("strong"),Mfo=o("speech_to_text"),Efo=o(" \u2014 "),VB=a("a"),Cfo=o("Speech2TextProcessor"),wfo=o(" (Speech2Text model)"),Afo=l(),Nh=a("li"),cne=a("strong"),yfo=o("speech_to_text_2"),Lfo=o(" \u2014 "),XB=a("a"),xfo=o("Speech2Text2Processor"),$fo=o(" (Speech2Text2 model)"),kfo=l(),jh=a("li"),fne=a("strong"),Sfo=o("trocr"),Rfo=o(" \u2014 "),zB=a("a"),Pfo=o("TrOCRProcessor"),Bfo=o(" (TrOCR model)"),Ifo=l(),Dh=a("li"),mne=a("strong"),qfo=o("unispeech"),Nfo=o(" \u2014 "),WB=a("a"),jfo=o("Wav2Vec2Processor"),Dfo=o(" (UniSpeech model)"),Gfo=l(),Gh=a("li"),gne=a("strong"),Ofo=o("unispeech-sat"),Vfo=o(" \u2014 "),QB=a("a"),Xfo=o("Wav2Vec2Processor"),zfo=o(" (UniSpeechSat model)"),Wfo=l(),Oh=a("li"),hne=a("strong"),Qfo=o("vilt"),Hfo=o(" \u2014 "),HB=a("a"),Ufo=o("ViltProcessor"),Jfo=o(" (ViLT model)"),Yfo=l(),Vh=a("li"),pne=a("strong"),Kfo=o("vision-text-dual-encoder"),Zfo=o(" \u2014 "),UB=a("a"),emo=o("VisionTextDualEncoderProcessor"),omo=o(" (VisionTextDualEncoder model)"),rmo=l(),Xh=a("li"),une=a("strong"),tmo=o("wav2vec2"),amo=o(" \u2014 "),JB=a("a"),nmo=o("Wav2Vec2Processor"),smo=o(" (Wav2Vec2 model)"),lmo=l(),zh=a("li"),_ne=a("strong"),imo=o("wav2vec2-conformer"),dmo=o(" \u2014 "),YB=a("a"),cmo=o("Wav2Vec2Processor"),fmo=o(" (Wav2Vec2-Conformer model)"),mmo=l(),Wh=a("li"),bne=a("strong"),gmo=o("wavlm"),hmo=o(" \u2014 "),KB=a("a"),pmo=o("Wav2Vec2Processor"),umo=o(" (WavLM model)"),_mo=l(),F(Qh.$$.fragment),bmo=l(),F(Hh.$$.fragment),vmo=l(),Uh=a("div"),F(Py.$$.fragment),Fmo=l(),vne=a("p"),Tmo=o("Register a new processor for this class."),WIe=l(),Ci=a("h2"),Jh=a("a"),Fne=a("span"),F(By.$$.fragment),Mmo=l(),Tne=a("span"),Emo=o("AutoModel"),QIe=l(),Lo=a("div"),F(Iy.$$.fragment),Cmo=l(),wi=a("p"),wmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=a("a"),Amo=o("from_pretrained()"),ymo=o(" class method or the "),eI=a("a"),Lmo=o("from_config()"),xmo=o(` class
method.`),$mo=l(),qy=a("p"),kmo=o("This class cannot be instantiated directly using "),Mne=a("code"),Smo=o("__init__()"),Rmo=o(" (throws an error)."),Pmo=l(),tt=a("div"),F(Ny.$$.fragment),Bmo=l(),Ene=a("p"),Imo=o("Instantiates one of the base model classes of the library from a configuration."),qmo=l(),Ai=a("p"),Nmo=o(`Note:
Loading a model from its configuration file does `),Cne=a("strong"),jmo=o("not"),Dmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oI=a("a"),Gmo=o("from_pretrained()"),Omo=o(" to load the model weights."),Vmo=l(),F(Yh.$$.fragment),Xmo=l(),Je=a("div"),F(jy.$$.fragment),zmo=l(),wne=a("p"),Wmo=o("Instantiate one of the base model classes of the library from a pretrained model."),Qmo=l(),La=a("p"),Hmo=o("The model class to instantiate is selected based on the "),Ane=a("code"),Umo=o("model_type"),Jmo=o(` property of the config object (either
passed as an argument or loaded from `),yne=a("code"),Ymo=o("pretrained_model_name_or_path"),Kmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=a("code"),Zmo=o("pretrained_model_name_or_path"),ego=o(":"),ogo=l(),x=a("ul"),Kh=a("li"),xne=a("strong"),rgo=o("albert"),tgo=o(" \u2014 "),rI=a("a"),ago=o("AlbertModel"),ngo=o(" (ALBERT model)"),sgo=l(),Zh=a("li"),$ne=a("strong"),lgo=o("bart"),igo=o(" \u2014 "),tI=a("a"),dgo=o("BartModel"),cgo=o(" (BART model)"),fgo=l(),ep=a("li"),kne=a("strong"),mgo=o("beit"),ggo=o(" \u2014 "),aI=a("a"),hgo=o("BeitModel"),pgo=o(" (BEiT model)"),ugo=l(),op=a("li"),Sne=a("strong"),_go=o("bert"),bgo=o(" \u2014 "),nI=a("a"),vgo=o("BertModel"),Fgo=o(" (BERT model)"),Tgo=l(),rp=a("li"),Rne=a("strong"),Mgo=o("bert-generation"),Ego=o(" \u2014 "),sI=a("a"),Cgo=o("BertGenerationEncoder"),wgo=o(" (Bert Generation model)"),Ago=l(),tp=a("li"),Pne=a("strong"),ygo=o("big_bird"),Lgo=o(" \u2014 "),lI=a("a"),xgo=o("BigBirdModel"),$go=o(" (BigBird model)"),kgo=l(),ap=a("li"),Bne=a("strong"),Sgo=o("bigbird_pegasus"),Rgo=o(" \u2014 "),iI=a("a"),Pgo=o("BigBirdPegasusModel"),Bgo=o(" (BigBirdPegasus model)"),Igo=l(),np=a("li"),Ine=a("strong"),qgo=o("blenderbot"),Ngo=o(" \u2014 "),dI=a("a"),jgo=o("BlenderbotModel"),Dgo=o(" (Blenderbot model)"),Ggo=l(),sp=a("li"),qne=a("strong"),Ogo=o("blenderbot-small"),Vgo=o(" \u2014 "),cI=a("a"),Xgo=o("BlenderbotSmallModel"),zgo=o(" (BlenderbotSmall model)"),Wgo=l(),lp=a("li"),Nne=a("strong"),Qgo=o("camembert"),Hgo=o(" \u2014 "),fI=a("a"),Ugo=o("CamembertModel"),Jgo=o(" (CamemBERT model)"),Ygo=l(),ip=a("li"),jne=a("strong"),Kgo=o("canine"),Zgo=o(" \u2014 "),mI=a("a"),eho=o("CanineModel"),oho=o(" (Canine model)"),rho=l(),dp=a("li"),Dne=a("strong"),tho=o("clip"),aho=o(" \u2014 "),gI=a("a"),nho=o("CLIPModel"),sho=o(" (CLIP model)"),lho=l(),cp=a("li"),Gne=a("strong"),iho=o("convbert"),dho=o(" \u2014 "),hI=a("a"),cho=o("ConvBertModel"),fho=o(" (ConvBERT model)"),mho=l(),fp=a("li"),One=a("strong"),gho=o("convnext"),hho=o(" \u2014 "),pI=a("a"),pho=o("ConvNextModel"),uho=o(" (ConvNext model)"),_ho=l(),mp=a("li"),Vne=a("strong"),bho=o("ctrl"),vho=o(" \u2014 "),uI=a("a"),Fho=o("CTRLModel"),Tho=o(" (CTRL model)"),Mho=l(),gp=a("li"),Xne=a("strong"),Eho=o("data2vec-audio"),Cho=o(" \u2014 "),_I=a("a"),who=o("Data2VecAudioModel"),Aho=o(" (Data2VecAudio model)"),yho=l(),hp=a("li"),zne=a("strong"),Lho=o("data2vec-text"),xho=o(" \u2014 "),bI=a("a"),$ho=o("Data2VecTextModel"),kho=o(" (Data2VecText model)"),Sho=l(),pp=a("li"),Wne=a("strong"),Rho=o("data2vec-vision"),Pho=o(" \u2014 "),vI=a("a"),Bho=o("Data2VecVisionModel"),Iho=o(" (Data2VecVision model)"),qho=l(),up=a("li"),Qne=a("strong"),Nho=o("deberta"),jho=o(" \u2014 "),FI=a("a"),Dho=o("DebertaModel"),Gho=o(" (DeBERTa model)"),Oho=l(),_p=a("li"),Hne=a("strong"),Vho=o("deberta-v2"),Xho=o(" \u2014 "),TI=a("a"),zho=o("DebertaV2Model"),Who=o(" (DeBERTa-v2 model)"),Qho=l(),bp=a("li"),Une=a("strong"),Hho=o("decision_transformer"),Uho=o(" \u2014 "),MI=a("a"),Jho=o("DecisionTransformerModel"),Yho=o(" (Decision Transformer model)"),Kho=l(),vp=a("li"),Jne=a("strong"),Zho=o("deit"),epo=o(" \u2014 "),EI=a("a"),opo=o("DeiTModel"),rpo=o(" (DeiT model)"),tpo=l(),Fp=a("li"),Yne=a("strong"),apo=o("detr"),npo=o(" \u2014 "),CI=a("a"),spo=o("DetrModel"),lpo=o(" (DETR model)"),ipo=l(),Tp=a("li"),Kne=a("strong"),dpo=o("distilbert"),cpo=o(" \u2014 "),wI=a("a"),fpo=o("DistilBertModel"),mpo=o(" (DistilBERT model)"),gpo=l(),Mp=a("li"),Zne=a("strong"),hpo=o("dpr"),ppo=o(" \u2014 "),AI=a("a"),upo=o("DPRQuestionEncoder"),_po=o(" (DPR model)"),bpo=l(),Ep=a("li"),ese=a("strong"),vpo=o("dpt"),Fpo=o(" \u2014 "),yI=a("a"),Tpo=o("DPTModel"),Mpo=o(" (DPT model)"),Epo=l(),Cp=a("li"),ose=a("strong"),Cpo=o("electra"),wpo=o(" \u2014 "),LI=a("a"),Apo=o("ElectraModel"),ypo=o(" (ELECTRA model)"),Lpo=l(),wp=a("li"),rse=a("strong"),xpo=o("flaubert"),$po=o(" \u2014 "),xI=a("a"),kpo=o("FlaubertModel"),Spo=o(" (FlauBERT model)"),Rpo=l(),Ap=a("li"),tse=a("strong"),Ppo=o("flava"),Bpo=o(" \u2014 "),$I=a("a"),Ipo=o("FlavaModel"),qpo=o(" (Flava model)"),Npo=l(),yp=a("li"),ase=a("strong"),jpo=o("fnet"),Dpo=o(" \u2014 "),kI=a("a"),Gpo=o("FNetModel"),Opo=o(" (FNet model)"),Vpo=l(),Lp=a("li"),nse=a("strong"),Xpo=o("fsmt"),zpo=o(" \u2014 "),SI=a("a"),Wpo=o("FSMTModel"),Qpo=o(" (FairSeq Machine-Translation model)"),Hpo=l(),Rs=a("li"),sse=a("strong"),Upo=o("funnel"),Jpo=o(" \u2014 "),RI=a("a"),Ypo=o("FunnelModel"),Kpo=o(" or "),PI=a("a"),Zpo=o("FunnelBaseModel"),euo=o(" (Funnel Transformer model)"),ouo=l(),xp=a("li"),lse=a("strong"),ruo=o("glpn"),tuo=o(" \u2014 "),BI=a("a"),auo=o("GLPNModel"),nuo=o(" (GLPN model)"),suo=l(),$p=a("li"),ise=a("strong"),luo=o("gpt2"),iuo=o(" \u2014 "),II=a("a"),duo=o("GPT2Model"),cuo=o(" (OpenAI GPT-2 model)"),fuo=l(),kp=a("li"),dse=a("strong"),muo=o("gpt_neo"),guo=o(" \u2014 "),qI=a("a"),huo=o("GPTNeoModel"),puo=o(" (GPT Neo model)"),uuo=l(),Sp=a("li"),cse=a("strong"),_uo=o("gptj"),buo=o(" \u2014 "),NI=a("a"),vuo=o("GPTJModel"),Fuo=o(" (GPT-J model)"),Tuo=l(),Rp=a("li"),fse=a("strong"),Muo=o("hubert"),Euo=o(" \u2014 "),jI=a("a"),Cuo=o("HubertModel"),wuo=o(" (Hubert model)"),Auo=l(),Pp=a("li"),mse=a("strong"),yuo=o("ibert"),Luo=o(" \u2014 "),DI=a("a"),xuo=o("IBertModel"),$uo=o(" (I-BERT model)"),kuo=l(),Bp=a("li"),gse=a("strong"),Suo=o("imagegpt"),Ruo=o(" \u2014 "),GI=a("a"),Puo=o("ImageGPTModel"),Buo=o(" (ImageGPT model)"),Iuo=l(),Ip=a("li"),hse=a("strong"),quo=o("layoutlm"),Nuo=o(" \u2014 "),OI=a("a"),juo=o("LayoutLMModel"),Duo=o(" (LayoutLM model)"),Guo=l(),qp=a("li"),pse=a("strong"),Ouo=o("layoutlmv2"),Vuo=o(" \u2014 "),VI=a("a"),Xuo=o("LayoutLMv2Model"),zuo=o(" (LayoutLMv2 model)"),Wuo=l(),Np=a("li"),use=a("strong"),Quo=o("led"),Huo=o(" \u2014 "),XI=a("a"),Uuo=o("LEDModel"),Juo=o(" (LED model)"),Yuo=l(),jp=a("li"),_se=a("strong"),Kuo=o("longformer"),Zuo=o(" \u2014 "),zI=a("a"),e_o=o("LongformerModel"),o_o=o(" (Longformer model)"),r_o=l(),Dp=a("li"),bse=a("strong"),t_o=o("luke"),a_o=o(" \u2014 "),WI=a("a"),n_o=o("LukeModel"),s_o=o(" (LUKE model)"),l_o=l(),Gp=a("li"),vse=a("strong"),i_o=o("lxmert"),d_o=o(" \u2014 "),QI=a("a"),c_o=o("LxmertModel"),f_o=o(" (LXMERT model)"),m_o=l(),Op=a("li"),Fse=a("strong"),g_o=o("m2m_100"),h_o=o(" \u2014 "),HI=a("a"),p_o=o("M2M100Model"),u_o=o(" (M2M100 model)"),__o=l(),Vp=a("li"),Tse=a("strong"),b_o=o("marian"),v_o=o(" \u2014 "),UI=a("a"),F_o=o("MarianModel"),T_o=o(" (Marian model)"),M_o=l(),Xp=a("li"),Mse=a("strong"),E_o=o("maskformer"),C_o=o(" \u2014 "),JI=a("a"),w_o=o("MaskFormerModel"),A_o=o(" (MaskFormer model)"),y_o=l(),zp=a("li"),Ese=a("strong"),L_o=o("mbart"),x_o=o(" \u2014 "),YI=a("a"),$_o=o("MBartModel"),k_o=o(" (mBART model)"),S_o=l(),Wp=a("li"),Cse=a("strong"),R_o=o("megatron-bert"),P_o=o(" \u2014 "),KI=a("a"),B_o=o("MegatronBertModel"),I_o=o(" (MegatronBert model)"),q_o=l(),Qp=a("li"),wse=a("strong"),N_o=o("mobilebert"),j_o=o(" \u2014 "),ZI=a("a"),D_o=o("MobileBertModel"),G_o=o(" (MobileBERT model)"),O_o=l(),Hp=a("li"),Ase=a("strong"),V_o=o("mpnet"),X_o=o(" \u2014 "),eq=a("a"),z_o=o("MPNetModel"),W_o=o(" (MPNet model)"),Q_o=l(),Up=a("li"),yse=a("strong"),H_o=o("mt5"),U_o=o(" \u2014 "),oq=a("a"),J_o=o("MT5Model"),Y_o=o(" (mT5 model)"),K_o=l(),Jp=a("li"),Lse=a("strong"),Z_o=o("nystromformer"),e1o=o(" \u2014 "),rq=a("a"),o1o=o("NystromformerModel"),r1o=o(" (Nystromformer model)"),t1o=l(),Yp=a("li"),xse=a("strong"),a1o=o("openai-gpt"),n1o=o(" \u2014 "),tq=a("a"),s1o=o("OpenAIGPTModel"),l1o=o(" (OpenAI GPT model)"),i1o=l(),Kp=a("li"),$se=a("strong"),d1o=o("opt"),c1o=o(" \u2014 "),aq=a("a"),f1o=o("OPTModel"),m1o=o(" (OPT model)"),g1o=l(),Zp=a("li"),kse=a("strong"),h1o=o("pegasus"),p1o=o(" \u2014 "),nq=a("a"),u1o=o("PegasusModel"),_1o=o(" (Pegasus model)"),b1o=l(),eu=a("li"),Sse=a("strong"),v1o=o("perceiver"),F1o=o(" \u2014 "),sq=a("a"),T1o=o("PerceiverModel"),M1o=o(" (Perceiver model)"),E1o=l(),ou=a("li"),Rse=a("strong"),C1o=o("plbart"),w1o=o(" \u2014 "),lq=a("a"),A1o=o("PLBartModel"),y1o=o(" (PLBart model)"),L1o=l(),ru=a("li"),Pse=a("strong"),x1o=o("poolformer"),$1o=o(" \u2014 "),iq=a("a"),k1o=o("PoolFormerModel"),S1o=o(" (PoolFormer model)"),R1o=l(),tu=a("li"),Bse=a("strong"),P1o=o("prophetnet"),B1o=o(" \u2014 "),dq=a("a"),I1o=o("ProphetNetModel"),q1o=o(" (ProphetNet model)"),N1o=l(),au=a("li"),Ise=a("strong"),j1o=o("qdqbert"),D1o=o(" \u2014 "),cq=a("a"),G1o=o("QDQBertModel"),O1o=o(" (QDQBert model)"),V1o=l(),nu=a("li"),qse=a("strong"),X1o=o("reformer"),z1o=o(" \u2014 "),fq=a("a"),W1o=o("ReformerModel"),Q1o=o(" (Reformer model)"),H1o=l(),su=a("li"),Nse=a("strong"),U1o=o("regnet"),J1o=o(" \u2014 "),mq=a("a"),Y1o=o("RegNetModel"),K1o=o(" (RegNet model)"),Z1o=l(),lu=a("li"),jse=a("strong"),ebo=o("rembert"),obo=o(" \u2014 "),gq=a("a"),rbo=o("RemBertModel"),tbo=o(" (RemBERT model)"),abo=l(),iu=a("li"),Dse=a("strong"),nbo=o("resnet"),sbo=o(" \u2014 "),hq=a("a"),lbo=o("ResNetModel"),ibo=o(" (ResNet model)"),dbo=l(),du=a("li"),Gse=a("strong"),cbo=o("retribert"),fbo=o(" \u2014 "),pq=a("a"),mbo=o("RetriBertModel"),gbo=o(" (RetriBERT model)"),hbo=l(),cu=a("li"),Ose=a("strong"),pbo=o("roberta"),ubo=o(" \u2014 "),uq=a("a"),_bo=o("RobertaModel"),bbo=o(" (RoBERTa model)"),vbo=l(),fu=a("li"),Vse=a("strong"),Fbo=o("roformer"),Tbo=o(" \u2014 "),_q=a("a"),Mbo=o("RoFormerModel"),Ebo=o(" (RoFormer model)"),Cbo=l(),mu=a("li"),Xse=a("strong"),wbo=o("segformer"),Abo=o(" \u2014 "),bq=a("a"),ybo=o("SegformerModel"),Lbo=o(" (SegFormer model)"),xbo=l(),gu=a("li"),zse=a("strong"),$bo=o("sew"),kbo=o(" \u2014 "),vq=a("a"),Sbo=o("SEWModel"),Rbo=o(" (SEW model)"),Pbo=l(),hu=a("li"),Wse=a("strong"),Bbo=o("sew-d"),Ibo=o(" \u2014 "),Fq=a("a"),qbo=o("SEWDModel"),Nbo=o(" (SEW-D model)"),jbo=l(),pu=a("li"),Qse=a("strong"),Dbo=o("speech_to_text"),Gbo=o(" \u2014 "),Tq=a("a"),Obo=o("Speech2TextModel"),Vbo=o(" (Speech2Text model)"),Xbo=l(),uu=a("li"),Hse=a("strong"),zbo=o("splinter"),Wbo=o(" \u2014 "),Mq=a("a"),Qbo=o("SplinterModel"),Hbo=o(" (Splinter model)"),Ubo=l(),_u=a("li"),Use=a("strong"),Jbo=o("squeezebert"),Ybo=o(" \u2014 "),Eq=a("a"),Kbo=o("SqueezeBertModel"),Zbo=o(" (SqueezeBERT model)"),e2o=l(),bu=a("li"),Jse=a("strong"),o2o=o("swin"),r2o=o(" \u2014 "),Cq=a("a"),t2o=o("SwinModel"),a2o=o(" (Swin model)"),n2o=l(),vu=a("li"),Yse=a("strong"),s2o=o("t5"),l2o=o(" \u2014 "),wq=a("a"),i2o=o("T5Model"),d2o=o(" (T5 model)"),c2o=l(),Fu=a("li"),Kse=a("strong"),f2o=o("tapas"),m2o=o(" \u2014 "),Aq=a("a"),g2o=o("TapasModel"),h2o=o(" (TAPAS model)"),p2o=l(),Tu=a("li"),Zse=a("strong"),u2o=o("transfo-xl"),_2o=o(" \u2014 "),yq=a("a"),b2o=o("TransfoXLModel"),v2o=o(" (Transformer-XL model)"),F2o=l(),Mu=a("li"),ele=a("strong"),T2o=o("unispeech"),M2o=o(" \u2014 "),Lq=a("a"),E2o=o("UniSpeechModel"),C2o=o(" (UniSpeech model)"),w2o=l(),Eu=a("li"),ole=a("strong"),A2o=o("unispeech-sat"),y2o=o(" \u2014 "),xq=a("a"),L2o=o("UniSpeechSatModel"),x2o=o(" (UniSpeechSat model)"),$2o=l(),Cu=a("li"),rle=a("strong"),k2o=o("van"),S2o=o(" \u2014 "),$q=a("a"),R2o=o("VanModel"),P2o=o(" (VAN model)"),B2o=l(),wu=a("li"),tle=a("strong"),I2o=o("vilt"),q2o=o(" \u2014 "),kq=a("a"),N2o=o("ViltModel"),j2o=o(" (ViLT model)"),D2o=l(),Au=a("li"),ale=a("strong"),G2o=o("vision-text-dual-encoder"),O2o=o(" \u2014 "),Sq=a("a"),V2o=o("VisionTextDualEncoderModel"),X2o=o(" (VisionTextDualEncoder model)"),z2o=l(),yu=a("li"),nle=a("strong"),W2o=o("visual_bert"),Q2o=o(" \u2014 "),Rq=a("a"),H2o=o("VisualBertModel"),U2o=o(" (VisualBert model)"),J2o=l(),Lu=a("li"),sle=a("strong"),Y2o=o("vit"),K2o=o(" \u2014 "),Pq=a("a"),Z2o=o("ViTModel"),e4o=o(" (ViT model)"),o4o=l(),xu=a("li"),lle=a("strong"),r4o=o("vit_mae"),t4o=o(" \u2014 "),Bq=a("a"),a4o=o("ViTMAEModel"),n4o=o(" (ViTMAE model)"),s4o=l(),$u=a("li"),ile=a("strong"),l4o=o("wav2vec2"),i4o=o(" \u2014 "),Iq=a("a"),d4o=o("Wav2Vec2Model"),c4o=o(" (Wav2Vec2 model)"),f4o=l(),ku=a("li"),dle=a("strong"),m4o=o("wav2vec2-conformer"),g4o=o(" \u2014 "),qq=a("a"),h4o=o("Wav2Vec2ConformerModel"),p4o=o(" (Wav2Vec2-Conformer model)"),u4o=l(),Su=a("li"),cle=a("strong"),_4o=o("wavlm"),b4o=o(" \u2014 "),Nq=a("a"),v4o=o("WavLMModel"),F4o=o(" (WavLM model)"),T4o=l(),Ru=a("li"),fle=a("strong"),M4o=o("xglm"),E4o=o(" \u2014 "),jq=a("a"),C4o=o("XGLMModel"),w4o=o(" (XGLM model)"),A4o=l(),Pu=a("li"),mle=a("strong"),y4o=o("xlm"),L4o=o(" \u2014 "),Dq=a("a"),x4o=o("XLMModel"),$4o=o(" (XLM model)"),k4o=l(),Bu=a("li"),gle=a("strong"),S4o=o("xlm-prophetnet"),R4o=o(" \u2014 "),Gq=a("a"),P4o=o("XLMProphetNetModel"),B4o=o(" (XLMProphetNet model)"),I4o=l(),Iu=a("li"),hle=a("strong"),q4o=o("xlm-roberta"),N4o=o(" \u2014 "),Oq=a("a"),j4o=o("XLMRobertaModel"),D4o=o(" (XLM-RoBERTa model)"),G4o=l(),qu=a("li"),ple=a("strong"),O4o=o("xlm-roberta-xl"),V4o=o(" \u2014 "),Vq=a("a"),X4o=o("XLMRobertaXLModel"),z4o=o(" (XLM-RoBERTa-XL model)"),W4o=l(),Nu=a("li"),ule=a("strong"),Q4o=o("xlnet"),H4o=o(" \u2014 "),Xq=a("a"),U4o=o("XLNetModel"),J4o=o(" (XLNet model)"),Y4o=l(),ju=a("li"),_le=a("strong"),K4o=o("yolos"),Z4o=o(" \u2014 "),zq=a("a"),e5o=o("YolosModel"),o5o=o(" (YOLOS model)"),r5o=l(),Du=a("li"),ble=a("strong"),t5o=o("yoso"),a5o=o(" \u2014 "),Wq=a("a"),n5o=o("YosoModel"),s5o=o(" (YOSO model)"),l5o=l(),Gu=a("p"),i5o=o("The model is set in evaluation mode by default using "),vle=a("code"),d5o=o("model.eval()"),c5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),f5o=o("model.train()"),m5o=l(),F(Ou.$$.fragment),HIe=l(),yi=a("h2"),Vu=a("a"),Tle=a("span"),F(Dy.$$.fragment),g5o=l(),Mle=a("span"),h5o=o("AutoModelForPreTraining"),UIe=l(),xo=a("div"),F(Gy.$$.fragment),p5o=l(),Li=a("p"),u5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=a("a"),_5o=o("from_pretrained()"),b5o=o(" class method or the "),Hq=a("a"),v5o=o("from_config()"),F5o=o(` class
method.`),T5o=l(),Oy=a("p"),M5o=o("This class cannot be instantiated directly using "),Ele=a("code"),E5o=o("__init__()"),C5o=o(" (throws an error)."),w5o=l(),at=a("div"),F(Vy.$$.fragment),A5o=l(),Cle=a("p"),y5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L5o=l(),xi=a("p"),x5o=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),$5o=o("not"),k5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),S5o=o("from_pretrained()"),R5o=o(" to load the model weights."),P5o=l(),F(Xu.$$.fragment),B5o=l(),Ye=a("div"),F(Xy.$$.fragment),I5o=l(),Ale=a("p"),q5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N5o=l(),xa=a("p"),j5o=o("The model class to instantiate is selected based on the "),yle=a("code"),D5o=o("model_type"),G5o=o(` property of the config object (either
passed as an argument or loaded from `),Lle=a("code"),O5o=o("pretrained_model_name_or_path"),V5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=a("code"),X5o=o("pretrained_model_name_or_path"),z5o=o(":"),W5o=l(),G=a("ul"),zu=a("li"),$le=a("strong"),Q5o=o("albert"),H5o=o(" \u2014 "),Jq=a("a"),U5o=o("AlbertForPreTraining"),J5o=o(" (ALBERT model)"),Y5o=l(),Wu=a("li"),kle=a("strong"),K5o=o("bart"),Z5o=o(" \u2014 "),Yq=a("a"),evo=o("BartForConditionalGeneration"),ovo=o(" (BART model)"),rvo=l(),Qu=a("li"),Sle=a("strong"),tvo=o("bert"),avo=o(" \u2014 "),Kq=a("a"),nvo=o("BertForPreTraining"),svo=o(" (BERT model)"),lvo=l(),Hu=a("li"),Rle=a("strong"),ivo=o("big_bird"),dvo=o(" \u2014 "),Zq=a("a"),cvo=o("BigBirdForPreTraining"),fvo=o(" (BigBird model)"),mvo=l(),Uu=a("li"),Ple=a("strong"),gvo=o("camembert"),hvo=o(" \u2014 "),eN=a("a"),pvo=o("CamembertForMaskedLM"),uvo=o(" (CamemBERT model)"),_vo=l(),Ju=a("li"),Ble=a("strong"),bvo=o("ctrl"),vvo=o(" \u2014 "),oN=a("a"),Fvo=o("CTRLLMHeadModel"),Tvo=o(" (CTRL model)"),Mvo=l(),Yu=a("li"),Ile=a("strong"),Evo=o("data2vec-text"),Cvo=o(" \u2014 "),rN=a("a"),wvo=o("Data2VecTextForMaskedLM"),Avo=o(" (Data2VecText model)"),yvo=l(),Ku=a("li"),qle=a("strong"),Lvo=o("deberta"),xvo=o(" \u2014 "),tN=a("a"),$vo=o("DebertaForMaskedLM"),kvo=o(" (DeBERTa model)"),Svo=l(),Zu=a("li"),Nle=a("strong"),Rvo=o("deberta-v2"),Pvo=o(" \u2014 "),aN=a("a"),Bvo=o("DebertaV2ForMaskedLM"),Ivo=o(" (DeBERTa-v2 model)"),qvo=l(),e_=a("li"),jle=a("strong"),Nvo=o("distilbert"),jvo=o(" \u2014 "),nN=a("a"),Dvo=o("DistilBertForMaskedLM"),Gvo=o(" (DistilBERT model)"),Ovo=l(),o_=a("li"),Dle=a("strong"),Vvo=o("electra"),Xvo=o(" \u2014 "),sN=a("a"),zvo=o("ElectraForPreTraining"),Wvo=o(" (ELECTRA model)"),Qvo=l(),r_=a("li"),Gle=a("strong"),Hvo=o("flaubert"),Uvo=o(" \u2014 "),lN=a("a"),Jvo=o("FlaubertWithLMHeadModel"),Yvo=o(" (FlauBERT model)"),Kvo=l(),t_=a("li"),Ole=a("strong"),Zvo=o("flava"),e3o=o(" \u2014 "),iN=a("a"),o3o=o("FlavaForPreTraining"),r3o=o(" (Flava model)"),t3o=l(),a_=a("li"),Vle=a("strong"),a3o=o("fnet"),n3o=o(" \u2014 "),dN=a("a"),s3o=o("FNetForPreTraining"),l3o=o(" (FNet model)"),i3o=l(),n_=a("li"),Xle=a("strong"),d3o=o("fsmt"),c3o=o(" \u2014 "),cN=a("a"),f3o=o("FSMTForConditionalGeneration"),m3o=o(" (FairSeq Machine-Translation model)"),g3o=l(),s_=a("li"),zle=a("strong"),h3o=o("funnel"),p3o=o(" \u2014 "),fN=a("a"),u3o=o("FunnelForPreTraining"),_3o=o(" (Funnel Transformer model)"),b3o=l(),l_=a("li"),Wle=a("strong"),v3o=o("gpt2"),F3o=o(" \u2014 "),mN=a("a"),T3o=o("GPT2LMHeadModel"),M3o=o(" (OpenAI GPT-2 model)"),E3o=l(),i_=a("li"),Qle=a("strong"),C3o=o("ibert"),w3o=o(" \u2014 "),gN=a("a"),A3o=o("IBertForMaskedLM"),y3o=o(" (I-BERT model)"),L3o=l(),d_=a("li"),Hle=a("strong"),x3o=o("layoutlm"),$3o=o(" \u2014 "),hN=a("a"),k3o=o("LayoutLMForMaskedLM"),S3o=o(" (LayoutLM model)"),R3o=l(),c_=a("li"),Ule=a("strong"),P3o=o("longformer"),B3o=o(" \u2014 "),pN=a("a"),I3o=o("LongformerForMaskedLM"),q3o=o(" (Longformer model)"),N3o=l(),f_=a("li"),Jle=a("strong"),j3o=o("lxmert"),D3o=o(" \u2014 "),uN=a("a"),G3o=o("LxmertForPreTraining"),O3o=o(" (LXMERT model)"),V3o=l(),m_=a("li"),Yle=a("strong"),X3o=o("megatron-bert"),z3o=o(" \u2014 "),_N=a("a"),W3o=o("MegatronBertForPreTraining"),Q3o=o(" (MegatronBert model)"),H3o=l(),g_=a("li"),Kle=a("strong"),U3o=o("mobilebert"),J3o=o(" \u2014 "),bN=a("a"),Y3o=o("MobileBertForPreTraining"),K3o=o(" (MobileBERT model)"),Z3o=l(),h_=a("li"),Zle=a("strong"),eFo=o("mpnet"),oFo=o(" \u2014 "),vN=a("a"),rFo=o("MPNetForMaskedLM"),tFo=o(" (MPNet model)"),aFo=l(),p_=a("li"),eie=a("strong"),nFo=o("openai-gpt"),sFo=o(" \u2014 "),FN=a("a"),lFo=o("OpenAIGPTLMHeadModel"),iFo=o(" (OpenAI GPT model)"),dFo=l(),u_=a("li"),oie=a("strong"),cFo=o("retribert"),fFo=o(" \u2014 "),TN=a("a"),mFo=o("RetriBertModel"),gFo=o(" (RetriBERT model)"),hFo=l(),__=a("li"),rie=a("strong"),pFo=o("roberta"),uFo=o(" \u2014 "),MN=a("a"),_Fo=o("RobertaForMaskedLM"),bFo=o(" (RoBERTa model)"),vFo=l(),b_=a("li"),tie=a("strong"),FFo=o("squeezebert"),TFo=o(" \u2014 "),EN=a("a"),MFo=o("SqueezeBertForMaskedLM"),EFo=o(" (SqueezeBERT model)"),CFo=l(),v_=a("li"),aie=a("strong"),wFo=o("t5"),AFo=o(" \u2014 "),CN=a("a"),yFo=o("T5ForConditionalGeneration"),LFo=o(" (T5 model)"),xFo=l(),F_=a("li"),nie=a("strong"),$Fo=o("tapas"),kFo=o(" \u2014 "),wN=a("a"),SFo=o("TapasForMaskedLM"),RFo=o(" (TAPAS model)"),PFo=l(),T_=a("li"),sie=a("strong"),BFo=o("transfo-xl"),IFo=o(" \u2014 "),AN=a("a"),qFo=o("TransfoXLLMHeadModel"),NFo=o(" (Transformer-XL model)"),jFo=l(),M_=a("li"),lie=a("strong"),DFo=o("unispeech"),GFo=o(" \u2014 "),yN=a("a"),OFo=o("UniSpeechForPreTraining"),VFo=o(" (UniSpeech model)"),XFo=l(),E_=a("li"),iie=a("strong"),zFo=o("unispeech-sat"),WFo=o(" \u2014 "),LN=a("a"),QFo=o("UniSpeechSatForPreTraining"),HFo=o(" (UniSpeechSat model)"),UFo=l(),C_=a("li"),die=a("strong"),JFo=o("visual_bert"),YFo=o(" \u2014 "),xN=a("a"),KFo=o("VisualBertForPreTraining"),ZFo=o(" (VisualBert model)"),e6o=l(),w_=a("li"),cie=a("strong"),o6o=o("vit_mae"),r6o=o(" \u2014 "),$N=a("a"),t6o=o("ViTMAEForPreTraining"),a6o=o(" (ViTMAE model)"),n6o=l(),A_=a("li"),fie=a("strong"),s6o=o("wav2vec2"),l6o=o(" \u2014 "),kN=a("a"),i6o=o("Wav2Vec2ForPreTraining"),d6o=o(" (Wav2Vec2 model)"),c6o=l(),y_=a("li"),mie=a("strong"),f6o=o("wav2vec2-conformer"),m6o=o(" \u2014 "),SN=a("a"),g6o=o("Wav2Vec2ConformerForPreTraining"),h6o=o(" (Wav2Vec2-Conformer model)"),p6o=l(),L_=a("li"),gie=a("strong"),u6o=o("xlm"),_6o=o(" \u2014 "),RN=a("a"),b6o=o("XLMWithLMHeadModel"),v6o=o(" (XLM model)"),F6o=l(),x_=a("li"),hie=a("strong"),T6o=o("xlm-roberta"),M6o=o(" \u2014 "),PN=a("a"),E6o=o("XLMRobertaForMaskedLM"),C6o=o(" (XLM-RoBERTa model)"),w6o=l(),$_=a("li"),pie=a("strong"),A6o=o("xlm-roberta-xl"),y6o=o(" \u2014 "),BN=a("a"),L6o=o("XLMRobertaXLForMaskedLM"),x6o=o(" (XLM-RoBERTa-XL model)"),$6o=l(),k_=a("li"),uie=a("strong"),k6o=o("xlnet"),S6o=o(" \u2014 "),IN=a("a"),R6o=o("XLNetLMHeadModel"),P6o=o(" (XLNet model)"),B6o=l(),S_=a("p"),I6o=o("The model is set in evaluation mode by default using "),_ie=a("code"),q6o=o("model.eval()"),N6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),j6o=o("model.train()"),D6o=l(),F(R_.$$.fragment),JIe=l(),$i=a("h2"),P_=a("a"),vie=a("span"),F(zy.$$.fragment),G6o=l(),Fie=a("span"),O6o=o("AutoModelForCausalLM"),YIe=l(),$o=a("div"),F(Wy.$$.fragment),V6o=l(),ki=a("p"),X6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=a("a"),z6o=o("from_pretrained()"),W6o=o(" class method or the "),NN=a("a"),Q6o=o("from_config()"),H6o=o(` class
method.`),U6o=l(),Qy=a("p"),J6o=o("This class cannot be instantiated directly using "),Tie=a("code"),Y6o=o("__init__()"),K6o=o(" (throws an error)."),Z6o=l(),nt=a("div"),F(Hy.$$.fragment),eTo=l(),Mie=a("p"),oTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rTo=l(),Si=a("p"),tTo=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),aTo=o("not"),nTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),sTo=o("from_pretrained()"),lTo=o(" to load the model weights."),iTo=l(),F(B_.$$.fragment),dTo=l(),Ke=a("div"),F(Uy.$$.fragment),cTo=l(),Cie=a("p"),fTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mTo=l(),$a=a("p"),gTo=o("The model class to instantiate is selected based on the "),wie=a("code"),hTo=o("model_type"),pTo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),uTo=o("pretrained_model_name_or_path"),_To=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),bTo=o("pretrained_model_name_or_path"),vTo=o(":"),FTo=l(),z=a("ul"),I_=a("li"),Lie=a("strong"),TTo=o("bart"),MTo=o(" \u2014 "),DN=a("a"),ETo=o("BartForCausalLM"),CTo=o(" (BART model)"),wTo=l(),q_=a("li"),xie=a("strong"),ATo=o("bert"),yTo=o(" \u2014 "),GN=a("a"),LTo=o("BertLMHeadModel"),xTo=o(" (BERT model)"),$To=l(),N_=a("li"),$ie=a("strong"),kTo=o("bert-generation"),STo=o(" \u2014 "),ON=a("a"),RTo=o("BertGenerationDecoder"),PTo=o(" (Bert Generation model)"),BTo=l(),j_=a("li"),kie=a("strong"),ITo=o("big_bird"),qTo=o(" \u2014 "),VN=a("a"),NTo=o("BigBirdForCausalLM"),jTo=o(" (BigBird model)"),DTo=l(),D_=a("li"),Sie=a("strong"),GTo=o("bigbird_pegasus"),OTo=o(" \u2014 "),XN=a("a"),VTo=o("BigBirdPegasusForCausalLM"),XTo=o(" (BigBirdPegasus model)"),zTo=l(),G_=a("li"),Rie=a("strong"),WTo=o("blenderbot"),QTo=o(" \u2014 "),zN=a("a"),HTo=o("BlenderbotForCausalLM"),UTo=o(" (Blenderbot model)"),JTo=l(),O_=a("li"),Pie=a("strong"),YTo=o("blenderbot-small"),KTo=o(" \u2014 "),WN=a("a"),ZTo=o("BlenderbotSmallForCausalLM"),eMo=o(" (BlenderbotSmall model)"),oMo=l(),V_=a("li"),Bie=a("strong"),rMo=o("camembert"),tMo=o(" \u2014 "),QN=a("a"),aMo=o("CamembertForCausalLM"),nMo=o(" (CamemBERT model)"),sMo=l(),X_=a("li"),Iie=a("strong"),lMo=o("ctrl"),iMo=o(" \u2014 "),HN=a("a"),dMo=o("CTRLLMHeadModel"),cMo=o(" (CTRL model)"),fMo=l(),z_=a("li"),qie=a("strong"),mMo=o("data2vec-text"),gMo=o(" \u2014 "),UN=a("a"),hMo=o("Data2VecTextForCausalLM"),pMo=o(" (Data2VecText model)"),uMo=l(),W_=a("li"),Nie=a("strong"),_Mo=o("electra"),bMo=o(" \u2014 "),JN=a("a"),vMo=o("ElectraForCausalLM"),FMo=o(" (ELECTRA model)"),TMo=l(),Q_=a("li"),jie=a("strong"),MMo=o("gpt2"),EMo=o(" \u2014 "),YN=a("a"),CMo=o("GPT2LMHeadModel"),wMo=o(" (OpenAI GPT-2 model)"),AMo=l(),H_=a("li"),Die=a("strong"),yMo=o("gpt_neo"),LMo=o(" \u2014 "),KN=a("a"),xMo=o("GPTNeoForCausalLM"),$Mo=o(" (GPT Neo model)"),kMo=l(),U_=a("li"),Gie=a("strong"),SMo=o("gptj"),RMo=o(" \u2014 "),ZN=a("a"),PMo=o("GPTJForCausalLM"),BMo=o(" (GPT-J model)"),IMo=l(),J_=a("li"),Oie=a("strong"),qMo=o("marian"),NMo=o(" \u2014 "),ej=a("a"),jMo=o("MarianForCausalLM"),DMo=o(" (Marian model)"),GMo=l(),Y_=a("li"),Vie=a("strong"),OMo=o("mbart"),VMo=o(" \u2014 "),oj=a("a"),XMo=o("MBartForCausalLM"),zMo=o(" (mBART model)"),WMo=l(),K_=a("li"),Xie=a("strong"),QMo=o("megatron-bert"),HMo=o(" \u2014 "),rj=a("a"),UMo=o("MegatronBertForCausalLM"),JMo=o(" (MegatronBert model)"),YMo=l(),Z_=a("li"),zie=a("strong"),KMo=o("openai-gpt"),ZMo=o(" \u2014 "),tj=a("a"),eEo=o("OpenAIGPTLMHeadModel"),oEo=o(" (OpenAI GPT model)"),rEo=l(),e1=a("li"),Wie=a("strong"),tEo=o("opt"),aEo=o(" \u2014 "),aj=a("a"),nEo=o("OPTForCausalLM"),sEo=o(" (OPT model)"),lEo=l(),o1=a("li"),Qie=a("strong"),iEo=o("pegasus"),dEo=o(" \u2014 "),nj=a("a"),cEo=o("PegasusForCausalLM"),fEo=o(" (Pegasus model)"),mEo=l(),r1=a("li"),Hie=a("strong"),gEo=o("plbart"),hEo=o(" \u2014 "),sj=a("a"),pEo=o("PLBartForCausalLM"),uEo=o(" (PLBart model)"),_Eo=l(),t1=a("li"),Uie=a("strong"),bEo=o("prophetnet"),vEo=o(" \u2014 "),lj=a("a"),FEo=o("ProphetNetForCausalLM"),TEo=o(" (ProphetNet model)"),MEo=l(),a1=a("li"),Jie=a("strong"),EEo=o("qdqbert"),CEo=o(" \u2014 "),ij=a("a"),wEo=o("QDQBertLMHeadModel"),AEo=o(" (QDQBert model)"),yEo=l(),n1=a("li"),Yie=a("strong"),LEo=o("reformer"),xEo=o(" \u2014 "),dj=a("a"),$Eo=o("ReformerModelWithLMHead"),kEo=o(" (Reformer model)"),SEo=l(),s1=a("li"),Kie=a("strong"),REo=o("rembert"),PEo=o(" \u2014 "),cj=a("a"),BEo=o("RemBertForCausalLM"),IEo=o(" (RemBERT model)"),qEo=l(),l1=a("li"),Zie=a("strong"),NEo=o("roberta"),jEo=o(" \u2014 "),fj=a("a"),DEo=o("RobertaForCausalLM"),GEo=o(" (RoBERTa model)"),OEo=l(),i1=a("li"),ede=a("strong"),VEo=o("roformer"),XEo=o(" \u2014 "),mj=a("a"),zEo=o("RoFormerForCausalLM"),WEo=o(" (RoFormer model)"),QEo=l(),d1=a("li"),ode=a("strong"),HEo=o("speech_to_text_2"),UEo=o(" \u2014 "),gj=a("a"),JEo=o("Speech2Text2ForCausalLM"),YEo=o(" (Speech2Text2 model)"),KEo=l(),c1=a("li"),rde=a("strong"),ZEo=o("transfo-xl"),eCo=o(" \u2014 "),hj=a("a"),oCo=o("TransfoXLLMHeadModel"),rCo=o(" (Transformer-XL model)"),tCo=l(),f1=a("li"),tde=a("strong"),aCo=o("trocr"),nCo=o(" \u2014 "),pj=a("a"),sCo=o("TrOCRForCausalLM"),lCo=o(" (TrOCR model)"),iCo=l(),m1=a("li"),ade=a("strong"),dCo=o("xglm"),cCo=o(" \u2014 "),uj=a("a"),fCo=o("XGLMForCausalLM"),mCo=o(" (XGLM model)"),gCo=l(),g1=a("li"),nde=a("strong"),hCo=o("xlm"),pCo=o(" \u2014 "),_j=a("a"),uCo=o("XLMWithLMHeadModel"),_Co=o(" (XLM model)"),bCo=l(),h1=a("li"),sde=a("strong"),vCo=o("xlm-prophetnet"),FCo=o(" \u2014 "),bj=a("a"),TCo=o("XLMProphetNetForCausalLM"),MCo=o(" (XLMProphetNet model)"),ECo=l(),p1=a("li"),lde=a("strong"),CCo=o("xlm-roberta"),wCo=o(" \u2014 "),vj=a("a"),ACo=o("XLMRobertaForCausalLM"),yCo=o(" (XLM-RoBERTa model)"),LCo=l(),u1=a("li"),ide=a("strong"),xCo=o("xlm-roberta-xl"),$Co=o(" \u2014 "),Fj=a("a"),kCo=o("XLMRobertaXLForCausalLM"),SCo=o(" (XLM-RoBERTa-XL model)"),RCo=l(),_1=a("li"),dde=a("strong"),PCo=o("xlnet"),BCo=o(" \u2014 "),Tj=a("a"),ICo=o("XLNetLMHeadModel"),qCo=o(" (XLNet model)"),NCo=l(),b1=a("p"),jCo=o("The model is set in evaluation mode by default using "),cde=a("code"),DCo=o("model.eval()"),GCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),OCo=o("model.train()"),VCo=l(),F(v1.$$.fragment),KIe=l(),Ri=a("h2"),F1=a("a"),mde=a("span"),F(Jy.$$.fragment),XCo=l(),gde=a("span"),zCo=o("AutoModelForMaskedLM"),ZIe=l(),ko=a("div"),F(Yy.$$.fragment),WCo=l(),Pi=a("p"),QCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=a("a"),HCo=o("from_pretrained()"),UCo=o(" class method or the "),Ej=a("a"),JCo=o("from_config()"),YCo=o(` class
method.`),KCo=l(),Ky=a("p"),ZCo=o("This class cannot be instantiated directly using "),hde=a("code"),ewo=o("__init__()"),owo=o(" (throws an error)."),rwo=l(),st=a("div"),F(Zy.$$.fragment),two=l(),pde=a("p"),awo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nwo=l(),Bi=a("p"),swo=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),lwo=o("not"),iwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),dwo=o("from_pretrained()"),cwo=o(" to load the model weights."),fwo=l(),F(T1.$$.fragment),mwo=l(),Ze=a("div"),F(eL.$$.fragment),gwo=l(),_de=a("p"),hwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pwo=l(),ka=a("p"),uwo=o("The model class to instantiate is selected based on the "),bde=a("code"),_wo=o("model_type"),bwo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),vwo=o("pretrained_model_name_or_path"),Fwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),Two=o("pretrained_model_name_or_path"),Mwo=o(":"),Ewo=l(),W=a("ul"),M1=a("li"),Tde=a("strong"),Cwo=o("albert"),wwo=o(" \u2014 "),wj=a("a"),Awo=o("AlbertForMaskedLM"),ywo=o(" (ALBERT model)"),Lwo=l(),E1=a("li"),Mde=a("strong"),xwo=o("bart"),$wo=o(" \u2014 "),Aj=a("a"),kwo=o("BartForConditionalGeneration"),Swo=o(" (BART model)"),Rwo=l(),C1=a("li"),Ede=a("strong"),Pwo=o("bert"),Bwo=o(" \u2014 "),yj=a("a"),Iwo=o("BertForMaskedLM"),qwo=o(" (BERT model)"),Nwo=l(),w1=a("li"),Cde=a("strong"),jwo=o("big_bird"),Dwo=o(" \u2014 "),Lj=a("a"),Gwo=o("BigBirdForMaskedLM"),Owo=o(" (BigBird model)"),Vwo=l(),A1=a("li"),wde=a("strong"),Xwo=o("camembert"),zwo=o(" \u2014 "),xj=a("a"),Wwo=o("CamembertForMaskedLM"),Qwo=o(" (CamemBERT model)"),Hwo=l(),y1=a("li"),Ade=a("strong"),Uwo=o("convbert"),Jwo=o(" \u2014 "),$j=a("a"),Ywo=o("ConvBertForMaskedLM"),Kwo=o(" (ConvBERT model)"),Zwo=l(),L1=a("li"),yde=a("strong"),eAo=o("data2vec-text"),oAo=o(" \u2014 "),kj=a("a"),rAo=o("Data2VecTextForMaskedLM"),tAo=o(" (Data2VecText model)"),aAo=l(),x1=a("li"),Lde=a("strong"),nAo=o("deberta"),sAo=o(" \u2014 "),Sj=a("a"),lAo=o("DebertaForMaskedLM"),iAo=o(" (DeBERTa model)"),dAo=l(),$1=a("li"),xde=a("strong"),cAo=o("deberta-v2"),fAo=o(" \u2014 "),Rj=a("a"),mAo=o("DebertaV2ForMaskedLM"),gAo=o(" (DeBERTa-v2 model)"),hAo=l(),k1=a("li"),$de=a("strong"),pAo=o("distilbert"),uAo=o(" \u2014 "),Pj=a("a"),_Ao=o("DistilBertForMaskedLM"),bAo=o(" (DistilBERT model)"),vAo=l(),S1=a("li"),kde=a("strong"),FAo=o("electra"),TAo=o(" \u2014 "),Bj=a("a"),MAo=o("ElectraForMaskedLM"),EAo=o(" (ELECTRA model)"),CAo=l(),R1=a("li"),Sde=a("strong"),wAo=o("flaubert"),AAo=o(" \u2014 "),Ij=a("a"),yAo=o("FlaubertWithLMHeadModel"),LAo=o(" (FlauBERT model)"),xAo=l(),P1=a("li"),Rde=a("strong"),$Ao=o("fnet"),kAo=o(" \u2014 "),qj=a("a"),SAo=o("FNetForMaskedLM"),RAo=o(" (FNet model)"),PAo=l(),B1=a("li"),Pde=a("strong"),BAo=o("funnel"),IAo=o(" \u2014 "),Nj=a("a"),qAo=o("FunnelForMaskedLM"),NAo=o(" (Funnel Transformer model)"),jAo=l(),I1=a("li"),Bde=a("strong"),DAo=o("ibert"),GAo=o(" \u2014 "),jj=a("a"),OAo=o("IBertForMaskedLM"),VAo=o(" (I-BERT model)"),XAo=l(),q1=a("li"),Ide=a("strong"),zAo=o("layoutlm"),WAo=o(" \u2014 "),Dj=a("a"),QAo=o("LayoutLMForMaskedLM"),HAo=o(" (LayoutLM model)"),UAo=l(),N1=a("li"),qde=a("strong"),JAo=o("longformer"),YAo=o(" \u2014 "),Gj=a("a"),KAo=o("LongformerForMaskedLM"),ZAo=o(" (Longformer model)"),e0o=l(),j1=a("li"),Nde=a("strong"),o0o=o("mbart"),r0o=o(" \u2014 "),Oj=a("a"),t0o=o("MBartForConditionalGeneration"),a0o=o(" (mBART model)"),n0o=l(),D1=a("li"),jde=a("strong"),s0o=o("megatron-bert"),l0o=o(" \u2014 "),Vj=a("a"),i0o=o("MegatronBertForMaskedLM"),d0o=o(" (MegatronBert model)"),c0o=l(),G1=a("li"),Dde=a("strong"),f0o=o("mobilebert"),m0o=o(" \u2014 "),Xj=a("a"),g0o=o("MobileBertForMaskedLM"),h0o=o(" (MobileBERT model)"),p0o=l(),O1=a("li"),Gde=a("strong"),u0o=o("mpnet"),_0o=o(" \u2014 "),zj=a("a"),b0o=o("MPNetForMaskedLM"),v0o=o(" (MPNet model)"),F0o=l(),V1=a("li"),Ode=a("strong"),T0o=o("nystromformer"),M0o=o(" \u2014 "),Wj=a("a"),E0o=o("NystromformerForMaskedLM"),C0o=o(" (Nystromformer model)"),w0o=l(),X1=a("li"),Vde=a("strong"),A0o=o("perceiver"),y0o=o(" \u2014 "),Qj=a("a"),L0o=o("PerceiverForMaskedLM"),x0o=o(" (Perceiver model)"),$0o=l(),z1=a("li"),Xde=a("strong"),k0o=o("qdqbert"),S0o=o(" \u2014 "),Hj=a("a"),R0o=o("QDQBertForMaskedLM"),P0o=o(" (QDQBert model)"),B0o=l(),W1=a("li"),zde=a("strong"),I0o=o("reformer"),q0o=o(" \u2014 "),Uj=a("a"),N0o=o("ReformerForMaskedLM"),j0o=o(" (Reformer model)"),D0o=l(),Q1=a("li"),Wde=a("strong"),G0o=o("rembert"),O0o=o(" \u2014 "),Jj=a("a"),V0o=o("RemBertForMaskedLM"),X0o=o(" (RemBERT model)"),z0o=l(),H1=a("li"),Qde=a("strong"),W0o=o("roberta"),Q0o=o(" \u2014 "),Yj=a("a"),H0o=o("RobertaForMaskedLM"),U0o=o(" (RoBERTa model)"),J0o=l(),U1=a("li"),Hde=a("strong"),Y0o=o("roformer"),K0o=o(" \u2014 "),Kj=a("a"),Z0o=o("RoFormerForMaskedLM"),eyo=o(" (RoFormer model)"),oyo=l(),J1=a("li"),Ude=a("strong"),ryo=o("squeezebert"),tyo=o(" \u2014 "),Zj=a("a"),ayo=o("SqueezeBertForMaskedLM"),nyo=o(" (SqueezeBERT model)"),syo=l(),Y1=a("li"),Jde=a("strong"),lyo=o("tapas"),iyo=o(" \u2014 "),eD=a("a"),dyo=o("TapasForMaskedLM"),cyo=o(" (TAPAS model)"),fyo=l(),K1=a("li"),Yde=a("strong"),myo=o("wav2vec2"),gyo=o(" \u2014 "),Kde=a("code"),hyo=o("Wav2Vec2ForMaskedLM"),pyo=o(" (Wav2Vec2 model)"),uyo=l(),Z1=a("li"),Zde=a("strong"),_yo=o("xlm"),byo=o(" \u2014 "),oD=a("a"),vyo=o("XLMWithLMHeadModel"),Fyo=o(" (XLM model)"),Tyo=l(),eb=a("li"),ece=a("strong"),Myo=o("xlm-roberta"),Eyo=o(" \u2014 "),rD=a("a"),Cyo=o("XLMRobertaForMaskedLM"),wyo=o(" (XLM-RoBERTa model)"),Ayo=l(),ob=a("li"),oce=a("strong"),yyo=o("xlm-roberta-xl"),Lyo=o(" \u2014 "),tD=a("a"),xyo=o("XLMRobertaXLForMaskedLM"),$yo=o(" (XLM-RoBERTa-XL model)"),kyo=l(),rb=a("li"),rce=a("strong"),Syo=o("yoso"),Ryo=o(" \u2014 "),aD=a("a"),Pyo=o("YosoForMaskedLM"),Byo=o(" (YOSO model)"),Iyo=l(),tb=a("p"),qyo=o("The model is set in evaluation mode by default using "),tce=a("code"),Nyo=o("model.eval()"),jyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),Dyo=o("model.train()"),Gyo=l(),F(ab.$$.fragment),eqe=l(),Ii=a("h2"),nb=a("a"),nce=a("span"),F(oL.$$.fragment),Oyo=l(),sce=a("span"),Vyo=o("AutoModelForSeq2SeqLM"),oqe=l(),So=a("div"),F(rL.$$.fragment),Xyo=l(),qi=a("p"),zyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=a("a"),Wyo=o("from_pretrained()"),Qyo=o(" class method or the "),sD=a("a"),Hyo=o("from_config()"),Uyo=o(` class
method.`),Jyo=l(),tL=a("p"),Yyo=o("This class cannot be instantiated directly using "),lce=a("code"),Kyo=o("__init__()"),Zyo=o(" (throws an error)."),eLo=l(),lt=a("div"),F(aL.$$.fragment),oLo=l(),ice=a("p"),rLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tLo=l(),Ni=a("p"),aLo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),nLo=o("not"),sLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),lLo=o("from_pretrained()"),iLo=o(" to load the model weights."),dLo=l(),F(sb.$$.fragment),cLo=l(),eo=a("div"),F(nL.$$.fragment),fLo=l(),cce=a("p"),mLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gLo=l(),Sa=a("p"),hLo=o("The model class to instantiate is selected based on the "),fce=a("code"),pLo=o("model_type"),uLo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),_Lo=o("pretrained_model_name_or_path"),bLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),vLo=o("pretrained_model_name_or_path"),FLo=o(":"),TLo=l(),ue=a("ul"),lb=a("li"),hce=a("strong"),MLo=o("bart"),ELo=o(" \u2014 "),iD=a("a"),CLo=o("BartForConditionalGeneration"),wLo=o(" (BART model)"),ALo=l(),ib=a("li"),pce=a("strong"),yLo=o("bigbird_pegasus"),LLo=o(" \u2014 "),dD=a("a"),xLo=o("BigBirdPegasusForConditionalGeneration"),$Lo=o(" (BigBirdPegasus model)"),kLo=l(),db=a("li"),uce=a("strong"),SLo=o("blenderbot"),RLo=o(" \u2014 "),cD=a("a"),PLo=o("BlenderbotForConditionalGeneration"),BLo=o(" (Blenderbot model)"),ILo=l(),cb=a("li"),_ce=a("strong"),qLo=o("blenderbot-small"),NLo=o(" \u2014 "),fD=a("a"),jLo=o("BlenderbotSmallForConditionalGeneration"),DLo=o(" (BlenderbotSmall model)"),GLo=l(),fb=a("li"),bce=a("strong"),OLo=o("encoder-decoder"),VLo=o(" \u2014 "),mD=a("a"),XLo=o("EncoderDecoderModel"),zLo=o(" (Encoder decoder model)"),WLo=l(),mb=a("li"),vce=a("strong"),QLo=o("fsmt"),HLo=o(" \u2014 "),gD=a("a"),ULo=o("FSMTForConditionalGeneration"),JLo=o(" (FairSeq Machine-Translation model)"),YLo=l(),gb=a("li"),Fce=a("strong"),KLo=o("led"),ZLo=o(" \u2014 "),hD=a("a"),e8o=o("LEDForConditionalGeneration"),o8o=o(" (LED model)"),r8o=l(),hb=a("li"),Tce=a("strong"),t8o=o("m2m_100"),a8o=o(" \u2014 "),pD=a("a"),n8o=o("M2M100ForConditionalGeneration"),s8o=o(" (M2M100 model)"),l8o=l(),pb=a("li"),Mce=a("strong"),i8o=o("marian"),d8o=o(" \u2014 "),uD=a("a"),c8o=o("MarianMTModel"),f8o=o(" (Marian model)"),m8o=l(),ub=a("li"),Ece=a("strong"),g8o=o("mbart"),h8o=o(" \u2014 "),_D=a("a"),p8o=o("MBartForConditionalGeneration"),u8o=o(" (mBART model)"),_8o=l(),_b=a("li"),Cce=a("strong"),b8o=o("mt5"),v8o=o(" \u2014 "),bD=a("a"),F8o=o("MT5ForConditionalGeneration"),T8o=o(" (mT5 model)"),M8o=l(),bb=a("li"),wce=a("strong"),E8o=o("pegasus"),C8o=o(" \u2014 "),vD=a("a"),w8o=o("PegasusForConditionalGeneration"),A8o=o(" (Pegasus model)"),y8o=l(),vb=a("li"),Ace=a("strong"),L8o=o("plbart"),x8o=o(" \u2014 "),FD=a("a"),$8o=o("PLBartForConditionalGeneration"),k8o=o(" (PLBart model)"),S8o=l(),Fb=a("li"),yce=a("strong"),R8o=o("prophetnet"),P8o=o(" \u2014 "),TD=a("a"),B8o=o("ProphetNetForConditionalGeneration"),I8o=o(" (ProphetNet model)"),q8o=l(),Tb=a("li"),Lce=a("strong"),N8o=o("t5"),j8o=o(" \u2014 "),MD=a("a"),D8o=o("T5ForConditionalGeneration"),G8o=o(" (T5 model)"),O8o=l(),Mb=a("li"),xce=a("strong"),V8o=o("xlm-prophetnet"),X8o=o(" \u2014 "),ED=a("a"),z8o=o("XLMProphetNetForConditionalGeneration"),W8o=o(" (XLMProphetNet model)"),Q8o=l(),Eb=a("p"),H8o=o("The model is set in evaluation mode by default using "),$ce=a("code"),U8o=o("model.eval()"),J8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kce=a("code"),Y8o=o("model.train()"),K8o=l(),F(Cb.$$.fragment),rqe=l(),ji=a("h2"),wb=a("a"),Sce=a("span"),F(sL.$$.fragment),Z8o=l(),Rce=a("span"),exo=o("AutoModelForSequenceClassification"),tqe=l(),Ro=a("div"),F(lL.$$.fragment),oxo=l(),Di=a("p"),rxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=a("a"),txo=o("from_pretrained()"),axo=o(" class method or the "),wD=a("a"),nxo=o("from_config()"),sxo=o(` class
method.`),lxo=l(),iL=a("p"),ixo=o("This class cannot be instantiated directly using "),Pce=a("code"),dxo=o("__init__()"),cxo=o(" (throws an error)."),fxo=l(),it=a("div"),F(dL.$$.fragment),mxo=l(),Bce=a("p"),gxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hxo=l(),Gi=a("p"),pxo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),uxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),bxo=o("from_pretrained()"),vxo=o(" to load the model weights."),Fxo=l(),F(Ab.$$.fragment),Txo=l(),oo=a("div"),F(cL.$$.fragment),Mxo=l(),qce=a("p"),Exo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cxo=l(),Ra=a("p"),wxo=o("The model class to instantiate is selected based on the "),Nce=a("code"),Axo=o("model_type"),yxo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),Lxo=o("pretrained_model_name_or_path"),xxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(":"),Sxo=l(),N=a("ul"),yb=a("li"),Gce=a("strong"),Rxo=o("albert"),Pxo=o(" \u2014 "),yD=a("a"),Bxo=o("AlbertForSequenceClassification"),Ixo=o(" (ALBERT model)"),qxo=l(),Lb=a("li"),Oce=a("strong"),Nxo=o("bart"),jxo=o(" \u2014 "),LD=a("a"),Dxo=o("BartForSequenceClassification"),Gxo=o(" (BART model)"),Oxo=l(),xb=a("li"),Vce=a("strong"),Vxo=o("bert"),Xxo=o(" \u2014 "),xD=a("a"),zxo=o("BertForSequenceClassification"),Wxo=o(" (BERT model)"),Qxo=l(),$b=a("li"),Xce=a("strong"),Hxo=o("big_bird"),Uxo=o(" \u2014 "),$D=a("a"),Jxo=o("BigBirdForSequenceClassification"),Yxo=o(" (BigBird model)"),Kxo=l(),kb=a("li"),zce=a("strong"),Zxo=o("bigbird_pegasus"),e7o=o(" \u2014 "),kD=a("a"),o7o=o("BigBirdPegasusForSequenceClassification"),r7o=o(" (BigBirdPegasus model)"),t7o=l(),Sb=a("li"),Wce=a("strong"),a7o=o("camembert"),n7o=o(" \u2014 "),SD=a("a"),s7o=o("CamembertForSequenceClassification"),l7o=o(" (CamemBERT model)"),i7o=l(),Rb=a("li"),Qce=a("strong"),d7o=o("canine"),c7o=o(" \u2014 "),RD=a("a"),f7o=o("CanineForSequenceClassification"),m7o=o(" (Canine model)"),g7o=l(),Pb=a("li"),Hce=a("strong"),h7o=o("convbert"),p7o=o(" \u2014 "),PD=a("a"),u7o=o("ConvBertForSequenceClassification"),_7o=o(" (ConvBERT model)"),b7o=l(),Bb=a("li"),Uce=a("strong"),v7o=o("ctrl"),F7o=o(" \u2014 "),BD=a("a"),T7o=o("CTRLForSequenceClassification"),M7o=o(" (CTRL model)"),E7o=l(),Ib=a("li"),Jce=a("strong"),C7o=o("data2vec-text"),w7o=o(" \u2014 "),ID=a("a"),A7o=o("Data2VecTextForSequenceClassification"),y7o=o(" (Data2VecText model)"),L7o=l(),qb=a("li"),Yce=a("strong"),x7o=o("deberta"),$7o=o(" \u2014 "),qD=a("a"),k7o=o("DebertaForSequenceClassification"),S7o=o(" (DeBERTa model)"),R7o=l(),Nb=a("li"),Kce=a("strong"),P7o=o("deberta-v2"),B7o=o(" \u2014 "),ND=a("a"),I7o=o("DebertaV2ForSequenceClassification"),q7o=o(" (DeBERTa-v2 model)"),N7o=l(),jb=a("li"),Zce=a("strong"),j7o=o("distilbert"),D7o=o(" \u2014 "),jD=a("a"),G7o=o("DistilBertForSequenceClassification"),O7o=o(" (DistilBERT model)"),V7o=l(),Db=a("li"),efe=a("strong"),X7o=o("electra"),z7o=o(" \u2014 "),DD=a("a"),W7o=o("ElectraForSequenceClassification"),Q7o=o(" (ELECTRA model)"),H7o=l(),Gb=a("li"),ofe=a("strong"),U7o=o("flaubert"),J7o=o(" \u2014 "),GD=a("a"),Y7o=o("FlaubertForSequenceClassification"),K7o=o(" (FlauBERT model)"),Z7o=l(),Ob=a("li"),rfe=a("strong"),e9o=o("fnet"),o9o=o(" \u2014 "),OD=a("a"),r9o=o("FNetForSequenceClassification"),t9o=o(" (FNet model)"),a9o=l(),Vb=a("li"),tfe=a("strong"),n9o=o("funnel"),s9o=o(" \u2014 "),VD=a("a"),l9o=o("FunnelForSequenceClassification"),i9o=o(" (Funnel Transformer model)"),d9o=l(),Xb=a("li"),afe=a("strong"),c9o=o("gpt2"),f9o=o(" \u2014 "),XD=a("a"),m9o=o("GPT2ForSequenceClassification"),g9o=o(" (OpenAI GPT-2 model)"),h9o=l(),zb=a("li"),nfe=a("strong"),p9o=o("gpt_neo"),u9o=o(" \u2014 "),zD=a("a"),_9o=o("GPTNeoForSequenceClassification"),b9o=o(" (GPT Neo model)"),v9o=l(),Wb=a("li"),sfe=a("strong"),F9o=o("gptj"),T9o=o(" \u2014 "),WD=a("a"),M9o=o("GPTJForSequenceClassification"),E9o=o(" (GPT-J model)"),C9o=l(),Qb=a("li"),lfe=a("strong"),w9o=o("ibert"),A9o=o(" \u2014 "),QD=a("a"),y9o=o("IBertForSequenceClassification"),L9o=o(" (I-BERT model)"),x9o=l(),Hb=a("li"),ife=a("strong"),$9o=o("layoutlm"),k9o=o(" \u2014 "),HD=a("a"),S9o=o("LayoutLMForSequenceClassification"),R9o=o(" (LayoutLM model)"),P9o=l(),Ub=a("li"),dfe=a("strong"),B9o=o("layoutlmv2"),I9o=o(" \u2014 "),UD=a("a"),q9o=o("LayoutLMv2ForSequenceClassification"),N9o=o(" (LayoutLMv2 model)"),j9o=l(),Jb=a("li"),cfe=a("strong"),D9o=o("led"),G9o=o(" \u2014 "),JD=a("a"),O9o=o("LEDForSequenceClassification"),V9o=o(" (LED model)"),X9o=l(),Yb=a("li"),ffe=a("strong"),z9o=o("longformer"),W9o=o(" \u2014 "),YD=a("a"),Q9o=o("LongformerForSequenceClassification"),H9o=o(" (Longformer model)"),U9o=l(),Kb=a("li"),mfe=a("strong"),J9o=o("mbart"),Y9o=o(" \u2014 "),KD=a("a"),K9o=o("MBartForSequenceClassification"),Z9o=o(" (mBART model)"),e$o=l(),Zb=a("li"),gfe=a("strong"),o$o=o("megatron-bert"),r$o=o(" \u2014 "),ZD=a("a"),t$o=o("MegatronBertForSequenceClassification"),a$o=o(" (MegatronBert model)"),n$o=l(),e2=a("li"),hfe=a("strong"),s$o=o("mobilebert"),l$o=o(" \u2014 "),eG=a("a"),i$o=o("MobileBertForSequenceClassification"),d$o=o(" (MobileBERT model)"),c$o=l(),o2=a("li"),pfe=a("strong"),f$o=o("mpnet"),m$o=o(" \u2014 "),oG=a("a"),g$o=o("MPNetForSequenceClassification"),h$o=o(" (MPNet model)"),p$o=l(),r2=a("li"),ufe=a("strong"),u$o=o("nystromformer"),_$o=o(" \u2014 "),rG=a("a"),b$o=o("NystromformerForSequenceClassification"),v$o=o(" (Nystromformer model)"),F$o=l(),t2=a("li"),_fe=a("strong"),T$o=o("openai-gpt"),M$o=o(" \u2014 "),tG=a("a"),E$o=o("OpenAIGPTForSequenceClassification"),C$o=o(" (OpenAI GPT model)"),w$o=l(),a2=a("li"),bfe=a("strong"),A$o=o("perceiver"),y$o=o(" \u2014 "),aG=a("a"),L$o=o("PerceiverForSequenceClassification"),x$o=o(" (Perceiver model)"),$$o=l(),n2=a("li"),vfe=a("strong"),k$o=o("plbart"),S$o=o(" \u2014 "),nG=a("a"),R$o=o("PLBartForSequenceClassification"),P$o=o(" (PLBart model)"),B$o=l(),s2=a("li"),Ffe=a("strong"),I$o=o("qdqbert"),q$o=o(" \u2014 "),sG=a("a"),N$o=o("QDQBertForSequenceClassification"),j$o=o(" (QDQBert model)"),D$o=l(),l2=a("li"),Tfe=a("strong"),G$o=o("reformer"),O$o=o(" \u2014 "),lG=a("a"),V$o=o("ReformerForSequenceClassification"),X$o=o(" (Reformer model)"),z$o=l(),i2=a("li"),Mfe=a("strong"),W$o=o("rembert"),Q$o=o(" \u2014 "),iG=a("a"),H$o=o("RemBertForSequenceClassification"),U$o=o(" (RemBERT model)"),J$o=l(),d2=a("li"),Efe=a("strong"),Y$o=o("roberta"),K$o=o(" \u2014 "),dG=a("a"),Z$o=o("RobertaForSequenceClassification"),eko=o(" (RoBERTa model)"),oko=l(),c2=a("li"),Cfe=a("strong"),rko=o("roformer"),tko=o(" \u2014 "),cG=a("a"),ako=o("RoFormerForSequenceClassification"),nko=o(" (RoFormer model)"),sko=l(),f2=a("li"),wfe=a("strong"),lko=o("squeezebert"),iko=o(" \u2014 "),fG=a("a"),dko=o("SqueezeBertForSequenceClassification"),cko=o(" (SqueezeBERT model)"),fko=l(),m2=a("li"),Afe=a("strong"),mko=o("tapas"),gko=o(" \u2014 "),mG=a("a"),hko=o("TapasForSequenceClassification"),pko=o(" (TAPAS model)"),uko=l(),g2=a("li"),yfe=a("strong"),_ko=o("transfo-xl"),bko=o(" \u2014 "),gG=a("a"),vko=o("TransfoXLForSequenceClassification"),Fko=o(" (Transformer-XL model)"),Tko=l(),h2=a("li"),Lfe=a("strong"),Mko=o("xlm"),Eko=o(" \u2014 "),hG=a("a"),Cko=o("XLMForSequenceClassification"),wko=o(" (XLM model)"),Ako=l(),p2=a("li"),xfe=a("strong"),yko=o("xlm-roberta"),Lko=o(" \u2014 "),pG=a("a"),xko=o("XLMRobertaForSequenceClassification"),$ko=o(" (XLM-RoBERTa model)"),kko=l(),u2=a("li"),$fe=a("strong"),Sko=o("xlm-roberta-xl"),Rko=o(" \u2014 "),uG=a("a"),Pko=o("XLMRobertaXLForSequenceClassification"),Bko=o(" (XLM-RoBERTa-XL model)"),Iko=l(),_2=a("li"),kfe=a("strong"),qko=o("xlnet"),Nko=o(" \u2014 "),_G=a("a"),jko=o("XLNetForSequenceClassification"),Dko=o(" (XLNet model)"),Gko=l(),b2=a("li"),Sfe=a("strong"),Oko=o("yoso"),Vko=o(" \u2014 "),bG=a("a"),Xko=o("YosoForSequenceClassification"),zko=o(" (YOSO model)"),Wko=l(),v2=a("p"),Qko=o("The model is set in evaluation mode by default using "),Rfe=a("code"),Hko=o("model.eval()"),Uko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),Jko=o("model.train()"),Yko=l(),F(F2.$$.fragment),aqe=l(),Oi=a("h2"),T2=a("a"),Bfe=a("span"),F(fL.$$.fragment),Kko=l(),Ife=a("span"),Zko=o("AutoModelForMultipleChoice"),nqe=l(),Po=a("div"),F(mL.$$.fragment),eSo=l(),Vi=a("p"),oSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=a("a"),rSo=o("from_pretrained()"),tSo=o(" class method or the "),FG=a("a"),aSo=o("from_config()"),nSo=o(` class
method.`),sSo=l(),gL=a("p"),lSo=o("This class cannot be instantiated directly using "),qfe=a("code"),iSo=o("__init__()"),dSo=o(" (throws an error)."),cSo=l(),dt=a("div"),F(hL.$$.fragment),fSo=l(),Nfe=a("p"),mSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gSo=l(),Xi=a("p"),hSo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),pSo=o("not"),uSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),_So=o("from_pretrained()"),bSo=o(" to load the model weights."),vSo=l(),F(M2.$$.fragment),FSo=l(),ro=a("div"),F(pL.$$.fragment),TSo=l(),Dfe=a("p"),MSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ESo=l(),Pa=a("p"),CSo=o("The model class to instantiate is selected based on the "),Gfe=a("code"),wSo=o("model_type"),ASo=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),ySo=o("pretrained_model_name_or_path"),LSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),xSo=o("pretrained_model_name_or_path"),$So=o(":"),kSo=l(),Y=a("ul"),E2=a("li"),Xfe=a("strong"),SSo=o("albert"),RSo=o(" \u2014 "),MG=a("a"),PSo=o("AlbertForMultipleChoice"),BSo=o(" (ALBERT model)"),ISo=l(),C2=a("li"),zfe=a("strong"),qSo=o("bert"),NSo=o(" \u2014 "),EG=a("a"),jSo=o("BertForMultipleChoice"),DSo=o(" (BERT model)"),GSo=l(),w2=a("li"),Wfe=a("strong"),OSo=o("big_bird"),VSo=o(" \u2014 "),CG=a("a"),XSo=o("BigBirdForMultipleChoice"),zSo=o(" (BigBird model)"),WSo=l(),A2=a("li"),Qfe=a("strong"),QSo=o("camembert"),HSo=o(" \u2014 "),wG=a("a"),USo=o("CamembertForMultipleChoice"),JSo=o(" (CamemBERT model)"),YSo=l(),y2=a("li"),Hfe=a("strong"),KSo=o("canine"),ZSo=o(" \u2014 "),AG=a("a"),eRo=o("CanineForMultipleChoice"),oRo=o(" (Canine model)"),rRo=l(),L2=a("li"),Ufe=a("strong"),tRo=o("convbert"),aRo=o(" \u2014 "),yG=a("a"),nRo=o("ConvBertForMultipleChoice"),sRo=o(" (ConvBERT model)"),lRo=l(),x2=a("li"),Jfe=a("strong"),iRo=o("data2vec-text"),dRo=o(" \u2014 "),LG=a("a"),cRo=o("Data2VecTextForMultipleChoice"),fRo=o(" (Data2VecText model)"),mRo=l(),$2=a("li"),Yfe=a("strong"),gRo=o("deberta-v2"),hRo=o(" \u2014 "),xG=a("a"),pRo=o("DebertaV2ForMultipleChoice"),uRo=o(" (DeBERTa-v2 model)"),_Ro=l(),k2=a("li"),Kfe=a("strong"),bRo=o("distilbert"),vRo=o(" \u2014 "),$G=a("a"),FRo=o("DistilBertForMultipleChoice"),TRo=o(" (DistilBERT model)"),MRo=l(),S2=a("li"),Zfe=a("strong"),ERo=o("electra"),CRo=o(" \u2014 "),kG=a("a"),wRo=o("ElectraForMultipleChoice"),ARo=o(" (ELECTRA model)"),yRo=l(),R2=a("li"),eme=a("strong"),LRo=o("flaubert"),xRo=o(" \u2014 "),SG=a("a"),$Ro=o("FlaubertForMultipleChoice"),kRo=o(" (FlauBERT model)"),SRo=l(),P2=a("li"),ome=a("strong"),RRo=o("fnet"),PRo=o(" \u2014 "),RG=a("a"),BRo=o("FNetForMultipleChoice"),IRo=o(" (FNet model)"),qRo=l(),B2=a("li"),rme=a("strong"),NRo=o("funnel"),jRo=o(" \u2014 "),PG=a("a"),DRo=o("FunnelForMultipleChoice"),GRo=o(" (Funnel Transformer model)"),ORo=l(),I2=a("li"),tme=a("strong"),VRo=o("ibert"),XRo=o(" \u2014 "),BG=a("a"),zRo=o("IBertForMultipleChoice"),WRo=o(" (I-BERT model)"),QRo=l(),q2=a("li"),ame=a("strong"),HRo=o("longformer"),URo=o(" \u2014 "),IG=a("a"),JRo=o("LongformerForMultipleChoice"),YRo=o(" (Longformer model)"),KRo=l(),N2=a("li"),nme=a("strong"),ZRo=o("megatron-bert"),ePo=o(" \u2014 "),qG=a("a"),oPo=o("MegatronBertForMultipleChoice"),rPo=o(" (MegatronBert model)"),tPo=l(),j2=a("li"),sme=a("strong"),aPo=o("mobilebert"),nPo=o(" \u2014 "),NG=a("a"),sPo=o("MobileBertForMultipleChoice"),lPo=o(" (MobileBERT model)"),iPo=l(),D2=a("li"),lme=a("strong"),dPo=o("mpnet"),cPo=o(" \u2014 "),jG=a("a"),fPo=o("MPNetForMultipleChoice"),mPo=o(" (MPNet model)"),gPo=l(),G2=a("li"),ime=a("strong"),hPo=o("nystromformer"),pPo=o(" \u2014 "),DG=a("a"),uPo=o("NystromformerForMultipleChoice"),_Po=o(" (Nystromformer model)"),bPo=l(),O2=a("li"),dme=a("strong"),vPo=o("qdqbert"),FPo=o(" \u2014 "),GG=a("a"),TPo=o("QDQBertForMultipleChoice"),MPo=o(" (QDQBert model)"),EPo=l(),V2=a("li"),cme=a("strong"),CPo=o("rembert"),wPo=o(" \u2014 "),OG=a("a"),APo=o("RemBertForMultipleChoice"),yPo=o(" (RemBERT model)"),LPo=l(),X2=a("li"),fme=a("strong"),xPo=o("roberta"),$Po=o(" \u2014 "),VG=a("a"),kPo=o("RobertaForMultipleChoice"),SPo=o(" (RoBERTa model)"),RPo=l(),z2=a("li"),mme=a("strong"),PPo=o("roformer"),BPo=o(" \u2014 "),XG=a("a"),IPo=o("RoFormerForMultipleChoice"),qPo=o(" (RoFormer model)"),NPo=l(),W2=a("li"),gme=a("strong"),jPo=o("squeezebert"),DPo=o(" \u2014 "),zG=a("a"),GPo=o("SqueezeBertForMultipleChoice"),OPo=o(" (SqueezeBERT model)"),VPo=l(),Q2=a("li"),hme=a("strong"),XPo=o("xlm"),zPo=o(" \u2014 "),WG=a("a"),WPo=o("XLMForMultipleChoice"),QPo=o(" (XLM model)"),HPo=l(),H2=a("li"),pme=a("strong"),UPo=o("xlm-roberta"),JPo=o(" \u2014 "),QG=a("a"),YPo=o("XLMRobertaForMultipleChoice"),KPo=o(" (XLM-RoBERTa model)"),ZPo=l(),U2=a("li"),ume=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),HG=a("a"),rBo=o("XLMRobertaXLForMultipleChoice"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),J2=a("li"),_me=a("strong"),nBo=o("xlnet"),sBo=o(" \u2014 "),UG=a("a"),lBo=o("XLNetForMultipleChoice"),iBo=o(" (XLNet model)"),dBo=l(),Y2=a("li"),bme=a("strong"),cBo=o("yoso"),fBo=o(" \u2014 "),JG=a("a"),mBo=o("YosoForMultipleChoice"),gBo=o(" (YOSO model)"),hBo=l(),K2=a("p"),pBo=o("The model is set in evaluation mode by default using "),vme=a("code"),uBo=o("model.eval()"),_Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),bBo=o("model.train()"),vBo=l(),F(Z2.$$.fragment),sqe=l(),zi=a("h2"),e4=a("a"),Tme=a("span"),F(uL.$$.fragment),FBo=l(),Mme=a("span"),TBo=o("AutoModelForNextSentencePrediction"),lqe=l(),Bo=a("div"),F(_L.$$.fragment),MBo=l(),Wi=a("p"),EBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=a("a"),CBo=o("from_pretrained()"),wBo=o(" class method or the "),KG=a("a"),ABo=o("from_config()"),yBo=o(` class
method.`),LBo=l(),bL=a("p"),xBo=o("This class cannot be instantiated directly using "),Eme=a("code"),$Bo=o("__init__()"),kBo=o(" (throws an error)."),SBo=l(),ct=a("div"),F(vL.$$.fragment),RBo=l(),Cme=a("p"),PBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BBo=l(),Qi=a("p"),IBo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),qBo=o("not"),NBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),jBo=o("from_pretrained()"),DBo=o(" to load the model weights."),GBo=l(),F(o4.$$.fragment),OBo=l(),to=a("div"),F(FL.$$.fragment),VBo=l(),Ame=a("p"),XBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zBo=l(),Ba=a("p"),WBo=o("The model class to instantiate is selected based on the "),yme=a("code"),QBo=o("model_type"),HBo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),UBo=o("pretrained_model_name_or_path"),JBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(":"),ZBo=l(),Yr=a("ul"),r4=a("li"),$me=a("strong"),eIo=o("bert"),oIo=o(" \u2014 "),eO=a("a"),rIo=o("BertForNextSentencePrediction"),tIo=o(" (BERT model)"),aIo=l(),t4=a("li"),kme=a("strong"),nIo=o("fnet"),sIo=o(" \u2014 "),oO=a("a"),lIo=o("FNetForNextSentencePrediction"),iIo=o(" (FNet model)"),dIo=l(),a4=a("li"),Sme=a("strong"),cIo=o("megatron-bert"),fIo=o(" \u2014 "),rO=a("a"),mIo=o("MegatronBertForNextSentencePrediction"),gIo=o(" (MegatronBert model)"),hIo=l(),n4=a("li"),Rme=a("strong"),pIo=o("mobilebert"),uIo=o(" \u2014 "),tO=a("a"),_Io=o("MobileBertForNextSentencePrediction"),bIo=o(" (MobileBERT model)"),vIo=l(),s4=a("li"),Pme=a("strong"),FIo=o("qdqbert"),TIo=o(" \u2014 "),aO=a("a"),MIo=o("QDQBertForNextSentencePrediction"),EIo=o(" (QDQBert model)"),CIo=l(),l4=a("p"),wIo=o("The model is set in evaluation mode by default using "),Bme=a("code"),AIo=o("model.eval()"),yIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),LIo=o("model.train()"),xIo=l(),F(i4.$$.fragment),iqe=l(),Hi=a("h2"),d4=a("a"),qme=a("span"),F(TL.$$.fragment),$Io=l(),Nme=a("span"),kIo=o("AutoModelForTokenClassification"),dqe=l(),Io=a("div"),F(ML.$$.fragment),SIo=l(),Ui=a("p"),RIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=a("a"),PIo=o("from_pretrained()"),BIo=o(" class method or the "),sO=a("a"),IIo=o("from_config()"),qIo=o(` class
method.`),NIo=l(),EL=a("p"),jIo=o("This class cannot be instantiated directly using "),jme=a("code"),DIo=o("__init__()"),GIo=o(" (throws an error)."),OIo=l(),ft=a("div"),F(CL.$$.fragment),VIo=l(),Dme=a("p"),XIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zIo=l(),Ji=a("p"),WIo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),QIo=o("not"),HIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),UIo=o("from_pretrained()"),JIo=o(" to load the model weights."),YIo=l(),F(c4.$$.fragment),KIo=l(),ao=a("div"),F(wL.$$.fragment),ZIo=l(),Ome=a("p"),eqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oqo=l(),Ia=a("p"),rqo=o("The model class to instantiate is selected based on the "),Vme=a("code"),tqo=o("model_type"),aqo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),nqo=o("pretrained_model_name_or_path"),sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),lqo=o("pretrained_model_name_or_path"),iqo=o(":"),dqo=l(),U=a("ul"),f4=a("li"),Wme=a("strong"),cqo=o("albert"),fqo=o(" \u2014 "),iO=a("a"),mqo=o("AlbertForTokenClassification"),gqo=o(" (ALBERT model)"),hqo=l(),m4=a("li"),Qme=a("strong"),pqo=o("bert"),uqo=o(" \u2014 "),dO=a("a"),_qo=o("BertForTokenClassification"),bqo=o(" (BERT model)"),vqo=l(),g4=a("li"),Hme=a("strong"),Fqo=o("big_bird"),Tqo=o(" \u2014 "),cO=a("a"),Mqo=o("BigBirdForTokenClassification"),Eqo=o(" (BigBird model)"),Cqo=l(),h4=a("li"),Ume=a("strong"),wqo=o("camembert"),Aqo=o(" \u2014 "),fO=a("a"),yqo=o("CamembertForTokenClassification"),Lqo=o(" (CamemBERT model)"),xqo=l(),p4=a("li"),Jme=a("strong"),$qo=o("canine"),kqo=o(" \u2014 "),mO=a("a"),Sqo=o("CanineForTokenClassification"),Rqo=o(" (Canine model)"),Pqo=l(),u4=a("li"),Yme=a("strong"),Bqo=o("convbert"),Iqo=o(" \u2014 "),gO=a("a"),qqo=o("ConvBertForTokenClassification"),Nqo=o(" (ConvBERT model)"),jqo=l(),_4=a("li"),Kme=a("strong"),Dqo=o("data2vec-text"),Gqo=o(" \u2014 "),hO=a("a"),Oqo=o("Data2VecTextForTokenClassification"),Vqo=o(" (Data2VecText model)"),Xqo=l(),b4=a("li"),Zme=a("strong"),zqo=o("deberta"),Wqo=o(" \u2014 "),pO=a("a"),Qqo=o("DebertaForTokenClassification"),Hqo=o(" (DeBERTa model)"),Uqo=l(),v4=a("li"),ege=a("strong"),Jqo=o("deberta-v2"),Yqo=o(" \u2014 "),uO=a("a"),Kqo=o("DebertaV2ForTokenClassification"),Zqo=o(" (DeBERTa-v2 model)"),eNo=l(),F4=a("li"),oge=a("strong"),oNo=o("distilbert"),rNo=o(" \u2014 "),_O=a("a"),tNo=o("DistilBertForTokenClassification"),aNo=o(" (DistilBERT model)"),nNo=l(),T4=a("li"),rge=a("strong"),sNo=o("electra"),lNo=o(" \u2014 "),bO=a("a"),iNo=o("ElectraForTokenClassification"),dNo=o(" (ELECTRA model)"),cNo=l(),M4=a("li"),tge=a("strong"),fNo=o("flaubert"),mNo=o(" \u2014 "),vO=a("a"),gNo=o("FlaubertForTokenClassification"),hNo=o(" (FlauBERT model)"),pNo=l(),E4=a("li"),age=a("strong"),uNo=o("fnet"),_No=o(" \u2014 "),FO=a("a"),bNo=o("FNetForTokenClassification"),vNo=o(" (FNet model)"),FNo=l(),C4=a("li"),nge=a("strong"),TNo=o("funnel"),MNo=o(" \u2014 "),TO=a("a"),ENo=o("FunnelForTokenClassification"),CNo=o(" (Funnel Transformer model)"),wNo=l(),w4=a("li"),sge=a("strong"),ANo=o("gpt2"),yNo=o(" \u2014 "),MO=a("a"),LNo=o("GPT2ForTokenClassification"),xNo=o(" (OpenAI GPT-2 model)"),$No=l(),A4=a("li"),lge=a("strong"),kNo=o("ibert"),SNo=o(" \u2014 "),EO=a("a"),RNo=o("IBertForTokenClassification"),PNo=o(" (I-BERT model)"),BNo=l(),y4=a("li"),ige=a("strong"),INo=o("layoutlm"),qNo=o(" \u2014 "),CO=a("a"),NNo=o("LayoutLMForTokenClassification"),jNo=o(" (LayoutLM model)"),DNo=l(),L4=a("li"),dge=a("strong"),GNo=o("layoutlmv2"),ONo=o(" \u2014 "),wO=a("a"),VNo=o("LayoutLMv2ForTokenClassification"),XNo=o(" (LayoutLMv2 model)"),zNo=l(),x4=a("li"),cge=a("strong"),WNo=o("longformer"),QNo=o(" \u2014 "),AO=a("a"),HNo=o("LongformerForTokenClassification"),UNo=o(" (Longformer model)"),JNo=l(),$4=a("li"),fge=a("strong"),YNo=o("megatron-bert"),KNo=o(" \u2014 "),yO=a("a"),ZNo=o("MegatronBertForTokenClassification"),ejo=o(" (MegatronBert model)"),ojo=l(),k4=a("li"),mge=a("strong"),rjo=o("mobilebert"),tjo=o(" \u2014 "),LO=a("a"),ajo=o("MobileBertForTokenClassification"),njo=o(" (MobileBERT model)"),sjo=l(),S4=a("li"),gge=a("strong"),ljo=o("mpnet"),ijo=o(" \u2014 "),xO=a("a"),djo=o("MPNetForTokenClassification"),cjo=o(" (MPNet model)"),fjo=l(),R4=a("li"),hge=a("strong"),mjo=o("nystromformer"),gjo=o(" \u2014 "),$O=a("a"),hjo=o("NystromformerForTokenClassification"),pjo=o(" (Nystromformer model)"),ujo=l(),P4=a("li"),pge=a("strong"),_jo=o("qdqbert"),bjo=o(" \u2014 "),kO=a("a"),vjo=o("QDQBertForTokenClassification"),Fjo=o(" (QDQBert model)"),Tjo=l(),B4=a("li"),uge=a("strong"),Mjo=o("rembert"),Ejo=o(" \u2014 "),SO=a("a"),Cjo=o("RemBertForTokenClassification"),wjo=o(" (RemBERT model)"),Ajo=l(),I4=a("li"),_ge=a("strong"),yjo=o("roberta"),Ljo=o(" \u2014 "),RO=a("a"),xjo=o("RobertaForTokenClassification"),$jo=o(" (RoBERTa model)"),kjo=l(),q4=a("li"),bge=a("strong"),Sjo=o("roformer"),Rjo=o(" \u2014 "),PO=a("a"),Pjo=o("RoFormerForTokenClassification"),Bjo=o(" (RoFormer model)"),Ijo=l(),N4=a("li"),vge=a("strong"),qjo=o("squeezebert"),Njo=o(" \u2014 "),BO=a("a"),jjo=o("SqueezeBertForTokenClassification"),Djo=o(" (SqueezeBERT model)"),Gjo=l(),j4=a("li"),Fge=a("strong"),Ojo=o("xlm"),Vjo=o(" \u2014 "),IO=a("a"),Xjo=o("XLMForTokenClassification"),zjo=o(" (XLM model)"),Wjo=l(),D4=a("li"),Tge=a("strong"),Qjo=o("xlm-roberta"),Hjo=o(" \u2014 "),qO=a("a"),Ujo=o("XLMRobertaForTokenClassification"),Jjo=o(" (XLM-RoBERTa model)"),Yjo=l(),G4=a("li"),Mge=a("strong"),Kjo=o("xlm-roberta-xl"),Zjo=o(" \u2014 "),NO=a("a"),eDo=o("XLMRobertaXLForTokenClassification"),oDo=o(" (XLM-RoBERTa-XL model)"),rDo=l(),O4=a("li"),Ege=a("strong"),tDo=o("xlnet"),aDo=o(" \u2014 "),jO=a("a"),nDo=o("XLNetForTokenClassification"),sDo=o(" (XLNet model)"),lDo=l(),V4=a("li"),Cge=a("strong"),iDo=o("yoso"),dDo=o(" \u2014 "),DO=a("a"),cDo=o("YosoForTokenClassification"),fDo=o(" (YOSO model)"),mDo=l(),X4=a("p"),gDo=o("The model is set in evaluation mode by default using "),wge=a("code"),hDo=o("model.eval()"),pDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=a("code"),uDo=o("model.train()"),_Do=l(),F(z4.$$.fragment),cqe=l(),Yi=a("h2"),W4=a("a"),yge=a("span"),F(AL.$$.fragment),bDo=l(),Lge=a("span"),vDo=o("AutoModelForQuestionAnswering"),fqe=l(),qo=a("div"),F(yL.$$.fragment),FDo=l(),Ki=a("p"),TDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=a("a"),MDo=o("from_pretrained()"),EDo=o(" class method or the "),OO=a("a"),CDo=o("from_config()"),wDo=o(` class
method.`),ADo=l(),LL=a("p"),yDo=o("This class cannot be instantiated directly using "),xge=a("code"),LDo=o("__init__()"),xDo=o(" (throws an error)."),$Do=l(),mt=a("div"),F(xL.$$.fragment),kDo=l(),$ge=a("p"),SDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RDo=l(),Zi=a("p"),PDo=o(`Note:
Loading a model from its configuration file does `),kge=a("strong"),BDo=o("not"),IDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),qDo=o("from_pretrained()"),NDo=o(" to load the model weights."),jDo=l(),F(Q4.$$.fragment),DDo=l(),no=a("div"),F($L.$$.fragment),GDo=l(),Sge=a("p"),ODo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VDo=l(),qa=a("p"),XDo=o("The model class to instantiate is selected based on the "),Rge=a("code"),zDo=o("model_type"),WDo=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),QDo=o("pretrained_model_name_or_path"),HDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),UDo=o("pretrained_model_name_or_path"),JDo=o(":"),YDo=l(),V=a("ul"),H4=a("li"),Ige=a("strong"),KDo=o("albert"),ZDo=o(" \u2014 "),XO=a("a"),eGo=o("AlbertForQuestionAnswering"),oGo=o(" (ALBERT model)"),rGo=l(),U4=a("li"),qge=a("strong"),tGo=o("bart"),aGo=o(" \u2014 "),zO=a("a"),nGo=o("BartForQuestionAnswering"),sGo=o(" (BART model)"),lGo=l(),J4=a("li"),Nge=a("strong"),iGo=o("bert"),dGo=o(" \u2014 "),WO=a("a"),cGo=o("BertForQuestionAnswering"),fGo=o(" (BERT model)"),mGo=l(),Y4=a("li"),jge=a("strong"),gGo=o("big_bird"),hGo=o(" \u2014 "),QO=a("a"),pGo=o("BigBirdForQuestionAnswering"),uGo=o(" (BigBird model)"),_Go=l(),K4=a("li"),Dge=a("strong"),bGo=o("bigbird_pegasus"),vGo=o(" \u2014 "),HO=a("a"),FGo=o("BigBirdPegasusForQuestionAnswering"),TGo=o(" (BigBirdPegasus model)"),MGo=l(),Z4=a("li"),Gge=a("strong"),EGo=o("camembert"),CGo=o(" \u2014 "),UO=a("a"),wGo=o("CamembertForQuestionAnswering"),AGo=o(" (CamemBERT model)"),yGo=l(),e5=a("li"),Oge=a("strong"),LGo=o("canine"),xGo=o(" \u2014 "),JO=a("a"),$Go=o("CanineForQuestionAnswering"),kGo=o(" (Canine model)"),SGo=l(),o5=a("li"),Vge=a("strong"),RGo=o("convbert"),PGo=o(" \u2014 "),YO=a("a"),BGo=o("ConvBertForQuestionAnswering"),IGo=o(" (ConvBERT model)"),qGo=l(),r5=a("li"),Xge=a("strong"),NGo=o("data2vec-text"),jGo=o(" \u2014 "),KO=a("a"),DGo=o("Data2VecTextForQuestionAnswering"),GGo=o(" (Data2VecText model)"),OGo=l(),t5=a("li"),zge=a("strong"),VGo=o("deberta"),XGo=o(" \u2014 "),ZO=a("a"),zGo=o("DebertaForQuestionAnswering"),WGo=o(" (DeBERTa model)"),QGo=l(),a5=a("li"),Wge=a("strong"),HGo=o("deberta-v2"),UGo=o(" \u2014 "),eV=a("a"),JGo=o("DebertaV2ForQuestionAnswering"),YGo=o(" (DeBERTa-v2 model)"),KGo=l(),n5=a("li"),Qge=a("strong"),ZGo=o("distilbert"),eOo=o(" \u2014 "),oV=a("a"),oOo=o("DistilBertForQuestionAnswering"),rOo=o(" (DistilBERT model)"),tOo=l(),s5=a("li"),Hge=a("strong"),aOo=o("electra"),nOo=o(" \u2014 "),rV=a("a"),sOo=o("ElectraForQuestionAnswering"),lOo=o(" (ELECTRA model)"),iOo=l(),l5=a("li"),Uge=a("strong"),dOo=o("flaubert"),cOo=o(" \u2014 "),tV=a("a"),fOo=o("FlaubertForQuestionAnsweringSimple"),mOo=o(" (FlauBERT model)"),gOo=l(),i5=a("li"),Jge=a("strong"),hOo=o("fnet"),pOo=o(" \u2014 "),aV=a("a"),uOo=o("FNetForQuestionAnswering"),_Oo=o(" (FNet model)"),bOo=l(),d5=a("li"),Yge=a("strong"),vOo=o("funnel"),FOo=o(" \u2014 "),nV=a("a"),TOo=o("FunnelForQuestionAnswering"),MOo=o(" (Funnel Transformer model)"),EOo=l(),c5=a("li"),Kge=a("strong"),COo=o("gptj"),wOo=o(" \u2014 "),sV=a("a"),AOo=o("GPTJForQuestionAnswering"),yOo=o(" (GPT-J model)"),LOo=l(),f5=a("li"),Zge=a("strong"),xOo=o("ibert"),$Oo=o(" \u2014 "),lV=a("a"),kOo=o("IBertForQuestionAnswering"),SOo=o(" (I-BERT model)"),ROo=l(),m5=a("li"),ehe=a("strong"),POo=o("layoutlmv2"),BOo=o(" \u2014 "),iV=a("a"),IOo=o("LayoutLMv2ForQuestionAnswering"),qOo=o(" (LayoutLMv2 model)"),NOo=l(),g5=a("li"),ohe=a("strong"),jOo=o("led"),DOo=o(" \u2014 "),dV=a("a"),GOo=o("LEDForQuestionAnswering"),OOo=o(" (LED model)"),VOo=l(),h5=a("li"),rhe=a("strong"),XOo=o("longformer"),zOo=o(" \u2014 "),cV=a("a"),WOo=o("LongformerForQuestionAnswering"),QOo=o(" (Longformer model)"),HOo=l(),p5=a("li"),the=a("strong"),UOo=o("lxmert"),JOo=o(" \u2014 "),fV=a("a"),YOo=o("LxmertForQuestionAnswering"),KOo=o(" (LXMERT model)"),ZOo=l(),u5=a("li"),ahe=a("strong"),eVo=o("mbart"),oVo=o(" \u2014 "),mV=a("a"),rVo=o("MBartForQuestionAnswering"),tVo=o(" (mBART model)"),aVo=l(),_5=a("li"),nhe=a("strong"),nVo=o("megatron-bert"),sVo=o(" \u2014 "),gV=a("a"),lVo=o("MegatronBertForQuestionAnswering"),iVo=o(" (MegatronBert model)"),dVo=l(),b5=a("li"),she=a("strong"),cVo=o("mobilebert"),fVo=o(" \u2014 "),hV=a("a"),mVo=o("MobileBertForQuestionAnswering"),gVo=o(" (MobileBERT model)"),hVo=l(),v5=a("li"),lhe=a("strong"),pVo=o("mpnet"),uVo=o(" \u2014 "),pV=a("a"),_Vo=o("MPNetForQuestionAnswering"),bVo=o(" (MPNet model)"),vVo=l(),F5=a("li"),ihe=a("strong"),FVo=o("nystromformer"),TVo=o(" \u2014 "),uV=a("a"),MVo=o("NystromformerForQuestionAnswering"),EVo=o(" (Nystromformer model)"),CVo=l(),T5=a("li"),dhe=a("strong"),wVo=o("qdqbert"),AVo=o(" \u2014 "),_V=a("a"),yVo=o("QDQBertForQuestionAnswering"),LVo=o(" (QDQBert model)"),xVo=l(),M5=a("li"),che=a("strong"),$Vo=o("reformer"),kVo=o(" \u2014 "),bV=a("a"),SVo=o("ReformerForQuestionAnswering"),RVo=o(" (Reformer model)"),PVo=l(),E5=a("li"),fhe=a("strong"),BVo=o("rembert"),IVo=o(" \u2014 "),vV=a("a"),qVo=o("RemBertForQuestionAnswering"),NVo=o(" (RemBERT model)"),jVo=l(),C5=a("li"),mhe=a("strong"),DVo=o("roberta"),GVo=o(" \u2014 "),FV=a("a"),OVo=o("RobertaForQuestionAnswering"),VVo=o(" (RoBERTa model)"),XVo=l(),w5=a("li"),ghe=a("strong"),zVo=o("roformer"),WVo=o(" \u2014 "),TV=a("a"),QVo=o("RoFormerForQuestionAnswering"),HVo=o(" (RoFormer model)"),UVo=l(),A5=a("li"),hhe=a("strong"),JVo=o("splinter"),YVo=o(" \u2014 "),MV=a("a"),KVo=o("SplinterForQuestionAnswering"),ZVo=o(" (Splinter model)"),eXo=l(),y5=a("li"),phe=a("strong"),oXo=o("squeezebert"),rXo=o(" \u2014 "),EV=a("a"),tXo=o("SqueezeBertForQuestionAnswering"),aXo=o(" (SqueezeBERT model)"),nXo=l(),L5=a("li"),uhe=a("strong"),sXo=o("xlm"),lXo=o(" \u2014 "),CV=a("a"),iXo=o("XLMForQuestionAnsweringSimple"),dXo=o(" (XLM model)"),cXo=l(),x5=a("li"),_he=a("strong"),fXo=o("xlm-roberta"),mXo=o(" \u2014 "),wV=a("a"),gXo=o("XLMRobertaForQuestionAnswering"),hXo=o(" (XLM-RoBERTa model)"),pXo=l(),$5=a("li"),bhe=a("strong"),uXo=o("xlm-roberta-xl"),_Xo=o(" \u2014 "),AV=a("a"),bXo=o("XLMRobertaXLForQuestionAnswering"),vXo=o(" (XLM-RoBERTa-XL model)"),FXo=l(),k5=a("li"),vhe=a("strong"),TXo=o("xlnet"),MXo=o(" \u2014 "),yV=a("a"),EXo=o("XLNetForQuestionAnsweringSimple"),CXo=o(" (XLNet model)"),wXo=l(),S5=a("li"),Fhe=a("strong"),AXo=o("yoso"),yXo=o(" \u2014 "),LV=a("a"),LXo=o("YosoForQuestionAnswering"),xXo=o(" (YOSO model)"),$Xo=l(),R5=a("p"),kXo=o("The model is set in evaluation mode by default using "),The=a("code"),SXo=o("model.eval()"),RXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),PXo=o("model.train()"),BXo=l(),F(P5.$$.fragment),mqe=l(),ed=a("h2"),B5=a("a"),Ehe=a("span"),F(kL.$$.fragment),IXo=l(),Che=a("span"),qXo=o("AutoModelForTableQuestionAnswering"),gqe=l(),No=a("div"),F(SL.$$.fragment),NXo=l(),od=a("p"),jXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=a("a"),DXo=o("from_pretrained()"),GXo=o(" class method or the "),$V=a("a"),OXo=o("from_config()"),VXo=o(` class
method.`),XXo=l(),RL=a("p"),zXo=o("This class cannot be instantiated directly using "),whe=a("code"),WXo=o("__init__()"),QXo=o(" (throws an error)."),HXo=l(),gt=a("div"),F(PL.$$.fragment),UXo=l(),Ahe=a("p"),JXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YXo=l(),rd=a("p"),KXo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),ZXo=o("not"),ezo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),ozo=o("from_pretrained()"),rzo=o(" to load the model weights."),tzo=l(),F(I5.$$.fragment),azo=l(),so=a("div"),F(BL.$$.fragment),nzo=l(),Lhe=a("p"),szo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lzo=l(),Na=a("p"),izo=o("The model class to instantiate is selected based on the "),xhe=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),She=a("ul"),q5=a("li"),Rhe=a("strong"),uzo=o("tapas"),_zo=o(" \u2014 "),SV=a("a"),bzo=o("TapasForQuestionAnswering"),vzo=o(" (TAPAS model)"),Fzo=l(),N5=a("p"),Tzo=o("The model is set in evaluation mode by default using "),Phe=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=a("code"),Czo=o("model.train()"),wzo=l(),F(j5.$$.fragment),hqe=l(),td=a("h2"),D5=a("a"),Ihe=a("span"),F(IL.$$.fragment),Azo=l(),qhe=a("span"),yzo=o("AutoModelForImageClassification"),pqe=l(),jo=a("div"),F(qL.$$.fragment),Lzo=l(),ad=a("p"),xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),$zo=o("from_pretrained()"),kzo=o(" class method or the "),PV=a("a"),Szo=o("from_config()"),Rzo=o(` class
method.`),Pzo=l(),NL=a("p"),Bzo=o("This class cannot be instantiated directly using "),Nhe=a("code"),Izo=o("__init__()"),qzo=o(" (throws an error)."),Nzo=l(),ht=a("div"),F(jL.$$.fragment),jzo=l(),jhe=a("p"),Dzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gzo=l(),nd=a("p"),Ozo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),Vzo=o("not"),Xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),zzo=o("from_pretrained()"),Wzo=o(" to load the model weights."),Qzo=l(),F(G5.$$.fragment),Hzo=l(),lo=a("div"),F(DL.$$.fragment),Uzo=l(),Ghe=a("p"),Jzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Yzo=l(),ja=a("p"),Kzo=o("The model class to instantiate is selected based on the "),Ohe=a("code"),Zzo=o("model_type"),eWo=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),oWo=o("pretrained_model_name_or_path"),rWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),tWo=o("pretrained_model_name_or_path"),aWo=o(":"),nWo=l(),Fe=a("ul"),O5=a("li"),zhe=a("strong"),sWo=o("beit"),lWo=o(" \u2014 "),IV=a("a"),iWo=o("BeitForImageClassification"),dWo=o(" (BEiT model)"),cWo=l(),V5=a("li"),Whe=a("strong"),fWo=o("convnext"),mWo=o(" \u2014 "),qV=a("a"),gWo=o("ConvNextForImageClassification"),hWo=o(" (ConvNext model)"),pWo=l(),X5=a("li"),Qhe=a("strong"),uWo=o("data2vec-vision"),_Wo=o(" \u2014 "),NV=a("a"),bWo=o("Data2VecVisionForImageClassification"),vWo=o(" (Data2VecVision model)"),FWo=l(),Ps=a("li"),Hhe=a("strong"),TWo=o("deit"),MWo=o(" \u2014 "),jV=a("a"),EWo=o("DeiTForImageClassification"),CWo=o(" or "),DV=a("a"),wWo=o("DeiTForImageClassificationWithTeacher"),AWo=o(" (DeiT model)"),yWo=l(),z5=a("li"),Uhe=a("strong"),LWo=o("imagegpt"),xWo=o(" \u2014 "),GV=a("a"),$Wo=o("ImageGPTForImageClassification"),kWo=o(" (ImageGPT model)"),SWo=l(),pt=a("li"),Jhe=a("strong"),RWo=o("perceiver"),PWo=o(" \u2014 "),OV=a("a"),BWo=o("PerceiverForImageClassificationLearned"),IWo=o(" or "),VV=a("a"),qWo=o("PerceiverForImageClassificationFourier"),NWo=o(" or "),XV=a("a"),jWo=o("PerceiverForImageClassificationConvProcessing"),DWo=o(" (Perceiver model)"),GWo=l(),W5=a("li"),Yhe=a("strong"),OWo=o("poolformer"),VWo=o(" \u2014 "),zV=a("a"),XWo=o("PoolFormerForImageClassification"),zWo=o(" (PoolFormer model)"),WWo=l(),Q5=a("li"),Khe=a("strong"),QWo=o("regnet"),HWo=o(" \u2014 "),WV=a("a"),UWo=o("RegNetForImageClassification"),JWo=o(" (RegNet model)"),YWo=l(),H5=a("li"),Zhe=a("strong"),KWo=o("resnet"),ZWo=o(" \u2014 "),QV=a("a"),eQo=o("ResNetForImageClassification"),oQo=o(" (ResNet model)"),rQo=l(),U5=a("li"),epe=a("strong"),tQo=o("segformer"),aQo=o(" \u2014 "),HV=a("a"),nQo=o("SegformerForImageClassification"),sQo=o(" (SegFormer model)"),lQo=l(),J5=a("li"),ope=a("strong"),iQo=o("swin"),dQo=o(" \u2014 "),UV=a("a"),cQo=o("SwinForImageClassification"),fQo=o(" (Swin model)"),mQo=l(),Y5=a("li"),rpe=a("strong"),gQo=o("van"),hQo=o(" \u2014 "),JV=a("a"),pQo=o("VanForImageClassification"),uQo=o(" (VAN model)"),_Qo=l(),K5=a("li"),tpe=a("strong"),bQo=o("vit"),vQo=o(" \u2014 "),YV=a("a"),FQo=o("ViTForImageClassification"),TQo=o(" (ViT model)"),MQo=l(),Z5=a("p"),EQo=o("The model is set in evaluation mode by default using "),ape=a("code"),CQo=o("model.eval()"),wQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=a("code"),AQo=o("model.train()"),yQo=l(),F(ev.$$.fragment),uqe=l(),sd=a("h2"),ov=a("a"),spe=a("span"),F(GL.$$.fragment),LQo=l(),lpe=a("span"),xQo=o("AutoModelForVision2Seq"),_qe=l(),Do=a("div"),F(OL.$$.fragment),$Qo=l(),ld=a("p"),kQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=a("a"),SQo=o("from_pretrained()"),RQo=o(" class method or the "),ZV=a("a"),PQo=o("from_config()"),BQo=o(` class
method.`),IQo=l(),VL=a("p"),qQo=o("This class cannot be instantiated directly using "),ipe=a("code"),NQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),ut=a("div"),F(XL.$$.fragment),GQo=l(),dpe=a("p"),OQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VQo=l(),id=a("p"),XQo=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),zQo=o("not"),WQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),QQo=o("from_pretrained()"),HQo=o(" to load the model weights."),UQo=l(),F(rv.$$.fragment),JQo=l(),io=a("div"),F(zL.$$.fragment),YQo=l(),fpe=a("p"),KQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZQo=l(),Da=a("p"),eHo=o("The model class to instantiate is selected based on the "),mpe=a("code"),oHo=o("model_type"),rHo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),tHo=o("pretrained_model_name_or_path"),aHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),nHo=o("pretrained_model_name_or_path"),sHo=o(":"),lHo=l(),ppe=a("ul"),tv=a("li"),upe=a("strong"),iHo=o("vision-encoder-decoder"),dHo=o(" \u2014 "),oX=a("a"),cHo=o("VisionEncoderDecoderModel"),fHo=o(" (Vision Encoder decoder model)"),mHo=l(),av=a("p"),gHo=o("The model is set in evaluation mode by default using "),_pe=a("code"),hHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),uHo=o("model.train()"),_Ho=l(),F(nv.$$.fragment),bqe=l(),dd=a("h2"),sv=a("a"),vpe=a("span"),F(WL.$$.fragment),bHo=l(),Fpe=a("span"),vHo=o("AutoModelForAudioClassification"),vqe=l(),Go=a("div"),F(QL.$$.fragment),FHo=l(),cd=a("p"),THo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=a("a"),MHo=o("from_pretrained()"),EHo=o(" class method or the "),tX=a("a"),CHo=o("from_config()"),wHo=o(` class
method.`),AHo=l(),HL=a("p"),yHo=o("This class cannot be instantiated directly using "),Tpe=a("code"),LHo=o("__init__()"),xHo=o(" (throws an error)."),$Ho=l(),_t=a("div"),F(UL.$$.fragment),kHo=l(),Mpe=a("p"),SHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),RHo=l(),fd=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),BHo=o("not"),IHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),qHo=o("from_pretrained()"),NHo=o(" to load the model weights."),jHo=l(),F(lv.$$.fragment),DHo=l(),co=a("div"),F(JL.$$.fragment),GHo=l(),Cpe=a("p"),OHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),VHo=l(),Ga=a("p"),XHo=o("The model class to instantiate is selected based on the "),wpe=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),ke=a("ul"),iv=a("li"),Lpe=a("strong"),KHo=o("data2vec-audio"),ZHo=o(" \u2014 "),nX=a("a"),eUo=o("Data2VecAudioForSequenceClassification"),oUo=o(" (Data2VecAudio model)"),rUo=l(),dv=a("li"),xpe=a("strong"),tUo=o("hubert"),aUo=o(" \u2014 "),sX=a("a"),nUo=o("HubertForSequenceClassification"),sUo=o(" (Hubert model)"),lUo=l(),cv=a("li"),$pe=a("strong"),iUo=o("sew"),dUo=o(" \u2014 "),lX=a("a"),cUo=o("SEWForSequenceClassification"),fUo=o(" (SEW model)"),mUo=l(),fv=a("li"),kpe=a("strong"),gUo=o("sew-d"),hUo=o(" \u2014 "),iX=a("a"),pUo=o("SEWDForSequenceClassification"),uUo=o(" (SEW-D model)"),_Uo=l(),mv=a("li"),Spe=a("strong"),bUo=o("unispeech"),vUo=o(" \u2014 "),dX=a("a"),FUo=o("UniSpeechForSequenceClassification"),TUo=o(" (UniSpeech model)"),MUo=l(),gv=a("li"),Rpe=a("strong"),EUo=o("unispeech-sat"),CUo=o(" \u2014 "),cX=a("a"),wUo=o("UniSpeechSatForSequenceClassification"),AUo=o(" (UniSpeechSat model)"),yUo=l(),hv=a("li"),Ppe=a("strong"),LUo=o("wav2vec2"),xUo=o(" \u2014 "),fX=a("a"),$Uo=o("Wav2Vec2ForSequenceClassification"),kUo=o(" (Wav2Vec2 model)"),SUo=l(),pv=a("li"),Bpe=a("strong"),RUo=o("wav2vec2-conformer"),PUo=o(" \u2014 "),mX=a("a"),BUo=o("Wav2Vec2ConformerForSequenceClassification"),IUo=o(" (Wav2Vec2-Conformer model)"),qUo=l(),uv=a("li"),Ipe=a("strong"),NUo=o("wavlm"),jUo=o(" \u2014 "),gX=a("a"),DUo=o("WavLMForSequenceClassification"),GUo=o(" (WavLM model)"),OUo=l(),_v=a("p"),VUo=o("The model is set in evaluation mode by default using "),qpe=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),WUo=o("model.train()"),QUo=l(),F(bv.$$.fragment),Fqe=l(),md=a("h2"),vv=a("a"),jpe=a("span"),F(YL.$$.fragment),HUo=l(),Dpe=a("span"),UUo=o("AutoModelForAudioFrameClassification"),Tqe=l(),Oo=a("div"),F(KL.$$.fragment),JUo=l(),gd=a("p"),YUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=a("a"),KUo=o("from_pretrained()"),ZUo=o(" class method or the "),pX=a("a"),eJo=o("from_config()"),oJo=o(` class
method.`),rJo=l(),ZL=a("p"),tJo=o("This class cannot be instantiated directly using "),Gpe=a("code"),aJo=o("__init__()"),nJo=o(" (throws an error)."),sJo=l(),bt=a("div"),F(e8.$$.fragment),lJo=l(),Ope=a("p"),iJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dJo=l(),hd=a("p"),cJo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),fJo=o("not"),mJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),gJo=o("from_pretrained()"),hJo=o(" to load the model weights."),pJo=l(),F(Fv.$$.fragment),uJo=l(),fo=a("div"),F(o8.$$.fragment),_Jo=l(),Xpe=a("p"),bJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vJo=l(),Oa=a("p"),FJo=o("The model class to instantiate is selected based on the "),zpe=a("code"),TJo=o("model_type"),MJo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),EJo=o("pretrained_model_name_or_path"),CJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(":"),yJo=l(),Kr=a("ul"),Tv=a("li"),Hpe=a("strong"),LJo=o("data2vec-audio"),xJo=o(" \u2014 "),_X=a("a"),$Jo=o("Data2VecAudioForAudioFrameClassification"),kJo=o(" (Data2VecAudio model)"),SJo=l(),Mv=a("li"),Upe=a("strong"),RJo=o("unispeech-sat"),PJo=o(" \u2014 "),bX=a("a"),BJo=o("UniSpeechSatForAudioFrameClassification"),IJo=o(" (UniSpeechSat model)"),qJo=l(),Ev=a("li"),Jpe=a("strong"),NJo=o("wav2vec2"),jJo=o(" \u2014 "),vX=a("a"),DJo=o("Wav2Vec2ForAudioFrameClassification"),GJo=o(" (Wav2Vec2 model)"),OJo=l(),Cv=a("li"),Ype=a("strong"),VJo=o("wav2vec2-conformer"),XJo=o(" \u2014 "),FX=a("a"),zJo=o("Wav2Vec2ConformerForAudioFrameClassification"),WJo=o(" (Wav2Vec2-Conformer model)"),QJo=l(),wv=a("li"),Kpe=a("strong"),HJo=o("wavlm"),UJo=o(" \u2014 "),TX=a("a"),JJo=o("WavLMForAudioFrameClassification"),YJo=o(" (WavLM model)"),KJo=l(),Av=a("p"),ZJo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),eYo=o("model.eval()"),oYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),rYo=o("model.train()"),tYo=l(),F(yv.$$.fragment),Mqe=l(),pd=a("h2"),Lv=a("a"),oue=a("span"),F(r8.$$.fragment),aYo=l(),rue=a("span"),nYo=o("AutoModelForCTC"),Eqe=l(),Vo=a("div"),F(t8.$$.fragment),sYo=l(),ud=a("p"),lYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=a("a"),iYo=o("from_pretrained()"),dYo=o(" class method or the "),EX=a("a"),cYo=o("from_config()"),fYo=o(` class
method.`),mYo=l(),a8=a("p"),gYo=o("This class cannot be instantiated directly using "),tue=a("code"),hYo=o("__init__()"),pYo=o(" (throws an error)."),uYo=l(),vt=a("div"),F(n8.$$.fragment),_Yo=l(),aue=a("p"),bYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vYo=l(),_d=a("p"),FYo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),TYo=o("not"),MYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),EYo=o("from_pretrained()"),CYo=o(" to load the model weights."),wYo=l(),F(xv.$$.fragment),AYo=l(),mo=a("div"),F(s8.$$.fragment),yYo=l(),sue=a("p"),LYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xYo=l(),Va=a("p"),$Yo=o("The model class to instantiate is selected based on the "),lue=a("code"),kYo=o("model_type"),SYo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),RYo=o("pretrained_model_name_or_path"),PYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),BYo=o("pretrained_model_name_or_path"),IYo=o(":"),qYo=l(),Se=a("ul"),$v=a("li"),cue=a("strong"),NYo=o("data2vec-audio"),jYo=o(" \u2014 "),wX=a("a"),DYo=o("Data2VecAudioForCTC"),GYo=o(" (Data2VecAudio model)"),OYo=l(),kv=a("li"),fue=a("strong"),VYo=o("hubert"),XYo=o(" \u2014 "),AX=a("a"),zYo=o("HubertForCTC"),WYo=o(" (Hubert model)"),QYo=l(),Sv=a("li"),mue=a("strong"),HYo=o("sew"),UYo=o(" \u2014 "),yX=a("a"),JYo=o("SEWForCTC"),YYo=o(" (SEW model)"),KYo=l(),Rv=a("li"),gue=a("strong"),ZYo=o("sew-d"),eKo=o(" \u2014 "),LX=a("a"),oKo=o("SEWDForCTC"),rKo=o(" (SEW-D model)"),tKo=l(),Pv=a("li"),hue=a("strong"),aKo=o("unispeech"),nKo=o(" \u2014 "),xX=a("a"),sKo=o("UniSpeechForCTC"),lKo=o(" (UniSpeech model)"),iKo=l(),Bv=a("li"),pue=a("strong"),dKo=o("unispeech-sat"),cKo=o(" \u2014 "),$X=a("a"),fKo=o("UniSpeechSatForCTC"),mKo=o(" (UniSpeechSat model)"),gKo=l(),Iv=a("li"),uue=a("strong"),hKo=o("wav2vec2"),pKo=o(" \u2014 "),kX=a("a"),uKo=o("Wav2Vec2ForCTC"),_Ko=o(" (Wav2Vec2 model)"),bKo=l(),qv=a("li"),_ue=a("strong"),vKo=o("wav2vec2-conformer"),FKo=o(" \u2014 "),SX=a("a"),TKo=o("Wav2Vec2ConformerForCTC"),MKo=o(" (Wav2Vec2-Conformer model)"),EKo=l(),Nv=a("li"),bue=a("strong"),CKo=o("wavlm"),wKo=o(" \u2014 "),RX=a("a"),AKo=o("WavLMForCTC"),yKo=o(" (WavLM model)"),LKo=l(),jv=a("p"),xKo=o("The model is set in evaluation mode by default using "),vue=a("code"),$Ko=o("model.eval()"),kKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),SKo=o("model.train()"),RKo=l(),F(Dv.$$.fragment),Cqe=l(),bd=a("h2"),Gv=a("a"),Tue=a("span"),F(l8.$$.fragment),PKo=l(),Mue=a("span"),BKo=o("AutoModelForSpeechSeq2Seq"),wqe=l(),Xo=a("div"),F(i8.$$.fragment),IKo=l(),vd=a("p"),qKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=a("a"),NKo=o("from_pretrained()"),jKo=o(" class method or the "),BX=a("a"),DKo=o("from_config()"),GKo=o(` class
method.`),OKo=l(),d8=a("p"),VKo=o("This class cannot be instantiated directly using "),Eue=a("code"),XKo=o("__init__()"),zKo=o(" (throws an error)."),WKo=l(),Ft=a("div"),F(c8.$$.fragment),QKo=l(),Cue=a("p"),HKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UKo=l(),Fd=a("p"),JKo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),YKo=o("not"),KKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),ZKo=o("from_pretrained()"),eZo=o(" to load the model weights."),oZo=l(),F(Ov.$$.fragment),rZo=l(),go=a("div"),F(f8.$$.fragment),tZo=l(),Aue=a("p"),aZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nZo=l(),Xa=a("p"),sZo=o("The model class to instantiate is selected based on the "),yue=a("code"),lZo=o("model_type"),iZo=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),fZo=o("pretrained_model_name_or_path"),mZo=o(":"),gZo=l(),m8=a("ul"),Vv=a("li"),$ue=a("strong"),hZo=o("speech-encoder-decoder"),pZo=o(" \u2014 "),qX=a("a"),uZo=o("SpeechEncoderDecoderModel"),_Zo=o(" (Speech Encoder decoder model)"),bZo=l(),Xv=a("li"),kue=a("strong"),vZo=o("speech_to_text"),FZo=o(" \u2014 "),NX=a("a"),TZo=o("Speech2TextForConditionalGeneration"),MZo=o(" (Speech2Text model)"),EZo=l(),zv=a("p"),CZo=o("The model is set in evaluation mode by default using "),Sue=a("code"),wZo=o("model.eval()"),AZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),yZo=o("model.train()"),LZo=l(),F(Wv.$$.fragment),Aqe=l(),Td=a("h2"),Qv=a("a"),Pue=a("span"),F(g8.$$.fragment),xZo=l(),Bue=a("span"),$Zo=o("AutoModelForAudioXVector"),yqe=l(),zo=a("div"),F(h8.$$.fragment),kZo=l(),Md=a("p"),SZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=a("a"),RZo=o("from_pretrained()"),PZo=o(" class method or the "),DX=a("a"),BZo=o("from_config()"),IZo=o(` class
method.`),qZo=l(),p8=a("p"),NZo=o("This class cannot be instantiated directly using "),Iue=a("code"),jZo=o("__init__()"),DZo=o(" (throws an error)."),GZo=l(),Tt=a("div"),F(u8.$$.fragment),OZo=l(),que=a("p"),VZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),XZo=l(),Ed=a("p"),zZo=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),WZo=o("not"),QZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),HZo=o("from_pretrained()"),UZo=o(" to load the model weights."),JZo=l(),F(Hv.$$.fragment),YZo=l(),ho=a("div"),F(_8.$$.fragment),KZo=l(),jue=a("p"),ZZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eer=l(),za=a("p"),oer=o("The model class to instantiate is selected based on the "),Due=a("code"),rer=o("model_type"),ter=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(":"),ier=l(),Zr=a("ul"),Uv=a("li"),Vue=a("strong"),der=o("data2vec-audio"),cer=o(" \u2014 "),OX=a("a"),fer=o("Data2VecAudioForXVector"),mer=o(" (Data2VecAudio model)"),ger=l(),Jv=a("li"),Xue=a("strong"),her=o("unispeech-sat"),per=o(" \u2014 "),VX=a("a"),uer=o("UniSpeechSatForXVector"),_er=o(" (UniSpeechSat model)"),ber=l(),Yv=a("li"),zue=a("strong"),ver=o("wav2vec2"),Fer=o(" \u2014 "),XX=a("a"),Ter=o("Wav2Vec2ForXVector"),Mer=o(" (Wav2Vec2 model)"),Eer=l(),Kv=a("li"),Wue=a("strong"),Cer=o("wav2vec2-conformer"),wer=o(" \u2014 "),zX=a("a"),Aer=o("Wav2Vec2ConformerForXVector"),yer=o(" (Wav2Vec2-Conformer model)"),Ler=l(),Zv=a("li"),Que=a("strong"),xer=o("wavlm"),$er=o(" \u2014 "),WX=a("a"),ker=o("WavLMForXVector"),Ser=o(" (WavLM model)"),Rer=l(),e3=a("p"),Per=o("The model is set in evaluation mode by default using "),Hue=a("code"),Ber=o("model.eval()"),Ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),qer=o("model.train()"),Ner=l(),F(o3.$$.fragment),Lqe=l(),Cd=a("h2"),r3=a("a"),Jue=a("span"),F(b8.$$.fragment),jer=l(),Yue=a("span"),Der=o("AutoModelForMaskedImageModeling"),xqe=l(),Wo=a("div"),F(v8.$$.fragment),Ger=l(),wd=a("p"),Oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=a("a"),Ver=o("from_pretrained()"),Xer=o(" class method or the "),HX=a("a"),zer=o("from_config()"),Wer=o(` class
method.`),Qer=l(),F8=a("p"),Her=o("This class cannot be instantiated directly using "),Kue=a("code"),Uer=o("__init__()"),Jer=o(" (throws an error)."),Yer=l(),Mt=a("div"),F(T8.$$.fragment),Ker=l(),Zue=a("p"),Zer=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eor=l(),Ad=a("p"),oor=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),ror=o("not"),tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),aor=o("from_pretrained()"),nor=o(" to load the model weights."),sor=l(),F(t3.$$.fragment),lor=l(),po=a("div"),F(M8.$$.fragment),ior=l(),o_e=a("p"),dor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),cor=l(),Wa=a("p"),mor=o("The model class to instantiate is selected based on the "),r_e=a("code"),gor=o("model_type"),hor=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),por=o("pretrained_model_name_or_path"),uor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(":"),vor=l(),yd=a("ul"),a3=a("li"),n_e=a("strong"),For=o("deit"),Tor=o(" \u2014 "),JX=a("a"),Mor=o("DeiTForMaskedImageModeling"),Eor=o(" (DeiT model)"),Cor=l(),n3=a("li"),s_e=a("strong"),wor=o("swin"),Aor=o(" \u2014 "),YX=a("a"),yor=o("SwinForMaskedImageModeling"),Lor=o(" (Swin model)"),xor=l(),s3=a("li"),l_e=a("strong"),$or=o("vit"),kor=o(" \u2014 "),KX=a("a"),Sor=o("ViTForMaskedImageModeling"),Ror=o(" (ViT model)"),Por=l(),l3=a("p"),Bor=o("The model is set in evaluation mode by default using "),i_e=a("code"),Ior=o("model.eval()"),qor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),Nor=o("model.train()"),jor=l(),F(i3.$$.fragment),$qe=l(),Ld=a("h2"),d3=a("a"),c_e=a("span"),F(E8.$$.fragment),Dor=l(),f_e=a("span"),Gor=o("AutoModelForObjectDetection"),kqe=l(),Qo=a("div"),F(C8.$$.fragment),Oor=l(),xd=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=a("a"),Xor=o("from_pretrained()"),zor=o(" class method or the "),ez=a("a"),Wor=o("from_config()"),Qor=o(` class
method.`),Hor=l(),w8=a("p"),Uor=o("This class cannot be instantiated directly using "),m_e=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),Et=a("div"),F(A8.$$.fragment),Zor=l(),g_e=a("p"),err=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),orr=l(),$d=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),nrr=o("from_pretrained()"),srr=o(" to load the model weights."),lrr=l(),F(c3.$$.fragment),irr=l(),uo=a("div"),F(y8.$$.fragment),drr=l(),p_e=a("p"),crr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),frr=l(),Qa=a("p"),mrr=o("The model class to instantiate is selected based on the "),u_e=a("code"),grr=o("model_type"),hrr=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),prr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),_rr=o("pretrained_model_name_or_path"),brr=o(":"),vrr=l(),L8=a("ul"),f3=a("li"),v_e=a("strong"),Frr=o("detr"),Trr=o(" \u2014 "),rz=a("a"),Mrr=o("DetrForObjectDetection"),Err=o(" (DETR model)"),Crr=l(),m3=a("li"),F_e=a("strong"),wrr=o("yolos"),Arr=o(" \u2014 "),tz=a("a"),yrr=o("YolosForObjectDetection"),Lrr=o(" (YOLOS model)"),xrr=l(),g3=a("p"),$rr=o("The model is set in evaluation mode by default using "),T_e=a("code"),krr=o("model.eval()"),Srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),Rrr=o("model.train()"),Prr=l(),F(h3.$$.fragment),Sqe=l(),kd=a("h2"),p3=a("a"),E_e=a("span"),F(x8.$$.fragment),Brr=l(),C_e=a("span"),Irr=o("AutoModelForImageSegmentation"),Rqe=l(),Ho=a("div"),F($8.$$.fragment),qrr=l(),Sd=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=a("a"),jrr=o("from_pretrained()"),Drr=o(" class method or the "),nz=a("a"),Grr=o("from_config()"),Orr=o(` class
method.`),Vrr=l(),k8=a("p"),Xrr=o("This class cannot be instantiated directly using "),w_e=a("code"),zrr=o("__init__()"),Wrr=o(" (throws an error)."),Qrr=l(),Ct=a("div"),F(S8.$$.fragment),Hrr=l(),A_e=a("p"),Urr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Jrr=l(),Rd=a("p"),Yrr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),Krr=o("not"),Zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),etr=o("from_pretrained()"),otr=o(" to load the model weights."),rtr=l(),F(u3.$$.fragment),ttr=l(),_o=a("div"),F(R8.$$.fragment),atr=l(),L_e=a("p"),ntr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),str=l(),Ha=a("p"),ltr=o("The model class to instantiate is selected based on the "),x_e=a("code"),itr=o("model_type"),dtr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),ctr=o("pretrained_model_name_or_path"),ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),mtr=o("pretrained_model_name_or_path"),gtr=o(":"),htr=l(),S_e=a("ul"),_3=a("li"),R_e=a("strong"),ptr=o("detr"),utr=o(" \u2014 "),lz=a("a"),_tr=o("DetrForSegmentation"),btr=o(" (DETR model)"),vtr=l(),b3=a("p"),Ftr=o("The model is set in evaluation mode by default using "),P_e=a("code"),Ttr=o("model.eval()"),Mtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=a("code"),Etr=o("model.train()"),Ctr=l(),F(v3.$$.fragment),Pqe=l(),Pd=a("h2"),F3=a("a"),I_e=a("span"),F(P8.$$.fragment),wtr=l(),q_e=a("span"),Atr=o("AutoModelForSemanticSegmentation"),Bqe=l(),Uo=a("div"),F(B8.$$.fragment),ytr=l(),Bd=a("p"),Ltr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=a("a"),xtr=o("from_pretrained()"),$tr=o(" class method or the "),dz=a("a"),ktr=o("from_config()"),Str=o(` class
method.`),Rtr=l(),I8=a("p"),Ptr=o("This class cannot be instantiated directly using "),N_e=a("code"),Btr=o("__init__()"),Itr=o(" (throws an error)."),qtr=l(),wt=a("div"),F(q8.$$.fragment),Ntr=l(),j_e=a("p"),jtr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dtr=l(),Id=a("p"),Gtr=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),Otr=o("not"),Vtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Xtr=o("from_pretrained()"),ztr=o(" to load the model weights."),Wtr=l(),F(T3.$$.fragment),Qtr=l(),bo=a("div"),F(N8.$$.fragment),Htr=l(),G_e=a("p"),Utr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jtr=l(),Ua=a("p"),Ytr=o("The model class to instantiate is selected based on the "),O_e=a("code"),Ktr=o("model_type"),Ztr=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),rar=o("pretrained_model_name_or_path"),tar=o(":"),aar=l(),Ja=a("ul"),M3=a("li"),z_e=a("strong"),nar=o("beit"),sar=o(" \u2014 "),fz=a("a"),lar=o("BeitForSemanticSegmentation"),iar=o(" (BEiT model)"),dar=l(),E3=a("li"),W_e=a("strong"),car=o("data2vec-vision"),far=o(" \u2014 "),mz=a("a"),mar=o("Data2VecVisionForSemanticSegmentation"),gar=o(" (Data2VecVision model)"),har=l(),C3=a("li"),Q_e=a("strong"),par=o("dpt"),uar=o(" \u2014 "),gz=a("a"),_ar=o("DPTForSemanticSegmentation"),bar=o(" (DPT model)"),Far=l(),w3=a("li"),H_e=a("strong"),Tar=o("segformer"),Mar=o(" \u2014 "),hz=a("a"),Ear=o("SegformerForSemanticSegmentation"),Car=o(" (SegFormer model)"),war=l(),A3=a("p"),Aar=o("The model is set in evaluation mode by default using "),U_e=a("code"),yar=o("model.eval()"),Lar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),xar=o("model.train()"),$ar=l(),F(y3.$$.fragment),Iqe=l(),qd=a("h2"),L3=a("a"),Y_e=a("span"),F(j8.$$.fragment),kar=l(),K_e=a("span"),Sar=o("AutoModelForInstanceSegmentation"),qqe=l(),Jo=a("div"),F(D8.$$.fragment),Rar=l(),Nd=a("p"),Par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=a("a"),Bar=o("from_pretrained()"),Iar=o(" class method or the "),uz=a("a"),qar=o("from_config()"),Nar=o(` class
method.`),jar=l(),G8=a("p"),Dar=o("This class cannot be instantiated directly using "),Z_e=a("code"),Gar=o("__init__()"),Oar=o(" (throws an error)."),Var=l(),At=a("div"),F(O8.$$.fragment),Xar=l(),e1e=a("p"),zar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),War=l(),jd=a("p"),Qar=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),Har=o("not"),Uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Jar=o("from_pretrained()"),Yar=o(" to load the model weights."),Kar=l(),F(x3.$$.fragment),Zar=l(),vo=a("div"),F(V8.$$.fragment),enr=l(),r1e=a("p"),onr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rnr=l(),Ya=a("p"),tnr=o("The model class to instantiate is selected based on the "),t1e=a("code"),anr=o("model_type"),nnr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),snr=o("pretrained_model_name_or_path"),lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),inr=o("pretrained_model_name_or_path"),dnr=o(":"),cnr=l(),s1e=a("ul"),$3=a("li"),l1e=a("strong"),fnr=o("maskformer"),mnr=o(" \u2014 "),bz=a("a"),gnr=o("MaskFormerForInstanceSegmentation"),hnr=o(" (MaskFormer model)"),pnr=l(),k3=a("p"),unr=o("The model is set in evaluation mode by default using "),i1e=a("code"),_nr=o("model.eval()"),bnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=a("code"),vnr=o("model.train()"),Fnr=l(),F(S3.$$.fragment),Nqe=l(),Dd=a("h2"),R3=a("a"),c1e=a("span"),F(X8.$$.fragment),Tnr=l(),f1e=a("span"),Mnr=o("TFAutoModel"),jqe=l(),Yo=a("div"),F(z8.$$.fragment),Enr=l(),Gd=a("p"),Cnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=a("a"),wnr=o("from_pretrained()"),Anr=o(" class method or the "),Fz=a("a"),ynr=o("from_config()"),Lnr=o(` class
method.`),xnr=l(),W8=a("p"),$nr=o("This class cannot be instantiated directly using "),m1e=a("code"),knr=o("__init__()"),Snr=o(" (throws an error)."),Rnr=l(),yt=a("div"),F(Q8.$$.fragment),Pnr=l(),g1e=a("p"),Bnr=o("Instantiates one of the base model classes of the library from a configuration."),Inr=l(),Od=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),Nnr=o("not"),jnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" to load the model weights."),Onr=l(),F(P3.$$.fragment),Vnr=l(),wr=a("div"),F(H8.$$.fragment),Xnr=l(),p1e=a("p"),znr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wnr=l(),Ka=a("p"),Qnr=o("The model class to instantiate is selected based on the "),u1e=a("code"),Hnr=o("model_type"),Unr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Jnr=o("pretrained_model_name_or_path"),Ynr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),Knr=o("pretrained_model_name_or_path"),Znr=o(":"),esr=l(),q=a("ul"),B3=a("li"),v1e=a("strong"),osr=o("albert"),rsr=o(" \u2014 "),Mz=a("a"),tsr=o("TFAlbertModel"),asr=o(" (ALBERT model)"),nsr=l(),I3=a("li"),F1e=a("strong"),ssr=o("bart"),lsr=o(" \u2014 "),Ez=a("a"),isr=o("TFBartModel"),dsr=o(" (BART model)"),csr=l(),q3=a("li"),T1e=a("strong"),fsr=o("bert"),msr=o(" \u2014 "),Cz=a("a"),gsr=o("TFBertModel"),hsr=o(" (BERT model)"),psr=l(),N3=a("li"),M1e=a("strong"),usr=o("blenderbot"),_sr=o(" \u2014 "),wz=a("a"),bsr=o("TFBlenderbotModel"),vsr=o(" (Blenderbot model)"),Fsr=l(),j3=a("li"),E1e=a("strong"),Tsr=o("blenderbot-small"),Msr=o(" \u2014 "),Az=a("a"),Esr=o("TFBlenderbotSmallModel"),Csr=o(" (BlenderbotSmall model)"),wsr=l(),D3=a("li"),C1e=a("strong"),Asr=o("camembert"),ysr=o(" \u2014 "),yz=a("a"),Lsr=o("TFCamembertModel"),xsr=o(" (CamemBERT model)"),$sr=l(),G3=a("li"),w1e=a("strong"),ksr=o("clip"),Ssr=o(" \u2014 "),Lz=a("a"),Rsr=o("TFCLIPModel"),Psr=o(" (CLIP model)"),Bsr=l(),O3=a("li"),A1e=a("strong"),Isr=o("convbert"),qsr=o(" \u2014 "),xz=a("a"),Nsr=o("TFConvBertModel"),jsr=o(" (ConvBERT model)"),Dsr=l(),V3=a("li"),y1e=a("strong"),Gsr=o("convnext"),Osr=o(" \u2014 "),$z=a("a"),Vsr=o("TFConvNextModel"),Xsr=o(" (ConvNext model)"),zsr=l(),X3=a("li"),L1e=a("strong"),Wsr=o("ctrl"),Qsr=o(" \u2014 "),kz=a("a"),Hsr=o("TFCTRLModel"),Usr=o(" (CTRL model)"),Jsr=l(),z3=a("li"),x1e=a("strong"),Ysr=o("data2vec-vision"),Ksr=o(" \u2014 "),Sz=a("a"),Zsr=o("TFData2VecVisionModel"),elr=o(" (Data2VecVision model)"),olr=l(),W3=a("li"),$1e=a("strong"),rlr=o("deberta"),tlr=o(" \u2014 "),Rz=a("a"),alr=o("TFDebertaModel"),nlr=o(" (DeBERTa model)"),slr=l(),Q3=a("li"),k1e=a("strong"),llr=o("deberta-v2"),ilr=o(" \u2014 "),Pz=a("a"),dlr=o("TFDebertaV2Model"),clr=o(" (DeBERTa-v2 model)"),flr=l(),H3=a("li"),S1e=a("strong"),mlr=o("distilbert"),glr=o(" \u2014 "),Bz=a("a"),hlr=o("TFDistilBertModel"),plr=o(" (DistilBERT model)"),ulr=l(),U3=a("li"),R1e=a("strong"),_lr=o("dpr"),blr=o(" \u2014 "),Iz=a("a"),vlr=o("TFDPRQuestionEncoder"),Flr=o(" (DPR model)"),Tlr=l(),J3=a("li"),P1e=a("strong"),Mlr=o("electra"),Elr=o(" \u2014 "),qz=a("a"),Clr=o("TFElectraModel"),wlr=o(" (ELECTRA model)"),Alr=l(),Y3=a("li"),B1e=a("strong"),ylr=o("flaubert"),Llr=o(" \u2014 "),Nz=a("a"),xlr=o("TFFlaubertModel"),$lr=o(" (FlauBERT model)"),klr=l(),Bs=a("li"),I1e=a("strong"),Slr=o("funnel"),Rlr=o(" \u2014 "),jz=a("a"),Plr=o("TFFunnelModel"),Blr=o(" or "),Dz=a("a"),Ilr=o("TFFunnelBaseModel"),qlr=o(" (Funnel Transformer model)"),Nlr=l(),K3=a("li"),q1e=a("strong"),jlr=o("gpt2"),Dlr=o(" \u2014 "),Gz=a("a"),Glr=o("TFGPT2Model"),Olr=o(" (OpenAI GPT-2 model)"),Vlr=l(),Z3=a("li"),N1e=a("strong"),Xlr=o("gptj"),zlr=o(" \u2014 "),Oz=a("a"),Wlr=o("TFGPTJModel"),Qlr=o(" (GPT-J model)"),Hlr=l(),eF=a("li"),j1e=a("strong"),Ulr=o("hubert"),Jlr=o(" \u2014 "),Vz=a("a"),Ylr=o("TFHubertModel"),Klr=o(" (Hubert model)"),Zlr=l(),oF=a("li"),D1e=a("strong"),eir=o("layoutlm"),oir=o(" \u2014 "),Xz=a("a"),rir=o("TFLayoutLMModel"),tir=o(" (LayoutLM model)"),air=l(),rF=a("li"),G1e=a("strong"),nir=o("led"),sir=o(" \u2014 "),zz=a("a"),lir=o("TFLEDModel"),iir=o(" (LED model)"),dir=l(),tF=a("li"),O1e=a("strong"),cir=o("longformer"),fir=o(" \u2014 "),Wz=a("a"),mir=o("TFLongformerModel"),gir=o(" (Longformer model)"),hir=l(),aF=a("li"),V1e=a("strong"),pir=o("lxmert"),uir=o(" \u2014 "),Qz=a("a"),_ir=o("TFLxmertModel"),bir=o(" (LXMERT model)"),vir=l(),nF=a("li"),X1e=a("strong"),Fir=o("marian"),Tir=o(" \u2014 "),Hz=a("a"),Mir=o("TFMarianModel"),Eir=o(" (Marian model)"),Cir=l(),sF=a("li"),z1e=a("strong"),wir=o("mbart"),Air=o(" \u2014 "),Uz=a("a"),yir=o("TFMBartModel"),Lir=o(" (mBART model)"),xir=l(),lF=a("li"),W1e=a("strong"),$ir=o("mobilebert"),kir=o(" \u2014 "),Jz=a("a"),Sir=o("TFMobileBertModel"),Rir=o(" (MobileBERT model)"),Pir=l(),iF=a("li"),Q1e=a("strong"),Bir=o("mpnet"),Iir=o(" \u2014 "),Yz=a("a"),qir=o("TFMPNetModel"),Nir=o(" (MPNet model)"),jir=l(),dF=a("li"),H1e=a("strong"),Dir=o("mt5"),Gir=o(" \u2014 "),Kz=a("a"),Oir=o("TFMT5Model"),Vir=o(" (mT5 model)"),Xir=l(),cF=a("li"),U1e=a("strong"),zir=o("openai-gpt"),Wir=o(" \u2014 "),Zz=a("a"),Qir=o("TFOpenAIGPTModel"),Hir=o(" (OpenAI GPT model)"),Uir=l(),fF=a("li"),J1e=a("strong"),Jir=o("pegasus"),Yir=o(" \u2014 "),eW=a("a"),Kir=o("TFPegasusModel"),Zir=o(" (Pegasus model)"),edr=l(),mF=a("li"),Y1e=a("strong"),odr=o("rembert"),rdr=o(" \u2014 "),oW=a("a"),tdr=o("TFRemBertModel"),adr=o(" (RemBERT model)"),ndr=l(),gF=a("li"),K1e=a("strong"),sdr=o("roberta"),ldr=o(" \u2014 "),rW=a("a"),idr=o("TFRobertaModel"),ddr=o(" (RoBERTa model)"),cdr=l(),hF=a("li"),Z1e=a("strong"),fdr=o("roformer"),mdr=o(" \u2014 "),tW=a("a"),gdr=o("TFRoFormerModel"),hdr=o(" (RoFormer model)"),pdr=l(),pF=a("li"),ebe=a("strong"),udr=o("speech_to_text"),_dr=o(" \u2014 "),aW=a("a"),bdr=o("TFSpeech2TextModel"),vdr=o(" (Speech2Text model)"),Fdr=l(),uF=a("li"),obe=a("strong"),Tdr=o("swin"),Mdr=o(" \u2014 "),nW=a("a"),Edr=o("TFSwinModel"),Cdr=o(" (Swin model)"),wdr=l(),_F=a("li"),rbe=a("strong"),Adr=o("t5"),ydr=o(" \u2014 "),sW=a("a"),Ldr=o("TFT5Model"),xdr=o(" (T5 model)"),$dr=l(),bF=a("li"),tbe=a("strong"),kdr=o("tapas"),Sdr=o(" \u2014 "),lW=a("a"),Rdr=o("TFTapasModel"),Pdr=o(" (TAPAS model)"),Bdr=l(),vF=a("li"),abe=a("strong"),Idr=o("transfo-xl"),qdr=o(" \u2014 "),iW=a("a"),Ndr=o("TFTransfoXLModel"),jdr=o(" (Transformer-XL model)"),Ddr=l(),FF=a("li"),nbe=a("strong"),Gdr=o("vit"),Odr=o(" \u2014 "),dW=a("a"),Vdr=o("TFViTModel"),Xdr=o(" (ViT model)"),zdr=l(),TF=a("li"),sbe=a("strong"),Wdr=o("vit_mae"),Qdr=o(" \u2014 "),cW=a("a"),Hdr=o("TFViTMAEModel"),Udr=o(" (ViTMAE model)"),Jdr=l(),MF=a("li"),lbe=a("strong"),Ydr=o("wav2vec2"),Kdr=o(" \u2014 "),fW=a("a"),Zdr=o("TFWav2Vec2Model"),ecr=o(" (Wav2Vec2 model)"),ocr=l(),EF=a("li"),ibe=a("strong"),rcr=o("xglm"),tcr=o(" \u2014 "),mW=a("a"),acr=o("TFXGLMModel"),ncr=o(" (XGLM model)"),scr=l(),CF=a("li"),dbe=a("strong"),lcr=o("xlm"),icr=o(" \u2014 "),gW=a("a"),dcr=o("TFXLMModel"),ccr=o(" (XLM model)"),fcr=l(),wF=a("li"),cbe=a("strong"),mcr=o("xlm-roberta"),gcr=o(" \u2014 "),hW=a("a"),hcr=o("TFXLMRobertaModel"),pcr=o(" (XLM-RoBERTa model)"),ucr=l(),AF=a("li"),fbe=a("strong"),_cr=o("xlnet"),bcr=o(" \u2014 "),pW=a("a"),vcr=o("TFXLNetModel"),Fcr=o(" (XLNet model)"),Tcr=l(),F(yF.$$.fragment),Dqe=l(),Vd=a("h2"),LF=a("a"),mbe=a("span"),F(U8.$$.fragment),Mcr=l(),gbe=a("span"),Ecr=o("TFAutoModelForPreTraining"),Gqe=l(),Ko=a("div"),F(J8.$$.fragment),Ccr=l(),Xd=a("p"),wcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=a("a"),Acr=o("from_pretrained()"),ycr=o(" class method or the "),_W=a("a"),Lcr=o("from_config()"),xcr=o(` class
method.`),$cr=l(),Y8=a("p"),kcr=o("This class cannot be instantiated directly using "),hbe=a("code"),Scr=o("__init__()"),Rcr=o(" (throws an error)."),Pcr=l(),Lt=a("div"),F(K8.$$.fragment),Bcr=l(),pbe=a("p"),Icr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qcr=l(),zd=a("p"),Ncr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),jcr=o("not"),Dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" to load the model weights."),Vcr=l(),F(xF.$$.fragment),Xcr=l(),Ar=a("div"),F(Z8.$$.fragment),zcr=l(),_be=a("p"),Wcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qcr=l(),Za=a("p"),Hcr=o("The model class to instantiate is selected based on the "),bbe=a("code"),Ucr=o("model_type"),Jcr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Zcr=o("pretrained_model_name_or_path"),efr=o(":"),ofr=l(),se=a("ul"),$F=a("li"),Tbe=a("strong"),rfr=o("albert"),tfr=o(" \u2014 "),vW=a("a"),afr=o("TFAlbertForPreTraining"),nfr=o(" (ALBERT model)"),sfr=l(),kF=a("li"),Mbe=a("strong"),lfr=o("bart"),ifr=o(" \u2014 "),FW=a("a"),dfr=o("TFBartForConditionalGeneration"),cfr=o(" (BART model)"),ffr=l(),SF=a("li"),Ebe=a("strong"),mfr=o("bert"),gfr=o(" \u2014 "),TW=a("a"),hfr=o("TFBertForPreTraining"),pfr=o(" (BERT model)"),ufr=l(),RF=a("li"),Cbe=a("strong"),_fr=o("camembert"),bfr=o(" \u2014 "),MW=a("a"),vfr=o("TFCamembertForMaskedLM"),Ffr=o(" (CamemBERT model)"),Tfr=l(),PF=a("li"),wbe=a("strong"),Mfr=o("ctrl"),Efr=o(" \u2014 "),EW=a("a"),Cfr=o("TFCTRLLMHeadModel"),wfr=o(" (CTRL model)"),Afr=l(),BF=a("li"),Abe=a("strong"),yfr=o("distilbert"),Lfr=o(" \u2014 "),CW=a("a"),xfr=o("TFDistilBertForMaskedLM"),$fr=o(" (DistilBERT model)"),kfr=l(),IF=a("li"),ybe=a("strong"),Sfr=o("electra"),Rfr=o(" \u2014 "),wW=a("a"),Pfr=o("TFElectraForPreTraining"),Bfr=o(" (ELECTRA model)"),Ifr=l(),qF=a("li"),Lbe=a("strong"),qfr=o("flaubert"),Nfr=o(" \u2014 "),AW=a("a"),jfr=o("TFFlaubertWithLMHeadModel"),Dfr=o(" (FlauBERT model)"),Gfr=l(),NF=a("li"),xbe=a("strong"),Ofr=o("funnel"),Vfr=o(" \u2014 "),yW=a("a"),Xfr=o("TFFunnelForPreTraining"),zfr=o(" (Funnel Transformer model)"),Wfr=l(),jF=a("li"),$be=a("strong"),Qfr=o("gpt2"),Hfr=o(" \u2014 "),LW=a("a"),Ufr=o("TFGPT2LMHeadModel"),Jfr=o(" (OpenAI GPT-2 model)"),Yfr=l(),DF=a("li"),kbe=a("strong"),Kfr=o("layoutlm"),Zfr=o(" \u2014 "),xW=a("a"),emr=o("TFLayoutLMForMaskedLM"),omr=o(" (LayoutLM model)"),rmr=l(),GF=a("li"),Sbe=a("strong"),tmr=o("lxmert"),amr=o(" \u2014 "),$W=a("a"),nmr=o("TFLxmertForPreTraining"),smr=o(" (LXMERT model)"),lmr=l(),OF=a("li"),Rbe=a("strong"),imr=o("mobilebert"),dmr=o(" \u2014 "),kW=a("a"),cmr=o("TFMobileBertForPreTraining"),fmr=o(" (MobileBERT model)"),mmr=l(),VF=a("li"),Pbe=a("strong"),gmr=o("mpnet"),hmr=o(" \u2014 "),SW=a("a"),pmr=o("TFMPNetForMaskedLM"),umr=o(" (MPNet model)"),_mr=l(),XF=a("li"),Bbe=a("strong"),bmr=o("openai-gpt"),vmr=o(" \u2014 "),RW=a("a"),Fmr=o("TFOpenAIGPTLMHeadModel"),Tmr=o(" (OpenAI GPT model)"),Mmr=l(),zF=a("li"),Ibe=a("strong"),Emr=o("roberta"),Cmr=o(" \u2014 "),PW=a("a"),wmr=o("TFRobertaForMaskedLM"),Amr=o(" (RoBERTa model)"),ymr=l(),WF=a("li"),qbe=a("strong"),Lmr=o("t5"),xmr=o(" \u2014 "),BW=a("a"),$mr=o("TFT5ForConditionalGeneration"),kmr=o(" (T5 model)"),Smr=l(),QF=a("li"),Nbe=a("strong"),Rmr=o("tapas"),Pmr=o(" \u2014 "),IW=a("a"),Bmr=o("TFTapasForMaskedLM"),Imr=o(" (TAPAS model)"),qmr=l(),HF=a("li"),jbe=a("strong"),Nmr=o("transfo-xl"),jmr=o(" \u2014 "),qW=a("a"),Dmr=o("TFTransfoXLLMHeadModel"),Gmr=o(" (Transformer-XL model)"),Omr=l(),UF=a("li"),Dbe=a("strong"),Vmr=o("vit_mae"),Xmr=o(" \u2014 "),NW=a("a"),zmr=o("TFViTMAEForPreTraining"),Wmr=o(" (ViTMAE model)"),Qmr=l(),JF=a("li"),Gbe=a("strong"),Hmr=o("xlm"),Umr=o(" \u2014 "),jW=a("a"),Jmr=o("TFXLMWithLMHeadModel"),Ymr=o(" (XLM model)"),Kmr=l(),YF=a("li"),Obe=a("strong"),Zmr=o("xlm-roberta"),egr=o(" \u2014 "),DW=a("a"),ogr=o("TFXLMRobertaForMaskedLM"),rgr=o(" (XLM-RoBERTa model)"),tgr=l(),KF=a("li"),Vbe=a("strong"),agr=o("xlnet"),ngr=o(" \u2014 "),GW=a("a"),sgr=o("TFXLNetLMHeadModel"),lgr=o(" (XLNet model)"),igr=l(),F(ZF.$$.fragment),Oqe=l(),Wd=a("h2"),e6=a("a"),Xbe=a("span"),F(ex.$$.fragment),dgr=l(),zbe=a("span"),cgr=o("TFAutoModelForCausalLM"),Vqe=l(),Zo=a("div"),F(ox.$$.fragment),fgr=l(),Qd=a("p"),mgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OW=a("a"),ggr=o("from_pretrained()"),hgr=o(" class method or the "),VW=a("a"),pgr=o("from_config()"),ugr=o(` class
method.`),_gr=l(),rx=a("p"),bgr=o("This class cannot be instantiated directly using "),Wbe=a("code"),vgr=o("__init__()"),Fgr=o(" (throws an error)."),Tgr=l(),xt=a("div"),F(tx.$$.fragment),Mgr=l(),Qbe=a("p"),Egr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cgr=l(),Hd=a("p"),wgr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),Agr=o("not"),ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Lgr=o("from_pretrained()"),xgr=o(" to load the model weights."),$gr=l(),F(o6.$$.fragment),kgr=l(),yr=a("div"),F(ax.$$.fragment),Sgr=l(),Ube=a("p"),Rgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pgr=l(),en=a("p"),Bgr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),Igr=o("model_type"),qgr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),Ngr=o("pretrained_model_name_or_path"),jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),Dgr=o("pretrained_model_name_or_path"),Ggr=o(":"),Ogr=l(),Te=a("ul"),r6=a("li"),Zbe=a("strong"),Vgr=o("bert"),Xgr=o(" \u2014 "),zW=a("a"),zgr=o("TFBertLMHeadModel"),Wgr=o(" (BERT model)"),Qgr=l(),t6=a("li"),e2e=a("strong"),Hgr=o("camembert"),Ugr=o(" \u2014 "),WW=a("a"),Jgr=o("TFCamembertForCausalLM"),Ygr=o(" (CamemBERT model)"),Kgr=l(),a6=a("li"),o2e=a("strong"),Zgr=o("ctrl"),ehr=o(" \u2014 "),QW=a("a"),ohr=o("TFCTRLLMHeadModel"),rhr=o(" (CTRL model)"),thr=l(),n6=a("li"),r2e=a("strong"),ahr=o("gpt2"),nhr=o(" \u2014 "),HW=a("a"),shr=o("TFGPT2LMHeadModel"),lhr=o(" (OpenAI GPT-2 model)"),ihr=l(),s6=a("li"),t2e=a("strong"),dhr=o("gptj"),chr=o(" \u2014 "),UW=a("a"),fhr=o("TFGPTJForCausalLM"),mhr=o(" (GPT-J model)"),ghr=l(),l6=a("li"),a2e=a("strong"),hhr=o("openai-gpt"),phr=o(" \u2014 "),JW=a("a"),uhr=o("TFOpenAIGPTLMHeadModel"),_hr=o(" (OpenAI GPT model)"),bhr=l(),i6=a("li"),n2e=a("strong"),vhr=o("rembert"),Fhr=o(" \u2014 "),YW=a("a"),Thr=o("TFRemBertForCausalLM"),Mhr=o(" (RemBERT model)"),Ehr=l(),d6=a("li"),s2e=a("strong"),Chr=o("roberta"),whr=o(" \u2014 "),KW=a("a"),Ahr=o("TFRobertaForCausalLM"),yhr=o(" (RoBERTa model)"),Lhr=l(),c6=a("li"),l2e=a("strong"),xhr=o("roformer"),$hr=o(" \u2014 "),ZW=a("a"),khr=o("TFRoFormerForCausalLM"),Shr=o(" (RoFormer model)"),Rhr=l(),f6=a("li"),i2e=a("strong"),Phr=o("transfo-xl"),Bhr=o(" \u2014 "),eQ=a("a"),Ihr=o("TFTransfoXLLMHeadModel"),qhr=o(" (Transformer-XL model)"),Nhr=l(),m6=a("li"),d2e=a("strong"),jhr=o("xglm"),Dhr=o(" \u2014 "),oQ=a("a"),Ghr=o("TFXGLMForCausalLM"),Ohr=o(" (XGLM model)"),Vhr=l(),g6=a("li"),c2e=a("strong"),Xhr=o("xlm"),zhr=o(" \u2014 "),rQ=a("a"),Whr=o("TFXLMWithLMHeadModel"),Qhr=o(" (XLM model)"),Hhr=l(),h6=a("li"),f2e=a("strong"),Uhr=o("xlnet"),Jhr=o(" \u2014 "),tQ=a("a"),Yhr=o("TFXLNetLMHeadModel"),Khr=o(" (XLNet model)"),Zhr=l(),F(p6.$$.fragment),Xqe=l(),Ud=a("h2"),u6=a("a"),m2e=a("span"),F(nx.$$.fragment),epr=l(),g2e=a("span"),opr=o("TFAutoModelForImageClassification"),zqe=l(),er=a("div"),F(sx.$$.fragment),rpr=l(),Jd=a("p"),tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aQ=a("a"),apr=o("from_pretrained()"),npr=o(" class method or the "),nQ=a("a"),spr=o("from_config()"),lpr=o(` class
method.`),ipr=l(),lx=a("p"),dpr=o("This class cannot be instantiated directly using "),h2e=a("code"),cpr=o("__init__()"),fpr=o(" (throws an error)."),mpr=l(),$t=a("div"),F(ix.$$.fragment),gpr=l(),p2e=a("p"),hpr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ppr=l(),Yd=a("p"),upr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),_pr=o("not"),bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),vpr=o("from_pretrained()"),Fpr=o(" to load the model weights."),Tpr=l(),F(_6.$$.fragment),Mpr=l(),Lr=a("div"),F(dx.$$.fragment),Epr=l(),_2e=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wpr=l(),on=a("p"),Apr=o("The model class to instantiate is selected based on the "),b2e=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(":"),Rpr=l(),rn=a("ul"),b6=a("li"),T2e=a("strong"),Ppr=o("convnext"),Bpr=o(" \u2014 "),lQ=a("a"),Ipr=o("TFConvNextForImageClassification"),qpr=o(" (ConvNext model)"),Npr=l(),v6=a("li"),M2e=a("strong"),jpr=o("data2vec-vision"),Dpr=o(" \u2014 "),iQ=a("a"),Gpr=o("TFData2VecVisionForImageClassification"),Opr=o(" (Data2VecVision model)"),Vpr=l(),F6=a("li"),E2e=a("strong"),Xpr=o("swin"),zpr=o(" \u2014 "),dQ=a("a"),Wpr=o("TFSwinForImageClassification"),Qpr=o(" (Swin model)"),Hpr=l(),T6=a("li"),C2e=a("strong"),Upr=o("vit"),Jpr=o(" \u2014 "),cQ=a("a"),Ypr=o("TFViTForImageClassification"),Kpr=o(" (ViT model)"),Zpr=l(),F(M6.$$.fragment),Wqe=l(),Kd=a("h2"),E6=a("a"),w2e=a("span"),F(cx.$$.fragment),eur=l(),A2e=a("span"),our=o("TFAutoModelForMaskedLM"),Qqe=l(),or=a("div"),F(fx.$$.fragment),rur=l(),Zd=a("p"),tur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fQ=a("a"),aur=o("from_pretrained()"),nur=o(" class method or the "),mQ=a("a"),sur=o("from_config()"),lur=o(` class
method.`),iur=l(),mx=a("p"),dur=o("This class cannot be instantiated directly using "),y2e=a("code"),cur=o("__init__()"),fur=o(" (throws an error)."),mur=l(),kt=a("div"),F(gx.$$.fragment),gur=l(),L2e=a("p"),hur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pur=l(),ec=a("p"),uur=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),_ur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),vur=o("from_pretrained()"),Fur=o(" to load the model weights."),Tur=l(),F(C6.$$.fragment),Mur=l(),xr=a("div"),F(hx.$$.fragment),Eur=l(),$2e=a("p"),Cur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wur=l(),tn=a("p"),Aur=o("The model class to instantiate is selected based on the "),k2e=a("code"),yur=o("model_type"),Lur=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(":"),Rur=l(),ie=a("ul"),w6=a("li"),P2e=a("strong"),Pur=o("albert"),Bur=o(" \u2014 "),hQ=a("a"),Iur=o("TFAlbertForMaskedLM"),qur=o(" (ALBERT model)"),Nur=l(),A6=a("li"),B2e=a("strong"),jur=o("bert"),Dur=o(" \u2014 "),pQ=a("a"),Gur=o("TFBertForMaskedLM"),Our=o(" (BERT model)"),Vur=l(),y6=a("li"),I2e=a("strong"),Xur=o("camembert"),zur=o(" \u2014 "),uQ=a("a"),Wur=o("TFCamembertForMaskedLM"),Qur=o(" (CamemBERT model)"),Hur=l(),L6=a("li"),q2e=a("strong"),Uur=o("convbert"),Jur=o(" \u2014 "),_Q=a("a"),Yur=o("TFConvBertForMaskedLM"),Kur=o(" (ConvBERT model)"),Zur=l(),x6=a("li"),N2e=a("strong"),e_r=o("deberta"),o_r=o(" \u2014 "),bQ=a("a"),r_r=o("TFDebertaForMaskedLM"),t_r=o(" (DeBERTa model)"),a_r=l(),$6=a("li"),j2e=a("strong"),n_r=o("deberta-v2"),s_r=o(" \u2014 "),vQ=a("a"),l_r=o("TFDebertaV2ForMaskedLM"),i_r=o(" (DeBERTa-v2 model)"),d_r=l(),k6=a("li"),D2e=a("strong"),c_r=o("distilbert"),f_r=o(" \u2014 "),FQ=a("a"),m_r=o("TFDistilBertForMaskedLM"),g_r=o(" (DistilBERT model)"),h_r=l(),S6=a("li"),G2e=a("strong"),p_r=o("electra"),u_r=o(" \u2014 "),TQ=a("a"),__r=o("TFElectraForMaskedLM"),b_r=o(" (ELECTRA model)"),v_r=l(),R6=a("li"),O2e=a("strong"),F_r=o("flaubert"),T_r=o(" \u2014 "),MQ=a("a"),M_r=o("TFFlaubertWithLMHeadModel"),E_r=o(" (FlauBERT model)"),C_r=l(),P6=a("li"),V2e=a("strong"),w_r=o("funnel"),A_r=o(" \u2014 "),EQ=a("a"),y_r=o("TFFunnelForMaskedLM"),L_r=o(" (Funnel Transformer model)"),x_r=l(),B6=a("li"),X2e=a("strong"),$_r=o("layoutlm"),k_r=o(" \u2014 "),CQ=a("a"),S_r=o("TFLayoutLMForMaskedLM"),R_r=o(" (LayoutLM model)"),P_r=l(),I6=a("li"),z2e=a("strong"),B_r=o("longformer"),I_r=o(" \u2014 "),wQ=a("a"),q_r=o("TFLongformerForMaskedLM"),N_r=o(" (Longformer model)"),j_r=l(),q6=a("li"),W2e=a("strong"),D_r=o("mobilebert"),G_r=o(" \u2014 "),AQ=a("a"),O_r=o("TFMobileBertForMaskedLM"),V_r=o(" (MobileBERT model)"),X_r=l(),N6=a("li"),Q2e=a("strong"),z_r=o("mpnet"),W_r=o(" \u2014 "),yQ=a("a"),Q_r=o("TFMPNetForMaskedLM"),H_r=o(" (MPNet model)"),U_r=l(),j6=a("li"),H2e=a("strong"),J_r=o("rembert"),Y_r=o(" \u2014 "),LQ=a("a"),K_r=o("TFRemBertForMaskedLM"),Z_r=o(" (RemBERT model)"),e1r=l(),D6=a("li"),U2e=a("strong"),o1r=o("roberta"),r1r=o(" \u2014 "),xQ=a("a"),t1r=o("TFRobertaForMaskedLM"),a1r=o(" (RoBERTa model)"),n1r=l(),G6=a("li"),J2e=a("strong"),s1r=o("roformer"),l1r=o(" \u2014 "),$Q=a("a"),i1r=o("TFRoFormerForMaskedLM"),d1r=o(" (RoFormer model)"),c1r=l(),O6=a("li"),Y2e=a("strong"),f1r=o("tapas"),m1r=o(" \u2014 "),kQ=a("a"),g1r=o("TFTapasForMaskedLM"),h1r=o(" (TAPAS model)"),p1r=l(),V6=a("li"),K2e=a("strong"),u1r=o("xlm"),_1r=o(" \u2014 "),SQ=a("a"),b1r=o("TFXLMWithLMHeadModel"),v1r=o(" (XLM model)"),F1r=l(),X6=a("li"),Z2e=a("strong"),T1r=o("xlm-roberta"),M1r=o(" \u2014 "),RQ=a("a"),E1r=o("TFXLMRobertaForMaskedLM"),C1r=o(" (XLM-RoBERTa model)"),w1r=l(),F(z6.$$.fragment),Hqe=l(),oc=a("h2"),W6=a("a"),e4e=a("span"),F(px.$$.fragment),A1r=l(),o4e=a("span"),y1r=o("TFAutoModelForSeq2SeqLM"),Uqe=l(),rr=a("div"),F(ux.$$.fragment),L1r=l(),rc=a("p"),x1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PQ=a("a"),$1r=o("from_pretrained()"),k1r=o(" class method or the "),BQ=a("a"),S1r=o("from_config()"),R1r=o(` class
method.`),P1r=l(),_x=a("p"),B1r=o("This class cannot be instantiated directly using "),r4e=a("code"),I1r=o("__init__()"),q1r=o(" (throws an error)."),N1r=l(),St=a("div"),F(bx.$$.fragment),j1r=l(),t4e=a("p"),D1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G1r=l(),tc=a("p"),O1r=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),V1r=o("not"),X1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),z1r=o("from_pretrained()"),W1r=o(" to load the model weights."),Q1r=l(),F(Q6.$$.fragment),H1r=l(),$r=a("div"),F(vx.$$.fragment),U1r=l(),n4e=a("p"),J1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y1r=l(),an=a("p"),K1r=o("The model class to instantiate is selected based on the "),s4e=a("code"),Z1r=o("model_type"),ebr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),obr=o("pretrained_model_name_or_path"),rbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(":"),nbr=l(),ye=a("ul"),H6=a("li"),d4e=a("strong"),sbr=o("bart"),lbr=o(" \u2014 "),qQ=a("a"),ibr=o("TFBartForConditionalGeneration"),dbr=o(" (BART model)"),cbr=l(),U6=a("li"),c4e=a("strong"),fbr=o("blenderbot"),mbr=o(" \u2014 "),NQ=a("a"),gbr=o("TFBlenderbotForConditionalGeneration"),hbr=o(" (Blenderbot model)"),pbr=l(),J6=a("li"),f4e=a("strong"),ubr=o("blenderbot-small"),_br=o(" \u2014 "),jQ=a("a"),bbr=o("TFBlenderbotSmallForConditionalGeneration"),vbr=o(" (BlenderbotSmall model)"),Fbr=l(),Y6=a("li"),m4e=a("strong"),Tbr=o("encoder-decoder"),Mbr=o(" \u2014 "),DQ=a("a"),Ebr=o("TFEncoderDecoderModel"),Cbr=o(" (Encoder decoder model)"),wbr=l(),K6=a("li"),g4e=a("strong"),Abr=o("led"),ybr=o(" \u2014 "),GQ=a("a"),Lbr=o("TFLEDForConditionalGeneration"),xbr=o(" (LED model)"),$br=l(),Z6=a("li"),h4e=a("strong"),kbr=o("marian"),Sbr=o(" \u2014 "),OQ=a("a"),Rbr=o("TFMarianMTModel"),Pbr=o(" (Marian model)"),Bbr=l(),eT=a("li"),p4e=a("strong"),Ibr=o("mbart"),qbr=o(" \u2014 "),VQ=a("a"),Nbr=o("TFMBartForConditionalGeneration"),jbr=o(" (mBART model)"),Dbr=l(),oT=a("li"),u4e=a("strong"),Gbr=o("mt5"),Obr=o(" \u2014 "),XQ=a("a"),Vbr=o("TFMT5ForConditionalGeneration"),Xbr=o(" (mT5 model)"),zbr=l(),rT=a("li"),_4e=a("strong"),Wbr=o("pegasus"),Qbr=o(" \u2014 "),zQ=a("a"),Hbr=o("TFPegasusForConditionalGeneration"),Ubr=o(" (Pegasus model)"),Jbr=l(),tT=a("li"),b4e=a("strong"),Ybr=o("t5"),Kbr=o(" \u2014 "),WQ=a("a"),Zbr=o("TFT5ForConditionalGeneration"),e2r=o(" (T5 model)"),o2r=l(),F(aT.$$.fragment),Jqe=l(),ac=a("h2"),nT=a("a"),v4e=a("span"),F(Fx.$$.fragment),r2r=l(),F4e=a("span"),t2r=o("TFAutoModelForSequenceClassification"),Yqe=l(),tr=a("div"),F(Tx.$$.fragment),a2r=l(),nc=a("p"),n2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QQ=a("a"),s2r=o("from_pretrained()"),l2r=o(" class method or the "),HQ=a("a"),i2r=o("from_config()"),d2r=o(` class
method.`),c2r=l(),Mx=a("p"),f2r=o("This class cannot be instantiated directly using "),T4e=a("code"),m2r=o("__init__()"),g2r=o(" (throws an error)."),h2r=l(),Rt=a("div"),F(Ex.$$.fragment),p2r=l(),M4e=a("p"),u2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_2r=l(),sc=a("p"),b2r=o(`Note:
Loading a model from its configuration file does `),E4e=a("strong"),v2r=o("not"),F2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),T2r=o("from_pretrained()"),M2r=o(" to load the model weights."),E2r=l(),F(sT.$$.fragment),C2r=l(),kr=a("div"),F(Cx.$$.fragment),w2r=l(),C4e=a("p"),A2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y2r=l(),nn=a("p"),L2r=o("The model class to instantiate is selected based on the "),w4e=a("code"),x2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),A4e=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=a("code"),R2r=o("pretrained_model_name_or_path"),P2r=o(":"),B2r=l(),ee=a("ul"),lT=a("li"),L4e=a("strong"),I2r=o("albert"),q2r=o(" \u2014 "),JQ=a("a"),N2r=o("TFAlbertForSequenceClassification"),j2r=o(" (ALBERT model)"),D2r=l(),iT=a("li"),x4e=a("strong"),G2r=o("bert"),O2r=o(" \u2014 "),YQ=a("a"),V2r=o("TFBertForSequenceClassification"),X2r=o(" (BERT model)"),z2r=l(),dT=a("li"),$4e=a("strong"),W2r=o("camembert"),Q2r=o(" \u2014 "),KQ=a("a"),H2r=o("TFCamembertForSequenceClassification"),U2r=o(" (CamemBERT model)"),J2r=l(),cT=a("li"),k4e=a("strong"),Y2r=o("convbert"),K2r=o(" \u2014 "),ZQ=a("a"),Z2r=o("TFConvBertForSequenceClassification"),e4r=o(" (ConvBERT model)"),o4r=l(),fT=a("li"),S4e=a("strong"),r4r=o("ctrl"),t4r=o(" \u2014 "),eH=a("a"),a4r=o("TFCTRLForSequenceClassification"),n4r=o(" (CTRL model)"),s4r=l(),mT=a("li"),R4e=a("strong"),l4r=o("deberta"),i4r=o(" \u2014 "),oH=a("a"),d4r=o("TFDebertaForSequenceClassification"),c4r=o(" (DeBERTa model)"),f4r=l(),gT=a("li"),P4e=a("strong"),m4r=o("deberta-v2"),g4r=o(" \u2014 "),rH=a("a"),h4r=o("TFDebertaV2ForSequenceClassification"),p4r=o(" (DeBERTa-v2 model)"),u4r=l(),hT=a("li"),B4e=a("strong"),_4r=o("distilbert"),b4r=o(" \u2014 "),tH=a("a"),v4r=o("TFDistilBertForSequenceClassification"),F4r=o(" (DistilBERT model)"),T4r=l(),pT=a("li"),I4e=a("strong"),M4r=o("electra"),E4r=o(" \u2014 "),aH=a("a"),C4r=o("TFElectraForSequenceClassification"),w4r=o(" (ELECTRA model)"),A4r=l(),uT=a("li"),q4e=a("strong"),y4r=o("flaubert"),L4r=o(" \u2014 "),nH=a("a"),x4r=o("TFFlaubertForSequenceClassification"),$4r=o(" (FlauBERT model)"),k4r=l(),_T=a("li"),N4e=a("strong"),S4r=o("funnel"),R4r=o(" \u2014 "),sH=a("a"),P4r=o("TFFunnelForSequenceClassification"),B4r=o(" (Funnel Transformer model)"),I4r=l(),bT=a("li"),j4e=a("strong"),q4r=o("gpt2"),N4r=o(" \u2014 "),lH=a("a"),j4r=o("TFGPT2ForSequenceClassification"),D4r=o(" (OpenAI GPT-2 model)"),G4r=l(),vT=a("li"),D4e=a("strong"),O4r=o("gptj"),V4r=o(" \u2014 "),iH=a("a"),X4r=o("TFGPTJForSequenceClassification"),z4r=o(" (GPT-J model)"),W4r=l(),FT=a("li"),G4e=a("strong"),Q4r=o("layoutlm"),H4r=o(" \u2014 "),dH=a("a"),U4r=o("TFLayoutLMForSequenceClassification"),J4r=o(" (LayoutLM model)"),Y4r=l(),TT=a("li"),O4e=a("strong"),K4r=o("longformer"),Z4r=o(" \u2014 "),cH=a("a"),e5r=o("TFLongformerForSequenceClassification"),o5r=o(" (Longformer model)"),r5r=l(),MT=a("li"),V4e=a("strong"),t5r=o("mobilebert"),a5r=o(" \u2014 "),fH=a("a"),n5r=o("TFMobileBertForSequenceClassification"),s5r=o(" (MobileBERT model)"),l5r=l(),ET=a("li"),X4e=a("strong"),i5r=o("mpnet"),d5r=o(" \u2014 "),mH=a("a"),c5r=o("TFMPNetForSequenceClassification"),f5r=o(" (MPNet model)"),m5r=l(),CT=a("li"),z4e=a("strong"),g5r=o("openai-gpt"),h5r=o(" \u2014 "),gH=a("a"),p5r=o("TFOpenAIGPTForSequenceClassification"),u5r=o(" (OpenAI GPT model)"),_5r=l(),wT=a("li"),W4e=a("strong"),b5r=o("rembert"),v5r=o(" \u2014 "),hH=a("a"),F5r=o("TFRemBertForSequenceClassification"),T5r=o(" (RemBERT model)"),M5r=l(),AT=a("li"),Q4e=a("strong"),E5r=o("roberta"),C5r=o(" \u2014 "),pH=a("a"),w5r=o("TFRobertaForSequenceClassification"),A5r=o(" (RoBERTa model)"),y5r=l(),yT=a("li"),H4e=a("strong"),L5r=o("roformer"),x5r=o(" \u2014 "),uH=a("a"),$5r=o("TFRoFormerForSequenceClassification"),k5r=o(" (RoFormer model)"),S5r=l(),LT=a("li"),U4e=a("strong"),R5r=o("tapas"),P5r=o(" \u2014 "),_H=a("a"),B5r=o("TFTapasForSequenceClassification"),I5r=o(" (TAPAS model)"),q5r=l(),xT=a("li"),J4e=a("strong"),N5r=o("transfo-xl"),j5r=o(" \u2014 "),bH=a("a"),D5r=o("TFTransfoXLForSequenceClassification"),G5r=o(" (Transformer-XL model)"),O5r=l(),$T=a("li"),Y4e=a("strong"),V5r=o("xlm"),X5r=o(" \u2014 "),vH=a("a"),z5r=o("TFXLMForSequenceClassification"),W5r=o(" (XLM model)"),Q5r=l(),kT=a("li"),K4e=a("strong"),H5r=o("xlm-roberta"),U5r=o(" \u2014 "),FH=a("a"),J5r=o("TFXLMRobertaForSequenceClassification"),Y5r=o(" (XLM-RoBERTa model)"),K5r=l(),ST=a("li"),Z4e=a("strong"),Z5r=o("xlnet"),evr=o(" \u2014 "),TH=a("a"),ovr=o("TFXLNetForSequenceClassification"),rvr=o(" (XLNet model)"),tvr=l(),F(RT.$$.fragment),Kqe=l(),lc=a("h2"),PT=a("a"),e5e=a("span"),F(wx.$$.fragment),avr=l(),o5e=a("span"),nvr=o("TFAutoModelForMultipleChoice"),Zqe=l(),ar=a("div"),F(Ax.$$.fragment),svr=l(),ic=a("p"),lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=a("a"),ivr=o("from_pretrained()"),dvr=o(" class method or the "),EH=a("a"),cvr=o("from_config()"),fvr=o(` class
method.`),mvr=l(),yx=a("p"),gvr=o("This class cannot be instantiated directly using "),r5e=a("code"),hvr=o("__init__()"),pvr=o(" (throws an error)."),uvr=l(),Pt=a("div"),F(Lx.$$.fragment),_vr=l(),t5e=a("p"),bvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vvr=l(),dc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),Tvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),Evr=o("from_pretrained()"),Cvr=o(" to load the model weights."),wvr=l(),F(BT.$$.fragment),Avr=l(),Sr=a("div"),F(xx.$$.fragment),yvr=l(),n5e=a("p"),Lvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xvr=l(),sn=a("p"),$vr=o("The model class to instantiate is selected based on the "),s5e=a("code"),kvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),Rvr=o("pretrained_model_name_or_path"),Pvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),Bvr=o("pretrained_model_name_or_path"),Ivr=o(":"),qvr=l(),he=a("ul"),IT=a("li"),d5e=a("strong"),Nvr=o("albert"),jvr=o(" \u2014 "),wH=a("a"),Dvr=o("TFAlbertForMultipleChoice"),Gvr=o(" (ALBERT model)"),Ovr=l(),qT=a("li"),c5e=a("strong"),Vvr=o("bert"),Xvr=o(" \u2014 "),AH=a("a"),zvr=o("TFBertForMultipleChoice"),Wvr=o(" (BERT model)"),Qvr=l(),NT=a("li"),f5e=a("strong"),Hvr=o("camembert"),Uvr=o(" \u2014 "),yH=a("a"),Jvr=o("TFCamembertForMultipleChoice"),Yvr=o(" (CamemBERT model)"),Kvr=l(),jT=a("li"),m5e=a("strong"),Zvr=o("convbert"),e3r=o(" \u2014 "),LH=a("a"),o3r=o("TFConvBertForMultipleChoice"),r3r=o(" (ConvBERT model)"),t3r=l(),DT=a("li"),g5e=a("strong"),a3r=o("distilbert"),n3r=o(" \u2014 "),xH=a("a"),s3r=o("TFDistilBertForMultipleChoice"),l3r=o(" (DistilBERT model)"),i3r=l(),GT=a("li"),h5e=a("strong"),d3r=o("electra"),c3r=o(" \u2014 "),$H=a("a"),f3r=o("TFElectraForMultipleChoice"),m3r=o(" (ELECTRA model)"),g3r=l(),OT=a("li"),p5e=a("strong"),h3r=o("flaubert"),p3r=o(" \u2014 "),kH=a("a"),u3r=o("TFFlaubertForMultipleChoice"),_3r=o(" (FlauBERT model)"),b3r=l(),VT=a("li"),u5e=a("strong"),v3r=o("funnel"),F3r=o(" \u2014 "),SH=a("a"),T3r=o("TFFunnelForMultipleChoice"),M3r=o(" (Funnel Transformer model)"),E3r=l(),XT=a("li"),_5e=a("strong"),C3r=o("longformer"),w3r=o(" \u2014 "),RH=a("a"),A3r=o("TFLongformerForMultipleChoice"),y3r=o(" (Longformer model)"),L3r=l(),zT=a("li"),b5e=a("strong"),x3r=o("mobilebert"),$3r=o(" \u2014 "),PH=a("a"),k3r=o("TFMobileBertForMultipleChoice"),S3r=o(" (MobileBERT model)"),R3r=l(),WT=a("li"),v5e=a("strong"),P3r=o("mpnet"),B3r=o(" \u2014 "),BH=a("a"),I3r=o("TFMPNetForMultipleChoice"),q3r=o(" (MPNet model)"),N3r=l(),QT=a("li"),F5e=a("strong"),j3r=o("rembert"),D3r=o(" \u2014 "),IH=a("a"),G3r=o("TFRemBertForMultipleChoice"),O3r=o(" (RemBERT model)"),V3r=l(),HT=a("li"),T5e=a("strong"),X3r=o("roberta"),z3r=o(" \u2014 "),qH=a("a"),W3r=o("TFRobertaForMultipleChoice"),Q3r=o(" (RoBERTa model)"),H3r=l(),UT=a("li"),M5e=a("strong"),U3r=o("roformer"),J3r=o(" \u2014 "),NH=a("a"),Y3r=o("TFRoFormerForMultipleChoice"),K3r=o(" (RoFormer model)"),Z3r=l(),JT=a("li"),E5e=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),jH=a("a"),rFr=o("TFXLMForMultipleChoice"),tFr=o(" (XLM model)"),aFr=l(),YT=a("li"),C5e=a("strong"),nFr=o("xlm-roberta"),sFr=o(" \u2014 "),DH=a("a"),lFr=o("TFXLMRobertaForMultipleChoice"),iFr=o(" (XLM-RoBERTa model)"),dFr=l(),KT=a("li"),w5e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),GH=a("a"),mFr=o("TFXLNetForMultipleChoice"),gFr=o(" (XLNet model)"),hFr=l(),F(ZT.$$.fragment),eNe=l(),cc=a("h2"),eM=a("a"),A5e=a("span"),F($x.$$.fragment),pFr=l(),y5e=a("span"),uFr=o("TFAutoModelForNextSentencePrediction"),oNe=l(),nr=a("div"),F(kx.$$.fragment),_Fr=l(),fc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OH=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),VH=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),Sx=a("p"),CFr=o("This class cannot be instantiated directly using "),L5e=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),yFr=l(),Bt=a("div"),F(Rx.$$.fragment),LFr=l(),x5e=a("p"),xFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Fr=l(),mc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),PFr=o("from_pretrained()"),BFr=o(" to load the model weights."),IFr=l(),F(oM.$$.fragment),qFr=l(),Rr=a("div"),F(Px.$$.fragment),NFr=l(),k5e=a("p"),jFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DFr=l(),ln=a("p"),GFr=o("The model class to instantiate is selected based on the "),S5e=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),WFr=o("pretrained_model_name_or_path"),QFr=o(":"),HFr=l(),Bx=a("ul"),rM=a("li"),B5e=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),zH=a("a"),YFr=o("TFBertForNextSentencePrediction"),KFr=o(" (BERT model)"),ZFr=l(),tM=a("li"),I5e=a("strong"),e6r=o("mobilebert"),o6r=o(" \u2014 "),WH=a("a"),r6r=o("TFMobileBertForNextSentencePrediction"),t6r=o(" (MobileBERT model)"),a6r=l(),F(aM.$$.fragment),rNe=l(),gc=a("h2"),nM=a("a"),q5e=a("span"),F(Ix.$$.fragment),n6r=l(),N5e=a("span"),s6r=o("TFAutoModelForTableQuestionAnswering"),tNe=l(),sr=a("div"),F(qx.$$.fragment),l6r=l(),hc=a("p"),i6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QH=a("a"),d6r=o("from_pretrained()"),c6r=o(" class method or the "),HH=a("a"),f6r=o("from_config()"),m6r=o(` class
method.`),g6r=l(),Nx=a("p"),h6r=o("This class cannot be instantiated directly using "),j5e=a("code"),p6r=o("__init__()"),u6r=o(" (throws an error)."),_6r=l(),It=a("div"),F(jx.$$.fragment),b6r=l(),D5e=a("p"),v6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F6r=l(),pc=a("p"),T6r=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),M6r=o("not"),E6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),C6r=o("from_pretrained()"),w6r=o(" to load the model weights."),A6r=l(),F(sM.$$.fragment),y6r=l(),Pr=a("div"),F(Dx.$$.fragment),L6r=l(),O5e=a("p"),x6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$6r=l(),dn=a("p"),k6r=o("The model class to instantiate is selected based on the "),V5e=a("code"),S6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),P6r=o("pretrained_model_name_or_path"),B6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),I6r=o("pretrained_model_name_or_path"),q6r=o(":"),N6r=l(),W5e=a("ul"),lM=a("li"),Q5e=a("strong"),j6r=o("tapas"),D6r=o(" \u2014 "),JH=a("a"),G6r=o("TFTapasForQuestionAnswering"),O6r=o(" (TAPAS model)"),V6r=l(),F(iM.$$.fragment),aNe=l(),uc=a("h2"),dM=a("a"),H5e=a("span"),F(Gx.$$.fragment),X6r=l(),U5e=a("span"),z6r=o("TFAutoModelForTokenClassification"),nNe=l(),lr=a("div"),F(Ox.$$.fragment),W6r=l(),_c=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YH=a("a"),H6r=o("from_pretrained()"),U6r=o(" class method or the "),KH=a("a"),J6r=o("from_config()"),Y6r=o(` class
method.`),K6r=l(),Vx=a("p"),Z6r=o("This class cannot be instantiated directly using "),J5e=a("code"),eTr=o("__init__()"),oTr=o(" (throws an error)."),rTr=l(),qt=a("div"),F(Xx.$$.fragment),tTr=l(),Y5e=a("p"),aTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nTr=l(),bc=a("p"),sTr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),lTr=o("not"),iTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),dTr=o("from_pretrained()"),cTr=o(" to load the model weights."),fTr=l(),F(cM.$$.fragment),mTr=l(),Br=a("div"),F(zx.$$.fragment),gTr=l(),Z5e=a("p"),hTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pTr=l(),cn=a("p"),uTr=o("The model class to instantiate is selected based on the "),eve=a("code"),_Tr=o("model_type"),bTr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),TTr=o("pretrained_model_name_or_path"),MTr=o(":"),ETr=l(),de=a("ul"),fM=a("li"),tve=a("strong"),CTr=o("albert"),wTr=o(" \u2014 "),eU=a("a"),ATr=o("TFAlbertForTokenClassification"),yTr=o(" (ALBERT model)"),LTr=l(),mM=a("li"),ave=a("strong"),xTr=o("bert"),$Tr=o(" \u2014 "),oU=a("a"),kTr=o("TFBertForTokenClassification"),STr=o(" (BERT model)"),RTr=l(),gM=a("li"),nve=a("strong"),PTr=o("camembert"),BTr=o(" \u2014 "),rU=a("a"),ITr=o("TFCamembertForTokenClassification"),qTr=o(" (CamemBERT model)"),NTr=l(),hM=a("li"),sve=a("strong"),jTr=o("convbert"),DTr=o(" \u2014 "),tU=a("a"),GTr=o("TFConvBertForTokenClassification"),OTr=o(" (ConvBERT model)"),VTr=l(),pM=a("li"),lve=a("strong"),XTr=o("deberta"),zTr=o(" \u2014 "),aU=a("a"),WTr=o("TFDebertaForTokenClassification"),QTr=o(" (DeBERTa model)"),HTr=l(),uM=a("li"),ive=a("strong"),UTr=o("deberta-v2"),JTr=o(" \u2014 "),nU=a("a"),YTr=o("TFDebertaV2ForTokenClassification"),KTr=o(" (DeBERTa-v2 model)"),ZTr=l(),_M=a("li"),dve=a("strong"),eMr=o("distilbert"),oMr=o(" \u2014 "),sU=a("a"),rMr=o("TFDistilBertForTokenClassification"),tMr=o(" (DistilBERT model)"),aMr=l(),bM=a("li"),cve=a("strong"),nMr=o("electra"),sMr=o(" \u2014 "),lU=a("a"),lMr=o("TFElectraForTokenClassification"),iMr=o(" (ELECTRA model)"),dMr=l(),vM=a("li"),fve=a("strong"),cMr=o("flaubert"),fMr=o(" \u2014 "),iU=a("a"),mMr=o("TFFlaubertForTokenClassification"),gMr=o(" (FlauBERT model)"),hMr=l(),FM=a("li"),mve=a("strong"),pMr=o("funnel"),uMr=o(" \u2014 "),dU=a("a"),_Mr=o("TFFunnelForTokenClassification"),bMr=o(" (Funnel Transformer model)"),vMr=l(),TM=a("li"),gve=a("strong"),FMr=o("layoutlm"),TMr=o(" \u2014 "),cU=a("a"),MMr=o("TFLayoutLMForTokenClassification"),EMr=o(" (LayoutLM model)"),CMr=l(),MM=a("li"),hve=a("strong"),wMr=o("longformer"),AMr=o(" \u2014 "),fU=a("a"),yMr=o("TFLongformerForTokenClassification"),LMr=o(" (Longformer model)"),xMr=l(),EM=a("li"),pve=a("strong"),$Mr=o("mobilebert"),kMr=o(" \u2014 "),mU=a("a"),SMr=o("TFMobileBertForTokenClassification"),RMr=o(" (MobileBERT model)"),PMr=l(),CM=a("li"),uve=a("strong"),BMr=o("mpnet"),IMr=o(" \u2014 "),gU=a("a"),qMr=o("TFMPNetForTokenClassification"),NMr=o(" (MPNet model)"),jMr=l(),wM=a("li"),_ve=a("strong"),DMr=o("rembert"),GMr=o(" \u2014 "),hU=a("a"),OMr=o("TFRemBertForTokenClassification"),VMr=o(" (RemBERT model)"),XMr=l(),AM=a("li"),bve=a("strong"),zMr=o("roberta"),WMr=o(" \u2014 "),pU=a("a"),QMr=o("TFRobertaForTokenClassification"),HMr=o(" (RoBERTa model)"),UMr=l(),yM=a("li"),vve=a("strong"),JMr=o("roformer"),YMr=o(" \u2014 "),uU=a("a"),KMr=o("TFRoFormerForTokenClassification"),ZMr=o(" (RoFormer model)"),eEr=l(),LM=a("li"),Fve=a("strong"),oEr=o("xlm"),rEr=o(" \u2014 "),_U=a("a"),tEr=o("TFXLMForTokenClassification"),aEr=o(" (XLM model)"),nEr=l(),xM=a("li"),Tve=a("strong"),sEr=o("xlm-roberta"),lEr=o(" \u2014 "),bU=a("a"),iEr=o("TFXLMRobertaForTokenClassification"),dEr=o(" (XLM-RoBERTa model)"),cEr=l(),$M=a("li"),Mve=a("strong"),fEr=o("xlnet"),mEr=o(" \u2014 "),vU=a("a"),gEr=o("TFXLNetForTokenClassification"),hEr=o(" (XLNet model)"),pEr=l(),F(kM.$$.fragment),sNe=l(),vc=a("h2"),SM=a("a"),Eve=a("span"),F(Wx.$$.fragment),uEr=l(),Cve=a("span"),_Er=o("TFAutoModelForQuestionAnswering"),lNe=l(),ir=a("div"),F(Qx.$$.fragment),bEr=l(),Fc=a("p"),vEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FU=a("a"),FEr=o("from_pretrained()"),TEr=o(" class method or the "),TU=a("a"),MEr=o("from_config()"),EEr=o(` class
method.`),CEr=l(),Hx=a("p"),wEr=o("This class cannot be instantiated directly using "),wve=a("code"),AEr=o("__init__()"),yEr=o(" (throws an error)."),LEr=l(),Nt=a("div"),F(Ux.$$.fragment),xEr=l(),Ave=a("p"),$Er=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kEr=l(),Tc=a("p"),SEr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),REr=o("not"),PEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),BEr=o("from_pretrained()"),IEr=o(" to load the model weights."),qEr=l(),F(RM.$$.fragment),NEr=l(),Ir=a("div"),F(Jx.$$.fragment),jEr=l(),Lve=a("p"),DEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GEr=l(),fn=a("p"),OEr=o("The model class to instantiate is selected based on the "),xve=a("code"),VEr=o("model_type"),XEr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),zEr=o("pretrained_model_name_or_path"),WEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),QEr=o("pretrained_model_name_or_path"),HEr=o(":"),UEr=l(),ce=a("ul"),PM=a("li"),Sve=a("strong"),JEr=o("albert"),YEr=o(" \u2014 "),EU=a("a"),KEr=o("TFAlbertForQuestionAnswering"),ZEr=o(" (ALBERT model)"),eCr=l(),BM=a("li"),Rve=a("strong"),oCr=o("bert"),rCr=o(" \u2014 "),CU=a("a"),tCr=o("TFBertForQuestionAnswering"),aCr=o(" (BERT model)"),nCr=l(),IM=a("li"),Pve=a("strong"),sCr=o("camembert"),lCr=o(" \u2014 "),wU=a("a"),iCr=o("TFCamembertForQuestionAnswering"),dCr=o(" (CamemBERT model)"),cCr=l(),qM=a("li"),Bve=a("strong"),fCr=o("convbert"),mCr=o(" \u2014 "),AU=a("a"),gCr=o("TFConvBertForQuestionAnswering"),hCr=o(" (ConvBERT model)"),pCr=l(),NM=a("li"),Ive=a("strong"),uCr=o("deberta"),_Cr=o(" \u2014 "),yU=a("a"),bCr=o("TFDebertaForQuestionAnswering"),vCr=o(" (DeBERTa model)"),FCr=l(),jM=a("li"),qve=a("strong"),TCr=o("deberta-v2"),MCr=o(" \u2014 "),LU=a("a"),ECr=o("TFDebertaV2ForQuestionAnswering"),CCr=o(" (DeBERTa-v2 model)"),wCr=l(),DM=a("li"),Nve=a("strong"),ACr=o("distilbert"),yCr=o(" \u2014 "),xU=a("a"),LCr=o("TFDistilBertForQuestionAnswering"),xCr=o(" (DistilBERT model)"),$Cr=l(),GM=a("li"),jve=a("strong"),kCr=o("electra"),SCr=o(" \u2014 "),$U=a("a"),RCr=o("TFElectraForQuestionAnswering"),PCr=o(" (ELECTRA model)"),BCr=l(),OM=a("li"),Dve=a("strong"),ICr=o("flaubert"),qCr=o(" \u2014 "),kU=a("a"),NCr=o("TFFlaubertForQuestionAnsweringSimple"),jCr=o(" (FlauBERT model)"),DCr=l(),VM=a("li"),Gve=a("strong"),GCr=o("funnel"),OCr=o(" \u2014 "),SU=a("a"),VCr=o("TFFunnelForQuestionAnswering"),XCr=o(" (Funnel Transformer model)"),zCr=l(),XM=a("li"),Ove=a("strong"),WCr=o("gptj"),QCr=o(" \u2014 "),RU=a("a"),HCr=o("TFGPTJForQuestionAnswering"),UCr=o(" (GPT-J model)"),JCr=l(),zM=a("li"),Vve=a("strong"),YCr=o("longformer"),KCr=o(" \u2014 "),PU=a("a"),ZCr=o("TFLongformerForQuestionAnswering"),ewr=o(" (Longformer model)"),owr=l(),WM=a("li"),Xve=a("strong"),rwr=o("mobilebert"),twr=o(" \u2014 "),BU=a("a"),awr=o("TFMobileBertForQuestionAnswering"),nwr=o(" (MobileBERT model)"),swr=l(),QM=a("li"),zve=a("strong"),lwr=o("mpnet"),iwr=o(" \u2014 "),IU=a("a"),dwr=o("TFMPNetForQuestionAnswering"),cwr=o(" (MPNet model)"),fwr=l(),HM=a("li"),Wve=a("strong"),mwr=o("rembert"),gwr=o(" \u2014 "),qU=a("a"),hwr=o("TFRemBertForQuestionAnswering"),pwr=o(" (RemBERT model)"),uwr=l(),UM=a("li"),Qve=a("strong"),_wr=o("roberta"),bwr=o(" \u2014 "),NU=a("a"),vwr=o("TFRobertaForQuestionAnswering"),Fwr=o(" (RoBERTa model)"),Twr=l(),JM=a("li"),Hve=a("strong"),Mwr=o("roformer"),Ewr=o(" \u2014 "),jU=a("a"),Cwr=o("TFRoFormerForQuestionAnswering"),wwr=o(" (RoFormer model)"),Awr=l(),YM=a("li"),Uve=a("strong"),ywr=o("xlm"),Lwr=o(" \u2014 "),DU=a("a"),xwr=o("TFXLMForQuestionAnsweringSimple"),$wr=o(" (XLM model)"),kwr=l(),KM=a("li"),Jve=a("strong"),Swr=o("xlm-roberta"),Rwr=o(" \u2014 "),GU=a("a"),Pwr=o("TFXLMRobertaForQuestionAnswering"),Bwr=o(" (XLM-RoBERTa model)"),Iwr=l(),ZM=a("li"),Yve=a("strong"),qwr=o("xlnet"),Nwr=o(" \u2014 "),OU=a("a"),jwr=o("TFXLNetForQuestionAnsweringSimple"),Dwr=o(" (XLNet model)"),Gwr=l(),F(eE.$$.fragment),iNe=l(),Mc=a("h2"),oE=a("a"),Kve=a("span"),F(Yx.$$.fragment),Owr=l(),Zve=a("span"),Vwr=o("TFAutoModelForVision2Seq"),dNe=l(),dr=a("div"),F(Kx.$$.fragment),Xwr=l(),Ec=a("p"),zwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VU=a("a"),Wwr=o("from_pretrained()"),Qwr=o(" class method or the "),XU=a("a"),Hwr=o("from_config()"),Uwr=o(` class
method.`),Jwr=l(),Zx=a("p"),Ywr=o("This class cannot be instantiated directly using "),e3e=a("code"),Kwr=o("__init__()"),Zwr=o(" (throws an error)."),eAr=l(),jt=a("div"),F(e7.$$.fragment),oAr=l(),o3e=a("p"),rAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tAr=l(),Cc=a("p"),aAr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),nAr=o("not"),sAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),lAr=o("from_pretrained()"),iAr=o(" to load the model weights."),dAr=l(),F(rE.$$.fragment),cAr=l(),qr=a("div"),F(o7.$$.fragment),fAr=l(),t3e=a("p"),mAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gAr=l(),mn=a("p"),hAr=o("The model class to instantiate is selected based on the "),a3e=a("code"),pAr=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),_Ar=o("pretrained_model_name_or_path"),bAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),vAr=o("pretrained_model_name_or_path"),FAr=o(":"),TAr=l(),l3e=a("ul"),tE=a("li"),i3e=a("strong"),MAr=o("vision-encoder-decoder"),EAr=o(" \u2014 "),WU=a("a"),CAr=o("TFVisionEncoderDecoderModel"),wAr=o(" (Vision Encoder decoder model)"),AAr=l(),F(aE.$$.fragment),cNe=l(),wc=a("h2"),nE=a("a"),d3e=a("span"),F(r7.$$.fragment),yAr=l(),c3e=a("span"),LAr=o("TFAutoModelForSpeechSeq2Seq"),fNe=l(),cr=a("div"),F(t7.$$.fragment),xAr=l(),Ac=a("p"),$Ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QU=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),HU=a("a"),RAr=o("from_config()"),PAr=o(` class
method.`),BAr=l(),a7=a("p"),IAr=o("This class cannot be instantiated directly using "),f3e=a("code"),qAr=o("__init__()"),NAr=o(" (throws an error)."),jAr=l(),Dt=a("div"),F(n7.$$.fragment),DAr=l(),m3e=a("p"),GAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OAr=l(),yc=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),XAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),WAr=o("from_pretrained()"),QAr=o(" to load the model weights."),HAr=l(),F(sE.$$.fragment),UAr=l(),Nr=a("div"),F(s7.$$.fragment),JAr=l(),h3e=a("p"),YAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KAr=l(),gn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),p3e=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),b3e=a("ul"),lE=a("li"),v3e=a("strong"),l0r=o("speech_to_text"),i0r=o(" \u2014 "),JU=a("a"),d0r=o("TFSpeech2TextForConditionalGeneration"),c0r=o(" (Speech2Text model)"),f0r=l(),F(iE.$$.fragment),mNe=l(),Lc=a("h2"),dE=a("a"),F3e=a("span"),F(l7.$$.fragment),m0r=l(),T3e=a("span"),g0r=o("FlaxAutoModel"),gNe=l(),fr=a("div"),F(i7.$$.fragment),h0r=l(),xc=a("p"),p0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YU=a("a"),u0r=o("from_pretrained()"),_0r=o(" class method or the "),KU=a("a"),b0r=o("from_config()"),v0r=o(` class
method.`),F0r=l(),d7=a("p"),T0r=o("This class cannot be instantiated directly using "),M3e=a("code"),M0r=o("__init__()"),E0r=o(" (throws an error)."),C0r=l(),Gt=a("div"),F(c7.$$.fragment),w0r=l(),E3e=a("p"),A0r=o("Instantiates one of the base model classes of the library from a configuration."),y0r=l(),$c=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),C3e=a("strong"),x0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),k0r=o("from_pretrained()"),S0r=o(" to load the model weights."),R0r=l(),F(cE.$$.fragment),P0r=l(),jr=a("div"),F(f7.$$.fragment),B0r=l(),w3e=a("p"),I0r=o("Instantiate one of the base model classes of the library from a pretrained model."),q0r=l(),hn=a("p"),N0r=o("The model class to instantiate is selected based on the "),A3e=a("code"),j0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(":"),z0r=l(),re=a("ul"),fE=a("li"),x3e=a("strong"),W0r=o("albert"),Q0r=o(" \u2014 "),eJ=a("a"),H0r=o("FlaxAlbertModel"),U0r=o(" (ALBERT model)"),J0r=l(),mE=a("li"),$3e=a("strong"),Y0r=o("bart"),K0r=o(" \u2014 "),oJ=a("a"),Z0r=o("FlaxBartModel"),eyr=o(" (BART model)"),oyr=l(),gE=a("li"),k3e=a("strong"),ryr=o("beit"),tyr=o(" \u2014 "),rJ=a("a"),ayr=o("FlaxBeitModel"),nyr=o(" (BEiT model)"),syr=l(),hE=a("li"),S3e=a("strong"),lyr=o("bert"),iyr=o(" \u2014 "),tJ=a("a"),dyr=o("FlaxBertModel"),cyr=o(" (BERT model)"),fyr=l(),pE=a("li"),R3e=a("strong"),myr=o("big_bird"),gyr=o(" \u2014 "),aJ=a("a"),hyr=o("FlaxBigBirdModel"),pyr=o(" (BigBird model)"),uyr=l(),uE=a("li"),P3e=a("strong"),_yr=o("blenderbot"),byr=o(" \u2014 "),nJ=a("a"),vyr=o("FlaxBlenderbotModel"),Fyr=o(" (Blenderbot model)"),Tyr=l(),_E=a("li"),B3e=a("strong"),Myr=o("blenderbot-small"),Eyr=o(" \u2014 "),sJ=a("a"),Cyr=o("FlaxBlenderbotSmallModel"),wyr=o(" (BlenderbotSmall model)"),Ayr=l(),bE=a("li"),I3e=a("strong"),yyr=o("clip"),Lyr=o(" \u2014 "),lJ=a("a"),xyr=o("FlaxCLIPModel"),$yr=o(" (CLIP model)"),kyr=l(),vE=a("li"),q3e=a("strong"),Syr=o("distilbert"),Ryr=o(" \u2014 "),iJ=a("a"),Pyr=o("FlaxDistilBertModel"),Byr=o(" (DistilBERT model)"),Iyr=l(),FE=a("li"),N3e=a("strong"),qyr=o("electra"),Nyr=o(" \u2014 "),dJ=a("a"),jyr=o("FlaxElectraModel"),Dyr=o(" (ELECTRA model)"),Gyr=l(),TE=a("li"),j3e=a("strong"),Oyr=o("gpt2"),Vyr=o(" \u2014 "),cJ=a("a"),Xyr=o("FlaxGPT2Model"),zyr=o(" (OpenAI GPT-2 model)"),Wyr=l(),ME=a("li"),D3e=a("strong"),Qyr=o("gpt_neo"),Hyr=o(" \u2014 "),fJ=a("a"),Uyr=o("FlaxGPTNeoModel"),Jyr=o(" (GPT Neo model)"),Yyr=l(),EE=a("li"),G3e=a("strong"),Kyr=o("gptj"),Zyr=o(" \u2014 "),mJ=a("a"),eLr=o("FlaxGPTJModel"),oLr=o(" (GPT-J model)"),rLr=l(),CE=a("li"),O3e=a("strong"),tLr=o("marian"),aLr=o(" \u2014 "),gJ=a("a"),nLr=o("FlaxMarianModel"),sLr=o(" (Marian model)"),lLr=l(),wE=a("li"),V3e=a("strong"),iLr=o("mbart"),dLr=o(" \u2014 "),hJ=a("a"),cLr=o("FlaxMBartModel"),fLr=o(" (mBART model)"),mLr=l(),AE=a("li"),X3e=a("strong"),gLr=o("mt5"),hLr=o(" \u2014 "),pJ=a("a"),pLr=o("FlaxMT5Model"),uLr=o(" (mT5 model)"),_Lr=l(),yE=a("li"),z3e=a("strong"),bLr=o("pegasus"),vLr=o(" \u2014 "),uJ=a("a"),FLr=o("FlaxPegasusModel"),TLr=o(" (Pegasus model)"),MLr=l(),LE=a("li"),W3e=a("strong"),ELr=o("roberta"),CLr=o(" \u2014 "),_J=a("a"),wLr=o("FlaxRobertaModel"),ALr=o(" (RoBERTa model)"),yLr=l(),xE=a("li"),Q3e=a("strong"),LLr=o("roformer"),xLr=o(" \u2014 "),bJ=a("a"),$Lr=o("FlaxRoFormerModel"),kLr=o(" (RoFormer model)"),SLr=l(),$E=a("li"),H3e=a("strong"),RLr=o("t5"),PLr=o(" \u2014 "),vJ=a("a"),BLr=o("FlaxT5Model"),ILr=o(" (T5 model)"),qLr=l(),kE=a("li"),U3e=a("strong"),NLr=o("vision-text-dual-encoder"),jLr=o(" \u2014 "),FJ=a("a"),DLr=o("FlaxVisionTextDualEncoderModel"),GLr=o(" (VisionTextDualEncoder model)"),OLr=l(),SE=a("li"),J3e=a("strong"),VLr=o("vit"),XLr=o(" \u2014 "),TJ=a("a"),zLr=o("FlaxViTModel"),WLr=o(" (ViT model)"),QLr=l(),RE=a("li"),Y3e=a("strong"),HLr=o("wav2vec2"),ULr=o(" \u2014 "),MJ=a("a"),JLr=o("FlaxWav2Vec2Model"),YLr=o(" (Wav2Vec2 model)"),KLr=l(),PE=a("li"),K3e=a("strong"),ZLr=o("xglm"),e8r=o(" \u2014 "),EJ=a("a"),o8r=o("FlaxXGLMModel"),r8r=o(" (XGLM model)"),t8r=l(),BE=a("li"),Z3e=a("strong"),a8r=o("xlm-roberta"),n8r=o(" \u2014 "),CJ=a("a"),s8r=o("FlaxXLMRobertaModel"),l8r=o(" (XLM-RoBERTa model)"),i8r=l(),F(IE.$$.fragment),hNe=l(),kc=a("h2"),qE=a("a"),eFe=a("span"),F(m7.$$.fragment),d8r=l(),oFe=a("span"),c8r=o("FlaxAutoModelForCausalLM"),pNe=l(),mr=a("div"),F(g7.$$.fragment),f8r=l(),Sc=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wJ=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),AJ=a("a"),p8r=o("from_config()"),u8r=o(` class
method.`),_8r=l(),h7=a("p"),b8r=o("This class cannot be instantiated directly using "),rFe=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),Ot=a("div"),F(p7.$$.fragment),M8r=l(),tFe=a("p"),E8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C8r=l(),Rc=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),A8r=o("not"),y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),L8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(NE.$$.fragment),k8r=l(),Dr=a("div"),F(u7.$$.fragment),S8r=l(),nFe=a("p"),R8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P8r=l(),pn=a("p"),B8r=o("The model class to instantiate is selected based on the "),sFe=a("code"),I8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),N8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),Re=a("ul"),jE=a("li"),dFe=a("strong"),V8r=o("bart"),X8r=o(" \u2014 "),LJ=a("a"),z8r=o("FlaxBartForCausalLM"),W8r=o(" (BART model)"),Q8r=l(),DE=a("li"),cFe=a("strong"),H8r=o("bert"),U8r=o(" \u2014 "),xJ=a("a"),J8r=o("FlaxBertForCausalLM"),Y8r=o(" (BERT model)"),K8r=l(),GE=a("li"),fFe=a("strong"),Z8r=o("big_bird"),exr=o(" \u2014 "),$J=a("a"),oxr=o("FlaxBigBirdForCausalLM"),rxr=o(" (BigBird model)"),txr=l(),OE=a("li"),mFe=a("strong"),axr=o("electra"),nxr=o(" \u2014 "),kJ=a("a"),sxr=o("FlaxElectraForCausalLM"),lxr=o(" (ELECTRA model)"),ixr=l(),VE=a("li"),gFe=a("strong"),dxr=o("gpt2"),cxr=o(" \u2014 "),SJ=a("a"),fxr=o("FlaxGPT2LMHeadModel"),mxr=o(" (OpenAI GPT-2 model)"),gxr=l(),XE=a("li"),hFe=a("strong"),hxr=o("gpt_neo"),pxr=o(" \u2014 "),RJ=a("a"),uxr=o("FlaxGPTNeoForCausalLM"),_xr=o(" (GPT Neo model)"),bxr=l(),zE=a("li"),pFe=a("strong"),vxr=o("gptj"),Fxr=o(" \u2014 "),PJ=a("a"),Txr=o("FlaxGPTJForCausalLM"),Mxr=o(" (GPT-J model)"),Exr=l(),WE=a("li"),uFe=a("strong"),Cxr=o("roberta"),wxr=o(" \u2014 "),BJ=a("a"),Axr=o("FlaxRobertaForCausalLM"),yxr=o(" (RoBERTa model)"),Lxr=l(),QE=a("li"),_Fe=a("strong"),xxr=o("xglm"),$xr=o(" \u2014 "),IJ=a("a"),kxr=o("FlaxXGLMForCausalLM"),Sxr=o(" (XGLM model)"),Rxr=l(),F(HE.$$.fragment),uNe=l(),Pc=a("h2"),UE=a("a"),bFe=a("span"),F(_7.$$.fragment),Pxr=l(),vFe=a("span"),Bxr=o("FlaxAutoModelForPreTraining"),_Ne=l(),gr=a("div"),F(b7.$$.fragment),Ixr=l(),Bc=a("p"),qxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qJ=a("a"),Nxr=o("from_pretrained()"),jxr=o(" class method or the "),NJ=a("a"),Dxr=o("from_config()"),Gxr=o(` class
method.`),Oxr=l(),v7=a("p"),Vxr=o("This class cannot be instantiated directly using "),FFe=a("code"),Xxr=o("__init__()"),zxr=o(" (throws an error)."),Wxr=l(),Vt=a("div"),F(F7.$$.fragment),Qxr=l(),TFe=a("p"),Hxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uxr=l(),Ic=a("p"),Jxr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),Yxr=o("not"),Kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),Zxr=o("from_pretrained()"),e7r=o(" to load the model weights."),o7r=l(),F(JE.$$.fragment),r7r=l(),Gr=a("div"),F(T7.$$.fragment),t7r=l(),EFe=a("p"),a7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n7r=l(),un=a("p"),s7r=o("The model class to instantiate is selected based on the "),CFe=a("code"),l7r=o("model_type"),i7r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),d7r=o("pretrained_model_name_or_path"),c7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(":"),g7r=l(),Me=a("ul"),YE=a("li"),yFe=a("strong"),h7r=o("albert"),p7r=o(" \u2014 "),DJ=a("a"),u7r=o("FlaxAlbertForPreTraining"),_7r=o(" (ALBERT model)"),b7r=l(),KE=a("li"),LFe=a("strong"),v7r=o("bart"),F7r=o(" \u2014 "),GJ=a("a"),T7r=o("FlaxBartForConditionalGeneration"),M7r=o(" (BART model)"),E7r=l(),ZE=a("li"),xFe=a("strong"),C7r=o("bert"),w7r=o(" \u2014 "),OJ=a("a"),A7r=o("FlaxBertForPreTraining"),y7r=o(" (BERT model)"),L7r=l(),eC=a("li"),$Fe=a("strong"),x7r=o("big_bird"),$7r=o(" \u2014 "),VJ=a("a"),k7r=o("FlaxBigBirdForPreTraining"),S7r=o(" (BigBird model)"),R7r=l(),oC=a("li"),kFe=a("strong"),P7r=o("electra"),B7r=o(" \u2014 "),XJ=a("a"),I7r=o("FlaxElectraForPreTraining"),q7r=o(" (ELECTRA model)"),N7r=l(),rC=a("li"),SFe=a("strong"),j7r=o("mbart"),D7r=o(" \u2014 "),zJ=a("a"),G7r=o("FlaxMBartForConditionalGeneration"),O7r=o(" (mBART model)"),V7r=l(),tC=a("li"),RFe=a("strong"),X7r=o("mt5"),z7r=o(" \u2014 "),WJ=a("a"),W7r=o("FlaxMT5ForConditionalGeneration"),Q7r=o(" (mT5 model)"),H7r=l(),aC=a("li"),PFe=a("strong"),U7r=o("roberta"),J7r=o(" \u2014 "),QJ=a("a"),Y7r=o("FlaxRobertaForMaskedLM"),K7r=o(" (RoBERTa model)"),Z7r=l(),nC=a("li"),BFe=a("strong"),e9r=o("roformer"),o9r=o(" \u2014 "),HJ=a("a"),r9r=o("FlaxRoFormerForMaskedLM"),t9r=o(" (RoFormer model)"),a9r=l(),sC=a("li"),IFe=a("strong"),n9r=o("t5"),s9r=o(" \u2014 "),UJ=a("a"),l9r=o("FlaxT5ForConditionalGeneration"),i9r=o(" (T5 model)"),d9r=l(),lC=a("li"),qFe=a("strong"),c9r=o("wav2vec2"),f9r=o(" \u2014 "),JJ=a("a"),m9r=o("FlaxWav2Vec2ForPreTraining"),g9r=o(" (Wav2Vec2 model)"),h9r=l(),iC=a("li"),NFe=a("strong"),p9r=o("xlm-roberta"),u9r=o(" \u2014 "),YJ=a("a"),_9r=o("FlaxXLMRobertaForMaskedLM"),b9r=o(" (XLM-RoBERTa model)"),v9r=l(),F(dC.$$.fragment),bNe=l(),qc=a("h2"),cC=a("a"),jFe=a("span"),F(M7.$$.fragment),F9r=l(),DFe=a("span"),T9r=o("FlaxAutoModelForMaskedLM"),vNe=l(),hr=a("div"),F(E7.$$.fragment),M9r=l(),Nc=a("p"),E9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KJ=a("a"),C9r=o("from_pretrained()"),w9r=o(" class method or the "),ZJ=a("a"),A9r=o("from_config()"),y9r=o(` class
method.`),L9r=l(),C7=a("p"),x9r=o("This class cannot be instantiated directly using "),GFe=a("code"),$9r=o("__init__()"),k9r=o(" (throws an error)."),S9r=l(),Xt=a("div"),F(w7.$$.fragment),R9r=l(),OFe=a("p"),P9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B9r=l(),jc=a("p"),I9r=o(`Note:
Loading a model from its configuration file does `),VFe=a("strong"),q9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),j9r=o("from_pretrained()"),D9r=o(" to load the model weights."),G9r=l(),F(fC.$$.fragment),O9r=l(),Or=a("div"),F(A7.$$.fragment),V9r=l(),XFe=a("p"),X9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z9r=l(),_n=a("p"),W9r=o("The model class to instantiate is selected based on the "),zFe=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),Le=a("ul"),mC=a("li"),HFe=a("strong"),e$r=o("albert"),o$r=o(" \u2014 "),oY=a("a"),r$r=o("FlaxAlbertForMaskedLM"),t$r=o(" (ALBERT model)"),a$r=l(),gC=a("li"),UFe=a("strong"),n$r=o("bart"),s$r=o(" \u2014 "),rY=a("a"),l$r=o("FlaxBartForConditionalGeneration"),i$r=o(" (BART model)"),d$r=l(),hC=a("li"),JFe=a("strong"),c$r=o("bert"),f$r=o(" \u2014 "),tY=a("a"),m$r=o("FlaxBertForMaskedLM"),g$r=o(" (BERT model)"),h$r=l(),pC=a("li"),YFe=a("strong"),p$r=o("big_bird"),u$r=o(" \u2014 "),aY=a("a"),_$r=o("FlaxBigBirdForMaskedLM"),b$r=o(" (BigBird model)"),v$r=l(),uC=a("li"),KFe=a("strong"),F$r=o("distilbert"),T$r=o(" \u2014 "),nY=a("a"),M$r=o("FlaxDistilBertForMaskedLM"),E$r=o(" (DistilBERT model)"),C$r=l(),_C=a("li"),ZFe=a("strong"),w$r=o("electra"),A$r=o(" \u2014 "),sY=a("a"),y$r=o("FlaxElectraForMaskedLM"),L$r=o(" (ELECTRA model)"),x$r=l(),bC=a("li"),e6e=a("strong"),$$r=o("mbart"),k$r=o(" \u2014 "),lY=a("a"),S$r=o("FlaxMBartForConditionalGeneration"),R$r=o(" (mBART model)"),P$r=l(),vC=a("li"),o6e=a("strong"),B$r=o("roberta"),I$r=o(" \u2014 "),iY=a("a"),q$r=o("FlaxRobertaForMaskedLM"),N$r=o(" (RoBERTa model)"),j$r=l(),FC=a("li"),r6e=a("strong"),D$r=o("roformer"),G$r=o(" \u2014 "),dY=a("a"),O$r=o("FlaxRoFormerForMaskedLM"),V$r=o(" (RoFormer model)"),X$r=l(),TC=a("li"),t6e=a("strong"),z$r=o("xlm-roberta"),W$r=o(" \u2014 "),cY=a("a"),Q$r=o("FlaxXLMRobertaForMaskedLM"),H$r=o(" (XLM-RoBERTa model)"),U$r=l(),F(MC.$$.fragment),FNe=l(),Dc=a("h2"),EC=a("a"),a6e=a("span"),F(y7.$$.fragment),J$r=l(),n6e=a("span"),Y$r=o("FlaxAutoModelForSeq2SeqLM"),TNe=l(),pr=a("div"),F(L7.$$.fragment),K$r=l(),Gc=a("p"),Z$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fY=a("a"),ekr=o("from_pretrained()"),okr=o(" class method or the "),mY=a("a"),rkr=o("from_config()"),tkr=o(` class
method.`),akr=l(),x7=a("p"),nkr=o("This class cannot be instantiated directly using "),s6e=a("code"),skr=o("__init__()"),lkr=o(" (throws an error)."),ikr=l(),zt=a("div"),F($7.$$.fragment),dkr=l(),l6e=a("p"),ckr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fkr=l(),Oc=a("p"),mkr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),gkr=o("not"),hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),pkr=o("from_pretrained()"),ukr=o(" to load the model weights."),_kr=l(),F(CC.$$.fragment),bkr=l(),Vr=a("div"),F(k7.$$.fragment),vkr=l(),d6e=a("p"),Fkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tkr=l(),bn=a("p"),Mkr=o("The model class to instantiate is selected based on the "),c6e=a("code"),Ekr=o("model_type"),Ckr=o(` property of the config object (either
passed as an argument or loaded from `),f6e=a("code"),wkr=o("pretrained_model_name_or_path"),Akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=a("code"),ykr=o("pretrained_model_name_or_path"),Lkr=o(":"),xkr=l(),Pe=a("ul"),wC=a("li"),g6e=a("strong"),$kr=o("bart"),kkr=o(" \u2014 "),hY=a("a"),Skr=o("FlaxBartForConditionalGeneration"),Rkr=o(" (BART model)"),Pkr=l(),AC=a("li"),h6e=a("strong"),Bkr=o("blenderbot"),Ikr=o(" \u2014 "),pY=a("a"),qkr=o("FlaxBlenderbotForConditionalGeneration"),Nkr=o(" (Blenderbot model)"),jkr=l(),yC=a("li"),p6e=a("strong"),Dkr=o("blenderbot-small"),Gkr=o(" \u2014 "),uY=a("a"),Okr=o("FlaxBlenderbotSmallForConditionalGeneration"),Vkr=o(" (BlenderbotSmall model)"),Xkr=l(),LC=a("li"),u6e=a("strong"),zkr=o("encoder-decoder"),Wkr=o(" \u2014 "),_Y=a("a"),Qkr=o("FlaxEncoderDecoderModel"),Hkr=o(" (Encoder decoder model)"),Ukr=l(),xC=a("li"),_6e=a("strong"),Jkr=o("marian"),Ykr=o(" \u2014 "),bY=a("a"),Kkr=o("FlaxMarianMTModel"),Zkr=o(" (Marian model)"),eSr=l(),$C=a("li"),b6e=a("strong"),oSr=o("mbart"),rSr=o(" \u2014 "),vY=a("a"),tSr=o("FlaxMBartForConditionalGeneration"),aSr=o(" (mBART model)"),nSr=l(),kC=a("li"),v6e=a("strong"),sSr=o("mt5"),lSr=o(" \u2014 "),FY=a("a"),iSr=o("FlaxMT5ForConditionalGeneration"),dSr=o(" (mT5 model)"),cSr=l(),SC=a("li"),F6e=a("strong"),fSr=o("pegasus"),mSr=o(" \u2014 "),TY=a("a"),gSr=o("FlaxPegasusForConditionalGeneration"),hSr=o(" (Pegasus model)"),pSr=l(),RC=a("li"),T6e=a("strong"),uSr=o("t5"),_Sr=o(" \u2014 "),MY=a("a"),bSr=o("FlaxT5ForConditionalGeneration"),vSr=o(" (T5 model)"),FSr=l(),F(PC.$$.fragment),MNe=l(),Vc=a("h2"),BC=a("a"),M6e=a("span"),F(S7.$$.fragment),TSr=l(),E6e=a("span"),MSr=o("FlaxAutoModelForSequenceClassification"),ENe=l(),ur=a("div"),F(R7.$$.fragment),ESr=l(),Xc=a("p"),CSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EY=a("a"),wSr=o("from_pretrained()"),ASr=o(" class method or the "),CY=a("a"),ySr=o("from_config()"),LSr=o(` class
method.`),xSr=l(),P7=a("p"),$Sr=o("This class cannot be instantiated directly using "),C6e=a("code"),kSr=o("__init__()"),SSr=o(" (throws an error)."),RSr=l(),Wt=a("div"),F(B7.$$.fragment),PSr=l(),w6e=a("p"),BSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ISr=l(),zc=a("p"),qSr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),NSr=o("not"),jSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),DSr=o("from_pretrained()"),GSr=o(" to load the model weights."),OSr=l(),F(IC.$$.fragment),VSr=l(),Xr=a("div"),F(I7.$$.fragment),XSr=l(),y6e=a("p"),zSr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WSr=l(),vn=a("p"),QSr=o("The model class to instantiate is selected based on the "),L6e=a("code"),HSr=o("model_type"),USr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),JSr=o("pretrained_model_name_or_path"),YSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(":"),eRr=l(),xe=a("ul"),qC=a("li"),k6e=a("strong"),oRr=o("albert"),rRr=o(" \u2014 "),AY=a("a"),tRr=o("FlaxAlbertForSequenceClassification"),aRr=o(" (ALBERT model)"),nRr=l(),NC=a("li"),S6e=a("strong"),sRr=o("bart"),lRr=o(" \u2014 "),yY=a("a"),iRr=o("FlaxBartForSequenceClassification"),dRr=o(" (BART model)"),cRr=l(),jC=a("li"),R6e=a("strong"),fRr=o("bert"),mRr=o(" \u2014 "),LY=a("a"),gRr=o("FlaxBertForSequenceClassification"),hRr=o(" (BERT model)"),pRr=l(),DC=a("li"),P6e=a("strong"),uRr=o("big_bird"),_Rr=o(" \u2014 "),xY=a("a"),bRr=o("FlaxBigBirdForSequenceClassification"),vRr=o(" (BigBird model)"),FRr=l(),GC=a("li"),B6e=a("strong"),TRr=o("distilbert"),MRr=o(" \u2014 "),$Y=a("a"),ERr=o("FlaxDistilBertForSequenceClassification"),CRr=o(" (DistilBERT model)"),wRr=l(),OC=a("li"),I6e=a("strong"),ARr=o("electra"),yRr=o(" \u2014 "),kY=a("a"),LRr=o("FlaxElectraForSequenceClassification"),xRr=o(" (ELECTRA model)"),$Rr=l(),VC=a("li"),q6e=a("strong"),kRr=o("mbart"),SRr=o(" \u2014 "),SY=a("a"),RRr=o("FlaxMBartForSequenceClassification"),PRr=o(" (mBART model)"),BRr=l(),XC=a("li"),N6e=a("strong"),IRr=o("roberta"),qRr=o(" \u2014 "),RY=a("a"),NRr=o("FlaxRobertaForSequenceClassification"),jRr=o(" (RoBERTa model)"),DRr=l(),zC=a("li"),j6e=a("strong"),GRr=o("roformer"),ORr=o(" \u2014 "),PY=a("a"),VRr=o("FlaxRoFormerForSequenceClassification"),XRr=o(" (RoFormer model)"),zRr=l(),WC=a("li"),D6e=a("strong"),WRr=o("xlm-roberta"),QRr=o(" \u2014 "),BY=a("a"),HRr=o("FlaxXLMRobertaForSequenceClassification"),URr=o(" (XLM-RoBERTa model)"),JRr=l(),F(QC.$$.fragment),CNe=l(),Wc=a("h2"),HC=a("a"),G6e=a("span"),F(q7.$$.fragment),YRr=l(),O6e=a("span"),KRr=o("FlaxAutoModelForQuestionAnswering"),wNe=l(),_r=a("div"),F(N7.$$.fragment),ZRr=l(),Qc=a("p"),ePr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=a("a"),oPr=o("from_pretrained()"),rPr=o(" class method or the "),qY=a("a"),tPr=o("from_config()"),aPr=o(` class
method.`),nPr=l(),j7=a("p"),sPr=o("This class cannot be instantiated directly using "),V6e=a("code"),lPr=o("__init__()"),iPr=o(" (throws an error)."),dPr=l(),Qt=a("div"),F(D7.$$.fragment),cPr=l(),X6e=a("p"),fPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mPr=l(),Hc=a("p"),gPr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),hPr=o("not"),pPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),uPr=o("from_pretrained()"),_Pr=o(" to load the model weights."),bPr=l(),F(UC.$$.fragment),vPr=l(),zr=a("div"),F(G7.$$.fragment),FPr=l(),W6e=a("p"),TPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MPr=l(),Fn=a("p"),EPr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),CPr=o("model_type"),wPr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(":"),$Pr=l(),$e=a("ul"),JC=a("li"),J6e=a("strong"),kPr=o("albert"),SPr=o(" \u2014 "),jY=a("a"),RPr=o("FlaxAlbertForQuestionAnswering"),PPr=o(" (ALBERT model)"),BPr=l(),YC=a("li"),Y6e=a("strong"),IPr=o("bart"),qPr=o(" \u2014 "),DY=a("a"),NPr=o("FlaxBartForQuestionAnswering"),jPr=o(" (BART model)"),DPr=l(),KC=a("li"),K6e=a("strong"),GPr=o("bert"),OPr=o(" \u2014 "),GY=a("a"),VPr=o("FlaxBertForQuestionAnswering"),XPr=o(" (BERT model)"),zPr=l(),ZC=a("li"),Z6e=a("strong"),WPr=o("big_bird"),QPr=o(" \u2014 "),OY=a("a"),HPr=o("FlaxBigBirdForQuestionAnswering"),UPr=o(" (BigBird model)"),JPr=l(),ew=a("li"),eTe=a("strong"),YPr=o("distilbert"),KPr=o(" \u2014 "),VY=a("a"),ZPr=o("FlaxDistilBertForQuestionAnswering"),eBr=o(" (DistilBERT model)"),oBr=l(),ow=a("li"),oTe=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),XY=a("a"),aBr=o("FlaxElectraForQuestionAnswering"),nBr=o(" (ELECTRA model)"),sBr=l(),rw=a("li"),rTe=a("strong"),lBr=o("mbart"),iBr=o(" \u2014 "),zY=a("a"),dBr=o("FlaxMBartForQuestionAnswering"),cBr=o(" (mBART model)"),fBr=l(),tw=a("li"),tTe=a("strong"),mBr=o("roberta"),gBr=o(" \u2014 "),WY=a("a"),hBr=o("FlaxRobertaForQuestionAnswering"),pBr=o(" (RoBERTa model)"),uBr=l(),aw=a("li"),aTe=a("strong"),_Br=o("roformer"),bBr=o(" \u2014 "),QY=a("a"),vBr=o("FlaxRoFormerForQuestionAnswering"),FBr=o(" (RoFormer model)"),TBr=l(),nw=a("li"),nTe=a("strong"),MBr=o("xlm-roberta"),EBr=o(" \u2014 "),HY=a("a"),CBr=o("FlaxXLMRobertaForQuestionAnswering"),wBr=o(" (XLM-RoBERTa model)"),ABr=l(),F(sw.$$.fragment),ANe=l(),Uc=a("h2"),lw=a("a"),sTe=a("span"),F(O7.$$.fragment),yBr=l(),lTe=a("span"),LBr=o("FlaxAutoModelForTokenClassification"),yNe=l(),br=a("div"),F(V7.$$.fragment),xBr=l(),Jc=a("p"),$Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UY=a("a"),kBr=o("from_pretrained()"),SBr=o(" class method or the "),JY=a("a"),RBr=o("from_config()"),PBr=o(` class
method.`),BBr=l(),X7=a("p"),IBr=o("This class cannot be instantiated directly using "),iTe=a("code"),qBr=o("__init__()"),NBr=o(" (throws an error)."),jBr=l(),Ht=a("div"),F(z7.$$.fragment),DBr=l(),dTe=a("p"),GBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OBr=l(),Yc=a("p"),VBr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),XBr=o("not"),zBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),WBr=o("from_pretrained()"),QBr=o(" to load the model weights."),HBr=l(),F(iw.$$.fragment),UBr=l(),Wr=a("div"),F(W7.$$.fragment),JBr=l(),fTe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KBr=l(),Tn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),mTe=a("code"),eIr=o("model_type"),oIr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),aIr=o("pretrained_model_name_or_path"),nIr=o(":"),sIr=l(),De=a("ul"),dw=a("li"),pTe=a("strong"),lIr=o("albert"),iIr=o(" \u2014 "),KY=a("a"),dIr=o("FlaxAlbertForTokenClassification"),cIr=o(" (ALBERT model)"),fIr=l(),cw=a("li"),uTe=a("strong"),mIr=o("bert"),gIr=o(" \u2014 "),ZY=a("a"),hIr=o("FlaxBertForTokenClassification"),pIr=o(" (BERT model)"),uIr=l(),fw=a("li"),_Te=a("strong"),_Ir=o("big_bird"),bIr=o(" \u2014 "),eK=a("a"),vIr=o("FlaxBigBirdForTokenClassification"),FIr=o(" (BigBird model)"),TIr=l(),mw=a("li"),bTe=a("strong"),MIr=o("distilbert"),EIr=o(" \u2014 "),oK=a("a"),CIr=o("FlaxDistilBertForTokenClassification"),wIr=o(" (DistilBERT model)"),AIr=l(),gw=a("li"),vTe=a("strong"),yIr=o("electra"),LIr=o(" \u2014 "),rK=a("a"),xIr=o("FlaxElectraForTokenClassification"),$Ir=o(" (ELECTRA model)"),kIr=l(),hw=a("li"),FTe=a("strong"),SIr=o("roberta"),RIr=o(" \u2014 "),tK=a("a"),PIr=o("FlaxRobertaForTokenClassification"),BIr=o(" (RoBERTa model)"),IIr=l(),pw=a("li"),TTe=a("strong"),qIr=o("roformer"),NIr=o(" \u2014 "),aK=a("a"),jIr=o("FlaxRoFormerForTokenClassification"),DIr=o(" (RoFormer model)"),GIr=l(),uw=a("li"),MTe=a("strong"),OIr=o("xlm-roberta"),VIr=o(" \u2014 "),nK=a("a"),XIr=o("FlaxXLMRobertaForTokenClassification"),zIr=o(" (XLM-RoBERTa model)"),WIr=l(),F(_w.$$.fragment),LNe=l(),Kc=a("h2"),bw=a("a"),ETe=a("span"),F(Q7.$$.fragment),QIr=l(),CTe=a("span"),HIr=o("FlaxAutoModelForMultipleChoice"),xNe=l(),vr=a("div"),F(H7.$$.fragment),UIr=l(),Zc=a("p"),JIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sK=a("a"),YIr=o("from_pretrained()"),KIr=o(" class method or the "),lK=a("a"),ZIr=o("from_config()"),eqr=o(` class
method.`),oqr=l(),U7=a("p"),rqr=o("This class cannot be instantiated directly using "),wTe=a("code"),tqr=o("__init__()"),aqr=o(" (throws an error)."),nqr=l(),Ut=a("div"),F(J7.$$.fragment),sqr=l(),ATe=a("p"),lqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iqr=l(),ef=a("p"),dqr=o(`Note:
Loading a model from its configuration file does `),yTe=a("strong"),cqr=o("not"),fqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),mqr=o("from_pretrained()"),gqr=o(" to load the model weights."),hqr=l(),F(vw.$$.fragment),pqr=l(),Qr=a("div"),F(Y7.$$.fragment),uqr=l(),LTe=a("p"),_qr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bqr=l(),Mn=a("p"),vqr=o("The model class to instantiate is selected based on the "),xTe=a("code"),Fqr=o("model_type"),Tqr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),Cqr=o("pretrained_model_name_or_path"),wqr=o(":"),Aqr=l(),Ge=a("ul"),Fw=a("li"),STe=a("strong"),yqr=o("albert"),Lqr=o(" \u2014 "),dK=a("a"),xqr=o("FlaxAlbertForMultipleChoice"),$qr=o(" (ALBERT model)"),kqr=l(),Tw=a("li"),RTe=a("strong"),Sqr=o("bert"),Rqr=o(" \u2014 "),cK=a("a"),Pqr=o("FlaxBertForMultipleChoice"),Bqr=o(" (BERT model)"),Iqr=l(),Mw=a("li"),PTe=a("strong"),qqr=o("big_bird"),Nqr=o(" \u2014 "),fK=a("a"),jqr=o("FlaxBigBirdForMultipleChoice"),Dqr=o(" (BigBird model)"),Gqr=l(),Ew=a("li"),BTe=a("strong"),Oqr=o("distilbert"),Vqr=o(" \u2014 "),mK=a("a"),Xqr=o("FlaxDistilBertForMultipleChoice"),zqr=o(" (DistilBERT model)"),Wqr=l(),Cw=a("li"),ITe=a("strong"),Qqr=o("electra"),Hqr=o(" \u2014 "),gK=a("a"),Uqr=o("FlaxElectraForMultipleChoice"),Jqr=o(" (ELECTRA model)"),Yqr=l(),ww=a("li"),qTe=a("strong"),Kqr=o("roberta"),Zqr=o(" \u2014 "),hK=a("a"),eNr=o("FlaxRobertaForMultipleChoice"),oNr=o(" (RoBERTa model)"),rNr=l(),Aw=a("li"),NTe=a("strong"),tNr=o("roformer"),aNr=o(" \u2014 "),pK=a("a"),nNr=o("FlaxRoFormerForMultipleChoice"),sNr=o(" (RoFormer model)"),lNr=l(),yw=a("li"),jTe=a("strong"),iNr=o("xlm-roberta"),dNr=o(" \u2014 "),uK=a("a"),cNr=o("FlaxXLMRobertaForMultipleChoice"),fNr=o(" (XLM-RoBERTa model)"),mNr=l(),F(Lw.$$.fragment),$Ne=l(),of=a("h2"),xw=a("a"),DTe=a("span"),F(K7.$$.fragment),gNr=l(),GTe=a("span"),hNr=o("FlaxAutoModelForNextSentencePrediction"),kNe=l(),Fr=a("div"),F(Z7.$$.fragment),pNr=l(),rf=a("p"),uNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_K=a("a"),_Nr=o("from_pretrained()"),bNr=o(" class method or the "),bK=a("a"),vNr=o("from_config()"),FNr=o(` class
method.`),TNr=l(),e9=a("p"),MNr=o("This class cannot be instantiated directly using "),OTe=a("code"),ENr=o("__init__()"),CNr=o(" (throws an error)."),wNr=l(),Jt=a("div"),F(o9.$$.fragment),ANr=l(),VTe=a("p"),yNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LNr=l(),tf=a("p"),xNr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),$Nr=o("not"),kNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),SNr=o("from_pretrained()"),RNr=o(" to load the model weights."),PNr=l(),F($w.$$.fragment),BNr=l(),Hr=a("div"),F(r9.$$.fragment),INr=l(),zTe=a("p"),qNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NNr=l(),En=a("p"),jNr=o("The model class to instantiate is selected based on the "),WTe=a("code"),DNr=o("model_type"),GNr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),ONr=o("pretrained_model_name_or_path"),VNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),XNr=o("pretrained_model_name_or_path"),zNr=o(":"),WNr=l(),UTe=a("ul"),kw=a("li"),JTe=a("strong"),QNr=o("bert"),HNr=o(" \u2014 "),FK=a("a"),UNr=o("FlaxBertForNextSentencePrediction"),JNr=o(" (BERT model)"),YNr=l(),F(Sw.$$.fragment),SNe=l(),af=a("h2"),Rw=a("a"),YTe=a("span"),F(t9.$$.fragment),KNr=l(),KTe=a("span"),ZNr=o("FlaxAutoModelForImageClassification"),RNe=l(),Tr=a("div"),F(a9.$$.fragment),ejr=l(),nf=a("p"),ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=a("a"),rjr=o("from_pretrained()"),tjr=o(" class method or the "),MK=a("a"),ajr=o("from_config()"),njr=o(` class
method.`),sjr=l(),n9=a("p"),ljr=o("This class cannot be instantiated directly using "),ZTe=a("code"),ijr=o("__init__()"),djr=o(" (throws an error)."),cjr=l(),Yt=a("div"),F(s9.$$.fragment),fjr=l(),eMe=a("p"),mjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gjr=l(),sf=a("p"),hjr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),pjr=o("not"),ujr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),_jr=o("from_pretrained()"),bjr=o(" to load the model weights."),vjr=l(),F(Pw.$$.fragment),Fjr=l(),Ur=a("div"),F(l9.$$.fragment),Tjr=l(),rMe=a("p"),Mjr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ejr=l(),Cn=a("p"),Cjr=o("The model class to instantiate is selected based on the "),tMe=a("code"),wjr=o("model_type"),Ajr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),yjr=o("pretrained_model_name_or_path"),Ljr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(":"),kjr=l(),i9=a("ul"),Bw=a("li"),sMe=a("strong"),Sjr=o("beit"),Rjr=o(" \u2014 "),CK=a("a"),Pjr=o("FlaxBeitForImageClassification"),Bjr=o(" (BEiT model)"),Ijr=l(),Iw=a("li"),lMe=a("strong"),qjr=o("vit"),Njr=o(" \u2014 "),wK=a("a"),jjr=o("FlaxViTForImageClassification"),Djr=o(" (ViT model)"),Gjr=l(),F(qw.$$.fragment),PNe=l(),lf=a("h2"),Nw=a("a"),iMe=a("span"),F(d9.$$.fragment),Ojr=l(),dMe=a("span"),Vjr=o("FlaxAutoModelForVision2Seq"),BNe=l(),Mr=a("div"),F(c9.$$.fragment),Xjr=l(),df=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AK=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),yK=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),f9=a("p"),Yjr=o("This class cannot be instantiated directly using "),cMe=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),Kt=a("div"),F(m9.$$.fragment),oDr=l(),fMe=a("p"),rDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tDr=l(),cf=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(jw.$$.fragment),cDr=l(),Jr=a("div"),F(g9.$$.fragment),fDr=l(),gMe=a("p"),mDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gDr=l(),wn=a("p"),hDr=o("The model class to instantiate is selected based on the "),hMe=a("code"),pDr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),_Dr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),_Me=a("ul"),Dw=a("li"),bMe=a("strong"),MDr=o("vision-encoder-decoder"),EDr=o(" \u2014 "),xK=a("a"),CDr=o("FlaxVisionEncoderDecoderModel"),wDr=o(" (Vision Encoder decoder model)"),ADr=l(),F(Gw.$$.fragment),this.h()},l(f){const _=E8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var h9=s(p);m=n(h9,"A",{id:!0,class:!0,href:!0});var vMe=s(m);u=n(vMe,"SPAN",{});var FMe=s(u);T(d.$$.fragment,FMe),FMe.forEach(t),vMe.forEach(t),h=i(h9),Mo=n(h9,"SPAN",{});var TMe=s(Mo);ci=r(TMe,"Auto Classes"),TMe.forEach(t),h9.forEach(t),hf=i(f),rt=n(f,"P",{});var p9=s(rt);fi=r(p9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(p9,"CODE",{});var MMe=s(mi);ny=r(MMe,"from_pretrained()"),MMe.forEach(t),pf=r(p9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),p9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var EMe=s(yn);sy=r(EMe,"AutoConfig"),EMe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var CMe=s(xn);ly=r(CMe,"AutoModel"),CMe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var wMe=s($n);iy=r(wMe,"AutoTokenizer"),wMe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var u9=s(Ae);A$=r(u9,"will create a model that is an instance of "),ui=n(u9,"A",{href:!0});var AMe=s(ui);y$=r(AMe,"BertModel"),AMe.forEach(t),L$=r(u9,"."),u9.forEach(t),Eo=i(f),wa=n(f,"P",{});var _9=s(wa);x$=r(_9,"There is one class of "),_f=n(_9,"CODE",{});var yMe=s(_f);$$=r(yMe,"AutoModel"),yMe.forEach(t),XDe=r(_9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_9.forEach(t),RIe=i(f),_i=n(f,"H2",{class:!0});var b9=s(_i);bf=n(b9,"A",{id:!0,class:!0,href:!0});var LMe=s(bf);Mee=n(LMe,"SPAN",{});var xMe=s(Mee);T(dy.$$.fragment,xMe),xMe.forEach(t),LMe.forEach(t),zDe=i(b9),Eee=n(b9,"SPAN",{});var $Me=s(Eee);WDe=r($Me,"Extending the Auto Classes"),$Me.forEach(t),b9.forEach(t),PIe=i(f),kn=n(f,"P",{});var ff=s(kn);QDe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cee=n(ff,"CODE",{});var kMe=s(Cee);HDe=r(kMe,"NewModel"),kMe.forEach(t),UDe=r(ff,", make sure you have a "),wee=n(ff,"CODE",{});var SMe=s(wee);JDe=r(SMe,"NewModelConfig"),SMe.forEach(t),YDe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),BIe=i(f),T(cy.$$.fragment,f),IIe=i(f),k$=n(f,"P",{});var RMe=s(k$);KDe=r(RMe,"You will then be able to use the auto classes like you would usually do!"),RMe.forEach(t),qIe=i(f),T(vf.$$.fragment,f),NIe=i(f),bi=n(f,"H2",{class:!0});var v9=s(bi);Ff=n(v9,"A",{id:!0,class:!0,href:!0});var PMe=s(Ff);Aee=n(PMe,"SPAN",{});var BMe=s(Aee);T(fy.$$.fragment,BMe),BMe.forEach(t),PMe.forEach(t),ZDe=i(v9),yee=n(v9,"SPAN",{});var IMe=s(yee);eGe=r(IMe,"AutoConfig"),IMe.forEach(t),v9.forEach(t),jIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(my.$$.fragment,et),oGe=i(et),gy=n(et,"P",{});var F9=s(gy);rGe=r(F9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),S$=n(F9,"A",{href:!0});var qMe=s(S$);tGe=r(qMe,"from_pretrained()"),qMe.forEach(t),aGe=r(F9," class method."),F9.forEach(t),nGe=i(et),hy=n(et,"P",{});var T9=s(hy);sGe=r(T9,"This class cannot be instantiated directly using "),Lee=n(T9,"CODE",{});var NMe=s(Lee);lGe=r(NMe,"__init__()"),NMe.forEach(t),iGe=r(T9," (throws an error)."),T9.forEach(t),dGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(py.$$.fragment,ot),cGe=i(ot),xee=n(ot,"P",{});var jMe=s(xee);fGe=r(jMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),jMe.forEach(t),mGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);gGe=r(mf,"The configuration class to instantiate is selected based on the "),$ee=n(mf,"CODE",{});var DMe=s($ee);hGe=r(DMe,"model_type"),DMe.forEach(t),pGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kee=n(mf,"CODE",{});var GMe=s(kee);uGe=r(GMe,"pretrained_model_name_or_path"),GMe.forEach(t),_Ge=r(mf,":"),mf.forEach(t),bGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Ow=s(Tf);See=n(Ow,"STRONG",{});var OMe=s(See);vGe=r(OMe,"albert"),OMe.forEach(t),FGe=r(Ow," \u2014 "),R$=n(Ow,"A",{href:!0});var VMe=s(R$);TGe=r(VMe,"AlbertConfig"),VMe.forEach(t),MGe=r(Ow," (ALBERT model)"),Ow.forEach(t),EGe=i(y),Mf=n(y,"LI",{});var Vw=s(Mf);Ree=n(Vw,"STRONG",{});var XMe=s(Ree);CGe=r(XMe,"bart"),XMe.forEach(t),wGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var zMe=s(P$);AGe=r(zMe,"BartConfig"),zMe.forEach(t),yGe=r(Vw," (BART model)"),Vw.forEach(t),LGe=i(y),Ef=n(y,"LI",{});var Xw=s(Ef);Pee=n(Xw,"STRONG",{});var WMe=s(Pee);xGe=r(WMe,"beit"),WMe.forEach(t),$Ge=r(Xw," \u2014 "),B$=n(Xw,"A",{href:!0});var QMe=s(B$);kGe=r(QMe,"BeitConfig"),QMe.forEach(t),SGe=r(Xw," (BEiT model)"),Xw.forEach(t),RGe=i(y),Cf=n(y,"LI",{});var zw=s(Cf);Bee=n(zw,"STRONG",{});var HMe=s(Bee);PGe=r(HMe,"bert"),HMe.forEach(t),BGe=r(zw," \u2014 "),I$=n(zw,"A",{href:!0});var UMe=s(I$);IGe=r(UMe,"BertConfig"),UMe.forEach(t),qGe=r(zw," (BERT model)"),zw.forEach(t),NGe=i(y),wf=n(y,"LI",{});var Ww=s(wf);Iee=n(Ww,"STRONG",{});var JMe=s(Iee);jGe=r(JMe,"bert-generation"),JMe.forEach(t),DGe=r(Ww," \u2014 "),q$=n(Ww,"A",{href:!0});var YMe=s(q$);GGe=r(YMe,"BertGenerationConfig"),YMe.forEach(t),OGe=r(Ww," (Bert Generation model)"),Ww.forEach(t),VGe=i(y),Af=n(y,"LI",{});var Qw=s(Af);qee=n(Qw,"STRONG",{});var KMe=s(qee);XGe=r(KMe,"big_bird"),KMe.forEach(t),zGe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var ZMe=s(N$);WGe=r(ZMe,"BigBirdConfig"),ZMe.forEach(t),QGe=r(Qw," (BigBird model)"),Qw.forEach(t),HGe=i(y),yf=n(y,"LI",{});var Hw=s(yf);Nee=n(Hw,"STRONG",{});var eEe=s(Nee);UGe=r(eEe,"bigbird_pegasus"),eEe.forEach(t),JGe=r(Hw," \u2014 "),j$=n(Hw,"A",{href:!0});var oEe=s(j$);YGe=r(oEe,"BigBirdPegasusConfig"),oEe.forEach(t),KGe=r(Hw," (BigBirdPegasus model)"),Hw.forEach(t),ZGe=i(y),Lf=n(y,"LI",{});var Uw=s(Lf);jee=n(Uw,"STRONG",{});var rEe=s(jee);eOe=r(rEe,"blenderbot"),rEe.forEach(t),oOe=r(Uw," \u2014 "),D$=n(Uw,"A",{href:!0});var tEe=s(D$);rOe=r(tEe,"BlenderbotConfig"),tEe.forEach(t),tOe=r(Uw," (Blenderbot model)"),Uw.forEach(t),aOe=i(y),xf=n(y,"LI",{});var Jw=s(xf);Dee=n(Jw,"STRONG",{});var aEe=s(Dee);nOe=r(aEe,"blenderbot-small"),aEe.forEach(t),sOe=r(Jw," \u2014 "),G$=n(Jw,"A",{href:!0});var nEe=s(G$);lOe=r(nEe,"BlenderbotSmallConfig"),nEe.forEach(t),iOe=r(Jw," (BlenderbotSmall model)"),Jw.forEach(t),dOe=i(y),$f=n(y,"LI",{});var Yw=s($f);Gee=n(Yw,"STRONG",{});var sEe=s(Gee);cOe=r(sEe,"camembert"),sEe.forEach(t),fOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var lEe=s(O$);mOe=r(lEe,"CamembertConfig"),lEe.forEach(t),gOe=r(Yw," (CamemBERT model)"),Yw.forEach(t),hOe=i(y),kf=n(y,"LI",{});var Kw=s(kf);Oee=n(Kw,"STRONG",{});var iEe=s(Oee);pOe=r(iEe,"canine"),iEe.forEach(t),uOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var dEe=s(V$);_Oe=r(dEe,"CanineConfig"),dEe.forEach(t),bOe=r(Kw," (Canine model)"),Kw.forEach(t),vOe=i(y),Sf=n(y,"LI",{});var Zw=s(Sf);Vee=n(Zw,"STRONG",{});var cEe=s(Vee);FOe=r(cEe,"clip"),cEe.forEach(t),TOe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var fEe=s(X$);MOe=r(fEe,"CLIPConfig"),fEe.forEach(t),EOe=r(Zw," (CLIP model)"),Zw.forEach(t),COe=i(y),Rf=n(y,"LI",{});var eA=s(Rf);Xee=n(eA,"STRONG",{});var mEe=s(Xee);wOe=r(mEe,"convbert"),mEe.forEach(t),AOe=r(eA," \u2014 "),z$=n(eA,"A",{href:!0});var gEe=s(z$);yOe=r(gEe,"ConvBertConfig"),gEe.forEach(t),LOe=r(eA," (ConvBERT model)"),eA.forEach(t),xOe=i(y),Pf=n(y,"LI",{});var oA=s(Pf);zee=n(oA,"STRONG",{});var hEe=s(zee);$Oe=r(hEe,"convnext"),hEe.forEach(t),kOe=r(oA," \u2014 "),W$=n(oA,"A",{href:!0});var pEe=s(W$);SOe=r(pEe,"ConvNextConfig"),pEe.forEach(t),ROe=r(oA," (ConvNext model)"),oA.forEach(t),POe=i(y),Bf=n(y,"LI",{});var rA=s(Bf);Wee=n(rA,"STRONG",{});var uEe=s(Wee);BOe=r(uEe,"ctrl"),uEe.forEach(t),IOe=r(rA," \u2014 "),Q$=n(rA,"A",{href:!0});var _Ee=s(Q$);qOe=r(_Ee,"CTRLConfig"),_Ee.forEach(t),NOe=r(rA," (CTRL model)"),rA.forEach(t),jOe=i(y),If=n(y,"LI",{});var tA=s(If);Qee=n(tA,"STRONG",{});var bEe=s(Qee);DOe=r(bEe,"data2vec-audio"),bEe.forEach(t),GOe=r(tA," \u2014 "),H$=n(tA,"A",{href:!0});var vEe=s(H$);OOe=r(vEe,"Data2VecAudioConfig"),vEe.forEach(t),VOe=r(tA," (Data2VecAudio model)"),tA.forEach(t),XOe=i(y),qf=n(y,"LI",{});var aA=s(qf);Hee=n(aA,"STRONG",{});var FEe=s(Hee);zOe=r(FEe,"data2vec-text"),FEe.forEach(t),WOe=r(aA," \u2014 "),U$=n(aA,"A",{href:!0});var TEe=s(U$);QOe=r(TEe,"Data2VecTextConfig"),TEe.forEach(t),HOe=r(aA," (Data2VecText model)"),aA.forEach(t),UOe=i(y),Nf=n(y,"LI",{});var nA=s(Nf);Uee=n(nA,"STRONG",{});var MEe=s(Uee);JOe=r(MEe,"data2vec-vision"),MEe.forEach(t),YOe=r(nA," \u2014 "),J$=n(nA,"A",{href:!0});var EEe=s(J$);KOe=r(EEe,"Data2VecVisionConfig"),EEe.forEach(t),ZOe=r(nA," (Data2VecVision model)"),nA.forEach(t),eVe=i(y),jf=n(y,"LI",{});var sA=s(jf);Jee=n(sA,"STRONG",{});var CEe=s(Jee);oVe=r(CEe,"deberta"),CEe.forEach(t),rVe=r(sA," \u2014 "),Y$=n(sA,"A",{href:!0});var wEe=s(Y$);tVe=r(wEe,"DebertaConfig"),wEe.forEach(t),aVe=r(sA," (DeBERTa model)"),sA.forEach(t),nVe=i(y),Df=n(y,"LI",{});var lA=s(Df);Yee=n(lA,"STRONG",{});var AEe=s(Yee);sVe=r(AEe,"deberta-v2"),AEe.forEach(t),lVe=r(lA," \u2014 "),K$=n(lA,"A",{href:!0});var yEe=s(K$);iVe=r(yEe,"DebertaV2Config"),yEe.forEach(t),dVe=r(lA," (DeBERTa-v2 model)"),lA.forEach(t),cVe=i(y),Gf=n(y,"LI",{});var iA=s(Gf);Kee=n(iA,"STRONG",{});var LEe=s(Kee);fVe=r(LEe,"decision_transformer"),LEe.forEach(t),mVe=r(iA," \u2014 "),Z$=n(iA,"A",{href:!0});var xEe=s(Z$);gVe=r(xEe,"DecisionTransformerConfig"),xEe.forEach(t),hVe=r(iA," (Decision Transformer model)"),iA.forEach(t),pVe=i(y),Of=n(y,"LI",{});var dA=s(Of);Zee=n(dA,"STRONG",{});var $Ee=s(Zee);uVe=r($Ee,"deit"),$Ee.forEach(t),_Ve=r(dA," \u2014 "),ek=n(dA,"A",{href:!0});var kEe=s(ek);bVe=r(kEe,"DeiTConfig"),kEe.forEach(t),vVe=r(dA," (DeiT model)"),dA.forEach(t),FVe=i(y),Vf=n(y,"LI",{});var cA=s(Vf);eoe=n(cA,"STRONG",{});var SEe=s(eoe);TVe=r(SEe,"detr"),SEe.forEach(t),MVe=r(cA," \u2014 "),ok=n(cA,"A",{href:!0});var LDr=s(ok);EVe=r(LDr,"DetrConfig"),LDr.forEach(t),CVe=r(cA," (DETR model)"),cA.forEach(t),wVe=i(y),Xf=n(y,"LI",{});var REe=s(Xf);ooe=n(REe,"STRONG",{});var xDr=s(ooe);AVe=r(xDr,"distilbert"),xDr.forEach(t),yVe=r(REe," \u2014 "),rk=n(REe,"A",{href:!0});var $Dr=s(rk);LVe=r($Dr,"DistilBertConfig"),$Dr.forEach(t),xVe=r(REe," (DistilBERT model)"),REe.forEach(t),$Ve=i(y),zf=n(y,"LI",{});var PEe=s(zf);roe=n(PEe,"STRONG",{});var kDr=s(roe);kVe=r(kDr,"dpr"),kDr.forEach(t),SVe=r(PEe," \u2014 "),tk=n(PEe,"A",{href:!0});var SDr=s(tk);RVe=r(SDr,"DPRConfig"),SDr.forEach(t),PVe=r(PEe," (DPR model)"),PEe.forEach(t),BVe=i(y),Wf=n(y,"LI",{});var BEe=s(Wf);toe=n(BEe,"STRONG",{});var RDr=s(toe);IVe=r(RDr,"dpt"),RDr.forEach(t),qVe=r(BEe," \u2014 "),ak=n(BEe,"A",{href:!0});var PDr=s(ak);NVe=r(PDr,"DPTConfig"),PDr.forEach(t),jVe=r(BEe," (DPT model)"),BEe.forEach(t),DVe=i(y),Qf=n(y,"LI",{});var IEe=s(Qf);aoe=n(IEe,"STRONG",{});var BDr=s(aoe);GVe=r(BDr,"electra"),BDr.forEach(t),OVe=r(IEe," \u2014 "),nk=n(IEe,"A",{href:!0});var IDr=s(nk);VVe=r(IDr,"ElectraConfig"),IDr.forEach(t),XVe=r(IEe," (ELECTRA model)"),IEe.forEach(t),zVe=i(y),Hf=n(y,"LI",{});var qEe=s(Hf);noe=n(qEe,"STRONG",{});var qDr=s(noe);WVe=r(qDr,"encoder-decoder"),qDr.forEach(t),QVe=r(qEe," \u2014 "),sk=n(qEe,"A",{href:!0});var NDr=s(sk);HVe=r(NDr,"EncoderDecoderConfig"),NDr.forEach(t),UVe=r(qEe," (Encoder decoder model)"),qEe.forEach(t),JVe=i(y),Uf=n(y,"LI",{});var NEe=s(Uf);soe=n(NEe,"STRONG",{});var jDr=s(soe);YVe=r(jDr,"flaubert"),jDr.forEach(t),KVe=r(NEe," \u2014 "),lk=n(NEe,"A",{href:!0});var DDr=s(lk);ZVe=r(DDr,"FlaubertConfig"),DDr.forEach(t),eXe=r(NEe," (FlauBERT model)"),NEe.forEach(t),oXe=i(y),Jf=n(y,"LI",{});var jEe=s(Jf);loe=n(jEe,"STRONG",{});var GDr=s(loe);rXe=r(GDr,"flava"),GDr.forEach(t),tXe=r(jEe," \u2014 "),ik=n(jEe,"A",{href:!0});var ODr=s(ik);aXe=r(ODr,"FlavaConfig"),ODr.forEach(t),nXe=r(jEe," (Flava model)"),jEe.forEach(t),sXe=i(y),Yf=n(y,"LI",{});var DEe=s(Yf);ioe=n(DEe,"STRONG",{});var VDr=s(ioe);lXe=r(VDr,"fnet"),VDr.forEach(t),iXe=r(DEe," \u2014 "),dk=n(DEe,"A",{href:!0});var XDr=s(dk);dXe=r(XDr,"FNetConfig"),XDr.forEach(t),cXe=r(DEe," (FNet model)"),DEe.forEach(t),fXe=i(y),Kf=n(y,"LI",{});var GEe=s(Kf);doe=n(GEe,"STRONG",{});var zDr=s(doe);mXe=r(zDr,"fsmt"),zDr.forEach(t),gXe=r(GEe," \u2014 "),ck=n(GEe,"A",{href:!0});var WDr=s(ck);hXe=r(WDr,"FSMTConfig"),WDr.forEach(t),pXe=r(GEe," (FairSeq Machine-Translation model)"),GEe.forEach(t),uXe=i(y),Zf=n(y,"LI",{});var OEe=s(Zf);coe=n(OEe,"STRONG",{});var QDr=s(coe);_Xe=r(QDr,"funnel"),QDr.forEach(t),bXe=r(OEe," \u2014 "),fk=n(OEe,"A",{href:!0});var HDr=s(fk);vXe=r(HDr,"FunnelConfig"),HDr.forEach(t),FXe=r(OEe," (Funnel Transformer model)"),OEe.forEach(t),TXe=i(y),em=n(y,"LI",{});var VEe=s(em);foe=n(VEe,"STRONG",{});var UDr=s(foe);MXe=r(UDr,"glpn"),UDr.forEach(t),EXe=r(VEe," \u2014 "),mk=n(VEe,"A",{href:!0});var JDr=s(mk);CXe=r(JDr,"GLPNConfig"),JDr.forEach(t),wXe=r(VEe," (GLPN model)"),VEe.forEach(t),AXe=i(y),om=n(y,"LI",{});var XEe=s(om);moe=n(XEe,"STRONG",{});var YDr=s(moe);yXe=r(YDr,"gpt2"),YDr.forEach(t),LXe=r(XEe," \u2014 "),gk=n(XEe,"A",{href:!0});var KDr=s(gk);xXe=r(KDr,"GPT2Config"),KDr.forEach(t),$Xe=r(XEe," (OpenAI GPT-2 model)"),XEe.forEach(t),kXe=i(y),rm=n(y,"LI",{});var zEe=s(rm);goe=n(zEe,"STRONG",{});var ZDr=s(goe);SXe=r(ZDr,"gpt_neo"),ZDr.forEach(t),RXe=r(zEe," \u2014 "),hk=n(zEe,"A",{href:!0});var eGr=s(hk);PXe=r(eGr,"GPTNeoConfig"),eGr.forEach(t),BXe=r(zEe," (GPT Neo model)"),zEe.forEach(t),IXe=i(y),tm=n(y,"LI",{});var WEe=s(tm);hoe=n(WEe,"STRONG",{});var oGr=s(hoe);qXe=r(oGr,"gptj"),oGr.forEach(t),NXe=r(WEe," \u2014 "),pk=n(WEe,"A",{href:!0});var rGr=s(pk);jXe=r(rGr,"GPTJConfig"),rGr.forEach(t),DXe=r(WEe," (GPT-J model)"),WEe.forEach(t),GXe=i(y),am=n(y,"LI",{});var QEe=s(am);poe=n(QEe,"STRONG",{});var tGr=s(poe);OXe=r(tGr,"hubert"),tGr.forEach(t),VXe=r(QEe," \u2014 "),uk=n(QEe,"A",{href:!0});var aGr=s(uk);XXe=r(aGr,"HubertConfig"),aGr.forEach(t),zXe=r(QEe," (Hubert model)"),QEe.forEach(t),WXe=i(y),nm=n(y,"LI",{});var HEe=s(nm);uoe=n(HEe,"STRONG",{});var nGr=s(uoe);QXe=r(nGr,"ibert"),nGr.forEach(t),HXe=r(HEe," \u2014 "),_k=n(HEe,"A",{href:!0});var sGr=s(_k);UXe=r(sGr,"IBertConfig"),sGr.forEach(t),JXe=r(HEe," (I-BERT model)"),HEe.forEach(t),YXe=i(y),sm=n(y,"LI",{});var UEe=s(sm);_oe=n(UEe,"STRONG",{});var lGr=s(_oe);KXe=r(lGr,"imagegpt"),lGr.forEach(t),ZXe=r(UEe," \u2014 "),bk=n(UEe,"A",{href:!0});var iGr=s(bk);eze=r(iGr,"ImageGPTConfig"),iGr.forEach(t),oze=r(UEe," (ImageGPT model)"),UEe.forEach(t),rze=i(y),lm=n(y,"LI",{});var JEe=s(lm);boe=n(JEe,"STRONG",{});var dGr=s(boe);tze=r(dGr,"layoutlm"),dGr.forEach(t),aze=r(JEe," \u2014 "),vk=n(JEe,"A",{href:!0});var cGr=s(vk);nze=r(cGr,"LayoutLMConfig"),cGr.forEach(t),sze=r(JEe," (LayoutLM model)"),JEe.forEach(t),lze=i(y),im=n(y,"LI",{});var YEe=s(im);voe=n(YEe,"STRONG",{});var fGr=s(voe);ize=r(fGr,"layoutlmv2"),fGr.forEach(t),dze=r(YEe," \u2014 "),Fk=n(YEe,"A",{href:!0});var mGr=s(Fk);cze=r(mGr,"LayoutLMv2Config"),mGr.forEach(t),fze=r(YEe," (LayoutLMv2 model)"),YEe.forEach(t),mze=i(y),dm=n(y,"LI",{});var KEe=s(dm);Foe=n(KEe,"STRONG",{});var gGr=s(Foe);gze=r(gGr,"led"),gGr.forEach(t),hze=r(KEe," \u2014 "),Tk=n(KEe,"A",{href:!0});var hGr=s(Tk);pze=r(hGr,"LEDConfig"),hGr.forEach(t),uze=r(KEe," (LED model)"),KEe.forEach(t),_ze=i(y),cm=n(y,"LI",{});var ZEe=s(cm);Toe=n(ZEe,"STRONG",{});var pGr=s(Toe);bze=r(pGr,"longformer"),pGr.forEach(t),vze=r(ZEe," \u2014 "),Mk=n(ZEe,"A",{href:!0});var uGr=s(Mk);Fze=r(uGr,"LongformerConfig"),uGr.forEach(t),Tze=r(ZEe," (Longformer model)"),ZEe.forEach(t),Mze=i(y),fm=n(y,"LI",{});var eCe=s(fm);Moe=n(eCe,"STRONG",{});var _Gr=s(Moe);Eze=r(_Gr,"luke"),_Gr.forEach(t),Cze=r(eCe," \u2014 "),Ek=n(eCe,"A",{href:!0});var bGr=s(Ek);wze=r(bGr,"LukeConfig"),bGr.forEach(t),Aze=r(eCe," (LUKE model)"),eCe.forEach(t),yze=i(y),mm=n(y,"LI",{});var oCe=s(mm);Eoe=n(oCe,"STRONG",{});var vGr=s(Eoe);Lze=r(vGr,"lxmert"),vGr.forEach(t),xze=r(oCe," \u2014 "),Ck=n(oCe,"A",{href:!0});var FGr=s(Ck);$ze=r(FGr,"LxmertConfig"),FGr.forEach(t),kze=r(oCe," (LXMERT model)"),oCe.forEach(t),Sze=i(y),gm=n(y,"LI",{});var rCe=s(gm);Coe=n(rCe,"STRONG",{});var TGr=s(Coe);Rze=r(TGr,"m2m_100"),TGr.forEach(t),Pze=r(rCe," \u2014 "),wk=n(rCe,"A",{href:!0});var MGr=s(wk);Bze=r(MGr,"M2M100Config"),MGr.forEach(t),Ize=r(rCe," (M2M100 model)"),rCe.forEach(t),qze=i(y),hm=n(y,"LI",{});var tCe=s(hm);woe=n(tCe,"STRONG",{});var EGr=s(woe);Nze=r(EGr,"marian"),EGr.forEach(t),jze=r(tCe," \u2014 "),Ak=n(tCe,"A",{href:!0});var CGr=s(Ak);Dze=r(CGr,"MarianConfig"),CGr.forEach(t),Gze=r(tCe," (Marian model)"),tCe.forEach(t),Oze=i(y),pm=n(y,"LI",{});var aCe=s(pm);Aoe=n(aCe,"STRONG",{});var wGr=s(Aoe);Vze=r(wGr,"maskformer"),wGr.forEach(t),Xze=r(aCe," \u2014 "),yk=n(aCe,"A",{href:!0});var AGr=s(yk);zze=r(AGr,"MaskFormerConfig"),AGr.forEach(t),Wze=r(aCe," (MaskFormer model)"),aCe.forEach(t),Qze=i(y),um=n(y,"LI",{});var nCe=s(um);yoe=n(nCe,"STRONG",{});var yGr=s(yoe);Hze=r(yGr,"mbart"),yGr.forEach(t),Uze=r(nCe," \u2014 "),Lk=n(nCe,"A",{href:!0});var LGr=s(Lk);Jze=r(LGr,"MBartConfig"),LGr.forEach(t),Yze=r(nCe," (mBART model)"),nCe.forEach(t),Kze=i(y),_m=n(y,"LI",{});var sCe=s(_m);Loe=n(sCe,"STRONG",{});var xGr=s(Loe);Zze=r(xGr,"megatron-bert"),xGr.forEach(t),eWe=r(sCe," \u2014 "),xk=n(sCe,"A",{href:!0});var $Gr=s(xk);oWe=r($Gr,"MegatronBertConfig"),$Gr.forEach(t),rWe=r(sCe," (MegatronBert model)"),sCe.forEach(t),tWe=i(y),bm=n(y,"LI",{});var lCe=s(bm);xoe=n(lCe,"STRONG",{});var kGr=s(xoe);aWe=r(kGr,"mobilebert"),kGr.forEach(t),nWe=r(lCe," \u2014 "),$k=n(lCe,"A",{href:!0});var SGr=s($k);sWe=r(SGr,"MobileBertConfig"),SGr.forEach(t),lWe=r(lCe," (MobileBERT model)"),lCe.forEach(t),iWe=i(y),vm=n(y,"LI",{});var iCe=s(vm);$oe=n(iCe,"STRONG",{});var RGr=s($oe);dWe=r(RGr,"mpnet"),RGr.forEach(t),cWe=r(iCe," \u2014 "),kk=n(iCe,"A",{href:!0});var PGr=s(kk);fWe=r(PGr,"MPNetConfig"),PGr.forEach(t),mWe=r(iCe," (MPNet model)"),iCe.forEach(t),gWe=i(y),Fm=n(y,"LI",{});var dCe=s(Fm);koe=n(dCe,"STRONG",{});var BGr=s(koe);hWe=r(BGr,"mt5"),BGr.forEach(t),pWe=r(dCe," \u2014 "),Sk=n(dCe,"A",{href:!0});var IGr=s(Sk);uWe=r(IGr,"MT5Config"),IGr.forEach(t),_We=r(dCe," (mT5 model)"),dCe.forEach(t),bWe=i(y),Tm=n(y,"LI",{});var cCe=s(Tm);Soe=n(cCe,"STRONG",{});var qGr=s(Soe);vWe=r(qGr,"nystromformer"),qGr.forEach(t),FWe=r(cCe," \u2014 "),Rk=n(cCe,"A",{href:!0});var NGr=s(Rk);TWe=r(NGr,"NystromformerConfig"),NGr.forEach(t),MWe=r(cCe," (Nystromformer model)"),cCe.forEach(t),EWe=i(y),Mm=n(y,"LI",{});var fCe=s(Mm);Roe=n(fCe,"STRONG",{});var jGr=s(Roe);CWe=r(jGr,"openai-gpt"),jGr.forEach(t),wWe=r(fCe," \u2014 "),Pk=n(fCe,"A",{href:!0});var DGr=s(Pk);AWe=r(DGr,"OpenAIGPTConfig"),DGr.forEach(t),yWe=r(fCe," (OpenAI GPT model)"),fCe.forEach(t),LWe=i(y),Em=n(y,"LI",{});var mCe=s(Em);Poe=n(mCe,"STRONG",{});var GGr=s(Poe);xWe=r(GGr,"opt"),GGr.forEach(t),$We=r(mCe," \u2014 "),Bk=n(mCe,"A",{href:!0});var OGr=s(Bk);kWe=r(OGr,"OPTConfig"),OGr.forEach(t),SWe=r(mCe," (OPT model)"),mCe.forEach(t),RWe=i(y),Cm=n(y,"LI",{});var gCe=s(Cm);Boe=n(gCe,"STRONG",{});var VGr=s(Boe);PWe=r(VGr,"pegasus"),VGr.forEach(t),BWe=r(gCe," \u2014 "),Ik=n(gCe,"A",{href:!0});var XGr=s(Ik);IWe=r(XGr,"PegasusConfig"),XGr.forEach(t),qWe=r(gCe," (Pegasus model)"),gCe.forEach(t),NWe=i(y),wm=n(y,"LI",{});var hCe=s(wm);Ioe=n(hCe,"STRONG",{});var zGr=s(Ioe);jWe=r(zGr,"perceiver"),zGr.forEach(t),DWe=r(hCe," \u2014 "),qk=n(hCe,"A",{href:!0});var WGr=s(qk);GWe=r(WGr,"PerceiverConfig"),WGr.forEach(t),OWe=r(hCe," (Perceiver model)"),hCe.forEach(t),VWe=i(y),Am=n(y,"LI",{});var pCe=s(Am);qoe=n(pCe,"STRONG",{});var QGr=s(qoe);XWe=r(QGr,"plbart"),QGr.forEach(t),zWe=r(pCe," \u2014 "),Nk=n(pCe,"A",{href:!0});var HGr=s(Nk);WWe=r(HGr,"PLBartConfig"),HGr.forEach(t),QWe=r(pCe," (PLBart model)"),pCe.forEach(t),HWe=i(y),ym=n(y,"LI",{});var uCe=s(ym);Noe=n(uCe,"STRONG",{});var UGr=s(Noe);UWe=r(UGr,"poolformer"),UGr.forEach(t),JWe=r(uCe," \u2014 "),jk=n(uCe,"A",{href:!0});var JGr=s(jk);YWe=r(JGr,"PoolFormerConfig"),JGr.forEach(t),KWe=r(uCe," (PoolFormer model)"),uCe.forEach(t),ZWe=i(y),Lm=n(y,"LI",{});var _Ce=s(Lm);joe=n(_Ce,"STRONG",{});var YGr=s(joe);eQe=r(YGr,"prophetnet"),YGr.forEach(t),oQe=r(_Ce," \u2014 "),Dk=n(_Ce,"A",{href:!0});var KGr=s(Dk);rQe=r(KGr,"ProphetNetConfig"),KGr.forEach(t),tQe=r(_Ce," (ProphetNet model)"),_Ce.forEach(t),aQe=i(y),xm=n(y,"LI",{});var bCe=s(xm);Doe=n(bCe,"STRONG",{});var ZGr=s(Doe);nQe=r(ZGr,"qdqbert"),ZGr.forEach(t),sQe=r(bCe," \u2014 "),Gk=n(bCe,"A",{href:!0});var eOr=s(Gk);lQe=r(eOr,"QDQBertConfig"),eOr.forEach(t),iQe=r(bCe," (QDQBert model)"),bCe.forEach(t),dQe=i(y),$m=n(y,"LI",{});var vCe=s($m);Goe=n(vCe,"STRONG",{});var oOr=s(Goe);cQe=r(oOr,"rag"),oOr.forEach(t),fQe=r(vCe," \u2014 "),Ok=n(vCe,"A",{href:!0});var rOr=s(Ok);mQe=r(rOr,"RagConfig"),rOr.forEach(t),gQe=r(vCe," (RAG model)"),vCe.forEach(t),hQe=i(y),km=n(y,"LI",{});var FCe=s(km);Ooe=n(FCe,"STRONG",{});var tOr=s(Ooe);pQe=r(tOr,"realm"),tOr.forEach(t),uQe=r(FCe," \u2014 "),Vk=n(FCe,"A",{href:!0});var aOr=s(Vk);_Qe=r(aOr,"RealmConfig"),aOr.forEach(t),bQe=r(FCe," (Realm model)"),FCe.forEach(t),vQe=i(y),Sm=n(y,"LI",{});var TCe=s(Sm);Voe=n(TCe,"STRONG",{});var nOr=s(Voe);FQe=r(nOr,"reformer"),nOr.forEach(t),TQe=r(TCe," \u2014 "),Xk=n(TCe,"A",{href:!0});var sOr=s(Xk);MQe=r(sOr,"ReformerConfig"),sOr.forEach(t),EQe=r(TCe," (Reformer model)"),TCe.forEach(t),CQe=i(y),Rm=n(y,"LI",{});var MCe=s(Rm);Xoe=n(MCe,"STRONG",{});var lOr=s(Xoe);wQe=r(lOr,"regnet"),lOr.forEach(t),AQe=r(MCe," \u2014 "),zk=n(MCe,"A",{href:!0});var iOr=s(zk);yQe=r(iOr,"RegNetConfig"),iOr.forEach(t),LQe=r(MCe," (RegNet model)"),MCe.forEach(t),xQe=i(y),Pm=n(y,"LI",{});var ECe=s(Pm);zoe=n(ECe,"STRONG",{});var dOr=s(zoe);$Qe=r(dOr,"rembert"),dOr.forEach(t),kQe=r(ECe," \u2014 "),Wk=n(ECe,"A",{href:!0});var cOr=s(Wk);SQe=r(cOr,"RemBertConfig"),cOr.forEach(t),RQe=r(ECe," (RemBERT model)"),ECe.forEach(t),PQe=i(y),Bm=n(y,"LI",{});var CCe=s(Bm);Woe=n(CCe,"STRONG",{});var fOr=s(Woe);BQe=r(fOr,"resnet"),fOr.forEach(t),IQe=r(CCe," \u2014 "),Qk=n(CCe,"A",{href:!0});var mOr=s(Qk);qQe=r(mOr,"ResNetConfig"),mOr.forEach(t),NQe=r(CCe," (ResNet model)"),CCe.forEach(t),jQe=i(y),Im=n(y,"LI",{});var wCe=s(Im);Qoe=n(wCe,"STRONG",{});var gOr=s(Qoe);DQe=r(gOr,"retribert"),gOr.forEach(t),GQe=r(wCe," \u2014 "),Hk=n(wCe,"A",{href:!0});var hOr=s(Hk);OQe=r(hOr,"RetriBertConfig"),hOr.forEach(t),VQe=r(wCe," (RetriBERT model)"),wCe.forEach(t),XQe=i(y),qm=n(y,"LI",{});var ACe=s(qm);Hoe=n(ACe,"STRONG",{});var pOr=s(Hoe);zQe=r(pOr,"roberta"),pOr.forEach(t),WQe=r(ACe," \u2014 "),Uk=n(ACe,"A",{href:!0});var uOr=s(Uk);QQe=r(uOr,"RobertaConfig"),uOr.forEach(t),HQe=r(ACe," (RoBERTa model)"),ACe.forEach(t),UQe=i(y),Nm=n(y,"LI",{});var yCe=s(Nm);Uoe=n(yCe,"STRONG",{});var _Or=s(Uoe);JQe=r(_Or,"roformer"),_Or.forEach(t),YQe=r(yCe," \u2014 "),Jk=n(yCe,"A",{href:!0});var bOr=s(Jk);KQe=r(bOr,"RoFormerConfig"),bOr.forEach(t),ZQe=r(yCe," (RoFormer model)"),yCe.forEach(t),eHe=i(y),jm=n(y,"LI",{});var LCe=s(jm);Joe=n(LCe,"STRONG",{});var vOr=s(Joe);oHe=r(vOr,"segformer"),vOr.forEach(t),rHe=r(LCe," \u2014 "),Yk=n(LCe,"A",{href:!0});var FOr=s(Yk);tHe=r(FOr,"SegformerConfig"),FOr.forEach(t),aHe=r(LCe," (SegFormer model)"),LCe.forEach(t),nHe=i(y),Dm=n(y,"LI",{});var xCe=s(Dm);Yoe=n(xCe,"STRONG",{});var TOr=s(Yoe);sHe=r(TOr,"sew"),TOr.forEach(t),lHe=r(xCe," \u2014 "),Kk=n(xCe,"A",{href:!0});var MOr=s(Kk);iHe=r(MOr,"SEWConfig"),MOr.forEach(t),dHe=r(xCe," (SEW model)"),xCe.forEach(t),cHe=i(y),Gm=n(y,"LI",{});var $Ce=s(Gm);Koe=n($Ce,"STRONG",{});var EOr=s(Koe);fHe=r(EOr,"sew-d"),EOr.forEach(t),mHe=r($Ce," \u2014 "),Zk=n($Ce,"A",{href:!0});var COr=s(Zk);gHe=r(COr,"SEWDConfig"),COr.forEach(t),hHe=r($Ce," (SEW-D model)"),$Ce.forEach(t),pHe=i(y),Om=n(y,"LI",{});var kCe=s(Om);Zoe=n(kCe,"STRONG",{});var wOr=s(Zoe);uHe=r(wOr,"speech-encoder-decoder"),wOr.forEach(t),_He=r(kCe," \u2014 "),eS=n(kCe,"A",{href:!0});var AOr=s(eS);bHe=r(AOr,"SpeechEncoderDecoderConfig"),AOr.forEach(t),vHe=r(kCe," (Speech Encoder decoder model)"),kCe.forEach(t),FHe=i(y),Vm=n(y,"LI",{});var SCe=s(Vm);ere=n(SCe,"STRONG",{});var yOr=s(ere);THe=r(yOr,"speech_to_text"),yOr.forEach(t),MHe=r(SCe," \u2014 "),oS=n(SCe,"A",{href:!0});var LOr=s(oS);EHe=r(LOr,"Speech2TextConfig"),LOr.forEach(t),CHe=r(SCe," (Speech2Text model)"),SCe.forEach(t),wHe=i(y),Xm=n(y,"LI",{});var RCe=s(Xm);ore=n(RCe,"STRONG",{});var xOr=s(ore);AHe=r(xOr,"speech_to_text_2"),xOr.forEach(t),yHe=r(RCe," \u2014 "),rS=n(RCe,"A",{href:!0});var $Or=s(rS);LHe=r($Or,"Speech2Text2Config"),$Or.forEach(t),xHe=r(RCe," (Speech2Text2 model)"),RCe.forEach(t),$He=i(y),zm=n(y,"LI",{});var PCe=s(zm);rre=n(PCe,"STRONG",{});var kOr=s(rre);kHe=r(kOr,"splinter"),kOr.forEach(t),SHe=r(PCe," \u2014 "),tS=n(PCe,"A",{href:!0});var SOr=s(tS);RHe=r(SOr,"SplinterConfig"),SOr.forEach(t),PHe=r(PCe," (Splinter model)"),PCe.forEach(t),BHe=i(y),Wm=n(y,"LI",{});var BCe=s(Wm);tre=n(BCe,"STRONG",{});var ROr=s(tre);IHe=r(ROr,"squeezebert"),ROr.forEach(t),qHe=r(BCe," \u2014 "),aS=n(BCe,"A",{href:!0});var POr=s(aS);NHe=r(POr,"SqueezeBertConfig"),POr.forEach(t),jHe=r(BCe," (SqueezeBERT model)"),BCe.forEach(t),DHe=i(y),Qm=n(y,"LI",{});var ICe=s(Qm);are=n(ICe,"STRONG",{});var BOr=s(are);GHe=r(BOr,"swin"),BOr.forEach(t),OHe=r(ICe," \u2014 "),nS=n(ICe,"A",{href:!0});var IOr=s(nS);VHe=r(IOr,"SwinConfig"),IOr.forEach(t),XHe=r(ICe," (Swin model)"),ICe.forEach(t),zHe=i(y),Hm=n(y,"LI",{});var qCe=s(Hm);nre=n(qCe,"STRONG",{});var qOr=s(nre);WHe=r(qOr,"t5"),qOr.forEach(t),QHe=r(qCe," \u2014 "),sS=n(qCe,"A",{href:!0});var NOr=s(sS);HHe=r(NOr,"T5Config"),NOr.forEach(t),UHe=r(qCe," (T5 model)"),qCe.forEach(t),JHe=i(y),Um=n(y,"LI",{});var NCe=s(Um);sre=n(NCe,"STRONG",{});var jOr=s(sre);YHe=r(jOr,"tapas"),jOr.forEach(t),KHe=r(NCe," \u2014 "),lS=n(NCe,"A",{href:!0});var DOr=s(lS);ZHe=r(DOr,"TapasConfig"),DOr.forEach(t),eUe=r(NCe," (TAPAS model)"),NCe.forEach(t),oUe=i(y),Jm=n(y,"LI",{});var jCe=s(Jm);lre=n(jCe,"STRONG",{});var GOr=s(lre);rUe=r(GOr,"transfo-xl"),GOr.forEach(t),tUe=r(jCe," \u2014 "),iS=n(jCe,"A",{href:!0});var OOr=s(iS);aUe=r(OOr,"TransfoXLConfig"),OOr.forEach(t),nUe=r(jCe," (Transformer-XL model)"),jCe.forEach(t),sUe=i(y),Ym=n(y,"LI",{});var DCe=s(Ym);ire=n(DCe,"STRONG",{});var VOr=s(ire);lUe=r(VOr,"trocr"),VOr.forEach(t),iUe=r(DCe," \u2014 "),dS=n(DCe,"A",{href:!0});var XOr=s(dS);dUe=r(XOr,"TrOCRConfig"),XOr.forEach(t),cUe=r(DCe," (TrOCR model)"),DCe.forEach(t),fUe=i(y),Km=n(y,"LI",{});var GCe=s(Km);dre=n(GCe,"STRONG",{});var zOr=s(dre);mUe=r(zOr,"unispeech"),zOr.forEach(t),gUe=r(GCe," \u2014 "),cS=n(GCe,"A",{href:!0});var WOr=s(cS);hUe=r(WOr,"UniSpeechConfig"),WOr.forEach(t),pUe=r(GCe," (UniSpeech model)"),GCe.forEach(t),uUe=i(y),Zm=n(y,"LI",{});var OCe=s(Zm);cre=n(OCe,"STRONG",{});var QOr=s(cre);_Ue=r(QOr,"unispeech-sat"),QOr.forEach(t),bUe=r(OCe," \u2014 "),fS=n(OCe,"A",{href:!0});var HOr=s(fS);vUe=r(HOr,"UniSpeechSatConfig"),HOr.forEach(t),FUe=r(OCe," (UniSpeechSat model)"),OCe.forEach(t),TUe=i(y),eg=n(y,"LI",{});var VCe=s(eg);fre=n(VCe,"STRONG",{});var UOr=s(fre);MUe=r(UOr,"van"),UOr.forEach(t),EUe=r(VCe," \u2014 "),mS=n(VCe,"A",{href:!0});var JOr=s(mS);CUe=r(JOr,"VanConfig"),JOr.forEach(t),wUe=r(VCe," (VAN model)"),VCe.forEach(t),AUe=i(y),og=n(y,"LI",{});var XCe=s(og);mre=n(XCe,"STRONG",{});var YOr=s(mre);yUe=r(YOr,"vilt"),YOr.forEach(t),LUe=r(XCe," \u2014 "),gS=n(XCe,"A",{href:!0});var KOr=s(gS);xUe=r(KOr,"ViltConfig"),KOr.forEach(t),$Ue=r(XCe," (ViLT model)"),XCe.forEach(t),kUe=i(y),rg=n(y,"LI",{});var zCe=s(rg);gre=n(zCe,"STRONG",{});var ZOr=s(gre);SUe=r(ZOr,"vision-encoder-decoder"),ZOr.forEach(t),RUe=r(zCe," \u2014 "),hS=n(zCe,"A",{href:!0});var eVr=s(hS);PUe=r(eVr,"VisionEncoderDecoderConfig"),eVr.forEach(t),BUe=r(zCe," (Vision Encoder decoder model)"),zCe.forEach(t),IUe=i(y),tg=n(y,"LI",{});var WCe=s(tg);hre=n(WCe,"STRONG",{});var oVr=s(hre);qUe=r(oVr,"vision-text-dual-encoder"),oVr.forEach(t),NUe=r(WCe," \u2014 "),pS=n(WCe,"A",{href:!0});var rVr=s(pS);jUe=r(rVr,"VisionTextDualEncoderConfig"),rVr.forEach(t),DUe=r(WCe," (VisionTextDualEncoder model)"),WCe.forEach(t),GUe=i(y),ag=n(y,"LI",{});var QCe=s(ag);pre=n(QCe,"STRONG",{});var tVr=s(pre);OUe=r(tVr,"visual_bert"),tVr.forEach(t),VUe=r(QCe," \u2014 "),uS=n(QCe,"A",{href:!0});var aVr=s(uS);XUe=r(aVr,"VisualBertConfig"),aVr.forEach(t),zUe=r(QCe," (VisualBert model)"),QCe.forEach(t),WUe=i(y),ng=n(y,"LI",{});var HCe=s(ng);ure=n(HCe,"STRONG",{});var nVr=s(ure);QUe=r(nVr,"vit"),nVr.forEach(t),HUe=r(HCe," \u2014 "),_S=n(HCe,"A",{href:!0});var sVr=s(_S);UUe=r(sVr,"ViTConfig"),sVr.forEach(t),JUe=r(HCe," (ViT model)"),HCe.forEach(t),YUe=i(y),sg=n(y,"LI",{});var UCe=s(sg);_re=n(UCe,"STRONG",{});var lVr=s(_re);KUe=r(lVr,"vit_mae"),lVr.forEach(t),ZUe=r(UCe," \u2014 "),bS=n(UCe,"A",{href:!0});var iVr=s(bS);eJe=r(iVr,"ViTMAEConfig"),iVr.forEach(t),oJe=r(UCe," (ViTMAE model)"),UCe.forEach(t),rJe=i(y),lg=n(y,"LI",{});var JCe=s(lg);bre=n(JCe,"STRONG",{});var dVr=s(bre);tJe=r(dVr,"wav2vec2"),dVr.forEach(t),aJe=r(JCe," \u2014 "),vS=n(JCe,"A",{href:!0});var cVr=s(vS);nJe=r(cVr,"Wav2Vec2Config"),cVr.forEach(t),sJe=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),lJe=i(y),ig=n(y,"LI",{});var YCe=s(ig);vre=n(YCe,"STRONG",{});var fVr=s(vre);iJe=r(fVr,"wav2vec2-conformer"),fVr.forEach(t),dJe=r(YCe," \u2014 "),FS=n(YCe,"A",{href:!0});var mVr=s(FS);cJe=r(mVr,"Wav2Vec2ConformerConfig"),mVr.forEach(t),fJe=r(YCe," (Wav2Vec2-Conformer model)"),YCe.forEach(t),mJe=i(y),dg=n(y,"LI",{});var KCe=s(dg);Fre=n(KCe,"STRONG",{});var gVr=s(Fre);gJe=r(gVr,"wavlm"),gVr.forEach(t),hJe=r(KCe," \u2014 "),TS=n(KCe,"A",{href:!0});var hVr=s(TS);pJe=r(hVr,"WavLMConfig"),hVr.forEach(t),uJe=r(KCe," (WavLM model)"),KCe.forEach(t),_Je=i(y),cg=n(y,"LI",{});var ZCe=s(cg);Tre=n(ZCe,"STRONG",{});var pVr=s(Tre);bJe=r(pVr,"xglm"),pVr.forEach(t),vJe=r(ZCe," \u2014 "),MS=n(ZCe,"A",{href:!0});var uVr=s(MS);FJe=r(uVr,"XGLMConfig"),uVr.forEach(t),TJe=r(ZCe," (XGLM model)"),ZCe.forEach(t),MJe=i(y),fg=n(y,"LI",{});var ewe=s(fg);Mre=n(ewe,"STRONG",{});var _Vr=s(Mre);EJe=r(_Vr,"xlm"),_Vr.forEach(t),CJe=r(ewe," \u2014 "),ES=n(ewe,"A",{href:!0});var bVr=s(ES);wJe=r(bVr,"XLMConfig"),bVr.forEach(t),AJe=r(ewe," (XLM model)"),ewe.forEach(t),yJe=i(y),mg=n(y,"LI",{});var owe=s(mg);Ere=n(owe,"STRONG",{});var vVr=s(Ere);LJe=r(vVr,"xlm-prophetnet"),vVr.forEach(t),xJe=r(owe," \u2014 "),CS=n(owe,"A",{href:!0});var FVr=s(CS);$Je=r(FVr,"XLMProphetNetConfig"),FVr.forEach(t),kJe=r(owe," (XLMProphetNet model)"),owe.forEach(t),SJe=i(y),gg=n(y,"LI",{});var rwe=s(gg);Cre=n(rwe,"STRONG",{});var TVr=s(Cre);RJe=r(TVr,"xlm-roberta"),TVr.forEach(t),PJe=r(rwe," \u2014 "),wS=n(rwe,"A",{href:!0});var MVr=s(wS);BJe=r(MVr,"XLMRobertaConfig"),MVr.forEach(t),IJe=r(rwe," (XLM-RoBERTa model)"),rwe.forEach(t),qJe=i(y),hg=n(y,"LI",{});var twe=s(hg);wre=n(twe,"STRONG",{});var EVr=s(wre);NJe=r(EVr,"xlm-roberta-xl"),EVr.forEach(t),jJe=r(twe," \u2014 "),AS=n(twe,"A",{href:!0});var CVr=s(AS);DJe=r(CVr,"XLMRobertaXLConfig"),CVr.forEach(t),GJe=r(twe," (XLM-RoBERTa-XL model)"),twe.forEach(t),OJe=i(y),pg=n(y,"LI",{});var awe=s(pg);Are=n(awe,"STRONG",{});var wVr=s(Are);VJe=r(wVr,"xlnet"),wVr.forEach(t),XJe=r(awe," \u2014 "),yS=n(awe,"A",{href:!0});var AVr=s(yS);zJe=r(AVr,"XLNetConfig"),AVr.forEach(t),WJe=r(awe," (XLNet model)"),awe.forEach(t),QJe=i(y),ug=n(y,"LI",{});var nwe=s(ug);yre=n(nwe,"STRONG",{});var yVr=s(yre);HJe=r(yVr,"yolos"),yVr.forEach(t),UJe=r(nwe," \u2014 "),LS=n(nwe,"A",{href:!0});var LVr=s(LS);JJe=r(LVr,"YolosConfig"),LVr.forEach(t),YJe=r(nwe," (YOLOS model)"),nwe.forEach(t),KJe=i(y),_g=n(y,"LI",{});var swe=s(_g);Lre=n(swe,"STRONG",{});var xVr=s(Lre);ZJe=r(xVr,"yoso"),xVr.forEach(t),eYe=r(swe," \u2014 "),xS=n(swe,"A",{href:!0});var $Vr=s(xS);oYe=r($Vr,"YosoConfig"),$Vr.forEach(t),rYe=r(swe," (YOSO model)"),swe.forEach(t),y.forEach(t),tYe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),aYe=i(et),vg=n(et,"DIV",{class:!0});var qNe=s(vg);T(uy.$$.fragment,qNe),nYe=i(qNe),xre=n(qNe,"P",{});var kVr=s(xre);sYe=r(kVr,"Register a new configuration for this class."),kVr.forEach(t),qNe.forEach(t),et.forEach(t),DIe=i(f),Fi=n(f,"H2",{class:!0});var NNe=s(Fi);Fg=n(NNe,"A",{id:!0,class:!0,href:!0});var SVr=s(Fg);$re=n(SVr,"SPAN",{});var RVr=s($re);T(_y.$$.fragment,RVr),RVr.forEach(t),SVr.forEach(t),lYe=i(NNe),kre=n(NNe,"SPAN",{});var PVr=s(kre);iYe=r(PVr,"AutoTokenizer"),PVr.forEach(t),NNe.forEach(t),GIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(by.$$.fragment,Is),dYe=i(Is),vy=n(Is,"P",{});var jNe=s(vy);cYe=r(jNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$S=n(jNe,"A",{href:!0});var BVr=s($S);fYe=r(BVr,"AutoTokenizer.from_pretrained()"),BVr.forEach(t),mYe=r(jNe," class method."),jNe.forEach(t),gYe=i(Is),Fy=n(Is,"P",{});var DNe=s(Fy);hYe=r(DNe,"This class cannot be instantiated directly using "),Sre=n(DNe,"CODE",{});var IVr=s(Sre);pYe=r(IVr,"__init__()"),IVr.forEach(t),uYe=r(DNe," (throws an error)."),DNe.forEach(t),_Ye=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(Ty.$$.fragment,qs),bYe=i(qs),Rre=n(qs,"P",{});var qVr=s(Rre);vYe=r(qVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qVr.forEach(t),FYe=i(qs),Aa=n(qs,"P",{});var fA=s(Aa);TYe=r(fA,"The tokenizer class to instantiate is selected based on the "),Pre=n(fA,"CODE",{});var NVr=s(Pre);MYe=r(NVr,"model_type"),NVr.forEach(t),EYe=r(fA,` property of the config object (either
passed as an argument or loaded from `),Bre=n(fA,"CODE",{});var jVr=s(Bre);CYe=r(jVr,"pretrained_model_name_or_path"),jVr.forEach(t),wYe=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=n(fA,"CODE",{});var DVr=s(Ire);AYe=r(DVr,"pretrained_model_name_or_path"),DVr.forEach(t),yYe=r(fA,":"),fA.forEach(t),LYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var M9=s(Sn);qre=n(M9,"STRONG",{});var GVr=s(qre);xYe=r(GVr,"albert"),GVr.forEach(t),$Ye=r(M9," \u2014 "),kS=n(M9,"A",{href:!0});var OVr=s(kS);kYe=r(OVr,"AlbertTokenizer"),OVr.forEach(t),SYe=r(M9," or "),SS=n(M9,"A",{href:!0});var VVr=s(SS);RYe=r(VVr,"AlbertTokenizerFast"),VVr.forEach(t),PYe=r(M9," (ALBERT model)"),M9.forEach(t),BYe=i(S),Rn=n(S,"LI",{});var E9=s(Rn);Nre=n(E9,"STRONG",{});var XVr=s(Nre);IYe=r(XVr,"bart"),XVr.forEach(t),qYe=r(E9," \u2014 "),RS=n(E9,"A",{href:!0});var zVr=s(RS);NYe=r(zVr,"BartTokenizer"),zVr.forEach(t),jYe=r(E9," or "),PS=n(E9,"A",{href:!0});var WVr=s(PS);DYe=r(WVr,"BartTokenizerFast"),WVr.forEach(t),GYe=r(E9," (BART model)"),E9.forEach(t),OYe=i(S),Pn=n(S,"LI",{});var C9=s(Pn);jre=n(C9,"STRONG",{});var QVr=s(jre);VYe=r(QVr,"barthez"),QVr.forEach(t),XYe=r(C9," \u2014 "),BS=n(C9,"A",{href:!0});var HVr=s(BS);zYe=r(HVr,"BarthezTokenizer"),HVr.forEach(t),WYe=r(C9," or "),IS=n(C9,"A",{href:!0});var UVr=s(IS);QYe=r(UVr,"BarthezTokenizerFast"),UVr.forEach(t),HYe=r(C9," (BARThez model)"),C9.forEach(t),UYe=i(S),Tg=n(S,"LI",{});var lwe=s(Tg);Dre=n(lwe,"STRONG",{});var JVr=s(Dre);JYe=r(JVr,"bartpho"),JVr.forEach(t),YYe=r(lwe," \u2014 "),qS=n(lwe,"A",{href:!0});var YVr=s(qS);KYe=r(YVr,"BartphoTokenizer"),YVr.forEach(t),ZYe=r(lwe," (BARTpho model)"),lwe.forEach(t),eKe=i(S),Bn=n(S,"LI",{});var w9=s(Bn);Gre=n(w9,"STRONG",{});var KVr=s(Gre);oKe=r(KVr,"bert"),KVr.forEach(t),rKe=r(w9," \u2014 "),NS=n(w9,"A",{href:!0});var ZVr=s(NS);tKe=r(ZVr,"BertTokenizer"),ZVr.forEach(t),aKe=r(w9," or "),jS=n(w9,"A",{href:!0});var eXr=s(jS);nKe=r(eXr,"BertTokenizerFast"),eXr.forEach(t),sKe=r(w9," (BERT model)"),w9.forEach(t),lKe=i(S),Mg=n(S,"LI",{});var iwe=s(Mg);Ore=n(iwe,"STRONG",{});var oXr=s(Ore);iKe=r(oXr,"bert-generation"),oXr.forEach(t),dKe=r(iwe," \u2014 "),DS=n(iwe,"A",{href:!0});var rXr=s(DS);cKe=r(rXr,"BertGenerationTokenizer"),rXr.forEach(t),fKe=r(iwe," (Bert Generation model)"),iwe.forEach(t),mKe=i(S),Eg=n(S,"LI",{});var dwe=s(Eg);Vre=n(dwe,"STRONG",{});var tXr=s(Vre);gKe=r(tXr,"bert-japanese"),tXr.forEach(t),hKe=r(dwe," \u2014 "),GS=n(dwe,"A",{href:!0});var aXr=s(GS);pKe=r(aXr,"BertJapaneseTokenizer"),aXr.forEach(t),uKe=r(dwe," (BertJapanese model)"),dwe.forEach(t),_Ke=i(S),Cg=n(S,"LI",{});var cwe=s(Cg);Xre=n(cwe,"STRONG",{});var nXr=s(Xre);bKe=r(nXr,"bertweet"),nXr.forEach(t),vKe=r(cwe," \u2014 "),OS=n(cwe,"A",{href:!0});var sXr=s(OS);FKe=r(sXr,"BertweetTokenizer"),sXr.forEach(t),TKe=r(cwe," (Bertweet model)"),cwe.forEach(t),MKe=i(S),In=n(S,"LI",{});var A9=s(In);zre=n(A9,"STRONG",{});var lXr=s(zre);EKe=r(lXr,"big_bird"),lXr.forEach(t),CKe=r(A9," \u2014 "),VS=n(A9,"A",{href:!0});var iXr=s(VS);wKe=r(iXr,"BigBirdTokenizer"),iXr.forEach(t),AKe=r(A9," or "),XS=n(A9,"A",{href:!0});var dXr=s(XS);yKe=r(dXr,"BigBirdTokenizerFast"),dXr.forEach(t),LKe=r(A9," (BigBird model)"),A9.forEach(t),xKe=i(S),qn=n(S,"LI",{});var y9=s(qn);Wre=n(y9,"STRONG",{});var cXr=s(Wre);$Ke=r(cXr,"bigbird_pegasus"),cXr.forEach(t),kKe=r(y9," \u2014 "),zS=n(y9,"A",{href:!0});var fXr=s(zS);SKe=r(fXr,"PegasusTokenizer"),fXr.forEach(t),RKe=r(y9," or "),WS=n(y9,"A",{href:!0});var mXr=s(WS);PKe=r(mXr,"PegasusTokenizerFast"),mXr.forEach(t),BKe=r(y9," (BigBirdPegasus model)"),y9.forEach(t),IKe=i(S),Nn=n(S,"LI",{});var L9=s(Nn);Qre=n(L9,"STRONG",{});var gXr=s(Qre);qKe=r(gXr,"blenderbot"),gXr.forEach(t),NKe=r(L9," \u2014 "),QS=n(L9,"A",{href:!0});var hXr=s(QS);jKe=r(hXr,"BlenderbotTokenizer"),hXr.forEach(t),DKe=r(L9," or "),HS=n(L9,"A",{href:!0});var pXr=s(HS);GKe=r(pXr,"BlenderbotTokenizerFast"),pXr.forEach(t),OKe=r(L9," (Blenderbot model)"),L9.forEach(t),VKe=i(S),wg=n(S,"LI",{});var fwe=s(wg);Hre=n(fwe,"STRONG",{});var uXr=s(Hre);XKe=r(uXr,"blenderbot-small"),uXr.forEach(t),zKe=r(fwe," \u2014 "),US=n(fwe,"A",{href:!0});var _Xr=s(US);WKe=r(_Xr,"BlenderbotSmallTokenizer"),_Xr.forEach(t),QKe=r(fwe," (BlenderbotSmall model)"),fwe.forEach(t),HKe=i(S),Ag=n(S,"LI",{});var mwe=s(Ag);Ure=n(mwe,"STRONG",{});var bXr=s(Ure);UKe=r(bXr,"byt5"),bXr.forEach(t),JKe=r(mwe," \u2014 "),JS=n(mwe,"A",{href:!0});var vXr=s(JS);YKe=r(vXr,"ByT5Tokenizer"),vXr.forEach(t),KKe=r(mwe," (ByT5 model)"),mwe.forEach(t),ZKe=i(S),jn=n(S,"LI",{});var x9=s(jn);Jre=n(x9,"STRONG",{});var FXr=s(Jre);eZe=r(FXr,"camembert"),FXr.forEach(t),oZe=r(x9," \u2014 "),YS=n(x9,"A",{href:!0});var TXr=s(YS);rZe=r(TXr,"CamembertTokenizer"),TXr.forEach(t),tZe=r(x9," or "),KS=n(x9,"A",{href:!0});var MXr=s(KS);aZe=r(MXr,"CamembertTokenizerFast"),MXr.forEach(t),nZe=r(x9," (CamemBERT model)"),x9.forEach(t),sZe=i(S),yg=n(S,"LI",{});var gwe=s(yg);Yre=n(gwe,"STRONG",{});var EXr=s(Yre);lZe=r(EXr,"canine"),EXr.forEach(t),iZe=r(gwe," \u2014 "),ZS=n(gwe,"A",{href:!0});var CXr=s(ZS);dZe=r(CXr,"CanineTokenizer"),CXr.forEach(t),cZe=r(gwe," (Canine model)"),gwe.forEach(t),fZe=i(S),Dn=n(S,"LI",{});var $9=s(Dn);Kre=n($9,"STRONG",{});var wXr=s(Kre);mZe=r(wXr,"clip"),wXr.forEach(t),gZe=r($9," \u2014 "),eR=n($9,"A",{href:!0});var AXr=s(eR);hZe=r(AXr,"CLIPTokenizer"),AXr.forEach(t),pZe=r($9," or "),oR=n($9,"A",{href:!0});var yXr=s(oR);uZe=r(yXr,"CLIPTokenizerFast"),yXr.forEach(t),_Ze=r($9," (CLIP model)"),$9.forEach(t),bZe=i(S),Gn=n(S,"LI",{});var k9=s(Gn);Zre=n(k9,"STRONG",{});var LXr=s(Zre);vZe=r(LXr,"convbert"),LXr.forEach(t),FZe=r(k9," \u2014 "),rR=n(k9,"A",{href:!0});var xXr=s(rR);TZe=r(xXr,"ConvBertTokenizer"),xXr.forEach(t),MZe=r(k9," or "),tR=n(k9,"A",{href:!0});var $Xr=s(tR);EZe=r($Xr,"ConvBertTokenizerFast"),$Xr.forEach(t),CZe=r(k9," (ConvBERT model)"),k9.forEach(t),wZe=i(S),On=n(S,"LI",{});var S9=s(On);ete=n(S9,"STRONG",{});var kXr=s(ete);AZe=r(kXr,"cpm"),kXr.forEach(t),yZe=r(S9," \u2014 "),aR=n(S9,"A",{href:!0});var SXr=s(aR);LZe=r(SXr,"CpmTokenizer"),SXr.forEach(t),xZe=r(S9," or "),nR=n(S9,"A",{href:!0});var RXr=s(nR);$Ze=r(RXr,"CpmTokenizerFast"),RXr.forEach(t),kZe=r(S9," (CPM model)"),S9.forEach(t),SZe=i(S),Lg=n(S,"LI",{});var hwe=s(Lg);ote=n(hwe,"STRONG",{});var PXr=s(ote);RZe=r(PXr,"ctrl"),PXr.forEach(t),PZe=r(hwe," \u2014 "),sR=n(hwe,"A",{href:!0});var BXr=s(sR);BZe=r(BXr,"CTRLTokenizer"),BXr.forEach(t),IZe=r(hwe," (CTRL model)"),hwe.forEach(t),qZe=i(S),Vn=n(S,"LI",{});var R9=s(Vn);rte=n(R9,"STRONG",{});var IXr=s(rte);NZe=r(IXr,"data2vec-text"),IXr.forEach(t),jZe=r(R9," \u2014 "),lR=n(R9,"A",{href:!0});var qXr=s(lR);DZe=r(qXr,"RobertaTokenizer"),qXr.forEach(t),GZe=r(R9," or "),iR=n(R9,"A",{href:!0});var NXr=s(iR);OZe=r(NXr,"RobertaTokenizerFast"),NXr.forEach(t),VZe=r(R9," (Data2VecText model)"),R9.forEach(t),XZe=i(S),Xn=n(S,"LI",{});var P9=s(Xn);tte=n(P9,"STRONG",{});var jXr=s(tte);zZe=r(jXr,"deberta"),jXr.forEach(t),WZe=r(P9," \u2014 "),dR=n(P9,"A",{href:!0});var DXr=s(dR);QZe=r(DXr,"DebertaTokenizer"),DXr.forEach(t),HZe=r(P9," or "),cR=n(P9,"A",{href:!0});var GXr=s(cR);UZe=r(GXr,"DebertaTokenizerFast"),GXr.forEach(t),JZe=r(P9," (DeBERTa model)"),P9.forEach(t),YZe=i(S),zn=n(S,"LI",{});var B9=s(zn);ate=n(B9,"STRONG",{});var OXr=s(ate);KZe=r(OXr,"deberta-v2"),OXr.forEach(t),ZZe=r(B9," \u2014 "),fR=n(B9,"A",{href:!0});var VXr=s(fR);eeo=r(VXr,"DebertaV2Tokenizer"),VXr.forEach(t),oeo=r(B9," or "),mR=n(B9,"A",{href:!0});var XXr=s(mR);reo=r(XXr,"DebertaV2TokenizerFast"),XXr.forEach(t),teo=r(B9," (DeBERTa-v2 model)"),B9.forEach(t),aeo=i(S),Wn=n(S,"LI",{});var I9=s(Wn);nte=n(I9,"STRONG",{});var zXr=s(nte);neo=r(zXr,"distilbert"),zXr.forEach(t),seo=r(I9," \u2014 "),gR=n(I9,"A",{href:!0});var WXr=s(gR);leo=r(WXr,"DistilBertTokenizer"),WXr.forEach(t),ieo=r(I9," or "),hR=n(I9,"A",{href:!0});var QXr=s(hR);deo=r(QXr,"DistilBertTokenizerFast"),QXr.forEach(t),ceo=r(I9," (DistilBERT model)"),I9.forEach(t),feo=i(S),Qn=n(S,"LI",{});var q9=s(Qn);ste=n(q9,"STRONG",{});var HXr=s(ste);meo=r(HXr,"dpr"),HXr.forEach(t),geo=r(q9," \u2014 "),pR=n(q9,"A",{href:!0});var UXr=s(pR);heo=r(UXr,"DPRQuestionEncoderTokenizer"),UXr.forEach(t),peo=r(q9," or "),uR=n(q9,"A",{href:!0});var JXr=s(uR);ueo=r(JXr,"DPRQuestionEncoderTokenizerFast"),JXr.forEach(t),_eo=r(q9," (DPR model)"),q9.forEach(t),beo=i(S),Hn=n(S,"LI",{});var N9=s(Hn);lte=n(N9,"STRONG",{});var YXr=s(lte);veo=r(YXr,"electra"),YXr.forEach(t),Feo=r(N9," \u2014 "),_R=n(N9,"A",{href:!0});var KXr=s(_R);Teo=r(KXr,"ElectraTokenizer"),KXr.forEach(t),Meo=r(N9," or "),bR=n(N9,"A",{href:!0});var ZXr=s(bR);Eeo=r(ZXr,"ElectraTokenizerFast"),ZXr.forEach(t),Ceo=r(N9," (ELECTRA model)"),N9.forEach(t),weo=i(S),xg=n(S,"LI",{});var pwe=s(xg);ite=n(pwe,"STRONG",{});var ezr=s(ite);Aeo=r(ezr,"flaubert"),ezr.forEach(t),yeo=r(pwe," \u2014 "),vR=n(pwe,"A",{href:!0});var ozr=s(vR);Leo=r(ozr,"FlaubertTokenizer"),ozr.forEach(t),xeo=r(pwe," (FlauBERT model)"),pwe.forEach(t),$eo=i(S),Un=n(S,"LI",{});var j9=s(Un);dte=n(j9,"STRONG",{});var rzr=s(dte);keo=r(rzr,"fnet"),rzr.forEach(t),Seo=r(j9," \u2014 "),FR=n(j9,"A",{href:!0});var tzr=s(FR);Reo=r(tzr,"FNetTokenizer"),tzr.forEach(t),Peo=r(j9," or "),TR=n(j9,"A",{href:!0});var azr=s(TR);Beo=r(azr,"FNetTokenizerFast"),azr.forEach(t),Ieo=r(j9," (FNet model)"),j9.forEach(t),qeo=i(S),$g=n(S,"LI",{});var uwe=s($g);cte=n(uwe,"STRONG",{});var nzr=s(cte);Neo=r(nzr,"fsmt"),nzr.forEach(t),jeo=r(uwe," \u2014 "),MR=n(uwe,"A",{href:!0});var szr=s(MR);Deo=r(szr,"FSMTTokenizer"),szr.forEach(t),Geo=r(uwe," (FairSeq Machine-Translation model)"),uwe.forEach(t),Oeo=i(S),Jn=n(S,"LI",{});var D9=s(Jn);fte=n(D9,"STRONG",{});var lzr=s(fte);Veo=r(lzr,"funnel"),lzr.forEach(t),Xeo=r(D9," \u2014 "),ER=n(D9,"A",{href:!0});var izr=s(ER);zeo=r(izr,"FunnelTokenizer"),izr.forEach(t),Weo=r(D9," or "),CR=n(D9,"A",{href:!0});var dzr=s(CR);Qeo=r(dzr,"FunnelTokenizerFast"),dzr.forEach(t),Heo=r(D9," (Funnel Transformer model)"),D9.forEach(t),Ueo=i(S),Yn=n(S,"LI",{});var G9=s(Yn);mte=n(G9,"STRONG",{});var czr=s(mte);Jeo=r(czr,"gpt2"),czr.forEach(t),Yeo=r(G9," \u2014 "),wR=n(G9,"A",{href:!0});var fzr=s(wR);Keo=r(fzr,"GPT2Tokenizer"),fzr.forEach(t),Zeo=r(G9," or "),AR=n(G9,"A",{href:!0});var mzr=s(AR);eoo=r(mzr,"GPT2TokenizerFast"),mzr.forEach(t),ooo=r(G9," (OpenAI GPT-2 model)"),G9.forEach(t),roo=i(S),Kn=n(S,"LI",{});var O9=s(Kn);gte=n(O9,"STRONG",{});var gzr=s(gte);too=r(gzr,"gpt_neo"),gzr.forEach(t),aoo=r(O9," \u2014 "),yR=n(O9,"A",{href:!0});var hzr=s(yR);noo=r(hzr,"GPT2Tokenizer"),hzr.forEach(t),soo=r(O9," or "),LR=n(O9,"A",{href:!0});var pzr=s(LR);loo=r(pzr,"GPT2TokenizerFast"),pzr.forEach(t),ioo=r(O9," (GPT Neo model)"),O9.forEach(t),doo=i(S),Zn=n(S,"LI",{});var V9=s(Zn);hte=n(V9,"STRONG",{});var uzr=s(hte);coo=r(uzr,"gptj"),uzr.forEach(t),foo=r(V9," \u2014 "),xR=n(V9,"A",{href:!0});var _zr=s(xR);moo=r(_zr,"GPT2Tokenizer"),_zr.forEach(t),goo=r(V9," or "),$R=n(V9,"A",{href:!0});var bzr=s($R);hoo=r(bzr,"GPT2TokenizerFast"),bzr.forEach(t),poo=r(V9," (GPT-J model)"),V9.forEach(t),uoo=i(S),es=n(S,"LI",{});var X9=s(es);pte=n(X9,"STRONG",{});var vzr=s(pte);_oo=r(vzr,"herbert"),vzr.forEach(t),boo=r(X9," \u2014 "),kR=n(X9,"A",{href:!0});var Fzr=s(kR);voo=r(Fzr,"HerbertTokenizer"),Fzr.forEach(t),Foo=r(X9," or "),SR=n(X9,"A",{href:!0});var Tzr=s(SR);Too=r(Tzr,"HerbertTokenizerFast"),Tzr.forEach(t),Moo=r(X9," (HerBERT model)"),X9.forEach(t),Eoo=i(S),kg=n(S,"LI",{});var _we=s(kg);ute=n(_we,"STRONG",{});var Mzr=s(ute);Coo=r(Mzr,"hubert"),Mzr.forEach(t),woo=r(_we," \u2014 "),RR=n(_we,"A",{href:!0});var Ezr=s(RR);Aoo=r(Ezr,"Wav2Vec2CTCTokenizer"),Ezr.forEach(t),yoo=r(_we," (Hubert model)"),_we.forEach(t),Loo=i(S),os=n(S,"LI",{});var z9=s(os);_te=n(z9,"STRONG",{});var Czr=s(_te);xoo=r(Czr,"ibert"),Czr.forEach(t),$oo=r(z9," \u2014 "),PR=n(z9,"A",{href:!0});var wzr=s(PR);koo=r(wzr,"RobertaTokenizer"),wzr.forEach(t),Soo=r(z9," or "),BR=n(z9,"A",{href:!0});var Azr=s(BR);Roo=r(Azr,"RobertaTokenizerFast"),Azr.forEach(t),Poo=r(z9," (I-BERT model)"),z9.forEach(t),Boo=i(S),rs=n(S,"LI",{});var W9=s(rs);bte=n(W9,"STRONG",{});var yzr=s(bte);Ioo=r(yzr,"layoutlm"),yzr.forEach(t),qoo=r(W9," \u2014 "),IR=n(W9,"A",{href:!0});var Lzr=s(IR);Noo=r(Lzr,"LayoutLMTokenizer"),Lzr.forEach(t),joo=r(W9," or "),qR=n(W9,"A",{href:!0});var xzr=s(qR);Doo=r(xzr,"LayoutLMTokenizerFast"),xzr.forEach(t),Goo=r(W9," (LayoutLM model)"),W9.forEach(t),Ooo=i(S),ts=n(S,"LI",{});var Q9=s(ts);vte=n(Q9,"STRONG",{});var $zr=s(vte);Voo=r($zr,"layoutlmv2"),$zr.forEach(t),Xoo=r(Q9," \u2014 "),NR=n(Q9,"A",{href:!0});var kzr=s(NR);zoo=r(kzr,"LayoutLMv2Tokenizer"),kzr.forEach(t),Woo=r(Q9," or "),jR=n(Q9,"A",{href:!0});var Szr=s(jR);Qoo=r(Szr,"LayoutLMv2TokenizerFast"),Szr.forEach(t),Hoo=r(Q9," (LayoutLMv2 model)"),Q9.forEach(t),Uoo=i(S),as=n(S,"LI",{});var H9=s(as);Fte=n(H9,"STRONG",{});var Rzr=s(Fte);Joo=r(Rzr,"layoutxlm"),Rzr.forEach(t),Yoo=r(H9," \u2014 "),DR=n(H9,"A",{href:!0});var Pzr=s(DR);Koo=r(Pzr,"LayoutXLMTokenizer"),Pzr.forEach(t),Zoo=r(H9," or "),GR=n(H9,"A",{href:!0});var Bzr=s(GR);ero=r(Bzr,"LayoutXLMTokenizerFast"),Bzr.forEach(t),oro=r(H9," (LayoutXLM model)"),H9.forEach(t),rro=i(S),ns=n(S,"LI",{});var U9=s(ns);Tte=n(U9,"STRONG",{});var Izr=s(Tte);tro=r(Izr,"led"),Izr.forEach(t),aro=r(U9," \u2014 "),OR=n(U9,"A",{href:!0});var qzr=s(OR);nro=r(qzr,"LEDTokenizer"),qzr.forEach(t),sro=r(U9," or "),VR=n(U9,"A",{href:!0});var Nzr=s(VR);lro=r(Nzr,"LEDTokenizerFast"),Nzr.forEach(t),iro=r(U9," (LED model)"),U9.forEach(t),dro=i(S),ss=n(S,"LI",{});var J9=s(ss);Mte=n(J9,"STRONG",{});var jzr=s(Mte);cro=r(jzr,"longformer"),jzr.forEach(t),fro=r(J9," \u2014 "),XR=n(J9,"A",{href:!0});var Dzr=s(XR);mro=r(Dzr,"LongformerTokenizer"),Dzr.forEach(t),gro=r(J9," or "),zR=n(J9,"A",{href:!0});var Gzr=s(zR);hro=r(Gzr,"LongformerTokenizerFast"),Gzr.forEach(t),pro=r(J9," (Longformer model)"),J9.forEach(t),uro=i(S),Sg=n(S,"LI",{});var bwe=s(Sg);Ete=n(bwe,"STRONG",{});var Ozr=s(Ete);_ro=r(Ozr,"luke"),Ozr.forEach(t),bro=r(bwe," \u2014 "),WR=n(bwe,"A",{href:!0});var Vzr=s(WR);vro=r(Vzr,"LukeTokenizer"),Vzr.forEach(t),Fro=r(bwe," (LUKE model)"),bwe.forEach(t),Tro=i(S),ls=n(S,"LI",{});var Y9=s(ls);Cte=n(Y9,"STRONG",{});var Xzr=s(Cte);Mro=r(Xzr,"lxmert"),Xzr.forEach(t),Ero=r(Y9," \u2014 "),QR=n(Y9,"A",{href:!0});var zzr=s(QR);Cro=r(zzr,"LxmertTokenizer"),zzr.forEach(t),wro=r(Y9," or "),HR=n(Y9,"A",{href:!0});var Wzr=s(HR);Aro=r(Wzr,"LxmertTokenizerFast"),Wzr.forEach(t),yro=r(Y9," (LXMERT model)"),Y9.forEach(t),Lro=i(S),Rg=n(S,"LI",{});var vwe=s(Rg);wte=n(vwe,"STRONG",{});var Qzr=s(wte);xro=r(Qzr,"m2m_100"),Qzr.forEach(t),$ro=r(vwe," \u2014 "),UR=n(vwe,"A",{href:!0});var Hzr=s(UR);kro=r(Hzr,"M2M100Tokenizer"),Hzr.forEach(t),Sro=r(vwe," (M2M100 model)"),vwe.forEach(t),Rro=i(S),Pg=n(S,"LI",{});var Fwe=s(Pg);Ate=n(Fwe,"STRONG",{});var Uzr=s(Ate);Pro=r(Uzr,"marian"),Uzr.forEach(t),Bro=r(Fwe," \u2014 "),JR=n(Fwe,"A",{href:!0});var Jzr=s(JR);Iro=r(Jzr,"MarianTokenizer"),Jzr.forEach(t),qro=r(Fwe," (Marian model)"),Fwe.forEach(t),Nro=i(S),is=n(S,"LI",{});var K9=s(is);yte=n(K9,"STRONG",{});var Yzr=s(yte);jro=r(Yzr,"mbart"),Yzr.forEach(t),Dro=r(K9," \u2014 "),YR=n(K9,"A",{href:!0});var Kzr=s(YR);Gro=r(Kzr,"MBartTokenizer"),Kzr.forEach(t),Oro=r(K9," or "),KR=n(K9,"A",{href:!0});var Zzr=s(KR);Vro=r(Zzr,"MBartTokenizerFast"),Zzr.forEach(t),Xro=r(K9," (mBART model)"),K9.forEach(t),zro=i(S),ds=n(S,"LI",{});var Z9=s(ds);Lte=n(Z9,"STRONG",{});var eWr=s(Lte);Wro=r(eWr,"mbart50"),eWr.forEach(t),Qro=r(Z9," \u2014 "),ZR=n(Z9,"A",{href:!0});var oWr=s(ZR);Hro=r(oWr,"MBart50Tokenizer"),oWr.forEach(t),Uro=r(Z9," or "),eP=n(Z9,"A",{href:!0});var rWr=s(eP);Jro=r(rWr,"MBart50TokenizerFast"),rWr.forEach(t),Yro=r(Z9," (mBART-50 model)"),Z9.forEach(t),Kro=i(S),cs=n(S,"LI",{});var e$=s(cs);xte=n(e$,"STRONG",{});var tWr=s(xte);Zro=r(tWr,"megatron-bert"),tWr.forEach(t),eto=r(e$," \u2014 "),oP=n(e$,"A",{href:!0});var aWr=s(oP);oto=r(aWr,"BertTokenizer"),aWr.forEach(t),rto=r(e$," or "),rP=n(e$,"A",{href:!0});var nWr=s(rP);tto=r(nWr,"BertTokenizerFast"),nWr.forEach(t),ato=r(e$," (MegatronBert model)"),e$.forEach(t),nto=i(S),Bg=n(S,"LI",{});var Twe=s(Bg);$te=n(Twe,"STRONG",{});var sWr=s($te);sto=r(sWr,"mluke"),sWr.forEach(t),lto=r(Twe," \u2014 "),tP=n(Twe,"A",{href:!0});var lWr=s(tP);ito=r(lWr,"MLukeTokenizer"),lWr.forEach(t),dto=r(Twe," (mLUKE model)"),Twe.forEach(t),cto=i(S),fs=n(S,"LI",{});var o$=s(fs);kte=n(o$,"STRONG",{});var iWr=s(kte);fto=r(iWr,"mobilebert"),iWr.forEach(t),mto=r(o$," \u2014 "),aP=n(o$,"A",{href:!0});var dWr=s(aP);gto=r(dWr,"MobileBertTokenizer"),dWr.forEach(t),hto=r(o$," or "),nP=n(o$,"A",{href:!0});var cWr=s(nP);pto=r(cWr,"MobileBertTokenizerFast"),cWr.forEach(t),uto=r(o$," (MobileBERT model)"),o$.forEach(t),_to=i(S),ms=n(S,"LI",{});var r$=s(ms);Ste=n(r$,"STRONG",{});var fWr=s(Ste);bto=r(fWr,"mpnet"),fWr.forEach(t),vto=r(r$," \u2014 "),sP=n(r$,"A",{href:!0});var mWr=s(sP);Fto=r(mWr,"MPNetTokenizer"),mWr.forEach(t),Tto=r(r$," or "),lP=n(r$,"A",{href:!0});var gWr=s(lP);Mto=r(gWr,"MPNetTokenizerFast"),gWr.forEach(t),Eto=r(r$," (MPNet model)"),r$.forEach(t),Cto=i(S),gs=n(S,"LI",{});var t$=s(gs);Rte=n(t$,"STRONG",{});var hWr=s(Rte);wto=r(hWr,"mt5"),hWr.forEach(t),Ato=r(t$," \u2014 "),iP=n(t$,"A",{href:!0});var pWr=s(iP);yto=r(pWr,"MT5Tokenizer"),pWr.forEach(t),Lto=r(t$," or "),dP=n(t$,"A",{href:!0});var uWr=s(dP);xto=r(uWr,"MT5TokenizerFast"),uWr.forEach(t),$to=r(t$," (mT5 model)"),t$.forEach(t),kto=i(S),hs=n(S,"LI",{});var a$=s(hs);Pte=n(a$,"STRONG",{});var _Wr=s(Pte);Sto=r(_Wr,"nystromformer"),_Wr.forEach(t),Rto=r(a$," \u2014 "),cP=n(a$,"A",{href:!0});var bWr=s(cP);Pto=r(bWr,"AlbertTokenizer"),bWr.forEach(t),Bto=r(a$," or "),fP=n(a$,"A",{href:!0});var vWr=s(fP);Ito=r(vWr,"AlbertTokenizerFast"),vWr.forEach(t),qto=r(a$," (Nystromformer model)"),a$.forEach(t),Nto=i(S),ps=n(S,"LI",{});var n$=s(ps);Bte=n(n$,"STRONG",{});var FWr=s(Bte);jto=r(FWr,"openai-gpt"),FWr.forEach(t),Dto=r(n$," \u2014 "),mP=n(n$,"A",{href:!0});var TWr=s(mP);Gto=r(TWr,"OpenAIGPTTokenizer"),TWr.forEach(t),Oto=r(n$," or "),gP=n(n$,"A",{href:!0});var MWr=s(gP);Vto=r(MWr,"OpenAIGPTTokenizerFast"),MWr.forEach(t),Xto=r(n$," (OpenAI GPT model)"),n$.forEach(t),zto=i(S),Ig=n(S,"LI",{});var Mwe=s(Ig);Ite=n(Mwe,"STRONG",{});var EWr=s(Ite);Wto=r(EWr,"opt"),EWr.forEach(t),Qto=r(Mwe," \u2014 "),hP=n(Mwe,"A",{href:!0});var CWr=s(hP);Hto=r(CWr,"GPT2Tokenizer"),CWr.forEach(t),Uto=r(Mwe," (OPT model)"),Mwe.forEach(t),Jto=i(S),us=n(S,"LI",{});var s$=s(us);qte=n(s$,"STRONG",{});var wWr=s(qte);Yto=r(wWr,"pegasus"),wWr.forEach(t),Kto=r(s$," \u2014 "),pP=n(s$,"A",{href:!0});var AWr=s(pP);Zto=r(AWr,"PegasusTokenizer"),AWr.forEach(t),eao=r(s$," or "),uP=n(s$,"A",{href:!0});var yWr=s(uP);oao=r(yWr,"PegasusTokenizerFast"),yWr.forEach(t),rao=r(s$," (Pegasus model)"),s$.forEach(t),tao=i(S),qg=n(S,"LI",{});var Ewe=s(qg);Nte=n(Ewe,"STRONG",{});var LWr=s(Nte);aao=r(LWr,"perceiver"),LWr.forEach(t),nao=r(Ewe," \u2014 "),_P=n(Ewe,"A",{href:!0});var xWr=s(_P);sao=r(xWr,"PerceiverTokenizer"),xWr.forEach(t),lao=r(Ewe," (Perceiver model)"),Ewe.forEach(t),iao=i(S),Ng=n(S,"LI",{});var Cwe=s(Ng);jte=n(Cwe,"STRONG",{});var $Wr=s(jte);dao=r($Wr,"phobert"),$Wr.forEach(t),cao=r(Cwe," \u2014 "),bP=n(Cwe,"A",{href:!0});var kWr=s(bP);fao=r(kWr,"PhobertTokenizer"),kWr.forEach(t),mao=r(Cwe," (PhoBERT model)"),Cwe.forEach(t),gao=i(S),jg=n(S,"LI",{});var wwe=s(jg);Dte=n(wwe,"STRONG",{});var SWr=s(Dte);hao=r(SWr,"plbart"),SWr.forEach(t),pao=r(wwe," \u2014 "),vP=n(wwe,"A",{href:!0});var RWr=s(vP);uao=r(RWr,"PLBartTokenizer"),RWr.forEach(t),_ao=r(wwe," (PLBart model)"),wwe.forEach(t),bao=i(S),Dg=n(S,"LI",{});var Awe=s(Dg);Gte=n(Awe,"STRONG",{});var PWr=s(Gte);vao=r(PWr,"prophetnet"),PWr.forEach(t),Fao=r(Awe," \u2014 "),FP=n(Awe,"A",{href:!0});var BWr=s(FP);Tao=r(BWr,"ProphetNetTokenizer"),BWr.forEach(t),Mao=r(Awe," (ProphetNet model)"),Awe.forEach(t),Eao=i(S),_s=n(S,"LI",{});var l$=s(_s);Ote=n(l$,"STRONG",{});var IWr=s(Ote);Cao=r(IWr,"qdqbert"),IWr.forEach(t),wao=r(l$," \u2014 "),TP=n(l$,"A",{href:!0});var qWr=s(TP);Aao=r(qWr,"BertTokenizer"),qWr.forEach(t),yao=r(l$," or "),MP=n(l$,"A",{href:!0});var NWr=s(MP);Lao=r(NWr,"BertTokenizerFast"),NWr.forEach(t),xao=r(l$," (QDQBert model)"),l$.forEach(t),$ao=i(S),Gg=n(S,"LI",{});var ywe=s(Gg);Vte=n(ywe,"STRONG",{});var jWr=s(Vte);kao=r(jWr,"rag"),jWr.forEach(t),Sao=r(ywe," \u2014 "),EP=n(ywe,"A",{href:!0});var DWr=s(EP);Rao=r(DWr,"RagTokenizer"),DWr.forEach(t),Pao=r(ywe," (RAG model)"),ywe.forEach(t),Bao=i(S),bs=n(S,"LI",{});var i$=s(bs);Xte=n(i$,"STRONG",{});var GWr=s(Xte);Iao=r(GWr,"realm"),GWr.forEach(t),qao=r(i$," \u2014 "),CP=n(i$,"A",{href:!0});var OWr=s(CP);Nao=r(OWr,"RealmTokenizer"),OWr.forEach(t),jao=r(i$," or "),wP=n(i$,"A",{href:!0});var VWr=s(wP);Dao=r(VWr,"RealmTokenizerFast"),VWr.forEach(t),Gao=r(i$," (Realm model)"),i$.forEach(t),Oao=i(S),vs=n(S,"LI",{});var d$=s(vs);zte=n(d$,"STRONG",{});var XWr=s(zte);Vao=r(XWr,"reformer"),XWr.forEach(t),Xao=r(d$," \u2014 "),AP=n(d$,"A",{href:!0});var zWr=s(AP);zao=r(zWr,"ReformerTokenizer"),zWr.forEach(t),Wao=r(d$," or "),yP=n(d$,"A",{href:!0});var WWr=s(yP);Qao=r(WWr,"ReformerTokenizerFast"),WWr.forEach(t),Hao=r(d$," (Reformer model)"),d$.forEach(t),Uao=i(S),Fs=n(S,"LI",{});var c$=s(Fs);Wte=n(c$,"STRONG",{});var QWr=s(Wte);Jao=r(QWr,"rembert"),QWr.forEach(t),Yao=r(c$," \u2014 "),LP=n(c$,"A",{href:!0});var HWr=s(LP);Kao=r(HWr,"RemBertTokenizer"),HWr.forEach(t),Zao=r(c$," or "),xP=n(c$,"A",{href:!0});var UWr=s(xP);eno=r(UWr,"RemBertTokenizerFast"),UWr.forEach(t),ono=r(c$," (RemBERT model)"),c$.forEach(t),rno=i(S),Ts=n(S,"LI",{});var f$=s(Ts);Qte=n(f$,"STRONG",{});var JWr=s(Qte);tno=r(JWr,"retribert"),JWr.forEach(t),ano=r(f$," \u2014 "),$P=n(f$,"A",{href:!0});var YWr=s($P);nno=r(YWr,"RetriBertTokenizer"),YWr.forEach(t),sno=r(f$," or "),kP=n(f$,"A",{href:!0});var KWr=s(kP);lno=r(KWr,"RetriBertTokenizerFast"),KWr.forEach(t),ino=r(f$," (RetriBERT model)"),f$.forEach(t),dno=i(S),Ms=n(S,"LI",{});var m$=s(Ms);Hte=n(m$,"STRONG",{});var ZWr=s(Hte);cno=r(ZWr,"roberta"),ZWr.forEach(t),fno=r(m$," \u2014 "),SP=n(m$,"A",{href:!0});var eQr=s(SP);mno=r(eQr,"RobertaTokenizer"),eQr.forEach(t),gno=r(m$," or "),RP=n(m$,"A",{href:!0});var oQr=s(RP);hno=r(oQr,"RobertaTokenizerFast"),oQr.forEach(t),pno=r(m$," (RoBERTa model)"),m$.forEach(t),uno=i(S),Es=n(S,"LI",{});var g$=s(Es);Ute=n(g$,"STRONG",{});var rQr=s(Ute);_no=r(rQr,"roformer"),rQr.forEach(t),bno=r(g$," \u2014 "),PP=n(g$,"A",{href:!0});var tQr=s(PP);vno=r(tQr,"RoFormerTokenizer"),tQr.forEach(t),Fno=r(g$," or "),BP=n(g$,"A",{href:!0});var aQr=s(BP);Tno=r(aQr,"RoFormerTokenizerFast"),aQr.forEach(t),Mno=r(g$," (RoFormer model)"),g$.forEach(t),Eno=i(S),Og=n(S,"LI",{});var Lwe=s(Og);Jte=n(Lwe,"STRONG",{});var nQr=s(Jte);Cno=r(nQr,"speech_to_text"),nQr.forEach(t),wno=r(Lwe," \u2014 "),IP=n(Lwe,"A",{href:!0});var sQr=s(IP);Ano=r(sQr,"Speech2TextTokenizer"),sQr.forEach(t),yno=r(Lwe," (Speech2Text model)"),Lwe.forEach(t),Lno=i(S),Vg=n(S,"LI",{});var xwe=s(Vg);Yte=n(xwe,"STRONG",{});var lQr=s(Yte);xno=r(lQr,"speech_to_text_2"),lQr.forEach(t),$no=r(xwe," \u2014 "),qP=n(xwe,"A",{href:!0});var iQr=s(qP);kno=r(iQr,"Speech2Text2Tokenizer"),iQr.forEach(t),Sno=r(xwe," (Speech2Text2 model)"),xwe.forEach(t),Rno=i(S),Cs=n(S,"LI",{});var h$=s(Cs);Kte=n(h$,"STRONG",{});var dQr=s(Kte);Pno=r(dQr,"splinter"),dQr.forEach(t),Bno=r(h$," \u2014 "),NP=n(h$,"A",{href:!0});var cQr=s(NP);Ino=r(cQr,"SplinterTokenizer"),cQr.forEach(t),qno=r(h$," or "),jP=n(h$,"A",{href:!0});var fQr=s(jP);Nno=r(fQr,"SplinterTokenizerFast"),fQr.forEach(t),jno=r(h$," (Splinter model)"),h$.forEach(t),Dno=i(S),ws=n(S,"LI",{});var p$=s(ws);Zte=n(p$,"STRONG",{});var mQr=s(Zte);Gno=r(mQr,"squeezebert"),mQr.forEach(t),Ono=r(p$," \u2014 "),DP=n(p$,"A",{href:!0});var gQr=s(DP);Vno=r(gQr,"SqueezeBertTokenizer"),gQr.forEach(t),Xno=r(p$," or "),GP=n(p$,"A",{href:!0});var hQr=s(GP);zno=r(hQr,"SqueezeBertTokenizerFast"),hQr.forEach(t),Wno=r(p$," (SqueezeBERT model)"),p$.forEach(t),Qno=i(S),As=n(S,"LI",{});var u$=s(As);eae=n(u$,"STRONG",{});var pQr=s(eae);Hno=r(pQr,"t5"),pQr.forEach(t),Uno=r(u$," \u2014 "),OP=n(u$,"A",{href:!0});var uQr=s(OP);Jno=r(uQr,"T5Tokenizer"),uQr.forEach(t),Yno=r(u$," or "),VP=n(u$,"A",{href:!0});var _Qr=s(VP);Kno=r(_Qr,"T5TokenizerFast"),_Qr.forEach(t),Zno=r(u$," (T5 model)"),u$.forEach(t),eso=i(S),Xg=n(S,"LI",{});var $we=s(Xg);oae=n($we,"STRONG",{});var bQr=s(oae);oso=r(bQr,"tapas"),bQr.forEach(t),rso=r($we," \u2014 "),XP=n($we,"A",{href:!0});var vQr=s(XP);tso=r(vQr,"TapasTokenizer"),vQr.forEach(t),aso=r($we," (TAPAS model)"),$we.forEach(t),nso=i(S),zg=n(S,"LI",{});var kwe=s(zg);rae=n(kwe,"STRONG",{});var FQr=s(rae);sso=r(FQr,"tapex"),FQr.forEach(t),lso=r(kwe," \u2014 "),zP=n(kwe,"A",{href:!0});var TQr=s(zP);iso=r(TQr,"TapexTokenizer"),TQr.forEach(t),dso=r(kwe," (TAPEX model)"),kwe.forEach(t),cso=i(S),Wg=n(S,"LI",{});var Swe=s(Wg);tae=n(Swe,"STRONG",{});var MQr=s(tae);fso=r(MQr,"transfo-xl"),MQr.forEach(t),mso=r(Swe," \u2014 "),WP=n(Swe,"A",{href:!0});var EQr=s(WP);gso=r(EQr,"TransfoXLTokenizer"),EQr.forEach(t),hso=r(Swe," (Transformer-XL model)"),Swe.forEach(t),pso=i(S),ys=n(S,"LI",{});var _$=s(ys);aae=n(_$,"STRONG",{});var CQr=s(aae);uso=r(CQr,"visual_bert"),CQr.forEach(t),_so=r(_$," \u2014 "),QP=n(_$,"A",{href:!0});var wQr=s(QP);bso=r(wQr,"BertTokenizer"),wQr.forEach(t),vso=r(_$," or "),HP=n(_$,"A",{href:!0});var AQr=s(HP);Fso=r(AQr,"BertTokenizerFast"),AQr.forEach(t),Tso=r(_$," (VisualBert model)"),_$.forEach(t),Mso=i(S),Qg=n(S,"LI",{});var Rwe=s(Qg);nae=n(Rwe,"STRONG",{});var yQr=s(nae);Eso=r(yQr,"wav2vec2"),yQr.forEach(t),Cso=r(Rwe," \u2014 "),UP=n(Rwe,"A",{href:!0});var LQr=s(UP);wso=r(LQr,"Wav2Vec2CTCTokenizer"),LQr.forEach(t),Aso=r(Rwe," (Wav2Vec2 model)"),Rwe.forEach(t),yso=i(S),Hg=n(S,"LI",{});var Pwe=s(Hg);sae=n(Pwe,"STRONG",{});var xQr=s(sae);Lso=r(xQr,"wav2vec2-conformer"),xQr.forEach(t),xso=r(Pwe," \u2014 "),JP=n(Pwe,"A",{href:!0});var $Qr=s(JP);$so=r($Qr,"Wav2Vec2CTCTokenizer"),$Qr.forEach(t),kso=r(Pwe," (Wav2Vec2-Conformer model)"),Pwe.forEach(t),Sso=i(S),Ug=n(S,"LI",{});var Bwe=s(Ug);lae=n(Bwe,"STRONG",{});var kQr=s(lae);Rso=r(kQr,"wav2vec2_phoneme"),kQr.forEach(t),Pso=r(Bwe," \u2014 "),YP=n(Bwe,"A",{href:!0});var SQr=s(YP);Bso=r(SQr,"Wav2Vec2PhonemeCTCTokenizer"),SQr.forEach(t),Iso=r(Bwe," (Wav2Vec2Phoneme model)"),Bwe.forEach(t),qso=i(S),Ls=n(S,"LI",{});var b$=s(Ls);iae=n(b$,"STRONG",{});var RQr=s(iae);Nso=r(RQr,"xglm"),RQr.forEach(t),jso=r(b$," \u2014 "),KP=n(b$,"A",{href:!0});var PQr=s(KP);Dso=r(PQr,"XGLMTokenizer"),PQr.forEach(t),Gso=r(b$," or "),ZP=n(b$,"A",{href:!0});var BQr=s(ZP);Oso=r(BQr,"XGLMTokenizerFast"),BQr.forEach(t),Vso=r(b$," (XGLM model)"),b$.forEach(t),Xso=i(S),Jg=n(S,"LI",{});var Iwe=s(Jg);dae=n(Iwe,"STRONG",{});var IQr=s(dae);zso=r(IQr,"xlm"),IQr.forEach(t),Wso=r(Iwe," \u2014 "),eB=n(Iwe,"A",{href:!0});var qQr=s(eB);Qso=r(qQr,"XLMTokenizer"),qQr.forEach(t),Hso=r(Iwe," (XLM model)"),Iwe.forEach(t),Uso=i(S),Yg=n(S,"LI",{});var qwe=s(Yg);cae=n(qwe,"STRONG",{});var NQr=s(cae);Jso=r(NQr,"xlm-prophetnet"),NQr.forEach(t),Yso=r(qwe," \u2014 "),oB=n(qwe,"A",{href:!0});var jQr=s(oB);Kso=r(jQr,"XLMProphetNetTokenizer"),jQr.forEach(t),Zso=r(qwe," (XLMProphetNet model)"),qwe.forEach(t),elo=i(S),xs=n(S,"LI",{});var v$=s(xs);fae=n(v$,"STRONG",{});var DQr=s(fae);olo=r(DQr,"xlm-roberta"),DQr.forEach(t),rlo=r(v$," \u2014 "),rB=n(v$,"A",{href:!0});var GQr=s(rB);tlo=r(GQr,"XLMRobertaTokenizer"),GQr.forEach(t),alo=r(v$," or "),tB=n(v$,"A",{href:!0});var OQr=s(tB);nlo=r(OQr,"XLMRobertaTokenizerFast"),OQr.forEach(t),slo=r(v$," (XLM-RoBERTa model)"),v$.forEach(t),llo=i(S),$s=n(S,"LI",{});var F$=s($s);mae=n(F$,"STRONG",{});var VQr=s(mae);ilo=r(VQr,"xlm-roberta-xl"),VQr.forEach(t),dlo=r(F$," \u2014 "),aB=n(F$,"A",{href:!0});var XQr=s(aB);clo=r(XQr,"RobertaTokenizer"),XQr.forEach(t),flo=r(F$," or "),nB=n(F$,"A",{href:!0});var zQr=s(nB);mlo=r(zQr,"RobertaTokenizerFast"),zQr.forEach(t),glo=r(F$," (XLM-RoBERTa-XL model)"),F$.forEach(t),hlo=i(S),ks=n(S,"LI",{});var T$=s(ks);gae=n(T$,"STRONG",{});var WQr=s(gae);plo=r(WQr,"xlnet"),WQr.forEach(t),ulo=r(T$," \u2014 "),sB=n(T$,"A",{href:!0});var QQr=s(sB);_lo=r(QQr,"XLNetTokenizer"),QQr.forEach(t),blo=r(T$," or "),lB=n(T$,"A",{href:!0});var HQr=s(lB);vlo=r(HQr,"XLNetTokenizerFast"),HQr.forEach(t),Flo=r(T$," (XLNet model)"),T$.forEach(t),Tlo=i(S),Ss=n(S,"LI",{});var M$=s(Ss);hae=n(M$,"STRONG",{});var UQr=s(hae);Mlo=r(UQr,"yoso"),UQr.forEach(t),Elo=r(M$," \u2014 "),iB=n(M$,"A",{href:!0});var JQr=s(iB);Clo=r(JQr,"AlbertTokenizer"),JQr.forEach(t),wlo=r(M$," or "),dB=n(M$,"A",{href:!0});var YQr=s(dB);Alo=r(YQr,"AlbertTokenizerFast"),YQr.forEach(t),ylo=r(M$," (YOSO model)"),M$.forEach(t),S.forEach(t),Llo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),xlo=i(Is),Zg=n(Is,"DIV",{class:!0});var GNe=s(Zg);T(My.$$.fragment,GNe),$lo=i(GNe),pae=n(GNe,"P",{});var KQr=s(pae);klo=r(KQr,"Register a new tokenizer in this mapping."),KQr.forEach(t),GNe.forEach(t),Is.forEach(t),OIe=i(f),Ti=n(f,"H2",{class:!0});var ONe=s(Ti);eh=n(ONe,"A",{id:!0,class:!0,href:!0});var ZQr=s(eh);uae=n(ZQr,"SPAN",{});var eHr=s(uae);T(Ey.$$.fragment,eHr),eHr.forEach(t),ZQr.forEach(t),Slo=i(ONe),_ae=n(ONe,"SPAN",{});var oHr=s(_ae);Rlo=r(oHr,"AutoFeatureExtractor"),oHr.forEach(t),ONe.forEach(t),VIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(Cy.$$.fragment,Ns),Plo=i(Ns),wy=n(Ns,"P",{});var VNe=s(wy);Blo=r(VNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cB=n(VNe,"A",{href:!0});var rHr=s(cB);Ilo=r(rHr,"AutoFeatureExtractor.from_pretrained()"),rHr.forEach(t),qlo=r(VNe," class method."),VNe.forEach(t),Nlo=i(Ns),Ay=n(Ns,"P",{});var XNe=s(Ay);jlo=r(XNe,"This class cannot be instantiated directly using "),bae=n(XNe,"CODE",{});var tHr=s(bae);Dlo=r(tHr,"__init__()"),tHr.forEach(t),Glo=r(XNe," (throws an error)."),XNe.forEach(t),Olo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(yy.$$.fragment,Zt),Vlo=i(Zt),vae=n(Zt,"P",{});var aHr=s(vae);Xlo=r(aHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aHr.forEach(t),zlo=i(Zt),ya=n(Zt,"P",{});var mA=s(ya);Wlo=r(mA,"The feature extractor class to instantiate is selected based on the "),Fae=n(mA,"CODE",{});var nHr=s(Fae);Qlo=r(nHr,"model_type"),nHr.forEach(t),Hlo=r(mA,` property of the config object
(either passed as an argument or loaded from `),Tae=n(mA,"CODE",{});var sHr=s(Tae);Ulo=r(sHr,"pretrained_model_name_or_path"),sHr.forEach(t),Jlo=r(mA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mae=n(mA,"CODE",{});var lHr=s(Mae);Ylo=r(lHr,"pretrained_model_name_or_path"),lHr.forEach(t),Klo=r(mA,":"),mA.forEach(t),Zlo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var Nwe=s(oh);Eae=n(Nwe,"STRONG",{});var iHr=s(Eae);eio=r(iHr,"beit"),iHr.forEach(t),oio=r(Nwe," \u2014 "),fB=n(Nwe,"A",{href:!0});var dHr=s(fB);rio=r(dHr,"BeitFeatureExtractor"),dHr.forEach(t),tio=r(Nwe," (BEiT model)"),Nwe.forEach(t),aio=i(te),rh=n(te,"LI",{});var jwe=s(rh);Cae=n(jwe,"STRONG",{});var cHr=s(Cae);nio=r(cHr,"clip"),cHr.forEach(t),sio=r(jwe," \u2014 "),mB=n(jwe,"A",{href:!0});var fHr=s(mB);lio=r(fHr,"CLIPFeatureExtractor"),fHr.forEach(t),iio=r(jwe," (CLIP model)"),jwe.forEach(t),dio=i(te),th=n(te,"LI",{});var Dwe=s(th);wae=n(Dwe,"STRONG",{});var mHr=s(wae);cio=r(mHr,"convnext"),mHr.forEach(t),fio=r(Dwe," \u2014 "),gB=n(Dwe,"A",{href:!0});var gHr=s(gB);mio=r(gHr,"ConvNextFeatureExtractor"),gHr.forEach(t),gio=r(Dwe," (ConvNext model)"),Dwe.forEach(t),hio=i(te),ah=n(te,"LI",{});var Gwe=s(ah);Aae=n(Gwe,"STRONG",{});var hHr=s(Aae);pio=r(hHr,"data2vec-audio"),hHr.forEach(t),uio=r(Gwe," \u2014 "),hB=n(Gwe,"A",{href:!0});var pHr=s(hB);_io=r(pHr,"Wav2Vec2FeatureExtractor"),pHr.forEach(t),bio=r(Gwe," (Data2VecAudio model)"),Gwe.forEach(t),vio=i(te),nh=n(te,"LI",{});var Owe=s(nh);yae=n(Owe,"STRONG",{});var uHr=s(yae);Fio=r(uHr,"data2vec-vision"),uHr.forEach(t),Tio=r(Owe," \u2014 "),pB=n(Owe,"A",{href:!0});var _Hr=s(pB);Mio=r(_Hr,"BeitFeatureExtractor"),_Hr.forEach(t),Eio=r(Owe," (Data2VecVision model)"),Owe.forEach(t),Cio=i(te),sh=n(te,"LI",{});var Vwe=s(sh);Lae=n(Vwe,"STRONG",{});var bHr=s(Lae);wio=r(bHr,"deit"),bHr.forEach(t),Aio=r(Vwe," \u2014 "),uB=n(Vwe,"A",{href:!0});var vHr=s(uB);yio=r(vHr,"DeiTFeatureExtractor"),vHr.forEach(t),Lio=r(Vwe," (DeiT model)"),Vwe.forEach(t),xio=i(te),lh=n(te,"LI",{});var Xwe=s(lh);xae=n(Xwe,"STRONG",{});var FHr=s(xae);$io=r(FHr,"detr"),FHr.forEach(t),kio=r(Xwe," \u2014 "),_B=n(Xwe,"A",{href:!0});var THr=s(_B);Sio=r(THr,"DetrFeatureExtractor"),THr.forEach(t),Rio=r(Xwe," (DETR model)"),Xwe.forEach(t),Pio=i(te),ih=n(te,"LI",{});var zwe=s(ih);$ae=n(zwe,"STRONG",{});var MHr=s($ae);Bio=r(MHr,"dpt"),MHr.forEach(t),Iio=r(zwe," \u2014 "),bB=n(zwe,"A",{href:!0});var EHr=s(bB);qio=r(EHr,"DPTFeatureExtractor"),EHr.forEach(t),Nio=r(zwe," (DPT model)"),zwe.forEach(t),jio=i(te),dh=n(te,"LI",{});var Wwe=s(dh);kae=n(Wwe,"STRONG",{});var CHr=s(kae);Dio=r(CHr,"flava"),CHr.forEach(t),Gio=r(Wwe," \u2014 "),vB=n(Wwe,"A",{href:!0});var wHr=s(vB);Oio=r(wHr,"FlavaFeatureExtractor"),wHr.forEach(t),Vio=r(Wwe," (Flava model)"),Wwe.forEach(t),Xio=i(te),ch=n(te,"LI",{});var Qwe=s(ch);Sae=n(Qwe,"STRONG",{});var AHr=s(Sae);zio=r(AHr,"glpn"),AHr.forEach(t),Wio=r(Qwe," \u2014 "),FB=n(Qwe,"A",{href:!0});var yHr=s(FB);Qio=r(yHr,"GLPNFeatureExtractor"),yHr.forEach(t),Hio=r(Qwe," (GLPN model)"),Qwe.forEach(t),Uio=i(te),fh=n(te,"LI",{});var Hwe=s(fh);Rae=n(Hwe,"STRONG",{});var LHr=s(Rae);Jio=r(LHr,"hubert"),LHr.forEach(t),Yio=r(Hwe," \u2014 "),TB=n(Hwe,"A",{href:!0});var xHr=s(TB);Kio=r(xHr,"Wav2Vec2FeatureExtractor"),xHr.forEach(t),Zio=r(Hwe," (Hubert model)"),Hwe.forEach(t),edo=i(te),mh=n(te,"LI",{});var Uwe=s(mh);Pae=n(Uwe,"STRONG",{});var $Hr=s(Pae);odo=r($Hr,"layoutlmv2"),$Hr.forEach(t),rdo=r(Uwe," \u2014 "),MB=n(Uwe,"A",{href:!0});var kHr=s(MB);tdo=r(kHr,"LayoutLMv2FeatureExtractor"),kHr.forEach(t),ado=r(Uwe," (LayoutLMv2 model)"),Uwe.forEach(t),ndo=i(te),gh=n(te,"LI",{});var Jwe=s(gh);Bae=n(Jwe,"STRONG",{});var SHr=s(Bae);sdo=r(SHr,"maskformer"),SHr.forEach(t),ldo=r(Jwe," \u2014 "),EB=n(Jwe,"A",{href:!0});var RHr=s(EB);ido=r(RHr,"MaskFormerFeatureExtractor"),RHr.forEach(t),ddo=r(Jwe," (MaskFormer model)"),Jwe.forEach(t),cdo=i(te),hh=n(te,"LI",{});var Ywe=s(hh);Iae=n(Ywe,"STRONG",{});var PHr=s(Iae);fdo=r(PHr,"perceiver"),PHr.forEach(t),mdo=r(Ywe," \u2014 "),CB=n(Ywe,"A",{href:!0});var BHr=s(CB);gdo=r(BHr,"PerceiverFeatureExtractor"),BHr.forEach(t),hdo=r(Ywe," (Perceiver model)"),Ywe.forEach(t),pdo=i(te),ph=n(te,"LI",{});var Kwe=s(ph);qae=n(Kwe,"STRONG",{});var IHr=s(qae);udo=r(IHr,"poolformer"),IHr.forEach(t),_do=r(Kwe," \u2014 "),wB=n(Kwe,"A",{href:!0});var qHr=s(wB);bdo=r(qHr,"PoolFormerFeatureExtractor"),qHr.forEach(t),vdo=r(Kwe," (PoolFormer model)"),Kwe.forEach(t),Fdo=i(te),uh=n(te,"LI",{});var Zwe=s(uh);Nae=n(Zwe,"STRONG",{});var NHr=s(Nae);Tdo=r(NHr,"regnet"),NHr.forEach(t),Mdo=r(Zwe," \u2014 "),AB=n(Zwe,"A",{href:!0});var jHr=s(AB);Edo=r(jHr,"ConvNextFeatureExtractor"),jHr.forEach(t),Cdo=r(Zwe," (RegNet model)"),Zwe.forEach(t),wdo=i(te),_h=n(te,"LI",{});var eAe=s(_h);jae=n(eAe,"STRONG",{});var DHr=s(jae);Ado=r(DHr,"resnet"),DHr.forEach(t),ydo=r(eAe," \u2014 "),yB=n(eAe,"A",{href:!0});var GHr=s(yB);Ldo=r(GHr,"ConvNextFeatureExtractor"),GHr.forEach(t),xdo=r(eAe," (ResNet model)"),eAe.forEach(t),$do=i(te),bh=n(te,"LI",{});var oAe=s(bh);Dae=n(oAe,"STRONG",{});var OHr=s(Dae);kdo=r(OHr,"segformer"),OHr.forEach(t),Sdo=r(oAe," \u2014 "),LB=n(oAe,"A",{href:!0});var VHr=s(LB);Rdo=r(VHr,"SegformerFeatureExtractor"),VHr.forEach(t),Pdo=r(oAe," (SegFormer model)"),oAe.forEach(t),Bdo=i(te),vh=n(te,"LI",{});var rAe=s(vh);Gae=n(rAe,"STRONG",{});var XHr=s(Gae);Ido=r(XHr,"speech_to_text"),XHr.forEach(t),qdo=r(rAe," \u2014 "),xB=n(rAe,"A",{href:!0});var zHr=s(xB);Ndo=r(zHr,"Speech2TextFeatureExtractor"),zHr.forEach(t),jdo=r(rAe," (Speech2Text model)"),rAe.forEach(t),Ddo=i(te),Fh=n(te,"LI",{});var tAe=s(Fh);Oae=n(tAe,"STRONG",{});var WHr=s(Oae);Gdo=r(WHr,"swin"),WHr.forEach(t),Odo=r(tAe," \u2014 "),$B=n(tAe,"A",{href:!0});var QHr=s($B);Vdo=r(QHr,"ViTFeatureExtractor"),QHr.forEach(t),Xdo=r(tAe," (Swin model)"),tAe.forEach(t),zdo=i(te),Th=n(te,"LI",{});var aAe=s(Th);Vae=n(aAe,"STRONG",{});var HHr=s(Vae);Wdo=r(HHr,"van"),HHr.forEach(t),Qdo=r(aAe," \u2014 "),kB=n(aAe,"A",{href:!0});var UHr=s(kB);Hdo=r(UHr,"ConvNextFeatureExtractor"),UHr.forEach(t),Udo=r(aAe," (VAN model)"),aAe.forEach(t),Jdo=i(te),Mh=n(te,"LI",{});var nAe=s(Mh);Xae=n(nAe,"STRONG",{});var JHr=s(Xae);Ydo=r(JHr,"vit"),JHr.forEach(t),Kdo=r(nAe," \u2014 "),SB=n(nAe,"A",{href:!0});var YHr=s(SB);Zdo=r(YHr,"ViTFeatureExtractor"),YHr.forEach(t),eco=r(nAe," (ViT model)"),nAe.forEach(t),oco=i(te),Eh=n(te,"LI",{});var sAe=s(Eh);zae=n(sAe,"STRONG",{});var KHr=s(zae);rco=r(KHr,"vit_mae"),KHr.forEach(t),tco=r(sAe," \u2014 "),RB=n(sAe,"A",{href:!0});var ZHr=s(RB);aco=r(ZHr,"ViTFeatureExtractor"),ZHr.forEach(t),nco=r(sAe," (ViTMAE model)"),sAe.forEach(t),sco=i(te),Ch=n(te,"LI",{});var lAe=s(Ch);Wae=n(lAe,"STRONG",{});var eUr=s(Wae);lco=r(eUr,"wav2vec2"),eUr.forEach(t),ico=r(lAe," \u2014 "),PB=n(lAe,"A",{href:!0});var oUr=s(PB);dco=r(oUr,"Wav2Vec2FeatureExtractor"),oUr.forEach(t),cco=r(lAe," (Wav2Vec2 model)"),lAe.forEach(t),fco=i(te),wh=n(te,"LI",{});var iAe=s(wh);Qae=n(iAe,"STRONG",{});var rUr=s(Qae);mco=r(rUr,"wav2vec2-conformer"),rUr.forEach(t),gco=r(iAe," \u2014 "),BB=n(iAe,"A",{href:!0});var tUr=s(BB);hco=r(tUr,"Wav2Vec2FeatureExtractor"),tUr.forEach(t),pco=r(iAe," (Wav2Vec2-Conformer model)"),iAe.forEach(t),uco=i(te),Ah=n(te,"LI",{});var dAe=s(Ah);Hae=n(dAe,"STRONG",{});var aUr=s(Hae);_co=r(aUr,"yolos"),aUr.forEach(t),bco=r(dAe," \u2014 "),IB=n(dAe,"A",{href:!0});var nUr=s(IB);vco=r(nUr,"YolosFeatureExtractor"),nUr.forEach(t),Fco=r(dAe," (YOLOS model)"),dAe.forEach(t),te.forEach(t),Tco=i(Zt),T(yh.$$.fragment,Zt),Mco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),Eco=i(Ns),xh=n(Ns,"DIV",{class:!0});var zNe=s(xh);T(Ly.$$.fragment,zNe),Cco=i(zNe),Uae=n(zNe,"P",{});var sUr=s(Uae);wco=r(sUr,"Register a new feature extractor for this class."),sUr.forEach(t),zNe.forEach(t),Ns.forEach(t),XIe=i(f),Mi=n(f,"H2",{class:!0});var WNe=s(Mi);$h=n(WNe,"A",{id:!0,class:!0,href:!0});var lUr=s($h);Jae=n(lUr,"SPAN",{});var iUr=s(Jae);T(xy.$$.fragment,iUr),iUr.forEach(t),lUr.forEach(t),Aco=i(WNe),Yae=n(WNe,"SPAN",{});var dUr=s(Yae);yco=r(dUr,"AutoProcessor"),dUr.forEach(t),WNe.forEach(t),zIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T($y.$$.fragment,js),Lco=i(js),ky=n(js,"P",{});var QNe=s(ky);xco=r(QNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),qB=n(QNe,"A",{href:!0});var cUr=s(qB);$co=r(cUr,"AutoProcessor.from_pretrained()"),cUr.forEach(t),kco=r(QNe," class method."),QNe.forEach(t),Sco=i(js),Sy=n(js,"P",{});var HNe=s(Sy);Rco=r(HNe,"This class cannot be instantiated directly using "),Kae=n(HNe,"CODE",{});var fUr=s(Kae);Pco=r(fUr,"__init__()"),fUr.forEach(t),Bco=r(HNe," (throws an error)."),HNe.forEach(t),Ico=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(Ry.$$.fragment,ea),qco=i(ea),Zae=n(ea,"P",{});var mUr=s(Zae);Nco=r(mUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mUr.forEach(t),jco=i(ea),Ei=n(ea,"P",{});var $K=s(Ei);Dco=r($K,"The processor class to instantiate is selected based on the "),ene=n($K,"CODE",{});var gUr=s(ene);Gco=r(gUr,"model_type"),gUr.forEach(t),Oco=r($K,` property of the config object (either
passed as an argument or loaded from `),one=n($K,"CODE",{});var hUr=s(one);Vco=r(hUr,"pretrained_model_name_or_path"),hUr.forEach(t),Xco=r($K," if possible):"),$K.forEach(t),zco=i(ea),pe=n(ea,"UL",{});var be=s(pe);kh=n(be,"LI",{});var cAe=s(kh);rne=n(cAe,"STRONG",{});var pUr=s(rne);Wco=r(pUr,"clip"),pUr.forEach(t),Qco=r(cAe," \u2014 "),NB=n(cAe,"A",{href:!0});var uUr=s(NB);Hco=r(uUr,"CLIPProcessor"),uUr.forEach(t),Uco=r(cAe," (CLIP model)"),cAe.forEach(t),Jco=i(be),Sh=n(be,"LI",{});var fAe=s(Sh);tne=n(fAe,"STRONG",{});var _Ur=s(tne);Yco=r(_Ur,"flava"),_Ur.forEach(t),Kco=r(fAe," \u2014 "),ane=n(fAe,"CODE",{});var bUr=s(ane);Zco=r(bUr,"FLAVAProcessor"),bUr.forEach(t),efo=r(fAe," (Flava model)"),fAe.forEach(t),ofo=i(be),Rh=n(be,"LI",{});var mAe=s(Rh);nne=n(mAe,"STRONG",{});var vUr=s(nne);rfo=r(vUr,"layoutlmv2"),vUr.forEach(t),tfo=r(mAe," \u2014 "),jB=n(mAe,"A",{href:!0});var FUr=s(jB);afo=r(FUr,"LayoutLMv2Processor"),FUr.forEach(t),nfo=r(mAe," (LayoutLMv2 model)"),mAe.forEach(t),sfo=i(be),Ph=n(be,"LI",{});var gAe=s(Ph);sne=n(gAe,"STRONG",{});var TUr=s(sne);lfo=r(TUr,"layoutxlm"),TUr.forEach(t),ifo=r(gAe," \u2014 "),DB=n(gAe,"A",{href:!0});var MUr=s(DB);dfo=r(MUr,"LayoutXLMProcessor"),MUr.forEach(t),cfo=r(gAe," (LayoutXLM model)"),gAe.forEach(t),ffo=i(be),Bh=n(be,"LI",{});var hAe=s(Bh);lne=n(hAe,"STRONG",{});var EUr=s(lne);mfo=r(EUr,"sew"),EUr.forEach(t),gfo=r(hAe," \u2014 "),GB=n(hAe,"A",{href:!0});var CUr=s(GB);hfo=r(CUr,"Wav2Vec2Processor"),CUr.forEach(t),pfo=r(hAe," (SEW model)"),hAe.forEach(t),ufo=i(be),Ih=n(be,"LI",{});var pAe=s(Ih);ine=n(pAe,"STRONG",{});var wUr=s(ine);_fo=r(wUr,"sew-d"),wUr.forEach(t),bfo=r(pAe," \u2014 "),OB=n(pAe,"A",{href:!0});var AUr=s(OB);vfo=r(AUr,"Wav2Vec2Processor"),AUr.forEach(t),Ffo=r(pAe," (SEW-D model)"),pAe.forEach(t),Tfo=i(be),qh=n(be,"LI",{});var uAe=s(qh);dne=n(uAe,"STRONG",{});var yUr=s(dne);Mfo=r(yUr,"speech_to_text"),yUr.forEach(t),Efo=r(uAe," \u2014 "),VB=n(uAe,"A",{href:!0});var LUr=s(VB);Cfo=r(LUr,"Speech2TextProcessor"),LUr.forEach(t),wfo=r(uAe," (Speech2Text model)"),uAe.forEach(t),Afo=i(be),Nh=n(be,"LI",{});var _Ae=s(Nh);cne=n(_Ae,"STRONG",{});var xUr=s(cne);yfo=r(xUr,"speech_to_text_2"),xUr.forEach(t),Lfo=r(_Ae," \u2014 "),XB=n(_Ae,"A",{href:!0});var $Ur=s(XB);xfo=r($Ur,"Speech2Text2Processor"),$Ur.forEach(t),$fo=r(_Ae," (Speech2Text2 model)"),_Ae.forEach(t),kfo=i(be),jh=n(be,"LI",{});var bAe=s(jh);fne=n(bAe,"STRONG",{});var kUr=s(fne);Sfo=r(kUr,"trocr"),kUr.forEach(t),Rfo=r(bAe," \u2014 "),zB=n(bAe,"A",{href:!0});var SUr=s(zB);Pfo=r(SUr,"TrOCRProcessor"),SUr.forEach(t),Bfo=r(bAe," (TrOCR model)"),bAe.forEach(t),Ifo=i(be),Dh=n(be,"LI",{});var vAe=s(Dh);mne=n(vAe,"STRONG",{});var RUr=s(mne);qfo=r(RUr,"unispeech"),RUr.forEach(t),Nfo=r(vAe," \u2014 "),WB=n(vAe,"A",{href:!0});var PUr=s(WB);jfo=r(PUr,"Wav2Vec2Processor"),PUr.forEach(t),Dfo=r(vAe," (UniSpeech model)"),vAe.forEach(t),Gfo=i(be),Gh=n(be,"LI",{});var FAe=s(Gh);gne=n(FAe,"STRONG",{});var BUr=s(gne);Ofo=r(BUr,"unispeech-sat"),BUr.forEach(t),Vfo=r(FAe," \u2014 "),QB=n(FAe,"A",{href:!0});var IUr=s(QB);Xfo=r(IUr,"Wav2Vec2Processor"),IUr.forEach(t),zfo=r(FAe," (UniSpeechSat model)"),FAe.forEach(t),Wfo=i(be),Oh=n(be,"LI",{});var TAe=s(Oh);hne=n(TAe,"STRONG",{});var qUr=s(hne);Qfo=r(qUr,"vilt"),qUr.forEach(t),Hfo=r(TAe," \u2014 "),HB=n(TAe,"A",{href:!0});var NUr=s(HB);Ufo=r(NUr,"ViltProcessor"),NUr.forEach(t),Jfo=r(TAe," (ViLT model)"),TAe.forEach(t),Yfo=i(be),Vh=n(be,"LI",{});var MAe=s(Vh);pne=n(MAe,"STRONG",{});var jUr=s(pne);Kfo=r(jUr,"vision-text-dual-encoder"),jUr.forEach(t),Zfo=r(MAe," \u2014 "),UB=n(MAe,"A",{href:!0});var DUr=s(UB);emo=r(DUr,"VisionTextDualEncoderProcessor"),DUr.forEach(t),omo=r(MAe," (VisionTextDualEncoder model)"),MAe.forEach(t),rmo=i(be),Xh=n(be,"LI",{});var EAe=s(Xh);une=n(EAe,"STRONG",{});var GUr=s(une);tmo=r(GUr,"wav2vec2"),GUr.forEach(t),amo=r(EAe," \u2014 "),JB=n(EAe,"A",{href:!0});var OUr=s(JB);nmo=r(OUr,"Wav2Vec2Processor"),OUr.forEach(t),smo=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),lmo=i(be),zh=n(be,"LI",{});var CAe=s(zh);_ne=n(CAe,"STRONG",{});var VUr=s(_ne);imo=r(VUr,"wav2vec2-conformer"),VUr.forEach(t),dmo=r(CAe," \u2014 "),YB=n(CAe,"A",{href:!0});var XUr=s(YB);cmo=r(XUr,"Wav2Vec2Processor"),XUr.forEach(t),fmo=r(CAe," (Wav2Vec2-Conformer model)"),CAe.forEach(t),mmo=i(be),Wh=n(be,"LI",{});var wAe=s(Wh);bne=n(wAe,"STRONG",{});var zUr=s(bne);gmo=r(zUr,"wavlm"),zUr.forEach(t),hmo=r(wAe," \u2014 "),KB=n(wAe,"A",{href:!0});var WUr=s(KB);pmo=r(WUr,"Wav2Vec2Processor"),WUr.forEach(t),umo=r(wAe," (WavLM model)"),wAe.forEach(t),be.forEach(t),_mo=i(ea),T(Qh.$$.fragment,ea),bmo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),vmo=i(js),Uh=n(js,"DIV",{class:!0});var UNe=s(Uh);T(Py.$$.fragment,UNe),Fmo=i(UNe),vne=n(UNe,"P",{});var QUr=s(vne);Tmo=r(QUr,"Register a new processor for this class."),QUr.forEach(t),UNe.forEach(t),js.forEach(t),WIe=i(f),Ci=n(f,"H2",{class:!0});var JNe=s(Ci);Jh=n(JNe,"A",{id:!0,class:!0,href:!0});var HUr=s(Jh);Fne=n(HUr,"SPAN",{});var UUr=s(Fne);T(By.$$.fragment,UUr),UUr.forEach(t),HUr.forEach(t),Mmo=i(JNe),Tne=n(JNe,"SPAN",{});var JUr=s(Tne);Emo=r(JUr,"AutoModel"),JUr.forEach(t),JNe.forEach(t),QIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(Iy.$$.fragment,Ds),Cmo=i(Ds),wi=n(Ds,"P",{});var kK=s(wi);wmo=r(kK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=n(kK,"A",{href:!0});var YUr=s(ZB);Amo=r(YUr,"from_pretrained()"),YUr.forEach(t),ymo=r(kK," class method or the "),eI=n(kK,"A",{href:!0});var KUr=s(eI);Lmo=r(KUr,"from_config()"),KUr.forEach(t),xmo=r(kK,` class
method.`),kK.forEach(t),$mo=i(Ds),qy=n(Ds,"P",{});var YNe=s(qy);kmo=r(YNe,"This class cannot be instantiated directly using "),Mne=n(YNe,"CODE",{});var ZUr=s(Mne);Smo=r(ZUr,"__init__()"),ZUr.forEach(t),Rmo=r(YNe," (throws an error)."),YNe.forEach(t),Pmo=i(Ds),tt=n(Ds,"DIV",{class:!0});var gA=s(tt);T(Ny.$$.fragment,gA),Bmo=i(gA),Ene=n(gA,"P",{});var eJr=s(Ene);Imo=r(eJr,"Instantiates one of the base model classes of the library from a configuration."),eJr.forEach(t),qmo=i(gA),Ai=n(gA,"P",{});var SK=s(Ai);Nmo=r(SK,`Note:
Loading a model from its configuration file does `),Cne=n(SK,"STRONG",{});var oJr=s(Cne);jmo=r(oJr,"not"),oJr.forEach(t),Dmo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oI=n(SK,"A",{href:!0});var rJr=s(oI);Gmo=r(rJr,"from_pretrained()"),rJr.forEach(t),Omo=r(SK," to load the model weights."),SK.forEach(t),Vmo=i(gA),T(Yh.$$.fragment,gA),gA.forEach(t),Xmo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(jy.$$.fragment,oa),zmo=i(oa),wne=n(oa,"P",{});var tJr=s(wne);Wmo=r(tJr,"Instantiate one of the base model classes of the library from a pretrained model."),tJr.forEach(t),Qmo=i(oa),La=n(oa,"P",{});var hA=s(La);Hmo=r(hA,"The model class to instantiate is selected based on the "),Ane=n(hA,"CODE",{});var aJr=s(Ane);Umo=r(aJr,"model_type"),aJr.forEach(t),Jmo=r(hA,` property of the config object (either
passed as an argument or loaded from `),yne=n(hA,"CODE",{});var nJr=s(yne);Ymo=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),Kmo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=n(hA,"CODE",{});var sJr=s(Lne);Zmo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),ego=r(hA,":"),hA.forEach(t),ogo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var AAe=s(Kh);xne=n(AAe,"STRONG",{});var lJr=s(xne);rgo=r(lJr,"albert"),lJr.forEach(t),tgo=r(AAe," \u2014 "),rI=n(AAe,"A",{href:!0});var iJr=s(rI);ago=r(iJr,"AlbertModel"),iJr.forEach(t),ngo=r(AAe," (ALBERT model)"),AAe.forEach(t),sgo=i($),Zh=n($,"LI",{});var yAe=s(Zh);$ne=n(yAe,"STRONG",{});var dJr=s($ne);lgo=r(dJr,"bart"),dJr.forEach(t),igo=r(yAe," \u2014 "),tI=n(yAe,"A",{href:!0});var cJr=s(tI);dgo=r(cJr,"BartModel"),cJr.forEach(t),cgo=r(yAe," (BART model)"),yAe.forEach(t),fgo=i($),ep=n($,"LI",{});var LAe=s(ep);kne=n(LAe,"STRONG",{});var fJr=s(kne);mgo=r(fJr,"beit"),fJr.forEach(t),ggo=r(LAe," \u2014 "),aI=n(LAe,"A",{href:!0});var mJr=s(aI);hgo=r(mJr,"BeitModel"),mJr.forEach(t),pgo=r(LAe," (BEiT model)"),LAe.forEach(t),ugo=i($),op=n($,"LI",{});var xAe=s(op);Sne=n(xAe,"STRONG",{});var gJr=s(Sne);_go=r(gJr,"bert"),gJr.forEach(t),bgo=r(xAe," \u2014 "),nI=n(xAe,"A",{href:!0});var hJr=s(nI);vgo=r(hJr,"BertModel"),hJr.forEach(t),Fgo=r(xAe," (BERT model)"),xAe.forEach(t),Tgo=i($),rp=n($,"LI",{});var $Ae=s(rp);Rne=n($Ae,"STRONG",{});var pJr=s(Rne);Mgo=r(pJr,"bert-generation"),pJr.forEach(t),Ego=r($Ae," \u2014 "),sI=n($Ae,"A",{href:!0});var uJr=s(sI);Cgo=r(uJr,"BertGenerationEncoder"),uJr.forEach(t),wgo=r($Ae," (Bert Generation model)"),$Ae.forEach(t),Ago=i($),tp=n($,"LI",{});var kAe=s(tp);Pne=n(kAe,"STRONG",{});var _Jr=s(Pne);ygo=r(_Jr,"big_bird"),_Jr.forEach(t),Lgo=r(kAe," \u2014 "),lI=n(kAe,"A",{href:!0});var bJr=s(lI);xgo=r(bJr,"BigBirdModel"),bJr.forEach(t),$go=r(kAe," (BigBird model)"),kAe.forEach(t),kgo=i($),ap=n($,"LI",{});var SAe=s(ap);Bne=n(SAe,"STRONG",{});var vJr=s(Bne);Sgo=r(vJr,"bigbird_pegasus"),vJr.forEach(t),Rgo=r(SAe," \u2014 "),iI=n(SAe,"A",{href:!0});var FJr=s(iI);Pgo=r(FJr,"BigBirdPegasusModel"),FJr.forEach(t),Bgo=r(SAe," (BigBirdPegasus model)"),SAe.forEach(t),Igo=i($),np=n($,"LI",{});var RAe=s(np);Ine=n(RAe,"STRONG",{});var TJr=s(Ine);qgo=r(TJr,"blenderbot"),TJr.forEach(t),Ngo=r(RAe," \u2014 "),dI=n(RAe,"A",{href:!0});var MJr=s(dI);jgo=r(MJr,"BlenderbotModel"),MJr.forEach(t),Dgo=r(RAe," (Blenderbot model)"),RAe.forEach(t),Ggo=i($),sp=n($,"LI",{});var PAe=s(sp);qne=n(PAe,"STRONG",{});var EJr=s(qne);Ogo=r(EJr,"blenderbot-small"),EJr.forEach(t),Vgo=r(PAe," \u2014 "),cI=n(PAe,"A",{href:!0});var CJr=s(cI);Xgo=r(CJr,"BlenderbotSmallModel"),CJr.forEach(t),zgo=r(PAe," (BlenderbotSmall model)"),PAe.forEach(t),Wgo=i($),lp=n($,"LI",{});var BAe=s(lp);Nne=n(BAe,"STRONG",{});var wJr=s(Nne);Qgo=r(wJr,"camembert"),wJr.forEach(t),Hgo=r(BAe," \u2014 "),fI=n(BAe,"A",{href:!0});var AJr=s(fI);Ugo=r(AJr,"CamembertModel"),AJr.forEach(t),Jgo=r(BAe," (CamemBERT model)"),BAe.forEach(t),Ygo=i($),ip=n($,"LI",{});var IAe=s(ip);jne=n(IAe,"STRONG",{});var yJr=s(jne);Kgo=r(yJr,"canine"),yJr.forEach(t),Zgo=r(IAe," \u2014 "),mI=n(IAe,"A",{href:!0});var LJr=s(mI);eho=r(LJr,"CanineModel"),LJr.forEach(t),oho=r(IAe," (Canine model)"),IAe.forEach(t),rho=i($),dp=n($,"LI",{});var qAe=s(dp);Dne=n(qAe,"STRONG",{});var xJr=s(Dne);tho=r(xJr,"clip"),xJr.forEach(t),aho=r(qAe," \u2014 "),gI=n(qAe,"A",{href:!0});var $Jr=s(gI);nho=r($Jr,"CLIPModel"),$Jr.forEach(t),sho=r(qAe," (CLIP model)"),qAe.forEach(t),lho=i($),cp=n($,"LI",{});var NAe=s(cp);Gne=n(NAe,"STRONG",{});var kJr=s(Gne);iho=r(kJr,"convbert"),kJr.forEach(t),dho=r(NAe," \u2014 "),hI=n(NAe,"A",{href:!0});var SJr=s(hI);cho=r(SJr,"ConvBertModel"),SJr.forEach(t),fho=r(NAe," (ConvBERT model)"),NAe.forEach(t),mho=i($),fp=n($,"LI",{});var jAe=s(fp);One=n(jAe,"STRONG",{});var RJr=s(One);gho=r(RJr,"convnext"),RJr.forEach(t),hho=r(jAe," \u2014 "),pI=n(jAe,"A",{href:!0});var PJr=s(pI);pho=r(PJr,"ConvNextModel"),PJr.forEach(t),uho=r(jAe," (ConvNext model)"),jAe.forEach(t),_ho=i($),mp=n($,"LI",{});var DAe=s(mp);Vne=n(DAe,"STRONG",{});var BJr=s(Vne);bho=r(BJr,"ctrl"),BJr.forEach(t),vho=r(DAe," \u2014 "),uI=n(DAe,"A",{href:!0});var IJr=s(uI);Fho=r(IJr,"CTRLModel"),IJr.forEach(t),Tho=r(DAe," (CTRL model)"),DAe.forEach(t),Mho=i($),gp=n($,"LI",{});var GAe=s(gp);Xne=n(GAe,"STRONG",{});var qJr=s(Xne);Eho=r(qJr,"data2vec-audio"),qJr.forEach(t),Cho=r(GAe," \u2014 "),_I=n(GAe,"A",{href:!0});var NJr=s(_I);who=r(NJr,"Data2VecAudioModel"),NJr.forEach(t),Aho=r(GAe," (Data2VecAudio model)"),GAe.forEach(t),yho=i($),hp=n($,"LI",{});var OAe=s(hp);zne=n(OAe,"STRONG",{});var jJr=s(zne);Lho=r(jJr,"data2vec-text"),jJr.forEach(t),xho=r(OAe," \u2014 "),bI=n(OAe,"A",{href:!0});var DJr=s(bI);$ho=r(DJr,"Data2VecTextModel"),DJr.forEach(t),kho=r(OAe," (Data2VecText model)"),OAe.forEach(t),Sho=i($),pp=n($,"LI",{});var VAe=s(pp);Wne=n(VAe,"STRONG",{});var GJr=s(Wne);Rho=r(GJr,"data2vec-vision"),GJr.forEach(t),Pho=r(VAe," \u2014 "),vI=n(VAe,"A",{href:!0});var OJr=s(vI);Bho=r(OJr,"Data2VecVisionModel"),OJr.forEach(t),Iho=r(VAe," (Data2VecVision model)"),VAe.forEach(t),qho=i($),up=n($,"LI",{});var XAe=s(up);Qne=n(XAe,"STRONG",{});var VJr=s(Qne);Nho=r(VJr,"deberta"),VJr.forEach(t),jho=r(XAe," \u2014 "),FI=n(XAe,"A",{href:!0});var XJr=s(FI);Dho=r(XJr,"DebertaModel"),XJr.forEach(t),Gho=r(XAe," (DeBERTa model)"),XAe.forEach(t),Oho=i($),_p=n($,"LI",{});var zAe=s(_p);Hne=n(zAe,"STRONG",{});var zJr=s(Hne);Vho=r(zJr,"deberta-v2"),zJr.forEach(t),Xho=r(zAe," \u2014 "),TI=n(zAe,"A",{href:!0});var WJr=s(TI);zho=r(WJr,"DebertaV2Model"),WJr.forEach(t),Who=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),Qho=i($),bp=n($,"LI",{});var WAe=s(bp);Une=n(WAe,"STRONG",{});var QJr=s(Une);Hho=r(QJr,"decision_transformer"),QJr.forEach(t),Uho=r(WAe," \u2014 "),MI=n(WAe,"A",{href:!0});var HJr=s(MI);Jho=r(HJr,"DecisionTransformerModel"),HJr.forEach(t),Yho=r(WAe," (Decision Transformer model)"),WAe.forEach(t),Kho=i($),vp=n($,"LI",{});var QAe=s(vp);Jne=n(QAe,"STRONG",{});var UJr=s(Jne);Zho=r(UJr,"deit"),UJr.forEach(t),epo=r(QAe," \u2014 "),EI=n(QAe,"A",{href:!0});var JJr=s(EI);opo=r(JJr,"DeiTModel"),JJr.forEach(t),rpo=r(QAe," (DeiT model)"),QAe.forEach(t),tpo=i($),Fp=n($,"LI",{});var HAe=s(Fp);Yne=n(HAe,"STRONG",{});var YJr=s(Yne);apo=r(YJr,"detr"),YJr.forEach(t),npo=r(HAe," \u2014 "),CI=n(HAe,"A",{href:!0});var KJr=s(CI);spo=r(KJr,"DetrModel"),KJr.forEach(t),lpo=r(HAe," (DETR model)"),HAe.forEach(t),ipo=i($),Tp=n($,"LI",{});var UAe=s(Tp);Kne=n(UAe,"STRONG",{});var ZJr=s(Kne);dpo=r(ZJr,"distilbert"),ZJr.forEach(t),cpo=r(UAe," \u2014 "),wI=n(UAe,"A",{href:!0});var eYr=s(wI);fpo=r(eYr,"DistilBertModel"),eYr.forEach(t),mpo=r(UAe," (DistilBERT model)"),UAe.forEach(t),gpo=i($),Mp=n($,"LI",{});var JAe=s(Mp);Zne=n(JAe,"STRONG",{});var oYr=s(Zne);hpo=r(oYr,"dpr"),oYr.forEach(t),ppo=r(JAe," \u2014 "),AI=n(JAe,"A",{href:!0});var rYr=s(AI);upo=r(rYr,"DPRQuestionEncoder"),rYr.forEach(t),_po=r(JAe," (DPR model)"),JAe.forEach(t),bpo=i($),Ep=n($,"LI",{});var YAe=s(Ep);ese=n(YAe,"STRONG",{});var tYr=s(ese);vpo=r(tYr,"dpt"),tYr.forEach(t),Fpo=r(YAe," \u2014 "),yI=n(YAe,"A",{href:!0});var aYr=s(yI);Tpo=r(aYr,"DPTModel"),aYr.forEach(t),Mpo=r(YAe," (DPT model)"),YAe.forEach(t),Epo=i($),Cp=n($,"LI",{});var KAe=s(Cp);ose=n(KAe,"STRONG",{});var nYr=s(ose);Cpo=r(nYr,"electra"),nYr.forEach(t),wpo=r(KAe," \u2014 "),LI=n(KAe,"A",{href:!0});var sYr=s(LI);Apo=r(sYr,"ElectraModel"),sYr.forEach(t),ypo=r(KAe," (ELECTRA model)"),KAe.forEach(t),Lpo=i($),wp=n($,"LI",{});var ZAe=s(wp);rse=n(ZAe,"STRONG",{});var lYr=s(rse);xpo=r(lYr,"flaubert"),lYr.forEach(t),$po=r(ZAe," \u2014 "),xI=n(ZAe,"A",{href:!0});var iYr=s(xI);kpo=r(iYr,"FlaubertModel"),iYr.forEach(t),Spo=r(ZAe," (FlauBERT model)"),ZAe.forEach(t),Rpo=i($),Ap=n($,"LI",{});var e0e=s(Ap);tse=n(e0e,"STRONG",{});var dYr=s(tse);Ppo=r(dYr,"flava"),dYr.forEach(t),Bpo=r(e0e," \u2014 "),$I=n(e0e,"A",{href:!0});var cYr=s($I);Ipo=r(cYr,"FlavaModel"),cYr.forEach(t),qpo=r(e0e," (Flava model)"),e0e.forEach(t),Npo=i($),yp=n($,"LI",{});var o0e=s(yp);ase=n(o0e,"STRONG",{});var fYr=s(ase);jpo=r(fYr,"fnet"),fYr.forEach(t),Dpo=r(o0e," \u2014 "),kI=n(o0e,"A",{href:!0});var mYr=s(kI);Gpo=r(mYr,"FNetModel"),mYr.forEach(t),Opo=r(o0e," (FNet model)"),o0e.forEach(t),Vpo=i($),Lp=n($,"LI",{});var r0e=s(Lp);nse=n(r0e,"STRONG",{});var gYr=s(nse);Xpo=r(gYr,"fsmt"),gYr.forEach(t),zpo=r(r0e," \u2014 "),SI=n(r0e,"A",{href:!0});var hYr=s(SI);Wpo=r(hYr,"FSMTModel"),hYr.forEach(t),Qpo=r(r0e," (FairSeq Machine-Translation model)"),r0e.forEach(t),Hpo=i($),Rs=n($,"LI",{});var E$=s(Rs);sse=n(E$,"STRONG",{});var pYr=s(sse);Upo=r(pYr,"funnel"),pYr.forEach(t),Jpo=r(E$," \u2014 "),RI=n(E$,"A",{href:!0});var uYr=s(RI);Ypo=r(uYr,"FunnelModel"),uYr.forEach(t),Kpo=r(E$," or "),PI=n(E$,"A",{href:!0});var _Yr=s(PI);Zpo=r(_Yr,"FunnelBaseModel"),_Yr.forEach(t),euo=r(E$," (Funnel Transformer model)"),E$.forEach(t),ouo=i($),xp=n($,"LI",{});var t0e=s(xp);lse=n(t0e,"STRONG",{});var bYr=s(lse);ruo=r(bYr,"glpn"),bYr.forEach(t),tuo=r(t0e," \u2014 "),BI=n(t0e,"A",{href:!0});var vYr=s(BI);auo=r(vYr,"GLPNModel"),vYr.forEach(t),nuo=r(t0e," (GLPN model)"),t0e.forEach(t),suo=i($),$p=n($,"LI",{});var a0e=s($p);ise=n(a0e,"STRONG",{});var FYr=s(ise);luo=r(FYr,"gpt2"),FYr.forEach(t),iuo=r(a0e," \u2014 "),II=n(a0e,"A",{href:!0});var TYr=s(II);duo=r(TYr,"GPT2Model"),TYr.forEach(t),cuo=r(a0e," (OpenAI GPT-2 model)"),a0e.forEach(t),fuo=i($),kp=n($,"LI",{});var n0e=s(kp);dse=n(n0e,"STRONG",{});var MYr=s(dse);muo=r(MYr,"gpt_neo"),MYr.forEach(t),guo=r(n0e," \u2014 "),qI=n(n0e,"A",{href:!0});var EYr=s(qI);huo=r(EYr,"GPTNeoModel"),EYr.forEach(t),puo=r(n0e," (GPT Neo model)"),n0e.forEach(t),uuo=i($),Sp=n($,"LI",{});var s0e=s(Sp);cse=n(s0e,"STRONG",{});var CYr=s(cse);_uo=r(CYr,"gptj"),CYr.forEach(t),buo=r(s0e," \u2014 "),NI=n(s0e,"A",{href:!0});var wYr=s(NI);vuo=r(wYr,"GPTJModel"),wYr.forEach(t),Fuo=r(s0e," (GPT-J model)"),s0e.forEach(t),Tuo=i($),Rp=n($,"LI",{});var l0e=s(Rp);fse=n(l0e,"STRONG",{});var AYr=s(fse);Muo=r(AYr,"hubert"),AYr.forEach(t),Euo=r(l0e," \u2014 "),jI=n(l0e,"A",{href:!0});var yYr=s(jI);Cuo=r(yYr,"HubertModel"),yYr.forEach(t),wuo=r(l0e," (Hubert model)"),l0e.forEach(t),Auo=i($),Pp=n($,"LI",{});var i0e=s(Pp);mse=n(i0e,"STRONG",{});var LYr=s(mse);yuo=r(LYr,"ibert"),LYr.forEach(t),Luo=r(i0e," \u2014 "),DI=n(i0e,"A",{href:!0});var xYr=s(DI);xuo=r(xYr,"IBertModel"),xYr.forEach(t),$uo=r(i0e," (I-BERT model)"),i0e.forEach(t),kuo=i($),Bp=n($,"LI",{});var d0e=s(Bp);gse=n(d0e,"STRONG",{});var $Yr=s(gse);Suo=r($Yr,"imagegpt"),$Yr.forEach(t),Ruo=r(d0e," \u2014 "),GI=n(d0e,"A",{href:!0});var kYr=s(GI);Puo=r(kYr,"ImageGPTModel"),kYr.forEach(t),Buo=r(d0e," (ImageGPT model)"),d0e.forEach(t),Iuo=i($),Ip=n($,"LI",{});var c0e=s(Ip);hse=n(c0e,"STRONG",{});var SYr=s(hse);quo=r(SYr,"layoutlm"),SYr.forEach(t),Nuo=r(c0e," \u2014 "),OI=n(c0e,"A",{href:!0});var RYr=s(OI);juo=r(RYr,"LayoutLMModel"),RYr.forEach(t),Duo=r(c0e," (LayoutLM model)"),c0e.forEach(t),Guo=i($),qp=n($,"LI",{});var f0e=s(qp);pse=n(f0e,"STRONG",{});var PYr=s(pse);Ouo=r(PYr,"layoutlmv2"),PYr.forEach(t),Vuo=r(f0e," \u2014 "),VI=n(f0e,"A",{href:!0});var BYr=s(VI);Xuo=r(BYr,"LayoutLMv2Model"),BYr.forEach(t),zuo=r(f0e," (LayoutLMv2 model)"),f0e.forEach(t),Wuo=i($),Np=n($,"LI",{});var m0e=s(Np);use=n(m0e,"STRONG",{});var IYr=s(use);Quo=r(IYr,"led"),IYr.forEach(t),Huo=r(m0e," \u2014 "),XI=n(m0e,"A",{href:!0});var qYr=s(XI);Uuo=r(qYr,"LEDModel"),qYr.forEach(t),Juo=r(m0e," (LED model)"),m0e.forEach(t),Yuo=i($),jp=n($,"LI",{});var g0e=s(jp);_se=n(g0e,"STRONG",{});var NYr=s(_se);Kuo=r(NYr,"longformer"),NYr.forEach(t),Zuo=r(g0e," \u2014 "),zI=n(g0e,"A",{href:!0});var jYr=s(zI);e_o=r(jYr,"LongformerModel"),jYr.forEach(t),o_o=r(g0e," (Longformer model)"),g0e.forEach(t),r_o=i($),Dp=n($,"LI",{});var h0e=s(Dp);bse=n(h0e,"STRONG",{});var DYr=s(bse);t_o=r(DYr,"luke"),DYr.forEach(t),a_o=r(h0e," \u2014 "),WI=n(h0e,"A",{href:!0});var GYr=s(WI);n_o=r(GYr,"LukeModel"),GYr.forEach(t),s_o=r(h0e," (LUKE model)"),h0e.forEach(t),l_o=i($),Gp=n($,"LI",{});var p0e=s(Gp);vse=n(p0e,"STRONG",{});var OYr=s(vse);i_o=r(OYr,"lxmert"),OYr.forEach(t),d_o=r(p0e," \u2014 "),QI=n(p0e,"A",{href:!0});var VYr=s(QI);c_o=r(VYr,"LxmertModel"),VYr.forEach(t),f_o=r(p0e," (LXMERT model)"),p0e.forEach(t),m_o=i($),Op=n($,"LI",{});var u0e=s(Op);Fse=n(u0e,"STRONG",{});var XYr=s(Fse);g_o=r(XYr,"m2m_100"),XYr.forEach(t),h_o=r(u0e," \u2014 "),HI=n(u0e,"A",{href:!0});var zYr=s(HI);p_o=r(zYr,"M2M100Model"),zYr.forEach(t),u_o=r(u0e," (M2M100 model)"),u0e.forEach(t),__o=i($),Vp=n($,"LI",{});var _0e=s(Vp);Tse=n(_0e,"STRONG",{});var WYr=s(Tse);b_o=r(WYr,"marian"),WYr.forEach(t),v_o=r(_0e," \u2014 "),UI=n(_0e,"A",{href:!0});var QYr=s(UI);F_o=r(QYr,"MarianModel"),QYr.forEach(t),T_o=r(_0e," (Marian model)"),_0e.forEach(t),M_o=i($),Xp=n($,"LI",{});var b0e=s(Xp);Mse=n(b0e,"STRONG",{});var HYr=s(Mse);E_o=r(HYr,"maskformer"),HYr.forEach(t),C_o=r(b0e," \u2014 "),JI=n(b0e,"A",{href:!0});var UYr=s(JI);w_o=r(UYr,"MaskFormerModel"),UYr.forEach(t),A_o=r(b0e," (MaskFormer model)"),b0e.forEach(t),y_o=i($),zp=n($,"LI",{});var v0e=s(zp);Ese=n(v0e,"STRONG",{});var JYr=s(Ese);L_o=r(JYr,"mbart"),JYr.forEach(t),x_o=r(v0e," \u2014 "),YI=n(v0e,"A",{href:!0});var YYr=s(YI);$_o=r(YYr,"MBartModel"),YYr.forEach(t),k_o=r(v0e," (mBART model)"),v0e.forEach(t),S_o=i($),Wp=n($,"LI",{});var F0e=s(Wp);Cse=n(F0e,"STRONG",{});var KYr=s(Cse);R_o=r(KYr,"megatron-bert"),KYr.forEach(t),P_o=r(F0e," \u2014 "),KI=n(F0e,"A",{href:!0});var ZYr=s(KI);B_o=r(ZYr,"MegatronBertModel"),ZYr.forEach(t),I_o=r(F0e," (MegatronBert model)"),F0e.forEach(t),q_o=i($),Qp=n($,"LI",{});var T0e=s(Qp);wse=n(T0e,"STRONG",{});var eKr=s(wse);N_o=r(eKr,"mobilebert"),eKr.forEach(t),j_o=r(T0e," \u2014 "),ZI=n(T0e,"A",{href:!0});var oKr=s(ZI);D_o=r(oKr,"MobileBertModel"),oKr.forEach(t),G_o=r(T0e," (MobileBERT model)"),T0e.forEach(t),O_o=i($),Hp=n($,"LI",{});var M0e=s(Hp);Ase=n(M0e,"STRONG",{});var rKr=s(Ase);V_o=r(rKr,"mpnet"),rKr.forEach(t),X_o=r(M0e," \u2014 "),eq=n(M0e,"A",{href:!0});var tKr=s(eq);z_o=r(tKr,"MPNetModel"),tKr.forEach(t),W_o=r(M0e," (MPNet model)"),M0e.forEach(t),Q_o=i($),Up=n($,"LI",{});var E0e=s(Up);yse=n(E0e,"STRONG",{});var aKr=s(yse);H_o=r(aKr,"mt5"),aKr.forEach(t),U_o=r(E0e," \u2014 "),oq=n(E0e,"A",{href:!0});var nKr=s(oq);J_o=r(nKr,"MT5Model"),nKr.forEach(t),Y_o=r(E0e," (mT5 model)"),E0e.forEach(t),K_o=i($),Jp=n($,"LI",{});var C0e=s(Jp);Lse=n(C0e,"STRONG",{});var sKr=s(Lse);Z_o=r(sKr,"nystromformer"),sKr.forEach(t),e1o=r(C0e," \u2014 "),rq=n(C0e,"A",{href:!0});var lKr=s(rq);o1o=r(lKr,"NystromformerModel"),lKr.forEach(t),r1o=r(C0e," (Nystromformer model)"),C0e.forEach(t),t1o=i($),Yp=n($,"LI",{});var w0e=s(Yp);xse=n(w0e,"STRONG",{});var iKr=s(xse);a1o=r(iKr,"openai-gpt"),iKr.forEach(t),n1o=r(w0e," \u2014 "),tq=n(w0e,"A",{href:!0});var dKr=s(tq);s1o=r(dKr,"OpenAIGPTModel"),dKr.forEach(t),l1o=r(w0e," (OpenAI GPT model)"),w0e.forEach(t),i1o=i($),Kp=n($,"LI",{});var A0e=s(Kp);$se=n(A0e,"STRONG",{});var cKr=s($se);d1o=r(cKr,"opt"),cKr.forEach(t),c1o=r(A0e," \u2014 "),aq=n(A0e,"A",{href:!0});var fKr=s(aq);f1o=r(fKr,"OPTModel"),fKr.forEach(t),m1o=r(A0e," (OPT model)"),A0e.forEach(t),g1o=i($),Zp=n($,"LI",{});var y0e=s(Zp);kse=n(y0e,"STRONG",{});var mKr=s(kse);h1o=r(mKr,"pegasus"),mKr.forEach(t),p1o=r(y0e," \u2014 "),nq=n(y0e,"A",{href:!0});var gKr=s(nq);u1o=r(gKr,"PegasusModel"),gKr.forEach(t),_1o=r(y0e," (Pegasus model)"),y0e.forEach(t),b1o=i($),eu=n($,"LI",{});var L0e=s(eu);Sse=n(L0e,"STRONG",{});var hKr=s(Sse);v1o=r(hKr,"perceiver"),hKr.forEach(t),F1o=r(L0e," \u2014 "),sq=n(L0e,"A",{href:!0});var pKr=s(sq);T1o=r(pKr,"PerceiverModel"),pKr.forEach(t),M1o=r(L0e," (Perceiver model)"),L0e.forEach(t),E1o=i($),ou=n($,"LI",{});var x0e=s(ou);Rse=n(x0e,"STRONG",{});var uKr=s(Rse);C1o=r(uKr,"plbart"),uKr.forEach(t),w1o=r(x0e," \u2014 "),lq=n(x0e,"A",{href:!0});var _Kr=s(lq);A1o=r(_Kr,"PLBartModel"),_Kr.forEach(t),y1o=r(x0e," (PLBart model)"),x0e.forEach(t),L1o=i($),ru=n($,"LI",{});var $0e=s(ru);Pse=n($0e,"STRONG",{});var bKr=s(Pse);x1o=r(bKr,"poolformer"),bKr.forEach(t),$1o=r($0e," \u2014 "),iq=n($0e,"A",{href:!0});var vKr=s(iq);k1o=r(vKr,"PoolFormerModel"),vKr.forEach(t),S1o=r($0e," (PoolFormer model)"),$0e.forEach(t),R1o=i($),tu=n($,"LI",{});var k0e=s(tu);Bse=n(k0e,"STRONG",{});var FKr=s(Bse);P1o=r(FKr,"prophetnet"),FKr.forEach(t),B1o=r(k0e," \u2014 "),dq=n(k0e,"A",{href:!0});var TKr=s(dq);I1o=r(TKr,"ProphetNetModel"),TKr.forEach(t),q1o=r(k0e," (ProphetNet model)"),k0e.forEach(t),N1o=i($),au=n($,"LI",{});var S0e=s(au);Ise=n(S0e,"STRONG",{});var MKr=s(Ise);j1o=r(MKr,"qdqbert"),MKr.forEach(t),D1o=r(S0e," \u2014 "),cq=n(S0e,"A",{href:!0});var EKr=s(cq);G1o=r(EKr,"QDQBertModel"),EKr.forEach(t),O1o=r(S0e," (QDQBert model)"),S0e.forEach(t),V1o=i($),nu=n($,"LI",{});var R0e=s(nu);qse=n(R0e,"STRONG",{});var CKr=s(qse);X1o=r(CKr,"reformer"),CKr.forEach(t),z1o=r(R0e," \u2014 "),fq=n(R0e,"A",{href:!0});var wKr=s(fq);W1o=r(wKr,"ReformerModel"),wKr.forEach(t),Q1o=r(R0e," (Reformer model)"),R0e.forEach(t),H1o=i($),su=n($,"LI",{});var P0e=s(su);Nse=n(P0e,"STRONG",{});var AKr=s(Nse);U1o=r(AKr,"regnet"),AKr.forEach(t),J1o=r(P0e," \u2014 "),mq=n(P0e,"A",{href:!0});var yKr=s(mq);Y1o=r(yKr,"RegNetModel"),yKr.forEach(t),K1o=r(P0e," (RegNet model)"),P0e.forEach(t),Z1o=i($),lu=n($,"LI",{});var B0e=s(lu);jse=n(B0e,"STRONG",{});var LKr=s(jse);ebo=r(LKr,"rembert"),LKr.forEach(t),obo=r(B0e," \u2014 "),gq=n(B0e,"A",{href:!0});var xKr=s(gq);rbo=r(xKr,"RemBertModel"),xKr.forEach(t),tbo=r(B0e," (RemBERT model)"),B0e.forEach(t),abo=i($),iu=n($,"LI",{});var I0e=s(iu);Dse=n(I0e,"STRONG",{});var $Kr=s(Dse);nbo=r($Kr,"resnet"),$Kr.forEach(t),sbo=r(I0e," \u2014 "),hq=n(I0e,"A",{href:!0});var kKr=s(hq);lbo=r(kKr,"ResNetModel"),kKr.forEach(t),ibo=r(I0e," (ResNet model)"),I0e.forEach(t),dbo=i($),du=n($,"LI",{});var q0e=s(du);Gse=n(q0e,"STRONG",{});var SKr=s(Gse);cbo=r(SKr,"retribert"),SKr.forEach(t),fbo=r(q0e," \u2014 "),pq=n(q0e,"A",{href:!0});var RKr=s(pq);mbo=r(RKr,"RetriBertModel"),RKr.forEach(t),gbo=r(q0e," (RetriBERT model)"),q0e.forEach(t),hbo=i($),cu=n($,"LI",{});var N0e=s(cu);Ose=n(N0e,"STRONG",{});var PKr=s(Ose);pbo=r(PKr,"roberta"),PKr.forEach(t),ubo=r(N0e," \u2014 "),uq=n(N0e,"A",{href:!0});var BKr=s(uq);_bo=r(BKr,"RobertaModel"),BKr.forEach(t),bbo=r(N0e," (RoBERTa model)"),N0e.forEach(t),vbo=i($),fu=n($,"LI",{});var j0e=s(fu);Vse=n(j0e,"STRONG",{});var IKr=s(Vse);Fbo=r(IKr,"roformer"),IKr.forEach(t),Tbo=r(j0e," \u2014 "),_q=n(j0e,"A",{href:!0});var qKr=s(_q);Mbo=r(qKr,"RoFormerModel"),qKr.forEach(t),Ebo=r(j0e," (RoFormer model)"),j0e.forEach(t),Cbo=i($),mu=n($,"LI",{});var D0e=s(mu);Xse=n(D0e,"STRONG",{});var NKr=s(Xse);wbo=r(NKr,"segformer"),NKr.forEach(t),Abo=r(D0e," \u2014 "),bq=n(D0e,"A",{href:!0});var jKr=s(bq);ybo=r(jKr,"SegformerModel"),jKr.forEach(t),Lbo=r(D0e," (SegFormer model)"),D0e.forEach(t),xbo=i($),gu=n($,"LI",{});var G0e=s(gu);zse=n(G0e,"STRONG",{});var DKr=s(zse);$bo=r(DKr,"sew"),DKr.forEach(t),kbo=r(G0e," \u2014 "),vq=n(G0e,"A",{href:!0});var GKr=s(vq);Sbo=r(GKr,"SEWModel"),GKr.forEach(t),Rbo=r(G0e," (SEW model)"),G0e.forEach(t),Pbo=i($),hu=n($,"LI",{});var O0e=s(hu);Wse=n(O0e,"STRONG",{});var OKr=s(Wse);Bbo=r(OKr,"sew-d"),OKr.forEach(t),Ibo=r(O0e," \u2014 "),Fq=n(O0e,"A",{href:!0});var VKr=s(Fq);qbo=r(VKr,"SEWDModel"),VKr.forEach(t),Nbo=r(O0e," (SEW-D model)"),O0e.forEach(t),jbo=i($),pu=n($,"LI",{});var V0e=s(pu);Qse=n(V0e,"STRONG",{});var XKr=s(Qse);Dbo=r(XKr,"speech_to_text"),XKr.forEach(t),Gbo=r(V0e," \u2014 "),Tq=n(V0e,"A",{href:!0});var zKr=s(Tq);Obo=r(zKr,"Speech2TextModel"),zKr.forEach(t),Vbo=r(V0e," (Speech2Text model)"),V0e.forEach(t),Xbo=i($),uu=n($,"LI",{});var X0e=s(uu);Hse=n(X0e,"STRONG",{});var WKr=s(Hse);zbo=r(WKr,"splinter"),WKr.forEach(t),Wbo=r(X0e," \u2014 "),Mq=n(X0e,"A",{href:!0});var QKr=s(Mq);Qbo=r(QKr,"SplinterModel"),QKr.forEach(t),Hbo=r(X0e," (Splinter model)"),X0e.forEach(t),Ubo=i($),_u=n($,"LI",{});var z0e=s(_u);Use=n(z0e,"STRONG",{});var HKr=s(Use);Jbo=r(HKr,"squeezebert"),HKr.forEach(t),Ybo=r(z0e," \u2014 "),Eq=n(z0e,"A",{href:!0});var UKr=s(Eq);Kbo=r(UKr,"SqueezeBertModel"),UKr.forEach(t),Zbo=r(z0e," (SqueezeBERT model)"),z0e.forEach(t),e2o=i($),bu=n($,"LI",{});var W0e=s(bu);Jse=n(W0e,"STRONG",{});var JKr=s(Jse);o2o=r(JKr,"swin"),JKr.forEach(t),r2o=r(W0e," \u2014 "),Cq=n(W0e,"A",{href:!0});var YKr=s(Cq);t2o=r(YKr,"SwinModel"),YKr.forEach(t),a2o=r(W0e," (Swin model)"),W0e.forEach(t),n2o=i($),vu=n($,"LI",{});var Q0e=s(vu);Yse=n(Q0e,"STRONG",{});var KKr=s(Yse);s2o=r(KKr,"t5"),KKr.forEach(t),l2o=r(Q0e," \u2014 "),wq=n(Q0e,"A",{href:!0});var ZKr=s(wq);i2o=r(ZKr,"T5Model"),ZKr.forEach(t),d2o=r(Q0e," (T5 model)"),Q0e.forEach(t),c2o=i($),Fu=n($,"LI",{});var H0e=s(Fu);Kse=n(H0e,"STRONG",{});var eZr=s(Kse);f2o=r(eZr,"tapas"),eZr.forEach(t),m2o=r(H0e," \u2014 "),Aq=n(H0e,"A",{href:!0});var oZr=s(Aq);g2o=r(oZr,"TapasModel"),oZr.forEach(t),h2o=r(H0e," (TAPAS model)"),H0e.forEach(t),p2o=i($),Tu=n($,"LI",{});var U0e=s(Tu);Zse=n(U0e,"STRONG",{});var rZr=s(Zse);u2o=r(rZr,"transfo-xl"),rZr.forEach(t),_2o=r(U0e," \u2014 "),yq=n(U0e,"A",{href:!0});var tZr=s(yq);b2o=r(tZr,"TransfoXLModel"),tZr.forEach(t),v2o=r(U0e," (Transformer-XL model)"),U0e.forEach(t),F2o=i($),Mu=n($,"LI",{});var J0e=s(Mu);ele=n(J0e,"STRONG",{});var aZr=s(ele);T2o=r(aZr,"unispeech"),aZr.forEach(t),M2o=r(J0e," \u2014 "),Lq=n(J0e,"A",{href:!0});var nZr=s(Lq);E2o=r(nZr,"UniSpeechModel"),nZr.forEach(t),C2o=r(J0e," (UniSpeech model)"),J0e.forEach(t),w2o=i($),Eu=n($,"LI",{});var Y0e=s(Eu);ole=n(Y0e,"STRONG",{});var sZr=s(ole);A2o=r(sZr,"unispeech-sat"),sZr.forEach(t),y2o=r(Y0e," \u2014 "),xq=n(Y0e,"A",{href:!0});var lZr=s(xq);L2o=r(lZr,"UniSpeechSatModel"),lZr.forEach(t),x2o=r(Y0e," (UniSpeechSat model)"),Y0e.forEach(t),$2o=i($),Cu=n($,"LI",{});var K0e=s(Cu);rle=n(K0e,"STRONG",{});var iZr=s(rle);k2o=r(iZr,"van"),iZr.forEach(t),S2o=r(K0e," \u2014 "),$q=n(K0e,"A",{href:!0});var dZr=s($q);R2o=r(dZr,"VanModel"),dZr.forEach(t),P2o=r(K0e," (VAN model)"),K0e.forEach(t),B2o=i($),wu=n($,"LI",{});var Z0e=s(wu);tle=n(Z0e,"STRONG",{});var cZr=s(tle);I2o=r(cZr,"vilt"),cZr.forEach(t),q2o=r(Z0e," \u2014 "),kq=n(Z0e,"A",{href:!0});var fZr=s(kq);N2o=r(fZr,"ViltModel"),fZr.forEach(t),j2o=r(Z0e," (ViLT model)"),Z0e.forEach(t),D2o=i($),Au=n($,"LI",{});var eye=s(Au);ale=n(eye,"STRONG",{});var mZr=s(ale);G2o=r(mZr,"vision-text-dual-encoder"),mZr.forEach(t),O2o=r(eye," \u2014 "),Sq=n(eye,"A",{href:!0});var gZr=s(Sq);V2o=r(gZr,"VisionTextDualEncoderModel"),gZr.forEach(t),X2o=r(eye," (VisionTextDualEncoder model)"),eye.forEach(t),z2o=i($),yu=n($,"LI",{});var oye=s(yu);nle=n(oye,"STRONG",{});var hZr=s(nle);W2o=r(hZr,"visual_bert"),hZr.forEach(t),Q2o=r(oye," \u2014 "),Rq=n(oye,"A",{href:!0});var pZr=s(Rq);H2o=r(pZr,"VisualBertModel"),pZr.forEach(t),U2o=r(oye," (VisualBert model)"),oye.forEach(t),J2o=i($),Lu=n($,"LI",{});var rye=s(Lu);sle=n(rye,"STRONG",{});var uZr=s(sle);Y2o=r(uZr,"vit"),uZr.forEach(t),K2o=r(rye," \u2014 "),Pq=n(rye,"A",{href:!0});var _Zr=s(Pq);Z2o=r(_Zr,"ViTModel"),_Zr.forEach(t),e4o=r(rye," (ViT model)"),rye.forEach(t),o4o=i($),xu=n($,"LI",{});var tye=s(xu);lle=n(tye,"STRONG",{});var bZr=s(lle);r4o=r(bZr,"vit_mae"),bZr.forEach(t),t4o=r(tye," \u2014 "),Bq=n(tye,"A",{href:!0});var vZr=s(Bq);a4o=r(vZr,"ViTMAEModel"),vZr.forEach(t),n4o=r(tye," (ViTMAE model)"),tye.forEach(t),s4o=i($),$u=n($,"LI",{});var aye=s($u);ile=n(aye,"STRONG",{});var FZr=s(ile);l4o=r(FZr,"wav2vec2"),FZr.forEach(t),i4o=r(aye," \u2014 "),Iq=n(aye,"A",{href:!0});var TZr=s(Iq);d4o=r(TZr,"Wav2Vec2Model"),TZr.forEach(t),c4o=r(aye," (Wav2Vec2 model)"),aye.forEach(t),f4o=i($),ku=n($,"LI",{});var nye=s(ku);dle=n(nye,"STRONG",{});var MZr=s(dle);m4o=r(MZr,"wav2vec2-conformer"),MZr.forEach(t),g4o=r(nye," \u2014 "),qq=n(nye,"A",{href:!0});var EZr=s(qq);h4o=r(EZr,"Wav2Vec2ConformerModel"),EZr.forEach(t),p4o=r(nye," (Wav2Vec2-Conformer model)"),nye.forEach(t),u4o=i($),Su=n($,"LI",{});var sye=s(Su);cle=n(sye,"STRONG",{});var CZr=s(cle);_4o=r(CZr,"wavlm"),CZr.forEach(t),b4o=r(sye," \u2014 "),Nq=n(sye,"A",{href:!0});var wZr=s(Nq);v4o=r(wZr,"WavLMModel"),wZr.forEach(t),F4o=r(sye," (WavLM model)"),sye.forEach(t),T4o=i($),Ru=n($,"LI",{});var lye=s(Ru);fle=n(lye,"STRONG",{});var AZr=s(fle);M4o=r(AZr,"xglm"),AZr.forEach(t),E4o=r(lye," \u2014 "),jq=n(lye,"A",{href:!0});var yZr=s(jq);C4o=r(yZr,"XGLMModel"),yZr.forEach(t),w4o=r(lye," (XGLM model)"),lye.forEach(t),A4o=i($),Pu=n($,"LI",{});var iye=s(Pu);mle=n(iye,"STRONG",{});var LZr=s(mle);y4o=r(LZr,"xlm"),LZr.forEach(t),L4o=r(iye," \u2014 "),Dq=n(iye,"A",{href:!0});var xZr=s(Dq);x4o=r(xZr,"XLMModel"),xZr.forEach(t),$4o=r(iye," (XLM model)"),iye.forEach(t),k4o=i($),Bu=n($,"LI",{});var dye=s(Bu);gle=n(dye,"STRONG",{});var $Zr=s(gle);S4o=r($Zr,"xlm-prophetnet"),$Zr.forEach(t),R4o=r(dye," \u2014 "),Gq=n(dye,"A",{href:!0});var kZr=s(Gq);P4o=r(kZr,"XLMProphetNetModel"),kZr.forEach(t),B4o=r(dye," (XLMProphetNet model)"),dye.forEach(t),I4o=i($),Iu=n($,"LI",{});var cye=s(Iu);hle=n(cye,"STRONG",{});var SZr=s(hle);q4o=r(SZr,"xlm-roberta"),SZr.forEach(t),N4o=r(cye," \u2014 "),Oq=n(cye,"A",{href:!0});var RZr=s(Oq);j4o=r(RZr,"XLMRobertaModel"),RZr.forEach(t),D4o=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),G4o=i($),qu=n($,"LI",{});var fye=s(qu);ple=n(fye,"STRONG",{});var PZr=s(ple);O4o=r(PZr,"xlm-roberta-xl"),PZr.forEach(t),V4o=r(fye," \u2014 "),Vq=n(fye,"A",{href:!0});var BZr=s(Vq);X4o=r(BZr,"XLMRobertaXLModel"),BZr.forEach(t),z4o=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),W4o=i($),Nu=n($,"LI",{});var mye=s(Nu);ule=n(mye,"STRONG",{});var IZr=s(ule);Q4o=r(IZr,"xlnet"),IZr.forEach(t),H4o=r(mye," \u2014 "),Xq=n(mye,"A",{href:!0});var qZr=s(Xq);U4o=r(qZr,"XLNetModel"),qZr.forEach(t),J4o=r(mye," (XLNet model)"),mye.forEach(t),Y4o=i($),ju=n($,"LI",{});var gye=s(ju);_le=n(gye,"STRONG",{});var NZr=s(_le);K4o=r(NZr,"yolos"),NZr.forEach(t),Z4o=r(gye," \u2014 "),zq=n(gye,"A",{href:!0});var jZr=s(zq);e5o=r(jZr,"YolosModel"),jZr.forEach(t),o5o=r(gye," (YOLOS model)"),gye.forEach(t),r5o=i($),Du=n($,"LI",{});var hye=s(Du);ble=n(hye,"STRONG",{});var DZr=s(ble);t5o=r(DZr,"yoso"),DZr.forEach(t),a5o=r(hye," \u2014 "),Wq=n(hye,"A",{href:!0});var GZr=s(Wq);n5o=r(GZr,"YosoModel"),GZr.forEach(t),s5o=r(hye," (YOSO model)"),hye.forEach(t),$.forEach(t),l5o=i(oa),Gu=n(oa,"P",{});var pye=s(Gu);i5o=r(pye,"The model is set in evaluation mode by default using "),vle=n(pye,"CODE",{});var OZr=s(vle);d5o=r(OZr,"model.eval()"),OZr.forEach(t),c5o=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(pye,"CODE",{});var VZr=s(Fle);f5o=r(VZr,"model.train()"),VZr.forEach(t),pye.forEach(t),m5o=i(oa),T(Ou.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),HIe=i(f),yi=n(f,"H2",{class:!0});var KNe=s(yi);Vu=n(KNe,"A",{id:!0,class:!0,href:!0});var XZr=s(Vu);Tle=n(XZr,"SPAN",{});var zZr=s(Tle);T(Dy.$$.fragment,zZr),zZr.forEach(t),XZr.forEach(t),g5o=i(KNe),Mle=n(KNe,"SPAN",{});var WZr=s(Mle);h5o=r(WZr,"AutoModelForPreTraining"),WZr.forEach(t),KNe.forEach(t),UIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(Gy.$$.fragment,Gs),p5o=i(Gs),Li=n(Gs,"P",{});var RK=s(Li);u5o=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qq=n(RK,"A",{href:!0});var QZr=s(Qq);_5o=r(QZr,"from_pretrained()"),QZr.forEach(t),b5o=r(RK," class method or the "),Hq=n(RK,"A",{href:!0});var HZr=s(Hq);v5o=r(HZr,"from_config()"),HZr.forEach(t),F5o=r(RK,` class
method.`),RK.forEach(t),T5o=i(Gs),Oy=n(Gs,"P",{});var ZNe=s(Oy);M5o=r(ZNe,"This class cannot be instantiated directly using "),Ele=n(ZNe,"CODE",{});var UZr=s(Ele);E5o=r(UZr,"__init__()"),UZr.forEach(t),C5o=r(ZNe," (throws an error)."),ZNe.forEach(t),w5o=i(Gs),at=n(Gs,"DIV",{class:!0});var pA=s(at);T(Vy.$$.fragment,pA),A5o=i(pA),Cle=n(pA,"P",{});var JZr=s(Cle);y5o=r(JZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JZr.forEach(t),L5o=i(pA),xi=n(pA,"P",{});var PK=s(xi);x5o=r(PK,`Note:
Loading a model from its configuration file does `),wle=n(PK,"STRONG",{});var YZr=s(wle);$5o=r(YZr,"not"),YZr.forEach(t),k5o=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(PK,"A",{href:!0});var KZr=s(Uq);S5o=r(KZr,"from_pretrained()"),KZr.forEach(t),R5o=r(PK," to load the model weights."),PK.forEach(t),P5o=i(pA),T(Xu.$$.fragment,pA),pA.forEach(t),B5o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Xy.$$.fragment,ra),I5o=i(ra),Ale=n(ra,"P",{});var ZZr=s(Ale);q5o=r(ZZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZZr.forEach(t),N5o=i(ra),xa=n(ra,"P",{});var uA=s(xa);j5o=r(uA,"The model class to instantiate is selected based on the "),yle=n(uA,"CODE",{});var eet=s(yle);D5o=r(eet,"model_type"),eet.forEach(t),G5o=r(uA,` property of the config object (either
passed as an argument or loaded from `),Lle=n(uA,"CODE",{});var oet=s(Lle);O5o=r(oet,"pretrained_model_name_or_path"),oet.forEach(t),V5o=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=n(uA,"CODE",{});var ret=s(xle);X5o=r(ret,"pretrained_model_name_or_path"),ret.forEach(t),z5o=r(uA,":"),uA.forEach(t),W5o=i(ra),G=n(ra,"UL",{});var O=s(G);zu=n(O,"LI",{});var uye=s(zu);$le=n(uye,"STRONG",{});var tet=s($le);Q5o=r(tet,"albert"),tet.forEach(t),H5o=r(uye," \u2014 "),Jq=n(uye,"A",{href:!0});var aet=s(Jq);U5o=r(aet,"AlbertForPreTraining"),aet.forEach(t),J5o=r(uye," (ALBERT model)"),uye.forEach(t),Y5o=i(O),Wu=n(O,"LI",{});var _ye=s(Wu);kle=n(_ye,"STRONG",{});var net=s(kle);K5o=r(net,"bart"),net.forEach(t),Z5o=r(_ye," \u2014 "),Yq=n(_ye,"A",{href:!0});var set=s(Yq);evo=r(set,"BartForConditionalGeneration"),set.forEach(t),ovo=r(_ye," (BART model)"),_ye.forEach(t),rvo=i(O),Qu=n(O,"LI",{});var bye=s(Qu);Sle=n(bye,"STRONG",{});var iet=s(Sle);tvo=r(iet,"bert"),iet.forEach(t),avo=r(bye," \u2014 "),Kq=n(bye,"A",{href:!0});var det=s(Kq);nvo=r(det,"BertForPreTraining"),det.forEach(t),svo=r(bye," (BERT model)"),bye.forEach(t),lvo=i(O),Hu=n(O,"LI",{});var vye=s(Hu);Rle=n(vye,"STRONG",{});var cet=s(Rle);ivo=r(cet,"big_bird"),cet.forEach(t),dvo=r(vye," \u2014 "),Zq=n(vye,"A",{href:!0});var fet=s(Zq);cvo=r(fet,"BigBirdForPreTraining"),fet.forEach(t),fvo=r(vye," (BigBird model)"),vye.forEach(t),mvo=i(O),Uu=n(O,"LI",{});var Fye=s(Uu);Ple=n(Fye,"STRONG",{});var met=s(Ple);gvo=r(met,"camembert"),met.forEach(t),hvo=r(Fye," \u2014 "),eN=n(Fye,"A",{href:!0});var get=s(eN);pvo=r(get,"CamembertForMaskedLM"),get.forEach(t),uvo=r(Fye," (CamemBERT model)"),Fye.forEach(t),_vo=i(O),Ju=n(O,"LI",{});var Tye=s(Ju);Ble=n(Tye,"STRONG",{});var het=s(Ble);bvo=r(het,"ctrl"),het.forEach(t),vvo=r(Tye," \u2014 "),oN=n(Tye,"A",{href:!0});var pet=s(oN);Fvo=r(pet,"CTRLLMHeadModel"),pet.forEach(t),Tvo=r(Tye," (CTRL model)"),Tye.forEach(t),Mvo=i(O),Yu=n(O,"LI",{});var Mye=s(Yu);Ile=n(Mye,"STRONG",{});var uet=s(Ile);Evo=r(uet,"data2vec-text"),uet.forEach(t),Cvo=r(Mye," \u2014 "),rN=n(Mye,"A",{href:!0});var _et=s(rN);wvo=r(_et,"Data2VecTextForMaskedLM"),_et.forEach(t),Avo=r(Mye," (Data2VecText model)"),Mye.forEach(t),yvo=i(O),Ku=n(O,"LI",{});var Eye=s(Ku);qle=n(Eye,"STRONG",{});var bet=s(qle);Lvo=r(bet,"deberta"),bet.forEach(t),xvo=r(Eye," \u2014 "),tN=n(Eye,"A",{href:!0});var vet=s(tN);$vo=r(vet,"DebertaForMaskedLM"),vet.forEach(t),kvo=r(Eye," (DeBERTa model)"),Eye.forEach(t),Svo=i(O),Zu=n(O,"LI",{});var Cye=s(Zu);Nle=n(Cye,"STRONG",{});var Fet=s(Nle);Rvo=r(Fet,"deberta-v2"),Fet.forEach(t),Pvo=r(Cye," \u2014 "),aN=n(Cye,"A",{href:!0});var Tet=s(aN);Bvo=r(Tet,"DebertaV2ForMaskedLM"),Tet.forEach(t),Ivo=r(Cye," (DeBERTa-v2 model)"),Cye.forEach(t),qvo=i(O),e_=n(O,"LI",{});var wye=s(e_);jle=n(wye,"STRONG",{});var Met=s(jle);Nvo=r(Met,"distilbert"),Met.forEach(t),jvo=r(wye," \u2014 "),nN=n(wye,"A",{href:!0});var Eet=s(nN);Dvo=r(Eet,"DistilBertForMaskedLM"),Eet.forEach(t),Gvo=r(wye," (DistilBERT model)"),wye.forEach(t),Ovo=i(O),o_=n(O,"LI",{});var Aye=s(o_);Dle=n(Aye,"STRONG",{});var Cet=s(Dle);Vvo=r(Cet,"electra"),Cet.forEach(t),Xvo=r(Aye," \u2014 "),sN=n(Aye,"A",{href:!0});var wet=s(sN);zvo=r(wet,"ElectraForPreTraining"),wet.forEach(t),Wvo=r(Aye," (ELECTRA model)"),Aye.forEach(t),Qvo=i(O),r_=n(O,"LI",{});var yye=s(r_);Gle=n(yye,"STRONG",{});var Aet=s(Gle);Hvo=r(Aet,"flaubert"),Aet.forEach(t),Uvo=r(yye," \u2014 "),lN=n(yye,"A",{href:!0});var yet=s(lN);Jvo=r(yet,"FlaubertWithLMHeadModel"),yet.forEach(t),Yvo=r(yye," (FlauBERT model)"),yye.forEach(t),Kvo=i(O),t_=n(O,"LI",{});var Lye=s(t_);Ole=n(Lye,"STRONG",{});var Let=s(Ole);Zvo=r(Let,"flava"),Let.forEach(t),e3o=r(Lye," \u2014 "),iN=n(Lye,"A",{href:!0});var xet=s(iN);o3o=r(xet,"FlavaForPreTraining"),xet.forEach(t),r3o=r(Lye," (Flava model)"),Lye.forEach(t),t3o=i(O),a_=n(O,"LI",{});var xye=s(a_);Vle=n(xye,"STRONG",{});var $et=s(Vle);a3o=r($et,"fnet"),$et.forEach(t),n3o=r(xye," \u2014 "),dN=n(xye,"A",{href:!0});var ket=s(dN);s3o=r(ket,"FNetForPreTraining"),ket.forEach(t),l3o=r(xye," (FNet model)"),xye.forEach(t),i3o=i(O),n_=n(O,"LI",{});var $ye=s(n_);Xle=n($ye,"STRONG",{});var Set=s(Xle);d3o=r(Set,"fsmt"),Set.forEach(t),c3o=r($ye," \u2014 "),cN=n($ye,"A",{href:!0});var Ret=s(cN);f3o=r(Ret,"FSMTForConditionalGeneration"),Ret.forEach(t),m3o=r($ye," (FairSeq Machine-Translation model)"),$ye.forEach(t),g3o=i(O),s_=n(O,"LI",{});var kye=s(s_);zle=n(kye,"STRONG",{});var Pet=s(zle);h3o=r(Pet,"funnel"),Pet.forEach(t),p3o=r(kye," \u2014 "),fN=n(kye,"A",{href:!0});var Bet=s(fN);u3o=r(Bet,"FunnelForPreTraining"),Bet.forEach(t),_3o=r(kye," (Funnel Transformer model)"),kye.forEach(t),b3o=i(O),l_=n(O,"LI",{});var Sye=s(l_);Wle=n(Sye,"STRONG",{});var Iet=s(Wle);v3o=r(Iet,"gpt2"),Iet.forEach(t),F3o=r(Sye," \u2014 "),mN=n(Sye,"A",{href:!0});var qet=s(mN);T3o=r(qet,"GPT2LMHeadModel"),qet.forEach(t),M3o=r(Sye," (OpenAI GPT-2 model)"),Sye.forEach(t),E3o=i(O),i_=n(O,"LI",{});var Rye=s(i_);Qle=n(Rye,"STRONG",{});var Net=s(Qle);C3o=r(Net,"ibert"),Net.forEach(t),w3o=r(Rye," \u2014 "),gN=n(Rye,"A",{href:!0});var jet=s(gN);A3o=r(jet,"IBertForMaskedLM"),jet.forEach(t),y3o=r(Rye," (I-BERT model)"),Rye.forEach(t),L3o=i(O),d_=n(O,"LI",{});var Pye=s(d_);Hle=n(Pye,"STRONG",{});var Det=s(Hle);x3o=r(Det,"layoutlm"),Det.forEach(t),$3o=r(Pye," \u2014 "),hN=n(Pye,"A",{href:!0});var Get=s(hN);k3o=r(Get,"LayoutLMForMaskedLM"),Get.forEach(t),S3o=r(Pye," (LayoutLM model)"),Pye.forEach(t),R3o=i(O),c_=n(O,"LI",{});var Bye=s(c_);Ule=n(Bye,"STRONG",{});var Oet=s(Ule);P3o=r(Oet,"longformer"),Oet.forEach(t),B3o=r(Bye," \u2014 "),pN=n(Bye,"A",{href:!0});var Vet=s(pN);I3o=r(Vet,"LongformerForMaskedLM"),Vet.forEach(t),q3o=r(Bye," (Longformer model)"),Bye.forEach(t),N3o=i(O),f_=n(O,"LI",{});var Iye=s(f_);Jle=n(Iye,"STRONG",{});var Xet=s(Jle);j3o=r(Xet,"lxmert"),Xet.forEach(t),D3o=r(Iye," \u2014 "),uN=n(Iye,"A",{href:!0});var zet=s(uN);G3o=r(zet,"LxmertForPreTraining"),zet.forEach(t),O3o=r(Iye," (LXMERT model)"),Iye.forEach(t),V3o=i(O),m_=n(O,"LI",{});var qye=s(m_);Yle=n(qye,"STRONG",{});var Wet=s(Yle);X3o=r(Wet,"megatron-bert"),Wet.forEach(t),z3o=r(qye," \u2014 "),_N=n(qye,"A",{href:!0});var Qet=s(_N);W3o=r(Qet,"MegatronBertForPreTraining"),Qet.forEach(t),Q3o=r(qye," (MegatronBert model)"),qye.forEach(t),H3o=i(O),g_=n(O,"LI",{});var Nye=s(g_);Kle=n(Nye,"STRONG",{});var Het=s(Kle);U3o=r(Het,"mobilebert"),Het.forEach(t),J3o=r(Nye," \u2014 "),bN=n(Nye,"A",{href:!0});var Uet=s(bN);Y3o=r(Uet,"MobileBertForPreTraining"),Uet.forEach(t),K3o=r(Nye," (MobileBERT model)"),Nye.forEach(t),Z3o=i(O),h_=n(O,"LI",{});var jye=s(h_);Zle=n(jye,"STRONG",{});var Jet=s(Zle);eFo=r(Jet,"mpnet"),Jet.forEach(t),oFo=r(jye," \u2014 "),vN=n(jye,"A",{href:!0});var Yet=s(vN);rFo=r(Yet,"MPNetForMaskedLM"),Yet.forEach(t),tFo=r(jye," (MPNet model)"),jye.forEach(t),aFo=i(O),p_=n(O,"LI",{});var Dye=s(p_);eie=n(Dye,"STRONG",{});var Ket=s(eie);nFo=r(Ket,"openai-gpt"),Ket.forEach(t),sFo=r(Dye," \u2014 "),FN=n(Dye,"A",{href:!0});var Zet=s(FN);lFo=r(Zet,"OpenAIGPTLMHeadModel"),Zet.forEach(t),iFo=r(Dye," (OpenAI GPT model)"),Dye.forEach(t),dFo=i(O),u_=n(O,"LI",{});var Gye=s(u_);oie=n(Gye,"STRONG",{});var eot=s(oie);cFo=r(eot,"retribert"),eot.forEach(t),fFo=r(Gye," \u2014 "),TN=n(Gye,"A",{href:!0});var oot=s(TN);mFo=r(oot,"RetriBertModel"),oot.forEach(t),gFo=r(Gye," (RetriBERT model)"),Gye.forEach(t),hFo=i(O),__=n(O,"LI",{});var Oye=s(__);rie=n(Oye,"STRONG",{});var rot=s(rie);pFo=r(rot,"roberta"),rot.forEach(t),uFo=r(Oye," \u2014 "),MN=n(Oye,"A",{href:!0});var tot=s(MN);_Fo=r(tot,"RobertaForMaskedLM"),tot.forEach(t),bFo=r(Oye," (RoBERTa model)"),Oye.forEach(t),vFo=i(O),b_=n(O,"LI",{});var Vye=s(b_);tie=n(Vye,"STRONG",{});var aot=s(tie);FFo=r(aot,"squeezebert"),aot.forEach(t),TFo=r(Vye," \u2014 "),EN=n(Vye,"A",{href:!0});var not=s(EN);MFo=r(not,"SqueezeBertForMaskedLM"),not.forEach(t),EFo=r(Vye," (SqueezeBERT model)"),Vye.forEach(t),CFo=i(O),v_=n(O,"LI",{});var Xye=s(v_);aie=n(Xye,"STRONG",{});var sot=s(aie);wFo=r(sot,"t5"),sot.forEach(t),AFo=r(Xye," \u2014 "),CN=n(Xye,"A",{href:!0});var lot=s(CN);yFo=r(lot,"T5ForConditionalGeneration"),lot.forEach(t),LFo=r(Xye," (T5 model)"),Xye.forEach(t),xFo=i(O),F_=n(O,"LI",{});var zye=s(F_);nie=n(zye,"STRONG",{});var iot=s(nie);$Fo=r(iot,"tapas"),iot.forEach(t),kFo=r(zye," \u2014 "),wN=n(zye,"A",{href:!0});var dot=s(wN);SFo=r(dot,"TapasForMaskedLM"),dot.forEach(t),RFo=r(zye," (TAPAS model)"),zye.forEach(t),PFo=i(O),T_=n(O,"LI",{});var Wye=s(T_);sie=n(Wye,"STRONG",{});var cot=s(sie);BFo=r(cot,"transfo-xl"),cot.forEach(t),IFo=r(Wye," \u2014 "),AN=n(Wye,"A",{href:!0});var fot=s(AN);qFo=r(fot,"TransfoXLLMHeadModel"),fot.forEach(t),NFo=r(Wye," (Transformer-XL model)"),Wye.forEach(t),jFo=i(O),M_=n(O,"LI",{});var Qye=s(M_);lie=n(Qye,"STRONG",{});var mot=s(lie);DFo=r(mot,"unispeech"),mot.forEach(t),GFo=r(Qye," \u2014 "),yN=n(Qye,"A",{href:!0});var got=s(yN);OFo=r(got,"UniSpeechForPreTraining"),got.forEach(t),VFo=r(Qye," (UniSpeech model)"),Qye.forEach(t),XFo=i(O),E_=n(O,"LI",{});var Hye=s(E_);iie=n(Hye,"STRONG",{});var hot=s(iie);zFo=r(hot,"unispeech-sat"),hot.forEach(t),WFo=r(Hye," \u2014 "),LN=n(Hye,"A",{href:!0});var pot=s(LN);QFo=r(pot,"UniSpeechSatForPreTraining"),pot.forEach(t),HFo=r(Hye," (UniSpeechSat model)"),Hye.forEach(t),UFo=i(O),C_=n(O,"LI",{});var Uye=s(C_);die=n(Uye,"STRONG",{});var uot=s(die);JFo=r(uot,"visual_bert"),uot.forEach(t),YFo=r(Uye," \u2014 "),xN=n(Uye,"A",{href:!0});var _ot=s(xN);KFo=r(_ot,"VisualBertForPreTraining"),_ot.forEach(t),ZFo=r(Uye," (VisualBert model)"),Uye.forEach(t),e6o=i(O),w_=n(O,"LI",{});var Jye=s(w_);cie=n(Jye,"STRONG",{});var bot=s(cie);o6o=r(bot,"vit_mae"),bot.forEach(t),r6o=r(Jye," \u2014 "),$N=n(Jye,"A",{href:!0});var vot=s($N);t6o=r(vot,"ViTMAEForPreTraining"),vot.forEach(t),a6o=r(Jye," (ViTMAE model)"),Jye.forEach(t),n6o=i(O),A_=n(O,"LI",{});var Yye=s(A_);fie=n(Yye,"STRONG",{});var Fot=s(fie);s6o=r(Fot,"wav2vec2"),Fot.forEach(t),l6o=r(Yye," \u2014 "),kN=n(Yye,"A",{href:!0});var Tot=s(kN);i6o=r(Tot,"Wav2Vec2ForPreTraining"),Tot.forEach(t),d6o=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),c6o=i(O),y_=n(O,"LI",{});var Kye=s(y_);mie=n(Kye,"STRONG",{});var Mot=s(mie);f6o=r(Mot,"wav2vec2-conformer"),Mot.forEach(t),m6o=r(Kye," \u2014 "),SN=n(Kye,"A",{href:!0});var Eot=s(SN);g6o=r(Eot,"Wav2Vec2ConformerForPreTraining"),Eot.forEach(t),h6o=r(Kye," (Wav2Vec2-Conformer model)"),Kye.forEach(t),p6o=i(O),L_=n(O,"LI",{});var Zye=s(L_);gie=n(Zye,"STRONG",{});var Cot=s(gie);u6o=r(Cot,"xlm"),Cot.forEach(t),_6o=r(Zye," \u2014 "),RN=n(Zye,"A",{href:!0});var wot=s(RN);b6o=r(wot,"XLMWithLMHeadModel"),wot.forEach(t),v6o=r(Zye," (XLM model)"),Zye.forEach(t),F6o=i(O),x_=n(O,"LI",{});var eLe=s(x_);hie=n(eLe,"STRONG",{});var Aot=s(hie);T6o=r(Aot,"xlm-roberta"),Aot.forEach(t),M6o=r(eLe," \u2014 "),PN=n(eLe,"A",{href:!0});var yot=s(PN);E6o=r(yot,"XLMRobertaForMaskedLM"),yot.forEach(t),C6o=r(eLe," (XLM-RoBERTa model)"),eLe.forEach(t),w6o=i(O),$_=n(O,"LI",{});var oLe=s($_);pie=n(oLe,"STRONG",{});var Lot=s(pie);A6o=r(Lot,"xlm-roberta-xl"),Lot.forEach(t),y6o=r(oLe," \u2014 "),BN=n(oLe,"A",{href:!0});var xot=s(BN);L6o=r(xot,"XLMRobertaXLForMaskedLM"),xot.forEach(t),x6o=r(oLe," (XLM-RoBERTa-XL model)"),oLe.forEach(t),$6o=i(O),k_=n(O,"LI",{});var rLe=s(k_);uie=n(rLe,"STRONG",{});var $ot=s(uie);k6o=r($ot,"xlnet"),$ot.forEach(t),S6o=r(rLe," \u2014 "),IN=n(rLe,"A",{href:!0});var kot=s(IN);R6o=r(kot,"XLNetLMHeadModel"),kot.forEach(t),P6o=r(rLe," (XLNet model)"),rLe.forEach(t),O.forEach(t),B6o=i(ra),S_=n(ra,"P",{});var tLe=s(S_);I6o=r(tLe,"The model is set in evaluation mode by default using "),_ie=n(tLe,"CODE",{});var Sot=s(_ie);q6o=r(Sot,"model.eval()"),Sot.forEach(t),N6o=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n(tLe,"CODE",{});var Rot=s(bie);j6o=r(Rot,"model.train()"),Rot.forEach(t),tLe.forEach(t),D6o=i(ra),T(R_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),JIe=i(f),$i=n(f,"H2",{class:!0});var eje=s($i);P_=n(eje,"A",{id:!0,class:!0,href:!0});var Pot=s(P_);vie=n(Pot,"SPAN",{});var Bot=s(vie);T(zy.$$.fragment,Bot),Bot.forEach(t),Pot.forEach(t),G6o=i(eje),Fie=n(eje,"SPAN",{});var Iot=s(Fie);O6o=r(Iot,"AutoModelForCausalLM"),Iot.forEach(t),eje.forEach(t),YIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(Wy.$$.fragment,Os),V6o=i(Os),ki=n(Os,"P",{});var BK=s(ki);X6o=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=n(BK,"A",{href:!0});var qot=s(qN);z6o=r(qot,"from_pretrained()"),qot.forEach(t),W6o=r(BK," class method or the "),NN=n(BK,"A",{href:!0});var Not=s(NN);Q6o=r(Not,"from_config()"),Not.forEach(t),H6o=r(BK,` class
method.`),BK.forEach(t),U6o=i(Os),Qy=n(Os,"P",{});var oje=s(Qy);J6o=r(oje,"This class cannot be instantiated directly using "),Tie=n(oje,"CODE",{});var jot=s(Tie);Y6o=r(jot,"__init__()"),jot.forEach(t),K6o=r(oje," (throws an error)."),oje.forEach(t),Z6o=i(Os),nt=n(Os,"DIV",{class:!0});var _A=s(nt);T(Hy.$$.fragment,_A),eTo=i(_A),Mie=n(_A,"P",{});var Dot=s(Mie);oTo=r(Dot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dot.forEach(t),rTo=i(_A),Si=n(_A,"P",{});var IK=s(Si);tTo=r(IK,`Note:
Loading a model from its configuration file does `),Eie=n(IK,"STRONG",{});var Got=s(Eie);aTo=r(Got,"not"),Got.forEach(t),nTo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(IK,"A",{href:!0});var Oot=s(jN);sTo=r(Oot,"from_pretrained()"),Oot.forEach(t),lTo=r(IK," to load the model weights."),IK.forEach(t),iTo=i(_A),T(B_.$$.fragment,_A),_A.forEach(t),dTo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Uy.$$.fragment,ta),cTo=i(ta),Cie=n(ta,"P",{});var Vot=s(Cie);fTo=r(Vot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vot.forEach(t),mTo=i(ta),$a=n(ta,"P",{});var bA=s($a);gTo=r(bA,"The model class to instantiate is selected based on the "),wie=n(bA,"CODE",{});var Xot=s(wie);hTo=r(Xot,"model_type"),Xot.forEach(t),pTo=r(bA,` property of the config object (either
passed as an argument or loaded from `),Aie=n(bA,"CODE",{});var zot=s(Aie);uTo=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),_To=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(bA,"CODE",{});var Wot=s(yie);bTo=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),vTo=r(bA,":"),bA.forEach(t),FTo=i(ta),z=n(ta,"UL",{});var Q=s(z);I_=n(Q,"LI",{});var aLe=s(I_);Lie=n(aLe,"STRONG",{});var Qot=s(Lie);TTo=r(Qot,"bart"),Qot.forEach(t),MTo=r(aLe," \u2014 "),DN=n(aLe,"A",{href:!0});var Hot=s(DN);ETo=r(Hot,"BartForCausalLM"),Hot.forEach(t),CTo=r(aLe," (BART model)"),aLe.forEach(t),wTo=i(Q),q_=n(Q,"LI",{});var nLe=s(q_);xie=n(nLe,"STRONG",{});var Uot=s(xie);ATo=r(Uot,"bert"),Uot.forEach(t),yTo=r(nLe," \u2014 "),GN=n(nLe,"A",{href:!0});var Jot=s(GN);LTo=r(Jot,"BertLMHeadModel"),Jot.forEach(t),xTo=r(nLe," (BERT model)"),nLe.forEach(t),$To=i(Q),N_=n(Q,"LI",{});var sLe=s(N_);$ie=n(sLe,"STRONG",{});var Yot=s($ie);kTo=r(Yot,"bert-generation"),Yot.forEach(t),STo=r(sLe," \u2014 "),ON=n(sLe,"A",{href:!0});var Kot=s(ON);RTo=r(Kot,"BertGenerationDecoder"),Kot.forEach(t),PTo=r(sLe," (Bert Generation model)"),sLe.forEach(t),BTo=i(Q),j_=n(Q,"LI",{});var lLe=s(j_);kie=n(lLe,"STRONG",{});var Zot=s(kie);ITo=r(Zot,"big_bird"),Zot.forEach(t),qTo=r(lLe," \u2014 "),VN=n(lLe,"A",{href:!0});var ert=s(VN);NTo=r(ert,"BigBirdForCausalLM"),ert.forEach(t),jTo=r(lLe," (BigBird model)"),lLe.forEach(t),DTo=i(Q),D_=n(Q,"LI",{});var iLe=s(D_);Sie=n(iLe,"STRONG",{});var ort=s(Sie);GTo=r(ort,"bigbird_pegasus"),ort.forEach(t),OTo=r(iLe," \u2014 "),XN=n(iLe,"A",{href:!0});var rrt=s(XN);VTo=r(rrt,"BigBirdPegasusForCausalLM"),rrt.forEach(t),XTo=r(iLe," (BigBirdPegasus model)"),iLe.forEach(t),zTo=i(Q),G_=n(Q,"LI",{});var dLe=s(G_);Rie=n(dLe,"STRONG",{});var trt=s(Rie);WTo=r(trt,"blenderbot"),trt.forEach(t),QTo=r(dLe," \u2014 "),zN=n(dLe,"A",{href:!0});var art=s(zN);HTo=r(art,"BlenderbotForCausalLM"),art.forEach(t),UTo=r(dLe," (Blenderbot model)"),dLe.forEach(t),JTo=i(Q),O_=n(Q,"LI",{});var cLe=s(O_);Pie=n(cLe,"STRONG",{});var nrt=s(Pie);YTo=r(nrt,"blenderbot-small"),nrt.forEach(t),KTo=r(cLe," \u2014 "),WN=n(cLe,"A",{href:!0});var srt=s(WN);ZTo=r(srt,"BlenderbotSmallForCausalLM"),srt.forEach(t),eMo=r(cLe," (BlenderbotSmall model)"),cLe.forEach(t),oMo=i(Q),V_=n(Q,"LI",{});var fLe=s(V_);Bie=n(fLe,"STRONG",{});var lrt=s(Bie);rMo=r(lrt,"camembert"),lrt.forEach(t),tMo=r(fLe," \u2014 "),QN=n(fLe,"A",{href:!0});var irt=s(QN);aMo=r(irt,"CamembertForCausalLM"),irt.forEach(t),nMo=r(fLe," (CamemBERT model)"),fLe.forEach(t),sMo=i(Q),X_=n(Q,"LI",{});var mLe=s(X_);Iie=n(mLe,"STRONG",{});var drt=s(Iie);lMo=r(drt,"ctrl"),drt.forEach(t),iMo=r(mLe," \u2014 "),HN=n(mLe,"A",{href:!0});var crt=s(HN);dMo=r(crt,"CTRLLMHeadModel"),crt.forEach(t),cMo=r(mLe," (CTRL model)"),mLe.forEach(t),fMo=i(Q),z_=n(Q,"LI",{});var gLe=s(z_);qie=n(gLe,"STRONG",{});var frt=s(qie);mMo=r(frt,"data2vec-text"),frt.forEach(t),gMo=r(gLe," \u2014 "),UN=n(gLe,"A",{href:!0});var mrt=s(UN);hMo=r(mrt,"Data2VecTextForCausalLM"),mrt.forEach(t),pMo=r(gLe," (Data2VecText model)"),gLe.forEach(t),uMo=i(Q),W_=n(Q,"LI",{});var hLe=s(W_);Nie=n(hLe,"STRONG",{});var grt=s(Nie);_Mo=r(grt,"electra"),grt.forEach(t),bMo=r(hLe," \u2014 "),JN=n(hLe,"A",{href:!0});var hrt=s(JN);vMo=r(hrt,"ElectraForCausalLM"),hrt.forEach(t),FMo=r(hLe," (ELECTRA model)"),hLe.forEach(t),TMo=i(Q),Q_=n(Q,"LI",{});var pLe=s(Q_);jie=n(pLe,"STRONG",{});var prt=s(jie);MMo=r(prt,"gpt2"),prt.forEach(t),EMo=r(pLe," \u2014 "),YN=n(pLe,"A",{href:!0});var urt=s(YN);CMo=r(urt,"GPT2LMHeadModel"),urt.forEach(t),wMo=r(pLe," (OpenAI GPT-2 model)"),pLe.forEach(t),AMo=i(Q),H_=n(Q,"LI",{});var uLe=s(H_);Die=n(uLe,"STRONG",{});var _rt=s(Die);yMo=r(_rt,"gpt_neo"),_rt.forEach(t),LMo=r(uLe," \u2014 "),KN=n(uLe,"A",{href:!0});var brt=s(KN);xMo=r(brt,"GPTNeoForCausalLM"),brt.forEach(t),$Mo=r(uLe," (GPT Neo model)"),uLe.forEach(t),kMo=i(Q),U_=n(Q,"LI",{});var _Le=s(U_);Gie=n(_Le,"STRONG",{});var vrt=s(Gie);SMo=r(vrt,"gptj"),vrt.forEach(t),RMo=r(_Le," \u2014 "),ZN=n(_Le,"A",{href:!0});var Frt=s(ZN);PMo=r(Frt,"GPTJForCausalLM"),Frt.forEach(t),BMo=r(_Le," (GPT-J model)"),_Le.forEach(t),IMo=i(Q),J_=n(Q,"LI",{});var bLe=s(J_);Oie=n(bLe,"STRONG",{});var Trt=s(Oie);qMo=r(Trt,"marian"),Trt.forEach(t),NMo=r(bLe," \u2014 "),ej=n(bLe,"A",{href:!0});var Mrt=s(ej);jMo=r(Mrt,"MarianForCausalLM"),Mrt.forEach(t),DMo=r(bLe," (Marian model)"),bLe.forEach(t),GMo=i(Q),Y_=n(Q,"LI",{});var vLe=s(Y_);Vie=n(vLe,"STRONG",{});var Ert=s(Vie);OMo=r(Ert,"mbart"),Ert.forEach(t),VMo=r(vLe," \u2014 "),oj=n(vLe,"A",{href:!0});var Crt=s(oj);XMo=r(Crt,"MBartForCausalLM"),Crt.forEach(t),zMo=r(vLe," (mBART model)"),vLe.forEach(t),WMo=i(Q),K_=n(Q,"LI",{});var FLe=s(K_);Xie=n(FLe,"STRONG",{});var wrt=s(Xie);QMo=r(wrt,"megatron-bert"),wrt.forEach(t),HMo=r(FLe," \u2014 "),rj=n(FLe,"A",{href:!0});var Art=s(rj);UMo=r(Art,"MegatronBertForCausalLM"),Art.forEach(t),JMo=r(FLe," (MegatronBert model)"),FLe.forEach(t),YMo=i(Q),Z_=n(Q,"LI",{});var TLe=s(Z_);zie=n(TLe,"STRONG",{});var yrt=s(zie);KMo=r(yrt,"openai-gpt"),yrt.forEach(t),ZMo=r(TLe," \u2014 "),tj=n(TLe,"A",{href:!0});var Lrt=s(tj);eEo=r(Lrt,"OpenAIGPTLMHeadModel"),Lrt.forEach(t),oEo=r(TLe," (OpenAI GPT model)"),TLe.forEach(t),rEo=i(Q),e1=n(Q,"LI",{});var MLe=s(e1);Wie=n(MLe,"STRONG",{});var xrt=s(Wie);tEo=r(xrt,"opt"),xrt.forEach(t),aEo=r(MLe," \u2014 "),aj=n(MLe,"A",{href:!0});var $rt=s(aj);nEo=r($rt,"OPTForCausalLM"),$rt.forEach(t),sEo=r(MLe," (OPT model)"),MLe.forEach(t),lEo=i(Q),o1=n(Q,"LI",{});var ELe=s(o1);Qie=n(ELe,"STRONG",{});var krt=s(Qie);iEo=r(krt,"pegasus"),krt.forEach(t),dEo=r(ELe," \u2014 "),nj=n(ELe,"A",{href:!0});var Srt=s(nj);cEo=r(Srt,"PegasusForCausalLM"),Srt.forEach(t),fEo=r(ELe," (Pegasus model)"),ELe.forEach(t),mEo=i(Q),r1=n(Q,"LI",{});var CLe=s(r1);Hie=n(CLe,"STRONG",{});var Rrt=s(Hie);gEo=r(Rrt,"plbart"),Rrt.forEach(t),hEo=r(CLe," \u2014 "),sj=n(CLe,"A",{href:!0});var Prt=s(sj);pEo=r(Prt,"PLBartForCausalLM"),Prt.forEach(t),uEo=r(CLe," (PLBart model)"),CLe.forEach(t),_Eo=i(Q),t1=n(Q,"LI",{});var wLe=s(t1);Uie=n(wLe,"STRONG",{});var Brt=s(Uie);bEo=r(Brt,"prophetnet"),Brt.forEach(t),vEo=r(wLe," \u2014 "),lj=n(wLe,"A",{href:!0});var Irt=s(lj);FEo=r(Irt,"ProphetNetForCausalLM"),Irt.forEach(t),TEo=r(wLe," (ProphetNet model)"),wLe.forEach(t),MEo=i(Q),a1=n(Q,"LI",{});var ALe=s(a1);Jie=n(ALe,"STRONG",{});var qrt=s(Jie);EEo=r(qrt,"qdqbert"),qrt.forEach(t),CEo=r(ALe," \u2014 "),ij=n(ALe,"A",{href:!0});var Nrt=s(ij);wEo=r(Nrt,"QDQBertLMHeadModel"),Nrt.forEach(t),AEo=r(ALe," (QDQBert model)"),ALe.forEach(t),yEo=i(Q),n1=n(Q,"LI",{});var yLe=s(n1);Yie=n(yLe,"STRONG",{});var jrt=s(Yie);LEo=r(jrt,"reformer"),jrt.forEach(t),xEo=r(yLe," \u2014 "),dj=n(yLe,"A",{href:!0});var Drt=s(dj);$Eo=r(Drt,"ReformerModelWithLMHead"),Drt.forEach(t),kEo=r(yLe," (Reformer model)"),yLe.forEach(t),SEo=i(Q),s1=n(Q,"LI",{});var LLe=s(s1);Kie=n(LLe,"STRONG",{});var Grt=s(Kie);REo=r(Grt,"rembert"),Grt.forEach(t),PEo=r(LLe," \u2014 "),cj=n(LLe,"A",{href:!0});var Ort=s(cj);BEo=r(Ort,"RemBertForCausalLM"),Ort.forEach(t),IEo=r(LLe," (RemBERT model)"),LLe.forEach(t),qEo=i(Q),l1=n(Q,"LI",{});var xLe=s(l1);Zie=n(xLe,"STRONG",{});var Vrt=s(Zie);NEo=r(Vrt,"roberta"),Vrt.forEach(t),jEo=r(xLe," \u2014 "),fj=n(xLe,"A",{href:!0});var Xrt=s(fj);DEo=r(Xrt,"RobertaForCausalLM"),Xrt.forEach(t),GEo=r(xLe," (RoBERTa model)"),xLe.forEach(t),OEo=i(Q),i1=n(Q,"LI",{});var $Le=s(i1);ede=n($Le,"STRONG",{});var zrt=s(ede);VEo=r(zrt,"roformer"),zrt.forEach(t),XEo=r($Le," \u2014 "),mj=n($Le,"A",{href:!0});var Wrt=s(mj);zEo=r(Wrt,"RoFormerForCausalLM"),Wrt.forEach(t),WEo=r($Le," (RoFormer model)"),$Le.forEach(t),QEo=i(Q),d1=n(Q,"LI",{});var kLe=s(d1);ode=n(kLe,"STRONG",{});var Qrt=s(ode);HEo=r(Qrt,"speech_to_text_2"),Qrt.forEach(t),UEo=r(kLe," \u2014 "),gj=n(kLe,"A",{href:!0});var Hrt=s(gj);JEo=r(Hrt,"Speech2Text2ForCausalLM"),Hrt.forEach(t),YEo=r(kLe," (Speech2Text2 model)"),kLe.forEach(t),KEo=i(Q),c1=n(Q,"LI",{});var SLe=s(c1);rde=n(SLe,"STRONG",{});var Urt=s(rde);ZEo=r(Urt,"transfo-xl"),Urt.forEach(t),eCo=r(SLe," \u2014 "),hj=n(SLe,"A",{href:!0});var Jrt=s(hj);oCo=r(Jrt,"TransfoXLLMHeadModel"),Jrt.forEach(t),rCo=r(SLe," (Transformer-XL model)"),SLe.forEach(t),tCo=i(Q),f1=n(Q,"LI",{});var RLe=s(f1);tde=n(RLe,"STRONG",{});var Yrt=s(tde);aCo=r(Yrt,"trocr"),Yrt.forEach(t),nCo=r(RLe," \u2014 "),pj=n(RLe,"A",{href:!0});var Krt=s(pj);sCo=r(Krt,"TrOCRForCausalLM"),Krt.forEach(t),lCo=r(RLe," (TrOCR model)"),RLe.forEach(t),iCo=i(Q),m1=n(Q,"LI",{});var PLe=s(m1);ade=n(PLe,"STRONG",{});var Zrt=s(ade);dCo=r(Zrt,"xglm"),Zrt.forEach(t),cCo=r(PLe," \u2014 "),uj=n(PLe,"A",{href:!0});var ett=s(uj);fCo=r(ett,"XGLMForCausalLM"),ett.forEach(t),mCo=r(PLe," (XGLM model)"),PLe.forEach(t),gCo=i(Q),g1=n(Q,"LI",{});var BLe=s(g1);nde=n(BLe,"STRONG",{});var ott=s(nde);hCo=r(ott,"xlm"),ott.forEach(t),pCo=r(BLe," \u2014 "),_j=n(BLe,"A",{href:!0});var rtt=s(_j);uCo=r(rtt,"XLMWithLMHeadModel"),rtt.forEach(t),_Co=r(BLe," (XLM model)"),BLe.forEach(t),bCo=i(Q),h1=n(Q,"LI",{});var ILe=s(h1);sde=n(ILe,"STRONG",{});var ttt=s(sde);vCo=r(ttt,"xlm-prophetnet"),ttt.forEach(t),FCo=r(ILe," \u2014 "),bj=n(ILe,"A",{href:!0});var att=s(bj);TCo=r(att,"XLMProphetNetForCausalLM"),att.forEach(t),MCo=r(ILe," (XLMProphetNet model)"),ILe.forEach(t),ECo=i(Q),p1=n(Q,"LI",{});var qLe=s(p1);lde=n(qLe,"STRONG",{});var ntt=s(lde);CCo=r(ntt,"xlm-roberta"),ntt.forEach(t),wCo=r(qLe," \u2014 "),vj=n(qLe,"A",{href:!0});var stt=s(vj);ACo=r(stt,"XLMRobertaForCausalLM"),stt.forEach(t),yCo=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),LCo=i(Q),u1=n(Q,"LI",{});var NLe=s(u1);ide=n(NLe,"STRONG",{});var ltt=s(ide);xCo=r(ltt,"xlm-roberta-xl"),ltt.forEach(t),$Co=r(NLe," \u2014 "),Fj=n(NLe,"A",{href:!0});var itt=s(Fj);kCo=r(itt,"XLMRobertaXLForCausalLM"),itt.forEach(t),SCo=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),RCo=i(Q),_1=n(Q,"LI",{});var jLe=s(_1);dde=n(jLe,"STRONG",{});var dtt=s(dde);PCo=r(dtt,"xlnet"),dtt.forEach(t),BCo=r(jLe," \u2014 "),Tj=n(jLe,"A",{href:!0});var ctt=s(Tj);ICo=r(ctt,"XLNetLMHeadModel"),ctt.forEach(t),qCo=r(jLe," (XLNet model)"),jLe.forEach(t),Q.forEach(t),NCo=i(ta),b1=n(ta,"P",{});var DLe=s(b1);jCo=r(DLe,"The model is set in evaluation mode by default using "),cde=n(DLe,"CODE",{});var ftt=s(cde);DCo=r(ftt,"model.eval()"),ftt.forEach(t),GCo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(DLe,"CODE",{});var mtt=s(fde);OCo=r(mtt,"model.train()"),mtt.forEach(t),DLe.forEach(t),VCo=i(ta),T(v1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),KIe=i(f),Ri=n(f,"H2",{class:!0});var rje=s(Ri);F1=n(rje,"A",{id:!0,class:!0,href:!0});var gtt=s(F1);mde=n(gtt,"SPAN",{});var htt=s(mde);T(Jy.$$.fragment,htt),htt.forEach(t),gtt.forEach(t),XCo=i(rje),gde=n(rje,"SPAN",{});var ptt=s(gde);zCo=r(ptt,"AutoModelForMaskedLM"),ptt.forEach(t),rje.forEach(t),ZIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(Yy.$$.fragment,Vs),WCo=i(Vs),Pi=n(Vs,"P",{});var qK=s(Pi);QCo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=n(qK,"A",{href:!0});var utt=s(Mj);HCo=r(utt,"from_pretrained()"),utt.forEach(t),UCo=r(qK," class method or the "),Ej=n(qK,"A",{href:!0});var _tt=s(Ej);JCo=r(_tt,"from_config()"),_tt.forEach(t),YCo=r(qK,` class
method.`),qK.forEach(t),KCo=i(Vs),Ky=n(Vs,"P",{});var tje=s(Ky);ZCo=r(tje,"This class cannot be instantiated directly using "),hde=n(tje,"CODE",{});var btt=s(hde);ewo=r(btt,"__init__()"),btt.forEach(t),owo=r(tje," (throws an error)."),tje.forEach(t),rwo=i(Vs),st=n(Vs,"DIV",{class:!0});var vA=s(st);T(Zy.$$.fragment,vA),two=i(vA),pde=n(vA,"P",{});var vtt=s(pde);awo=r(vtt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vtt.forEach(t),nwo=i(vA),Bi=n(vA,"P",{});var NK=s(Bi);swo=r(NK,`Note:
Loading a model from its configuration file does `),ude=n(NK,"STRONG",{});var Ftt=s(ude);lwo=r(Ftt,"not"),Ftt.forEach(t),iwo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(NK,"A",{href:!0});var Ttt=s(Cj);dwo=r(Ttt,"from_pretrained()"),Ttt.forEach(t),cwo=r(NK," to load the model weights."),NK.forEach(t),fwo=i(vA),T(T1.$$.fragment,vA),vA.forEach(t),mwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(eL.$$.fragment,aa),gwo=i(aa),_de=n(aa,"P",{});var Mtt=s(_de);hwo=r(Mtt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mtt.forEach(t),pwo=i(aa),ka=n(aa,"P",{});var FA=s(ka);uwo=r(FA,"The model class to instantiate is selected based on the "),bde=n(FA,"CODE",{});var Ett=s(bde);_wo=r(Ett,"model_type"),Ett.forEach(t),bwo=r(FA,` property of the config object (either
passed as an argument or loaded from `),vde=n(FA,"CODE",{});var Ctt=s(vde);vwo=r(Ctt,"pretrained_model_name_or_path"),Ctt.forEach(t),Fwo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(FA,"CODE",{});var wtt=s(Fde);Two=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),Mwo=r(FA,":"),FA.forEach(t),Ewo=i(aa),W=n(aa,"UL",{});var H=s(W);M1=n(H,"LI",{});var GLe=s(M1);Tde=n(GLe,"STRONG",{});var Att=s(Tde);Cwo=r(Att,"albert"),Att.forEach(t),wwo=r(GLe," \u2014 "),wj=n(GLe,"A",{href:!0});var ytt=s(wj);Awo=r(ytt,"AlbertForMaskedLM"),ytt.forEach(t),ywo=r(GLe," (ALBERT model)"),GLe.forEach(t),Lwo=i(H),E1=n(H,"LI",{});var OLe=s(E1);Mde=n(OLe,"STRONG",{});var Ltt=s(Mde);xwo=r(Ltt,"bart"),Ltt.forEach(t),$wo=r(OLe," \u2014 "),Aj=n(OLe,"A",{href:!0});var xtt=s(Aj);kwo=r(xtt,"BartForConditionalGeneration"),xtt.forEach(t),Swo=r(OLe," (BART model)"),OLe.forEach(t),Rwo=i(H),C1=n(H,"LI",{});var VLe=s(C1);Ede=n(VLe,"STRONG",{});var $tt=s(Ede);Pwo=r($tt,"bert"),$tt.forEach(t),Bwo=r(VLe," \u2014 "),yj=n(VLe,"A",{href:!0});var ktt=s(yj);Iwo=r(ktt,"BertForMaskedLM"),ktt.forEach(t),qwo=r(VLe," (BERT model)"),VLe.forEach(t),Nwo=i(H),w1=n(H,"LI",{});var XLe=s(w1);Cde=n(XLe,"STRONG",{});var Stt=s(Cde);jwo=r(Stt,"big_bird"),Stt.forEach(t),Dwo=r(XLe," \u2014 "),Lj=n(XLe,"A",{href:!0});var Rtt=s(Lj);Gwo=r(Rtt,"BigBirdForMaskedLM"),Rtt.forEach(t),Owo=r(XLe," (BigBird model)"),XLe.forEach(t),Vwo=i(H),A1=n(H,"LI",{});var zLe=s(A1);wde=n(zLe,"STRONG",{});var Ptt=s(wde);Xwo=r(Ptt,"camembert"),Ptt.forEach(t),zwo=r(zLe," \u2014 "),xj=n(zLe,"A",{href:!0});var Btt=s(xj);Wwo=r(Btt,"CamembertForMaskedLM"),Btt.forEach(t),Qwo=r(zLe," (CamemBERT model)"),zLe.forEach(t),Hwo=i(H),y1=n(H,"LI",{});var WLe=s(y1);Ade=n(WLe,"STRONG",{});var Itt=s(Ade);Uwo=r(Itt,"convbert"),Itt.forEach(t),Jwo=r(WLe," \u2014 "),$j=n(WLe,"A",{href:!0});var qtt=s($j);Ywo=r(qtt,"ConvBertForMaskedLM"),qtt.forEach(t),Kwo=r(WLe," (ConvBERT model)"),WLe.forEach(t),Zwo=i(H),L1=n(H,"LI",{});var QLe=s(L1);yde=n(QLe,"STRONG",{});var Ntt=s(yde);eAo=r(Ntt,"data2vec-text"),Ntt.forEach(t),oAo=r(QLe," \u2014 "),kj=n(QLe,"A",{href:!0});var jtt=s(kj);rAo=r(jtt,"Data2VecTextForMaskedLM"),jtt.forEach(t),tAo=r(QLe," (Data2VecText model)"),QLe.forEach(t),aAo=i(H),x1=n(H,"LI",{});var HLe=s(x1);Lde=n(HLe,"STRONG",{});var Dtt=s(Lde);nAo=r(Dtt,"deberta"),Dtt.forEach(t),sAo=r(HLe," \u2014 "),Sj=n(HLe,"A",{href:!0});var Gtt=s(Sj);lAo=r(Gtt,"DebertaForMaskedLM"),Gtt.forEach(t),iAo=r(HLe," (DeBERTa model)"),HLe.forEach(t),dAo=i(H),$1=n(H,"LI",{});var ULe=s($1);xde=n(ULe,"STRONG",{});var Ott=s(xde);cAo=r(Ott,"deberta-v2"),Ott.forEach(t),fAo=r(ULe," \u2014 "),Rj=n(ULe,"A",{href:!0});var Vtt=s(Rj);mAo=r(Vtt,"DebertaV2ForMaskedLM"),Vtt.forEach(t),gAo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),hAo=i(H),k1=n(H,"LI",{});var JLe=s(k1);$de=n(JLe,"STRONG",{});var Xtt=s($de);pAo=r(Xtt,"distilbert"),Xtt.forEach(t),uAo=r(JLe," \u2014 "),Pj=n(JLe,"A",{href:!0});var ztt=s(Pj);_Ao=r(ztt,"DistilBertForMaskedLM"),ztt.forEach(t),bAo=r(JLe," (DistilBERT model)"),JLe.forEach(t),vAo=i(H),S1=n(H,"LI",{});var YLe=s(S1);kde=n(YLe,"STRONG",{});var Wtt=s(kde);FAo=r(Wtt,"electra"),Wtt.forEach(t),TAo=r(YLe," \u2014 "),Bj=n(YLe,"A",{href:!0});var Qtt=s(Bj);MAo=r(Qtt,"ElectraForMaskedLM"),Qtt.forEach(t),EAo=r(YLe," (ELECTRA model)"),YLe.forEach(t),CAo=i(H),R1=n(H,"LI",{});var KLe=s(R1);Sde=n(KLe,"STRONG",{});var Htt=s(Sde);wAo=r(Htt,"flaubert"),Htt.forEach(t),AAo=r(KLe," \u2014 "),Ij=n(KLe,"A",{href:!0});var Utt=s(Ij);yAo=r(Utt,"FlaubertWithLMHeadModel"),Utt.forEach(t),LAo=r(KLe," (FlauBERT model)"),KLe.forEach(t),xAo=i(H),P1=n(H,"LI",{});var ZLe=s(P1);Rde=n(ZLe,"STRONG",{});var Jtt=s(Rde);$Ao=r(Jtt,"fnet"),Jtt.forEach(t),kAo=r(ZLe," \u2014 "),qj=n(ZLe,"A",{href:!0});var Ytt=s(qj);SAo=r(Ytt,"FNetForMaskedLM"),Ytt.forEach(t),RAo=r(ZLe," (FNet model)"),ZLe.forEach(t),PAo=i(H),B1=n(H,"LI",{});var e8e=s(B1);Pde=n(e8e,"STRONG",{});var Ktt=s(Pde);BAo=r(Ktt,"funnel"),Ktt.forEach(t),IAo=r(e8e," \u2014 "),Nj=n(e8e,"A",{href:!0});var Ztt=s(Nj);qAo=r(Ztt,"FunnelForMaskedLM"),Ztt.forEach(t),NAo=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),jAo=i(H),I1=n(H,"LI",{});var o8e=s(I1);Bde=n(o8e,"STRONG",{});var eat=s(Bde);DAo=r(eat,"ibert"),eat.forEach(t),GAo=r(o8e," \u2014 "),jj=n(o8e,"A",{href:!0});var oat=s(jj);OAo=r(oat,"IBertForMaskedLM"),oat.forEach(t),VAo=r(o8e," (I-BERT model)"),o8e.forEach(t),XAo=i(H),q1=n(H,"LI",{});var r8e=s(q1);Ide=n(r8e,"STRONG",{});var rat=s(Ide);zAo=r(rat,"layoutlm"),rat.forEach(t),WAo=r(r8e," \u2014 "),Dj=n(r8e,"A",{href:!0});var tat=s(Dj);QAo=r(tat,"LayoutLMForMaskedLM"),tat.forEach(t),HAo=r(r8e," (LayoutLM model)"),r8e.forEach(t),UAo=i(H),N1=n(H,"LI",{});var t8e=s(N1);qde=n(t8e,"STRONG",{});var aat=s(qde);JAo=r(aat,"longformer"),aat.forEach(t),YAo=r(t8e," \u2014 "),Gj=n(t8e,"A",{href:!0});var nat=s(Gj);KAo=r(nat,"LongformerForMaskedLM"),nat.forEach(t),ZAo=r(t8e," (Longformer model)"),t8e.forEach(t),e0o=i(H),j1=n(H,"LI",{});var a8e=s(j1);Nde=n(a8e,"STRONG",{});var sat=s(Nde);o0o=r(sat,"mbart"),sat.forEach(t),r0o=r(a8e," \u2014 "),Oj=n(a8e,"A",{href:!0});var lat=s(Oj);t0o=r(lat,"MBartForConditionalGeneration"),lat.forEach(t),a0o=r(a8e," (mBART model)"),a8e.forEach(t),n0o=i(H),D1=n(H,"LI",{});var n8e=s(D1);jde=n(n8e,"STRONG",{});var iat=s(jde);s0o=r(iat,"megatron-bert"),iat.forEach(t),l0o=r(n8e," \u2014 "),Vj=n(n8e,"A",{href:!0});var dat=s(Vj);i0o=r(dat,"MegatronBertForMaskedLM"),dat.forEach(t),d0o=r(n8e," (MegatronBert model)"),n8e.forEach(t),c0o=i(H),G1=n(H,"LI",{});var s8e=s(G1);Dde=n(s8e,"STRONG",{});var cat=s(Dde);f0o=r(cat,"mobilebert"),cat.forEach(t),m0o=r(s8e," \u2014 "),Xj=n(s8e,"A",{href:!0});var fat=s(Xj);g0o=r(fat,"MobileBertForMaskedLM"),fat.forEach(t),h0o=r(s8e," (MobileBERT model)"),s8e.forEach(t),p0o=i(H),O1=n(H,"LI",{});var l8e=s(O1);Gde=n(l8e,"STRONG",{});var mat=s(Gde);u0o=r(mat,"mpnet"),mat.forEach(t),_0o=r(l8e," \u2014 "),zj=n(l8e,"A",{href:!0});var gat=s(zj);b0o=r(gat,"MPNetForMaskedLM"),gat.forEach(t),v0o=r(l8e," (MPNet model)"),l8e.forEach(t),F0o=i(H),V1=n(H,"LI",{});var i8e=s(V1);Ode=n(i8e,"STRONG",{});var hat=s(Ode);T0o=r(hat,"nystromformer"),hat.forEach(t),M0o=r(i8e," \u2014 "),Wj=n(i8e,"A",{href:!0});var pat=s(Wj);E0o=r(pat,"NystromformerForMaskedLM"),pat.forEach(t),C0o=r(i8e," (Nystromformer model)"),i8e.forEach(t),w0o=i(H),X1=n(H,"LI",{});var d8e=s(X1);Vde=n(d8e,"STRONG",{});var uat=s(Vde);A0o=r(uat,"perceiver"),uat.forEach(t),y0o=r(d8e," \u2014 "),Qj=n(d8e,"A",{href:!0});var _at=s(Qj);L0o=r(_at,"PerceiverForMaskedLM"),_at.forEach(t),x0o=r(d8e," (Perceiver model)"),d8e.forEach(t),$0o=i(H),z1=n(H,"LI",{});var c8e=s(z1);Xde=n(c8e,"STRONG",{});var bat=s(Xde);k0o=r(bat,"qdqbert"),bat.forEach(t),S0o=r(c8e," \u2014 "),Hj=n(c8e,"A",{href:!0});var vat=s(Hj);R0o=r(vat,"QDQBertForMaskedLM"),vat.forEach(t),P0o=r(c8e," (QDQBert model)"),c8e.forEach(t),B0o=i(H),W1=n(H,"LI",{});var f8e=s(W1);zde=n(f8e,"STRONG",{});var Fat=s(zde);I0o=r(Fat,"reformer"),Fat.forEach(t),q0o=r(f8e," \u2014 "),Uj=n(f8e,"A",{href:!0});var Tat=s(Uj);N0o=r(Tat,"ReformerForMaskedLM"),Tat.forEach(t),j0o=r(f8e," (Reformer model)"),f8e.forEach(t),D0o=i(H),Q1=n(H,"LI",{});var m8e=s(Q1);Wde=n(m8e,"STRONG",{});var Mat=s(Wde);G0o=r(Mat,"rembert"),Mat.forEach(t),O0o=r(m8e," \u2014 "),Jj=n(m8e,"A",{href:!0});var Eat=s(Jj);V0o=r(Eat,"RemBertForMaskedLM"),Eat.forEach(t),X0o=r(m8e," (RemBERT model)"),m8e.forEach(t),z0o=i(H),H1=n(H,"LI",{});var g8e=s(H1);Qde=n(g8e,"STRONG",{});var Cat=s(Qde);W0o=r(Cat,"roberta"),Cat.forEach(t),Q0o=r(g8e," \u2014 "),Yj=n(g8e,"A",{href:!0});var wat=s(Yj);H0o=r(wat,"RobertaForMaskedLM"),wat.forEach(t),U0o=r(g8e," (RoBERTa model)"),g8e.forEach(t),J0o=i(H),U1=n(H,"LI",{});var h8e=s(U1);Hde=n(h8e,"STRONG",{});var Aat=s(Hde);Y0o=r(Aat,"roformer"),Aat.forEach(t),K0o=r(h8e," \u2014 "),Kj=n(h8e,"A",{href:!0});var yat=s(Kj);Z0o=r(yat,"RoFormerForMaskedLM"),yat.forEach(t),eyo=r(h8e," (RoFormer model)"),h8e.forEach(t),oyo=i(H),J1=n(H,"LI",{});var p8e=s(J1);Ude=n(p8e,"STRONG",{});var Lat=s(Ude);ryo=r(Lat,"squeezebert"),Lat.forEach(t),tyo=r(p8e," \u2014 "),Zj=n(p8e,"A",{href:!0});var xat=s(Zj);ayo=r(xat,"SqueezeBertForMaskedLM"),xat.forEach(t),nyo=r(p8e," (SqueezeBERT model)"),p8e.forEach(t),syo=i(H),Y1=n(H,"LI",{});var u8e=s(Y1);Jde=n(u8e,"STRONG",{});var $at=s(Jde);lyo=r($at,"tapas"),$at.forEach(t),iyo=r(u8e," \u2014 "),eD=n(u8e,"A",{href:!0});var kat=s(eD);dyo=r(kat,"TapasForMaskedLM"),kat.forEach(t),cyo=r(u8e," (TAPAS model)"),u8e.forEach(t),fyo=i(H),K1=n(H,"LI",{});var _8e=s(K1);Yde=n(_8e,"STRONG",{});var Sat=s(Yde);myo=r(Sat,"wav2vec2"),Sat.forEach(t),gyo=r(_8e," \u2014 "),Kde=n(_8e,"CODE",{});var Rat=s(Kde);hyo=r(Rat,"Wav2Vec2ForMaskedLM"),Rat.forEach(t),pyo=r(_8e," (Wav2Vec2 model)"),_8e.forEach(t),uyo=i(H),Z1=n(H,"LI",{});var b8e=s(Z1);Zde=n(b8e,"STRONG",{});var Pat=s(Zde);_yo=r(Pat,"xlm"),Pat.forEach(t),byo=r(b8e," \u2014 "),oD=n(b8e,"A",{href:!0});var Bat=s(oD);vyo=r(Bat,"XLMWithLMHeadModel"),Bat.forEach(t),Fyo=r(b8e," (XLM model)"),b8e.forEach(t),Tyo=i(H),eb=n(H,"LI",{});var v8e=s(eb);ece=n(v8e,"STRONG",{});var Iat=s(ece);Myo=r(Iat,"xlm-roberta"),Iat.forEach(t),Eyo=r(v8e," \u2014 "),rD=n(v8e,"A",{href:!0});var qat=s(rD);Cyo=r(qat,"XLMRobertaForMaskedLM"),qat.forEach(t),wyo=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),Ayo=i(H),ob=n(H,"LI",{});var F8e=s(ob);oce=n(F8e,"STRONG",{});var Nat=s(oce);yyo=r(Nat,"xlm-roberta-xl"),Nat.forEach(t),Lyo=r(F8e," \u2014 "),tD=n(F8e,"A",{href:!0});var jat=s(tD);xyo=r(jat,"XLMRobertaXLForMaskedLM"),jat.forEach(t),$yo=r(F8e," (XLM-RoBERTa-XL model)"),F8e.forEach(t),kyo=i(H),rb=n(H,"LI",{});var T8e=s(rb);rce=n(T8e,"STRONG",{});var Dat=s(rce);Syo=r(Dat,"yoso"),Dat.forEach(t),Ryo=r(T8e," \u2014 "),aD=n(T8e,"A",{href:!0});var Gat=s(aD);Pyo=r(Gat,"YosoForMaskedLM"),Gat.forEach(t),Byo=r(T8e," (YOSO model)"),T8e.forEach(t),H.forEach(t),Iyo=i(aa),tb=n(aa,"P",{});var M8e=s(tb);qyo=r(M8e,"The model is set in evaluation mode by default using "),tce=n(M8e,"CODE",{});var Oat=s(tce);Nyo=r(Oat,"model.eval()"),Oat.forEach(t),jyo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(M8e,"CODE",{});var Vat=s(ace);Dyo=r(Vat,"model.train()"),Vat.forEach(t),M8e.forEach(t),Gyo=i(aa),T(ab.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),eqe=i(f),Ii=n(f,"H2",{class:!0});var aje=s(Ii);nb=n(aje,"A",{id:!0,class:!0,href:!0});var Xat=s(nb);nce=n(Xat,"SPAN",{});var zat=s(nce);T(oL.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),Oyo=i(aje),sce=n(aje,"SPAN",{});var Wat=s(sce);Vyo=r(Wat,"AutoModelForSeq2SeqLM"),Wat.forEach(t),aje.forEach(t),oqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(rL.$$.fragment,Xs),Xyo=i(Xs),qi=n(Xs,"P",{});var jK=s(qi);zyo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=n(jK,"A",{href:!0});var Qat=s(nD);Wyo=r(Qat,"from_pretrained()"),Qat.forEach(t),Qyo=r(jK," class method or the "),sD=n(jK,"A",{href:!0});var Hat=s(sD);Hyo=r(Hat,"from_config()"),Hat.forEach(t),Uyo=r(jK,` class
method.`),jK.forEach(t),Jyo=i(Xs),tL=n(Xs,"P",{});var nje=s(tL);Yyo=r(nje,"This class cannot be instantiated directly using "),lce=n(nje,"CODE",{});var Uat=s(lce);Kyo=r(Uat,"__init__()"),Uat.forEach(t),Zyo=r(nje," (throws an error)."),nje.forEach(t),eLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var TA=s(lt);T(aL.$$.fragment,TA),oLo=i(TA),ice=n(TA,"P",{});var Jat=s(ice);rLo=r(Jat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jat.forEach(t),tLo=i(TA),Ni=n(TA,"P",{});var DK=s(Ni);aLo=r(DK,`Note:
Loading a model from its configuration file does `),dce=n(DK,"STRONG",{});var Yat=s(dce);nLo=r(Yat,"not"),Yat.forEach(t),sLo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(DK,"A",{href:!0});var Kat=s(lD);lLo=r(Kat,"from_pretrained()"),Kat.forEach(t),iLo=r(DK," to load the model weights."),DK.forEach(t),dLo=i(TA),T(sb.$$.fragment,TA),TA.forEach(t),cLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(nL.$$.fragment,na),fLo=i(na),cce=n(na,"P",{});var Zat=s(cce);mLo=r(Zat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zat.forEach(t),gLo=i(na),Sa=n(na,"P",{});var MA=s(Sa);hLo=r(MA,"The model class to instantiate is selected based on the "),fce=n(MA,"CODE",{});var ent=s(fce);pLo=r(ent,"model_type"),ent.forEach(t),uLo=r(MA,` property of the config object (either
passed as an argument or loaded from `),mce=n(MA,"CODE",{});var ont=s(mce);_Lo=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),bLo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(MA,"CODE",{});var rnt=s(gce);vLo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),FLo=r(MA,":"),MA.forEach(t),TLo=i(na),ue=n(na,"UL",{});var ve=s(ue);lb=n(ve,"LI",{});var E8e=s(lb);hce=n(E8e,"STRONG",{});var tnt=s(hce);MLo=r(tnt,"bart"),tnt.forEach(t),ELo=r(E8e," \u2014 "),iD=n(E8e,"A",{href:!0});var ant=s(iD);CLo=r(ant,"BartForConditionalGeneration"),ant.forEach(t),wLo=r(E8e," (BART model)"),E8e.forEach(t),ALo=i(ve),ib=n(ve,"LI",{});var C8e=s(ib);pce=n(C8e,"STRONG",{});var nnt=s(pce);yLo=r(nnt,"bigbird_pegasus"),nnt.forEach(t),LLo=r(C8e," \u2014 "),dD=n(C8e,"A",{href:!0});var snt=s(dD);xLo=r(snt,"BigBirdPegasusForConditionalGeneration"),snt.forEach(t),$Lo=r(C8e," (BigBirdPegasus model)"),C8e.forEach(t),kLo=i(ve),db=n(ve,"LI",{});var w8e=s(db);uce=n(w8e,"STRONG",{});var lnt=s(uce);SLo=r(lnt,"blenderbot"),lnt.forEach(t),RLo=r(w8e," \u2014 "),cD=n(w8e,"A",{href:!0});var int=s(cD);PLo=r(int,"BlenderbotForConditionalGeneration"),int.forEach(t),BLo=r(w8e," (Blenderbot model)"),w8e.forEach(t),ILo=i(ve),cb=n(ve,"LI",{});var A8e=s(cb);_ce=n(A8e,"STRONG",{});var dnt=s(_ce);qLo=r(dnt,"blenderbot-small"),dnt.forEach(t),NLo=r(A8e," \u2014 "),fD=n(A8e,"A",{href:!0});var cnt=s(fD);jLo=r(cnt,"BlenderbotSmallForConditionalGeneration"),cnt.forEach(t),DLo=r(A8e," (BlenderbotSmall model)"),A8e.forEach(t),GLo=i(ve),fb=n(ve,"LI",{});var y8e=s(fb);bce=n(y8e,"STRONG",{});var fnt=s(bce);OLo=r(fnt,"encoder-decoder"),fnt.forEach(t),VLo=r(y8e," \u2014 "),mD=n(y8e,"A",{href:!0});var mnt=s(mD);XLo=r(mnt,"EncoderDecoderModel"),mnt.forEach(t),zLo=r(y8e," (Encoder decoder model)"),y8e.forEach(t),WLo=i(ve),mb=n(ve,"LI",{});var L8e=s(mb);vce=n(L8e,"STRONG",{});var gnt=s(vce);QLo=r(gnt,"fsmt"),gnt.forEach(t),HLo=r(L8e," \u2014 "),gD=n(L8e,"A",{href:!0});var hnt=s(gD);ULo=r(hnt,"FSMTForConditionalGeneration"),hnt.forEach(t),JLo=r(L8e," (FairSeq Machine-Translation model)"),L8e.forEach(t),YLo=i(ve),gb=n(ve,"LI",{});var x8e=s(gb);Fce=n(x8e,"STRONG",{});var pnt=s(Fce);KLo=r(pnt,"led"),pnt.forEach(t),ZLo=r(x8e," \u2014 "),hD=n(x8e,"A",{href:!0});var unt=s(hD);e8o=r(unt,"LEDForConditionalGeneration"),unt.forEach(t),o8o=r(x8e," (LED model)"),x8e.forEach(t),r8o=i(ve),hb=n(ve,"LI",{});var $8e=s(hb);Tce=n($8e,"STRONG",{});var _nt=s(Tce);t8o=r(_nt,"m2m_100"),_nt.forEach(t),a8o=r($8e," \u2014 "),pD=n($8e,"A",{href:!0});var bnt=s(pD);n8o=r(bnt,"M2M100ForConditionalGeneration"),bnt.forEach(t),s8o=r($8e," (M2M100 model)"),$8e.forEach(t),l8o=i(ve),pb=n(ve,"LI",{});var k8e=s(pb);Mce=n(k8e,"STRONG",{});var vnt=s(Mce);i8o=r(vnt,"marian"),vnt.forEach(t),d8o=r(k8e," \u2014 "),uD=n(k8e,"A",{href:!0});var Fnt=s(uD);c8o=r(Fnt,"MarianMTModel"),Fnt.forEach(t),f8o=r(k8e," (Marian model)"),k8e.forEach(t),m8o=i(ve),ub=n(ve,"LI",{});var S8e=s(ub);Ece=n(S8e,"STRONG",{});var Tnt=s(Ece);g8o=r(Tnt,"mbart"),Tnt.forEach(t),h8o=r(S8e," \u2014 "),_D=n(S8e,"A",{href:!0});var Mnt=s(_D);p8o=r(Mnt,"MBartForConditionalGeneration"),Mnt.forEach(t),u8o=r(S8e," (mBART model)"),S8e.forEach(t),_8o=i(ve),_b=n(ve,"LI",{});var R8e=s(_b);Cce=n(R8e,"STRONG",{});var Ent=s(Cce);b8o=r(Ent,"mt5"),Ent.forEach(t),v8o=r(R8e," \u2014 "),bD=n(R8e,"A",{href:!0});var Cnt=s(bD);F8o=r(Cnt,"MT5ForConditionalGeneration"),Cnt.forEach(t),T8o=r(R8e," (mT5 model)"),R8e.forEach(t),M8o=i(ve),bb=n(ve,"LI",{});var P8e=s(bb);wce=n(P8e,"STRONG",{});var wnt=s(wce);E8o=r(wnt,"pegasus"),wnt.forEach(t),C8o=r(P8e," \u2014 "),vD=n(P8e,"A",{href:!0});var Ant=s(vD);w8o=r(Ant,"PegasusForConditionalGeneration"),Ant.forEach(t),A8o=r(P8e," (Pegasus model)"),P8e.forEach(t),y8o=i(ve),vb=n(ve,"LI",{});var B8e=s(vb);Ace=n(B8e,"STRONG",{});var ynt=s(Ace);L8o=r(ynt,"plbart"),ynt.forEach(t),x8o=r(B8e," \u2014 "),FD=n(B8e,"A",{href:!0});var Lnt=s(FD);$8o=r(Lnt,"PLBartForConditionalGeneration"),Lnt.forEach(t),k8o=r(B8e," (PLBart model)"),B8e.forEach(t),S8o=i(ve),Fb=n(ve,"LI",{});var I8e=s(Fb);yce=n(I8e,"STRONG",{});var xnt=s(yce);R8o=r(xnt,"prophetnet"),xnt.forEach(t),P8o=r(I8e," \u2014 "),TD=n(I8e,"A",{href:!0});var $nt=s(TD);B8o=r($nt,"ProphetNetForConditionalGeneration"),$nt.forEach(t),I8o=r(I8e," (ProphetNet model)"),I8e.forEach(t),q8o=i(ve),Tb=n(ve,"LI",{});var q8e=s(Tb);Lce=n(q8e,"STRONG",{});var knt=s(Lce);N8o=r(knt,"t5"),knt.forEach(t),j8o=r(q8e," \u2014 "),MD=n(q8e,"A",{href:!0});var Snt=s(MD);D8o=r(Snt,"T5ForConditionalGeneration"),Snt.forEach(t),G8o=r(q8e," (T5 model)"),q8e.forEach(t),O8o=i(ve),Mb=n(ve,"LI",{});var N8e=s(Mb);xce=n(N8e,"STRONG",{});var Rnt=s(xce);V8o=r(Rnt,"xlm-prophetnet"),Rnt.forEach(t),X8o=r(N8e," \u2014 "),ED=n(N8e,"A",{href:!0});var Pnt=s(ED);z8o=r(Pnt,"XLMProphetNetForConditionalGeneration"),Pnt.forEach(t),W8o=r(N8e," (XLMProphetNet model)"),N8e.forEach(t),ve.forEach(t),Q8o=i(na),Eb=n(na,"P",{});var j8e=s(Eb);H8o=r(j8e,"The model is set in evaluation mode by default using "),$ce=n(j8e,"CODE",{});var Bnt=s($ce);U8o=r(Bnt,"model.eval()"),Bnt.forEach(t),J8o=r(j8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kce=n(j8e,"CODE",{});var Int=s(kce);Y8o=r(Int,"model.train()"),Int.forEach(t),j8e.forEach(t),K8o=i(na),T(Cb.$$.fragment,na),na.forEach(t),Xs.forEach(t),rqe=i(f),ji=n(f,"H2",{class:!0});var sje=s(ji);wb=n(sje,"A",{id:!0,class:!0,href:!0});var qnt=s(wb);Sce=n(qnt,"SPAN",{});var Nnt=s(Sce);T(sL.$$.fragment,Nnt),Nnt.forEach(t),qnt.forEach(t),Z8o=i(sje),Rce=n(sje,"SPAN",{});var jnt=s(Rce);exo=r(jnt,"AutoModelForSequenceClassification"),jnt.forEach(t),sje.forEach(t),tqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(lL.$$.fragment,zs),oxo=i(zs),Di=n(zs,"P",{});var GK=s(Di);rxo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=n(GK,"A",{href:!0});var Dnt=s(CD);txo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),axo=r(GK," class method or the "),wD=n(GK,"A",{href:!0});var Gnt=s(wD);nxo=r(Gnt,"from_config()"),Gnt.forEach(t),sxo=r(GK,` class
method.`),GK.forEach(t),lxo=i(zs),iL=n(zs,"P",{});var lje=s(iL);ixo=r(lje,"This class cannot be instantiated directly using "),Pce=n(lje,"CODE",{});var Ont=s(Pce);dxo=r(Ont,"__init__()"),Ont.forEach(t),cxo=r(lje," (throws an error)."),lje.forEach(t),fxo=i(zs),it=n(zs,"DIV",{class:!0});var EA=s(it);T(dL.$$.fragment,EA),mxo=i(EA),Bce=n(EA,"P",{});var Vnt=s(Bce);gxo=r(Vnt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vnt.forEach(t),hxo=i(EA),Gi=n(EA,"P",{});var OK=s(Gi);pxo=r(OK,`Note:
Loading a model from its configuration file does `),Ice=n(OK,"STRONG",{});var Xnt=s(Ice);uxo=r(Xnt,"not"),Xnt.forEach(t),_xo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(OK,"A",{href:!0});var znt=s(AD);bxo=r(znt,"from_pretrained()"),znt.forEach(t),vxo=r(OK," to load the model weights."),OK.forEach(t),Fxo=i(EA),T(Ab.$$.fragment,EA),EA.forEach(t),Txo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(cL.$$.fragment,sa),Mxo=i(sa),qce=n(sa,"P",{});var Wnt=s(qce);Exo=r(Wnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wnt.forEach(t),Cxo=i(sa),Ra=n(sa,"P",{});var CA=s(Ra);wxo=r(CA,"The model class to instantiate is selected based on the "),Nce=n(CA,"CODE",{});var Qnt=s(Nce);Axo=r(Qnt,"model_type"),Qnt.forEach(t),yxo=r(CA,` property of the config object (either
passed as an argument or loaded from `),jce=n(CA,"CODE",{});var Hnt=s(jce);Lxo=r(Hnt,"pretrained_model_name_or_path"),Hnt.forEach(t),xxo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(CA,"CODE",{});var Unt=s(Dce);$xo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),kxo=r(CA,":"),CA.forEach(t),Sxo=i(sa),N=n(sa,"UL",{});var D=s(N);yb=n(D,"LI",{});var D8e=s(yb);Gce=n(D8e,"STRONG",{});var Jnt=s(Gce);Rxo=r(Jnt,"albert"),Jnt.forEach(t),Pxo=r(D8e," \u2014 "),yD=n(D8e,"A",{href:!0});var Ynt=s(yD);Bxo=r(Ynt,"AlbertForSequenceClassification"),Ynt.forEach(t),Ixo=r(D8e," (ALBERT model)"),D8e.forEach(t),qxo=i(D),Lb=n(D,"LI",{});var G8e=s(Lb);Oce=n(G8e,"STRONG",{});var Knt=s(Oce);Nxo=r(Knt,"bart"),Knt.forEach(t),jxo=r(G8e," \u2014 "),LD=n(G8e,"A",{href:!0});var Znt=s(LD);Dxo=r(Znt,"BartForSequenceClassification"),Znt.forEach(t),Gxo=r(G8e," (BART model)"),G8e.forEach(t),Oxo=i(D),xb=n(D,"LI",{});var O8e=s(xb);Vce=n(O8e,"STRONG",{});var est=s(Vce);Vxo=r(est,"bert"),est.forEach(t),Xxo=r(O8e," \u2014 "),xD=n(O8e,"A",{href:!0});var ost=s(xD);zxo=r(ost,"BertForSequenceClassification"),ost.forEach(t),Wxo=r(O8e," (BERT model)"),O8e.forEach(t),Qxo=i(D),$b=n(D,"LI",{});var V8e=s($b);Xce=n(V8e,"STRONG",{});var rst=s(Xce);Hxo=r(rst,"big_bird"),rst.forEach(t),Uxo=r(V8e," \u2014 "),$D=n(V8e,"A",{href:!0});var tst=s($D);Jxo=r(tst,"BigBirdForSequenceClassification"),tst.forEach(t),Yxo=r(V8e," (BigBird model)"),V8e.forEach(t),Kxo=i(D),kb=n(D,"LI",{});var X8e=s(kb);zce=n(X8e,"STRONG",{});var ast=s(zce);Zxo=r(ast,"bigbird_pegasus"),ast.forEach(t),e7o=r(X8e," \u2014 "),kD=n(X8e,"A",{href:!0});var nst=s(kD);o7o=r(nst,"BigBirdPegasusForSequenceClassification"),nst.forEach(t),r7o=r(X8e," (BigBirdPegasus model)"),X8e.forEach(t),t7o=i(D),Sb=n(D,"LI",{});var z8e=s(Sb);Wce=n(z8e,"STRONG",{});var sst=s(Wce);a7o=r(sst,"camembert"),sst.forEach(t),n7o=r(z8e," \u2014 "),SD=n(z8e,"A",{href:!0});var lst=s(SD);s7o=r(lst,"CamembertForSequenceClassification"),lst.forEach(t),l7o=r(z8e," (CamemBERT model)"),z8e.forEach(t),i7o=i(D),Rb=n(D,"LI",{});var W8e=s(Rb);Qce=n(W8e,"STRONG",{});var ist=s(Qce);d7o=r(ist,"canine"),ist.forEach(t),c7o=r(W8e," \u2014 "),RD=n(W8e,"A",{href:!0});var dst=s(RD);f7o=r(dst,"CanineForSequenceClassification"),dst.forEach(t),m7o=r(W8e," (Canine model)"),W8e.forEach(t),g7o=i(D),Pb=n(D,"LI",{});var Q8e=s(Pb);Hce=n(Q8e,"STRONG",{});var cst=s(Hce);h7o=r(cst,"convbert"),cst.forEach(t),p7o=r(Q8e," \u2014 "),PD=n(Q8e,"A",{href:!0});var fst=s(PD);u7o=r(fst,"ConvBertForSequenceClassification"),fst.forEach(t),_7o=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),b7o=i(D),Bb=n(D,"LI",{});var H8e=s(Bb);Uce=n(H8e,"STRONG",{});var mst=s(Uce);v7o=r(mst,"ctrl"),mst.forEach(t),F7o=r(H8e," \u2014 "),BD=n(H8e,"A",{href:!0});var gst=s(BD);T7o=r(gst,"CTRLForSequenceClassification"),gst.forEach(t),M7o=r(H8e," (CTRL model)"),H8e.forEach(t),E7o=i(D),Ib=n(D,"LI",{});var U8e=s(Ib);Jce=n(U8e,"STRONG",{});var hst=s(Jce);C7o=r(hst,"data2vec-text"),hst.forEach(t),w7o=r(U8e," \u2014 "),ID=n(U8e,"A",{href:!0});var pst=s(ID);A7o=r(pst,"Data2VecTextForSequenceClassification"),pst.forEach(t),y7o=r(U8e," (Data2VecText model)"),U8e.forEach(t),L7o=i(D),qb=n(D,"LI",{});var J8e=s(qb);Yce=n(J8e,"STRONG",{});var ust=s(Yce);x7o=r(ust,"deberta"),ust.forEach(t),$7o=r(J8e," \u2014 "),qD=n(J8e,"A",{href:!0});var _st=s(qD);k7o=r(_st,"DebertaForSequenceClassification"),_st.forEach(t),S7o=r(J8e," (DeBERTa model)"),J8e.forEach(t),R7o=i(D),Nb=n(D,"LI",{});var Y8e=s(Nb);Kce=n(Y8e,"STRONG",{});var bst=s(Kce);P7o=r(bst,"deberta-v2"),bst.forEach(t),B7o=r(Y8e," \u2014 "),ND=n(Y8e,"A",{href:!0});var vst=s(ND);I7o=r(vst,"DebertaV2ForSequenceClassification"),vst.forEach(t),q7o=r(Y8e," (DeBERTa-v2 model)"),Y8e.forEach(t),N7o=i(D),jb=n(D,"LI",{});var K8e=s(jb);Zce=n(K8e,"STRONG",{});var Fst=s(Zce);j7o=r(Fst,"distilbert"),Fst.forEach(t),D7o=r(K8e," \u2014 "),jD=n(K8e,"A",{href:!0});var Tst=s(jD);G7o=r(Tst,"DistilBertForSequenceClassification"),Tst.forEach(t),O7o=r(K8e," (DistilBERT model)"),K8e.forEach(t),V7o=i(D),Db=n(D,"LI",{});var Z8e=s(Db);efe=n(Z8e,"STRONG",{});var Mst=s(efe);X7o=r(Mst,"electra"),Mst.forEach(t),z7o=r(Z8e," \u2014 "),DD=n(Z8e,"A",{href:!0});var Est=s(DD);W7o=r(Est,"ElectraForSequenceClassification"),Est.forEach(t),Q7o=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),H7o=i(D),Gb=n(D,"LI",{});var exe=s(Gb);ofe=n(exe,"STRONG",{});var Cst=s(ofe);U7o=r(Cst,"flaubert"),Cst.forEach(t),J7o=r(exe," \u2014 "),GD=n(exe,"A",{href:!0});var wst=s(GD);Y7o=r(wst,"FlaubertForSequenceClassification"),wst.forEach(t),K7o=r(exe," (FlauBERT model)"),exe.forEach(t),Z7o=i(D),Ob=n(D,"LI",{});var oxe=s(Ob);rfe=n(oxe,"STRONG",{});var Ast=s(rfe);e9o=r(Ast,"fnet"),Ast.forEach(t),o9o=r(oxe," \u2014 "),OD=n(oxe,"A",{href:!0});var yst=s(OD);r9o=r(yst,"FNetForSequenceClassification"),yst.forEach(t),t9o=r(oxe," (FNet model)"),oxe.forEach(t),a9o=i(D),Vb=n(D,"LI",{});var rxe=s(Vb);tfe=n(rxe,"STRONG",{});var Lst=s(tfe);n9o=r(Lst,"funnel"),Lst.forEach(t),s9o=r(rxe," \u2014 "),VD=n(rxe,"A",{href:!0});var xst=s(VD);l9o=r(xst,"FunnelForSequenceClassification"),xst.forEach(t),i9o=r(rxe," (Funnel Transformer model)"),rxe.forEach(t),d9o=i(D),Xb=n(D,"LI",{});var txe=s(Xb);afe=n(txe,"STRONG",{});var $st=s(afe);c9o=r($st,"gpt2"),$st.forEach(t),f9o=r(txe," \u2014 "),XD=n(txe,"A",{href:!0});var kst=s(XD);m9o=r(kst,"GPT2ForSequenceClassification"),kst.forEach(t),g9o=r(txe," (OpenAI GPT-2 model)"),txe.forEach(t),h9o=i(D),zb=n(D,"LI",{});var axe=s(zb);nfe=n(axe,"STRONG",{});var Sst=s(nfe);p9o=r(Sst,"gpt_neo"),Sst.forEach(t),u9o=r(axe," \u2014 "),zD=n(axe,"A",{href:!0});var Rst=s(zD);_9o=r(Rst,"GPTNeoForSequenceClassification"),Rst.forEach(t),b9o=r(axe," (GPT Neo model)"),axe.forEach(t),v9o=i(D),Wb=n(D,"LI",{});var nxe=s(Wb);sfe=n(nxe,"STRONG",{});var Pst=s(sfe);F9o=r(Pst,"gptj"),Pst.forEach(t),T9o=r(nxe," \u2014 "),WD=n(nxe,"A",{href:!0});var Bst=s(WD);M9o=r(Bst,"GPTJForSequenceClassification"),Bst.forEach(t),E9o=r(nxe," (GPT-J model)"),nxe.forEach(t),C9o=i(D),Qb=n(D,"LI",{});var sxe=s(Qb);lfe=n(sxe,"STRONG",{});var Ist=s(lfe);w9o=r(Ist,"ibert"),Ist.forEach(t),A9o=r(sxe," \u2014 "),QD=n(sxe,"A",{href:!0});var qst=s(QD);y9o=r(qst,"IBertForSequenceClassification"),qst.forEach(t),L9o=r(sxe," (I-BERT model)"),sxe.forEach(t),x9o=i(D),Hb=n(D,"LI",{});var lxe=s(Hb);ife=n(lxe,"STRONG",{});var Nst=s(ife);$9o=r(Nst,"layoutlm"),Nst.forEach(t),k9o=r(lxe," \u2014 "),HD=n(lxe,"A",{href:!0});var jst=s(HD);S9o=r(jst,"LayoutLMForSequenceClassification"),jst.forEach(t),R9o=r(lxe," (LayoutLM model)"),lxe.forEach(t),P9o=i(D),Ub=n(D,"LI",{});var ixe=s(Ub);dfe=n(ixe,"STRONG",{});var Dst=s(dfe);B9o=r(Dst,"layoutlmv2"),Dst.forEach(t),I9o=r(ixe," \u2014 "),UD=n(ixe,"A",{href:!0});var Gst=s(UD);q9o=r(Gst,"LayoutLMv2ForSequenceClassification"),Gst.forEach(t),N9o=r(ixe," (LayoutLMv2 model)"),ixe.forEach(t),j9o=i(D),Jb=n(D,"LI",{});var dxe=s(Jb);cfe=n(dxe,"STRONG",{});var Ost=s(cfe);D9o=r(Ost,"led"),Ost.forEach(t),G9o=r(dxe," \u2014 "),JD=n(dxe,"A",{href:!0});var Vst=s(JD);O9o=r(Vst,"LEDForSequenceClassification"),Vst.forEach(t),V9o=r(dxe," (LED model)"),dxe.forEach(t),X9o=i(D),Yb=n(D,"LI",{});var cxe=s(Yb);ffe=n(cxe,"STRONG",{});var Xst=s(ffe);z9o=r(Xst,"longformer"),Xst.forEach(t),W9o=r(cxe," \u2014 "),YD=n(cxe,"A",{href:!0});var zst=s(YD);Q9o=r(zst,"LongformerForSequenceClassification"),zst.forEach(t),H9o=r(cxe," (Longformer model)"),cxe.forEach(t),U9o=i(D),Kb=n(D,"LI",{});var fxe=s(Kb);mfe=n(fxe,"STRONG",{});var Wst=s(mfe);J9o=r(Wst,"mbart"),Wst.forEach(t),Y9o=r(fxe," \u2014 "),KD=n(fxe,"A",{href:!0});var Qst=s(KD);K9o=r(Qst,"MBartForSequenceClassification"),Qst.forEach(t),Z9o=r(fxe," (mBART model)"),fxe.forEach(t),e$o=i(D),Zb=n(D,"LI",{});var mxe=s(Zb);gfe=n(mxe,"STRONG",{});var Hst=s(gfe);o$o=r(Hst,"megatron-bert"),Hst.forEach(t),r$o=r(mxe," \u2014 "),ZD=n(mxe,"A",{href:!0});var Ust=s(ZD);t$o=r(Ust,"MegatronBertForSequenceClassification"),Ust.forEach(t),a$o=r(mxe," (MegatronBert model)"),mxe.forEach(t),n$o=i(D),e2=n(D,"LI",{});var gxe=s(e2);hfe=n(gxe,"STRONG",{});var Jst=s(hfe);s$o=r(Jst,"mobilebert"),Jst.forEach(t),l$o=r(gxe," \u2014 "),eG=n(gxe,"A",{href:!0});var Yst=s(eG);i$o=r(Yst,"MobileBertForSequenceClassification"),Yst.forEach(t),d$o=r(gxe," (MobileBERT model)"),gxe.forEach(t),c$o=i(D),o2=n(D,"LI",{});var hxe=s(o2);pfe=n(hxe,"STRONG",{});var Kst=s(pfe);f$o=r(Kst,"mpnet"),Kst.forEach(t),m$o=r(hxe," \u2014 "),oG=n(hxe,"A",{href:!0});var Zst=s(oG);g$o=r(Zst,"MPNetForSequenceClassification"),Zst.forEach(t),h$o=r(hxe," (MPNet model)"),hxe.forEach(t),p$o=i(D),r2=n(D,"LI",{});var pxe=s(r2);ufe=n(pxe,"STRONG",{});var elt=s(ufe);u$o=r(elt,"nystromformer"),elt.forEach(t),_$o=r(pxe," \u2014 "),rG=n(pxe,"A",{href:!0});var olt=s(rG);b$o=r(olt,"NystromformerForSequenceClassification"),olt.forEach(t),v$o=r(pxe," (Nystromformer model)"),pxe.forEach(t),F$o=i(D),t2=n(D,"LI",{});var uxe=s(t2);_fe=n(uxe,"STRONG",{});var rlt=s(_fe);T$o=r(rlt,"openai-gpt"),rlt.forEach(t),M$o=r(uxe," \u2014 "),tG=n(uxe,"A",{href:!0});var tlt=s(tG);E$o=r(tlt,"OpenAIGPTForSequenceClassification"),tlt.forEach(t),C$o=r(uxe," (OpenAI GPT model)"),uxe.forEach(t),w$o=i(D),a2=n(D,"LI",{});var _xe=s(a2);bfe=n(_xe,"STRONG",{});var alt=s(bfe);A$o=r(alt,"perceiver"),alt.forEach(t),y$o=r(_xe," \u2014 "),aG=n(_xe,"A",{href:!0});var nlt=s(aG);L$o=r(nlt,"PerceiverForSequenceClassification"),nlt.forEach(t),x$o=r(_xe," (Perceiver model)"),_xe.forEach(t),$$o=i(D),n2=n(D,"LI",{});var bxe=s(n2);vfe=n(bxe,"STRONG",{});var slt=s(vfe);k$o=r(slt,"plbart"),slt.forEach(t),S$o=r(bxe," \u2014 "),nG=n(bxe,"A",{href:!0});var llt=s(nG);R$o=r(llt,"PLBartForSequenceClassification"),llt.forEach(t),P$o=r(bxe," (PLBart model)"),bxe.forEach(t),B$o=i(D),s2=n(D,"LI",{});var vxe=s(s2);Ffe=n(vxe,"STRONG",{});var ilt=s(Ffe);I$o=r(ilt,"qdqbert"),ilt.forEach(t),q$o=r(vxe," \u2014 "),sG=n(vxe,"A",{href:!0});var dlt=s(sG);N$o=r(dlt,"QDQBertForSequenceClassification"),dlt.forEach(t),j$o=r(vxe," (QDQBert model)"),vxe.forEach(t),D$o=i(D),l2=n(D,"LI",{});var Fxe=s(l2);Tfe=n(Fxe,"STRONG",{});var clt=s(Tfe);G$o=r(clt,"reformer"),clt.forEach(t),O$o=r(Fxe," \u2014 "),lG=n(Fxe,"A",{href:!0});var flt=s(lG);V$o=r(flt,"ReformerForSequenceClassification"),flt.forEach(t),X$o=r(Fxe," (Reformer model)"),Fxe.forEach(t),z$o=i(D),i2=n(D,"LI",{});var Txe=s(i2);Mfe=n(Txe,"STRONG",{});var mlt=s(Mfe);W$o=r(mlt,"rembert"),mlt.forEach(t),Q$o=r(Txe," \u2014 "),iG=n(Txe,"A",{href:!0});var glt=s(iG);H$o=r(glt,"RemBertForSequenceClassification"),glt.forEach(t),U$o=r(Txe," (RemBERT model)"),Txe.forEach(t),J$o=i(D),d2=n(D,"LI",{});var Mxe=s(d2);Efe=n(Mxe,"STRONG",{});var hlt=s(Efe);Y$o=r(hlt,"roberta"),hlt.forEach(t),K$o=r(Mxe," \u2014 "),dG=n(Mxe,"A",{href:!0});var plt=s(dG);Z$o=r(plt,"RobertaForSequenceClassification"),plt.forEach(t),eko=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),oko=i(D),c2=n(D,"LI",{});var Exe=s(c2);Cfe=n(Exe,"STRONG",{});var ult=s(Cfe);rko=r(ult,"roformer"),ult.forEach(t),tko=r(Exe," \u2014 "),cG=n(Exe,"A",{href:!0});var _lt=s(cG);ako=r(_lt,"RoFormerForSequenceClassification"),_lt.forEach(t),nko=r(Exe," (RoFormer model)"),Exe.forEach(t),sko=i(D),f2=n(D,"LI",{});var Cxe=s(f2);wfe=n(Cxe,"STRONG",{});var blt=s(wfe);lko=r(blt,"squeezebert"),blt.forEach(t),iko=r(Cxe," \u2014 "),fG=n(Cxe,"A",{href:!0});var vlt=s(fG);dko=r(vlt,"SqueezeBertForSequenceClassification"),vlt.forEach(t),cko=r(Cxe," (SqueezeBERT model)"),Cxe.forEach(t),fko=i(D),m2=n(D,"LI",{});var wxe=s(m2);Afe=n(wxe,"STRONG",{});var Flt=s(Afe);mko=r(Flt,"tapas"),Flt.forEach(t),gko=r(wxe," \u2014 "),mG=n(wxe,"A",{href:!0});var Tlt=s(mG);hko=r(Tlt,"TapasForSequenceClassification"),Tlt.forEach(t),pko=r(wxe," (TAPAS model)"),wxe.forEach(t),uko=i(D),g2=n(D,"LI",{});var Axe=s(g2);yfe=n(Axe,"STRONG",{});var Mlt=s(yfe);_ko=r(Mlt,"transfo-xl"),Mlt.forEach(t),bko=r(Axe," \u2014 "),gG=n(Axe,"A",{href:!0});var Elt=s(gG);vko=r(Elt,"TransfoXLForSequenceClassification"),Elt.forEach(t),Fko=r(Axe," (Transformer-XL model)"),Axe.forEach(t),Tko=i(D),h2=n(D,"LI",{});var yxe=s(h2);Lfe=n(yxe,"STRONG",{});var Clt=s(Lfe);Mko=r(Clt,"xlm"),Clt.forEach(t),Eko=r(yxe," \u2014 "),hG=n(yxe,"A",{href:!0});var wlt=s(hG);Cko=r(wlt,"XLMForSequenceClassification"),wlt.forEach(t),wko=r(yxe," (XLM model)"),yxe.forEach(t),Ako=i(D),p2=n(D,"LI",{});var Lxe=s(p2);xfe=n(Lxe,"STRONG",{});var Alt=s(xfe);yko=r(Alt,"xlm-roberta"),Alt.forEach(t),Lko=r(Lxe," \u2014 "),pG=n(Lxe,"A",{href:!0});var ylt=s(pG);xko=r(ylt,"XLMRobertaForSequenceClassification"),ylt.forEach(t),$ko=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),kko=i(D),u2=n(D,"LI",{});var xxe=s(u2);$fe=n(xxe,"STRONG",{});var Llt=s($fe);Sko=r(Llt,"xlm-roberta-xl"),Llt.forEach(t),Rko=r(xxe," \u2014 "),uG=n(xxe,"A",{href:!0});var xlt=s(uG);Pko=r(xlt,"XLMRobertaXLForSequenceClassification"),xlt.forEach(t),Bko=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),Iko=i(D),_2=n(D,"LI",{});var $xe=s(_2);kfe=n($xe,"STRONG",{});var $lt=s(kfe);qko=r($lt,"xlnet"),$lt.forEach(t),Nko=r($xe," \u2014 "),_G=n($xe,"A",{href:!0});var klt=s(_G);jko=r(klt,"XLNetForSequenceClassification"),klt.forEach(t),Dko=r($xe," (XLNet model)"),$xe.forEach(t),Gko=i(D),b2=n(D,"LI",{});var kxe=s(b2);Sfe=n(kxe,"STRONG",{});var Slt=s(Sfe);Oko=r(Slt,"yoso"),Slt.forEach(t),Vko=r(kxe," \u2014 "),bG=n(kxe,"A",{href:!0});var Rlt=s(bG);Xko=r(Rlt,"YosoForSequenceClassification"),Rlt.forEach(t),zko=r(kxe," (YOSO model)"),kxe.forEach(t),D.forEach(t),Wko=i(sa),v2=n(sa,"P",{});var Sxe=s(v2);Qko=r(Sxe,"The model is set in evaluation mode by default using "),Rfe=n(Sxe,"CODE",{});var Plt=s(Rfe);Hko=r(Plt,"model.eval()"),Plt.forEach(t),Uko=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(Sxe,"CODE",{});var Blt=s(Pfe);Jko=r(Blt,"model.train()"),Blt.forEach(t),Sxe.forEach(t),Yko=i(sa),T(F2.$$.fragment,sa),sa.forEach(t),zs.forEach(t),aqe=i(f),Oi=n(f,"H2",{class:!0});var ije=s(Oi);T2=n(ije,"A",{id:!0,class:!0,href:!0});var Ilt=s(T2);Bfe=n(Ilt,"SPAN",{});var qlt=s(Bfe);T(fL.$$.fragment,qlt),qlt.forEach(t),Ilt.forEach(t),Kko=i(ije),Ife=n(ije,"SPAN",{});var Nlt=s(Ife);Zko=r(Nlt,"AutoModelForMultipleChoice"),Nlt.forEach(t),ije.forEach(t),nqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(mL.$$.fragment,Ws),eSo=i(Ws),Vi=n(Ws,"P",{});var VK=s(Vi);oSo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=n(VK,"A",{href:!0});var jlt=s(vG);rSo=r(jlt,"from_pretrained()"),jlt.forEach(t),tSo=r(VK," class method or the "),FG=n(VK,"A",{href:!0});var Dlt=s(FG);aSo=r(Dlt,"from_config()"),Dlt.forEach(t),nSo=r(VK,` class
method.`),VK.forEach(t),sSo=i(Ws),gL=n(Ws,"P",{});var dje=s(gL);lSo=r(dje,"This class cannot be instantiated directly using "),qfe=n(dje,"CODE",{});var Glt=s(qfe);iSo=r(Glt,"__init__()"),Glt.forEach(t),dSo=r(dje," (throws an error)."),dje.forEach(t),cSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var wA=s(dt);T(hL.$$.fragment,wA),fSo=i(wA),Nfe=n(wA,"P",{});var Olt=s(Nfe);mSo=r(Olt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Olt.forEach(t),gSo=i(wA),Xi=n(wA,"P",{});var XK=s(Xi);hSo=r(XK,`Note:
Loading a model from its configuration file does `),jfe=n(XK,"STRONG",{});var Vlt=s(jfe);pSo=r(Vlt,"not"),Vlt.forEach(t),uSo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(XK,"A",{href:!0});var Xlt=s(TG);_So=r(Xlt,"from_pretrained()"),Xlt.forEach(t),bSo=r(XK," to load the model weights."),XK.forEach(t),vSo=i(wA),T(M2.$$.fragment,wA),wA.forEach(t),FSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(pL.$$.fragment,la),TSo=i(la),Dfe=n(la,"P",{});var zlt=s(Dfe);MSo=r(zlt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zlt.forEach(t),ESo=i(la),Pa=n(la,"P",{});var AA=s(Pa);CSo=r(AA,"The model class to instantiate is selected based on the "),Gfe=n(AA,"CODE",{});var Wlt=s(Gfe);wSo=r(Wlt,"model_type"),Wlt.forEach(t),ASo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(AA,"CODE",{});var Qlt=s(Ofe);ySo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),LSo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(AA,"CODE",{});var Hlt=s(Vfe);xSo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),$So=r(AA,":"),AA.forEach(t),kSo=i(la),Y=n(la,"UL",{});var K=s(Y);E2=n(K,"LI",{});var Rxe=s(E2);Xfe=n(Rxe,"STRONG",{});var Ult=s(Xfe);SSo=r(Ult,"albert"),Ult.forEach(t),RSo=r(Rxe," \u2014 "),MG=n(Rxe,"A",{href:!0});var Jlt=s(MG);PSo=r(Jlt,"AlbertForMultipleChoice"),Jlt.forEach(t),BSo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),ISo=i(K),C2=n(K,"LI",{});var Pxe=s(C2);zfe=n(Pxe,"STRONG",{});var Ylt=s(zfe);qSo=r(Ylt,"bert"),Ylt.forEach(t),NSo=r(Pxe," \u2014 "),EG=n(Pxe,"A",{href:!0});var Klt=s(EG);jSo=r(Klt,"BertForMultipleChoice"),Klt.forEach(t),DSo=r(Pxe," (BERT model)"),Pxe.forEach(t),GSo=i(K),w2=n(K,"LI",{});var Bxe=s(w2);Wfe=n(Bxe,"STRONG",{});var Zlt=s(Wfe);OSo=r(Zlt,"big_bird"),Zlt.forEach(t),VSo=r(Bxe," \u2014 "),CG=n(Bxe,"A",{href:!0});var eit=s(CG);XSo=r(eit,"BigBirdForMultipleChoice"),eit.forEach(t),zSo=r(Bxe," (BigBird model)"),Bxe.forEach(t),WSo=i(K),A2=n(K,"LI",{});var Ixe=s(A2);Qfe=n(Ixe,"STRONG",{});var oit=s(Qfe);QSo=r(oit,"camembert"),oit.forEach(t),HSo=r(Ixe," \u2014 "),wG=n(Ixe,"A",{href:!0});var rit=s(wG);USo=r(rit,"CamembertForMultipleChoice"),rit.forEach(t),JSo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),YSo=i(K),y2=n(K,"LI",{});var qxe=s(y2);Hfe=n(qxe,"STRONG",{});var tit=s(Hfe);KSo=r(tit,"canine"),tit.forEach(t),ZSo=r(qxe," \u2014 "),AG=n(qxe,"A",{href:!0});var ait=s(AG);eRo=r(ait,"CanineForMultipleChoice"),ait.forEach(t),oRo=r(qxe," (Canine model)"),qxe.forEach(t),rRo=i(K),L2=n(K,"LI",{});var Nxe=s(L2);Ufe=n(Nxe,"STRONG",{});var nit=s(Ufe);tRo=r(nit,"convbert"),nit.forEach(t),aRo=r(Nxe," \u2014 "),yG=n(Nxe,"A",{href:!0});var sit=s(yG);nRo=r(sit,"ConvBertForMultipleChoice"),sit.forEach(t),sRo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),lRo=i(K),x2=n(K,"LI",{});var jxe=s(x2);Jfe=n(jxe,"STRONG",{});var lit=s(Jfe);iRo=r(lit,"data2vec-text"),lit.forEach(t),dRo=r(jxe," \u2014 "),LG=n(jxe,"A",{href:!0});var iit=s(LG);cRo=r(iit,"Data2VecTextForMultipleChoice"),iit.forEach(t),fRo=r(jxe," (Data2VecText model)"),jxe.forEach(t),mRo=i(K),$2=n(K,"LI",{});var Dxe=s($2);Yfe=n(Dxe,"STRONG",{});var dit=s(Yfe);gRo=r(dit,"deberta-v2"),dit.forEach(t),hRo=r(Dxe," \u2014 "),xG=n(Dxe,"A",{href:!0});var cit=s(xG);pRo=r(cit,"DebertaV2ForMultipleChoice"),cit.forEach(t),uRo=r(Dxe," (DeBERTa-v2 model)"),Dxe.forEach(t),_Ro=i(K),k2=n(K,"LI",{});var Gxe=s(k2);Kfe=n(Gxe,"STRONG",{});var fit=s(Kfe);bRo=r(fit,"distilbert"),fit.forEach(t),vRo=r(Gxe," \u2014 "),$G=n(Gxe,"A",{href:!0});var mit=s($G);FRo=r(mit,"DistilBertForMultipleChoice"),mit.forEach(t),TRo=r(Gxe," (DistilBERT model)"),Gxe.forEach(t),MRo=i(K),S2=n(K,"LI",{});var Oxe=s(S2);Zfe=n(Oxe,"STRONG",{});var git=s(Zfe);ERo=r(git,"electra"),git.forEach(t),CRo=r(Oxe," \u2014 "),kG=n(Oxe,"A",{href:!0});var hit=s(kG);wRo=r(hit,"ElectraForMultipleChoice"),hit.forEach(t),ARo=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),yRo=i(K),R2=n(K,"LI",{});var Vxe=s(R2);eme=n(Vxe,"STRONG",{});var pit=s(eme);LRo=r(pit,"flaubert"),pit.forEach(t),xRo=r(Vxe," \u2014 "),SG=n(Vxe,"A",{href:!0});var uit=s(SG);$Ro=r(uit,"FlaubertForMultipleChoice"),uit.forEach(t),kRo=r(Vxe," (FlauBERT model)"),Vxe.forEach(t),SRo=i(K),P2=n(K,"LI",{});var Xxe=s(P2);ome=n(Xxe,"STRONG",{});var _it=s(ome);RRo=r(_it,"fnet"),_it.forEach(t),PRo=r(Xxe," \u2014 "),RG=n(Xxe,"A",{href:!0});var bit=s(RG);BRo=r(bit,"FNetForMultipleChoice"),bit.forEach(t),IRo=r(Xxe," (FNet model)"),Xxe.forEach(t),qRo=i(K),B2=n(K,"LI",{});var zxe=s(B2);rme=n(zxe,"STRONG",{});var vit=s(rme);NRo=r(vit,"funnel"),vit.forEach(t),jRo=r(zxe," \u2014 "),PG=n(zxe,"A",{href:!0});var Fit=s(PG);DRo=r(Fit,"FunnelForMultipleChoice"),Fit.forEach(t),GRo=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),ORo=i(K),I2=n(K,"LI",{});var Wxe=s(I2);tme=n(Wxe,"STRONG",{});var Tit=s(tme);VRo=r(Tit,"ibert"),Tit.forEach(t),XRo=r(Wxe," \u2014 "),BG=n(Wxe,"A",{href:!0});var Mit=s(BG);zRo=r(Mit,"IBertForMultipleChoice"),Mit.forEach(t),WRo=r(Wxe," (I-BERT model)"),Wxe.forEach(t),QRo=i(K),q2=n(K,"LI",{});var Qxe=s(q2);ame=n(Qxe,"STRONG",{});var Eit=s(ame);HRo=r(Eit,"longformer"),Eit.forEach(t),URo=r(Qxe," \u2014 "),IG=n(Qxe,"A",{href:!0});var Cit=s(IG);JRo=r(Cit,"LongformerForMultipleChoice"),Cit.forEach(t),YRo=r(Qxe," (Longformer model)"),Qxe.forEach(t),KRo=i(K),N2=n(K,"LI",{});var Hxe=s(N2);nme=n(Hxe,"STRONG",{});var wit=s(nme);ZRo=r(wit,"megatron-bert"),wit.forEach(t),ePo=r(Hxe," \u2014 "),qG=n(Hxe,"A",{href:!0});var Ait=s(qG);oPo=r(Ait,"MegatronBertForMultipleChoice"),Ait.forEach(t),rPo=r(Hxe," (MegatronBert model)"),Hxe.forEach(t),tPo=i(K),j2=n(K,"LI",{});var Uxe=s(j2);sme=n(Uxe,"STRONG",{});var yit=s(sme);aPo=r(yit,"mobilebert"),yit.forEach(t),nPo=r(Uxe," \u2014 "),NG=n(Uxe,"A",{href:!0});var Lit=s(NG);sPo=r(Lit,"MobileBertForMultipleChoice"),Lit.forEach(t),lPo=r(Uxe," (MobileBERT model)"),Uxe.forEach(t),iPo=i(K),D2=n(K,"LI",{});var Jxe=s(D2);lme=n(Jxe,"STRONG",{});var xit=s(lme);dPo=r(xit,"mpnet"),xit.forEach(t),cPo=r(Jxe," \u2014 "),jG=n(Jxe,"A",{href:!0});var $it=s(jG);fPo=r($it,"MPNetForMultipleChoice"),$it.forEach(t),mPo=r(Jxe," (MPNet model)"),Jxe.forEach(t),gPo=i(K),G2=n(K,"LI",{});var Yxe=s(G2);ime=n(Yxe,"STRONG",{});var kit=s(ime);hPo=r(kit,"nystromformer"),kit.forEach(t),pPo=r(Yxe," \u2014 "),DG=n(Yxe,"A",{href:!0});var Sit=s(DG);uPo=r(Sit,"NystromformerForMultipleChoice"),Sit.forEach(t),_Po=r(Yxe," (Nystromformer model)"),Yxe.forEach(t),bPo=i(K),O2=n(K,"LI",{});var Kxe=s(O2);dme=n(Kxe,"STRONG",{});var Rit=s(dme);vPo=r(Rit,"qdqbert"),Rit.forEach(t),FPo=r(Kxe," \u2014 "),GG=n(Kxe,"A",{href:!0});var Pit=s(GG);TPo=r(Pit,"QDQBertForMultipleChoice"),Pit.forEach(t),MPo=r(Kxe," (QDQBert model)"),Kxe.forEach(t),EPo=i(K),V2=n(K,"LI",{});var Zxe=s(V2);cme=n(Zxe,"STRONG",{});var Bit=s(cme);CPo=r(Bit,"rembert"),Bit.forEach(t),wPo=r(Zxe," \u2014 "),OG=n(Zxe,"A",{href:!0});var Iit=s(OG);APo=r(Iit,"RemBertForMultipleChoice"),Iit.forEach(t),yPo=r(Zxe," (RemBERT model)"),Zxe.forEach(t),LPo=i(K),X2=n(K,"LI",{});var e7e=s(X2);fme=n(e7e,"STRONG",{});var qit=s(fme);xPo=r(qit,"roberta"),qit.forEach(t),$Po=r(e7e," \u2014 "),VG=n(e7e,"A",{href:!0});var Nit=s(VG);kPo=r(Nit,"RobertaForMultipleChoice"),Nit.forEach(t),SPo=r(e7e," (RoBERTa model)"),e7e.forEach(t),RPo=i(K),z2=n(K,"LI",{});var o7e=s(z2);mme=n(o7e,"STRONG",{});var jit=s(mme);PPo=r(jit,"roformer"),jit.forEach(t),BPo=r(o7e," \u2014 "),XG=n(o7e,"A",{href:!0});var Dit=s(XG);IPo=r(Dit,"RoFormerForMultipleChoice"),Dit.forEach(t),qPo=r(o7e," (RoFormer model)"),o7e.forEach(t),NPo=i(K),W2=n(K,"LI",{});var r7e=s(W2);gme=n(r7e,"STRONG",{});var Git=s(gme);jPo=r(Git,"squeezebert"),Git.forEach(t),DPo=r(r7e," \u2014 "),zG=n(r7e,"A",{href:!0});var Oit=s(zG);GPo=r(Oit,"SqueezeBertForMultipleChoice"),Oit.forEach(t),OPo=r(r7e," (SqueezeBERT model)"),r7e.forEach(t),VPo=i(K),Q2=n(K,"LI",{});var t7e=s(Q2);hme=n(t7e,"STRONG",{});var Vit=s(hme);XPo=r(Vit,"xlm"),Vit.forEach(t),zPo=r(t7e," \u2014 "),WG=n(t7e,"A",{href:!0});var Xit=s(WG);WPo=r(Xit,"XLMForMultipleChoice"),Xit.forEach(t),QPo=r(t7e," (XLM model)"),t7e.forEach(t),HPo=i(K),H2=n(K,"LI",{});var a7e=s(H2);pme=n(a7e,"STRONG",{});var zit=s(pme);UPo=r(zit,"xlm-roberta"),zit.forEach(t),JPo=r(a7e," \u2014 "),QG=n(a7e,"A",{href:!0});var Wit=s(QG);YPo=r(Wit,"XLMRobertaForMultipleChoice"),Wit.forEach(t),KPo=r(a7e," (XLM-RoBERTa model)"),a7e.forEach(t),ZPo=i(K),U2=n(K,"LI",{});var n7e=s(U2);ume=n(n7e,"STRONG",{});var Qit=s(ume);eBo=r(Qit,"xlm-roberta-xl"),Qit.forEach(t),oBo=r(n7e," \u2014 "),HG=n(n7e,"A",{href:!0});var Hit=s(HG);rBo=r(Hit,"XLMRobertaXLForMultipleChoice"),Hit.forEach(t),tBo=r(n7e," (XLM-RoBERTa-XL model)"),n7e.forEach(t),aBo=i(K),J2=n(K,"LI",{});var s7e=s(J2);_me=n(s7e,"STRONG",{});var Uit=s(_me);nBo=r(Uit,"xlnet"),Uit.forEach(t),sBo=r(s7e," \u2014 "),UG=n(s7e,"A",{href:!0});var Jit=s(UG);lBo=r(Jit,"XLNetForMultipleChoice"),Jit.forEach(t),iBo=r(s7e," (XLNet model)"),s7e.forEach(t),dBo=i(K),Y2=n(K,"LI",{});var l7e=s(Y2);bme=n(l7e,"STRONG",{});var Yit=s(bme);cBo=r(Yit,"yoso"),Yit.forEach(t),fBo=r(l7e," \u2014 "),JG=n(l7e,"A",{href:!0});var Kit=s(JG);mBo=r(Kit,"YosoForMultipleChoice"),Kit.forEach(t),gBo=r(l7e," (YOSO model)"),l7e.forEach(t),K.forEach(t),hBo=i(la),K2=n(la,"P",{});var i7e=s(K2);pBo=r(i7e,"The model is set in evaluation mode by default using "),vme=n(i7e,"CODE",{});var Zit=s(vme);uBo=r(Zit,"model.eval()"),Zit.forEach(t),_Bo=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(i7e,"CODE",{});var edt=s(Fme);bBo=r(edt,"model.train()"),edt.forEach(t),i7e.forEach(t),vBo=i(la),T(Z2.$$.fragment,la),la.forEach(t),Ws.forEach(t),sqe=i(f),zi=n(f,"H2",{class:!0});var cje=s(zi);e4=n(cje,"A",{id:!0,class:!0,href:!0});var odt=s(e4);Tme=n(odt,"SPAN",{});var rdt=s(Tme);T(uL.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),FBo=i(cje),Mme=n(cje,"SPAN",{});var tdt=s(Mme);TBo=r(tdt,"AutoModelForNextSentencePrediction"),tdt.forEach(t),cje.forEach(t),lqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(_L.$$.fragment,Qs),MBo=i(Qs),Wi=n(Qs,"P",{});var zK=s(Wi);EBo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=n(zK,"A",{href:!0});var adt=s(YG);CBo=r(adt,"from_pretrained()"),adt.forEach(t),wBo=r(zK," class method or the "),KG=n(zK,"A",{href:!0});var ndt=s(KG);ABo=r(ndt,"from_config()"),ndt.forEach(t),yBo=r(zK,` class
method.`),zK.forEach(t),LBo=i(Qs),bL=n(Qs,"P",{});var fje=s(bL);xBo=r(fje,"This class cannot be instantiated directly using "),Eme=n(fje,"CODE",{});var sdt=s(Eme);$Bo=r(sdt,"__init__()"),sdt.forEach(t),kBo=r(fje," (throws an error)."),fje.forEach(t),SBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var yA=s(ct);T(vL.$$.fragment,yA),RBo=i(yA),Cme=n(yA,"P",{});var ldt=s(Cme);PBo=r(ldt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ldt.forEach(t),BBo=i(yA),Qi=n(yA,"P",{});var WK=s(Qi);IBo=r(WK,`Note:
Loading a model from its configuration file does `),wme=n(WK,"STRONG",{});var idt=s(wme);qBo=r(idt,"not"),idt.forEach(t),NBo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(WK,"A",{href:!0});var ddt=s(ZG);jBo=r(ddt,"from_pretrained()"),ddt.forEach(t),DBo=r(WK," to load the model weights."),WK.forEach(t),GBo=i(yA),T(o4.$$.fragment,yA),yA.forEach(t),OBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(FL.$$.fragment,ia),VBo=i(ia),Ame=n(ia,"P",{});var cdt=s(Ame);XBo=r(cdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cdt.forEach(t),zBo=i(ia),Ba=n(ia,"P",{});var LA=s(Ba);WBo=r(LA,"The model class to instantiate is selected based on the "),yme=n(LA,"CODE",{});var fdt=s(yme);QBo=r(fdt,"model_type"),fdt.forEach(t),HBo=r(LA,` property of the config object (either
passed as an argument or loaded from `),Lme=n(LA,"CODE",{});var mdt=s(Lme);UBo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),JBo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(LA,"CODE",{});var gdt=s(xme);YBo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),KBo=r(LA,":"),LA.forEach(t),ZBo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);r4=n(Hs,"LI",{});var d7e=s(r4);$me=n(d7e,"STRONG",{});var hdt=s($me);eIo=r(hdt,"bert"),hdt.forEach(t),oIo=r(d7e," \u2014 "),eO=n(d7e,"A",{href:!0});var pdt=s(eO);rIo=r(pdt,"BertForNextSentencePrediction"),pdt.forEach(t),tIo=r(d7e," (BERT model)"),d7e.forEach(t),aIo=i(Hs),t4=n(Hs,"LI",{});var c7e=s(t4);kme=n(c7e,"STRONG",{});var udt=s(kme);nIo=r(udt,"fnet"),udt.forEach(t),sIo=r(c7e," \u2014 "),oO=n(c7e,"A",{href:!0});var _dt=s(oO);lIo=r(_dt,"FNetForNextSentencePrediction"),_dt.forEach(t),iIo=r(c7e," (FNet model)"),c7e.forEach(t),dIo=i(Hs),a4=n(Hs,"LI",{});var f7e=s(a4);Sme=n(f7e,"STRONG",{});var bdt=s(Sme);cIo=r(bdt,"megatron-bert"),bdt.forEach(t),fIo=r(f7e," \u2014 "),rO=n(f7e,"A",{href:!0});var vdt=s(rO);mIo=r(vdt,"MegatronBertForNextSentencePrediction"),vdt.forEach(t),gIo=r(f7e," (MegatronBert model)"),f7e.forEach(t),hIo=i(Hs),n4=n(Hs,"LI",{});var m7e=s(n4);Rme=n(m7e,"STRONG",{});var Fdt=s(Rme);pIo=r(Fdt,"mobilebert"),Fdt.forEach(t),uIo=r(m7e," \u2014 "),tO=n(m7e,"A",{href:!0});var Tdt=s(tO);_Io=r(Tdt,"MobileBertForNextSentencePrediction"),Tdt.forEach(t),bIo=r(m7e," (MobileBERT model)"),m7e.forEach(t),vIo=i(Hs),s4=n(Hs,"LI",{});var g7e=s(s4);Pme=n(g7e,"STRONG",{});var Mdt=s(Pme);FIo=r(Mdt,"qdqbert"),Mdt.forEach(t),TIo=r(g7e," \u2014 "),aO=n(g7e,"A",{href:!0});var Edt=s(aO);MIo=r(Edt,"QDQBertForNextSentencePrediction"),Edt.forEach(t),EIo=r(g7e," (QDQBert model)"),g7e.forEach(t),Hs.forEach(t),CIo=i(ia),l4=n(ia,"P",{});var h7e=s(l4);wIo=r(h7e,"The model is set in evaluation mode by default using "),Bme=n(h7e,"CODE",{});var Cdt=s(Bme);AIo=r(Cdt,"model.eval()"),Cdt.forEach(t),yIo=r(h7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(h7e,"CODE",{});var wdt=s(Ime);LIo=r(wdt,"model.train()"),wdt.forEach(t),h7e.forEach(t),xIo=i(ia),T(i4.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),iqe=i(f),Hi=n(f,"H2",{class:!0});var mje=s(Hi);d4=n(mje,"A",{id:!0,class:!0,href:!0});var Adt=s(d4);qme=n(Adt,"SPAN",{});var ydt=s(qme);T(TL.$$.fragment,ydt),ydt.forEach(t),Adt.forEach(t),$Io=i(mje),Nme=n(mje,"SPAN",{});var Ldt=s(Nme);kIo=r(Ldt,"AutoModelForTokenClassification"),Ldt.forEach(t),mje.forEach(t),dqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(ML.$$.fragment,Us),SIo=i(Us),Ui=n(Us,"P",{});var QK=s(Ui);RIo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=n(QK,"A",{href:!0});var xdt=s(nO);PIo=r(xdt,"from_pretrained()"),xdt.forEach(t),BIo=r(QK," class method or the "),sO=n(QK,"A",{href:!0});var $dt=s(sO);IIo=r($dt,"from_config()"),$dt.forEach(t),qIo=r(QK,` class
method.`),QK.forEach(t),NIo=i(Us),EL=n(Us,"P",{});var gje=s(EL);jIo=r(gje,"This class cannot be instantiated directly using "),jme=n(gje,"CODE",{});var kdt=s(jme);DIo=r(kdt,"__init__()"),kdt.forEach(t),GIo=r(gje," (throws an error)."),gje.forEach(t),OIo=i(Us),ft=n(Us,"DIV",{class:!0});var xA=s(ft);T(CL.$$.fragment,xA),VIo=i(xA),Dme=n(xA,"P",{});var Sdt=s(Dme);XIo=r(Sdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sdt.forEach(t),zIo=i(xA),Ji=n(xA,"P",{});var HK=s(Ji);WIo=r(HK,`Note:
Loading a model from its configuration file does `),Gme=n(HK,"STRONG",{});var Rdt=s(Gme);QIo=r(Rdt,"not"),Rdt.forEach(t),HIo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(HK,"A",{href:!0});var Pdt=s(lO);UIo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),JIo=r(HK," to load the model weights."),HK.forEach(t),YIo=i(xA),T(c4.$$.fragment,xA),xA.forEach(t),KIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(wL.$$.fragment,da),ZIo=i(da),Ome=n(da,"P",{});var Bdt=s(Ome);eqo=r(Bdt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bdt.forEach(t),oqo=i(da),Ia=n(da,"P",{});var $A=s(Ia);rqo=r($A,"The model class to instantiate is selected based on the "),Vme=n($A,"CODE",{});var Idt=s(Vme);tqo=r(Idt,"model_type"),Idt.forEach(t),aqo=r($A,` property of the config object (either
passed as an argument or loaded from `),Xme=n($A,"CODE",{});var qdt=s(Xme);nqo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),sqo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n($A,"CODE",{});var Ndt=s(zme);lqo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),iqo=r($A,":"),$A.forEach(t),dqo=i(da),U=n(da,"UL",{});var J=s(U);f4=n(J,"LI",{});var p7e=s(f4);Wme=n(p7e,"STRONG",{});var jdt=s(Wme);cqo=r(jdt,"albert"),jdt.forEach(t),fqo=r(p7e," \u2014 "),iO=n(p7e,"A",{href:!0});var Ddt=s(iO);mqo=r(Ddt,"AlbertForTokenClassification"),Ddt.forEach(t),gqo=r(p7e," (ALBERT model)"),p7e.forEach(t),hqo=i(J),m4=n(J,"LI",{});var u7e=s(m4);Qme=n(u7e,"STRONG",{});var Gdt=s(Qme);pqo=r(Gdt,"bert"),Gdt.forEach(t),uqo=r(u7e," \u2014 "),dO=n(u7e,"A",{href:!0});var Odt=s(dO);_qo=r(Odt,"BertForTokenClassification"),Odt.forEach(t),bqo=r(u7e," (BERT model)"),u7e.forEach(t),vqo=i(J),g4=n(J,"LI",{});var _7e=s(g4);Hme=n(_7e,"STRONG",{});var Vdt=s(Hme);Fqo=r(Vdt,"big_bird"),Vdt.forEach(t),Tqo=r(_7e," \u2014 "),cO=n(_7e,"A",{href:!0});var Xdt=s(cO);Mqo=r(Xdt,"BigBirdForTokenClassification"),Xdt.forEach(t),Eqo=r(_7e," (BigBird model)"),_7e.forEach(t),Cqo=i(J),h4=n(J,"LI",{});var b7e=s(h4);Ume=n(b7e,"STRONG",{});var zdt=s(Ume);wqo=r(zdt,"camembert"),zdt.forEach(t),Aqo=r(b7e," \u2014 "),fO=n(b7e,"A",{href:!0});var Wdt=s(fO);yqo=r(Wdt,"CamembertForTokenClassification"),Wdt.forEach(t),Lqo=r(b7e," (CamemBERT model)"),b7e.forEach(t),xqo=i(J),p4=n(J,"LI",{});var v7e=s(p4);Jme=n(v7e,"STRONG",{});var Qdt=s(Jme);$qo=r(Qdt,"canine"),Qdt.forEach(t),kqo=r(v7e," \u2014 "),mO=n(v7e,"A",{href:!0});var Hdt=s(mO);Sqo=r(Hdt,"CanineForTokenClassification"),Hdt.forEach(t),Rqo=r(v7e," (Canine model)"),v7e.forEach(t),Pqo=i(J),u4=n(J,"LI",{});var F7e=s(u4);Yme=n(F7e,"STRONG",{});var Udt=s(Yme);Bqo=r(Udt,"convbert"),Udt.forEach(t),Iqo=r(F7e," \u2014 "),gO=n(F7e,"A",{href:!0});var Jdt=s(gO);qqo=r(Jdt,"ConvBertForTokenClassification"),Jdt.forEach(t),Nqo=r(F7e," (ConvBERT model)"),F7e.forEach(t),jqo=i(J),_4=n(J,"LI",{});var T7e=s(_4);Kme=n(T7e,"STRONG",{});var Ydt=s(Kme);Dqo=r(Ydt,"data2vec-text"),Ydt.forEach(t),Gqo=r(T7e," \u2014 "),hO=n(T7e,"A",{href:!0});var Kdt=s(hO);Oqo=r(Kdt,"Data2VecTextForTokenClassification"),Kdt.forEach(t),Vqo=r(T7e," (Data2VecText model)"),T7e.forEach(t),Xqo=i(J),b4=n(J,"LI",{});var M7e=s(b4);Zme=n(M7e,"STRONG",{});var Zdt=s(Zme);zqo=r(Zdt,"deberta"),Zdt.forEach(t),Wqo=r(M7e," \u2014 "),pO=n(M7e,"A",{href:!0});var ect=s(pO);Qqo=r(ect,"DebertaForTokenClassification"),ect.forEach(t),Hqo=r(M7e," (DeBERTa model)"),M7e.forEach(t),Uqo=i(J),v4=n(J,"LI",{});var E7e=s(v4);ege=n(E7e,"STRONG",{});var oct=s(ege);Jqo=r(oct,"deberta-v2"),oct.forEach(t),Yqo=r(E7e," \u2014 "),uO=n(E7e,"A",{href:!0});var rct=s(uO);Kqo=r(rct,"DebertaV2ForTokenClassification"),rct.forEach(t),Zqo=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),eNo=i(J),F4=n(J,"LI",{});var C7e=s(F4);oge=n(C7e,"STRONG",{});var tct=s(oge);oNo=r(tct,"distilbert"),tct.forEach(t),rNo=r(C7e," \u2014 "),_O=n(C7e,"A",{href:!0});var act=s(_O);tNo=r(act,"DistilBertForTokenClassification"),act.forEach(t),aNo=r(C7e," (DistilBERT model)"),C7e.forEach(t),nNo=i(J),T4=n(J,"LI",{});var w7e=s(T4);rge=n(w7e,"STRONG",{});var nct=s(rge);sNo=r(nct,"electra"),nct.forEach(t),lNo=r(w7e," \u2014 "),bO=n(w7e,"A",{href:!0});var sct=s(bO);iNo=r(sct,"ElectraForTokenClassification"),sct.forEach(t),dNo=r(w7e," (ELECTRA model)"),w7e.forEach(t),cNo=i(J),M4=n(J,"LI",{});var A7e=s(M4);tge=n(A7e,"STRONG",{});var lct=s(tge);fNo=r(lct,"flaubert"),lct.forEach(t),mNo=r(A7e," \u2014 "),vO=n(A7e,"A",{href:!0});var ict=s(vO);gNo=r(ict,"FlaubertForTokenClassification"),ict.forEach(t),hNo=r(A7e," (FlauBERT model)"),A7e.forEach(t),pNo=i(J),E4=n(J,"LI",{});var y7e=s(E4);age=n(y7e,"STRONG",{});var dct=s(age);uNo=r(dct,"fnet"),dct.forEach(t),_No=r(y7e," \u2014 "),FO=n(y7e,"A",{href:!0});var cct=s(FO);bNo=r(cct,"FNetForTokenClassification"),cct.forEach(t),vNo=r(y7e," (FNet model)"),y7e.forEach(t),FNo=i(J),C4=n(J,"LI",{});var L7e=s(C4);nge=n(L7e,"STRONG",{});var fct=s(nge);TNo=r(fct,"funnel"),fct.forEach(t),MNo=r(L7e," \u2014 "),TO=n(L7e,"A",{href:!0});var mct=s(TO);ENo=r(mct,"FunnelForTokenClassification"),mct.forEach(t),CNo=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),wNo=i(J),w4=n(J,"LI",{});var x7e=s(w4);sge=n(x7e,"STRONG",{});var gct=s(sge);ANo=r(gct,"gpt2"),gct.forEach(t),yNo=r(x7e," \u2014 "),MO=n(x7e,"A",{href:!0});var hct=s(MO);LNo=r(hct,"GPT2ForTokenClassification"),hct.forEach(t),xNo=r(x7e," (OpenAI GPT-2 model)"),x7e.forEach(t),$No=i(J),A4=n(J,"LI",{});var $7e=s(A4);lge=n($7e,"STRONG",{});var pct=s(lge);kNo=r(pct,"ibert"),pct.forEach(t),SNo=r($7e," \u2014 "),EO=n($7e,"A",{href:!0});var uct=s(EO);RNo=r(uct,"IBertForTokenClassification"),uct.forEach(t),PNo=r($7e," (I-BERT model)"),$7e.forEach(t),BNo=i(J),y4=n(J,"LI",{});var k7e=s(y4);ige=n(k7e,"STRONG",{});var _ct=s(ige);INo=r(_ct,"layoutlm"),_ct.forEach(t),qNo=r(k7e," \u2014 "),CO=n(k7e,"A",{href:!0});var bct=s(CO);NNo=r(bct,"LayoutLMForTokenClassification"),bct.forEach(t),jNo=r(k7e," (LayoutLM model)"),k7e.forEach(t),DNo=i(J),L4=n(J,"LI",{});var S7e=s(L4);dge=n(S7e,"STRONG",{});var vct=s(dge);GNo=r(vct,"layoutlmv2"),vct.forEach(t),ONo=r(S7e," \u2014 "),wO=n(S7e,"A",{href:!0});var Fct=s(wO);VNo=r(Fct,"LayoutLMv2ForTokenClassification"),Fct.forEach(t),XNo=r(S7e," (LayoutLMv2 model)"),S7e.forEach(t),zNo=i(J),x4=n(J,"LI",{});var R7e=s(x4);cge=n(R7e,"STRONG",{});var Tct=s(cge);WNo=r(Tct,"longformer"),Tct.forEach(t),QNo=r(R7e," \u2014 "),AO=n(R7e,"A",{href:!0});var Mct=s(AO);HNo=r(Mct,"LongformerForTokenClassification"),Mct.forEach(t),UNo=r(R7e," (Longformer model)"),R7e.forEach(t),JNo=i(J),$4=n(J,"LI",{});var P7e=s($4);fge=n(P7e,"STRONG",{});var Ect=s(fge);YNo=r(Ect,"megatron-bert"),Ect.forEach(t),KNo=r(P7e," \u2014 "),yO=n(P7e,"A",{href:!0});var Cct=s(yO);ZNo=r(Cct,"MegatronBertForTokenClassification"),Cct.forEach(t),ejo=r(P7e," (MegatronBert model)"),P7e.forEach(t),ojo=i(J),k4=n(J,"LI",{});var B7e=s(k4);mge=n(B7e,"STRONG",{});var wct=s(mge);rjo=r(wct,"mobilebert"),wct.forEach(t),tjo=r(B7e," \u2014 "),LO=n(B7e,"A",{href:!0});var Act=s(LO);ajo=r(Act,"MobileBertForTokenClassification"),Act.forEach(t),njo=r(B7e," (MobileBERT model)"),B7e.forEach(t),sjo=i(J),S4=n(J,"LI",{});var I7e=s(S4);gge=n(I7e,"STRONG",{});var yct=s(gge);ljo=r(yct,"mpnet"),yct.forEach(t),ijo=r(I7e," \u2014 "),xO=n(I7e,"A",{href:!0});var Lct=s(xO);djo=r(Lct,"MPNetForTokenClassification"),Lct.forEach(t),cjo=r(I7e," (MPNet model)"),I7e.forEach(t),fjo=i(J),R4=n(J,"LI",{});var q7e=s(R4);hge=n(q7e,"STRONG",{});var xct=s(hge);mjo=r(xct,"nystromformer"),xct.forEach(t),gjo=r(q7e," \u2014 "),$O=n(q7e,"A",{href:!0});var $ct=s($O);hjo=r($ct,"NystromformerForTokenClassification"),$ct.forEach(t),pjo=r(q7e," (Nystromformer model)"),q7e.forEach(t),ujo=i(J),P4=n(J,"LI",{});var N7e=s(P4);pge=n(N7e,"STRONG",{});var kct=s(pge);_jo=r(kct,"qdqbert"),kct.forEach(t),bjo=r(N7e," \u2014 "),kO=n(N7e,"A",{href:!0});var Sct=s(kO);vjo=r(Sct,"QDQBertForTokenClassification"),Sct.forEach(t),Fjo=r(N7e," (QDQBert model)"),N7e.forEach(t),Tjo=i(J),B4=n(J,"LI",{});var j7e=s(B4);uge=n(j7e,"STRONG",{});var Rct=s(uge);Mjo=r(Rct,"rembert"),Rct.forEach(t),Ejo=r(j7e," \u2014 "),SO=n(j7e,"A",{href:!0});var Pct=s(SO);Cjo=r(Pct,"RemBertForTokenClassification"),Pct.forEach(t),wjo=r(j7e," (RemBERT model)"),j7e.forEach(t),Ajo=i(J),I4=n(J,"LI",{});var D7e=s(I4);_ge=n(D7e,"STRONG",{});var Bct=s(_ge);yjo=r(Bct,"roberta"),Bct.forEach(t),Ljo=r(D7e," \u2014 "),RO=n(D7e,"A",{href:!0});var Ict=s(RO);xjo=r(Ict,"RobertaForTokenClassification"),Ict.forEach(t),$jo=r(D7e," (RoBERTa model)"),D7e.forEach(t),kjo=i(J),q4=n(J,"LI",{});var G7e=s(q4);bge=n(G7e,"STRONG",{});var qct=s(bge);Sjo=r(qct,"roformer"),qct.forEach(t),Rjo=r(G7e," \u2014 "),PO=n(G7e,"A",{href:!0});var Nct=s(PO);Pjo=r(Nct,"RoFormerForTokenClassification"),Nct.forEach(t),Bjo=r(G7e," (RoFormer model)"),G7e.forEach(t),Ijo=i(J),N4=n(J,"LI",{});var O7e=s(N4);vge=n(O7e,"STRONG",{});var jct=s(vge);qjo=r(jct,"squeezebert"),jct.forEach(t),Njo=r(O7e," \u2014 "),BO=n(O7e,"A",{href:!0});var Dct=s(BO);jjo=r(Dct,"SqueezeBertForTokenClassification"),Dct.forEach(t),Djo=r(O7e," (SqueezeBERT model)"),O7e.forEach(t),Gjo=i(J),j4=n(J,"LI",{});var V7e=s(j4);Fge=n(V7e,"STRONG",{});var Gct=s(Fge);Ojo=r(Gct,"xlm"),Gct.forEach(t),Vjo=r(V7e," \u2014 "),IO=n(V7e,"A",{href:!0});var Oct=s(IO);Xjo=r(Oct,"XLMForTokenClassification"),Oct.forEach(t),zjo=r(V7e," (XLM model)"),V7e.forEach(t),Wjo=i(J),D4=n(J,"LI",{});var X7e=s(D4);Tge=n(X7e,"STRONG",{});var Vct=s(Tge);Qjo=r(Vct,"xlm-roberta"),Vct.forEach(t),Hjo=r(X7e," \u2014 "),qO=n(X7e,"A",{href:!0});var Xct=s(qO);Ujo=r(Xct,"XLMRobertaForTokenClassification"),Xct.forEach(t),Jjo=r(X7e," (XLM-RoBERTa model)"),X7e.forEach(t),Yjo=i(J),G4=n(J,"LI",{});var z7e=s(G4);Mge=n(z7e,"STRONG",{});var zct=s(Mge);Kjo=r(zct,"xlm-roberta-xl"),zct.forEach(t),Zjo=r(z7e," \u2014 "),NO=n(z7e,"A",{href:!0});var Wct=s(NO);eDo=r(Wct,"XLMRobertaXLForTokenClassification"),Wct.forEach(t),oDo=r(z7e," (XLM-RoBERTa-XL model)"),z7e.forEach(t),rDo=i(J),O4=n(J,"LI",{});var W7e=s(O4);Ege=n(W7e,"STRONG",{});var Qct=s(Ege);tDo=r(Qct,"xlnet"),Qct.forEach(t),aDo=r(W7e," \u2014 "),jO=n(W7e,"A",{href:!0});var Hct=s(jO);nDo=r(Hct,"XLNetForTokenClassification"),Hct.forEach(t),sDo=r(W7e," (XLNet model)"),W7e.forEach(t),lDo=i(J),V4=n(J,"LI",{});var Q7e=s(V4);Cge=n(Q7e,"STRONG",{});var Uct=s(Cge);iDo=r(Uct,"yoso"),Uct.forEach(t),dDo=r(Q7e," \u2014 "),DO=n(Q7e,"A",{href:!0});var Jct=s(DO);cDo=r(Jct,"YosoForTokenClassification"),Jct.forEach(t),fDo=r(Q7e," (YOSO model)"),Q7e.forEach(t),J.forEach(t),mDo=i(da),X4=n(da,"P",{});var H7e=s(X4);gDo=r(H7e,"The model is set in evaluation mode by default using "),wge=n(H7e,"CODE",{});var Yct=s(wge);hDo=r(Yct,"model.eval()"),Yct.forEach(t),pDo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=n(H7e,"CODE",{});var Kct=s(Age);uDo=r(Kct,"model.train()"),Kct.forEach(t),H7e.forEach(t),_Do=i(da),T(z4.$$.fragment,da),da.forEach(t),Us.forEach(t),cqe=i(f),Yi=n(f,"H2",{class:!0});var hje=s(Yi);W4=n(hje,"A",{id:!0,class:!0,href:!0});var Zct=s(W4);yge=n(Zct,"SPAN",{});var eft=s(yge);T(AL.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),bDo=i(hje),Lge=n(hje,"SPAN",{});var oft=s(Lge);vDo=r(oft,"AutoModelForQuestionAnswering"),oft.forEach(t),hje.forEach(t),fqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(yL.$$.fragment,Js),FDo=i(Js),Ki=n(Js,"P",{});var UK=s(Ki);TDo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=n(UK,"A",{href:!0});var rft=s(GO);MDo=r(rft,"from_pretrained()"),rft.forEach(t),EDo=r(UK," class method or the "),OO=n(UK,"A",{href:!0});var tft=s(OO);CDo=r(tft,"from_config()"),tft.forEach(t),wDo=r(UK,` class
method.`),UK.forEach(t),ADo=i(Js),LL=n(Js,"P",{});var pje=s(LL);yDo=r(pje,"This class cannot be instantiated directly using "),xge=n(pje,"CODE",{});var aft=s(xge);LDo=r(aft,"__init__()"),aft.forEach(t),xDo=r(pje," (throws an error)."),pje.forEach(t),$Do=i(Js),mt=n(Js,"DIV",{class:!0});var kA=s(mt);T(xL.$$.fragment,kA),kDo=i(kA),$ge=n(kA,"P",{});var nft=s($ge);SDo=r(nft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nft.forEach(t),RDo=i(kA),Zi=n(kA,"P",{});var JK=s(Zi);PDo=r(JK,`Note:
Loading a model from its configuration file does `),kge=n(JK,"STRONG",{});var sft=s(kge);BDo=r(sft,"not"),sft.forEach(t),IDo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(JK,"A",{href:!0});var lft=s(VO);qDo=r(lft,"from_pretrained()"),lft.forEach(t),NDo=r(JK," to load the model weights."),JK.forEach(t),jDo=i(kA),T(Q4.$$.fragment,kA),kA.forEach(t),DDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T($L.$$.fragment,ca),GDo=i(ca),Sge=n(ca,"P",{});var ift=s(Sge);ODo=r(ift,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ift.forEach(t),VDo=i(ca),qa=n(ca,"P",{});var SA=s(qa);XDo=r(SA,"The model class to instantiate is selected based on the "),Rge=n(SA,"CODE",{});var dft=s(Rge);zDo=r(dft,"model_type"),dft.forEach(t),WDo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Pge=n(SA,"CODE",{});var cft=s(Pge);QDo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),HDo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(SA,"CODE",{});var fft=s(Bge);UDo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),JDo=r(SA,":"),SA.forEach(t),YDo=i(ca),V=n(ca,"UL",{});var X=s(V);H4=n(X,"LI",{});var U7e=s(H4);Ige=n(U7e,"STRONG",{});var mft=s(Ige);KDo=r(mft,"albert"),mft.forEach(t),ZDo=r(U7e," \u2014 "),XO=n(U7e,"A",{href:!0});var gft=s(XO);eGo=r(gft,"AlbertForQuestionAnswering"),gft.forEach(t),oGo=r(U7e," (ALBERT model)"),U7e.forEach(t),rGo=i(X),U4=n(X,"LI",{});var J7e=s(U4);qge=n(J7e,"STRONG",{});var hft=s(qge);tGo=r(hft,"bart"),hft.forEach(t),aGo=r(J7e," \u2014 "),zO=n(J7e,"A",{href:!0});var pft=s(zO);nGo=r(pft,"BartForQuestionAnswering"),pft.forEach(t),sGo=r(J7e," (BART model)"),J7e.forEach(t),lGo=i(X),J4=n(X,"LI",{});var Y7e=s(J4);Nge=n(Y7e,"STRONG",{});var uft=s(Nge);iGo=r(uft,"bert"),uft.forEach(t),dGo=r(Y7e," \u2014 "),WO=n(Y7e,"A",{href:!0});var _ft=s(WO);cGo=r(_ft,"BertForQuestionAnswering"),_ft.forEach(t),fGo=r(Y7e," (BERT model)"),Y7e.forEach(t),mGo=i(X),Y4=n(X,"LI",{});var K7e=s(Y4);jge=n(K7e,"STRONG",{});var bft=s(jge);gGo=r(bft,"big_bird"),bft.forEach(t),hGo=r(K7e," \u2014 "),QO=n(K7e,"A",{href:!0});var vft=s(QO);pGo=r(vft,"BigBirdForQuestionAnswering"),vft.forEach(t),uGo=r(K7e," (BigBird model)"),K7e.forEach(t),_Go=i(X),K4=n(X,"LI",{});var Z7e=s(K4);Dge=n(Z7e,"STRONG",{});var Fft=s(Dge);bGo=r(Fft,"bigbird_pegasus"),Fft.forEach(t),vGo=r(Z7e," \u2014 "),HO=n(Z7e,"A",{href:!0});var Tft=s(HO);FGo=r(Tft,"BigBirdPegasusForQuestionAnswering"),Tft.forEach(t),TGo=r(Z7e," (BigBirdPegasus model)"),Z7e.forEach(t),MGo=i(X),Z4=n(X,"LI",{});var e9e=s(Z4);Gge=n(e9e,"STRONG",{});var Mft=s(Gge);EGo=r(Mft,"camembert"),Mft.forEach(t),CGo=r(e9e," \u2014 "),UO=n(e9e,"A",{href:!0});var Eft=s(UO);wGo=r(Eft,"CamembertForQuestionAnswering"),Eft.forEach(t),AGo=r(e9e," (CamemBERT model)"),e9e.forEach(t),yGo=i(X),e5=n(X,"LI",{});var o9e=s(e5);Oge=n(o9e,"STRONG",{});var Cft=s(Oge);LGo=r(Cft,"canine"),Cft.forEach(t),xGo=r(o9e," \u2014 "),JO=n(o9e,"A",{href:!0});var wft=s(JO);$Go=r(wft,"CanineForQuestionAnswering"),wft.forEach(t),kGo=r(o9e," (Canine model)"),o9e.forEach(t),SGo=i(X),o5=n(X,"LI",{});var r9e=s(o5);Vge=n(r9e,"STRONG",{});var Aft=s(Vge);RGo=r(Aft,"convbert"),Aft.forEach(t),PGo=r(r9e," \u2014 "),YO=n(r9e,"A",{href:!0});var yft=s(YO);BGo=r(yft,"ConvBertForQuestionAnswering"),yft.forEach(t),IGo=r(r9e," (ConvBERT model)"),r9e.forEach(t),qGo=i(X),r5=n(X,"LI",{});var t9e=s(r5);Xge=n(t9e,"STRONG",{});var Lft=s(Xge);NGo=r(Lft,"data2vec-text"),Lft.forEach(t),jGo=r(t9e," \u2014 "),KO=n(t9e,"A",{href:!0});var xft=s(KO);DGo=r(xft,"Data2VecTextForQuestionAnswering"),xft.forEach(t),GGo=r(t9e," (Data2VecText model)"),t9e.forEach(t),OGo=i(X),t5=n(X,"LI",{});var a9e=s(t5);zge=n(a9e,"STRONG",{});var $ft=s(zge);VGo=r($ft,"deberta"),$ft.forEach(t),XGo=r(a9e," \u2014 "),ZO=n(a9e,"A",{href:!0});var kft=s(ZO);zGo=r(kft,"DebertaForQuestionAnswering"),kft.forEach(t),WGo=r(a9e," (DeBERTa model)"),a9e.forEach(t),QGo=i(X),a5=n(X,"LI",{});var n9e=s(a5);Wge=n(n9e,"STRONG",{});var Sft=s(Wge);HGo=r(Sft,"deberta-v2"),Sft.forEach(t),UGo=r(n9e," \u2014 "),eV=n(n9e,"A",{href:!0});var Rft=s(eV);JGo=r(Rft,"DebertaV2ForQuestionAnswering"),Rft.forEach(t),YGo=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),KGo=i(X),n5=n(X,"LI",{});var s9e=s(n5);Qge=n(s9e,"STRONG",{});var Pft=s(Qge);ZGo=r(Pft,"distilbert"),Pft.forEach(t),eOo=r(s9e," \u2014 "),oV=n(s9e,"A",{href:!0});var Bft=s(oV);oOo=r(Bft,"DistilBertForQuestionAnswering"),Bft.forEach(t),rOo=r(s9e," (DistilBERT model)"),s9e.forEach(t),tOo=i(X),s5=n(X,"LI",{});var l9e=s(s5);Hge=n(l9e,"STRONG",{});var Ift=s(Hge);aOo=r(Ift,"electra"),Ift.forEach(t),nOo=r(l9e," \u2014 "),rV=n(l9e,"A",{href:!0});var qft=s(rV);sOo=r(qft,"ElectraForQuestionAnswering"),qft.forEach(t),lOo=r(l9e," (ELECTRA model)"),l9e.forEach(t),iOo=i(X),l5=n(X,"LI",{});var i9e=s(l5);Uge=n(i9e,"STRONG",{});var Nft=s(Uge);dOo=r(Nft,"flaubert"),Nft.forEach(t),cOo=r(i9e," \u2014 "),tV=n(i9e,"A",{href:!0});var jft=s(tV);fOo=r(jft,"FlaubertForQuestionAnsweringSimple"),jft.forEach(t),mOo=r(i9e," (FlauBERT model)"),i9e.forEach(t),gOo=i(X),i5=n(X,"LI",{});var d9e=s(i5);Jge=n(d9e,"STRONG",{});var Dft=s(Jge);hOo=r(Dft,"fnet"),Dft.forEach(t),pOo=r(d9e," \u2014 "),aV=n(d9e,"A",{href:!0});var Gft=s(aV);uOo=r(Gft,"FNetForQuestionAnswering"),Gft.forEach(t),_Oo=r(d9e," (FNet model)"),d9e.forEach(t),bOo=i(X),d5=n(X,"LI",{});var c9e=s(d5);Yge=n(c9e,"STRONG",{});var Oft=s(Yge);vOo=r(Oft,"funnel"),Oft.forEach(t),FOo=r(c9e," \u2014 "),nV=n(c9e,"A",{href:!0});var Vft=s(nV);TOo=r(Vft,"FunnelForQuestionAnswering"),Vft.forEach(t),MOo=r(c9e," (Funnel Transformer model)"),c9e.forEach(t),EOo=i(X),c5=n(X,"LI",{});var f9e=s(c5);Kge=n(f9e,"STRONG",{});var Xft=s(Kge);COo=r(Xft,"gptj"),Xft.forEach(t),wOo=r(f9e," \u2014 "),sV=n(f9e,"A",{href:!0});var zft=s(sV);AOo=r(zft,"GPTJForQuestionAnswering"),zft.forEach(t),yOo=r(f9e," (GPT-J model)"),f9e.forEach(t),LOo=i(X),f5=n(X,"LI",{});var m9e=s(f5);Zge=n(m9e,"STRONG",{});var Wft=s(Zge);xOo=r(Wft,"ibert"),Wft.forEach(t),$Oo=r(m9e," \u2014 "),lV=n(m9e,"A",{href:!0});var Qft=s(lV);kOo=r(Qft,"IBertForQuestionAnswering"),Qft.forEach(t),SOo=r(m9e," (I-BERT model)"),m9e.forEach(t),ROo=i(X),m5=n(X,"LI",{});var g9e=s(m5);ehe=n(g9e,"STRONG",{});var Hft=s(ehe);POo=r(Hft,"layoutlmv2"),Hft.forEach(t),BOo=r(g9e," \u2014 "),iV=n(g9e,"A",{href:!0});var Uft=s(iV);IOo=r(Uft,"LayoutLMv2ForQuestionAnswering"),Uft.forEach(t),qOo=r(g9e," (LayoutLMv2 model)"),g9e.forEach(t),NOo=i(X),g5=n(X,"LI",{});var h9e=s(g5);ohe=n(h9e,"STRONG",{});var Jft=s(ohe);jOo=r(Jft,"led"),Jft.forEach(t),DOo=r(h9e," \u2014 "),dV=n(h9e,"A",{href:!0});var Yft=s(dV);GOo=r(Yft,"LEDForQuestionAnswering"),Yft.forEach(t),OOo=r(h9e," (LED model)"),h9e.forEach(t),VOo=i(X),h5=n(X,"LI",{});var p9e=s(h5);rhe=n(p9e,"STRONG",{});var Kft=s(rhe);XOo=r(Kft,"longformer"),Kft.forEach(t),zOo=r(p9e," \u2014 "),cV=n(p9e,"A",{href:!0});var Zft=s(cV);WOo=r(Zft,"LongformerForQuestionAnswering"),Zft.forEach(t),QOo=r(p9e," (Longformer model)"),p9e.forEach(t),HOo=i(X),p5=n(X,"LI",{});var u9e=s(p5);the=n(u9e,"STRONG",{});var emt=s(the);UOo=r(emt,"lxmert"),emt.forEach(t),JOo=r(u9e," \u2014 "),fV=n(u9e,"A",{href:!0});var omt=s(fV);YOo=r(omt,"LxmertForQuestionAnswering"),omt.forEach(t),KOo=r(u9e," (LXMERT model)"),u9e.forEach(t),ZOo=i(X),u5=n(X,"LI",{});var _9e=s(u5);ahe=n(_9e,"STRONG",{});var rmt=s(ahe);eVo=r(rmt,"mbart"),rmt.forEach(t),oVo=r(_9e," \u2014 "),mV=n(_9e,"A",{href:!0});var tmt=s(mV);rVo=r(tmt,"MBartForQuestionAnswering"),tmt.forEach(t),tVo=r(_9e," (mBART model)"),_9e.forEach(t),aVo=i(X),_5=n(X,"LI",{});var b9e=s(_5);nhe=n(b9e,"STRONG",{});var amt=s(nhe);nVo=r(amt,"megatron-bert"),amt.forEach(t),sVo=r(b9e," \u2014 "),gV=n(b9e,"A",{href:!0});var nmt=s(gV);lVo=r(nmt,"MegatronBertForQuestionAnswering"),nmt.forEach(t),iVo=r(b9e," (MegatronBert model)"),b9e.forEach(t),dVo=i(X),b5=n(X,"LI",{});var v9e=s(b5);she=n(v9e,"STRONG",{});var smt=s(she);cVo=r(smt,"mobilebert"),smt.forEach(t),fVo=r(v9e," \u2014 "),hV=n(v9e,"A",{href:!0});var lmt=s(hV);mVo=r(lmt,"MobileBertForQuestionAnswering"),lmt.forEach(t),gVo=r(v9e," (MobileBERT model)"),v9e.forEach(t),hVo=i(X),v5=n(X,"LI",{});var F9e=s(v5);lhe=n(F9e,"STRONG",{});var imt=s(lhe);pVo=r(imt,"mpnet"),imt.forEach(t),uVo=r(F9e," \u2014 "),pV=n(F9e,"A",{href:!0});var dmt=s(pV);_Vo=r(dmt,"MPNetForQuestionAnswering"),dmt.forEach(t),bVo=r(F9e," (MPNet model)"),F9e.forEach(t),vVo=i(X),F5=n(X,"LI",{});var T9e=s(F5);ihe=n(T9e,"STRONG",{});var cmt=s(ihe);FVo=r(cmt,"nystromformer"),cmt.forEach(t),TVo=r(T9e," \u2014 "),uV=n(T9e,"A",{href:!0});var fmt=s(uV);MVo=r(fmt,"NystromformerForQuestionAnswering"),fmt.forEach(t),EVo=r(T9e," (Nystromformer model)"),T9e.forEach(t),CVo=i(X),T5=n(X,"LI",{});var M9e=s(T5);dhe=n(M9e,"STRONG",{});var mmt=s(dhe);wVo=r(mmt,"qdqbert"),mmt.forEach(t),AVo=r(M9e," \u2014 "),_V=n(M9e,"A",{href:!0});var gmt=s(_V);yVo=r(gmt,"QDQBertForQuestionAnswering"),gmt.forEach(t),LVo=r(M9e," (QDQBert model)"),M9e.forEach(t),xVo=i(X),M5=n(X,"LI",{});var E9e=s(M5);che=n(E9e,"STRONG",{});var hmt=s(che);$Vo=r(hmt,"reformer"),hmt.forEach(t),kVo=r(E9e," \u2014 "),bV=n(E9e,"A",{href:!0});var pmt=s(bV);SVo=r(pmt,"ReformerForQuestionAnswering"),pmt.forEach(t),RVo=r(E9e," (Reformer model)"),E9e.forEach(t),PVo=i(X),E5=n(X,"LI",{});var C9e=s(E5);fhe=n(C9e,"STRONG",{});var umt=s(fhe);BVo=r(umt,"rembert"),umt.forEach(t),IVo=r(C9e," \u2014 "),vV=n(C9e,"A",{href:!0});var _mt=s(vV);qVo=r(_mt,"RemBertForQuestionAnswering"),_mt.forEach(t),NVo=r(C9e," (RemBERT model)"),C9e.forEach(t),jVo=i(X),C5=n(X,"LI",{});var w9e=s(C5);mhe=n(w9e,"STRONG",{});var bmt=s(mhe);DVo=r(bmt,"roberta"),bmt.forEach(t),GVo=r(w9e," \u2014 "),FV=n(w9e,"A",{href:!0});var vmt=s(FV);OVo=r(vmt,"RobertaForQuestionAnswering"),vmt.forEach(t),VVo=r(w9e," (RoBERTa model)"),w9e.forEach(t),XVo=i(X),w5=n(X,"LI",{});var A9e=s(w5);ghe=n(A9e,"STRONG",{});var Fmt=s(ghe);zVo=r(Fmt,"roformer"),Fmt.forEach(t),WVo=r(A9e," \u2014 "),TV=n(A9e,"A",{href:!0});var Tmt=s(TV);QVo=r(Tmt,"RoFormerForQuestionAnswering"),Tmt.forEach(t),HVo=r(A9e," (RoFormer model)"),A9e.forEach(t),UVo=i(X),A5=n(X,"LI",{});var y9e=s(A5);hhe=n(y9e,"STRONG",{});var Mmt=s(hhe);JVo=r(Mmt,"splinter"),Mmt.forEach(t),YVo=r(y9e," \u2014 "),MV=n(y9e,"A",{href:!0});var Emt=s(MV);KVo=r(Emt,"SplinterForQuestionAnswering"),Emt.forEach(t),ZVo=r(y9e," (Splinter model)"),y9e.forEach(t),eXo=i(X),y5=n(X,"LI",{});var L9e=s(y5);phe=n(L9e,"STRONG",{});var Cmt=s(phe);oXo=r(Cmt,"squeezebert"),Cmt.forEach(t),rXo=r(L9e," \u2014 "),EV=n(L9e,"A",{href:!0});var wmt=s(EV);tXo=r(wmt,"SqueezeBertForQuestionAnswering"),wmt.forEach(t),aXo=r(L9e," (SqueezeBERT model)"),L9e.forEach(t),nXo=i(X),L5=n(X,"LI",{});var x9e=s(L5);uhe=n(x9e,"STRONG",{});var Amt=s(uhe);sXo=r(Amt,"xlm"),Amt.forEach(t),lXo=r(x9e," \u2014 "),CV=n(x9e,"A",{href:!0});var ymt=s(CV);iXo=r(ymt,"XLMForQuestionAnsweringSimple"),ymt.forEach(t),dXo=r(x9e," (XLM model)"),x9e.forEach(t),cXo=i(X),x5=n(X,"LI",{});var $9e=s(x5);_he=n($9e,"STRONG",{});var Lmt=s(_he);fXo=r(Lmt,"xlm-roberta"),Lmt.forEach(t),mXo=r($9e," \u2014 "),wV=n($9e,"A",{href:!0});var xmt=s(wV);gXo=r(xmt,"XLMRobertaForQuestionAnswering"),xmt.forEach(t),hXo=r($9e," (XLM-RoBERTa model)"),$9e.forEach(t),pXo=i(X),$5=n(X,"LI",{});var k9e=s($5);bhe=n(k9e,"STRONG",{});var $mt=s(bhe);uXo=r($mt,"xlm-roberta-xl"),$mt.forEach(t),_Xo=r(k9e," \u2014 "),AV=n(k9e,"A",{href:!0});var kmt=s(AV);bXo=r(kmt,"XLMRobertaXLForQuestionAnswering"),kmt.forEach(t),vXo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),FXo=i(X),k5=n(X,"LI",{});var S9e=s(k5);vhe=n(S9e,"STRONG",{});var Smt=s(vhe);TXo=r(Smt,"xlnet"),Smt.forEach(t),MXo=r(S9e," \u2014 "),yV=n(S9e,"A",{href:!0});var Rmt=s(yV);EXo=r(Rmt,"XLNetForQuestionAnsweringSimple"),Rmt.forEach(t),CXo=r(S9e," (XLNet model)"),S9e.forEach(t),wXo=i(X),S5=n(X,"LI",{});var R9e=s(S5);Fhe=n(R9e,"STRONG",{});var Pmt=s(Fhe);AXo=r(Pmt,"yoso"),Pmt.forEach(t),yXo=r(R9e," \u2014 "),LV=n(R9e,"A",{href:!0});var Bmt=s(LV);LXo=r(Bmt,"YosoForQuestionAnswering"),Bmt.forEach(t),xXo=r(R9e," (YOSO model)"),R9e.forEach(t),X.forEach(t),$Xo=i(ca),R5=n(ca,"P",{});var P9e=s(R5);kXo=r(P9e,"The model is set in evaluation mode by default using "),The=n(P9e,"CODE",{});var Imt=s(The);SXo=r(Imt,"model.eval()"),Imt.forEach(t),RXo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(P9e,"CODE",{});var qmt=s(Mhe);PXo=r(qmt,"model.train()"),qmt.forEach(t),P9e.forEach(t),BXo=i(ca),T(P5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),mqe=i(f),ed=n(f,"H2",{class:!0});var uje=s(ed);B5=n(uje,"A",{id:!0,class:!0,href:!0});var Nmt=s(B5);Ehe=n(Nmt,"SPAN",{});var jmt=s(Ehe);T(kL.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),IXo=i(uje),Che=n(uje,"SPAN",{});var Dmt=s(Che);qXo=r(Dmt,"AutoModelForTableQuestionAnswering"),Dmt.forEach(t),uje.forEach(t),gqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(SL.$$.fragment,Ys),NXo=i(Ys),od=n(Ys,"P",{});var YK=s(od);jXo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=n(YK,"A",{href:!0});var Gmt=s(xV);DXo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),GXo=r(YK," class method or the "),$V=n(YK,"A",{href:!0});var Omt=s($V);OXo=r(Omt,"from_config()"),Omt.forEach(t),VXo=r(YK,` class
method.`),YK.forEach(t),XXo=i(Ys),RL=n(Ys,"P",{});var _je=s(RL);zXo=r(_je,"This class cannot be instantiated directly using "),whe=n(_je,"CODE",{});var Vmt=s(whe);WXo=r(Vmt,"__init__()"),Vmt.forEach(t),QXo=r(_je," (throws an error)."),_je.forEach(t),HXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var RA=s(gt);T(PL.$$.fragment,RA),UXo=i(RA),Ahe=n(RA,"P",{});var Xmt=s(Ahe);JXo=r(Xmt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xmt.forEach(t),YXo=i(RA),rd=n(RA,"P",{});var KK=s(rd);KXo=r(KK,`Note:
Loading a model from its configuration file does `),yhe=n(KK,"STRONG",{});var zmt=s(yhe);ZXo=r(zmt,"not"),zmt.forEach(t),ezo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(KK,"A",{href:!0});var Wmt=s(kV);ozo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),rzo=r(KK," to load the model weights."),KK.forEach(t),tzo=i(RA),T(I5.$$.fragment,RA),RA.forEach(t),azo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(BL.$$.fragment,fa),nzo=i(fa),Lhe=n(fa,"P",{});var Qmt=s(Lhe);szo=r(Qmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qmt.forEach(t),lzo=i(fa),Na=n(fa,"P",{});var PA=s(Na);izo=r(PA,"The model class to instantiate is selected based on the "),xhe=n(PA,"CODE",{});var Hmt=s(xhe);dzo=r(Hmt,"model_type"),Hmt.forEach(t),czo=r(PA,` property of the config object (either
passed as an argument or loaded from `),$he=n(PA,"CODE",{});var Umt=s($he);fzo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),mzo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(PA,"CODE",{});var Jmt=s(khe);gzo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),hzo=r(PA,":"),PA.forEach(t),pzo=i(fa),She=n(fa,"UL",{});var Ymt=s(She);q5=n(Ymt,"LI",{});var B9e=s(q5);Rhe=n(B9e,"STRONG",{});var Kmt=s(Rhe);uzo=r(Kmt,"tapas"),Kmt.forEach(t),_zo=r(B9e," \u2014 "),SV=n(B9e,"A",{href:!0});var Zmt=s(SV);bzo=r(Zmt,"TapasForQuestionAnswering"),Zmt.forEach(t),vzo=r(B9e," (TAPAS model)"),B9e.forEach(t),Ymt.forEach(t),Fzo=i(fa),N5=n(fa,"P",{});var I9e=s(N5);Tzo=r(I9e,"The model is set in evaluation mode by default using "),Phe=n(I9e,"CODE",{});var egt=s(Phe);Mzo=r(egt,"model.eval()"),egt.forEach(t),Ezo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bhe=n(I9e,"CODE",{});var ogt=s(Bhe);Czo=r(ogt,"model.train()"),ogt.forEach(t),I9e.forEach(t),wzo=i(fa),T(j5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),hqe=i(f),td=n(f,"H2",{class:!0});var bje=s(td);D5=n(bje,"A",{id:!0,class:!0,href:!0});var rgt=s(D5);Ihe=n(rgt,"SPAN",{});var tgt=s(Ihe);T(IL.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),Azo=i(bje),qhe=n(bje,"SPAN",{});var agt=s(qhe);yzo=r(agt,"AutoModelForImageClassification"),agt.forEach(t),bje.forEach(t),pqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(qL.$$.fragment,Ks),Lzo=i(Ks),ad=n(Ks,"P",{});var ZK=s(ad);xzo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(ZK,"A",{href:!0});var ngt=s(RV);$zo=r(ngt,"from_pretrained()"),ngt.forEach(t),kzo=r(ZK," class method or the "),PV=n(ZK,"A",{href:!0});var sgt=s(PV);Szo=r(sgt,"from_config()"),sgt.forEach(t),Rzo=r(ZK,` class
method.`),ZK.forEach(t),Pzo=i(Ks),NL=n(Ks,"P",{});var vje=s(NL);Bzo=r(vje,"This class cannot be instantiated directly using "),Nhe=n(vje,"CODE",{});var lgt=s(Nhe);Izo=r(lgt,"__init__()"),lgt.forEach(t),qzo=r(vje," (throws an error)."),vje.forEach(t),Nzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var BA=s(ht);T(jL.$$.fragment,BA),jzo=i(BA),jhe=n(BA,"P",{});var igt=s(jhe);Dzo=r(igt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),igt.forEach(t),Gzo=i(BA),nd=n(BA,"P",{});var eZ=s(nd);Ozo=r(eZ,`Note:
Loading a model from its configuration file does `),Dhe=n(eZ,"STRONG",{});var dgt=s(Dhe);Vzo=r(dgt,"not"),dgt.forEach(t),Xzo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(eZ,"A",{href:!0});var cgt=s(BV);zzo=r(cgt,"from_pretrained()"),cgt.forEach(t),Wzo=r(eZ," to load the model weights."),eZ.forEach(t),Qzo=i(BA),T(G5.$$.fragment,BA),BA.forEach(t),Hzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(DL.$$.fragment,ma),Uzo=i(ma),Ghe=n(ma,"P",{});var fgt=s(Ghe);Jzo=r(fgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fgt.forEach(t),Yzo=i(ma),ja=n(ma,"P",{});var IA=s(ja);Kzo=r(IA,"The model class to instantiate is selected based on the "),Ohe=n(IA,"CODE",{});var mgt=s(Ohe);Zzo=r(mgt,"model_type"),mgt.forEach(t),eWo=r(IA,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(IA,"CODE",{});var ggt=s(Vhe);oWo=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),rWo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(IA,"CODE",{});var hgt=s(Xhe);tWo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),aWo=r(IA,":"),IA.forEach(t),nWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);O5=n(Ee,"LI",{});var q9e=s(O5);zhe=n(q9e,"STRONG",{});var pgt=s(zhe);sWo=r(pgt,"beit"),pgt.forEach(t),lWo=r(q9e," \u2014 "),IV=n(q9e,"A",{href:!0});var ugt=s(IV);iWo=r(ugt,"BeitForImageClassification"),ugt.forEach(t),dWo=r(q9e," (BEiT model)"),q9e.forEach(t),cWo=i(Ee),V5=n(Ee,"LI",{});var N9e=s(V5);Whe=n(N9e,"STRONG",{});var _gt=s(Whe);fWo=r(_gt,"convnext"),_gt.forEach(t),mWo=r(N9e," \u2014 "),qV=n(N9e,"A",{href:!0});var bgt=s(qV);gWo=r(bgt,"ConvNextForImageClassification"),bgt.forEach(t),hWo=r(N9e," (ConvNext model)"),N9e.forEach(t),pWo=i(Ee),X5=n(Ee,"LI",{});var j9e=s(X5);Qhe=n(j9e,"STRONG",{});var vgt=s(Qhe);uWo=r(vgt,"data2vec-vision"),vgt.forEach(t),_Wo=r(j9e," \u2014 "),NV=n(j9e,"A",{href:!0});var Fgt=s(NV);bWo=r(Fgt,"Data2VecVisionForImageClassification"),Fgt.forEach(t),vWo=r(j9e," (Data2VecVision model)"),j9e.forEach(t),FWo=i(Ee),Ps=n(Ee,"LI",{});var C$=s(Ps);Hhe=n(C$,"STRONG",{});var Tgt=s(Hhe);TWo=r(Tgt,"deit"),Tgt.forEach(t),MWo=r(C$," \u2014 "),jV=n(C$,"A",{href:!0});var Mgt=s(jV);EWo=r(Mgt,"DeiTForImageClassification"),Mgt.forEach(t),CWo=r(C$," or "),DV=n(C$,"A",{href:!0});var Egt=s(DV);wWo=r(Egt,"DeiTForImageClassificationWithTeacher"),Egt.forEach(t),AWo=r(C$," (DeiT model)"),C$.forEach(t),yWo=i(Ee),z5=n(Ee,"LI",{});var D9e=s(z5);Uhe=n(D9e,"STRONG",{});var Cgt=s(Uhe);LWo=r(Cgt,"imagegpt"),Cgt.forEach(t),xWo=r(D9e," \u2014 "),GV=n(D9e,"A",{href:!0});var wgt=s(GV);$Wo=r(wgt,"ImageGPTForImageClassification"),wgt.forEach(t),kWo=r(D9e," (ImageGPT model)"),D9e.forEach(t),SWo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);Jhe=n(gf,"STRONG",{});var Agt=s(Jhe);RWo=r(Agt,"perceiver"),Agt.forEach(t),PWo=r(gf," \u2014 "),OV=n(gf,"A",{href:!0});var ygt=s(OV);BWo=r(ygt,"PerceiverForImageClassificationLearned"),ygt.forEach(t),IWo=r(gf," or "),VV=n(gf,"A",{href:!0});var Lgt=s(VV);qWo=r(Lgt,"PerceiverForImageClassificationFourier"),Lgt.forEach(t),NWo=r(gf," or "),XV=n(gf,"A",{href:!0});var xgt=s(XV);jWo=r(xgt,"PerceiverForImageClassificationConvProcessing"),xgt.forEach(t),DWo=r(gf," (Perceiver model)"),gf.forEach(t),GWo=i(Ee),W5=n(Ee,"LI",{});var G9e=s(W5);Yhe=n(G9e,"STRONG",{});var $gt=s(Yhe);OWo=r($gt,"poolformer"),$gt.forEach(t),VWo=r(G9e," \u2014 "),zV=n(G9e,"A",{href:!0});var kgt=s(zV);XWo=r(kgt,"PoolFormerForImageClassification"),kgt.forEach(t),zWo=r(G9e," (PoolFormer model)"),G9e.forEach(t),WWo=i(Ee),Q5=n(Ee,"LI",{});var O9e=s(Q5);Khe=n(O9e,"STRONG",{});var Sgt=s(Khe);QWo=r(Sgt,"regnet"),Sgt.forEach(t),HWo=r(O9e," \u2014 "),WV=n(O9e,"A",{href:!0});var Rgt=s(WV);UWo=r(Rgt,"RegNetForImageClassification"),Rgt.forEach(t),JWo=r(O9e," (RegNet model)"),O9e.forEach(t),YWo=i(Ee),H5=n(Ee,"LI",{});var V9e=s(H5);Zhe=n(V9e,"STRONG",{});var Pgt=s(Zhe);KWo=r(Pgt,"resnet"),Pgt.forEach(t),ZWo=r(V9e," \u2014 "),QV=n(V9e,"A",{href:!0});var Bgt=s(QV);eQo=r(Bgt,"ResNetForImageClassification"),Bgt.forEach(t),oQo=r(V9e," (ResNet model)"),V9e.forEach(t),rQo=i(Ee),U5=n(Ee,"LI",{});var X9e=s(U5);epe=n(X9e,"STRONG",{});var Igt=s(epe);tQo=r(Igt,"segformer"),Igt.forEach(t),aQo=r(X9e," \u2014 "),HV=n(X9e,"A",{href:!0});var qgt=s(HV);nQo=r(qgt,"SegformerForImageClassification"),qgt.forEach(t),sQo=r(X9e," (SegFormer model)"),X9e.forEach(t),lQo=i(Ee),J5=n(Ee,"LI",{});var z9e=s(J5);ope=n(z9e,"STRONG",{});var Ngt=s(ope);iQo=r(Ngt,"swin"),Ngt.forEach(t),dQo=r(z9e," \u2014 "),UV=n(z9e,"A",{href:!0});var jgt=s(UV);cQo=r(jgt,"SwinForImageClassification"),jgt.forEach(t),fQo=r(z9e," (Swin model)"),z9e.forEach(t),mQo=i(Ee),Y5=n(Ee,"LI",{});var W9e=s(Y5);rpe=n(W9e,"STRONG",{});var Dgt=s(rpe);gQo=r(Dgt,"van"),Dgt.forEach(t),hQo=r(W9e," \u2014 "),JV=n(W9e,"A",{href:!0});var Ggt=s(JV);pQo=r(Ggt,"VanForImageClassification"),Ggt.forEach(t),uQo=r(W9e," (VAN model)"),W9e.forEach(t),_Qo=i(Ee),K5=n(Ee,"LI",{});var Q9e=s(K5);tpe=n(Q9e,"STRONG",{});var Ogt=s(tpe);bQo=r(Ogt,"vit"),Ogt.forEach(t),vQo=r(Q9e," \u2014 "),YV=n(Q9e,"A",{href:!0});var Vgt=s(YV);FQo=r(Vgt,"ViTForImageClassification"),Vgt.forEach(t),TQo=r(Q9e," (ViT model)"),Q9e.forEach(t),Ee.forEach(t),MQo=i(ma),Z5=n(ma,"P",{});var H9e=s(Z5);EQo=r(H9e,"The model is set in evaluation mode by default using "),ape=n(H9e,"CODE",{});var Xgt=s(ape);CQo=r(Xgt,"model.eval()"),Xgt.forEach(t),wQo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),npe=n(H9e,"CODE",{});var zgt=s(npe);AQo=r(zgt,"model.train()"),zgt.forEach(t),H9e.forEach(t),yQo=i(ma),T(ev.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),uqe=i(f),sd=n(f,"H2",{class:!0});var Fje=s(sd);ov=n(Fje,"A",{id:!0,class:!0,href:!0});var Wgt=s(ov);spe=n(Wgt,"SPAN",{});var Qgt=s(spe);T(GL.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),LQo=i(Fje),lpe=n(Fje,"SPAN",{});var Hgt=s(lpe);xQo=r(Hgt,"AutoModelForVision2Seq"),Hgt.forEach(t),Fje.forEach(t),_qe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(OL.$$.fragment,Zs),$Qo=i(Zs),ld=n(Zs,"P",{});var oZ=s(ld);kQo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=n(oZ,"A",{href:!0});var Ugt=s(KV);SQo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),RQo=r(oZ," class method or the "),ZV=n(oZ,"A",{href:!0});var Jgt=s(ZV);PQo=r(Jgt,"from_config()"),Jgt.forEach(t),BQo=r(oZ,` class
method.`),oZ.forEach(t),IQo=i(Zs),VL=n(Zs,"P",{});var Tje=s(VL);qQo=r(Tje,"This class cannot be instantiated directly using "),ipe=n(Tje,"CODE",{});var Ygt=s(ipe);NQo=r(Ygt,"__init__()"),Ygt.forEach(t),jQo=r(Tje," (throws an error)."),Tje.forEach(t),DQo=i(Zs),ut=n(Zs,"DIV",{class:!0});var qA=s(ut);T(XL.$$.fragment,qA),GQo=i(qA),dpe=n(qA,"P",{});var Kgt=s(dpe);OQo=r(Kgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kgt.forEach(t),VQo=i(qA),id=n(qA,"P",{});var rZ=s(id);XQo=r(rZ,`Note:
Loading a model from its configuration file does `),cpe=n(rZ,"STRONG",{});var Zgt=s(cpe);zQo=r(Zgt,"not"),Zgt.forEach(t),WQo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(rZ,"A",{href:!0});var eht=s(eX);QQo=r(eht,"from_pretrained()"),eht.forEach(t),HQo=r(rZ," to load the model weights."),rZ.forEach(t),UQo=i(qA),T(rv.$$.fragment,qA),qA.forEach(t),JQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(zL.$$.fragment,ga),YQo=i(ga),fpe=n(ga,"P",{});var oht=s(fpe);KQo=r(oht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oht.forEach(t),ZQo=i(ga),Da=n(ga,"P",{});var NA=s(Da);eHo=r(NA,"The model class to instantiate is selected based on the "),mpe=n(NA,"CODE",{});var rht=s(mpe);oHo=r(rht,"model_type"),rht.forEach(t),rHo=r(NA,` property of the config object (either
passed as an argument or loaded from `),gpe=n(NA,"CODE",{});var tht=s(gpe);tHo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),aHo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(NA,"CODE",{});var aht=s(hpe);nHo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),sHo=r(NA,":"),NA.forEach(t),lHo=i(ga),ppe=n(ga,"UL",{});var nht=s(ppe);tv=n(nht,"LI",{});var U9e=s(tv);upe=n(U9e,"STRONG",{});var sht=s(upe);iHo=r(sht,"vision-encoder-decoder"),sht.forEach(t),dHo=r(U9e," \u2014 "),oX=n(U9e,"A",{href:!0});var lht=s(oX);cHo=r(lht,"VisionEncoderDecoderModel"),lht.forEach(t),fHo=r(U9e," (Vision Encoder decoder model)"),U9e.forEach(t),nht.forEach(t),mHo=i(ga),av=n(ga,"P",{});var J9e=s(av);gHo=r(J9e,"The model is set in evaluation mode by default using "),_pe=n(J9e,"CODE",{});var iht=s(_pe);hHo=r(iht,"model.eval()"),iht.forEach(t),pHo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(J9e,"CODE",{});var dht=s(bpe);uHo=r(dht,"model.train()"),dht.forEach(t),J9e.forEach(t),_Ho=i(ga),T(nv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),bqe=i(f),dd=n(f,"H2",{class:!0});var Mje=s(dd);sv=n(Mje,"A",{id:!0,class:!0,href:!0});var cht=s(sv);vpe=n(cht,"SPAN",{});var fht=s(vpe);T(WL.$$.fragment,fht),fht.forEach(t),cht.forEach(t),bHo=i(Mje),Fpe=n(Mje,"SPAN",{});var mht=s(Fpe);vHo=r(mht,"AutoModelForAudioClassification"),mht.forEach(t),Mje.forEach(t),vqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(QL.$$.fragment,el),FHo=i(el),cd=n(el,"P",{});var tZ=s(cd);THo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=n(tZ,"A",{href:!0});var ght=s(rX);MHo=r(ght,"from_pretrained()"),ght.forEach(t),EHo=r(tZ," class method or the "),tX=n(tZ,"A",{href:!0});var hht=s(tX);CHo=r(hht,"from_config()"),hht.forEach(t),wHo=r(tZ,` class
method.`),tZ.forEach(t),AHo=i(el),HL=n(el,"P",{});var Eje=s(HL);yHo=r(Eje,"This class cannot be instantiated directly using "),Tpe=n(Eje,"CODE",{});var pht=s(Tpe);LHo=r(pht,"__init__()"),pht.forEach(t),xHo=r(Eje," (throws an error)."),Eje.forEach(t),$Ho=i(el),_t=n(el,"DIV",{class:!0});var jA=s(_t);T(UL.$$.fragment,jA),kHo=i(jA),Mpe=n(jA,"P",{});var uht=s(Mpe);SHo=r(uht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),uht.forEach(t),RHo=i(jA),fd=n(jA,"P",{});var aZ=s(fd);PHo=r(aZ,`Note:
Loading a model from its configuration file does `),Epe=n(aZ,"STRONG",{});var _ht=s(Epe);BHo=r(_ht,"not"),_ht.forEach(t),IHo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(aZ,"A",{href:!0});var bht=s(aX);qHo=r(bht,"from_pretrained()"),bht.forEach(t),NHo=r(aZ," to load the model weights."),aZ.forEach(t),jHo=i(jA),T(lv.$$.fragment,jA),jA.forEach(t),DHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(JL.$$.fragment,ha),GHo=i(ha),Cpe=n(ha,"P",{});var vht=s(Cpe);OHo=r(vht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vht.forEach(t),VHo=i(ha),Ga=n(ha,"P",{});var DA=s(Ga);XHo=r(DA,"The model class to instantiate is selected based on the "),wpe=n(DA,"CODE",{});var Fht=s(wpe);zHo=r(Fht,"model_type"),Fht.forEach(t),WHo=r(DA,` property of the config object (either
passed as an argument or loaded from `),Ape=n(DA,"CODE",{});var Tht=s(Ape);QHo=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),HHo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(DA,"CODE",{});var Mht=s(ype);UHo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),JHo=r(DA,":"),DA.forEach(t),YHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);iv=n(Oe,"LI",{});var Y9e=s(iv);Lpe=n(Y9e,"STRONG",{});var Eht=s(Lpe);KHo=r(Eht,"data2vec-audio"),Eht.forEach(t),ZHo=r(Y9e," \u2014 "),nX=n(Y9e,"A",{href:!0});var Cht=s(nX);eUo=r(Cht,"Data2VecAudioForSequenceClassification"),Cht.forEach(t),oUo=r(Y9e," (Data2VecAudio model)"),Y9e.forEach(t),rUo=i(Oe),dv=n(Oe,"LI",{});var K9e=s(dv);xpe=n(K9e,"STRONG",{});var wht=s(xpe);tUo=r(wht,"hubert"),wht.forEach(t),aUo=r(K9e," \u2014 "),sX=n(K9e,"A",{href:!0});var Aht=s(sX);nUo=r(Aht,"HubertForSequenceClassification"),Aht.forEach(t),sUo=r(K9e," (Hubert model)"),K9e.forEach(t),lUo=i(Oe),cv=n(Oe,"LI",{});var Z9e=s(cv);$pe=n(Z9e,"STRONG",{});var yht=s($pe);iUo=r(yht,"sew"),yht.forEach(t),dUo=r(Z9e," \u2014 "),lX=n(Z9e,"A",{href:!0});var Lht=s(lX);cUo=r(Lht,"SEWForSequenceClassification"),Lht.forEach(t),fUo=r(Z9e," (SEW model)"),Z9e.forEach(t),mUo=i(Oe),fv=n(Oe,"LI",{});var e$e=s(fv);kpe=n(e$e,"STRONG",{});var xht=s(kpe);gUo=r(xht,"sew-d"),xht.forEach(t),hUo=r(e$e," \u2014 "),iX=n(e$e,"A",{href:!0});var $ht=s(iX);pUo=r($ht,"SEWDForSequenceClassification"),$ht.forEach(t),uUo=r(e$e," (SEW-D model)"),e$e.forEach(t),_Uo=i(Oe),mv=n(Oe,"LI",{});var o$e=s(mv);Spe=n(o$e,"STRONG",{});var kht=s(Spe);bUo=r(kht,"unispeech"),kht.forEach(t),vUo=r(o$e," \u2014 "),dX=n(o$e,"A",{href:!0});var Sht=s(dX);FUo=r(Sht,"UniSpeechForSequenceClassification"),Sht.forEach(t),TUo=r(o$e," (UniSpeech model)"),o$e.forEach(t),MUo=i(Oe),gv=n(Oe,"LI",{});var r$e=s(gv);Rpe=n(r$e,"STRONG",{});var Rht=s(Rpe);EUo=r(Rht,"unispeech-sat"),Rht.forEach(t),CUo=r(r$e," \u2014 "),cX=n(r$e,"A",{href:!0});var Pht=s(cX);wUo=r(Pht,"UniSpeechSatForSequenceClassification"),Pht.forEach(t),AUo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),yUo=i(Oe),hv=n(Oe,"LI",{});var t$e=s(hv);Ppe=n(t$e,"STRONG",{});var Bht=s(Ppe);LUo=r(Bht,"wav2vec2"),Bht.forEach(t),xUo=r(t$e," \u2014 "),fX=n(t$e,"A",{href:!0});var Iht=s(fX);$Uo=r(Iht,"Wav2Vec2ForSequenceClassification"),Iht.forEach(t),kUo=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),SUo=i(Oe),pv=n(Oe,"LI",{});var a$e=s(pv);Bpe=n(a$e,"STRONG",{});var qht=s(Bpe);RUo=r(qht,"wav2vec2-conformer"),qht.forEach(t),PUo=r(a$e," \u2014 "),mX=n(a$e,"A",{href:!0});var Nht=s(mX);BUo=r(Nht,"Wav2Vec2ConformerForSequenceClassification"),Nht.forEach(t),IUo=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),qUo=i(Oe),uv=n(Oe,"LI",{});var n$e=s(uv);Ipe=n(n$e,"STRONG",{});var jht=s(Ipe);NUo=r(jht,"wavlm"),jht.forEach(t),jUo=r(n$e," \u2014 "),gX=n(n$e,"A",{href:!0});var Dht=s(gX);DUo=r(Dht,"WavLMForSequenceClassification"),Dht.forEach(t),GUo=r(n$e," (WavLM model)"),n$e.forEach(t),Oe.forEach(t),OUo=i(ha),_v=n(ha,"P",{});var s$e=s(_v);VUo=r(s$e,"The model is set in evaluation mode by default using "),qpe=n(s$e,"CODE",{});var Ght=s(qpe);XUo=r(Ght,"model.eval()"),Ght.forEach(t),zUo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(s$e,"CODE",{});var Oht=s(Npe);WUo=r(Oht,"model.train()"),Oht.forEach(t),s$e.forEach(t),QUo=i(ha),T(bv.$$.fragment,ha),ha.forEach(t),el.forEach(t),Fqe=i(f),md=n(f,"H2",{class:!0});var Cje=s(md);vv=n(Cje,"A",{id:!0,class:!0,href:!0});var Vht=s(vv);jpe=n(Vht,"SPAN",{});var Xht=s(jpe);T(YL.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),HUo=i(Cje),Dpe=n(Cje,"SPAN",{});var zht=s(Dpe);UUo=r(zht,"AutoModelForAudioFrameClassification"),zht.forEach(t),Cje.forEach(t),Tqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(KL.$$.fragment,ol),JUo=i(ol),gd=n(ol,"P",{});var nZ=s(gd);YUo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=n(nZ,"A",{href:!0});var Wht=s(hX);KUo=r(Wht,"from_pretrained()"),Wht.forEach(t),ZUo=r(nZ," class method or the "),pX=n(nZ,"A",{href:!0});var Qht=s(pX);eJo=r(Qht,"from_config()"),Qht.forEach(t),oJo=r(nZ,` class
method.`),nZ.forEach(t),rJo=i(ol),ZL=n(ol,"P",{});var wje=s(ZL);tJo=r(wje,"This class cannot be instantiated directly using "),Gpe=n(wje,"CODE",{});var Hht=s(Gpe);aJo=r(Hht,"__init__()"),Hht.forEach(t),nJo=r(wje," (throws an error)."),wje.forEach(t),sJo=i(ol),bt=n(ol,"DIV",{class:!0});var GA=s(bt);T(e8.$$.fragment,GA),lJo=i(GA),Ope=n(GA,"P",{});var Uht=s(Ope);iJo=r(Uht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uht.forEach(t),dJo=i(GA),hd=n(GA,"P",{});var sZ=s(hd);cJo=r(sZ,`Note:
Loading a model from its configuration file does `),Vpe=n(sZ,"STRONG",{});var Jht=s(Vpe);fJo=r(Jht,"not"),Jht.forEach(t),mJo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(sZ,"A",{href:!0});var Yht=s(uX);gJo=r(Yht,"from_pretrained()"),Yht.forEach(t),hJo=r(sZ," to load the model weights."),sZ.forEach(t),pJo=i(GA),T(Fv.$$.fragment,GA),GA.forEach(t),uJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(o8.$$.fragment,pa),_Jo=i(pa),Xpe=n(pa,"P",{});var Kht=s(Xpe);bJo=r(Kht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kht.forEach(t),vJo=i(pa),Oa=n(pa,"P",{});var OA=s(Oa);FJo=r(OA,"The model class to instantiate is selected based on the "),zpe=n(OA,"CODE",{});var Zht=s(zpe);TJo=r(Zht,"model_type"),Zht.forEach(t),MJo=r(OA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(OA,"CODE",{});var ept=s(Wpe);EJo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),CJo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(OA,"CODE",{});var opt=s(Qpe);wJo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),AJo=r(OA,":"),OA.forEach(t),yJo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);Tv=n(rl,"LI",{});var l$e=s(Tv);Hpe=n(l$e,"STRONG",{});var rpt=s(Hpe);LJo=r(rpt,"data2vec-audio"),rpt.forEach(t),xJo=r(l$e," \u2014 "),_X=n(l$e,"A",{href:!0});var tpt=s(_X);$Jo=r(tpt,"Data2VecAudioForAudioFrameClassification"),tpt.forEach(t),kJo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),SJo=i(rl),Mv=n(rl,"LI",{});var i$e=s(Mv);Upe=n(i$e,"STRONG",{});var apt=s(Upe);RJo=r(apt,"unispeech-sat"),apt.forEach(t),PJo=r(i$e," \u2014 "),bX=n(i$e,"A",{href:!0});var npt=s(bX);BJo=r(npt,"UniSpeechSatForAudioFrameClassification"),npt.forEach(t),IJo=r(i$e," (UniSpeechSat model)"),i$e.forEach(t),qJo=i(rl),Ev=n(rl,"LI",{});var d$e=s(Ev);Jpe=n(d$e,"STRONG",{});var spt=s(Jpe);NJo=r(spt,"wav2vec2"),spt.forEach(t),jJo=r(d$e," \u2014 "),vX=n(d$e,"A",{href:!0});var lpt=s(vX);DJo=r(lpt,"Wav2Vec2ForAudioFrameClassification"),lpt.forEach(t),GJo=r(d$e," (Wav2Vec2 model)"),d$e.forEach(t),OJo=i(rl),Cv=n(rl,"LI",{});var c$e=s(Cv);Ype=n(c$e,"STRONG",{});var ipt=s(Ype);VJo=r(ipt,"wav2vec2-conformer"),ipt.forEach(t),XJo=r(c$e," \u2014 "),FX=n(c$e,"A",{href:!0});var dpt=s(FX);zJo=r(dpt,"Wav2Vec2ConformerForAudioFrameClassification"),dpt.forEach(t),WJo=r(c$e," (Wav2Vec2-Conformer model)"),c$e.forEach(t),QJo=i(rl),wv=n(rl,"LI",{});var f$e=s(wv);Kpe=n(f$e,"STRONG",{});var cpt=s(Kpe);HJo=r(cpt,"wavlm"),cpt.forEach(t),UJo=r(f$e," \u2014 "),TX=n(f$e,"A",{href:!0});var fpt=s(TX);JJo=r(fpt,"WavLMForAudioFrameClassification"),fpt.forEach(t),YJo=r(f$e," (WavLM model)"),f$e.forEach(t),rl.forEach(t),KJo=i(pa),Av=n(pa,"P",{});var m$e=s(Av);ZJo=r(m$e,"The model is set in evaluation mode by default using "),Zpe=n(m$e,"CODE",{});var mpt=s(Zpe);eYo=r(mpt,"model.eval()"),mpt.forEach(t),oYo=r(m$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(m$e,"CODE",{});var gpt=s(eue);rYo=r(gpt,"model.train()"),gpt.forEach(t),m$e.forEach(t),tYo=i(pa),T(yv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Mqe=i(f),pd=n(f,"H2",{class:!0});var Aje=s(pd);Lv=n(Aje,"A",{id:!0,class:!0,href:!0});var hpt=s(Lv);oue=n(hpt,"SPAN",{});var ppt=s(oue);T(r8.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),aYo=i(Aje),rue=n(Aje,"SPAN",{});var upt=s(rue);nYo=r(upt,"AutoModelForCTC"),upt.forEach(t),Aje.forEach(t),Eqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(t8.$$.fragment,tl),sYo=i(tl),ud=n(tl,"P",{});var lZ=s(ud);lYo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=n(lZ,"A",{href:!0});var _pt=s(MX);iYo=r(_pt,"from_pretrained()"),_pt.forEach(t),dYo=r(lZ," class method or the "),EX=n(lZ,"A",{href:!0});var bpt=s(EX);cYo=r(bpt,"from_config()"),bpt.forEach(t),fYo=r(lZ,` class
method.`),lZ.forEach(t),mYo=i(tl),a8=n(tl,"P",{});var yje=s(a8);gYo=r(yje,"This class cannot be instantiated directly using "),tue=n(yje,"CODE",{});var vpt=s(tue);hYo=r(vpt,"__init__()"),vpt.forEach(t),pYo=r(yje," (throws an error)."),yje.forEach(t),uYo=i(tl),vt=n(tl,"DIV",{class:!0});var VA=s(vt);T(n8.$$.fragment,VA),_Yo=i(VA),aue=n(VA,"P",{});var Fpt=s(aue);bYo=r(Fpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fpt.forEach(t),vYo=i(VA),_d=n(VA,"P",{});var iZ=s(_d);FYo=r(iZ,`Note:
Loading a model from its configuration file does `),nue=n(iZ,"STRONG",{});var Tpt=s(nue);TYo=r(Tpt,"not"),Tpt.forEach(t),MYo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(iZ,"A",{href:!0});var Mpt=s(CX);EYo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),CYo=r(iZ," to load the model weights."),iZ.forEach(t),wYo=i(VA),T(xv.$$.fragment,VA),VA.forEach(t),AYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(s8.$$.fragment,ua),yYo=i(ua),sue=n(ua,"P",{});var Ept=s(sue);LYo=r(Ept,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ept.forEach(t),xYo=i(ua),Va=n(ua,"P",{});var XA=s(Va);$Yo=r(XA,"The model class to instantiate is selected based on the "),lue=n(XA,"CODE",{});var Cpt=s(lue);kYo=r(Cpt,"model_type"),Cpt.forEach(t),SYo=r(XA,` property of the config object (either
passed as an argument or loaded from `),iue=n(XA,"CODE",{});var wpt=s(iue);RYo=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),PYo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(XA,"CODE",{});var Apt=s(due);BYo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),IYo=r(XA,":"),XA.forEach(t),qYo=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);$v=n(Ve,"LI",{});var g$e=s($v);cue=n(g$e,"STRONG",{});var ypt=s(cue);NYo=r(ypt,"data2vec-audio"),ypt.forEach(t),jYo=r(g$e," \u2014 "),wX=n(g$e,"A",{href:!0});var Lpt=s(wX);DYo=r(Lpt,"Data2VecAudioForCTC"),Lpt.forEach(t),GYo=r(g$e," (Data2VecAudio model)"),g$e.forEach(t),OYo=i(Ve),kv=n(Ve,"LI",{});var h$e=s(kv);fue=n(h$e,"STRONG",{});var xpt=s(fue);VYo=r(xpt,"hubert"),xpt.forEach(t),XYo=r(h$e," \u2014 "),AX=n(h$e,"A",{href:!0});var $pt=s(AX);zYo=r($pt,"HubertForCTC"),$pt.forEach(t),WYo=r(h$e," (Hubert model)"),h$e.forEach(t),QYo=i(Ve),Sv=n(Ve,"LI",{});var p$e=s(Sv);mue=n(p$e,"STRONG",{});var kpt=s(mue);HYo=r(kpt,"sew"),kpt.forEach(t),UYo=r(p$e," \u2014 "),yX=n(p$e,"A",{href:!0});var Spt=s(yX);JYo=r(Spt,"SEWForCTC"),Spt.forEach(t),YYo=r(p$e," (SEW model)"),p$e.forEach(t),KYo=i(Ve),Rv=n(Ve,"LI",{});var u$e=s(Rv);gue=n(u$e,"STRONG",{});var Rpt=s(gue);ZYo=r(Rpt,"sew-d"),Rpt.forEach(t),eKo=r(u$e," \u2014 "),LX=n(u$e,"A",{href:!0});var Ppt=s(LX);oKo=r(Ppt,"SEWDForCTC"),Ppt.forEach(t),rKo=r(u$e," (SEW-D model)"),u$e.forEach(t),tKo=i(Ve),Pv=n(Ve,"LI",{});var _$e=s(Pv);hue=n(_$e,"STRONG",{});var Bpt=s(hue);aKo=r(Bpt,"unispeech"),Bpt.forEach(t),nKo=r(_$e," \u2014 "),xX=n(_$e,"A",{href:!0});var Ipt=s(xX);sKo=r(Ipt,"UniSpeechForCTC"),Ipt.forEach(t),lKo=r(_$e," (UniSpeech model)"),_$e.forEach(t),iKo=i(Ve),Bv=n(Ve,"LI",{});var b$e=s(Bv);pue=n(b$e,"STRONG",{});var qpt=s(pue);dKo=r(qpt,"unispeech-sat"),qpt.forEach(t),cKo=r(b$e," \u2014 "),$X=n(b$e,"A",{href:!0});var Npt=s($X);fKo=r(Npt,"UniSpeechSatForCTC"),Npt.forEach(t),mKo=r(b$e," (UniSpeechSat model)"),b$e.forEach(t),gKo=i(Ve),Iv=n(Ve,"LI",{});var v$e=s(Iv);uue=n(v$e,"STRONG",{});var jpt=s(uue);hKo=r(jpt,"wav2vec2"),jpt.forEach(t),pKo=r(v$e," \u2014 "),kX=n(v$e,"A",{href:!0});var Dpt=s(kX);uKo=r(Dpt,"Wav2Vec2ForCTC"),Dpt.forEach(t),_Ko=r(v$e," (Wav2Vec2 model)"),v$e.forEach(t),bKo=i(Ve),qv=n(Ve,"LI",{});var F$e=s(qv);_ue=n(F$e,"STRONG",{});var Gpt=s(_ue);vKo=r(Gpt,"wav2vec2-conformer"),Gpt.forEach(t),FKo=r(F$e," \u2014 "),SX=n(F$e,"A",{href:!0});var Opt=s(SX);TKo=r(Opt,"Wav2Vec2ConformerForCTC"),Opt.forEach(t),MKo=r(F$e," (Wav2Vec2-Conformer model)"),F$e.forEach(t),EKo=i(Ve),Nv=n(Ve,"LI",{});var T$e=s(Nv);bue=n(T$e,"STRONG",{});var Vpt=s(bue);CKo=r(Vpt,"wavlm"),Vpt.forEach(t),wKo=r(T$e," \u2014 "),RX=n(T$e,"A",{href:!0});var Xpt=s(RX);AKo=r(Xpt,"WavLMForCTC"),Xpt.forEach(t),yKo=r(T$e," (WavLM model)"),T$e.forEach(t),Ve.forEach(t),LKo=i(ua),jv=n(ua,"P",{});var M$e=s(jv);xKo=r(M$e,"The model is set in evaluation mode by default using "),vue=n(M$e,"CODE",{});var zpt=s(vue);$Ko=r(zpt,"model.eval()"),zpt.forEach(t),kKo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(M$e,"CODE",{});var Wpt=s(Fue);SKo=r(Wpt,"model.train()"),Wpt.forEach(t),M$e.forEach(t),RKo=i(ua),T(Dv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),Cqe=i(f),bd=n(f,"H2",{class:!0});var Lje=s(bd);Gv=n(Lje,"A",{id:!0,class:!0,href:!0});var Qpt=s(Gv);Tue=n(Qpt,"SPAN",{});var Hpt=s(Tue);T(l8.$$.fragment,Hpt),Hpt.forEach(t),Qpt.forEach(t),PKo=i(Lje),Mue=n(Lje,"SPAN",{});var Upt=s(Mue);BKo=r(Upt,"AutoModelForSpeechSeq2Seq"),Upt.forEach(t),Lje.forEach(t),wqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(i8.$$.fragment,al),IKo=i(al),vd=n(al,"P",{});var dZ=s(vd);qKo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=n(dZ,"A",{href:!0});var Jpt=s(PX);NKo=r(Jpt,"from_pretrained()"),Jpt.forEach(t),jKo=r(dZ," class method or the "),BX=n(dZ,"A",{href:!0});var Ypt=s(BX);DKo=r(Ypt,"from_config()"),Ypt.forEach(t),GKo=r(dZ,` class
method.`),dZ.forEach(t),OKo=i(al),d8=n(al,"P",{});var xje=s(d8);VKo=r(xje,"This class cannot be instantiated directly using "),Eue=n(xje,"CODE",{});var Kpt=s(Eue);XKo=r(Kpt,"__init__()"),Kpt.forEach(t),zKo=r(xje," (throws an error)."),xje.forEach(t),WKo=i(al),Ft=n(al,"DIV",{class:!0});var zA=s(Ft);T(c8.$$.fragment,zA),QKo=i(zA),Cue=n(zA,"P",{});var Zpt=s(Cue);HKo=r(Zpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zpt.forEach(t),UKo=i(zA),Fd=n(zA,"P",{});var cZ=s(Fd);JKo=r(cZ,`Note:
Loading a model from its configuration file does `),wue=n(cZ,"STRONG",{});var eut=s(wue);YKo=r(eut,"not"),eut.forEach(t),KKo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(cZ,"A",{href:!0});var out=s(IX);ZKo=r(out,"from_pretrained()"),out.forEach(t),eZo=r(cZ," to load the model weights."),cZ.forEach(t),oZo=i(zA),T(Ov.$$.fragment,zA),zA.forEach(t),rZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(f8.$$.fragment,_a),tZo=i(_a),Aue=n(_a,"P",{});var rut=s(Aue);aZo=r(rut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rut.forEach(t),nZo=i(_a),Xa=n(_a,"P",{});var WA=s(Xa);sZo=r(WA,"The model class to instantiate is selected based on the "),yue=n(WA,"CODE",{});var tut=s(yue);lZo=r(tut,"model_type"),tut.forEach(t),iZo=r(WA,` property of the config object (either
passed as an argument or loaded from `),Lue=n(WA,"CODE",{});var aut=s(Lue);dZo=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),cZo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(WA,"CODE",{});var nut=s(xue);fZo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),mZo=r(WA,":"),WA.forEach(t),gZo=i(_a),m8=n(_a,"UL",{});var $je=s(m8);Vv=n($je,"LI",{});var E$e=s(Vv);$ue=n(E$e,"STRONG",{});var sut=s($ue);hZo=r(sut,"speech-encoder-decoder"),sut.forEach(t),pZo=r(E$e," \u2014 "),qX=n(E$e,"A",{href:!0});var lut=s(qX);uZo=r(lut,"SpeechEncoderDecoderModel"),lut.forEach(t),_Zo=r(E$e," (Speech Encoder decoder model)"),E$e.forEach(t),bZo=i($je),Xv=n($je,"LI",{});var C$e=s(Xv);kue=n(C$e,"STRONG",{});var iut=s(kue);vZo=r(iut,"speech_to_text"),iut.forEach(t),FZo=r(C$e," \u2014 "),NX=n(C$e,"A",{href:!0});var dut=s(NX);TZo=r(dut,"Speech2TextForConditionalGeneration"),dut.forEach(t),MZo=r(C$e," (Speech2Text model)"),C$e.forEach(t),$je.forEach(t),EZo=i(_a),zv=n(_a,"P",{});var w$e=s(zv);CZo=r(w$e,"The model is set in evaluation mode by default using "),Sue=n(w$e,"CODE",{});var cut=s(Sue);wZo=r(cut,"model.eval()"),cut.forEach(t),AZo=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(w$e,"CODE",{});var fut=s(Rue);yZo=r(fut,"model.train()"),fut.forEach(t),w$e.forEach(t),LZo=i(_a),T(Wv.$$.fragment,_a),_a.forEach(t),al.forEach(t),Aqe=i(f),Td=n(f,"H2",{class:!0});var kje=s(Td);Qv=n(kje,"A",{id:!0,class:!0,href:!0});var mut=s(Qv);Pue=n(mut,"SPAN",{});var gut=s(Pue);T(g8.$$.fragment,gut),gut.forEach(t),mut.forEach(t),xZo=i(kje),Bue=n(kje,"SPAN",{});var hut=s(Bue);$Zo=r(hut,"AutoModelForAudioXVector"),hut.forEach(t),kje.forEach(t),yqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(h8.$$.fragment,nl),kZo=i(nl),Md=n(nl,"P",{});var fZ=s(Md);SZo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=n(fZ,"A",{href:!0});var put=s(jX);RZo=r(put,"from_pretrained()"),put.forEach(t),PZo=r(fZ," class method or the "),DX=n(fZ,"A",{href:!0});var uut=s(DX);BZo=r(uut,"from_config()"),uut.forEach(t),IZo=r(fZ,` class
method.`),fZ.forEach(t),qZo=i(nl),p8=n(nl,"P",{});var Sje=s(p8);NZo=r(Sje,"This class cannot be instantiated directly using "),Iue=n(Sje,"CODE",{});var _ut=s(Iue);jZo=r(_ut,"__init__()"),_ut.forEach(t),DZo=r(Sje," (throws an error)."),Sje.forEach(t),GZo=i(nl),Tt=n(nl,"DIV",{class:!0});var QA=s(Tt);T(u8.$$.fragment,QA),OZo=i(QA),que=n(QA,"P",{});var but=s(que);VZo=r(but,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),but.forEach(t),XZo=i(QA),Ed=n(QA,"P",{});var mZ=s(Ed);zZo=r(mZ,`Note:
Loading a model from its configuration file does `),Nue=n(mZ,"STRONG",{});var vut=s(Nue);WZo=r(vut,"not"),vut.forEach(t),QZo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(mZ,"A",{href:!0});var Fut=s(GX);HZo=r(Fut,"from_pretrained()"),Fut.forEach(t),UZo=r(mZ," to load the model weights."),mZ.forEach(t),JZo=i(QA),T(Hv.$$.fragment,QA),QA.forEach(t),YZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(_8.$$.fragment,ba),KZo=i(ba),jue=n(ba,"P",{});var Tut=s(jue);ZZo=r(Tut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tut.forEach(t),eer=i(ba),za=n(ba,"P",{});var HA=s(za);oer=r(HA,"The model class to instantiate is selected based on the "),Due=n(HA,"CODE",{});var Mut=s(Due);rer=r(Mut,"model_type"),Mut.forEach(t),ter=r(HA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(HA,"CODE",{});var Eut=s(Gue);aer=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),ner=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(HA,"CODE",{});var Cut=s(Oue);ser=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),ler=r(HA,":"),HA.forEach(t),ier=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);Uv=n(sl,"LI",{});var A$e=s(Uv);Vue=n(A$e,"STRONG",{});var wut=s(Vue);der=r(wut,"data2vec-audio"),wut.forEach(t),cer=r(A$e," \u2014 "),OX=n(A$e,"A",{href:!0});var Aut=s(OX);fer=r(Aut,"Data2VecAudioForXVector"),Aut.forEach(t),mer=r(A$e," (Data2VecAudio model)"),A$e.forEach(t),ger=i(sl),Jv=n(sl,"LI",{});var y$e=s(Jv);Xue=n(y$e,"STRONG",{});var yut=s(Xue);her=r(yut,"unispeech-sat"),yut.forEach(t),per=r(y$e," \u2014 "),VX=n(y$e,"A",{href:!0});var Lut=s(VX);uer=r(Lut,"UniSpeechSatForXVector"),Lut.forEach(t),_er=r(y$e," (UniSpeechSat model)"),y$e.forEach(t),ber=i(sl),Yv=n(sl,"LI",{});var L$e=s(Yv);zue=n(L$e,"STRONG",{});var xut=s(zue);ver=r(xut,"wav2vec2"),xut.forEach(t),Fer=r(L$e," \u2014 "),XX=n(L$e,"A",{href:!0});var $ut=s(XX);Ter=r($ut,"Wav2Vec2ForXVector"),$ut.forEach(t),Mer=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),Eer=i(sl),Kv=n(sl,"LI",{});var x$e=s(Kv);Wue=n(x$e,"STRONG",{});var kut=s(Wue);Cer=r(kut,"wav2vec2-conformer"),kut.forEach(t),wer=r(x$e," \u2014 "),zX=n(x$e,"A",{href:!0});var Sut=s(zX);Aer=r(Sut,"Wav2Vec2ConformerForXVector"),Sut.forEach(t),yer=r(x$e," (Wav2Vec2-Conformer model)"),x$e.forEach(t),Ler=i(sl),Zv=n(sl,"LI",{});var $$e=s(Zv);Que=n($$e,"STRONG",{});var Rut=s(Que);xer=r(Rut,"wavlm"),Rut.forEach(t),$er=r($$e," \u2014 "),WX=n($$e,"A",{href:!0});var Put=s(WX);ker=r(Put,"WavLMForXVector"),Put.forEach(t),Ser=r($$e," (WavLM model)"),$$e.forEach(t),sl.forEach(t),Rer=i(ba),e3=n(ba,"P",{});var k$e=s(e3);Per=r(k$e,"The model is set in evaluation mode by default using "),Hue=n(k$e,"CODE",{});var But=s(Hue);Ber=r(But,"model.eval()"),But.forEach(t),Ier=r(k$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(k$e,"CODE",{});var Iut=s(Uue);qer=r(Iut,"model.train()"),Iut.forEach(t),k$e.forEach(t),Ner=i(ba),T(o3.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Lqe=i(f),Cd=n(f,"H2",{class:!0});var Rje=s(Cd);r3=n(Rje,"A",{id:!0,class:!0,href:!0});var qut=s(r3);Jue=n(qut,"SPAN",{});var Nut=s(Jue);T(b8.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),jer=i(Rje),Yue=n(Rje,"SPAN",{});var jut=s(Yue);Der=r(jut,"AutoModelForMaskedImageModeling"),jut.forEach(t),Rje.forEach(t),xqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(v8.$$.fragment,ll),Ger=i(ll),wd=n(ll,"P",{});var gZ=s(wd);Oer=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=n(gZ,"A",{href:!0});var Dut=s(QX);Ver=r(Dut,"from_pretrained()"),Dut.forEach(t),Xer=r(gZ," class method or the "),HX=n(gZ,"A",{href:!0});var Gut=s(HX);zer=r(Gut,"from_config()"),Gut.forEach(t),Wer=r(gZ,` class
method.`),gZ.forEach(t),Qer=i(ll),F8=n(ll,"P",{});var Pje=s(F8);Her=r(Pje,"This class cannot be instantiated directly using "),Kue=n(Pje,"CODE",{});var Out=s(Kue);Uer=r(Out,"__init__()"),Out.forEach(t),Jer=r(Pje," (throws an error)."),Pje.forEach(t),Yer=i(ll),Mt=n(ll,"DIV",{class:!0});var UA=s(Mt);T(T8.$$.fragment,UA),Ker=i(UA),Zue=n(UA,"P",{});var Vut=s(Zue);Zer=r(Vut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vut.forEach(t),eor=i(UA),Ad=n(UA,"P",{});var hZ=s(Ad);oor=r(hZ,`Note:
Loading a model from its configuration file does `),e_e=n(hZ,"STRONG",{});var Xut=s(e_e);ror=r(Xut,"not"),Xut.forEach(t),tor=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(hZ,"A",{href:!0});var zut=s(UX);aor=r(zut,"from_pretrained()"),zut.forEach(t),nor=r(hZ," to load the model weights."),hZ.forEach(t),sor=i(UA),T(t3.$$.fragment,UA),UA.forEach(t),lor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(M8.$$.fragment,va),ior=i(va),o_e=n(va,"P",{});var Wut=s(o_e);dor=r(Wut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Wut.forEach(t),cor=i(va),Wa=n(va,"P",{});var JA=s(Wa);mor=r(JA,"The model class to instantiate is selected based on the "),r_e=n(JA,"CODE",{});var Qut=s(r_e);gor=r(Qut,"model_type"),Qut.forEach(t),hor=r(JA,` property of the config object (either
passed as an argument or loaded from `),t_e=n(JA,"CODE",{});var Hut=s(t_e);por=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),uor=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(JA,"CODE",{});var Uut=s(a_e);_or=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),bor=r(JA,":"),JA.forEach(t),vor=i(va),yd=n(va,"UL",{});var pZ=s(yd);a3=n(pZ,"LI",{});var S$e=s(a3);n_e=n(S$e,"STRONG",{});var Jut=s(n_e);For=r(Jut,"deit"),Jut.forEach(t),Tor=r(S$e," \u2014 "),JX=n(S$e,"A",{href:!0});var Yut=s(JX);Mor=r(Yut,"DeiTForMaskedImageModeling"),Yut.forEach(t),Eor=r(S$e," (DeiT model)"),S$e.forEach(t),Cor=i(pZ),n3=n(pZ,"LI",{});var R$e=s(n3);s_e=n(R$e,"STRONG",{});var Kut=s(s_e);wor=r(Kut,"swin"),Kut.forEach(t),Aor=r(R$e," \u2014 "),YX=n(R$e,"A",{href:!0});var Zut=s(YX);yor=r(Zut,"SwinForMaskedImageModeling"),Zut.forEach(t),Lor=r(R$e," (Swin model)"),R$e.forEach(t),xor=i(pZ),s3=n(pZ,"LI",{});var P$e=s(s3);l_e=n(P$e,"STRONG",{});var e_t=s(l_e);$or=r(e_t,"vit"),e_t.forEach(t),kor=r(P$e," \u2014 "),KX=n(P$e,"A",{href:!0});var o_t=s(KX);Sor=r(o_t,"ViTForMaskedImageModeling"),o_t.forEach(t),Ror=r(P$e," (ViT model)"),P$e.forEach(t),pZ.forEach(t),Por=i(va),l3=n(va,"P",{});var B$e=s(l3);Bor=r(B$e,"The model is set in evaluation mode by default using "),i_e=n(B$e,"CODE",{});var r_t=s(i_e);Ior=r(r_t,"model.eval()"),r_t.forEach(t),qor=r(B$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(B$e,"CODE",{});var t_t=s(d_e);Nor=r(t_t,"model.train()"),t_t.forEach(t),B$e.forEach(t),jor=i(va),T(i3.$$.fragment,va),va.forEach(t),ll.forEach(t),$qe=i(f),Ld=n(f,"H2",{class:!0});var Bje=s(Ld);d3=n(Bje,"A",{id:!0,class:!0,href:!0});var a_t=s(d3);c_e=n(a_t,"SPAN",{});var n_t=s(c_e);T(E8.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),Dor=i(Bje),f_e=n(Bje,"SPAN",{});var s_t=s(f_e);Gor=r(s_t,"AutoModelForObjectDetection"),s_t.forEach(t),Bje.forEach(t),kqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(C8.$$.fragment,il),Oor=i(il),xd=n(il,"P",{});var uZ=s(xd);Vor=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=n(uZ,"A",{href:!0});var l_t=s(ZX);Xor=r(l_t,"from_pretrained()"),l_t.forEach(t),zor=r(uZ," class method or the "),ez=n(uZ,"A",{href:!0});var i_t=s(ez);Wor=r(i_t,"from_config()"),i_t.forEach(t),Qor=r(uZ,` class
method.`),uZ.forEach(t),Hor=i(il),w8=n(il,"P",{});var Ije=s(w8);Uor=r(Ije,"This class cannot be instantiated directly using "),m_e=n(Ije,"CODE",{});var d_t=s(m_e);Jor=r(d_t,"__init__()"),d_t.forEach(t),Yor=r(Ije," (throws an error)."),Ije.forEach(t),Kor=i(il),Et=n(il,"DIV",{class:!0});var YA=s(Et);T(A8.$$.fragment,YA),Zor=i(YA),g_e=n(YA,"P",{});var c_t=s(g_e);err=r(c_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),c_t.forEach(t),orr=i(YA),$d=n(YA,"P",{});var _Z=s($d);rrr=r(_Z,`Note:
Loading a model from its configuration file does `),h_e=n(_Z,"STRONG",{});var f_t=s(h_e);trr=r(f_t,"not"),f_t.forEach(t),arr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(_Z,"A",{href:!0});var m_t=s(oz);nrr=r(m_t,"from_pretrained()"),m_t.forEach(t),srr=r(_Z," to load the model weights."),_Z.forEach(t),lrr=i(YA),T(c3.$$.fragment,YA),YA.forEach(t),irr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(y8.$$.fragment,Fa),drr=i(Fa),p_e=n(Fa,"P",{});var g_t=s(p_e);crr=r(g_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),g_t.forEach(t),frr=i(Fa),Qa=n(Fa,"P",{});var KA=s(Qa);mrr=r(KA,"The model class to instantiate is selected based on the "),u_e=n(KA,"CODE",{});var h_t=s(u_e);grr=r(h_t,"model_type"),h_t.forEach(t),hrr=r(KA,` property of the config object (either
passed as an argument or loaded from `),__e=n(KA,"CODE",{});var p_t=s(__e);prr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),urr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(KA,"CODE",{});var u_t=s(b_e);_rr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),brr=r(KA,":"),KA.forEach(t),vrr=i(Fa),L8=n(Fa,"UL",{});var qje=s(L8);f3=n(qje,"LI",{});var I$e=s(f3);v_e=n(I$e,"STRONG",{});var __t=s(v_e);Frr=r(__t,"detr"),__t.forEach(t),Trr=r(I$e," \u2014 "),rz=n(I$e,"A",{href:!0});var b_t=s(rz);Mrr=r(b_t,"DetrForObjectDetection"),b_t.forEach(t),Err=r(I$e," (DETR model)"),I$e.forEach(t),Crr=i(qje),m3=n(qje,"LI",{});var q$e=s(m3);F_e=n(q$e,"STRONG",{});var v_t=s(F_e);wrr=r(v_t,"yolos"),v_t.forEach(t),Arr=r(q$e," \u2014 "),tz=n(q$e,"A",{href:!0});var F_t=s(tz);yrr=r(F_t,"YolosForObjectDetection"),F_t.forEach(t),Lrr=r(q$e," (YOLOS model)"),q$e.forEach(t),qje.forEach(t),xrr=i(Fa),g3=n(Fa,"P",{});var N$e=s(g3);$rr=r(N$e,"The model is set in evaluation mode by default using "),T_e=n(N$e,"CODE",{});var T_t=s(T_e);krr=r(T_t,"model.eval()"),T_t.forEach(t),Srr=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(N$e,"CODE",{});var M_t=s(M_e);Rrr=r(M_t,"model.train()"),M_t.forEach(t),N$e.forEach(t),Prr=i(Fa),T(h3.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Sqe=i(f),kd=n(f,"H2",{class:!0});var Nje=s(kd);p3=n(Nje,"A",{id:!0,class:!0,href:!0});var E_t=s(p3);E_e=n(E_t,"SPAN",{});var C_t=s(E_e);T(x8.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),Brr=i(Nje),C_e=n(Nje,"SPAN",{});var w_t=s(C_e);Irr=r(w_t,"AutoModelForImageSegmentation"),w_t.forEach(t),Nje.forEach(t),Rqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T($8.$$.fragment,dl),qrr=i(dl),Sd=n(dl,"P",{});var bZ=s(Sd);Nrr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=n(bZ,"A",{href:!0});var A_t=s(az);jrr=r(A_t,"from_pretrained()"),A_t.forEach(t),Drr=r(bZ," class method or the "),nz=n(bZ,"A",{href:!0});var y_t=s(nz);Grr=r(y_t,"from_config()"),y_t.forEach(t),Orr=r(bZ,` class
method.`),bZ.forEach(t),Vrr=i(dl),k8=n(dl,"P",{});var jje=s(k8);Xrr=r(jje,"This class cannot be instantiated directly using "),w_e=n(jje,"CODE",{});var L_t=s(w_e);zrr=r(L_t,"__init__()"),L_t.forEach(t),Wrr=r(jje," (throws an error)."),jje.forEach(t),Qrr=i(dl),Ct=n(dl,"DIV",{class:!0});var ZA=s(Ct);T(S8.$$.fragment,ZA),Hrr=i(ZA),A_e=n(ZA,"P",{});var x_t=s(A_e);Urr=r(x_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),x_t.forEach(t),Jrr=i(ZA),Rd=n(ZA,"P",{});var vZ=s(Rd);Yrr=r(vZ,`Note:
Loading a model from its configuration file does `),y_e=n(vZ,"STRONG",{});var $_t=s(y_e);Krr=r($_t,"not"),$_t.forEach(t),Zrr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(vZ,"A",{href:!0});var k_t=s(sz);etr=r(k_t,"from_pretrained()"),k_t.forEach(t),otr=r(vZ," to load the model weights."),vZ.forEach(t),rtr=i(ZA),T(u3.$$.fragment,ZA),ZA.forEach(t),ttr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(R8.$$.fragment,Ta),atr=i(Ta),L_e=n(Ta,"P",{});var S_t=s(L_e);ntr=r(S_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),S_t.forEach(t),str=i(Ta),Ha=n(Ta,"P",{});var e0=s(Ha);ltr=r(e0,"The model class to instantiate is selected based on the "),x_e=n(e0,"CODE",{});var R_t=s(x_e);itr=r(R_t,"model_type"),R_t.forEach(t),dtr=r(e0,` property of the config object (either
passed as an argument or loaded from `),$_e=n(e0,"CODE",{});var P_t=s($_e);ctr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),ftr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(e0,"CODE",{});var B_t=s(k_e);mtr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),gtr=r(e0,":"),e0.forEach(t),htr=i(Ta),S_e=n(Ta,"UL",{});var I_t=s(S_e);_3=n(I_t,"LI",{});var j$e=s(_3);R_e=n(j$e,"STRONG",{});var q_t=s(R_e);ptr=r(q_t,"detr"),q_t.forEach(t),utr=r(j$e," \u2014 "),lz=n(j$e,"A",{href:!0});var N_t=s(lz);_tr=r(N_t,"DetrForSegmentation"),N_t.forEach(t),btr=r(j$e," (DETR model)"),j$e.forEach(t),I_t.forEach(t),vtr=i(Ta),b3=n(Ta,"P",{});var D$e=s(b3);Ftr=r(D$e,"The model is set in evaluation mode by default using "),P_e=n(D$e,"CODE",{});var j_t=s(P_e);Ttr=r(j_t,"model.eval()"),j_t.forEach(t),Mtr=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B_e=n(D$e,"CODE",{});var D_t=s(B_e);Etr=r(D_t,"model.train()"),D_t.forEach(t),D$e.forEach(t),Ctr=i(Ta),T(v3.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Pqe=i(f),Pd=n(f,"H2",{class:!0});var Dje=s(Pd);F3=n(Dje,"A",{id:!0,class:!0,href:!0});var G_t=s(F3);I_e=n(G_t,"SPAN",{});var O_t=s(I_e);T(P8.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),wtr=i(Dje),q_e=n(Dje,"SPAN",{});var V_t=s(q_e);Atr=r(V_t,"AutoModelForSemanticSegmentation"),V_t.forEach(t),Dje.forEach(t),Bqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(B8.$$.fragment,cl),ytr=i(cl),Bd=n(cl,"P",{});var FZ=s(Bd);Ltr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=n(FZ,"A",{href:!0});var X_t=s(iz);xtr=r(X_t,"from_pretrained()"),X_t.forEach(t),$tr=r(FZ," class method or the "),dz=n(FZ,"A",{href:!0});var z_t=s(dz);ktr=r(z_t,"from_config()"),z_t.forEach(t),Str=r(FZ,` class
method.`),FZ.forEach(t),Rtr=i(cl),I8=n(cl,"P",{});var Gje=s(I8);Ptr=r(Gje,"This class cannot be instantiated directly using "),N_e=n(Gje,"CODE",{});var W_t=s(N_e);Btr=r(W_t,"__init__()"),W_t.forEach(t),Itr=r(Gje," (throws an error)."),Gje.forEach(t),qtr=i(cl),wt=n(cl,"DIV",{class:!0});var o0=s(wt);T(q8.$$.fragment,o0),Ntr=i(o0),j_e=n(o0,"P",{});var Q_t=s(j_e);jtr=r(Q_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Q_t.forEach(t),Dtr=i(o0),Id=n(o0,"P",{});var TZ=s(Id);Gtr=r(TZ,`Note:
Loading a model from its configuration file does `),D_e=n(TZ,"STRONG",{});var H_t=s(D_e);Otr=r(H_t,"not"),H_t.forEach(t),Vtr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(TZ,"A",{href:!0});var U_t=s(cz);Xtr=r(U_t,"from_pretrained()"),U_t.forEach(t),ztr=r(TZ," to load the model weights."),TZ.forEach(t),Wtr=i(o0),T(T3.$$.fragment,o0),o0.forEach(t),Qtr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(N8.$$.fragment,Ma),Htr=i(Ma),G_e=n(Ma,"P",{});var J_t=s(G_e);Utr=r(J_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),J_t.forEach(t),Jtr=i(Ma),Ua=n(Ma,"P",{});var r0=s(Ua);Ytr=r(r0,"The model class to instantiate is selected based on the "),O_e=n(r0,"CODE",{});var Y_t=s(O_e);Ktr=r(Y_t,"model_type"),Y_t.forEach(t),Ztr=r(r0,` property of the config object (either
passed as an argument or loaded from `),V_e=n(r0,"CODE",{});var K_t=s(V_e);ear=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),oar=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(r0,"CODE",{});var Z_t=s(X_e);rar=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),tar=r(r0,":"),r0.forEach(t),aar=i(Ma),Ja=n(Ma,"UL",{});var t0=s(Ja);M3=n(t0,"LI",{});var G$e=s(M3);z_e=n(G$e,"STRONG",{});var e1t=s(z_e);nar=r(e1t,"beit"),e1t.forEach(t),sar=r(G$e," \u2014 "),fz=n(G$e,"A",{href:!0});var o1t=s(fz);lar=r(o1t,"BeitForSemanticSegmentation"),o1t.forEach(t),iar=r(G$e," (BEiT model)"),G$e.forEach(t),dar=i(t0),E3=n(t0,"LI",{});var O$e=s(E3);W_e=n(O$e,"STRONG",{});var r1t=s(W_e);car=r(r1t,"data2vec-vision"),r1t.forEach(t),far=r(O$e," \u2014 "),mz=n(O$e,"A",{href:!0});var t1t=s(mz);mar=r(t1t,"Data2VecVisionForSemanticSegmentation"),t1t.forEach(t),gar=r(O$e," (Data2VecVision model)"),O$e.forEach(t),har=i(t0),C3=n(t0,"LI",{});var V$e=s(C3);Q_e=n(V$e,"STRONG",{});var a1t=s(Q_e);par=r(a1t,"dpt"),a1t.forEach(t),uar=r(V$e," \u2014 "),gz=n(V$e,"A",{href:!0});var n1t=s(gz);_ar=r(n1t,"DPTForSemanticSegmentation"),n1t.forEach(t),bar=r(V$e," (DPT model)"),V$e.forEach(t),Far=i(t0),w3=n(t0,"LI",{});var X$e=s(w3);H_e=n(X$e,"STRONG",{});var s1t=s(H_e);Tar=r(s1t,"segformer"),s1t.forEach(t),Mar=r(X$e," \u2014 "),hz=n(X$e,"A",{href:!0});var l1t=s(hz);Ear=r(l1t,"SegformerForSemanticSegmentation"),l1t.forEach(t),Car=r(X$e," (SegFormer model)"),X$e.forEach(t),t0.forEach(t),war=i(Ma),A3=n(Ma,"P",{});var z$e=s(A3);Aar=r(z$e,"The model is set in evaluation mode by default using "),U_e=n(z$e,"CODE",{});var i1t=s(U_e);yar=r(i1t,"model.eval()"),i1t.forEach(t),Lar=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(z$e,"CODE",{});var d1t=s(J_e);xar=r(d1t,"model.train()"),d1t.forEach(t),z$e.forEach(t),$ar=i(Ma),T(y3.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Iqe=i(f),qd=n(f,"H2",{class:!0});var Oje=s(qd);L3=n(Oje,"A",{id:!0,class:!0,href:!0});var c1t=s(L3);Y_e=n(c1t,"SPAN",{});var f1t=s(Y_e);T(j8.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),kar=i(Oje),K_e=n(Oje,"SPAN",{});var m1t=s(K_e);Sar=r(m1t,"AutoModelForInstanceSegmentation"),m1t.forEach(t),Oje.forEach(t),qqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(D8.$$.fragment,fl),Rar=i(fl),Nd=n(fl,"P",{});var MZ=s(Nd);Par=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pz=n(MZ,"A",{href:!0});var g1t=s(pz);Bar=r(g1t,"from_pretrained()"),g1t.forEach(t),Iar=r(MZ," class method or the "),uz=n(MZ,"A",{href:!0});var h1t=s(uz);qar=r(h1t,"from_config()"),h1t.forEach(t),Nar=r(MZ,` class
method.`),MZ.forEach(t),jar=i(fl),G8=n(fl,"P",{});var Vje=s(G8);Dar=r(Vje,"This class cannot be instantiated directly using "),Z_e=n(Vje,"CODE",{});var p1t=s(Z_e);Gar=r(p1t,"__init__()"),p1t.forEach(t),Oar=r(Vje," (throws an error)."),Vje.forEach(t),Var=i(fl),At=n(fl,"DIV",{class:!0});var a0=s(At);T(O8.$$.fragment,a0),Xar=i(a0),e1e=n(a0,"P",{});var u1t=s(e1e);zar=r(u1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),u1t.forEach(t),War=i(a0),jd=n(a0,"P",{});var EZ=s(jd);Qar=r(EZ,`Note:
Loading a model from its configuration file does `),o1e=n(EZ,"STRONG",{});var _1t=s(o1e);Har=r(_1t,"not"),_1t.forEach(t),Uar=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(EZ,"A",{href:!0});var b1t=s(_z);Jar=r(b1t,"from_pretrained()"),b1t.forEach(t),Yar=r(EZ," to load the model weights."),EZ.forEach(t),Kar=i(a0),T(x3.$$.fragment,a0),a0.forEach(t),Zar=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(V8.$$.fragment,Ea),enr=i(Ea),r1e=n(Ea,"P",{});var v1t=s(r1e);onr=r(v1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),v1t.forEach(t),rnr=i(Ea),Ya=n(Ea,"P",{});var n0=s(Ya);tnr=r(n0,"The model class to instantiate is selected based on the "),t1e=n(n0,"CODE",{});var F1t=s(t1e);anr=r(F1t,"model_type"),F1t.forEach(t),nnr=r(n0,` property of the config object (either
passed as an argument or loaded from `),a1e=n(n0,"CODE",{});var T1t=s(a1e);snr=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),lnr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(n0,"CODE",{});var M1t=s(n1e);inr=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),dnr=r(n0,":"),n0.forEach(t),cnr=i(Ea),s1e=n(Ea,"UL",{});var E1t=s(s1e);$3=n(E1t,"LI",{});var W$e=s($3);l1e=n(W$e,"STRONG",{});var C1t=s(l1e);fnr=r(C1t,"maskformer"),C1t.forEach(t),mnr=r(W$e," \u2014 "),bz=n(W$e,"A",{href:!0});var w1t=s(bz);gnr=r(w1t,"MaskFormerForInstanceSegmentation"),w1t.forEach(t),hnr=r(W$e," (MaskFormer model)"),W$e.forEach(t),E1t.forEach(t),pnr=i(Ea),k3=n(Ea,"P",{});var Q$e=s(k3);unr=r(Q$e,"The model is set in evaluation mode by default using "),i1e=n(Q$e,"CODE",{});var A1t=s(i1e);_nr=r(A1t,"model.eval()"),A1t.forEach(t),bnr=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d1e=n(Q$e,"CODE",{});var y1t=s(d1e);vnr=r(y1t,"model.train()"),y1t.forEach(t),Q$e.forEach(t),Fnr=i(Ea),T(S3.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Nqe=i(f),Dd=n(f,"H2",{class:!0});var Xje=s(Dd);R3=n(Xje,"A",{id:!0,class:!0,href:!0});var L1t=s(R3);c1e=n(L1t,"SPAN",{});var x1t=s(c1e);T(X8.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),Tnr=i(Xje),f1e=n(Xje,"SPAN",{});var $1t=s(f1e);Mnr=r($1t,"TFAutoModel"),$1t.forEach(t),Xje.forEach(t),jqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(z8.$$.fragment,ml),Enr=i(ml),Gd=n(ml,"P",{});var CZ=s(Gd);Cnr=r(CZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=n(CZ,"A",{href:!0});var k1t=s(vz);wnr=r(k1t,"from_pretrained()"),k1t.forEach(t),Anr=r(CZ," class method or the "),Fz=n(CZ,"A",{href:!0});var S1t=s(Fz);ynr=r(S1t,"from_config()"),S1t.forEach(t),Lnr=r(CZ,` class
method.`),CZ.forEach(t),xnr=i(ml),W8=n(ml,"P",{});var zje=s(W8);$nr=r(zje,"This class cannot be instantiated directly using "),m1e=n(zje,"CODE",{});var R1t=s(m1e);knr=r(R1t,"__init__()"),R1t.forEach(t),Snr=r(zje," (throws an error)."),zje.forEach(t),Rnr=i(ml),yt=n(ml,"DIV",{class:!0});var s0=s(yt);T(Q8.$$.fragment,s0),Pnr=i(s0),g1e=n(s0,"P",{});var P1t=s(g1e);Bnr=r(P1t,"Instantiates one of the base model classes of the library from a configuration."),P1t.forEach(t),Inr=i(s0),Od=n(s0,"P",{});var wZ=s(Od);qnr=r(wZ,`Note:
Loading a model from its configuration file does `),h1e=n(wZ,"STRONG",{});var B1t=s(h1e);Nnr=r(B1t,"not"),B1t.forEach(t),jnr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(wZ,"A",{href:!0});var I1t=s(Tz);Dnr=r(I1t,"from_pretrained()"),I1t.forEach(t),Gnr=r(wZ," to load the model weights."),wZ.forEach(t),Onr=i(s0),T(P3.$$.fragment,s0),s0.forEach(t),Vnr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(H8.$$.fragment,gl),Xnr=i(gl),p1e=n(gl,"P",{});var q1t=s(p1e);znr=r(q1t,"Instantiate one of the base model classes of the library from a pretrained model."),q1t.forEach(t),Wnr=i(gl),Ka=n(gl,"P",{});var l0=s(Ka);Qnr=r(l0,"The model class to instantiate is selected based on the "),u1e=n(l0,"CODE",{});var N1t=s(u1e);Hnr=r(N1t,"model_type"),N1t.forEach(t),Unr=r(l0,` property of the config object (either
passed as an argument or loaded from `),_1e=n(l0,"CODE",{});var j1t=s(_1e);Jnr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),Ynr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(l0,"CODE",{});var D1t=s(b1e);Knr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),Znr=r(l0,":"),l0.forEach(t),esr=i(gl),q=n(gl,"UL",{});var j=s(q);B3=n(j,"LI",{});var H$e=s(B3);v1e=n(H$e,"STRONG",{});var G1t=s(v1e);osr=r(G1t,"albert"),G1t.forEach(t),rsr=r(H$e," \u2014 "),Mz=n(H$e,"A",{href:!0});var O1t=s(Mz);tsr=r(O1t,"TFAlbertModel"),O1t.forEach(t),asr=r(H$e," (ALBERT model)"),H$e.forEach(t),nsr=i(j),I3=n(j,"LI",{});var U$e=s(I3);F1e=n(U$e,"STRONG",{});var V1t=s(F1e);ssr=r(V1t,"bart"),V1t.forEach(t),lsr=r(U$e," \u2014 "),Ez=n(U$e,"A",{href:!0});var X1t=s(Ez);isr=r(X1t,"TFBartModel"),X1t.forEach(t),dsr=r(U$e," (BART model)"),U$e.forEach(t),csr=i(j),q3=n(j,"LI",{});var J$e=s(q3);T1e=n(J$e,"STRONG",{});var z1t=s(T1e);fsr=r(z1t,"bert"),z1t.forEach(t),msr=r(J$e," \u2014 "),Cz=n(J$e,"A",{href:!0});var W1t=s(Cz);gsr=r(W1t,"TFBertModel"),W1t.forEach(t),hsr=r(J$e," (BERT model)"),J$e.forEach(t),psr=i(j),N3=n(j,"LI",{});var Y$e=s(N3);M1e=n(Y$e,"STRONG",{});var Q1t=s(M1e);usr=r(Q1t,"blenderbot"),Q1t.forEach(t),_sr=r(Y$e," \u2014 "),wz=n(Y$e,"A",{href:!0});var H1t=s(wz);bsr=r(H1t,"TFBlenderbotModel"),H1t.forEach(t),vsr=r(Y$e," (Blenderbot model)"),Y$e.forEach(t),Fsr=i(j),j3=n(j,"LI",{});var K$e=s(j3);E1e=n(K$e,"STRONG",{});var U1t=s(E1e);Tsr=r(U1t,"blenderbot-small"),U1t.forEach(t),Msr=r(K$e," \u2014 "),Az=n(K$e,"A",{href:!0});var J1t=s(Az);Esr=r(J1t,"TFBlenderbotSmallModel"),J1t.forEach(t),Csr=r(K$e," (BlenderbotSmall model)"),K$e.forEach(t),wsr=i(j),D3=n(j,"LI",{});var Z$e=s(D3);C1e=n(Z$e,"STRONG",{});var Y1t=s(C1e);Asr=r(Y1t,"camembert"),Y1t.forEach(t),ysr=r(Z$e," \u2014 "),yz=n(Z$e,"A",{href:!0});var K1t=s(yz);Lsr=r(K1t,"TFCamembertModel"),K1t.forEach(t),xsr=r(Z$e," (CamemBERT model)"),Z$e.forEach(t),$sr=i(j),G3=n(j,"LI",{});var eke=s(G3);w1e=n(eke,"STRONG",{});var Z1t=s(w1e);ksr=r(Z1t,"clip"),Z1t.forEach(t),Ssr=r(eke," \u2014 "),Lz=n(eke,"A",{href:!0});var ebt=s(Lz);Rsr=r(ebt,"TFCLIPModel"),ebt.forEach(t),Psr=r(eke," (CLIP model)"),eke.forEach(t),Bsr=i(j),O3=n(j,"LI",{});var oke=s(O3);A1e=n(oke,"STRONG",{});var obt=s(A1e);Isr=r(obt,"convbert"),obt.forEach(t),qsr=r(oke," \u2014 "),xz=n(oke,"A",{href:!0});var rbt=s(xz);Nsr=r(rbt,"TFConvBertModel"),rbt.forEach(t),jsr=r(oke," (ConvBERT model)"),oke.forEach(t),Dsr=i(j),V3=n(j,"LI",{});var rke=s(V3);y1e=n(rke,"STRONG",{});var tbt=s(y1e);Gsr=r(tbt,"convnext"),tbt.forEach(t),Osr=r(rke," \u2014 "),$z=n(rke,"A",{href:!0});var abt=s($z);Vsr=r(abt,"TFConvNextModel"),abt.forEach(t),Xsr=r(rke," (ConvNext model)"),rke.forEach(t),zsr=i(j),X3=n(j,"LI",{});var tke=s(X3);L1e=n(tke,"STRONG",{});var nbt=s(L1e);Wsr=r(nbt,"ctrl"),nbt.forEach(t),Qsr=r(tke," \u2014 "),kz=n(tke,"A",{href:!0});var sbt=s(kz);Hsr=r(sbt,"TFCTRLModel"),sbt.forEach(t),Usr=r(tke," (CTRL model)"),tke.forEach(t),Jsr=i(j),z3=n(j,"LI",{});var ake=s(z3);x1e=n(ake,"STRONG",{});var lbt=s(x1e);Ysr=r(lbt,"data2vec-vision"),lbt.forEach(t),Ksr=r(ake," \u2014 "),Sz=n(ake,"A",{href:!0});var ibt=s(Sz);Zsr=r(ibt,"TFData2VecVisionModel"),ibt.forEach(t),elr=r(ake," (Data2VecVision model)"),ake.forEach(t),olr=i(j),W3=n(j,"LI",{});var nke=s(W3);$1e=n(nke,"STRONG",{});var dbt=s($1e);rlr=r(dbt,"deberta"),dbt.forEach(t),tlr=r(nke," \u2014 "),Rz=n(nke,"A",{href:!0});var cbt=s(Rz);alr=r(cbt,"TFDebertaModel"),cbt.forEach(t),nlr=r(nke," (DeBERTa model)"),nke.forEach(t),slr=i(j),Q3=n(j,"LI",{});var ske=s(Q3);k1e=n(ske,"STRONG",{});var fbt=s(k1e);llr=r(fbt,"deberta-v2"),fbt.forEach(t),ilr=r(ske," \u2014 "),Pz=n(ske,"A",{href:!0});var mbt=s(Pz);dlr=r(mbt,"TFDebertaV2Model"),mbt.forEach(t),clr=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),flr=i(j),H3=n(j,"LI",{});var lke=s(H3);S1e=n(lke,"STRONG",{});var gbt=s(S1e);mlr=r(gbt,"distilbert"),gbt.forEach(t),glr=r(lke," \u2014 "),Bz=n(lke,"A",{href:!0});var hbt=s(Bz);hlr=r(hbt,"TFDistilBertModel"),hbt.forEach(t),plr=r(lke," (DistilBERT model)"),lke.forEach(t),ulr=i(j),U3=n(j,"LI",{});var ike=s(U3);R1e=n(ike,"STRONG",{});var pbt=s(R1e);_lr=r(pbt,"dpr"),pbt.forEach(t),blr=r(ike," \u2014 "),Iz=n(ike,"A",{href:!0});var ubt=s(Iz);vlr=r(ubt,"TFDPRQuestionEncoder"),ubt.forEach(t),Flr=r(ike," (DPR model)"),ike.forEach(t),Tlr=i(j),J3=n(j,"LI",{});var dke=s(J3);P1e=n(dke,"STRONG",{});var _bt=s(P1e);Mlr=r(_bt,"electra"),_bt.forEach(t),Elr=r(dke," \u2014 "),qz=n(dke,"A",{href:!0});var bbt=s(qz);Clr=r(bbt,"TFElectraModel"),bbt.forEach(t),wlr=r(dke," (ELECTRA model)"),dke.forEach(t),Alr=i(j),Y3=n(j,"LI",{});var cke=s(Y3);B1e=n(cke,"STRONG",{});var vbt=s(B1e);ylr=r(vbt,"flaubert"),vbt.forEach(t),Llr=r(cke," \u2014 "),Nz=n(cke,"A",{href:!0});var Fbt=s(Nz);xlr=r(Fbt,"TFFlaubertModel"),Fbt.forEach(t),$lr=r(cke," (FlauBERT model)"),cke.forEach(t),klr=i(j),Bs=n(j,"LI",{});var w$=s(Bs);I1e=n(w$,"STRONG",{});var Tbt=s(I1e);Slr=r(Tbt,"funnel"),Tbt.forEach(t),Rlr=r(w$," \u2014 "),jz=n(w$,"A",{href:!0});var Mbt=s(jz);Plr=r(Mbt,"TFFunnelModel"),Mbt.forEach(t),Blr=r(w$," or "),Dz=n(w$,"A",{href:!0});var Ebt=s(Dz);Ilr=r(Ebt,"TFFunnelBaseModel"),Ebt.forEach(t),qlr=r(w$," (Funnel Transformer model)"),w$.forEach(t),Nlr=i(j),K3=n(j,"LI",{});var fke=s(K3);q1e=n(fke,"STRONG",{});var Cbt=s(q1e);jlr=r(Cbt,"gpt2"),Cbt.forEach(t),Dlr=r(fke," \u2014 "),Gz=n(fke,"A",{href:!0});var wbt=s(Gz);Glr=r(wbt,"TFGPT2Model"),wbt.forEach(t),Olr=r(fke," (OpenAI GPT-2 model)"),fke.forEach(t),Vlr=i(j),Z3=n(j,"LI",{});var mke=s(Z3);N1e=n(mke,"STRONG",{});var Abt=s(N1e);Xlr=r(Abt,"gptj"),Abt.forEach(t),zlr=r(mke," \u2014 "),Oz=n(mke,"A",{href:!0});var ybt=s(Oz);Wlr=r(ybt,"TFGPTJModel"),ybt.forEach(t),Qlr=r(mke," (GPT-J model)"),mke.forEach(t),Hlr=i(j),eF=n(j,"LI",{});var gke=s(eF);j1e=n(gke,"STRONG",{});var Lbt=s(j1e);Ulr=r(Lbt,"hubert"),Lbt.forEach(t),Jlr=r(gke," \u2014 "),Vz=n(gke,"A",{href:!0});var xbt=s(Vz);Ylr=r(xbt,"TFHubertModel"),xbt.forEach(t),Klr=r(gke," (Hubert model)"),gke.forEach(t),Zlr=i(j),oF=n(j,"LI",{});var hke=s(oF);D1e=n(hke,"STRONG",{});var $bt=s(D1e);eir=r($bt,"layoutlm"),$bt.forEach(t),oir=r(hke," \u2014 "),Xz=n(hke,"A",{href:!0});var kbt=s(Xz);rir=r(kbt,"TFLayoutLMModel"),kbt.forEach(t),tir=r(hke," (LayoutLM model)"),hke.forEach(t),air=i(j),rF=n(j,"LI",{});var pke=s(rF);G1e=n(pke,"STRONG",{});var Sbt=s(G1e);nir=r(Sbt,"led"),Sbt.forEach(t),sir=r(pke," \u2014 "),zz=n(pke,"A",{href:!0});var Rbt=s(zz);lir=r(Rbt,"TFLEDModel"),Rbt.forEach(t),iir=r(pke," (LED model)"),pke.forEach(t),dir=i(j),tF=n(j,"LI",{});var uke=s(tF);O1e=n(uke,"STRONG",{});var Pbt=s(O1e);cir=r(Pbt,"longformer"),Pbt.forEach(t),fir=r(uke," \u2014 "),Wz=n(uke,"A",{href:!0});var Bbt=s(Wz);mir=r(Bbt,"TFLongformerModel"),Bbt.forEach(t),gir=r(uke," (Longformer model)"),uke.forEach(t),hir=i(j),aF=n(j,"LI",{});var _ke=s(aF);V1e=n(_ke,"STRONG",{});var Ibt=s(V1e);pir=r(Ibt,"lxmert"),Ibt.forEach(t),uir=r(_ke," \u2014 "),Qz=n(_ke,"A",{href:!0});var qbt=s(Qz);_ir=r(qbt,"TFLxmertModel"),qbt.forEach(t),bir=r(_ke," (LXMERT model)"),_ke.forEach(t),vir=i(j),nF=n(j,"LI",{});var bke=s(nF);X1e=n(bke,"STRONG",{});var Nbt=s(X1e);Fir=r(Nbt,"marian"),Nbt.forEach(t),Tir=r(bke," \u2014 "),Hz=n(bke,"A",{href:!0});var jbt=s(Hz);Mir=r(jbt,"TFMarianModel"),jbt.forEach(t),Eir=r(bke," (Marian model)"),bke.forEach(t),Cir=i(j),sF=n(j,"LI",{});var vke=s(sF);z1e=n(vke,"STRONG",{});var Dbt=s(z1e);wir=r(Dbt,"mbart"),Dbt.forEach(t),Air=r(vke," \u2014 "),Uz=n(vke,"A",{href:!0});var Gbt=s(Uz);yir=r(Gbt,"TFMBartModel"),Gbt.forEach(t),Lir=r(vke," (mBART model)"),vke.forEach(t),xir=i(j),lF=n(j,"LI",{});var Fke=s(lF);W1e=n(Fke,"STRONG",{});var Obt=s(W1e);$ir=r(Obt,"mobilebert"),Obt.forEach(t),kir=r(Fke," \u2014 "),Jz=n(Fke,"A",{href:!0});var Vbt=s(Jz);Sir=r(Vbt,"TFMobileBertModel"),Vbt.forEach(t),Rir=r(Fke," (MobileBERT model)"),Fke.forEach(t),Pir=i(j),iF=n(j,"LI",{});var Tke=s(iF);Q1e=n(Tke,"STRONG",{});var Xbt=s(Q1e);Bir=r(Xbt,"mpnet"),Xbt.forEach(t),Iir=r(Tke," \u2014 "),Yz=n(Tke,"A",{href:!0});var zbt=s(Yz);qir=r(zbt,"TFMPNetModel"),zbt.forEach(t),Nir=r(Tke," (MPNet model)"),Tke.forEach(t),jir=i(j),dF=n(j,"LI",{});var Mke=s(dF);H1e=n(Mke,"STRONG",{});var Wbt=s(H1e);Dir=r(Wbt,"mt5"),Wbt.forEach(t),Gir=r(Mke," \u2014 "),Kz=n(Mke,"A",{href:!0});var Qbt=s(Kz);Oir=r(Qbt,"TFMT5Model"),Qbt.forEach(t),Vir=r(Mke," (mT5 model)"),Mke.forEach(t),Xir=i(j),cF=n(j,"LI",{});var Eke=s(cF);U1e=n(Eke,"STRONG",{});var Hbt=s(U1e);zir=r(Hbt,"openai-gpt"),Hbt.forEach(t),Wir=r(Eke," \u2014 "),Zz=n(Eke,"A",{href:!0});var Ubt=s(Zz);Qir=r(Ubt,"TFOpenAIGPTModel"),Ubt.forEach(t),Hir=r(Eke," (OpenAI GPT model)"),Eke.forEach(t),Uir=i(j),fF=n(j,"LI",{});var Cke=s(fF);J1e=n(Cke,"STRONG",{});var Jbt=s(J1e);Jir=r(Jbt,"pegasus"),Jbt.forEach(t),Yir=r(Cke," \u2014 "),eW=n(Cke,"A",{href:!0});var Ybt=s(eW);Kir=r(Ybt,"TFPegasusModel"),Ybt.forEach(t),Zir=r(Cke," (Pegasus model)"),Cke.forEach(t),edr=i(j),mF=n(j,"LI",{});var wke=s(mF);Y1e=n(wke,"STRONG",{});var Kbt=s(Y1e);odr=r(Kbt,"rembert"),Kbt.forEach(t),rdr=r(wke," \u2014 "),oW=n(wke,"A",{href:!0});var Zbt=s(oW);tdr=r(Zbt,"TFRemBertModel"),Zbt.forEach(t),adr=r(wke," (RemBERT model)"),wke.forEach(t),ndr=i(j),gF=n(j,"LI",{});var Ake=s(gF);K1e=n(Ake,"STRONG",{});var e2t=s(K1e);sdr=r(e2t,"roberta"),e2t.forEach(t),ldr=r(Ake," \u2014 "),rW=n(Ake,"A",{href:!0});var o2t=s(rW);idr=r(o2t,"TFRobertaModel"),o2t.forEach(t),ddr=r(Ake," (RoBERTa model)"),Ake.forEach(t),cdr=i(j),hF=n(j,"LI",{});var yke=s(hF);Z1e=n(yke,"STRONG",{});var r2t=s(Z1e);fdr=r(r2t,"roformer"),r2t.forEach(t),mdr=r(yke," \u2014 "),tW=n(yke,"A",{href:!0});var t2t=s(tW);gdr=r(t2t,"TFRoFormerModel"),t2t.forEach(t),hdr=r(yke," (RoFormer model)"),yke.forEach(t),pdr=i(j),pF=n(j,"LI",{});var Lke=s(pF);ebe=n(Lke,"STRONG",{});var a2t=s(ebe);udr=r(a2t,"speech_to_text"),a2t.forEach(t),_dr=r(Lke," \u2014 "),aW=n(Lke,"A",{href:!0});var n2t=s(aW);bdr=r(n2t,"TFSpeech2TextModel"),n2t.forEach(t),vdr=r(Lke," (Speech2Text model)"),Lke.forEach(t),Fdr=i(j),uF=n(j,"LI",{});var xke=s(uF);obe=n(xke,"STRONG",{});var s2t=s(obe);Tdr=r(s2t,"swin"),s2t.forEach(t),Mdr=r(xke," \u2014 "),nW=n(xke,"A",{href:!0});var l2t=s(nW);Edr=r(l2t,"TFSwinModel"),l2t.forEach(t),Cdr=r(xke," (Swin model)"),xke.forEach(t),wdr=i(j),_F=n(j,"LI",{});var $ke=s(_F);rbe=n($ke,"STRONG",{});var i2t=s(rbe);Adr=r(i2t,"t5"),i2t.forEach(t),ydr=r($ke," \u2014 "),sW=n($ke,"A",{href:!0});var d2t=s(sW);Ldr=r(d2t,"TFT5Model"),d2t.forEach(t),xdr=r($ke," (T5 model)"),$ke.forEach(t),$dr=i(j),bF=n(j,"LI",{});var kke=s(bF);tbe=n(kke,"STRONG",{});var c2t=s(tbe);kdr=r(c2t,"tapas"),c2t.forEach(t),Sdr=r(kke," \u2014 "),lW=n(kke,"A",{href:!0});var f2t=s(lW);Rdr=r(f2t,"TFTapasModel"),f2t.forEach(t),Pdr=r(kke," (TAPAS model)"),kke.forEach(t),Bdr=i(j),vF=n(j,"LI",{});var Ske=s(vF);abe=n(Ske,"STRONG",{});var m2t=s(abe);Idr=r(m2t,"transfo-xl"),m2t.forEach(t),qdr=r(Ske," \u2014 "),iW=n(Ske,"A",{href:!0});var g2t=s(iW);Ndr=r(g2t,"TFTransfoXLModel"),g2t.forEach(t),jdr=r(Ske," (Transformer-XL model)"),Ske.forEach(t),Ddr=i(j),FF=n(j,"LI",{});var Rke=s(FF);nbe=n(Rke,"STRONG",{});var h2t=s(nbe);Gdr=r(h2t,"vit"),h2t.forEach(t),Odr=r(Rke," \u2014 "),dW=n(Rke,"A",{href:!0});var p2t=s(dW);Vdr=r(p2t,"TFViTModel"),p2t.forEach(t),Xdr=r(Rke," (ViT model)"),Rke.forEach(t),zdr=i(j),TF=n(j,"LI",{});var Pke=s(TF);sbe=n(Pke,"STRONG",{});var u2t=s(sbe);Wdr=r(u2t,"vit_mae"),u2t.forEach(t),Qdr=r(Pke," \u2014 "),cW=n(Pke,"A",{href:!0});var _2t=s(cW);Hdr=r(_2t,"TFViTMAEModel"),_2t.forEach(t),Udr=r(Pke," (ViTMAE model)"),Pke.forEach(t),Jdr=i(j),MF=n(j,"LI",{});var Bke=s(MF);lbe=n(Bke,"STRONG",{});var b2t=s(lbe);Ydr=r(b2t,"wav2vec2"),b2t.forEach(t),Kdr=r(Bke," \u2014 "),fW=n(Bke,"A",{href:!0});var v2t=s(fW);Zdr=r(v2t,"TFWav2Vec2Model"),v2t.forEach(t),ecr=r(Bke," (Wav2Vec2 model)"),Bke.forEach(t),ocr=i(j),EF=n(j,"LI",{});var Ike=s(EF);ibe=n(Ike,"STRONG",{});var F2t=s(ibe);rcr=r(F2t,"xglm"),F2t.forEach(t),tcr=r(Ike," \u2014 "),mW=n(Ike,"A",{href:!0});var T2t=s(mW);acr=r(T2t,"TFXGLMModel"),T2t.forEach(t),ncr=r(Ike," (XGLM model)"),Ike.forEach(t),scr=i(j),CF=n(j,"LI",{});var qke=s(CF);dbe=n(qke,"STRONG",{});var M2t=s(dbe);lcr=r(M2t,"xlm"),M2t.forEach(t),icr=r(qke," \u2014 "),gW=n(qke,"A",{href:!0});var E2t=s(gW);dcr=r(E2t,"TFXLMModel"),E2t.forEach(t),ccr=r(qke," (XLM model)"),qke.forEach(t),fcr=i(j),wF=n(j,"LI",{});var Nke=s(wF);cbe=n(Nke,"STRONG",{});var C2t=s(cbe);mcr=r(C2t,"xlm-roberta"),C2t.forEach(t),gcr=r(Nke," \u2014 "),hW=n(Nke,"A",{href:!0});var w2t=s(hW);hcr=r(w2t,"TFXLMRobertaModel"),w2t.forEach(t),pcr=r(Nke," (XLM-RoBERTa model)"),Nke.forEach(t),ucr=i(j),AF=n(j,"LI",{});var jke=s(AF);fbe=n(jke,"STRONG",{});var A2t=s(fbe);_cr=r(A2t,"xlnet"),A2t.forEach(t),bcr=r(jke," \u2014 "),pW=n(jke,"A",{href:!0});var y2t=s(pW);vcr=r(y2t,"TFXLNetModel"),y2t.forEach(t),Fcr=r(jke," (XLNet model)"),jke.forEach(t),j.forEach(t),Tcr=i(gl),T(yF.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Dqe=i(f),Vd=n(f,"H2",{class:!0});var Wje=s(Vd);LF=n(Wje,"A",{id:!0,class:!0,href:!0});var L2t=s(LF);mbe=n(L2t,"SPAN",{});var x2t=s(mbe);T(U8.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),Mcr=i(Wje),gbe=n(Wje,"SPAN",{});var $2t=s(gbe);Ecr=r($2t,"TFAutoModelForPreTraining"),$2t.forEach(t),Wje.forEach(t),Gqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(J8.$$.fragment,hl),Ccr=i(hl),Xd=n(hl,"P",{});var AZ=s(Xd);wcr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=n(AZ,"A",{href:!0});var k2t=s(uW);Acr=r(k2t,"from_pretrained()"),k2t.forEach(t),ycr=r(AZ," class method or the "),_W=n(AZ,"A",{href:!0});var S2t=s(_W);Lcr=r(S2t,"from_config()"),S2t.forEach(t),xcr=r(AZ,` class
method.`),AZ.forEach(t),$cr=i(hl),Y8=n(hl,"P",{});var Qje=s(Y8);kcr=r(Qje,"This class cannot be instantiated directly using "),hbe=n(Qje,"CODE",{});var R2t=s(hbe);Scr=r(R2t,"__init__()"),R2t.forEach(t),Rcr=r(Qje," (throws an error)."),Qje.forEach(t),Pcr=i(hl),Lt=n(hl,"DIV",{class:!0});var i0=s(Lt);T(K8.$$.fragment,i0),Bcr=i(i0),pbe=n(i0,"P",{});var P2t=s(pbe);Icr=r(P2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),P2t.forEach(t),qcr=i(i0),zd=n(i0,"P",{});var yZ=s(zd);Ncr=r(yZ,`Note:
Loading a model from its configuration file does `),ube=n(yZ,"STRONG",{});var B2t=s(ube);jcr=r(B2t,"not"),B2t.forEach(t),Dcr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(yZ,"A",{href:!0});var I2t=s(bW);Gcr=r(I2t,"from_pretrained()"),I2t.forEach(t),Ocr=r(yZ," to load the model weights."),yZ.forEach(t),Vcr=i(i0),T(xF.$$.fragment,i0),i0.forEach(t),Xcr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(Z8.$$.fragment,pl),zcr=i(pl),_be=n(pl,"P",{});var q2t=s(_be);Wcr=r(q2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q2t.forEach(t),Qcr=i(pl),Za=n(pl,"P",{});var d0=s(Za);Hcr=r(d0,"The model class to instantiate is selected based on the "),bbe=n(d0,"CODE",{});var N2t=s(bbe);Ucr=r(N2t,"model_type"),N2t.forEach(t),Jcr=r(d0,` property of the config object (either
passed as an argument or loaded from `),vbe=n(d0,"CODE",{});var j2t=s(vbe);Ycr=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),Kcr=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(d0,"CODE",{});var D2t=s(Fbe);Zcr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),efr=r(d0,":"),d0.forEach(t),ofr=i(pl),se=n(pl,"UL",{});var le=s(se);$F=n(le,"LI",{});var Dke=s($F);Tbe=n(Dke,"STRONG",{});var G2t=s(Tbe);rfr=r(G2t,"albert"),G2t.forEach(t),tfr=r(Dke," \u2014 "),vW=n(Dke,"A",{href:!0});var O2t=s(vW);afr=r(O2t,"TFAlbertForPreTraining"),O2t.forEach(t),nfr=r(Dke," (ALBERT model)"),Dke.forEach(t),sfr=i(le),kF=n(le,"LI",{});var Gke=s(kF);Mbe=n(Gke,"STRONG",{});var V2t=s(Mbe);lfr=r(V2t,"bart"),V2t.forEach(t),ifr=r(Gke," \u2014 "),FW=n(Gke,"A",{href:!0});var X2t=s(FW);dfr=r(X2t,"TFBartForConditionalGeneration"),X2t.forEach(t),cfr=r(Gke," (BART model)"),Gke.forEach(t),ffr=i(le),SF=n(le,"LI",{});var Oke=s(SF);Ebe=n(Oke,"STRONG",{});var z2t=s(Ebe);mfr=r(z2t,"bert"),z2t.forEach(t),gfr=r(Oke," \u2014 "),TW=n(Oke,"A",{href:!0});var W2t=s(TW);hfr=r(W2t,"TFBertForPreTraining"),W2t.forEach(t),pfr=r(Oke," (BERT model)"),Oke.forEach(t),ufr=i(le),RF=n(le,"LI",{});var Vke=s(RF);Cbe=n(Vke,"STRONG",{});var Q2t=s(Cbe);_fr=r(Q2t,"camembert"),Q2t.forEach(t),bfr=r(Vke," \u2014 "),MW=n(Vke,"A",{href:!0});var H2t=s(MW);vfr=r(H2t,"TFCamembertForMaskedLM"),H2t.forEach(t),Ffr=r(Vke," (CamemBERT model)"),Vke.forEach(t),Tfr=i(le),PF=n(le,"LI",{});var Xke=s(PF);wbe=n(Xke,"STRONG",{});var U2t=s(wbe);Mfr=r(U2t,"ctrl"),U2t.forEach(t),Efr=r(Xke," \u2014 "),EW=n(Xke,"A",{href:!0});var J2t=s(EW);Cfr=r(J2t,"TFCTRLLMHeadModel"),J2t.forEach(t),wfr=r(Xke," (CTRL model)"),Xke.forEach(t),Afr=i(le),BF=n(le,"LI",{});var zke=s(BF);Abe=n(zke,"STRONG",{});var Y2t=s(Abe);yfr=r(Y2t,"distilbert"),Y2t.forEach(t),Lfr=r(zke," \u2014 "),CW=n(zke,"A",{href:!0});var K2t=s(CW);xfr=r(K2t,"TFDistilBertForMaskedLM"),K2t.forEach(t),$fr=r(zke," (DistilBERT model)"),zke.forEach(t),kfr=i(le),IF=n(le,"LI",{});var Wke=s(IF);ybe=n(Wke,"STRONG",{});var Z2t=s(ybe);Sfr=r(Z2t,"electra"),Z2t.forEach(t),Rfr=r(Wke," \u2014 "),wW=n(Wke,"A",{href:!0});var e4t=s(wW);Pfr=r(e4t,"TFElectraForPreTraining"),e4t.forEach(t),Bfr=r(Wke," (ELECTRA model)"),Wke.forEach(t),Ifr=i(le),qF=n(le,"LI",{});var Qke=s(qF);Lbe=n(Qke,"STRONG",{});var o4t=s(Lbe);qfr=r(o4t,"flaubert"),o4t.forEach(t),Nfr=r(Qke," \u2014 "),AW=n(Qke,"A",{href:!0});var r4t=s(AW);jfr=r(r4t,"TFFlaubertWithLMHeadModel"),r4t.forEach(t),Dfr=r(Qke," (FlauBERT model)"),Qke.forEach(t),Gfr=i(le),NF=n(le,"LI",{});var Hke=s(NF);xbe=n(Hke,"STRONG",{});var t4t=s(xbe);Ofr=r(t4t,"funnel"),t4t.forEach(t),Vfr=r(Hke," \u2014 "),yW=n(Hke,"A",{href:!0});var a4t=s(yW);Xfr=r(a4t,"TFFunnelForPreTraining"),a4t.forEach(t),zfr=r(Hke," (Funnel Transformer model)"),Hke.forEach(t),Wfr=i(le),jF=n(le,"LI",{});var Uke=s(jF);$be=n(Uke,"STRONG",{});var n4t=s($be);Qfr=r(n4t,"gpt2"),n4t.forEach(t),Hfr=r(Uke," \u2014 "),LW=n(Uke,"A",{href:!0});var s4t=s(LW);Ufr=r(s4t,"TFGPT2LMHeadModel"),s4t.forEach(t),Jfr=r(Uke," (OpenAI GPT-2 model)"),Uke.forEach(t),Yfr=i(le),DF=n(le,"LI",{});var Jke=s(DF);kbe=n(Jke,"STRONG",{});var l4t=s(kbe);Kfr=r(l4t,"layoutlm"),l4t.forEach(t),Zfr=r(Jke," \u2014 "),xW=n(Jke,"A",{href:!0});var i4t=s(xW);emr=r(i4t,"TFLayoutLMForMaskedLM"),i4t.forEach(t),omr=r(Jke," (LayoutLM model)"),Jke.forEach(t),rmr=i(le),GF=n(le,"LI",{});var Yke=s(GF);Sbe=n(Yke,"STRONG",{});var d4t=s(Sbe);tmr=r(d4t,"lxmert"),d4t.forEach(t),amr=r(Yke," \u2014 "),$W=n(Yke,"A",{href:!0});var c4t=s($W);nmr=r(c4t,"TFLxmertForPreTraining"),c4t.forEach(t),smr=r(Yke," (LXMERT model)"),Yke.forEach(t),lmr=i(le),OF=n(le,"LI",{});var Kke=s(OF);Rbe=n(Kke,"STRONG",{});var f4t=s(Rbe);imr=r(f4t,"mobilebert"),f4t.forEach(t),dmr=r(Kke," \u2014 "),kW=n(Kke,"A",{href:!0});var m4t=s(kW);cmr=r(m4t,"TFMobileBertForPreTraining"),m4t.forEach(t),fmr=r(Kke," (MobileBERT model)"),Kke.forEach(t),mmr=i(le),VF=n(le,"LI",{});var Zke=s(VF);Pbe=n(Zke,"STRONG",{});var g4t=s(Pbe);gmr=r(g4t,"mpnet"),g4t.forEach(t),hmr=r(Zke," \u2014 "),SW=n(Zke,"A",{href:!0});var h4t=s(SW);pmr=r(h4t,"TFMPNetForMaskedLM"),h4t.forEach(t),umr=r(Zke," (MPNet model)"),Zke.forEach(t),_mr=i(le),XF=n(le,"LI",{});var eSe=s(XF);Bbe=n(eSe,"STRONG",{});var p4t=s(Bbe);bmr=r(p4t,"openai-gpt"),p4t.forEach(t),vmr=r(eSe," \u2014 "),RW=n(eSe,"A",{href:!0});var u4t=s(RW);Fmr=r(u4t,"TFOpenAIGPTLMHeadModel"),u4t.forEach(t),Tmr=r(eSe," (OpenAI GPT model)"),eSe.forEach(t),Mmr=i(le),zF=n(le,"LI",{});var oSe=s(zF);Ibe=n(oSe,"STRONG",{});var _4t=s(Ibe);Emr=r(_4t,"roberta"),_4t.forEach(t),Cmr=r(oSe," \u2014 "),PW=n(oSe,"A",{href:!0});var b4t=s(PW);wmr=r(b4t,"TFRobertaForMaskedLM"),b4t.forEach(t),Amr=r(oSe," (RoBERTa model)"),oSe.forEach(t),ymr=i(le),WF=n(le,"LI",{});var rSe=s(WF);qbe=n(rSe,"STRONG",{});var v4t=s(qbe);Lmr=r(v4t,"t5"),v4t.forEach(t),xmr=r(rSe," \u2014 "),BW=n(rSe,"A",{href:!0});var F4t=s(BW);$mr=r(F4t,"TFT5ForConditionalGeneration"),F4t.forEach(t),kmr=r(rSe," (T5 model)"),rSe.forEach(t),Smr=i(le),QF=n(le,"LI",{});var tSe=s(QF);Nbe=n(tSe,"STRONG",{});var T4t=s(Nbe);Rmr=r(T4t,"tapas"),T4t.forEach(t),Pmr=r(tSe," \u2014 "),IW=n(tSe,"A",{href:!0});var M4t=s(IW);Bmr=r(M4t,"TFTapasForMaskedLM"),M4t.forEach(t),Imr=r(tSe," (TAPAS model)"),tSe.forEach(t),qmr=i(le),HF=n(le,"LI",{});var aSe=s(HF);jbe=n(aSe,"STRONG",{});var E4t=s(jbe);Nmr=r(E4t,"transfo-xl"),E4t.forEach(t),jmr=r(aSe," \u2014 "),qW=n(aSe,"A",{href:!0});var C4t=s(qW);Dmr=r(C4t,"TFTransfoXLLMHeadModel"),C4t.forEach(t),Gmr=r(aSe," (Transformer-XL model)"),aSe.forEach(t),Omr=i(le),UF=n(le,"LI",{});var nSe=s(UF);Dbe=n(nSe,"STRONG",{});var w4t=s(Dbe);Vmr=r(w4t,"vit_mae"),w4t.forEach(t),Xmr=r(nSe," \u2014 "),NW=n(nSe,"A",{href:!0});var A4t=s(NW);zmr=r(A4t,"TFViTMAEForPreTraining"),A4t.forEach(t),Wmr=r(nSe," (ViTMAE model)"),nSe.forEach(t),Qmr=i(le),JF=n(le,"LI",{});var sSe=s(JF);Gbe=n(sSe,"STRONG",{});var y4t=s(Gbe);Hmr=r(y4t,"xlm"),y4t.forEach(t),Umr=r(sSe," \u2014 "),jW=n(sSe,"A",{href:!0});var L4t=s(jW);Jmr=r(L4t,"TFXLMWithLMHeadModel"),L4t.forEach(t),Ymr=r(sSe," (XLM model)"),sSe.forEach(t),Kmr=i(le),YF=n(le,"LI",{});var lSe=s(YF);Obe=n(lSe,"STRONG",{});var x4t=s(Obe);Zmr=r(x4t,"xlm-roberta"),x4t.forEach(t),egr=r(lSe," \u2014 "),DW=n(lSe,"A",{href:!0});var $4t=s(DW);ogr=r($4t,"TFXLMRobertaForMaskedLM"),$4t.forEach(t),rgr=r(lSe," (XLM-RoBERTa model)"),lSe.forEach(t),tgr=i(le),KF=n(le,"LI",{});var iSe=s(KF);Vbe=n(iSe,"STRONG",{});var k4t=s(Vbe);agr=r(k4t,"xlnet"),k4t.forEach(t),ngr=r(iSe," \u2014 "),GW=n(iSe,"A",{href:!0});var S4t=s(GW);sgr=r(S4t,"TFXLNetLMHeadModel"),S4t.forEach(t),lgr=r(iSe," (XLNet model)"),iSe.forEach(t),le.forEach(t),igr=i(pl),T(ZF.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Oqe=i(f),Wd=n(f,"H2",{class:!0});var Hje=s(Wd);e6=n(Hje,"A",{id:!0,class:!0,href:!0});var R4t=s(e6);Xbe=n(R4t,"SPAN",{});var P4t=s(Xbe);T(ex.$$.fragment,P4t),P4t.forEach(t),R4t.forEach(t),dgr=i(Hje),zbe=n(Hje,"SPAN",{});var B4t=s(zbe);cgr=r(B4t,"TFAutoModelForCausalLM"),B4t.forEach(t),Hje.forEach(t),Vqe=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(ox.$$.fragment,ul),fgr=i(ul),Qd=n(ul,"P",{});var LZ=s(Qd);mgr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OW=n(LZ,"A",{href:!0});var I4t=s(OW);ggr=r(I4t,"from_pretrained()"),I4t.forEach(t),hgr=r(LZ," class method or the "),VW=n(LZ,"A",{href:!0});var q4t=s(VW);pgr=r(q4t,"from_config()"),q4t.forEach(t),ugr=r(LZ,` class
method.`),LZ.forEach(t),_gr=i(ul),rx=n(ul,"P",{});var Uje=s(rx);bgr=r(Uje,"This class cannot be instantiated directly using "),Wbe=n(Uje,"CODE",{});var N4t=s(Wbe);vgr=r(N4t,"__init__()"),N4t.forEach(t),Fgr=r(Uje," (throws an error)."),Uje.forEach(t),Tgr=i(ul),xt=n(ul,"DIV",{class:!0});var c0=s(xt);T(tx.$$.fragment,c0),Mgr=i(c0),Qbe=n(c0,"P",{});var j4t=s(Qbe);Egr=r(j4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j4t.forEach(t),Cgr=i(c0),Hd=n(c0,"P",{});var xZ=s(Hd);wgr=r(xZ,`Note:
Loading a model from its configuration file does `),Hbe=n(xZ,"STRONG",{});var D4t=s(Hbe);Agr=r(D4t,"not"),D4t.forEach(t),ygr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(xZ,"A",{href:!0});var G4t=s(XW);Lgr=r(G4t,"from_pretrained()"),G4t.forEach(t),xgr=r(xZ," to load the model weights."),xZ.forEach(t),$gr=i(c0),T(o6.$$.fragment,c0),c0.forEach(t),kgr=i(ul),yr=n(ul,"DIV",{class:!0});var _l=s(yr);T(ax.$$.fragment,_l),Sgr=i(_l),Ube=n(_l,"P",{});var O4t=s(Ube);Rgr=r(O4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O4t.forEach(t),Pgr=i(_l),en=n(_l,"P",{});var f0=s(en);Bgr=r(f0,"The model class to instantiate is selected based on the "),Jbe=n(f0,"CODE",{});var V4t=s(Jbe);Igr=r(V4t,"model_type"),V4t.forEach(t),qgr=r(f0,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(f0,"CODE",{});var X4t=s(Ybe);Ngr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),jgr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(f0,"CODE",{});var z4t=s(Kbe);Dgr=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),Ggr=r(f0,":"),f0.forEach(t),Ogr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);r6=n(Ce,"LI",{});var dSe=s(r6);Zbe=n(dSe,"STRONG",{});var W4t=s(Zbe);Vgr=r(W4t,"bert"),W4t.forEach(t),Xgr=r(dSe," \u2014 "),zW=n(dSe,"A",{href:!0});var Q4t=s(zW);zgr=r(Q4t,"TFBertLMHeadModel"),Q4t.forEach(t),Wgr=r(dSe," (BERT model)"),dSe.forEach(t),Qgr=i(Ce),t6=n(Ce,"LI",{});var cSe=s(t6);e2e=n(cSe,"STRONG",{});var H4t=s(e2e);Hgr=r(H4t,"camembert"),H4t.forEach(t),Ugr=r(cSe," \u2014 "),WW=n(cSe,"A",{href:!0});var U4t=s(WW);Jgr=r(U4t,"TFCamembertForCausalLM"),U4t.forEach(t),Ygr=r(cSe," (CamemBERT model)"),cSe.forEach(t),Kgr=i(Ce),a6=n(Ce,"LI",{});var fSe=s(a6);o2e=n(fSe,"STRONG",{});var J4t=s(o2e);Zgr=r(J4t,"ctrl"),J4t.forEach(t),ehr=r(fSe," \u2014 "),QW=n(fSe,"A",{href:!0});var Y4t=s(QW);ohr=r(Y4t,"TFCTRLLMHeadModel"),Y4t.forEach(t),rhr=r(fSe," (CTRL model)"),fSe.forEach(t),thr=i(Ce),n6=n(Ce,"LI",{});var mSe=s(n6);r2e=n(mSe,"STRONG",{});var K4t=s(r2e);ahr=r(K4t,"gpt2"),K4t.forEach(t),nhr=r(mSe," \u2014 "),HW=n(mSe,"A",{href:!0});var Z4t=s(HW);shr=r(Z4t,"TFGPT2LMHeadModel"),Z4t.forEach(t),lhr=r(mSe," (OpenAI GPT-2 model)"),mSe.forEach(t),ihr=i(Ce),s6=n(Ce,"LI",{});var gSe=s(s6);t2e=n(gSe,"STRONG",{});var e5t=s(t2e);dhr=r(e5t,"gptj"),e5t.forEach(t),chr=r(gSe," \u2014 "),UW=n(gSe,"A",{href:!0});var o5t=s(UW);fhr=r(o5t,"TFGPTJForCausalLM"),o5t.forEach(t),mhr=r(gSe," (GPT-J model)"),gSe.forEach(t),ghr=i(Ce),l6=n(Ce,"LI",{});var hSe=s(l6);a2e=n(hSe,"STRONG",{});var r5t=s(a2e);hhr=r(r5t,"openai-gpt"),r5t.forEach(t),phr=r(hSe," \u2014 "),JW=n(hSe,"A",{href:!0});var t5t=s(JW);uhr=r(t5t,"TFOpenAIGPTLMHeadModel"),t5t.forEach(t),_hr=r(hSe," (OpenAI GPT model)"),hSe.forEach(t),bhr=i(Ce),i6=n(Ce,"LI",{});var pSe=s(i6);n2e=n(pSe,"STRONG",{});var a5t=s(n2e);vhr=r(a5t,"rembert"),a5t.forEach(t),Fhr=r(pSe," \u2014 "),YW=n(pSe,"A",{href:!0});var n5t=s(YW);Thr=r(n5t,"TFRemBertForCausalLM"),n5t.forEach(t),Mhr=r(pSe," (RemBERT model)"),pSe.forEach(t),Ehr=i(Ce),d6=n(Ce,"LI",{});var uSe=s(d6);s2e=n(uSe,"STRONG",{});var s5t=s(s2e);Chr=r(s5t,"roberta"),s5t.forEach(t),whr=r(uSe," \u2014 "),KW=n(uSe,"A",{href:!0});var l5t=s(KW);Ahr=r(l5t,"TFRobertaForCausalLM"),l5t.forEach(t),yhr=r(uSe," (RoBERTa model)"),uSe.forEach(t),Lhr=i(Ce),c6=n(Ce,"LI",{});var _Se=s(c6);l2e=n(_Se,"STRONG",{});var i5t=s(l2e);xhr=r(i5t,"roformer"),i5t.forEach(t),$hr=r(_Se," \u2014 "),ZW=n(_Se,"A",{href:!0});var d5t=s(ZW);khr=r(d5t,"TFRoFormerForCausalLM"),d5t.forEach(t),Shr=r(_Se," (RoFormer model)"),_Se.forEach(t),Rhr=i(Ce),f6=n(Ce,"LI",{});var bSe=s(f6);i2e=n(bSe,"STRONG",{});var c5t=s(i2e);Phr=r(c5t,"transfo-xl"),c5t.forEach(t),Bhr=r(bSe," \u2014 "),eQ=n(bSe,"A",{href:!0});var f5t=s(eQ);Ihr=r(f5t,"TFTransfoXLLMHeadModel"),f5t.forEach(t),qhr=r(bSe," (Transformer-XL model)"),bSe.forEach(t),Nhr=i(Ce),m6=n(Ce,"LI",{});var vSe=s(m6);d2e=n(vSe,"STRONG",{});var m5t=s(d2e);jhr=r(m5t,"xglm"),m5t.forEach(t),Dhr=r(vSe," \u2014 "),oQ=n(vSe,"A",{href:!0});var g5t=s(oQ);Ghr=r(g5t,"TFXGLMForCausalLM"),g5t.forEach(t),Ohr=r(vSe," (XGLM model)"),vSe.forEach(t),Vhr=i(Ce),g6=n(Ce,"LI",{});var FSe=s(g6);c2e=n(FSe,"STRONG",{});var h5t=s(c2e);Xhr=r(h5t,"xlm"),h5t.forEach(t),zhr=r(FSe," \u2014 "),rQ=n(FSe,"A",{href:!0});var p5t=s(rQ);Whr=r(p5t,"TFXLMWithLMHeadModel"),p5t.forEach(t),Qhr=r(FSe," (XLM model)"),FSe.forEach(t),Hhr=i(Ce),h6=n(Ce,"LI",{});var TSe=s(h6);f2e=n(TSe,"STRONG",{});var u5t=s(f2e);Uhr=r(u5t,"xlnet"),u5t.forEach(t),Jhr=r(TSe," \u2014 "),tQ=n(TSe,"A",{href:!0});var _5t=s(tQ);Yhr=r(_5t,"TFXLNetLMHeadModel"),_5t.forEach(t),Khr=r(TSe," (XLNet model)"),TSe.forEach(t),Ce.forEach(t),Zhr=i(_l),T(p6.$$.fragment,_l),_l.forEach(t),ul.forEach(t),Xqe=i(f),Ud=n(f,"H2",{class:!0});var Jje=s(Ud);u6=n(Jje,"A",{id:!0,class:!0,href:!0});var b5t=s(u6);m2e=n(b5t,"SPAN",{});var v5t=s(m2e);T(nx.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),epr=i(Jje),g2e=n(Jje,"SPAN",{});var F5t=s(g2e);opr=r(F5t,"TFAutoModelForImageClassification"),F5t.forEach(t),Jje.forEach(t),zqe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(sx.$$.fragment,bl),rpr=i(bl),Jd=n(bl,"P",{});var $Z=s(Jd);tpr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aQ=n($Z,"A",{href:!0});var T5t=s(aQ);apr=r(T5t,"from_pretrained()"),T5t.forEach(t),npr=r($Z," class method or the "),nQ=n($Z,"A",{href:!0});var M5t=s(nQ);spr=r(M5t,"from_config()"),M5t.forEach(t),lpr=r($Z,` class
method.`),$Z.forEach(t),ipr=i(bl),lx=n(bl,"P",{});var Yje=s(lx);dpr=r(Yje,"This class cannot be instantiated directly using "),h2e=n(Yje,"CODE",{});var E5t=s(h2e);cpr=r(E5t,"__init__()"),E5t.forEach(t),fpr=r(Yje," (throws an error)."),Yje.forEach(t),mpr=i(bl),$t=n(bl,"DIV",{class:!0});var m0=s($t);T(ix.$$.fragment,m0),gpr=i(m0),p2e=n(m0,"P",{});var C5t=s(p2e);hpr=r(C5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),C5t.forEach(t),ppr=i(m0),Yd=n(m0,"P",{});var kZ=s(Yd);upr=r(kZ,`Note:
Loading a model from its configuration file does `),u2e=n(kZ,"STRONG",{});var w5t=s(u2e);_pr=r(w5t,"not"),w5t.forEach(t),bpr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(kZ,"A",{href:!0});var A5t=s(sQ);vpr=r(A5t,"from_pretrained()"),A5t.forEach(t),Fpr=r(kZ," to load the model weights."),kZ.forEach(t),Tpr=i(m0),T(_6.$$.fragment,m0),m0.forEach(t),Mpr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(dx.$$.fragment,vl),Epr=i(vl),_2e=n(vl,"P",{});var y5t=s(_2e);Cpr=r(y5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y5t.forEach(t),wpr=i(vl),on=n(vl,"P",{});var g0=s(on);Apr=r(g0,"The model class to instantiate is selected based on the "),b2e=n(g0,"CODE",{});var L5t=s(b2e);ypr=r(L5t,"model_type"),L5t.forEach(t),Lpr=r(g0,` property of the config object (either
passed as an argument or loaded from `),v2e=n(g0,"CODE",{});var x5t=s(v2e);xpr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),$pr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(g0,"CODE",{});var $5t=s(F2e);kpr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),Spr=r(g0,":"),g0.forEach(t),Rpr=i(vl),rn=n(vl,"UL",{});var h0=s(rn);b6=n(h0,"LI",{});var MSe=s(b6);T2e=n(MSe,"STRONG",{});var k5t=s(T2e);Ppr=r(k5t,"convnext"),k5t.forEach(t),Bpr=r(MSe," \u2014 "),lQ=n(MSe,"A",{href:!0});var S5t=s(lQ);Ipr=r(S5t,"TFConvNextForImageClassification"),S5t.forEach(t),qpr=r(MSe," (ConvNext model)"),MSe.forEach(t),Npr=i(h0),v6=n(h0,"LI",{});var ESe=s(v6);M2e=n(ESe,"STRONG",{});var R5t=s(M2e);jpr=r(R5t,"data2vec-vision"),R5t.forEach(t),Dpr=r(ESe," \u2014 "),iQ=n(ESe,"A",{href:!0});var P5t=s(iQ);Gpr=r(P5t,"TFData2VecVisionForImageClassification"),P5t.forEach(t),Opr=r(ESe," (Data2VecVision model)"),ESe.forEach(t),Vpr=i(h0),F6=n(h0,"LI",{});var CSe=s(F6);E2e=n(CSe,"STRONG",{});var B5t=s(E2e);Xpr=r(B5t,"swin"),B5t.forEach(t),zpr=r(CSe," \u2014 "),dQ=n(CSe,"A",{href:!0});var I5t=s(dQ);Wpr=r(I5t,"TFSwinForImageClassification"),I5t.forEach(t),Qpr=r(CSe," (Swin model)"),CSe.forEach(t),Hpr=i(h0),T6=n(h0,"LI",{});var wSe=s(T6);C2e=n(wSe,"STRONG",{});var q5t=s(C2e);Upr=r(q5t,"vit"),q5t.forEach(t),Jpr=r(wSe," \u2014 "),cQ=n(wSe,"A",{href:!0});var N5t=s(cQ);Ypr=r(N5t,"TFViTForImageClassification"),N5t.forEach(t),Kpr=r(wSe," (ViT model)"),wSe.forEach(t),h0.forEach(t),Zpr=i(vl),T(M6.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Wqe=i(f),Kd=n(f,"H2",{class:!0});var Kje=s(Kd);E6=n(Kje,"A",{id:!0,class:!0,href:!0});var j5t=s(E6);w2e=n(j5t,"SPAN",{});var D5t=s(w2e);T(cx.$$.fragment,D5t),D5t.forEach(t),j5t.forEach(t),eur=i(Kje),A2e=n(Kje,"SPAN",{});var G5t=s(A2e);our=r(G5t,"TFAutoModelForMaskedLM"),G5t.forEach(t),Kje.forEach(t),Qqe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(fx.$$.fragment,Fl),rur=i(Fl),Zd=n(Fl,"P",{});var SZ=s(Zd);tur=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fQ=n(SZ,"A",{href:!0});var O5t=s(fQ);aur=r(O5t,"from_pretrained()"),O5t.forEach(t),nur=r(SZ," class method or the "),mQ=n(SZ,"A",{href:!0});var V5t=s(mQ);sur=r(V5t,"from_config()"),V5t.forEach(t),lur=r(SZ,` class
method.`),SZ.forEach(t),iur=i(Fl),mx=n(Fl,"P",{});var Zje=s(mx);dur=r(Zje,"This class cannot be instantiated directly using "),y2e=n(Zje,"CODE",{});var X5t=s(y2e);cur=r(X5t,"__init__()"),X5t.forEach(t),fur=r(Zje," (throws an error)."),Zje.forEach(t),mur=i(Fl),kt=n(Fl,"DIV",{class:!0});var p0=s(kt);T(gx.$$.fragment,p0),gur=i(p0),L2e=n(p0,"P",{});var z5t=s(L2e);hur=r(z5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),z5t.forEach(t),pur=i(p0),ec=n(p0,"P",{});var RZ=s(ec);uur=r(RZ,`Note:
Loading a model from its configuration file does `),x2e=n(RZ,"STRONG",{});var W5t=s(x2e);_ur=r(W5t,"not"),W5t.forEach(t),bur=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(RZ,"A",{href:!0});var Q5t=s(gQ);vur=r(Q5t,"from_pretrained()"),Q5t.forEach(t),Fur=r(RZ," to load the model weights."),RZ.forEach(t),Tur=i(p0),T(C6.$$.fragment,p0),p0.forEach(t),Mur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(hx.$$.fragment,Tl),Eur=i(Tl),$2e=n(Tl,"P",{});var H5t=s($2e);Cur=r(H5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),H5t.forEach(t),wur=i(Tl),tn=n(Tl,"P",{});var u0=s(tn);Aur=r(u0,"The model class to instantiate is selected based on the "),k2e=n(u0,"CODE",{});var U5t=s(k2e);yur=r(U5t,"model_type"),U5t.forEach(t),Lur=r(u0,` property of the config object (either
passed as an argument or loaded from `),S2e=n(u0,"CODE",{});var J5t=s(S2e);xur=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),$ur=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(u0,"CODE",{});var Y5t=s(R2e);kur=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Sur=r(u0,":"),u0.forEach(t),Rur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);w6=n(fe,"LI",{});var ASe=s(w6);P2e=n(ASe,"STRONG",{});var K5t=s(P2e);Pur=r(K5t,"albert"),K5t.forEach(t),Bur=r(ASe," \u2014 "),hQ=n(ASe,"A",{href:!0});var Z5t=s(hQ);Iur=r(Z5t,"TFAlbertForMaskedLM"),Z5t.forEach(t),qur=r(ASe," (ALBERT model)"),ASe.forEach(t),Nur=i(fe),A6=n(fe,"LI",{});var ySe=s(A6);B2e=n(ySe,"STRONG",{});var evt=s(B2e);jur=r(evt,"bert"),evt.forEach(t),Dur=r(ySe," \u2014 "),pQ=n(ySe,"A",{href:!0});var ovt=s(pQ);Gur=r(ovt,"TFBertForMaskedLM"),ovt.forEach(t),Our=r(ySe," (BERT model)"),ySe.forEach(t),Vur=i(fe),y6=n(fe,"LI",{});var LSe=s(y6);I2e=n(LSe,"STRONG",{});var rvt=s(I2e);Xur=r(rvt,"camembert"),rvt.forEach(t),zur=r(LSe," \u2014 "),uQ=n(LSe,"A",{href:!0});var tvt=s(uQ);Wur=r(tvt,"TFCamembertForMaskedLM"),tvt.forEach(t),Qur=r(LSe," (CamemBERT model)"),LSe.forEach(t),Hur=i(fe),L6=n(fe,"LI",{});var xSe=s(L6);q2e=n(xSe,"STRONG",{});var avt=s(q2e);Uur=r(avt,"convbert"),avt.forEach(t),Jur=r(xSe," \u2014 "),_Q=n(xSe,"A",{href:!0});var nvt=s(_Q);Yur=r(nvt,"TFConvBertForMaskedLM"),nvt.forEach(t),Kur=r(xSe," (ConvBERT model)"),xSe.forEach(t),Zur=i(fe),x6=n(fe,"LI",{});var $Se=s(x6);N2e=n($Se,"STRONG",{});var svt=s(N2e);e_r=r(svt,"deberta"),svt.forEach(t),o_r=r($Se," \u2014 "),bQ=n($Se,"A",{href:!0});var lvt=s(bQ);r_r=r(lvt,"TFDebertaForMaskedLM"),lvt.forEach(t),t_r=r($Se," (DeBERTa model)"),$Se.forEach(t),a_r=i(fe),$6=n(fe,"LI",{});var kSe=s($6);j2e=n(kSe,"STRONG",{});var ivt=s(j2e);n_r=r(ivt,"deberta-v2"),ivt.forEach(t),s_r=r(kSe," \u2014 "),vQ=n(kSe,"A",{href:!0});var dvt=s(vQ);l_r=r(dvt,"TFDebertaV2ForMaskedLM"),dvt.forEach(t),i_r=r(kSe," (DeBERTa-v2 model)"),kSe.forEach(t),d_r=i(fe),k6=n(fe,"LI",{});var SSe=s(k6);D2e=n(SSe,"STRONG",{});var cvt=s(D2e);c_r=r(cvt,"distilbert"),cvt.forEach(t),f_r=r(SSe," \u2014 "),FQ=n(SSe,"A",{href:!0});var fvt=s(FQ);m_r=r(fvt,"TFDistilBertForMaskedLM"),fvt.forEach(t),g_r=r(SSe," (DistilBERT model)"),SSe.forEach(t),h_r=i(fe),S6=n(fe,"LI",{});var RSe=s(S6);G2e=n(RSe,"STRONG",{});var mvt=s(G2e);p_r=r(mvt,"electra"),mvt.forEach(t),u_r=r(RSe," \u2014 "),TQ=n(RSe,"A",{href:!0});var gvt=s(TQ);__r=r(gvt,"TFElectraForMaskedLM"),gvt.forEach(t),b_r=r(RSe," (ELECTRA model)"),RSe.forEach(t),v_r=i(fe),R6=n(fe,"LI",{});var PSe=s(R6);O2e=n(PSe,"STRONG",{});var hvt=s(O2e);F_r=r(hvt,"flaubert"),hvt.forEach(t),T_r=r(PSe," \u2014 "),MQ=n(PSe,"A",{href:!0});var pvt=s(MQ);M_r=r(pvt,"TFFlaubertWithLMHeadModel"),pvt.forEach(t),E_r=r(PSe," (FlauBERT model)"),PSe.forEach(t),C_r=i(fe),P6=n(fe,"LI",{});var BSe=s(P6);V2e=n(BSe,"STRONG",{});var uvt=s(V2e);w_r=r(uvt,"funnel"),uvt.forEach(t),A_r=r(BSe," \u2014 "),EQ=n(BSe,"A",{href:!0});var _vt=s(EQ);y_r=r(_vt,"TFFunnelForMaskedLM"),_vt.forEach(t),L_r=r(BSe," (Funnel Transformer model)"),BSe.forEach(t),x_r=i(fe),B6=n(fe,"LI",{});var ISe=s(B6);X2e=n(ISe,"STRONG",{});var bvt=s(X2e);$_r=r(bvt,"layoutlm"),bvt.forEach(t),k_r=r(ISe," \u2014 "),CQ=n(ISe,"A",{href:!0});var vvt=s(CQ);S_r=r(vvt,"TFLayoutLMForMaskedLM"),vvt.forEach(t),R_r=r(ISe," (LayoutLM model)"),ISe.forEach(t),P_r=i(fe),I6=n(fe,"LI",{});var qSe=s(I6);z2e=n(qSe,"STRONG",{});var Fvt=s(z2e);B_r=r(Fvt,"longformer"),Fvt.forEach(t),I_r=r(qSe," \u2014 "),wQ=n(qSe,"A",{href:!0});var Tvt=s(wQ);q_r=r(Tvt,"TFLongformerForMaskedLM"),Tvt.forEach(t),N_r=r(qSe," (Longformer model)"),qSe.forEach(t),j_r=i(fe),q6=n(fe,"LI",{});var NSe=s(q6);W2e=n(NSe,"STRONG",{});var Mvt=s(W2e);D_r=r(Mvt,"mobilebert"),Mvt.forEach(t),G_r=r(NSe," \u2014 "),AQ=n(NSe,"A",{href:!0});var Evt=s(AQ);O_r=r(Evt,"TFMobileBertForMaskedLM"),Evt.forEach(t),V_r=r(NSe," (MobileBERT model)"),NSe.forEach(t),X_r=i(fe),N6=n(fe,"LI",{});var jSe=s(N6);Q2e=n(jSe,"STRONG",{});var Cvt=s(Q2e);z_r=r(Cvt,"mpnet"),Cvt.forEach(t),W_r=r(jSe," \u2014 "),yQ=n(jSe,"A",{href:!0});var wvt=s(yQ);Q_r=r(wvt,"TFMPNetForMaskedLM"),wvt.forEach(t),H_r=r(jSe," (MPNet model)"),jSe.forEach(t),U_r=i(fe),j6=n(fe,"LI",{});var DSe=s(j6);H2e=n(DSe,"STRONG",{});var Avt=s(H2e);J_r=r(Avt,"rembert"),Avt.forEach(t),Y_r=r(DSe," \u2014 "),LQ=n(DSe,"A",{href:!0});var yvt=s(LQ);K_r=r(yvt,"TFRemBertForMaskedLM"),yvt.forEach(t),Z_r=r(DSe," (RemBERT model)"),DSe.forEach(t),e1r=i(fe),D6=n(fe,"LI",{});var GSe=s(D6);U2e=n(GSe,"STRONG",{});var Lvt=s(U2e);o1r=r(Lvt,"roberta"),Lvt.forEach(t),r1r=r(GSe," \u2014 "),xQ=n(GSe,"A",{href:!0});var xvt=s(xQ);t1r=r(xvt,"TFRobertaForMaskedLM"),xvt.forEach(t),a1r=r(GSe," (RoBERTa model)"),GSe.forEach(t),n1r=i(fe),G6=n(fe,"LI",{});var OSe=s(G6);J2e=n(OSe,"STRONG",{});var $vt=s(J2e);s1r=r($vt,"roformer"),$vt.forEach(t),l1r=r(OSe," \u2014 "),$Q=n(OSe,"A",{href:!0});var kvt=s($Q);i1r=r(kvt,"TFRoFormerForMaskedLM"),kvt.forEach(t),d1r=r(OSe," (RoFormer model)"),OSe.forEach(t),c1r=i(fe),O6=n(fe,"LI",{});var VSe=s(O6);Y2e=n(VSe,"STRONG",{});var Svt=s(Y2e);f1r=r(Svt,"tapas"),Svt.forEach(t),m1r=r(VSe," \u2014 "),kQ=n(VSe,"A",{href:!0});var Rvt=s(kQ);g1r=r(Rvt,"TFTapasForMaskedLM"),Rvt.forEach(t),h1r=r(VSe," (TAPAS model)"),VSe.forEach(t),p1r=i(fe),V6=n(fe,"LI",{});var XSe=s(V6);K2e=n(XSe,"STRONG",{});var Pvt=s(K2e);u1r=r(Pvt,"xlm"),Pvt.forEach(t),_1r=r(XSe," \u2014 "),SQ=n(XSe,"A",{href:!0});var Bvt=s(SQ);b1r=r(Bvt,"TFXLMWithLMHeadModel"),Bvt.forEach(t),v1r=r(XSe," (XLM model)"),XSe.forEach(t),F1r=i(fe),X6=n(fe,"LI",{});var zSe=s(X6);Z2e=n(zSe,"STRONG",{});var Ivt=s(Z2e);T1r=r(Ivt,"xlm-roberta"),Ivt.forEach(t),M1r=r(zSe," \u2014 "),RQ=n(zSe,"A",{href:!0});var qvt=s(RQ);E1r=r(qvt,"TFXLMRobertaForMaskedLM"),qvt.forEach(t),C1r=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),fe.forEach(t),w1r=i(Tl),T(z6.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Hqe=i(f),oc=n(f,"H2",{class:!0});var eDe=s(oc);W6=n(eDe,"A",{id:!0,class:!0,href:!0});var Nvt=s(W6);e4e=n(Nvt,"SPAN",{});var jvt=s(e4e);T(px.$$.fragment,jvt),jvt.forEach(t),Nvt.forEach(t),A1r=i(eDe),o4e=n(eDe,"SPAN",{});var Dvt=s(o4e);y1r=r(Dvt,"TFAutoModelForSeq2SeqLM"),Dvt.forEach(t),eDe.forEach(t),Uqe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(ux.$$.fragment,Ml),L1r=i(Ml),rc=n(Ml,"P",{});var PZ=s(rc);x1r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PQ=n(PZ,"A",{href:!0});var Gvt=s(PQ);$1r=r(Gvt,"from_pretrained()"),Gvt.forEach(t),k1r=r(PZ," class method or the "),BQ=n(PZ,"A",{href:!0});var Ovt=s(BQ);S1r=r(Ovt,"from_config()"),Ovt.forEach(t),R1r=r(PZ,` class
method.`),PZ.forEach(t),P1r=i(Ml),_x=n(Ml,"P",{});var oDe=s(_x);B1r=r(oDe,"This class cannot be instantiated directly using "),r4e=n(oDe,"CODE",{});var Vvt=s(r4e);I1r=r(Vvt,"__init__()"),Vvt.forEach(t),q1r=r(oDe," (throws an error)."),oDe.forEach(t),N1r=i(Ml),St=n(Ml,"DIV",{class:!0});var _0=s(St);T(bx.$$.fragment,_0),j1r=i(_0),t4e=n(_0,"P",{});var Xvt=s(t4e);D1r=r(Xvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xvt.forEach(t),G1r=i(_0),tc=n(_0,"P",{});var BZ=s(tc);O1r=r(BZ,`Note:
Loading a model from its configuration file does `),a4e=n(BZ,"STRONG",{});var zvt=s(a4e);V1r=r(zvt,"not"),zvt.forEach(t),X1r=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(BZ,"A",{href:!0});var Wvt=s(IQ);z1r=r(Wvt,"from_pretrained()"),Wvt.forEach(t),W1r=r(BZ," to load the model weights."),BZ.forEach(t),Q1r=i(_0),T(Q6.$$.fragment,_0),_0.forEach(t),H1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(vx.$$.fragment,El),U1r=i(El),n4e=n(El,"P",{});var Qvt=s(n4e);J1r=r(Qvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Qvt.forEach(t),Y1r=i(El),an=n(El,"P",{});var b0=s(an);K1r=r(b0,"The model class to instantiate is selected based on the "),s4e=n(b0,"CODE",{});var Hvt=s(s4e);Z1r=r(Hvt,"model_type"),Hvt.forEach(t),ebr=r(b0,` property of the config object (either
passed as an argument or loaded from `),l4e=n(b0,"CODE",{});var Uvt=s(l4e);obr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),rbr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(b0,"CODE",{});var Jvt=s(i4e);tbr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),abr=r(b0,":"),b0.forEach(t),nbr=i(El),ye=n(El,"UL",{});var Be=s(ye);H6=n(Be,"LI",{});var WSe=s(H6);d4e=n(WSe,"STRONG",{});var Yvt=s(d4e);sbr=r(Yvt,"bart"),Yvt.forEach(t),lbr=r(WSe," \u2014 "),qQ=n(WSe,"A",{href:!0});var Kvt=s(qQ);ibr=r(Kvt,"TFBartForConditionalGeneration"),Kvt.forEach(t),dbr=r(WSe," (BART model)"),WSe.forEach(t),cbr=i(Be),U6=n(Be,"LI",{});var QSe=s(U6);c4e=n(QSe,"STRONG",{});var Zvt=s(c4e);fbr=r(Zvt,"blenderbot"),Zvt.forEach(t),mbr=r(QSe," \u2014 "),NQ=n(QSe,"A",{href:!0});var e3t=s(NQ);gbr=r(e3t,"TFBlenderbotForConditionalGeneration"),e3t.forEach(t),hbr=r(QSe," (Blenderbot model)"),QSe.forEach(t),pbr=i(Be),J6=n(Be,"LI",{});var HSe=s(J6);f4e=n(HSe,"STRONG",{});var o3t=s(f4e);ubr=r(o3t,"blenderbot-small"),o3t.forEach(t),_br=r(HSe," \u2014 "),jQ=n(HSe,"A",{href:!0});var r3t=s(jQ);bbr=r(r3t,"TFBlenderbotSmallForConditionalGeneration"),r3t.forEach(t),vbr=r(HSe," (BlenderbotSmall model)"),HSe.forEach(t),Fbr=i(Be),Y6=n(Be,"LI",{});var USe=s(Y6);m4e=n(USe,"STRONG",{});var t3t=s(m4e);Tbr=r(t3t,"encoder-decoder"),t3t.forEach(t),Mbr=r(USe," \u2014 "),DQ=n(USe,"A",{href:!0});var a3t=s(DQ);Ebr=r(a3t,"TFEncoderDecoderModel"),a3t.forEach(t),Cbr=r(USe," (Encoder decoder model)"),USe.forEach(t),wbr=i(Be),K6=n(Be,"LI",{});var JSe=s(K6);g4e=n(JSe,"STRONG",{});var n3t=s(g4e);Abr=r(n3t,"led"),n3t.forEach(t),ybr=r(JSe," \u2014 "),GQ=n(JSe,"A",{href:!0});var s3t=s(GQ);Lbr=r(s3t,"TFLEDForConditionalGeneration"),s3t.forEach(t),xbr=r(JSe," (LED model)"),JSe.forEach(t),$br=i(Be),Z6=n(Be,"LI",{});var YSe=s(Z6);h4e=n(YSe,"STRONG",{});var l3t=s(h4e);kbr=r(l3t,"marian"),l3t.forEach(t),Sbr=r(YSe," \u2014 "),OQ=n(YSe,"A",{href:!0});var i3t=s(OQ);Rbr=r(i3t,"TFMarianMTModel"),i3t.forEach(t),Pbr=r(YSe," (Marian model)"),YSe.forEach(t),Bbr=i(Be),eT=n(Be,"LI",{});var KSe=s(eT);p4e=n(KSe,"STRONG",{});var d3t=s(p4e);Ibr=r(d3t,"mbart"),d3t.forEach(t),qbr=r(KSe," \u2014 "),VQ=n(KSe,"A",{href:!0});var c3t=s(VQ);Nbr=r(c3t,"TFMBartForConditionalGeneration"),c3t.forEach(t),jbr=r(KSe," (mBART model)"),KSe.forEach(t),Dbr=i(Be),oT=n(Be,"LI",{});var ZSe=s(oT);u4e=n(ZSe,"STRONG",{});var f3t=s(u4e);Gbr=r(f3t,"mt5"),f3t.forEach(t),Obr=r(ZSe," \u2014 "),XQ=n(ZSe,"A",{href:!0});var m3t=s(XQ);Vbr=r(m3t,"TFMT5ForConditionalGeneration"),m3t.forEach(t),Xbr=r(ZSe," (mT5 model)"),ZSe.forEach(t),zbr=i(Be),rT=n(Be,"LI",{});var eRe=s(rT);_4e=n(eRe,"STRONG",{});var g3t=s(_4e);Wbr=r(g3t,"pegasus"),g3t.forEach(t),Qbr=r(eRe," \u2014 "),zQ=n(eRe,"A",{href:!0});var h3t=s(zQ);Hbr=r(h3t,"TFPegasusForConditionalGeneration"),h3t.forEach(t),Ubr=r(eRe," (Pegasus model)"),eRe.forEach(t),Jbr=i(Be),tT=n(Be,"LI",{});var oRe=s(tT);b4e=n(oRe,"STRONG",{});var p3t=s(b4e);Ybr=r(p3t,"t5"),p3t.forEach(t),Kbr=r(oRe," \u2014 "),WQ=n(oRe,"A",{href:!0});var u3t=s(WQ);Zbr=r(u3t,"TFT5ForConditionalGeneration"),u3t.forEach(t),e2r=r(oRe," (T5 model)"),oRe.forEach(t),Be.forEach(t),o2r=i(El),T(aT.$$.fragment,El),El.forEach(t),Ml.forEach(t),Jqe=i(f),ac=n(f,"H2",{class:!0});var rDe=s(ac);nT=n(rDe,"A",{id:!0,class:!0,href:!0});var _3t=s(nT);v4e=n(_3t,"SPAN",{});var b3t=s(v4e);T(Fx.$$.fragment,b3t),b3t.forEach(t),_3t.forEach(t),r2r=i(rDe),F4e=n(rDe,"SPAN",{});var v3t=s(F4e);t2r=r(v3t,"TFAutoModelForSequenceClassification"),v3t.forEach(t),rDe.forEach(t),Yqe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(Tx.$$.fragment,Cl),a2r=i(Cl),nc=n(Cl,"P",{});var IZ=s(nc);n2r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),QQ=n(IZ,"A",{href:!0});var F3t=s(QQ);s2r=r(F3t,"from_pretrained()"),F3t.forEach(t),l2r=r(IZ," class method or the "),HQ=n(IZ,"A",{href:!0});var T3t=s(HQ);i2r=r(T3t,"from_config()"),T3t.forEach(t),d2r=r(IZ,` class
method.`),IZ.forEach(t),c2r=i(Cl),Mx=n(Cl,"P",{});var tDe=s(Mx);f2r=r(tDe,"This class cannot be instantiated directly using "),T4e=n(tDe,"CODE",{});var M3t=s(T4e);m2r=r(M3t,"__init__()"),M3t.forEach(t),g2r=r(tDe," (throws an error)."),tDe.forEach(t),h2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var v0=s(Rt);T(Ex.$$.fragment,v0),p2r=i(v0),M4e=n(v0,"P",{});var E3t=s(M4e);u2r=r(E3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E3t.forEach(t),_2r=i(v0),sc=n(v0,"P",{});var qZ=s(sc);b2r=r(qZ,`Note:
Loading a model from its configuration file does `),E4e=n(qZ,"STRONG",{});var C3t=s(E4e);v2r=r(C3t,"not"),C3t.forEach(t),F2r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(qZ,"A",{href:!0});var w3t=s(UQ);T2r=r(w3t,"from_pretrained()"),w3t.forEach(t),M2r=r(qZ," to load the model weights."),qZ.forEach(t),E2r=i(v0),T(sT.$$.fragment,v0),v0.forEach(t),C2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(Cx.$$.fragment,wl),w2r=i(wl),C4e=n(wl,"P",{});var A3t=s(C4e);A2r=r(A3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A3t.forEach(t),y2r=i(wl),nn=n(wl,"P",{});var F0=s(nn);L2r=r(F0,"The model class to instantiate is selected based on the "),w4e=n(F0,"CODE",{});var y3t=s(w4e);x2r=r(y3t,"model_type"),y3t.forEach(t),$2r=r(F0,` property of the config object (either
passed as an argument or loaded from `),A4e=n(F0,"CODE",{});var L3t=s(A4e);k2r=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),S2r=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y4e=n(F0,"CODE",{});var x3t=s(y4e);R2r=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),P2r=r(F0,":"),F0.forEach(t),B2r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);lT=n(ae,"LI",{});var rRe=s(lT);L4e=n(rRe,"STRONG",{});var $3t=s(L4e);I2r=r($3t,"albert"),$3t.forEach(t),q2r=r(rRe," \u2014 "),JQ=n(rRe,"A",{href:!0});var k3t=s(JQ);N2r=r(k3t,"TFAlbertForSequenceClassification"),k3t.forEach(t),j2r=r(rRe," (ALBERT model)"),rRe.forEach(t),D2r=i(ae),iT=n(ae,"LI",{});var tRe=s(iT);x4e=n(tRe,"STRONG",{});var S3t=s(x4e);G2r=r(S3t,"bert"),S3t.forEach(t),O2r=r(tRe," \u2014 "),YQ=n(tRe,"A",{href:!0});var R3t=s(YQ);V2r=r(R3t,"TFBertForSequenceClassification"),R3t.forEach(t),X2r=r(tRe," (BERT model)"),tRe.forEach(t),z2r=i(ae),dT=n(ae,"LI",{});var aRe=s(dT);$4e=n(aRe,"STRONG",{});var P3t=s($4e);W2r=r(P3t,"camembert"),P3t.forEach(t),Q2r=r(aRe," \u2014 "),KQ=n(aRe,"A",{href:!0});var B3t=s(KQ);H2r=r(B3t,"TFCamembertForSequenceClassification"),B3t.forEach(t),U2r=r(aRe," (CamemBERT model)"),aRe.forEach(t),J2r=i(ae),cT=n(ae,"LI",{});var nRe=s(cT);k4e=n(nRe,"STRONG",{});var I3t=s(k4e);Y2r=r(I3t,"convbert"),I3t.forEach(t),K2r=r(nRe," \u2014 "),ZQ=n(nRe,"A",{href:!0});var q3t=s(ZQ);Z2r=r(q3t,"TFConvBertForSequenceClassification"),q3t.forEach(t),e4r=r(nRe," (ConvBERT model)"),nRe.forEach(t),o4r=i(ae),fT=n(ae,"LI",{});var sRe=s(fT);S4e=n(sRe,"STRONG",{});var N3t=s(S4e);r4r=r(N3t,"ctrl"),N3t.forEach(t),t4r=r(sRe," \u2014 "),eH=n(sRe,"A",{href:!0});var j3t=s(eH);a4r=r(j3t,"TFCTRLForSequenceClassification"),j3t.forEach(t),n4r=r(sRe," (CTRL model)"),sRe.forEach(t),s4r=i(ae),mT=n(ae,"LI",{});var lRe=s(mT);R4e=n(lRe,"STRONG",{});var D3t=s(R4e);l4r=r(D3t,"deberta"),D3t.forEach(t),i4r=r(lRe," \u2014 "),oH=n(lRe,"A",{href:!0});var G3t=s(oH);d4r=r(G3t,"TFDebertaForSequenceClassification"),G3t.forEach(t),c4r=r(lRe," (DeBERTa model)"),lRe.forEach(t),f4r=i(ae),gT=n(ae,"LI",{});var iRe=s(gT);P4e=n(iRe,"STRONG",{});var O3t=s(P4e);m4r=r(O3t,"deberta-v2"),O3t.forEach(t),g4r=r(iRe," \u2014 "),rH=n(iRe,"A",{href:!0});var V3t=s(rH);h4r=r(V3t,"TFDebertaV2ForSequenceClassification"),V3t.forEach(t),p4r=r(iRe," (DeBERTa-v2 model)"),iRe.forEach(t),u4r=i(ae),hT=n(ae,"LI",{});var dRe=s(hT);B4e=n(dRe,"STRONG",{});var X3t=s(B4e);_4r=r(X3t,"distilbert"),X3t.forEach(t),b4r=r(dRe," \u2014 "),tH=n(dRe,"A",{href:!0});var z3t=s(tH);v4r=r(z3t,"TFDistilBertForSequenceClassification"),z3t.forEach(t),F4r=r(dRe," (DistilBERT model)"),dRe.forEach(t),T4r=i(ae),pT=n(ae,"LI",{});var cRe=s(pT);I4e=n(cRe,"STRONG",{});var W3t=s(I4e);M4r=r(W3t,"electra"),W3t.forEach(t),E4r=r(cRe," \u2014 "),aH=n(cRe,"A",{href:!0});var Q3t=s(aH);C4r=r(Q3t,"TFElectraForSequenceClassification"),Q3t.forEach(t),w4r=r(cRe," (ELECTRA model)"),cRe.forEach(t),A4r=i(ae),uT=n(ae,"LI",{});var fRe=s(uT);q4e=n(fRe,"STRONG",{});var H3t=s(q4e);y4r=r(H3t,"flaubert"),H3t.forEach(t),L4r=r(fRe," \u2014 "),nH=n(fRe,"A",{href:!0});var U3t=s(nH);x4r=r(U3t,"TFFlaubertForSequenceClassification"),U3t.forEach(t),$4r=r(fRe," (FlauBERT model)"),fRe.forEach(t),k4r=i(ae),_T=n(ae,"LI",{});var mRe=s(_T);N4e=n(mRe,"STRONG",{});var J3t=s(N4e);S4r=r(J3t,"funnel"),J3t.forEach(t),R4r=r(mRe," \u2014 "),sH=n(mRe,"A",{href:!0});var Y3t=s(sH);P4r=r(Y3t,"TFFunnelForSequenceClassification"),Y3t.forEach(t),B4r=r(mRe," (Funnel Transformer model)"),mRe.forEach(t),I4r=i(ae),bT=n(ae,"LI",{});var gRe=s(bT);j4e=n(gRe,"STRONG",{});var K3t=s(j4e);q4r=r(K3t,"gpt2"),K3t.forEach(t),N4r=r(gRe," \u2014 "),lH=n(gRe,"A",{href:!0});var Z3t=s(lH);j4r=r(Z3t,"TFGPT2ForSequenceClassification"),Z3t.forEach(t),D4r=r(gRe," (OpenAI GPT-2 model)"),gRe.forEach(t),G4r=i(ae),vT=n(ae,"LI",{});var hRe=s(vT);D4e=n(hRe,"STRONG",{});var eFt=s(D4e);O4r=r(eFt,"gptj"),eFt.forEach(t),V4r=r(hRe," \u2014 "),iH=n(hRe,"A",{href:!0});var oFt=s(iH);X4r=r(oFt,"TFGPTJForSequenceClassification"),oFt.forEach(t),z4r=r(hRe," (GPT-J model)"),hRe.forEach(t),W4r=i(ae),FT=n(ae,"LI",{});var pRe=s(FT);G4e=n(pRe,"STRONG",{});var rFt=s(G4e);Q4r=r(rFt,"layoutlm"),rFt.forEach(t),H4r=r(pRe," \u2014 "),dH=n(pRe,"A",{href:!0});var tFt=s(dH);U4r=r(tFt,"TFLayoutLMForSequenceClassification"),tFt.forEach(t),J4r=r(pRe," (LayoutLM model)"),pRe.forEach(t),Y4r=i(ae),TT=n(ae,"LI",{});var uRe=s(TT);O4e=n(uRe,"STRONG",{});var aFt=s(O4e);K4r=r(aFt,"longformer"),aFt.forEach(t),Z4r=r(uRe," \u2014 "),cH=n(uRe,"A",{href:!0});var nFt=s(cH);e5r=r(nFt,"TFLongformerForSequenceClassification"),nFt.forEach(t),o5r=r(uRe," (Longformer model)"),uRe.forEach(t),r5r=i(ae),MT=n(ae,"LI",{});var _Re=s(MT);V4e=n(_Re,"STRONG",{});var sFt=s(V4e);t5r=r(sFt,"mobilebert"),sFt.forEach(t),a5r=r(_Re," \u2014 "),fH=n(_Re,"A",{href:!0});var lFt=s(fH);n5r=r(lFt,"TFMobileBertForSequenceClassification"),lFt.forEach(t),s5r=r(_Re," (MobileBERT model)"),_Re.forEach(t),l5r=i(ae),ET=n(ae,"LI",{});var bRe=s(ET);X4e=n(bRe,"STRONG",{});var iFt=s(X4e);i5r=r(iFt,"mpnet"),iFt.forEach(t),d5r=r(bRe," \u2014 "),mH=n(bRe,"A",{href:!0});var dFt=s(mH);c5r=r(dFt,"TFMPNetForSequenceClassification"),dFt.forEach(t),f5r=r(bRe," (MPNet model)"),bRe.forEach(t),m5r=i(ae),CT=n(ae,"LI",{});var vRe=s(CT);z4e=n(vRe,"STRONG",{});var cFt=s(z4e);g5r=r(cFt,"openai-gpt"),cFt.forEach(t),h5r=r(vRe," \u2014 "),gH=n(vRe,"A",{href:!0});var fFt=s(gH);p5r=r(fFt,"TFOpenAIGPTForSequenceClassification"),fFt.forEach(t),u5r=r(vRe," (OpenAI GPT model)"),vRe.forEach(t),_5r=i(ae),wT=n(ae,"LI",{});var FRe=s(wT);W4e=n(FRe,"STRONG",{});var mFt=s(W4e);b5r=r(mFt,"rembert"),mFt.forEach(t),v5r=r(FRe," \u2014 "),hH=n(FRe,"A",{href:!0});var gFt=s(hH);F5r=r(gFt,"TFRemBertForSequenceClassification"),gFt.forEach(t),T5r=r(FRe," (RemBERT model)"),FRe.forEach(t),M5r=i(ae),AT=n(ae,"LI",{});var TRe=s(AT);Q4e=n(TRe,"STRONG",{});var hFt=s(Q4e);E5r=r(hFt,"roberta"),hFt.forEach(t),C5r=r(TRe," \u2014 "),pH=n(TRe,"A",{href:!0});var pFt=s(pH);w5r=r(pFt,"TFRobertaForSequenceClassification"),pFt.forEach(t),A5r=r(TRe," (RoBERTa model)"),TRe.forEach(t),y5r=i(ae),yT=n(ae,"LI",{});var MRe=s(yT);H4e=n(MRe,"STRONG",{});var uFt=s(H4e);L5r=r(uFt,"roformer"),uFt.forEach(t),x5r=r(MRe," \u2014 "),uH=n(MRe,"A",{href:!0});var _Ft=s(uH);$5r=r(_Ft,"TFRoFormerForSequenceClassification"),_Ft.forEach(t),k5r=r(MRe," (RoFormer model)"),MRe.forEach(t),S5r=i(ae),LT=n(ae,"LI",{});var ERe=s(LT);U4e=n(ERe,"STRONG",{});var bFt=s(U4e);R5r=r(bFt,"tapas"),bFt.forEach(t),P5r=r(ERe," \u2014 "),_H=n(ERe,"A",{href:!0});var vFt=s(_H);B5r=r(vFt,"TFTapasForSequenceClassification"),vFt.forEach(t),I5r=r(ERe," (TAPAS model)"),ERe.forEach(t),q5r=i(ae),xT=n(ae,"LI",{});var CRe=s(xT);J4e=n(CRe,"STRONG",{});var FFt=s(J4e);N5r=r(FFt,"transfo-xl"),FFt.forEach(t),j5r=r(CRe," \u2014 "),bH=n(CRe,"A",{href:!0});var TFt=s(bH);D5r=r(TFt,"TFTransfoXLForSequenceClassification"),TFt.forEach(t),G5r=r(CRe," (Transformer-XL model)"),CRe.forEach(t),O5r=i(ae),$T=n(ae,"LI",{});var wRe=s($T);Y4e=n(wRe,"STRONG",{});var MFt=s(Y4e);V5r=r(MFt,"xlm"),MFt.forEach(t),X5r=r(wRe," \u2014 "),vH=n(wRe,"A",{href:!0});var EFt=s(vH);z5r=r(EFt,"TFXLMForSequenceClassification"),EFt.forEach(t),W5r=r(wRe," (XLM model)"),wRe.forEach(t),Q5r=i(ae),kT=n(ae,"LI",{});var ARe=s(kT);K4e=n(ARe,"STRONG",{});var CFt=s(K4e);H5r=r(CFt,"xlm-roberta"),CFt.forEach(t),U5r=r(ARe," \u2014 "),FH=n(ARe,"A",{href:!0});var wFt=s(FH);J5r=r(wFt,"TFXLMRobertaForSequenceClassification"),wFt.forEach(t),Y5r=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),K5r=i(ae),ST=n(ae,"LI",{});var yRe=s(ST);Z4e=n(yRe,"STRONG",{});var AFt=s(Z4e);Z5r=r(AFt,"xlnet"),AFt.forEach(t),evr=r(yRe," \u2014 "),TH=n(yRe,"A",{href:!0});var yFt=s(TH);ovr=r(yFt,"TFXLNetForSequenceClassification"),yFt.forEach(t),rvr=r(yRe," (XLNet model)"),yRe.forEach(t),ae.forEach(t),tvr=i(wl),T(RT.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Kqe=i(f),lc=n(f,"H2",{class:!0});var aDe=s(lc);PT=n(aDe,"A",{id:!0,class:!0,href:!0});var LFt=s(PT);e5e=n(LFt,"SPAN",{});var xFt=s(e5e);T(wx.$$.fragment,xFt),xFt.forEach(t),LFt.forEach(t),avr=i(aDe),o5e=n(aDe,"SPAN",{});var $Ft=s(o5e);nvr=r($Ft,"TFAutoModelForMultipleChoice"),$Ft.forEach(t),aDe.forEach(t),Zqe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(Ax.$$.fragment,Al),svr=i(Al),ic=n(Al,"P",{});var NZ=s(ic);lvr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=n(NZ,"A",{href:!0});var kFt=s(MH);ivr=r(kFt,"from_pretrained()"),kFt.forEach(t),dvr=r(NZ," class method or the "),EH=n(NZ,"A",{href:!0});var SFt=s(EH);cvr=r(SFt,"from_config()"),SFt.forEach(t),fvr=r(NZ,` class
method.`),NZ.forEach(t),mvr=i(Al),yx=n(Al,"P",{});var nDe=s(yx);gvr=r(nDe,"This class cannot be instantiated directly using "),r5e=n(nDe,"CODE",{});var RFt=s(r5e);hvr=r(RFt,"__init__()"),RFt.forEach(t),pvr=r(nDe," (throws an error)."),nDe.forEach(t),uvr=i(Al),Pt=n(Al,"DIV",{class:!0});var T0=s(Pt);T(Lx.$$.fragment,T0),_vr=i(T0),t5e=n(T0,"P",{});var PFt=s(t5e);bvr=r(PFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PFt.forEach(t),vvr=i(T0),dc=n(T0,"P",{});var jZ=s(dc);Fvr=r(jZ,`Note:
Loading a model from its configuration file does `),a5e=n(jZ,"STRONG",{});var BFt=s(a5e);Tvr=r(BFt,"not"),BFt.forEach(t),Mvr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(jZ,"A",{href:!0});var IFt=s(CH);Evr=r(IFt,"from_pretrained()"),IFt.forEach(t),Cvr=r(jZ," to load the model weights."),jZ.forEach(t),wvr=i(T0),T(BT.$$.fragment,T0),T0.forEach(t),Avr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(xx.$$.fragment,yl),yvr=i(yl),n5e=n(yl,"P",{});var qFt=s(n5e);Lvr=r(qFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qFt.forEach(t),xvr=i(yl),sn=n(yl,"P",{});var M0=s(sn);$vr=r(M0,"The model class to instantiate is selected based on the "),s5e=n(M0,"CODE",{});var NFt=s(s5e);kvr=r(NFt,"model_type"),NFt.forEach(t),Svr=r(M0,` property of the config object (either
passed as an argument or loaded from `),l5e=n(M0,"CODE",{});var jFt=s(l5e);Rvr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),Pvr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(M0,"CODE",{});var DFt=s(i5e);Bvr=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),Ivr=r(M0,":"),M0.forEach(t),qvr=i(yl),he=n(yl,"UL",{});var _e=s(he);IT=n(_e,"LI",{});var LRe=s(IT);d5e=n(LRe,"STRONG",{});var GFt=s(d5e);Nvr=r(GFt,"albert"),GFt.forEach(t),jvr=r(LRe," \u2014 "),wH=n(LRe,"A",{href:!0});var OFt=s(wH);Dvr=r(OFt,"TFAlbertForMultipleChoice"),OFt.forEach(t),Gvr=r(LRe," (ALBERT model)"),LRe.forEach(t),Ovr=i(_e),qT=n(_e,"LI",{});var xRe=s(qT);c5e=n(xRe,"STRONG",{});var VFt=s(c5e);Vvr=r(VFt,"bert"),VFt.forEach(t),Xvr=r(xRe," \u2014 "),AH=n(xRe,"A",{href:!0});var XFt=s(AH);zvr=r(XFt,"TFBertForMultipleChoice"),XFt.forEach(t),Wvr=r(xRe," (BERT model)"),xRe.forEach(t),Qvr=i(_e),NT=n(_e,"LI",{});var $Re=s(NT);f5e=n($Re,"STRONG",{});var zFt=s(f5e);Hvr=r(zFt,"camembert"),zFt.forEach(t),Uvr=r($Re," \u2014 "),yH=n($Re,"A",{href:!0});var WFt=s(yH);Jvr=r(WFt,"TFCamembertForMultipleChoice"),WFt.forEach(t),Yvr=r($Re," (CamemBERT model)"),$Re.forEach(t),Kvr=i(_e),jT=n(_e,"LI",{});var kRe=s(jT);m5e=n(kRe,"STRONG",{});var QFt=s(m5e);Zvr=r(QFt,"convbert"),QFt.forEach(t),e3r=r(kRe," \u2014 "),LH=n(kRe,"A",{href:!0});var HFt=s(LH);o3r=r(HFt,"TFConvBertForMultipleChoice"),HFt.forEach(t),r3r=r(kRe," (ConvBERT model)"),kRe.forEach(t),t3r=i(_e),DT=n(_e,"LI",{});var SRe=s(DT);g5e=n(SRe,"STRONG",{});var UFt=s(g5e);a3r=r(UFt,"distilbert"),UFt.forEach(t),n3r=r(SRe," \u2014 "),xH=n(SRe,"A",{href:!0});var JFt=s(xH);s3r=r(JFt,"TFDistilBertForMultipleChoice"),JFt.forEach(t),l3r=r(SRe," (DistilBERT model)"),SRe.forEach(t),i3r=i(_e),GT=n(_e,"LI",{});var RRe=s(GT);h5e=n(RRe,"STRONG",{});var YFt=s(h5e);d3r=r(YFt,"electra"),YFt.forEach(t),c3r=r(RRe," \u2014 "),$H=n(RRe,"A",{href:!0});var KFt=s($H);f3r=r(KFt,"TFElectraForMultipleChoice"),KFt.forEach(t),m3r=r(RRe," (ELECTRA model)"),RRe.forEach(t),g3r=i(_e),OT=n(_e,"LI",{});var PRe=s(OT);p5e=n(PRe,"STRONG",{});var ZFt=s(p5e);h3r=r(ZFt,"flaubert"),ZFt.forEach(t),p3r=r(PRe," \u2014 "),kH=n(PRe,"A",{href:!0});var e6t=s(kH);u3r=r(e6t,"TFFlaubertForMultipleChoice"),e6t.forEach(t),_3r=r(PRe," (FlauBERT model)"),PRe.forEach(t),b3r=i(_e),VT=n(_e,"LI",{});var BRe=s(VT);u5e=n(BRe,"STRONG",{});var o6t=s(u5e);v3r=r(o6t,"funnel"),o6t.forEach(t),F3r=r(BRe," \u2014 "),SH=n(BRe,"A",{href:!0});var r6t=s(SH);T3r=r(r6t,"TFFunnelForMultipleChoice"),r6t.forEach(t),M3r=r(BRe," (Funnel Transformer model)"),BRe.forEach(t),E3r=i(_e),XT=n(_e,"LI",{});var IRe=s(XT);_5e=n(IRe,"STRONG",{});var t6t=s(_5e);C3r=r(t6t,"longformer"),t6t.forEach(t),w3r=r(IRe," \u2014 "),RH=n(IRe,"A",{href:!0});var a6t=s(RH);A3r=r(a6t,"TFLongformerForMultipleChoice"),a6t.forEach(t),y3r=r(IRe," (Longformer model)"),IRe.forEach(t),L3r=i(_e),zT=n(_e,"LI",{});var qRe=s(zT);b5e=n(qRe,"STRONG",{});var n6t=s(b5e);x3r=r(n6t,"mobilebert"),n6t.forEach(t),$3r=r(qRe," \u2014 "),PH=n(qRe,"A",{href:!0});var s6t=s(PH);k3r=r(s6t,"TFMobileBertForMultipleChoice"),s6t.forEach(t),S3r=r(qRe," (MobileBERT model)"),qRe.forEach(t),R3r=i(_e),WT=n(_e,"LI",{});var NRe=s(WT);v5e=n(NRe,"STRONG",{});var l6t=s(v5e);P3r=r(l6t,"mpnet"),l6t.forEach(t),B3r=r(NRe," \u2014 "),BH=n(NRe,"A",{href:!0});var i6t=s(BH);I3r=r(i6t,"TFMPNetForMultipleChoice"),i6t.forEach(t),q3r=r(NRe," (MPNet model)"),NRe.forEach(t),N3r=i(_e),QT=n(_e,"LI",{});var jRe=s(QT);F5e=n(jRe,"STRONG",{});var d6t=s(F5e);j3r=r(d6t,"rembert"),d6t.forEach(t),D3r=r(jRe," \u2014 "),IH=n(jRe,"A",{href:!0});var c6t=s(IH);G3r=r(c6t,"TFRemBertForMultipleChoice"),c6t.forEach(t),O3r=r(jRe," (RemBERT model)"),jRe.forEach(t),V3r=i(_e),HT=n(_e,"LI",{});var DRe=s(HT);T5e=n(DRe,"STRONG",{});var f6t=s(T5e);X3r=r(f6t,"roberta"),f6t.forEach(t),z3r=r(DRe," \u2014 "),qH=n(DRe,"A",{href:!0});var m6t=s(qH);W3r=r(m6t,"TFRobertaForMultipleChoice"),m6t.forEach(t),Q3r=r(DRe," (RoBERTa model)"),DRe.forEach(t),H3r=i(_e),UT=n(_e,"LI",{});var GRe=s(UT);M5e=n(GRe,"STRONG",{});var g6t=s(M5e);U3r=r(g6t,"roformer"),g6t.forEach(t),J3r=r(GRe," \u2014 "),NH=n(GRe,"A",{href:!0});var h6t=s(NH);Y3r=r(h6t,"TFRoFormerForMultipleChoice"),h6t.forEach(t),K3r=r(GRe," (RoFormer model)"),GRe.forEach(t),Z3r=i(_e),JT=n(_e,"LI",{});var ORe=s(JT);E5e=n(ORe,"STRONG",{});var p6t=s(E5e);eFr=r(p6t,"xlm"),p6t.forEach(t),oFr=r(ORe," \u2014 "),jH=n(ORe,"A",{href:!0});var u6t=s(jH);rFr=r(u6t,"TFXLMForMultipleChoice"),u6t.forEach(t),tFr=r(ORe," (XLM model)"),ORe.forEach(t),aFr=i(_e),YT=n(_e,"LI",{});var VRe=s(YT);C5e=n(VRe,"STRONG",{});var _6t=s(C5e);nFr=r(_6t,"xlm-roberta"),_6t.forEach(t),sFr=r(VRe," \u2014 "),DH=n(VRe,"A",{href:!0});var b6t=s(DH);lFr=r(b6t,"TFXLMRobertaForMultipleChoice"),b6t.forEach(t),iFr=r(VRe," (XLM-RoBERTa model)"),VRe.forEach(t),dFr=i(_e),KT=n(_e,"LI",{});var XRe=s(KT);w5e=n(XRe,"STRONG",{});var v6t=s(w5e);cFr=r(v6t,"xlnet"),v6t.forEach(t),fFr=r(XRe," \u2014 "),GH=n(XRe,"A",{href:!0});var F6t=s(GH);mFr=r(F6t,"TFXLNetForMultipleChoice"),F6t.forEach(t),gFr=r(XRe," (XLNet model)"),XRe.forEach(t),_e.forEach(t),hFr=i(yl),T(ZT.$$.fragment,yl),yl.forEach(t),Al.forEach(t),eNe=i(f),cc=n(f,"H2",{class:!0});var sDe=s(cc);eM=n(sDe,"A",{id:!0,class:!0,href:!0});var T6t=s(eM);A5e=n(T6t,"SPAN",{});var M6t=s(A5e);T($x.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),pFr=i(sDe),y5e=n(sDe,"SPAN",{});var E6t=s(y5e);uFr=r(E6t,"TFAutoModelForNextSentencePrediction"),E6t.forEach(t),sDe.forEach(t),oNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(kx.$$.fragment,Ll),_Fr=i(Ll),fc=n(Ll,"P",{});var DZ=s(fc);bFr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OH=n(DZ,"A",{href:!0});var C6t=s(OH);vFr=r(C6t,"from_pretrained()"),C6t.forEach(t),FFr=r(DZ," class method or the "),VH=n(DZ,"A",{href:!0});var w6t=s(VH);TFr=r(w6t,"from_config()"),w6t.forEach(t),MFr=r(DZ,` class
method.`),DZ.forEach(t),EFr=i(Ll),Sx=n(Ll,"P",{});var lDe=s(Sx);CFr=r(lDe,"This class cannot be instantiated directly using "),L5e=n(lDe,"CODE",{});var A6t=s(L5e);wFr=r(A6t,"__init__()"),A6t.forEach(t),AFr=r(lDe," (throws an error)."),lDe.forEach(t),yFr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var E0=s(Bt);T(Rx.$$.fragment,E0),LFr=i(E0),x5e=n(E0,"P",{});var y6t=s(x5e);xFr=r(y6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y6t.forEach(t),$Fr=i(E0),mc=n(E0,"P",{});var GZ=s(mc);kFr=r(GZ,`Note:
Loading a model from its configuration file does `),$5e=n(GZ,"STRONG",{});var L6t=s($5e);SFr=r(L6t,"not"),L6t.forEach(t),RFr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(GZ,"A",{href:!0});var x6t=s(XH);PFr=r(x6t,"from_pretrained()"),x6t.forEach(t),BFr=r(GZ," to load the model weights."),GZ.forEach(t),IFr=i(E0),T(oM.$$.fragment,E0),E0.forEach(t),qFr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(Px.$$.fragment,xl),NFr=i(xl),k5e=n(xl,"P",{});var $6t=s(k5e);jFr=r($6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$6t.forEach(t),DFr=i(xl),ln=n(xl,"P",{});var C0=s(ln);GFr=r(C0,"The model class to instantiate is selected based on the "),S5e=n(C0,"CODE",{});var k6t=s(S5e);OFr=r(k6t,"model_type"),k6t.forEach(t),VFr=r(C0,` property of the config object (either
passed as an argument or loaded from `),R5e=n(C0,"CODE",{});var S6t=s(R5e);XFr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),zFr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(C0,"CODE",{});var R6t=s(P5e);WFr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),QFr=r(C0,":"),C0.forEach(t),HFr=i(xl),Bx=n(xl,"UL",{});var iDe=s(Bx);rM=n(iDe,"LI",{});var zRe=s(rM);B5e=n(zRe,"STRONG",{});var P6t=s(B5e);UFr=r(P6t,"bert"),P6t.forEach(t),JFr=r(zRe," \u2014 "),zH=n(zRe,"A",{href:!0});var B6t=s(zH);YFr=r(B6t,"TFBertForNextSentencePrediction"),B6t.forEach(t),KFr=r(zRe," (BERT model)"),zRe.forEach(t),ZFr=i(iDe),tM=n(iDe,"LI",{});var WRe=s(tM);I5e=n(WRe,"STRONG",{});var I6t=s(I5e);e6r=r(I6t,"mobilebert"),I6t.forEach(t),o6r=r(WRe," \u2014 "),WH=n(WRe,"A",{href:!0});var q6t=s(WH);r6r=r(q6t,"TFMobileBertForNextSentencePrediction"),q6t.forEach(t),t6r=r(WRe," (MobileBERT model)"),WRe.forEach(t),iDe.forEach(t),a6r=i(xl),T(aM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),rNe=i(f),gc=n(f,"H2",{class:!0});var dDe=s(gc);nM=n(dDe,"A",{id:!0,class:!0,href:!0});var N6t=s(nM);q5e=n(N6t,"SPAN",{});var j6t=s(q5e);T(Ix.$$.fragment,j6t),j6t.forEach(t),N6t.forEach(t),n6r=i(dDe),N5e=n(dDe,"SPAN",{});var D6t=s(N5e);s6r=r(D6t,"TFAutoModelForTableQuestionAnswering"),D6t.forEach(t),dDe.forEach(t),tNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(qx.$$.fragment,$l),l6r=i($l),hc=n($l,"P",{});var OZ=s(hc);i6r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QH=n(OZ,"A",{href:!0});var G6t=s(QH);d6r=r(G6t,"from_pretrained()"),G6t.forEach(t),c6r=r(OZ," class method or the "),HH=n(OZ,"A",{href:!0});var O6t=s(HH);f6r=r(O6t,"from_config()"),O6t.forEach(t),m6r=r(OZ,` class
method.`),OZ.forEach(t),g6r=i($l),Nx=n($l,"P",{});var cDe=s(Nx);h6r=r(cDe,"This class cannot be instantiated directly using "),j5e=n(cDe,"CODE",{});var V6t=s(j5e);p6r=r(V6t,"__init__()"),V6t.forEach(t),u6r=r(cDe," (throws an error)."),cDe.forEach(t),_6r=i($l),It=n($l,"DIV",{class:!0});var w0=s(It);T(jx.$$.fragment,w0),b6r=i(w0),D5e=n(w0,"P",{});var X6t=s(D5e);v6r=r(X6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),X6t.forEach(t),F6r=i(w0),pc=n(w0,"P",{});var VZ=s(pc);T6r=r(VZ,`Note:
Loading a model from its configuration file does `),G5e=n(VZ,"STRONG",{});var z6t=s(G5e);M6r=r(z6t,"not"),z6t.forEach(t),E6r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(VZ,"A",{href:!0});var W6t=s(UH);C6r=r(W6t,"from_pretrained()"),W6t.forEach(t),w6r=r(VZ," to load the model weights."),VZ.forEach(t),A6r=i(w0),T(sM.$$.fragment,w0),w0.forEach(t),y6r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(Dx.$$.fragment,kl),L6r=i(kl),O5e=n(kl,"P",{});var Q6t=s(O5e);x6r=r(Q6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q6t.forEach(t),$6r=i(kl),dn=n(kl,"P",{});var A0=s(dn);k6r=r(A0,"The model class to instantiate is selected based on the "),V5e=n(A0,"CODE",{});var H6t=s(V5e);S6r=r(H6t,"model_type"),H6t.forEach(t),R6r=r(A0,` property of the config object (either
passed as an argument or loaded from `),X5e=n(A0,"CODE",{});var U6t=s(X5e);P6r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),B6r=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(A0,"CODE",{});var J6t=s(z5e);I6r=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),q6r=r(A0,":"),A0.forEach(t),N6r=i(kl),W5e=n(kl,"UL",{});var Y6t=s(W5e);lM=n(Y6t,"LI",{});var QRe=s(lM);Q5e=n(QRe,"STRONG",{});var K6t=s(Q5e);j6r=r(K6t,"tapas"),K6t.forEach(t),D6r=r(QRe," \u2014 "),JH=n(QRe,"A",{href:!0});var Z6t=s(JH);G6r=r(Z6t,"TFTapasForQuestionAnswering"),Z6t.forEach(t),O6r=r(QRe," (TAPAS model)"),QRe.forEach(t),Y6t.forEach(t),V6r=i(kl),T(iM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),aNe=i(f),uc=n(f,"H2",{class:!0});var fDe=s(uc);dM=n(fDe,"A",{id:!0,class:!0,href:!0});var eTt=s(dM);H5e=n(eTt,"SPAN",{});var oTt=s(H5e);T(Gx.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),X6r=i(fDe),U5e=n(fDe,"SPAN",{});var rTt=s(U5e);z6r=r(rTt,"TFAutoModelForTokenClassification"),rTt.forEach(t),fDe.forEach(t),nNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(Ox.$$.fragment,Sl),W6r=i(Sl),_c=n(Sl,"P",{});var XZ=s(_c);Q6r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YH=n(XZ,"A",{href:!0});var tTt=s(YH);H6r=r(tTt,"from_pretrained()"),tTt.forEach(t),U6r=r(XZ," class method or the "),KH=n(XZ,"A",{href:!0});var aTt=s(KH);J6r=r(aTt,"from_config()"),aTt.forEach(t),Y6r=r(XZ,` class
method.`),XZ.forEach(t),K6r=i(Sl),Vx=n(Sl,"P",{});var mDe=s(Vx);Z6r=r(mDe,"This class cannot be instantiated directly using "),J5e=n(mDe,"CODE",{});var nTt=s(J5e);eTr=r(nTt,"__init__()"),nTt.forEach(t),oTr=r(mDe," (throws an error)."),mDe.forEach(t),rTr=i(Sl),qt=n(Sl,"DIV",{class:!0});var y0=s(qt);T(Xx.$$.fragment,y0),tTr=i(y0),Y5e=n(y0,"P",{});var sTt=s(Y5e);aTr=r(sTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sTt.forEach(t),nTr=i(y0),bc=n(y0,"P",{});var zZ=s(bc);sTr=r(zZ,`Note:
Loading a model from its configuration file does `),K5e=n(zZ,"STRONG",{});var lTt=s(K5e);lTr=r(lTt,"not"),lTt.forEach(t),iTr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(zZ,"A",{href:!0});var iTt=s(ZH);dTr=r(iTt,"from_pretrained()"),iTt.forEach(t),cTr=r(zZ," to load the model weights."),zZ.forEach(t),fTr=i(y0),T(cM.$$.fragment,y0),y0.forEach(t),mTr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(zx.$$.fragment,Rl),gTr=i(Rl),Z5e=n(Rl,"P",{});var dTt=s(Z5e);hTr=r(dTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dTt.forEach(t),pTr=i(Rl),cn=n(Rl,"P",{});var L0=s(cn);uTr=r(L0,"The model class to instantiate is selected based on the "),eve=n(L0,"CODE",{});var cTt=s(eve);_Tr=r(cTt,"model_type"),cTt.forEach(t),bTr=r(L0,` property of the config object (either
passed as an argument or loaded from `),ove=n(L0,"CODE",{});var fTt=s(ove);vTr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),FTr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(L0,"CODE",{});var mTt=s(rve);TTr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),MTr=r(L0,":"),L0.forEach(t),ETr=i(Rl),de=n(Rl,"UL",{});var me=s(de);fM=n(me,"LI",{});var HRe=s(fM);tve=n(HRe,"STRONG",{});var gTt=s(tve);CTr=r(gTt,"albert"),gTt.forEach(t),wTr=r(HRe," \u2014 "),eU=n(HRe,"A",{href:!0});var hTt=s(eU);ATr=r(hTt,"TFAlbertForTokenClassification"),hTt.forEach(t),yTr=r(HRe," (ALBERT model)"),HRe.forEach(t),LTr=i(me),mM=n(me,"LI",{});var URe=s(mM);ave=n(URe,"STRONG",{});var pTt=s(ave);xTr=r(pTt,"bert"),pTt.forEach(t),$Tr=r(URe," \u2014 "),oU=n(URe,"A",{href:!0});var uTt=s(oU);kTr=r(uTt,"TFBertForTokenClassification"),uTt.forEach(t),STr=r(URe," (BERT model)"),URe.forEach(t),RTr=i(me),gM=n(me,"LI",{});var JRe=s(gM);nve=n(JRe,"STRONG",{});var _Tt=s(nve);PTr=r(_Tt,"camembert"),_Tt.forEach(t),BTr=r(JRe," \u2014 "),rU=n(JRe,"A",{href:!0});var bTt=s(rU);ITr=r(bTt,"TFCamembertForTokenClassification"),bTt.forEach(t),qTr=r(JRe," (CamemBERT model)"),JRe.forEach(t),NTr=i(me),hM=n(me,"LI",{});var YRe=s(hM);sve=n(YRe,"STRONG",{});var vTt=s(sve);jTr=r(vTt,"convbert"),vTt.forEach(t),DTr=r(YRe," \u2014 "),tU=n(YRe,"A",{href:!0});var FTt=s(tU);GTr=r(FTt,"TFConvBertForTokenClassification"),FTt.forEach(t),OTr=r(YRe," (ConvBERT model)"),YRe.forEach(t),VTr=i(me),pM=n(me,"LI",{});var KRe=s(pM);lve=n(KRe,"STRONG",{});var TTt=s(lve);XTr=r(TTt,"deberta"),TTt.forEach(t),zTr=r(KRe," \u2014 "),aU=n(KRe,"A",{href:!0});var MTt=s(aU);WTr=r(MTt,"TFDebertaForTokenClassification"),MTt.forEach(t),QTr=r(KRe," (DeBERTa model)"),KRe.forEach(t),HTr=i(me),uM=n(me,"LI",{});var ZRe=s(uM);ive=n(ZRe,"STRONG",{});var ETt=s(ive);UTr=r(ETt,"deberta-v2"),ETt.forEach(t),JTr=r(ZRe," \u2014 "),nU=n(ZRe,"A",{href:!0});var CTt=s(nU);YTr=r(CTt,"TFDebertaV2ForTokenClassification"),CTt.forEach(t),KTr=r(ZRe," (DeBERTa-v2 model)"),ZRe.forEach(t),ZTr=i(me),_M=n(me,"LI",{});var ePe=s(_M);dve=n(ePe,"STRONG",{});var wTt=s(dve);eMr=r(wTt,"distilbert"),wTt.forEach(t),oMr=r(ePe," \u2014 "),sU=n(ePe,"A",{href:!0});var ATt=s(sU);rMr=r(ATt,"TFDistilBertForTokenClassification"),ATt.forEach(t),tMr=r(ePe," (DistilBERT model)"),ePe.forEach(t),aMr=i(me),bM=n(me,"LI",{});var oPe=s(bM);cve=n(oPe,"STRONG",{});var yTt=s(cve);nMr=r(yTt,"electra"),yTt.forEach(t),sMr=r(oPe," \u2014 "),lU=n(oPe,"A",{href:!0});var LTt=s(lU);lMr=r(LTt,"TFElectraForTokenClassification"),LTt.forEach(t),iMr=r(oPe," (ELECTRA model)"),oPe.forEach(t),dMr=i(me),vM=n(me,"LI",{});var rPe=s(vM);fve=n(rPe,"STRONG",{});var xTt=s(fve);cMr=r(xTt,"flaubert"),xTt.forEach(t),fMr=r(rPe," \u2014 "),iU=n(rPe,"A",{href:!0});var $Tt=s(iU);mMr=r($Tt,"TFFlaubertForTokenClassification"),$Tt.forEach(t),gMr=r(rPe," (FlauBERT model)"),rPe.forEach(t),hMr=i(me),FM=n(me,"LI",{});var tPe=s(FM);mve=n(tPe,"STRONG",{});var kTt=s(mve);pMr=r(kTt,"funnel"),kTt.forEach(t),uMr=r(tPe," \u2014 "),dU=n(tPe,"A",{href:!0});var STt=s(dU);_Mr=r(STt,"TFFunnelForTokenClassification"),STt.forEach(t),bMr=r(tPe," (Funnel Transformer model)"),tPe.forEach(t),vMr=i(me),TM=n(me,"LI",{});var aPe=s(TM);gve=n(aPe,"STRONG",{});var RTt=s(gve);FMr=r(RTt,"layoutlm"),RTt.forEach(t),TMr=r(aPe," \u2014 "),cU=n(aPe,"A",{href:!0});var PTt=s(cU);MMr=r(PTt,"TFLayoutLMForTokenClassification"),PTt.forEach(t),EMr=r(aPe," (LayoutLM model)"),aPe.forEach(t),CMr=i(me),MM=n(me,"LI",{});var nPe=s(MM);hve=n(nPe,"STRONG",{});var BTt=s(hve);wMr=r(BTt,"longformer"),BTt.forEach(t),AMr=r(nPe," \u2014 "),fU=n(nPe,"A",{href:!0});var ITt=s(fU);yMr=r(ITt,"TFLongformerForTokenClassification"),ITt.forEach(t),LMr=r(nPe," (Longformer model)"),nPe.forEach(t),xMr=i(me),EM=n(me,"LI",{});var sPe=s(EM);pve=n(sPe,"STRONG",{});var qTt=s(pve);$Mr=r(qTt,"mobilebert"),qTt.forEach(t),kMr=r(sPe," \u2014 "),mU=n(sPe,"A",{href:!0});var NTt=s(mU);SMr=r(NTt,"TFMobileBertForTokenClassification"),NTt.forEach(t),RMr=r(sPe," (MobileBERT model)"),sPe.forEach(t),PMr=i(me),CM=n(me,"LI",{});var lPe=s(CM);uve=n(lPe,"STRONG",{});var jTt=s(uve);BMr=r(jTt,"mpnet"),jTt.forEach(t),IMr=r(lPe," \u2014 "),gU=n(lPe,"A",{href:!0});var DTt=s(gU);qMr=r(DTt,"TFMPNetForTokenClassification"),DTt.forEach(t),NMr=r(lPe," (MPNet model)"),lPe.forEach(t),jMr=i(me),wM=n(me,"LI",{});var iPe=s(wM);_ve=n(iPe,"STRONG",{});var GTt=s(_ve);DMr=r(GTt,"rembert"),GTt.forEach(t),GMr=r(iPe," \u2014 "),hU=n(iPe,"A",{href:!0});var OTt=s(hU);OMr=r(OTt,"TFRemBertForTokenClassification"),OTt.forEach(t),VMr=r(iPe," (RemBERT model)"),iPe.forEach(t),XMr=i(me),AM=n(me,"LI",{});var dPe=s(AM);bve=n(dPe,"STRONG",{});var VTt=s(bve);zMr=r(VTt,"roberta"),VTt.forEach(t),WMr=r(dPe," \u2014 "),pU=n(dPe,"A",{href:!0});var XTt=s(pU);QMr=r(XTt,"TFRobertaForTokenClassification"),XTt.forEach(t),HMr=r(dPe," (RoBERTa model)"),dPe.forEach(t),UMr=i(me),yM=n(me,"LI",{});var cPe=s(yM);vve=n(cPe,"STRONG",{});var zTt=s(vve);JMr=r(zTt,"roformer"),zTt.forEach(t),YMr=r(cPe," \u2014 "),uU=n(cPe,"A",{href:!0});var WTt=s(uU);KMr=r(WTt,"TFRoFormerForTokenClassification"),WTt.forEach(t),ZMr=r(cPe," (RoFormer model)"),cPe.forEach(t),eEr=i(me),LM=n(me,"LI",{});var fPe=s(LM);Fve=n(fPe,"STRONG",{});var QTt=s(Fve);oEr=r(QTt,"xlm"),QTt.forEach(t),rEr=r(fPe," \u2014 "),_U=n(fPe,"A",{href:!0});var HTt=s(_U);tEr=r(HTt,"TFXLMForTokenClassification"),HTt.forEach(t),aEr=r(fPe," (XLM model)"),fPe.forEach(t),nEr=i(me),xM=n(me,"LI",{});var mPe=s(xM);Tve=n(mPe,"STRONG",{});var UTt=s(Tve);sEr=r(UTt,"xlm-roberta"),UTt.forEach(t),lEr=r(mPe," \u2014 "),bU=n(mPe,"A",{href:!0});var JTt=s(bU);iEr=r(JTt,"TFXLMRobertaForTokenClassification"),JTt.forEach(t),dEr=r(mPe," (XLM-RoBERTa model)"),mPe.forEach(t),cEr=i(me),$M=n(me,"LI",{});var gPe=s($M);Mve=n(gPe,"STRONG",{});var YTt=s(Mve);fEr=r(YTt,"xlnet"),YTt.forEach(t),mEr=r(gPe," \u2014 "),vU=n(gPe,"A",{href:!0});var KTt=s(vU);gEr=r(KTt,"TFXLNetForTokenClassification"),KTt.forEach(t),hEr=r(gPe," (XLNet model)"),gPe.forEach(t),me.forEach(t),pEr=i(Rl),T(kM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),sNe=i(f),vc=n(f,"H2",{class:!0});var gDe=s(vc);SM=n(gDe,"A",{id:!0,class:!0,href:!0});var ZTt=s(SM);Eve=n(ZTt,"SPAN",{});var eMt=s(Eve);T(Wx.$$.fragment,eMt),eMt.forEach(t),ZTt.forEach(t),uEr=i(gDe),Cve=n(gDe,"SPAN",{});var oMt=s(Cve);_Er=r(oMt,"TFAutoModelForQuestionAnswering"),oMt.forEach(t),gDe.forEach(t),lNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(Qx.$$.fragment,Pl),bEr=i(Pl),Fc=n(Pl,"P",{});var WZ=s(Fc);vEr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FU=n(WZ,"A",{href:!0});var rMt=s(FU);FEr=r(rMt,"from_pretrained()"),rMt.forEach(t),TEr=r(WZ," class method or the "),TU=n(WZ,"A",{href:!0});var tMt=s(TU);MEr=r(tMt,"from_config()"),tMt.forEach(t),EEr=r(WZ,` class
method.`),WZ.forEach(t),CEr=i(Pl),Hx=n(Pl,"P",{});var hDe=s(Hx);wEr=r(hDe,"This class cannot be instantiated directly using "),wve=n(hDe,"CODE",{});var aMt=s(wve);AEr=r(aMt,"__init__()"),aMt.forEach(t),yEr=r(hDe," (throws an error)."),hDe.forEach(t),LEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var x0=s(Nt);T(Ux.$$.fragment,x0),xEr=i(x0),Ave=n(x0,"P",{});var nMt=s(Ave);$Er=r(nMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nMt.forEach(t),kEr=i(x0),Tc=n(x0,"P",{});var QZ=s(Tc);SEr=r(QZ,`Note:
Loading a model from its configuration file does `),yve=n(QZ,"STRONG",{});var sMt=s(yve);REr=r(sMt,"not"),sMt.forEach(t),PEr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(QZ,"A",{href:!0});var lMt=s(MU);BEr=r(lMt,"from_pretrained()"),lMt.forEach(t),IEr=r(QZ," to load the model weights."),QZ.forEach(t),qEr=i(x0),T(RM.$$.fragment,x0),x0.forEach(t),NEr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(Jx.$$.fragment,Bl),jEr=i(Bl),Lve=n(Bl,"P",{});var iMt=s(Lve);DEr=r(iMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iMt.forEach(t),GEr=i(Bl),fn=n(Bl,"P",{});var $0=s(fn);OEr=r($0,"The model class to instantiate is selected based on the "),xve=n($0,"CODE",{});var dMt=s(xve);VEr=r(dMt,"model_type"),dMt.forEach(t),XEr=r($0,` property of the config object (either
passed as an argument or loaded from `),$ve=n($0,"CODE",{});var cMt=s($ve);zEr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),WEr=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n($0,"CODE",{});var fMt=s(kve);QEr=r(fMt,"pretrained_model_name_or_path"),fMt.forEach(t),HEr=r($0,":"),$0.forEach(t),UEr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);PM=n(ge,"LI",{});var hPe=s(PM);Sve=n(hPe,"STRONG",{});var mMt=s(Sve);JEr=r(mMt,"albert"),mMt.forEach(t),YEr=r(hPe," \u2014 "),EU=n(hPe,"A",{href:!0});var gMt=s(EU);KEr=r(gMt,"TFAlbertForQuestionAnswering"),gMt.forEach(t),ZEr=r(hPe," (ALBERT model)"),hPe.forEach(t),eCr=i(ge),BM=n(ge,"LI",{});var pPe=s(BM);Rve=n(pPe,"STRONG",{});var hMt=s(Rve);oCr=r(hMt,"bert"),hMt.forEach(t),rCr=r(pPe," \u2014 "),CU=n(pPe,"A",{href:!0});var pMt=s(CU);tCr=r(pMt,"TFBertForQuestionAnswering"),pMt.forEach(t),aCr=r(pPe," (BERT model)"),pPe.forEach(t),nCr=i(ge),IM=n(ge,"LI",{});var uPe=s(IM);Pve=n(uPe,"STRONG",{});var uMt=s(Pve);sCr=r(uMt,"camembert"),uMt.forEach(t),lCr=r(uPe," \u2014 "),wU=n(uPe,"A",{href:!0});var _Mt=s(wU);iCr=r(_Mt,"TFCamembertForQuestionAnswering"),_Mt.forEach(t),dCr=r(uPe," (CamemBERT model)"),uPe.forEach(t),cCr=i(ge),qM=n(ge,"LI",{});var _Pe=s(qM);Bve=n(_Pe,"STRONG",{});var bMt=s(Bve);fCr=r(bMt,"convbert"),bMt.forEach(t),mCr=r(_Pe," \u2014 "),AU=n(_Pe,"A",{href:!0});var vMt=s(AU);gCr=r(vMt,"TFConvBertForQuestionAnswering"),vMt.forEach(t),hCr=r(_Pe," (ConvBERT model)"),_Pe.forEach(t),pCr=i(ge),NM=n(ge,"LI",{});var bPe=s(NM);Ive=n(bPe,"STRONG",{});var FMt=s(Ive);uCr=r(FMt,"deberta"),FMt.forEach(t),_Cr=r(bPe," \u2014 "),yU=n(bPe,"A",{href:!0});var TMt=s(yU);bCr=r(TMt,"TFDebertaForQuestionAnswering"),TMt.forEach(t),vCr=r(bPe," (DeBERTa model)"),bPe.forEach(t),FCr=i(ge),jM=n(ge,"LI",{});var vPe=s(jM);qve=n(vPe,"STRONG",{});var MMt=s(qve);TCr=r(MMt,"deberta-v2"),MMt.forEach(t),MCr=r(vPe," \u2014 "),LU=n(vPe,"A",{href:!0});var EMt=s(LU);ECr=r(EMt,"TFDebertaV2ForQuestionAnswering"),EMt.forEach(t),CCr=r(vPe," (DeBERTa-v2 model)"),vPe.forEach(t),wCr=i(ge),DM=n(ge,"LI",{});var FPe=s(DM);Nve=n(FPe,"STRONG",{});var CMt=s(Nve);ACr=r(CMt,"distilbert"),CMt.forEach(t),yCr=r(FPe," \u2014 "),xU=n(FPe,"A",{href:!0});var wMt=s(xU);LCr=r(wMt,"TFDistilBertForQuestionAnswering"),wMt.forEach(t),xCr=r(FPe," (DistilBERT model)"),FPe.forEach(t),$Cr=i(ge),GM=n(ge,"LI",{});var TPe=s(GM);jve=n(TPe,"STRONG",{});var AMt=s(jve);kCr=r(AMt,"electra"),AMt.forEach(t),SCr=r(TPe," \u2014 "),$U=n(TPe,"A",{href:!0});var yMt=s($U);RCr=r(yMt,"TFElectraForQuestionAnswering"),yMt.forEach(t),PCr=r(TPe," (ELECTRA model)"),TPe.forEach(t),BCr=i(ge),OM=n(ge,"LI",{});var MPe=s(OM);Dve=n(MPe,"STRONG",{});var LMt=s(Dve);ICr=r(LMt,"flaubert"),LMt.forEach(t),qCr=r(MPe," \u2014 "),kU=n(MPe,"A",{href:!0});var xMt=s(kU);NCr=r(xMt,"TFFlaubertForQuestionAnsweringSimple"),xMt.forEach(t),jCr=r(MPe," (FlauBERT model)"),MPe.forEach(t),DCr=i(ge),VM=n(ge,"LI",{});var EPe=s(VM);Gve=n(EPe,"STRONG",{});var $Mt=s(Gve);GCr=r($Mt,"funnel"),$Mt.forEach(t),OCr=r(EPe," \u2014 "),SU=n(EPe,"A",{href:!0});var kMt=s(SU);VCr=r(kMt,"TFFunnelForQuestionAnswering"),kMt.forEach(t),XCr=r(EPe," (Funnel Transformer model)"),EPe.forEach(t),zCr=i(ge),XM=n(ge,"LI",{});var CPe=s(XM);Ove=n(CPe,"STRONG",{});var SMt=s(Ove);WCr=r(SMt,"gptj"),SMt.forEach(t),QCr=r(CPe," \u2014 "),RU=n(CPe,"A",{href:!0});var RMt=s(RU);HCr=r(RMt,"TFGPTJForQuestionAnswering"),RMt.forEach(t),UCr=r(CPe," (GPT-J model)"),CPe.forEach(t),JCr=i(ge),zM=n(ge,"LI",{});var wPe=s(zM);Vve=n(wPe,"STRONG",{});var PMt=s(Vve);YCr=r(PMt,"longformer"),PMt.forEach(t),KCr=r(wPe," \u2014 "),PU=n(wPe,"A",{href:!0});var BMt=s(PU);ZCr=r(BMt,"TFLongformerForQuestionAnswering"),BMt.forEach(t),ewr=r(wPe," (Longformer model)"),wPe.forEach(t),owr=i(ge),WM=n(ge,"LI",{});var APe=s(WM);Xve=n(APe,"STRONG",{});var IMt=s(Xve);rwr=r(IMt,"mobilebert"),IMt.forEach(t),twr=r(APe," \u2014 "),BU=n(APe,"A",{href:!0});var qMt=s(BU);awr=r(qMt,"TFMobileBertForQuestionAnswering"),qMt.forEach(t),nwr=r(APe," (MobileBERT model)"),APe.forEach(t),swr=i(ge),QM=n(ge,"LI",{});var yPe=s(QM);zve=n(yPe,"STRONG",{});var NMt=s(zve);lwr=r(NMt,"mpnet"),NMt.forEach(t),iwr=r(yPe," \u2014 "),IU=n(yPe,"A",{href:!0});var jMt=s(IU);dwr=r(jMt,"TFMPNetForQuestionAnswering"),jMt.forEach(t),cwr=r(yPe," (MPNet model)"),yPe.forEach(t),fwr=i(ge),HM=n(ge,"LI",{});var LPe=s(HM);Wve=n(LPe,"STRONG",{});var DMt=s(Wve);mwr=r(DMt,"rembert"),DMt.forEach(t),gwr=r(LPe," \u2014 "),qU=n(LPe,"A",{href:!0});var GMt=s(qU);hwr=r(GMt,"TFRemBertForQuestionAnswering"),GMt.forEach(t),pwr=r(LPe," (RemBERT model)"),LPe.forEach(t),uwr=i(ge),UM=n(ge,"LI",{});var xPe=s(UM);Qve=n(xPe,"STRONG",{});var OMt=s(Qve);_wr=r(OMt,"roberta"),OMt.forEach(t),bwr=r(xPe," \u2014 "),NU=n(xPe,"A",{href:!0});var VMt=s(NU);vwr=r(VMt,"TFRobertaForQuestionAnswering"),VMt.forEach(t),Fwr=r(xPe," (RoBERTa model)"),xPe.forEach(t),Twr=i(ge),JM=n(ge,"LI",{});var $Pe=s(JM);Hve=n($Pe,"STRONG",{});var XMt=s(Hve);Mwr=r(XMt,"roformer"),XMt.forEach(t),Ewr=r($Pe," \u2014 "),jU=n($Pe,"A",{href:!0});var zMt=s(jU);Cwr=r(zMt,"TFRoFormerForQuestionAnswering"),zMt.forEach(t),wwr=r($Pe," (RoFormer model)"),$Pe.forEach(t),Awr=i(ge),YM=n(ge,"LI",{});var kPe=s(YM);Uve=n(kPe,"STRONG",{});var WMt=s(Uve);ywr=r(WMt,"xlm"),WMt.forEach(t),Lwr=r(kPe," \u2014 "),DU=n(kPe,"A",{href:!0});var QMt=s(DU);xwr=r(QMt,"TFXLMForQuestionAnsweringSimple"),QMt.forEach(t),$wr=r(kPe," (XLM model)"),kPe.forEach(t),kwr=i(ge),KM=n(ge,"LI",{});var SPe=s(KM);Jve=n(SPe,"STRONG",{});var HMt=s(Jve);Swr=r(HMt,"xlm-roberta"),HMt.forEach(t),Rwr=r(SPe," \u2014 "),GU=n(SPe,"A",{href:!0});var UMt=s(GU);Pwr=r(UMt,"TFXLMRobertaForQuestionAnswering"),UMt.forEach(t),Bwr=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),Iwr=i(ge),ZM=n(ge,"LI",{});var RPe=s(ZM);Yve=n(RPe,"STRONG",{});var JMt=s(Yve);qwr=r(JMt,"xlnet"),JMt.forEach(t),Nwr=r(RPe," \u2014 "),OU=n(RPe,"A",{href:!0});var YMt=s(OU);jwr=r(YMt,"TFXLNetForQuestionAnsweringSimple"),YMt.forEach(t),Dwr=r(RPe," (XLNet model)"),RPe.forEach(t),ge.forEach(t),Gwr=i(Bl),T(eE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),iNe=i(f),Mc=n(f,"H2",{class:!0});var pDe=s(Mc);oE=n(pDe,"A",{id:!0,class:!0,href:!0});var KMt=s(oE);Kve=n(KMt,"SPAN",{});var ZMt=s(Kve);T(Yx.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),Owr=i(pDe),Zve=n(pDe,"SPAN",{});var eEt=s(Zve);Vwr=r(eEt,"TFAutoModelForVision2Seq"),eEt.forEach(t),pDe.forEach(t),dNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(Kx.$$.fragment,Il),Xwr=i(Il),Ec=n(Il,"P",{});var HZ=s(Ec);zwr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VU=n(HZ,"A",{href:!0});var oEt=s(VU);Wwr=r(oEt,"from_pretrained()"),oEt.forEach(t),Qwr=r(HZ," class method or the "),XU=n(HZ,"A",{href:!0});var rEt=s(XU);Hwr=r(rEt,"from_config()"),rEt.forEach(t),Uwr=r(HZ,` class
method.`),HZ.forEach(t),Jwr=i(Il),Zx=n(Il,"P",{});var uDe=s(Zx);Ywr=r(uDe,"This class cannot be instantiated directly using "),e3e=n(uDe,"CODE",{});var tEt=s(e3e);Kwr=r(tEt,"__init__()"),tEt.forEach(t),Zwr=r(uDe," (throws an error)."),uDe.forEach(t),eAr=i(Il),jt=n(Il,"DIV",{class:!0});var k0=s(jt);T(e7.$$.fragment,k0),oAr=i(k0),o3e=n(k0,"P",{});var aEt=s(o3e);rAr=r(aEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aEt.forEach(t),tAr=i(k0),Cc=n(k0,"P",{});var UZ=s(Cc);aAr=r(UZ,`Note:
Loading a model from its configuration file does `),r3e=n(UZ,"STRONG",{});var nEt=s(r3e);nAr=r(nEt,"not"),nEt.forEach(t),sAr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(UZ,"A",{href:!0});var sEt=s(zU);lAr=r(sEt,"from_pretrained()"),sEt.forEach(t),iAr=r(UZ," to load the model weights."),UZ.forEach(t),dAr=i(k0),T(rE.$$.fragment,k0),k0.forEach(t),cAr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(o7.$$.fragment,ql),fAr=i(ql),t3e=n(ql,"P",{});var lEt=s(t3e);mAr=r(lEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lEt.forEach(t),gAr=i(ql),mn=n(ql,"P",{});var S0=s(mn);hAr=r(S0,"The model class to instantiate is selected based on the "),a3e=n(S0,"CODE",{});var iEt=s(a3e);pAr=r(iEt,"model_type"),iEt.forEach(t),uAr=r(S0,` property of the config object (either
passed as an argument or loaded from `),n3e=n(S0,"CODE",{});var dEt=s(n3e);_Ar=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),bAr=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(S0,"CODE",{});var cEt=s(s3e);vAr=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),FAr=r(S0,":"),S0.forEach(t),TAr=i(ql),l3e=n(ql,"UL",{});var fEt=s(l3e);tE=n(fEt,"LI",{});var PPe=s(tE);i3e=n(PPe,"STRONG",{});var mEt=s(i3e);MAr=r(mEt,"vision-encoder-decoder"),mEt.forEach(t),EAr=r(PPe," \u2014 "),WU=n(PPe,"A",{href:!0});var gEt=s(WU);CAr=r(gEt,"TFVisionEncoderDecoderModel"),gEt.forEach(t),wAr=r(PPe," (Vision Encoder decoder model)"),PPe.forEach(t),fEt.forEach(t),AAr=i(ql),T(aE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),cNe=i(f),wc=n(f,"H2",{class:!0});var _De=s(wc);nE=n(_De,"A",{id:!0,class:!0,href:!0});var hEt=s(nE);d3e=n(hEt,"SPAN",{});var pEt=s(d3e);T(r7.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),yAr=i(_De),c3e=n(_De,"SPAN",{});var uEt=s(c3e);LAr=r(uEt,"TFAutoModelForSpeechSeq2Seq"),uEt.forEach(t),_De.forEach(t),fNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(t7.$$.fragment,Nl),xAr=i(Nl),Ac=n(Nl,"P",{});var JZ=s(Ac);$Ar=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QU=n(JZ,"A",{href:!0});var _Et=s(QU);kAr=r(_Et,"from_pretrained()"),_Et.forEach(t),SAr=r(JZ," class method or the "),HU=n(JZ,"A",{href:!0});var bEt=s(HU);RAr=r(bEt,"from_config()"),bEt.forEach(t),PAr=r(JZ,` class
method.`),JZ.forEach(t),BAr=i(Nl),a7=n(Nl,"P",{});var bDe=s(a7);IAr=r(bDe,"This class cannot be instantiated directly using "),f3e=n(bDe,"CODE",{});var vEt=s(f3e);qAr=r(vEt,"__init__()"),vEt.forEach(t),NAr=r(bDe," (throws an error)."),bDe.forEach(t),jAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var R0=s(Dt);T(n7.$$.fragment,R0),DAr=i(R0),m3e=n(R0,"P",{});var FEt=s(m3e);GAr=r(FEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FEt.forEach(t),OAr=i(R0),yc=n(R0,"P",{});var YZ=s(yc);VAr=r(YZ,`Note:
Loading a model from its configuration file does `),g3e=n(YZ,"STRONG",{});var TEt=s(g3e);XAr=r(TEt,"not"),TEt.forEach(t),zAr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(YZ,"A",{href:!0});var MEt=s(UU);WAr=r(MEt,"from_pretrained()"),MEt.forEach(t),QAr=r(YZ," to load the model weights."),YZ.forEach(t),HAr=i(R0),T(sE.$$.fragment,R0),R0.forEach(t),UAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(s7.$$.fragment,jl),JAr=i(jl),h3e=n(jl,"P",{});var EEt=s(h3e);YAr=r(EEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),EEt.forEach(t),KAr=i(jl),gn=n(jl,"P",{});var P0=s(gn);ZAr=r(P0,"The model class to instantiate is selected based on the "),p3e=n(P0,"CODE",{});var CEt=s(p3e);e0r=r(CEt,"model_type"),CEt.forEach(t),o0r=r(P0,` property of the config object (either
passed as an argument or loaded from `),u3e=n(P0,"CODE",{});var wEt=s(u3e);r0r=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),t0r=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n(P0,"CODE",{});var AEt=s(_3e);a0r=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),n0r=r(P0,":"),P0.forEach(t),s0r=i(jl),b3e=n(jl,"UL",{});var yEt=s(b3e);lE=n(yEt,"LI",{});var BPe=s(lE);v3e=n(BPe,"STRONG",{});var LEt=s(v3e);l0r=r(LEt,"speech_to_text"),LEt.forEach(t),i0r=r(BPe," \u2014 "),JU=n(BPe,"A",{href:!0});var xEt=s(JU);d0r=r(xEt,"TFSpeech2TextForConditionalGeneration"),xEt.forEach(t),c0r=r(BPe," (Speech2Text model)"),BPe.forEach(t),yEt.forEach(t),f0r=i(jl),T(iE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),mNe=i(f),Lc=n(f,"H2",{class:!0});var vDe=s(Lc);dE=n(vDe,"A",{id:!0,class:!0,href:!0});var $Et=s(dE);F3e=n($Et,"SPAN",{});var kEt=s(F3e);T(l7.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),m0r=i(vDe),T3e=n(vDe,"SPAN",{});var SEt=s(T3e);g0r=r(SEt,"FlaxAutoModel"),SEt.forEach(t),vDe.forEach(t),gNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(i7.$$.fragment,Dl),h0r=i(Dl),xc=n(Dl,"P",{});var KZ=s(xc);p0r=r(KZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YU=n(KZ,"A",{href:!0});var REt=s(YU);u0r=r(REt,"from_pretrained()"),REt.forEach(t),_0r=r(KZ," class method or the "),KU=n(KZ,"A",{href:!0});var PEt=s(KU);b0r=r(PEt,"from_config()"),PEt.forEach(t),v0r=r(KZ,` class
method.`),KZ.forEach(t),F0r=i(Dl),d7=n(Dl,"P",{});var FDe=s(d7);T0r=r(FDe,"This class cannot be instantiated directly using "),M3e=n(FDe,"CODE",{});var BEt=s(M3e);M0r=r(BEt,"__init__()"),BEt.forEach(t),E0r=r(FDe," (throws an error)."),FDe.forEach(t),C0r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var B0=s(Gt);T(c7.$$.fragment,B0),w0r=i(B0),E3e=n(B0,"P",{});var IEt=s(E3e);A0r=r(IEt,"Instantiates one of the base model classes of the library from a configuration."),IEt.forEach(t),y0r=i(B0),$c=n(B0,"P",{});var ZZ=s($c);L0r=r(ZZ,`Note:
Loading a model from its configuration file does `),C3e=n(ZZ,"STRONG",{});var qEt=s(C3e);x0r=r(qEt,"not"),qEt.forEach(t),$0r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(ZZ,"A",{href:!0});var NEt=s(ZU);k0r=r(NEt,"from_pretrained()"),NEt.forEach(t),S0r=r(ZZ," to load the model weights."),ZZ.forEach(t),R0r=i(B0),T(cE.$$.fragment,B0),B0.forEach(t),P0r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(f7.$$.fragment,Gl),B0r=i(Gl),w3e=n(Gl,"P",{});var jEt=s(w3e);I0r=r(jEt,"Instantiate one of the base model classes of the library from a pretrained model."),jEt.forEach(t),q0r=i(Gl),hn=n(Gl,"P",{});var I0=s(hn);N0r=r(I0,"The model class to instantiate is selected based on the "),A3e=n(I0,"CODE",{});var DEt=s(A3e);j0r=r(DEt,"model_type"),DEt.forEach(t),D0r=r(I0,` property of the config object (either
passed as an argument or loaded from `),y3e=n(I0,"CODE",{});var GEt=s(y3e);G0r=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),O0r=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(I0,"CODE",{});var OEt=s(L3e);V0r=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),X0r=r(I0,":"),I0.forEach(t),z0r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);fE=n(ne,"LI",{});var IPe=s(fE);x3e=n(IPe,"STRONG",{});var VEt=s(x3e);W0r=r(VEt,"albert"),VEt.forEach(t),Q0r=r(IPe," \u2014 "),eJ=n(IPe,"A",{href:!0});var XEt=s(eJ);H0r=r(XEt,"FlaxAlbertModel"),XEt.forEach(t),U0r=r(IPe," (ALBERT model)"),IPe.forEach(t),J0r=i(ne),mE=n(ne,"LI",{});var qPe=s(mE);$3e=n(qPe,"STRONG",{});var zEt=s($3e);Y0r=r(zEt,"bart"),zEt.forEach(t),K0r=r(qPe," \u2014 "),oJ=n(qPe,"A",{href:!0});var WEt=s(oJ);Z0r=r(WEt,"FlaxBartModel"),WEt.forEach(t),eyr=r(qPe," (BART model)"),qPe.forEach(t),oyr=i(ne),gE=n(ne,"LI",{});var NPe=s(gE);k3e=n(NPe,"STRONG",{});var QEt=s(k3e);ryr=r(QEt,"beit"),QEt.forEach(t),tyr=r(NPe," \u2014 "),rJ=n(NPe,"A",{href:!0});var HEt=s(rJ);ayr=r(HEt,"FlaxBeitModel"),HEt.forEach(t),nyr=r(NPe," (BEiT model)"),NPe.forEach(t),syr=i(ne),hE=n(ne,"LI",{});var jPe=s(hE);S3e=n(jPe,"STRONG",{});var UEt=s(S3e);lyr=r(UEt,"bert"),UEt.forEach(t),iyr=r(jPe," \u2014 "),tJ=n(jPe,"A",{href:!0});var JEt=s(tJ);dyr=r(JEt,"FlaxBertModel"),JEt.forEach(t),cyr=r(jPe," (BERT model)"),jPe.forEach(t),fyr=i(ne),pE=n(ne,"LI",{});var DPe=s(pE);R3e=n(DPe,"STRONG",{});var YEt=s(R3e);myr=r(YEt,"big_bird"),YEt.forEach(t),gyr=r(DPe," \u2014 "),aJ=n(DPe,"A",{href:!0});var KEt=s(aJ);hyr=r(KEt,"FlaxBigBirdModel"),KEt.forEach(t),pyr=r(DPe," (BigBird model)"),DPe.forEach(t),uyr=i(ne),uE=n(ne,"LI",{});var GPe=s(uE);P3e=n(GPe,"STRONG",{});var ZEt=s(P3e);_yr=r(ZEt,"blenderbot"),ZEt.forEach(t),byr=r(GPe," \u2014 "),nJ=n(GPe,"A",{href:!0});var eCt=s(nJ);vyr=r(eCt,"FlaxBlenderbotModel"),eCt.forEach(t),Fyr=r(GPe," (Blenderbot model)"),GPe.forEach(t),Tyr=i(ne),_E=n(ne,"LI",{});var OPe=s(_E);B3e=n(OPe,"STRONG",{});var oCt=s(B3e);Myr=r(oCt,"blenderbot-small"),oCt.forEach(t),Eyr=r(OPe," \u2014 "),sJ=n(OPe,"A",{href:!0});var rCt=s(sJ);Cyr=r(rCt,"FlaxBlenderbotSmallModel"),rCt.forEach(t),wyr=r(OPe," (BlenderbotSmall model)"),OPe.forEach(t),Ayr=i(ne),bE=n(ne,"LI",{});var VPe=s(bE);I3e=n(VPe,"STRONG",{});var tCt=s(I3e);yyr=r(tCt,"clip"),tCt.forEach(t),Lyr=r(VPe," \u2014 "),lJ=n(VPe,"A",{href:!0});var aCt=s(lJ);xyr=r(aCt,"FlaxCLIPModel"),aCt.forEach(t),$yr=r(VPe," (CLIP model)"),VPe.forEach(t),kyr=i(ne),vE=n(ne,"LI",{});var XPe=s(vE);q3e=n(XPe,"STRONG",{});var nCt=s(q3e);Syr=r(nCt,"distilbert"),nCt.forEach(t),Ryr=r(XPe," \u2014 "),iJ=n(XPe,"A",{href:!0});var sCt=s(iJ);Pyr=r(sCt,"FlaxDistilBertModel"),sCt.forEach(t),Byr=r(XPe," (DistilBERT model)"),XPe.forEach(t),Iyr=i(ne),FE=n(ne,"LI",{});var zPe=s(FE);N3e=n(zPe,"STRONG",{});var lCt=s(N3e);qyr=r(lCt,"electra"),lCt.forEach(t),Nyr=r(zPe," \u2014 "),dJ=n(zPe,"A",{href:!0});var iCt=s(dJ);jyr=r(iCt,"FlaxElectraModel"),iCt.forEach(t),Dyr=r(zPe," (ELECTRA model)"),zPe.forEach(t),Gyr=i(ne),TE=n(ne,"LI",{});var WPe=s(TE);j3e=n(WPe,"STRONG",{});var dCt=s(j3e);Oyr=r(dCt,"gpt2"),dCt.forEach(t),Vyr=r(WPe," \u2014 "),cJ=n(WPe,"A",{href:!0});var cCt=s(cJ);Xyr=r(cCt,"FlaxGPT2Model"),cCt.forEach(t),zyr=r(WPe," (OpenAI GPT-2 model)"),WPe.forEach(t),Wyr=i(ne),ME=n(ne,"LI",{});var QPe=s(ME);D3e=n(QPe,"STRONG",{});var fCt=s(D3e);Qyr=r(fCt,"gpt_neo"),fCt.forEach(t),Hyr=r(QPe," \u2014 "),fJ=n(QPe,"A",{href:!0});var mCt=s(fJ);Uyr=r(mCt,"FlaxGPTNeoModel"),mCt.forEach(t),Jyr=r(QPe," (GPT Neo model)"),QPe.forEach(t),Yyr=i(ne),EE=n(ne,"LI",{});var HPe=s(EE);G3e=n(HPe,"STRONG",{});var gCt=s(G3e);Kyr=r(gCt,"gptj"),gCt.forEach(t),Zyr=r(HPe," \u2014 "),mJ=n(HPe,"A",{href:!0});var hCt=s(mJ);eLr=r(hCt,"FlaxGPTJModel"),hCt.forEach(t),oLr=r(HPe," (GPT-J model)"),HPe.forEach(t),rLr=i(ne),CE=n(ne,"LI",{});var UPe=s(CE);O3e=n(UPe,"STRONG",{});var pCt=s(O3e);tLr=r(pCt,"marian"),pCt.forEach(t),aLr=r(UPe," \u2014 "),gJ=n(UPe,"A",{href:!0});var uCt=s(gJ);nLr=r(uCt,"FlaxMarianModel"),uCt.forEach(t),sLr=r(UPe," (Marian model)"),UPe.forEach(t),lLr=i(ne),wE=n(ne,"LI",{});var JPe=s(wE);V3e=n(JPe,"STRONG",{});var _Ct=s(V3e);iLr=r(_Ct,"mbart"),_Ct.forEach(t),dLr=r(JPe," \u2014 "),hJ=n(JPe,"A",{href:!0});var bCt=s(hJ);cLr=r(bCt,"FlaxMBartModel"),bCt.forEach(t),fLr=r(JPe," (mBART model)"),JPe.forEach(t),mLr=i(ne),AE=n(ne,"LI",{});var YPe=s(AE);X3e=n(YPe,"STRONG",{});var vCt=s(X3e);gLr=r(vCt,"mt5"),vCt.forEach(t),hLr=r(YPe," \u2014 "),pJ=n(YPe,"A",{href:!0});var FCt=s(pJ);pLr=r(FCt,"FlaxMT5Model"),FCt.forEach(t),uLr=r(YPe," (mT5 model)"),YPe.forEach(t),_Lr=i(ne),yE=n(ne,"LI",{});var KPe=s(yE);z3e=n(KPe,"STRONG",{});var TCt=s(z3e);bLr=r(TCt,"pegasus"),TCt.forEach(t),vLr=r(KPe," \u2014 "),uJ=n(KPe,"A",{href:!0});var MCt=s(uJ);FLr=r(MCt,"FlaxPegasusModel"),MCt.forEach(t),TLr=r(KPe," (Pegasus model)"),KPe.forEach(t),MLr=i(ne),LE=n(ne,"LI",{});var ZPe=s(LE);W3e=n(ZPe,"STRONG",{});var ECt=s(W3e);ELr=r(ECt,"roberta"),ECt.forEach(t),CLr=r(ZPe," \u2014 "),_J=n(ZPe,"A",{href:!0});var CCt=s(_J);wLr=r(CCt,"FlaxRobertaModel"),CCt.forEach(t),ALr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),yLr=i(ne),xE=n(ne,"LI",{});var eBe=s(xE);Q3e=n(eBe,"STRONG",{});var wCt=s(Q3e);LLr=r(wCt,"roformer"),wCt.forEach(t),xLr=r(eBe," \u2014 "),bJ=n(eBe,"A",{href:!0});var ACt=s(bJ);$Lr=r(ACt,"FlaxRoFormerModel"),ACt.forEach(t),kLr=r(eBe," (RoFormer model)"),eBe.forEach(t),SLr=i(ne),$E=n(ne,"LI",{});var oBe=s($E);H3e=n(oBe,"STRONG",{});var yCt=s(H3e);RLr=r(yCt,"t5"),yCt.forEach(t),PLr=r(oBe," \u2014 "),vJ=n(oBe,"A",{href:!0});var LCt=s(vJ);BLr=r(LCt,"FlaxT5Model"),LCt.forEach(t),ILr=r(oBe," (T5 model)"),oBe.forEach(t),qLr=i(ne),kE=n(ne,"LI",{});var rBe=s(kE);U3e=n(rBe,"STRONG",{});var xCt=s(U3e);NLr=r(xCt,"vision-text-dual-encoder"),xCt.forEach(t),jLr=r(rBe," \u2014 "),FJ=n(rBe,"A",{href:!0});var $Ct=s(FJ);DLr=r($Ct,"FlaxVisionTextDualEncoderModel"),$Ct.forEach(t),GLr=r(rBe," (VisionTextDualEncoder model)"),rBe.forEach(t),OLr=i(ne),SE=n(ne,"LI",{});var tBe=s(SE);J3e=n(tBe,"STRONG",{});var kCt=s(J3e);VLr=r(kCt,"vit"),kCt.forEach(t),XLr=r(tBe," \u2014 "),TJ=n(tBe,"A",{href:!0});var SCt=s(TJ);zLr=r(SCt,"FlaxViTModel"),SCt.forEach(t),WLr=r(tBe," (ViT model)"),tBe.forEach(t),QLr=i(ne),RE=n(ne,"LI",{});var aBe=s(RE);Y3e=n(aBe,"STRONG",{});var RCt=s(Y3e);HLr=r(RCt,"wav2vec2"),RCt.forEach(t),ULr=r(aBe," \u2014 "),MJ=n(aBe,"A",{href:!0});var PCt=s(MJ);JLr=r(PCt,"FlaxWav2Vec2Model"),PCt.forEach(t),YLr=r(aBe," (Wav2Vec2 model)"),aBe.forEach(t),KLr=i(ne),PE=n(ne,"LI",{});var nBe=s(PE);K3e=n(nBe,"STRONG",{});var BCt=s(K3e);ZLr=r(BCt,"xglm"),BCt.forEach(t),e8r=r(nBe," \u2014 "),EJ=n(nBe,"A",{href:!0});var ICt=s(EJ);o8r=r(ICt,"FlaxXGLMModel"),ICt.forEach(t),r8r=r(nBe," (XGLM model)"),nBe.forEach(t),t8r=i(ne),BE=n(ne,"LI",{});var sBe=s(BE);Z3e=n(sBe,"STRONG",{});var qCt=s(Z3e);a8r=r(qCt,"xlm-roberta"),qCt.forEach(t),n8r=r(sBe," \u2014 "),CJ=n(sBe,"A",{href:!0});var NCt=s(CJ);s8r=r(NCt,"FlaxXLMRobertaModel"),NCt.forEach(t),l8r=r(sBe," (XLM-RoBERTa model)"),sBe.forEach(t),ne.forEach(t),i8r=i(Gl),T(IE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),hNe=i(f),kc=n(f,"H2",{class:!0});var TDe=s(kc);qE=n(TDe,"A",{id:!0,class:!0,href:!0});var jCt=s(qE);eFe=n(jCt,"SPAN",{});var DCt=s(eFe);T(m7.$$.fragment,DCt),DCt.forEach(t),jCt.forEach(t),d8r=i(TDe),oFe=n(TDe,"SPAN",{});var GCt=s(oFe);c8r=r(GCt,"FlaxAutoModelForCausalLM"),GCt.forEach(t),TDe.forEach(t),pNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(g7.$$.fragment,Ol),f8r=i(Ol),Sc=n(Ol,"P",{});var eee=s(Sc);m8r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wJ=n(eee,"A",{href:!0});var OCt=s(wJ);g8r=r(OCt,"from_pretrained()"),OCt.forEach(t),h8r=r(eee," class method or the "),AJ=n(eee,"A",{href:!0});var VCt=s(AJ);p8r=r(VCt,"from_config()"),VCt.forEach(t),u8r=r(eee,` class
method.`),eee.forEach(t),_8r=i(Ol),h7=n(Ol,"P",{});var MDe=s(h7);b8r=r(MDe,"This class cannot be instantiated directly using "),rFe=n(MDe,"CODE",{});var XCt=s(rFe);v8r=r(XCt,"__init__()"),XCt.forEach(t),F8r=r(MDe," (throws an error)."),MDe.forEach(t),T8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var q0=s(Ot);T(p7.$$.fragment,q0),M8r=i(q0),tFe=n(q0,"P",{});var zCt=s(tFe);E8r=r(zCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zCt.forEach(t),C8r=i(q0),Rc=n(q0,"P",{});var oee=s(Rc);w8r=r(oee,`Note:
Loading a model from its configuration file does `),aFe=n(oee,"STRONG",{});var WCt=s(aFe);A8r=r(WCt,"not"),WCt.forEach(t),y8r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(oee,"A",{href:!0});var QCt=s(yJ);L8r=r(QCt,"from_pretrained()"),QCt.forEach(t),x8r=r(oee," to load the model weights."),oee.forEach(t),$8r=i(q0),T(NE.$$.fragment,q0),q0.forEach(t),k8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(u7.$$.fragment,Vl),S8r=i(Vl),nFe=n(Vl,"P",{});var HCt=s(nFe);R8r=r(HCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HCt.forEach(t),P8r=i(Vl),pn=n(Vl,"P",{});var N0=s(pn);B8r=r(N0,"The model class to instantiate is selected based on the "),sFe=n(N0,"CODE",{});var UCt=s(sFe);I8r=r(UCt,"model_type"),UCt.forEach(t),q8r=r(N0,` property of the config object (either
passed as an argument or loaded from `),lFe=n(N0,"CODE",{});var JCt=s(lFe);N8r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),j8r=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(N0,"CODE",{});var YCt=s(iFe);D8r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),G8r=r(N0,":"),N0.forEach(t),O8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);jE=n(Xe,"LI",{});var lBe=s(jE);dFe=n(lBe,"STRONG",{});var KCt=s(dFe);V8r=r(KCt,"bart"),KCt.forEach(t),X8r=r(lBe," \u2014 "),LJ=n(lBe,"A",{href:!0});var ZCt=s(LJ);z8r=r(ZCt,"FlaxBartForCausalLM"),ZCt.forEach(t),W8r=r(lBe," (BART model)"),lBe.forEach(t),Q8r=i(Xe),DE=n(Xe,"LI",{});var iBe=s(DE);cFe=n(iBe,"STRONG",{});var ewt=s(cFe);H8r=r(ewt,"bert"),ewt.forEach(t),U8r=r(iBe," \u2014 "),xJ=n(iBe,"A",{href:!0});var owt=s(xJ);J8r=r(owt,"FlaxBertForCausalLM"),owt.forEach(t),Y8r=r(iBe," (BERT model)"),iBe.forEach(t),K8r=i(Xe),GE=n(Xe,"LI",{});var dBe=s(GE);fFe=n(dBe,"STRONG",{});var rwt=s(fFe);Z8r=r(rwt,"big_bird"),rwt.forEach(t),exr=r(dBe," \u2014 "),$J=n(dBe,"A",{href:!0});var twt=s($J);oxr=r(twt,"FlaxBigBirdForCausalLM"),twt.forEach(t),rxr=r(dBe," (BigBird model)"),dBe.forEach(t),txr=i(Xe),OE=n(Xe,"LI",{});var cBe=s(OE);mFe=n(cBe,"STRONG",{});var awt=s(mFe);axr=r(awt,"electra"),awt.forEach(t),nxr=r(cBe," \u2014 "),kJ=n(cBe,"A",{href:!0});var nwt=s(kJ);sxr=r(nwt,"FlaxElectraForCausalLM"),nwt.forEach(t),lxr=r(cBe," (ELECTRA model)"),cBe.forEach(t),ixr=i(Xe),VE=n(Xe,"LI",{});var fBe=s(VE);gFe=n(fBe,"STRONG",{});var swt=s(gFe);dxr=r(swt,"gpt2"),swt.forEach(t),cxr=r(fBe," \u2014 "),SJ=n(fBe,"A",{href:!0});var lwt=s(SJ);fxr=r(lwt,"FlaxGPT2LMHeadModel"),lwt.forEach(t),mxr=r(fBe," (OpenAI GPT-2 model)"),fBe.forEach(t),gxr=i(Xe),XE=n(Xe,"LI",{});var mBe=s(XE);hFe=n(mBe,"STRONG",{});var iwt=s(hFe);hxr=r(iwt,"gpt_neo"),iwt.forEach(t),pxr=r(mBe," \u2014 "),RJ=n(mBe,"A",{href:!0});var dwt=s(RJ);uxr=r(dwt,"FlaxGPTNeoForCausalLM"),dwt.forEach(t),_xr=r(mBe," (GPT Neo model)"),mBe.forEach(t),bxr=i(Xe),zE=n(Xe,"LI",{});var gBe=s(zE);pFe=n(gBe,"STRONG",{});var cwt=s(pFe);vxr=r(cwt,"gptj"),cwt.forEach(t),Fxr=r(gBe," \u2014 "),PJ=n(gBe,"A",{href:!0});var fwt=s(PJ);Txr=r(fwt,"FlaxGPTJForCausalLM"),fwt.forEach(t),Mxr=r(gBe," (GPT-J model)"),gBe.forEach(t),Exr=i(Xe),WE=n(Xe,"LI",{});var hBe=s(WE);uFe=n(hBe,"STRONG",{});var mwt=s(uFe);Cxr=r(mwt,"roberta"),mwt.forEach(t),wxr=r(hBe," \u2014 "),BJ=n(hBe,"A",{href:!0});var gwt=s(BJ);Axr=r(gwt,"FlaxRobertaForCausalLM"),gwt.forEach(t),yxr=r(hBe," (RoBERTa model)"),hBe.forEach(t),Lxr=i(Xe),QE=n(Xe,"LI",{});var pBe=s(QE);_Fe=n(pBe,"STRONG",{});var hwt=s(_Fe);xxr=r(hwt,"xglm"),hwt.forEach(t),$xr=r(pBe," \u2014 "),IJ=n(pBe,"A",{href:!0});var pwt=s(IJ);kxr=r(pwt,"FlaxXGLMForCausalLM"),pwt.forEach(t),Sxr=r(pBe," (XGLM model)"),pBe.forEach(t),Xe.forEach(t),Rxr=i(Vl),T(HE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),uNe=i(f),Pc=n(f,"H2",{class:!0});var EDe=s(Pc);UE=n(EDe,"A",{id:!0,class:!0,href:!0});var uwt=s(UE);bFe=n(uwt,"SPAN",{});var _wt=s(bFe);T(_7.$$.fragment,_wt),_wt.forEach(t),uwt.forEach(t),Pxr=i(EDe),vFe=n(EDe,"SPAN",{});var bwt=s(vFe);Bxr=r(bwt,"FlaxAutoModelForPreTraining"),bwt.forEach(t),EDe.forEach(t),_Ne=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(b7.$$.fragment,Xl),Ixr=i(Xl),Bc=n(Xl,"P",{});var ree=s(Bc);qxr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qJ=n(ree,"A",{href:!0});var vwt=s(qJ);Nxr=r(vwt,"from_pretrained()"),vwt.forEach(t),jxr=r(ree," class method or the "),NJ=n(ree,"A",{href:!0});var Fwt=s(NJ);Dxr=r(Fwt,"from_config()"),Fwt.forEach(t),Gxr=r(ree,` class
method.`),ree.forEach(t),Oxr=i(Xl),v7=n(Xl,"P",{});var CDe=s(v7);Vxr=r(CDe,"This class cannot be instantiated directly using "),FFe=n(CDe,"CODE",{});var Twt=s(FFe);Xxr=r(Twt,"__init__()"),Twt.forEach(t),zxr=r(CDe," (throws an error)."),CDe.forEach(t),Wxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var j0=s(Vt);T(F7.$$.fragment,j0),Qxr=i(j0),TFe=n(j0,"P",{});var Mwt=s(TFe);Hxr=r(Mwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mwt.forEach(t),Uxr=i(j0),Ic=n(j0,"P",{});var tee=s(Ic);Jxr=r(tee,`Note:
Loading a model from its configuration file does `),MFe=n(tee,"STRONG",{});var Ewt=s(MFe);Yxr=r(Ewt,"not"),Ewt.forEach(t),Kxr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(tee,"A",{href:!0});var Cwt=s(jJ);Zxr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),e7r=r(tee," to load the model weights."),tee.forEach(t),o7r=i(j0),T(JE.$$.fragment,j0),j0.forEach(t),r7r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(T7.$$.fragment,zl),t7r=i(zl),EFe=n(zl,"P",{});var wwt=s(EFe);a7r=r(wwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wwt.forEach(t),n7r=i(zl),un=n(zl,"P",{});var D0=s(un);s7r=r(D0,"The model class to instantiate is selected based on the "),CFe=n(D0,"CODE",{});var Awt=s(CFe);l7r=r(Awt,"model_type"),Awt.forEach(t),i7r=r(D0,` property of the config object (either
passed as an argument or loaded from `),wFe=n(D0,"CODE",{});var ywt=s(wFe);d7r=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),c7r=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(D0,"CODE",{});var Lwt=s(AFe);f7r=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),m7r=r(D0,":"),D0.forEach(t),g7r=i(zl),Me=n(zl,"UL",{});var we=s(Me);YE=n(we,"LI",{});var uBe=s(YE);yFe=n(uBe,"STRONG",{});var xwt=s(yFe);h7r=r(xwt,"albert"),xwt.forEach(t),p7r=r(uBe," \u2014 "),DJ=n(uBe,"A",{href:!0});var $wt=s(DJ);u7r=r($wt,"FlaxAlbertForPreTraining"),$wt.forEach(t),_7r=r(uBe," (ALBERT model)"),uBe.forEach(t),b7r=i(we),KE=n(we,"LI",{});var _Be=s(KE);LFe=n(_Be,"STRONG",{});var kwt=s(LFe);v7r=r(kwt,"bart"),kwt.forEach(t),F7r=r(_Be," \u2014 "),GJ=n(_Be,"A",{href:!0});var Swt=s(GJ);T7r=r(Swt,"FlaxBartForConditionalGeneration"),Swt.forEach(t),M7r=r(_Be," (BART model)"),_Be.forEach(t),E7r=i(we),ZE=n(we,"LI",{});var bBe=s(ZE);xFe=n(bBe,"STRONG",{});var Rwt=s(xFe);C7r=r(Rwt,"bert"),Rwt.forEach(t),w7r=r(bBe," \u2014 "),OJ=n(bBe,"A",{href:!0});var Pwt=s(OJ);A7r=r(Pwt,"FlaxBertForPreTraining"),Pwt.forEach(t),y7r=r(bBe," (BERT model)"),bBe.forEach(t),L7r=i(we),eC=n(we,"LI",{});var vBe=s(eC);$Fe=n(vBe,"STRONG",{});var Bwt=s($Fe);x7r=r(Bwt,"big_bird"),Bwt.forEach(t),$7r=r(vBe," \u2014 "),VJ=n(vBe,"A",{href:!0});var Iwt=s(VJ);k7r=r(Iwt,"FlaxBigBirdForPreTraining"),Iwt.forEach(t),S7r=r(vBe," (BigBird model)"),vBe.forEach(t),R7r=i(we),oC=n(we,"LI",{});var FBe=s(oC);kFe=n(FBe,"STRONG",{});var qwt=s(kFe);P7r=r(qwt,"electra"),qwt.forEach(t),B7r=r(FBe," \u2014 "),XJ=n(FBe,"A",{href:!0});var Nwt=s(XJ);I7r=r(Nwt,"FlaxElectraForPreTraining"),Nwt.forEach(t),q7r=r(FBe," (ELECTRA model)"),FBe.forEach(t),N7r=i(we),rC=n(we,"LI",{});var TBe=s(rC);SFe=n(TBe,"STRONG",{});var jwt=s(SFe);j7r=r(jwt,"mbart"),jwt.forEach(t),D7r=r(TBe," \u2014 "),zJ=n(TBe,"A",{href:!0});var Dwt=s(zJ);G7r=r(Dwt,"FlaxMBartForConditionalGeneration"),Dwt.forEach(t),O7r=r(TBe," (mBART model)"),TBe.forEach(t),V7r=i(we),tC=n(we,"LI",{});var MBe=s(tC);RFe=n(MBe,"STRONG",{});var Gwt=s(RFe);X7r=r(Gwt,"mt5"),Gwt.forEach(t),z7r=r(MBe," \u2014 "),WJ=n(MBe,"A",{href:!0});var Owt=s(WJ);W7r=r(Owt,"FlaxMT5ForConditionalGeneration"),Owt.forEach(t),Q7r=r(MBe," (mT5 model)"),MBe.forEach(t),H7r=i(we),aC=n(we,"LI",{});var EBe=s(aC);PFe=n(EBe,"STRONG",{});var Vwt=s(PFe);U7r=r(Vwt,"roberta"),Vwt.forEach(t),J7r=r(EBe," \u2014 "),QJ=n(EBe,"A",{href:!0});var Xwt=s(QJ);Y7r=r(Xwt,"FlaxRobertaForMaskedLM"),Xwt.forEach(t),K7r=r(EBe," (RoBERTa model)"),EBe.forEach(t),Z7r=i(we),nC=n(we,"LI",{});var CBe=s(nC);BFe=n(CBe,"STRONG",{});var zwt=s(BFe);e9r=r(zwt,"roformer"),zwt.forEach(t),o9r=r(CBe," \u2014 "),HJ=n(CBe,"A",{href:!0});var Wwt=s(HJ);r9r=r(Wwt,"FlaxRoFormerForMaskedLM"),Wwt.forEach(t),t9r=r(CBe," (RoFormer model)"),CBe.forEach(t),a9r=i(we),sC=n(we,"LI",{});var wBe=s(sC);IFe=n(wBe,"STRONG",{});var Qwt=s(IFe);n9r=r(Qwt,"t5"),Qwt.forEach(t),s9r=r(wBe," \u2014 "),UJ=n(wBe,"A",{href:!0});var Hwt=s(UJ);l9r=r(Hwt,"FlaxT5ForConditionalGeneration"),Hwt.forEach(t),i9r=r(wBe," (T5 model)"),wBe.forEach(t),d9r=i(we),lC=n(we,"LI",{});var ABe=s(lC);qFe=n(ABe,"STRONG",{});var Uwt=s(qFe);c9r=r(Uwt,"wav2vec2"),Uwt.forEach(t),f9r=r(ABe," \u2014 "),JJ=n(ABe,"A",{href:!0});var Jwt=s(JJ);m9r=r(Jwt,"FlaxWav2Vec2ForPreTraining"),Jwt.forEach(t),g9r=r(ABe," (Wav2Vec2 model)"),ABe.forEach(t),h9r=i(we),iC=n(we,"LI",{});var yBe=s(iC);NFe=n(yBe,"STRONG",{});var Ywt=s(NFe);p9r=r(Ywt,"xlm-roberta"),Ywt.forEach(t),u9r=r(yBe," \u2014 "),YJ=n(yBe,"A",{href:!0});var Kwt=s(YJ);_9r=r(Kwt,"FlaxXLMRobertaForMaskedLM"),Kwt.forEach(t),b9r=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),we.forEach(t),v9r=i(zl),T(dC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),bNe=i(f),qc=n(f,"H2",{class:!0});var wDe=s(qc);cC=n(wDe,"A",{id:!0,class:!0,href:!0});var Zwt=s(cC);jFe=n(Zwt,"SPAN",{});var eAt=s(jFe);T(M7.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),F9r=i(wDe),DFe=n(wDe,"SPAN",{});var oAt=s(DFe);T9r=r(oAt,"FlaxAutoModelForMaskedLM"),oAt.forEach(t),wDe.forEach(t),vNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(E7.$$.fragment,Wl),M9r=i(Wl),Nc=n(Wl,"P",{});var aee=s(Nc);E9r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KJ=n(aee,"A",{href:!0});var rAt=s(KJ);C9r=r(rAt,"from_pretrained()"),rAt.forEach(t),w9r=r(aee," class method or the "),ZJ=n(aee,"A",{href:!0});var tAt=s(ZJ);A9r=r(tAt,"from_config()"),tAt.forEach(t),y9r=r(aee,` class
method.`),aee.forEach(t),L9r=i(Wl),C7=n(Wl,"P",{});var ADe=s(C7);x9r=r(ADe,"This class cannot be instantiated directly using "),GFe=n(ADe,"CODE",{});var aAt=s(GFe);$9r=r(aAt,"__init__()"),aAt.forEach(t),k9r=r(ADe," (throws an error)."),ADe.forEach(t),S9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var G0=s(Xt);T(w7.$$.fragment,G0),R9r=i(G0),OFe=n(G0,"P",{});var nAt=s(OFe);P9r=r(nAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nAt.forEach(t),B9r=i(G0),jc=n(G0,"P",{});var nee=s(jc);I9r=r(nee,`Note:
Loading a model from its configuration file does `),VFe=n(nee,"STRONG",{});var sAt=s(VFe);q9r=r(sAt,"not"),sAt.forEach(t),N9r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(nee,"A",{href:!0});var lAt=s(eY);j9r=r(lAt,"from_pretrained()"),lAt.forEach(t),D9r=r(nee," to load the model weights."),nee.forEach(t),G9r=i(G0),T(fC.$$.fragment,G0),G0.forEach(t),O9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(A7.$$.fragment,Ql),V9r=i(Ql),XFe=n(Ql,"P",{});var iAt=s(XFe);X9r=r(iAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iAt.forEach(t),z9r=i(Ql),_n=n(Ql,"P",{});var O0=s(_n);W9r=r(O0,"The model class to instantiate is selected based on the "),zFe=n(O0,"CODE",{});var dAt=s(zFe);Q9r=r(dAt,"model_type"),dAt.forEach(t),H9r=r(O0,` property of the config object (either
passed as an argument or loaded from `),WFe=n(O0,"CODE",{});var cAt=s(WFe);U9r=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),J9r=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(O0,"CODE",{});var fAt=s(QFe);Y9r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),K9r=r(O0,":"),O0.forEach(t),Z9r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);mC=n(Ie,"LI",{});var LBe=s(mC);HFe=n(LBe,"STRONG",{});var mAt=s(HFe);e$r=r(mAt,"albert"),mAt.forEach(t),o$r=r(LBe," \u2014 "),oY=n(LBe,"A",{href:!0});var gAt=s(oY);r$r=r(gAt,"FlaxAlbertForMaskedLM"),gAt.forEach(t),t$r=r(LBe," (ALBERT model)"),LBe.forEach(t),a$r=i(Ie),gC=n(Ie,"LI",{});var xBe=s(gC);UFe=n(xBe,"STRONG",{});var hAt=s(UFe);n$r=r(hAt,"bart"),hAt.forEach(t),s$r=r(xBe," \u2014 "),rY=n(xBe,"A",{href:!0});var pAt=s(rY);l$r=r(pAt,"FlaxBartForConditionalGeneration"),pAt.forEach(t),i$r=r(xBe," (BART model)"),xBe.forEach(t),d$r=i(Ie),hC=n(Ie,"LI",{});var $Be=s(hC);JFe=n($Be,"STRONG",{});var uAt=s(JFe);c$r=r(uAt,"bert"),uAt.forEach(t),f$r=r($Be," \u2014 "),tY=n($Be,"A",{href:!0});var _At=s(tY);m$r=r(_At,"FlaxBertForMaskedLM"),_At.forEach(t),g$r=r($Be," (BERT model)"),$Be.forEach(t),h$r=i(Ie),pC=n(Ie,"LI",{});var kBe=s(pC);YFe=n(kBe,"STRONG",{});var bAt=s(YFe);p$r=r(bAt,"big_bird"),bAt.forEach(t),u$r=r(kBe," \u2014 "),aY=n(kBe,"A",{href:!0});var vAt=s(aY);_$r=r(vAt,"FlaxBigBirdForMaskedLM"),vAt.forEach(t),b$r=r(kBe," (BigBird model)"),kBe.forEach(t),v$r=i(Ie),uC=n(Ie,"LI",{});var SBe=s(uC);KFe=n(SBe,"STRONG",{});var FAt=s(KFe);F$r=r(FAt,"distilbert"),FAt.forEach(t),T$r=r(SBe," \u2014 "),nY=n(SBe,"A",{href:!0});var TAt=s(nY);M$r=r(TAt,"FlaxDistilBertForMaskedLM"),TAt.forEach(t),E$r=r(SBe," (DistilBERT model)"),SBe.forEach(t),C$r=i(Ie),_C=n(Ie,"LI",{});var RBe=s(_C);ZFe=n(RBe,"STRONG",{});var MAt=s(ZFe);w$r=r(MAt,"electra"),MAt.forEach(t),A$r=r(RBe," \u2014 "),sY=n(RBe,"A",{href:!0});var EAt=s(sY);y$r=r(EAt,"FlaxElectraForMaskedLM"),EAt.forEach(t),L$r=r(RBe," (ELECTRA model)"),RBe.forEach(t),x$r=i(Ie),bC=n(Ie,"LI",{});var PBe=s(bC);e6e=n(PBe,"STRONG",{});var CAt=s(e6e);$$r=r(CAt,"mbart"),CAt.forEach(t),k$r=r(PBe," \u2014 "),lY=n(PBe,"A",{href:!0});var wAt=s(lY);S$r=r(wAt,"FlaxMBartForConditionalGeneration"),wAt.forEach(t),R$r=r(PBe," (mBART model)"),PBe.forEach(t),P$r=i(Ie),vC=n(Ie,"LI",{});var BBe=s(vC);o6e=n(BBe,"STRONG",{});var AAt=s(o6e);B$r=r(AAt,"roberta"),AAt.forEach(t),I$r=r(BBe," \u2014 "),iY=n(BBe,"A",{href:!0});var yAt=s(iY);q$r=r(yAt,"FlaxRobertaForMaskedLM"),yAt.forEach(t),N$r=r(BBe," (RoBERTa model)"),BBe.forEach(t),j$r=i(Ie),FC=n(Ie,"LI",{});var IBe=s(FC);r6e=n(IBe,"STRONG",{});var LAt=s(r6e);D$r=r(LAt,"roformer"),LAt.forEach(t),G$r=r(IBe," \u2014 "),dY=n(IBe,"A",{href:!0});var xAt=s(dY);O$r=r(xAt,"FlaxRoFormerForMaskedLM"),xAt.forEach(t),V$r=r(IBe," (RoFormer model)"),IBe.forEach(t),X$r=i(Ie),TC=n(Ie,"LI",{});var qBe=s(TC);t6e=n(qBe,"STRONG",{});var $At=s(t6e);z$r=r($At,"xlm-roberta"),$At.forEach(t),W$r=r(qBe," \u2014 "),cY=n(qBe,"A",{href:!0});var kAt=s(cY);Q$r=r(kAt,"FlaxXLMRobertaForMaskedLM"),kAt.forEach(t),H$r=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),Ie.forEach(t),U$r=i(Ql),T(MC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),FNe=i(f),Dc=n(f,"H2",{class:!0});var yDe=s(Dc);EC=n(yDe,"A",{id:!0,class:!0,href:!0});var SAt=s(EC);a6e=n(SAt,"SPAN",{});var RAt=s(a6e);T(y7.$$.fragment,RAt),RAt.forEach(t),SAt.forEach(t),J$r=i(yDe),n6e=n(yDe,"SPAN",{});var PAt=s(n6e);Y$r=r(PAt,"FlaxAutoModelForSeq2SeqLM"),PAt.forEach(t),yDe.forEach(t),TNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(L7.$$.fragment,Hl),K$r=i(Hl),Gc=n(Hl,"P",{});var see=s(Gc);Z$r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fY=n(see,"A",{href:!0});var BAt=s(fY);ekr=r(BAt,"from_pretrained()"),BAt.forEach(t),okr=r(see," class method or the "),mY=n(see,"A",{href:!0});var IAt=s(mY);rkr=r(IAt,"from_config()"),IAt.forEach(t),tkr=r(see,` class
method.`),see.forEach(t),akr=i(Hl),x7=n(Hl,"P",{});var LDe=s(x7);nkr=r(LDe,"This class cannot be instantiated directly using "),s6e=n(LDe,"CODE",{});var qAt=s(s6e);skr=r(qAt,"__init__()"),qAt.forEach(t),lkr=r(LDe," (throws an error)."),LDe.forEach(t),ikr=i(Hl),zt=n(Hl,"DIV",{class:!0});var V0=s(zt);T($7.$$.fragment,V0),dkr=i(V0),l6e=n(V0,"P",{});var NAt=s(l6e);ckr=r(NAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NAt.forEach(t),fkr=i(V0),Oc=n(V0,"P",{});var lee=s(Oc);mkr=r(lee,`Note:
Loading a model from its configuration file does `),i6e=n(lee,"STRONG",{});var jAt=s(i6e);gkr=r(jAt,"not"),jAt.forEach(t),hkr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(lee,"A",{href:!0});var DAt=s(gY);pkr=r(DAt,"from_pretrained()"),DAt.forEach(t),ukr=r(lee," to load the model weights."),lee.forEach(t),_kr=i(V0),T(CC.$$.fragment,V0),V0.forEach(t),bkr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(k7.$$.fragment,Ul),vkr=i(Ul),d6e=n(Ul,"P",{});var GAt=s(d6e);Fkr=r(GAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GAt.forEach(t),Tkr=i(Ul),bn=n(Ul,"P",{});var X0=s(bn);Mkr=r(X0,"The model class to instantiate is selected based on the "),c6e=n(X0,"CODE",{});var OAt=s(c6e);Ekr=r(OAt,"model_type"),OAt.forEach(t),Ckr=r(X0,` property of the config object (either
passed as an argument or loaded from `),f6e=n(X0,"CODE",{});var VAt=s(f6e);wkr=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),Akr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m6e=n(X0,"CODE",{});var XAt=s(m6e);ykr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),Lkr=r(X0,":"),X0.forEach(t),xkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);wC=n(ze,"LI",{});var NBe=s(wC);g6e=n(NBe,"STRONG",{});var zAt=s(g6e);$kr=r(zAt,"bart"),zAt.forEach(t),kkr=r(NBe," \u2014 "),hY=n(NBe,"A",{href:!0});var WAt=s(hY);Skr=r(WAt,"FlaxBartForConditionalGeneration"),WAt.forEach(t),Rkr=r(NBe," (BART model)"),NBe.forEach(t),Pkr=i(ze),AC=n(ze,"LI",{});var jBe=s(AC);h6e=n(jBe,"STRONG",{});var QAt=s(h6e);Bkr=r(QAt,"blenderbot"),QAt.forEach(t),Ikr=r(jBe," \u2014 "),pY=n(jBe,"A",{href:!0});var HAt=s(pY);qkr=r(HAt,"FlaxBlenderbotForConditionalGeneration"),HAt.forEach(t),Nkr=r(jBe," (Blenderbot model)"),jBe.forEach(t),jkr=i(ze),yC=n(ze,"LI",{});var DBe=s(yC);p6e=n(DBe,"STRONG",{});var UAt=s(p6e);Dkr=r(UAt,"blenderbot-small"),UAt.forEach(t),Gkr=r(DBe," \u2014 "),uY=n(DBe,"A",{href:!0});var JAt=s(uY);Okr=r(JAt,"FlaxBlenderbotSmallForConditionalGeneration"),JAt.forEach(t),Vkr=r(DBe," (BlenderbotSmall model)"),DBe.forEach(t),Xkr=i(ze),LC=n(ze,"LI",{});var GBe=s(LC);u6e=n(GBe,"STRONG",{});var YAt=s(u6e);zkr=r(YAt,"encoder-decoder"),YAt.forEach(t),Wkr=r(GBe," \u2014 "),_Y=n(GBe,"A",{href:!0});var KAt=s(_Y);Qkr=r(KAt,"FlaxEncoderDecoderModel"),KAt.forEach(t),Hkr=r(GBe," (Encoder decoder model)"),GBe.forEach(t),Ukr=i(ze),xC=n(ze,"LI",{});var OBe=s(xC);_6e=n(OBe,"STRONG",{});var ZAt=s(_6e);Jkr=r(ZAt,"marian"),ZAt.forEach(t),Ykr=r(OBe," \u2014 "),bY=n(OBe,"A",{href:!0});var e0t=s(bY);Kkr=r(e0t,"FlaxMarianMTModel"),e0t.forEach(t),Zkr=r(OBe," (Marian model)"),OBe.forEach(t),eSr=i(ze),$C=n(ze,"LI",{});var VBe=s($C);b6e=n(VBe,"STRONG",{});var o0t=s(b6e);oSr=r(o0t,"mbart"),o0t.forEach(t),rSr=r(VBe," \u2014 "),vY=n(VBe,"A",{href:!0});var r0t=s(vY);tSr=r(r0t,"FlaxMBartForConditionalGeneration"),r0t.forEach(t),aSr=r(VBe," (mBART model)"),VBe.forEach(t),nSr=i(ze),kC=n(ze,"LI",{});var XBe=s(kC);v6e=n(XBe,"STRONG",{});var t0t=s(v6e);sSr=r(t0t,"mt5"),t0t.forEach(t),lSr=r(XBe," \u2014 "),FY=n(XBe,"A",{href:!0});var a0t=s(FY);iSr=r(a0t,"FlaxMT5ForConditionalGeneration"),a0t.forEach(t),dSr=r(XBe," (mT5 model)"),XBe.forEach(t),cSr=i(ze),SC=n(ze,"LI",{});var zBe=s(SC);F6e=n(zBe,"STRONG",{});var n0t=s(F6e);fSr=r(n0t,"pegasus"),n0t.forEach(t),mSr=r(zBe," \u2014 "),TY=n(zBe,"A",{href:!0});var s0t=s(TY);gSr=r(s0t,"FlaxPegasusForConditionalGeneration"),s0t.forEach(t),hSr=r(zBe," (Pegasus model)"),zBe.forEach(t),pSr=i(ze),RC=n(ze,"LI",{});var WBe=s(RC);T6e=n(WBe,"STRONG",{});var l0t=s(T6e);uSr=r(l0t,"t5"),l0t.forEach(t),_Sr=r(WBe," \u2014 "),MY=n(WBe,"A",{href:!0});var i0t=s(MY);bSr=r(i0t,"FlaxT5ForConditionalGeneration"),i0t.forEach(t),vSr=r(WBe," (T5 model)"),WBe.forEach(t),ze.forEach(t),FSr=i(Ul),T(PC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),MNe=i(f),Vc=n(f,"H2",{class:!0});var xDe=s(Vc);BC=n(xDe,"A",{id:!0,class:!0,href:!0});var d0t=s(BC);M6e=n(d0t,"SPAN",{});var c0t=s(M6e);T(S7.$$.fragment,c0t),c0t.forEach(t),d0t.forEach(t),TSr=i(xDe),E6e=n(xDe,"SPAN",{});var f0t=s(E6e);MSr=r(f0t,"FlaxAutoModelForSequenceClassification"),f0t.forEach(t),xDe.forEach(t),ENe=i(f),ur=n(f,"DIV",{class:!0});var Jl=s(ur);T(R7.$$.fragment,Jl),ESr=i(Jl),Xc=n(Jl,"P",{});var iee=s(Xc);CSr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EY=n(iee,"A",{href:!0});var m0t=s(EY);wSr=r(m0t,"from_pretrained()"),m0t.forEach(t),ASr=r(iee," class method or the "),CY=n(iee,"A",{href:!0});var g0t=s(CY);ySr=r(g0t,"from_config()"),g0t.forEach(t),LSr=r(iee,` class
method.`),iee.forEach(t),xSr=i(Jl),P7=n(Jl,"P",{});var $De=s(P7);$Sr=r($De,"This class cannot be instantiated directly using "),C6e=n($De,"CODE",{});var h0t=s(C6e);kSr=r(h0t,"__init__()"),h0t.forEach(t),SSr=r($De," (throws an error)."),$De.forEach(t),RSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var z0=s(Wt);T(B7.$$.fragment,z0),PSr=i(z0),w6e=n(z0,"P",{});var p0t=s(w6e);BSr=r(p0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p0t.forEach(t),ISr=i(z0),zc=n(z0,"P",{});var dee=s(zc);qSr=r(dee,`Note:
Loading a model from its configuration file does `),A6e=n(dee,"STRONG",{});var u0t=s(A6e);NSr=r(u0t,"not"),u0t.forEach(t),jSr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(dee,"A",{href:!0});var _0t=s(wY);DSr=r(_0t,"from_pretrained()"),_0t.forEach(t),GSr=r(dee," to load the model weights."),dee.forEach(t),OSr=i(z0),T(IC.$$.fragment,z0),z0.forEach(t),VSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(I7.$$.fragment,Yl),XSr=i(Yl),y6e=n(Yl,"P",{});var b0t=s(y6e);zSr=r(b0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b0t.forEach(t),WSr=i(Yl),vn=n(Yl,"P",{});var W0=s(vn);QSr=r(W0,"The model class to instantiate is selected based on the "),L6e=n(W0,"CODE",{});var v0t=s(L6e);HSr=r(v0t,"model_type"),v0t.forEach(t),USr=r(W0,` property of the config object (either
passed as an argument or loaded from `),x6e=n(W0,"CODE",{});var F0t=s(x6e);JSr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),YSr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(W0,"CODE",{});var T0t=s($6e);KSr=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),ZSr=r(W0,":"),W0.forEach(t),eRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);qC=n(qe,"LI",{});var QBe=s(qC);k6e=n(QBe,"STRONG",{});var M0t=s(k6e);oRr=r(M0t,"albert"),M0t.forEach(t),rRr=r(QBe," \u2014 "),AY=n(QBe,"A",{href:!0});var E0t=s(AY);tRr=r(E0t,"FlaxAlbertForSequenceClassification"),E0t.forEach(t),aRr=r(QBe," (ALBERT model)"),QBe.forEach(t),nRr=i(qe),NC=n(qe,"LI",{});var HBe=s(NC);S6e=n(HBe,"STRONG",{});var C0t=s(S6e);sRr=r(C0t,"bart"),C0t.forEach(t),lRr=r(HBe," \u2014 "),yY=n(HBe,"A",{href:!0});var w0t=s(yY);iRr=r(w0t,"FlaxBartForSequenceClassification"),w0t.forEach(t),dRr=r(HBe," (BART model)"),HBe.forEach(t),cRr=i(qe),jC=n(qe,"LI",{});var UBe=s(jC);R6e=n(UBe,"STRONG",{});var A0t=s(R6e);fRr=r(A0t,"bert"),A0t.forEach(t),mRr=r(UBe," \u2014 "),LY=n(UBe,"A",{href:!0});var y0t=s(LY);gRr=r(y0t,"FlaxBertForSequenceClassification"),y0t.forEach(t),hRr=r(UBe," (BERT model)"),UBe.forEach(t),pRr=i(qe),DC=n(qe,"LI",{});var JBe=s(DC);P6e=n(JBe,"STRONG",{});var L0t=s(P6e);uRr=r(L0t,"big_bird"),L0t.forEach(t),_Rr=r(JBe," \u2014 "),xY=n(JBe,"A",{href:!0});var x0t=s(xY);bRr=r(x0t,"FlaxBigBirdForSequenceClassification"),x0t.forEach(t),vRr=r(JBe," (BigBird model)"),JBe.forEach(t),FRr=i(qe),GC=n(qe,"LI",{});var YBe=s(GC);B6e=n(YBe,"STRONG",{});var $0t=s(B6e);TRr=r($0t,"distilbert"),$0t.forEach(t),MRr=r(YBe," \u2014 "),$Y=n(YBe,"A",{href:!0});var k0t=s($Y);ERr=r(k0t,"FlaxDistilBertForSequenceClassification"),k0t.forEach(t),CRr=r(YBe," (DistilBERT model)"),YBe.forEach(t),wRr=i(qe),OC=n(qe,"LI",{});var KBe=s(OC);I6e=n(KBe,"STRONG",{});var S0t=s(I6e);ARr=r(S0t,"electra"),S0t.forEach(t),yRr=r(KBe," \u2014 "),kY=n(KBe,"A",{href:!0});var R0t=s(kY);LRr=r(R0t,"FlaxElectraForSequenceClassification"),R0t.forEach(t),xRr=r(KBe," (ELECTRA model)"),KBe.forEach(t),$Rr=i(qe),VC=n(qe,"LI",{});var ZBe=s(VC);q6e=n(ZBe,"STRONG",{});var P0t=s(q6e);kRr=r(P0t,"mbart"),P0t.forEach(t),SRr=r(ZBe," \u2014 "),SY=n(ZBe,"A",{href:!0});var B0t=s(SY);RRr=r(B0t,"FlaxMBartForSequenceClassification"),B0t.forEach(t),PRr=r(ZBe," (mBART model)"),ZBe.forEach(t),BRr=i(qe),XC=n(qe,"LI",{});var eIe=s(XC);N6e=n(eIe,"STRONG",{});var I0t=s(N6e);IRr=r(I0t,"roberta"),I0t.forEach(t),qRr=r(eIe," \u2014 "),RY=n(eIe,"A",{href:!0});var q0t=s(RY);NRr=r(q0t,"FlaxRobertaForSequenceClassification"),q0t.forEach(t),jRr=r(eIe," (RoBERTa model)"),eIe.forEach(t),DRr=i(qe),zC=n(qe,"LI",{});var oIe=s(zC);j6e=n(oIe,"STRONG",{});var N0t=s(j6e);GRr=r(N0t,"roformer"),N0t.forEach(t),ORr=r(oIe," \u2014 "),PY=n(oIe,"A",{href:!0});var j0t=s(PY);VRr=r(j0t,"FlaxRoFormerForSequenceClassification"),j0t.forEach(t),XRr=r(oIe," (RoFormer model)"),oIe.forEach(t),zRr=i(qe),WC=n(qe,"LI",{});var rIe=s(WC);D6e=n(rIe,"STRONG",{});var D0t=s(D6e);WRr=r(D0t,"xlm-roberta"),D0t.forEach(t),QRr=r(rIe," \u2014 "),BY=n(rIe,"A",{href:!0});var G0t=s(BY);HRr=r(G0t,"FlaxXLMRobertaForSequenceClassification"),G0t.forEach(t),URr=r(rIe," (XLM-RoBERTa model)"),rIe.forEach(t),qe.forEach(t),JRr=i(Yl),T(QC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),CNe=i(f),Wc=n(f,"H2",{class:!0});var kDe=s(Wc);HC=n(kDe,"A",{id:!0,class:!0,href:!0});var O0t=s(HC);G6e=n(O0t,"SPAN",{});var V0t=s(G6e);T(q7.$$.fragment,V0t),V0t.forEach(t),O0t.forEach(t),YRr=i(kDe),O6e=n(kDe,"SPAN",{});var X0t=s(O6e);KRr=r(X0t,"FlaxAutoModelForQuestionAnswering"),X0t.forEach(t),kDe.forEach(t),wNe=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(N7.$$.fragment,Kl),ZRr=i(Kl),Qc=n(Kl,"P",{});var cee=s(Qc);ePr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IY=n(cee,"A",{href:!0});var z0t=s(IY);oPr=r(z0t,"from_pretrained()"),z0t.forEach(t),rPr=r(cee," class method or the "),qY=n(cee,"A",{href:!0});var W0t=s(qY);tPr=r(W0t,"from_config()"),W0t.forEach(t),aPr=r(cee,` class
method.`),cee.forEach(t),nPr=i(Kl),j7=n(Kl,"P",{});var SDe=s(j7);sPr=r(SDe,"This class cannot be instantiated directly using "),V6e=n(SDe,"CODE",{});var Q0t=s(V6e);lPr=r(Q0t,"__init__()"),Q0t.forEach(t),iPr=r(SDe," (throws an error)."),SDe.forEach(t),dPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Q0=s(Qt);T(D7.$$.fragment,Q0),cPr=i(Q0),X6e=n(Q0,"P",{});var H0t=s(X6e);fPr=r(H0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H0t.forEach(t),mPr=i(Q0),Hc=n(Q0,"P",{});var fee=s(Hc);gPr=r(fee,`Note:
Loading a model from its configuration file does `),z6e=n(fee,"STRONG",{});var U0t=s(z6e);hPr=r(U0t,"not"),U0t.forEach(t),pPr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(fee,"A",{href:!0});var J0t=s(NY);uPr=r(J0t,"from_pretrained()"),J0t.forEach(t),_Pr=r(fee," to load the model weights."),fee.forEach(t),bPr=i(Q0),T(UC.$$.fragment,Q0),Q0.forEach(t),vPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(G7.$$.fragment,Zl),FPr=i(Zl),W6e=n(Zl,"P",{});var Y0t=s(W6e);TPr=r(Y0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Y0t.forEach(t),MPr=i(Zl),Fn=n(Zl,"P",{});var H0=s(Fn);EPr=r(H0,"The model class to instantiate is selected based on the "),Q6e=n(H0,"CODE",{});var K0t=s(Q6e);CPr=r(K0t,"model_type"),K0t.forEach(t),wPr=r(H0,` property of the config object (either
passed as an argument or loaded from `),H6e=n(H0,"CODE",{});var Z0t=s(H6e);APr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),yPr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(H0,"CODE",{});var eyt=s(U6e);LPr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),xPr=r(H0,":"),H0.forEach(t),$Pr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);JC=n(Ne,"LI",{});var tIe=s(JC);J6e=n(tIe,"STRONG",{});var oyt=s(J6e);kPr=r(oyt,"albert"),oyt.forEach(t),SPr=r(tIe," \u2014 "),jY=n(tIe,"A",{href:!0});var ryt=s(jY);RPr=r(ryt,"FlaxAlbertForQuestionAnswering"),ryt.forEach(t),PPr=r(tIe," (ALBERT model)"),tIe.forEach(t),BPr=i(Ne),YC=n(Ne,"LI",{});var aIe=s(YC);Y6e=n(aIe,"STRONG",{});var tyt=s(Y6e);IPr=r(tyt,"bart"),tyt.forEach(t),qPr=r(aIe," \u2014 "),DY=n(aIe,"A",{href:!0});var ayt=s(DY);NPr=r(ayt,"FlaxBartForQuestionAnswering"),ayt.forEach(t),jPr=r(aIe," (BART model)"),aIe.forEach(t),DPr=i(Ne),KC=n(Ne,"LI",{});var nIe=s(KC);K6e=n(nIe,"STRONG",{});var nyt=s(K6e);GPr=r(nyt,"bert"),nyt.forEach(t),OPr=r(nIe," \u2014 "),GY=n(nIe,"A",{href:!0});var syt=s(GY);VPr=r(syt,"FlaxBertForQuestionAnswering"),syt.forEach(t),XPr=r(nIe," (BERT model)"),nIe.forEach(t),zPr=i(Ne),ZC=n(Ne,"LI",{});var sIe=s(ZC);Z6e=n(sIe,"STRONG",{});var lyt=s(Z6e);WPr=r(lyt,"big_bird"),lyt.forEach(t),QPr=r(sIe," \u2014 "),OY=n(sIe,"A",{href:!0});var iyt=s(OY);HPr=r(iyt,"FlaxBigBirdForQuestionAnswering"),iyt.forEach(t),UPr=r(sIe," (BigBird model)"),sIe.forEach(t),JPr=i(Ne),ew=n(Ne,"LI",{});var lIe=s(ew);eTe=n(lIe,"STRONG",{});var dyt=s(eTe);YPr=r(dyt,"distilbert"),dyt.forEach(t),KPr=r(lIe," \u2014 "),VY=n(lIe,"A",{href:!0});var cyt=s(VY);ZPr=r(cyt,"FlaxDistilBertForQuestionAnswering"),cyt.forEach(t),eBr=r(lIe," (DistilBERT model)"),lIe.forEach(t),oBr=i(Ne),ow=n(Ne,"LI",{});var iIe=s(ow);oTe=n(iIe,"STRONG",{});var fyt=s(oTe);rBr=r(fyt,"electra"),fyt.forEach(t),tBr=r(iIe," \u2014 "),XY=n(iIe,"A",{href:!0});var myt=s(XY);aBr=r(myt,"FlaxElectraForQuestionAnswering"),myt.forEach(t),nBr=r(iIe," (ELECTRA model)"),iIe.forEach(t),sBr=i(Ne),rw=n(Ne,"LI",{});var dIe=s(rw);rTe=n(dIe,"STRONG",{});var gyt=s(rTe);lBr=r(gyt,"mbart"),gyt.forEach(t),iBr=r(dIe," \u2014 "),zY=n(dIe,"A",{href:!0});var hyt=s(zY);dBr=r(hyt,"FlaxMBartForQuestionAnswering"),hyt.forEach(t),cBr=r(dIe," (mBART model)"),dIe.forEach(t),fBr=i(Ne),tw=n(Ne,"LI",{});var cIe=s(tw);tTe=n(cIe,"STRONG",{});var pyt=s(tTe);mBr=r(pyt,"roberta"),pyt.forEach(t),gBr=r(cIe," \u2014 "),WY=n(cIe,"A",{href:!0});var uyt=s(WY);hBr=r(uyt,"FlaxRobertaForQuestionAnswering"),uyt.forEach(t),pBr=r(cIe," (RoBERTa model)"),cIe.forEach(t),uBr=i(Ne),aw=n(Ne,"LI",{});var fIe=s(aw);aTe=n(fIe,"STRONG",{});var _yt=s(aTe);_Br=r(_yt,"roformer"),_yt.forEach(t),bBr=r(fIe," \u2014 "),QY=n(fIe,"A",{href:!0});var byt=s(QY);vBr=r(byt,"FlaxRoFormerForQuestionAnswering"),byt.forEach(t),FBr=r(fIe," (RoFormer model)"),fIe.forEach(t),TBr=i(Ne),nw=n(Ne,"LI",{});var mIe=s(nw);nTe=n(mIe,"STRONG",{});var vyt=s(nTe);MBr=r(vyt,"xlm-roberta"),vyt.forEach(t),EBr=r(mIe," \u2014 "),HY=n(mIe,"A",{href:!0});var Fyt=s(HY);CBr=r(Fyt,"FlaxXLMRobertaForQuestionAnswering"),Fyt.forEach(t),wBr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),Ne.forEach(t),ABr=i(Zl),T(sw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ANe=i(f),Uc=n(f,"H2",{class:!0});var RDe=s(Uc);lw=n(RDe,"A",{id:!0,class:!0,href:!0});var Tyt=s(lw);sTe=n(Tyt,"SPAN",{});var Myt=s(sTe);T(O7.$$.fragment,Myt),Myt.forEach(t),Tyt.forEach(t),yBr=i(RDe),lTe=n(RDe,"SPAN",{});var Eyt=s(lTe);LBr=r(Eyt,"FlaxAutoModelForTokenClassification"),Eyt.forEach(t),RDe.forEach(t),yNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(V7.$$.fragment,ei),xBr=i(ei),Jc=n(ei,"P",{});var mee=s(Jc);$Br=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UY=n(mee,"A",{href:!0});var Cyt=s(UY);kBr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),SBr=r(mee," class method or the "),JY=n(mee,"A",{href:!0});var wyt=s(JY);RBr=r(wyt,"from_config()"),wyt.forEach(t),PBr=r(mee,` class
method.`),mee.forEach(t),BBr=i(ei),X7=n(ei,"P",{});var PDe=s(X7);IBr=r(PDe,"This class cannot be instantiated directly using "),iTe=n(PDe,"CODE",{});var Ayt=s(iTe);qBr=r(Ayt,"__init__()"),Ayt.forEach(t),NBr=r(PDe," (throws an error)."),PDe.forEach(t),jBr=i(ei),Ht=n(ei,"DIV",{class:!0});var U0=s(Ht);T(z7.$$.fragment,U0),DBr=i(U0),dTe=n(U0,"P",{});var yyt=s(dTe);GBr=r(yyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yyt.forEach(t),OBr=i(U0),Yc=n(U0,"P",{});var gee=s(Yc);VBr=r(gee,`Note:
Loading a model from its configuration file does `),cTe=n(gee,"STRONG",{});var Lyt=s(cTe);XBr=r(Lyt,"not"),Lyt.forEach(t),zBr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(gee,"A",{href:!0});var xyt=s(YY);WBr=r(xyt,"from_pretrained()"),xyt.forEach(t),QBr=r(gee," to load the model weights."),gee.forEach(t),HBr=i(U0),T(iw.$$.fragment,U0),U0.forEach(t),UBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(W7.$$.fragment,oi),JBr=i(oi),fTe=n(oi,"P",{});var $yt=s(fTe);YBr=r($yt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$yt.forEach(t),KBr=i(oi),Tn=n(oi,"P",{});var J0=s(Tn);ZBr=r(J0,"The model class to instantiate is selected based on the "),mTe=n(J0,"CODE",{});var kyt=s(mTe);eIr=r(kyt,"model_type"),kyt.forEach(t),oIr=r(J0,` property of the config object (either
passed as an argument or loaded from `),gTe=n(J0,"CODE",{});var Syt=s(gTe);rIr=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),tIr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(J0,"CODE",{});var Ryt=s(hTe);aIr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),nIr=r(J0,":"),J0.forEach(t),sIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);dw=n(Fo,"LI",{});var gIe=s(dw);pTe=n(gIe,"STRONG",{});var Pyt=s(pTe);lIr=r(Pyt,"albert"),Pyt.forEach(t),iIr=r(gIe," \u2014 "),KY=n(gIe,"A",{href:!0});var Byt=s(KY);dIr=r(Byt,"FlaxAlbertForTokenClassification"),Byt.forEach(t),cIr=r(gIe," (ALBERT model)"),gIe.forEach(t),fIr=i(Fo),cw=n(Fo,"LI",{});var hIe=s(cw);uTe=n(hIe,"STRONG",{});var Iyt=s(uTe);mIr=r(Iyt,"bert"),Iyt.forEach(t),gIr=r(hIe," \u2014 "),ZY=n(hIe,"A",{href:!0});var qyt=s(ZY);hIr=r(qyt,"FlaxBertForTokenClassification"),qyt.forEach(t),pIr=r(hIe," (BERT model)"),hIe.forEach(t),uIr=i(Fo),fw=n(Fo,"LI",{});var pIe=s(fw);_Te=n(pIe,"STRONG",{});var Nyt=s(_Te);_Ir=r(Nyt,"big_bird"),Nyt.forEach(t),bIr=r(pIe," \u2014 "),eK=n(pIe,"A",{href:!0});var jyt=s(eK);vIr=r(jyt,"FlaxBigBirdForTokenClassification"),jyt.forEach(t),FIr=r(pIe," (BigBird model)"),pIe.forEach(t),TIr=i(Fo),mw=n(Fo,"LI",{});var uIe=s(mw);bTe=n(uIe,"STRONG",{});var Dyt=s(bTe);MIr=r(Dyt,"distilbert"),Dyt.forEach(t),EIr=r(uIe," \u2014 "),oK=n(uIe,"A",{href:!0});var Gyt=s(oK);CIr=r(Gyt,"FlaxDistilBertForTokenClassification"),Gyt.forEach(t),wIr=r(uIe," (DistilBERT model)"),uIe.forEach(t),AIr=i(Fo),gw=n(Fo,"LI",{});var _Ie=s(gw);vTe=n(_Ie,"STRONG",{});var Oyt=s(vTe);yIr=r(Oyt,"electra"),Oyt.forEach(t),LIr=r(_Ie," \u2014 "),rK=n(_Ie,"A",{href:!0});var Vyt=s(rK);xIr=r(Vyt,"FlaxElectraForTokenClassification"),Vyt.forEach(t),$Ir=r(_Ie," (ELECTRA model)"),_Ie.forEach(t),kIr=i(Fo),hw=n(Fo,"LI",{});var bIe=s(hw);FTe=n(bIe,"STRONG",{});var Xyt=s(FTe);SIr=r(Xyt,"roberta"),Xyt.forEach(t),RIr=r(bIe," \u2014 "),tK=n(bIe,"A",{href:!0});var zyt=s(tK);PIr=r(zyt,"FlaxRobertaForTokenClassification"),zyt.forEach(t),BIr=r(bIe," (RoBERTa model)"),bIe.forEach(t),IIr=i(Fo),pw=n(Fo,"LI",{});var vIe=s(pw);TTe=n(vIe,"STRONG",{});var Wyt=s(TTe);qIr=r(Wyt,"roformer"),Wyt.forEach(t),NIr=r(vIe," \u2014 "),aK=n(vIe,"A",{href:!0});var Qyt=s(aK);jIr=r(Qyt,"FlaxRoFormerForTokenClassification"),Qyt.forEach(t),DIr=r(vIe," (RoFormer model)"),vIe.forEach(t),GIr=i(Fo),uw=n(Fo,"LI",{});var FIe=s(uw);MTe=n(FIe,"STRONG",{});var Hyt=s(MTe);OIr=r(Hyt,"xlm-roberta"),Hyt.forEach(t),VIr=r(FIe," \u2014 "),nK=n(FIe,"A",{href:!0});var Uyt=s(nK);XIr=r(Uyt,"FlaxXLMRobertaForTokenClassification"),Uyt.forEach(t),zIr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),Fo.forEach(t),WIr=i(oi),T(_w.$$.fragment,oi),oi.forEach(t),ei.forEach(t),LNe=i(f),Kc=n(f,"H2",{class:!0});var BDe=s(Kc);bw=n(BDe,"A",{id:!0,class:!0,href:!0});var Jyt=s(bw);ETe=n(Jyt,"SPAN",{});var Yyt=s(ETe);T(Q7.$$.fragment,Yyt),Yyt.forEach(t),Jyt.forEach(t),QIr=i(BDe),CTe=n(BDe,"SPAN",{});var Kyt=s(CTe);HIr=r(Kyt,"FlaxAutoModelForMultipleChoice"),Kyt.forEach(t),BDe.forEach(t),xNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(H7.$$.fragment,ri),UIr=i(ri),Zc=n(ri,"P",{});var hee=s(Zc);JIr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sK=n(hee,"A",{href:!0});var Zyt=s(sK);YIr=r(Zyt,"from_pretrained()"),Zyt.forEach(t),KIr=r(hee," class method or the "),lK=n(hee,"A",{href:!0});var eLt=s(lK);ZIr=r(eLt,"from_config()"),eLt.forEach(t),eqr=r(hee,` class
method.`),hee.forEach(t),oqr=i(ri),U7=n(ri,"P",{});var IDe=s(U7);rqr=r(IDe,"This class cannot be instantiated directly using "),wTe=n(IDe,"CODE",{});var oLt=s(wTe);tqr=r(oLt,"__init__()"),oLt.forEach(t),aqr=r(IDe," (throws an error)."),IDe.forEach(t),nqr=i(ri),Ut=n(ri,"DIV",{class:!0});var Y0=s(Ut);T(J7.$$.fragment,Y0),sqr=i(Y0),ATe=n(Y0,"P",{});var rLt=s(ATe);lqr=r(rLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rLt.forEach(t),iqr=i(Y0),ef=n(Y0,"P",{});var pee=s(ef);dqr=r(pee,`Note:
Loading a model from its configuration file does `),yTe=n(pee,"STRONG",{});var tLt=s(yTe);cqr=r(tLt,"not"),tLt.forEach(t),fqr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(pee,"A",{href:!0});var aLt=s(iK);mqr=r(aLt,"from_pretrained()"),aLt.forEach(t),gqr=r(pee," to load the model weights."),pee.forEach(t),hqr=i(Y0),T(vw.$$.fragment,Y0),Y0.forEach(t),pqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(Y7.$$.fragment,ti),uqr=i(ti),LTe=n(ti,"P",{});var nLt=s(LTe);_qr=r(nLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nLt.forEach(t),bqr=i(ti),Mn=n(ti,"P",{});var K0=s(Mn);vqr=r(K0,"The model class to instantiate is selected based on the "),xTe=n(K0,"CODE",{});var sLt=s(xTe);Fqr=r(sLt,"model_type"),sLt.forEach(t),Tqr=r(K0,` property of the config object (either
passed as an argument or loaded from `),$Te=n(K0,"CODE",{});var lLt=s($Te);Mqr=r(lLt,"pretrained_model_name_or_path"),lLt.forEach(t),Eqr=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(K0,"CODE",{});var iLt=s(kTe);Cqr=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),wqr=r(K0,":"),K0.forEach(t),Aqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);Fw=n(To,"LI",{});var TIe=s(Fw);STe=n(TIe,"STRONG",{});var dLt=s(STe);yqr=r(dLt,"albert"),dLt.forEach(t),Lqr=r(TIe," \u2014 "),dK=n(TIe,"A",{href:!0});var cLt=s(dK);xqr=r(cLt,"FlaxAlbertForMultipleChoice"),cLt.forEach(t),$qr=r(TIe," (ALBERT model)"),TIe.forEach(t),kqr=i(To),Tw=n(To,"LI",{});var MIe=s(Tw);RTe=n(MIe,"STRONG",{});var fLt=s(RTe);Sqr=r(fLt,"bert"),fLt.forEach(t),Rqr=r(MIe," \u2014 "),cK=n(MIe,"A",{href:!0});var mLt=s(cK);Pqr=r(mLt,"FlaxBertForMultipleChoice"),mLt.forEach(t),Bqr=r(MIe," (BERT model)"),MIe.forEach(t),Iqr=i(To),Mw=n(To,"LI",{});var EIe=s(Mw);PTe=n(EIe,"STRONG",{});var gLt=s(PTe);qqr=r(gLt,"big_bird"),gLt.forEach(t),Nqr=r(EIe," \u2014 "),fK=n(EIe,"A",{href:!0});var hLt=s(fK);jqr=r(hLt,"FlaxBigBirdForMultipleChoice"),hLt.forEach(t),Dqr=r(EIe," (BigBird model)"),EIe.forEach(t),Gqr=i(To),Ew=n(To,"LI",{});var CIe=s(Ew);BTe=n(CIe,"STRONG",{});var pLt=s(BTe);Oqr=r(pLt,"distilbert"),pLt.forEach(t),Vqr=r(CIe," \u2014 "),mK=n(CIe,"A",{href:!0});var uLt=s(mK);Xqr=r(uLt,"FlaxDistilBertForMultipleChoice"),uLt.forEach(t),zqr=r(CIe," (DistilBERT model)"),CIe.forEach(t),Wqr=i(To),Cw=n(To,"LI",{});var wIe=s(Cw);ITe=n(wIe,"STRONG",{});var _Lt=s(ITe);Qqr=r(_Lt,"electra"),_Lt.forEach(t),Hqr=r(wIe," \u2014 "),gK=n(wIe,"A",{href:!0});var bLt=s(gK);Uqr=r(bLt,"FlaxElectraForMultipleChoice"),bLt.forEach(t),Jqr=r(wIe," (ELECTRA model)"),wIe.forEach(t),Yqr=i(To),ww=n(To,"LI",{});var AIe=s(ww);qTe=n(AIe,"STRONG",{});var vLt=s(qTe);Kqr=r(vLt,"roberta"),vLt.forEach(t),Zqr=r(AIe," \u2014 "),hK=n(AIe,"A",{href:!0});var FLt=s(hK);eNr=r(FLt,"FlaxRobertaForMultipleChoice"),FLt.forEach(t),oNr=r(AIe," (RoBERTa model)"),AIe.forEach(t),rNr=i(To),Aw=n(To,"LI",{});var yIe=s(Aw);NTe=n(yIe,"STRONG",{});var TLt=s(NTe);tNr=r(TLt,"roformer"),TLt.forEach(t),aNr=r(yIe," \u2014 "),pK=n(yIe,"A",{href:!0});var MLt=s(pK);nNr=r(MLt,"FlaxRoFormerForMultipleChoice"),MLt.forEach(t),sNr=r(yIe," (RoFormer model)"),yIe.forEach(t),lNr=i(To),yw=n(To,"LI",{});var LIe=s(yw);jTe=n(LIe,"STRONG",{});var ELt=s(jTe);iNr=r(ELt,"xlm-roberta"),ELt.forEach(t),dNr=r(LIe," \u2014 "),uK=n(LIe,"A",{href:!0});var CLt=s(uK);cNr=r(CLt,"FlaxXLMRobertaForMultipleChoice"),CLt.forEach(t),fNr=r(LIe," (XLM-RoBERTa model)"),LIe.forEach(t),To.forEach(t),mNr=i(ti),T(Lw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),$Ne=i(f),of=n(f,"H2",{class:!0});var qDe=s(of);xw=n(qDe,"A",{id:!0,class:!0,href:!0});var wLt=s(xw);DTe=n(wLt,"SPAN",{});var ALt=s(DTe);T(K7.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),gNr=i(qDe),GTe=n(qDe,"SPAN",{});var yLt=s(GTe);hNr=r(yLt,"FlaxAutoModelForNextSentencePrediction"),yLt.forEach(t),qDe.forEach(t),kNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(Z7.$$.fragment,ai),pNr=i(ai),rf=n(ai,"P",{});var uee=s(rf);uNr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_K=n(uee,"A",{href:!0});var LLt=s(_K);_Nr=r(LLt,"from_pretrained()"),LLt.forEach(t),bNr=r(uee," class method or the "),bK=n(uee,"A",{href:!0});var xLt=s(bK);vNr=r(xLt,"from_config()"),xLt.forEach(t),FNr=r(uee,` class
method.`),uee.forEach(t),TNr=i(ai),e9=n(ai,"P",{});var NDe=s(e9);MNr=r(NDe,"This class cannot be instantiated directly using "),OTe=n(NDe,"CODE",{});var $Lt=s(OTe);ENr=r($Lt,"__init__()"),$Lt.forEach(t),CNr=r(NDe," (throws an error)."),NDe.forEach(t),wNr=i(ai),Jt=n(ai,"DIV",{class:!0});var Z0=s(Jt);T(o9.$$.fragment,Z0),ANr=i(Z0),VTe=n(Z0,"P",{});var kLt=s(VTe);yNr=r(kLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kLt.forEach(t),LNr=i(Z0),tf=n(Z0,"P",{});var _ee=s(tf);xNr=r(_ee,`Note:
Loading a model from its configuration file does `),XTe=n(_ee,"STRONG",{});var SLt=s(XTe);$Nr=r(SLt,"not"),SLt.forEach(t),kNr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(_ee,"A",{href:!0});var RLt=s(vK);SNr=r(RLt,"from_pretrained()"),RLt.forEach(t),RNr=r(_ee," to load the model weights."),_ee.forEach(t),PNr=i(Z0),T($w.$$.fragment,Z0),Z0.forEach(t),BNr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(r9.$$.fragment,ni),INr=i(ni),zTe=n(ni,"P",{});var PLt=s(zTe);qNr=r(PLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PLt.forEach(t),NNr=i(ni),En=n(ni,"P",{});var ey=s(En);jNr=r(ey,"The model class to instantiate is selected based on the "),WTe=n(ey,"CODE",{});var BLt=s(WTe);DNr=r(BLt,"model_type"),BLt.forEach(t),GNr=r(ey,` property of the config object (either
passed as an argument or loaded from `),QTe=n(ey,"CODE",{});var ILt=s(QTe);ONr=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),VNr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(ey,"CODE",{});var qLt=s(HTe);XNr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),zNr=r(ey,":"),ey.forEach(t),WNr=i(ni),UTe=n(ni,"UL",{});var NLt=s(UTe);kw=n(NLt,"LI",{});var xIe=s(kw);JTe=n(xIe,"STRONG",{});var jLt=s(JTe);QNr=r(jLt,"bert"),jLt.forEach(t),HNr=r(xIe," \u2014 "),FK=n(xIe,"A",{href:!0});var DLt=s(FK);UNr=r(DLt,"FlaxBertForNextSentencePrediction"),DLt.forEach(t),JNr=r(xIe," (BERT model)"),xIe.forEach(t),NLt.forEach(t),YNr=i(ni),T(Sw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),SNe=i(f),af=n(f,"H2",{class:!0});var jDe=s(af);Rw=n(jDe,"A",{id:!0,class:!0,href:!0});var GLt=s(Rw);YTe=n(GLt,"SPAN",{});var OLt=s(YTe);T(t9.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),KNr=i(jDe),KTe=n(jDe,"SPAN",{});var VLt=s(KTe);ZNr=r(VLt,"FlaxAutoModelForImageClassification"),VLt.forEach(t),jDe.forEach(t),RNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(a9.$$.fragment,si),ejr=i(si),nf=n(si,"P",{});var bee=s(nf);ojr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=n(bee,"A",{href:!0});var XLt=s(TK);rjr=r(XLt,"from_pretrained()"),XLt.forEach(t),tjr=r(bee," class method or the "),MK=n(bee,"A",{href:!0});var zLt=s(MK);ajr=r(zLt,"from_config()"),zLt.forEach(t),njr=r(bee,` class
method.`),bee.forEach(t),sjr=i(si),n9=n(si,"P",{});var DDe=s(n9);ljr=r(DDe,"This class cannot be instantiated directly using "),ZTe=n(DDe,"CODE",{});var WLt=s(ZTe);ijr=r(WLt,"__init__()"),WLt.forEach(t),djr=r(DDe," (throws an error)."),DDe.forEach(t),cjr=i(si),Yt=n(si,"DIV",{class:!0});var oy=s(Yt);T(s9.$$.fragment,oy),fjr=i(oy),eMe=n(oy,"P",{});var QLt=s(eMe);mjr=r(QLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QLt.forEach(t),gjr=i(oy),sf=n(oy,"P",{});var vee=s(sf);hjr=r(vee,`Note:
Loading a model from its configuration file does `),oMe=n(vee,"STRONG",{});var HLt=s(oMe);pjr=r(HLt,"not"),HLt.forEach(t),ujr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(vee,"A",{href:!0});var ULt=s(EK);_jr=r(ULt,"from_pretrained()"),ULt.forEach(t),bjr=r(vee," to load the model weights."),vee.forEach(t),vjr=i(oy),T(Pw.$$.fragment,oy),oy.forEach(t),Fjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(l9.$$.fragment,li),Tjr=i(li),rMe=n(li,"P",{});var JLt=s(rMe);Mjr=r(JLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JLt.forEach(t),Ejr=i(li),Cn=n(li,"P",{});var ry=s(Cn);Cjr=r(ry,"The model class to instantiate is selected based on the "),tMe=n(ry,"CODE",{});var YLt=s(tMe);wjr=r(YLt,"model_type"),YLt.forEach(t),Ajr=r(ry,` property of the config object (either
passed as an argument or loaded from `),aMe=n(ry,"CODE",{});var KLt=s(aMe);yjr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),Ljr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(ry,"CODE",{});var ZLt=s(nMe);xjr=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),$jr=r(ry,":"),ry.forEach(t),kjr=i(li),i9=n(li,"UL",{});var GDe=s(i9);Bw=n(GDe,"LI",{});var $Ie=s(Bw);sMe=n($Ie,"STRONG",{});var e8t=s(sMe);Sjr=r(e8t,"beit"),e8t.forEach(t),Rjr=r($Ie," \u2014 "),CK=n($Ie,"A",{href:!0});var o8t=s(CK);Pjr=r(o8t,"FlaxBeitForImageClassification"),o8t.forEach(t),Bjr=r($Ie," (BEiT model)"),$Ie.forEach(t),Ijr=i(GDe),Iw=n(GDe,"LI",{});var kIe=s(Iw);lMe=n(kIe,"STRONG",{});var r8t=s(lMe);qjr=r(r8t,"vit"),r8t.forEach(t),Njr=r(kIe," \u2014 "),wK=n(kIe,"A",{href:!0});var t8t=s(wK);jjr=r(t8t,"FlaxViTForImageClassification"),t8t.forEach(t),Djr=r(kIe," (ViT model)"),kIe.forEach(t),GDe.forEach(t),Gjr=i(li),T(qw.$$.fragment,li),li.forEach(t),si.forEach(t),PNe=i(f),lf=n(f,"H2",{class:!0});var ODe=s(lf);Nw=n(ODe,"A",{id:!0,class:!0,href:!0});var a8t=s(Nw);iMe=n(a8t,"SPAN",{});var n8t=s(iMe);T(d9.$$.fragment,n8t),n8t.forEach(t),a8t.forEach(t),Ojr=i(ODe),dMe=n(ODe,"SPAN",{});var s8t=s(dMe);Vjr=r(s8t,"FlaxAutoModelForVision2Seq"),s8t.forEach(t),ODe.forEach(t),BNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(c9.$$.fragment,ii),Xjr=i(ii),df=n(ii,"P",{});var Fee=s(df);zjr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AK=n(Fee,"A",{href:!0});var l8t=s(AK);Wjr=r(l8t,"from_pretrained()"),l8t.forEach(t),Qjr=r(Fee," class method or the "),yK=n(Fee,"A",{href:!0});var i8t=s(yK);Hjr=r(i8t,"from_config()"),i8t.forEach(t),Ujr=r(Fee,` class
method.`),Fee.forEach(t),Jjr=i(ii),f9=n(ii,"P",{});var VDe=s(f9);Yjr=r(VDe,"This class cannot be instantiated directly using "),cMe=n(VDe,"CODE",{});var d8t=s(cMe);Kjr=r(d8t,"__init__()"),d8t.forEach(t),Zjr=r(VDe," (throws an error)."),VDe.forEach(t),eDr=i(ii),Kt=n(ii,"DIV",{class:!0});var ty=s(Kt);T(m9.$$.fragment,ty),oDr=i(ty),fMe=n(ty,"P",{});var c8t=s(fMe);rDr=r(c8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),c8t.forEach(t),tDr=i(ty),cf=n(ty,"P",{});var Tee=s(cf);aDr=r(Tee,`Note:
Loading a model from its configuration file does `),mMe=n(Tee,"STRONG",{});var f8t=s(mMe);nDr=r(f8t,"not"),f8t.forEach(t),sDr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Tee,"A",{href:!0});var m8t=s(LK);lDr=r(m8t,"from_pretrained()"),m8t.forEach(t),iDr=r(Tee," to load the model weights."),Tee.forEach(t),dDr=i(ty),T(jw.$$.fragment,ty),ty.forEach(t),cDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(g9.$$.fragment,di),fDr=i(di),gMe=n(di,"P",{});var g8t=s(gMe);mDr=r(g8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g8t.forEach(t),gDr=i(di),wn=n(di,"P",{});var ay=s(wn);hDr=r(ay,"The model class to instantiate is selected based on the "),hMe=n(ay,"CODE",{});var h8t=s(hMe);pDr=r(h8t,"model_type"),h8t.forEach(t),uDr=r(ay,` property of the config object (either
passed as an argument or loaded from `),pMe=n(ay,"CODE",{});var p8t=s(pMe);_Dr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),bDr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(ay,"CODE",{});var u8t=s(uMe);vDr=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),FDr=r(ay,":"),ay.forEach(t),TDr=i(di),_Me=n(di,"UL",{});var _8t=s(_Me);Dw=n(_8t,"LI",{});var SIe=s(Dw);bMe=n(SIe,"STRONG",{});var b8t=s(bMe);MDr=r(b8t,"vision-encoder-decoder"),b8t.forEach(t),EDr=r(SIe," \u2014 "),xK=n(SIe,"A",{href:!0});var v8t=s(xK);CDr=r(v8t,"FlaxVisionEncoderDecoderModel"),v8t.forEach(t),wDr=r(SIe," (Vision Encoder decoder model)"),SIe.forEach(t),_8t.forEach(t),ADr=i(di),T(Gw.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(E7t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(S$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(R$,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(P$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(B$,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(I$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(q$,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(N$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(j$,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(D$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(G$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(O$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(V$,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(X$,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(z$,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(W$,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(Q$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(H$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(U$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(J$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Y$,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(K$,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Z$,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ek,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(ok,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(rk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(tk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(ak,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(nk,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(sk,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(lk,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(ik,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(dk,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(ck,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(fk,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(mk,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(gk,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(hk,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(pk,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(uk,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(_k,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(bk,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(vk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Fk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Tk,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(Mk,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(Ek,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(Ck,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(wk,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ak,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(yk,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Lk,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(xk,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c($k,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(kk,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(Sk,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(Rk,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Pk,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Bk,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(Ik,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(qk,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Nk,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(jk,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Dk,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Gk,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Ok,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(Vk,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(Xk,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(zk,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(Wk,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(Qk,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(Hk,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(Uk,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(Jk,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(Yk,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(Kk,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(Zk,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(eS,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(oS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(rS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(tS,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(aS,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(nS,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(sS,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(lS,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(iS,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dS,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(cS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(fS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mS,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(gS,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(hS,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vu,"id","transformers.AutoModelForPreTraining"),c(Vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vu,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P_,"id","transformers.AutoModelForCausalLM"),c(P_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForMaskedLM"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nb,"id","transformers.AutoModelForSeq2SeqLM"),c(nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForSequenceClassification"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForMultipleChoice"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForNextSentencePrediction"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForTokenClassification"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W4,"id","transformers.AutoModelForQuestionAnswering"),c(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W4,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.AutoModelForTableQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.AutoModelForImageClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForVision2Seq"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForAudioClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForAudioFrameClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForCTC"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForAudioXVector"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r3,"id","transformers.AutoModelForMaskedImageModeling"),c(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.AutoModelForObjectDetection"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.AutoModelForImageSegmentation"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.AutoModelForSemanticSegmentation"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.AutoModelForInstanceSegmentation"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.TFAutoModel"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.TFAutoModelForPreTraining"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.TFAutoModelForCausalLM"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.TFAutoModelForImageClassification"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E6,"id","transformers.TFAutoModelForMaskedLM"),c(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E6,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.TFAutoModelForSeq2SeqLM"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModelForSequenceClassification"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForMultipleChoice"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForTokenClassification"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForQuestionAnswering"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForVision2Seq"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dE,"id","transformers.FlaxAutoModel"),c(dE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.FlaxAutoModelForCausalLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModelForPreTraining"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.FlaxAutoModelForMaskedLM"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForTokenClassification"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForImageClassification"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,_),b(f,rt,_),e(rt,fi),e(rt,mi),e(mi,ny),e(rt,pf),b(f,je,_),b(f,We,_),e(We,gi),e(We,yn),e(yn,sy),e(We,Ln),e(We,xn),e(xn,ly),e(We,hi),e(We,$n),e($n,iy),e(We,pi),b(f,uf,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,A$),e(Ae,ui),e(ui,y$),e(Ae,L$),b(f,Eo,_),b(f,wa,_),e(wa,x$),e(wa,_f),e(_f,$$),e(wa,XDe),b(f,RIe,_),b(f,_i,_),e(_i,bf),e(bf,Mee),M(dy,Mee,null),e(_i,zDe),e(_i,Eee),e(Eee,WDe),b(f,PIe,_),b(f,kn,_),e(kn,QDe),e(kn,Cee),e(Cee,HDe),e(kn,UDe),e(kn,wee),e(wee,JDe),e(kn,YDe),b(f,BIe,_),M(cy,f,_),b(f,IIe,_),b(f,k$,_),e(k$,KDe),b(f,qIe,_),M(vf,f,_),b(f,NIe,_),b(f,bi,_),e(bi,Ff),e(Ff,Aee),M(fy,Aee,null),e(bi,ZDe),e(bi,yee),e(yee,eGe),b(f,jIe,_),b(f,Co,_),M(my,Co,null),e(Co,oGe),e(Co,gy),e(gy,rGe),e(gy,S$),e(S$,tGe),e(gy,aGe),e(Co,nGe),e(Co,hy),e(hy,sGe),e(hy,Lee),e(Lee,lGe),e(hy,iGe),e(Co,dGe),e(Co,Er),M(py,Er,null),e(Er,cGe),e(Er,xee),e(xee,fGe),e(Er,mGe),e(Er,vi),e(vi,gGe),e(vi,$ee),e($ee,hGe),e(vi,pGe),e(vi,kee),e(kee,uGe),e(vi,_Ge),e(Er,bGe),e(Er,A),e(A,Tf),e(Tf,See),e(See,vGe),e(Tf,FGe),e(Tf,R$),e(R$,TGe),e(Tf,MGe),e(A,EGe),e(A,Mf),e(Mf,Ree),e(Ree,CGe),e(Mf,wGe),e(Mf,P$),e(P$,AGe),e(Mf,yGe),e(A,LGe),e(A,Ef),e(Ef,Pee),e(Pee,xGe),e(Ef,$Ge),e(Ef,B$),e(B$,kGe),e(Ef,SGe),e(A,RGe),e(A,Cf),e(Cf,Bee),e(Bee,PGe),e(Cf,BGe),e(Cf,I$),e(I$,IGe),e(Cf,qGe),e(A,NGe),e(A,wf),e(wf,Iee),e(Iee,jGe),e(wf,DGe),e(wf,q$),e(q$,GGe),e(wf,OGe),e(A,VGe),e(A,Af),e(Af,qee),e(qee,XGe),e(Af,zGe),e(Af,N$),e(N$,WGe),e(Af,QGe),e(A,HGe),e(A,yf),e(yf,Nee),e(Nee,UGe),e(yf,JGe),e(yf,j$),e(j$,YGe),e(yf,KGe),e(A,ZGe),e(A,Lf),e(Lf,jee),e(jee,eOe),e(Lf,oOe),e(Lf,D$),e(D$,rOe),e(Lf,tOe),e(A,aOe),e(A,xf),e(xf,Dee),e(Dee,nOe),e(xf,sOe),e(xf,G$),e(G$,lOe),e(xf,iOe),e(A,dOe),e(A,$f),e($f,Gee),e(Gee,cOe),e($f,fOe),e($f,O$),e(O$,mOe),e($f,gOe),e(A,hOe),e(A,kf),e(kf,Oee),e(Oee,pOe),e(kf,uOe),e(kf,V$),e(V$,_Oe),e(kf,bOe),e(A,vOe),e(A,Sf),e(Sf,Vee),e(Vee,FOe),e(Sf,TOe),e(Sf,X$),e(X$,MOe),e(Sf,EOe),e(A,COe),e(A,Rf),e(Rf,Xee),e(Xee,wOe),e(Rf,AOe),e(Rf,z$),e(z$,yOe),e(Rf,LOe),e(A,xOe),e(A,Pf),e(Pf,zee),e(zee,$Oe),e(Pf,kOe),e(Pf,W$),e(W$,SOe),e(Pf,ROe),e(A,POe),e(A,Bf),e(Bf,Wee),e(Wee,BOe),e(Bf,IOe),e(Bf,Q$),e(Q$,qOe),e(Bf,NOe),e(A,jOe),e(A,If),e(If,Qee),e(Qee,DOe),e(If,GOe),e(If,H$),e(H$,OOe),e(If,VOe),e(A,XOe),e(A,qf),e(qf,Hee),e(Hee,zOe),e(qf,WOe),e(qf,U$),e(U$,QOe),e(qf,HOe),e(A,UOe),e(A,Nf),e(Nf,Uee),e(Uee,JOe),e(Nf,YOe),e(Nf,J$),e(J$,KOe),e(Nf,ZOe),e(A,eVe),e(A,jf),e(jf,Jee),e(Jee,oVe),e(jf,rVe),e(jf,Y$),e(Y$,tVe),e(jf,aVe),e(A,nVe),e(A,Df),e(Df,Yee),e(Yee,sVe),e(Df,lVe),e(Df,K$),e(K$,iVe),e(Df,dVe),e(A,cVe),e(A,Gf),e(Gf,Kee),e(Kee,fVe),e(Gf,mVe),e(Gf,Z$),e(Z$,gVe),e(Gf,hVe),e(A,pVe),e(A,Of),e(Of,Zee),e(Zee,uVe),e(Of,_Ve),e(Of,ek),e(ek,bVe),e(Of,vVe),e(A,FVe),e(A,Vf),e(Vf,eoe),e(eoe,TVe),e(Vf,MVe),e(Vf,ok),e(ok,EVe),e(Vf,CVe),e(A,wVe),e(A,Xf),e(Xf,ooe),e(ooe,AVe),e(Xf,yVe),e(Xf,rk),e(rk,LVe),e(Xf,xVe),e(A,$Ve),e(A,zf),e(zf,roe),e(roe,kVe),e(zf,SVe),e(zf,tk),e(tk,RVe),e(zf,PVe),e(A,BVe),e(A,Wf),e(Wf,toe),e(toe,IVe),e(Wf,qVe),e(Wf,ak),e(ak,NVe),e(Wf,jVe),e(A,DVe),e(A,Qf),e(Qf,aoe),e(aoe,GVe),e(Qf,OVe),e(Qf,nk),e(nk,VVe),e(Qf,XVe),e(A,zVe),e(A,Hf),e(Hf,noe),e(noe,WVe),e(Hf,QVe),e(Hf,sk),e(sk,HVe),e(Hf,UVe),e(A,JVe),e(A,Uf),e(Uf,soe),e(soe,YVe),e(Uf,KVe),e(Uf,lk),e(lk,ZVe),e(Uf,eXe),e(A,oXe),e(A,Jf),e(Jf,loe),e(loe,rXe),e(Jf,tXe),e(Jf,ik),e(ik,aXe),e(Jf,nXe),e(A,sXe),e(A,Yf),e(Yf,ioe),e(ioe,lXe),e(Yf,iXe),e(Yf,dk),e(dk,dXe),e(Yf,cXe),e(A,fXe),e(A,Kf),e(Kf,doe),e(doe,mXe),e(Kf,gXe),e(Kf,ck),e(ck,hXe),e(Kf,pXe),e(A,uXe),e(A,Zf),e(Zf,coe),e(coe,_Xe),e(Zf,bXe),e(Zf,fk),e(fk,vXe),e(Zf,FXe),e(A,TXe),e(A,em),e(em,foe),e(foe,MXe),e(em,EXe),e(em,mk),e(mk,CXe),e(em,wXe),e(A,AXe),e(A,om),e(om,moe),e(moe,yXe),e(om,LXe),e(om,gk),e(gk,xXe),e(om,$Xe),e(A,kXe),e(A,rm),e(rm,goe),e(goe,SXe),e(rm,RXe),e(rm,hk),e(hk,PXe),e(rm,BXe),e(A,IXe),e(A,tm),e(tm,hoe),e(hoe,qXe),e(tm,NXe),e(tm,pk),e(pk,jXe),e(tm,DXe),e(A,GXe),e(A,am),e(am,poe),e(poe,OXe),e(am,VXe),e(am,uk),e(uk,XXe),e(am,zXe),e(A,WXe),e(A,nm),e(nm,uoe),e(uoe,QXe),e(nm,HXe),e(nm,_k),e(_k,UXe),e(nm,JXe),e(A,YXe),e(A,sm),e(sm,_oe),e(_oe,KXe),e(sm,ZXe),e(sm,bk),e(bk,eze),e(sm,oze),e(A,rze),e(A,lm),e(lm,boe),e(boe,tze),e(lm,aze),e(lm,vk),e(vk,nze),e(lm,sze),e(A,lze),e(A,im),e(im,voe),e(voe,ize),e(im,dze),e(im,Fk),e(Fk,cze),e(im,fze),e(A,mze),e(A,dm),e(dm,Foe),e(Foe,gze),e(dm,hze),e(dm,Tk),e(Tk,pze),e(dm,uze),e(A,_ze),e(A,cm),e(cm,Toe),e(Toe,bze),e(cm,vze),e(cm,Mk),e(Mk,Fze),e(cm,Tze),e(A,Mze),e(A,fm),e(fm,Moe),e(Moe,Eze),e(fm,Cze),e(fm,Ek),e(Ek,wze),e(fm,Aze),e(A,yze),e(A,mm),e(mm,Eoe),e(Eoe,Lze),e(mm,xze),e(mm,Ck),e(Ck,$ze),e(mm,kze),e(A,Sze),e(A,gm),e(gm,Coe),e(Coe,Rze),e(gm,Pze),e(gm,wk),e(wk,Bze),e(gm,Ize),e(A,qze),e(A,hm),e(hm,woe),e(woe,Nze),e(hm,jze),e(hm,Ak),e(Ak,Dze),e(hm,Gze),e(A,Oze),e(A,pm),e(pm,Aoe),e(Aoe,Vze),e(pm,Xze),e(pm,yk),e(yk,zze),e(pm,Wze),e(A,Qze),e(A,um),e(um,yoe),e(yoe,Hze),e(um,Uze),e(um,Lk),e(Lk,Jze),e(um,Yze),e(A,Kze),e(A,_m),e(_m,Loe),e(Loe,Zze),e(_m,eWe),e(_m,xk),e(xk,oWe),e(_m,rWe),e(A,tWe),e(A,bm),e(bm,xoe),e(xoe,aWe),e(bm,nWe),e(bm,$k),e($k,sWe),e(bm,lWe),e(A,iWe),e(A,vm),e(vm,$oe),e($oe,dWe),e(vm,cWe),e(vm,kk),e(kk,fWe),e(vm,mWe),e(A,gWe),e(A,Fm),e(Fm,koe),e(koe,hWe),e(Fm,pWe),e(Fm,Sk),e(Sk,uWe),e(Fm,_We),e(A,bWe),e(A,Tm),e(Tm,Soe),e(Soe,vWe),e(Tm,FWe),e(Tm,Rk),e(Rk,TWe),e(Tm,MWe),e(A,EWe),e(A,Mm),e(Mm,Roe),e(Roe,CWe),e(Mm,wWe),e(Mm,Pk),e(Pk,AWe),e(Mm,yWe),e(A,LWe),e(A,Em),e(Em,Poe),e(Poe,xWe),e(Em,$We),e(Em,Bk),e(Bk,kWe),e(Em,SWe),e(A,RWe),e(A,Cm),e(Cm,Boe),e(Boe,PWe),e(Cm,BWe),e(Cm,Ik),e(Ik,IWe),e(Cm,qWe),e(A,NWe),e(A,wm),e(wm,Ioe),e(Ioe,jWe),e(wm,DWe),e(wm,qk),e(qk,GWe),e(wm,OWe),e(A,VWe),e(A,Am),e(Am,qoe),e(qoe,XWe),e(Am,zWe),e(Am,Nk),e(Nk,WWe),e(Am,QWe),e(A,HWe),e(A,ym),e(ym,Noe),e(Noe,UWe),e(ym,JWe),e(ym,jk),e(jk,YWe),e(ym,KWe),e(A,ZWe),e(A,Lm),e(Lm,joe),e(joe,eQe),e(Lm,oQe),e(Lm,Dk),e(Dk,rQe),e(Lm,tQe),e(A,aQe),e(A,xm),e(xm,Doe),e(Doe,nQe),e(xm,sQe),e(xm,Gk),e(Gk,lQe),e(xm,iQe),e(A,dQe),e(A,$m),e($m,Goe),e(Goe,cQe),e($m,fQe),e($m,Ok),e(Ok,mQe),e($m,gQe),e(A,hQe),e(A,km),e(km,Ooe),e(Ooe,pQe),e(km,uQe),e(km,Vk),e(Vk,_Qe),e(km,bQe),e(A,vQe),e(A,Sm),e(Sm,Voe),e(Voe,FQe),e(Sm,TQe),e(Sm,Xk),e(Xk,MQe),e(Sm,EQe),e(A,CQe),e(A,Rm),e(Rm,Xoe),e(Xoe,wQe),e(Rm,AQe),e(Rm,zk),e(zk,yQe),e(Rm,LQe),e(A,xQe),e(A,Pm),e(Pm,zoe),e(zoe,$Qe),e(Pm,kQe),e(Pm,Wk),e(Wk,SQe),e(Pm,RQe),e(A,PQe),e(A,Bm),e(Bm,Woe),e(Woe,BQe),e(Bm,IQe),e(Bm,Qk),e(Qk,qQe),e(Bm,NQe),e(A,jQe),e(A,Im),e(Im,Qoe),e(Qoe,DQe),e(Im,GQe),e(Im,Hk),e(Hk,OQe),e(Im,VQe),e(A,XQe),e(A,qm),e(qm,Hoe),e(Hoe,zQe),e(qm,WQe),e(qm,Uk),e(Uk,QQe),e(qm,HQe),e(A,UQe),e(A,Nm),e(Nm,Uoe),e(Uoe,JQe),e(Nm,YQe),e(Nm,Jk),e(Jk,KQe),e(Nm,ZQe),e(A,eHe),e(A,jm),e(jm,Joe),e(Joe,oHe),e(jm,rHe),e(jm,Yk),e(Yk,tHe),e(jm,aHe),e(A,nHe),e(A,Dm),e(Dm,Yoe),e(Yoe,sHe),e(Dm,lHe),e(Dm,Kk),e(Kk,iHe),e(Dm,dHe),e(A,cHe),e(A,Gm),e(Gm,Koe),e(Koe,fHe),e(Gm,mHe),e(Gm,Zk),e(Zk,gHe),e(Gm,hHe),e(A,pHe),e(A,Om),e(Om,Zoe),e(Zoe,uHe),e(Om,_He),e(Om,eS),e(eS,bHe),e(Om,vHe),e(A,FHe),e(A,Vm),e(Vm,ere),e(ere,THe),e(Vm,MHe),e(Vm,oS),e(oS,EHe),e(Vm,CHe),e(A,wHe),e(A,Xm),e(Xm,ore),e(ore,AHe),e(Xm,yHe),e(Xm,rS),e(rS,LHe),e(Xm,xHe),e(A,$He),e(A,zm),e(zm,rre),e(rre,kHe),e(zm,SHe),e(zm,tS),e(tS,RHe),e(zm,PHe),e(A,BHe),e(A,Wm),e(Wm,tre),e(tre,IHe),e(Wm,qHe),e(Wm,aS),e(aS,NHe),e(Wm,jHe),e(A,DHe),e(A,Qm),e(Qm,are),e(are,GHe),e(Qm,OHe),e(Qm,nS),e(nS,VHe),e(Qm,XHe),e(A,zHe),e(A,Hm),e(Hm,nre),e(nre,WHe),e(Hm,QHe),e(Hm,sS),e(sS,HHe),e(Hm,UHe),e(A,JHe),e(A,Um),e(Um,sre),e(sre,YHe),e(Um,KHe),e(Um,lS),e(lS,ZHe),e(Um,eUe),e(A,oUe),e(A,Jm),e(Jm,lre),e(lre,rUe),e(Jm,tUe),e(Jm,iS),e(iS,aUe),e(Jm,nUe),e(A,sUe),e(A,Ym),e(Ym,ire),e(ire,lUe),e(Ym,iUe),e(Ym,dS),e(dS,dUe),e(Ym,cUe),e(A,fUe),e(A,Km),e(Km,dre),e(dre,mUe),e(Km,gUe),e(Km,cS),e(cS,hUe),e(Km,pUe),e(A,uUe),e(A,Zm),e(Zm,cre),e(cre,_Ue),e(Zm,bUe),e(Zm,fS),e(fS,vUe),e(Zm,FUe),e(A,TUe),e(A,eg),e(eg,fre),e(fre,MUe),e(eg,EUe),e(eg,mS),e(mS,CUe),e(eg,wUe),e(A,AUe),e(A,og),e(og,mre),e(mre,yUe),e(og,LUe),e(og,gS),e(gS,xUe),e(og,$Ue),e(A,kUe),e(A,rg),e(rg,gre),e(gre,SUe),e(rg,RUe),e(rg,hS),e(hS,PUe),e(rg,BUe),e(A,IUe),e(A,tg),e(tg,hre),e(hre,qUe),e(tg,NUe),e(tg,pS),e(pS,jUe),e(tg,DUe),e(A,GUe),e(A,ag),e(ag,pre),e(pre,OUe),e(ag,VUe),e(ag,uS),e(uS,XUe),e(ag,zUe),e(A,WUe),e(A,ng),e(ng,ure),e(ure,QUe),e(ng,HUe),e(ng,_S),e(_S,UUe),e(ng,JUe),e(A,YUe),e(A,sg),e(sg,_re),e(_re,KUe),e(sg,ZUe),e(sg,bS),e(bS,eJe),e(sg,oJe),e(A,rJe),e(A,lg),e(lg,bre),e(bre,tJe),e(lg,aJe),e(lg,vS),e(vS,nJe),e(lg,sJe),e(A,lJe),e(A,ig),e(ig,vre),e(vre,iJe),e(ig,dJe),e(ig,FS),e(FS,cJe),e(ig,fJe),e(A,mJe),e(A,dg),e(dg,Fre),e(Fre,gJe),e(dg,hJe),e(dg,TS),e(TS,pJe),e(dg,uJe),e(A,_Je),e(A,cg),e(cg,Tre),e(Tre,bJe),e(cg,vJe),e(cg,MS),e(MS,FJe),e(cg,TJe),e(A,MJe),e(A,fg),e(fg,Mre),e(Mre,EJe),e(fg,CJe),e(fg,ES),e(ES,wJe),e(fg,AJe),e(A,yJe),e(A,mg),e(mg,Ere),e(Ere,LJe),e(mg,xJe),e(mg,CS),e(CS,$Je),e(mg,kJe),e(A,SJe),e(A,gg),e(gg,Cre),e(Cre,RJe),e(gg,PJe),e(gg,wS),e(wS,BJe),e(gg,IJe),e(A,qJe),e(A,hg),e(hg,wre),e(wre,NJe),e(hg,jJe),e(hg,AS),e(AS,DJe),e(hg,GJe),e(A,OJe),e(A,pg),e(pg,Are),e(Are,VJe),e(pg,XJe),e(pg,yS),e(yS,zJe),e(pg,WJe),e(A,QJe),e(A,ug),e(ug,yre),e(yre,HJe),e(ug,UJe),e(ug,LS),e(LS,JJe),e(ug,YJe),e(A,KJe),e(A,_g),e(_g,Lre),e(Lre,ZJe),e(_g,eYe),e(_g,xS),e(xS,oYe),e(_g,rYe),e(Er,tYe),M(bg,Er,null),e(Co,aYe),e(Co,vg),M(uy,vg,null),e(vg,nYe),e(vg,xre),e(xre,sYe),b(f,DIe,_),b(f,Fi,_),e(Fi,Fg),e(Fg,$re),M(_y,$re,null),e(Fi,lYe),e(Fi,kre),e(kre,iYe),b(f,GIe,_),b(f,wo,_),M(by,wo,null),e(wo,dYe),e(wo,vy),e(vy,cYe),e(vy,$S),e($S,fYe),e(vy,mYe),e(wo,gYe),e(wo,Fy),e(Fy,hYe),e(Fy,Sre),e(Sre,pYe),e(Fy,uYe),e(wo,_Ye),e(wo,Cr),M(Ty,Cr,null),e(Cr,bYe),e(Cr,Rre),e(Rre,vYe),e(Cr,FYe),e(Cr,Aa),e(Aa,TYe),e(Aa,Pre),e(Pre,MYe),e(Aa,EYe),e(Aa,Bre),e(Bre,CYe),e(Aa,wYe),e(Aa,Ire),e(Ire,AYe),e(Aa,yYe),e(Cr,LYe),e(Cr,k),e(k,Sn),e(Sn,qre),e(qre,xYe),e(Sn,$Ye),e(Sn,kS),e(kS,kYe),e(Sn,SYe),e(Sn,SS),e(SS,RYe),e(Sn,PYe),e(k,BYe),e(k,Rn),e(Rn,Nre),e(Nre,IYe),e(Rn,qYe),e(Rn,RS),e(RS,NYe),e(Rn,jYe),e(Rn,PS),e(PS,DYe),e(Rn,GYe),e(k,OYe),e(k,Pn),e(Pn,jre),e(jre,VYe),e(Pn,XYe),e(Pn,BS),e(BS,zYe),e(Pn,WYe),e(Pn,IS),e(IS,QYe),e(Pn,HYe),e(k,UYe),e(k,Tg),e(Tg,Dre),e(Dre,JYe),e(Tg,YYe),e(Tg,qS),e(qS,KYe),e(Tg,ZYe),e(k,eKe),e(k,Bn),e(Bn,Gre),e(Gre,oKe),e(Bn,rKe),e(Bn,NS),e(NS,tKe),e(Bn,aKe),e(Bn,jS),e(jS,nKe),e(Bn,sKe),e(k,lKe),e(k,Mg),e(Mg,Ore),e(Ore,iKe),e(Mg,dKe),e(Mg,DS),e(DS,cKe),e(Mg,fKe),e(k,mKe),e(k,Eg),e(Eg,Vre),e(Vre,gKe),e(Eg,hKe),e(Eg,GS),e(GS,pKe),e(Eg,uKe),e(k,_Ke),e(k,Cg),e(Cg,Xre),e(Xre,bKe),e(Cg,vKe),e(Cg,OS),e(OS,FKe),e(Cg,TKe),e(k,MKe),e(k,In),e(In,zre),e(zre,EKe),e(In,CKe),e(In,VS),e(VS,wKe),e(In,AKe),e(In,XS),e(XS,yKe),e(In,LKe),e(k,xKe),e(k,qn),e(qn,Wre),e(Wre,$Ke),e(qn,kKe),e(qn,zS),e(zS,SKe),e(qn,RKe),e(qn,WS),e(WS,PKe),e(qn,BKe),e(k,IKe),e(k,Nn),e(Nn,Qre),e(Qre,qKe),e(Nn,NKe),e(Nn,QS),e(QS,jKe),e(Nn,DKe),e(Nn,HS),e(HS,GKe),e(Nn,OKe),e(k,VKe),e(k,wg),e(wg,Hre),e(Hre,XKe),e(wg,zKe),e(wg,US),e(US,WKe),e(wg,QKe),e(k,HKe),e(k,Ag),e(Ag,Ure),e(Ure,UKe),e(Ag,JKe),e(Ag,JS),e(JS,YKe),e(Ag,KKe),e(k,ZKe),e(k,jn),e(jn,Jre),e(Jre,eZe),e(jn,oZe),e(jn,YS),e(YS,rZe),e(jn,tZe),e(jn,KS),e(KS,aZe),e(jn,nZe),e(k,sZe),e(k,yg),e(yg,Yre),e(Yre,lZe),e(yg,iZe),e(yg,ZS),e(ZS,dZe),e(yg,cZe),e(k,fZe),e(k,Dn),e(Dn,Kre),e(Kre,mZe),e(Dn,gZe),e(Dn,eR),e(eR,hZe),e(Dn,pZe),e(Dn,oR),e(oR,uZe),e(Dn,_Ze),e(k,bZe),e(k,Gn),e(Gn,Zre),e(Zre,vZe),e(Gn,FZe),e(Gn,rR),e(rR,TZe),e(Gn,MZe),e(Gn,tR),e(tR,EZe),e(Gn,CZe),e(k,wZe),e(k,On),e(On,ete),e(ete,AZe),e(On,yZe),e(On,aR),e(aR,LZe),e(On,xZe),e(On,nR),e(nR,$Ze),e(On,kZe),e(k,SZe),e(k,Lg),e(Lg,ote),e(ote,RZe),e(Lg,PZe),e(Lg,sR),e(sR,BZe),e(Lg,IZe),e(k,qZe),e(k,Vn),e(Vn,rte),e(rte,NZe),e(Vn,jZe),e(Vn,lR),e(lR,DZe),e(Vn,GZe),e(Vn,iR),e(iR,OZe),e(Vn,VZe),e(k,XZe),e(k,Xn),e(Xn,tte),e(tte,zZe),e(Xn,WZe),e(Xn,dR),e(dR,QZe),e(Xn,HZe),e(Xn,cR),e(cR,UZe),e(Xn,JZe),e(k,YZe),e(k,zn),e(zn,ate),e(ate,KZe),e(zn,ZZe),e(zn,fR),e(fR,eeo),e(zn,oeo),e(zn,mR),e(mR,reo),e(zn,teo),e(k,aeo),e(k,Wn),e(Wn,nte),e(nte,neo),e(Wn,seo),e(Wn,gR),e(gR,leo),e(Wn,ieo),e(Wn,hR),e(hR,deo),e(Wn,ceo),e(k,feo),e(k,Qn),e(Qn,ste),e(ste,meo),e(Qn,geo),e(Qn,pR),e(pR,heo),e(Qn,peo),e(Qn,uR),e(uR,ueo),e(Qn,_eo),e(k,beo),e(k,Hn),e(Hn,lte),e(lte,veo),e(Hn,Feo),e(Hn,_R),e(_R,Teo),e(Hn,Meo),e(Hn,bR),e(bR,Eeo),e(Hn,Ceo),e(k,weo),e(k,xg),e(xg,ite),e(ite,Aeo),e(xg,yeo),e(xg,vR),e(vR,Leo),e(xg,xeo),e(k,$eo),e(k,Un),e(Un,dte),e(dte,keo),e(Un,Seo),e(Un,FR),e(FR,Reo),e(Un,Peo),e(Un,TR),e(TR,Beo),e(Un,Ieo),e(k,qeo),e(k,$g),e($g,cte),e(cte,Neo),e($g,jeo),e($g,MR),e(MR,Deo),e($g,Geo),e(k,Oeo),e(k,Jn),e(Jn,fte),e(fte,Veo),e(Jn,Xeo),e(Jn,ER),e(ER,zeo),e(Jn,Weo),e(Jn,CR),e(CR,Qeo),e(Jn,Heo),e(k,Ueo),e(k,Yn),e(Yn,mte),e(mte,Jeo),e(Yn,Yeo),e(Yn,wR),e(wR,Keo),e(Yn,Zeo),e(Yn,AR),e(AR,eoo),e(Yn,ooo),e(k,roo),e(k,Kn),e(Kn,gte),e(gte,too),e(Kn,aoo),e(Kn,yR),e(yR,noo),e(Kn,soo),e(Kn,LR),e(LR,loo),e(Kn,ioo),e(k,doo),e(k,Zn),e(Zn,hte),e(hte,coo),e(Zn,foo),e(Zn,xR),e(xR,moo),e(Zn,goo),e(Zn,$R),e($R,hoo),e(Zn,poo),e(k,uoo),e(k,es),e(es,pte),e(pte,_oo),e(es,boo),e(es,kR),e(kR,voo),e(es,Foo),e(es,SR),e(SR,Too),e(es,Moo),e(k,Eoo),e(k,kg),e(kg,ute),e(ute,Coo),e(kg,woo),e(kg,RR),e(RR,Aoo),e(kg,yoo),e(k,Loo),e(k,os),e(os,_te),e(_te,xoo),e(os,$oo),e(os,PR),e(PR,koo),e(os,Soo),e(os,BR),e(BR,Roo),e(os,Poo),e(k,Boo),e(k,rs),e(rs,bte),e(bte,Ioo),e(rs,qoo),e(rs,IR),e(IR,Noo),e(rs,joo),e(rs,qR),e(qR,Doo),e(rs,Goo),e(k,Ooo),e(k,ts),e(ts,vte),e(vte,Voo),e(ts,Xoo),e(ts,NR),e(NR,zoo),e(ts,Woo),e(ts,jR),e(jR,Qoo),e(ts,Hoo),e(k,Uoo),e(k,as),e(as,Fte),e(Fte,Joo),e(as,Yoo),e(as,DR),e(DR,Koo),e(as,Zoo),e(as,GR),e(GR,ero),e(as,oro),e(k,rro),e(k,ns),e(ns,Tte),e(Tte,tro),e(ns,aro),e(ns,OR),e(OR,nro),e(ns,sro),e(ns,VR),e(VR,lro),e(ns,iro),e(k,dro),e(k,ss),e(ss,Mte),e(Mte,cro),e(ss,fro),e(ss,XR),e(XR,mro),e(ss,gro),e(ss,zR),e(zR,hro),e(ss,pro),e(k,uro),e(k,Sg),e(Sg,Ete),e(Ete,_ro),e(Sg,bro),e(Sg,WR),e(WR,vro),e(Sg,Fro),e(k,Tro),e(k,ls),e(ls,Cte),e(Cte,Mro),e(ls,Ero),e(ls,QR),e(QR,Cro),e(ls,wro),e(ls,HR),e(HR,Aro),e(ls,yro),e(k,Lro),e(k,Rg),e(Rg,wte),e(wte,xro),e(Rg,$ro),e(Rg,UR),e(UR,kro),e(Rg,Sro),e(k,Rro),e(k,Pg),e(Pg,Ate),e(Ate,Pro),e(Pg,Bro),e(Pg,JR),e(JR,Iro),e(Pg,qro),e(k,Nro),e(k,is),e(is,yte),e(yte,jro),e(is,Dro),e(is,YR),e(YR,Gro),e(is,Oro),e(is,KR),e(KR,Vro),e(is,Xro),e(k,zro),e(k,ds),e(ds,Lte),e(Lte,Wro),e(ds,Qro),e(ds,ZR),e(ZR,Hro),e(ds,Uro),e(ds,eP),e(eP,Jro),e(ds,Yro),e(k,Kro),e(k,cs),e(cs,xte),e(xte,Zro),e(cs,eto),e(cs,oP),e(oP,oto),e(cs,rto),e(cs,rP),e(rP,tto),e(cs,ato),e(k,nto),e(k,Bg),e(Bg,$te),e($te,sto),e(Bg,lto),e(Bg,tP),e(tP,ito),e(Bg,dto),e(k,cto),e(k,fs),e(fs,kte),e(kte,fto),e(fs,mto),e(fs,aP),e(aP,gto),e(fs,hto),e(fs,nP),e(nP,pto),e(fs,uto),e(k,_to),e(k,ms),e(ms,Ste),e(Ste,bto),e(ms,vto),e(ms,sP),e(sP,Fto),e(ms,Tto),e(ms,lP),e(lP,Mto),e(ms,Eto),e(k,Cto),e(k,gs),e(gs,Rte),e(Rte,wto),e(gs,Ato),e(gs,iP),e(iP,yto),e(gs,Lto),e(gs,dP),e(dP,xto),e(gs,$to),e(k,kto),e(k,hs),e(hs,Pte),e(Pte,Sto),e(hs,Rto),e(hs,cP),e(cP,Pto),e(hs,Bto),e(hs,fP),e(fP,Ito),e(hs,qto),e(k,Nto),e(k,ps),e(ps,Bte),e(Bte,jto),e(ps,Dto),e(ps,mP),e(mP,Gto),e(ps,Oto),e(ps,gP),e(gP,Vto),e(ps,Xto),e(k,zto),e(k,Ig),e(Ig,Ite),e(Ite,Wto),e(Ig,Qto),e(Ig,hP),e(hP,Hto),e(Ig,Uto),e(k,Jto),e(k,us),e(us,qte),e(qte,Yto),e(us,Kto),e(us,pP),e(pP,Zto),e(us,eao),e(us,uP),e(uP,oao),e(us,rao),e(k,tao),e(k,qg),e(qg,Nte),e(Nte,aao),e(qg,nao),e(qg,_P),e(_P,sao),e(qg,lao),e(k,iao),e(k,Ng),e(Ng,jte),e(jte,dao),e(Ng,cao),e(Ng,bP),e(bP,fao),e(Ng,mao),e(k,gao),e(k,jg),e(jg,Dte),e(Dte,hao),e(jg,pao),e(jg,vP),e(vP,uao),e(jg,_ao),e(k,bao),e(k,Dg),e(Dg,Gte),e(Gte,vao),e(Dg,Fao),e(Dg,FP),e(FP,Tao),e(Dg,Mao),e(k,Eao),e(k,_s),e(_s,Ote),e(Ote,Cao),e(_s,wao),e(_s,TP),e(TP,Aao),e(_s,yao),e(_s,MP),e(MP,Lao),e(_s,xao),e(k,$ao),e(k,Gg),e(Gg,Vte),e(Vte,kao),e(Gg,Sao),e(Gg,EP),e(EP,Rao),e(Gg,Pao),e(k,Bao),e(k,bs),e(bs,Xte),e(Xte,Iao),e(bs,qao),e(bs,CP),e(CP,Nao),e(bs,jao),e(bs,wP),e(wP,Dao),e(bs,Gao),e(k,Oao),e(k,vs),e(vs,zte),e(zte,Vao),e(vs,Xao),e(vs,AP),e(AP,zao),e(vs,Wao),e(vs,yP),e(yP,Qao),e(vs,Hao),e(k,Uao),e(k,Fs),e(Fs,Wte),e(Wte,Jao),e(Fs,Yao),e(Fs,LP),e(LP,Kao),e(Fs,Zao),e(Fs,xP),e(xP,eno),e(Fs,ono),e(k,rno),e(k,Ts),e(Ts,Qte),e(Qte,tno),e(Ts,ano),e(Ts,$P),e($P,nno),e(Ts,sno),e(Ts,kP),e(kP,lno),e(Ts,ino),e(k,dno),e(k,Ms),e(Ms,Hte),e(Hte,cno),e(Ms,fno),e(Ms,SP),e(SP,mno),e(Ms,gno),e(Ms,RP),e(RP,hno),e(Ms,pno),e(k,uno),e(k,Es),e(Es,Ute),e(Ute,_no),e(Es,bno),e(Es,PP),e(PP,vno),e(Es,Fno),e(Es,BP),e(BP,Tno),e(Es,Mno),e(k,Eno),e(k,Og),e(Og,Jte),e(Jte,Cno),e(Og,wno),e(Og,IP),e(IP,Ano),e(Og,yno),e(k,Lno),e(k,Vg),e(Vg,Yte),e(Yte,xno),e(Vg,$no),e(Vg,qP),e(qP,kno),e(Vg,Sno),e(k,Rno),e(k,Cs),e(Cs,Kte),e(Kte,Pno),e(Cs,Bno),e(Cs,NP),e(NP,Ino),e(Cs,qno),e(Cs,jP),e(jP,Nno),e(Cs,jno),e(k,Dno),e(k,ws),e(ws,Zte),e(Zte,Gno),e(ws,Ono),e(ws,DP),e(DP,Vno),e(ws,Xno),e(ws,GP),e(GP,zno),e(ws,Wno),e(k,Qno),e(k,As),e(As,eae),e(eae,Hno),e(As,Uno),e(As,OP),e(OP,Jno),e(As,Yno),e(As,VP),e(VP,Kno),e(As,Zno),e(k,eso),e(k,Xg),e(Xg,oae),e(oae,oso),e(Xg,rso),e(Xg,XP),e(XP,tso),e(Xg,aso),e(k,nso),e(k,zg),e(zg,rae),e(rae,sso),e(zg,lso),e(zg,zP),e(zP,iso),e(zg,dso),e(k,cso),e(k,Wg),e(Wg,tae),e(tae,fso),e(Wg,mso),e(Wg,WP),e(WP,gso),e(Wg,hso),e(k,pso),e(k,ys),e(ys,aae),e(aae,uso),e(ys,_so),e(ys,QP),e(QP,bso),e(ys,vso),e(ys,HP),e(HP,Fso),e(ys,Tso),e(k,Mso),e(k,Qg),e(Qg,nae),e(nae,Eso),e(Qg,Cso),e(Qg,UP),e(UP,wso),e(Qg,Aso),e(k,yso),e(k,Hg),e(Hg,sae),e(sae,Lso),e(Hg,xso),e(Hg,JP),e(JP,$so),e(Hg,kso),e(k,Sso),e(k,Ug),e(Ug,lae),e(lae,Rso),e(Ug,Pso),e(Ug,YP),e(YP,Bso),e(Ug,Iso),e(k,qso),e(k,Ls),e(Ls,iae),e(iae,Nso),e(Ls,jso),e(Ls,KP),e(KP,Dso),e(Ls,Gso),e(Ls,ZP),e(ZP,Oso),e(Ls,Vso),e(k,Xso),e(k,Jg),e(Jg,dae),e(dae,zso),e(Jg,Wso),e(Jg,eB),e(eB,Qso),e(Jg,Hso),e(k,Uso),e(k,Yg),e(Yg,cae),e(cae,Jso),e(Yg,Yso),e(Yg,oB),e(oB,Kso),e(Yg,Zso),e(k,elo),e(k,xs),e(xs,fae),e(fae,olo),e(xs,rlo),e(xs,rB),e(rB,tlo),e(xs,alo),e(xs,tB),e(tB,nlo),e(xs,slo),e(k,llo),e(k,$s),e($s,mae),e(mae,ilo),e($s,dlo),e($s,aB),e(aB,clo),e($s,flo),e($s,nB),e(nB,mlo),e($s,glo),e(k,hlo),e(k,ks),e(ks,gae),e(gae,plo),e(ks,ulo),e(ks,sB),e(sB,_lo),e(ks,blo),e(ks,lB),e(lB,vlo),e(ks,Flo),e(k,Tlo),e(k,Ss),e(Ss,hae),e(hae,Mlo),e(Ss,Elo),e(Ss,iB),e(iB,Clo),e(Ss,wlo),e(Ss,dB),e(dB,Alo),e(Ss,ylo),e(Cr,Llo),M(Kg,Cr,null),e(wo,xlo),e(wo,Zg),M(My,Zg,null),e(Zg,$lo),e(Zg,pae),e(pae,klo),b(f,OIe,_),b(f,Ti,_),e(Ti,eh),e(eh,uae),M(Ey,uae,null),e(Ti,Slo),e(Ti,_ae),e(_ae,Rlo),b(f,VIe,_),b(f,Ao,_),M(Cy,Ao,null),e(Ao,Plo),e(Ao,wy),e(wy,Blo),e(wy,cB),e(cB,Ilo),e(wy,qlo),e(Ao,Nlo),e(Ao,Ay),e(Ay,jlo),e(Ay,bae),e(bae,Dlo),e(Ay,Glo),e(Ao,Olo),e(Ao,He),M(yy,He,null),e(He,Vlo),e(He,vae),e(vae,Xlo),e(He,zlo),e(He,ya),e(ya,Wlo),e(ya,Fae),e(Fae,Qlo),e(ya,Hlo),e(ya,Tae),e(Tae,Ulo),e(ya,Jlo),e(ya,Mae),e(Mae,Ylo),e(ya,Klo),e(He,Zlo),e(He,Z),e(Z,oh),e(oh,Eae),e(Eae,eio),e(oh,oio),e(oh,fB),e(fB,rio),e(oh,tio),e(Z,aio),e(Z,rh),e(rh,Cae),e(Cae,nio),e(rh,sio),e(rh,mB),e(mB,lio),e(rh,iio),e(Z,dio),e(Z,th),e(th,wae),e(wae,cio),e(th,fio),e(th,gB),e(gB,mio),e(th,gio),e(Z,hio),e(Z,ah),e(ah,Aae),e(Aae,pio),e(ah,uio),e(ah,hB),e(hB,_io),e(ah,bio),e(Z,vio),e(Z,nh),e(nh,yae),e(yae,Fio),e(nh,Tio),e(nh,pB),e(pB,Mio),e(nh,Eio),e(Z,Cio),e(Z,sh),e(sh,Lae),e(Lae,wio),e(sh,Aio),e(sh,uB),e(uB,yio),e(sh,Lio),e(Z,xio),e(Z,lh),e(lh,xae),e(xae,$io),e(lh,kio),e(lh,_B),e(_B,Sio),e(lh,Rio),e(Z,Pio),e(Z,ih),e(ih,$ae),e($ae,Bio),e(ih,Iio),e(ih,bB),e(bB,qio),e(ih,Nio),e(Z,jio),e(Z,dh),e(dh,kae),e(kae,Dio),e(dh,Gio),e(dh,vB),e(vB,Oio),e(dh,Vio),e(Z,Xio),e(Z,ch),e(ch,Sae),e(Sae,zio),e(ch,Wio),e(ch,FB),e(FB,Qio),e(ch,Hio),e(Z,Uio),e(Z,fh),e(fh,Rae),e(Rae,Jio),e(fh,Yio),e(fh,TB),e(TB,Kio),e(fh,Zio),e(Z,edo),e(Z,mh),e(mh,Pae),e(Pae,odo),e(mh,rdo),e(mh,MB),e(MB,tdo),e(mh,ado),e(Z,ndo),e(Z,gh),e(gh,Bae),e(Bae,sdo),e(gh,ldo),e(gh,EB),e(EB,ido),e(gh,ddo),e(Z,cdo),e(Z,hh),e(hh,Iae),e(Iae,fdo),e(hh,mdo),e(hh,CB),e(CB,gdo),e(hh,hdo),e(Z,pdo),e(Z,ph),e(ph,qae),e(qae,udo),e(ph,_do),e(ph,wB),e(wB,bdo),e(ph,vdo),e(Z,Fdo),e(Z,uh),e(uh,Nae),e(Nae,Tdo),e(uh,Mdo),e(uh,AB),e(AB,Edo),e(uh,Cdo),e(Z,wdo),e(Z,_h),e(_h,jae),e(jae,Ado),e(_h,ydo),e(_h,yB),e(yB,Ldo),e(_h,xdo),e(Z,$do),e(Z,bh),e(bh,Dae),e(Dae,kdo),e(bh,Sdo),e(bh,LB),e(LB,Rdo),e(bh,Pdo),e(Z,Bdo),e(Z,vh),e(vh,Gae),e(Gae,Ido),e(vh,qdo),e(vh,xB),e(xB,Ndo),e(vh,jdo),e(Z,Ddo),e(Z,Fh),e(Fh,Oae),e(Oae,Gdo),e(Fh,Odo),e(Fh,$B),e($B,Vdo),e(Fh,Xdo),e(Z,zdo),e(Z,Th),e(Th,Vae),e(Vae,Wdo),e(Th,Qdo),e(Th,kB),e(kB,Hdo),e(Th,Udo),e(Z,Jdo),e(Z,Mh),e(Mh,Xae),e(Xae,Ydo),e(Mh,Kdo),e(Mh,SB),e(SB,Zdo),e(Mh,eco),e(Z,oco),e(Z,Eh),e(Eh,zae),e(zae,rco),e(Eh,tco),e(Eh,RB),e(RB,aco),e(Eh,nco),e(Z,sco),e(Z,Ch),e(Ch,Wae),e(Wae,lco),e(Ch,ico),e(Ch,PB),e(PB,dco),e(Ch,cco),e(Z,fco),e(Z,wh),e(wh,Qae),e(Qae,mco),e(wh,gco),e(wh,BB),e(BB,hco),e(wh,pco),e(Z,uco),e(Z,Ah),e(Ah,Hae),e(Hae,_co),e(Ah,bco),e(Ah,IB),e(IB,vco),e(Ah,Fco),e(He,Tco),M(yh,He,null),e(He,Mco),M(Lh,He,null),e(Ao,Eco),e(Ao,xh),M(Ly,xh,null),e(xh,Cco),e(xh,Uae),e(Uae,wco),b(f,XIe,_),b(f,Mi,_),e(Mi,$h),e($h,Jae),M(xy,Jae,null),e(Mi,Aco),e(Mi,Yae),e(Yae,yco),b(f,zIe,_),b(f,yo,_),M($y,yo,null),e(yo,Lco),e(yo,ky),e(ky,xco),e(ky,qB),e(qB,$co),e(ky,kco),e(yo,Sco),e(yo,Sy),e(Sy,Rco),e(Sy,Kae),e(Kae,Pco),e(Sy,Bco),e(yo,Ico),e(yo,Ue),M(Ry,Ue,null),e(Ue,qco),e(Ue,Zae),e(Zae,Nco),e(Ue,jco),e(Ue,Ei),e(Ei,Dco),e(Ei,ene),e(ene,Gco),e(Ei,Oco),e(Ei,one),e(one,Vco),e(Ei,Xco),e(Ue,zco),e(Ue,pe),e(pe,kh),e(kh,rne),e(rne,Wco),e(kh,Qco),e(kh,NB),e(NB,Hco),e(kh,Uco),e(pe,Jco),e(pe,Sh),e(Sh,tne),e(tne,Yco),e(Sh,Kco),e(Sh,ane),e(ane,Zco),e(Sh,efo),e(pe,ofo),e(pe,Rh),e(Rh,nne),e(nne,rfo),e(Rh,tfo),e(Rh,jB),e(jB,afo),e(Rh,nfo),e(pe,sfo),e(pe,Ph),e(Ph,sne),e(sne,lfo),e(Ph,ifo),e(Ph,DB),e(DB,dfo),e(Ph,cfo),e(pe,ffo),e(pe,Bh),e(Bh,lne),e(lne,mfo),e(Bh,gfo),e(Bh,GB),e(GB,hfo),e(Bh,pfo),e(pe,ufo),e(pe,Ih),e(Ih,ine),e(ine,_fo),e(Ih,bfo),e(Ih,OB),e(OB,vfo),e(Ih,Ffo),e(pe,Tfo),e(pe,qh),e(qh,dne),e(dne,Mfo),e(qh,Efo),e(qh,VB),e(VB,Cfo),e(qh,wfo),e(pe,Afo),e(pe,Nh),e(Nh,cne),e(cne,yfo),e(Nh,Lfo),e(Nh,XB),e(XB,xfo),e(Nh,$fo),e(pe,kfo),e(pe,jh),e(jh,fne),e(fne,Sfo),e(jh,Rfo),e(jh,zB),e(zB,Pfo),e(jh,Bfo),e(pe,Ifo),e(pe,Dh),e(Dh,mne),e(mne,qfo),e(Dh,Nfo),e(Dh,WB),e(WB,jfo),e(Dh,Dfo),e(pe,Gfo),e(pe,Gh),e(Gh,gne),e(gne,Ofo),e(Gh,Vfo),e(Gh,QB),e(QB,Xfo),e(Gh,zfo),e(pe,Wfo),e(pe,Oh),e(Oh,hne),e(hne,Qfo),e(Oh,Hfo),e(Oh,HB),e(HB,Ufo),e(Oh,Jfo),e(pe,Yfo),e(pe,Vh),e(Vh,pne),e(pne,Kfo),e(Vh,Zfo),e(Vh,UB),e(UB,emo),e(Vh,omo),e(pe,rmo),e(pe,Xh),e(Xh,une),e(une,tmo),e(Xh,amo),e(Xh,JB),e(JB,nmo),e(Xh,smo),e(pe,lmo),e(pe,zh),e(zh,_ne),e(_ne,imo),e(zh,dmo),e(zh,YB),e(YB,cmo),e(zh,fmo),e(pe,mmo),e(pe,Wh),e(Wh,bne),e(bne,gmo),e(Wh,hmo),e(Wh,KB),e(KB,pmo),e(Wh,umo),e(Ue,_mo),M(Qh,Ue,null),e(Ue,bmo),M(Hh,Ue,null),e(yo,vmo),e(yo,Uh),M(Py,Uh,null),e(Uh,Fmo),e(Uh,vne),e(vne,Tmo),b(f,WIe,_),b(f,Ci,_),e(Ci,Jh),e(Jh,Fne),M(By,Fne,null),e(Ci,Mmo),e(Ci,Tne),e(Tne,Emo),b(f,QIe,_),b(f,Lo,_),M(Iy,Lo,null),e(Lo,Cmo),e(Lo,wi),e(wi,wmo),e(wi,ZB),e(ZB,Amo),e(wi,ymo),e(wi,eI),e(eI,Lmo),e(wi,xmo),e(Lo,$mo),e(Lo,qy),e(qy,kmo),e(qy,Mne),e(Mne,Smo),e(qy,Rmo),e(Lo,Pmo),e(Lo,tt),M(Ny,tt,null),e(tt,Bmo),e(tt,Ene),e(Ene,Imo),e(tt,qmo),e(tt,Ai),e(Ai,Nmo),e(Ai,Cne),e(Cne,jmo),e(Ai,Dmo),e(Ai,oI),e(oI,Gmo),e(Ai,Omo),e(tt,Vmo),M(Yh,tt,null),e(Lo,Xmo),e(Lo,Je),M(jy,Je,null),e(Je,zmo),e(Je,wne),e(wne,Wmo),e(Je,Qmo),e(Je,La),e(La,Hmo),e(La,Ane),e(Ane,Umo),e(La,Jmo),e(La,yne),e(yne,Ymo),e(La,Kmo),e(La,Lne),e(Lne,Zmo),e(La,ego),e(Je,ogo),e(Je,x),e(x,Kh),e(Kh,xne),e(xne,rgo),e(Kh,tgo),e(Kh,rI),e(rI,ago),e(Kh,ngo),e(x,sgo),e(x,Zh),e(Zh,$ne),e($ne,lgo),e(Zh,igo),e(Zh,tI),e(tI,dgo),e(Zh,cgo),e(x,fgo),e(x,ep),e(ep,kne),e(kne,mgo),e(ep,ggo),e(ep,aI),e(aI,hgo),e(ep,pgo),e(x,ugo),e(x,op),e(op,Sne),e(Sne,_go),e(op,bgo),e(op,nI),e(nI,vgo),e(op,Fgo),e(x,Tgo),e(x,rp),e(rp,Rne),e(Rne,Mgo),e(rp,Ego),e(rp,sI),e(sI,Cgo),e(rp,wgo),e(x,Ago),e(x,tp),e(tp,Pne),e(Pne,ygo),e(tp,Lgo),e(tp,lI),e(lI,xgo),e(tp,$go),e(x,kgo),e(x,ap),e(ap,Bne),e(Bne,Sgo),e(ap,Rgo),e(ap,iI),e(iI,Pgo),e(ap,Bgo),e(x,Igo),e(x,np),e(np,Ine),e(Ine,qgo),e(np,Ngo),e(np,dI),e(dI,jgo),e(np,Dgo),e(x,Ggo),e(x,sp),e(sp,qne),e(qne,Ogo),e(sp,Vgo),e(sp,cI),e(cI,Xgo),e(sp,zgo),e(x,Wgo),e(x,lp),e(lp,Nne),e(Nne,Qgo),e(lp,Hgo),e(lp,fI),e(fI,Ugo),e(lp,Jgo),e(x,Ygo),e(x,ip),e(ip,jne),e(jne,Kgo),e(ip,Zgo),e(ip,mI),e(mI,eho),e(ip,oho),e(x,rho),e(x,dp),e(dp,Dne),e(Dne,tho),e(dp,aho),e(dp,gI),e(gI,nho),e(dp,sho),e(x,lho),e(x,cp),e(cp,Gne),e(Gne,iho),e(cp,dho),e(cp,hI),e(hI,cho),e(cp,fho),e(x,mho),e(x,fp),e(fp,One),e(One,gho),e(fp,hho),e(fp,pI),e(pI,pho),e(fp,uho),e(x,_ho),e(x,mp),e(mp,Vne),e(Vne,bho),e(mp,vho),e(mp,uI),e(uI,Fho),e(mp,Tho),e(x,Mho),e(x,gp),e(gp,Xne),e(Xne,Eho),e(gp,Cho),e(gp,_I),e(_I,who),e(gp,Aho),e(x,yho),e(x,hp),e(hp,zne),e(zne,Lho),e(hp,xho),e(hp,bI),e(bI,$ho),e(hp,kho),e(x,Sho),e(x,pp),e(pp,Wne),e(Wne,Rho),e(pp,Pho),e(pp,vI),e(vI,Bho),e(pp,Iho),e(x,qho),e(x,up),e(up,Qne),e(Qne,Nho),e(up,jho),e(up,FI),e(FI,Dho),e(up,Gho),e(x,Oho),e(x,_p),e(_p,Hne),e(Hne,Vho),e(_p,Xho),e(_p,TI),e(TI,zho),e(_p,Who),e(x,Qho),e(x,bp),e(bp,Une),e(Une,Hho),e(bp,Uho),e(bp,MI),e(MI,Jho),e(bp,Yho),e(x,Kho),e(x,vp),e(vp,Jne),e(Jne,Zho),e(vp,epo),e(vp,EI),e(EI,opo),e(vp,rpo),e(x,tpo),e(x,Fp),e(Fp,Yne),e(Yne,apo),e(Fp,npo),e(Fp,CI),e(CI,spo),e(Fp,lpo),e(x,ipo),e(x,Tp),e(Tp,Kne),e(Kne,dpo),e(Tp,cpo),e(Tp,wI),e(wI,fpo),e(Tp,mpo),e(x,gpo),e(x,Mp),e(Mp,Zne),e(Zne,hpo),e(Mp,ppo),e(Mp,AI),e(AI,upo),e(Mp,_po),e(x,bpo),e(x,Ep),e(Ep,ese),e(ese,vpo),e(Ep,Fpo),e(Ep,yI),e(yI,Tpo),e(Ep,Mpo),e(x,Epo),e(x,Cp),e(Cp,ose),e(ose,Cpo),e(Cp,wpo),e(Cp,LI),e(LI,Apo),e(Cp,ypo),e(x,Lpo),e(x,wp),e(wp,rse),e(rse,xpo),e(wp,$po),e(wp,xI),e(xI,kpo),e(wp,Spo),e(x,Rpo),e(x,Ap),e(Ap,tse),e(tse,Ppo),e(Ap,Bpo),e(Ap,$I),e($I,Ipo),e(Ap,qpo),e(x,Npo),e(x,yp),e(yp,ase),e(ase,jpo),e(yp,Dpo),e(yp,kI),e(kI,Gpo),e(yp,Opo),e(x,Vpo),e(x,Lp),e(Lp,nse),e(nse,Xpo),e(Lp,zpo),e(Lp,SI),e(SI,Wpo),e(Lp,Qpo),e(x,Hpo),e(x,Rs),e(Rs,sse),e(sse,Upo),e(Rs,Jpo),e(Rs,RI),e(RI,Ypo),e(Rs,Kpo),e(Rs,PI),e(PI,Zpo),e(Rs,euo),e(x,ouo),e(x,xp),e(xp,lse),e(lse,ruo),e(xp,tuo),e(xp,BI),e(BI,auo),e(xp,nuo),e(x,suo),e(x,$p),e($p,ise),e(ise,luo),e($p,iuo),e($p,II),e(II,duo),e($p,cuo),e(x,fuo),e(x,kp),e(kp,dse),e(dse,muo),e(kp,guo),e(kp,qI),e(qI,huo),e(kp,puo),e(x,uuo),e(x,Sp),e(Sp,cse),e(cse,_uo),e(Sp,buo),e(Sp,NI),e(NI,vuo),e(Sp,Fuo),e(x,Tuo),e(x,Rp),e(Rp,fse),e(fse,Muo),e(Rp,Euo),e(Rp,jI),e(jI,Cuo),e(Rp,wuo),e(x,Auo),e(x,Pp),e(Pp,mse),e(mse,yuo),e(Pp,Luo),e(Pp,DI),e(DI,xuo),e(Pp,$uo),e(x,kuo),e(x,Bp),e(Bp,gse),e(gse,Suo),e(Bp,Ruo),e(Bp,GI),e(GI,Puo),e(Bp,Buo),e(x,Iuo),e(x,Ip),e(Ip,hse),e(hse,quo),e(Ip,Nuo),e(Ip,OI),e(OI,juo),e(Ip,Duo),e(x,Guo),e(x,qp),e(qp,pse),e(pse,Ouo),e(qp,Vuo),e(qp,VI),e(VI,Xuo),e(qp,zuo),e(x,Wuo),e(x,Np),e(Np,use),e(use,Quo),e(Np,Huo),e(Np,XI),e(XI,Uuo),e(Np,Juo),e(x,Yuo),e(x,jp),e(jp,_se),e(_se,Kuo),e(jp,Zuo),e(jp,zI),e(zI,e_o),e(jp,o_o),e(x,r_o),e(x,Dp),e(Dp,bse),e(bse,t_o),e(Dp,a_o),e(Dp,WI),e(WI,n_o),e(Dp,s_o),e(x,l_o),e(x,Gp),e(Gp,vse),e(vse,i_o),e(Gp,d_o),e(Gp,QI),e(QI,c_o),e(Gp,f_o),e(x,m_o),e(x,Op),e(Op,Fse),e(Fse,g_o),e(Op,h_o),e(Op,HI),e(HI,p_o),e(Op,u_o),e(x,__o),e(x,Vp),e(Vp,Tse),e(Tse,b_o),e(Vp,v_o),e(Vp,UI),e(UI,F_o),e(Vp,T_o),e(x,M_o),e(x,Xp),e(Xp,Mse),e(Mse,E_o),e(Xp,C_o),e(Xp,JI),e(JI,w_o),e(Xp,A_o),e(x,y_o),e(x,zp),e(zp,Ese),e(Ese,L_o),e(zp,x_o),e(zp,YI),e(YI,$_o),e(zp,k_o),e(x,S_o),e(x,Wp),e(Wp,Cse),e(Cse,R_o),e(Wp,P_o),e(Wp,KI),e(KI,B_o),e(Wp,I_o),e(x,q_o),e(x,Qp),e(Qp,wse),e(wse,N_o),e(Qp,j_o),e(Qp,ZI),e(ZI,D_o),e(Qp,G_o),e(x,O_o),e(x,Hp),e(Hp,Ase),e(Ase,V_o),e(Hp,X_o),e(Hp,eq),e(eq,z_o),e(Hp,W_o),e(x,Q_o),e(x,Up),e(Up,yse),e(yse,H_o),e(Up,U_o),e(Up,oq),e(oq,J_o),e(Up,Y_o),e(x,K_o),e(x,Jp),e(Jp,Lse),e(Lse,Z_o),e(Jp,e1o),e(Jp,rq),e(rq,o1o),e(Jp,r1o),e(x,t1o),e(x,Yp),e(Yp,xse),e(xse,a1o),e(Yp,n1o),e(Yp,tq),e(tq,s1o),e(Yp,l1o),e(x,i1o),e(x,Kp),e(Kp,$se),e($se,d1o),e(Kp,c1o),e(Kp,aq),e(aq,f1o),e(Kp,m1o),e(x,g1o),e(x,Zp),e(Zp,kse),e(kse,h1o),e(Zp,p1o),e(Zp,nq),e(nq,u1o),e(Zp,_1o),e(x,b1o),e(x,eu),e(eu,Sse),e(Sse,v1o),e(eu,F1o),e(eu,sq),e(sq,T1o),e(eu,M1o),e(x,E1o),e(x,ou),e(ou,Rse),e(Rse,C1o),e(ou,w1o),e(ou,lq),e(lq,A1o),e(ou,y1o),e(x,L1o),e(x,ru),e(ru,Pse),e(Pse,x1o),e(ru,$1o),e(ru,iq),e(iq,k1o),e(ru,S1o),e(x,R1o),e(x,tu),e(tu,Bse),e(Bse,P1o),e(tu,B1o),e(tu,dq),e(dq,I1o),e(tu,q1o),e(x,N1o),e(x,au),e(au,Ise),e(Ise,j1o),e(au,D1o),e(au,cq),e(cq,G1o),e(au,O1o),e(x,V1o),e(x,nu),e(nu,qse),e(qse,X1o),e(nu,z1o),e(nu,fq),e(fq,W1o),e(nu,Q1o),e(x,H1o),e(x,su),e(su,Nse),e(Nse,U1o),e(su,J1o),e(su,mq),e(mq,Y1o),e(su,K1o),e(x,Z1o),e(x,lu),e(lu,jse),e(jse,ebo),e(lu,obo),e(lu,gq),e(gq,rbo),e(lu,tbo),e(x,abo),e(x,iu),e(iu,Dse),e(Dse,nbo),e(iu,sbo),e(iu,hq),e(hq,lbo),e(iu,ibo),e(x,dbo),e(x,du),e(du,Gse),e(Gse,cbo),e(du,fbo),e(du,pq),e(pq,mbo),e(du,gbo),e(x,hbo),e(x,cu),e(cu,Ose),e(Ose,pbo),e(cu,ubo),e(cu,uq),e(uq,_bo),e(cu,bbo),e(x,vbo),e(x,fu),e(fu,Vse),e(Vse,Fbo),e(fu,Tbo),e(fu,_q),e(_q,Mbo),e(fu,Ebo),e(x,Cbo),e(x,mu),e(mu,Xse),e(Xse,wbo),e(mu,Abo),e(mu,bq),e(bq,ybo),e(mu,Lbo),e(x,xbo),e(x,gu),e(gu,zse),e(zse,$bo),e(gu,kbo),e(gu,vq),e(vq,Sbo),e(gu,Rbo),e(x,Pbo),e(x,hu),e(hu,Wse),e(Wse,Bbo),e(hu,Ibo),e(hu,Fq),e(Fq,qbo),e(hu,Nbo),e(x,jbo),e(x,pu),e(pu,Qse),e(Qse,Dbo),e(pu,Gbo),e(pu,Tq),e(Tq,Obo),e(pu,Vbo),e(x,Xbo),e(x,uu),e(uu,Hse),e(Hse,zbo),e(uu,Wbo),e(uu,Mq),e(Mq,Qbo),e(uu,Hbo),e(x,Ubo),e(x,_u),e(_u,Use),e(Use,Jbo),e(_u,Ybo),e(_u,Eq),e(Eq,Kbo),e(_u,Zbo),e(x,e2o),e(x,bu),e(bu,Jse),e(Jse,o2o),e(bu,r2o),e(bu,Cq),e(Cq,t2o),e(bu,a2o),e(x,n2o),e(x,vu),e(vu,Yse),e(Yse,s2o),e(vu,l2o),e(vu,wq),e(wq,i2o),e(vu,d2o),e(x,c2o),e(x,Fu),e(Fu,Kse),e(Kse,f2o),e(Fu,m2o),e(Fu,Aq),e(Aq,g2o),e(Fu,h2o),e(x,p2o),e(x,Tu),e(Tu,Zse),e(Zse,u2o),e(Tu,_2o),e(Tu,yq),e(yq,b2o),e(Tu,v2o),e(x,F2o),e(x,Mu),e(Mu,ele),e(ele,T2o),e(Mu,M2o),e(Mu,Lq),e(Lq,E2o),e(Mu,C2o),e(x,w2o),e(x,Eu),e(Eu,ole),e(ole,A2o),e(Eu,y2o),e(Eu,xq),e(xq,L2o),e(Eu,x2o),e(x,$2o),e(x,Cu),e(Cu,rle),e(rle,k2o),e(Cu,S2o),e(Cu,$q),e($q,R2o),e(Cu,P2o),e(x,B2o),e(x,wu),e(wu,tle),e(tle,I2o),e(wu,q2o),e(wu,kq),e(kq,N2o),e(wu,j2o),e(x,D2o),e(x,Au),e(Au,ale),e(ale,G2o),e(Au,O2o),e(Au,Sq),e(Sq,V2o),e(Au,X2o),e(x,z2o),e(x,yu),e(yu,nle),e(nle,W2o),e(yu,Q2o),e(yu,Rq),e(Rq,H2o),e(yu,U2o),e(x,J2o),e(x,Lu),e(Lu,sle),e(sle,Y2o),e(Lu,K2o),e(Lu,Pq),e(Pq,Z2o),e(Lu,e4o),e(x,o4o),e(x,xu),e(xu,lle),e(lle,r4o),e(xu,t4o),e(xu,Bq),e(Bq,a4o),e(xu,n4o),e(x,s4o),e(x,$u),e($u,ile),e(ile,l4o),e($u,i4o),e($u,Iq),e(Iq,d4o),e($u,c4o),e(x,f4o),e(x,ku),e(ku,dle),e(dle,m4o),e(ku,g4o),e(ku,qq),e(qq,h4o),e(ku,p4o),e(x,u4o),e(x,Su),e(Su,cle),e(cle,_4o),e(Su,b4o),e(Su,Nq),e(Nq,v4o),e(Su,F4o),e(x,T4o),e(x,Ru),e(Ru,fle),e(fle,M4o),e(Ru,E4o),e(Ru,jq),e(jq,C4o),e(Ru,w4o),e(x,A4o),e(x,Pu),e(Pu,mle),e(mle,y4o),e(Pu,L4o),e(Pu,Dq),e(Dq,x4o),e(Pu,$4o),e(x,k4o),e(x,Bu),e(Bu,gle),e(gle,S4o),e(Bu,R4o),e(Bu,Gq),e(Gq,P4o),e(Bu,B4o),e(x,I4o),e(x,Iu),e(Iu,hle),e(hle,q4o),e(Iu,N4o),e(Iu,Oq),e(Oq,j4o),e(Iu,D4o),e(x,G4o),e(x,qu),e(qu,ple),e(ple,O4o),e(qu,V4o),e(qu,Vq),e(Vq,X4o),e(qu,z4o),e(x,W4o),e(x,Nu),e(Nu,ule),e(ule,Q4o),e(Nu,H4o),e(Nu,Xq),e(Xq,U4o),e(Nu,J4o),e(x,Y4o),e(x,ju),e(ju,_le),e(_le,K4o),e(ju,Z4o),e(ju,zq),e(zq,e5o),e(ju,o5o),e(x,r5o),e(x,Du),e(Du,ble),e(ble,t5o),e(Du,a5o),e(Du,Wq),e(Wq,n5o),e(Du,s5o),e(Je,l5o),e(Je,Gu),e(Gu,i5o),e(Gu,vle),e(vle,d5o),e(Gu,c5o),e(Gu,Fle),e(Fle,f5o),e(Je,m5o),M(Ou,Je,null),b(f,HIe,_),b(f,yi,_),e(yi,Vu),e(Vu,Tle),M(Dy,Tle,null),e(yi,g5o),e(yi,Mle),e(Mle,h5o),b(f,UIe,_),b(f,xo,_),M(Gy,xo,null),e(xo,p5o),e(xo,Li),e(Li,u5o),e(Li,Qq),e(Qq,_5o),e(Li,b5o),e(Li,Hq),e(Hq,v5o),e(Li,F5o),e(xo,T5o),e(xo,Oy),e(Oy,M5o),e(Oy,Ele),e(Ele,E5o),e(Oy,C5o),e(xo,w5o),e(xo,at),M(Vy,at,null),e(at,A5o),e(at,Cle),e(Cle,y5o),e(at,L5o),e(at,xi),e(xi,x5o),e(xi,wle),e(wle,$5o),e(xi,k5o),e(xi,Uq),e(Uq,S5o),e(xi,R5o),e(at,P5o),M(Xu,at,null),e(xo,B5o),e(xo,Ye),M(Xy,Ye,null),e(Ye,I5o),e(Ye,Ale),e(Ale,q5o),e(Ye,N5o),e(Ye,xa),e(xa,j5o),e(xa,yle),e(yle,D5o),e(xa,G5o),e(xa,Lle),e(Lle,O5o),e(xa,V5o),e(xa,xle),e(xle,X5o),e(xa,z5o),e(Ye,W5o),e(Ye,G),e(G,zu),e(zu,$le),e($le,Q5o),e(zu,H5o),e(zu,Jq),e(Jq,U5o),e(zu,J5o),e(G,Y5o),e(G,Wu),e(Wu,kle),e(kle,K5o),e(Wu,Z5o),e(Wu,Yq),e(Yq,evo),e(Wu,ovo),e(G,rvo),e(G,Qu),e(Qu,Sle),e(Sle,tvo),e(Qu,avo),e(Qu,Kq),e(Kq,nvo),e(Qu,svo),e(G,lvo),e(G,Hu),e(Hu,Rle),e(Rle,ivo),e(Hu,dvo),e(Hu,Zq),e(Zq,cvo),e(Hu,fvo),e(G,mvo),e(G,Uu),e(Uu,Ple),e(Ple,gvo),e(Uu,hvo),e(Uu,eN),e(eN,pvo),e(Uu,uvo),e(G,_vo),e(G,Ju),e(Ju,Ble),e(Ble,bvo),e(Ju,vvo),e(Ju,oN),e(oN,Fvo),e(Ju,Tvo),e(G,Mvo),e(G,Yu),e(Yu,Ile),e(Ile,Evo),e(Yu,Cvo),e(Yu,rN),e(rN,wvo),e(Yu,Avo),e(G,yvo),e(G,Ku),e(Ku,qle),e(qle,Lvo),e(Ku,xvo),e(Ku,tN),e(tN,$vo),e(Ku,kvo),e(G,Svo),e(G,Zu),e(Zu,Nle),e(Nle,Rvo),e(Zu,Pvo),e(Zu,aN),e(aN,Bvo),e(Zu,Ivo),e(G,qvo),e(G,e_),e(e_,jle),e(jle,Nvo),e(e_,jvo),e(e_,nN),e(nN,Dvo),e(e_,Gvo),e(G,Ovo),e(G,o_),e(o_,Dle),e(Dle,Vvo),e(o_,Xvo),e(o_,sN),e(sN,zvo),e(o_,Wvo),e(G,Qvo),e(G,r_),e(r_,Gle),e(Gle,Hvo),e(r_,Uvo),e(r_,lN),e(lN,Jvo),e(r_,Yvo),e(G,Kvo),e(G,t_),e(t_,Ole),e(Ole,Zvo),e(t_,e3o),e(t_,iN),e(iN,o3o),e(t_,r3o),e(G,t3o),e(G,a_),e(a_,Vle),e(Vle,a3o),e(a_,n3o),e(a_,dN),e(dN,s3o),e(a_,l3o),e(G,i3o),e(G,n_),e(n_,Xle),e(Xle,d3o),e(n_,c3o),e(n_,cN),e(cN,f3o),e(n_,m3o),e(G,g3o),e(G,s_),e(s_,zle),e(zle,h3o),e(s_,p3o),e(s_,fN),e(fN,u3o),e(s_,_3o),e(G,b3o),e(G,l_),e(l_,Wle),e(Wle,v3o),e(l_,F3o),e(l_,mN),e(mN,T3o),e(l_,M3o),e(G,E3o),e(G,i_),e(i_,Qle),e(Qle,C3o),e(i_,w3o),e(i_,gN),e(gN,A3o),e(i_,y3o),e(G,L3o),e(G,d_),e(d_,Hle),e(Hle,x3o),e(d_,$3o),e(d_,hN),e(hN,k3o),e(d_,S3o),e(G,R3o),e(G,c_),e(c_,Ule),e(Ule,P3o),e(c_,B3o),e(c_,pN),e(pN,I3o),e(c_,q3o),e(G,N3o),e(G,f_),e(f_,Jle),e(Jle,j3o),e(f_,D3o),e(f_,uN),e(uN,G3o),e(f_,O3o),e(G,V3o),e(G,m_),e(m_,Yle),e(Yle,X3o),e(m_,z3o),e(m_,_N),e(_N,W3o),e(m_,Q3o),e(G,H3o),e(G,g_),e(g_,Kle),e(Kle,U3o),e(g_,J3o),e(g_,bN),e(bN,Y3o),e(g_,K3o),e(G,Z3o),e(G,h_),e(h_,Zle),e(Zle,eFo),e(h_,oFo),e(h_,vN),e(vN,rFo),e(h_,tFo),e(G,aFo),e(G,p_),e(p_,eie),e(eie,nFo),e(p_,sFo),e(p_,FN),e(FN,lFo),e(p_,iFo),e(G,dFo),e(G,u_),e(u_,oie),e(oie,cFo),e(u_,fFo),e(u_,TN),e(TN,mFo),e(u_,gFo),e(G,hFo),e(G,__),e(__,rie),e(rie,pFo),e(__,uFo),e(__,MN),e(MN,_Fo),e(__,bFo),e(G,vFo),e(G,b_),e(b_,tie),e(tie,FFo),e(b_,TFo),e(b_,EN),e(EN,MFo),e(b_,EFo),e(G,CFo),e(G,v_),e(v_,aie),e(aie,wFo),e(v_,AFo),e(v_,CN),e(CN,yFo),e(v_,LFo),e(G,xFo),e(G,F_),e(F_,nie),e(nie,$Fo),e(F_,kFo),e(F_,wN),e(wN,SFo),e(F_,RFo),e(G,PFo),e(G,T_),e(T_,sie),e(sie,BFo),e(T_,IFo),e(T_,AN),e(AN,qFo),e(T_,NFo),e(G,jFo),e(G,M_),e(M_,lie),e(lie,DFo),e(M_,GFo),e(M_,yN),e(yN,OFo),e(M_,VFo),e(G,XFo),e(G,E_),e(E_,iie),e(iie,zFo),e(E_,WFo),e(E_,LN),e(LN,QFo),e(E_,HFo),e(G,UFo),e(G,C_),e(C_,die),e(die,JFo),e(C_,YFo),e(C_,xN),e(xN,KFo),e(C_,ZFo),e(G,e6o),e(G,w_),e(w_,cie),e(cie,o6o),e(w_,r6o),e(w_,$N),e($N,t6o),e(w_,a6o),e(G,n6o),e(G,A_),e(A_,fie),e(fie,s6o),e(A_,l6o),e(A_,kN),e(kN,i6o),e(A_,d6o),e(G,c6o),e(G,y_),e(y_,mie),e(mie,f6o),e(y_,m6o),e(y_,SN),e(SN,g6o),e(y_,h6o),e(G,p6o),e(G,L_),e(L_,gie),e(gie,u6o),e(L_,_6o),e(L_,RN),e(RN,b6o),e(L_,v6o),e(G,F6o),e(G,x_),e(x_,hie),e(hie,T6o),e(x_,M6o),e(x_,PN),e(PN,E6o),e(x_,C6o),e(G,w6o),e(G,$_),e($_,pie),e(pie,A6o),e($_,y6o),e($_,BN),e(BN,L6o),e($_,x6o),e(G,$6o),e(G,k_),e(k_,uie),e(uie,k6o),e(k_,S6o),e(k_,IN),e(IN,R6o),e(k_,P6o),e(Ye,B6o),e(Ye,S_),e(S_,I6o),e(S_,_ie),e(_ie,q6o),e(S_,N6o),e(S_,bie),e(bie,j6o),e(Ye,D6o),M(R_,Ye,null),b(f,JIe,_),b(f,$i,_),e($i,P_),e(P_,vie),M(zy,vie,null),e($i,G6o),e($i,Fie),e(Fie,O6o),b(f,YIe,_),b(f,$o,_),M(Wy,$o,null),e($o,V6o),e($o,ki),e(ki,X6o),e(ki,qN),e(qN,z6o),e(ki,W6o),e(ki,NN),e(NN,Q6o),e(ki,H6o),e($o,U6o),e($o,Qy),e(Qy,J6o),e(Qy,Tie),e(Tie,Y6o),e(Qy,K6o),e($o,Z6o),e($o,nt),M(Hy,nt,null),e(nt,eTo),e(nt,Mie),e(Mie,oTo),e(nt,rTo),e(nt,Si),e(Si,tTo),e(Si,Eie),e(Eie,aTo),e(Si,nTo),e(Si,jN),e(jN,sTo),e(Si,lTo),e(nt,iTo),M(B_,nt,null),e($o,dTo),e($o,Ke),M(Uy,Ke,null),e(Ke,cTo),e(Ke,Cie),e(Cie,fTo),e(Ke,mTo),e(Ke,$a),e($a,gTo),e($a,wie),e(wie,hTo),e($a,pTo),e($a,Aie),e(Aie,uTo),e($a,_To),e($a,yie),e(yie,bTo),e($a,vTo),e(Ke,FTo),e(Ke,z),e(z,I_),e(I_,Lie),e(Lie,TTo),e(I_,MTo),e(I_,DN),e(DN,ETo),e(I_,CTo),e(z,wTo),e(z,q_),e(q_,xie),e(xie,ATo),e(q_,yTo),e(q_,GN),e(GN,LTo),e(q_,xTo),e(z,$To),e(z,N_),e(N_,$ie),e($ie,kTo),e(N_,STo),e(N_,ON),e(ON,RTo),e(N_,PTo),e(z,BTo),e(z,j_),e(j_,kie),e(kie,ITo),e(j_,qTo),e(j_,VN),e(VN,NTo),e(j_,jTo),e(z,DTo),e(z,D_),e(D_,Sie),e(Sie,GTo),e(D_,OTo),e(D_,XN),e(XN,VTo),e(D_,XTo),e(z,zTo),e(z,G_),e(G_,Rie),e(Rie,WTo),e(G_,QTo),e(G_,zN),e(zN,HTo),e(G_,UTo),e(z,JTo),e(z,O_),e(O_,Pie),e(Pie,YTo),e(O_,KTo),e(O_,WN),e(WN,ZTo),e(O_,eMo),e(z,oMo),e(z,V_),e(V_,Bie),e(Bie,rMo),e(V_,tMo),e(V_,QN),e(QN,aMo),e(V_,nMo),e(z,sMo),e(z,X_),e(X_,Iie),e(Iie,lMo),e(X_,iMo),e(X_,HN),e(HN,dMo),e(X_,cMo),e(z,fMo),e(z,z_),e(z_,qie),e(qie,mMo),e(z_,gMo),e(z_,UN),e(UN,hMo),e(z_,pMo),e(z,uMo),e(z,W_),e(W_,Nie),e(Nie,_Mo),e(W_,bMo),e(W_,JN),e(JN,vMo),e(W_,FMo),e(z,TMo),e(z,Q_),e(Q_,jie),e(jie,MMo),e(Q_,EMo),e(Q_,YN),e(YN,CMo),e(Q_,wMo),e(z,AMo),e(z,H_),e(H_,Die),e(Die,yMo),e(H_,LMo),e(H_,KN),e(KN,xMo),e(H_,$Mo),e(z,kMo),e(z,U_),e(U_,Gie),e(Gie,SMo),e(U_,RMo),e(U_,ZN),e(ZN,PMo),e(U_,BMo),e(z,IMo),e(z,J_),e(J_,Oie),e(Oie,qMo),e(J_,NMo),e(J_,ej),e(ej,jMo),e(J_,DMo),e(z,GMo),e(z,Y_),e(Y_,Vie),e(Vie,OMo),e(Y_,VMo),e(Y_,oj),e(oj,XMo),e(Y_,zMo),e(z,WMo),e(z,K_),e(K_,Xie),e(Xie,QMo),e(K_,HMo),e(K_,rj),e(rj,UMo),e(K_,JMo),e(z,YMo),e(z,Z_),e(Z_,zie),e(zie,KMo),e(Z_,ZMo),e(Z_,tj),e(tj,eEo),e(Z_,oEo),e(z,rEo),e(z,e1),e(e1,Wie),e(Wie,tEo),e(e1,aEo),e(e1,aj),e(aj,nEo),e(e1,sEo),e(z,lEo),e(z,o1),e(o1,Qie),e(Qie,iEo),e(o1,dEo),e(o1,nj),e(nj,cEo),e(o1,fEo),e(z,mEo),e(z,r1),e(r1,Hie),e(Hie,gEo),e(r1,hEo),e(r1,sj),e(sj,pEo),e(r1,uEo),e(z,_Eo),e(z,t1),e(t1,Uie),e(Uie,bEo),e(t1,vEo),e(t1,lj),e(lj,FEo),e(t1,TEo),e(z,MEo),e(z,a1),e(a1,Jie),e(Jie,EEo),e(a1,CEo),e(a1,ij),e(ij,wEo),e(a1,AEo),e(z,yEo),e(z,n1),e(n1,Yie),e(Yie,LEo),e(n1,xEo),e(n1,dj),e(dj,$Eo),e(n1,kEo),e(z,SEo),e(z,s1),e(s1,Kie),e(Kie,REo),e(s1,PEo),e(s1,cj),e(cj,BEo),e(s1,IEo),e(z,qEo),e(z,l1),e(l1,Zie),e(Zie,NEo),e(l1,jEo),e(l1,fj),e(fj,DEo),e(l1,GEo),e(z,OEo),e(z,i1),e(i1,ede),e(ede,VEo),e(i1,XEo),e(i1,mj),e(mj,zEo),e(i1,WEo),e(z,QEo),e(z,d1),e(d1,ode),e(ode,HEo),e(d1,UEo),e(d1,gj),e(gj,JEo),e(d1,YEo),e(z,KEo),e(z,c1),e(c1,rde),e(rde,ZEo),e(c1,eCo),e(c1,hj),e(hj,oCo),e(c1,rCo),e(z,tCo),e(z,f1),e(f1,tde),e(tde,aCo),e(f1,nCo),e(f1,pj),e(pj,sCo),e(f1,lCo),e(z,iCo),e(z,m1),e(m1,ade),e(ade,dCo),e(m1,cCo),e(m1,uj),e(uj,fCo),e(m1,mCo),e(z,gCo),e(z,g1),e(g1,nde),e(nde,hCo),e(g1,pCo),e(g1,_j),e(_j,uCo),e(g1,_Co),e(z,bCo),e(z,h1),e(h1,sde),e(sde,vCo),e(h1,FCo),e(h1,bj),e(bj,TCo),e(h1,MCo),e(z,ECo),e(z,p1),e(p1,lde),e(lde,CCo),e(p1,wCo),e(p1,vj),e(vj,ACo),e(p1,yCo),e(z,LCo),e(z,u1),e(u1,ide),e(ide,xCo),e(u1,$Co),e(u1,Fj),e(Fj,kCo),e(u1,SCo),e(z,RCo),e(z,_1),e(_1,dde),e(dde,PCo),e(_1,BCo),e(_1,Tj),e(Tj,ICo),e(_1,qCo),e(Ke,NCo),e(Ke,b1),e(b1,jCo),e(b1,cde),e(cde,DCo),e(b1,GCo),e(b1,fde),e(fde,OCo),e(Ke,VCo),M(v1,Ke,null),b(f,KIe,_),b(f,Ri,_),e(Ri,F1),e(F1,mde),M(Jy,mde,null),e(Ri,XCo),e(Ri,gde),e(gde,zCo),b(f,ZIe,_),b(f,ko,_),M(Yy,ko,null),e(ko,WCo),e(ko,Pi),e(Pi,QCo),e(Pi,Mj),e(Mj,HCo),e(Pi,UCo),e(Pi,Ej),e(Ej,JCo),e(Pi,YCo),e(ko,KCo),e(ko,Ky),e(Ky,ZCo),e(Ky,hde),e(hde,ewo),e(Ky,owo),e(ko,rwo),e(ko,st),M(Zy,st,null),e(st,two),e(st,pde),e(pde,awo),e(st,nwo),e(st,Bi),e(Bi,swo),e(Bi,ude),e(ude,lwo),e(Bi,iwo),e(Bi,Cj),e(Cj,dwo),e(Bi,cwo),e(st,fwo),M(T1,st,null),e(ko,mwo),e(ko,Ze),M(eL,Ze,null),e(Ze,gwo),e(Ze,_de),e(_de,hwo),e(Ze,pwo),e(Ze,ka),e(ka,uwo),e(ka,bde),e(bde,_wo),e(ka,bwo),e(ka,vde),e(vde,vwo),e(ka,Fwo),e(ka,Fde),e(Fde,Two),e(ka,Mwo),e(Ze,Ewo),e(Ze,W),e(W,M1),e(M1,Tde),e(Tde,Cwo),e(M1,wwo),e(M1,wj),e(wj,Awo),e(M1,ywo),e(W,Lwo),e(W,E1),e(E1,Mde),e(Mde,xwo),e(E1,$wo),e(E1,Aj),e(Aj,kwo),e(E1,Swo),e(W,Rwo),e(W,C1),e(C1,Ede),e(Ede,Pwo),e(C1,Bwo),e(C1,yj),e(yj,Iwo),e(C1,qwo),e(W,Nwo),e(W,w1),e(w1,Cde),e(Cde,jwo),e(w1,Dwo),e(w1,Lj),e(Lj,Gwo),e(w1,Owo),e(W,Vwo),e(W,A1),e(A1,wde),e(wde,Xwo),e(A1,zwo),e(A1,xj),e(xj,Wwo),e(A1,Qwo),e(W,Hwo),e(W,y1),e(y1,Ade),e(Ade,Uwo),e(y1,Jwo),e(y1,$j),e($j,Ywo),e(y1,Kwo),e(W,Zwo),e(W,L1),e(L1,yde),e(yde,eAo),e(L1,oAo),e(L1,kj),e(kj,rAo),e(L1,tAo),e(W,aAo),e(W,x1),e(x1,Lde),e(Lde,nAo),e(x1,sAo),e(x1,Sj),e(Sj,lAo),e(x1,iAo),e(W,dAo),e(W,$1),e($1,xde),e(xde,cAo),e($1,fAo),e($1,Rj),e(Rj,mAo),e($1,gAo),e(W,hAo),e(W,k1),e(k1,$de),e($de,pAo),e(k1,uAo),e(k1,Pj),e(Pj,_Ao),e(k1,bAo),e(W,vAo),e(W,S1),e(S1,kde),e(kde,FAo),e(S1,TAo),e(S1,Bj),e(Bj,MAo),e(S1,EAo),e(W,CAo),e(W,R1),e(R1,Sde),e(Sde,wAo),e(R1,AAo),e(R1,Ij),e(Ij,yAo),e(R1,LAo),e(W,xAo),e(W,P1),e(P1,Rde),e(Rde,$Ao),e(P1,kAo),e(P1,qj),e(qj,SAo),e(P1,RAo),e(W,PAo),e(W,B1),e(B1,Pde),e(Pde,BAo),e(B1,IAo),e(B1,Nj),e(Nj,qAo),e(B1,NAo),e(W,jAo),e(W,I1),e(I1,Bde),e(Bde,DAo),e(I1,GAo),e(I1,jj),e(jj,OAo),e(I1,VAo),e(W,XAo),e(W,q1),e(q1,Ide),e(Ide,zAo),e(q1,WAo),e(q1,Dj),e(Dj,QAo),e(q1,HAo),e(W,UAo),e(W,N1),e(N1,qde),e(qde,JAo),e(N1,YAo),e(N1,Gj),e(Gj,KAo),e(N1,ZAo),e(W,e0o),e(W,j1),e(j1,Nde),e(Nde,o0o),e(j1,r0o),e(j1,Oj),e(Oj,t0o),e(j1,a0o),e(W,n0o),e(W,D1),e(D1,jde),e(jde,s0o),e(D1,l0o),e(D1,Vj),e(Vj,i0o),e(D1,d0o),e(W,c0o),e(W,G1),e(G1,Dde),e(Dde,f0o),e(G1,m0o),e(G1,Xj),e(Xj,g0o),e(G1,h0o),e(W,p0o),e(W,O1),e(O1,Gde),e(Gde,u0o),e(O1,_0o),e(O1,zj),e(zj,b0o),e(O1,v0o),e(W,F0o),e(W,V1),e(V1,Ode),e(Ode,T0o),e(V1,M0o),e(V1,Wj),e(Wj,E0o),e(V1,C0o),e(W,w0o),e(W,X1),e(X1,Vde),e(Vde,A0o),e(X1,y0o),e(X1,Qj),e(Qj,L0o),e(X1,x0o),e(W,$0o),e(W,z1),e(z1,Xde),e(Xde,k0o),e(z1,S0o),e(z1,Hj),e(Hj,R0o),e(z1,P0o),e(W,B0o),e(W,W1),e(W1,zde),e(zde,I0o),e(W1,q0o),e(W1,Uj),e(Uj,N0o),e(W1,j0o),e(W,D0o),e(W,Q1),e(Q1,Wde),e(Wde,G0o),e(Q1,O0o),e(Q1,Jj),e(Jj,V0o),e(Q1,X0o),e(W,z0o),e(W,H1),e(H1,Qde),e(Qde,W0o),e(H1,Q0o),e(H1,Yj),e(Yj,H0o),e(H1,U0o),e(W,J0o),e(W,U1),e(U1,Hde),e(Hde,Y0o),e(U1,K0o),e(U1,Kj),e(Kj,Z0o),e(U1,eyo),e(W,oyo),e(W,J1),e(J1,Ude),e(Ude,ryo),e(J1,tyo),e(J1,Zj),e(Zj,ayo),e(J1,nyo),e(W,syo),e(W,Y1),e(Y1,Jde),e(Jde,lyo),e(Y1,iyo),e(Y1,eD),e(eD,dyo),e(Y1,cyo),e(W,fyo),e(W,K1),e(K1,Yde),e(Yde,myo),e(K1,gyo),e(K1,Kde),e(Kde,hyo),e(K1,pyo),e(W,uyo),e(W,Z1),e(Z1,Zde),e(Zde,_yo),e(Z1,byo),e(Z1,oD),e(oD,vyo),e(Z1,Fyo),e(W,Tyo),e(W,eb),e(eb,ece),e(ece,Myo),e(eb,Eyo),e(eb,rD),e(rD,Cyo),e(eb,wyo),e(W,Ayo),e(W,ob),e(ob,oce),e(oce,yyo),e(ob,Lyo),e(ob,tD),e(tD,xyo),e(ob,$yo),e(W,kyo),e(W,rb),e(rb,rce),e(rce,Syo),e(rb,Ryo),e(rb,aD),e(aD,Pyo),e(rb,Byo),e(Ze,Iyo),e(Ze,tb),e(tb,qyo),e(tb,tce),e(tce,Nyo),e(tb,jyo),e(tb,ace),e(ace,Dyo),e(Ze,Gyo),M(ab,Ze,null),b(f,eqe,_),b(f,Ii,_),e(Ii,nb),e(nb,nce),M(oL,nce,null),e(Ii,Oyo),e(Ii,sce),e(sce,Vyo),b(f,oqe,_),b(f,So,_),M(rL,So,null),e(So,Xyo),e(So,qi),e(qi,zyo),e(qi,nD),e(nD,Wyo),e(qi,Qyo),e(qi,sD),e(sD,Hyo),e(qi,Uyo),e(So,Jyo),e(So,tL),e(tL,Yyo),e(tL,lce),e(lce,Kyo),e(tL,Zyo),e(So,eLo),e(So,lt),M(aL,lt,null),e(lt,oLo),e(lt,ice),e(ice,rLo),e(lt,tLo),e(lt,Ni),e(Ni,aLo),e(Ni,dce),e(dce,nLo),e(Ni,sLo),e(Ni,lD),e(lD,lLo),e(Ni,iLo),e(lt,dLo),M(sb,lt,null),e(So,cLo),e(So,eo),M(nL,eo,null),e(eo,fLo),e(eo,cce),e(cce,mLo),e(eo,gLo),e(eo,Sa),e(Sa,hLo),e(Sa,fce),e(fce,pLo),e(Sa,uLo),e(Sa,mce),e(mce,_Lo),e(Sa,bLo),e(Sa,gce),e(gce,vLo),e(Sa,FLo),e(eo,TLo),e(eo,ue),e(ue,lb),e(lb,hce),e(hce,MLo),e(lb,ELo),e(lb,iD),e(iD,CLo),e(lb,wLo),e(ue,ALo),e(ue,ib),e(ib,pce),e(pce,yLo),e(ib,LLo),e(ib,dD),e(dD,xLo),e(ib,$Lo),e(ue,kLo),e(ue,db),e(db,uce),e(uce,SLo),e(db,RLo),e(db,cD),e(cD,PLo),e(db,BLo),e(ue,ILo),e(ue,cb),e(cb,_ce),e(_ce,qLo),e(cb,NLo),e(cb,fD),e(fD,jLo),e(cb,DLo),e(ue,GLo),e(ue,fb),e(fb,bce),e(bce,OLo),e(fb,VLo),e(fb,mD),e(mD,XLo),e(fb,zLo),e(ue,WLo),e(ue,mb),e(mb,vce),e(vce,QLo),e(mb,HLo),e(mb,gD),e(gD,ULo),e(mb,JLo),e(ue,YLo),e(ue,gb),e(gb,Fce),e(Fce,KLo),e(gb,ZLo),e(gb,hD),e(hD,e8o),e(gb,o8o),e(ue,r8o),e(ue,hb),e(hb,Tce),e(Tce,t8o),e(hb,a8o),e(hb,pD),e(pD,n8o),e(hb,s8o),e(ue,l8o),e(ue,pb),e(pb,Mce),e(Mce,i8o),e(pb,d8o),e(pb,uD),e(uD,c8o),e(pb,f8o),e(ue,m8o),e(ue,ub),e(ub,Ece),e(Ece,g8o),e(ub,h8o),e(ub,_D),e(_D,p8o),e(ub,u8o),e(ue,_8o),e(ue,_b),e(_b,Cce),e(Cce,b8o),e(_b,v8o),e(_b,bD),e(bD,F8o),e(_b,T8o),e(ue,M8o),e(ue,bb),e(bb,wce),e(wce,E8o),e(bb,C8o),e(bb,vD),e(vD,w8o),e(bb,A8o),e(ue,y8o),e(ue,vb),e(vb,Ace),e(Ace,L8o),e(vb,x8o),e(vb,FD),e(FD,$8o),e(vb,k8o),e(ue,S8o),e(ue,Fb),e(Fb,yce),e(yce,R8o),e(Fb,P8o),e(Fb,TD),e(TD,B8o),e(Fb,I8o),e(ue,q8o),e(ue,Tb),e(Tb,Lce),e(Lce,N8o),e(Tb,j8o),e(Tb,MD),e(MD,D8o),e(Tb,G8o),e(ue,O8o),e(ue,Mb),e(Mb,xce),e(xce,V8o),e(Mb,X8o),e(Mb,ED),e(ED,z8o),e(Mb,W8o),e(eo,Q8o),e(eo,Eb),e(Eb,H8o),e(Eb,$ce),e($ce,U8o),e(Eb,J8o),e(Eb,kce),e(kce,Y8o),e(eo,K8o),M(Cb,eo,null),b(f,rqe,_),b(f,ji,_),e(ji,wb),e(wb,Sce),M(sL,Sce,null),e(ji,Z8o),e(ji,Rce),e(Rce,exo),b(f,tqe,_),b(f,Ro,_),M(lL,Ro,null),e(Ro,oxo),e(Ro,Di),e(Di,rxo),e(Di,CD),e(CD,txo),e(Di,axo),e(Di,wD),e(wD,nxo),e(Di,sxo),e(Ro,lxo),e(Ro,iL),e(iL,ixo),e(iL,Pce),e(Pce,dxo),e(iL,cxo),e(Ro,fxo),e(Ro,it),M(dL,it,null),e(it,mxo),e(it,Bce),e(Bce,gxo),e(it,hxo),e(it,Gi),e(Gi,pxo),e(Gi,Ice),e(Ice,uxo),e(Gi,_xo),e(Gi,AD),e(AD,bxo),e(Gi,vxo),e(it,Fxo),M(Ab,it,null),e(Ro,Txo),e(Ro,oo),M(cL,oo,null),e(oo,Mxo),e(oo,qce),e(qce,Exo),e(oo,Cxo),e(oo,Ra),e(Ra,wxo),e(Ra,Nce),e(Nce,Axo),e(Ra,yxo),e(Ra,jce),e(jce,Lxo),e(Ra,xxo),e(Ra,Dce),e(Dce,$xo),e(Ra,kxo),e(oo,Sxo),e(oo,N),e(N,yb),e(yb,Gce),e(Gce,Rxo),e(yb,Pxo),e(yb,yD),e(yD,Bxo),e(yb,Ixo),e(N,qxo),e(N,Lb),e(Lb,Oce),e(Oce,Nxo),e(Lb,jxo),e(Lb,LD),e(LD,Dxo),e(Lb,Gxo),e(N,Oxo),e(N,xb),e(xb,Vce),e(Vce,Vxo),e(xb,Xxo),e(xb,xD),e(xD,zxo),e(xb,Wxo),e(N,Qxo),e(N,$b),e($b,Xce),e(Xce,Hxo),e($b,Uxo),e($b,$D),e($D,Jxo),e($b,Yxo),e(N,Kxo),e(N,kb),e(kb,zce),e(zce,Zxo),e(kb,e7o),e(kb,kD),e(kD,o7o),e(kb,r7o),e(N,t7o),e(N,Sb),e(Sb,Wce),e(Wce,a7o),e(Sb,n7o),e(Sb,SD),e(SD,s7o),e(Sb,l7o),e(N,i7o),e(N,Rb),e(Rb,Qce),e(Qce,d7o),e(Rb,c7o),e(Rb,RD),e(RD,f7o),e(Rb,m7o),e(N,g7o),e(N,Pb),e(Pb,Hce),e(Hce,h7o),e(Pb,p7o),e(Pb,PD),e(PD,u7o),e(Pb,_7o),e(N,b7o),e(N,Bb),e(Bb,Uce),e(Uce,v7o),e(Bb,F7o),e(Bb,BD),e(BD,T7o),e(Bb,M7o),e(N,E7o),e(N,Ib),e(Ib,Jce),e(Jce,C7o),e(Ib,w7o),e(Ib,ID),e(ID,A7o),e(Ib,y7o),e(N,L7o),e(N,qb),e(qb,Yce),e(Yce,x7o),e(qb,$7o),e(qb,qD),e(qD,k7o),e(qb,S7o),e(N,R7o),e(N,Nb),e(Nb,Kce),e(Kce,P7o),e(Nb,B7o),e(Nb,ND),e(ND,I7o),e(Nb,q7o),e(N,N7o),e(N,jb),e(jb,Zce),e(Zce,j7o),e(jb,D7o),e(jb,jD),e(jD,G7o),e(jb,O7o),e(N,V7o),e(N,Db),e(Db,efe),e(efe,X7o),e(Db,z7o),e(Db,DD),e(DD,W7o),e(Db,Q7o),e(N,H7o),e(N,Gb),e(Gb,ofe),e(ofe,U7o),e(Gb,J7o),e(Gb,GD),e(GD,Y7o),e(Gb,K7o),e(N,Z7o),e(N,Ob),e(Ob,rfe),e(rfe,e9o),e(Ob,o9o),e(Ob,OD),e(OD,r9o),e(Ob,t9o),e(N,a9o),e(N,Vb),e(Vb,tfe),e(tfe,n9o),e(Vb,s9o),e(Vb,VD),e(VD,l9o),e(Vb,i9o),e(N,d9o),e(N,Xb),e(Xb,afe),e(afe,c9o),e(Xb,f9o),e(Xb,XD),e(XD,m9o),e(Xb,g9o),e(N,h9o),e(N,zb),e(zb,nfe),e(nfe,p9o),e(zb,u9o),e(zb,zD),e(zD,_9o),e(zb,b9o),e(N,v9o),e(N,Wb),e(Wb,sfe),e(sfe,F9o),e(Wb,T9o),e(Wb,WD),e(WD,M9o),e(Wb,E9o),e(N,C9o),e(N,Qb),e(Qb,lfe),e(lfe,w9o),e(Qb,A9o),e(Qb,QD),e(QD,y9o),e(Qb,L9o),e(N,x9o),e(N,Hb),e(Hb,ife),e(ife,$9o),e(Hb,k9o),e(Hb,HD),e(HD,S9o),e(Hb,R9o),e(N,P9o),e(N,Ub),e(Ub,dfe),e(dfe,B9o),e(Ub,I9o),e(Ub,UD),e(UD,q9o),e(Ub,N9o),e(N,j9o),e(N,Jb),e(Jb,cfe),e(cfe,D9o),e(Jb,G9o),e(Jb,JD),e(JD,O9o),e(Jb,V9o),e(N,X9o),e(N,Yb),e(Yb,ffe),e(ffe,z9o),e(Yb,W9o),e(Yb,YD),e(YD,Q9o),e(Yb,H9o),e(N,U9o),e(N,Kb),e(Kb,mfe),e(mfe,J9o),e(Kb,Y9o),e(Kb,KD),e(KD,K9o),e(Kb,Z9o),e(N,e$o),e(N,Zb),e(Zb,gfe),e(gfe,o$o),e(Zb,r$o),e(Zb,ZD),e(ZD,t$o),e(Zb,a$o),e(N,n$o),e(N,e2),e(e2,hfe),e(hfe,s$o),e(e2,l$o),e(e2,eG),e(eG,i$o),e(e2,d$o),e(N,c$o),e(N,o2),e(o2,pfe),e(pfe,f$o),e(o2,m$o),e(o2,oG),e(oG,g$o),e(o2,h$o),e(N,p$o),e(N,r2),e(r2,ufe),e(ufe,u$o),e(r2,_$o),e(r2,rG),e(rG,b$o),e(r2,v$o),e(N,F$o),e(N,t2),e(t2,_fe),e(_fe,T$o),e(t2,M$o),e(t2,tG),e(tG,E$o),e(t2,C$o),e(N,w$o),e(N,a2),e(a2,bfe),e(bfe,A$o),e(a2,y$o),e(a2,aG),e(aG,L$o),e(a2,x$o),e(N,$$o),e(N,n2),e(n2,vfe),e(vfe,k$o),e(n2,S$o),e(n2,nG),e(nG,R$o),e(n2,P$o),e(N,B$o),e(N,s2),e(s2,Ffe),e(Ffe,I$o),e(s2,q$o),e(s2,sG),e(sG,N$o),e(s2,j$o),e(N,D$o),e(N,l2),e(l2,Tfe),e(Tfe,G$o),e(l2,O$o),e(l2,lG),e(lG,V$o),e(l2,X$o),e(N,z$o),e(N,i2),e(i2,Mfe),e(Mfe,W$o),e(i2,Q$o),e(i2,iG),e(iG,H$o),e(i2,U$o),e(N,J$o),e(N,d2),e(d2,Efe),e(Efe,Y$o),e(d2,K$o),e(d2,dG),e(dG,Z$o),e(d2,eko),e(N,oko),e(N,c2),e(c2,Cfe),e(Cfe,rko),e(c2,tko),e(c2,cG),e(cG,ako),e(c2,nko),e(N,sko),e(N,f2),e(f2,wfe),e(wfe,lko),e(f2,iko),e(f2,fG),e(fG,dko),e(f2,cko),e(N,fko),e(N,m2),e(m2,Afe),e(Afe,mko),e(m2,gko),e(m2,mG),e(mG,hko),e(m2,pko),e(N,uko),e(N,g2),e(g2,yfe),e(yfe,_ko),e(g2,bko),e(g2,gG),e(gG,vko),e(g2,Fko),e(N,Tko),e(N,h2),e(h2,Lfe),e(Lfe,Mko),e(h2,Eko),e(h2,hG),e(hG,Cko),e(h2,wko),e(N,Ako),e(N,p2),e(p2,xfe),e(xfe,yko),e(p2,Lko),e(p2,pG),e(pG,xko),e(p2,$ko),e(N,kko),e(N,u2),e(u2,$fe),e($fe,Sko),e(u2,Rko),e(u2,uG),e(uG,Pko),e(u2,Bko),e(N,Iko),e(N,_2),e(_2,kfe),e(kfe,qko),e(_2,Nko),e(_2,_G),e(_G,jko),e(_2,Dko),e(N,Gko),e(N,b2),e(b2,Sfe),e(Sfe,Oko),e(b2,Vko),e(b2,bG),e(bG,Xko),e(b2,zko),e(oo,Wko),e(oo,v2),e(v2,Qko),e(v2,Rfe),e(Rfe,Hko),e(v2,Uko),e(v2,Pfe),e(Pfe,Jko),e(oo,Yko),M(F2,oo,null),b(f,aqe,_),b(f,Oi,_),e(Oi,T2),e(T2,Bfe),M(fL,Bfe,null),e(Oi,Kko),e(Oi,Ife),e(Ife,Zko),b(f,nqe,_),b(f,Po,_),M(mL,Po,null),e(Po,eSo),e(Po,Vi),e(Vi,oSo),e(Vi,vG),e(vG,rSo),e(Vi,tSo),e(Vi,FG),e(FG,aSo),e(Vi,nSo),e(Po,sSo),e(Po,gL),e(gL,lSo),e(gL,qfe),e(qfe,iSo),e(gL,dSo),e(Po,cSo),e(Po,dt),M(hL,dt,null),e(dt,fSo),e(dt,Nfe),e(Nfe,mSo),e(dt,gSo),e(dt,Xi),e(Xi,hSo),e(Xi,jfe),e(jfe,pSo),e(Xi,uSo),e(Xi,TG),e(TG,_So),e(Xi,bSo),e(dt,vSo),M(M2,dt,null),e(Po,FSo),e(Po,ro),M(pL,ro,null),e(ro,TSo),e(ro,Dfe),e(Dfe,MSo),e(ro,ESo),e(ro,Pa),e(Pa,CSo),e(Pa,Gfe),e(Gfe,wSo),e(Pa,ASo),e(Pa,Ofe),e(Ofe,ySo),e(Pa,LSo),e(Pa,Vfe),e(Vfe,xSo),e(Pa,$So),e(ro,kSo),e(ro,Y),e(Y,E2),e(E2,Xfe),e(Xfe,SSo),e(E2,RSo),e(E2,MG),e(MG,PSo),e(E2,BSo),e(Y,ISo),e(Y,C2),e(C2,zfe),e(zfe,qSo),e(C2,NSo),e(C2,EG),e(EG,jSo),e(C2,DSo),e(Y,GSo),e(Y,w2),e(w2,Wfe),e(Wfe,OSo),e(w2,VSo),e(w2,CG),e(CG,XSo),e(w2,zSo),e(Y,WSo),e(Y,A2),e(A2,Qfe),e(Qfe,QSo),e(A2,HSo),e(A2,wG),e(wG,USo),e(A2,JSo),e(Y,YSo),e(Y,y2),e(y2,Hfe),e(Hfe,KSo),e(y2,ZSo),e(y2,AG),e(AG,eRo),e(y2,oRo),e(Y,rRo),e(Y,L2),e(L2,Ufe),e(Ufe,tRo),e(L2,aRo),e(L2,yG),e(yG,nRo),e(L2,sRo),e(Y,lRo),e(Y,x2),e(x2,Jfe),e(Jfe,iRo),e(x2,dRo),e(x2,LG),e(LG,cRo),e(x2,fRo),e(Y,mRo),e(Y,$2),e($2,Yfe),e(Yfe,gRo),e($2,hRo),e($2,xG),e(xG,pRo),e($2,uRo),e(Y,_Ro),e(Y,k2),e(k2,Kfe),e(Kfe,bRo),e(k2,vRo),e(k2,$G),e($G,FRo),e(k2,TRo),e(Y,MRo),e(Y,S2),e(S2,Zfe),e(Zfe,ERo),e(S2,CRo),e(S2,kG),e(kG,wRo),e(S2,ARo),e(Y,yRo),e(Y,R2),e(R2,eme),e(eme,LRo),e(R2,xRo),e(R2,SG),e(SG,$Ro),e(R2,kRo),e(Y,SRo),e(Y,P2),e(P2,ome),e(ome,RRo),e(P2,PRo),e(P2,RG),e(RG,BRo),e(P2,IRo),e(Y,qRo),e(Y,B2),e(B2,rme),e(rme,NRo),e(B2,jRo),e(B2,PG),e(PG,DRo),e(B2,GRo),e(Y,ORo),e(Y,I2),e(I2,tme),e(tme,VRo),e(I2,XRo),e(I2,BG),e(BG,zRo),e(I2,WRo),e(Y,QRo),e(Y,q2),e(q2,ame),e(ame,HRo),e(q2,URo),e(q2,IG),e(IG,JRo),e(q2,YRo),e(Y,KRo),e(Y,N2),e(N2,nme),e(nme,ZRo),e(N2,ePo),e(N2,qG),e(qG,oPo),e(N2,rPo),e(Y,tPo),e(Y,j2),e(j2,sme),e(sme,aPo),e(j2,nPo),e(j2,NG),e(NG,sPo),e(j2,lPo),e(Y,iPo),e(Y,D2),e(D2,lme),e(lme,dPo),e(D2,cPo),e(D2,jG),e(jG,fPo),e(D2,mPo),e(Y,gPo),e(Y,G2),e(G2,ime),e(ime,hPo),e(G2,pPo),e(G2,DG),e(DG,uPo),e(G2,_Po),e(Y,bPo),e(Y,O2),e(O2,dme),e(dme,vPo),e(O2,FPo),e(O2,GG),e(GG,TPo),e(O2,MPo),e(Y,EPo),e(Y,V2),e(V2,cme),e(cme,CPo),e(V2,wPo),e(V2,OG),e(OG,APo),e(V2,yPo),e(Y,LPo),e(Y,X2),e(X2,fme),e(fme,xPo),e(X2,$Po),e(X2,VG),e(VG,kPo),e(X2,SPo),e(Y,RPo),e(Y,z2),e(z2,mme),e(mme,PPo),e(z2,BPo),e(z2,XG),e(XG,IPo),e(z2,qPo),e(Y,NPo),e(Y,W2),e(W2,gme),e(gme,jPo),e(W2,DPo),e(W2,zG),e(zG,GPo),e(W2,OPo),e(Y,VPo),e(Y,Q2),e(Q2,hme),e(hme,XPo),e(Q2,zPo),e(Q2,WG),e(WG,WPo),e(Q2,QPo),e(Y,HPo),e(Y,H2),e(H2,pme),e(pme,UPo),e(H2,JPo),e(H2,QG),e(QG,YPo),e(H2,KPo),e(Y,ZPo),e(Y,U2),e(U2,ume),e(ume,eBo),e(U2,oBo),e(U2,HG),e(HG,rBo),e(U2,tBo),e(Y,aBo),e(Y,J2),e(J2,_me),e(_me,nBo),e(J2,sBo),e(J2,UG),e(UG,lBo),e(J2,iBo),e(Y,dBo),e(Y,Y2),e(Y2,bme),e(bme,cBo),e(Y2,fBo),e(Y2,JG),e(JG,mBo),e(Y2,gBo),e(ro,hBo),e(ro,K2),e(K2,pBo),e(K2,vme),e(vme,uBo),e(K2,_Bo),e(K2,Fme),e(Fme,bBo),e(ro,vBo),M(Z2,ro,null),b(f,sqe,_),b(f,zi,_),e(zi,e4),e(e4,Tme),M(uL,Tme,null),e(zi,FBo),e(zi,Mme),e(Mme,TBo),b(f,lqe,_),b(f,Bo,_),M(_L,Bo,null),e(Bo,MBo),e(Bo,Wi),e(Wi,EBo),e(Wi,YG),e(YG,CBo),e(Wi,wBo),e(Wi,KG),e(KG,ABo),e(Wi,yBo),e(Bo,LBo),e(Bo,bL),e(bL,xBo),e(bL,Eme),e(Eme,$Bo),e(bL,kBo),e(Bo,SBo),e(Bo,ct),M(vL,ct,null),e(ct,RBo),e(ct,Cme),e(Cme,PBo),e(ct,BBo),e(ct,Qi),e(Qi,IBo),e(Qi,wme),e(wme,qBo),e(Qi,NBo),e(Qi,ZG),e(ZG,jBo),e(Qi,DBo),e(ct,GBo),M(o4,ct,null),e(Bo,OBo),e(Bo,to),M(FL,to,null),e(to,VBo),e(to,Ame),e(Ame,XBo),e(to,zBo),e(to,Ba),e(Ba,WBo),e(Ba,yme),e(yme,QBo),e(Ba,HBo),e(Ba,Lme),e(Lme,UBo),e(Ba,JBo),e(Ba,xme),e(xme,YBo),e(Ba,KBo),e(to,ZBo),e(to,Yr),e(Yr,r4),e(r4,$me),e($me,eIo),e(r4,oIo),e(r4,eO),e(eO,rIo),e(r4,tIo),e(Yr,aIo),e(Yr,t4),e(t4,kme),e(kme,nIo),e(t4,sIo),e(t4,oO),e(oO,lIo),e(t4,iIo),e(Yr,dIo),e(Yr,a4),e(a4,Sme),e(Sme,cIo),e(a4,fIo),e(a4,rO),e(rO,mIo),e(a4,gIo),e(Yr,hIo),e(Yr,n4),e(n4,Rme),e(Rme,pIo),e(n4,uIo),e(n4,tO),e(tO,_Io),e(n4,bIo),e(Yr,vIo),e(Yr,s4),e(s4,Pme),e(Pme,FIo),e(s4,TIo),e(s4,aO),e(aO,MIo),e(s4,EIo),e(to,CIo),e(to,l4),e(l4,wIo),e(l4,Bme),e(Bme,AIo),e(l4,yIo),e(l4,Ime),e(Ime,LIo),e(to,xIo),M(i4,to,null),b(f,iqe,_),b(f,Hi,_),e(Hi,d4),e(d4,qme),M(TL,qme,null),e(Hi,$Io),e(Hi,Nme),e(Nme,kIo),b(f,dqe,_),b(f,Io,_),M(ML,Io,null),e(Io,SIo),e(Io,Ui),e(Ui,RIo),e(Ui,nO),e(nO,PIo),e(Ui,BIo),e(Ui,sO),e(sO,IIo),e(Ui,qIo),e(Io,NIo),e(Io,EL),e(EL,jIo),e(EL,jme),e(jme,DIo),e(EL,GIo),e(Io,OIo),e(Io,ft),M(CL,ft,null),e(ft,VIo),e(ft,Dme),e(Dme,XIo),e(ft,zIo),e(ft,Ji),e(Ji,WIo),e(Ji,Gme),e(Gme,QIo),e(Ji,HIo),e(Ji,lO),e(lO,UIo),e(Ji,JIo),e(ft,YIo),M(c4,ft,null),e(Io,KIo),e(Io,ao),M(wL,ao,null),e(ao,ZIo),e(ao,Ome),e(Ome,eqo),e(ao,oqo),e(ao,Ia),e(Ia,rqo),e(Ia,Vme),e(Vme,tqo),e(Ia,aqo),e(Ia,Xme),e(Xme,nqo),e(Ia,sqo),e(Ia,zme),e(zme,lqo),e(Ia,iqo),e(ao,dqo),e(ao,U),e(U,f4),e(f4,Wme),e(Wme,cqo),e(f4,fqo),e(f4,iO),e(iO,mqo),e(f4,gqo),e(U,hqo),e(U,m4),e(m4,Qme),e(Qme,pqo),e(m4,uqo),e(m4,dO),e(dO,_qo),e(m4,bqo),e(U,vqo),e(U,g4),e(g4,Hme),e(Hme,Fqo),e(g4,Tqo),e(g4,cO),e(cO,Mqo),e(g4,Eqo),e(U,Cqo),e(U,h4),e(h4,Ume),e(Ume,wqo),e(h4,Aqo),e(h4,fO),e(fO,yqo),e(h4,Lqo),e(U,xqo),e(U,p4),e(p4,Jme),e(Jme,$qo),e(p4,kqo),e(p4,mO),e(mO,Sqo),e(p4,Rqo),e(U,Pqo),e(U,u4),e(u4,Yme),e(Yme,Bqo),e(u4,Iqo),e(u4,gO),e(gO,qqo),e(u4,Nqo),e(U,jqo),e(U,_4),e(_4,Kme),e(Kme,Dqo),e(_4,Gqo),e(_4,hO),e(hO,Oqo),e(_4,Vqo),e(U,Xqo),e(U,b4),e(b4,Zme),e(Zme,zqo),e(b4,Wqo),e(b4,pO),e(pO,Qqo),e(b4,Hqo),e(U,Uqo),e(U,v4),e(v4,ege),e(ege,Jqo),e(v4,Yqo),e(v4,uO),e(uO,Kqo),e(v4,Zqo),e(U,eNo),e(U,F4),e(F4,oge),e(oge,oNo),e(F4,rNo),e(F4,_O),e(_O,tNo),e(F4,aNo),e(U,nNo),e(U,T4),e(T4,rge),e(rge,sNo),e(T4,lNo),e(T4,bO),e(bO,iNo),e(T4,dNo),e(U,cNo),e(U,M4),e(M4,tge),e(tge,fNo),e(M4,mNo),e(M4,vO),e(vO,gNo),e(M4,hNo),e(U,pNo),e(U,E4),e(E4,age),e(age,uNo),e(E4,_No),e(E4,FO),e(FO,bNo),e(E4,vNo),e(U,FNo),e(U,C4),e(C4,nge),e(nge,TNo),e(C4,MNo),e(C4,TO),e(TO,ENo),e(C4,CNo),e(U,wNo),e(U,w4),e(w4,sge),e(sge,ANo),e(w4,yNo),e(w4,MO),e(MO,LNo),e(w4,xNo),e(U,$No),e(U,A4),e(A4,lge),e(lge,kNo),e(A4,SNo),e(A4,EO),e(EO,RNo),e(A4,PNo),e(U,BNo),e(U,y4),e(y4,ige),e(ige,INo),e(y4,qNo),e(y4,CO),e(CO,NNo),e(y4,jNo),e(U,DNo),e(U,L4),e(L4,dge),e(dge,GNo),e(L4,ONo),e(L4,wO),e(wO,VNo),e(L4,XNo),e(U,zNo),e(U,x4),e(x4,cge),e(cge,WNo),e(x4,QNo),e(x4,AO),e(AO,HNo),e(x4,UNo),e(U,JNo),e(U,$4),e($4,fge),e(fge,YNo),e($4,KNo),e($4,yO),e(yO,ZNo),e($4,ejo),e(U,ojo),e(U,k4),e(k4,mge),e(mge,rjo),e(k4,tjo),e(k4,LO),e(LO,ajo),e(k4,njo),e(U,sjo),e(U,S4),e(S4,gge),e(gge,ljo),e(S4,ijo),e(S4,xO),e(xO,djo),e(S4,cjo),e(U,fjo),e(U,R4),e(R4,hge),e(hge,mjo),e(R4,gjo),e(R4,$O),e($O,hjo),e(R4,pjo),e(U,ujo),e(U,P4),e(P4,pge),e(pge,_jo),e(P4,bjo),e(P4,kO),e(kO,vjo),e(P4,Fjo),e(U,Tjo),e(U,B4),e(B4,uge),e(uge,Mjo),e(B4,Ejo),e(B4,SO),e(SO,Cjo),e(B4,wjo),e(U,Ajo),e(U,I4),e(I4,_ge),e(_ge,yjo),e(I4,Ljo),e(I4,RO),e(RO,xjo),e(I4,$jo),e(U,kjo),e(U,q4),e(q4,bge),e(bge,Sjo),e(q4,Rjo),e(q4,PO),e(PO,Pjo),e(q4,Bjo),e(U,Ijo),e(U,N4),e(N4,vge),e(vge,qjo),e(N4,Njo),e(N4,BO),e(BO,jjo),e(N4,Djo),e(U,Gjo),e(U,j4),e(j4,Fge),e(Fge,Ojo),e(j4,Vjo),e(j4,IO),e(IO,Xjo),e(j4,zjo),e(U,Wjo),e(U,D4),e(D4,Tge),e(Tge,Qjo),e(D4,Hjo),e(D4,qO),e(qO,Ujo),e(D4,Jjo),e(U,Yjo),e(U,G4),e(G4,Mge),e(Mge,Kjo),e(G4,Zjo),e(G4,NO),e(NO,eDo),e(G4,oDo),e(U,rDo),e(U,O4),e(O4,Ege),e(Ege,tDo),e(O4,aDo),e(O4,jO),e(jO,nDo),e(O4,sDo),e(U,lDo),e(U,V4),e(V4,Cge),e(Cge,iDo),e(V4,dDo),e(V4,DO),e(DO,cDo),e(V4,fDo),e(ao,mDo),e(ao,X4),e(X4,gDo),e(X4,wge),e(wge,hDo),e(X4,pDo),e(X4,Age),e(Age,uDo),e(ao,_Do),M(z4,ao,null),b(f,cqe,_),b(f,Yi,_),e(Yi,W4),e(W4,yge),M(AL,yge,null),e(Yi,bDo),e(Yi,Lge),e(Lge,vDo),b(f,fqe,_),b(f,qo,_),M(yL,qo,null),e(qo,FDo),e(qo,Ki),e(Ki,TDo),e(Ki,GO),e(GO,MDo),e(Ki,EDo),e(Ki,OO),e(OO,CDo),e(Ki,wDo),e(qo,ADo),e(qo,LL),e(LL,yDo),e(LL,xge),e(xge,LDo),e(LL,xDo),e(qo,$Do),e(qo,mt),M(xL,mt,null),e(mt,kDo),e(mt,$ge),e($ge,SDo),e(mt,RDo),e(mt,Zi),e(Zi,PDo),e(Zi,kge),e(kge,BDo),e(Zi,IDo),e(Zi,VO),e(VO,qDo),e(Zi,NDo),e(mt,jDo),M(Q4,mt,null),e(qo,DDo),e(qo,no),M($L,no,null),e(no,GDo),e(no,Sge),e(Sge,ODo),e(no,VDo),e(no,qa),e(qa,XDo),e(qa,Rge),e(Rge,zDo),e(qa,WDo),e(qa,Pge),e(Pge,QDo),e(qa,HDo),e(qa,Bge),e(Bge,UDo),e(qa,JDo),e(no,YDo),e(no,V),e(V,H4),e(H4,Ige),e(Ige,KDo),e(H4,ZDo),e(H4,XO),e(XO,eGo),e(H4,oGo),e(V,rGo),e(V,U4),e(U4,qge),e(qge,tGo),e(U4,aGo),e(U4,zO),e(zO,nGo),e(U4,sGo),e(V,lGo),e(V,J4),e(J4,Nge),e(Nge,iGo),e(J4,dGo),e(J4,WO),e(WO,cGo),e(J4,fGo),e(V,mGo),e(V,Y4),e(Y4,jge),e(jge,gGo),e(Y4,hGo),e(Y4,QO),e(QO,pGo),e(Y4,uGo),e(V,_Go),e(V,K4),e(K4,Dge),e(Dge,bGo),e(K4,vGo),e(K4,HO),e(HO,FGo),e(K4,TGo),e(V,MGo),e(V,Z4),e(Z4,Gge),e(Gge,EGo),e(Z4,CGo),e(Z4,UO),e(UO,wGo),e(Z4,AGo),e(V,yGo),e(V,e5),e(e5,Oge),e(Oge,LGo),e(e5,xGo),e(e5,JO),e(JO,$Go),e(e5,kGo),e(V,SGo),e(V,o5),e(o5,Vge),e(Vge,RGo),e(o5,PGo),e(o5,YO),e(YO,BGo),e(o5,IGo),e(V,qGo),e(V,r5),e(r5,Xge),e(Xge,NGo),e(r5,jGo),e(r5,KO),e(KO,DGo),e(r5,GGo),e(V,OGo),e(V,t5),e(t5,zge),e(zge,VGo),e(t5,XGo),e(t5,ZO),e(ZO,zGo),e(t5,WGo),e(V,QGo),e(V,a5),e(a5,Wge),e(Wge,HGo),e(a5,UGo),e(a5,eV),e(eV,JGo),e(a5,YGo),e(V,KGo),e(V,n5),e(n5,Qge),e(Qge,ZGo),e(n5,eOo),e(n5,oV),e(oV,oOo),e(n5,rOo),e(V,tOo),e(V,s5),e(s5,Hge),e(Hge,aOo),e(s5,nOo),e(s5,rV),e(rV,sOo),e(s5,lOo),e(V,iOo),e(V,l5),e(l5,Uge),e(Uge,dOo),e(l5,cOo),e(l5,tV),e(tV,fOo),e(l5,mOo),e(V,gOo),e(V,i5),e(i5,Jge),e(Jge,hOo),e(i5,pOo),e(i5,aV),e(aV,uOo),e(i5,_Oo),e(V,bOo),e(V,d5),e(d5,Yge),e(Yge,vOo),e(d5,FOo),e(d5,nV),e(nV,TOo),e(d5,MOo),e(V,EOo),e(V,c5),e(c5,Kge),e(Kge,COo),e(c5,wOo),e(c5,sV),e(sV,AOo),e(c5,yOo),e(V,LOo),e(V,f5),e(f5,Zge),e(Zge,xOo),e(f5,$Oo),e(f5,lV),e(lV,kOo),e(f5,SOo),e(V,ROo),e(V,m5),e(m5,ehe),e(ehe,POo),e(m5,BOo),e(m5,iV),e(iV,IOo),e(m5,qOo),e(V,NOo),e(V,g5),e(g5,ohe),e(ohe,jOo),e(g5,DOo),e(g5,dV),e(dV,GOo),e(g5,OOo),e(V,VOo),e(V,h5),e(h5,rhe),e(rhe,XOo),e(h5,zOo),e(h5,cV),e(cV,WOo),e(h5,QOo),e(V,HOo),e(V,p5),e(p5,the),e(the,UOo),e(p5,JOo),e(p5,fV),e(fV,YOo),e(p5,KOo),e(V,ZOo),e(V,u5),e(u5,ahe),e(ahe,eVo),e(u5,oVo),e(u5,mV),e(mV,rVo),e(u5,tVo),e(V,aVo),e(V,_5),e(_5,nhe),e(nhe,nVo),e(_5,sVo),e(_5,gV),e(gV,lVo),e(_5,iVo),e(V,dVo),e(V,b5),e(b5,she),e(she,cVo),e(b5,fVo),e(b5,hV),e(hV,mVo),e(b5,gVo),e(V,hVo),e(V,v5),e(v5,lhe),e(lhe,pVo),e(v5,uVo),e(v5,pV),e(pV,_Vo),e(v5,bVo),e(V,vVo),e(V,F5),e(F5,ihe),e(ihe,FVo),e(F5,TVo),e(F5,uV),e(uV,MVo),e(F5,EVo),e(V,CVo),e(V,T5),e(T5,dhe),e(dhe,wVo),e(T5,AVo),e(T5,_V),e(_V,yVo),e(T5,LVo),e(V,xVo),e(V,M5),e(M5,che),e(che,$Vo),e(M5,kVo),e(M5,bV),e(bV,SVo),e(M5,RVo),e(V,PVo),e(V,E5),e(E5,fhe),e(fhe,BVo),e(E5,IVo),e(E5,vV),e(vV,qVo),e(E5,NVo),e(V,jVo),e(V,C5),e(C5,mhe),e(mhe,DVo),e(C5,GVo),e(C5,FV),e(FV,OVo),e(C5,VVo),e(V,XVo),e(V,w5),e(w5,ghe),e(ghe,zVo),e(w5,WVo),e(w5,TV),e(TV,QVo),e(w5,HVo),e(V,UVo),e(V,A5),e(A5,hhe),e(hhe,JVo),e(A5,YVo),e(A5,MV),e(MV,KVo),e(A5,ZVo),e(V,eXo),e(V,y5),e(y5,phe),e(phe,oXo),e(y5,rXo),e(y5,EV),e(EV,tXo),e(y5,aXo),e(V,nXo),e(V,L5),e(L5,uhe),e(uhe,sXo),e(L5,lXo),e(L5,CV),e(CV,iXo),e(L5,dXo),e(V,cXo),e(V,x5),e(x5,_he),e(_he,fXo),e(x5,mXo),e(x5,wV),e(wV,gXo),e(x5,hXo),e(V,pXo),e(V,$5),e($5,bhe),e(bhe,uXo),e($5,_Xo),e($5,AV),e(AV,bXo),e($5,vXo),e(V,FXo),e(V,k5),e(k5,vhe),e(vhe,TXo),e(k5,MXo),e(k5,yV),e(yV,EXo),e(k5,CXo),e(V,wXo),e(V,S5),e(S5,Fhe),e(Fhe,AXo),e(S5,yXo),e(S5,LV),e(LV,LXo),e(S5,xXo),e(no,$Xo),e(no,R5),e(R5,kXo),e(R5,The),e(The,SXo),e(R5,RXo),e(R5,Mhe),e(Mhe,PXo),e(no,BXo),M(P5,no,null),b(f,mqe,_),b(f,ed,_),e(ed,B5),e(B5,Ehe),M(kL,Ehe,null),e(ed,IXo),e(ed,Che),e(Che,qXo),b(f,gqe,_),b(f,No,_),M(SL,No,null),e(No,NXo),e(No,od),e(od,jXo),e(od,xV),e(xV,DXo),e(od,GXo),e(od,$V),e($V,OXo),e(od,VXo),e(No,XXo),e(No,RL),e(RL,zXo),e(RL,whe),e(whe,WXo),e(RL,QXo),e(No,HXo),e(No,gt),M(PL,gt,null),e(gt,UXo),e(gt,Ahe),e(Ahe,JXo),e(gt,YXo),e(gt,rd),e(rd,KXo),e(rd,yhe),e(yhe,ZXo),e(rd,ezo),e(rd,kV),e(kV,ozo),e(rd,rzo),e(gt,tzo),M(I5,gt,null),e(No,azo),e(No,so),M(BL,so,null),e(so,nzo),e(so,Lhe),e(Lhe,szo),e(so,lzo),e(so,Na),e(Na,izo),e(Na,xhe),e(xhe,dzo),e(Na,czo),e(Na,$he),e($he,fzo),e(Na,mzo),e(Na,khe),e(khe,gzo),e(Na,hzo),e(so,pzo),e(so,She),e(She,q5),e(q5,Rhe),e(Rhe,uzo),e(q5,_zo),e(q5,SV),e(SV,bzo),e(q5,vzo),e(so,Fzo),e(so,N5),e(N5,Tzo),e(N5,Phe),e(Phe,Mzo),e(N5,Ezo),e(N5,Bhe),e(Bhe,Czo),e(so,wzo),M(j5,so,null),b(f,hqe,_),b(f,td,_),e(td,D5),e(D5,Ihe),M(IL,Ihe,null),e(td,Azo),e(td,qhe),e(qhe,yzo),b(f,pqe,_),b(f,jo,_),M(qL,jo,null),e(jo,Lzo),e(jo,ad),e(ad,xzo),e(ad,RV),e(RV,$zo),e(ad,kzo),e(ad,PV),e(PV,Szo),e(ad,Rzo),e(jo,Pzo),e(jo,NL),e(NL,Bzo),e(NL,Nhe),e(Nhe,Izo),e(NL,qzo),e(jo,Nzo),e(jo,ht),M(jL,ht,null),e(ht,jzo),e(ht,jhe),e(jhe,Dzo),e(ht,Gzo),e(ht,nd),e(nd,Ozo),e(nd,Dhe),e(Dhe,Vzo),e(nd,Xzo),e(nd,BV),e(BV,zzo),e(nd,Wzo),e(ht,Qzo),M(G5,ht,null),e(jo,Hzo),e(jo,lo),M(DL,lo,null),e(lo,Uzo),e(lo,Ghe),e(Ghe,Jzo),e(lo,Yzo),e(lo,ja),e(ja,Kzo),e(ja,Ohe),e(Ohe,Zzo),e(ja,eWo),e(ja,Vhe),e(Vhe,oWo),e(ja,rWo),e(ja,Xhe),e(Xhe,tWo),e(ja,aWo),e(lo,nWo),e(lo,Fe),e(Fe,O5),e(O5,zhe),e(zhe,sWo),e(O5,lWo),e(O5,IV),e(IV,iWo),e(O5,dWo),e(Fe,cWo),e(Fe,V5),e(V5,Whe),e(Whe,fWo),e(V5,mWo),e(V5,qV),e(qV,gWo),e(V5,hWo),e(Fe,pWo),e(Fe,X5),e(X5,Qhe),e(Qhe,uWo),e(X5,_Wo),e(X5,NV),e(NV,bWo),e(X5,vWo),e(Fe,FWo),e(Fe,Ps),e(Ps,Hhe),e(Hhe,TWo),e(Ps,MWo),e(Ps,jV),e(jV,EWo),e(Ps,CWo),e(Ps,DV),e(DV,wWo),e(Ps,AWo),e(Fe,yWo),e(Fe,z5),e(z5,Uhe),e(Uhe,LWo),e(z5,xWo),e(z5,GV),e(GV,$Wo),e(z5,kWo),e(Fe,SWo),e(Fe,pt),e(pt,Jhe),e(Jhe,RWo),e(pt,PWo),e(pt,OV),e(OV,BWo),e(pt,IWo),e(pt,VV),e(VV,qWo),e(pt,NWo),e(pt,XV),e(XV,jWo),e(pt,DWo),e(Fe,GWo),e(Fe,W5),e(W5,Yhe),e(Yhe,OWo),e(W5,VWo),e(W5,zV),e(zV,XWo),e(W5,zWo),e(Fe,WWo),e(Fe,Q5),e(Q5,Khe),e(Khe,QWo),e(Q5,HWo),e(Q5,WV),e(WV,UWo),e(Q5,JWo),e(Fe,YWo),e(Fe,H5),e(H5,Zhe),e(Zhe,KWo),e(H5,ZWo),e(H5,QV),e(QV,eQo),e(H5,oQo),e(Fe,rQo),e(Fe,U5),e(U5,epe),e(epe,tQo),e(U5,aQo),e(U5,HV),e(HV,nQo),e(U5,sQo),e(Fe,lQo),e(Fe,J5),e(J5,ope),e(ope,iQo),e(J5,dQo),e(J5,UV),e(UV,cQo),e(J5,fQo),e(Fe,mQo),e(Fe,Y5),e(Y5,rpe),e(rpe,gQo),e(Y5,hQo),e(Y5,JV),e(JV,pQo),e(Y5,uQo),e(Fe,_Qo),e(Fe,K5),e(K5,tpe),e(tpe,bQo),e(K5,vQo),e(K5,YV),e(YV,FQo),e(K5,TQo),e(lo,MQo),e(lo,Z5),e(Z5,EQo),e(Z5,ape),e(ape,CQo),e(Z5,wQo),e(Z5,npe),e(npe,AQo),e(lo,yQo),M(ev,lo,null),b(f,uqe,_),b(f,sd,_),e(sd,ov),e(ov,spe),M(GL,spe,null),e(sd,LQo),e(sd,lpe),e(lpe,xQo),b(f,_qe,_),b(f,Do,_),M(OL,Do,null),e(Do,$Qo),e(Do,ld),e(ld,kQo),e(ld,KV),e(KV,SQo),e(ld,RQo),e(ld,ZV),e(ZV,PQo),e(ld,BQo),e(Do,IQo),e(Do,VL),e(VL,qQo),e(VL,ipe),e(ipe,NQo),e(VL,jQo),e(Do,DQo),e(Do,ut),M(XL,ut,null),e(ut,GQo),e(ut,dpe),e(dpe,OQo),e(ut,VQo),e(ut,id),e(id,XQo),e(id,cpe),e(cpe,zQo),e(id,WQo),e(id,eX),e(eX,QQo),e(id,HQo),e(ut,UQo),M(rv,ut,null),e(Do,JQo),e(Do,io),M(zL,io,null),e(io,YQo),e(io,fpe),e(fpe,KQo),e(io,ZQo),e(io,Da),e(Da,eHo),e(Da,mpe),e(mpe,oHo),e(Da,rHo),e(Da,gpe),e(gpe,tHo),e(Da,aHo),e(Da,hpe),e(hpe,nHo),e(Da,sHo),e(io,lHo),e(io,ppe),e(ppe,tv),e(tv,upe),e(upe,iHo),e(tv,dHo),e(tv,oX),e(oX,cHo),e(tv,fHo),e(io,mHo),e(io,av),e(av,gHo),e(av,_pe),e(_pe,hHo),e(av,pHo),e(av,bpe),e(bpe,uHo),e(io,_Ho),M(nv,io,null),b(f,bqe,_),b(f,dd,_),e(dd,sv),e(sv,vpe),M(WL,vpe,null),e(dd,bHo),e(dd,Fpe),e(Fpe,vHo),b(f,vqe,_),b(f,Go,_),M(QL,Go,null),e(Go,FHo),e(Go,cd),e(cd,THo),e(cd,rX),e(rX,MHo),e(cd,EHo),e(cd,tX),e(tX,CHo),e(cd,wHo),e(Go,AHo),e(Go,HL),e(HL,yHo),e(HL,Tpe),e(Tpe,LHo),e(HL,xHo),e(Go,$Ho),e(Go,_t),M(UL,_t,null),e(_t,kHo),e(_t,Mpe),e(Mpe,SHo),e(_t,RHo),e(_t,fd),e(fd,PHo),e(fd,Epe),e(Epe,BHo),e(fd,IHo),e(fd,aX),e(aX,qHo),e(fd,NHo),e(_t,jHo),M(lv,_t,null),e(Go,DHo),e(Go,co),M(JL,co,null),e(co,GHo),e(co,Cpe),e(Cpe,OHo),e(co,VHo),e(co,Ga),e(Ga,XHo),e(Ga,wpe),e(wpe,zHo),e(Ga,WHo),e(Ga,Ape),e(Ape,QHo),e(Ga,HHo),e(Ga,ype),e(ype,UHo),e(Ga,JHo),e(co,YHo),e(co,ke),e(ke,iv),e(iv,Lpe),e(Lpe,KHo),e(iv,ZHo),e(iv,nX),e(nX,eUo),e(iv,oUo),e(ke,rUo),e(ke,dv),e(dv,xpe),e(xpe,tUo),e(dv,aUo),e(dv,sX),e(sX,nUo),e(dv,sUo),e(ke,lUo),e(ke,cv),e(cv,$pe),e($pe,iUo),e(cv,dUo),e(cv,lX),e(lX,cUo),e(cv,fUo),e(ke,mUo),e(ke,fv),e(fv,kpe),e(kpe,gUo),e(fv,hUo),e(fv,iX),e(iX,pUo),e(fv,uUo),e(ke,_Uo),e(ke,mv),e(mv,Spe),e(Spe,bUo),e(mv,vUo),e(mv,dX),e(dX,FUo),e(mv,TUo),e(ke,MUo),e(ke,gv),e(gv,Rpe),e(Rpe,EUo),e(gv,CUo),e(gv,cX),e(cX,wUo),e(gv,AUo),e(ke,yUo),e(ke,hv),e(hv,Ppe),e(Ppe,LUo),e(hv,xUo),e(hv,fX),e(fX,$Uo),e(hv,kUo),e(ke,SUo),e(ke,pv),e(pv,Bpe),e(Bpe,RUo),e(pv,PUo),e(pv,mX),e(mX,BUo),e(pv,IUo),e(ke,qUo),e(ke,uv),e(uv,Ipe),e(Ipe,NUo),e(uv,jUo),e(uv,gX),e(gX,DUo),e(uv,GUo),e(co,OUo),e(co,_v),e(_v,VUo),e(_v,qpe),e(qpe,XUo),e(_v,zUo),e(_v,Npe),e(Npe,WUo),e(co,QUo),M(bv,co,null),b(f,Fqe,_),b(f,md,_),e(md,vv),e(vv,jpe),M(YL,jpe,null),e(md,HUo),e(md,Dpe),e(Dpe,UUo),b(f,Tqe,_),b(f,Oo,_),M(KL,Oo,null),e(Oo,JUo),e(Oo,gd),e(gd,YUo),e(gd,hX),e(hX,KUo),e(gd,ZUo),e(gd,pX),e(pX,eJo),e(gd,oJo),e(Oo,rJo),e(Oo,ZL),e(ZL,tJo),e(ZL,Gpe),e(Gpe,aJo),e(ZL,nJo),e(Oo,sJo),e(Oo,bt),M(e8,bt,null),e(bt,lJo),e(bt,Ope),e(Ope,iJo),e(bt,dJo),e(bt,hd),e(hd,cJo),e(hd,Vpe),e(Vpe,fJo),e(hd,mJo),e(hd,uX),e(uX,gJo),e(hd,hJo),e(bt,pJo),M(Fv,bt,null),e(Oo,uJo),e(Oo,fo),M(o8,fo,null),e(fo,_Jo),e(fo,Xpe),e(Xpe,bJo),e(fo,vJo),e(fo,Oa),e(Oa,FJo),e(Oa,zpe),e(zpe,TJo),e(Oa,MJo),e(Oa,Wpe),e(Wpe,EJo),e(Oa,CJo),e(Oa,Qpe),e(Qpe,wJo),e(Oa,AJo),e(fo,yJo),e(fo,Kr),e(Kr,Tv),e(Tv,Hpe),e(Hpe,LJo),e(Tv,xJo),e(Tv,_X),e(_X,$Jo),e(Tv,kJo),e(Kr,SJo),e(Kr,Mv),e(Mv,Upe),e(Upe,RJo),e(Mv,PJo),e(Mv,bX),e(bX,BJo),e(Mv,IJo),e(Kr,qJo),e(Kr,Ev),e(Ev,Jpe),e(Jpe,NJo),e(Ev,jJo),e(Ev,vX),e(vX,DJo),e(Ev,GJo),e(Kr,OJo),e(Kr,Cv),e(Cv,Ype),e(Ype,VJo),e(Cv,XJo),e(Cv,FX),e(FX,zJo),e(Cv,WJo),e(Kr,QJo),e(Kr,wv),e(wv,Kpe),e(Kpe,HJo),e(wv,UJo),e(wv,TX),e(TX,JJo),e(wv,YJo),e(fo,KJo),e(fo,Av),e(Av,ZJo),e(Av,Zpe),e(Zpe,eYo),e(Av,oYo),e(Av,eue),e(eue,rYo),e(fo,tYo),M(yv,fo,null),b(f,Mqe,_),b(f,pd,_),e(pd,Lv),e(Lv,oue),M(r8,oue,null),e(pd,aYo),e(pd,rue),e(rue,nYo),b(f,Eqe,_),b(f,Vo,_),M(t8,Vo,null),e(Vo,sYo),e(Vo,ud),e(ud,lYo),e(ud,MX),e(MX,iYo),e(ud,dYo),e(ud,EX),e(EX,cYo),e(ud,fYo),e(Vo,mYo),e(Vo,a8),e(a8,gYo),e(a8,tue),e(tue,hYo),e(a8,pYo),e(Vo,uYo),e(Vo,vt),M(n8,vt,null),e(vt,_Yo),e(vt,aue),e(aue,bYo),e(vt,vYo),e(vt,_d),e(_d,FYo),e(_d,nue),e(nue,TYo),e(_d,MYo),e(_d,CX),e(CX,EYo),e(_d,CYo),e(vt,wYo),M(xv,vt,null),e(Vo,AYo),e(Vo,mo),M(s8,mo,null),e(mo,yYo),e(mo,sue),e(sue,LYo),e(mo,xYo),e(mo,Va),e(Va,$Yo),e(Va,lue),e(lue,kYo),e(Va,SYo),e(Va,iue),e(iue,RYo),e(Va,PYo),e(Va,due),e(due,BYo),e(Va,IYo),e(mo,qYo),e(mo,Se),e(Se,$v),e($v,cue),e(cue,NYo),e($v,jYo),e($v,wX),e(wX,DYo),e($v,GYo),e(Se,OYo),e(Se,kv),e(kv,fue),e(fue,VYo),e(kv,XYo),e(kv,AX),e(AX,zYo),e(kv,WYo),e(Se,QYo),e(Se,Sv),e(Sv,mue),e(mue,HYo),e(Sv,UYo),e(Sv,yX),e(yX,JYo),e(Sv,YYo),e(Se,KYo),e(Se,Rv),e(Rv,gue),e(gue,ZYo),e(Rv,eKo),e(Rv,LX),e(LX,oKo),e(Rv,rKo),e(Se,tKo),e(Se,Pv),e(Pv,hue),e(hue,aKo),e(Pv,nKo),e(Pv,xX),e(xX,sKo),e(Pv,lKo),e(Se,iKo),e(Se,Bv),e(Bv,pue),e(pue,dKo),e(Bv,cKo),e(Bv,$X),e($X,fKo),e(Bv,mKo),e(Se,gKo),e(Se,Iv),e(Iv,uue),e(uue,hKo),e(Iv,pKo),e(Iv,kX),e(kX,uKo),e(Iv,_Ko),e(Se,bKo),e(Se,qv),e(qv,_ue),e(_ue,vKo),e(qv,FKo),e(qv,SX),e(SX,TKo),e(qv,MKo),e(Se,EKo),e(Se,Nv),e(Nv,bue),e(bue,CKo),e(Nv,wKo),e(Nv,RX),e(RX,AKo),e(Nv,yKo),e(mo,LKo),e(mo,jv),e(jv,xKo),e(jv,vue),e(vue,$Ko),e(jv,kKo),e(jv,Fue),e(Fue,SKo),e(mo,RKo),M(Dv,mo,null),b(f,Cqe,_),b(f,bd,_),e(bd,Gv),e(Gv,Tue),M(l8,Tue,null),e(bd,PKo),e(bd,Mue),e(Mue,BKo),b(f,wqe,_),b(f,Xo,_),M(i8,Xo,null),e(Xo,IKo),e(Xo,vd),e(vd,qKo),e(vd,PX),e(PX,NKo),e(vd,jKo),e(vd,BX),e(BX,DKo),e(vd,GKo),e(Xo,OKo),e(Xo,d8),e(d8,VKo),e(d8,Eue),e(Eue,XKo),e(d8,zKo),e(Xo,WKo),e(Xo,Ft),M(c8,Ft,null),e(Ft,QKo),e(Ft,Cue),e(Cue,HKo),e(Ft,UKo),e(Ft,Fd),e(Fd,JKo),e(Fd,wue),e(wue,YKo),e(Fd,KKo),e(Fd,IX),e(IX,ZKo),e(Fd,eZo),e(Ft,oZo),M(Ov,Ft,null),e(Xo,rZo),e(Xo,go),M(f8,go,null),e(go,tZo),e(go,Aue),e(Aue,aZo),e(go,nZo),e(go,Xa),e(Xa,sZo),e(Xa,yue),e(yue,lZo),e(Xa,iZo),e(Xa,Lue),e(Lue,dZo),e(Xa,cZo),e(Xa,xue),e(xue,fZo),e(Xa,mZo),e(go,gZo),e(go,m8),e(m8,Vv),e(Vv,$ue),e($ue,hZo),e(Vv,pZo),e(Vv,qX),e(qX,uZo),e(Vv,_Zo),e(m8,bZo),e(m8,Xv),e(Xv,kue),e(kue,vZo),e(Xv,FZo),e(Xv,NX),e(NX,TZo),e(Xv,MZo),e(go,EZo),e(go,zv),e(zv,CZo),e(zv,Sue),e(Sue,wZo),e(zv,AZo),e(zv,Rue),e(Rue,yZo),e(go,LZo),M(Wv,go,null),b(f,Aqe,_),b(f,Td,_),e(Td,Qv),e(Qv,Pue),M(g8,Pue,null),e(Td,xZo),e(Td,Bue),e(Bue,$Zo),b(f,yqe,_),b(f,zo,_),M(h8,zo,null),e(zo,kZo),e(zo,Md),e(Md,SZo),e(Md,jX),e(jX,RZo),e(Md,PZo),e(Md,DX),e(DX,BZo),e(Md,IZo),e(zo,qZo),e(zo,p8),e(p8,NZo),e(p8,Iue),e(Iue,jZo),e(p8,DZo),e(zo,GZo),e(zo,Tt),M(u8,Tt,null),e(Tt,OZo),e(Tt,que),e(que,VZo),e(Tt,XZo),e(Tt,Ed),e(Ed,zZo),e(Ed,Nue),e(Nue,WZo),e(Ed,QZo),e(Ed,GX),e(GX,HZo),e(Ed,UZo),e(Tt,JZo),M(Hv,Tt,null),e(zo,YZo),e(zo,ho),M(_8,ho,null),e(ho,KZo),e(ho,jue),e(jue,ZZo),e(ho,eer),e(ho,za),e(za,oer),e(za,Due),e(Due,rer),e(za,ter),e(za,Gue),e(Gue,aer),e(za,ner),e(za,Oue),e(Oue,ser),e(za,ler),e(ho,ier),e(ho,Zr),e(Zr,Uv),e(Uv,Vue),e(Vue,der),e(Uv,cer),e(Uv,OX),e(OX,fer),e(Uv,mer),e(Zr,ger),e(Zr,Jv),e(Jv,Xue),e(Xue,her),e(Jv,per),e(Jv,VX),e(VX,uer),e(Jv,_er),e(Zr,ber),e(Zr,Yv),e(Yv,zue),e(zue,ver),e(Yv,Fer),e(Yv,XX),e(XX,Ter),e(Yv,Mer),e(Zr,Eer),e(Zr,Kv),e(Kv,Wue),e(Wue,Cer),e(Kv,wer),e(Kv,zX),e(zX,Aer),e(Kv,yer),e(Zr,Ler),e(Zr,Zv),e(Zv,Que),e(Que,xer),e(Zv,$er),e(Zv,WX),e(WX,ker),e(Zv,Ser),e(ho,Rer),e(ho,e3),e(e3,Per),e(e3,Hue),e(Hue,Ber),e(e3,Ier),e(e3,Uue),e(Uue,qer),e(ho,Ner),M(o3,ho,null),b(f,Lqe,_),b(f,Cd,_),e(Cd,r3),e(r3,Jue),M(b8,Jue,null),e(Cd,jer),e(Cd,Yue),e(Yue,Der),b(f,xqe,_),b(f,Wo,_),M(v8,Wo,null),e(Wo,Ger),e(Wo,wd),e(wd,Oer),e(wd,QX),e(QX,Ver),e(wd,Xer),e(wd,HX),e(HX,zer),e(wd,Wer),e(Wo,Qer),e(Wo,F8),e(F8,Her),e(F8,Kue),e(Kue,Uer),e(F8,Jer),e(Wo,Yer),e(Wo,Mt),M(T8,Mt,null),e(Mt,Ker),e(Mt,Zue),e(Zue,Zer),e(Mt,eor),e(Mt,Ad),e(Ad,oor),e(Ad,e_e),e(e_e,ror),e(Ad,tor),e(Ad,UX),e(UX,aor),e(Ad,nor),e(Mt,sor),M(t3,Mt,null),e(Wo,lor),e(Wo,po),M(M8,po,null),e(po,ior),e(po,o_e),e(o_e,dor),e(po,cor),e(po,Wa),e(Wa,mor),e(Wa,r_e),e(r_e,gor),e(Wa,hor),e(Wa,t_e),e(t_e,por),e(Wa,uor),e(Wa,a_e),e(a_e,_or),e(Wa,bor),e(po,vor),e(po,yd),e(yd,a3),e(a3,n_e),e(n_e,For),e(a3,Tor),e(a3,JX),e(JX,Mor),e(a3,Eor),e(yd,Cor),e(yd,n3),e(n3,s_e),e(s_e,wor),e(n3,Aor),e(n3,YX),e(YX,yor),e(n3,Lor),e(yd,xor),e(yd,s3),e(s3,l_e),e(l_e,$or),e(s3,kor),e(s3,KX),e(KX,Sor),e(s3,Ror),e(po,Por),e(po,l3),e(l3,Bor),e(l3,i_e),e(i_e,Ior),e(l3,qor),e(l3,d_e),e(d_e,Nor),e(po,jor),M(i3,po,null),b(f,$qe,_),b(f,Ld,_),e(Ld,d3),e(d3,c_e),M(E8,c_e,null),e(Ld,Dor),e(Ld,f_e),e(f_e,Gor),b(f,kqe,_),b(f,Qo,_),M(C8,Qo,null),e(Qo,Oor),e(Qo,xd),e(xd,Vor),e(xd,ZX),e(ZX,Xor),e(xd,zor),e(xd,ez),e(ez,Wor),e(xd,Qor),e(Qo,Hor),e(Qo,w8),e(w8,Uor),e(w8,m_e),e(m_e,Jor),e(w8,Yor),e(Qo,Kor),e(Qo,Et),M(A8,Et,null),e(Et,Zor),e(Et,g_e),e(g_e,err),e(Et,orr),e(Et,$d),e($d,rrr),e($d,h_e),e(h_e,trr),e($d,arr),e($d,oz),e(oz,nrr),e($d,srr),e(Et,lrr),M(c3,Et,null),e(Qo,irr),e(Qo,uo),M(y8,uo,null),e(uo,drr),e(uo,p_e),e(p_e,crr),e(uo,frr),e(uo,Qa),e(Qa,mrr),e(Qa,u_e),e(u_e,grr),e(Qa,hrr),e(Qa,__e),e(__e,prr),e(Qa,urr),e(Qa,b_e),e(b_e,_rr),e(Qa,brr),e(uo,vrr),e(uo,L8),e(L8,f3),e(f3,v_e),e(v_e,Frr),e(f3,Trr),e(f3,rz),e(rz,Mrr),e(f3,Err),e(L8,Crr),e(L8,m3),e(m3,F_e),e(F_e,wrr),e(m3,Arr),e(m3,tz),e(tz,yrr),e(m3,Lrr),e(uo,xrr),e(uo,g3),e(g3,$rr),e(g3,T_e),e(T_e,krr),e(g3,Srr),e(g3,M_e),e(M_e,Rrr),e(uo,Prr),M(h3,uo,null),b(f,Sqe,_),b(f,kd,_),e(kd,p3),e(p3,E_e),M(x8,E_e,null),e(kd,Brr),e(kd,C_e),e(C_e,Irr),b(f,Rqe,_),b(f,Ho,_),M($8,Ho,null),e(Ho,qrr),e(Ho,Sd),e(Sd,Nrr),e(Sd,az),e(az,jrr),e(Sd,Drr),e(Sd,nz),e(nz,Grr),e(Sd,Orr),e(Ho,Vrr),e(Ho,k8),e(k8,Xrr),e(k8,w_e),e(w_e,zrr),e(k8,Wrr),e(Ho,Qrr),e(Ho,Ct),M(S8,Ct,null),e(Ct,Hrr),e(Ct,A_e),e(A_e,Urr),e(Ct,Jrr),e(Ct,Rd),e(Rd,Yrr),e(Rd,y_e),e(y_e,Krr),e(Rd,Zrr),e(Rd,sz),e(sz,etr),e(Rd,otr),e(Ct,rtr),M(u3,Ct,null),e(Ho,ttr),e(Ho,_o),M(R8,_o,null),e(_o,atr),e(_o,L_e),e(L_e,ntr),e(_o,str),e(_o,Ha),e(Ha,ltr),e(Ha,x_e),e(x_e,itr),e(Ha,dtr),e(Ha,$_e),e($_e,ctr),e(Ha,ftr),e(Ha,k_e),e(k_e,mtr),e(Ha,gtr),e(_o,htr),e(_o,S_e),e(S_e,_3),e(_3,R_e),e(R_e,ptr),e(_3,utr),e(_3,lz),e(lz,_tr),e(_3,btr),e(_o,vtr),e(_o,b3),e(b3,Ftr),e(b3,P_e),e(P_e,Ttr),e(b3,Mtr),e(b3,B_e),e(B_e,Etr),e(_o,Ctr),M(v3,_o,null),b(f,Pqe,_),b(f,Pd,_),e(Pd,F3),e(F3,I_e),M(P8,I_e,null),e(Pd,wtr),e(Pd,q_e),e(q_e,Atr),b(f,Bqe,_),b(f,Uo,_),M(B8,Uo,null),e(Uo,ytr),e(Uo,Bd),e(Bd,Ltr),e(Bd,iz),e(iz,xtr),e(Bd,$tr),e(Bd,dz),e(dz,ktr),e(Bd,Str),e(Uo,Rtr),e(Uo,I8),e(I8,Ptr),e(I8,N_e),e(N_e,Btr),e(I8,Itr),e(Uo,qtr),e(Uo,wt),M(q8,wt,null),e(wt,Ntr),e(wt,j_e),e(j_e,jtr),e(wt,Dtr),e(wt,Id),e(Id,Gtr),e(Id,D_e),e(D_e,Otr),e(Id,Vtr),e(Id,cz),e(cz,Xtr),e(Id,ztr),e(wt,Wtr),M(T3,wt,null),e(Uo,Qtr),e(Uo,bo),M(N8,bo,null),e(bo,Htr),e(bo,G_e),e(G_e,Utr),e(bo,Jtr),e(bo,Ua),e(Ua,Ytr),e(Ua,O_e),e(O_e,Ktr),e(Ua,Ztr),e(Ua,V_e),e(V_e,ear),e(Ua,oar),e(Ua,X_e),e(X_e,rar),e(Ua,tar),e(bo,aar),e(bo,Ja),e(Ja,M3),e(M3,z_e),e(z_e,nar),e(M3,sar),e(M3,fz),e(fz,lar),e(M3,iar),e(Ja,dar),e(Ja,E3),e(E3,W_e),e(W_e,car),e(E3,far),e(E3,mz),e(mz,mar),e(E3,gar),e(Ja,har),e(Ja,C3),e(C3,Q_e),e(Q_e,par),e(C3,uar),e(C3,gz),e(gz,_ar),e(C3,bar),e(Ja,Far),e(Ja,w3),e(w3,H_e),e(H_e,Tar),e(w3,Mar),e(w3,hz),e(hz,Ear),e(w3,Car),e(bo,war),e(bo,A3),e(A3,Aar),e(A3,U_e),e(U_e,yar),e(A3,Lar),e(A3,J_e),e(J_e,xar),e(bo,$ar),M(y3,bo,null),b(f,Iqe,_),b(f,qd,_),e(qd,L3),e(L3,Y_e),M(j8,Y_e,null),e(qd,kar),e(qd,K_e),e(K_e,Sar),b(f,qqe,_),b(f,Jo,_),M(D8,Jo,null),e(Jo,Rar),e(Jo,Nd),e(Nd,Par),e(Nd,pz),e(pz,Bar),e(Nd,Iar),e(Nd,uz),e(uz,qar),e(Nd,Nar),e(Jo,jar),e(Jo,G8),e(G8,Dar),e(G8,Z_e),e(Z_e,Gar),e(G8,Oar),e(Jo,Var),e(Jo,At),M(O8,At,null),e(At,Xar),e(At,e1e),e(e1e,zar),e(At,War),e(At,jd),e(jd,Qar),e(jd,o1e),e(o1e,Har),e(jd,Uar),e(jd,_z),e(_z,Jar),e(jd,Yar),e(At,Kar),M(x3,At,null),e(Jo,Zar),e(Jo,vo),M(V8,vo,null),e(vo,enr),e(vo,r1e),e(r1e,onr),e(vo,rnr),e(vo,Ya),e(Ya,tnr),e(Ya,t1e),e(t1e,anr),e(Ya,nnr),e(Ya,a1e),e(a1e,snr),e(Ya,lnr),e(Ya,n1e),e(n1e,inr),e(Ya,dnr),e(vo,cnr),e(vo,s1e),e(s1e,$3),e($3,l1e),e(l1e,fnr),e($3,mnr),e($3,bz),e(bz,gnr),e($3,hnr),e(vo,pnr),e(vo,k3),e(k3,unr),e(k3,i1e),e(i1e,_nr),e(k3,bnr),e(k3,d1e),e(d1e,vnr),e(vo,Fnr),M(S3,vo,null),b(f,Nqe,_),b(f,Dd,_),e(Dd,R3),e(R3,c1e),M(X8,c1e,null),e(Dd,Tnr),e(Dd,f1e),e(f1e,Mnr),b(f,jqe,_),b(f,Yo,_),M(z8,Yo,null),e(Yo,Enr),e(Yo,Gd),e(Gd,Cnr),e(Gd,vz),e(vz,wnr),e(Gd,Anr),e(Gd,Fz),e(Fz,ynr),e(Gd,Lnr),e(Yo,xnr),e(Yo,W8),e(W8,$nr),e(W8,m1e),e(m1e,knr),e(W8,Snr),e(Yo,Rnr),e(Yo,yt),M(Q8,yt,null),e(yt,Pnr),e(yt,g1e),e(g1e,Bnr),e(yt,Inr),e(yt,Od),e(Od,qnr),e(Od,h1e),e(h1e,Nnr),e(Od,jnr),e(Od,Tz),e(Tz,Dnr),e(Od,Gnr),e(yt,Onr),M(P3,yt,null),e(Yo,Vnr),e(Yo,wr),M(H8,wr,null),e(wr,Xnr),e(wr,p1e),e(p1e,znr),e(wr,Wnr),e(wr,Ka),e(Ka,Qnr),e(Ka,u1e),e(u1e,Hnr),e(Ka,Unr),e(Ka,_1e),e(_1e,Jnr),e(Ka,Ynr),e(Ka,b1e),e(b1e,Knr),e(Ka,Znr),e(wr,esr),e(wr,q),e(q,B3),e(B3,v1e),e(v1e,osr),e(B3,rsr),e(B3,Mz),e(Mz,tsr),e(B3,asr),e(q,nsr),e(q,I3),e(I3,F1e),e(F1e,ssr),e(I3,lsr),e(I3,Ez),e(Ez,isr),e(I3,dsr),e(q,csr),e(q,q3),e(q3,T1e),e(T1e,fsr),e(q3,msr),e(q3,Cz),e(Cz,gsr),e(q3,hsr),e(q,psr),e(q,N3),e(N3,M1e),e(M1e,usr),e(N3,_sr),e(N3,wz),e(wz,bsr),e(N3,vsr),e(q,Fsr),e(q,j3),e(j3,E1e),e(E1e,Tsr),e(j3,Msr),e(j3,Az),e(Az,Esr),e(j3,Csr),e(q,wsr),e(q,D3),e(D3,C1e),e(C1e,Asr),e(D3,ysr),e(D3,yz),e(yz,Lsr),e(D3,xsr),e(q,$sr),e(q,G3),e(G3,w1e),e(w1e,ksr),e(G3,Ssr),e(G3,Lz),e(Lz,Rsr),e(G3,Psr),e(q,Bsr),e(q,O3),e(O3,A1e),e(A1e,Isr),e(O3,qsr),e(O3,xz),e(xz,Nsr),e(O3,jsr),e(q,Dsr),e(q,V3),e(V3,y1e),e(y1e,Gsr),e(V3,Osr),e(V3,$z),e($z,Vsr),e(V3,Xsr),e(q,zsr),e(q,X3),e(X3,L1e),e(L1e,Wsr),e(X3,Qsr),e(X3,kz),e(kz,Hsr),e(X3,Usr),e(q,Jsr),e(q,z3),e(z3,x1e),e(x1e,Ysr),e(z3,Ksr),e(z3,Sz),e(Sz,Zsr),e(z3,elr),e(q,olr),e(q,W3),e(W3,$1e),e($1e,rlr),e(W3,tlr),e(W3,Rz),e(Rz,alr),e(W3,nlr),e(q,slr),e(q,Q3),e(Q3,k1e),e(k1e,llr),e(Q3,ilr),e(Q3,Pz),e(Pz,dlr),e(Q3,clr),e(q,flr),e(q,H3),e(H3,S1e),e(S1e,mlr),e(H3,glr),e(H3,Bz),e(Bz,hlr),e(H3,plr),e(q,ulr),e(q,U3),e(U3,R1e),e(R1e,_lr),e(U3,blr),e(U3,Iz),e(Iz,vlr),e(U3,Flr),e(q,Tlr),e(q,J3),e(J3,P1e),e(P1e,Mlr),e(J3,Elr),e(J3,qz),e(qz,Clr),e(J3,wlr),e(q,Alr),e(q,Y3),e(Y3,B1e),e(B1e,ylr),e(Y3,Llr),e(Y3,Nz),e(Nz,xlr),e(Y3,$lr),e(q,klr),e(q,Bs),e(Bs,I1e),e(I1e,Slr),e(Bs,Rlr),e(Bs,jz),e(jz,Plr),e(Bs,Blr),e(Bs,Dz),e(Dz,Ilr),e(Bs,qlr),e(q,Nlr),e(q,K3),e(K3,q1e),e(q1e,jlr),e(K3,Dlr),e(K3,Gz),e(Gz,Glr),e(K3,Olr),e(q,Vlr),e(q,Z3),e(Z3,N1e),e(N1e,Xlr),e(Z3,zlr),e(Z3,Oz),e(Oz,Wlr),e(Z3,Qlr),e(q,Hlr),e(q,eF),e(eF,j1e),e(j1e,Ulr),e(eF,Jlr),e(eF,Vz),e(Vz,Ylr),e(eF,Klr),e(q,Zlr),e(q,oF),e(oF,D1e),e(D1e,eir),e(oF,oir),e(oF,Xz),e(Xz,rir),e(oF,tir),e(q,air),e(q,rF),e(rF,G1e),e(G1e,nir),e(rF,sir),e(rF,zz),e(zz,lir),e(rF,iir),e(q,dir),e(q,tF),e(tF,O1e),e(O1e,cir),e(tF,fir),e(tF,Wz),e(Wz,mir),e(tF,gir),e(q,hir),e(q,aF),e(aF,V1e),e(V1e,pir),e(aF,uir),e(aF,Qz),e(Qz,_ir),e(aF,bir),e(q,vir),e(q,nF),e(nF,X1e),e(X1e,Fir),e(nF,Tir),e(nF,Hz),e(Hz,Mir),e(nF,Eir),e(q,Cir),e(q,sF),e(sF,z1e),e(z1e,wir),e(sF,Air),e(sF,Uz),e(Uz,yir),e(sF,Lir),e(q,xir),e(q,lF),e(lF,W1e),e(W1e,$ir),e(lF,kir),e(lF,Jz),e(Jz,Sir),e(lF,Rir),e(q,Pir),e(q,iF),e(iF,Q1e),e(Q1e,Bir),e(iF,Iir),e(iF,Yz),e(Yz,qir),e(iF,Nir),e(q,jir),e(q,dF),e(dF,H1e),e(H1e,Dir),e(dF,Gir),e(dF,Kz),e(Kz,Oir),e(dF,Vir),e(q,Xir),e(q,cF),e(cF,U1e),e(U1e,zir),e(cF,Wir),e(cF,Zz),e(Zz,Qir),e(cF,Hir),e(q,Uir),e(q,fF),e(fF,J1e),e(J1e,Jir),e(fF,Yir),e(fF,eW),e(eW,Kir),e(fF,Zir),e(q,edr),e(q,mF),e(mF,Y1e),e(Y1e,odr),e(mF,rdr),e(mF,oW),e(oW,tdr),e(mF,adr),e(q,ndr),e(q,gF),e(gF,K1e),e(K1e,sdr),e(gF,ldr),e(gF,rW),e(rW,idr),e(gF,ddr),e(q,cdr),e(q,hF),e(hF,Z1e),e(Z1e,fdr),e(hF,mdr),e(hF,tW),e(tW,gdr),e(hF,hdr),e(q,pdr),e(q,pF),e(pF,ebe),e(ebe,udr),e(pF,_dr),e(pF,aW),e(aW,bdr),e(pF,vdr),e(q,Fdr),e(q,uF),e(uF,obe),e(obe,Tdr),e(uF,Mdr),e(uF,nW),e(nW,Edr),e(uF,Cdr),e(q,wdr),e(q,_F),e(_F,rbe),e(rbe,Adr),e(_F,ydr),e(_F,sW),e(sW,Ldr),e(_F,xdr),e(q,$dr),e(q,bF),e(bF,tbe),e(tbe,kdr),e(bF,Sdr),e(bF,lW),e(lW,Rdr),e(bF,Pdr),e(q,Bdr),e(q,vF),e(vF,abe),e(abe,Idr),e(vF,qdr),e(vF,iW),e(iW,Ndr),e(vF,jdr),e(q,Ddr),e(q,FF),e(FF,nbe),e(nbe,Gdr),e(FF,Odr),e(FF,dW),e(dW,Vdr),e(FF,Xdr),e(q,zdr),e(q,TF),e(TF,sbe),e(sbe,Wdr),e(TF,Qdr),e(TF,cW),e(cW,Hdr),e(TF,Udr),e(q,Jdr),e(q,MF),e(MF,lbe),e(lbe,Ydr),e(MF,Kdr),e(MF,fW),e(fW,Zdr),e(MF,ecr),e(q,ocr),e(q,EF),e(EF,ibe),e(ibe,rcr),e(EF,tcr),e(EF,mW),e(mW,acr),e(EF,ncr),e(q,scr),e(q,CF),e(CF,dbe),e(dbe,lcr),e(CF,icr),e(CF,gW),e(gW,dcr),e(CF,ccr),e(q,fcr),e(q,wF),e(wF,cbe),e(cbe,mcr),e(wF,gcr),e(wF,hW),e(hW,hcr),e(wF,pcr),e(q,ucr),e(q,AF),e(AF,fbe),e(fbe,_cr),e(AF,bcr),e(AF,pW),e(pW,vcr),e(AF,Fcr),e(wr,Tcr),M(yF,wr,null),b(f,Dqe,_),b(f,Vd,_),e(Vd,LF),e(LF,mbe),M(U8,mbe,null),e(Vd,Mcr),e(Vd,gbe),e(gbe,Ecr),b(f,Gqe,_),b(f,Ko,_),M(J8,Ko,null),e(Ko,Ccr),e(Ko,Xd),e(Xd,wcr),e(Xd,uW),e(uW,Acr),e(Xd,ycr),e(Xd,_W),e(_W,Lcr),e(Xd,xcr),e(Ko,$cr),e(Ko,Y8),e(Y8,kcr),e(Y8,hbe),e(hbe,Scr),e(Y8,Rcr),e(Ko,Pcr),e(Ko,Lt),M(K8,Lt,null),e(Lt,Bcr),e(Lt,pbe),e(pbe,Icr),e(Lt,qcr),e(Lt,zd),e(zd,Ncr),e(zd,ube),e(ube,jcr),e(zd,Dcr),e(zd,bW),e(bW,Gcr),e(zd,Ocr),e(Lt,Vcr),M(xF,Lt,null),e(Ko,Xcr),e(Ko,Ar),M(Z8,Ar,null),e(Ar,zcr),e(Ar,_be),e(_be,Wcr),e(Ar,Qcr),e(Ar,Za),e(Za,Hcr),e(Za,bbe),e(bbe,Ucr),e(Za,Jcr),e(Za,vbe),e(vbe,Ycr),e(Za,Kcr),e(Za,Fbe),e(Fbe,Zcr),e(Za,efr),e(Ar,ofr),e(Ar,se),e(se,$F),e($F,Tbe),e(Tbe,rfr),e($F,tfr),e($F,vW),e(vW,afr),e($F,nfr),e(se,sfr),e(se,kF),e(kF,Mbe),e(Mbe,lfr),e(kF,ifr),e(kF,FW),e(FW,dfr),e(kF,cfr),e(se,ffr),e(se,SF),e(SF,Ebe),e(Ebe,mfr),e(SF,gfr),e(SF,TW),e(TW,hfr),e(SF,pfr),e(se,ufr),e(se,RF),e(RF,Cbe),e(Cbe,_fr),e(RF,bfr),e(RF,MW),e(MW,vfr),e(RF,Ffr),e(se,Tfr),e(se,PF),e(PF,wbe),e(wbe,Mfr),e(PF,Efr),e(PF,EW),e(EW,Cfr),e(PF,wfr),e(se,Afr),e(se,BF),e(BF,Abe),e(Abe,yfr),e(BF,Lfr),e(BF,CW),e(CW,xfr),e(BF,$fr),e(se,kfr),e(se,IF),e(IF,ybe),e(ybe,Sfr),e(IF,Rfr),e(IF,wW),e(wW,Pfr),e(IF,Bfr),e(se,Ifr),e(se,qF),e(qF,Lbe),e(Lbe,qfr),e(qF,Nfr),e(qF,AW),e(AW,jfr),e(qF,Dfr),e(se,Gfr),e(se,NF),e(NF,xbe),e(xbe,Ofr),e(NF,Vfr),e(NF,yW),e(yW,Xfr),e(NF,zfr),e(se,Wfr),e(se,jF),e(jF,$be),e($be,Qfr),e(jF,Hfr),e(jF,LW),e(LW,Ufr),e(jF,Jfr),e(se,Yfr),e(se,DF),e(DF,kbe),e(kbe,Kfr),e(DF,Zfr),e(DF,xW),e(xW,emr),e(DF,omr),e(se,rmr),e(se,GF),e(GF,Sbe),e(Sbe,tmr),e(GF,amr),e(GF,$W),e($W,nmr),e(GF,smr),e(se,lmr),e(se,OF),e(OF,Rbe),e(Rbe,imr),e(OF,dmr),e(OF,kW),e(kW,cmr),e(OF,fmr),e(se,mmr),e(se,VF),e(VF,Pbe),e(Pbe,gmr),e(VF,hmr),e(VF,SW),e(SW,pmr),e(VF,umr),e(se,_mr),e(se,XF),e(XF,Bbe),e(Bbe,bmr),e(XF,vmr),e(XF,RW),e(RW,Fmr),e(XF,Tmr),e(se,Mmr),e(se,zF),e(zF,Ibe),e(Ibe,Emr),e(zF,Cmr),e(zF,PW),e(PW,wmr),e(zF,Amr),e(se,ymr),e(se,WF),e(WF,qbe),e(qbe,Lmr),e(WF,xmr),e(WF,BW),e(BW,$mr),e(WF,kmr),e(se,Smr),e(se,QF),e(QF,Nbe),e(Nbe,Rmr),e(QF,Pmr),e(QF,IW),e(IW,Bmr),e(QF,Imr),e(se,qmr),e(se,HF),e(HF,jbe),e(jbe,Nmr),e(HF,jmr),e(HF,qW),e(qW,Dmr),e(HF,Gmr),e(se,Omr),e(se,UF),e(UF,Dbe),e(Dbe,Vmr),e(UF,Xmr),e(UF,NW),e(NW,zmr),e(UF,Wmr),e(se,Qmr),e(se,JF),e(JF,Gbe),e(Gbe,Hmr),e(JF,Umr),e(JF,jW),e(jW,Jmr),e(JF,Ymr),e(se,Kmr),e(se,YF),e(YF,Obe),e(Obe,Zmr),e(YF,egr),e(YF,DW),e(DW,ogr),e(YF,rgr),e(se,tgr),e(se,KF),e(KF,Vbe),e(Vbe,agr),e(KF,ngr),e(KF,GW),e(GW,sgr),e(KF,lgr),e(Ar,igr),M(ZF,Ar,null),b(f,Oqe,_),b(f,Wd,_),e(Wd,e6),e(e6,Xbe),M(ex,Xbe,null),e(Wd,dgr),e(Wd,zbe),e(zbe,cgr),b(f,Vqe,_),b(f,Zo,_),M(ox,Zo,null),e(Zo,fgr),e(Zo,Qd),e(Qd,mgr),e(Qd,OW),e(OW,ggr),e(Qd,hgr),e(Qd,VW),e(VW,pgr),e(Qd,ugr),e(Zo,_gr),e(Zo,rx),e(rx,bgr),e(rx,Wbe),e(Wbe,vgr),e(rx,Fgr),e(Zo,Tgr),e(Zo,xt),M(tx,xt,null),e(xt,Mgr),e(xt,Qbe),e(Qbe,Egr),e(xt,Cgr),e(xt,Hd),e(Hd,wgr),e(Hd,Hbe),e(Hbe,Agr),e(Hd,ygr),e(Hd,XW),e(XW,Lgr),e(Hd,xgr),e(xt,$gr),M(o6,xt,null),e(Zo,kgr),e(Zo,yr),M(ax,yr,null),e(yr,Sgr),e(yr,Ube),e(Ube,Rgr),e(yr,Pgr),e(yr,en),e(en,Bgr),e(en,Jbe),e(Jbe,Igr),e(en,qgr),e(en,Ybe),e(Ybe,Ngr),e(en,jgr),e(en,Kbe),e(Kbe,Dgr),e(en,Ggr),e(yr,Ogr),e(yr,Te),e(Te,r6),e(r6,Zbe),e(Zbe,Vgr),e(r6,Xgr),e(r6,zW),e(zW,zgr),e(r6,Wgr),e(Te,Qgr),e(Te,t6),e(t6,e2e),e(e2e,Hgr),e(t6,Ugr),e(t6,WW),e(WW,Jgr),e(t6,Ygr),e(Te,Kgr),e(Te,a6),e(a6,o2e),e(o2e,Zgr),e(a6,ehr),e(a6,QW),e(QW,ohr),e(a6,rhr),e(Te,thr),e(Te,n6),e(n6,r2e),e(r2e,ahr),e(n6,nhr),e(n6,HW),e(HW,shr),e(n6,lhr),e(Te,ihr),e(Te,s6),e(s6,t2e),e(t2e,dhr),e(s6,chr),e(s6,UW),e(UW,fhr),e(s6,mhr),e(Te,ghr),e(Te,l6),e(l6,a2e),e(a2e,hhr),e(l6,phr),e(l6,JW),e(JW,uhr),e(l6,_hr),e(Te,bhr),e(Te,i6),e(i6,n2e),e(n2e,vhr),e(i6,Fhr),e(i6,YW),e(YW,Thr),e(i6,Mhr),e(Te,Ehr),e(Te,d6),e(d6,s2e),e(s2e,Chr),e(d6,whr),e(d6,KW),e(KW,Ahr),e(d6,yhr),e(Te,Lhr),e(Te,c6),e(c6,l2e),e(l2e,xhr),e(c6,$hr),e(c6,ZW),e(ZW,khr),e(c6,Shr),e(Te,Rhr),e(Te,f6),e(f6,i2e),e(i2e,Phr),e(f6,Bhr),e(f6,eQ),e(eQ,Ihr),e(f6,qhr),e(Te,Nhr),e(Te,m6),e(m6,d2e),e(d2e,jhr),e(m6,Dhr),e(m6,oQ),e(oQ,Ghr),e(m6,Ohr),e(Te,Vhr),e(Te,g6),e(g6,c2e),e(c2e,Xhr),e(g6,zhr),e(g6,rQ),e(rQ,Whr),e(g6,Qhr),e(Te,Hhr),e(Te,h6),e(h6,f2e),e(f2e,Uhr),e(h6,Jhr),e(h6,tQ),e(tQ,Yhr),e(h6,Khr),e(yr,Zhr),M(p6,yr,null),b(f,Xqe,_),b(f,Ud,_),e(Ud,u6),e(u6,m2e),M(nx,m2e,null),e(Ud,epr),e(Ud,g2e),e(g2e,opr),b(f,zqe,_),b(f,er,_),M(sx,er,null),e(er,rpr),e(er,Jd),e(Jd,tpr),e(Jd,aQ),e(aQ,apr),e(Jd,npr),e(Jd,nQ),e(nQ,spr),e(Jd,lpr),e(er,ipr),e(er,lx),e(lx,dpr),e(lx,h2e),e(h2e,cpr),e(lx,fpr),e(er,mpr),e(er,$t),M(ix,$t,null),e($t,gpr),e($t,p2e),e(p2e,hpr),e($t,ppr),e($t,Yd),e(Yd,upr),e(Yd,u2e),e(u2e,_pr),e(Yd,bpr),e(Yd,sQ),e(sQ,vpr),e(Yd,Fpr),e($t,Tpr),M(_6,$t,null),e(er,Mpr),e(er,Lr),M(dx,Lr,null),e(Lr,Epr),e(Lr,_2e),e(_2e,Cpr),e(Lr,wpr),e(Lr,on),e(on,Apr),e(on,b2e),e(b2e,ypr),e(on,Lpr),e(on,v2e),e(v2e,xpr),e(on,$pr),e(on,F2e),e(F2e,kpr),e(on,Spr),e(Lr,Rpr),e(Lr,rn),e(rn,b6),e(b6,T2e),e(T2e,Ppr),e(b6,Bpr),e(b6,lQ),e(lQ,Ipr),e(b6,qpr),e(rn,Npr),e(rn,v6),e(v6,M2e),e(M2e,jpr),e(v6,Dpr),e(v6,iQ),e(iQ,Gpr),e(v6,Opr),e(rn,Vpr),e(rn,F6),e(F6,E2e),e(E2e,Xpr),e(F6,zpr),e(F6,dQ),e(dQ,Wpr),e(F6,Qpr),e(rn,Hpr),e(rn,T6),e(T6,C2e),e(C2e,Upr),e(T6,Jpr),e(T6,cQ),e(cQ,Ypr),e(T6,Kpr),e(Lr,Zpr),M(M6,Lr,null),b(f,Wqe,_),b(f,Kd,_),e(Kd,E6),e(E6,w2e),M(cx,w2e,null),e(Kd,eur),e(Kd,A2e),e(A2e,our),b(f,Qqe,_),b(f,or,_),M(fx,or,null),e(or,rur),e(or,Zd),e(Zd,tur),e(Zd,fQ),e(fQ,aur),e(Zd,nur),e(Zd,mQ),e(mQ,sur),e(Zd,lur),e(or,iur),e(or,mx),e(mx,dur),e(mx,y2e),e(y2e,cur),e(mx,fur),e(or,mur),e(or,kt),M(gx,kt,null),e(kt,gur),e(kt,L2e),e(L2e,hur),e(kt,pur),e(kt,ec),e(ec,uur),e(ec,x2e),e(x2e,_ur),e(ec,bur),e(ec,gQ),e(gQ,vur),e(ec,Fur),e(kt,Tur),M(C6,kt,null),e(or,Mur),e(or,xr),M(hx,xr,null),e(xr,Eur),e(xr,$2e),e($2e,Cur),e(xr,wur),e(xr,tn),e(tn,Aur),e(tn,k2e),e(k2e,yur),e(tn,Lur),e(tn,S2e),e(S2e,xur),e(tn,$ur),e(tn,R2e),e(R2e,kur),e(tn,Sur),e(xr,Rur),e(xr,ie),e(ie,w6),e(w6,P2e),e(P2e,Pur),e(w6,Bur),e(w6,hQ),e(hQ,Iur),e(w6,qur),e(ie,Nur),e(ie,A6),e(A6,B2e),e(B2e,jur),e(A6,Dur),e(A6,pQ),e(pQ,Gur),e(A6,Our),e(ie,Vur),e(ie,y6),e(y6,I2e),e(I2e,Xur),e(y6,zur),e(y6,uQ),e(uQ,Wur),e(y6,Qur),e(ie,Hur),e(ie,L6),e(L6,q2e),e(q2e,Uur),e(L6,Jur),e(L6,_Q),e(_Q,Yur),e(L6,Kur),e(ie,Zur),e(ie,x6),e(x6,N2e),e(N2e,e_r),e(x6,o_r),e(x6,bQ),e(bQ,r_r),e(x6,t_r),e(ie,a_r),e(ie,$6),e($6,j2e),e(j2e,n_r),e($6,s_r),e($6,vQ),e(vQ,l_r),e($6,i_r),e(ie,d_r),e(ie,k6),e(k6,D2e),e(D2e,c_r),e(k6,f_r),e(k6,FQ),e(FQ,m_r),e(k6,g_r),e(ie,h_r),e(ie,S6),e(S6,G2e),e(G2e,p_r),e(S6,u_r),e(S6,TQ),e(TQ,__r),e(S6,b_r),e(ie,v_r),e(ie,R6),e(R6,O2e),e(O2e,F_r),e(R6,T_r),e(R6,MQ),e(MQ,M_r),e(R6,E_r),e(ie,C_r),e(ie,P6),e(P6,V2e),e(V2e,w_r),e(P6,A_r),e(P6,EQ),e(EQ,y_r),e(P6,L_r),e(ie,x_r),e(ie,B6),e(B6,X2e),e(X2e,$_r),e(B6,k_r),e(B6,CQ),e(CQ,S_r),e(B6,R_r),e(ie,P_r),e(ie,I6),e(I6,z2e),e(z2e,B_r),e(I6,I_r),e(I6,wQ),e(wQ,q_r),e(I6,N_r),e(ie,j_r),e(ie,q6),e(q6,W2e),e(W2e,D_r),e(q6,G_r),e(q6,AQ),e(AQ,O_r),e(q6,V_r),e(ie,X_r),e(ie,N6),e(N6,Q2e),e(Q2e,z_r),e(N6,W_r),e(N6,yQ),e(yQ,Q_r),e(N6,H_r),e(ie,U_r),e(ie,j6),e(j6,H2e),e(H2e,J_r),e(j6,Y_r),e(j6,LQ),e(LQ,K_r),e(j6,Z_r),e(ie,e1r),e(ie,D6),e(D6,U2e),e(U2e,o1r),e(D6,r1r),e(D6,xQ),e(xQ,t1r),e(D6,a1r),e(ie,n1r),e(ie,G6),e(G6,J2e),e(J2e,s1r),e(G6,l1r),e(G6,$Q),e($Q,i1r),e(G6,d1r),e(ie,c1r),e(ie,O6),e(O6,Y2e),e(Y2e,f1r),e(O6,m1r),e(O6,kQ),e(kQ,g1r),e(O6,h1r),e(ie,p1r),e(ie,V6),e(V6,K2e),e(K2e,u1r),e(V6,_1r),e(V6,SQ),e(SQ,b1r),e(V6,v1r),e(ie,F1r),e(ie,X6),e(X6,Z2e),e(Z2e,T1r),e(X6,M1r),e(X6,RQ),e(RQ,E1r),e(X6,C1r),e(xr,w1r),M(z6,xr,null),b(f,Hqe,_),b(f,oc,_),e(oc,W6),e(W6,e4e),M(px,e4e,null),e(oc,A1r),e(oc,o4e),e(o4e,y1r),b(f,Uqe,_),b(f,rr,_),M(ux,rr,null),e(rr,L1r),e(rr,rc),e(rc,x1r),e(rc,PQ),e(PQ,$1r),e(rc,k1r),e(rc,BQ),e(BQ,S1r),e(rc,R1r),e(rr,P1r),e(rr,_x),e(_x,B1r),e(_x,r4e),e(r4e,I1r),e(_x,q1r),e(rr,N1r),e(rr,St),M(bx,St,null),e(St,j1r),e(St,t4e),e(t4e,D1r),e(St,G1r),e(St,tc),e(tc,O1r),e(tc,a4e),e(a4e,V1r),e(tc,X1r),e(tc,IQ),e(IQ,z1r),e(tc,W1r),e(St,Q1r),M(Q6,St,null),e(rr,H1r),e(rr,$r),M(vx,$r,null),e($r,U1r),e($r,n4e),e(n4e,J1r),e($r,Y1r),e($r,an),e(an,K1r),e(an,s4e),e(s4e,Z1r),e(an,ebr),e(an,l4e),e(l4e,obr),e(an,rbr),e(an,i4e),e(i4e,tbr),e(an,abr),e($r,nbr),e($r,ye),e(ye,H6),e(H6,d4e),e(d4e,sbr),e(H6,lbr),e(H6,qQ),e(qQ,ibr),e(H6,dbr),e(ye,cbr),e(ye,U6),e(U6,c4e),e(c4e,fbr),e(U6,mbr),e(U6,NQ),e(NQ,gbr),e(U6,hbr),e(ye,pbr),e(ye,J6),e(J6,f4e),e(f4e,ubr),e(J6,_br),e(J6,jQ),e(jQ,bbr),e(J6,vbr),e(ye,Fbr),e(ye,Y6),e(Y6,m4e),e(m4e,Tbr),e(Y6,Mbr),e(Y6,DQ),e(DQ,Ebr),e(Y6,Cbr),e(ye,wbr),e(ye,K6),e(K6,g4e),e(g4e,Abr),e(K6,ybr),e(K6,GQ),e(GQ,Lbr),e(K6,xbr),e(ye,$br),e(ye,Z6),e(Z6,h4e),e(h4e,kbr),e(Z6,Sbr),e(Z6,OQ),e(OQ,Rbr),e(Z6,Pbr),e(ye,Bbr),e(ye,eT),e(eT,p4e),e(p4e,Ibr),e(eT,qbr),e(eT,VQ),e(VQ,Nbr),e(eT,jbr),e(ye,Dbr),e(ye,oT),e(oT,u4e),e(u4e,Gbr),e(oT,Obr),e(oT,XQ),e(XQ,Vbr),e(oT,Xbr),e(ye,zbr),e(ye,rT),e(rT,_4e),e(_4e,Wbr),e(rT,Qbr),e(rT,zQ),e(zQ,Hbr),e(rT,Ubr),e(ye,Jbr),e(ye,tT),e(tT,b4e),e(b4e,Ybr),e(tT,Kbr),e(tT,WQ),e(WQ,Zbr),e(tT,e2r),e($r,o2r),M(aT,$r,null),b(f,Jqe,_),b(f,ac,_),e(ac,nT),e(nT,v4e),M(Fx,v4e,null),e(ac,r2r),e(ac,F4e),e(F4e,t2r),b(f,Yqe,_),b(f,tr,_),M(Tx,tr,null),e(tr,a2r),e(tr,nc),e(nc,n2r),e(nc,QQ),e(QQ,s2r),e(nc,l2r),e(nc,HQ),e(HQ,i2r),e(nc,d2r),e(tr,c2r),e(tr,Mx),e(Mx,f2r),e(Mx,T4e),e(T4e,m2r),e(Mx,g2r),e(tr,h2r),e(tr,Rt),M(Ex,Rt,null),e(Rt,p2r),e(Rt,M4e),e(M4e,u2r),e(Rt,_2r),e(Rt,sc),e(sc,b2r),e(sc,E4e),e(E4e,v2r),e(sc,F2r),e(sc,UQ),e(UQ,T2r),e(sc,M2r),e(Rt,E2r),M(sT,Rt,null),e(tr,C2r),e(tr,kr),M(Cx,kr,null),e(kr,w2r),e(kr,C4e),e(C4e,A2r),e(kr,y2r),e(kr,nn),e(nn,L2r),e(nn,w4e),e(w4e,x2r),e(nn,$2r),e(nn,A4e),e(A4e,k2r),e(nn,S2r),e(nn,y4e),e(y4e,R2r),e(nn,P2r),e(kr,B2r),e(kr,ee),e(ee,lT),e(lT,L4e),e(L4e,I2r),e(lT,q2r),e(lT,JQ),e(JQ,N2r),e(lT,j2r),e(ee,D2r),e(ee,iT),e(iT,x4e),e(x4e,G2r),e(iT,O2r),e(iT,YQ),e(YQ,V2r),e(iT,X2r),e(ee,z2r),e(ee,dT),e(dT,$4e),e($4e,W2r),e(dT,Q2r),e(dT,KQ),e(KQ,H2r),e(dT,U2r),e(ee,J2r),e(ee,cT),e(cT,k4e),e(k4e,Y2r),e(cT,K2r),e(cT,ZQ),e(ZQ,Z2r),e(cT,e4r),e(ee,o4r),e(ee,fT),e(fT,S4e),e(S4e,r4r),e(fT,t4r),e(fT,eH),e(eH,a4r),e(fT,n4r),e(ee,s4r),e(ee,mT),e(mT,R4e),e(R4e,l4r),e(mT,i4r),e(mT,oH),e(oH,d4r),e(mT,c4r),e(ee,f4r),e(ee,gT),e(gT,P4e),e(P4e,m4r),e(gT,g4r),e(gT,rH),e(rH,h4r),e(gT,p4r),e(ee,u4r),e(ee,hT),e(hT,B4e),e(B4e,_4r),e(hT,b4r),e(hT,tH),e(tH,v4r),e(hT,F4r),e(ee,T4r),e(ee,pT),e(pT,I4e),e(I4e,M4r),e(pT,E4r),e(pT,aH),e(aH,C4r),e(pT,w4r),e(ee,A4r),e(ee,uT),e(uT,q4e),e(q4e,y4r),e(uT,L4r),e(uT,nH),e(nH,x4r),e(uT,$4r),e(ee,k4r),e(ee,_T),e(_T,N4e),e(N4e,S4r),e(_T,R4r),e(_T,sH),e(sH,P4r),e(_T,B4r),e(ee,I4r),e(ee,bT),e(bT,j4e),e(j4e,q4r),e(bT,N4r),e(bT,lH),e(lH,j4r),e(bT,D4r),e(ee,G4r),e(ee,vT),e(vT,D4e),e(D4e,O4r),e(vT,V4r),e(vT,iH),e(iH,X4r),e(vT,z4r),e(ee,W4r),e(ee,FT),e(FT,G4e),e(G4e,Q4r),e(FT,H4r),e(FT,dH),e(dH,U4r),e(FT,J4r),e(ee,Y4r),e(ee,TT),e(TT,O4e),e(O4e,K4r),e(TT,Z4r),e(TT,cH),e(cH,e5r),e(TT,o5r),e(ee,r5r),e(ee,MT),e(MT,V4e),e(V4e,t5r),e(MT,a5r),e(MT,fH),e(fH,n5r),e(MT,s5r),e(ee,l5r),e(ee,ET),e(ET,X4e),e(X4e,i5r),e(ET,d5r),e(ET,mH),e(mH,c5r),e(ET,f5r),e(ee,m5r),e(ee,CT),e(CT,z4e),e(z4e,g5r),e(CT,h5r),e(CT,gH),e(gH,p5r),e(CT,u5r),e(ee,_5r),e(ee,wT),e(wT,W4e),e(W4e,b5r),e(wT,v5r),e(wT,hH),e(hH,F5r),e(wT,T5r),e(ee,M5r),e(ee,AT),e(AT,Q4e),e(Q4e,E5r),e(AT,C5r),e(AT,pH),e(pH,w5r),e(AT,A5r),e(ee,y5r),e(ee,yT),e(yT,H4e),e(H4e,L5r),e(yT,x5r),e(yT,uH),e(uH,$5r),e(yT,k5r),e(ee,S5r),e(ee,LT),e(LT,U4e),e(U4e,R5r),e(LT,P5r),e(LT,_H),e(_H,B5r),e(LT,I5r),e(ee,q5r),e(ee,xT),e(xT,J4e),e(J4e,N5r),e(xT,j5r),e(xT,bH),e(bH,D5r),e(xT,G5r),e(ee,O5r),e(ee,$T),e($T,Y4e),e(Y4e,V5r),e($T,X5r),e($T,vH),e(vH,z5r),e($T,W5r),e(ee,Q5r),e(ee,kT),e(kT,K4e),e(K4e,H5r),e(kT,U5r),e(kT,FH),e(FH,J5r),e(kT,Y5r),e(ee,K5r),e(ee,ST),e(ST,Z4e),e(Z4e,Z5r),e(ST,evr),e(ST,TH),e(TH,ovr),e(ST,rvr),e(kr,tvr),M(RT,kr,null),b(f,Kqe,_),b(f,lc,_),e(lc,PT),e(PT,e5e),M(wx,e5e,null),e(lc,avr),e(lc,o5e),e(o5e,nvr),b(f,Zqe,_),b(f,ar,_),M(Ax,ar,null),e(ar,svr),e(ar,ic),e(ic,lvr),e(ic,MH),e(MH,ivr),e(ic,dvr),e(ic,EH),e(EH,cvr),e(ic,fvr),e(ar,mvr),e(ar,yx),e(yx,gvr),e(yx,r5e),e(r5e,hvr),e(yx,pvr),e(ar,uvr),e(ar,Pt),M(Lx,Pt,null),e(Pt,_vr),e(Pt,t5e),e(t5e,bvr),e(Pt,vvr),e(Pt,dc),e(dc,Fvr),e(dc,a5e),e(a5e,Tvr),e(dc,Mvr),e(dc,CH),e(CH,Evr),e(dc,Cvr),e(Pt,wvr),M(BT,Pt,null),e(ar,Avr),e(ar,Sr),M(xx,Sr,null),e(Sr,yvr),e(Sr,n5e),e(n5e,Lvr),e(Sr,xvr),e(Sr,sn),e(sn,$vr),e(sn,s5e),e(s5e,kvr),e(sn,Svr),e(sn,l5e),e(l5e,Rvr),e(sn,Pvr),e(sn,i5e),e(i5e,Bvr),e(sn,Ivr),e(Sr,qvr),e(Sr,he),e(he,IT),e(IT,d5e),e(d5e,Nvr),e(IT,jvr),e(IT,wH),e(wH,Dvr),e(IT,Gvr),e(he,Ovr),e(he,qT),e(qT,c5e),e(c5e,Vvr),e(qT,Xvr),e(qT,AH),e(AH,zvr),e(qT,Wvr),e(he,Qvr),e(he,NT),e(NT,f5e),e(f5e,Hvr),e(NT,Uvr),e(NT,yH),e(yH,Jvr),e(NT,Yvr),e(he,Kvr),e(he,jT),e(jT,m5e),e(m5e,Zvr),e(jT,e3r),e(jT,LH),e(LH,o3r),e(jT,r3r),e(he,t3r),e(he,DT),e(DT,g5e),e(g5e,a3r),e(DT,n3r),e(DT,xH),e(xH,s3r),e(DT,l3r),e(he,i3r),e(he,GT),e(GT,h5e),e(h5e,d3r),e(GT,c3r),e(GT,$H),e($H,f3r),e(GT,m3r),e(he,g3r),e(he,OT),e(OT,p5e),e(p5e,h3r),e(OT,p3r),e(OT,kH),e(kH,u3r),e(OT,_3r),e(he,b3r),e(he,VT),e(VT,u5e),e(u5e,v3r),e(VT,F3r),e(VT,SH),e(SH,T3r),e(VT,M3r),e(he,E3r),e(he,XT),e(XT,_5e),e(_5e,C3r),e(XT,w3r),e(XT,RH),e(RH,A3r),e(XT,y3r),e(he,L3r),e(he,zT),e(zT,b5e),e(b5e,x3r),e(zT,$3r),e(zT,PH),e(PH,k3r),e(zT,S3r),e(he,R3r),e(he,WT),e(WT,v5e),e(v5e,P3r),e(WT,B3r),e(WT,BH),e(BH,I3r),e(WT,q3r),e(he,N3r),e(he,QT),e(QT,F5e),e(F5e,j3r),e(QT,D3r),e(QT,IH),e(IH,G3r),e(QT,O3r),e(he,V3r),e(he,HT),e(HT,T5e),e(T5e,X3r),e(HT,z3r),e(HT,qH),e(qH,W3r),e(HT,Q3r),e(he,H3r),e(he,UT),e(UT,M5e),e(M5e,U3r),e(UT,J3r),e(UT,NH),e(NH,Y3r),e(UT,K3r),e(he,Z3r),e(he,JT),e(JT,E5e),e(E5e,eFr),e(JT,oFr),e(JT,jH),e(jH,rFr),e(JT,tFr),e(he,aFr),e(he,YT),e(YT,C5e),e(C5e,nFr),e(YT,sFr),e(YT,DH),e(DH,lFr),e(YT,iFr),e(he,dFr),e(he,KT),e(KT,w5e),e(w5e,cFr),e(KT,fFr),e(KT,GH),e(GH,mFr),e(KT,gFr),e(Sr,hFr),M(ZT,Sr,null),b(f,eNe,_),b(f,cc,_),e(cc,eM),e(eM,A5e),M($x,A5e,null),e(cc,pFr),e(cc,y5e),e(y5e,uFr),b(f,oNe,_),b(f,nr,_),M(kx,nr,null),e(nr,_Fr),e(nr,fc),e(fc,bFr),e(fc,OH),e(OH,vFr),e(fc,FFr),e(fc,VH),e(VH,TFr),e(fc,MFr),e(nr,EFr),e(nr,Sx),e(Sx,CFr),e(Sx,L5e),e(L5e,wFr),e(Sx,AFr),e(nr,yFr),e(nr,Bt),M(Rx,Bt,null),e(Bt,LFr),e(Bt,x5e),e(x5e,xFr),e(Bt,$Fr),e(Bt,mc),e(mc,kFr),e(mc,$5e),e($5e,SFr),e(mc,RFr),e(mc,XH),e(XH,PFr),e(mc,BFr),e(Bt,IFr),M(oM,Bt,null),e(nr,qFr),e(nr,Rr),M(Px,Rr,null),e(Rr,NFr),e(Rr,k5e),e(k5e,jFr),e(Rr,DFr),e(Rr,ln),e(ln,GFr),e(ln,S5e),e(S5e,OFr),e(ln,VFr),e(ln,R5e),e(R5e,XFr),e(ln,zFr),e(ln,P5e),e(P5e,WFr),e(ln,QFr),e(Rr,HFr),e(Rr,Bx),e(Bx,rM),e(rM,B5e),e(B5e,UFr),e(rM,JFr),e(rM,zH),e(zH,YFr),e(rM,KFr),e(Bx,ZFr),e(Bx,tM),e(tM,I5e),e(I5e,e6r),e(tM,o6r),e(tM,WH),e(WH,r6r),e(tM,t6r),e(Rr,a6r),M(aM,Rr,null),b(f,rNe,_),b(f,gc,_),e(gc,nM),e(nM,q5e),M(Ix,q5e,null),e(gc,n6r),e(gc,N5e),e(N5e,s6r),b(f,tNe,_),b(f,sr,_),M(qx,sr,null),e(sr,l6r),e(sr,hc),e(hc,i6r),e(hc,QH),e(QH,d6r),e(hc,c6r),e(hc,HH),e(HH,f6r),e(hc,m6r),e(sr,g6r),e(sr,Nx),e(Nx,h6r),e(Nx,j5e),e(j5e,p6r),e(Nx,u6r),e(sr,_6r),e(sr,It),M(jx,It,null),e(It,b6r),e(It,D5e),e(D5e,v6r),e(It,F6r),e(It,pc),e(pc,T6r),e(pc,G5e),e(G5e,M6r),e(pc,E6r),e(pc,UH),e(UH,C6r),e(pc,w6r),e(It,A6r),M(sM,It,null),e(sr,y6r),e(sr,Pr),M(Dx,Pr,null),e(Pr,L6r),e(Pr,O5e),e(O5e,x6r),e(Pr,$6r),e(Pr,dn),e(dn,k6r),e(dn,V5e),e(V5e,S6r),e(dn,R6r),e(dn,X5e),e(X5e,P6r),e(dn,B6r),e(dn,z5e),e(z5e,I6r),e(dn,q6r),e(Pr,N6r),e(Pr,W5e),e(W5e,lM),e(lM,Q5e),e(Q5e,j6r),e(lM,D6r),e(lM,JH),e(JH,G6r),e(lM,O6r),e(Pr,V6r),M(iM,Pr,null),b(f,aNe,_),b(f,uc,_),e(uc,dM),e(dM,H5e),M(Gx,H5e,null),e(uc,X6r),e(uc,U5e),e(U5e,z6r),b(f,nNe,_),b(f,lr,_),M(Ox,lr,null),e(lr,W6r),e(lr,_c),e(_c,Q6r),e(_c,YH),e(YH,H6r),e(_c,U6r),e(_c,KH),e(KH,J6r),e(_c,Y6r),e(lr,K6r),e(lr,Vx),e(Vx,Z6r),e(Vx,J5e),e(J5e,eTr),e(Vx,oTr),e(lr,rTr),e(lr,qt),M(Xx,qt,null),e(qt,tTr),e(qt,Y5e),e(Y5e,aTr),e(qt,nTr),e(qt,bc),e(bc,sTr),e(bc,K5e),e(K5e,lTr),e(bc,iTr),e(bc,ZH),e(ZH,dTr),e(bc,cTr),e(qt,fTr),M(cM,qt,null),e(lr,mTr),e(lr,Br),M(zx,Br,null),e(Br,gTr),e(Br,Z5e),e(Z5e,hTr),e(Br,pTr),e(Br,cn),e(cn,uTr),e(cn,eve),e(eve,_Tr),e(cn,bTr),e(cn,ove),e(ove,vTr),e(cn,FTr),e(cn,rve),e(rve,TTr),e(cn,MTr),e(Br,ETr),e(Br,de),e(de,fM),e(fM,tve),e(tve,CTr),e(fM,wTr),e(fM,eU),e(eU,ATr),e(fM,yTr),e(de,LTr),e(de,mM),e(mM,ave),e(ave,xTr),e(mM,$Tr),e(mM,oU),e(oU,kTr),e(mM,STr),e(de,RTr),e(de,gM),e(gM,nve),e(nve,PTr),e(gM,BTr),e(gM,rU),e(rU,ITr),e(gM,qTr),e(de,NTr),e(de,hM),e(hM,sve),e(sve,jTr),e(hM,DTr),e(hM,tU),e(tU,GTr),e(hM,OTr),e(de,VTr),e(de,pM),e(pM,lve),e(lve,XTr),e(pM,zTr),e(pM,aU),e(aU,WTr),e(pM,QTr),e(de,HTr),e(de,uM),e(uM,ive),e(ive,UTr),e(uM,JTr),e(uM,nU),e(nU,YTr),e(uM,KTr),e(de,ZTr),e(de,_M),e(_M,dve),e(dve,eMr),e(_M,oMr),e(_M,sU),e(sU,rMr),e(_M,tMr),e(de,aMr),e(de,bM),e(bM,cve),e(cve,nMr),e(bM,sMr),e(bM,lU),e(lU,lMr),e(bM,iMr),e(de,dMr),e(de,vM),e(vM,fve),e(fve,cMr),e(vM,fMr),e(vM,iU),e(iU,mMr),e(vM,gMr),e(de,hMr),e(de,FM),e(FM,mve),e(mve,pMr),e(FM,uMr),e(FM,dU),e(dU,_Mr),e(FM,bMr),e(de,vMr),e(de,TM),e(TM,gve),e(gve,FMr),e(TM,TMr),e(TM,cU),e(cU,MMr),e(TM,EMr),e(de,CMr),e(de,MM),e(MM,hve),e(hve,wMr),e(MM,AMr),e(MM,fU),e(fU,yMr),e(MM,LMr),e(de,xMr),e(de,EM),e(EM,pve),e(pve,$Mr),e(EM,kMr),e(EM,mU),e(mU,SMr),e(EM,RMr),e(de,PMr),e(de,CM),e(CM,uve),e(uve,BMr),e(CM,IMr),e(CM,gU),e(gU,qMr),e(CM,NMr),e(de,jMr),e(de,wM),e(wM,_ve),e(_ve,DMr),e(wM,GMr),e(wM,hU),e(hU,OMr),e(wM,VMr),e(de,XMr),e(de,AM),e(AM,bve),e(bve,zMr),e(AM,WMr),e(AM,pU),e(pU,QMr),e(AM,HMr),e(de,UMr),e(de,yM),e(yM,vve),e(vve,JMr),e(yM,YMr),e(yM,uU),e(uU,KMr),e(yM,ZMr),e(de,eEr),e(de,LM),e(LM,Fve),e(Fve,oEr),e(LM,rEr),e(LM,_U),e(_U,tEr),e(LM,aEr),e(de,nEr),e(de,xM),e(xM,Tve),e(Tve,sEr),e(xM,lEr),e(xM,bU),e(bU,iEr),e(xM,dEr),e(de,cEr),e(de,$M),e($M,Mve),e(Mve,fEr),e($M,mEr),e($M,vU),e(vU,gEr),e($M,hEr),e(Br,pEr),M(kM,Br,null),b(f,sNe,_),b(f,vc,_),e(vc,SM),e(SM,Eve),M(Wx,Eve,null),e(vc,uEr),e(vc,Cve),e(Cve,_Er),b(f,lNe,_),b(f,ir,_),M(Qx,ir,null),e(ir,bEr),e(ir,Fc),e(Fc,vEr),e(Fc,FU),e(FU,FEr),e(Fc,TEr),e(Fc,TU),e(TU,MEr),e(Fc,EEr),e(ir,CEr),e(ir,Hx),e(Hx,wEr),e(Hx,wve),e(wve,AEr),e(Hx,yEr),e(ir,LEr),e(ir,Nt),M(Ux,Nt,null),e(Nt,xEr),e(Nt,Ave),e(Ave,$Er),e(Nt,kEr),e(Nt,Tc),e(Tc,SEr),e(Tc,yve),e(yve,REr),e(Tc,PEr),e(Tc,MU),e(MU,BEr),e(Tc,IEr),e(Nt,qEr),M(RM,Nt,null),e(ir,NEr),e(ir,Ir),M(Jx,Ir,null),e(Ir,jEr),e(Ir,Lve),e(Lve,DEr),e(Ir,GEr),e(Ir,fn),e(fn,OEr),e(fn,xve),e(xve,VEr),e(fn,XEr),e(fn,$ve),e($ve,zEr),e(fn,WEr),e(fn,kve),e(kve,QEr),e(fn,HEr),e(Ir,UEr),e(Ir,ce),e(ce,PM),e(PM,Sve),e(Sve,JEr),e(PM,YEr),e(PM,EU),e(EU,KEr),e(PM,ZEr),e(ce,eCr),e(ce,BM),e(BM,Rve),e(Rve,oCr),e(BM,rCr),e(BM,CU),e(CU,tCr),e(BM,aCr),e(ce,nCr),e(ce,IM),e(IM,Pve),e(Pve,sCr),e(IM,lCr),e(IM,wU),e(wU,iCr),e(IM,dCr),e(ce,cCr),e(ce,qM),e(qM,Bve),e(Bve,fCr),e(qM,mCr),e(qM,AU),e(AU,gCr),e(qM,hCr),e(ce,pCr),e(ce,NM),e(NM,Ive),e(Ive,uCr),e(NM,_Cr),e(NM,yU),e(yU,bCr),e(NM,vCr),e(ce,FCr),e(ce,jM),e(jM,qve),e(qve,TCr),e(jM,MCr),e(jM,LU),e(LU,ECr),e(jM,CCr),e(ce,wCr),e(ce,DM),e(DM,Nve),e(Nve,ACr),e(DM,yCr),e(DM,xU),e(xU,LCr),e(DM,xCr),e(ce,$Cr),e(ce,GM),e(GM,jve),e(jve,kCr),e(GM,SCr),e(GM,$U),e($U,RCr),e(GM,PCr),e(ce,BCr),e(ce,OM),e(OM,Dve),e(Dve,ICr),e(OM,qCr),e(OM,kU),e(kU,NCr),e(OM,jCr),e(ce,DCr),e(ce,VM),e(VM,Gve),e(Gve,GCr),e(VM,OCr),e(VM,SU),e(SU,VCr),e(VM,XCr),e(ce,zCr),e(ce,XM),e(XM,Ove),e(Ove,WCr),e(XM,QCr),e(XM,RU),e(RU,HCr),e(XM,UCr),e(ce,JCr),e(ce,zM),e(zM,Vve),e(Vve,YCr),e(zM,KCr),e(zM,PU),e(PU,ZCr),e(zM,ewr),e(ce,owr),e(ce,WM),e(WM,Xve),e(Xve,rwr),e(WM,twr),e(WM,BU),e(BU,awr),e(WM,nwr),e(ce,swr),e(ce,QM),e(QM,zve),e(zve,lwr),e(QM,iwr),e(QM,IU),e(IU,dwr),e(QM,cwr),e(ce,fwr),e(ce,HM),e(HM,Wve),e(Wve,mwr),e(HM,gwr),e(HM,qU),e(qU,hwr),e(HM,pwr),e(ce,uwr),e(ce,UM),e(UM,Qve),e(Qve,_wr),e(UM,bwr),e(UM,NU),e(NU,vwr),e(UM,Fwr),e(ce,Twr),e(ce,JM),e(JM,Hve),e(Hve,Mwr),e(JM,Ewr),e(JM,jU),e(jU,Cwr),e(JM,wwr),e(ce,Awr),e(ce,YM),e(YM,Uve),e(Uve,ywr),e(YM,Lwr),e(YM,DU),e(DU,xwr),e(YM,$wr),e(ce,kwr),e(ce,KM),e(KM,Jve),e(Jve,Swr),e(KM,Rwr),e(KM,GU),e(GU,Pwr),e(KM,Bwr),e(ce,Iwr),e(ce,ZM),e(ZM,Yve),e(Yve,qwr),e(ZM,Nwr),e(ZM,OU),e(OU,jwr),e(ZM,Dwr),e(Ir,Gwr),M(eE,Ir,null),b(f,iNe,_),b(f,Mc,_),e(Mc,oE),e(oE,Kve),M(Yx,Kve,null),e(Mc,Owr),e(Mc,Zve),e(Zve,Vwr),b(f,dNe,_),b(f,dr,_),M(Kx,dr,null),e(dr,Xwr),e(dr,Ec),e(Ec,zwr),e(Ec,VU),e(VU,Wwr),e(Ec,Qwr),e(Ec,XU),e(XU,Hwr),e(Ec,Uwr),e(dr,Jwr),e(dr,Zx),e(Zx,Ywr),e(Zx,e3e),e(e3e,Kwr),e(Zx,Zwr),e(dr,eAr),e(dr,jt),M(e7,jt,null),e(jt,oAr),e(jt,o3e),e(o3e,rAr),e(jt,tAr),e(jt,Cc),e(Cc,aAr),e(Cc,r3e),e(r3e,nAr),e(Cc,sAr),e(Cc,zU),e(zU,lAr),e(Cc,iAr),e(jt,dAr),M(rE,jt,null),e(dr,cAr),e(dr,qr),M(o7,qr,null),e(qr,fAr),e(qr,t3e),e(t3e,mAr),e(qr,gAr),e(qr,mn),e(mn,hAr),e(mn,a3e),e(a3e,pAr),e(mn,uAr),e(mn,n3e),e(n3e,_Ar),e(mn,bAr),e(mn,s3e),e(s3e,vAr),e(mn,FAr),e(qr,TAr),e(qr,l3e),e(l3e,tE),e(tE,i3e),e(i3e,MAr),e(tE,EAr),e(tE,WU),e(WU,CAr),e(tE,wAr),e(qr,AAr),M(aE,qr,null),b(f,cNe,_),b(f,wc,_),e(wc,nE),e(nE,d3e),M(r7,d3e,null),e(wc,yAr),e(wc,c3e),e(c3e,LAr),b(f,fNe,_),b(f,cr,_),M(t7,cr,null),e(cr,xAr),e(cr,Ac),e(Ac,$Ar),e(Ac,QU),e(QU,kAr),e(Ac,SAr),e(Ac,HU),e(HU,RAr),e(Ac,PAr),e(cr,BAr),e(cr,a7),e(a7,IAr),e(a7,f3e),e(f3e,qAr),e(a7,NAr),e(cr,jAr),e(cr,Dt),M(n7,Dt,null),e(Dt,DAr),e(Dt,m3e),e(m3e,GAr),e(Dt,OAr),e(Dt,yc),e(yc,VAr),e(yc,g3e),e(g3e,XAr),e(yc,zAr),e(yc,UU),e(UU,WAr),e(yc,QAr),e(Dt,HAr),M(sE,Dt,null),e(cr,UAr),e(cr,Nr),M(s7,Nr,null),e(Nr,JAr),e(Nr,h3e),e(h3e,YAr),e(Nr,KAr),e(Nr,gn),e(gn,ZAr),e(gn,p3e),e(p3e,e0r),e(gn,o0r),e(gn,u3e),e(u3e,r0r),e(gn,t0r),e(gn,_3e),e(_3e,a0r),e(gn,n0r),e(Nr,s0r),e(Nr,b3e),e(b3e,lE),e(lE,v3e),e(v3e,l0r),e(lE,i0r),e(lE,JU),e(JU,d0r),e(lE,c0r),e(Nr,f0r),M(iE,Nr,null),b(f,mNe,_),b(f,Lc,_),e(Lc,dE),e(dE,F3e),M(l7,F3e,null),e(Lc,m0r),e(Lc,T3e),e(T3e,g0r),b(f,gNe,_),b(f,fr,_),M(i7,fr,null),e(fr,h0r),e(fr,xc),e(xc,p0r),e(xc,YU),e(YU,u0r),e(xc,_0r),e(xc,KU),e(KU,b0r),e(xc,v0r),e(fr,F0r),e(fr,d7),e(d7,T0r),e(d7,M3e),e(M3e,M0r),e(d7,E0r),e(fr,C0r),e(fr,Gt),M(c7,Gt,null),e(Gt,w0r),e(Gt,E3e),e(E3e,A0r),e(Gt,y0r),e(Gt,$c),e($c,L0r),e($c,C3e),e(C3e,x0r),e($c,$0r),e($c,ZU),e(ZU,k0r),e($c,S0r),e(Gt,R0r),M(cE,Gt,null),e(fr,P0r),e(fr,jr),M(f7,jr,null),e(jr,B0r),e(jr,w3e),e(w3e,I0r),e(jr,q0r),e(jr,hn),e(hn,N0r),e(hn,A3e),e(A3e,j0r),e(hn,D0r),e(hn,y3e),e(y3e,G0r),e(hn,O0r),e(hn,L3e),e(L3e,V0r),e(hn,X0r),e(jr,z0r),e(jr,re),e(re,fE),e(fE,x3e),e(x3e,W0r),e(fE,Q0r),e(fE,eJ),e(eJ,H0r),e(fE,U0r),e(re,J0r),e(re,mE),e(mE,$3e),e($3e,Y0r),e(mE,K0r),e(mE,oJ),e(oJ,Z0r),e(mE,eyr),e(re,oyr),e(re,gE),e(gE,k3e),e(k3e,ryr),e(gE,tyr),e(gE,rJ),e(rJ,ayr),e(gE,nyr),e(re,syr),e(re,hE),e(hE,S3e),e(S3e,lyr),e(hE,iyr),e(hE,tJ),e(tJ,dyr),e(hE,cyr),e(re,fyr),e(re,pE),e(pE,R3e),e(R3e,myr),e(pE,gyr),e(pE,aJ),e(aJ,hyr),e(pE,pyr),e(re,uyr),e(re,uE),e(uE,P3e),e(P3e,_yr),e(uE,byr),e(uE,nJ),e(nJ,vyr),e(uE,Fyr),e(re,Tyr),e(re,_E),e(_E,B3e),e(B3e,Myr),e(_E,Eyr),e(_E,sJ),e(sJ,Cyr),e(_E,wyr),e(re,Ayr),e(re,bE),e(bE,I3e),e(I3e,yyr),e(bE,Lyr),e(bE,lJ),e(lJ,xyr),e(bE,$yr),e(re,kyr),e(re,vE),e(vE,q3e),e(q3e,Syr),e(vE,Ryr),e(vE,iJ),e(iJ,Pyr),e(vE,Byr),e(re,Iyr),e(re,FE),e(FE,N3e),e(N3e,qyr),e(FE,Nyr),e(FE,dJ),e(dJ,jyr),e(FE,Dyr),e(re,Gyr),e(re,TE),e(TE,j3e),e(j3e,Oyr),e(TE,Vyr),e(TE,cJ),e(cJ,Xyr),e(TE,zyr),e(re,Wyr),e(re,ME),e(ME,D3e),e(D3e,Qyr),e(ME,Hyr),e(ME,fJ),e(fJ,Uyr),e(ME,Jyr),e(re,Yyr),e(re,EE),e(EE,G3e),e(G3e,Kyr),e(EE,Zyr),e(EE,mJ),e(mJ,eLr),e(EE,oLr),e(re,rLr),e(re,CE),e(CE,O3e),e(O3e,tLr),e(CE,aLr),e(CE,gJ),e(gJ,nLr),e(CE,sLr),e(re,lLr),e(re,wE),e(wE,V3e),e(V3e,iLr),e(wE,dLr),e(wE,hJ),e(hJ,cLr),e(wE,fLr),e(re,mLr),e(re,AE),e(AE,X3e),e(X3e,gLr),e(AE,hLr),e(AE,pJ),e(pJ,pLr),e(AE,uLr),e(re,_Lr),e(re,yE),e(yE,z3e),e(z3e,bLr),e(yE,vLr),e(yE,uJ),e(uJ,FLr),e(yE,TLr),e(re,MLr),e(re,LE),e(LE,W3e),e(W3e,ELr),e(LE,CLr),e(LE,_J),e(_J,wLr),e(LE,ALr),e(re,yLr),e(re,xE),e(xE,Q3e),e(Q3e,LLr),e(xE,xLr),e(xE,bJ),e(bJ,$Lr),e(xE,kLr),e(re,SLr),e(re,$E),e($E,H3e),e(H3e,RLr),e($E,PLr),e($E,vJ),e(vJ,BLr),e($E,ILr),e(re,qLr),e(re,kE),e(kE,U3e),e(U3e,NLr),e(kE,jLr),e(kE,FJ),e(FJ,DLr),e(kE,GLr),e(re,OLr),e(re,SE),e(SE,J3e),e(J3e,VLr),e(SE,XLr),e(SE,TJ),e(TJ,zLr),e(SE,WLr),e(re,QLr),e(re,RE),e(RE,Y3e),e(Y3e,HLr),e(RE,ULr),e(RE,MJ),e(MJ,JLr),e(RE,YLr),e(re,KLr),e(re,PE),e(PE,K3e),e(K3e,ZLr),e(PE,e8r),e(PE,EJ),e(EJ,o8r),e(PE,r8r),e(re,t8r),e(re,BE),e(BE,Z3e),e(Z3e,a8r),e(BE,n8r),e(BE,CJ),e(CJ,s8r),e(BE,l8r),e(jr,i8r),M(IE,jr,null),b(f,hNe,_),b(f,kc,_),e(kc,qE),e(qE,eFe),M(m7,eFe,null),e(kc,d8r),e(kc,oFe),e(oFe,c8r),b(f,pNe,_),b(f,mr,_),M(g7,mr,null),e(mr,f8r),e(mr,Sc),e(Sc,m8r),e(Sc,wJ),e(wJ,g8r),e(Sc,h8r),e(Sc,AJ),e(AJ,p8r),e(Sc,u8r),e(mr,_8r),e(mr,h7),e(h7,b8r),e(h7,rFe),e(rFe,v8r),e(h7,F8r),e(mr,T8r),e(mr,Ot),M(p7,Ot,null),e(Ot,M8r),e(Ot,tFe),e(tFe,E8r),e(Ot,C8r),e(Ot,Rc),e(Rc,w8r),e(Rc,aFe),e(aFe,A8r),e(Rc,y8r),e(Rc,yJ),e(yJ,L8r),e(Rc,x8r),e(Ot,$8r),M(NE,Ot,null),e(mr,k8r),e(mr,Dr),M(u7,Dr,null),e(Dr,S8r),e(Dr,nFe),e(nFe,R8r),e(Dr,P8r),e(Dr,pn),e(pn,B8r),e(pn,sFe),e(sFe,I8r),e(pn,q8r),e(pn,lFe),e(lFe,N8r),e(pn,j8r),e(pn,iFe),e(iFe,D8r),e(pn,G8r),e(Dr,O8r),e(Dr,Re),e(Re,jE),e(jE,dFe),e(dFe,V8r),e(jE,X8r),e(jE,LJ),e(LJ,z8r),e(jE,W8r),e(Re,Q8r),e(Re,DE),e(DE,cFe),e(cFe,H8r),e(DE,U8r),e(DE,xJ),e(xJ,J8r),e(DE,Y8r),e(Re,K8r),e(Re,GE),e(GE,fFe),e(fFe,Z8r),e(GE,exr),e(GE,$J),e($J,oxr),e(GE,rxr),e(Re,txr),e(Re,OE),e(OE,mFe),e(mFe,axr),e(OE,nxr),e(OE,kJ),e(kJ,sxr),e(OE,lxr),e(Re,ixr),e(Re,VE),e(VE,gFe),e(gFe,dxr),e(VE,cxr),e(VE,SJ),e(SJ,fxr),e(VE,mxr),e(Re,gxr),e(Re,XE),e(XE,hFe),e(hFe,hxr),e(XE,pxr),e(XE,RJ),e(RJ,uxr),e(XE,_xr),e(Re,bxr),e(Re,zE),e(zE,pFe),e(pFe,vxr),e(zE,Fxr),e(zE,PJ),e(PJ,Txr),e(zE,Mxr),e(Re,Exr),e(Re,WE),e(WE,uFe),e(uFe,Cxr),e(WE,wxr),e(WE,BJ),e(BJ,Axr),e(WE,yxr),e(Re,Lxr),e(Re,QE),e(QE,_Fe),e(_Fe,xxr),e(QE,$xr),e(QE,IJ),e(IJ,kxr),e(QE,Sxr),e(Dr,Rxr),M(HE,Dr,null),b(f,uNe,_),b(f,Pc,_),e(Pc,UE),e(UE,bFe),M(_7,bFe,null),e(Pc,Pxr),e(Pc,vFe),e(vFe,Bxr),b(f,_Ne,_),b(f,gr,_),M(b7,gr,null),e(gr,Ixr),e(gr,Bc),e(Bc,qxr),e(Bc,qJ),e(qJ,Nxr),e(Bc,jxr),e(Bc,NJ),e(NJ,Dxr),e(Bc,Gxr),e(gr,Oxr),e(gr,v7),e(v7,Vxr),e(v7,FFe),e(FFe,Xxr),e(v7,zxr),e(gr,Wxr),e(gr,Vt),M(F7,Vt,null),e(Vt,Qxr),e(Vt,TFe),e(TFe,Hxr),e(Vt,Uxr),e(Vt,Ic),e(Ic,Jxr),e(Ic,MFe),e(MFe,Yxr),e(Ic,Kxr),e(Ic,jJ),e(jJ,Zxr),e(Ic,e7r),e(Vt,o7r),M(JE,Vt,null),e(gr,r7r),e(gr,Gr),M(T7,Gr,null),e(Gr,t7r),e(Gr,EFe),e(EFe,a7r),e(Gr,n7r),e(Gr,un),e(un,s7r),e(un,CFe),e(CFe,l7r),e(un,i7r),e(un,wFe),e(wFe,d7r),e(un,c7r),e(un,AFe),e(AFe,f7r),e(un,m7r),e(Gr,g7r),e(Gr,Me),e(Me,YE),e(YE,yFe),e(yFe,h7r),e(YE,p7r),e(YE,DJ),e(DJ,u7r),e(YE,_7r),e(Me,b7r),e(Me,KE),e(KE,LFe),e(LFe,v7r),e(KE,F7r),e(KE,GJ),e(GJ,T7r),e(KE,M7r),e(Me,E7r),e(Me,ZE),e(ZE,xFe),e(xFe,C7r),e(ZE,w7r),e(ZE,OJ),e(OJ,A7r),e(ZE,y7r),e(Me,L7r),e(Me,eC),e(eC,$Fe),e($Fe,x7r),e(eC,$7r),e(eC,VJ),e(VJ,k7r),e(eC,S7r),e(Me,R7r),e(Me,oC),e(oC,kFe),e(kFe,P7r),e(oC,B7r),e(oC,XJ),e(XJ,I7r),e(oC,q7r),e(Me,N7r),e(Me,rC),e(rC,SFe),e(SFe,j7r),e(rC,D7r),e(rC,zJ),e(zJ,G7r),e(rC,O7r),e(Me,V7r),e(Me,tC),e(tC,RFe),e(RFe,X7r),e(tC,z7r),e(tC,WJ),e(WJ,W7r),e(tC,Q7r),e(Me,H7r),e(Me,aC),e(aC,PFe),e(PFe,U7r),e(aC,J7r),e(aC,QJ),e(QJ,Y7r),e(aC,K7r),e(Me,Z7r),e(Me,nC),e(nC,BFe),e(BFe,e9r),e(nC,o9r),e(nC,HJ),e(HJ,r9r),e(nC,t9r),e(Me,a9r),e(Me,sC),e(sC,IFe),e(IFe,n9r),e(sC,s9r),e(sC,UJ),e(UJ,l9r),e(sC,i9r),e(Me,d9r),e(Me,lC),e(lC,qFe),e(qFe,c9r),e(lC,f9r),e(lC,JJ),e(JJ,m9r),e(lC,g9r),e(Me,h9r),e(Me,iC),e(iC,NFe),e(NFe,p9r),e(iC,u9r),e(iC,YJ),e(YJ,_9r),e(iC,b9r),e(Gr,v9r),M(dC,Gr,null),b(f,bNe,_),b(f,qc,_),e(qc,cC),e(cC,jFe),M(M7,jFe,null),e(qc,F9r),e(qc,DFe),e(DFe,T9r),b(f,vNe,_),b(f,hr,_),M(E7,hr,null),e(hr,M9r),e(hr,Nc),e(Nc,E9r),e(Nc,KJ),e(KJ,C9r),e(Nc,w9r),e(Nc,ZJ),e(ZJ,A9r),e(Nc,y9r),e(hr,L9r),e(hr,C7),e(C7,x9r),e(C7,GFe),e(GFe,$9r),e(C7,k9r),e(hr,S9r),e(hr,Xt),M(w7,Xt,null),e(Xt,R9r),e(Xt,OFe),e(OFe,P9r),e(Xt,B9r),e(Xt,jc),e(jc,I9r),e(jc,VFe),e(VFe,q9r),e(jc,N9r),e(jc,eY),e(eY,j9r),e(jc,D9r),e(Xt,G9r),M(fC,Xt,null),e(hr,O9r),e(hr,Or),M(A7,Or,null),e(Or,V9r),e(Or,XFe),e(XFe,X9r),e(Or,z9r),e(Or,_n),e(_n,W9r),e(_n,zFe),e(zFe,Q9r),e(_n,H9r),e(_n,WFe),e(WFe,U9r),e(_n,J9r),e(_n,QFe),e(QFe,Y9r),e(_n,K9r),e(Or,Z9r),e(Or,Le),e(Le,mC),e(mC,HFe),e(HFe,e$r),e(mC,o$r),e(mC,oY),e(oY,r$r),e(mC,t$r),e(Le,a$r),e(Le,gC),e(gC,UFe),e(UFe,n$r),e(gC,s$r),e(gC,rY),e(rY,l$r),e(gC,i$r),e(Le,d$r),e(Le,hC),e(hC,JFe),e(JFe,c$r),e(hC,f$r),e(hC,tY),e(tY,m$r),e(hC,g$r),e(Le,h$r),e(Le,pC),e(pC,YFe),e(YFe,p$r),e(pC,u$r),e(pC,aY),e(aY,_$r),e(pC,b$r),e(Le,v$r),e(Le,uC),e(uC,KFe),e(KFe,F$r),e(uC,T$r),e(uC,nY),e(nY,M$r),e(uC,E$r),e(Le,C$r),e(Le,_C),e(_C,ZFe),e(ZFe,w$r),e(_C,A$r),e(_C,sY),e(sY,y$r),e(_C,L$r),e(Le,x$r),e(Le,bC),e(bC,e6e),e(e6e,$$r),e(bC,k$r),e(bC,lY),e(lY,S$r),e(bC,R$r),e(Le,P$r),e(Le,vC),e(vC,o6e),e(o6e,B$r),e(vC,I$r),e(vC,iY),e(iY,q$r),e(vC,N$r),e(Le,j$r),e(Le,FC),e(FC,r6e),e(r6e,D$r),e(FC,G$r),e(FC,dY),e(dY,O$r),e(FC,V$r),e(Le,X$r),e(Le,TC),e(TC,t6e),e(t6e,z$r),e(TC,W$r),e(TC,cY),e(cY,Q$r),e(TC,H$r),e(Or,U$r),M(MC,Or,null),b(f,FNe,_),b(f,Dc,_),e(Dc,EC),e(EC,a6e),M(y7,a6e,null),e(Dc,J$r),e(Dc,n6e),e(n6e,Y$r),b(f,TNe,_),b(f,pr,_),M(L7,pr,null),e(pr,K$r),e(pr,Gc),e(Gc,Z$r),e(Gc,fY),e(fY,ekr),e(Gc,okr),e(Gc,mY),e(mY,rkr),e(Gc,tkr),e(pr,akr),e(pr,x7),e(x7,nkr),e(x7,s6e),e(s6e,skr),e(x7,lkr),e(pr,ikr),e(pr,zt),M($7,zt,null),e(zt,dkr),e(zt,l6e),e(l6e,ckr),e(zt,fkr),e(zt,Oc),e(Oc,mkr),e(Oc,i6e),e(i6e,gkr),e(Oc,hkr),e(Oc,gY),e(gY,pkr),e(Oc,ukr),e(zt,_kr),M(CC,zt,null),e(pr,bkr),e(pr,Vr),M(k7,Vr,null),e(Vr,vkr),e(Vr,d6e),e(d6e,Fkr),e(Vr,Tkr),e(Vr,bn),e(bn,Mkr),e(bn,c6e),e(c6e,Ekr),e(bn,Ckr),e(bn,f6e),e(f6e,wkr),e(bn,Akr),e(bn,m6e),e(m6e,ykr),e(bn,Lkr),e(Vr,xkr),e(Vr,Pe),e(Pe,wC),e(wC,g6e),e(g6e,$kr),e(wC,kkr),e(wC,hY),e(hY,Skr),e(wC,Rkr),e(Pe,Pkr),e(Pe,AC),e(AC,h6e),e(h6e,Bkr),e(AC,Ikr),e(AC,pY),e(pY,qkr),e(AC,Nkr),e(Pe,jkr),e(Pe,yC),e(yC,p6e),e(p6e,Dkr),e(yC,Gkr),e(yC,uY),e(uY,Okr),e(yC,Vkr),e(Pe,Xkr),e(Pe,LC),e(LC,u6e),e(u6e,zkr),e(LC,Wkr),e(LC,_Y),e(_Y,Qkr),e(LC,Hkr),e(Pe,Ukr),e(Pe,xC),e(xC,_6e),e(_6e,Jkr),e(xC,Ykr),e(xC,bY),e(bY,Kkr),e(xC,Zkr),e(Pe,eSr),e(Pe,$C),e($C,b6e),e(b6e,oSr),e($C,rSr),e($C,vY),e(vY,tSr),e($C,aSr),e(Pe,nSr),e(Pe,kC),e(kC,v6e),e(v6e,sSr),e(kC,lSr),e(kC,FY),e(FY,iSr),e(kC,dSr),e(Pe,cSr),e(Pe,SC),e(SC,F6e),e(F6e,fSr),e(SC,mSr),e(SC,TY),e(TY,gSr),e(SC,hSr),e(Pe,pSr),e(Pe,RC),e(RC,T6e),e(T6e,uSr),e(RC,_Sr),e(RC,MY),e(MY,bSr),e(RC,vSr),e(Vr,FSr),M(PC,Vr,null),b(f,MNe,_),b(f,Vc,_),e(Vc,BC),e(BC,M6e),M(S7,M6e,null),e(Vc,TSr),e(Vc,E6e),e(E6e,MSr),b(f,ENe,_),b(f,ur,_),M(R7,ur,null),e(ur,ESr),e(ur,Xc),e(Xc,CSr),e(Xc,EY),e(EY,wSr),e(Xc,ASr),e(Xc,CY),e(CY,ySr),e(Xc,LSr),e(ur,xSr),e(ur,P7),e(P7,$Sr),e(P7,C6e),e(C6e,kSr),e(P7,SSr),e(ur,RSr),e(ur,Wt),M(B7,Wt,null),e(Wt,PSr),e(Wt,w6e),e(w6e,BSr),e(Wt,ISr),e(Wt,zc),e(zc,qSr),e(zc,A6e),e(A6e,NSr),e(zc,jSr),e(zc,wY),e(wY,DSr),e(zc,GSr),e(Wt,OSr),M(IC,Wt,null),e(ur,VSr),e(ur,Xr),M(I7,Xr,null),e(Xr,XSr),e(Xr,y6e),e(y6e,zSr),e(Xr,WSr),e(Xr,vn),e(vn,QSr),e(vn,L6e),e(L6e,HSr),e(vn,USr),e(vn,x6e),e(x6e,JSr),e(vn,YSr),e(vn,$6e),e($6e,KSr),e(vn,ZSr),e(Xr,eRr),e(Xr,xe),e(xe,qC),e(qC,k6e),e(k6e,oRr),e(qC,rRr),e(qC,AY),e(AY,tRr),e(qC,aRr),e(xe,nRr),e(xe,NC),e(NC,S6e),e(S6e,sRr),e(NC,lRr),e(NC,yY),e(yY,iRr),e(NC,dRr),e(xe,cRr),e(xe,jC),e(jC,R6e),e(R6e,fRr),e(jC,mRr),e(jC,LY),e(LY,gRr),e(jC,hRr),e(xe,pRr),e(xe,DC),e(DC,P6e),e(P6e,uRr),e(DC,_Rr),e(DC,xY),e(xY,bRr),e(DC,vRr),e(xe,FRr),e(xe,GC),e(GC,B6e),e(B6e,TRr),e(GC,MRr),e(GC,$Y),e($Y,ERr),e(GC,CRr),e(xe,wRr),e(xe,OC),e(OC,I6e),e(I6e,ARr),e(OC,yRr),e(OC,kY),e(kY,LRr),e(OC,xRr),e(xe,$Rr),e(xe,VC),e(VC,q6e),e(q6e,kRr),e(VC,SRr),e(VC,SY),e(SY,RRr),e(VC,PRr),e(xe,BRr),e(xe,XC),e(XC,N6e),e(N6e,IRr),e(XC,qRr),e(XC,RY),e(RY,NRr),e(XC,jRr),e(xe,DRr),e(xe,zC),e(zC,j6e),e(j6e,GRr),e(zC,ORr),e(zC,PY),e(PY,VRr),e(zC,XRr),e(xe,zRr),e(xe,WC),e(WC,D6e),e(D6e,WRr),e(WC,QRr),e(WC,BY),e(BY,HRr),e(WC,URr),e(Xr,JRr),M(QC,Xr,null),b(f,CNe,_),b(f,Wc,_),e(Wc,HC),e(HC,G6e),M(q7,G6e,null),e(Wc,YRr),e(Wc,O6e),e(O6e,KRr),b(f,wNe,_),b(f,_r,_),M(N7,_r,null),e(_r,ZRr),e(_r,Qc),e(Qc,ePr),e(Qc,IY),e(IY,oPr),e(Qc,rPr),e(Qc,qY),e(qY,tPr),e(Qc,aPr),e(_r,nPr),e(_r,j7),e(j7,sPr),e(j7,V6e),e(V6e,lPr),e(j7,iPr),e(_r,dPr),e(_r,Qt),M(D7,Qt,null),e(Qt,cPr),e(Qt,X6e),e(X6e,fPr),e(Qt,mPr),e(Qt,Hc),e(Hc,gPr),e(Hc,z6e),e(z6e,hPr),e(Hc,pPr),e(Hc,NY),e(NY,uPr),e(Hc,_Pr),e(Qt,bPr),M(UC,Qt,null),e(_r,vPr),e(_r,zr),M(G7,zr,null),e(zr,FPr),e(zr,W6e),e(W6e,TPr),e(zr,MPr),e(zr,Fn),e(Fn,EPr),e(Fn,Q6e),e(Q6e,CPr),e(Fn,wPr),e(Fn,H6e),e(H6e,APr),e(Fn,yPr),e(Fn,U6e),e(U6e,LPr),e(Fn,xPr),e(zr,$Pr),e(zr,$e),e($e,JC),e(JC,J6e),e(J6e,kPr),e(JC,SPr),e(JC,jY),e(jY,RPr),e(JC,PPr),e($e,BPr),e($e,YC),e(YC,Y6e),e(Y6e,IPr),e(YC,qPr),e(YC,DY),e(DY,NPr),e(YC,jPr),e($e,DPr),e($e,KC),e(KC,K6e),e(K6e,GPr),e(KC,OPr),e(KC,GY),e(GY,VPr),e(KC,XPr),e($e,zPr),e($e,ZC),e(ZC,Z6e),e(Z6e,WPr),e(ZC,QPr),e(ZC,OY),e(OY,HPr),e(ZC,UPr),e($e,JPr),e($e,ew),e(ew,eTe),e(eTe,YPr),e(ew,KPr),e(ew,VY),e(VY,ZPr),e(ew,eBr),e($e,oBr),e($e,ow),e(ow,oTe),e(oTe,rBr),e(ow,tBr),e(ow,XY),e(XY,aBr),e(ow,nBr),e($e,sBr),e($e,rw),e(rw,rTe),e(rTe,lBr),e(rw,iBr),e(rw,zY),e(zY,dBr),e(rw,cBr),e($e,fBr),e($e,tw),e(tw,tTe),e(tTe,mBr),e(tw,gBr),e(tw,WY),e(WY,hBr),e(tw,pBr),e($e,uBr),e($e,aw),e(aw,aTe),e(aTe,_Br),e(aw,bBr),e(aw,QY),e(QY,vBr),e(aw,FBr),e($e,TBr),e($e,nw),e(nw,nTe),e(nTe,MBr),e(nw,EBr),e(nw,HY),e(HY,CBr),e(nw,wBr),e(zr,ABr),M(sw,zr,null),b(f,ANe,_),b(f,Uc,_),e(Uc,lw),e(lw,sTe),M(O7,sTe,null),e(Uc,yBr),e(Uc,lTe),e(lTe,LBr),b(f,yNe,_),b(f,br,_),M(V7,br,null),e(br,xBr),e(br,Jc),e(Jc,$Br),e(Jc,UY),e(UY,kBr),e(Jc,SBr),e(Jc,JY),e(JY,RBr),e(Jc,PBr),e(br,BBr),e(br,X7),e(X7,IBr),e(X7,iTe),e(iTe,qBr),e(X7,NBr),e(br,jBr),e(br,Ht),M(z7,Ht,null),e(Ht,DBr),e(Ht,dTe),e(dTe,GBr),e(Ht,OBr),e(Ht,Yc),e(Yc,VBr),e(Yc,cTe),e(cTe,XBr),e(Yc,zBr),e(Yc,YY),e(YY,WBr),e(Yc,QBr),e(Ht,HBr),M(iw,Ht,null),e(br,UBr),e(br,Wr),M(W7,Wr,null),e(Wr,JBr),e(Wr,fTe),e(fTe,YBr),e(Wr,KBr),e(Wr,Tn),e(Tn,ZBr),e(Tn,mTe),e(mTe,eIr),e(Tn,oIr),e(Tn,gTe),e(gTe,rIr),e(Tn,tIr),e(Tn,hTe),e(hTe,aIr),e(Tn,nIr),e(Wr,sIr),e(Wr,De),e(De,dw),e(dw,pTe),e(pTe,lIr),e(dw,iIr),e(dw,KY),e(KY,dIr),e(dw,cIr),e(De,fIr),e(De,cw),e(cw,uTe),e(uTe,mIr),e(cw,gIr),e(cw,ZY),e(ZY,hIr),e(cw,pIr),e(De,uIr),e(De,fw),e(fw,_Te),e(_Te,_Ir),e(fw,bIr),e(fw,eK),e(eK,vIr),e(fw,FIr),e(De,TIr),e(De,mw),e(mw,bTe),e(bTe,MIr),e(mw,EIr),e(mw,oK),e(oK,CIr),e(mw,wIr),e(De,AIr),e(De,gw),e(gw,vTe),e(vTe,yIr),e(gw,LIr),e(gw,rK),e(rK,xIr),e(gw,$Ir),e(De,kIr),e(De,hw),e(hw,FTe),e(FTe,SIr),e(hw,RIr),e(hw,tK),e(tK,PIr),e(hw,BIr),e(De,IIr),e(De,pw),e(pw,TTe),e(TTe,qIr),e(pw,NIr),e(pw,aK),e(aK,jIr),e(pw,DIr),e(De,GIr),e(De,uw),e(uw,MTe),e(MTe,OIr),e(uw,VIr),e(uw,nK),e(nK,XIr),e(uw,zIr),e(Wr,WIr),M(_w,Wr,null),b(f,LNe,_),b(f,Kc,_),e(Kc,bw),e(bw,ETe),M(Q7,ETe,null),e(Kc,QIr),e(Kc,CTe),e(CTe,HIr),b(f,xNe,_),b(f,vr,_),M(H7,vr,null),e(vr,UIr),e(vr,Zc),e(Zc,JIr),e(Zc,sK),e(sK,YIr),e(Zc,KIr),e(Zc,lK),e(lK,ZIr),e(Zc,eqr),e(vr,oqr),e(vr,U7),e(U7,rqr),e(U7,wTe),e(wTe,tqr),e(U7,aqr),e(vr,nqr),e(vr,Ut),M(J7,Ut,null),e(Ut,sqr),e(Ut,ATe),e(ATe,lqr),e(Ut,iqr),e(Ut,ef),e(ef,dqr),e(ef,yTe),e(yTe,cqr),e(ef,fqr),e(ef,iK),e(iK,mqr),e(ef,gqr),e(Ut,hqr),M(vw,Ut,null),e(vr,pqr),e(vr,Qr),M(Y7,Qr,null),e(Qr,uqr),e(Qr,LTe),e(LTe,_qr),e(Qr,bqr),e(Qr,Mn),e(Mn,vqr),e(Mn,xTe),e(xTe,Fqr),e(Mn,Tqr),e(Mn,$Te),e($Te,Mqr),e(Mn,Eqr),e(Mn,kTe),e(kTe,Cqr),e(Mn,wqr),e(Qr,Aqr),e(Qr,Ge),e(Ge,Fw),e(Fw,STe),e(STe,yqr),e(Fw,Lqr),e(Fw,dK),e(dK,xqr),e(Fw,$qr),e(Ge,kqr),e(Ge,Tw),e(Tw,RTe),e(RTe,Sqr),e(Tw,Rqr),e(Tw,cK),e(cK,Pqr),e(Tw,Bqr),e(Ge,Iqr),e(Ge,Mw),e(Mw,PTe),e(PTe,qqr),e(Mw,Nqr),e(Mw,fK),e(fK,jqr),e(Mw,Dqr),e(Ge,Gqr),e(Ge,Ew),e(Ew,BTe),e(BTe,Oqr),e(Ew,Vqr),e(Ew,mK),e(mK,Xqr),e(Ew,zqr),e(Ge,Wqr),e(Ge,Cw),e(Cw,ITe),e(ITe,Qqr),e(Cw,Hqr),e(Cw,gK),e(gK,Uqr),e(Cw,Jqr),e(Ge,Yqr),e(Ge,ww),e(ww,qTe),e(qTe,Kqr),e(ww,Zqr),e(ww,hK),e(hK,eNr),e(ww,oNr),e(Ge,rNr),e(Ge,Aw),e(Aw,NTe),e(NTe,tNr),e(Aw,aNr),e(Aw,pK),e(pK,nNr),e(Aw,sNr),e(Ge,lNr),e(Ge,yw),e(yw,jTe),e(jTe,iNr),e(yw,dNr),e(yw,uK),e(uK,cNr),e(yw,fNr),e(Qr,mNr),M(Lw,Qr,null),b(f,$Ne,_),b(f,of,_),e(of,xw),e(xw,DTe),M(K7,DTe,null),e(of,gNr),e(of,GTe),e(GTe,hNr),b(f,kNe,_),b(f,Fr,_),M(Z7,Fr,null),e(Fr,pNr),e(Fr,rf),e(rf,uNr),e(rf,_K),e(_K,_Nr),e(rf,bNr),e(rf,bK),e(bK,vNr),e(rf,FNr),e(Fr,TNr),e(Fr,e9),e(e9,MNr),e(e9,OTe),e(OTe,ENr),e(e9,CNr),e(Fr,wNr),e(Fr,Jt),M(o9,Jt,null),e(Jt,ANr),e(Jt,VTe),e(VTe,yNr),e(Jt,LNr),e(Jt,tf),e(tf,xNr),e(tf,XTe),e(XTe,$Nr),e(tf,kNr),e(tf,vK),e(vK,SNr),e(tf,RNr),e(Jt,PNr),M($w,Jt,null),e(Fr,BNr),e(Fr,Hr),M(r9,Hr,null),e(Hr,INr),e(Hr,zTe),e(zTe,qNr),e(Hr,NNr),e(Hr,En),e(En,jNr),e(En,WTe),e(WTe,DNr),e(En,GNr),e(En,QTe),e(QTe,ONr),e(En,VNr),e(En,HTe),e(HTe,XNr),e(En,zNr),e(Hr,WNr),e(Hr,UTe),e(UTe,kw),e(kw,JTe),e(JTe,QNr),e(kw,HNr),e(kw,FK),e(FK,UNr),e(kw,JNr),e(Hr,YNr),M(Sw,Hr,null),b(f,SNe,_),b(f,af,_),e(af,Rw),e(Rw,YTe),M(t9,YTe,null),e(af,KNr),e(af,KTe),e(KTe,ZNr),b(f,RNe,_),b(f,Tr,_),M(a9,Tr,null),e(Tr,ejr),e(Tr,nf),e(nf,ojr),e(nf,TK),e(TK,rjr),e(nf,tjr),e(nf,MK),e(MK,ajr),e(nf,njr),e(Tr,sjr),e(Tr,n9),e(n9,ljr),e(n9,ZTe),e(ZTe,ijr),e(n9,djr),e(Tr,cjr),e(Tr,Yt),M(s9,Yt,null),e(Yt,fjr),e(Yt,eMe),e(eMe,mjr),e(Yt,gjr),e(Yt,sf),e(sf,hjr),e(sf,oMe),e(oMe,pjr),e(sf,ujr),e(sf,EK),e(EK,_jr),e(sf,bjr),e(Yt,vjr),M(Pw,Yt,null),e(Tr,Fjr),e(Tr,Ur),M(l9,Ur,null),e(Ur,Tjr),e(Ur,rMe),e(rMe,Mjr),e(Ur,Ejr),e(Ur,Cn),e(Cn,Cjr),e(Cn,tMe),e(tMe,wjr),e(Cn,Ajr),e(Cn,aMe),e(aMe,yjr),e(Cn,Ljr),e(Cn,nMe),e(nMe,xjr),e(Cn,$jr),e(Ur,kjr),e(Ur,i9),e(i9,Bw),e(Bw,sMe),e(sMe,Sjr),e(Bw,Rjr),e(Bw,CK),e(CK,Pjr),e(Bw,Bjr),e(i9,Ijr),e(i9,Iw),e(Iw,lMe),e(lMe,qjr),e(Iw,Njr),e(Iw,wK),e(wK,jjr),e(Iw,Djr),e(Ur,Gjr),M(qw,Ur,null),b(f,PNe,_),b(f,lf,_),e(lf,Nw),e(Nw,iMe),M(d9,iMe,null),e(lf,Ojr),e(lf,dMe),e(dMe,Vjr),b(f,BNe,_),b(f,Mr,_),M(c9,Mr,null),e(Mr,Xjr),e(Mr,df),e(df,zjr),e(df,AK),e(AK,Wjr),e(df,Qjr),e(df,yK),e(yK,Hjr),e(df,Ujr),e(Mr,Jjr),e(Mr,f9),e(f9,Yjr),e(f9,cMe),e(cMe,Kjr),e(f9,Zjr),e(Mr,eDr),e(Mr,Kt),M(m9,Kt,null),e(Kt,oDr),e(Kt,fMe),e(fMe,rDr),e(Kt,tDr),e(Kt,cf),e(cf,aDr),e(cf,mMe),e(mMe,nDr),e(cf,sDr),e(cf,LK),e(LK,lDr),e(cf,iDr),e(Kt,dDr),M(jw,Kt,null),e(Mr,cDr),e(Mr,Jr),M(g9,Jr,null),e(Jr,fDr),e(Jr,gMe),e(gMe,mDr),e(Jr,gDr),e(Jr,wn),e(wn,hDr),e(wn,hMe),e(hMe,pDr),e(wn,uDr),e(wn,pMe),e(pMe,_Dr),e(wn,bDr),e(wn,uMe),e(uMe,vDr),e(wn,FDr),e(Jr,TDr),e(Jr,_Me),e(_Me,Dw),e(Dw,bMe),e(bMe,MDr),e(Dw,EDr),e(Dw,xK),e(xK,CDr),e(Dw,wDr),e(Jr,ADr),M(Gw,Jr,null),INe=!0},p(f,[_]){const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),vf.$set(h9);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),bg.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),Kg.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),yh.$set(TMe);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:f}),Lh.$set(p9);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),Qh.$set(MMe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Hh.$set(An);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),Yh.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),Ou.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),Xu.$set(wMe);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:f}),R_.$set(u9);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),B_.$set(AMe);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:f}),v1.$set(_9);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),T1.$set(yMe);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:f}),ab.$set(b9);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),sb.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Cb.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Ab.$set($Me);const ff={};_&2&&(ff.$$scope={dirty:_,ctx:f}),F2.$set(ff);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),M2.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),Z2.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),o4.$set(RMe);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:f}),i4.$set(v9);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),c4.$set(PMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),z4.$set(BMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),Q4.$set(IMe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),P5.$set(et);const F9={};_&2&&(F9.$$scope={dirty:_,ctx:f}),I5.$set(F9);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),j5.$set(qMe);const T9={};_&2&&(T9.$$scope={dirty:_,ctx:f}),G5.$set(T9);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),ev.$set(NMe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),rv.$set(ot);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),nv.$set(jMe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),lv.$set(mf);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),bv.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),Fv.$set(GMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),yv.$set(y);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),xv.$set(Ow);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),Dv.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),Ov.$set(VMe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),Wv.$set(Vw);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),Hv.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),o3.$set(zMe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),t3.$set(Xw);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),i3.$set(WMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),c3.$set(QMe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),h3.$set(zw);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),u3.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),v3.$set(UMe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),T3.$set(Ww);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),y3.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),x3.$set(YMe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),S3.$set(Qw);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),P3.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),yF.$set(ZMe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),xF.$set(Hw);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),ZF.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),o6.$set(oEe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),p6.$set(Uw);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),_6.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),M6.$set(tEe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),C6.$set(Jw);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),z6.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),Q6.$set(nEe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),aT.$set(Yw);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),sT.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),RT.$set(lEe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),BT.$set(Kw);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),ZT.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),oM.$set(dEe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),aM.$set(Zw);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),sM.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),iM.$set(fEe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),cM.$set(eA);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),kM.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),RM.$set(gEe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),eE.$set(oA);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),rE.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),aE.$set(pEe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),sE.$set(rA);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),iE.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),cE.$set(_Ee);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),IE.$set(tA);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),NE.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),HE.$set(vEe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),JE.$set(aA);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),dC.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),fC.$set(TEe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),MC.$set(nA);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),CC.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),PC.$set(EEe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),IC.$set(sA);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),QC.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),UC.$set(wEe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),sw.$set(lA);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),iw.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),_w.$set(yEe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),vw.$set(iA);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),Lw.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),$w.$set(xEe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),Sw.$set(dA);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),Pw.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),qw.$set(kEe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),jw.$set(cA);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),Gw.$set(SEe)},i(f){INe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(vf.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(py.$$.fragment,f),E(bg.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Ty.$$.fragment,f),E(Kg.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(yy.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ry.$$.fragment,f),E(Qh.$$.fragment,f),E(Hh.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(Yh.$$.fragment,f),E(jy.$$.fragment,f),E(Ou.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(Xu.$$.fragment,f),E(Xy.$$.fragment,f),E(R_.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(B_.$$.fragment,f),E(Uy.$$.fragment,f),E(v1.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(T1.$$.fragment,f),E(eL.$$.fragment,f),E(ab.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(sb.$$.fragment,f),E(nL.$$.fragment,f),E(Cb.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(Ab.$$.fragment,f),E(cL.$$.fragment,f),E(F2.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(M2.$$.fragment,f),E(pL.$$.fragment,f),E(Z2.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(o4.$$.fragment,f),E(FL.$$.fragment,f),E(i4.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(c4.$$.fragment,f),E(wL.$$.fragment,f),E(z4.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(Q4.$$.fragment,f),E($L.$$.fragment,f),E(P5.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(I5.$$.fragment,f),E(BL.$$.fragment,f),E(j5.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(G5.$$.fragment,f),E(DL.$$.fragment,f),E(ev.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(rv.$$.fragment,f),E(zL.$$.fragment,f),E(nv.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(lv.$$.fragment,f),E(JL.$$.fragment,f),E(bv.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(Fv.$$.fragment,f),E(o8.$$.fragment,f),E(yv.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(xv.$$.fragment,f),E(s8.$$.fragment,f),E(Dv.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(Ov.$$.fragment,f),E(f8.$$.fragment,f),E(Wv.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(Hv.$$.fragment,f),E(_8.$$.fragment,f),E(o3.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(t3.$$.fragment,f),E(M8.$$.fragment,f),E(i3.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(c3.$$.fragment,f),E(y8.$$.fragment,f),E(h3.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(u3.$$.fragment,f),E(R8.$$.fragment,f),E(v3.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(q8.$$.fragment,f),E(T3.$$.fragment,f),E(N8.$$.fragment,f),E(y3.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(x3.$$.fragment,f),E(V8.$$.fragment,f),E(S3.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(P3.$$.fragment,f),E(H8.$$.fragment,f),E(yF.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(xF.$$.fragment,f),E(Z8.$$.fragment,f),E(ZF.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(o6.$$.fragment,f),E(ax.$$.fragment,f),E(p6.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(_6.$$.fragment,f),E(dx.$$.fragment,f),E(M6.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(C6.$$.fragment,f),E(hx.$$.fragment,f),E(z6.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Q6.$$.fragment,f),E(vx.$$.fragment,f),E(aT.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(sT.$$.fragment,f),E(Cx.$$.fragment,f),E(RT.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(BT.$$.fragment,f),E(xx.$$.fragment,f),E(ZT.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(oM.$$.fragment,f),E(Px.$$.fragment,f),E(aM.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(sM.$$.fragment,f),E(Dx.$$.fragment,f),E(iM.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(cM.$$.fragment,f),E(zx.$$.fragment,f),E(kM.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Ux.$$.fragment,f),E(RM.$$.fragment,f),E(Jx.$$.fragment,f),E(eE.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e7.$$.fragment,f),E(rE.$$.fragment,f),E(o7.$$.fragment,f),E(aE.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(n7.$$.fragment,f),E(sE.$$.fragment,f),E(s7.$$.fragment,f),E(iE.$$.fragment,f),E(l7.$$.fragment,f),E(i7.$$.fragment,f),E(c7.$$.fragment,f),E(cE.$$.fragment,f),E(f7.$$.fragment,f),E(IE.$$.fragment,f),E(m7.$$.fragment,f),E(g7.$$.fragment,f),E(p7.$$.fragment,f),E(NE.$$.fragment,f),E(u7.$$.fragment,f),E(HE.$$.fragment,f),E(_7.$$.fragment,f),E(b7.$$.fragment,f),E(F7.$$.fragment,f),E(JE.$$.fragment,f),E(T7.$$.fragment,f),E(dC.$$.fragment,f),E(M7.$$.fragment,f),E(E7.$$.fragment,f),E(w7.$$.fragment,f),E(fC.$$.fragment,f),E(A7.$$.fragment,f),E(MC.$$.fragment,f),E(y7.$$.fragment,f),E(L7.$$.fragment,f),E($7.$$.fragment,f),E(CC.$$.fragment,f),E(k7.$$.fragment,f),E(PC.$$.fragment,f),E(S7.$$.fragment,f),E(R7.$$.fragment,f),E(B7.$$.fragment,f),E(IC.$$.fragment,f),E(I7.$$.fragment,f),E(QC.$$.fragment,f),E(q7.$$.fragment,f),E(N7.$$.fragment,f),E(D7.$$.fragment,f),E(UC.$$.fragment,f),E(G7.$$.fragment,f),E(sw.$$.fragment,f),E(O7.$$.fragment,f),E(V7.$$.fragment,f),E(z7.$$.fragment,f),E(iw.$$.fragment,f),E(W7.$$.fragment,f),E(_w.$$.fragment,f),E(Q7.$$.fragment,f),E(H7.$$.fragment,f),E(J7.$$.fragment,f),E(vw.$$.fragment,f),E(Y7.$$.fragment,f),E(Lw.$$.fragment,f),E(K7.$$.fragment,f),E(Z7.$$.fragment,f),E(o9.$$.fragment,f),E($w.$$.fragment,f),E(r9.$$.fragment,f),E(Sw.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(Pw.$$.fragment,f),E(l9.$$.fragment,f),E(qw.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(jw.$$.fragment,f),E(g9.$$.fragment,f),E(Gw.$$.fragment,f),INe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(vf.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(py.$$.fragment,f),C(bg.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Ty.$$.fragment,f),C(Kg.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(yy.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ry.$$.fragment,f),C(Qh.$$.fragment,f),C(Hh.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(Yh.$$.fragment,f),C(jy.$$.fragment,f),C(Ou.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(Xu.$$.fragment,f),C(Xy.$$.fragment,f),C(R_.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(B_.$$.fragment,f),C(Uy.$$.fragment,f),C(v1.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(T1.$$.fragment,f),C(eL.$$.fragment,f),C(ab.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(sb.$$.fragment,f),C(nL.$$.fragment,f),C(Cb.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(Ab.$$.fragment,f),C(cL.$$.fragment,f),C(F2.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(M2.$$.fragment,f),C(pL.$$.fragment,f),C(Z2.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(o4.$$.fragment,f),C(FL.$$.fragment,f),C(i4.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(c4.$$.fragment,f),C(wL.$$.fragment,f),C(z4.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(Q4.$$.fragment,f),C($L.$$.fragment,f),C(P5.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(I5.$$.fragment,f),C(BL.$$.fragment,f),C(j5.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(G5.$$.fragment,f),C(DL.$$.fragment,f),C(ev.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(rv.$$.fragment,f),C(zL.$$.fragment,f),C(nv.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(lv.$$.fragment,f),C(JL.$$.fragment,f),C(bv.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(Fv.$$.fragment,f),C(o8.$$.fragment,f),C(yv.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(xv.$$.fragment,f),C(s8.$$.fragment,f),C(Dv.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(Ov.$$.fragment,f),C(f8.$$.fragment,f),C(Wv.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(Hv.$$.fragment,f),C(_8.$$.fragment,f),C(o3.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(t3.$$.fragment,f),C(M8.$$.fragment,f),C(i3.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(c3.$$.fragment,f),C(y8.$$.fragment,f),C(h3.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(u3.$$.fragment,f),C(R8.$$.fragment,f),C(v3.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(q8.$$.fragment,f),C(T3.$$.fragment,f),C(N8.$$.fragment,f),C(y3.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(x3.$$.fragment,f),C(V8.$$.fragment,f),C(S3.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(P3.$$.fragment,f),C(H8.$$.fragment,f),C(yF.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(xF.$$.fragment,f),C(Z8.$$.fragment,f),C(ZF.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(o6.$$.fragment,f),C(ax.$$.fragment,f),C(p6.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(_6.$$.fragment,f),C(dx.$$.fragment,f),C(M6.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(C6.$$.fragment,f),C(hx.$$.fragment,f),C(z6.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Q6.$$.fragment,f),C(vx.$$.fragment,f),C(aT.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(sT.$$.fragment,f),C(Cx.$$.fragment,f),C(RT.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(BT.$$.fragment,f),C(xx.$$.fragment,f),C(ZT.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(oM.$$.fragment,f),C(Px.$$.fragment,f),C(aM.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(sM.$$.fragment,f),C(Dx.$$.fragment,f),C(iM.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(cM.$$.fragment,f),C(zx.$$.fragment,f),C(kM.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Ux.$$.fragment,f),C(RM.$$.fragment,f),C(Jx.$$.fragment,f),C(eE.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e7.$$.fragment,f),C(rE.$$.fragment,f),C(o7.$$.fragment,f),C(aE.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(n7.$$.fragment,f),C(sE.$$.fragment,f),C(s7.$$.fragment,f),C(iE.$$.fragment,f),C(l7.$$.fragment,f),C(i7.$$.fragment,f),C(c7.$$.fragment,f),C(cE.$$.fragment,f),C(f7.$$.fragment,f),C(IE.$$.fragment,f),C(m7.$$.fragment,f),C(g7.$$.fragment,f),C(p7.$$.fragment,f),C(NE.$$.fragment,f),C(u7.$$.fragment,f),C(HE.$$.fragment,f),C(_7.$$.fragment,f),C(b7.$$.fragment,f),C(F7.$$.fragment,f),C(JE.$$.fragment,f),C(T7.$$.fragment,f),C(dC.$$.fragment,f),C(M7.$$.fragment,f),C(E7.$$.fragment,f),C(w7.$$.fragment,f),C(fC.$$.fragment,f),C(A7.$$.fragment,f),C(MC.$$.fragment,f),C(y7.$$.fragment,f),C(L7.$$.fragment,f),C($7.$$.fragment,f),C(CC.$$.fragment,f),C(k7.$$.fragment,f),C(PC.$$.fragment,f),C(S7.$$.fragment,f),C(R7.$$.fragment,f),C(B7.$$.fragment,f),C(IC.$$.fragment,f),C(I7.$$.fragment,f),C(QC.$$.fragment,f),C(q7.$$.fragment,f),C(N7.$$.fragment,f),C(D7.$$.fragment,f),C(UC.$$.fragment,f),C(G7.$$.fragment,f),C(sw.$$.fragment,f),C(O7.$$.fragment,f),C(V7.$$.fragment,f),C(z7.$$.fragment,f),C(iw.$$.fragment,f),C(W7.$$.fragment,f),C(_w.$$.fragment,f),C(Q7.$$.fragment,f),C(H7.$$.fragment,f),C(J7.$$.fragment,f),C(vw.$$.fragment,f),C(Y7.$$.fragment,f),C(Lw.$$.fragment,f),C(K7.$$.fragment,f),C(Z7.$$.fragment,f),C(o9.$$.fragment,f),C($w.$$.fragment,f),C(r9.$$.fragment,f),C(Sw.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(Pw.$$.fragment,f),C(l9.$$.fragment,f),C(qw.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(jw.$$.fragment,f),C(g9.$$.fragment,f),C(Gw.$$.fragment,f),INe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(RIe),f&&t(_i),w(dy),f&&t(PIe),f&&t(kn),f&&t(BIe),w(cy,f),f&&t(IIe),f&&t(k$),f&&t(qIe),w(vf,f),f&&t(NIe),f&&t(bi),w(fy),f&&t(jIe),f&&t(Co),w(my),w(py),w(bg),w(uy),f&&t(DIe),f&&t(Fi),w(_y),f&&t(GIe),f&&t(wo),w(by),w(Ty),w(Kg),w(My),f&&t(OIe),f&&t(Ti),w(Ey),f&&t(VIe),f&&t(Ao),w(Cy),w(yy),w(yh),w(Lh),w(Ly),f&&t(XIe),f&&t(Mi),w(xy),f&&t(zIe),f&&t(yo),w($y),w(Ry),w(Qh),w(Hh),w(Py),f&&t(WIe),f&&t(Ci),w(By),f&&t(QIe),f&&t(Lo),w(Iy),w(Ny),w(Yh),w(jy),w(Ou),f&&t(HIe),f&&t(yi),w(Dy),f&&t(UIe),f&&t(xo),w(Gy),w(Vy),w(Xu),w(Xy),w(R_),f&&t(JIe),f&&t($i),w(zy),f&&t(YIe),f&&t($o),w(Wy),w(Hy),w(B_),w(Uy),w(v1),f&&t(KIe),f&&t(Ri),w(Jy),f&&t(ZIe),f&&t(ko),w(Yy),w(Zy),w(T1),w(eL),w(ab),f&&t(eqe),f&&t(Ii),w(oL),f&&t(oqe),f&&t(So),w(rL),w(aL),w(sb),w(nL),w(Cb),f&&t(rqe),f&&t(ji),w(sL),f&&t(tqe),f&&t(Ro),w(lL),w(dL),w(Ab),w(cL),w(F2),f&&t(aqe),f&&t(Oi),w(fL),f&&t(nqe),f&&t(Po),w(mL),w(hL),w(M2),w(pL),w(Z2),f&&t(sqe),f&&t(zi),w(uL),f&&t(lqe),f&&t(Bo),w(_L),w(vL),w(o4),w(FL),w(i4),f&&t(iqe),f&&t(Hi),w(TL),f&&t(dqe),f&&t(Io),w(ML),w(CL),w(c4),w(wL),w(z4),f&&t(cqe),f&&t(Yi),w(AL),f&&t(fqe),f&&t(qo),w(yL),w(xL),w(Q4),w($L),w(P5),f&&t(mqe),f&&t(ed),w(kL),f&&t(gqe),f&&t(No),w(SL),w(PL),w(I5),w(BL),w(j5),f&&t(hqe),f&&t(td),w(IL),f&&t(pqe),f&&t(jo),w(qL),w(jL),w(G5),w(DL),w(ev),f&&t(uqe),f&&t(sd),w(GL),f&&t(_qe),f&&t(Do),w(OL),w(XL),w(rv),w(zL),w(nv),f&&t(bqe),f&&t(dd),w(WL),f&&t(vqe),f&&t(Go),w(QL),w(UL),w(lv),w(JL),w(bv),f&&t(Fqe),f&&t(md),w(YL),f&&t(Tqe),f&&t(Oo),w(KL),w(e8),w(Fv),w(o8),w(yv),f&&t(Mqe),f&&t(pd),w(r8),f&&t(Eqe),f&&t(Vo),w(t8),w(n8),w(xv),w(s8),w(Dv),f&&t(Cqe),f&&t(bd),w(l8),f&&t(wqe),f&&t(Xo),w(i8),w(c8),w(Ov),w(f8),w(Wv),f&&t(Aqe),f&&t(Td),w(g8),f&&t(yqe),f&&t(zo),w(h8),w(u8),w(Hv),w(_8),w(o3),f&&t(Lqe),f&&t(Cd),w(b8),f&&t(xqe),f&&t(Wo),w(v8),w(T8),w(t3),w(M8),w(i3),f&&t($qe),f&&t(Ld),w(E8),f&&t(kqe),f&&t(Qo),w(C8),w(A8),w(c3),w(y8),w(h3),f&&t(Sqe),f&&t(kd),w(x8),f&&t(Rqe),f&&t(Ho),w($8),w(S8),w(u3),w(R8),w(v3),f&&t(Pqe),f&&t(Pd),w(P8),f&&t(Bqe),f&&t(Uo),w(B8),w(q8),w(T3),w(N8),w(y3),f&&t(Iqe),f&&t(qd),w(j8),f&&t(qqe),f&&t(Jo),w(D8),w(O8),w(x3),w(V8),w(S3),f&&t(Nqe),f&&t(Dd),w(X8),f&&t(jqe),f&&t(Yo),w(z8),w(Q8),w(P3),w(H8),w(yF),f&&t(Dqe),f&&t(Vd),w(U8),f&&t(Gqe),f&&t(Ko),w(J8),w(K8),w(xF),w(Z8),w(ZF),f&&t(Oqe),f&&t(Wd),w(ex),f&&t(Vqe),f&&t(Zo),w(ox),w(tx),w(o6),w(ax),w(p6),f&&t(Xqe),f&&t(Ud),w(nx),f&&t(zqe),f&&t(er),w(sx),w(ix),w(_6),w(dx),w(M6),f&&t(Wqe),f&&t(Kd),w(cx),f&&t(Qqe),f&&t(or),w(fx),w(gx),w(C6),w(hx),w(z6),f&&t(Hqe),f&&t(oc),w(px),f&&t(Uqe),f&&t(rr),w(ux),w(bx),w(Q6),w(vx),w(aT),f&&t(Jqe),f&&t(ac),w(Fx),f&&t(Yqe),f&&t(tr),w(Tx),w(Ex),w(sT),w(Cx),w(RT),f&&t(Kqe),f&&t(lc),w(wx),f&&t(Zqe),f&&t(ar),w(Ax),w(Lx),w(BT),w(xx),w(ZT),f&&t(eNe),f&&t(cc),w($x),f&&t(oNe),f&&t(nr),w(kx),w(Rx),w(oM),w(Px),w(aM),f&&t(rNe),f&&t(gc),w(Ix),f&&t(tNe),f&&t(sr),w(qx),w(jx),w(sM),w(Dx),w(iM),f&&t(aNe),f&&t(uc),w(Gx),f&&t(nNe),f&&t(lr),w(Ox),w(Xx),w(cM),w(zx),w(kM),f&&t(sNe),f&&t(vc),w(Wx),f&&t(lNe),f&&t(ir),w(Qx),w(Ux),w(RM),w(Jx),w(eE),f&&t(iNe),f&&t(Mc),w(Yx),f&&t(dNe),f&&t(dr),w(Kx),w(e7),w(rE),w(o7),w(aE),f&&t(cNe),f&&t(wc),w(r7),f&&t(fNe),f&&t(cr),w(t7),w(n7),w(sE),w(s7),w(iE),f&&t(mNe),f&&t(Lc),w(l7),f&&t(gNe),f&&t(fr),w(i7),w(c7),w(cE),w(f7),w(IE),f&&t(hNe),f&&t(kc),w(m7),f&&t(pNe),f&&t(mr),w(g7),w(p7),w(NE),w(u7),w(HE),f&&t(uNe),f&&t(Pc),w(_7),f&&t(_Ne),f&&t(gr),w(b7),w(F7),w(JE),w(T7),w(dC),f&&t(bNe),f&&t(qc),w(M7),f&&t(vNe),f&&t(hr),w(E7),w(w7),w(fC),w(A7),w(MC),f&&t(FNe),f&&t(Dc),w(y7),f&&t(TNe),f&&t(pr),w(L7),w($7),w(CC),w(k7),w(PC),f&&t(MNe),f&&t(Vc),w(S7),f&&t(ENe),f&&t(ur),w(R7),w(B7),w(IC),w(I7),w(QC),f&&t(CNe),f&&t(Wc),w(q7),f&&t(wNe),f&&t(_r),w(N7),w(D7),w(UC),w(G7),w(sw),f&&t(ANe),f&&t(Uc),w(O7),f&&t(yNe),f&&t(br),w(V7),w(z7),w(iw),w(W7),w(_w),f&&t(LNe),f&&t(Kc),w(Q7),f&&t(xNe),f&&t(vr),w(H7),w(J7),w(vw),w(Y7),w(Lw),f&&t($Ne),f&&t(of),w(K7),f&&t(kNe),f&&t(Fr),w(Z7),w(o9),w($w),w(r9),w(Sw),f&&t(SNe),f&&t(af),w(t9),f&&t(RNe),f&&t(Tr),w(a9),w(s9),w(Pw),w(l9),w(qw),f&&t(PNe),f&&t(lf),w(d9),f&&t(BNe),f&&t(Mr),w(c9),w(m9),w(jw),w(g9),w(Gw)}}}const E7t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function C7t(L){return C8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class k7t extends F8t{constructor(g){super();T8t(this,g,C7t,M7t,M8t,{})}}export{k7t as default,E7t as metadata};
