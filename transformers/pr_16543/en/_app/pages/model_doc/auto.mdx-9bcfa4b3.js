import{S as Z8t,i as e7t,s as o7t,e as a,k as l,w as F,t as o,M as r7t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as t7t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function a7t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,iy,pf,je,We,gi,yn,dy,Ln,xn,cy,hi,$n,fy,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),iy=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),dy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),cy=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),fy=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var x$=s(p);m=r(x$,"NewModelConfig"),x$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var $$=s(ci);hf=r($$,"model_type"),$$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var k$=s(fi);mi=r(k$,'"new-model"'),k$.forEach(t),iy=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),dy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var S$=s(Ln);xn=r(S$,"PreTrainedModel"),S$.forEach(t),cy=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),fy=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var R$=s(pi);_f=r(R$,"NewModelConfig"),R$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,iy),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,dy),e(je,Ln),e(Ln,xn),e(je,cy),e(je,hi),e(hi,$n),e(je,fy),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function n7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l7t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function i7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d7t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function c7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,iy,pf,je,We,gi,yn,dy,Ln,xn,cy,hi,$n,fy,pi,_f,Ca,Qe,Ae,x$,_i,$$,k$,Eo,wa,S$,uf,R$,rGe,zIe,ui,bf,Lee,my,tGe,xee,aGe,WIe,kn,nGe,$ee,sGe,lGe,kee,iGe,dGe,QIe,gy,HIe,P$,cGe,UIe,vf,JIe,bi,Ff,See,hy,fGe,Ree,mGe,YIe,Co,py,gGe,_y,hGe,B$,pGe,_Ge,uGe,uy,bGe,Pee,vGe,FGe,TGe,Er,by,MGe,Bee,EGe,CGe,vi,wGe,Iee,AGe,yGe,qee,LGe,xGe,$Ge,A,Tf,Nee,kGe,SGe,I$,RGe,PGe,BGe,Mf,jee,IGe,qGe,q$,NGe,jGe,DGe,Ef,Dee,GGe,OGe,N$,VGe,XGe,zGe,Cf,Gee,WGe,QGe,j$,HGe,UGe,JGe,wf,Oee,YGe,KGe,D$,ZGe,eOe,oOe,Af,Vee,rOe,tOe,G$,aOe,nOe,sOe,yf,Xee,lOe,iOe,O$,dOe,cOe,fOe,Lf,zee,mOe,gOe,V$,hOe,pOe,_Oe,xf,Wee,uOe,bOe,X$,vOe,FOe,TOe,$f,Qee,MOe,EOe,z$,COe,wOe,AOe,kf,Hee,yOe,LOe,W$,xOe,$Oe,kOe,Sf,Uee,SOe,ROe,Q$,POe,BOe,IOe,Rf,Jee,qOe,NOe,H$,jOe,DOe,GOe,Pf,Yee,OOe,VOe,U$,XOe,zOe,WOe,Bf,Kee,QOe,HOe,J$,UOe,JOe,YOe,If,Zee,KOe,ZOe,Y$,eVe,oVe,rVe,qf,eoe,tVe,aVe,K$,nVe,sVe,lVe,Nf,ooe,iVe,dVe,Z$,cVe,fVe,mVe,jf,roe,gVe,hVe,ek,pVe,_Ve,uVe,Df,toe,bVe,vVe,ok,FVe,TVe,MVe,Gf,aoe,EVe,CVe,rk,wVe,AVe,yVe,Of,noe,LVe,xVe,tk,$Ve,kVe,SVe,Vf,soe,RVe,PVe,ak,BVe,IVe,qVe,Xf,loe,NVe,jVe,nk,DVe,GVe,OVe,zf,ioe,VVe,XVe,sk,zVe,WVe,QVe,Wf,doe,HVe,UVe,lk,JVe,YVe,KVe,Qf,coe,ZVe,eXe,ik,oXe,rXe,tXe,Hf,foe,aXe,nXe,dk,sXe,lXe,iXe,Uf,moe,dXe,cXe,ck,fXe,mXe,gXe,Jf,goe,hXe,pXe,fk,_Xe,uXe,bXe,Yf,hoe,vXe,FXe,mk,TXe,MXe,EXe,Kf,poe,CXe,wXe,gk,AXe,yXe,LXe,Zf,_oe,xXe,$Xe,hk,kXe,SXe,RXe,em,uoe,PXe,BXe,pk,IXe,qXe,NXe,om,boe,jXe,DXe,_k,GXe,OXe,VXe,rm,voe,XXe,zXe,uk,WXe,QXe,HXe,tm,Foe,UXe,JXe,bk,YXe,KXe,ZXe,am,Toe,eze,oze,vk,rze,tze,aze,nm,Moe,nze,sze,Fk,lze,ize,dze,sm,Eoe,cze,fze,Tk,mze,gze,hze,lm,Coe,pze,_ze,Mk,uze,bze,vze,im,woe,Fze,Tze,Ek,Mze,Eze,Cze,dm,Aoe,wze,Aze,Ck,yze,Lze,xze,cm,yoe,$ze,kze,wk,Sze,Rze,Pze,fm,Loe,Bze,Ize,Ak,qze,Nze,jze,mm,xoe,Dze,Gze,yk,Oze,Vze,Xze,gm,$oe,zze,Wze,Lk,Qze,Hze,Uze,hm,koe,Jze,Yze,xk,Kze,Zze,eWe,pm,Soe,oWe,rWe,$k,tWe,aWe,nWe,_m,Roe,sWe,lWe,kk,iWe,dWe,cWe,um,Poe,fWe,mWe,Sk,gWe,hWe,pWe,bm,Boe,_We,uWe,Rk,bWe,vWe,FWe,vm,Ioe,TWe,MWe,Pk,EWe,CWe,wWe,Fm,qoe,AWe,yWe,Bk,LWe,xWe,$We,Tm,Noe,kWe,SWe,Ik,RWe,PWe,BWe,Mm,joe,IWe,qWe,qk,NWe,jWe,DWe,Em,Doe,GWe,OWe,Nk,VWe,XWe,zWe,Cm,Goe,WWe,QWe,jk,HWe,UWe,JWe,wm,Ooe,YWe,KWe,Dk,ZWe,eQe,oQe,Am,Voe,rQe,tQe,Gk,aQe,nQe,sQe,ym,Xoe,lQe,iQe,Ok,dQe,cQe,fQe,Lm,zoe,mQe,gQe,Vk,hQe,pQe,_Qe,xm,Woe,uQe,bQe,Xk,vQe,FQe,TQe,$m,Qoe,MQe,EQe,zk,CQe,wQe,AQe,km,Hoe,yQe,LQe,Wk,xQe,$Qe,kQe,Sm,Uoe,SQe,RQe,Qk,PQe,BQe,IQe,Rm,Joe,qQe,NQe,Hk,jQe,DQe,GQe,Pm,Yoe,OQe,VQe,Uk,XQe,zQe,WQe,Bm,Koe,QQe,HQe,Jk,UQe,JQe,YQe,Im,Zoe,KQe,ZQe,Yk,eHe,oHe,rHe,qm,ere,tHe,aHe,Kk,nHe,sHe,lHe,Nm,ore,iHe,dHe,Zk,cHe,fHe,mHe,jm,rre,gHe,hHe,eS,pHe,_He,uHe,Dm,tre,bHe,vHe,oS,FHe,THe,MHe,Gm,are,EHe,CHe,rS,wHe,AHe,yHe,Om,nre,LHe,xHe,tS,$He,kHe,SHe,Vm,sre,RHe,PHe,aS,BHe,IHe,qHe,Xm,lre,NHe,jHe,nS,DHe,GHe,OHe,zm,ire,VHe,XHe,sS,zHe,WHe,QHe,Wm,dre,HHe,UHe,lS,JHe,YHe,KHe,Qm,cre,ZHe,eUe,iS,oUe,rUe,tUe,Hm,fre,aUe,nUe,dS,sUe,lUe,iUe,Um,mre,dUe,cUe,cS,fUe,mUe,gUe,Jm,gre,hUe,pUe,fS,_Ue,uUe,bUe,Ym,hre,vUe,FUe,mS,TUe,MUe,EUe,Km,pre,CUe,wUe,gS,AUe,yUe,LUe,Zm,_re,xUe,$Ue,hS,kUe,SUe,RUe,eg,ure,PUe,BUe,pS,IUe,qUe,NUe,og,bre,jUe,DUe,_S,GUe,OUe,VUe,rg,vre,XUe,zUe,uS,WUe,QUe,HUe,tg,Fre,UUe,JUe,bS,YUe,KUe,ZUe,ag,Tre,eJe,oJe,vS,rJe,tJe,aJe,ng,Mre,nJe,sJe,FS,lJe,iJe,dJe,sg,Ere,cJe,fJe,TS,mJe,gJe,hJe,lg,Cre,pJe,_Je,MS,uJe,bJe,vJe,ig,wre,FJe,TJe,ES,MJe,EJe,CJe,dg,Are,wJe,AJe,CS,yJe,LJe,xJe,cg,yre,$Je,kJe,wS,SJe,RJe,PJe,fg,Lre,BJe,IJe,AS,qJe,NJe,jJe,mg,xre,DJe,GJe,yS,OJe,VJe,XJe,gg,$re,zJe,WJe,LS,QJe,HJe,UJe,hg,kre,JJe,YJe,xS,KJe,ZJe,eYe,pg,Sre,oYe,rYe,$S,tYe,aYe,nYe,_g,Rre,sYe,lYe,kS,iYe,dYe,cYe,ug,Pre,fYe,mYe,SS,gYe,hYe,pYe,bg,Bre,_Ye,uYe,RS,bYe,vYe,FYe,vg,TYe,Fg,vy,MYe,Ire,EYe,KIe,Fi,Tg,qre,Fy,CYe,Nre,wYe,ZIe,wo,Ty,AYe,My,yYe,PS,LYe,xYe,$Ye,Ey,kYe,jre,SYe,RYe,PYe,Cr,Cy,BYe,Dre,IYe,qYe,Aa,NYe,Gre,jYe,DYe,Ore,GYe,OYe,Vre,VYe,XYe,zYe,k,Sn,Xre,WYe,QYe,BS,HYe,UYe,IS,JYe,YYe,KYe,Rn,zre,ZYe,eKe,qS,oKe,rKe,NS,tKe,aKe,nKe,Pn,Wre,sKe,lKe,jS,iKe,dKe,DS,cKe,fKe,mKe,Mg,Qre,gKe,hKe,GS,pKe,_Ke,uKe,Bn,Hre,bKe,vKe,OS,FKe,TKe,VS,MKe,EKe,CKe,Eg,Ure,wKe,AKe,XS,yKe,LKe,xKe,Cg,Jre,$Ke,kKe,zS,SKe,RKe,PKe,wg,Yre,BKe,IKe,WS,qKe,NKe,jKe,In,Kre,DKe,GKe,QS,OKe,VKe,HS,XKe,zKe,WKe,qn,Zre,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Nn,ete,eZe,oZe,YS,rZe,tZe,KS,aZe,nZe,sZe,Ag,ote,lZe,iZe,ZS,dZe,cZe,fZe,yg,rte,mZe,gZe,eR,hZe,pZe,_Ze,jn,tte,uZe,bZe,oR,vZe,FZe,rR,TZe,MZe,EZe,Lg,ate,CZe,wZe,tR,AZe,yZe,LZe,Dn,nte,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,Gn,ste,IZe,qZe,sR,NZe,jZe,lR,DZe,GZe,OZe,On,lte,VZe,XZe,iR,zZe,WZe,dR,QZe,HZe,UZe,xg,ite,JZe,YZe,cR,KZe,ZZe,eeo,Vn,dte,oeo,reo,fR,teo,aeo,mR,neo,seo,leo,Xn,cte,ieo,deo,gR,ceo,feo,hR,meo,geo,heo,zn,fte,peo,_eo,pR,ueo,beo,_R,veo,Feo,Teo,Wn,mte,Meo,Eeo,uR,Ceo,weo,bR,Aeo,yeo,Leo,Qn,gte,xeo,$eo,vR,keo,Seo,FR,Reo,Peo,Beo,Hn,hte,Ieo,qeo,TR,Neo,jeo,MR,Deo,Geo,Oeo,$g,pte,Veo,Xeo,ER,zeo,Weo,Qeo,Un,_te,Heo,Ueo,CR,Jeo,Yeo,wR,Keo,Zeo,eoo,kg,ute,ooo,roo,AR,too,aoo,noo,Jn,bte,soo,loo,yR,ioo,doo,LR,coo,foo,moo,Yn,vte,goo,hoo,xR,poo,_oo,$R,uoo,boo,voo,Kn,Fte,Foo,Too,kR,Moo,Eoo,SR,Coo,woo,Aoo,Zn,Tte,yoo,Loo,RR,xoo,$oo,PR,koo,Soo,Roo,es,Mte,Poo,Boo,BR,Ioo,qoo,IR,Noo,joo,Doo,Sg,Ete,Goo,Ooo,qR,Voo,Xoo,zoo,os,Cte,Woo,Qoo,NR,Hoo,Uoo,jR,Joo,Yoo,Koo,rs,wte,Zoo,ero,DR,oro,rro,GR,tro,aro,nro,ts,Ate,sro,lro,OR,iro,dro,VR,cro,fro,mro,as,yte,gro,hro,XR,pro,_ro,zR,uro,bro,vro,ns,Lte,Fro,Tro,WR,Mro,Ero,QR,Cro,wro,Aro,ss,xte,yro,Lro,HR,xro,$ro,UR,kro,Sro,Rro,Rg,$te,Pro,Bro,JR,Iro,qro,Nro,ls,kte,jro,Dro,YR,Gro,Oro,KR,Vro,Xro,zro,Pg,Ste,Wro,Qro,ZR,Hro,Uro,Jro,Bg,Rte,Yro,Kro,eP,Zro,eto,oto,is,Pte,rto,tto,oP,ato,nto,rP,sto,lto,ito,ds,Bte,dto,cto,tP,fto,mto,aP,gto,hto,pto,cs,Ite,_to,uto,nP,bto,vto,sP,Fto,Tto,Mto,Ig,qte,Eto,Cto,lP,wto,Ato,yto,fs,Nte,Lto,xto,iP,$to,kto,dP,Sto,Rto,Pto,ms,jte,Bto,Ito,cP,qto,Nto,fP,jto,Dto,Gto,gs,Dte,Oto,Vto,mP,Xto,zto,gP,Wto,Qto,Hto,hs,Gte,Uto,Jto,hP,Yto,Kto,pP,Zto,eao,oao,ps,Ote,rao,tao,_P,aao,nao,uP,sao,lao,iao,qg,Vte,dao,cao,bP,fao,mao,gao,_s,Xte,hao,pao,vP,_ao,uao,FP,bao,vao,Fao,Ng,zte,Tao,Mao,TP,Eao,Cao,wao,jg,Wte,Aao,yao,MP,Lao,xao,$ao,Dg,Qte,kao,Sao,EP,Rao,Pao,Bao,Gg,Hte,Iao,qao,CP,Nao,jao,Dao,us,Ute,Gao,Oao,wP,Vao,Xao,AP,zao,Wao,Qao,Og,Jte,Hao,Uao,yP,Jao,Yao,Kao,bs,Yte,Zao,eno,LP,ono,rno,xP,tno,ano,nno,vs,Kte,sno,lno,$P,ino,dno,kP,cno,fno,mno,Fs,Zte,gno,hno,SP,pno,_no,RP,uno,bno,vno,Ts,eae,Fno,Tno,PP,Mno,Eno,BP,Cno,wno,Ano,Ms,oae,yno,Lno,IP,xno,$no,qP,kno,Sno,Rno,Es,rae,Pno,Bno,NP,Ino,qno,jP,Nno,jno,Dno,Vg,tae,Gno,Ono,DP,Vno,Xno,zno,Xg,aae,Wno,Qno,GP,Hno,Uno,Jno,Cs,nae,Yno,Kno,OP,Zno,eso,VP,oso,rso,tso,ws,sae,aso,nso,XP,sso,lso,zP,iso,dso,cso,As,lae,fso,mso,WP,gso,hso,QP,pso,_so,uso,zg,iae,bso,vso,HP,Fso,Tso,Mso,Wg,dae,Eso,Cso,UP,wso,Aso,yso,Qg,cae,Lso,xso,JP,$so,kso,Sso,ys,fae,Rso,Pso,YP,Bso,Iso,KP,qso,Nso,jso,Hg,mae,Dso,Gso,ZP,Oso,Vso,Xso,Ug,gae,zso,Wso,eB,Qso,Hso,Uso,Jg,hae,Jso,Yso,oB,Kso,Zso,elo,Ls,pae,olo,rlo,rB,tlo,alo,tB,nlo,slo,llo,Yg,_ae,ilo,dlo,aB,clo,flo,mlo,Kg,uae,glo,hlo,nB,plo,_lo,ulo,xs,bae,blo,vlo,sB,Flo,Tlo,lB,Mlo,Elo,Clo,$s,vae,wlo,Alo,iB,ylo,Llo,dB,xlo,$lo,klo,ks,Fae,Slo,Rlo,cB,Plo,Blo,fB,Ilo,qlo,Nlo,Ss,Tae,jlo,Dlo,mB,Glo,Olo,gB,Vlo,Xlo,zlo,Zg,Wlo,eh,wy,Qlo,Mae,Hlo,eqe,Ti,oh,Eae,Ay,Ulo,Cae,Jlo,oqe,Ao,yy,Ylo,Ly,Klo,hB,Zlo,eio,oio,xy,rio,wae,tio,aio,nio,He,$y,sio,Aae,lio,iio,ya,dio,yae,cio,fio,Lae,mio,gio,xae,hio,pio,_io,Z,rh,$ae,uio,bio,pB,vio,Fio,Tio,th,kae,Mio,Eio,_B,Cio,wio,Aio,ah,Sae,yio,Lio,uB,xio,$io,kio,nh,Rae,Sio,Rio,bB,Pio,Bio,Iio,sh,Pae,qio,Nio,vB,jio,Dio,Gio,lh,Bae,Oio,Vio,FB,Xio,zio,Wio,ih,Iae,Qio,Hio,TB,Uio,Jio,Yio,dh,qae,Kio,Zio,MB,edo,odo,rdo,ch,Nae,tdo,ado,EB,ndo,sdo,ldo,fh,jae,ido,ddo,CB,cdo,fdo,mdo,mh,Dae,gdo,hdo,wB,pdo,_do,udo,gh,Gae,bdo,vdo,AB,Fdo,Tdo,Mdo,hh,Oae,Edo,Cdo,yB,wdo,Ado,ydo,ph,Vae,Ldo,xdo,LB,$do,kdo,Sdo,_h,Xae,Rdo,Pdo,xB,Bdo,Ido,qdo,uh,zae,Ndo,jdo,$B,Ddo,Gdo,Odo,bh,Wae,Vdo,Xdo,kB,zdo,Wdo,Qdo,vh,Qae,Hdo,Udo,SB,Jdo,Ydo,Kdo,Fh,Hae,Zdo,eco,RB,oco,rco,tco,Th,Uae,aco,nco,PB,sco,lco,ico,Mh,Jae,dco,cco,BB,fco,mco,gco,Eh,Yae,hco,pco,IB,_co,uco,bco,Ch,Kae,vco,Fco,qB,Tco,Mco,Eco,wh,Zae,Cco,wco,NB,Aco,yco,Lco,Ah,ene,xco,$co,jB,kco,Sco,Rco,yh,one,Pco,Bco,DB,Ico,qco,Nco,Lh,jco,xh,Dco,$h,ky,Gco,rne,Oco,rqe,Mi,kh,tne,Sy,Vco,ane,Xco,tqe,yo,Ry,zco,Py,Wco,GB,Qco,Hco,Uco,By,Jco,nne,Yco,Kco,Zco,Ue,Iy,efo,sne,ofo,rfo,Ei,tfo,lne,afo,nfo,ine,sfo,lfo,ifo,pe,Sh,dne,dfo,cfo,OB,ffo,mfo,gfo,Rh,cne,hfo,pfo,fne,_fo,ufo,bfo,Ph,mne,vfo,Ffo,VB,Tfo,Mfo,Efo,Bh,gne,Cfo,wfo,XB,Afo,yfo,Lfo,Ih,hne,xfo,$fo,zB,kfo,Sfo,Rfo,qh,pne,Pfo,Bfo,WB,Ifo,qfo,Nfo,Nh,_ne,jfo,Dfo,QB,Gfo,Ofo,Vfo,jh,une,Xfo,zfo,HB,Wfo,Qfo,Hfo,Dh,bne,Ufo,Jfo,UB,Yfo,Kfo,Zfo,Gh,vne,emo,omo,JB,rmo,tmo,amo,Oh,Fne,nmo,smo,YB,lmo,imo,dmo,Vh,Tne,cmo,fmo,KB,mmo,gmo,hmo,Xh,Mne,pmo,_mo,ZB,umo,bmo,vmo,zh,Ene,Fmo,Tmo,eI,Mmo,Emo,Cmo,Wh,Cne,wmo,Amo,oI,ymo,Lmo,xmo,Qh,wne,$mo,kmo,rI,Smo,Rmo,Pmo,Hh,Bmo,Uh,Imo,Jh,qy,qmo,Ane,Nmo,aqe,Ci,Yh,yne,Ny,jmo,Lne,Dmo,nqe,Lo,jy,Gmo,wi,Omo,tI,Vmo,Xmo,aI,zmo,Wmo,Qmo,Dy,Hmo,xne,Umo,Jmo,Ymo,tt,Gy,Kmo,$ne,Zmo,ego,Ai,ogo,kne,rgo,tgo,nI,ago,ngo,sgo,Kh,lgo,Je,Oy,igo,Sne,dgo,cgo,La,fgo,Rne,mgo,ggo,Pne,hgo,pgo,Bne,_go,ugo,bgo,x,Zh,Ine,vgo,Fgo,sI,Tgo,Mgo,Ego,ep,qne,Cgo,wgo,lI,Ago,ygo,Lgo,op,Nne,xgo,$go,iI,kgo,Sgo,Rgo,rp,jne,Pgo,Bgo,dI,Igo,qgo,Ngo,tp,Dne,jgo,Dgo,cI,Ggo,Ogo,Vgo,ap,Gne,Xgo,zgo,fI,Wgo,Qgo,Hgo,np,One,Ugo,Jgo,mI,Ygo,Kgo,Zgo,sp,Vne,eho,oho,gI,rho,tho,aho,lp,Xne,nho,sho,hI,lho,iho,dho,ip,zne,cho,fho,pI,mho,gho,hho,dp,Wne,pho,_ho,_I,uho,bho,vho,cp,Qne,Fho,Tho,uI,Mho,Eho,Cho,fp,Hne,who,Aho,bI,yho,Lho,xho,mp,Une,$ho,kho,vI,Sho,Rho,Pho,gp,Jne,Bho,Iho,FI,qho,Nho,jho,hp,Yne,Dho,Gho,TI,Oho,Vho,Xho,pp,Kne,zho,Who,MI,Qho,Hho,Uho,_p,Zne,Jho,Yho,EI,Kho,Zho,epo,up,ese,opo,rpo,CI,tpo,apo,npo,bp,ose,spo,lpo,wI,ipo,dpo,cpo,vp,rse,fpo,mpo,AI,gpo,hpo,ppo,Fp,tse,_po,upo,yI,bpo,vpo,Fpo,Tp,ase,Tpo,Mpo,LI,Epo,Cpo,wpo,Mp,nse,Apo,ypo,xI,Lpo,xpo,$po,Ep,sse,kpo,Spo,$I,Rpo,Ppo,Bpo,Cp,lse,Ipo,qpo,kI,Npo,jpo,Dpo,wp,ise,Gpo,Opo,SI,Vpo,Xpo,zpo,Ap,dse,Wpo,Qpo,RI,Hpo,Upo,Jpo,yp,cse,Ypo,Kpo,PI,Zpo,e_o,o_o,Lp,fse,r_o,t_o,BI,a_o,n_o,s_o,xp,mse,l_o,i_o,II,d_o,c_o,f_o,Rs,gse,m_o,g_o,qI,h_o,p_o,NI,__o,u_o,b_o,$p,hse,v_o,F_o,jI,T_o,M_o,E_o,kp,pse,C_o,w_o,DI,A_o,y_o,L_o,Sp,_se,x_o,$_o,GI,k_o,S_o,R_o,Rp,use,P_o,B_o,OI,I_o,q_o,N_o,Pp,bse,j_o,D_o,VI,G_o,O_o,V_o,Bp,vse,X_o,z_o,XI,W_o,Q_o,H_o,Ip,Fse,U_o,J_o,zI,Y_o,K_o,Z_o,qp,Tse,euo,ouo,WI,ruo,tuo,auo,Np,Mse,nuo,suo,QI,luo,iuo,duo,jp,Ese,cuo,fuo,HI,muo,guo,huo,Dp,Cse,puo,_uo,UI,uuo,buo,vuo,Gp,wse,Fuo,Tuo,JI,Muo,Euo,Cuo,Op,Ase,wuo,Auo,YI,yuo,Luo,xuo,Vp,yse,$uo,kuo,KI,Suo,Ruo,Puo,Xp,Lse,Buo,Iuo,ZI,quo,Nuo,juo,zp,xse,Duo,Guo,eq,Ouo,Vuo,Xuo,Wp,$se,zuo,Wuo,oq,Quo,Huo,Uuo,Qp,kse,Juo,Yuo,rq,Kuo,Zuo,e1o,Hp,Sse,o1o,r1o,tq,t1o,a1o,n1o,Up,Rse,s1o,l1o,aq,i1o,d1o,c1o,Jp,Pse,f1o,m1o,nq,g1o,h1o,p1o,Yp,Bse,_1o,u1o,sq,b1o,v1o,F1o,Kp,Ise,T1o,M1o,lq,E1o,C1o,w1o,Zp,qse,A1o,y1o,iq,L1o,x1o,$1o,e_,Nse,k1o,S1o,dq,R1o,P1o,B1o,o_,jse,I1o,q1o,cq,N1o,j1o,D1o,r_,Dse,G1o,O1o,fq,V1o,X1o,z1o,t_,Gse,W1o,Q1o,mq,H1o,U1o,J1o,a_,Ose,Y1o,K1o,gq,Z1o,ebo,obo,n_,Vse,rbo,tbo,hq,abo,nbo,sbo,s_,Xse,lbo,ibo,pq,dbo,cbo,fbo,l_,zse,mbo,gbo,_q,hbo,pbo,_bo,i_,Wse,ubo,bbo,uq,vbo,Fbo,Tbo,d_,Qse,Mbo,Ebo,bq,Cbo,wbo,Abo,c_,Hse,ybo,Lbo,vq,xbo,$bo,kbo,f_,Use,Sbo,Rbo,Fq,Pbo,Bbo,Ibo,m_,Jse,qbo,Nbo,Tq,jbo,Dbo,Gbo,g_,Yse,Obo,Vbo,Mq,Xbo,zbo,Wbo,h_,Kse,Qbo,Hbo,Eq,Ubo,Jbo,Ybo,p_,Zse,Kbo,Zbo,Cq,e2o,o2o,r2o,__,ele,t2o,a2o,wq,n2o,s2o,l2o,u_,ole,i2o,d2o,Aq,c2o,f2o,m2o,b_,rle,g2o,h2o,yq,p2o,_2o,u2o,v_,tle,b2o,v2o,Lq,F2o,T2o,M2o,F_,ale,E2o,C2o,xq,w2o,A2o,y2o,T_,nle,L2o,x2o,$q,$2o,k2o,S2o,M_,sle,R2o,P2o,kq,B2o,I2o,q2o,E_,lle,N2o,j2o,Sq,D2o,G2o,O2o,C_,ile,V2o,X2o,Rq,z2o,W2o,Q2o,w_,dle,H2o,U2o,Pq,J2o,Y2o,K2o,A_,cle,Z2o,e4o,Bq,o4o,r4o,t4o,y_,fle,a4o,n4o,Iq,s4o,l4o,i4o,L_,mle,d4o,c4o,qq,f4o,m4o,g4o,x_,gle,h4o,p4o,Nq,_4o,u4o,b4o,$_,hle,v4o,F4o,jq,T4o,M4o,E4o,k_,ple,C4o,w4o,Dq,A4o,y4o,L4o,S_,_le,x4o,$4o,Gq,k4o,S4o,R4o,R_,ule,P4o,B4o,Oq,I4o,q4o,N4o,P_,ble,j4o,D4o,Vq,G4o,O4o,V4o,B_,vle,X4o,z4o,Xq,W4o,Q4o,H4o,I_,Fle,U4o,J4o,zq,Y4o,K4o,Z4o,q_,Tle,e5o,o5o,Wq,r5o,t5o,a5o,N_,Mle,n5o,s5o,Qq,l5o,i5o,d5o,j_,Ele,c5o,f5o,Hq,m5o,g5o,h5o,D_,Cle,p5o,_5o,Uq,u5o,b5o,v5o,G_,wle,F5o,T5o,Jq,M5o,E5o,C5o,O_,Ale,w5o,A5o,Yq,y5o,L5o,x5o,V_,$5o,yle,k5o,S5o,Lle,R5o,P5o,X_,sqe,yi,z_,xle,Vy,B5o,$le,I5o,lqe,xo,Xy,q5o,Li,N5o,Kq,j5o,D5o,Zq,G5o,O5o,V5o,zy,X5o,kle,z5o,W5o,Q5o,at,Wy,H5o,Sle,U5o,J5o,xi,Y5o,Rle,K5o,Z5o,eN,evo,ovo,rvo,W_,tvo,Ye,Qy,avo,Ple,nvo,svo,xa,lvo,Ble,ivo,dvo,Ile,cvo,fvo,qle,mvo,gvo,hvo,G,Q_,Nle,pvo,_vo,oN,uvo,bvo,vvo,H_,jle,Fvo,Tvo,rN,Mvo,Evo,Cvo,U_,Dle,wvo,Avo,tN,yvo,Lvo,xvo,J_,Gle,$vo,kvo,aN,Svo,Rvo,Pvo,Y_,Ole,Bvo,Ivo,nN,qvo,Nvo,jvo,K_,Vle,Dvo,Gvo,sN,Ovo,Vvo,Xvo,Z_,Xle,zvo,Wvo,lN,Qvo,Hvo,Uvo,eu,zle,Jvo,Yvo,iN,Kvo,Zvo,e3o,ou,Wle,o3o,r3o,dN,t3o,a3o,n3o,ru,Qle,s3o,l3o,cN,i3o,d3o,c3o,tu,Hle,f3o,m3o,fN,g3o,h3o,p3o,au,Ule,_3o,u3o,mN,b3o,v3o,F3o,nu,Jle,T3o,M3o,gN,E3o,C3o,w3o,su,Yle,A3o,y3o,hN,L3o,x3o,$3o,lu,Kle,k3o,S3o,pN,R3o,P3o,B3o,iu,Zle,I3o,q3o,_N,N3o,j3o,D3o,du,eie,G3o,O3o,uN,V3o,X3o,z3o,cu,oie,W3o,Q3o,bN,H3o,U3o,J3o,fu,rie,Y3o,K3o,vN,Z3o,eFo,oFo,mu,tie,rFo,tFo,FN,aFo,nFo,sFo,gu,aie,lFo,iFo,TN,dFo,cFo,fFo,hu,nie,mFo,gFo,MN,hFo,pFo,_Fo,pu,sie,uFo,bFo,EN,vFo,FFo,TFo,_u,lie,MFo,EFo,CN,CFo,wFo,AFo,uu,iie,yFo,LFo,wN,xFo,$Fo,kFo,bu,die,SFo,RFo,AN,PFo,BFo,IFo,vu,cie,qFo,NFo,yN,jFo,DFo,GFo,Fu,fie,OFo,VFo,LN,XFo,zFo,WFo,Tu,mie,QFo,HFo,xN,UFo,JFo,YFo,Mu,gie,KFo,ZFo,$N,e6o,o6o,r6o,Eu,hie,t6o,a6o,kN,n6o,s6o,l6o,Cu,pie,i6o,d6o,SN,c6o,f6o,m6o,wu,_ie,g6o,h6o,RN,p6o,_6o,u6o,Au,uie,b6o,v6o,PN,F6o,T6o,M6o,yu,bie,E6o,C6o,BN,w6o,A6o,y6o,Lu,vie,L6o,x6o,IN,$6o,k6o,S6o,xu,Fie,R6o,P6o,qN,B6o,I6o,q6o,$u,Tie,N6o,j6o,NN,D6o,G6o,O6o,ku,Mie,V6o,X6o,jN,z6o,W6o,Q6o,Su,Eie,H6o,U6o,DN,J6o,Y6o,K6o,Ru,Cie,Z6o,eTo,GN,oTo,rTo,tTo,Pu,wie,aTo,nTo,ON,sTo,lTo,iTo,Bu,dTo,Aie,cTo,fTo,yie,mTo,gTo,Iu,iqe,$i,qu,Lie,Hy,hTo,xie,pTo,dqe,$o,Uy,_To,ki,uTo,VN,bTo,vTo,XN,FTo,TTo,MTo,Jy,ETo,$ie,CTo,wTo,ATo,nt,Yy,yTo,kie,LTo,xTo,Si,$To,Sie,kTo,STo,zN,RTo,PTo,BTo,Nu,ITo,Ke,Ky,qTo,Rie,NTo,jTo,$a,DTo,Pie,GTo,OTo,Bie,VTo,XTo,Iie,zTo,WTo,QTo,z,ju,qie,HTo,UTo,WN,JTo,YTo,KTo,Du,Nie,ZTo,eMo,QN,oMo,rMo,tMo,Gu,jie,aMo,nMo,HN,sMo,lMo,iMo,Ou,Die,dMo,cMo,UN,fMo,mMo,gMo,Vu,Gie,hMo,pMo,JN,_Mo,uMo,bMo,Xu,Oie,vMo,FMo,YN,TMo,MMo,EMo,zu,Vie,CMo,wMo,KN,AMo,yMo,LMo,Wu,Xie,xMo,$Mo,ZN,kMo,SMo,RMo,Qu,zie,PMo,BMo,ej,IMo,qMo,NMo,Hu,Wie,jMo,DMo,oj,GMo,OMo,VMo,Uu,Qie,XMo,zMo,rj,WMo,QMo,HMo,Ju,Hie,UMo,JMo,tj,YMo,KMo,ZMo,Yu,Uie,eEo,oEo,aj,rEo,tEo,aEo,Ku,Jie,nEo,sEo,nj,lEo,iEo,dEo,Zu,Yie,cEo,fEo,sj,mEo,gEo,hEo,e1,Kie,pEo,_Eo,lj,uEo,bEo,vEo,o1,Zie,FEo,TEo,ij,MEo,EEo,CEo,r1,ede,wEo,AEo,dj,yEo,LEo,xEo,t1,ode,$Eo,kEo,cj,SEo,REo,PEo,a1,rde,BEo,IEo,fj,qEo,NEo,jEo,n1,tde,DEo,GEo,mj,OEo,VEo,XEo,s1,ade,zEo,WEo,gj,QEo,HEo,UEo,l1,nde,JEo,YEo,hj,KEo,ZEo,eCo,i1,sde,oCo,rCo,pj,tCo,aCo,nCo,d1,lde,sCo,lCo,_j,iCo,dCo,cCo,c1,ide,fCo,mCo,uj,gCo,hCo,pCo,f1,dde,_Co,uCo,bj,bCo,vCo,FCo,m1,cde,TCo,MCo,vj,ECo,CCo,wCo,g1,fde,ACo,yCo,Fj,LCo,xCo,$Co,h1,mde,kCo,SCo,Tj,RCo,PCo,BCo,p1,gde,ICo,qCo,Mj,NCo,jCo,DCo,_1,hde,GCo,OCo,Ej,VCo,XCo,zCo,u1,pde,WCo,QCo,Cj,HCo,UCo,JCo,b1,_de,YCo,KCo,wj,ZCo,ewo,owo,v1,ude,rwo,two,Aj,awo,nwo,swo,F1,bde,lwo,iwo,yj,dwo,cwo,fwo,T1,mwo,vde,gwo,hwo,Fde,pwo,_wo,M1,cqe,Ri,E1,Tde,Zy,uwo,Mde,bwo,fqe,ko,eL,vwo,Pi,Fwo,Lj,Two,Mwo,xj,Ewo,Cwo,wwo,oL,Awo,Ede,ywo,Lwo,xwo,st,rL,$wo,Cde,kwo,Swo,Bi,Rwo,wde,Pwo,Bwo,$j,Iwo,qwo,Nwo,C1,jwo,Ze,tL,Dwo,Ade,Gwo,Owo,ka,Vwo,yde,Xwo,zwo,Lde,Wwo,Qwo,xde,Hwo,Uwo,Jwo,W,w1,$de,Ywo,Kwo,kj,Zwo,e0o,o0o,A1,kde,r0o,t0o,Sj,a0o,n0o,s0o,y1,Sde,l0o,i0o,Rj,d0o,c0o,f0o,L1,Rde,m0o,g0o,Pj,h0o,p0o,_0o,x1,Pde,u0o,b0o,Bj,v0o,F0o,T0o,$1,Bde,M0o,E0o,Ij,C0o,w0o,A0o,k1,Ide,y0o,L0o,qj,x0o,$0o,k0o,S1,qde,S0o,R0o,Nj,P0o,B0o,I0o,R1,Nde,q0o,N0o,jj,j0o,D0o,G0o,P1,jde,O0o,V0o,Dj,X0o,z0o,W0o,B1,Dde,Q0o,H0o,Gj,U0o,J0o,Y0o,I1,Gde,K0o,Z0o,Oj,eAo,oAo,rAo,q1,Ode,tAo,aAo,Vj,nAo,sAo,lAo,N1,Vde,iAo,dAo,Xj,cAo,fAo,mAo,j1,Xde,gAo,hAo,zj,pAo,_Ao,uAo,D1,zde,bAo,vAo,Wj,FAo,TAo,MAo,G1,Wde,EAo,CAo,Qj,wAo,AAo,yAo,O1,Qde,LAo,xAo,Hj,$Ao,kAo,SAo,V1,Hde,RAo,PAo,Uj,BAo,IAo,qAo,X1,Ude,NAo,jAo,Jj,DAo,GAo,OAo,z1,Jde,VAo,XAo,Yj,zAo,WAo,QAo,W1,Yde,HAo,UAo,Kj,JAo,YAo,KAo,Q1,Kde,ZAo,eyo,Zj,oyo,ryo,tyo,H1,Zde,ayo,nyo,eD,syo,lyo,iyo,U1,ece,dyo,cyo,oD,fyo,myo,gyo,J1,oce,hyo,pyo,rD,_yo,uyo,byo,Y1,rce,vyo,Fyo,tD,Tyo,Myo,Eyo,K1,tce,Cyo,wyo,aD,Ayo,yyo,Lyo,Z1,ace,xyo,$yo,nD,kyo,Syo,Ryo,eb,nce,Pyo,Byo,sD,Iyo,qyo,Nyo,ob,sce,jyo,Dyo,lce,Gyo,Oyo,Vyo,rb,ice,Xyo,zyo,lD,Wyo,Qyo,Hyo,tb,dce,Uyo,Jyo,iD,Yyo,Kyo,Zyo,ab,cce,eLo,oLo,dD,rLo,tLo,aLo,nb,fce,nLo,sLo,cD,lLo,iLo,dLo,sb,cLo,mce,fLo,mLo,gce,gLo,hLo,lb,mqe,Ii,ib,hce,aL,pLo,pce,_Lo,gqe,So,nL,uLo,qi,bLo,fD,vLo,FLo,mD,TLo,MLo,ELo,sL,CLo,_ce,wLo,ALo,yLo,lt,lL,LLo,uce,xLo,$Lo,Ni,kLo,bce,SLo,RLo,gD,PLo,BLo,ILo,db,qLo,eo,iL,NLo,vce,jLo,DLo,Sa,GLo,Fce,OLo,VLo,Tce,XLo,zLo,Mce,WLo,QLo,HLo,_e,cb,Ece,ULo,JLo,hD,YLo,KLo,ZLo,fb,Cce,e8o,o8o,pD,r8o,t8o,a8o,mb,wce,n8o,s8o,_D,l8o,i8o,d8o,gb,Ace,c8o,f8o,uD,m8o,g8o,h8o,hb,yce,p8o,_8o,bD,u8o,b8o,v8o,pb,Lce,F8o,T8o,vD,M8o,E8o,C8o,_b,xce,w8o,A8o,FD,y8o,L8o,x8o,ub,$ce,$8o,k8o,TD,S8o,R8o,P8o,bb,kce,B8o,I8o,MD,q8o,N8o,j8o,vb,Sce,D8o,G8o,ED,O8o,V8o,X8o,Fb,Rce,z8o,W8o,CD,Q8o,H8o,U8o,Tb,Pce,J8o,Y8o,wD,K8o,Z8o,e7o,Mb,Bce,o7o,r7o,AD,t7o,a7o,n7o,Eb,Ice,s7o,l7o,yD,i7o,d7o,c7o,Cb,qce,f7o,m7o,LD,g7o,h7o,p7o,wb,Nce,_7o,u7o,xD,b7o,v7o,F7o,Ab,T7o,jce,M7o,E7o,Dce,C7o,w7o,yb,hqe,ji,Lb,Gce,dL,A7o,Oce,y7o,pqe,Ro,cL,L7o,Di,x7o,$D,$7o,k7o,kD,S7o,R7o,P7o,fL,B7o,Vce,I7o,q7o,N7o,it,mL,j7o,Xce,D7o,G7o,Gi,O7o,zce,V7o,X7o,SD,z7o,W7o,Q7o,xb,H7o,oo,gL,U7o,Wce,J7o,Y7o,Ra,K7o,Qce,Z7o,exo,Hce,oxo,rxo,Uce,txo,axo,nxo,N,$b,Jce,sxo,lxo,RD,ixo,dxo,cxo,kb,Yce,fxo,mxo,PD,gxo,hxo,pxo,Sb,Kce,_xo,uxo,BD,bxo,vxo,Fxo,Rb,Zce,Txo,Mxo,ID,Exo,Cxo,wxo,Pb,efe,Axo,yxo,qD,Lxo,xxo,$xo,Bb,ofe,kxo,Sxo,ND,Rxo,Pxo,Bxo,Ib,rfe,Ixo,qxo,jD,Nxo,jxo,Dxo,qb,tfe,Gxo,Oxo,DD,Vxo,Xxo,zxo,Nb,afe,Wxo,Qxo,GD,Hxo,Uxo,Jxo,jb,nfe,Yxo,Kxo,OD,Zxo,e9o,o9o,Db,sfe,r9o,t9o,VD,a9o,n9o,s9o,Gb,lfe,l9o,i9o,XD,d9o,c9o,f9o,Ob,ife,m9o,g9o,zD,h9o,p9o,_9o,Vb,dfe,u9o,b9o,WD,v9o,F9o,T9o,Xb,cfe,M9o,E9o,QD,C9o,w9o,A9o,zb,ffe,y9o,L9o,HD,x9o,$9o,k9o,Wb,mfe,S9o,R9o,UD,P9o,B9o,I9o,Qb,gfe,q9o,N9o,JD,j9o,D9o,G9o,Hb,hfe,O9o,V9o,YD,X9o,z9o,W9o,Ub,pfe,Q9o,H9o,KD,U9o,J9o,Y9o,Jb,_fe,K9o,Z9o,ZD,e$o,o$o,r$o,Yb,ufe,t$o,a$o,eG,n$o,s$o,l$o,Kb,bfe,i$o,d$o,oG,c$o,f$o,m$o,Zb,vfe,g$o,h$o,rG,p$o,_$o,u$o,e2,Ffe,b$o,v$o,tG,F$o,T$o,M$o,o2,Tfe,E$o,C$o,aG,w$o,A$o,y$o,r2,Mfe,L$o,x$o,nG,$$o,k$o,S$o,t2,Efe,R$o,P$o,sG,B$o,I$o,q$o,a2,Cfe,N$o,j$o,lG,D$o,G$o,O$o,n2,wfe,V$o,X$o,iG,z$o,W$o,Q$o,s2,Afe,H$o,U$o,dG,J$o,Y$o,K$o,l2,yfe,Z$o,eko,cG,oko,rko,tko,i2,Lfe,ako,nko,fG,sko,lko,iko,d2,xfe,dko,cko,mG,fko,mko,gko,c2,$fe,hko,pko,gG,_ko,uko,bko,f2,kfe,vko,Fko,hG,Tko,Mko,Eko,m2,Sfe,Cko,wko,pG,Ako,yko,Lko,g2,Rfe,xko,$ko,_G,kko,Sko,Rko,h2,Pfe,Pko,Bko,uG,Iko,qko,Nko,p2,Bfe,jko,Dko,bG,Gko,Oko,Vko,_2,Ife,Xko,zko,vG,Wko,Qko,Hko,u2,qfe,Uko,Jko,FG,Yko,Kko,Zko,b2,Nfe,eSo,oSo,TG,rSo,tSo,aSo,v2,jfe,nSo,sSo,MG,lSo,iSo,dSo,F2,Dfe,cSo,fSo,EG,mSo,gSo,hSo,T2,Gfe,pSo,_So,CG,uSo,bSo,vSo,M2,FSo,Ofe,TSo,MSo,Vfe,ESo,CSo,E2,_qe,Oi,C2,Xfe,hL,wSo,zfe,ASo,uqe,Po,pL,ySo,Vi,LSo,wG,xSo,$So,AG,kSo,SSo,RSo,_L,PSo,Wfe,BSo,ISo,qSo,dt,uL,NSo,Qfe,jSo,DSo,Xi,GSo,Hfe,OSo,VSo,yG,XSo,zSo,WSo,w2,QSo,ro,bL,HSo,Ufe,USo,JSo,Pa,YSo,Jfe,KSo,ZSo,Yfe,eRo,oRo,Kfe,rRo,tRo,aRo,Y,A2,Zfe,nRo,sRo,LG,lRo,iRo,dRo,y2,eme,cRo,fRo,xG,mRo,gRo,hRo,L2,ome,pRo,_Ro,$G,uRo,bRo,vRo,x2,rme,FRo,TRo,kG,MRo,ERo,CRo,$2,tme,wRo,ARo,SG,yRo,LRo,xRo,k2,ame,$Ro,kRo,RG,SRo,RRo,PRo,S2,nme,BRo,IRo,PG,qRo,NRo,jRo,R2,sme,DRo,GRo,BG,ORo,VRo,XRo,P2,lme,zRo,WRo,IG,QRo,HRo,URo,B2,ime,JRo,YRo,qG,KRo,ZRo,ePo,I2,dme,oPo,rPo,NG,tPo,aPo,nPo,q2,cme,sPo,lPo,jG,iPo,dPo,cPo,N2,fme,fPo,mPo,DG,gPo,hPo,pPo,j2,mme,_Po,uPo,GG,bPo,vPo,FPo,D2,gme,TPo,MPo,OG,EPo,CPo,wPo,G2,hme,APo,yPo,VG,LPo,xPo,$Po,O2,pme,kPo,SPo,XG,RPo,PPo,BPo,V2,_me,IPo,qPo,zG,NPo,jPo,DPo,X2,ume,GPo,OPo,WG,VPo,XPo,zPo,z2,bme,WPo,QPo,QG,HPo,UPo,JPo,W2,vme,YPo,KPo,HG,ZPo,eBo,oBo,Q2,Fme,rBo,tBo,UG,aBo,nBo,sBo,H2,Tme,lBo,iBo,JG,dBo,cBo,fBo,U2,Mme,mBo,gBo,YG,hBo,pBo,_Bo,J2,Eme,uBo,bBo,KG,vBo,FBo,TBo,Y2,Cme,MBo,EBo,ZG,CBo,wBo,ABo,K2,wme,yBo,LBo,eO,xBo,$Bo,kBo,Z2,Ame,SBo,RBo,oO,PBo,BBo,IBo,e4,yme,qBo,NBo,rO,jBo,DBo,GBo,o4,OBo,Lme,VBo,XBo,xme,zBo,WBo,r4,bqe,zi,t4,$me,vL,QBo,kme,HBo,vqe,Bo,FL,UBo,Wi,JBo,tO,YBo,KBo,aO,ZBo,eIo,oIo,TL,rIo,Sme,tIo,aIo,nIo,ct,ML,sIo,Rme,lIo,iIo,Qi,dIo,Pme,cIo,fIo,nO,mIo,gIo,hIo,a4,pIo,to,EL,_Io,Bme,uIo,bIo,Ba,vIo,Ime,FIo,TIo,qme,MIo,EIo,Nme,CIo,wIo,AIo,Yr,n4,jme,yIo,LIo,sO,xIo,$Io,kIo,s4,Dme,SIo,RIo,lO,PIo,BIo,IIo,l4,Gme,qIo,NIo,iO,jIo,DIo,GIo,i4,Ome,OIo,VIo,dO,XIo,zIo,WIo,d4,Vme,QIo,HIo,cO,UIo,JIo,YIo,c4,KIo,Xme,ZIo,eqo,zme,oqo,rqo,f4,Fqe,Hi,m4,Wme,CL,tqo,Qme,aqo,Tqe,Io,wL,nqo,Ui,sqo,fO,lqo,iqo,mO,dqo,cqo,fqo,AL,mqo,Hme,gqo,hqo,pqo,ft,yL,_qo,Ume,uqo,bqo,Ji,vqo,Jme,Fqo,Tqo,gO,Mqo,Eqo,Cqo,g4,wqo,ao,LL,Aqo,Yme,yqo,Lqo,Ia,xqo,Kme,$qo,kqo,Zme,Sqo,Rqo,ege,Pqo,Bqo,Iqo,U,h4,oge,qqo,Nqo,hO,jqo,Dqo,Gqo,p4,rge,Oqo,Vqo,pO,Xqo,zqo,Wqo,_4,tge,Qqo,Hqo,_O,Uqo,Jqo,Yqo,u4,age,Kqo,Zqo,uO,eNo,oNo,rNo,b4,nge,tNo,aNo,bO,nNo,sNo,lNo,v4,sge,iNo,dNo,vO,cNo,fNo,mNo,F4,lge,gNo,hNo,FO,pNo,_No,uNo,T4,ige,bNo,vNo,TO,FNo,TNo,MNo,M4,dge,ENo,CNo,MO,wNo,ANo,yNo,E4,cge,LNo,xNo,EO,$No,kNo,SNo,C4,fge,RNo,PNo,CO,BNo,INo,qNo,w4,mge,NNo,jNo,wO,DNo,GNo,ONo,A4,gge,VNo,XNo,AO,zNo,WNo,QNo,y4,hge,HNo,UNo,yO,JNo,YNo,KNo,L4,pge,ZNo,ejo,LO,ojo,rjo,tjo,x4,_ge,ajo,njo,xO,sjo,ljo,ijo,$4,uge,djo,cjo,$O,fjo,mjo,gjo,k4,bge,hjo,pjo,kO,_jo,ujo,bjo,S4,vge,vjo,Fjo,SO,Tjo,Mjo,Ejo,R4,Fge,Cjo,wjo,RO,Ajo,yjo,Ljo,P4,Tge,xjo,$jo,PO,kjo,Sjo,Rjo,B4,Mge,Pjo,Bjo,BO,Ijo,qjo,Njo,I4,Ege,jjo,Djo,IO,Gjo,Ojo,Vjo,q4,Cge,Xjo,zjo,qO,Wjo,Qjo,Hjo,N4,wge,Ujo,Jjo,NO,Yjo,Kjo,Zjo,j4,Age,eDo,oDo,jO,rDo,tDo,aDo,D4,yge,nDo,sDo,DO,lDo,iDo,dDo,G4,Lge,cDo,fDo,GO,mDo,gDo,hDo,O4,xge,pDo,_Do,OO,uDo,bDo,vDo,V4,$ge,FDo,TDo,VO,MDo,EDo,CDo,X4,kge,wDo,ADo,XO,yDo,LDo,xDo,z4,Sge,$Do,kDo,zO,SDo,RDo,PDo,W4,Rge,BDo,IDo,WO,qDo,NDo,jDo,Q4,DDo,Pge,GDo,ODo,Bge,VDo,XDo,H4,Mqe,Yi,U4,Ige,xL,zDo,qge,WDo,Eqe,qo,$L,QDo,Ki,HDo,QO,UDo,JDo,HO,YDo,KDo,ZDo,kL,eGo,Nge,oGo,rGo,tGo,mt,SL,aGo,jge,nGo,sGo,Zi,lGo,Dge,iGo,dGo,UO,cGo,fGo,mGo,J4,gGo,no,RL,hGo,Gge,pGo,_Go,qa,uGo,Oge,bGo,vGo,Vge,FGo,TGo,Xge,MGo,EGo,CGo,V,Y4,zge,wGo,AGo,JO,yGo,LGo,xGo,K4,Wge,$Go,kGo,YO,SGo,RGo,PGo,Z4,Qge,BGo,IGo,KO,qGo,NGo,jGo,e5,Hge,DGo,GGo,ZO,OGo,VGo,XGo,o5,Uge,zGo,WGo,eV,QGo,HGo,UGo,r5,Jge,JGo,YGo,oV,KGo,ZGo,eOo,t5,Yge,oOo,rOo,rV,tOo,aOo,nOo,a5,Kge,sOo,lOo,tV,iOo,dOo,cOo,n5,Zge,fOo,mOo,aV,gOo,hOo,pOo,s5,ehe,_Oo,uOo,nV,bOo,vOo,FOo,l5,ohe,TOo,MOo,sV,EOo,COo,wOo,i5,rhe,AOo,yOo,lV,LOo,xOo,$Oo,d5,the,kOo,SOo,iV,ROo,POo,BOo,c5,ahe,IOo,qOo,dV,NOo,jOo,DOo,f5,nhe,GOo,OOo,cV,VOo,XOo,zOo,m5,she,WOo,QOo,fV,HOo,UOo,JOo,g5,lhe,YOo,KOo,mV,ZOo,eVo,oVo,h5,ihe,rVo,tVo,gV,aVo,nVo,sVo,p5,dhe,lVo,iVo,hV,dVo,cVo,fVo,_5,che,mVo,gVo,pV,hVo,pVo,_Vo,u5,fhe,uVo,bVo,_V,vVo,FVo,TVo,b5,mhe,MVo,EVo,uV,CVo,wVo,AVo,v5,ghe,yVo,LVo,bV,xVo,$Vo,kVo,F5,hhe,SVo,RVo,vV,PVo,BVo,IVo,T5,phe,qVo,NVo,FV,jVo,DVo,GVo,M5,_he,OVo,VVo,TV,XVo,zVo,WVo,E5,uhe,QVo,HVo,MV,UVo,JVo,YVo,C5,bhe,KVo,ZVo,EV,eXo,oXo,rXo,w5,vhe,tXo,aXo,CV,nXo,sXo,lXo,A5,Fhe,iXo,dXo,wV,cXo,fXo,mXo,y5,The,gXo,hXo,AV,pXo,_Xo,uXo,L5,Mhe,bXo,vXo,yV,FXo,TXo,MXo,x5,Ehe,EXo,CXo,LV,wXo,AXo,yXo,$5,Che,LXo,xXo,xV,$Xo,kXo,SXo,k5,whe,RXo,PXo,$V,BXo,IXo,qXo,S5,Ahe,NXo,jXo,kV,DXo,GXo,OXo,R5,yhe,VXo,XXo,SV,zXo,WXo,QXo,P5,Lhe,HXo,UXo,RV,JXo,YXo,KXo,B5,xhe,ZXo,ezo,PV,ozo,rzo,tzo,I5,azo,$he,nzo,szo,khe,lzo,izo,q5,Cqe,ed,N5,She,PL,dzo,Rhe,czo,wqe,No,BL,fzo,od,mzo,BV,gzo,hzo,IV,pzo,_zo,uzo,IL,bzo,Phe,vzo,Fzo,Tzo,gt,qL,Mzo,Bhe,Ezo,Czo,rd,wzo,Ihe,Azo,yzo,qV,Lzo,xzo,$zo,j5,kzo,so,NL,Szo,qhe,Rzo,Pzo,Na,Bzo,Nhe,Izo,qzo,jhe,Nzo,jzo,Dhe,Dzo,Gzo,Ozo,Ghe,D5,Ohe,Vzo,Xzo,NV,zzo,Wzo,Qzo,G5,Hzo,Vhe,Uzo,Jzo,Xhe,Yzo,Kzo,O5,Aqe,td,V5,zhe,jL,Zzo,Whe,eWo,yqe,jo,DL,oWo,ad,rWo,jV,tWo,aWo,DV,nWo,sWo,lWo,GL,iWo,Qhe,dWo,cWo,fWo,ht,OL,mWo,Hhe,gWo,hWo,nd,pWo,Uhe,_Wo,uWo,GV,bWo,vWo,FWo,X5,TWo,lo,VL,MWo,Jhe,EWo,CWo,ja,wWo,Yhe,AWo,yWo,Khe,LWo,xWo,Zhe,$Wo,kWo,SWo,Fe,z5,epe,RWo,PWo,OV,BWo,IWo,qWo,W5,ope,NWo,jWo,VV,DWo,GWo,OWo,Q5,rpe,VWo,XWo,XV,zWo,WWo,QWo,Ps,tpe,HWo,UWo,zV,JWo,YWo,WV,KWo,ZWo,eQo,H5,ape,oQo,rQo,QV,tQo,aQo,nQo,pt,npe,sQo,lQo,HV,iQo,dQo,UV,cQo,fQo,JV,mQo,gQo,hQo,U5,spe,pQo,_Qo,YV,uQo,bQo,vQo,J5,lpe,FQo,TQo,KV,MQo,EQo,CQo,Y5,ipe,wQo,AQo,ZV,yQo,LQo,xQo,K5,dpe,$Qo,kQo,eX,SQo,RQo,PQo,Z5,cpe,BQo,IQo,oX,qQo,NQo,jQo,ev,fpe,DQo,GQo,rX,OQo,VQo,XQo,ov,mpe,zQo,WQo,tX,QQo,HQo,UQo,rv,JQo,gpe,YQo,KQo,hpe,ZQo,eHo,tv,Lqe,sd,av,ppe,XL,oHo,_pe,rHo,xqe,Do,zL,tHo,ld,aHo,aX,nHo,sHo,nX,lHo,iHo,dHo,WL,cHo,upe,fHo,mHo,gHo,_t,QL,hHo,bpe,pHo,_Ho,id,uHo,vpe,bHo,vHo,sX,FHo,THo,MHo,nv,EHo,io,HL,CHo,Fpe,wHo,AHo,Da,yHo,Tpe,LHo,xHo,Mpe,$Ho,kHo,Epe,SHo,RHo,PHo,Cpe,sv,wpe,BHo,IHo,lX,qHo,NHo,jHo,lv,DHo,Ape,GHo,OHo,ype,VHo,XHo,iv,$qe,dd,dv,Lpe,UL,zHo,xpe,WHo,kqe,Go,JL,QHo,cd,HHo,iX,UHo,JHo,dX,YHo,KHo,ZHo,YL,eUo,$pe,oUo,rUo,tUo,ut,KL,aUo,kpe,nUo,sUo,fd,lUo,Spe,iUo,dUo,cX,cUo,fUo,mUo,cv,gUo,co,ZL,hUo,Rpe,pUo,_Uo,Ga,uUo,Ppe,bUo,vUo,Bpe,FUo,TUo,Ipe,MUo,EUo,CUo,ke,fv,qpe,wUo,AUo,fX,yUo,LUo,xUo,mv,Npe,$Uo,kUo,mX,SUo,RUo,PUo,gv,jpe,BUo,IUo,gX,qUo,NUo,jUo,hv,Dpe,DUo,GUo,hX,OUo,VUo,XUo,pv,Gpe,zUo,WUo,pX,QUo,HUo,UUo,_v,Ope,JUo,YUo,_X,KUo,ZUo,eJo,uv,Vpe,oJo,rJo,uX,tJo,aJo,nJo,bv,Xpe,sJo,lJo,bX,iJo,dJo,cJo,vv,zpe,fJo,mJo,vX,gJo,hJo,pJo,Fv,_Jo,Wpe,uJo,bJo,Qpe,vJo,FJo,Tv,Sqe,md,Mv,Hpe,e8,TJo,Upe,MJo,Rqe,Oo,o8,EJo,gd,CJo,FX,wJo,AJo,TX,yJo,LJo,xJo,r8,$Jo,Jpe,kJo,SJo,RJo,bt,t8,PJo,Ype,BJo,IJo,hd,qJo,Kpe,NJo,jJo,MX,DJo,GJo,OJo,Ev,VJo,fo,a8,XJo,Zpe,zJo,WJo,Oa,QJo,e_e,HJo,UJo,o_e,JJo,YJo,r_e,KJo,ZJo,eYo,Kr,Cv,t_e,oYo,rYo,EX,tYo,aYo,nYo,wv,a_e,sYo,lYo,CX,iYo,dYo,cYo,Av,n_e,fYo,mYo,wX,gYo,hYo,pYo,yv,s_e,_Yo,uYo,AX,bYo,vYo,FYo,Lv,l_e,TYo,MYo,yX,EYo,CYo,wYo,xv,AYo,i_e,yYo,LYo,d_e,xYo,$Yo,$v,Pqe,pd,kv,c_e,n8,kYo,f_e,SYo,Bqe,Vo,s8,RYo,_d,PYo,LX,BYo,IYo,xX,qYo,NYo,jYo,l8,DYo,m_e,GYo,OYo,VYo,vt,i8,XYo,g_e,zYo,WYo,ud,QYo,h_e,HYo,UYo,$X,JYo,YYo,KYo,Sv,ZYo,mo,d8,eKo,p_e,oKo,rKo,Va,tKo,__e,aKo,nKo,u_e,sKo,lKo,b_e,iKo,dKo,cKo,Se,Rv,v_e,fKo,mKo,kX,gKo,hKo,pKo,Pv,F_e,_Ko,uKo,SX,bKo,vKo,FKo,Bv,T_e,TKo,MKo,RX,EKo,CKo,wKo,Iv,M_e,AKo,yKo,PX,LKo,xKo,$Ko,qv,E_e,kKo,SKo,BX,RKo,PKo,BKo,Nv,C_e,IKo,qKo,IX,NKo,jKo,DKo,jv,w_e,GKo,OKo,qX,VKo,XKo,zKo,Dv,A_e,WKo,QKo,NX,HKo,UKo,JKo,Gv,y_e,YKo,KKo,jX,ZKo,eZo,oZo,Ov,rZo,L_e,tZo,aZo,x_e,nZo,sZo,Vv,Iqe,bd,Xv,$_e,c8,lZo,k_e,iZo,qqe,Xo,f8,dZo,vd,cZo,DX,fZo,mZo,GX,gZo,hZo,pZo,m8,_Zo,S_e,uZo,bZo,vZo,Ft,g8,FZo,R_e,TZo,MZo,Fd,EZo,P_e,CZo,wZo,OX,AZo,yZo,LZo,zv,xZo,go,h8,$Zo,B_e,kZo,SZo,Xa,RZo,I_e,PZo,BZo,q_e,IZo,qZo,N_e,NZo,jZo,DZo,p8,Wv,j_e,GZo,OZo,VX,VZo,XZo,zZo,Qv,D_e,WZo,QZo,XX,HZo,UZo,JZo,Hv,YZo,G_e,KZo,ZZo,O_e,eer,oer,Uv,Nqe,Td,Jv,V_e,_8,rer,X_e,ter,jqe,zo,u8,aer,Md,ner,zX,ser,ler,WX,ier,der,cer,b8,fer,z_e,mer,ger,her,Tt,v8,per,W_e,_er,uer,Ed,ber,Q_e,ver,Fer,QX,Ter,Mer,Eer,Yv,Cer,ho,F8,wer,H_e,Aer,yer,za,Ler,U_e,xer,$er,J_e,ker,Ser,Y_e,Rer,Per,Ber,Zr,Kv,K_e,Ier,qer,HX,Ner,jer,Der,Zv,Z_e,Ger,Oer,UX,Ver,Xer,zer,e3,eue,Wer,Qer,JX,Her,Uer,Jer,o3,oue,Yer,Ker,YX,Zer,eor,oor,r3,rue,ror,tor,KX,aor,nor,sor,t3,lor,tue,ior,dor,aue,cor,mor,a3,Dqe,Cd,n3,nue,T8,gor,sue,hor,Gqe,Wo,M8,por,wd,_or,ZX,uor,bor,ez,vor,For,Tor,E8,Mor,lue,Eor,Cor,wor,Mt,C8,Aor,iue,yor,Lor,Ad,xor,due,$or,kor,oz,Sor,Ror,Por,s3,Bor,po,w8,Ior,cue,qor,Nor,Wa,jor,fue,Dor,Gor,mue,Oor,Vor,gue,Xor,zor,Wor,yd,l3,hue,Qor,Hor,rz,Uor,Jor,Yor,i3,pue,Kor,Zor,tz,err,orr,rrr,d3,_ue,trr,arr,az,nrr,srr,lrr,c3,irr,uue,drr,crr,bue,frr,mrr,f3,Oqe,Ld,m3,vue,A8,grr,Fue,hrr,Vqe,Qo,y8,prr,xd,_rr,nz,urr,brr,sz,vrr,Frr,Trr,L8,Mrr,Tue,Err,Crr,wrr,Et,x8,Arr,Mue,yrr,Lrr,$d,xrr,Eue,$rr,krr,lz,Srr,Rrr,Prr,g3,Brr,_o,$8,Irr,Cue,qrr,Nrr,Qa,jrr,wue,Drr,Grr,Aue,Orr,Vrr,yue,Xrr,zrr,Wrr,k8,h3,Lue,Qrr,Hrr,iz,Urr,Jrr,Yrr,p3,xue,Krr,Zrr,dz,etr,otr,rtr,_3,ttr,$ue,atr,ntr,kue,str,ltr,u3,Xqe,kd,b3,Sue,S8,itr,Rue,dtr,zqe,Ho,R8,ctr,Sd,ftr,cz,mtr,gtr,fz,htr,ptr,_tr,P8,utr,Pue,btr,vtr,Ftr,Ct,B8,Ttr,Bue,Mtr,Etr,Rd,Ctr,Iue,wtr,Atr,mz,ytr,Ltr,xtr,v3,$tr,uo,I8,ktr,que,Str,Rtr,Ha,Ptr,Nue,Btr,Itr,jue,qtr,Ntr,Due,jtr,Dtr,Gtr,Gue,F3,Oue,Otr,Vtr,gz,Xtr,ztr,Wtr,T3,Qtr,Vue,Htr,Utr,Xue,Jtr,Ytr,M3,Wqe,Pd,E3,zue,q8,Ktr,Wue,Ztr,Qqe,Uo,N8,ear,Bd,oar,hz,rar,tar,pz,aar,nar,sar,j8,lar,Que,iar,dar,car,wt,D8,far,Hue,mar,gar,Id,har,Uue,par,_ar,_z,uar,bar,Far,C3,Tar,bo,G8,Mar,Jue,Ear,Car,Ua,war,Yue,Aar,yar,Kue,Lar,xar,Zue,$ar,kar,Sar,Ja,w3,e1e,Rar,Par,uz,Bar,Iar,qar,A3,o1e,Nar,jar,bz,Dar,Gar,Oar,y3,r1e,Var,Xar,vz,zar,War,Qar,L3,t1e,Har,Uar,Fz,Jar,Yar,Kar,x3,Zar,a1e,enr,onr,n1e,rnr,tnr,$3,Hqe,qd,k3,s1e,O8,anr,l1e,nnr,Uqe,Jo,V8,snr,Nd,lnr,Tz,inr,dnr,Mz,cnr,fnr,mnr,X8,gnr,i1e,hnr,pnr,_nr,At,z8,unr,d1e,bnr,vnr,jd,Fnr,c1e,Tnr,Mnr,Ez,Enr,Cnr,wnr,S3,Anr,vo,W8,ynr,f1e,Lnr,xnr,Ya,$nr,m1e,knr,Snr,g1e,Rnr,Pnr,h1e,Bnr,Inr,qnr,p1e,R3,_1e,Nnr,jnr,Cz,Dnr,Gnr,Onr,P3,Vnr,u1e,Xnr,znr,b1e,Wnr,Qnr,B3,Jqe,Dd,I3,v1e,Q8,Hnr,F1e,Unr,Yqe,Yo,H8,Jnr,Gd,Ynr,wz,Knr,Znr,Az,esr,osr,rsr,U8,tsr,T1e,asr,nsr,ssr,yt,J8,lsr,M1e,isr,dsr,Od,csr,E1e,fsr,msr,yz,gsr,hsr,psr,q3,_sr,wr,Y8,usr,C1e,bsr,vsr,Ka,Fsr,w1e,Tsr,Msr,A1e,Esr,Csr,y1e,wsr,Asr,ysr,q,N3,L1e,Lsr,xsr,Lz,$sr,ksr,Ssr,j3,x1e,Rsr,Psr,xz,Bsr,Isr,qsr,D3,$1e,Nsr,jsr,$z,Dsr,Gsr,Osr,G3,k1e,Vsr,Xsr,kz,zsr,Wsr,Qsr,O3,S1e,Hsr,Usr,Sz,Jsr,Ysr,Ksr,V3,R1e,Zsr,elr,Rz,olr,rlr,tlr,X3,P1e,alr,nlr,Pz,slr,llr,ilr,z3,B1e,dlr,clr,Bz,flr,mlr,glr,W3,I1e,hlr,plr,Iz,_lr,ulr,blr,Q3,q1e,vlr,Flr,qz,Tlr,Mlr,Elr,H3,N1e,Clr,wlr,Nz,Alr,ylr,Llr,U3,j1e,xlr,$lr,jz,klr,Slr,Rlr,J3,D1e,Plr,Blr,Dz,Ilr,qlr,Nlr,Y3,G1e,jlr,Dlr,Gz,Glr,Olr,Vlr,K3,O1e,Xlr,zlr,Oz,Wlr,Qlr,Hlr,Z3,V1e,Ulr,Jlr,Vz,Ylr,Klr,Zlr,eF,X1e,eir,oir,Xz,rir,tir,air,Bs,z1e,nir,sir,zz,lir,iir,Wz,dir,cir,fir,oF,W1e,mir,gir,Qz,hir,pir,_ir,rF,Q1e,uir,bir,Hz,vir,Fir,Tir,tF,H1e,Mir,Eir,Uz,Cir,wir,Air,aF,U1e,yir,Lir,Jz,xir,$ir,kir,nF,J1e,Sir,Rir,Yz,Pir,Bir,Iir,sF,Y1e,qir,Nir,Kz,jir,Dir,Gir,lF,K1e,Oir,Vir,Zz,Xir,zir,Wir,iF,Z1e,Qir,Hir,eW,Uir,Jir,Yir,dF,ebe,Kir,Zir,oW,edr,odr,rdr,cF,obe,tdr,adr,rW,ndr,sdr,ldr,fF,rbe,idr,ddr,tW,cdr,fdr,mdr,mF,tbe,gdr,hdr,aW,pdr,_dr,udr,gF,abe,bdr,vdr,nW,Fdr,Tdr,Mdr,hF,nbe,Edr,Cdr,sW,wdr,Adr,ydr,pF,sbe,Ldr,xdr,lW,$dr,kdr,Sdr,_F,lbe,Rdr,Pdr,iW,Bdr,Idr,qdr,uF,ibe,Ndr,jdr,dW,Ddr,Gdr,Odr,bF,dbe,Vdr,Xdr,cW,zdr,Wdr,Qdr,vF,cbe,Hdr,Udr,fW,Jdr,Ydr,Kdr,FF,fbe,Zdr,ecr,mW,ocr,rcr,tcr,TF,mbe,acr,ncr,gW,scr,lcr,icr,MF,gbe,dcr,ccr,hW,fcr,mcr,gcr,EF,hbe,hcr,pcr,pW,_cr,ucr,bcr,CF,pbe,vcr,Fcr,_W,Tcr,Mcr,Ecr,wF,_be,Ccr,wcr,uW,Acr,ycr,Lcr,AF,ube,xcr,$cr,bW,kcr,Scr,Rcr,yF,bbe,Pcr,Bcr,vW,Icr,qcr,Ncr,LF,vbe,jcr,Dcr,FW,Gcr,Ocr,Vcr,xF,Fbe,Xcr,zcr,TW,Wcr,Qcr,Hcr,$F,Kqe,Vd,kF,Tbe,K8,Ucr,Mbe,Jcr,Zqe,Ko,Z8,Ycr,Xd,Kcr,MW,Zcr,efr,EW,ofr,rfr,tfr,e7,afr,Ebe,nfr,sfr,lfr,Lt,o7,ifr,Cbe,dfr,cfr,zd,ffr,wbe,mfr,gfr,CW,hfr,pfr,_fr,SF,ufr,Ar,r7,bfr,Abe,vfr,Ffr,Za,Tfr,ybe,Mfr,Efr,Lbe,Cfr,wfr,xbe,Afr,yfr,Lfr,se,RF,$be,xfr,$fr,wW,kfr,Sfr,Rfr,PF,kbe,Pfr,Bfr,AW,Ifr,qfr,Nfr,BF,Sbe,jfr,Dfr,yW,Gfr,Ofr,Vfr,IF,Rbe,Xfr,zfr,LW,Wfr,Qfr,Hfr,qF,Pbe,Ufr,Jfr,xW,Yfr,Kfr,Zfr,NF,Bbe,emr,omr,$W,rmr,tmr,amr,jF,Ibe,nmr,smr,kW,lmr,imr,dmr,DF,qbe,cmr,fmr,SW,mmr,gmr,hmr,GF,Nbe,pmr,_mr,RW,umr,bmr,vmr,OF,jbe,Fmr,Tmr,PW,Mmr,Emr,Cmr,VF,Dbe,wmr,Amr,BW,ymr,Lmr,xmr,XF,Gbe,$mr,kmr,IW,Smr,Rmr,Pmr,zF,Obe,Bmr,Imr,qW,qmr,Nmr,jmr,WF,Vbe,Dmr,Gmr,NW,Omr,Vmr,Xmr,QF,Xbe,zmr,Wmr,jW,Qmr,Hmr,Umr,HF,zbe,Jmr,Ymr,DW,Kmr,Zmr,egr,UF,Wbe,ogr,rgr,GW,tgr,agr,ngr,JF,Qbe,sgr,lgr,OW,igr,dgr,cgr,YF,Hbe,fgr,mgr,VW,ggr,hgr,pgr,KF,Ube,_gr,ugr,XW,bgr,vgr,Fgr,ZF,Jbe,Tgr,Mgr,zW,Egr,Cgr,wgr,e6,Ybe,Agr,ygr,WW,Lgr,xgr,$gr,o6,Kbe,kgr,Sgr,QW,Rgr,Pgr,Bgr,r6,eNe,Wd,t6,Zbe,t7,Igr,e2e,qgr,oNe,Zo,a7,Ngr,Qd,jgr,HW,Dgr,Ggr,UW,Ogr,Vgr,Xgr,n7,zgr,o2e,Wgr,Qgr,Hgr,xt,s7,Ugr,r2e,Jgr,Ygr,Hd,Kgr,t2e,Zgr,ehr,JW,ohr,rhr,thr,a6,ahr,yr,l7,nhr,a2e,shr,lhr,en,ihr,n2e,dhr,chr,s2e,fhr,mhr,l2e,ghr,hhr,phr,Te,n6,i2e,_hr,uhr,YW,bhr,vhr,Fhr,s6,d2e,Thr,Mhr,KW,Ehr,Chr,whr,l6,c2e,Ahr,yhr,ZW,Lhr,xhr,$hr,i6,f2e,khr,Shr,eQ,Rhr,Phr,Bhr,d6,m2e,Ihr,qhr,oQ,Nhr,jhr,Dhr,c6,g2e,Ghr,Ohr,rQ,Vhr,Xhr,zhr,f6,h2e,Whr,Qhr,tQ,Hhr,Uhr,Jhr,m6,p2e,Yhr,Khr,aQ,Zhr,epr,opr,g6,_2e,rpr,tpr,nQ,apr,npr,spr,h6,u2e,lpr,ipr,sQ,dpr,cpr,fpr,p6,b2e,mpr,gpr,lQ,hpr,ppr,_pr,_6,v2e,upr,bpr,iQ,vpr,Fpr,Tpr,u6,F2e,Mpr,Epr,dQ,Cpr,wpr,Apr,b6,rNe,Ud,v6,T2e,i7,ypr,M2e,Lpr,tNe,er,d7,xpr,Jd,$pr,cQ,kpr,Spr,fQ,Rpr,Ppr,Bpr,c7,Ipr,E2e,qpr,Npr,jpr,$t,f7,Dpr,C2e,Gpr,Opr,Yd,Vpr,w2e,Xpr,zpr,mQ,Wpr,Qpr,Hpr,F6,Upr,Lr,m7,Jpr,A2e,Ypr,Kpr,on,Zpr,y2e,e_r,o_r,L2e,r_r,t_r,x2e,a_r,n_r,s_r,rn,T6,$2e,l_r,i_r,gQ,d_r,c_r,f_r,M6,k2e,m_r,g_r,hQ,h_r,p_r,__r,E6,S2e,u_r,b_r,pQ,v_r,F_r,T_r,C6,R2e,M_r,E_r,_Q,C_r,w_r,A_r,w6,aNe,Kd,A6,P2e,g7,y_r,B2e,L_r,nNe,or,h7,x_r,Zd,$_r,uQ,k_r,S_r,bQ,R_r,P_r,B_r,p7,I_r,I2e,q_r,N_r,j_r,kt,_7,D_r,q2e,G_r,O_r,ec,V_r,N2e,X_r,z_r,vQ,W_r,Q_r,H_r,y6,U_r,xr,u7,J_r,j2e,Y_r,K_r,tn,Z_r,D2e,eur,our,G2e,rur,tur,O2e,aur,nur,sur,ie,L6,V2e,lur,iur,FQ,dur,cur,fur,x6,X2e,mur,gur,TQ,hur,pur,_ur,$6,z2e,uur,bur,MQ,vur,Fur,Tur,k6,W2e,Mur,Eur,EQ,Cur,wur,Aur,S6,Q2e,yur,Lur,CQ,xur,$ur,kur,R6,H2e,Sur,Rur,wQ,Pur,Bur,Iur,P6,U2e,qur,Nur,AQ,jur,Dur,Gur,B6,J2e,Our,Vur,yQ,Xur,zur,Wur,I6,Y2e,Qur,Hur,LQ,Uur,Jur,Yur,q6,K2e,Kur,Zur,xQ,e1r,o1r,r1r,N6,Z2e,t1r,a1r,$Q,n1r,s1r,l1r,j6,e4e,i1r,d1r,kQ,c1r,f1r,m1r,D6,o4e,g1r,h1r,SQ,p1r,_1r,u1r,G6,r4e,b1r,v1r,RQ,F1r,T1r,M1r,O6,t4e,E1r,C1r,PQ,w1r,A1r,y1r,V6,a4e,L1r,x1r,BQ,$1r,k1r,S1r,X6,n4e,R1r,P1r,IQ,B1r,I1r,q1r,z6,s4e,N1r,j1r,qQ,D1r,G1r,O1r,W6,l4e,V1r,X1r,NQ,z1r,W1r,Q1r,Q6,i4e,H1r,U1r,jQ,J1r,Y1r,K1r,H6,sNe,oc,U6,d4e,b7,Z1r,c4e,ebr,lNe,rr,v7,obr,rc,rbr,DQ,tbr,abr,GQ,nbr,sbr,lbr,F7,ibr,f4e,dbr,cbr,fbr,St,T7,mbr,m4e,gbr,hbr,tc,pbr,g4e,_br,ubr,OQ,bbr,vbr,Fbr,J6,Tbr,$r,M7,Mbr,h4e,Ebr,Cbr,an,wbr,p4e,Abr,ybr,_4e,Lbr,xbr,u4e,$br,kbr,Sbr,ye,Y6,b4e,Rbr,Pbr,VQ,Bbr,Ibr,qbr,K6,v4e,Nbr,jbr,XQ,Dbr,Gbr,Obr,Z6,F4e,Vbr,Xbr,zQ,zbr,Wbr,Qbr,eT,T4e,Hbr,Ubr,WQ,Jbr,Ybr,Kbr,oT,M4e,Zbr,e2r,QQ,o2r,r2r,t2r,rT,E4e,a2r,n2r,HQ,s2r,l2r,i2r,tT,C4e,d2r,c2r,UQ,f2r,m2r,g2r,aT,w4e,h2r,p2r,JQ,_2r,u2r,b2r,nT,A4e,v2r,F2r,YQ,T2r,M2r,E2r,sT,y4e,C2r,w2r,KQ,A2r,y2r,L2r,lT,iNe,ac,iT,L4e,E7,x2r,x4e,$2r,dNe,tr,C7,k2r,nc,S2r,ZQ,R2r,P2r,eH,B2r,I2r,q2r,w7,N2r,$4e,j2r,D2r,G2r,Rt,A7,O2r,k4e,V2r,X2r,sc,z2r,S4e,W2r,Q2r,oH,H2r,U2r,J2r,dT,Y2r,kr,y7,K2r,R4e,Z2r,e4r,nn,o4r,P4e,r4r,t4r,B4e,a4r,n4r,I4e,s4r,l4r,i4r,ee,cT,q4e,d4r,c4r,rH,f4r,m4r,g4r,fT,N4e,h4r,p4r,tH,_4r,u4r,b4r,mT,j4e,v4r,F4r,aH,T4r,M4r,E4r,gT,D4e,C4r,w4r,nH,A4r,y4r,L4r,hT,G4e,x4r,$4r,sH,k4r,S4r,R4r,pT,O4e,P4r,B4r,lH,I4r,q4r,N4r,_T,V4e,j4r,D4r,iH,G4r,O4r,V4r,uT,X4e,X4r,z4r,dH,W4r,Q4r,H4r,bT,z4e,U4r,J4r,cH,Y4r,K4r,Z4r,vT,W4e,e5r,o5r,fH,r5r,t5r,a5r,FT,Q4e,n5r,s5r,mH,l5r,i5r,d5r,TT,H4e,c5r,f5r,gH,m5r,g5r,h5r,MT,U4e,p5r,_5r,hH,u5r,b5r,v5r,ET,J4e,F5r,T5r,pH,M5r,E5r,C5r,CT,Y4e,w5r,A5r,_H,y5r,L5r,x5r,wT,K4e,$5r,k5r,uH,S5r,R5r,P5r,AT,Z4e,B5r,I5r,bH,q5r,N5r,j5r,yT,e5e,D5r,G5r,vH,O5r,V5r,X5r,LT,o5e,z5r,W5r,FH,Q5r,H5r,U5r,xT,r5e,J5r,Y5r,TH,K5r,Z5r,evr,$T,t5e,ovr,rvr,MH,tvr,avr,nvr,kT,a5e,svr,lvr,EH,ivr,dvr,cvr,ST,n5e,fvr,mvr,CH,gvr,hvr,pvr,RT,s5e,_vr,uvr,wH,bvr,vvr,Fvr,PT,l5e,Tvr,Mvr,AH,Evr,Cvr,wvr,BT,i5e,Avr,yvr,yH,Lvr,xvr,$vr,IT,cNe,lc,qT,d5e,L7,kvr,c5e,Svr,fNe,ar,x7,Rvr,ic,Pvr,LH,Bvr,Ivr,xH,qvr,Nvr,jvr,$7,Dvr,f5e,Gvr,Ovr,Vvr,Pt,k7,Xvr,m5e,zvr,Wvr,dc,Qvr,g5e,Hvr,Uvr,$H,Jvr,Yvr,Kvr,NT,Zvr,Sr,S7,e3r,h5e,o3r,r3r,sn,t3r,p5e,a3r,n3r,_5e,s3r,l3r,u5e,i3r,d3r,c3r,he,jT,b5e,f3r,m3r,kH,g3r,h3r,p3r,DT,v5e,_3r,u3r,SH,b3r,v3r,F3r,GT,F5e,T3r,M3r,RH,E3r,C3r,w3r,OT,T5e,A3r,y3r,PH,L3r,x3r,$3r,VT,M5e,k3r,S3r,BH,R3r,P3r,B3r,XT,E5e,I3r,q3r,IH,N3r,j3r,D3r,zT,C5e,G3r,O3r,qH,V3r,X3r,z3r,WT,w5e,W3r,Q3r,NH,H3r,U3r,J3r,QT,A5e,Y3r,K3r,jH,Z3r,eFr,oFr,HT,y5e,rFr,tFr,DH,aFr,nFr,sFr,UT,L5e,lFr,iFr,GH,dFr,cFr,fFr,JT,x5e,mFr,gFr,OH,hFr,pFr,_Fr,YT,$5e,uFr,bFr,VH,vFr,FFr,TFr,KT,k5e,MFr,EFr,XH,CFr,wFr,AFr,ZT,S5e,yFr,LFr,zH,xFr,$Fr,kFr,eM,R5e,SFr,RFr,WH,PFr,BFr,IFr,oM,P5e,qFr,NFr,QH,jFr,DFr,GFr,rM,mNe,cc,tM,B5e,R7,OFr,I5e,VFr,gNe,nr,P7,XFr,fc,zFr,HH,WFr,QFr,UH,HFr,UFr,JFr,B7,YFr,q5e,KFr,ZFr,e6r,Bt,I7,o6r,N5e,r6r,t6r,mc,a6r,j5e,n6r,s6r,JH,l6r,i6r,d6r,aM,c6r,Rr,q7,f6r,D5e,m6r,g6r,ln,h6r,G5e,p6r,_6r,O5e,u6r,b6r,V5e,v6r,F6r,T6r,N7,nM,X5e,M6r,E6r,YH,C6r,w6r,A6r,sM,z5e,y6r,L6r,KH,x6r,$6r,k6r,lM,hNe,gc,iM,W5e,j7,S6r,Q5e,R6r,pNe,sr,D7,P6r,hc,B6r,ZH,I6r,q6r,eU,N6r,j6r,D6r,G7,G6r,H5e,O6r,V6r,X6r,It,O7,z6r,U5e,W6r,Q6r,pc,H6r,J5e,U6r,J6r,oU,Y6r,K6r,Z6r,dM,eTr,Pr,V7,oTr,Y5e,rTr,tTr,dn,aTr,K5e,nTr,sTr,Z5e,lTr,iTr,eve,dTr,cTr,fTr,ove,cM,rve,mTr,gTr,rU,hTr,pTr,_Tr,fM,_Ne,_c,mM,tve,X7,uTr,ave,bTr,uNe,lr,z7,vTr,uc,FTr,tU,TTr,MTr,aU,ETr,CTr,wTr,W7,ATr,nve,yTr,LTr,xTr,qt,Q7,$Tr,sve,kTr,STr,bc,RTr,lve,PTr,BTr,nU,ITr,qTr,NTr,gM,jTr,Br,H7,DTr,ive,GTr,OTr,cn,VTr,dve,XTr,zTr,cve,WTr,QTr,fve,HTr,UTr,JTr,de,hM,mve,YTr,KTr,sU,ZTr,eMr,oMr,pM,gve,rMr,tMr,lU,aMr,nMr,sMr,_M,hve,lMr,iMr,iU,dMr,cMr,fMr,uM,pve,mMr,gMr,dU,hMr,pMr,_Mr,bM,_ve,uMr,bMr,cU,vMr,FMr,TMr,vM,uve,MMr,EMr,fU,CMr,wMr,AMr,FM,bve,yMr,LMr,mU,xMr,$Mr,kMr,TM,vve,SMr,RMr,gU,PMr,BMr,IMr,MM,Fve,qMr,NMr,hU,jMr,DMr,GMr,EM,Tve,OMr,VMr,pU,XMr,zMr,WMr,CM,Mve,QMr,HMr,_U,UMr,JMr,YMr,wM,Eve,KMr,ZMr,uU,eEr,oEr,rEr,AM,Cve,tEr,aEr,bU,nEr,sEr,lEr,yM,wve,iEr,dEr,vU,cEr,fEr,mEr,LM,Ave,gEr,hEr,FU,pEr,_Er,uEr,xM,yve,bEr,vEr,TU,FEr,TEr,MEr,$M,Lve,EEr,CEr,MU,wEr,AEr,yEr,kM,xve,LEr,xEr,EU,$Er,kEr,SEr,SM,$ve,REr,PEr,CU,BEr,IEr,qEr,RM,kve,NEr,jEr,wU,DEr,GEr,OEr,PM,bNe,vc,BM,Sve,U7,VEr,Rve,XEr,vNe,ir,J7,zEr,Fc,WEr,AU,QEr,HEr,yU,UEr,JEr,YEr,Y7,KEr,Pve,ZEr,eCr,oCr,Nt,K7,rCr,Bve,tCr,aCr,Tc,nCr,Ive,sCr,lCr,LU,iCr,dCr,cCr,IM,fCr,Ir,Z7,mCr,qve,gCr,hCr,fn,pCr,Nve,_Cr,uCr,jve,bCr,vCr,Dve,FCr,TCr,MCr,ce,qM,Gve,ECr,CCr,xU,wCr,ACr,yCr,NM,Ove,LCr,xCr,$U,$Cr,kCr,SCr,jM,Vve,RCr,PCr,kU,BCr,ICr,qCr,DM,Xve,NCr,jCr,SU,DCr,GCr,OCr,GM,zve,VCr,XCr,RU,zCr,WCr,QCr,OM,Wve,HCr,UCr,PU,JCr,YCr,KCr,VM,Qve,ZCr,ewr,BU,owr,rwr,twr,XM,Hve,awr,nwr,IU,swr,lwr,iwr,zM,Uve,dwr,cwr,qU,fwr,mwr,gwr,WM,Jve,hwr,pwr,NU,_wr,uwr,bwr,QM,Yve,vwr,Fwr,jU,Twr,Mwr,Ewr,HM,Kve,Cwr,wwr,DU,Awr,ywr,Lwr,UM,Zve,xwr,$wr,GU,kwr,Swr,Rwr,JM,e3e,Pwr,Bwr,OU,Iwr,qwr,Nwr,YM,o3e,jwr,Dwr,VU,Gwr,Owr,Vwr,KM,r3e,Xwr,zwr,XU,Wwr,Qwr,Hwr,ZM,t3e,Uwr,Jwr,zU,Ywr,Kwr,Zwr,eE,a3e,e0r,o0r,WU,r0r,t0r,a0r,oE,n3e,n0r,s0r,QU,l0r,i0r,d0r,rE,s3e,c0r,f0r,HU,m0r,g0r,h0r,tE,FNe,Mc,aE,l3e,ex,p0r,i3e,_0r,TNe,dr,ox,u0r,Ec,b0r,UU,v0r,F0r,JU,T0r,M0r,E0r,rx,C0r,d3e,w0r,A0r,y0r,jt,tx,L0r,c3e,x0r,$0r,Cc,k0r,f3e,S0r,R0r,YU,P0r,B0r,I0r,nE,q0r,qr,ax,N0r,m3e,j0r,D0r,mn,G0r,g3e,O0r,V0r,h3e,X0r,z0r,p3e,W0r,Q0r,H0r,_3e,sE,u3e,U0r,J0r,KU,Y0r,K0r,Z0r,lE,MNe,wc,iE,b3e,nx,eAr,v3e,oAr,ENe,cr,sx,rAr,Ac,tAr,ZU,aAr,nAr,eJ,sAr,lAr,iAr,lx,dAr,F3e,cAr,fAr,mAr,Dt,ix,gAr,T3e,hAr,pAr,yc,_Ar,M3e,uAr,bAr,oJ,vAr,FAr,TAr,dE,MAr,Nr,dx,EAr,E3e,CAr,wAr,gn,AAr,C3e,yAr,LAr,w3e,xAr,$Ar,A3e,kAr,SAr,RAr,y3e,cE,L3e,PAr,BAr,rJ,IAr,qAr,NAr,fE,CNe,Lc,mE,x3e,cx,jAr,$3e,DAr,wNe,fr,fx,GAr,xc,OAr,tJ,VAr,XAr,aJ,zAr,WAr,QAr,mx,HAr,k3e,UAr,JAr,YAr,Gt,gx,KAr,S3e,ZAr,eyr,$c,oyr,R3e,ryr,tyr,nJ,ayr,nyr,syr,gE,lyr,jr,hx,iyr,P3e,dyr,cyr,hn,fyr,B3e,myr,gyr,I3e,hyr,pyr,q3e,_yr,uyr,byr,re,hE,N3e,vyr,Fyr,sJ,Tyr,Myr,Eyr,pE,j3e,Cyr,wyr,lJ,Ayr,yyr,Lyr,_E,D3e,xyr,$yr,iJ,kyr,Syr,Ryr,uE,G3e,Pyr,Byr,dJ,Iyr,qyr,Nyr,bE,O3e,jyr,Dyr,cJ,Gyr,Oyr,Vyr,vE,V3e,Xyr,zyr,fJ,Wyr,Qyr,Hyr,FE,X3e,Uyr,Jyr,mJ,Yyr,Kyr,Zyr,TE,z3e,eLr,oLr,gJ,rLr,tLr,aLr,ME,W3e,nLr,sLr,hJ,lLr,iLr,dLr,EE,Q3e,cLr,fLr,pJ,mLr,gLr,hLr,CE,H3e,pLr,_Lr,_J,uLr,bLr,vLr,wE,U3e,FLr,TLr,uJ,MLr,ELr,CLr,AE,J3e,wLr,ALr,bJ,yLr,LLr,xLr,yE,Y3e,$Lr,kLr,vJ,SLr,RLr,PLr,LE,K3e,BLr,ILr,FJ,qLr,NLr,jLr,xE,Z3e,DLr,GLr,TJ,OLr,VLr,XLr,$E,eFe,zLr,WLr,MJ,QLr,HLr,ULr,kE,oFe,JLr,YLr,EJ,KLr,ZLr,e8r,SE,rFe,o8r,r8r,CJ,t8r,a8r,n8r,RE,tFe,s8r,l8r,wJ,i8r,d8r,c8r,PE,aFe,f8r,m8r,AJ,g8r,h8r,p8r,BE,nFe,_8r,u8r,yJ,b8r,v8r,F8r,IE,sFe,T8r,M8r,LJ,E8r,C8r,w8r,qE,lFe,A8r,y8r,xJ,L8r,x8r,$8r,NE,iFe,k8r,S8r,$J,R8r,P8r,B8r,jE,ANe,kc,DE,dFe,px,I8r,cFe,q8r,yNe,mr,_x,N8r,Sc,j8r,kJ,D8r,G8r,SJ,O8r,V8r,X8r,ux,z8r,fFe,W8r,Q8r,H8r,Ot,bx,U8r,mFe,J8r,Y8r,Rc,K8r,gFe,Z8r,e7r,RJ,o7r,r7r,t7r,GE,a7r,Dr,vx,n7r,hFe,s7r,l7r,pn,i7r,pFe,d7r,c7r,_Fe,f7r,m7r,uFe,g7r,h7r,p7r,Re,OE,bFe,_7r,u7r,PJ,b7r,v7r,F7r,VE,vFe,T7r,M7r,BJ,E7r,C7r,w7r,XE,FFe,A7r,y7r,IJ,L7r,x7r,$7r,zE,TFe,k7r,S7r,qJ,R7r,P7r,B7r,WE,MFe,I7r,q7r,NJ,N7r,j7r,D7r,QE,EFe,G7r,O7r,jJ,V7r,X7r,z7r,HE,CFe,W7r,Q7r,DJ,H7r,U7r,J7r,UE,wFe,Y7r,K7r,GJ,Z7r,exr,oxr,JE,AFe,rxr,txr,OJ,axr,nxr,sxr,YE,LNe,Pc,KE,yFe,Fx,lxr,LFe,ixr,xNe,gr,Tx,dxr,Bc,cxr,VJ,fxr,mxr,XJ,gxr,hxr,pxr,Mx,_xr,xFe,uxr,bxr,vxr,Vt,Ex,Fxr,$Fe,Txr,Mxr,Ic,Exr,kFe,Cxr,wxr,zJ,Axr,yxr,Lxr,ZE,xxr,Gr,Cx,$xr,SFe,kxr,Sxr,_n,Rxr,RFe,Pxr,Bxr,PFe,Ixr,qxr,BFe,Nxr,jxr,Dxr,Me,eC,IFe,Gxr,Oxr,WJ,Vxr,Xxr,zxr,oC,qFe,Wxr,Qxr,QJ,Hxr,Uxr,Jxr,rC,NFe,Yxr,Kxr,HJ,Zxr,e9r,o9r,tC,jFe,r9r,t9r,UJ,a9r,n9r,s9r,aC,DFe,l9r,i9r,JJ,d9r,c9r,f9r,nC,GFe,m9r,g9r,YJ,h9r,p9r,_9r,sC,OFe,u9r,b9r,KJ,v9r,F9r,T9r,lC,VFe,M9r,E9r,ZJ,C9r,w9r,A9r,iC,XFe,y9r,L9r,eY,x9r,$9r,k9r,dC,zFe,S9r,R9r,oY,P9r,B9r,I9r,cC,WFe,q9r,N9r,rY,j9r,D9r,G9r,fC,QFe,O9r,V9r,tY,X9r,z9r,W9r,mC,$Ne,qc,gC,HFe,wx,Q9r,UFe,H9r,kNe,hr,Ax,U9r,Nc,J9r,aY,Y9r,K9r,nY,Z9r,e$r,o$r,yx,r$r,JFe,t$r,a$r,n$r,Xt,Lx,s$r,YFe,l$r,i$r,jc,d$r,KFe,c$r,f$r,sY,m$r,g$r,h$r,hC,p$r,Or,xx,_$r,ZFe,u$r,b$r,un,v$r,e6e,F$r,T$r,o6e,M$r,E$r,r6e,C$r,w$r,A$r,Le,pC,t6e,y$r,L$r,lY,x$r,$$r,k$r,_C,a6e,S$r,R$r,iY,P$r,B$r,I$r,uC,n6e,q$r,N$r,dY,j$r,D$r,G$r,bC,s6e,O$r,V$r,cY,X$r,z$r,W$r,vC,l6e,Q$r,H$r,fY,U$r,J$r,Y$r,FC,i6e,K$r,Z$r,mY,ekr,okr,rkr,TC,d6e,tkr,akr,gY,nkr,skr,lkr,MC,c6e,ikr,dkr,hY,ckr,fkr,mkr,EC,f6e,gkr,hkr,pY,pkr,_kr,ukr,CC,m6e,bkr,vkr,_Y,Fkr,Tkr,Mkr,wC,SNe,Dc,AC,g6e,$x,Ekr,h6e,Ckr,RNe,pr,kx,wkr,Gc,Akr,uY,ykr,Lkr,bY,xkr,$kr,kkr,Sx,Skr,p6e,Rkr,Pkr,Bkr,zt,Rx,Ikr,_6e,qkr,Nkr,Oc,jkr,u6e,Dkr,Gkr,vY,Okr,Vkr,Xkr,yC,zkr,Vr,Px,Wkr,b6e,Qkr,Hkr,bn,Ukr,v6e,Jkr,Ykr,F6e,Kkr,Zkr,T6e,eSr,oSr,rSr,Pe,LC,M6e,tSr,aSr,FY,nSr,sSr,lSr,xC,E6e,iSr,dSr,TY,cSr,fSr,mSr,$C,C6e,gSr,hSr,MY,pSr,_Sr,uSr,kC,w6e,bSr,vSr,EY,FSr,TSr,MSr,SC,A6e,ESr,CSr,CY,wSr,ASr,ySr,RC,y6e,LSr,xSr,wY,$Sr,kSr,SSr,PC,L6e,RSr,PSr,AY,BSr,ISr,qSr,BC,x6e,NSr,jSr,yY,DSr,GSr,OSr,IC,$6e,VSr,XSr,LY,zSr,WSr,QSr,qC,PNe,Vc,NC,k6e,Bx,HSr,S6e,USr,BNe,_r,Ix,JSr,Xc,YSr,xY,KSr,ZSr,$Y,eRr,oRr,rRr,qx,tRr,R6e,aRr,nRr,sRr,Wt,Nx,lRr,P6e,iRr,dRr,zc,cRr,B6e,fRr,mRr,kY,gRr,hRr,pRr,jC,_Rr,Xr,jx,uRr,I6e,bRr,vRr,vn,FRr,q6e,TRr,MRr,N6e,ERr,CRr,j6e,wRr,ARr,yRr,xe,DC,D6e,LRr,xRr,SY,$Rr,kRr,SRr,GC,G6e,RRr,PRr,RY,BRr,IRr,qRr,OC,O6e,NRr,jRr,PY,DRr,GRr,ORr,VC,V6e,VRr,XRr,BY,zRr,WRr,QRr,XC,X6e,HRr,URr,IY,JRr,YRr,KRr,zC,z6e,ZRr,ePr,qY,oPr,rPr,tPr,WC,W6e,aPr,nPr,NY,sPr,lPr,iPr,QC,Q6e,dPr,cPr,jY,fPr,mPr,gPr,HC,H6e,hPr,pPr,DY,_Pr,uPr,bPr,UC,U6e,vPr,FPr,GY,TPr,MPr,EPr,JC,INe,Wc,YC,J6e,Dx,CPr,Y6e,wPr,qNe,ur,Gx,APr,Qc,yPr,OY,LPr,xPr,VY,$Pr,kPr,SPr,Ox,RPr,K6e,PPr,BPr,IPr,Qt,Vx,qPr,Z6e,NPr,jPr,Hc,DPr,eTe,GPr,OPr,XY,VPr,XPr,zPr,KC,WPr,zr,Xx,QPr,oTe,HPr,UPr,Fn,JPr,rTe,YPr,KPr,tTe,ZPr,eBr,aTe,oBr,rBr,tBr,$e,ZC,nTe,aBr,nBr,zY,sBr,lBr,iBr,ew,sTe,dBr,cBr,WY,fBr,mBr,gBr,ow,lTe,hBr,pBr,QY,_Br,uBr,bBr,rw,iTe,vBr,FBr,HY,TBr,MBr,EBr,tw,dTe,CBr,wBr,UY,ABr,yBr,LBr,aw,cTe,xBr,$Br,JY,kBr,SBr,RBr,nw,fTe,PBr,BBr,YY,IBr,qBr,NBr,sw,mTe,jBr,DBr,KY,GBr,OBr,VBr,lw,gTe,XBr,zBr,ZY,WBr,QBr,HBr,iw,hTe,UBr,JBr,eK,YBr,KBr,ZBr,dw,NNe,Uc,cw,pTe,zx,eIr,_Te,oIr,jNe,br,Wx,rIr,Jc,tIr,oK,aIr,nIr,rK,sIr,lIr,iIr,Qx,dIr,uTe,cIr,fIr,mIr,Ht,Hx,gIr,bTe,hIr,pIr,Yc,_Ir,vTe,uIr,bIr,tK,vIr,FIr,TIr,fw,MIr,Wr,Ux,EIr,FTe,CIr,wIr,Tn,AIr,TTe,yIr,LIr,MTe,xIr,$Ir,ETe,kIr,SIr,RIr,De,mw,CTe,PIr,BIr,aK,IIr,qIr,NIr,gw,wTe,jIr,DIr,nK,GIr,OIr,VIr,hw,ATe,XIr,zIr,sK,WIr,QIr,HIr,pw,yTe,UIr,JIr,lK,YIr,KIr,ZIr,_w,LTe,eqr,oqr,iK,rqr,tqr,aqr,uw,xTe,nqr,sqr,dK,lqr,iqr,dqr,bw,$Te,cqr,fqr,cK,mqr,gqr,hqr,vw,kTe,pqr,_qr,fK,uqr,bqr,vqr,Fw,DNe,Kc,Tw,STe,Jx,Fqr,RTe,Tqr,GNe,vr,Yx,Mqr,Zc,Eqr,mK,Cqr,wqr,gK,Aqr,yqr,Lqr,Kx,xqr,PTe,$qr,kqr,Sqr,Ut,Zx,Rqr,BTe,Pqr,Bqr,ef,Iqr,ITe,qqr,Nqr,hK,jqr,Dqr,Gqr,Mw,Oqr,Qr,e9,Vqr,qTe,Xqr,zqr,Mn,Wqr,NTe,Qqr,Hqr,jTe,Uqr,Jqr,DTe,Yqr,Kqr,Zqr,Ge,Ew,GTe,eNr,oNr,pK,rNr,tNr,aNr,Cw,OTe,nNr,sNr,_K,lNr,iNr,dNr,ww,VTe,cNr,fNr,uK,mNr,gNr,hNr,Aw,XTe,pNr,_Nr,bK,uNr,bNr,vNr,yw,zTe,FNr,TNr,vK,MNr,ENr,CNr,Lw,WTe,wNr,ANr,FK,yNr,LNr,xNr,xw,QTe,$Nr,kNr,TK,SNr,RNr,PNr,$w,HTe,BNr,INr,MK,qNr,NNr,jNr,kw,ONe,of,Sw,UTe,o9,DNr,JTe,GNr,VNe,Fr,r9,ONr,rf,VNr,EK,XNr,zNr,CK,WNr,QNr,HNr,t9,UNr,YTe,JNr,YNr,KNr,Jt,a9,ZNr,KTe,ejr,ojr,tf,rjr,ZTe,tjr,ajr,wK,njr,sjr,ljr,Rw,ijr,Hr,n9,djr,eMe,cjr,fjr,En,mjr,oMe,gjr,hjr,rMe,pjr,_jr,tMe,ujr,bjr,vjr,aMe,Pw,nMe,Fjr,Tjr,AK,Mjr,Ejr,Cjr,Bw,XNe,af,Iw,sMe,s9,wjr,lMe,Ajr,zNe,Tr,l9,yjr,nf,Ljr,yK,xjr,$jr,LK,kjr,Sjr,Rjr,i9,Pjr,iMe,Bjr,Ijr,qjr,Yt,d9,Njr,dMe,jjr,Djr,sf,Gjr,cMe,Ojr,Vjr,xK,Xjr,zjr,Wjr,qw,Qjr,Ur,c9,Hjr,fMe,Ujr,Jjr,Cn,Yjr,mMe,Kjr,Zjr,gMe,eDr,oDr,hMe,rDr,tDr,aDr,f9,Nw,pMe,nDr,sDr,$K,lDr,iDr,dDr,jw,_Me,cDr,fDr,kK,mDr,gDr,hDr,Dw,WNe,lf,Gw,uMe,m9,pDr,bMe,_Dr,QNe,Mr,g9,uDr,df,bDr,SK,vDr,FDr,RK,TDr,MDr,EDr,h9,CDr,vMe,wDr,ADr,yDr,Kt,p9,LDr,FMe,xDr,$Dr,cf,kDr,TMe,SDr,RDr,PK,PDr,BDr,IDr,Ow,qDr,Jr,_9,NDr,MMe,jDr,DDr,wn,GDr,EMe,ODr,VDr,CMe,XDr,zDr,wMe,WDr,QDr,HDr,AMe,Vw,yMe,UDr,JDr,BK,YDr,KDr,ZDr,Xw,HNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),my=new oe({}),gy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new eGr({props:{warning:!0,$$slots:{default:[a7t]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L575"}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L598"}}),vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[n7t]},$$scope:{ctx:L}}}),vy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L721"}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L388"}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L402"}}),Zg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[s7t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L598"}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),Lh=new eGr({props:{$$slots:{default:[l7t]},$$scope:{ctx:L}}}),xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[i7t]},$$scope:{ctx:L}}}),ky=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L87"}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L101"}}),Hh=new eGr({props:{$$slots:{default:[d7t]},$$scope:{ctx:L}}}),Uh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[c7t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L254"}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L727"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Kh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[f7t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[m7t]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L734"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[g7t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[h7t]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L749"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[p7t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_7t]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L756"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[u7t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b7t]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L763"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),db=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v7t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),yb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F7t]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L772"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[T7t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M7t]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L806"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[E7t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C7t]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L813"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w7t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A7t]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L799"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),g4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[y7t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[L7t]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L781"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[x7t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$7t]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L788"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[k7t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[S7t]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L822"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[R7t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[P7t]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L861"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[B7t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[I7t]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L868"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[q7t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[N7t]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L891"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[j7t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[D7t]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L875"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[G7t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[O7t]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L882"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[V7t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[X7t]},$$scope:{ctx:L}}}),_8=new oe({}),u8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L900"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[z7t]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[W7t]},$$scope:{ctx:L}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L907"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Q7t]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[H7t]},$$scope:{ctx:L}}}),A8=new oe({}),y8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L854"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[U7t]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[J7t]},$$scope:{ctx:L}}}),S8=new oe({}),R8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L829"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Y7t]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[K7t]},$$scope:{ctx:L}}}),q8=new oe({}),N8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L836"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),C3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Z7t]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),O8=new oe({}),V8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L845"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Q8=new oe({}),H8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),o7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),t7=new oe({}),a7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),s7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),i7=new oe({}),d7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),f7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),g7=new oe({}),h7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),_7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),b7=new oe({}),v7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),T7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),E7=new oe({}),C7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),A7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),L7=new oe({}),x7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),k7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),R7=new oe({}),P7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),I7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),j7=new oe({}),D7=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),O7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),X7=new oe({}),z7=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),Q7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),H7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),U7=new oe({}),J7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),K7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),jE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),px=new oe({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),GE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),a9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),d9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),iy=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),dy=o("AutoConfig"),Ln=o(", "),xn=a("a"),cy=o("AutoModel"),hi=o(`, and
`),$n=a("a"),fy=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),x$=o("will create a model that is an instance of "),_i=a("a"),$$=o("BertModel"),k$=o("."),Eo=l(),wa=a("p"),S$=o("There is one class of "),uf=a("code"),R$=o("AutoModel"),rGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zIe=l(),ui=a("h2"),bf=a("a"),Lee=a("span"),F(my.$$.fragment),tGe=l(),xee=a("span"),aGe=o("Extending the Auto Classes"),WIe=l(),kn=a("p"),nGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ee=a("code"),sGe=o("NewModel"),lGe=o(", make sure you have a "),kee=a("code"),iGe=o("NewModelConfig"),dGe=o(` then you can add those to the auto
classes like this:`),QIe=l(),F(gy.$$.fragment),HIe=l(),P$=a("p"),cGe=o("You will then be able to use the auto classes like you would usually do!"),UIe=l(),F(vf.$$.fragment),JIe=l(),bi=a("h2"),Ff=a("a"),See=a("span"),F(hy.$$.fragment),fGe=l(),Ree=a("span"),mGe=o("AutoConfig"),YIe=l(),Co=a("div"),F(py.$$.fragment),gGe=l(),_y=a("p"),hGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B$=a("a"),pGe=o("from_pretrained()"),_Ge=o(" class method."),uGe=l(),uy=a("p"),bGe=o("This class cannot be instantiated directly using "),Pee=a("code"),vGe=o("__init__()"),FGe=o(" (throws an error)."),TGe=l(),Er=a("div"),F(by.$$.fragment),MGe=l(),Bee=a("p"),EGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),CGe=l(),vi=a("p"),wGe=o("The configuration class to instantiate is selected based on the "),Iee=a("code"),AGe=o("model_type"),yGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),qee=a("code"),LGe=o("pretrained_model_name_or_path"),xGe=o(":"),$Ge=l(),A=a("ul"),Tf=a("li"),Nee=a("strong"),kGe=o("albert"),SGe=o(" \u2014 "),I$=a("a"),RGe=o("AlbertConfig"),PGe=o(" (ALBERT model)"),BGe=l(),Mf=a("li"),jee=a("strong"),IGe=o("bart"),qGe=o(" \u2014 "),q$=a("a"),NGe=o("BartConfig"),jGe=o(" (BART model)"),DGe=l(),Ef=a("li"),Dee=a("strong"),GGe=o("beit"),OGe=o(" \u2014 "),N$=a("a"),VGe=o("BeitConfig"),XGe=o(" (BEiT model)"),zGe=l(),Cf=a("li"),Gee=a("strong"),WGe=o("bert"),QGe=o(" \u2014 "),j$=a("a"),HGe=o("BertConfig"),UGe=o(" (BERT model)"),JGe=l(),wf=a("li"),Oee=a("strong"),YGe=o("bert-generation"),KGe=o(" \u2014 "),D$=a("a"),ZGe=o("BertGenerationConfig"),eOe=o(" (Bert Generation model)"),oOe=l(),Af=a("li"),Vee=a("strong"),rOe=o("big_bird"),tOe=o(" \u2014 "),G$=a("a"),aOe=o("BigBirdConfig"),nOe=o(" (BigBird model)"),sOe=l(),yf=a("li"),Xee=a("strong"),lOe=o("bigbird_pegasus"),iOe=o(" \u2014 "),O$=a("a"),dOe=o("BigBirdPegasusConfig"),cOe=o(" (BigBirdPegasus model)"),fOe=l(),Lf=a("li"),zee=a("strong"),mOe=o("blenderbot"),gOe=o(" \u2014 "),V$=a("a"),hOe=o("BlenderbotConfig"),pOe=o(" (Blenderbot model)"),_Oe=l(),xf=a("li"),Wee=a("strong"),uOe=o("blenderbot-small"),bOe=o(" \u2014 "),X$=a("a"),vOe=o("BlenderbotSmallConfig"),FOe=o(" (BlenderbotSmall model)"),TOe=l(),$f=a("li"),Qee=a("strong"),MOe=o("camembert"),EOe=o(" \u2014 "),z$=a("a"),COe=o("CamembertConfig"),wOe=o(" (CamemBERT model)"),AOe=l(),kf=a("li"),Hee=a("strong"),yOe=o("canine"),LOe=o(" \u2014 "),W$=a("a"),xOe=o("CanineConfig"),$Oe=o(" (Canine model)"),kOe=l(),Sf=a("li"),Uee=a("strong"),SOe=o("clip"),ROe=o(" \u2014 "),Q$=a("a"),POe=o("CLIPConfig"),BOe=o(" (CLIP model)"),IOe=l(),Rf=a("li"),Jee=a("strong"),qOe=o("convbert"),NOe=o(" \u2014 "),H$=a("a"),jOe=o("ConvBertConfig"),DOe=o(" (ConvBERT model)"),GOe=l(),Pf=a("li"),Yee=a("strong"),OOe=o("convnext"),VOe=o(" \u2014 "),U$=a("a"),XOe=o("ConvNextConfig"),zOe=o(" (ConvNext model)"),WOe=l(),Bf=a("li"),Kee=a("strong"),QOe=o("ctrl"),HOe=o(" \u2014 "),J$=a("a"),UOe=o("CTRLConfig"),JOe=o(" (CTRL model)"),YOe=l(),If=a("li"),Zee=a("strong"),KOe=o("data2vec-audio"),ZOe=o(" \u2014 "),Y$=a("a"),eVe=o("Data2VecAudioConfig"),oVe=o(" (Data2VecAudio model)"),rVe=l(),qf=a("li"),eoe=a("strong"),tVe=o("data2vec-text"),aVe=o(" \u2014 "),K$=a("a"),nVe=o("Data2VecTextConfig"),sVe=o(" (Data2VecText model)"),lVe=l(),Nf=a("li"),ooe=a("strong"),iVe=o("data2vec-vision"),dVe=o(" \u2014 "),Z$=a("a"),cVe=o("Data2VecVisionConfig"),fVe=o(" (Data2VecVision model)"),mVe=l(),jf=a("li"),roe=a("strong"),gVe=o("deberta"),hVe=o(" \u2014 "),ek=a("a"),pVe=o("DebertaConfig"),_Ve=o(" (DeBERTa model)"),uVe=l(),Df=a("li"),toe=a("strong"),bVe=o("deberta-v2"),vVe=o(" \u2014 "),ok=a("a"),FVe=o("DebertaV2Config"),TVe=o(" (DeBERTa-v2 model)"),MVe=l(),Gf=a("li"),aoe=a("strong"),EVe=o("decision_transformer"),CVe=o(" \u2014 "),rk=a("a"),wVe=o("DecisionTransformerConfig"),AVe=o(" (Decision Transformer model)"),yVe=l(),Of=a("li"),noe=a("strong"),LVe=o("deit"),xVe=o(" \u2014 "),tk=a("a"),$Ve=o("DeiTConfig"),kVe=o(" (DeiT model)"),SVe=l(),Vf=a("li"),soe=a("strong"),RVe=o("detr"),PVe=o(" \u2014 "),ak=a("a"),BVe=o("DetrConfig"),IVe=o(" (DETR model)"),qVe=l(),Xf=a("li"),loe=a("strong"),NVe=o("distilbert"),jVe=o(" \u2014 "),nk=a("a"),DVe=o("DistilBertConfig"),GVe=o(" (DistilBERT model)"),OVe=l(),zf=a("li"),ioe=a("strong"),VVe=o("dpr"),XVe=o(" \u2014 "),sk=a("a"),zVe=o("DPRConfig"),WVe=o(" (DPR model)"),QVe=l(),Wf=a("li"),doe=a("strong"),HVe=o("dpt"),UVe=o(" \u2014 "),lk=a("a"),JVe=o("DPTConfig"),YVe=o(" (DPT model)"),KVe=l(),Qf=a("li"),coe=a("strong"),ZVe=o("electra"),eXe=o(" \u2014 "),ik=a("a"),oXe=o("ElectraConfig"),rXe=o(" (ELECTRA model)"),tXe=l(),Hf=a("li"),foe=a("strong"),aXe=o("encoder-decoder"),nXe=o(" \u2014 "),dk=a("a"),sXe=o("EncoderDecoderConfig"),lXe=o(" (Encoder decoder model)"),iXe=l(),Uf=a("li"),moe=a("strong"),dXe=o("flaubert"),cXe=o(" \u2014 "),ck=a("a"),fXe=o("FlaubertConfig"),mXe=o(" (FlauBERT model)"),gXe=l(),Jf=a("li"),goe=a("strong"),hXe=o("flava"),pXe=o(" \u2014 "),fk=a("a"),_Xe=o("FlavaConfig"),uXe=o(" (Flava model)"),bXe=l(),Yf=a("li"),hoe=a("strong"),vXe=o("fnet"),FXe=o(" \u2014 "),mk=a("a"),TXe=o("FNetConfig"),MXe=o(" (FNet model)"),EXe=l(),Kf=a("li"),poe=a("strong"),CXe=o("fsmt"),wXe=o(" \u2014 "),gk=a("a"),AXe=o("FSMTConfig"),yXe=o(" (FairSeq Machine-Translation model)"),LXe=l(),Zf=a("li"),_oe=a("strong"),xXe=o("funnel"),$Xe=o(" \u2014 "),hk=a("a"),kXe=o("FunnelConfig"),SXe=o(" (Funnel Transformer model)"),RXe=l(),em=a("li"),uoe=a("strong"),PXe=o("glpn"),BXe=o(" \u2014 "),pk=a("a"),IXe=o("GLPNConfig"),qXe=o(" (GLPN model)"),NXe=l(),om=a("li"),boe=a("strong"),jXe=o("gpt2"),DXe=o(" \u2014 "),_k=a("a"),GXe=o("GPT2Config"),OXe=o(" (OpenAI GPT-2 model)"),VXe=l(),rm=a("li"),voe=a("strong"),XXe=o("gpt_neo"),zXe=o(" \u2014 "),uk=a("a"),WXe=o("GPTNeoConfig"),QXe=o(" (GPT Neo model)"),HXe=l(),tm=a("li"),Foe=a("strong"),UXe=o("gptj"),JXe=o(" \u2014 "),bk=a("a"),YXe=o("GPTJConfig"),KXe=o(" (GPT-J model)"),ZXe=l(),am=a("li"),Toe=a("strong"),eze=o("hubert"),oze=o(" \u2014 "),vk=a("a"),rze=o("HubertConfig"),tze=o(" (Hubert model)"),aze=l(),nm=a("li"),Moe=a("strong"),nze=o("ibert"),sze=o(" \u2014 "),Fk=a("a"),lze=o("IBertConfig"),ize=o(" (I-BERT model)"),dze=l(),sm=a("li"),Eoe=a("strong"),cze=o("imagegpt"),fze=o(" \u2014 "),Tk=a("a"),mze=o("ImageGPTConfig"),gze=o(" (ImageGPT model)"),hze=l(),lm=a("li"),Coe=a("strong"),pze=o("layoutlm"),_ze=o(" \u2014 "),Mk=a("a"),uze=o("LayoutLMConfig"),bze=o(" (LayoutLM model)"),vze=l(),im=a("li"),woe=a("strong"),Fze=o("layoutlmv2"),Tze=o(" \u2014 "),Ek=a("a"),Mze=o("LayoutLMv2Config"),Eze=o(" (LayoutLMv2 model)"),Cze=l(),dm=a("li"),Aoe=a("strong"),wze=o("led"),Aze=o(" \u2014 "),Ck=a("a"),yze=o("LEDConfig"),Lze=o(" (LED model)"),xze=l(),cm=a("li"),yoe=a("strong"),$ze=o("longformer"),kze=o(" \u2014 "),wk=a("a"),Sze=o("LongformerConfig"),Rze=o(" (Longformer model)"),Pze=l(),fm=a("li"),Loe=a("strong"),Bze=o("luke"),Ize=o(" \u2014 "),Ak=a("a"),qze=o("LukeConfig"),Nze=o(" (LUKE model)"),jze=l(),mm=a("li"),xoe=a("strong"),Dze=o("lxmert"),Gze=o(" \u2014 "),yk=a("a"),Oze=o("LxmertConfig"),Vze=o(" (LXMERT model)"),Xze=l(),gm=a("li"),$oe=a("strong"),zze=o("m2m_100"),Wze=o(" \u2014 "),Lk=a("a"),Qze=o("M2M100Config"),Hze=o(" (M2M100 model)"),Uze=l(),hm=a("li"),koe=a("strong"),Jze=o("marian"),Yze=o(" \u2014 "),xk=a("a"),Kze=o("MarianConfig"),Zze=o(" (Marian model)"),eWe=l(),pm=a("li"),Soe=a("strong"),oWe=o("maskformer"),rWe=o(" \u2014 "),$k=a("a"),tWe=o("MaskFormerConfig"),aWe=o(" (MaskFormer model)"),nWe=l(),_m=a("li"),Roe=a("strong"),sWe=o("mbart"),lWe=o(" \u2014 "),kk=a("a"),iWe=o("MBartConfig"),dWe=o(" (mBART model)"),cWe=l(),um=a("li"),Poe=a("strong"),fWe=o("megatron-bert"),mWe=o(" \u2014 "),Sk=a("a"),gWe=o("MegatronBertConfig"),hWe=o(" (MegatronBert model)"),pWe=l(),bm=a("li"),Boe=a("strong"),_We=o("mobilebert"),uWe=o(" \u2014 "),Rk=a("a"),bWe=o("MobileBertConfig"),vWe=o(" (MobileBERT model)"),FWe=l(),vm=a("li"),Ioe=a("strong"),TWe=o("mpnet"),MWe=o(" \u2014 "),Pk=a("a"),EWe=o("MPNetConfig"),CWe=o(" (MPNet model)"),wWe=l(),Fm=a("li"),qoe=a("strong"),AWe=o("mt5"),yWe=o(" \u2014 "),Bk=a("a"),LWe=o("MT5Config"),xWe=o(" (mT5 model)"),$We=l(),Tm=a("li"),Noe=a("strong"),kWe=o("nystromformer"),SWe=o(" \u2014 "),Ik=a("a"),RWe=o("NystromformerConfig"),PWe=o(" (Nystromformer model)"),BWe=l(),Mm=a("li"),joe=a("strong"),IWe=o("openai-gpt"),qWe=o(" \u2014 "),qk=a("a"),NWe=o("OpenAIGPTConfig"),jWe=o(" (OpenAI GPT model)"),DWe=l(),Em=a("li"),Doe=a("strong"),GWe=o("opt"),OWe=o(" \u2014 "),Nk=a("a"),VWe=o("OPTConfig"),XWe=o(" (OPT model)"),zWe=l(),Cm=a("li"),Goe=a("strong"),WWe=o("pegasus"),QWe=o(" \u2014 "),jk=a("a"),HWe=o("PegasusConfig"),UWe=o(" (Pegasus model)"),JWe=l(),wm=a("li"),Ooe=a("strong"),YWe=o("perceiver"),KWe=o(" \u2014 "),Dk=a("a"),ZWe=o("PerceiverConfig"),eQe=o(" (Perceiver model)"),oQe=l(),Am=a("li"),Voe=a("strong"),rQe=o("plbart"),tQe=o(" \u2014 "),Gk=a("a"),aQe=o("PLBartConfig"),nQe=o(" (PLBart model)"),sQe=l(),ym=a("li"),Xoe=a("strong"),lQe=o("poolformer"),iQe=o(" \u2014 "),Ok=a("a"),dQe=o("PoolFormerConfig"),cQe=o(" (PoolFormer model)"),fQe=l(),Lm=a("li"),zoe=a("strong"),mQe=o("prophetnet"),gQe=o(" \u2014 "),Vk=a("a"),hQe=o("ProphetNetConfig"),pQe=o(" (ProphetNet model)"),_Qe=l(),xm=a("li"),Woe=a("strong"),uQe=o("qdqbert"),bQe=o(" \u2014 "),Xk=a("a"),vQe=o("QDQBertConfig"),FQe=o(" (QDQBert model)"),TQe=l(),$m=a("li"),Qoe=a("strong"),MQe=o("rag"),EQe=o(" \u2014 "),zk=a("a"),CQe=o("RagConfig"),wQe=o(" (RAG model)"),AQe=l(),km=a("li"),Hoe=a("strong"),yQe=o("realm"),LQe=o(" \u2014 "),Wk=a("a"),xQe=o("RealmConfig"),$Qe=o(" (Realm model)"),kQe=l(),Sm=a("li"),Uoe=a("strong"),SQe=o("reformer"),RQe=o(" \u2014 "),Qk=a("a"),PQe=o("ReformerConfig"),BQe=o(" (Reformer model)"),IQe=l(),Rm=a("li"),Joe=a("strong"),qQe=o("regnet"),NQe=o(" \u2014 "),Hk=a("a"),jQe=o("RegNetConfig"),DQe=o(" (RegNet model)"),GQe=l(),Pm=a("li"),Yoe=a("strong"),OQe=o("rembert"),VQe=o(" \u2014 "),Uk=a("a"),XQe=o("RemBertConfig"),zQe=o(" (RemBERT model)"),WQe=l(),Bm=a("li"),Koe=a("strong"),QQe=o("resnet"),HQe=o(" \u2014 "),Jk=a("a"),UQe=o("ResNetConfig"),JQe=o(" (ResNet model)"),YQe=l(),Im=a("li"),Zoe=a("strong"),KQe=o("retribert"),ZQe=o(" \u2014 "),Yk=a("a"),eHe=o("RetriBertConfig"),oHe=o(" (RetriBERT model)"),rHe=l(),qm=a("li"),ere=a("strong"),tHe=o("roberta"),aHe=o(" \u2014 "),Kk=a("a"),nHe=o("RobertaConfig"),sHe=o(" (RoBERTa model)"),lHe=l(),Nm=a("li"),ore=a("strong"),iHe=o("roformer"),dHe=o(" \u2014 "),Zk=a("a"),cHe=o("RoFormerConfig"),fHe=o(" (RoFormer model)"),mHe=l(),jm=a("li"),rre=a("strong"),gHe=o("segformer"),hHe=o(" \u2014 "),eS=a("a"),pHe=o("SegformerConfig"),_He=o(" (SegFormer model)"),uHe=l(),Dm=a("li"),tre=a("strong"),bHe=o("sew"),vHe=o(" \u2014 "),oS=a("a"),FHe=o("SEWConfig"),THe=o(" (SEW model)"),MHe=l(),Gm=a("li"),are=a("strong"),EHe=o("sew-d"),CHe=o(" \u2014 "),rS=a("a"),wHe=o("SEWDConfig"),AHe=o(" (SEW-D model)"),yHe=l(),Om=a("li"),nre=a("strong"),LHe=o("speech-encoder-decoder"),xHe=o(" \u2014 "),tS=a("a"),$He=o("SpeechEncoderDecoderConfig"),kHe=o(" (Speech Encoder decoder model)"),SHe=l(),Vm=a("li"),sre=a("strong"),RHe=o("speech_to_text"),PHe=o(" \u2014 "),aS=a("a"),BHe=o("Speech2TextConfig"),IHe=o(" (Speech2Text model)"),qHe=l(),Xm=a("li"),lre=a("strong"),NHe=o("speech_to_text_2"),jHe=o(" \u2014 "),nS=a("a"),DHe=o("Speech2Text2Config"),GHe=o(" (Speech2Text2 model)"),OHe=l(),zm=a("li"),ire=a("strong"),VHe=o("splinter"),XHe=o(" \u2014 "),sS=a("a"),zHe=o("SplinterConfig"),WHe=o(" (Splinter model)"),QHe=l(),Wm=a("li"),dre=a("strong"),HHe=o("squeezebert"),UHe=o(" \u2014 "),lS=a("a"),JHe=o("SqueezeBertConfig"),YHe=o(" (SqueezeBERT model)"),KHe=l(),Qm=a("li"),cre=a("strong"),ZHe=o("swin"),eUe=o(" \u2014 "),iS=a("a"),oUe=o("SwinConfig"),rUe=o(" (Swin model)"),tUe=l(),Hm=a("li"),fre=a("strong"),aUe=o("t5"),nUe=o(" \u2014 "),dS=a("a"),sUe=o("T5Config"),lUe=o(" (T5 model)"),iUe=l(),Um=a("li"),mre=a("strong"),dUe=o("tapas"),cUe=o(" \u2014 "),cS=a("a"),fUe=o("TapasConfig"),mUe=o(" (TAPAS model)"),gUe=l(),Jm=a("li"),gre=a("strong"),hUe=o("trajectory_transformer"),pUe=o(" \u2014 "),fS=a("a"),_Ue=o("TrajectoryTransformerConfig"),uUe=o(" (Trajectory Transformer model)"),bUe=l(),Ym=a("li"),hre=a("strong"),vUe=o("transfo-xl"),FUe=o(" \u2014 "),mS=a("a"),TUe=o("TransfoXLConfig"),MUe=o(" (Transformer-XL model)"),EUe=l(),Km=a("li"),pre=a("strong"),CUe=o("trocr"),wUe=o(" \u2014 "),gS=a("a"),AUe=o("TrOCRConfig"),yUe=o(" (TrOCR model)"),LUe=l(),Zm=a("li"),_re=a("strong"),xUe=o("unispeech"),$Ue=o(" \u2014 "),hS=a("a"),kUe=o("UniSpeechConfig"),SUe=o(" (UniSpeech model)"),RUe=l(),eg=a("li"),ure=a("strong"),PUe=o("unispeech-sat"),BUe=o(" \u2014 "),pS=a("a"),IUe=o("UniSpeechSatConfig"),qUe=o(" (UniSpeechSat model)"),NUe=l(),og=a("li"),bre=a("strong"),jUe=o("van"),DUe=o(" \u2014 "),_S=a("a"),GUe=o("VanConfig"),OUe=o(" (VAN model)"),VUe=l(),rg=a("li"),vre=a("strong"),XUe=o("vilt"),zUe=o(" \u2014 "),uS=a("a"),WUe=o("ViltConfig"),QUe=o(" (ViLT model)"),HUe=l(),tg=a("li"),Fre=a("strong"),UUe=o("vision-encoder-decoder"),JUe=o(" \u2014 "),bS=a("a"),YUe=o("VisionEncoderDecoderConfig"),KUe=o(" (Vision Encoder decoder model)"),ZUe=l(),ag=a("li"),Tre=a("strong"),eJe=o("vision-text-dual-encoder"),oJe=o(" \u2014 "),vS=a("a"),rJe=o("VisionTextDualEncoderConfig"),tJe=o(" (VisionTextDualEncoder model)"),aJe=l(),ng=a("li"),Mre=a("strong"),nJe=o("visual_bert"),sJe=o(" \u2014 "),FS=a("a"),lJe=o("VisualBertConfig"),iJe=o(" (VisualBert model)"),dJe=l(),sg=a("li"),Ere=a("strong"),cJe=o("vit"),fJe=o(" \u2014 "),TS=a("a"),mJe=o("ViTConfig"),gJe=o(" (ViT model)"),hJe=l(),lg=a("li"),Cre=a("strong"),pJe=o("vit_mae"),_Je=o(" \u2014 "),MS=a("a"),uJe=o("ViTMAEConfig"),bJe=o(" (ViTMAE model)"),vJe=l(),ig=a("li"),wre=a("strong"),FJe=o("wav2vec2"),TJe=o(" \u2014 "),ES=a("a"),MJe=o("Wav2Vec2Config"),EJe=o(" (Wav2Vec2 model)"),CJe=l(),dg=a("li"),Are=a("strong"),wJe=o("wav2vec2-conformer"),AJe=o(" \u2014 "),CS=a("a"),yJe=o("Wav2Vec2ConformerConfig"),LJe=o(" (Wav2Vec2-Conformer model)"),xJe=l(),cg=a("li"),yre=a("strong"),$Je=o("wavlm"),kJe=o(" \u2014 "),wS=a("a"),SJe=o("WavLMConfig"),RJe=o(" (WavLM model)"),PJe=l(),fg=a("li"),Lre=a("strong"),BJe=o("xglm"),IJe=o(" \u2014 "),AS=a("a"),qJe=o("XGLMConfig"),NJe=o(" (XGLM model)"),jJe=l(),mg=a("li"),xre=a("strong"),DJe=o("xlm"),GJe=o(" \u2014 "),yS=a("a"),OJe=o("XLMConfig"),VJe=o(" (XLM model)"),XJe=l(),gg=a("li"),$re=a("strong"),zJe=o("xlm-prophetnet"),WJe=o(" \u2014 "),LS=a("a"),QJe=o("XLMProphetNetConfig"),HJe=o(" (XLMProphetNet model)"),UJe=l(),hg=a("li"),kre=a("strong"),JJe=o("xlm-roberta"),YJe=o(" \u2014 "),xS=a("a"),KJe=o("XLMRobertaConfig"),ZJe=o(" (XLM-RoBERTa model)"),eYe=l(),pg=a("li"),Sre=a("strong"),oYe=o("xlm-roberta-xl"),rYe=o(" \u2014 "),$S=a("a"),tYe=o("XLMRobertaXLConfig"),aYe=o(" (XLM-RoBERTa-XL model)"),nYe=l(),_g=a("li"),Rre=a("strong"),sYe=o("xlnet"),lYe=o(" \u2014 "),kS=a("a"),iYe=o("XLNetConfig"),dYe=o(" (XLNet model)"),cYe=l(),ug=a("li"),Pre=a("strong"),fYe=o("yolos"),mYe=o(" \u2014 "),SS=a("a"),gYe=o("YolosConfig"),hYe=o(" (YOLOS model)"),pYe=l(),bg=a("li"),Bre=a("strong"),_Ye=o("yoso"),uYe=o(" \u2014 "),RS=a("a"),bYe=o("YosoConfig"),vYe=o(" (YOSO model)"),FYe=l(),F(vg.$$.fragment),TYe=l(),Fg=a("div"),F(vy.$$.fragment),MYe=l(),Ire=a("p"),EYe=o("Register a new configuration for this class."),KIe=l(),Fi=a("h2"),Tg=a("a"),qre=a("span"),F(Fy.$$.fragment),CYe=l(),Nre=a("span"),wYe=o("AutoTokenizer"),ZIe=l(),wo=a("div"),F(Ty.$$.fragment),AYe=l(),My=a("p"),yYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),PS=a("a"),LYe=o("AutoTokenizer.from_pretrained()"),xYe=o(" class method."),$Ye=l(),Ey=a("p"),kYe=o("This class cannot be instantiated directly using "),jre=a("code"),SYe=o("__init__()"),RYe=o(" (throws an error)."),PYe=l(),Cr=a("div"),F(Cy.$$.fragment),BYe=l(),Dre=a("p"),IYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qYe=l(),Aa=a("p"),NYe=o("The tokenizer class to instantiate is selected based on the "),Gre=a("code"),jYe=o("model_type"),DYe=o(` property of the config object (either
passed as an argument or loaded from `),Ore=a("code"),GYe=o("pretrained_model_name_or_path"),OYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vre=a("code"),VYe=o("pretrained_model_name_or_path"),XYe=o(":"),zYe=l(),k=a("ul"),Sn=a("li"),Xre=a("strong"),WYe=o("albert"),QYe=o(" \u2014 "),BS=a("a"),HYe=o("AlbertTokenizer"),UYe=o(" or "),IS=a("a"),JYe=o("AlbertTokenizerFast"),YYe=o(" (ALBERT model)"),KYe=l(),Rn=a("li"),zre=a("strong"),ZYe=o("bart"),eKe=o(" \u2014 "),qS=a("a"),oKe=o("BartTokenizer"),rKe=o(" or "),NS=a("a"),tKe=o("BartTokenizerFast"),aKe=o(" (BART model)"),nKe=l(),Pn=a("li"),Wre=a("strong"),sKe=o("barthez"),lKe=o(" \u2014 "),jS=a("a"),iKe=o("BarthezTokenizer"),dKe=o(" or "),DS=a("a"),cKe=o("BarthezTokenizerFast"),fKe=o(" (BARThez model)"),mKe=l(),Mg=a("li"),Qre=a("strong"),gKe=o("bartpho"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("BartphoTokenizer"),_Ke=o(" (BARTpho model)"),uKe=l(),Bn=a("li"),Hre=a("strong"),bKe=o("bert"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("BertTokenizer"),TKe=o(" or "),VS=a("a"),MKe=o("BertTokenizerFast"),EKe=o(" (BERT model)"),CKe=l(),Eg=a("li"),Ure=a("strong"),wKe=o("bert-generation"),AKe=o(" \u2014 "),XS=a("a"),yKe=o("BertGenerationTokenizer"),LKe=o(" (Bert Generation model)"),xKe=l(),Cg=a("li"),Jre=a("strong"),$Ke=o("bert-japanese"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("BertJapaneseTokenizer"),RKe=o(" (BertJapanese model)"),PKe=l(),wg=a("li"),Yre=a("strong"),BKe=o("bertweet"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BertweetTokenizer"),NKe=o(" (Bertweet model)"),jKe=l(),In=a("li"),Kre=a("strong"),DKe=o("big_bird"),GKe=o(" \u2014 "),QS=a("a"),OKe=o("BigBirdTokenizer"),VKe=o(" or "),HS=a("a"),XKe=o("BigBirdTokenizerFast"),zKe=o(" (BigBird model)"),WKe=l(),qn=a("li"),Zre=a("strong"),QKe=o("bigbird_pegasus"),HKe=o(" \u2014 "),US=a("a"),UKe=o("PegasusTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("PegasusTokenizerFast"),KKe=o(" (BigBirdPegasus model)"),ZKe=l(),Nn=a("li"),ete=a("strong"),eZe=o("blenderbot"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BlenderbotTokenizer"),tZe=o(" or "),KS=a("a"),aZe=o("BlenderbotTokenizerFast"),nZe=o(" (Blenderbot model)"),sZe=l(),Ag=a("li"),ote=a("strong"),lZe=o("blenderbot-small"),iZe=o(" \u2014 "),ZS=a("a"),dZe=o("BlenderbotSmallTokenizer"),cZe=o(" (BlenderbotSmall model)"),fZe=l(),yg=a("li"),rte=a("strong"),mZe=o("byt5"),gZe=o(" \u2014 "),eR=a("a"),hZe=o("ByT5Tokenizer"),pZe=o(" (ByT5 model)"),_Ze=l(),jn=a("li"),tte=a("strong"),uZe=o("camembert"),bZe=o(" \u2014 "),oR=a("a"),vZe=o("CamembertTokenizer"),FZe=o(" or "),rR=a("a"),TZe=o("CamembertTokenizerFast"),MZe=o(" (CamemBERT model)"),EZe=l(),Lg=a("li"),ate=a("strong"),CZe=o("canine"),wZe=o(" \u2014 "),tR=a("a"),AZe=o("CanineTokenizer"),yZe=o(" (Canine model)"),LZe=l(),Dn=a("li"),nte=a("strong"),xZe=o("clip"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("CLIPTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("CLIPTokenizerFast"),PZe=o(" (CLIP model)"),BZe=l(),Gn=a("li"),ste=a("strong"),IZe=o("convbert"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("ConvBertTokenizer"),jZe=o(" or "),lR=a("a"),DZe=o("ConvBertTokenizerFast"),GZe=o(" (ConvBERT model)"),OZe=l(),On=a("li"),lte=a("strong"),VZe=o("cpm"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("CpmTokenizer"),WZe=o(" or "),dR=a("a"),QZe=o("CpmTokenizerFast"),HZe=o(" (CPM model)"),UZe=l(),xg=a("li"),ite=a("strong"),JZe=o("ctrl"),YZe=o(" \u2014 "),cR=a("a"),KZe=o("CTRLTokenizer"),ZZe=o(" (CTRL model)"),eeo=l(),Vn=a("li"),dte=a("strong"),oeo=o("data2vec-text"),reo=o(" \u2014 "),fR=a("a"),teo=o("RobertaTokenizer"),aeo=o(" or "),mR=a("a"),neo=o("RobertaTokenizerFast"),seo=o(" (Data2VecText model)"),leo=l(),Xn=a("li"),cte=a("strong"),ieo=o("deberta"),deo=o(" \u2014 "),gR=a("a"),ceo=o("DebertaTokenizer"),feo=o(" or "),hR=a("a"),meo=o("DebertaTokenizerFast"),geo=o(" (DeBERTa model)"),heo=l(),zn=a("li"),fte=a("strong"),peo=o("deberta-v2"),_eo=o(" \u2014 "),pR=a("a"),ueo=o("DebertaV2Tokenizer"),beo=o(" or "),_R=a("a"),veo=o("DebertaV2TokenizerFast"),Feo=o(" (DeBERTa-v2 model)"),Teo=l(),Wn=a("li"),mte=a("strong"),Meo=o("distilbert"),Eeo=o(" \u2014 "),uR=a("a"),Ceo=o("DistilBertTokenizer"),weo=o(" or "),bR=a("a"),Aeo=o("DistilBertTokenizerFast"),yeo=o(" (DistilBERT model)"),Leo=l(),Qn=a("li"),gte=a("strong"),xeo=o("dpr"),$eo=o(" \u2014 "),vR=a("a"),keo=o("DPRQuestionEncoderTokenizer"),Seo=o(" or "),FR=a("a"),Reo=o("DPRQuestionEncoderTokenizerFast"),Peo=o(" (DPR model)"),Beo=l(),Hn=a("li"),hte=a("strong"),Ieo=o("electra"),qeo=o(" \u2014 "),TR=a("a"),Neo=o("ElectraTokenizer"),jeo=o(" or "),MR=a("a"),Deo=o("ElectraTokenizerFast"),Geo=o(" (ELECTRA model)"),Oeo=l(),$g=a("li"),pte=a("strong"),Veo=o("flaubert"),Xeo=o(" \u2014 "),ER=a("a"),zeo=o("FlaubertTokenizer"),Weo=o(" (FlauBERT model)"),Qeo=l(),Un=a("li"),_te=a("strong"),Heo=o("fnet"),Ueo=o(" \u2014 "),CR=a("a"),Jeo=o("FNetTokenizer"),Yeo=o(" or "),wR=a("a"),Keo=o("FNetTokenizerFast"),Zeo=o(" (FNet model)"),eoo=l(),kg=a("li"),ute=a("strong"),ooo=o("fsmt"),roo=o(" \u2014 "),AR=a("a"),too=o("FSMTTokenizer"),aoo=o(" (FairSeq Machine-Translation model)"),noo=l(),Jn=a("li"),bte=a("strong"),soo=o("funnel"),loo=o(" \u2014 "),yR=a("a"),ioo=o("FunnelTokenizer"),doo=o(" or "),LR=a("a"),coo=o("FunnelTokenizerFast"),foo=o(" (Funnel Transformer model)"),moo=l(),Yn=a("li"),vte=a("strong"),goo=o("gpt2"),hoo=o(" \u2014 "),xR=a("a"),poo=o("GPT2Tokenizer"),_oo=o(" or "),$R=a("a"),uoo=o("GPT2TokenizerFast"),boo=o(" (OpenAI GPT-2 model)"),voo=l(),Kn=a("li"),Fte=a("strong"),Foo=o("gpt_neo"),Too=o(" \u2014 "),kR=a("a"),Moo=o("GPT2Tokenizer"),Eoo=o(" or "),SR=a("a"),Coo=o("GPT2TokenizerFast"),woo=o(" (GPT Neo model)"),Aoo=l(),Zn=a("li"),Tte=a("strong"),yoo=o("gptj"),Loo=o(" \u2014 "),RR=a("a"),xoo=o("GPT2Tokenizer"),$oo=o(" or "),PR=a("a"),koo=o("GPT2TokenizerFast"),Soo=o(" (GPT-J model)"),Roo=l(),es=a("li"),Mte=a("strong"),Poo=o("herbert"),Boo=o(" \u2014 "),BR=a("a"),Ioo=o("HerbertTokenizer"),qoo=o(" or "),IR=a("a"),Noo=o("HerbertTokenizerFast"),joo=o(" (HerBERT model)"),Doo=l(),Sg=a("li"),Ete=a("strong"),Goo=o("hubert"),Ooo=o(" \u2014 "),qR=a("a"),Voo=o("Wav2Vec2CTCTokenizer"),Xoo=o(" (Hubert model)"),zoo=l(),os=a("li"),Cte=a("strong"),Woo=o("ibert"),Qoo=o(" \u2014 "),NR=a("a"),Hoo=o("RobertaTokenizer"),Uoo=o(" or "),jR=a("a"),Joo=o("RobertaTokenizerFast"),Yoo=o(" (I-BERT model)"),Koo=l(),rs=a("li"),wte=a("strong"),Zoo=o("layoutlm"),ero=o(" \u2014 "),DR=a("a"),oro=o("LayoutLMTokenizer"),rro=o(" or "),GR=a("a"),tro=o("LayoutLMTokenizerFast"),aro=o(" (LayoutLM model)"),nro=l(),ts=a("li"),Ate=a("strong"),sro=o("layoutlmv2"),lro=o(" \u2014 "),OR=a("a"),iro=o("LayoutLMv2Tokenizer"),dro=o(" or "),VR=a("a"),cro=o("LayoutLMv2TokenizerFast"),fro=o(" (LayoutLMv2 model)"),mro=l(),as=a("li"),yte=a("strong"),gro=o("layoutxlm"),hro=o(" \u2014 "),XR=a("a"),pro=o("LayoutXLMTokenizer"),_ro=o(" or "),zR=a("a"),uro=o("LayoutXLMTokenizerFast"),bro=o(" (LayoutXLM model)"),vro=l(),ns=a("li"),Lte=a("strong"),Fro=o("led"),Tro=o(" \u2014 "),WR=a("a"),Mro=o("LEDTokenizer"),Ero=o(" or "),QR=a("a"),Cro=o("LEDTokenizerFast"),wro=o(" (LED model)"),Aro=l(),ss=a("li"),xte=a("strong"),yro=o("longformer"),Lro=o(" \u2014 "),HR=a("a"),xro=o("LongformerTokenizer"),$ro=o(" or "),UR=a("a"),kro=o("LongformerTokenizerFast"),Sro=o(" (Longformer model)"),Rro=l(),Rg=a("li"),$te=a("strong"),Pro=o("luke"),Bro=o(" \u2014 "),JR=a("a"),Iro=o("LukeTokenizer"),qro=o(" (LUKE model)"),Nro=l(),ls=a("li"),kte=a("strong"),jro=o("lxmert"),Dro=o(" \u2014 "),YR=a("a"),Gro=o("LxmertTokenizer"),Oro=o(" or "),KR=a("a"),Vro=o("LxmertTokenizerFast"),Xro=o(" (LXMERT model)"),zro=l(),Pg=a("li"),Ste=a("strong"),Wro=o("m2m_100"),Qro=o(" \u2014 "),ZR=a("a"),Hro=o("M2M100Tokenizer"),Uro=o(" (M2M100 model)"),Jro=l(),Bg=a("li"),Rte=a("strong"),Yro=o("marian"),Kro=o(" \u2014 "),eP=a("a"),Zro=o("MarianTokenizer"),eto=o(" (Marian model)"),oto=l(),is=a("li"),Pte=a("strong"),rto=o("mbart"),tto=o(" \u2014 "),oP=a("a"),ato=o("MBartTokenizer"),nto=o(" or "),rP=a("a"),sto=o("MBartTokenizerFast"),lto=o(" (mBART model)"),ito=l(),ds=a("li"),Bte=a("strong"),dto=o("mbart50"),cto=o(" \u2014 "),tP=a("a"),fto=o("MBart50Tokenizer"),mto=o(" or "),aP=a("a"),gto=o("MBart50TokenizerFast"),hto=o(" (mBART-50 model)"),pto=l(),cs=a("li"),Ite=a("strong"),_to=o("megatron-bert"),uto=o(" \u2014 "),nP=a("a"),bto=o("BertTokenizer"),vto=o(" or "),sP=a("a"),Fto=o("BertTokenizerFast"),Tto=o(" (MegatronBert model)"),Mto=l(),Ig=a("li"),qte=a("strong"),Eto=o("mluke"),Cto=o(" \u2014 "),lP=a("a"),wto=o("MLukeTokenizer"),Ato=o(" (mLUKE model)"),yto=l(),fs=a("li"),Nte=a("strong"),Lto=o("mobilebert"),xto=o(" \u2014 "),iP=a("a"),$to=o("MobileBertTokenizer"),kto=o(" or "),dP=a("a"),Sto=o("MobileBertTokenizerFast"),Rto=o(" (MobileBERT model)"),Pto=l(),ms=a("li"),jte=a("strong"),Bto=o("mpnet"),Ito=o(" \u2014 "),cP=a("a"),qto=o("MPNetTokenizer"),Nto=o(" or "),fP=a("a"),jto=o("MPNetTokenizerFast"),Dto=o(" (MPNet model)"),Gto=l(),gs=a("li"),Dte=a("strong"),Oto=o("mt5"),Vto=o(" \u2014 "),mP=a("a"),Xto=o("MT5Tokenizer"),zto=o(" or "),gP=a("a"),Wto=o("MT5TokenizerFast"),Qto=o(" (mT5 model)"),Hto=l(),hs=a("li"),Gte=a("strong"),Uto=o("nystromformer"),Jto=o(" \u2014 "),hP=a("a"),Yto=o("AlbertTokenizer"),Kto=o(" or "),pP=a("a"),Zto=o("AlbertTokenizerFast"),eao=o(" (Nystromformer model)"),oao=l(),ps=a("li"),Ote=a("strong"),rao=o("openai-gpt"),tao=o(" \u2014 "),_P=a("a"),aao=o("OpenAIGPTTokenizer"),nao=o(" or "),uP=a("a"),sao=o("OpenAIGPTTokenizerFast"),lao=o(" (OpenAI GPT model)"),iao=l(),qg=a("li"),Vte=a("strong"),dao=o("opt"),cao=o(" \u2014 "),bP=a("a"),fao=o("GPT2Tokenizer"),mao=o(" (OPT model)"),gao=l(),_s=a("li"),Xte=a("strong"),hao=o("pegasus"),pao=o(" \u2014 "),vP=a("a"),_ao=o("PegasusTokenizer"),uao=o(" or "),FP=a("a"),bao=o("PegasusTokenizerFast"),vao=o(" (Pegasus model)"),Fao=l(),Ng=a("li"),zte=a("strong"),Tao=o("perceiver"),Mao=o(" \u2014 "),TP=a("a"),Eao=o("PerceiverTokenizer"),Cao=o(" (Perceiver model)"),wao=l(),jg=a("li"),Wte=a("strong"),Aao=o("phobert"),yao=o(" \u2014 "),MP=a("a"),Lao=o("PhobertTokenizer"),xao=o(" (PhoBERT model)"),$ao=l(),Dg=a("li"),Qte=a("strong"),kao=o("plbart"),Sao=o(" \u2014 "),EP=a("a"),Rao=o("PLBartTokenizer"),Pao=o(" (PLBart model)"),Bao=l(),Gg=a("li"),Hte=a("strong"),Iao=o("prophetnet"),qao=o(" \u2014 "),CP=a("a"),Nao=o("ProphetNetTokenizer"),jao=o(" (ProphetNet model)"),Dao=l(),us=a("li"),Ute=a("strong"),Gao=o("qdqbert"),Oao=o(" \u2014 "),wP=a("a"),Vao=o("BertTokenizer"),Xao=o(" or "),AP=a("a"),zao=o("BertTokenizerFast"),Wao=o(" (QDQBert model)"),Qao=l(),Og=a("li"),Jte=a("strong"),Hao=o("rag"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("RagTokenizer"),Yao=o(" (RAG model)"),Kao=l(),bs=a("li"),Yte=a("strong"),Zao=o("realm"),eno=o(" \u2014 "),LP=a("a"),ono=o("RealmTokenizer"),rno=o(" or "),xP=a("a"),tno=o("RealmTokenizerFast"),ano=o(" (Realm model)"),nno=l(),vs=a("li"),Kte=a("strong"),sno=o("reformer"),lno=o(" \u2014 "),$P=a("a"),ino=o("ReformerTokenizer"),dno=o(" or "),kP=a("a"),cno=o("ReformerTokenizerFast"),fno=o(" (Reformer model)"),mno=l(),Fs=a("li"),Zte=a("strong"),gno=o("rembert"),hno=o(" \u2014 "),SP=a("a"),pno=o("RemBertTokenizer"),_no=o(" or "),RP=a("a"),uno=o("RemBertTokenizerFast"),bno=o(" (RemBERT model)"),vno=l(),Ts=a("li"),eae=a("strong"),Fno=o("retribert"),Tno=o(" \u2014 "),PP=a("a"),Mno=o("RetriBertTokenizer"),Eno=o(" or "),BP=a("a"),Cno=o("RetriBertTokenizerFast"),wno=o(" (RetriBERT model)"),Ano=l(),Ms=a("li"),oae=a("strong"),yno=o("roberta"),Lno=o(" \u2014 "),IP=a("a"),xno=o("RobertaTokenizer"),$no=o(" or "),qP=a("a"),kno=o("RobertaTokenizerFast"),Sno=o(" (RoBERTa model)"),Rno=l(),Es=a("li"),rae=a("strong"),Pno=o("roformer"),Bno=o(" \u2014 "),NP=a("a"),Ino=o("RoFormerTokenizer"),qno=o(" or "),jP=a("a"),Nno=o("RoFormerTokenizerFast"),jno=o(" (RoFormer model)"),Dno=l(),Vg=a("li"),tae=a("strong"),Gno=o("speech_to_text"),Ono=o(" \u2014 "),DP=a("a"),Vno=o("Speech2TextTokenizer"),Xno=o(" (Speech2Text model)"),zno=l(),Xg=a("li"),aae=a("strong"),Wno=o("speech_to_text_2"),Qno=o(" \u2014 "),GP=a("a"),Hno=o("Speech2Text2Tokenizer"),Uno=o(" (Speech2Text2 model)"),Jno=l(),Cs=a("li"),nae=a("strong"),Yno=o("splinter"),Kno=o(" \u2014 "),OP=a("a"),Zno=o("SplinterTokenizer"),eso=o(" or "),VP=a("a"),oso=o("SplinterTokenizerFast"),rso=o(" (Splinter model)"),tso=l(),ws=a("li"),sae=a("strong"),aso=o("squeezebert"),nso=o(" \u2014 "),XP=a("a"),sso=o("SqueezeBertTokenizer"),lso=o(" or "),zP=a("a"),iso=o("SqueezeBertTokenizerFast"),dso=o(" (SqueezeBERT model)"),cso=l(),As=a("li"),lae=a("strong"),fso=o("t5"),mso=o(" \u2014 "),WP=a("a"),gso=o("T5Tokenizer"),hso=o(" or "),QP=a("a"),pso=o("T5TokenizerFast"),_so=o(" (T5 model)"),uso=l(),zg=a("li"),iae=a("strong"),bso=o("tapas"),vso=o(" \u2014 "),HP=a("a"),Fso=o("TapasTokenizer"),Tso=o(" (TAPAS model)"),Mso=l(),Wg=a("li"),dae=a("strong"),Eso=o("tapex"),Cso=o(" \u2014 "),UP=a("a"),wso=o("TapexTokenizer"),Aso=o(" (TAPEX model)"),yso=l(),Qg=a("li"),cae=a("strong"),Lso=o("transfo-xl"),xso=o(" \u2014 "),JP=a("a"),$so=o("TransfoXLTokenizer"),kso=o(" (Transformer-XL model)"),Sso=l(),ys=a("li"),fae=a("strong"),Rso=o("visual_bert"),Pso=o(" \u2014 "),YP=a("a"),Bso=o("BertTokenizer"),Iso=o(" or "),KP=a("a"),qso=o("BertTokenizerFast"),Nso=o(" (VisualBert model)"),jso=l(),Hg=a("li"),mae=a("strong"),Dso=o("wav2vec2"),Gso=o(" \u2014 "),ZP=a("a"),Oso=o("Wav2Vec2CTCTokenizer"),Vso=o(" (Wav2Vec2 model)"),Xso=l(),Ug=a("li"),gae=a("strong"),zso=o("wav2vec2-conformer"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("Wav2Vec2CTCTokenizer"),Hso=o(" (Wav2Vec2-Conformer model)"),Uso=l(),Jg=a("li"),hae=a("strong"),Jso=o("wav2vec2_phoneme"),Yso=o(" \u2014 "),oB=a("a"),Kso=o("Wav2Vec2PhonemeCTCTokenizer"),Zso=o(" (Wav2Vec2Phoneme model)"),elo=l(),Ls=a("li"),pae=a("strong"),olo=o("xglm"),rlo=o(" \u2014 "),rB=a("a"),tlo=o("XGLMTokenizer"),alo=o(" or "),tB=a("a"),nlo=o("XGLMTokenizerFast"),slo=o(" (XGLM model)"),llo=l(),Yg=a("li"),_ae=a("strong"),ilo=o("xlm"),dlo=o(" \u2014 "),aB=a("a"),clo=o("XLMTokenizer"),flo=o(" (XLM model)"),mlo=l(),Kg=a("li"),uae=a("strong"),glo=o("xlm-prophetnet"),hlo=o(" \u2014 "),nB=a("a"),plo=o("XLMProphetNetTokenizer"),_lo=o(" (XLMProphetNet model)"),ulo=l(),xs=a("li"),bae=a("strong"),blo=o("xlm-roberta"),vlo=o(" \u2014 "),sB=a("a"),Flo=o("XLMRobertaTokenizer"),Tlo=o(" or "),lB=a("a"),Mlo=o("XLMRobertaTokenizerFast"),Elo=o(" (XLM-RoBERTa model)"),Clo=l(),$s=a("li"),vae=a("strong"),wlo=o("xlm-roberta-xl"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("RobertaTokenizer"),Llo=o(" or "),dB=a("a"),xlo=o("RobertaTokenizerFast"),$lo=o(" (XLM-RoBERTa-XL model)"),klo=l(),ks=a("li"),Fae=a("strong"),Slo=o("xlnet"),Rlo=o(" \u2014 "),cB=a("a"),Plo=o("XLNetTokenizer"),Blo=o(" or "),fB=a("a"),Ilo=o("XLNetTokenizerFast"),qlo=o(" (XLNet model)"),Nlo=l(),Ss=a("li"),Tae=a("strong"),jlo=o("yoso"),Dlo=o(" \u2014 "),mB=a("a"),Glo=o("AlbertTokenizer"),Olo=o(" or "),gB=a("a"),Vlo=o("AlbertTokenizerFast"),Xlo=o(" (YOSO model)"),zlo=l(),F(Zg.$$.fragment),Wlo=l(),eh=a("div"),F(wy.$$.fragment),Qlo=l(),Mae=a("p"),Hlo=o("Register a new tokenizer in this mapping."),eqe=l(),Ti=a("h2"),oh=a("a"),Eae=a("span"),F(Ay.$$.fragment),Ulo=l(),Cae=a("span"),Jlo=o("AutoFeatureExtractor"),oqe=l(),Ao=a("div"),F(yy.$$.fragment),Ylo=l(),Ly=a("p"),Klo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hB=a("a"),Zlo=o("AutoFeatureExtractor.from_pretrained()"),eio=o(" class method."),oio=l(),xy=a("p"),rio=o("This class cannot be instantiated directly using "),wae=a("code"),tio=o("__init__()"),aio=o(" (throws an error)."),nio=l(),He=a("div"),F($y.$$.fragment),sio=l(),Aae=a("p"),lio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),iio=l(),ya=a("p"),dio=o("The feature extractor class to instantiate is selected based on the "),yae=a("code"),cio=o("model_type"),fio=o(` property of the config object
(either passed as an argument or loaded from `),Lae=a("code"),mio=o("pretrained_model_name_or_path"),gio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xae=a("code"),hio=o("pretrained_model_name_or_path"),pio=o(":"),_io=l(),Z=a("ul"),rh=a("li"),$ae=a("strong"),uio=o("beit"),bio=o(" \u2014 "),pB=a("a"),vio=o("BeitFeatureExtractor"),Fio=o(" (BEiT model)"),Tio=l(),th=a("li"),kae=a("strong"),Mio=o("clip"),Eio=o(" \u2014 "),_B=a("a"),Cio=o("CLIPFeatureExtractor"),wio=o(" (CLIP model)"),Aio=l(),ah=a("li"),Sae=a("strong"),yio=o("convnext"),Lio=o(" \u2014 "),uB=a("a"),xio=o("ConvNextFeatureExtractor"),$io=o(" (ConvNext model)"),kio=l(),nh=a("li"),Rae=a("strong"),Sio=o("data2vec-audio"),Rio=o(" \u2014 "),bB=a("a"),Pio=o("Wav2Vec2FeatureExtractor"),Bio=o(" (Data2VecAudio model)"),Iio=l(),sh=a("li"),Pae=a("strong"),qio=o("data2vec-vision"),Nio=o(" \u2014 "),vB=a("a"),jio=o("BeitFeatureExtractor"),Dio=o(" (Data2VecVision model)"),Gio=l(),lh=a("li"),Bae=a("strong"),Oio=o("deit"),Vio=o(" \u2014 "),FB=a("a"),Xio=o("DeiTFeatureExtractor"),zio=o(" (DeiT model)"),Wio=l(),ih=a("li"),Iae=a("strong"),Qio=o("detr"),Hio=o(" \u2014 "),TB=a("a"),Uio=o("DetrFeatureExtractor"),Jio=o(" (DETR model)"),Yio=l(),dh=a("li"),qae=a("strong"),Kio=o("dpt"),Zio=o(" \u2014 "),MB=a("a"),edo=o("DPTFeatureExtractor"),odo=o(" (DPT model)"),rdo=l(),ch=a("li"),Nae=a("strong"),tdo=o("flava"),ado=o(" \u2014 "),EB=a("a"),ndo=o("FlavaFeatureExtractor"),sdo=o(" (Flava model)"),ldo=l(),fh=a("li"),jae=a("strong"),ido=o("glpn"),ddo=o(" \u2014 "),CB=a("a"),cdo=o("GLPNFeatureExtractor"),fdo=o(" (GLPN model)"),mdo=l(),mh=a("li"),Dae=a("strong"),gdo=o("hubert"),hdo=o(" \u2014 "),wB=a("a"),pdo=o("Wav2Vec2FeatureExtractor"),_do=o(" (Hubert model)"),udo=l(),gh=a("li"),Gae=a("strong"),bdo=o("layoutlmv2"),vdo=o(" \u2014 "),AB=a("a"),Fdo=o("LayoutLMv2FeatureExtractor"),Tdo=o(" (LayoutLMv2 model)"),Mdo=l(),hh=a("li"),Oae=a("strong"),Edo=o("maskformer"),Cdo=o(" \u2014 "),yB=a("a"),wdo=o("MaskFormerFeatureExtractor"),Ado=o(" (MaskFormer model)"),ydo=l(),ph=a("li"),Vae=a("strong"),Ldo=o("perceiver"),xdo=o(" \u2014 "),LB=a("a"),$do=o("PerceiverFeatureExtractor"),kdo=o(" (Perceiver model)"),Sdo=l(),_h=a("li"),Xae=a("strong"),Rdo=o("poolformer"),Pdo=o(" \u2014 "),xB=a("a"),Bdo=o("PoolFormerFeatureExtractor"),Ido=o(" (PoolFormer model)"),qdo=l(),uh=a("li"),zae=a("strong"),Ndo=o("regnet"),jdo=o(" \u2014 "),$B=a("a"),Ddo=o("ConvNextFeatureExtractor"),Gdo=o(" (RegNet model)"),Odo=l(),bh=a("li"),Wae=a("strong"),Vdo=o("resnet"),Xdo=o(" \u2014 "),kB=a("a"),zdo=o("ConvNextFeatureExtractor"),Wdo=o(" (ResNet model)"),Qdo=l(),vh=a("li"),Qae=a("strong"),Hdo=o("segformer"),Udo=o(" \u2014 "),SB=a("a"),Jdo=o("SegformerFeatureExtractor"),Ydo=o(" (SegFormer model)"),Kdo=l(),Fh=a("li"),Hae=a("strong"),Zdo=o("speech_to_text"),eco=o(" \u2014 "),RB=a("a"),oco=o("Speech2TextFeatureExtractor"),rco=o(" (Speech2Text model)"),tco=l(),Th=a("li"),Uae=a("strong"),aco=o("swin"),nco=o(" \u2014 "),PB=a("a"),sco=o("ViTFeatureExtractor"),lco=o(" (Swin model)"),ico=l(),Mh=a("li"),Jae=a("strong"),dco=o("van"),cco=o(" \u2014 "),BB=a("a"),fco=o("ConvNextFeatureExtractor"),mco=o(" (VAN model)"),gco=l(),Eh=a("li"),Yae=a("strong"),hco=o("vit"),pco=o(" \u2014 "),IB=a("a"),_co=o("ViTFeatureExtractor"),uco=o(" (ViT model)"),bco=l(),Ch=a("li"),Kae=a("strong"),vco=o("vit_mae"),Fco=o(" \u2014 "),qB=a("a"),Tco=o("ViTFeatureExtractor"),Mco=o(" (ViTMAE model)"),Eco=l(),wh=a("li"),Zae=a("strong"),Cco=o("wav2vec2"),wco=o(" \u2014 "),NB=a("a"),Aco=o("Wav2Vec2FeatureExtractor"),yco=o(" (Wav2Vec2 model)"),Lco=l(),Ah=a("li"),ene=a("strong"),xco=o("wav2vec2-conformer"),$co=o(" \u2014 "),jB=a("a"),kco=o("Wav2Vec2FeatureExtractor"),Sco=o(" (Wav2Vec2-Conformer model)"),Rco=l(),yh=a("li"),one=a("strong"),Pco=o("yolos"),Bco=o(" \u2014 "),DB=a("a"),Ico=o("YolosFeatureExtractor"),qco=o(" (YOLOS model)"),Nco=l(),F(Lh.$$.fragment),jco=l(),F(xh.$$.fragment),Dco=l(),$h=a("div"),F(ky.$$.fragment),Gco=l(),rne=a("p"),Oco=o("Register a new feature extractor for this class."),rqe=l(),Mi=a("h2"),kh=a("a"),tne=a("span"),F(Sy.$$.fragment),Vco=l(),ane=a("span"),Xco=o("AutoProcessor"),tqe=l(),yo=a("div"),F(Ry.$$.fragment),zco=l(),Py=a("p"),Wco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=a("a"),Qco=o("AutoProcessor.from_pretrained()"),Hco=o(" class method."),Uco=l(),By=a("p"),Jco=o("This class cannot be instantiated directly using "),nne=a("code"),Yco=o("__init__()"),Kco=o(" (throws an error)."),Zco=l(),Ue=a("div"),F(Iy.$$.fragment),efo=l(),sne=a("p"),ofo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rfo=l(),Ei=a("p"),tfo=o("The processor class to instantiate is selected based on the "),lne=a("code"),afo=o("model_type"),nfo=o(` property of the config object (either
passed as an argument or loaded from `),ine=a("code"),sfo=o("pretrained_model_name_or_path"),lfo=o(" if possible):"),ifo=l(),pe=a("ul"),Sh=a("li"),dne=a("strong"),dfo=o("clip"),cfo=o(" \u2014 "),OB=a("a"),ffo=o("CLIPProcessor"),mfo=o(" (CLIP model)"),gfo=l(),Rh=a("li"),cne=a("strong"),hfo=o("flava"),pfo=o(" \u2014 "),fne=a("code"),_fo=o("FLAVAProcessor"),ufo=o(" (Flava model)"),bfo=l(),Ph=a("li"),mne=a("strong"),vfo=o("layoutlmv2"),Ffo=o(" \u2014 "),VB=a("a"),Tfo=o("LayoutLMv2Processor"),Mfo=o(" (LayoutLMv2 model)"),Efo=l(),Bh=a("li"),gne=a("strong"),Cfo=o("layoutxlm"),wfo=o(" \u2014 "),XB=a("a"),Afo=o("LayoutXLMProcessor"),yfo=o(" (LayoutXLM model)"),Lfo=l(),Ih=a("li"),hne=a("strong"),xfo=o("sew"),$fo=o(" \u2014 "),zB=a("a"),kfo=o("Wav2Vec2Processor"),Sfo=o(" (SEW model)"),Rfo=l(),qh=a("li"),pne=a("strong"),Pfo=o("sew-d"),Bfo=o(" \u2014 "),WB=a("a"),Ifo=o("Wav2Vec2Processor"),qfo=o(" (SEW-D model)"),Nfo=l(),Nh=a("li"),_ne=a("strong"),jfo=o("speech_to_text"),Dfo=o(" \u2014 "),QB=a("a"),Gfo=o("Speech2TextProcessor"),Ofo=o(" (Speech2Text model)"),Vfo=l(),jh=a("li"),une=a("strong"),Xfo=o("speech_to_text_2"),zfo=o(" \u2014 "),HB=a("a"),Wfo=o("Speech2Text2Processor"),Qfo=o(" (Speech2Text2 model)"),Hfo=l(),Dh=a("li"),bne=a("strong"),Ufo=o("trocr"),Jfo=o(" \u2014 "),UB=a("a"),Yfo=o("TrOCRProcessor"),Kfo=o(" (TrOCR model)"),Zfo=l(),Gh=a("li"),vne=a("strong"),emo=o("unispeech"),omo=o(" \u2014 "),JB=a("a"),rmo=o("Wav2Vec2Processor"),tmo=o(" (UniSpeech model)"),amo=l(),Oh=a("li"),Fne=a("strong"),nmo=o("unispeech-sat"),smo=o(" \u2014 "),YB=a("a"),lmo=o("Wav2Vec2Processor"),imo=o(" (UniSpeechSat model)"),dmo=l(),Vh=a("li"),Tne=a("strong"),cmo=o("vilt"),fmo=o(" \u2014 "),KB=a("a"),mmo=o("ViltProcessor"),gmo=o(" (ViLT model)"),hmo=l(),Xh=a("li"),Mne=a("strong"),pmo=o("vision-text-dual-encoder"),_mo=o(" \u2014 "),ZB=a("a"),umo=o("VisionTextDualEncoderProcessor"),bmo=o(" (VisionTextDualEncoder model)"),vmo=l(),zh=a("li"),Ene=a("strong"),Fmo=o("wav2vec2"),Tmo=o(" \u2014 "),eI=a("a"),Mmo=o("Wav2Vec2Processor"),Emo=o(" (Wav2Vec2 model)"),Cmo=l(),Wh=a("li"),Cne=a("strong"),wmo=o("wav2vec2-conformer"),Amo=o(" \u2014 "),oI=a("a"),ymo=o("Wav2Vec2Processor"),Lmo=o(" (Wav2Vec2-Conformer model)"),xmo=l(),Qh=a("li"),wne=a("strong"),$mo=o("wavlm"),kmo=o(" \u2014 "),rI=a("a"),Smo=o("Wav2Vec2Processor"),Rmo=o(" (WavLM model)"),Pmo=l(),F(Hh.$$.fragment),Bmo=l(),F(Uh.$$.fragment),Imo=l(),Jh=a("div"),F(qy.$$.fragment),qmo=l(),Ane=a("p"),Nmo=o("Register a new processor for this class."),aqe=l(),Ci=a("h2"),Yh=a("a"),yne=a("span"),F(Ny.$$.fragment),jmo=l(),Lne=a("span"),Dmo=o("AutoModel"),nqe=l(),Lo=a("div"),F(jy.$$.fragment),Gmo=l(),wi=a("p"),Omo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=a("a"),Vmo=o("from_pretrained()"),Xmo=o(" class method or the "),aI=a("a"),zmo=o("from_config()"),Wmo=o(` class
method.`),Qmo=l(),Dy=a("p"),Hmo=o("This class cannot be instantiated directly using "),xne=a("code"),Umo=o("__init__()"),Jmo=o(" (throws an error)."),Ymo=l(),tt=a("div"),F(Gy.$$.fragment),Kmo=l(),$ne=a("p"),Zmo=o("Instantiates one of the base model classes of the library from a configuration."),ego=l(),Ai=a("p"),ogo=o(`Note:
Loading a model from its configuration file does `),kne=a("strong"),rgo=o("not"),tgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=a("a"),ago=o("from_pretrained()"),ngo=o(" to load the model weights."),sgo=l(),F(Kh.$$.fragment),lgo=l(),Je=a("div"),F(Oy.$$.fragment),igo=l(),Sne=a("p"),dgo=o("Instantiate one of the base model classes of the library from a pretrained model."),cgo=l(),La=a("p"),fgo=o("The model class to instantiate is selected based on the "),Rne=a("code"),mgo=o("model_type"),ggo=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),hgo=o("pretrained_model_name_or_path"),pgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),_go=o("pretrained_model_name_or_path"),ugo=o(":"),bgo=l(),x=a("ul"),Zh=a("li"),Ine=a("strong"),vgo=o("albert"),Fgo=o(" \u2014 "),sI=a("a"),Tgo=o("AlbertModel"),Mgo=o(" (ALBERT model)"),Ego=l(),ep=a("li"),qne=a("strong"),Cgo=o("bart"),wgo=o(" \u2014 "),lI=a("a"),Ago=o("BartModel"),ygo=o(" (BART model)"),Lgo=l(),op=a("li"),Nne=a("strong"),xgo=o("beit"),$go=o(" \u2014 "),iI=a("a"),kgo=o("BeitModel"),Sgo=o(" (BEiT model)"),Rgo=l(),rp=a("li"),jne=a("strong"),Pgo=o("bert"),Bgo=o(" \u2014 "),dI=a("a"),Igo=o("BertModel"),qgo=o(" (BERT model)"),Ngo=l(),tp=a("li"),Dne=a("strong"),jgo=o("bert-generation"),Dgo=o(" \u2014 "),cI=a("a"),Ggo=o("BertGenerationEncoder"),Ogo=o(" (Bert Generation model)"),Vgo=l(),ap=a("li"),Gne=a("strong"),Xgo=o("big_bird"),zgo=o(" \u2014 "),fI=a("a"),Wgo=o("BigBirdModel"),Qgo=o(" (BigBird model)"),Hgo=l(),np=a("li"),One=a("strong"),Ugo=o("bigbird_pegasus"),Jgo=o(" \u2014 "),mI=a("a"),Ygo=o("BigBirdPegasusModel"),Kgo=o(" (BigBirdPegasus model)"),Zgo=l(),sp=a("li"),Vne=a("strong"),eho=o("blenderbot"),oho=o(" \u2014 "),gI=a("a"),rho=o("BlenderbotModel"),tho=o(" (Blenderbot model)"),aho=l(),lp=a("li"),Xne=a("strong"),nho=o("blenderbot-small"),sho=o(" \u2014 "),hI=a("a"),lho=o("BlenderbotSmallModel"),iho=o(" (BlenderbotSmall model)"),dho=l(),ip=a("li"),zne=a("strong"),cho=o("camembert"),fho=o(" \u2014 "),pI=a("a"),mho=o("CamembertModel"),gho=o(" (CamemBERT model)"),hho=l(),dp=a("li"),Wne=a("strong"),pho=o("canine"),_ho=o(" \u2014 "),_I=a("a"),uho=o("CanineModel"),bho=o(" (Canine model)"),vho=l(),cp=a("li"),Qne=a("strong"),Fho=o("clip"),Tho=o(" \u2014 "),uI=a("a"),Mho=o("CLIPModel"),Eho=o(" (CLIP model)"),Cho=l(),fp=a("li"),Hne=a("strong"),who=o("convbert"),Aho=o(" \u2014 "),bI=a("a"),yho=o("ConvBertModel"),Lho=o(" (ConvBERT model)"),xho=l(),mp=a("li"),Une=a("strong"),$ho=o("convnext"),kho=o(" \u2014 "),vI=a("a"),Sho=o("ConvNextModel"),Rho=o(" (ConvNext model)"),Pho=l(),gp=a("li"),Jne=a("strong"),Bho=o("ctrl"),Iho=o(" \u2014 "),FI=a("a"),qho=o("CTRLModel"),Nho=o(" (CTRL model)"),jho=l(),hp=a("li"),Yne=a("strong"),Dho=o("data2vec-audio"),Gho=o(" \u2014 "),TI=a("a"),Oho=o("Data2VecAudioModel"),Vho=o(" (Data2VecAudio model)"),Xho=l(),pp=a("li"),Kne=a("strong"),zho=o("data2vec-text"),Who=o(" \u2014 "),MI=a("a"),Qho=o("Data2VecTextModel"),Hho=o(" (Data2VecText model)"),Uho=l(),_p=a("li"),Zne=a("strong"),Jho=o("data2vec-vision"),Yho=o(" \u2014 "),EI=a("a"),Kho=o("Data2VecVisionModel"),Zho=o(" (Data2VecVision model)"),epo=l(),up=a("li"),ese=a("strong"),opo=o("deberta"),rpo=o(" \u2014 "),CI=a("a"),tpo=o("DebertaModel"),apo=o(" (DeBERTa model)"),npo=l(),bp=a("li"),ose=a("strong"),spo=o("deberta-v2"),lpo=o(" \u2014 "),wI=a("a"),ipo=o("DebertaV2Model"),dpo=o(" (DeBERTa-v2 model)"),cpo=l(),vp=a("li"),rse=a("strong"),fpo=o("decision_transformer"),mpo=o(" \u2014 "),AI=a("a"),gpo=o("DecisionTransformerModel"),hpo=o(" (Decision Transformer model)"),ppo=l(),Fp=a("li"),tse=a("strong"),_po=o("deit"),upo=o(" \u2014 "),yI=a("a"),bpo=o("DeiTModel"),vpo=o(" (DeiT model)"),Fpo=l(),Tp=a("li"),ase=a("strong"),Tpo=o("detr"),Mpo=o(" \u2014 "),LI=a("a"),Epo=o("DetrModel"),Cpo=o(" (DETR model)"),wpo=l(),Mp=a("li"),nse=a("strong"),Apo=o("distilbert"),ypo=o(" \u2014 "),xI=a("a"),Lpo=o("DistilBertModel"),xpo=o(" (DistilBERT model)"),$po=l(),Ep=a("li"),sse=a("strong"),kpo=o("dpr"),Spo=o(" \u2014 "),$I=a("a"),Rpo=o("DPRQuestionEncoder"),Ppo=o(" (DPR model)"),Bpo=l(),Cp=a("li"),lse=a("strong"),Ipo=o("dpt"),qpo=o(" \u2014 "),kI=a("a"),Npo=o("DPTModel"),jpo=o(" (DPT model)"),Dpo=l(),wp=a("li"),ise=a("strong"),Gpo=o("electra"),Opo=o(" \u2014 "),SI=a("a"),Vpo=o("ElectraModel"),Xpo=o(" (ELECTRA model)"),zpo=l(),Ap=a("li"),dse=a("strong"),Wpo=o("flaubert"),Qpo=o(" \u2014 "),RI=a("a"),Hpo=o("FlaubertModel"),Upo=o(" (FlauBERT model)"),Jpo=l(),yp=a("li"),cse=a("strong"),Ypo=o("flava"),Kpo=o(" \u2014 "),PI=a("a"),Zpo=o("FlavaModel"),e_o=o(" (Flava model)"),o_o=l(),Lp=a("li"),fse=a("strong"),r_o=o("fnet"),t_o=o(" \u2014 "),BI=a("a"),a_o=o("FNetModel"),n_o=o(" (FNet model)"),s_o=l(),xp=a("li"),mse=a("strong"),l_o=o("fsmt"),i_o=o(" \u2014 "),II=a("a"),d_o=o("FSMTModel"),c_o=o(" (FairSeq Machine-Translation model)"),f_o=l(),Rs=a("li"),gse=a("strong"),m_o=o("funnel"),g_o=o(" \u2014 "),qI=a("a"),h_o=o("FunnelModel"),p_o=o(" or "),NI=a("a"),__o=o("FunnelBaseModel"),u_o=o(" (Funnel Transformer model)"),b_o=l(),$p=a("li"),hse=a("strong"),v_o=o("glpn"),F_o=o(" \u2014 "),jI=a("a"),T_o=o("GLPNModel"),M_o=o(" (GLPN model)"),E_o=l(),kp=a("li"),pse=a("strong"),C_o=o("gpt2"),w_o=o(" \u2014 "),DI=a("a"),A_o=o("GPT2Model"),y_o=o(" (OpenAI GPT-2 model)"),L_o=l(),Sp=a("li"),_se=a("strong"),x_o=o("gpt_neo"),$_o=o(" \u2014 "),GI=a("a"),k_o=o("GPTNeoModel"),S_o=o(" (GPT Neo model)"),R_o=l(),Rp=a("li"),use=a("strong"),P_o=o("gptj"),B_o=o(" \u2014 "),OI=a("a"),I_o=o("GPTJModel"),q_o=o(" (GPT-J model)"),N_o=l(),Pp=a("li"),bse=a("strong"),j_o=o("hubert"),D_o=o(" \u2014 "),VI=a("a"),G_o=o("HubertModel"),O_o=o(" (Hubert model)"),V_o=l(),Bp=a("li"),vse=a("strong"),X_o=o("ibert"),z_o=o(" \u2014 "),XI=a("a"),W_o=o("IBertModel"),Q_o=o(" (I-BERT model)"),H_o=l(),Ip=a("li"),Fse=a("strong"),U_o=o("imagegpt"),J_o=o(" \u2014 "),zI=a("a"),Y_o=o("ImageGPTModel"),K_o=o(" (ImageGPT model)"),Z_o=l(),qp=a("li"),Tse=a("strong"),euo=o("layoutlm"),ouo=o(" \u2014 "),WI=a("a"),ruo=o("LayoutLMModel"),tuo=o(" (LayoutLM model)"),auo=l(),Np=a("li"),Mse=a("strong"),nuo=o("layoutlmv2"),suo=o(" \u2014 "),QI=a("a"),luo=o("LayoutLMv2Model"),iuo=o(" (LayoutLMv2 model)"),duo=l(),jp=a("li"),Ese=a("strong"),cuo=o("led"),fuo=o(" \u2014 "),HI=a("a"),muo=o("LEDModel"),guo=o(" (LED model)"),huo=l(),Dp=a("li"),Cse=a("strong"),puo=o("longformer"),_uo=o(" \u2014 "),UI=a("a"),uuo=o("LongformerModel"),buo=o(" (Longformer model)"),vuo=l(),Gp=a("li"),wse=a("strong"),Fuo=o("luke"),Tuo=o(" \u2014 "),JI=a("a"),Muo=o("LukeModel"),Euo=o(" (LUKE model)"),Cuo=l(),Op=a("li"),Ase=a("strong"),wuo=o("lxmert"),Auo=o(" \u2014 "),YI=a("a"),yuo=o("LxmertModel"),Luo=o(" (LXMERT model)"),xuo=l(),Vp=a("li"),yse=a("strong"),$uo=o("m2m_100"),kuo=o(" \u2014 "),KI=a("a"),Suo=o("M2M100Model"),Ruo=o(" (M2M100 model)"),Puo=l(),Xp=a("li"),Lse=a("strong"),Buo=o("marian"),Iuo=o(" \u2014 "),ZI=a("a"),quo=o("MarianModel"),Nuo=o(" (Marian model)"),juo=l(),zp=a("li"),xse=a("strong"),Duo=o("maskformer"),Guo=o(" \u2014 "),eq=a("a"),Ouo=o("MaskFormerModel"),Vuo=o(" (MaskFormer model)"),Xuo=l(),Wp=a("li"),$se=a("strong"),zuo=o("mbart"),Wuo=o(" \u2014 "),oq=a("a"),Quo=o("MBartModel"),Huo=o(" (mBART model)"),Uuo=l(),Qp=a("li"),kse=a("strong"),Juo=o("megatron-bert"),Yuo=o(" \u2014 "),rq=a("a"),Kuo=o("MegatronBertModel"),Zuo=o(" (MegatronBert model)"),e1o=l(),Hp=a("li"),Sse=a("strong"),o1o=o("mobilebert"),r1o=o(" \u2014 "),tq=a("a"),t1o=o("MobileBertModel"),a1o=o(" (MobileBERT model)"),n1o=l(),Up=a("li"),Rse=a("strong"),s1o=o("mpnet"),l1o=o(" \u2014 "),aq=a("a"),i1o=o("MPNetModel"),d1o=o(" (MPNet model)"),c1o=l(),Jp=a("li"),Pse=a("strong"),f1o=o("mt5"),m1o=o(" \u2014 "),nq=a("a"),g1o=o("MT5Model"),h1o=o(" (mT5 model)"),p1o=l(),Yp=a("li"),Bse=a("strong"),_1o=o("nystromformer"),u1o=o(" \u2014 "),sq=a("a"),b1o=o("NystromformerModel"),v1o=o(" (Nystromformer model)"),F1o=l(),Kp=a("li"),Ise=a("strong"),T1o=o("openai-gpt"),M1o=o(" \u2014 "),lq=a("a"),E1o=o("OpenAIGPTModel"),C1o=o(" (OpenAI GPT model)"),w1o=l(),Zp=a("li"),qse=a("strong"),A1o=o("opt"),y1o=o(" \u2014 "),iq=a("a"),L1o=o("OPTModel"),x1o=o(" (OPT model)"),$1o=l(),e_=a("li"),Nse=a("strong"),k1o=o("pegasus"),S1o=o(" \u2014 "),dq=a("a"),R1o=o("PegasusModel"),P1o=o(" (Pegasus model)"),B1o=l(),o_=a("li"),jse=a("strong"),I1o=o("perceiver"),q1o=o(" \u2014 "),cq=a("a"),N1o=o("PerceiverModel"),j1o=o(" (Perceiver model)"),D1o=l(),r_=a("li"),Dse=a("strong"),G1o=o("plbart"),O1o=o(" \u2014 "),fq=a("a"),V1o=o("PLBartModel"),X1o=o(" (PLBart model)"),z1o=l(),t_=a("li"),Gse=a("strong"),W1o=o("poolformer"),Q1o=o(" \u2014 "),mq=a("a"),H1o=o("PoolFormerModel"),U1o=o(" (PoolFormer model)"),J1o=l(),a_=a("li"),Ose=a("strong"),Y1o=o("prophetnet"),K1o=o(" \u2014 "),gq=a("a"),Z1o=o("ProphetNetModel"),ebo=o(" (ProphetNet model)"),obo=l(),n_=a("li"),Vse=a("strong"),rbo=o("qdqbert"),tbo=o(" \u2014 "),hq=a("a"),abo=o("QDQBertModel"),nbo=o(" (QDQBert model)"),sbo=l(),s_=a("li"),Xse=a("strong"),lbo=o("reformer"),ibo=o(" \u2014 "),pq=a("a"),dbo=o("ReformerModel"),cbo=o(" (Reformer model)"),fbo=l(),l_=a("li"),zse=a("strong"),mbo=o("regnet"),gbo=o(" \u2014 "),_q=a("a"),hbo=o("RegNetModel"),pbo=o(" (RegNet model)"),_bo=l(),i_=a("li"),Wse=a("strong"),ubo=o("rembert"),bbo=o(" \u2014 "),uq=a("a"),vbo=o("RemBertModel"),Fbo=o(" (RemBERT model)"),Tbo=l(),d_=a("li"),Qse=a("strong"),Mbo=o("resnet"),Ebo=o(" \u2014 "),bq=a("a"),Cbo=o("ResNetModel"),wbo=o(" (ResNet model)"),Abo=l(),c_=a("li"),Hse=a("strong"),ybo=o("retribert"),Lbo=o(" \u2014 "),vq=a("a"),xbo=o("RetriBertModel"),$bo=o(" (RetriBERT model)"),kbo=l(),f_=a("li"),Use=a("strong"),Sbo=o("roberta"),Rbo=o(" \u2014 "),Fq=a("a"),Pbo=o("RobertaModel"),Bbo=o(" (RoBERTa model)"),Ibo=l(),m_=a("li"),Jse=a("strong"),qbo=o("roformer"),Nbo=o(" \u2014 "),Tq=a("a"),jbo=o("RoFormerModel"),Dbo=o(" (RoFormer model)"),Gbo=l(),g_=a("li"),Yse=a("strong"),Obo=o("segformer"),Vbo=o(" \u2014 "),Mq=a("a"),Xbo=o("SegformerModel"),zbo=o(" (SegFormer model)"),Wbo=l(),h_=a("li"),Kse=a("strong"),Qbo=o("sew"),Hbo=o(" \u2014 "),Eq=a("a"),Ubo=o("SEWModel"),Jbo=o(" (SEW model)"),Ybo=l(),p_=a("li"),Zse=a("strong"),Kbo=o("sew-d"),Zbo=o(" \u2014 "),Cq=a("a"),e2o=o("SEWDModel"),o2o=o(" (SEW-D model)"),r2o=l(),__=a("li"),ele=a("strong"),t2o=o("speech_to_text"),a2o=o(" \u2014 "),wq=a("a"),n2o=o("Speech2TextModel"),s2o=o(" (Speech2Text model)"),l2o=l(),u_=a("li"),ole=a("strong"),i2o=o("splinter"),d2o=o(" \u2014 "),Aq=a("a"),c2o=o("SplinterModel"),f2o=o(" (Splinter model)"),m2o=l(),b_=a("li"),rle=a("strong"),g2o=o("squeezebert"),h2o=o(" \u2014 "),yq=a("a"),p2o=o("SqueezeBertModel"),_2o=o(" (SqueezeBERT model)"),u2o=l(),v_=a("li"),tle=a("strong"),b2o=o("swin"),v2o=o(" \u2014 "),Lq=a("a"),F2o=o("SwinModel"),T2o=o(" (Swin model)"),M2o=l(),F_=a("li"),ale=a("strong"),E2o=o("t5"),C2o=o(" \u2014 "),xq=a("a"),w2o=o("T5Model"),A2o=o(" (T5 model)"),y2o=l(),T_=a("li"),nle=a("strong"),L2o=o("tapas"),x2o=o(" \u2014 "),$q=a("a"),$2o=o("TapasModel"),k2o=o(" (TAPAS model)"),S2o=l(),M_=a("li"),sle=a("strong"),R2o=o("trajectory_transformer"),P2o=o(" \u2014 "),kq=a("a"),B2o=o("TrajectoryTransformerModel"),I2o=o(" (Trajectory Transformer model)"),q2o=l(),E_=a("li"),lle=a("strong"),N2o=o("transfo-xl"),j2o=o(" \u2014 "),Sq=a("a"),D2o=o("TransfoXLModel"),G2o=o(" (Transformer-XL model)"),O2o=l(),C_=a("li"),ile=a("strong"),V2o=o("unispeech"),X2o=o(" \u2014 "),Rq=a("a"),z2o=o("UniSpeechModel"),W2o=o(" (UniSpeech model)"),Q2o=l(),w_=a("li"),dle=a("strong"),H2o=o("unispeech-sat"),U2o=o(" \u2014 "),Pq=a("a"),J2o=o("UniSpeechSatModel"),Y2o=o(" (UniSpeechSat model)"),K2o=l(),A_=a("li"),cle=a("strong"),Z2o=o("van"),e4o=o(" \u2014 "),Bq=a("a"),o4o=o("VanModel"),r4o=o(" (VAN model)"),t4o=l(),y_=a("li"),fle=a("strong"),a4o=o("vilt"),n4o=o(" \u2014 "),Iq=a("a"),s4o=o("ViltModel"),l4o=o(" (ViLT model)"),i4o=l(),L_=a("li"),mle=a("strong"),d4o=o("vision-text-dual-encoder"),c4o=o(" \u2014 "),qq=a("a"),f4o=o("VisionTextDualEncoderModel"),m4o=o(" (VisionTextDualEncoder model)"),g4o=l(),x_=a("li"),gle=a("strong"),h4o=o("visual_bert"),p4o=o(" \u2014 "),Nq=a("a"),_4o=o("VisualBertModel"),u4o=o(" (VisualBert model)"),b4o=l(),$_=a("li"),hle=a("strong"),v4o=o("vit"),F4o=o(" \u2014 "),jq=a("a"),T4o=o("ViTModel"),M4o=o(" (ViT model)"),E4o=l(),k_=a("li"),ple=a("strong"),C4o=o("vit_mae"),w4o=o(" \u2014 "),Dq=a("a"),A4o=o("ViTMAEModel"),y4o=o(" (ViTMAE model)"),L4o=l(),S_=a("li"),_le=a("strong"),x4o=o("wav2vec2"),$4o=o(" \u2014 "),Gq=a("a"),k4o=o("Wav2Vec2Model"),S4o=o(" (Wav2Vec2 model)"),R4o=l(),R_=a("li"),ule=a("strong"),P4o=o("wav2vec2-conformer"),B4o=o(" \u2014 "),Oq=a("a"),I4o=o("Wav2Vec2ConformerModel"),q4o=o(" (Wav2Vec2-Conformer model)"),N4o=l(),P_=a("li"),ble=a("strong"),j4o=o("wavlm"),D4o=o(" \u2014 "),Vq=a("a"),G4o=o("WavLMModel"),O4o=o(" (WavLM model)"),V4o=l(),B_=a("li"),vle=a("strong"),X4o=o("xglm"),z4o=o(" \u2014 "),Xq=a("a"),W4o=o("XGLMModel"),Q4o=o(" (XGLM model)"),H4o=l(),I_=a("li"),Fle=a("strong"),U4o=o("xlm"),J4o=o(" \u2014 "),zq=a("a"),Y4o=o("XLMModel"),K4o=o(" (XLM model)"),Z4o=l(),q_=a("li"),Tle=a("strong"),e5o=o("xlm-prophetnet"),o5o=o(" \u2014 "),Wq=a("a"),r5o=o("XLMProphetNetModel"),t5o=o(" (XLMProphetNet model)"),a5o=l(),N_=a("li"),Mle=a("strong"),n5o=o("xlm-roberta"),s5o=o(" \u2014 "),Qq=a("a"),l5o=o("XLMRobertaModel"),i5o=o(" (XLM-RoBERTa model)"),d5o=l(),j_=a("li"),Ele=a("strong"),c5o=o("xlm-roberta-xl"),f5o=o(" \u2014 "),Hq=a("a"),m5o=o("XLMRobertaXLModel"),g5o=o(" (XLM-RoBERTa-XL model)"),h5o=l(),D_=a("li"),Cle=a("strong"),p5o=o("xlnet"),_5o=o(" \u2014 "),Uq=a("a"),u5o=o("XLNetModel"),b5o=o(" (XLNet model)"),v5o=l(),G_=a("li"),wle=a("strong"),F5o=o("yolos"),T5o=o(" \u2014 "),Jq=a("a"),M5o=o("YolosModel"),E5o=o(" (YOLOS model)"),C5o=l(),O_=a("li"),Ale=a("strong"),w5o=o("yoso"),A5o=o(" \u2014 "),Yq=a("a"),y5o=o("YosoModel"),L5o=o(" (YOSO model)"),x5o=l(),V_=a("p"),$5o=o("The model is set in evaluation mode by default using "),yle=a("code"),k5o=o("model.eval()"),S5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=a("code"),R5o=o("model.train()"),P5o=l(),F(X_.$$.fragment),sqe=l(),yi=a("h2"),z_=a("a"),xle=a("span"),F(Vy.$$.fragment),B5o=l(),$le=a("span"),I5o=o("AutoModelForPreTraining"),lqe=l(),xo=a("div"),F(Xy.$$.fragment),q5o=l(),Li=a("p"),N5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=a("a"),j5o=o("from_pretrained()"),D5o=o(" class method or the "),Zq=a("a"),G5o=o("from_config()"),O5o=o(` class
method.`),V5o=l(),zy=a("p"),X5o=o("This class cannot be instantiated directly using "),kle=a("code"),z5o=o("__init__()"),W5o=o(" (throws an error)."),Q5o=l(),at=a("div"),F(Wy.$$.fragment),H5o=l(),Sle=a("p"),U5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J5o=l(),xi=a("p"),Y5o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),K5o=o("not"),Z5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=a("a"),evo=o("from_pretrained()"),ovo=o(" to load the model weights."),rvo=l(),F(W_.$$.fragment),tvo=l(),Ye=a("div"),F(Qy.$$.fragment),avo=l(),Ple=a("p"),nvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),svo=l(),xa=a("p"),lvo=o("The model class to instantiate is selected based on the "),Ble=a("code"),ivo=o("model_type"),dvo=o(` property of the config object (either
passed as an argument or loaded from `),Ile=a("code"),cvo=o("pretrained_model_name_or_path"),fvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=a("code"),mvo=o("pretrained_model_name_or_path"),gvo=o(":"),hvo=l(),G=a("ul"),Q_=a("li"),Nle=a("strong"),pvo=o("albert"),_vo=o(" \u2014 "),oN=a("a"),uvo=o("AlbertForPreTraining"),bvo=o(" (ALBERT model)"),vvo=l(),H_=a("li"),jle=a("strong"),Fvo=o("bart"),Tvo=o(" \u2014 "),rN=a("a"),Mvo=o("BartForConditionalGeneration"),Evo=o(" (BART model)"),Cvo=l(),U_=a("li"),Dle=a("strong"),wvo=o("bert"),Avo=o(" \u2014 "),tN=a("a"),yvo=o("BertForPreTraining"),Lvo=o(" (BERT model)"),xvo=l(),J_=a("li"),Gle=a("strong"),$vo=o("big_bird"),kvo=o(" \u2014 "),aN=a("a"),Svo=o("BigBirdForPreTraining"),Rvo=o(" (BigBird model)"),Pvo=l(),Y_=a("li"),Ole=a("strong"),Bvo=o("camembert"),Ivo=o(" \u2014 "),nN=a("a"),qvo=o("CamembertForMaskedLM"),Nvo=o(" (CamemBERT model)"),jvo=l(),K_=a("li"),Vle=a("strong"),Dvo=o("ctrl"),Gvo=o(" \u2014 "),sN=a("a"),Ovo=o("CTRLLMHeadModel"),Vvo=o(" (CTRL model)"),Xvo=l(),Z_=a("li"),Xle=a("strong"),zvo=o("data2vec-text"),Wvo=o(" \u2014 "),lN=a("a"),Qvo=o("Data2VecTextForMaskedLM"),Hvo=o(" (Data2VecText model)"),Uvo=l(),eu=a("li"),zle=a("strong"),Jvo=o("deberta"),Yvo=o(" \u2014 "),iN=a("a"),Kvo=o("DebertaForMaskedLM"),Zvo=o(" (DeBERTa model)"),e3o=l(),ou=a("li"),Wle=a("strong"),o3o=o("deberta-v2"),r3o=o(" \u2014 "),dN=a("a"),t3o=o("DebertaV2ForMaskedLM"),a3o=o(" (DeBERTa-v2 model)"),n3o=l(),ru=a("li"),Qle=a("strong"),s3o=o("distilbert"),l3o=o(" \u2014 "),cN=a("a"),i3o=o("DistilBertForMaskedLM"),d3o=o(" (DistilBERT model)"),c3o=l(),tu=a("li"),Hle=a("strong"),f3o=o("electra"),m3o=o(" \u2014 "),fN=a("a"),g3o=o("ElectraForPreTraining"),h3o=o(" (ELECTRA model)"),p3o=l(),au=a("li"),Ule=a("strong"),_3o=o("flaubert"),u3o=o(" \u2014 "),mN=a("a"),b3o=o("FlaubertWithLMHeadModel"),v3o=o(" (FlauBERT model)"),F3o=l(),nu=a("li"),Jle=a("strong"),T3o=o("flava"),M3o=o(" \u2014 "),gN=a("a"),E3o=o("FlavaForPreTraining"),C3o=o(" (Flava model)"),w3o=l(),su=a("li"),Yle=a("strong"),A3o=o("fnet"),y3o=o(" \u2014 "),hN=a("a"),L3o=o("FNetForPreTraining"),x3o=o(" (FNet model)"),$3o=l(),lu=a("li"),Kle=a("strong"),k3o=o("fsmt"),S3o=o(" \u2014 "),pN=a("a"),R3o=o("FSMTForConditionalGeneration"),P3o=o(" (FairSeq Machine-Translation model)"),B3o=l(),iu=a("li"),Zle=a("strong"),I3o=o("funnel"),q3o=o(" \u2014 "),_N=a("a"),N3o=o("FunnelForPreTraining"),j3o=o(" (Funnel Transformer model)"),D3o=l(),du=a("li"),eie=a("strong"),G3o=o("gpt2"),O3o=o(" \u2014 "),uN=a("a"),V3o=o("GPT2LMHeadModel"),X3o=o(" (OpenAI GPT-2 model)"),z3o=l(),cu=a("li"),oie=a("strong"),W3o=o("ibert"),Q3o=o(" \u2014 "),bN=a("a"),H3o=o("IBertForMaskedLM"),U3o=o(" (I-BERT model)"),J3o=l(),fu=a("li"),rie=a("strong"),Y3o=o("layoutlm"),K3o=o(" \u2014 "),vN=a("a"),Z3o=o("LayoutLMForMaskedLM"),eFo=o(" (LayoutLM model)"),oFo=l(),mu=a("li"),tie=a("strong"),rFo=o("longformer"),tFo=o(" \u2014 "),FN=a("a"),aFo=o("LongformerForMaskedLM"),nFo=o(" (Longformer model)"),sFo=l(),gu=a("li"),aie=a("strong"),lFo=o("lxmert"),iFo=o(" \u2014 "),TN=a("a"),dFo=o("LxmertForPreTraining"),cFo=o(" (LXMERT model)"),fFo=l(),hu=a("li"),nie=a("strong"),mFo=o("megatron-bert"),gFo=o(" \u2014 "),MN=a("a"),hFo=o("MegatronBertForPreTraining"),pFo=o(" (MegatronBert model)"),_Fo=l(),pu=a("li"),sie=a("strong"),uFo=o("mobilebert"),bFo=o(" \u2014 "),EN=a("a"),vFo=o("MobileBertForPreTraining"),FFo=o(" (MobileBERT model)"),TFo=l(),_u=a("li"),lie=a("strong"),MFo=o("mpnet"),EFo=o(" \u2014 "),CN=a("a"),CFo=o("MPNetForMaskedLM"),wFo=o(" (MPNet model)"),AFo=l(),uu=a("li"),iie=a("strong"),yFo=o("openai-gpt"),LFo=o(" \u2014 "),wN=a("a"),xFo=o("OpenAIGPTLMHeadModel"),$Fo=o(" (OpenAI GPT model)"),kFo=l(),bu=a("li"),die=a("strong"),SFo=o("retribert"),RFo=o(" \u2014 "),AN=a("a"),PFo=o("RetriBertModel"),BFo=o(" (RetriBERT model)"),IFo=l(),vu=a("li"),cie=a("strong"),qFo=o("roberta"),NFo=o(" \u2014 "),yN=a("a"),jFo=o("RobertaForMaskedLM"),DFo=o(" (RoBERTa model)"),GFo=l(),Fu=a("li"),fie=a("strong"),OFo=o("splinter"),VFo=o(" \u2014 "),LN=a("a"),XFo=o("SplinterForPreTraining"),zFo=o(" (Splinter model)"),WFo=l(),Tu=a("li"),mie=a("strong"),QFo=o("squeezebert"),HFo=o(" \u2014 "),xN=a("a"),UFo=o("SqueezeBertForMaskedLM"),JFo=o(" (SqueezeBERT model)"),YFo=l(),Mu=a("li"),gie=a("strong"),KFo=o("t5"),ZFo=o(" \u2014 "),$N=a("a"),e6o=o("T5ForConditionalGeneration"),o6o=o(" (T5 model)"),r6o=l(),Eu=a("li"),hie=a("strong"),t6o=o("tapas"),a6o=o(" \u2014 "),kN=a("a"),n6o=o("TapasForMaskedLM"),s6o=o(" (TAPAS model)"),l6o=l(),Cu=a("li"),pie=a("strong"),i6o=o("transfo-xl"),d6o=o(" \u2014 "),SN=a("a"),c6o=o("TransfoXLLMHeadModel"),f6o=o(" (Transformer-XL model)"),m6o=l(),wu=a("li"),_ie=a("strong"),g6o=o("unispeech"),h6o=o(" \u2014 "),RN=a("a"),p6o=o("UniSpeechForPreTraining"),_6o=o(" (UniSpeech model)"),u6o=l(),Au=a("li"),uie=a("strong"),b6o=o("unispeech-sat"),v6o=o(" \u2014 "),PN=a("a"),F6o=o("UniSpeechSatForPreTraining"),T6o=o(" (UniSpeechSat model)"),M6o=l(),yu=a("li"),bie=a("strong"),E6o=o("visual_bert"),C6o=o(" \u2014 "),BN=a("a"),w6o=o("VisualBertForPreTraining"),A6o=o(" (VisualBert model)"),y6o=l(),Lu=a("li"),vie=a("strong"),L6o=o("vit_mae"),x6o=o(" \u2014 "),IN=a("a"),$6o=o("ViTMAEForPreTraining"),k6o=o(" (ViTMAE model)"),S6o=l(),xu=a("li"),Fie=a("strong"),R6o=o("wav2vec2"),P6o=o(" \u2014 "),qN=a("a"),B6o=o("Wav2Vec2ForPreTraining"),I6o=o(" (Wav2Vec2 model)"),q6o=l(),$u=a("li"),Tie=a("strong"),N6o=o("wav2vec2-conformer"),j6o=o(" \u2014 "),NN=a("a"),D6o=o("Wav2Vec2ConformerForPreTraining"),G6o=o(" (Wav2Vec2-Conformer model)"),O6o=l(),ku=a("li"),Mie=a("strong"),V6o=o("xlm"),X6o=o(" \u2014 "),jN=a("a"),z6o=o("XLMWithLMHeadModel"),W6o=o(" (XLM model)"),Q6o=l(),Su=a("li"),Eie=a("strong"),H6o=o("xlm-roberta"),U6o=o(" \u2014 "),DN=a("a"),J6o=o("XLMRobertaForMaskedLM"),Y6o=o(" (XLM-RoBERTa model)"),K6o=l(),Ru=a("li"),Cie=a("strong"),Z6o=o("xlm-roberta-xl"),eTo=o(" \u2014 "),GN=a("a"),oTo=o("XLMRobertaXLForMaskedLM"),rTo=o(" (XLM-RoBERTa-XL model)"),tTo=l(),Pu=a("li"),wie=a("strong"),aTo=o("xlnet"),nTo=o(" \u2014 "),ON=a("a"),sTo=o("XLNetLMHeadModel"),lTo=o(" (XLNet model)"),iTo=l(),Bu=a("p"),dTo=o("The model is set in evaluation mode by default using "),Aie=a("code"),cTo=o("model.eval()"),fTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=a("code"),mTo=o("model.train()"),gTo=l(),F(Iu.$$.fragment),iqe=l(),$i=a("h2"),qu=a("a"),Lie=a("span"),F(Hy.$$.fragment),hTo=l(),xie=a("span"),pTo=o("AutoModelForCausalLM"),dqe=l(),$o=a("div"),F(Uy.$$.fragment),_To=l(),ki=a("p"),uTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VN=a("a"),bTo=o("from_pretrained()"),vTo=o(" class method or the "),XN=a("a"),FTo=o("from_config()"),TTo=o(` class
method.`),MTo=l(),Jy=a("p"),ETo=o("This class cannot be instantiated directly using "),$ie=a("code"),CTo=o("__init__()"),wTo=o(" (throws an error)."),ATo=l(),nt=a("div"),F(Yy.$$.fragment),yTo=l(),kie=a("p"),LTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xTo=l(),Si=a("p"),$To=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),kTo=o("not"),STo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=a("a"),RTo=o("from_pretrained()"),PTo=o(" to load the model weights."),BTo=l(),F(Nu.$$.fragment),ITo=l(),Ke=a("div"),F(Ky.$$.fragment),qTo=l(),Rie=a("p"),NTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jTo=l(),$a=a("p"),DTo=o("The model class to instantiate is selected based on the "),Pie=a("code"),GTo=o("model_type"),OTo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),VTo=o("pretrained_model_name_or_path"),XTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),zTo=o("pretrained_model_name_or_path"),WTo=o(":"),QTo=l(),z=a("ul"),ju=a("li"),qie=a("strong"),HTo=o("bart"),UTo=o(" \u2014 "),WN=a("a"),JTo=o("BartForCausalLM"),YTo=o(" (BART model)"),KTo=l(),Du=a("li"),Nie=a("strong"),ZTo=o("bert"),eMo=o(" \u2014 "),QN=a("a"),oMo=o("BertLMHeadModel"),rMo=o(" (BERT model)"),tMo=l(),Gu=a("li"),jie=a("strong"),aMo=o("bert-generation"),nMo=o(" \u2014 "),HN=a("a"),sMo=o("BertGenerationDecoder"),lMo=o(" (Bert Generation model)"),iMo=l(),Ou=a("li"),Die=a("strong"),dMo=o("big_bird"),cMo=o(" \u2014 "),UN=a("a"),fMo=o("BigBirdForCausalLM"),mMo=o(" (BigBird model)"),gMo=l(),Vu=a("li"),Gie=a("strong"),hMo=o("bigbird_pegasus"),pMo=o(" \u2014 "),JN=a("a"),_Mo=o("BigBirdPegasusForCausalLM"),uMo=o(" (BigBirdPegasus model)"),bMo=l(),Xu=a("li"),Oie=a("strong"),vMo=o("blenderbot"),FMo=o(" \u2014 "),YN=a("a"),TMo=o("BlenderbotForCausalLM"),MMo=o(" (Blenderbot model)"),EMo=l(),zu=a("li"),Vie=a("strong"),CMo=o("blenderbot-small"),wMo=o(" \u2014 "),KN=a("a"),AMo=o("BlenderbotSmallForCausalLM"),yMo=o(" (BlenderbotSmall model)"),LMo=l(),Wu=a("li"),Xie=a("strong"),xMo=o("camembert"),$Mo=o(" \u2014 "),ZN=a("a"),kMo=o("CamembertForCausalLM"),SMo=o(" (CamemBERT model)"),RMo=l(),Qu=a("li"),zie=a("strong"),PMo=o("ctrl"),BMo=o(" \u2014 "),ej=a("a"),IMo=o("CTRLLMHeadModel"),qMo=o(" (CTRL model)"),NMo=l(),Hu=a("li"),Wie=a("strong"),jMo=o("data2vec-text"),DMo=o(" \u2014 "),oj=a("a"),GMo=o("Data2VecTextForCausalLM"),OMo=o(" (Data2VecText model)"),VMo=l(),Uu=a("li"),Qie=a("strong"),XMo=o("electra"),zMo=o(" \u2014 "),rj=a("a"),WMo=o("ElectraForCausalLM"),QMo=o(" (ELECTRA model)"),HMo=l(),Ju=a("li"),Hie=a("strong"),UMo=o("gpt2"),JMo=o(" \u2014 "),tj=a("a"),YMo=o("GPT2LMHeadModel"),KMo=o(" (OpenAI GPT-2 model)"),ZMo=l(),Yu=a("li"),Uie=a("strong"),eEo=o("gpt_neo"),oEo=o(" \u2014 "),aj=a("a"),rEo=o("GPTNeoForCausalLM"),tEo=o(" (GPT Neo model)"),aEo=l(),Ku=a("li"),Jie=a("strong"),nEo=o("gptj"),sEo=o(" \u2014 "),nj=a("a"),lEo=o("GPTJForCausalLM"),iEo=o(" (GPT-J model)"),dEo=l(),Zu=a("li"),Yie=a("strong"),cEo=o("marian"),fEo=o(" \u2014 "),sj=a("a"),mEo=o("MarianForCausalLM"),gEo=o(" (Marian model)"),hEo=l(),e1=a("li"),Kie=a("strong"),pEo=o("mbart"),_Eo=o(" \u2014 "),lj=a("a"),uEo=o("MBartForCausalLM"),bEo=o(" (mBART model)"),vEo=l(),o1=a("li"),Zie=a("strong"),FEo=o("megatron-bert"),TEo=o(" \u2014 "),ij=a("a"),MEo=o("MegatronBertForCausalLM"),EEo=o(" (MegatronBert model)"),CEo=l(),r1=a("li"),ede=a("strong"),wEo=o("openai-gpt"),AEo=o(" \u2014 "),dj=a("a"),yEo=o("OpenAIGPTLMHeadModel"),LEo=o(" (OpenAI GPT model)"),xEo=l(),t1=a("li"),ode=a("strong"),$Eo=o("opt"),kEo=o(" \u2014 "),cj=a("a"),SEo=o("OPTForCausalLM"),REo=o(" (OPT model)"),PEo=l(),a1=a("li"),rde=a("strong"),BEo=o("pegasus"),IEo=o(" \u2014 "),fj=a("a"),qEo=o("PegasusForCausalLM"),NEo=o(" (Pegasus model)"),jEo=l(),n1=a("li"),tde=a("strong"),DEo=o("plbart"),GEo=o(" \u2014 "),mj=a("a"),OEo=o("PLBartForCausalLM"),VEo=o(" (PLBart model)"),XEo=l(),s1=a("li"),ade=a("strong"),zEo=o("prophetnet"),WEo=o(" \u2014 "),gj=a("a"),QEo=o("ProphetNetForCausalLM"),HEo=o(" (ProphetNet model)"),UEo=l(),l1=a("li"),nde=a("strong"),JEo=o("qdqbert"),YEo=o(" \u2014 "),hj=a("a"),KEo=o("QDQBertLMHeadModel"),ZEo=o(" (QDQBert model)"),eCo=l(),i1=a("li"),sde=a("strong"),oCo=o("reformer"),rCo=o(" \u2014 "),pj=a("a"),tCo=o("ReformerModelWithLMHead"),aCo=o(" (Reformer model)"),nCo=l(),d1=a("li"),lde=a("strong"),sCo=o("rembert"),lCo=o(" \u2014 "),_j=a("a"),iCo=o("RemBertForCausalLM"),dCo=o(" (RemBERT model)"),cCo=l(),c1=a("li"),ide=a("strong"),fCo=o("roberta"),mCo=o(" \u2014 "),uj=a("a"),gCo=o("RobertaForCausalLM"),hCo=o(" (RoBERTa model)"),pCo=l(),f1=a("li"),dde=a("strong"),_Co=o("roformer"),uCo=o(" \u2014 "),bj=a("a"),bCo=o("RoFormerForCausalLM"),vCo=o(" (RoFormer model)"),FCo=l(),m1=a("li"),cde=a("strong"),TCo=o("speech_to_text_2"),MCo=o(" \u2014 "),vj=a("a"),ECo=o("Speech2Text2ForCausalLM"),CCo=o(" (Speech2Text2 model)"),wCo=l(),g1=a("li"),fde=a("strong"),ACo=o("transfo-xl"),yCo=o(" \u2014 "),Fj=a("a"),LCo=o("TransfoXLLMHeadModel"),xCo=o(" (Transformer-XL model)"),$Co=l(),h1=a("li"),mde=a("strong"),kCo=o("trocr"),SCo=o(" \u2014 "),Tj=a("a"),RCo=o("TrOCRForCausalLM"),PCo=o(" (TrOCR model)"),BCo=l(),p1=a("li"),gde=a("strong"),ICo=o("xglm"),qCo=o(" \u2014 "),Mj=a("a"),NCo=o("XGLMForCausalLM"),jCo=o(" (XGLM model)"),DCo=l(),_1=a("li"),hde=a("strong"),GCo=o("xlm"),OCo=o(" \u2014 "),Ej=a("a"),VCo=o("XLMWithLMHeadModel"),XCo=o(" (XLM model)"),zCo=l(),u1=a("li"),pde=a("strong"),WCo=o("xlm-prophetnet"),QCo=o(" \u2014 "),Cj=a("a"),HCo=o("XLMProphetNetForCausalLM"),UCo=o(" (XLMProphetNet model)"),JCo=l(),b1=a("li"),_de=a("strong"),YCo=o("xlm-roberta"),KCo=o(" \u2014 "),wj=a("a"),ZCo=o("XLMRobertaForCausalLM"),ewo=o(" (XLM-RoBERTa model)"),owo=l(),v1=a("li"),ude=a("strong"),rwo=o("xlm-roberta-xl"),two=o(" \u2014 "),Aj=a("a"),awo=o("XLMRobertaXLForCausalLM"),nwo=o(" (XLM-RoBERTa-XL model)"),swo=l(),F1=a("li"),bde=a("strong"),lwo=o("xlnet"),iwo=o(" \u2014 "),yj=a("a"),dwo=o("XLNetLMHeadModel"),cwo=o(" (XLNet model)"),fwo=l(),T1=a("p"),mwo=o("The model is set in evaluation mode by default using "),vde=a("code"),gwo=o("model.eval()"),hwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=a("code"),pwo=o("model.train()"),_wo=l(),F(M1.$$.fragment),cqe=l(),Ri=a("h2"),E1=a("a"),Tde=a("span"),F(Zy.$$.fragment),uwo=l(),Mde=a("span"),bwo=o("AutoModelForMaskedLM"),fqe=l(),ko=a("div"),F(eL.$$.fragment),vwo=l(),Pi=a("p"),Fwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lj=a("a"),Two=o("from_pretrained()"),Mwo=o(" class method or the "),xj=a("a"),Ewo=o("from_config()"),Cwo=o(` class
method.`),wwo=l(),oL=a("p"),Awo=o("This class cannot be instantiated directly using "),Ede=a("code"),ywo=o("__init__()"),Lwo=o(" (throws an error)."),xwo=l(),st=a("div"),F(rL.$$.fragment),$wo=l(),Cde=a("p"),kwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Swo=l(),Bi=a("p"),Rwo=o(`Note:
Loading a model from its configuration file does `),wde=a("strong"),Pwo=o("not"),Bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=a("a"),Iwo=o("from_pretrained()"),qwo=o(" to load the model weights."),Nwo=l(),F(C1.$$.fragment),jwo=l(),Ze=a("div"),F(tL.$$.fragment),Dwo=l(),Ade=a("p"),Gwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Owo=l(),ka=a("p"),Vwo=o("The model class to instantiate is selected based on the "),yde=a("code"),Xwo=o("model_type"),zwo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),Wwo=o("pretrained_model_name_or_path"),Qwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),Hwo=o("pretrained_model_name_or_path"),Uwo=o(":"),Jwo=l(),W=a("ul"),w1=a("li"),$de=a("strong"),Ywo=o("albert"),Kwo=o(" \u2014 "),kj=a("a"),Zwo=o("AlbertForMaskedLM"),e0o=o(" (ALBERT model)"),o0o=l(),A1=a("li"),kde=a("strong"),r0o=o("bart"),t0o=o(" \u2014 "),Sj=a("a"),a0o=o("BartForConditionalGeneration"),n0o=o(" (BART model)"),s0o=l(),y1=a("li"),Sde=a("strong"),l0o=o("bert"),i0o=o(" \u2014 "),Rj=a("a"),d0o=o("BertForMaskedLM"),c0o=o(" (BERT model)"),f0o=l(),L1=a("li"),Rde=a("strong"),m0o=o("big_bird"),g0o=o(" \u2014 "),Pj=a("a"),h0o=o("BigBirdForMaskedLM"),p0o=o(" (BigBird model)"),_0o=l(),x1=a("li"),Pde=a("strong"),u0o=o("camembert"),b0o=o(" \u2014 "),Bj=a("a"),v0o=o("CamembertForMaskedLM"),F0o=o(" (CamemBERT model)"),T0o=l(),$1=a("li"),Bde=a("strong"),M0o=o("convbert"),E0o=o(" \u2014 "),Ij=a("a"),C0o=o("ConvBertForMaskedLM"),w0o=o(" (ConvBERT model)"),A0o=l(),k1=a("li"),Ide=a("strong"),y0o=o("data2vec-text"),L0o=o(" \u2014 "),qj=a("a"),x0o=o("Data2VecTextForMaskedLM"),$0o=o(" (Data2VecText model)"),k0o=l(),S1=a("li"),qde=a("strong"),S0o=o("deberta"),R0o=o(" \u2014 "),Nj=a("a"),P0o=o("DebertaForMaskedLM"),B0o=o(" (DeBERTa model)"),I0o=l(),R1=a("li"),Nde=a("strong"),q0o=o("deberta-v2"),N0o=o(" \u2014 "),jj=a("a"),j0o=o("DebertaV2ForMaskedLM"),D0o=o(" (DeBERTa-v2 model)"),G0o=l(),P1=a("li"),jde=a("strong"),O0o=o("distilbert"),V0o=o(" \u2014 "),Dj=a("a"),X0o=o("DistilBertForMaskedLM"),z0o=o(" (DistilBERT model)"),W0o=l(),B1=a("li"),Dde=a("strong"),Q0o=o("electra"),H0o=o(" \u2014 "),Gj=a("a"),U0o=o("ElectraForMaskedLM"),J0o=o(" (ELECTRA model)"),Y0o=l(),I1=a("li"),Gde=a("strong"),K0o=o("flaubert"),Z0o=o(" \u2014 "),Oj=a("a"),eAo=o("FlaubertWithLMHeadModel"),oAo=o(" (FlauBERT model)"),rAo=l(),q1=a("li"),Ode=a("strong"),tAo=o("fnet"),aAo=o(" \u2014 "),Vj=a("a"),nAo=o("FNetForMaskedLM"),sAo=o(" (FNet model)"),lAo=l(),N1=a("li"),Vde=a("strong"),iAo=o("funnel"),dAo=o(" \u2014 "),Xj=a("a"),cAo=o("FunnelForMaskedLM"),fAo=o(" (Funnel Transformer model)"),mAo=l(),j1=a("li"),Xde=a("strong"),gAo=o("ibert"),hAo=o(" \u2014 "),zj=a("a"),pAo=o("IBertForMaskedLM"),_Ao=o(" (I-BERT model)"),uAo=l(),D1=a("li"),zde=a("strong"),bAo=o("layoutlm"),vAo=o(" \u2014 "),Wj=a("a"),FAo=o("LayoutLMForMaskedLM"),TAo=o(" (LayoutLM model)"),MAo=l(),G1=a("li"),Wde=a("strong"),EAo=o("longformer"),CAo=o(" \u2014 "),Qj=a("a"),wAo=o("LongformerForMaskedLM"),AAo=o(" (Longformer model)"),yAo=l(),O1=a("li"),Qde=a("strong"),LAo=o("mbart"),xAo=o(" \u2014 "),Hj=a("a"),$Ao=o("MBartForConditionalGeneration"),kAo=o(" (mBART model)"),SAo=l(),V1=a("li"),Hde=a("strong"),RAo=o("megatron-bert"),PAo=o(" \u2014 "),Uj=a("a"),BAo=o("MegatronBertForMaskedLM"),IAo=o(" (MegatronBert model)"),qAo=l(),X1=a("li"),Ude=a("strong"),NAo=o("mobilebert"),jAo=o(" \u2014 "),Jj=a("a"),DAo=o("MobileBertForMaskedLM"),GAo=o(" (MobileBERT model)"),OAo=l(),z1=a("li"),Jde=a("strong"),VAo=o("mpnet"),XAo=o(" \u2014 "),Yj=a("a"),zAo=o("MPNetForMaskedLM"),WAo=o(" (MPNet model)"),QAo=l(),W1=a("li"),Yde=a("strong"),HAo=o("nystromformer"),UAo=o(" \u2014 "),Kj=a("a"),JAo=o("NystromformerForMaskedLM"),YAo=o(" (Nystromformer model)"),KAo=l(),Q1=a("li"),Kde=a("strong"),ZAo=o("perceiver"),eyo=o(" \u2014 "),Zj=a("a"),oyo=o("PerceiverForMaskedLM"),ryo=o(" (Perceiver model)"),tyo=l(),H1=a("li"),Zde=a("strong"),ayo=o("qdqbert"),nyo=o(" \u2014 "),eD=a("a"),syo=o("QDQBertForMaskedLM"),lyo=o(" (QDQBert model)"),iyo=l(),U1=a("li"),ece=a("strong"),dyo=o("reformer"),cyo=o(" \u2014 "),oD=a("a"),fyo=o("ReformerForMaskedLM"),myo=o(" (Reformer model)"),gyo=l(),J1=a("li"),oce=a("strong"),hyo=o("rembert"),pyo=o(" \u2014 "),rD=a("a"),_yo=o("RemBertForMaskedLM"),uyo=o(" (RemBERT model)"),byo=l(),Y1=a("li"),rce=a("strong"),vyo=o("roberta"),Fyo=o(" \u2014 "),tD=a("a"),Tyo=o("RobertaForMaskedLM"),Myo=o(" (RoBERTa model)"),Eyo=l(),K1=a("li"),tce=a("strong"),Cyo=o("roformer"),wyo=o(" \u2014 "),aD=a("a"),Ayo=o("RoFormerForMaskedLM"),yyo=o(" (RoFormer model)"),Lyo=l(),Z1=a("li"),ace=a("strong"),xyo=o("squeezebert"),$yo=o(" \u2014 "),nD=a("a"),kyo=o("SqueezeBertForMaskedLM"),Syo=o(" (SqueezeBERT model)"),Ryo=l(),eb=a("li"),nce=a("strong"),Pyo=o("tapas"),Byo=o(" \u2014 "),sD=a("a"),Iyo=o("TapasForMaskedLM"),qyo=o(" (TAPAS model)"),Nyo=l(),ob=a("li"),sce=a("strong"),jyo=o("wav2vec2"),Dyo=o(" \u2014 "),lce=a("code"),Gyo=o("Wav2Vec2ForMaskedLM"),Oyo=o(" (Wav2Vec2 model)"),Vyo=l(),rb=a("li"),ice=a("strong"),Xyo=o("xlm"),zyo=o(" \u2014 "),lD=a("a"),Wyo=o("XLMWithLMHeadModel"),Qyo=o(" (XLM model)"),Hyo=l(),tb=a("li"),dce=a("strong"),Uyo=o("xlm-roberta"),Jyo=o(" \u2014 "),iD=a("a"),Yyo=o("XLMRobertaForMaskedLM"),Kyo=o(" (XLM-RoBERTa model)"),Zyo=l(),ab=a("li"),cce=a("strong"),eLo=o("xlm-roberta-xl"),oLo=o(" \u2014 "),dD=a("a"),rLo=o("XLMRobertaXLForMaskedLM"),tLo=o(" (XLM-RoBERTa-XL model)"),aLo=l(),nb=a("li"),fce=a("strong"),nLo=o("yoso"),sLo=o(" \u2014 "),cD=a("a"),lLo=o("YosoForMaskedLM"),iLo=o(" (YOSO model)"),dLo=l(),sb=a("p"),cLo=o("The model is set in evaluation mode by default using "),mce=a("code"),fLo=o("model.eval()"),mLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=a("code"),gLo=o("model.train()"),hLo=l(),F(lb.$$.fragment),mqe=l(),Ii=a("h2"),ib=a("a"),hce=a("span"),F(aL.$$.fragment),pLo=l(),pce=a("span"),_Lo=o("AutoModelForSeq2SeqLM"),gqe=l(),So=a("div"),F(nL.$$.fragment),uLo=l(),qi=a("p"),bLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fD=a("a"),vLo=o("from_pretrained()"),FLo=o(" class method or the "),mD=a("a"),TLo=o("from_config()"),MLo=o(` class
method.`),ELo=l(),sL=a("p"),CLo=o("This class cannot be instantiated directly using "),_ce=a("code"),wLo=o("__init__()"),ALo=o(" (throws an error)."),yLo=l(),lt=a("div"),F(lL.$$.fragment),LLo=l(),uce=a("p"),xLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Lo=l(),Ni=a("p"),kLo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),SLo=o("not"),RLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),PLo=o("from_pretrained()"),BLo=o(" to load the model weights."),ILo=l(),F(db.$$.fragment),qLo=l(),eo=a("div"),F(iL.$$.fragment),NLo=l(),vce=a("p"),jLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DLo=l(),Sa=a("p"),GLo=o("The model class to instantiate is selected based on the "),Fce=a("code"),OLo=o("model_type"),VLo=o(` property of the config object (either
passed as an argument or loaded from `),Tce=a("code"),XLo=o("pretrained_model_name_or_path"),zLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),WLo=o("pretrained_model_name_or_path"),QLo=o(":"),HLo=l(),_e=a("ul"),cb=a("li"),Ece=a("strong"),ULo=o("bart"),JLo=o(" \u2014 "),hD=a("a"),YLo=o("BartForConditionalGeneration"),KLo=o(" (BART model)"),ZLo=l(),fb=a("li"),Cce=a("strong"),e8o=o("bigbird_pegasus"),o8o=o(" \u2014 "),pD=a("a"),r8o=o("BigBirdPegasusForConditionalGeneration"),t8o=o(" (BigBirdPegasus model)"),a8o=l(),mb=a("li"),wce=a("strong"),n8o=o("blenderbot"),s8o=o(" \u2014 "),_D=a("a"),l8o=o("BlenderbotForConditionalGeneration"),i8o=o(" (Blenderbot model)"),d8o=l(),gb=a("li"),Ace=a("strong"),c8o=o("blenderbot-small"),f8o=o(" \u2014 "),uD=a("a"),m8o=o("BlenderbotSmallForConditionalGeneration"),g8o=o(" (BlenderbotSmall model)"),h8o=l(),hb=a("li"),yce=a("strong"),p8o=o("encoder-decoder"),_8o=o(" \u2014 "),bD=a("a"),u8o=o("EncoderDecoderModel"),b8o=o(" (Encoder decoder model)"),v8o=l(),pb=a("li"),Lce=a("strong"),F8o=o("fsmt"),T8o=o(" \u2014 "),vD=a("a"),M8o=o("FSMTForConditionalGeneration"),E8o=o(" (FairSeq Machine-Translation model)"),C8o=l(),_b=a("li"),xce=a("strong"),w8o=o("led"),A8o=o(" \u2014 "),FD=a("a"),y8o=o("LEDForConditionalGeneration"),L8o=o(" (LED model)"),x8o=l(),ub=a("li"),$ce=a("strong"),$8o=o("m2m_100"),k8o=o(" \u2014 "),TD=a("a"),S8o=o("M2M100ForConditionalGeneration"),R8o=o(" (M2M100 model)"),P8o=l(),bb=a("li"),kce=a("strong"),B8o=o("marian"),I8o=o(" \u2014 "),MD=a("a"),q8o=o("MarianMTModel"),N8o=o(" (Marian model)"),j8o=l(),vb=a("li"),Sce=a("strong"),D8o=o("mbart"),G8o=o(" \u2014 "),ED=a("a"),O8o=o("MBartForConditionalGeneration"),V8o=o(" (mBART model)"),X8o=l(),Fb=a("li"),Rce=a("strong"),z8o=o("mt5"),W8o=o(" \u2014 "),CD=a("a"),Q8o=o("MT5ForConditionalGeneration"),H8o=o(" (mT5 model)"),U8o=l(),Tb=a("li"),Pce=a("strong"),J8o=o("pegasus"),Y8o=o(" \u2014 "),wD=a("a"),K8o=o("PegasusForConditionalGeneration"),Z8o=o(" (Pegasus model)"),e7o=l(),Mb=a("li"),Bce=a("strong"),o7o=o("plbart"),r7o=o(" \u2014 "),AD=a("a"),t7o=o("PLBartForConditionalGeneration"),a7o=o(" (PLBart model)"),n7o=l(),Eb=a("li"),Ice=a("strong"),s7o=o("prophetnet"),l7o=o(" \u2014 "),yD=a("a"),i7o=o("ProphetNetForConditionalGeneration"),d7o=o(" (ProphetNet model)"),c7o=l(),Cb=a("li"),qce=a("strong"),f7o=o("t5"),m7o=o(" \u2014 "),LD=a("a"),g7o=o("T5ForConditionalGeneration"),h7o=o(" (T5 model)"),p7o=l(),wb=a("li"),Nce=a("strong"),_7o=o("xlm-prophetnet"),u7o=o(" \u2014 "),xD=a("a"),b7o=o("XLMProphetNetForConditionalGeneration"),v7o=o(" (XLMProphetNet model)"),F7o=l(),Ab=a("p"),T7o=o("The model is set in evaluation mode by default using "),jce=a("code"),M7o=o("model.eval()"),E7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dce=a("code"),C7o=o("model.train()"),w7o=l(),F(yb.$$.fragment),hqe=l(),ji=a("h2"),Lb=a("a"),Gce=a("span"),F(dL.$$.fragment),A7o=l(),Oce=a("span"),y7o=o("AutoModelForSequenceClassification"),pqe=l(),Ro=a("div"),F(cL.$$.fragment),L7o=l(),Di=a("p"),x7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$D=a("a"),$7o=o("from_pretrained()"),k7o=o(" class method or the "),kD=a("a"),S7o=o("from_config()"),R7o=o(` class
method.`),P7o=l(),fL=a("p"),B7o=o("This class cannot be instantiated directly using "),Vce=a("code"),I7o=o("__init__()"),q7o=o(" (throws an error)."),N7o=l(),it=a("div"),F(mL.$$.fragment),j7o=l(),Xce=a("p"),D7o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G7o=l(),Gi=a("p"),O7o=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),V7o=o("not"),X7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=a("a"),z7o=o("from_pretrained()"),W7o=o(" to load the model weights."),Q7o=l(),F(xb.$$.fragment),H7o=l(),oo=a("div"),F(gL.$$.fragment),U7o=l(),Wce=a("p"),J7o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Y7o=l(),Ra=a("p"),K7o=o("The model class to instantiate is selected based on the "),Qce=a("code"),Z7o=o("model_type"),exo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),txo=o("pretrained_model_name_or_path"),axo=o(":"),nxo=l(),N=a("ul"),$b=a("li"),Jce=a("strong"),sxo=o("albert"),lxo=o(" \u2014 "),RD=a("a"),ixo=o("AlbertForSequenceClassification"),dxo=o(" (ALBERT model)"),cxo=l(),kb=a("li"),Yce=a("strong"),fxo=o("bart"),mxo=o(" \u2014 "),PD=a("a"),gxo=o("BartForSequenceClassification"),hxo=o(" (BART model)"),pxo=l(),Sb=a("li"),Kce=a("strong"),_xo=o("bert"),uxo=o(" \u2014 "),BD=a("a"),bxo=o("BertForSequenceClassification"),vxo=o(" (BERT model)"),Fxo=l(),Rb=a("li"),Zce=a("strong"),Txo=o("big_bird"),Mxo=o(" \u2014 "),ID=a("a"),Exo=o("BigBirdForSequenceClassification"),Cxo=o(" (BigBird model)"),wxo=l(),Pb=a("li"),efe=a("strong"),Axo=o("bigbird_pegasus"),yxo=o(" \u2014 "),qD=a("a"),Lxo=o("BigBirdPegasusForSequenceClassification"),xxo=o(" (BigBirdPegasus model)"),$xo=l(),Bb=a("li"),ofe=a("strong"),kxo=o("camembert"),Sxo=o(" \u2014 "),ND=a("a"),Rxo=o("CamembertForSequenceClassification"),Pxo=o(" (CamemBERT model)"),Bxo=l(),Ib=a("li"),rfe=a("strong"),Ixo=o("canine"),qxo=o(" \u2014 "),jD=a("a"),Nxo=o("CanineForSequenceClassification"),jxo=o(" (Canine model)"),Dxo=l(),qb=a("li"),tfe=a("strong"),Gxo=o("convbert"),Oxo=o(" \u2014 "),DD=a("a"),Vxo=o("ConvBertForSequenceClassification"),Xxo=o(" (ConvBERT model)"),zxo=l(),Nb=a("li"),afe=a("strong"),Wxo=o("ctrl"),Qxo=o(" \u2014 "),GD=a("a"),Hxo=o("CTRLForSequenceClassification"),Uxo=o(" (CTRL model)"),Jxo=l(),jb=a("li"),nfe=a("strong"),Yxo=o("data2vec-text"),Kxo=o(" \u2014 "),OD=a("a"),Zxo=o("Data2VecTextForSequenceClassification"),e9o=o(" (Data2VecText model)"),o9o=l(),Db=a("li"),sfe=a("strong"),r9o=o("deberta"),t9o=o(" \u2014 "),VD=a("a"),a9o=o("DebertaForSequenceClassification"),n9o=o(" (DeBERTa model)"),s9o=l(),Gb=a("li"),lfe=a("strong"),l9o=o("deberta-v2"),i9o=o(" \u2014 "),XD=a("a"),d9o=o("DebertaV2ForSequenceClassification"),c9o=o(" (DeBERTa-v2 model)"),f9o=l(),Ob=a("li"),ife=a("strong"),m9o=o("distilbert"),g9o=o(" \u2014 "),zD=a("a"),h9o=o("DistilBertForSequenceClassification"),p9o=o(" (DistilBERT model)"),_9o=l(),Vb=a("li"),dfe=a("strong"),u9o=o("electra"),b9o=o(" \u2014 "),WD=a("a"),v9o=o("ElectraForSequenceClassification"),F9o=o(" (ELECTRA model)"),T9o=l(),Xb=a("li"),cfe=a("strong"),M9o=o("flaubert"),E9o=o(" \u2014 "),QD=a("a"),C9o=o("FlaubertForSequenceClassification"),w9o=o(" (FlauBERT model)"),A9o=l(),zb=a("li"),ffe=a("strong"),y9o=o("fnet"),L9o=o(" \u2014 "),HD=a("a"),x9o=o("FNetForSequenceClassification"),$9o=o(" (FNet model)"),k9o=l(),Wb=a("li"),mfe=a("strong"),S9o=o("funnel"),R9o=o(" \u2014 "),UD=a("a"),P9o=o("FunnelForSequenceClassification"),B9o=o(" (Funnel Transformer model)"),I9o=l(),Qb=a("li"),gfe=a("strong"),q9o=o("gpt2"),N9o=o(" \u2014 "),JD=a("a"),j9o=o("GPT2ForSequenceClassification"),D9o=o(" (OpenAI GPT-2 model)"),G9o=l(),Hb=a("li"),hfe=a("strong"),O9o=o("gpt_neo"),V9o=o(" \u2014 "),YD=a("a"),X9o=o("GPTNeoForSequenceClassification"),z9o=o(" (GPT Neo model)"),W9o=l(),Ub=a("li"),pfe=a("strong"),Q9o=o("gptj"),H9o=o(" \u2014 "),KD=a("a"),U9o=o("GPTJForSequenceClassification"),J9o=o(" (GPT-J model)"),Y9o=l(),Jb=a("li"),_fe=a("strong"),K9o=o("ibert"),Z9o=o(" \u2014 "),ZD=a("a"),e$o=o("IBertForSequenceClassification"),o$o=o(" (I-BERT model)"),r$o=l(),Yb=a("li"),ufe=a("strong"),t$o=o("layoutlm"),a$o=o(" \u2014 "),eG=a("a"),n$o=o("LayoutLMForSequenceClassification"),s$o=o(" (LayoutLM model)"),l$o=l(),Kb=a("li"),bfe=a("strong"),i$o=o("layoutlmv2"),d$o=o(" \u2014 "),oG=a("a"),c$o=o("LayoutLMv2ForSequenceClassification"),f$o=o(" (LayoutLMv2 model)"),m$o=l(),Zb=a("li"),vfe=a("strong"),g$o=o("led"),h$o=o(" \u2014 "),rG=a("a"),p$o=o("LEDForSequenceClassification"),_$o=o(" (LED model)"),u$o=l(),e2=a("li"),Ffe=a("strong"),b$o=o("longformer"),v$o=o(" \u2014 "),tG=a("a"),F$o=o("LongformerForSequenceClassification"),T$o=o(" (Longformer model)"),M$o=l(),o2=a("li"),Tfe=a("strong"),E$o=o("mbart"),C$o=o(" \u2014 "),aG=a("a"),w$o=o("MBartForSequenceClassification"),A$o=o(" (mBART model)"),y$o=l(),r2=a("li"),Mfe=a("strong"),L$o=o("megatron-bert"),x$o=o(" \u2014 "),nG=a("a"),$$o=o("MegatronBertForSequenceClassification"),k$o=o(" (MegatronBert model)"),S$o=l(),t2=a("li"),Efe=a("strong"),R$o=o("mobilebert"),P$o=o(" \u2014 "),sG=a("a"),B$o=o("MobileBertForSequenceClassification"),I$o=o(" (MobileBERT model)"),q$o=l(),a2=a("li"),Cfe=a("strong"),N$o=o("mpnet"),j$o=o(" \u2014 "),lG=a("a"),D$o=o("MPNetForSequenceClassification"),G$o=o(" (MPNet model)"),O$o=l(),n2=a("li"),wfe=a("strong"),V$o=o("nystromformer"),X$o=o(" \u2014 "),iG=a("a"),z$o=o("NystromformerForSequenceClassification"),W$o=o(" (Nystromformer model)"),Q$o=l(),s2=a("li"),Afe=a("strong"),H$o=o("openai-gpt"),U$o=o(" \u2014 "),dG=a("a"),J$o=o("OpenAIGPTForSequenceClassification"),Y$o=o(" (OpenAI GPT model)"),K$o=l(),l2=a("li"),yfe=a("strong"),Z$o=o("perceiver"),eko=o(" \u2014 "),cG=a("a"),oko=o("PerceiverForSequenceClassification"),rko=o(" (Perceiver model)"),tko=l(),i2=a("li"),Lfe=a("strong"),ako=o("plbart"),nko=o(" \u2014 "),fG=a("a"),sko=o("PLBartForSequenceClassification"),lko=o(" (PLBart model)"),iko=l(),d2=a("li"),xfe=a("strong"),dko=o("qdqbert"),cko=o(" \u2014 "),mG=a("a"),fko=o("QDQBertForSequenceClassification"),mko=o(" (QDQBert model)"),gko=l(),c2=a("li"),$fe=a("strong"),hko=o("reformer"),pko=o(" \u2014 "),gG=a("a"),_ko=o("ReformerForSequenceClassification"),uko=o(" (Reformer model)"),bko=l(),f2=a("li"),kfe=a("strong"),vko=o("rembert"),Fko=o(" \u2014 "),hG=a("a"),Tko=o("RemBertForSequenceClassification"),Mko=o(" (RemBERT model)"),Eko=l(),m2=a("li"),Sfe=a("strong"),Cko=o("roberta"),wko=o(" \u2014 "),pG=a("a"),Ako=o("RobertaForSequenceClassification"),yko=o(" (RoBERTa model)"),Lko=l(),g2=a("li"),Rfe=a("strong"),xko=o("roformer"),$ko=o(" \u2014 "),_G=a("a"),kko=o("RoFormerForSequenceClassification"),Sko=o(" (RoFormer model)"),Rko=l(),h2=a("li"),Pfe=a("strong"),Pko=o("squeezebert"),Bko=o(" \u2014 "),uG=a("a"),Iko=o("SqueezeBertForSequenceClassification"),qko=o(" (SqueezeBERT model)"),Nko=l(),p2=a("li"),Bfe=a("strong"),jko=o("tapas"),Dko=o(" \u2014 "),bG=a("a"),Gko=o("TapasForSequenceClassification"),Oko=o(" (TAPAS model)"),Vko=l(),_2=a("li"),Ife=a("strong"),Xko=o("transfo-xl"),zko=o(" \u2014 "),vG=a("a"),Wko=o("TransfoXLForSequenceClassification"),Qko=o(" (Transformer-XL model)"),Hko=l(),u2=a("li"),qfe=a("strong"),Uko=o("xlm"),Jko=o(" \u2014 "),FG=a("a"),Yko=o("XLMForSequenceClassification"),Kko=o(" (XLM model)"),Zko=l(),b2=a("li"),Nfe=a("strong"),eSo=o("xlm-roberta"),oSo=o(" \u2014 "),TG=a("a"),rSo=o("XLMRobertaForSequenceClassification"),tSo=o(" (XLM-RoBERTa model)"),aSo=l(),v2=a("li"),jfe=a("strong"),nSo=o("xlm-roberta-xl"),sSo=o(" \u2014 "),MG=a("a"),lSo=o("XLMRobertaXLForSequenceClassification"),iSo=o(" (XLM-RoBERTa-XL model)"),dSo=l(),F2=a("li"),Dfe=a("strong"),cSo=o("xlnet"),fSo=o(" \u2014 "),EG=a("a"),mSo=o("XLNetForSequenceClassification"),gSo=o(" (XLNet model)"),hSo=l(),T2=a("li"),Gfe=a("strong"),pSo=o("yoso"),_So=o(" \u2014 "),CG=a("a"),uSo=o("YosoForSequenceClassification"),bSo=o(" (YOSO model)"),vSo=l(),M2=a("p"),FSo=o("The model is set in evaluation mode by default using "),Ofe=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=a("code"),ESo=o("model.train()"),CSo=l(),F(E2.$$.fragment),_qe=l(),Oi=a("h2"),C2=a("a"),Xfe=a("span"),F(hL.$$.fragment),wSo=l(),zfe=a("span"),ASo=o("AutoModelForMultipleChoice"),uqe=l(),Po=a("div"),F(pL.$$.fragment),ySo=l(),Vi=a("p"),LSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wG=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),AG=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),_L=a("p"),PSo=o("This class cannot be instantiated directly using "),Wfe=a("code"),BSo=o("__init__()"),ISo=o(" (throws an error)."),qSo=l(),dt=a("div"),F(uL.$$.fragment),NSo=l(),Qfe=a("p"),jSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DSo=l(),Xi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),WSo=l(),F(w2.$$.fragment),QSo=l(),ro=a("div"),F(bL.$$.fragment),HSo=l(),Ufe=a("p"),USo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JSo=l(),Pa=a("p"),YSo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),Y=a("ul"),A2=a("li"),Zfe=a("strong"),nRo=o("albert"),sRo=o(" \u2014 "),LG=a("a"),lRo=o("AlbertForMultipleChoice"),iRo=o(" (ALBERT model)"),dRo=l(),y2=a("li"),eme=a("strong"),cRo=o("bert"),fRo=o(" \u2014 "),xG=a("a"),mRo=o("BertForMultipleChoice"),gRo=o(" (BERT model)"),hRo=l(),L2=a("li"),ome=a("strong"),pRo=o("big_bird"),_Ro=o(" \u2014 "),$G=a("a"),uRo=o("BigBirdForMultipleChoice"),bRo=o(" (BigBird model)"),vRo=l(),x2=a("li"),rme=a("strong"),FRo=o("camembert"),TRo=o(" \u2014 "),kG=a("a"),MRo=o("CamembertForMultipleChoice"),ERo=o(" (CamemBERT model)"),CRo=l(),$2=a("li"),tme=a("strong"),wRo=o("canine"),ARo=o(" \u2014 "),SG=a("a"),yRo=o("CanineForMultipleChoice"),LRo=o(" (Canine model)"),xRo=l(),k2=a("li"),ame=a("strong"),$Ro=o("convbert"),kRo=o(" \u2014 "),RG=a("a"),SRo=o("ConvBertForMultipleChoice"),RRo=o(" (ConvBERT model)"),PRo=l(),S2=a("li"),nme=a("strong"),BRo=o("data2vec-text"),IRo=o(" \u2014 "),PG=a("a"),qRo=o("Data2VecTextForMultipleChoice"),NRo=o(" (Data2VecText model)"),jRo=l(),R2=a("li"),sme=a("strong"),DRo=o("deberta-v2"),GRo=o(" \u2014 "),BG=a("a"),ORo=o("DebertaV2ForMultipleChoice"),VRo=o(" (DeBERTa-v2 model)"),XRo=l(),P2=a("li"),lme=a("strong"),zRo=o("distilbert"),WRo=o(" \u2014 "),IG=a("a"),QRo=o("DistilBertForMultipleChoice"),HRo=o(" (DistilBERT model)"),URo=l(),B2=a("li"),ime=a("strong"),JRo=o("electra"),YRo=o(" \u2014 "),qG=a("a"),KRo=o("ElectraForMultipleChoice"),ZRo=o(" (ELECTRA model)"),ePo=l(),I2=a("li"),dme=a("strong"),oPo=o("flaubert"),rPo=o(" \u2014 "),NG=a("a"),tPo=o("FlaubertForMultipleChoice"),aPo=o(" (FlauBERT model)"),nPo=l(),q2=a("li"),cme=a("strong"),sPo=o("fnet"),lPo=o(" \u2014 "),jG=a("a"),iPo=o("FNetForMultipleChoice"),dPo=o(" (FNet model)"),cPo=l(),N2=a("li"),fme=a("strong"),fPo=o("funnel"),mPo=o(" \u2014 "),DG=a("a"),gPo=o("FunnelForMultipleChoice"),hPo=o(" (Funnel Transformer model)"),pPo=l(),j2=a("li"),mme=a("strong"),_Po=o("ibert"),uPo=o(" \u2014 "),GG=a("a"),bPo=o("IBertForMultipleChoice"),vPo=o(" (I-BERT model)"),FPo=l(),D2=a("li"),gme=a("strong"),TPo=o("longformer"),MPo=o(" \u2014 "),OG=a("a"),EPo=o("LongformerForMultipleChoice"),CPo=o(" (Longformer model)"),wPo=l(),G2=a("li"),hme=a("strong"),APo=o("megatron-bert"),yPo=o(" \u2014 "),VG=a("a"),LPo=o("MegatronBertForMultipleChoice"),xPo=o(" (MegatronBert model)"),$Po=l(),O2=a("li"),pme=a("strong"),kPo=o("mobilebert"),SPo=o(" \u2014 "),XG=a("a"),RPo=o("MobileBertForMultipleChoice"),PPo=o(" (MobileBERT model)"),BPo=l(),V2=a("li"),_me=a("strong"),IPo=o("mpnet"),qPo=o(" \u2014 "),zG=a("a"),NPo=o("MPNetForMultipleChoice"),jPo=o(" (MPNet model)"),DPo=l(),X2=a("li"),ume=a("strong"),GPo=o("nystromformer"),OPo=o(" \u2014 "),WG=a("a"),VPo=o("NystromformerForMultipleChoice"),XPo=o(" (Nystromformer model)"),zPo=l(),z2=a("li"),bme=a("strong"),WPo=o("qdqbert"),QPo=o(" \u2014 "),QG=a("a"),HPo=o("QDQBertForMultipleChoice"),UPo=o(" (QDQBert model)"),JPo=l(),W2=a("li"),vme=a("strong"),YPo=o("rembert"),KPo=o(" \u2014 "),HG=a("a"),ZPo=o("RemBertForMultipleChoice"),eBo=o(" (RemBERT model)"),oBo=l(),Q2=a("li"),Fme=a("strong"),rBo=o("roberta"),tBo=o(" \u2014 "),UG=a("a"),aBo=o("RobertaForMultipleChoice"),nBo=o(" (RoBERTa model)"),sBo=l(),H2=a("li"),Tme=a("strong"),lBo=o("roformer"),iBo=o(" \u2014 "),JG=a("a"),dBo=o("RoFormerForMultipleChoice"),cBo=o(" (RoFormer model)"),fBo=l(),U2=a("li"),Mme=a("strong"),mBo=o("squeezebert"),gBo=o(" \u2014 "),YG=a("a"),hBo=o("SqueezeBertForMultipleChoice"),pBo=o(" (SqueezeBERT model)"),_Bo=l(),J2=a("li"),Eme=a("strong"),uBo=o("xlm"),bBo=o(" \u2014 "),KG=a("a"),vBo=o("XLMForMultipleChoice"),FBo=o(" (XLM model)"),TBo=l(),Y2=a("li"),Cme=a("strong"),MBo=o("xlm-roberta"),EBo=o(" \u2014 "),ZG=a("a"),CBo=o("XLMRobertaForMultipleChoice"),wBo=o(" (XLM-RoBERTa model)"),ABo=l(),K2=a("li"),wme=a("strong"),yBo=o("xlm-roberta-xl"),LBo=o(" \u2014 "),eO=a("a"),xBo=o("XLMRobertaXLForMultipleChoice"),$Bo=o(" (XLM-RoBERTa-XL model)"),kBo=l(),Z2=a("li"),Ame=a("strong"),SBo=o("xlnet"),RBo=o(" \u2014 "),oO=a("a"),PBo=o("XLNetForMultipleChoice"),BBo=o(" (XLNet model)"),IBo=l(),e4=a("li"),yme=a("strong"),qBo=o("yoso"),NBo=o(" \u2014 "),rO=a("a"),jBo=o("YosoForMultipleChoice"),DBo=o(" (YOSO model)"),GBo=l(),o4=a("p"),OBo=o("The model is set in evaluation mode by default using "),Lme=a("code"),VBo=o("model.eval()"),XBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),zBo=o("model.train()"),WBo=l(),F(r4.$$.fragment),bqe=l(),zi=a("h2"),t4=a("a"),$me=a("span"),F(vL.$$.fragment),QBo=l(),kme=a("span"),HBo=o("AutoModelForNextSentencePrediction"),vqe=l(),Bo=a("div"),F(FL.$$.fragment),UBo=l(),Wi=a("p"),JBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tO=a("a"),YBo=o("from_pretrained()"),KBo=o(" class method or the "),aO=a("a"),ZBo=o("from_config()"),eIo=o(` class
method.`),oIo=l(),TL=a("p"),rIo=o("This class cannot be instantiated directly using "),Sme=a("code"),tIo=o("__init__()"),aIo=o(" (throws an error)."),nIo=l(),ct=a("div"),F(ML.$$.fragment),sIo=l(),Rme=a("p"),lIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iIo=l(),Qi=a("p"),dIo=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),cIo=o("not"),fIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),mIo=o("from_pretrained()"),gIo=o(" to load the model weights."),hIo=l(),F(a4.$$.fragment),pIo=l(),to=a("div"),F(EL.$$.fragment),_Io=l(),Bme=a("p"),uIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bIo=l(),Ba=a("p"),vIo=o("The model class to instantiate is selected based on the "),Ime=a("code"),FIo=o("model_type"),TIo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),MIo=o("pretrained_model_name_or_path"),EIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),CIo=o("pretrained_model_name_or_path"),wIo=o(":"),AIo=l(),Yr=a("ul"),n4=a("li"),jme=a("strong"),yIo=o("bert"),LIo=o(" \u2014 "),sO=a("a"),xIo=o("BertForNextSentencePrediction"),$Io=o(" (BERT model)"),kIo=l(),s4=a("li"),Dme=a("strong"),SIo=o("fnet"),RIo=o(" \u2014 "),lO=a("a"),PIo=o("FNetForNextSentencePrediction"),BIo=o(" (FNet model)"),IIo=l(),l4=a("li"),Gme=a("strong"),qIo=o("megatron-bert"),NIo=o(" \u2014 "),iO=a("a"),jIo=o("MegatronBertForNextSentencePrediction"),DIo=o(" (MegatronBert model)"),GIo=l(),i4=a("li"),Ome=a("strong"),OIo=o("mobilebert"),VIo=o(" \u2014 "),dO=a("a"),XIo=o("MobileBertForNextSentencePrediction"),zIo=o(" (MobileBERT model)"),WIo=l(),d4=a("li"),Vme=a("strong"),QIo=o("qdqbert"),HIo=o(" \u2014 "),cO=a("a"),UIo=o("QDQBertForNextSentencePrediction"),JIo=o(" (QDQBert model)"),YIo=l(),c4=a("p"),KIo=o("The model is set in evaluation mode by default using "),Xme=a("code"),ZIo=o("model.eval()"),eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),oqo=o("model.train()"),rqo=l(),F(f4.$$.fragment),Fqe=l(),Hi=a("h2"),m4=a("a"),Wme=a("span"),F(CL.$$.fragment),tqo=l(),Qme=a("span"),aqo=o("AutoModelForTokenClassification"),Tqe=l(),Io=a("div"),F(wL.$$.fragment),nqo=l(),Ui=a("p"),sqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fO=a("a"),lqo=o("from_pretrained()"),iqo=o(" class method or the "),mO=a("a"),dqo=o("from_config()"),cqo=o(` class
method.`),fqo=l(),AL=a("p"),mqo=o("This class cannot be instantiated directly using "),Hme=a("code"),gqo=o("__init__()"),hqo=o(" (throws an error)."),pqo=l(),ft=a("div"),F(yL.$$.fragment),_qo=l(),Ume=a("p"),uqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bqo=l(),Ji=a("p"),vqo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),Fqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),Mqo=o("from_pretrained()"),Eqo=o(" to load the model weights."),Cqo=l(),F(g4.$$.fragment),wqo=l(),ao=a("div"),F(LL.$$.fragment),Aqo=l(),Yme=a("p"),yqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lqo=l(),Ia=a("p"),xqo=o("The model class to instantiate is selected based on the "),Kme=a("code"),$qo=o("model_type"),kqo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),Sqo=o("pretrained_model_name_or_path"),Rqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),Pqo=o("pretrained_model_name_or_path"),Bqo=o(":"),Iqo=l(),U=a("ul"),h4=a("li"),oge=a("strong"),qqo=o("albert"),Nqo=o(" \u2014 "),hO=a("a"),jqo=o("AlbertForTokenClassification"),Dqo=o(" (ALBERT model)"),Gqo=l(),p4=a("li"),rge=a("strong"),Oqo=o("bert"),Vqo=o(" \u2014 "),pO=a("a"),Xqo=o("BertForTokenClassification"),zqo=o(" (BERT model)"),Wqo=l(),_4=a("li"),tge=a("strong"),Qqo=o("big_bird"),Hqo=o(" \u2014 "),_O=a("a"),Uqo=o("BigBirdForTokenClassification"),Jqo=o(" (BigBird model)"),Yqo=l(),u4=a("li"),age=a("strong"),Kqo=o("camembert"),Zqo=o(" \u2014 "),uO=a("a"),eNo=o("CamembertForTokenClassification"),oNo=o(" (CamemBERT model)"),rNo=l(),b4=a("li"),nge=a("strong"),tNo=o("canine"),aNo=o(" \u2014 "),bO=a("a"),nNo=o("CanineForTokenClassification"),sNo=o(" (Canine model)"),lNo=l(),v4=a("li"),sge=a("strong"),iNo=o("convbert"),dNo=o(" \u2014 "),vO=a("a"),cNo=o("ConvBertForTokenClassification"),fNo=o(" (ConvBERT model)"),mNo=l(),F4=a("li"),lge=a("strong"),gNo=o("data2vec-text"),hNo=o(" \u2014 "),FO=a("a"),pNo=o("Data2VecTextForTokenClassification"),_No=o(" (Data2VecText model)"),uNo=l(),T4=a("li"),ige=a("strong"),bNo=o("deberta"),vNo=o(" \u2014 "),TO=a("a"),FNo=o("DebertaForTokenClassification"),TNo=o(" (DeBERTa model)"),MNo=l(),M4=a("li"),dge=a("strong"),ENo=o("deberta-v2"),CNo=o(" \u2014 "),MO=a("a"),wNo=o("DebertaV2ForTokenClassification"),ANo=o(" (DeBERTa-v2 model)"),yNo=l(),E4=a("li"),cge=a("strong"),LNo=o("distilbert"),xNo=o(" \u2014 "),EO=a("a"),$No=o("DistilBertForTokenClassification"),kNo=o(" (DistilBERT model)"),SNo=l(),C4=a("li"),fge=a("strong"),RNo=o("electra"),PNo=o(" \u2014 "),CO=a("a"),BNo=o("ElectraForTokenClassification"),INo=o(" (ELECTRA model)"),qNo=l(),w4=a("li"),mge=a("strong"),NNo=o("flaubert"),jNo=o(" \u2014 "),wO=a("a"),DNo=o("FlaubertForTokenClassification"),GNo=o(" (FlauBERT model)"),ONo=l(),A4=a("li"),gge=a("strong"),VNo=o("fnet"),XNo=o(" \u2014 "),AO=a("a"),zNo=o("FNetForTokenClassification"),WNo=o(" (FNet model)"),QNo=l(),y4=a("li"),hge=a("strong"),HNo=o("funnel"),UNo=o(" \u2014 "),yO=a("a"),JNo=o("FunnelForTokenClassification"),YNo=o(" (Funnel Transformer model)"),KNo=l(),L4=a("li"),pge=a("strong"),ZNo=o("gpt2"),ejo=o(" \u2014 "),LO=a("a"),ojo=o("GPT2ForTokenClassification"),rjo=o(" (OpenAI GPT-2 model)"),tjo=l(),x4=a("li"),_ge=a("strong"),ajo=o("ibert"),njo=o(" \u2014 "),xO=a("a"),sjo=o("IBertForTokenClassification"),ljo=o(" (I-BERT model)"),ijo=l(),$4=a("li"),uge=a("strong"),djo=o("layoutlm"),cjo=o(" \u2014 "),$O=a("a"),fjo=o("LayoutLMForTokenClassification"),mjo=o(" (LayoutLM model)"),gjo=l(),k4=a("li"),bge=a("strong"),hjo=o("layoutlmv2"),pjo=o(" \u2014 "),kO=a("a"),_jo=o("LayoutLMv2ForTokenClassification"),ujo=o(" (LayoutLMv2 model)"),bjo=l(),S4=a("li"),vge=a("strong"),vjo=o("longformer"),Fjo=o(" \u2014 "),SO=a("a"),Tjo=o("LongformerForTokenClassification"),Mjo=o(" (Longformer model)"),Ejo=l(),R4=a("li"),Fge=a("strong"),Cjo=o("megatron-bert"),wjo=o(" \u2014 "),RO=a("a"),Ajo=o("MegatronBertForTokenClassification"),yjo=o(" (MegatronBert model)"),Ljo=l(),P4=a("li"),Tge=a("strong"),xjo=o("mobilebert"),$jo=o(" \u2014 "),PO=a("a"),kjo=o("MobileBertForTokenClassification"),Sjo=o(" (MobileBERT model)"),Rjo=l(),B4=a("li"),Mge=a("strong"),Pjo=o("mpnet"),Bjo=o(" \u2014 "),BO=a("a"),Ijo=o("MPNetForTokenClassification"),qjo=o(" (MPNet model)"),Njo=l(),I4=a("li"),Ege=a("strong"),jjo=o("nystromformer"),Djo=o(" \u2014 "),IO=a("a"),Gjo=o("NystromformerForTokenClassification"),Ojo=o(" (Nystromformer model)"),Vjo=l(),q4=a("li"),Cge=a("strong"),Xjo=o("qdqbert"),zjo=o(" \u2014 "),qO=a("a"),Wjo=o("QDQBertForTokenClassification"),Qjo=o(" (QDQBert model)"),Hjo=l(),N4=a("li"),wge=a("strong"),Ujo=o("rembert"),Jjo=o(" \u2014 "),NO=a("a"),Yjo=o("RemBertForTokenClassification"),Kjo=o(" (RemBERT model)"),Zjo=l(),j4=a("li"),Age=a("strong"),eDo=o("roberta"),oDo=o(" \u2014 "),jO=a("a"),rDo=o("RobertaForTokenClassification"),tDo=o(" (RoBERTa model)"),aDo=l(),D4=a("li"),yge=a("strong"),nDo=o("roformer"),sDo=o(" \u2014 "),DO=a("a"),lDo=o("RoFormerForTokenClassification"),iDo=o(" (RoFormer model)"),dDo=l(),G4=a("li"),Lge=a("strong"),cDo=o("squeezebert"),fDo=o(" \u2014 "),GO=a("a"),mDo=o("SqueezeBertForTokenClassification"),gDo=o(" (SqueezeBERT model)"),hDo=l(),O4=a("li"),xge=a("strong"),pDo=o("xlm"),_Do=o(" \u2014 "),OO=a("a"),uDo=o("XLMForTokenClassification"),bDo=o(" (XLM model)"),vDo=l(),V4=a("li"),$ge=a("strong"),FDo=o("xlm-roberta"),TDo=o(" \u2014 "),VO=a("a"),MDo=o("XLMRobertaForTokenClassification"),EDo=o(" (XLM-RoBERTa model)"),CDo=l(),X4=a("li"),kge=a("strong"),wDo=o("xlm-roberta-xl"),ADo=o(" \u2014 "),XO=a("a"),yDo=o("XLMRobertaXLForTokenClassification"),LDo=o(" (XLM-RoBERTa-XL model)"),xDo=l(),z4=a("li"),Sge=a("strong"),$Do=o("xlnet"),kDo=o(" \u2014 "),zO=a("a"),SDo=o("XLNetForTokenClassification"),RDo=o(" (XLNet model)"),PDo=l(),W4=a("li"),Rge=a("strong"),BDo=o("yoso"),IDo=o(" \u2014 "),WO=a("a"),qDo=o("YosoForTokenClassification"),NDo=o(" (YOSO model)"),jDo=l(),Q4=a("p"),DDo=o("The model is set in evaluation mode by default using "),Pge=a("code"),GDo=o("model.eval()"),ODo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),VDo=o("model.train()"),XDo=l(),F(H4.$$.fragment),Mqe=l(),Yi=a("h2"),U4=a("a"),Ige=a("span"),F(xL.$$.fragment),zDo=l(),qge=a("span"),WDo=o("AutoModelForQuestionAnswering"),Eqe=l(),qo=a("div"),F($L.$$.fragment),QDo=l(),Ki=a("p"),HDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QO=a("a"),UDo=o("from_pretrained()"),JDo=o(" class method or the "),HO=a("a"),YDo=o("from_config()"),KDo=o(` class
method.`),ZDo=l(),kL=a("p"),eGo=o("This class cannot be instantiated directly using "),Nge=a("code"),oGo=o("__init__()"),rGo=o(" (throws an error)."),tGo=l(),mt=a("div"),F(SL.$$.fragment),aGo=l(),jge=a("p"),nGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sGo=l(),Zi=a("p"),lGo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),iGo=o("not"),dGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),cGo=o("from_pretrained()"),fGo=o(" to load the model weights."),mGo=l(),F(J4.$$.fragment),gGo=l(),no=a("div"),F(RL.$$.fragment),hGo=l(),Gge=a("p"),pGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Go=l(),qa=a("p"),uGo=o("The model class to instantiate is selected based on the "),Oge=a("code"),bGo=o("model_type"),vGo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),MGo=o("pretrained_model_name_or_path"),EGo=o(":"),CGo=l(),V=a("ul"),Y4=a("li"),zge=a("strong"),wGo=o("albert"),AGo=o(" \u2014 "),JO=a("a"),yGo=o("AlbertForQuestionAnswering"),LGo=o(" (ALBERT model)"),xGo=l(),K4=a("li"),Wge=a("strong"),$Go=o("bart"),kGo=o(" \u2014 "),YO=a("a"),SGo=o("BartForQuestionAnswering"),RGo=o(" (BART model)"),PGo=l(),Z4=a("li"),Qge=a("strong"),BGo=o("bert"),IGo=o(" \u2014 "),KO=a("a"),qGo=o("BertForQuestionAnswering"),NGo=o(" (BERT model)"),jGo=l(),e5=a("li"),Hge=a("strong"),DGo=o("big_bird"),GGo=o(" \u2014 "),ZO=a("a"),OGo=o("BigBirdForQuestionAnswering"),VGo=o(" (BigBird model)"),XGo=l(),o5=a("li"),Uge=a("strong"),zGo=o("bigbird_pegasus"),WGo=o(" \u2014 "),eV=a("a"),QGo=o("BigBirdPegasusForQuestionAnswering"),HGo=o(" (BigBirdPegasus model)"),UGo=l(),r5=a("li"),Jge=a("strong"),JGo=o("camembert"),YGo=o(" \u2014 "),oV=a("a"),KGo=o("CamembertForQuestionAnswering"),ZGo=o(" (CamemBERT model)"),eOo=l(),t5=a("li"),Yge=a("strong"),oOo=o("canine"),rOo=o(" \u2014 "),rV=a("a"),tOo=o("CanineForQuestionAnswering"),aOo=o(" (Canine model)"),nOo=l(),a5=a("li"),Kge=a("strong"),sOo=o("convbert"),lOo=o(" \u2014 "),tV=a("a"),iOo=o("ConvBertForQuestionAnswering"),dOo=o(" (ConvBERT model)"),cOo=l(),n5=a("li"),Zge=a("strong"),fOo=o("data2vec-text"),mOo=o(" \u2014 "),aV=a("a"),gOo=o("Data2VecTextForQuestionAnswering"),hOo=o(" (Data2VecText model)"),pOo=l(),s5=a("li"),ehe=a("strong"),_Oo=o("deberta"),uOo=o(" \u2014 "),nV=a("a"),bOo=o("DebertaForQuestionAnswering"),vOo=o(" (DeBERTa model)"),FOo=l(),l5=a("li"),ohe=a("strong"),TOo=o("deberta-v2"),MOo=o(" \u2014 "),sV=a("a"),EOo=o("DebertaV2ForQuestionAnswering"),COo=o(" (DeBERTa-v2 model)"),wOo=l(),i5=a("li"),rhe=a("strong"),AOo=o("distilbert"),yOo=o(" \u2014 "),lV=a("a"),LOo=o("DistilBertForQuestionAnswering"),xOo=o(" (DistilBERT model)"),$Oo=l(),d5=a("li"),the=a("strong"),kOo=o("electra"),SOo=o(" \u2014 "),iV=a("a"),ROo=o("ElectraForQuestionAnswering"),POo=o(" (ELECTRA model)"),BOo=l(),c5=a("li"),ahe=a("strong"),IOo=o("flaubert"),qOo=o(" \u2014 "),dV=a("a"),NOo=o("FlaubertForQuestionAnsweringSimple"),jOo=o(" (FlauBERT model)"),DOo=l(),f5=a("li"),nhe=a("strong"),GOo=o("fnet"),OOo=o(" \u2014 "),cV=a("a"),VOo=o("FNetForQuestionAnswering"),XOo=o(" (FNet model)"),zOo=l(),m5=a("li"),she=a("strong"),WOo=o("funnel"),QOo=o(" \u2014 "),fV=a("a"),HOo=o("FunnelForQuestionAnswering"),UOo=o(" (Funnel Transformer model)"),JOo=l(),g5=a("li"),lhe=a("strong"),YOo=o("gptj"),KOo=o(" \u2014 "),mV=a("a"),ZOo=o("GPTJForQuestionAnswering"),eVo=o(" (GPT-J model)"),oVo=l(),h5=a("li"),ihe=a("strong"),rVo=o("ibert"),tVo=o(" \u2014 "),gV=a("a"),aVo=o("IBertForQuestionAnswering"),nVo=o(" (I-BERT model)"),sVo=l(),p5=a("li"),dhe=a("strong"),lVo=o("layoutlmv2"),iVo=o(" \u2014 "),hV=a("a"),dVo=o("LayoutLMv2ForQuestionAnswering"),cVo=o(" (LayoutLMv2 model)"),fVo=l(),_5=a("li"),che=a("strong"),mVo=o("led"),gVo=o(" \u2014 "),pV=a("a"),hVo=o("LEDForQuestionAnswering"),pVo=o(" (LED model)"),_Vo=l(),u5=a("li"),fhe=a("strong"),uVo=o("longformer"),bVo=o(" \u2014 "),_V=a("a"),vVo=o("LongformerForQuestionAnswering"),FVo=o(" (Longformer model)"),TVo=l(),b5=a("li"),mhe=a("strong"),MVo=o("lxmert"),EVo=o(" \u2014 "),uV=a("a"),CVo=o("LxmertForQuestionAnswering"),wVo=o(" (LXMERT model)"),AVo=l(),v5=a("li"),ghe=a("strong"),yVo=o("mbart"),LVo=o(" \u2014 "),bV=a("a"),xVo=o("MBartForQuestionAnswering"),$Vo=o(" (mBART model)"),kVo=l(),F5=a("li"),hhe=a("strong"),SVo=o("megatron-bert"),RVo=o(" \u2014 "),vV=a("a"),PVo=o("MegatronBertForQuestionAnswering"),BVo=o(" (MegatronBert model)"),IVo=l(),T5=a("li"),phe=a("strong"),qVo=o("mobilebert"),NVo=o(" \u2014 "),FV=a("a"),jVo=o("MobileBertForQuestionAnswering"),DVo=o(" (MobileBERT model)"),GVo=l(),M5=a("li"),_he=a("strong"),OVo=o("mpnet"),VVo=o(" \u2014 "),TV=a("a"),XVo=o("MPNetForQuestionAnswering"),zVo=o(" (MPNet model)"),WVo=l(),E5=a("li"),uhe=a("strong"),QVo=o("nystromformer"),HVo=o(" \u2014 "),MV=a("a"),UVo=o("NystromformerForQuestionAnswering"),JVo=o(" (Nystromformer model)"),YVo=l(),C5=a("li"),bhe=a("strong"),KVo=o("qdqbert"),ZVo=o(" \u2014 "),EV=a("a"),eXo=o("QDQBertForQuestionAnswering"),oXo=o(" (QDQBert model)"),rXo=l(),w5=a("li"),vhe=a("strong"),tXo=o("reformer"),aXo=o(" \u2014 "),CV=a("a"),nXo=o("ReformerForQuestionAnswering"),sXo=o(" (Reformer model)"),lXo=l(),A5=a("li"),Fhe=a("strong"),iXo=o("rembert"),dXo=o(" \u2014 "),wV=a("a"),cXo=o("RemBertForQuestionAnswering"),fXo=o(" (RemBERT model)"),mXo=l(),y5=a("li"),The=a("strong"),gXo=o("roberta"),hXo=o(" \u2014 "),AV=a("a"),pXo=o("RobertaForQuestionAnswering"),_Xo=o(" (RoBERTa model)"),uXo=l(),L5=a("li"),Mhe=a("strong"),bXo=o("roformer"),vXo=o(" \u2014 "),yV=a("a"),FXo=o("RoFormerForQuestionAnswering"),TXo=o(" (RoFormer model)"),MXo=l(),x5=a("li"),Ehe=a("strong"),EXo=o("splinter"),CXo=o(" \u2014 "),LV=a("a"),wXo=o("SplinterForQuestionAnswering"),AXo=o(" (Splinter model)"),yXo=l(),$5=a("li"),Che=a("strong"),LXo=o("squeezebert"),xXo=o(" \u2014 "),xV=a("a"),$Xo=o("SqueezeBertForQuestionAnswering"),kXo=o(" (SqueezeBERT model)"),SXo=l(),k5=a("li"),whe=a("strong"),RXo=o("xlm"),PXo=o(" \u2014 "),$V=a("a"),BXo=o("XLMForQuestionAnsweringSimple"),IXo=o(" (XLM model)"),qXo=l(),S5=a("li"),Ahe=a("strong"),NXo=o("xlm-roberta"),jXo=o(" \u2014 "),kV=a("a"),DXo=o("XLMRobertaForQuestionAnswering"),GXo=o(" (XLM-RoBERTa model)"),OXo=l(),R5=a("li"),yhe=a("strong"),VXo=o("xlm-roberta-xl"),XXo=o(" \u2014 "),SV=a("a"),zXo=o("XLMRobertaXLForQuestionAnswering"),WXo=o(" (XLM-RoBERTa-XL model)"),QXo=l(),P5=a("li"),Lhe=a("strong"),HXo=o("xlnet"),UXo=o(" \u2014 "),RV=a("a"),JXo=o("XLNetForQuestionAnsweringSimple"),YXo=o(" (XLNet model)"),KXo=l(),B5=a("li"),xhe=a("strong"),ZXo=o("yoso"),ezo=o(" \u2014 "),PV=a("a"),ozo=o("YosoForQuestionAnswering"),rzo=o(" (YOSO model)"),tzo=l(),I5=a("p"),azo=o("The model is set in evaluation mode by default using "),$he=a("code"),nzo=o("model.eval()"),szo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),lzo=o("model.train()"),izo=l(),F(q5.$$.fragment),Cqe=l(),ed=a("h2"),N5=a("a"),She=a("span"),F(PL.$$.fragment),dzo=l(),Rhe=a("span"),czo=o("AutoModelForTableQuestionAnswering"),wqe=l(),No=a("div"),F(BL.$$.fragment),fzo=l(),od=a("p"),mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BV=a("a"),gzo=o("from_pretrained()"),hzo=o(" class method or the "),IV=a("a"),pzo=o("from_config()"),_zo=o(` class
method.`),uzo=l(),IL=a("p"),bzo=o("This class cannot be instantiated directly using "),Phe=a("code"),vzo=o("__init__()"),Fzo=o(" (throws an error)."),Tzo=l(),gt=a("div"),F(qL.$$.fragment),Mzo=l(),Bhe=a("p"),Ezo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Czo=l(),rd=a("p"),wzo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),Azo=o("not"),yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),Lzo=o("from_pretrained()"),xzo=o(" to load the model weights."),$zo=l(),F(j5.$$.fragment),kzo=l(),so=a("div"),F(NL.$$.fragment),Szo=l(),qhe=a("p"),Rzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pzo=l(),Na=a("p"),Bzo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),Izo=o("model_type"),qzo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),Nzo=o("pretrained_model_name_or_path"),jzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),Dzo=o("pretrained_model_name_or_path"),Gzo=o(":"),Ozo=l(),Ghe=a("ul"),D5=a("li"),Ohe=a("strong"),Vzo=o("tapas"),Xzo=o(" \u2014 "),NV=a("a"),zzo=o("TapasForQuestionAnswering"),Wzo=o(" (TAPAS model)"),Qzo=l(),G5=a("p"),Hzo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),Uzo=o("model.eval()"),Jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),Yzo=o("model.train()"),Kzo=l(),F(O5.$$.fragment),Aqe=l(),td=a("h2"),V5=a("a"),zhe=a("span"),F(jL.$$.fragment),Zzo=l(),Whe=a("span"),eWo=o("AutoModelForImageClassification"),yqe=l(),jo=a("div"),F(DL.$$.fragment),oWo=l(),ad=a("p"),rWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=a("a"),tWo=o("from_pretrained()"),aWo=o(" class method or the "),DV=a("a"),nWo=o("from_config()"),sWo=o(` class
method.`),lWo=l(),GL=a("p"),iWo=o("This class cannot be instantiated directly using "),Qhe=a("code"),dWo=o("__init__()"),cWo=o(" (throws an error)."),fWo=l(),ht=a("div"),F(OL.$$.fragment),mWo=l(),Hhe=a("p"),gWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hWo=l(),nd=a("p"),pWo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),_Wo=o("not"),uWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),bWo=o("from_pretrained()"),vWo=o(" to load the model weights."),FWo=l(),F(X5.$$.fragment),TWo=l(),lo=a("div"),F(VL.$$.fragment),MWo=l(),Jhe=a("p"),EWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CWo=l(),ja=a("p"),wWo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),AWo=o("model_type"),yWo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),LWo=o("pretrained_model_name_or_path"),xWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),$Wo=o("pretrained_model_name_or_path"),kWo=o(":"),SWo=l(),Fe=a("ul"),z5=a("li"),epe=a("strong"),RWo=o("beit"),PWo=o(" \u2014 "),OV=a("a"),BWo=o("BeitForImageClassification"),IWo=o(" (BEiT model)"),qWo=l(),W5=a("li"),ope=a("strong"),NWo=o("convnext"),jWo=o(" \u2014 "),VV=a("a"),DWo=o("ConvNextForImageClassification"),GWo=o(" (ConvNext model)"),OWo=l(),Q5=a("li"),rpe=a("strong"),VWo=o("data2vec-vision"),XWo=o(" \u2014 "),XV=a("a"),zWo=o("Data2VecVisionForImageClassification"),WWo=o(" (Data2VecVision model)"),QWo=l(),Ps=a("li"),tpe=a("strong"),HWo=o("deit"),UWo=o(" \u2014 "),zV=a("a"),JWo=o("DeiTForImageClassification"),YWo=o(" or "),WV=a("a"),KWo=o("DeiTForImageClassificationWithTeacher"),ZWo=o(" (DeiT model)"),eQo=l(),H5=a("li"),ape=a("strong"),oQo=o("imagegpt"),rQo=o(" \u2014 "),QV=a("a"),tQo=o("ImageGPTForImageClassification"),aQo=o(" (ImageGPT model)"),nQo=l(),pt=a("li"),npe=a("strong"),sQo=o("perceiver"),lQo=o(" \u2014 "),HV=a("a"),iQo=o("PerceiverForImageClassificationLearned"),dQo=o(" or "),UV=a("a"),cQo=o("PerceiverForImageClassificationFourier"),fQo=o(" or "),JV=a("a"),mQo=o("PerceiverForImageClassificationConvProcessing"),gQo=o(" (Perceiver model)"),hQo=l(),U5=a("li"),spe=a("strong"),pQo=o("poolformer"),_Qo=o(" \u2014 "),YV=a("a"),uQo=o("PoolFormerForImageClassification"),bQo=o(" (PoolFormer model)"),vQo=l(),J5=a("li"),lpe=a("strong"),FQo=o("regnet"),TQo=o(" \u2014 "),KV=a("a"),MQo=o("RegNetForImageClassification"),EQo=o(" (RegNet model)"),CQo=l(),Y5=a("li"),ipe=a("strong"),wQo=o("resnet"),AQo=o(" \u2014 "),ZV=a("a"),yQo=o("ResNetForImageClassification"),LQo=o(" (ResNet model)"),xQo=l(),K5=a("li"),dpe=a("strong"),$Qo=o("segformer"),kQo=o(" \u2014 "),eX=a("a"),SQo=o("SegformerForImageClassification"),RQo=o(" (SegFormer model)"),PQo=l(),Z5=a("li"),cpe=a("strong"),BQo=o("swin"),IQo=o(" \u2014 "),oX=a("a"),qQo=o("SwinForImageClassification"),NQo=o(" (Swin model)"),jQo=l(),ev=a("li"),fpe=a("strong"),DQo=o("van"),GQo=o(" \u2014 "),rX=a("a"),OQo=o("VanForImageClassification"),VQo=o(" (VAN model)"),XQo=l(),ov=a("li"),mpe=a("strong"),zQo=o("vit"),WQo=o(" \u2014 "),tX=a("a"),QQo=o("ViTForImageClassification"),HQo=o(" (ViT model)"),UQo=l(),rv=a("p"),JQo=o("The model is set in evaluation mode by default using "),gpe=a("code"),YQo=o("model.eval()"),KQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),ZQo=o("model.train()"),eHo=l(),F(tv.$$.fragment),Lqe=l(),sd=a("h2"),av=a("a"),ppe=a("span"),F(XL.$$.fragment),oHo=l(),_pe=a("span"),rHo=o("AutoModelForVision2Seq"),xqe=l(),Do=a("div"),F(zL.$$.fragment),tHo=l(),ld=a("p"),aHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=a("a"),nHo=o("from_pretrained()"),sHo=o(" class method or the "),nX=a("a"),lHo=o("from_config()"),iHo=o(` class
method.`),dHo=l(),WL=a("p"),cHo=o("This class cannot be instantiated directly using "),upe=a("code"),fHo=o("__init__()"),mHo=o(" (throws an error)."),gHo=l(),_t=a("div"),F(QL.$$.fragment),hHo=l(),bpe=a("p"),pHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Ho=l(),id=a("p"),uHo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),bHo=o("not"),vHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),FHo=o("from_pretrained()"),THo=o(" to load the model weights."),MHo=l(),F(nv.$$.fragment),EHo=l(),io=a("div"),F(HL.$$.fragment),CHo=l(),Fpe=a("p"),wHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AHo=l(),Da=a("p"),yHo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),LHo=o("model_type"),xHo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),SHo=o("pretrained_model_name_or_path"),RHo=o(":"),PHo=l(),Cpe=a("ul"),sv=a("li"),wpe=a("strong"),BHo=o("vision-encoder-decoder"),IHo=o(" \u2014 "),lX=a("a"),qHo=o("VisionEncoderDecoderModel"),NHo=o(" (Vision Encoder decoder model)"),jHo=l(),lv=a("p"),DHo=o("The model is set in evaluation mode by default using "),Ape=a("code"),GHo=o("model.eval()"),OHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),VHo=o("model.train()"),XHo=l(),F(iv.$$.fragment),$qe=l(),dd=a("h2"),dv=a("a"),Lpe=a("span"),F(UL.$$.fragment),zHo=l(),xpe=a("span"),WHo=o("AutoModelForAudioClassification"),kqe=l(),Go=a("div"),F(JL.$$.fragment),QHo=l(),cd=a("p"),HHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=a("a"),UHo=o("from_pretrained()"),JHo=o(" class method or the "),dX=a("a"),YHo=o("from_config()"),KHo=o(` class
method.`),ZHo=l(),YL=a("p"),eUo=o("This class cannot be instantiated directly using "),$pe=a("code"),oUo=o("__init__()"),rUo=o(" (throws an error)."),tUo=l(),ut=a("div"),F(KL.$$.fragment),aUo=l(),kpe=a("p"),nUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sUo=l(),fd=a("p"),lUo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),iUo=o("not"),dUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),cUo=o("from_pretrained()"),fUo=o(" to load the model weights."),mUo=l(),F(cv.$$.fragment),gUo=l(),co=a("div"),F(ZL.$$.fragment),hUo=l(),Rpe=a("p"),pUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_Uo=l(),Ga=a("p"),uUo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),bUo=o("model_type"),vUo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),MUo=o("pretrained_model_name_or_path"),EUo=o(":"),CUo=l(),ke=a("ul"),fv=a("li"),qpe=a("strong"),wUo=o("data2vec-audio"),AUo=o(" \u2014 "),fX=a("a"),yUo=o("Data2VecAudioForSequenceClassification"),LUo=o(" (Data2VecAudio model)"),xUo=l(),mv=a("li"),Npe=a("strong"),$Uo=o("hubert"),kUo=o(" \u2014 "),mX=a("a"),SUo=o("HubertForSequenceClassification"),RUo=o(" (Hubert model)"),PUo=l(),gv=a("li"),jpe=a("strong"),BUo=o("sew"),IUo=o(" \u2014 "),gX=a("a"),qUo=o("SEWForSequenceClassification"),NUo=o(" (SEW model)"),jUo=l(),hv=a("li"),Dpe=a("strong"),DUo=o("sew-d"),GUo=o(" \u2014 "),hX=a("a"),OUo=o("SEWDForSequenceClassification"),VUo=o(" (SEW-D model)"),XUo=l(),pv=a("li"),Gpe=a("strong"),zUo=o("unispeech"),WUo=o(" \u2014 "),pX=a("a"),QUo=o("UniSpeechForSequenceClassification"),HUo=o(" (UniSpeech model)"),UUo=l(),_v=a("li"),Ope=a("strong"),JUo=o("unispeech-sat"),YUo=o(" \u2014 "),_X=a("a"),KUo=o("UniSpeechSatForSequenceClassification"),ZUo=o(" (UniSpeechSat model)"),eJo=l(),uv=a("li"),Vpe=a("strong"),oJo=o("wav2vec2"),rJo=o(" \u2014 "),uX=a("a"),tJo=o("Wav2Vec2ForSequenceClassification"),aJo=o(" (Wav2Vec2 model)"),nJo=l(),bv=a("li"),Xpe=a("strong"),sJo=o("wav2vec2-conformer"),lJo=o(" \u2014 "),bX=a("a"),iJo=o("Wav2Vec2ConformerForSequenceClassification"),dJo=o(" (Wav2Vec2-Conformer model)"),cJo=l(),vv=a("li"),zpe=a("strong"),fJo=o("wavlm"),mJo=o(" \u2014 "),vX=a("a"),gJo=o("WavLMForSequenceClassification"),hJo=o(" (WavLM model)"),pJo=l(),Fv=a("p"),_Jo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),uJo=o("model.eval()"),bJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),vJo=o("model.train()"),FJo=l(),F(Tv.$$.fragment),Sqe=l(),md=a("h2"),Mv=a("a"),Hpe=a("span"),F(e8.$$.fragment),TJo=l(),Upe=a("span"),MJo=o("AutoModelForAudioFrameClassification"),Rqe=l(),Oo=a("div"),F(o8.$$.fragment),EJo=l(),gd=a("p"),CJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=a("a"),wJo=o("from_pretrained()"),AJo=o(" class method or the "),TX=a("a"),yJo=o("from_config()"),LJo=o(` class
method.`),xJo=l(),r8=a("p"),$Jo=o("This class cannot be instantiated directly using "),Jpe=a("code"),kJo=o("__init__()"),SJo=o(" (throws an error)."),RJo=l(),bt=a("div"),F(t8.$$.fragment),PJo=l(),Ype=a("p"),BJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),IJo=l(),hd=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),NJo=o("not"),jJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),DJo=o("from_pretrained()"),GJo=o(" to load the model weights."),OJo=l(),F(Ev.$$.fragment),VJo=l(),fo=a("div"),F(a8.$$.fragment),XJo=l(),Zpe=a("p"),zJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),WJo=l(),Oa=a("p"),QJo=o("The model class to instantiate is selected based on the "),e_e=a("code"),HJo=o("model_type"),UJo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),JJo=o("pretrained_model_name_or_path"),YJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(":"),eYo=l(),Kr=a("ul"),Cv=a("li"),t_e=a("strong"),oYo=o("data2vec-audio"),rYo=o(" \u2014 "),EX=a("a"),tYo=o("Data2VecAudioForAudioFrameClassification"),aYo=o(" (Data2VecAudio model)"),nYo=l(),wv=a("li"),a_e=a("strong"),sYo=o("unispeech-sat"),lYo=o(" \u2014 "),CX=a("a"),iYo=o("UniSpeechSatForAudioFrameClassification"),dYo=o(" (UniSpeechSat model)"),cYo=l(),Av=a("li"),n_e=a("strong"),fYo=o("wav2vec2"),mYo=o(" \u2014 "),wX=a("a"),gYo=o("Wav2Vec2ForAudioFrameClassification"),hYo=o(" (Wav2Vec2 model)"),pYo=l(),yv=a("li"),s_e=a("strong"),_Yo=o("wav2vec2-conformer"),uYo=o(" \u2014 "),AX=a("a"),bYo=o("Wav2Vec2ConformerForAudioFrameClassification"),vYo=o(" (Wav2Vec2-Conformer model)"),FYo=l(),Lv=a("li"),l_e=a("strong"),TYo=o("wavlm"),MYo=o(" \u2014 "),yX=a("a"),EYo=o("WavLMForAudioFrameClassification"),CYo=o(" (WavLM model)"),wYo=l(),xv=a("p"),AYo=o("The model is set in evaluation mode by default using "),i_e=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),xYo=o("model.train()"),$Yo=l(),F($v.$$.fragment),Pqe=l(),pd=a("h2"),kv=a("a"),c_e=a("span"),F(n8.$$.fragment),kYo=l(),f_e=a("span"),SYo=o("AutoModelForCTC"),Bqe=l(),Vo=a("div"),F(s8.$$.fragment),RYo=l(),_d=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),xX=a("a"),qYo=o("from_config()"),NYo=o(` class
method.`),jYo=l(),l8=a("p"),DYo=o("This class cannot be instantiated directly using "),m_e=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),vt=a("div"),F(i8.$$.fragment),XYo=l(),g_e=a("p"),zYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),WYo=l(),ud=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(Sv.$$.fragment),ZYo=l(),mo=a("div"),F(d8.$$.fragment),eKo=l(),p_e=a("p"),oKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rKo=l(),Va=a("p"),tKo=o("The model class to instantiate is selected based on the "),__e=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),Se=a("ul"),Rv=a("li"),v_e=a("strong"),fKo=o("data2vec-audio"),mKo=o(" \u2014 "),kX=a("a"),gKo=o("Data2VecAudioForCTC"),hKo=o(" (Data2VecAudio model)"),pKo=l(),Pv=a("li"),F_e=a("strong"),_Ko=o("hubert"),uKo=o(" \u2014 "),SX=a("a"),bKo=o("HubertForCTC"),vKo=o(" (Hubert model)"),FKo=l(),Bv=a("li"),T_e=a("strong"),TKo=o("sew"),MKo=o(" \u2014 "),RX=a("a"),EKo=o("SEWForCTC"),CKo=o(" (SEW model)"),wKo=l(),Iv=a("li"),M_e=a("strong"),AKo=o("sew-d"),yKo=o(" \u2014 "),PX=a("a"),LKo=o("SEWDForCTC"),xKo=o(" (SEW-D model)"),$Ko=l(),qv=a("li"),E_e=a("strong"),kKo=o("unispeech"),SKo=o(" \u2014 "),BX=a("a"),RKo=o("UniSpeechForCTC"),PKo=o(" (UniSpeech model)"),BKo=l(),Nv=a("li"),C_e=a("strong"),IKo=o("unispeech-sat"),qKo=o(" \u2014 "),IX=a("a"),NKo=o("UniSpeechSatForCTC"),jKo=o(" (UniSpeechSat model)"),DKo=l(),jv=a("li"),w_e=a("strong"),GKo=o("wav2vec2"),OKo=o(" \u2014 "),qX=a("a"),VKo=o("Wav2Vec2ForCTC"),XKo=o(" (Wav2Vec2 model)"),zKo=l(),Dv=a("li"),A_e=a("strong"),WKo=o("wav2vec2-conformer"),QKo=o(" \u2014 "),NX=a("a"),HKo=o("Wav2Vec2ConformerForCTC"),UKo=o(" (Wav2Vec2-Conformer model)"),JKo=l(),Gv=a("li"),y_e=a("strong"),YKo=o("wavlm"),KKo=o(" \u2014 "),jX=a("a"),ZKo=o("WavLMForCTC"),eZo=o(" (WavLM model)"),oZo=l(),Ov=a("p"),rZo=o("The model is set in evaluation mode by default using "),L_e=a("code"),tZo=o("model.eval()"),aZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),nZo=o("model.train()"),sZo=l(),F(Vv.$$.fragment),Iqe=l(),bd=a("h2"),Xv=a("a"),$_e=a("span"),F(c8.$$.fragment),lZo=l(),k_e=a("span"),iZo=o("AutoModelForSpeechSeq2Seq"),qqe=l(),Xo=a("div"),F(f8.$$.fragment),dZo=l(),vd=a("p"),cZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=a("a"),fZo=o("from_pretrained()"),mZo=o(" class method or the "),GX=a("a"),gZo=o("from_config()"),hZo=o(` class
method.`),pZo=l(),m8=a("p"),_Zo=o("This class cannot be instantiated directly using "),S_e=a("code"),uZo=o("__init__()"),bZo=o(" (throws an error)."),vZo=l(),Ft=a("div"),F(g8.$$.fragment),FZo=l(),R_e=a("p"),TZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),MZo=l(),Fd=a("p"),EZo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),CZo=o("not"),wZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),AZo=o("from_pretrained()"),yZo=o(" to load the model weights."),LZo=l(),F(zv.$$.fragment),xZo=l(),go=a("div"),F(h8.$$.fragment),$Zo=l(),B_e=a("p"),kZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SZo=l(),Xa=a("p"),RZo=o("The model class to instantiate is selected based on the "),I_e=a("code"),PZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),NZo=o("pretrained_model_name_or_path"),jZo=o(":"),DZo=l(),p8=a("ul"),Wv=a("li"),j_e=a("strong"),GZo=o("speech-encoder-decoder"),OZo=o(" \u2014 "),VX=a("a"),VZo=o("SpeechEncoderDecoderModel"),XZo=o(" (Speech Encoder decoder model)"),zZo=l(),Qv=a("li"),D_e=a("strong"),WZo=o("speech_to_text"),QZo=o(" \u2014 "),XX=a("a"),HZo=o("Speech2TextForConditionalGeneration"),UZo=o(" (Speech2Text model)"),JZo=l(),Hv=a("p"),YZo=o("The model is set in evaluation mode by default using "),G_e=a("code"),KZo=o("model.eval()"),ZZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),eer=o("model.train()"),oer=l(),F(Uv.$$.fragment),Nqe=l(),Td=a("h2"),Jv=a("a"),V_e=a("span"),F(_8.$$.fragment),rer=l(),X_e=a("span"),ter=o("AutoModelForAudioXVector"),jqe=l(),zo=a("div"),F(u8.$$.fragment),aer=l(),Md=a("p"),ner=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=a("a"),ser=o("from_pretrained()"),ler=o(" class method or the "),WX=a("a"),ier=o("from_config()"),der=o(` class
method.`),cer=l(),b8=a("p"),fer=o("This class cannot be instantiated directly using "),z_e=a("code"),mer=o("__init__()"),ger=o(" (throws an error)."),her=l(),Tt=a("div"),F(v8.$$.fragment),per=l(),W_e=a("p"),_er=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),uer=l(),Ed=a("p"),ber=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),ver=o("not"),Fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Ter=o("from_pretrained()"),Mer=o(" to load the model weights."),Eer=l(),F(Yv.$$.fragment),Cer=l(),ho=a("div"),F(F8.$$.fragment),wer=l(),H_e=a("p"),Aer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yer=l(),za=a("p"),Ler=o("The model class to instantiate is selected based on the "),U_e=a("code"),xer=o("model_type"),$er=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),ker=o("pretrained_model_name_or_path"),Ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),Rer=o("pretrained_model_name_or_path"),Per=o(":"),Ber=l(),Zr=a("ul"),Kv=a("li"),K_e=a("strong"),Ier=o("data2vec-audio"),qer=o(" \u2014 "),HX=a("a"),Ner=o("Data2VecAudioForXVector"),jer=o(" (Data2VecAudio model)"),Der=l(),Zv=a("li"),Z_e=a("strong"),Ger=o("unispeech-sat"),Oer=o(" \u2014 "),UX=a("a"),Ver=o("UniSpeechSatForXVector"),Xer=o(" (UniSpeechSat model)"),zer=l(),e3=a("li"),eue=a("strong"),Wer=o("wav2vec2"),Qer=o(" \u2014 "),JX=a("a"),Her=o("Wav2Vec2ForXVector"),Uer=o(" (Wav2Vec2 model)"),Jer=l(),o3=a("li"),oue=a("strong"),Yer=o("wav2vec2-conformer"),Ker=o(" \u2014 "),YX=a("a"),Zer=o("Wav2Vec2ConformerForXVector"),eor=o(" (Wav2Vec2-Conformer model)"),oor=l(),r3=a("li"),rue=a("strong"),ror=o("wavlm"),tor=o(" \u2014 "),KX=a("a"),aor=o("WavLMForXVector"),nor=o(" (WavLM model)"),sor=l(),t3=a("p"),lor=o("The model is set in evaluation mode by default using "),tue=a("code"),ior=o("model.eval()"),dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),cor=o("model.train()"),mor=l(),F(a3.$$.fragment),Dqe=l(),Cd=a("h2"),n3=a("a"),nue=a("span"),F(T8.$$.fragment),gor=l(),sue=a("span"),hor=o("AutoModelForMaskedImageModeling"),Gqe=l(),Wo=a("div"),F(M8.$$.fragment),por=l(),wd=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=a("a"),uor=o("from_pretrained()"),bor=o(" class method or the "),ez=a("a"),vor=o("from_config()"),For=o(` class
method.`),Tor=l(),E8=a("p"),Mor=o("This class cannot be instantiated directly using "),lue=a("code"),Eor=o("__init__()"),Cor=o(" (throws an error)."),wor=l(),Mt=a("div"),F(C8.$$.fragment),Aor=l(),iue=a("p"),yor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Lor=l(),Ad=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),$or=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Sor=o("from_pretrained()"),Ror=o(" to load the model weights."),Por=l(),F(s3.$$.fragment),Bor=l(),po=a("div"),F(w8.$$.fragment),Ior=l(),cue=a("p"),qor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nor=l(),Wa=a("p"),jor=o("The model class to instantiate is selected based on the "),fue=a("code"),Dor=o("model_type"),Gor=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(":"),Wor=l(),yd=a("ul"),l3=a("li"),hue=a("strong"),Qor=o("deit"),Hor=o(" \u2014 "),rz=a("a"),Uor=o("DeiTForMaskedImageModeling"),Jor=o(" (DeiT model)"),Yor=l(),i3=a("li"),pue=a("strong"),Kor=o("swin"),Zor=o(" \u2014 "),tz=a("a"),err=o("SwinForMaskedImageModeling"),orr=o(" (Swin model)"),rrr=l(),d3=a("li"),_ue=a("strong"),trr=o("vit"),arr=o(" \u2014 "),az=a("a"),nrr=o("ViTForMaskedImageModeling"),srr=o(" (ViT model)"),lrr=l(),c3=a("p"),irr=o("The model is set in evaluation mode by default using "),uue=a("code"),drr=o("model.eval()"),crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=a("code"),frr=o("model.train()"),mrr=l(),F(f3.$$.fragment),Oqe=l(),Ld=a("h2"),m3=a("a"),vue=a("span"),F(A8.$$.fragment),grr=l(),Fue=a("span"),hrr=o("AutoModelForObjectDetection"),Vqe=l(),Qo=a("div"),F(y8.$$.fragment),prr=l(),xd=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=a("a"),urr=o("from_pretrained()"),brr=o(" class method or the "),sz=a("a"),vrr=o("from_config()"),Frr=o(` class
method.`),Trr=l(),L8=a("p"),Mrr=o("This class cannot be instantiated directly using "),Tue=a("code"),Err=o("__init__()"),Crr=o(" (throws an error)."),wrr=l(),Et=a("div"),F(x8.$$.fragment),Arr=l(),Mue=a("p"),yrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Lrr=l(),$d=a("p"),xrr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),$rr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Prr=l(),F(g3.$$.fragment),Brr=l(),_o=a("div"),F($8.$$.fragment),Irr=l(),Cue=a("p"),qrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Nrr=l(),Qa=a("p"),jrr=o("The model class to instantiate is selected based on the "),wue=a("code"),Drr=o("model_type"),Grr=o(` property of the config object (either
passed as an argument or loaded from `),Aue=a("code"),Orr=o("pretrained_model_name_or_path"),Vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),Xrr=o("pretrained_model_name_or_path"),zrr=o(":"),Wrr=l(),k8=a("ul"),h3=a("li"),Lue=a("strong"),Qrr=o("detr"),Hrr=o(" \u2014 "),iz=a("a"),Urr=o("DetrForObjectDetection"),Jrr=o(" (DETR model)"),Yrr=l(),p3=a("li"),xue=a("strong"),Krr=o("yolos"),Zrr=o(" \u2014 "),dz=a("a"),etr=o("YolosForObjectDetection"),otr=o(" (YOLOS model)"),rtr=l(),_3=a("p"),ttr=o("The model is set in evaluation mode by default using "),$ue=a("code"),atr=o("model.eval()"),ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=a("code"),str=o("model.train()"),ltr=l(),F(u3.$$.fragment),Xqe=l(),kd=a("h2"),b3=a("a"),Sue=a("span"),F(S8.$$.fragment),itr=l(),Rue=a("span"),dtr=o("AutoModelForImageSegmentation"),zqe=l(),Ho=a("div"),F(R8.$$.fragment),ctr=l(),Sd=a("p"),ftr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=a("a"),mtr=o("from_pretrained()"),gtr=o(" class method or the "),fz=a("a"),htr=o("from_config()"),ptr=o(` class
method.`),_tr=l(),P8=a("p"),utr=o("This class cannot be instantiated directly using "),Pue=a("code"),btr=o("__init__()"),vtr=o(" (throws an error)."),Ftr=l(),Ct=a("div"),F(B8.$$.fragment),Ttr=l(),Bue=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Etr=l(),Rd=a("p"),Ctr=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),ytr=o("from_pretrained()"),Ltr=o(" to load the model weights."),xtr=l(),F(v3.$$.fragment),$tr=l(),uo=a("div"),F(I8.$$.fragment),ktr=l(),que=a("p"),Str=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Rtr=l(),Ha=a("p"),Ptr=o("The model class to instantiate is selected based on the "),Nue=a("code"),Btr=o("model_type"),Itr=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),qtr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),jtr=o("pretrained_model_name_or_path"),Dtr=o(":"),Gtr=l(),Gue=a("ul"),F3=a("li"),Oue=a("strong"),Otr=o("detr"),Vtr=o(" \u2014 "),gz=a("a"),Xtr=o("DetrForSegmentation"),ztr=o(" (DETR model)"),Wtr=l(),T3=a("p"),Qtr=o("The model is set in evaluation mode by default using "),Vue=a("code"),Htr=o("model.eval()"),Utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),Jtr=o("model.train()"),Ytr=l(),F(M3.$$.fragment),Wqe=l(),Pd=a("h2"),E3=a("a"),zue=a("span"),F(q8.$$.fragment),Ktr=l(),Wue=a("span"),Ztr=o("AutoModelForSemanticSegmentation"),Qqe=l(),Uo=a("div"),F(N8.$$.fragment),ear=l(),Bd=a("p"),oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=a("a"),rar=o("from_pretrained()"),tar=o(" class method or the "),pz=a("a"),aar=o("from_config()"),nar=o(` class
method.`),sar=l(),j8=a("p"),lar=o("This class cannot be instantiated directly using "),Que=a("code"),iar=o("__init__()"),dar=o(" (throws an error)."),car=l(),wt=a("div"),F(D8.$$.fragment),far=l(),Hue=a("p"),mar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gar=l(),Id=a("p"),har=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),par=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),uar=o("from_pretrained()"),bar=o(" to load the model weights."),Far=l(),F(C3.$$.fragment),Tar=l(),bo=a("div"),F(G8.$$.fragment),Mar=l(),Jue=a("p"),Ear=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Car=l(),Ua=a("p"),war=o("The model class to instantiate is selected based on the "),Yue=a("code"),Aar=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(":"),Sar=l(),Ja=a("ul"),w3=a("li"),e1e=a("strong"),Rar=o("beit"),Par=o(" \u2014 "),uz=a("a"),Bar=o("BeitForSemanticSegmentation"),Iar=o(" (BEiT model)"),qar=l(),A3=a("li"),o1e=a("strong"),Nar=o("data2vec-vision"),jar=o(" \u2014 "),bz=a("a"),Dar=o("Data2VecVisionForSemanticSegmentation"),Gar=o(" (Data2VecVision model)"),Oar=l(),y3=a("li"),r1e=a("strong"),Var=o("dpt"),Xar=o(" \u2014 "),vz=a("a"),zar=o("DPTForSemanticSegmentation"),War=o(" (DPT model)"),Qar=l(),L3=a("li"),t1e=a("strong"),Har=o("segformer"),Uar=o(" \u2014 "),Fz=a("a"),Jar=o("SegformerForSemanticSegmentation"),Yar=o(" (SegFormer model)"),Kar=l(),x3=a("p"),Zar=o("The model is set in evaluation mode by default using "),a1e=a("code"),enr=o("model.eval()"),onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),rnr=o("model.train()"),tnr=l(),F($3.$$.fragment),Hqe=l(),qd=a("h2"),k3=a("a"),s1e=a("span"),F(O8.$$.fragment),anr=l(),l1e=a("span"),nnr=o("AutoModelForInstanceSegmentation"),Uqe=l(),Jo=a("div"),F(V8.$$.fragment),snr=l(),Nd=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),Mz=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),X8=a("p"),gnr=o("This class cannot be instantiated directly using "),i1e=a("code"),hnr=o("__init__()"),pnr=o(" (throws an error)."),_nr=l(),At=a("div"),F(z8.$$.fragment),unr=l(),d1e=a("p"),bnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vnr=l(),jd=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),F(S3.$$.fragment),Anr=l(),vo=a("div"),F(W8.$$.fragment),ynr=l(),f1e=a("p"),Lnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xnr=l(),Ya=a("p"),$nr=o("The model class to instantiate is selected based on the "),m1e=a("code"),knr=o("model_type"),Snr=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(":"),qnr=l(),p1e=a("ul"),R3=a("li"),_1e=a("strong"),Nnr=o("maskformer"),jnr=o(" \u2014 "),Cz=a("a"),Dnr=o("MaskFormerForInstanceSegmentation"),Gnr=o(" (MaskFormer model)"),Onr=l(),P3=a("p"),Vnr=o("The model is set in evaluation mode by default using "),u1e=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=a("code"),Wnr=o("model.train()"),Qnr=l(),F(B3.$$.fragment),Jqe=l(),Dd=a("h2"),I3=a("a"),v1e=a("span"),F(Q8.$$.fragment),Hnr=l(),F1e=a("span"),Unr=o("TFAutoModel"),Yqe=l(),Yo=a("div"),F(H8.$$.fragment),Jnr=l(),Gd=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),Az=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),U8=a("p"),tsr=o("This class cannot be instantiated directly using "),T1e=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),yt=a("div"),F(J8.$$.fragment),lsr=l(),M1e=a("p"),isr=o("Instantiates one of the base model classes of the library from a configuration."),dsr=l(),Od=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),fsr=o("not"),msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),psr=l(),F(q3.$$.fragment),_sr=l(),wr=a("div"),F(Y8.$$.fragment),usr=l(),C1e=a("p"),bsr=o("Instantiate one of the base model classes of the library from a pretrained model."),vsr=l(),Ka=a("p"),Fsr=o("The model class to instantiate is selected based on the "),w1e=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),ysr=l(),q=a("ul"),N3=a("li"),L1e=a("strong"),Lsr=o("albert"),xsr=o(" \u2014 "),Lz=a("a"),$sr=o("TFAlbertModel"),ksr=o(" (ALBERT model)"),Ssr=l(),j3=a("li"),x1e=a("strong"),Rsr=o("bart"),Psr=o(" \u2014 "),xz=a("a"),Bsr=o("TFBartModel"),Isr=o(" (BART model)"),qsr=l(),D3=a("li"),$1e=a("strong"),Nsr=o("bert"),jsr=o(" \u2014 "),$z=a("a"),Dsr=o("TFBertModel"),Gsr=o(" (BERT model)"),Osr=l(),G3=a("li"),k1e=a("strong"),Vsr=o("blenderbot"),Xsr=o(" \u2014 "),kz=a("a"),zsr=o("TFBlenderbotModel"),Wsr=o(" (Blenderbot model)"),Qsr=l(),O3=a("li"),S1e=a("strong"),Hsr=o("blenderbot-small"),Usr=o(" \u2014 "),Sz=a("a"),Jsr=o("TFBlenderbotSmallModel"),Ysr=o(" (BlenderbotSmall model)"),Ksr=l(),V3=a("li"),R1e=a("strong"),Zsr=o("camembert"),elr=o(" \u2014 "),Rz=a("a"),olr=o("TFCamembertModel"),rlr=o(" (CamemBERT model)"),tlr=l(),X3=a("li"),P1e=a("strong"),alr=o("clip"),nlr=o(" \u2014 "),Pz=a("a"),slr=o("TFCLIPModel"),llr=o(" (CLIP model)"),ilr=l(),z3=a("li"),B1e=a("strong"),dlr=o("convbert"),clr=o(" \u2014 "),Bz=a("a"),flr=o("TFConvBertModel"),mlr=o(" (ConvBERT model)"),glr=l(),W3=a("li"),I1e=a("strong"),hlr=o("convnext"),plr=o(" \u2014 "),Iz=a("a"),_lr=o("TFConvNextModel"),ulr=o(" (ConvNext model)"),blr=l(),Q3=a("li"),q1e=a("strong"),vlr=o("ctrl"),Flr=o(" \u2014 "),qz=a("a"),Tlr=o("TFCTRLModel"),Mlr=o(" (CTRL model)"),Elr=l(),H3=a("li"),N1e=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),Nz=a("a"),Alr=o("TFData2VecVisionModel"),ylr=o(" (Data2VecVision model)"),Llr=l(),U3=a("li"),j1e=a("strong"),xlr=o("deberta"),$lr=o(" \u2014 "),jz=a("a"),klr=o("TFDebertaModel"),Slr=o(" (DeBERTa model)"),Rlr=l(),J3=a("li"),D1e=a("strong"),Plr=o("deberta-v2"),Blr=o(" \u2014 "),Dz=a("a"),Ilr=o("TFDebertaV2Model"),qlr=o(" (DeBERTa-v2 model)"),Nlr=l(),Y3=a("li"),G1e=a("strong"),jlr=o("distilbert"),Dlr=o(" \u2014 "),Gz=a("a"),Glr=o("TFDistilBertModel"),Olr=o(" (DistilBERT model)"),Vlr=l(),K3=a("li"),O1e=a("strong"),Xlr=o("dpr"),zlr=o(" \u2014 "),Oz=a("a"),Wlr=o("TFDPRQuestionEncoder"),Qlr=o(" (DPR model)"),Hlr=l(),Z3=a("li"),V1e=a("strong"),Ulr=o("electra"),Jlr=o(" \u2014 "),Vz=a("a"),Ylr=o("TFElectraModel"),Klr=o(" (ELECTRA model)"),Zlr=l(),eF=a("li"),X1e=a("strong"),eir=o("flaubert"),oir=o(" \u2014 "),Xz=a("a"),rir=o("TFFlaubertModel"),tir=o(" (FlauBERT model)"),air=l(),Bs=a("li"),z1e=a("strong"),nir=o("funnel"),sir=o(" \u2014 "),zz=a("a"),lir=o("TFFunnelModel"),iir=o(" or "),Wz=a("a"),dir=o("TFFunnelBaseModel"),cir=o(" (Funnel Transformer model)"),fir=l(),oF=a("li"),W1e=a("strong"),mir=o("gpt2"),gir=o(" \u2014 "),Qz=a("a"),hir=o("TFGPT2Model"),pir=o(" (OpenAI GPT-2 model)"),_ir=l(),rF=a("li"),Q1e=a("strong"),uir=o("gptj"),bir=o(" \u2014 "),Hz=a("a"),vir=o("TFGPTJModel"),Fir=o(" (GPT-J model)"),Tir=l(),tF=a("li"),H1e=a("strong"),Mir=o("hubert"),Eir=o(" \u2014 "),Uz=a("a"),Cir=o("TFHubertModel"),wir=o(" (Hubert model)"),Air=l(),aF=a("li"),U1e=a("strong"),yir=o("layoutlm"),Lir=o(" \u2014 "),Jz=a("a"),xir=o("TFLayoutLMModel"),$ir=o(" (LayoutLM model)"),kir=l(),nF=a("li"),J1e=a("strong"),Sir=o("led"),Rir=o(" \u2014 "),Yz=a("a"),Pir=o("TFLEDModel"),Bir=o(" (LED model)"),Iir=l(),sF=a("li"),Y1e=a("strong"),qir=o("longformer"),Nir=o(" \u2014 "),Kz=a("a"),jir=o("TFLongformerModel"),Dir=o(" (Longformer model)"),Gir=l(),lF=a("li"),K1e=a("strong"),Oir=o("lxmert"),Vir=o(" \u2014 "),Zz=a("a"),Xir=o("TFLxmertModel"),zir=o(" (LXMERT model)"),Wir=l(),iF=a("li"),Z1e=a("strong"),Qir=o("marian"),Hir=o(" \u2014 "),eW=a("a"),Uir=o("TFMarianModel"),Jir=o(" (Marian model)"),Yir=l(),dF=a("li"),ebe=a("strong"),Kir=o("mbart"),Zir=o(" \u2014 "),oW=a("a"),edr=o("TFMBartModel"),odr=o(" (mBART model)"),rdr=l(),cF=a("li"),obe=a("strong"),tdr=o("mobilebert"),adr=o(" \u2014 "),rW=a("a"),ndr=o("TFMobileBertModel"),sdr=o(" (MobileBERT model)"),ldr=l(),fF=a("li"),rbe=a("strong"),idr=o("mpnet"),ddr=o(" \u2014 "),tW=a("a"),cdr=o("TFMPNetModel"),fdr=o(" (MPNet model)"),mdr=l(),mF=a("li"),tbe=a("strong"),gdr=o("mt5"),hdr=o(" \u2014 "),aW=a("a"),pdr=o("TFMT5Model"),_dr=o(" (mT5 model)"),udr=l(),gF=a("li"),abe=a("strong"),bdr=o("openai-gpt"),vdr=o(" \u2014 "),nW=a("a"),Fdr=o("TFOpenAIGPTModel"),Tdr=o(" (OpenAI GPT model)"),Mdr=l(),hF=a("li"),nbe=a("strong"),Edr=o("pegasus"),Cdr=o(" \u2014 "),sW=a("a"),wdr=o("TFPegasusModel"),Adr=o(" (Pegasus model)"),ydr=l(),pF=a("li"),sbe=a("strong"),Ldr=o("rembert"),xdr=o(" \u2014 "),lW=a("a"),$dr=o("TFRemBertModel"),kdr=o(" (RemBERT model)"),Sdr=l(),_F=a("li"),lbe=a("strong"),Rdr=o("roberta"),Pdr=o(" \u2014 "),iW=a("a"),Bdr=o("TFRobertaModel"),Idr=o(" (RoBERTa model)"),qdr=l(),uF=a("li"),ibe=a("strong"),Ndr=o("roformer"),jdr=o(" \u2014 "),dW=a("a"),Ddr=o("TFRoFormerModel"),Gdr=o(" (RoFormer model)"),Odr=l(),bF=a("li"),dbe=a("strong"),Vdr=o("speech_to_text"),Xdr=o(" \u2014 "),cW=a("a"),zdr=o("TFSpeech2TextModel"),Wdr=o(" (Speech2Text model)"),Qdr=l(),vF=a("li"),cbe=a("strong"),Hdr=o("swin"),Udr=o(" \u2014 "),fW=a("a"),Jdr=o("TFSwinModel"),Ydr=o(" (Swin model)"),Kdr=l(),FF=a("li"),fbe=a("strong"),Zdr=o("t5"),ecr=o(" \u2014 "),mW=a("a"),ocr=o("TFT5Model"),rcr=o(" (T5 model)"),tcr=l(),TF=a("li"),mbe=a("strong"),acr=o("tapas"),ncr=o(" \u2014 "),gW=a("a"),scr=o("TFTapasModel"),lcr=o(" (TAPAS model)"),icr=l(),MF=a("li"),gbe=a("strong"),dcr=o("transfo-xl"),ccr=o(" \u2014 "),hW=a("a"),fcr=o("TFTransfoXLModel"),mcr=o(" (Transformer-XL model)"),gcr=l(),EF=a("li"),hbe=a("strong"),hcr=o("vit"),pcr=o(" \u2014 "),pW=a("a"),_cr=o("TFViTModel"),ucr=o(" (ViT model)"),bcr=l(),CF=a("li"),pbe=a("strong"),vcr=o("vit_mae"),Fcr=o(" \u2014 "),_W=a("a"),Tcr=o("TFViTMAEModel"),Mcr=o(" (ViTMAE model)"),Ecr=l(),wF=a("li"),_be=a("strong"),Ccr=o("wav2vec2"),wcr=o(" \u2014 "),uW=a("a"),Acr=o("TFWav2Vec2Model"),ycr=o(" (Wav2Vec2 model)"),Lcr=l(),AF=a("li"),ube=a("strong"),xcr=o("xglm"),$cr=o(" \u2014 "),bW=a("a"),kcr=o("TFXGLMModel"),Scr=o(" (XGLM model)"),Rcr=l(),yF=a("li"),bbe=a("strong"),Pcr=o("xlm"),Bcr=o(" \u2014 "),vW=a("a"),Icr=o("TFXLMModel"),qcr=o(" (XLM model)"),Ncr=l(),LF=a("li"),vbe=a("strong"),jcr=o("xlm-roberta"),Dcr=o(" \u2014 "),FW=a("a"),Gcr=o("TFXLMRobertaModel"),Ocr=o(" (XLM-RoBERTa model)"),Vcr=l(),xF=a("li"),Fbe=a("strong"),Xcr=o("xlnet"),zcr=o(" \u2014 "),TW=a("a"),Wcr=o("TFXLNetModel"),Qcr=o(" (XLNet model)"),Hcr=l(),F($F.$$.fragment),Kqe=l(),Vd=a("h2"),kF=a("a"),Tbe=a("span"),F(K8.$$.fragment),Ucr=l(),Mbe=a("span"),Jcr=o("TFAutoModelForPreTraining"),Zqe=l(),Ko=a("div"),F(Z8.$$.fragment),Ycr=l(),Xd=a("p"),Kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MW=a("a"),Zcr=o("from_pretrained()"),efr=o(" class method or the "),EW=a("a"),ofr=o("from_config()"),rfr=o(` class
method.`),tfr=l(),e7=a("p"),afr=o("This class cannot be instantiated directly using "),Ebe=a("code"),nfr=o("__init__()"),sfr=o(" (throws an error)."),lfr=l(),Lt=a("div"),F(o7.$$.fragment),ifr=l(),Cbe=a("p"),dfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cfr=l(),zd=a("p"),ffr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),mfr=o("not"),gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),hfr=o("from_pretrained()"),pfr=o(" to load the model weights."),_fr=l(),F(SF.$$.fragment),ufr=l(),Ar=a("div"),F(r7.$$.fragment),bfr=l(),Abe=a("p"),vfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ffr=l(),Za=a("p"),Tfr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Mfr=o("model_type"),Efr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),Afr=o("pretrained_model_name_or_path"),yfr=o(":"),Lfr=l(),se=a("ul"),RF=a("li"),$be=a("strong"),xfr=o("albert"),$fr=o(" \u2014 "),wW=a("a"),kfr=o("TFAlbertForPreTraining"),Sfr=o(" (ALBERT model)"),Rfr=l(),PF=a("li"),kbe=a("strong"),Pfr=o("bart"),Bfr=o(" \u2014 "),AW=a("a"),Ifr=o("TFBartForConditionalGeneration"),qfr=o(" (BART model)"),Nfr=l(),BF=a("li"),Sbe=a("strong"),jfr=o("bert"),Dfr=o(" \u2014 "),yW=a("a"),Gfr=o("TFBertForPreTraining"),Ofr=o(" (BERT model)"),Vfr=l(),IF=a("li"),Rbe=a("strong"),Xfr=o("camembert"),zfr=o(" \u2014 "),LW=a("a"),Wfr=o("TFCamembertForMaskedLM"),Qfr=o(" (CamemBERT model)"),Hfr=l(),qF=a("li"),Pbe=a("strong"),Ufr=o("ctrl"),Jfr=o(" \u2014 "),xW=a("a"),Yfr=o("TFCTRLLMHeadModel"),Kfr=o(" (CTRL model)"),Zfr=l(),NF=a("li"),Bbe=a("strong"),emr=o("distilbert"),omr=o(" \u2014 "),$W=a("a"),rmr=o("TFDistilBertForMaskedLM"),tmr=o(" (DistilBERT model)"),amr=l(),jF=a("li"),Ibe=a("strong"),nmr=o("electra"),smr=o(" \u2014 "),kW=a("a"),lmr=o("TFElectraForPreTraining"),imr=o(" (ELECTRA model)"),dmr=l(),DF=a("li"),qbe=a("strong"),cmr=o("flaubert"),fmr=o(" \u2014 "),SW=a("a"),mmr=o("TFFlaubertWithLMHeadModel"),gmr=o(" (FlauBERT model)"),hmr=l(),GF=a("li"),Nbe=a("strong"),pmr=o("funnel"),_mr=o(" \u2014 "),RW=a("a"),umr=o("TFFunnelForPreTraining"),bmr=o(" (Funnel Transformer model)"),vmr=l(),OF=a("li"),jbe=a("strong"),Fmr=o("gpt2"),Tmr=o(" \u2014 "),PW=a("a"),Mmr=o("TFGPT2LMHeadModel"),Emr=o(" (OpenAI GPT-2 model)"),Cmr=l(),VF=a("li"),Dbe=a("strong"),wmr=o("layoutlm"),Amr=o(" \u2014 "),BW=a("a"),ymr=o("TFLayoutLMForMaskedLM"),Lmr=o(" (LayoutLM model)"),xmr=l(),XF=a("li"),Gbe=a("strong"),$mr=o("lxmert"),kmr=o(" \u2014 "),IW=a("a"),Smr=o("TFLxmertForPreTraining"),Rmr=o(" (LXMERT model)"),Pmr=l(),zF=a("li"),Obe=a("strong"),Bmr=o("mobilebert"),Imr=o(" \u2014 "),qW=a("a"),qmr=o("TFMobileBertForPreTraining"),Nmr=o(" (MobileBERT model)"),jmr=l(),WF=a("li"),Vbe=a("strong"),Dmr=o("mpnet"),Gmr=o(" \u2014 "),NW=a("a"),Omr=o("TFMPNetForMaskedLM"),Vmr=o(" (MPNet model)"),Xmr=l(),QF=a("li"),Xbe=a("strong"),zmr=o("openai-gpt"),Wmr=o(" \u2014 "),jW=a("a"),Qmr=o("TFOpenAIGPTLMHeadModel"),Hmr=o(" (OpenAI GPT model)"),Umr=l(),HF=a("li"),zbe=a("strong"),Jmr=o("roberta"),Ymr=o(" \u2014 "),DW=a("a"),Kmr=o("TFRobertaForMaskedLM"),Zmr=o(" (RoBERTa model)"),egr=l(),UF=a("li"),Wbe=a("strong"),ogr=o("t5"),rgr=o(" \u2014 "),GW=a("a"),tgr=o("TFT5ForConditionalGeneration"),agr=o(" (T5 model)"),ngr=l(),JF=a("li"),Qbe=a("strong"),sgr=o("tapas"),lgr=o(" \u2014 "),OW=a("a"),igr=o("TFTapasForMaskedLM"),dgr=o(" (TAPAS model)"),cgr=l(),YF=a("li"),Hbe=a("strong"),fgr=o("transfo-xl"),mgr=o(" \u2014 "),VW=a("a"),ggr=o("TFTransfoXLLMHeadModel"),hgr=o(" (Transformer-XL model)"),pgr=l(),KF=a("li"),Ube=a("strong"),_gr=o("vit_mae"),ugr=o(" \u2014 "),XW=a("a"),bgr=o("TFViTMAEForPreTraining"),vgr=o(" (ViTMAE model)"),Fgr=l(),ZF=a("li"),Jbe=a("strong"),Tgr=o("xlm"),Mgr=o(" \u2014 "),zW=a("a"),Egr=o("TFXLMWithLMHeadModel"),Cgr=o(" (XLM model)"),wgr=l(),e6=a("li"),Ybe=a("strong"),Agr=o("xlm-roberta"),ygr=o(" \u2014 "),WW=a("a"),Lgr=o("TFXLMRobertaForMaskedLM"),xgr=o(" (XLM-RoBERTa model)"),$gr=l(),o6=a("li"),Kbe=a("strong"),kgr=o("xlnet"),Sgr=o(" \u2014 "),QW=a("a"),Rgr=o("TFXLNetLMHeadModel"),Pgr=o(" (XLNet model)"),Bgr=l(),F(r6.$$.fragment),eNe=l(),Wd=a("h2"),t6=a("a"),Zbe=a("span"),F(t7.$$.fragment),Igr=l(),e2e=a("span"),qgr=o("TFAutoModelForCausalLM"),oNe=l(),Zo=a("div"),F(a7.$$.fragment),Ngr=l(),Qd=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HW=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" class method or the "),UW=a("a"),Ogr=o("from_config()"),Vgr=o(` class
method.`),Xgr=l(),n7=a("p"),zgr=o("This class cannot be instantiated directly using "),o2e=a("code"),Wgr=o("__init__()"),Qgr=o(" (throws an error)."),Hgr=l(),xt=a("div"),F(s7.$$.fragment),Ugr=l(),r2e=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ygr=l(),Hd=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),ohr=o("from_pretrained()"),rhr=o(" to load the model weights."),thr=l(),F(a6.$$.fragment),ahr=l(),yr=a("div"),F(l7.$$.fragment),nhr=l(),a2e=a("p"),shr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lhr=l(),en=a("p"),ihr=o("The model class to instantiate is selected based on the "),n2e=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),phr=l(),Te=a("ul"),n6=a("li"),i2e=a("strong"),_hr=o("bert"),uhr=o(" \u2014 "),YW=a("a"),bhr=o("TFBertLMHeadModel"),vhr=o(" (BERT model)"),Fhr=l(),s6=a("li"),d2e=a("strong"),Thr=o("camembert"),Mhr=o(" \u2014 "),KW=a("a"),Ehr=o("TFCamembertForCausalLM"),Chr=o(" (CamemBERT model)"),whr=l(),l6=a("li"),c2e=a("strong"),Ahr=o("ctrl"),yhr=o(" \u2014 "),ZW=a("a"),Lhr=o("TFCTRLLMHeadModel"),xhr=o(" (CTRL model)"),$hr=l(),i6=a("li"),f2e=a("strong"),khr=o("gpt2"),Shr=o(" \u2014 "),eQ=a("a"),Rhr=o("TFGPT2LMHeadModel"),Phr=o(" (OpenAI GPT-2 model)"),Bhr=l(),d6=a("li"),m2e=a("strong"),Ihr=o("gptj"),qhr=o(" \u2014 "),oQ=a("a"),Nhr=o("TFGPTJForCausalLM"),jhr=o(" (GPT-J model)"),Dhr=l(),c6=a("li"),g2e=a("strong"),Ghr=o("openai-gpt"),Ohr=o(" \u2014 "),rQ=a("a"),Vhr=o("TFOpenAIGPTLMHeadModel"),Xhr=o(" (OpenAI GPT model)"),zhr=l(),f6=a("li"),h2e=a("strong"),Whr=o("rembert"),Qhr=o(" \u2014 "),tQ=a("a"),Hhr=o("TFRemBertForCausalLM"),Uhr=o(" (RemBERT model)"),Jhr=l(),m6=a("li"),p2e=a("strong"),Yhr=o("roberta"),Khr=o(" \u2014 "),aQ=a("a"),Zhr=o("TFRobertaForCausalLM"),epr=o(" (RoBERTa model)"),opr=l(),g6=a("li"),_2e=a("strong"),rpr=o("roformer"),tpr=o(" \u2014 "),nQ=a("a"),apr=o("TFRoFormerForCausalLM"),npr=o(" (RoFormer model)"),spr=l(),h6=a("li"),u2e=a("strong"),lpr=o("transfo-xl"),ipr=o(" \u2014 "),sQ=a("a"),dpr=o("TFTransfoXLLMHeadModel"),cpr=o(" (Transformer-XL model)"),fpr=l(),p6=a("li"),b2e=a("strong"),mpr=o("xglm"),gpr=o(" \u2014 "),lQ=a("a"),hpr=o("TFXGLMForCausalLM"),ppr=o(" (XGLM model)"),_pr=l(),_6=a("li"),v2e=a("strong"),upr=o("xlm"),bpr=o(" \u2014 "),iQ=a("a"),vpr=o("TFXLMWithLMHeadModel"),Fpr=o(" (XLM model)"),Tpr=l(),u6=a("li"),F2e=a("strong"),Mpr=o("xlnet"),Epr=o(" \u2014 "),dQ=a("a"),Cpr=o("TFXLNetLMHeadModel"),wpr=o(" (XLNet model)"),Apr=l(),F(b6.$$.fragment),rNe=l(),Ud=a("h2"),v6=a("a"),T2e=a("span"),F(i7.$$.fragment),ypr=l(),M2e=a("span"),Lpr=o("TFAutoModelForImageClassification"),tNe=l(),er=a("div"),F(d7.$$.fragment),xpr=l(),Jd=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cQ=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),fQ=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),c7=a("p"),Ipr=o("This class cannot be instantiated directly using "),E2e=a("code"),qpr=o("__init__()"),Npr=o(" (throws an error)."),jpr=l(),$t=a("div"),F(f7.$$.fragment),Dpr=l(),C2e=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Opr=l(),Yd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Hpr=l(),F(F6.$$.fragment),Upr=l(),Lr=a("div"),F(m7.$$.fragment),Jpr=l(),A2e=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kpr=l(),on=a("p"),Zpr=o("The model class to instantiate is selected based on the "),y2e=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),rn=a("ul"),T6=a("li"),$2e=a("strong"),l_r=o("convnext"),i_r=o(" \u2014 "),gQ=a("a"),d_r=o("TFConvNextForImageClassification"),c_r=o(" (ConvNext model)"),f_r=l(),M6=a("li"),k2e=a("strong"),m_r=o("data2vec-vision"),g_r=o(" \u2014 "),hQ=a("a"),h_r=o("TFData2VecVisionForImageClassification"),p_r=o(" (Data2VecVision model)"),__r=l(),E6=a("li"),S2e=a("strong"),u_r=o("swin"),b_r=o(" \u2014 "),pQ=a("a"),v_r=o("TFSwinForImageClassification"),F_r=o(" (Swin model)"),T_r=l(),C6=a("li"),R2e=a("strong"),M_r=o("vit"),E_r=o(" \u2014 "),_Q=a("a"),C_r=o("TFViTForImageClassification"),w_r=o(" (ViT model)"),A_r=l(),F(w6.$$.fragment),aNe=l(),Kd=a("h2"),A6=a("a"),P2e=a("span"),F(g7.$$.fragment),y_r=l(),B2e=a("span"),L_r=o("TFAutoModelForMaskedLM"),nNe=l(),or=a("div"),F(h7.$$.fragment),x_r=l(),Zd=a("p"),$_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" class method or the "),bQ=a("a"),R_r=o("from_config()"),P_r=o(` class
method.`),B_r=l(),p7=a("p"),I_r=o("This class cannot be instantiated directly using "),I2e=a("code"),q_r=o("__init__()"),N_r=o(" (throws an error)."),j_r=l(),kt=a("div"),F(_7.$$.fragment),D_r=l(),q2e=a("p"),G_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O_r=l(),ec=a("p"),V_r=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),X_r=o("not"),z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),W_r=o("from_pretrained()"),Q_r=o(" to load the model weights."),H_r=l(),F(y6.$$.fragment),U_r=l(),xr=a("div"),F(u7.$$.fragment),J_r=l(),j2e=a("p"),Y_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K_r=l(),tn=a("p"),Z_r=o("The model class to instantiate is selected based on the "),D2e=a("code"),eur=o("model_type"),our=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(":"),sur=l(),ie=a("ul"),L6=a("li"),V2e=a("strong"),lur=o("albert"),iur=o(" \u2014 "),FQ=a("a"),dur=o("TFAlbertForMaskedLM"),cur=o(" (ALBERT model)"),fur=l(),x6=a("li"),X2e=a("strong"),mur=o("bert"),gur=o(" \u2014 "),TQ=a("a"),hur=o("TFBertForMaskedLM"),pur=o(" (BERT model)"),_ur=l(),$6=a("li"),z2e=a("strong"),uur=o("camembert"),bur=o(" \u2014 "),MQ=a("a"),vur=o("TFCamembertForMaskedLM"),Fur=o(" (CamemBERT model)"),Tur=l(),k6=a("li"),W2e=a("strong"),Mur=o("convbert"),Eur=o(" \u2014 "),EQ=a("a"),Cur=o("TFConvBertForMaskedLM"),wur=o(" (ConvBERT model)"),Aur=l(),S6=a("li"),Q2e=a("strong"),yur=o("deberta"),Lur=o(" \u2014 "),CQ=a("a"),xur=o("TFDebertaForMaskedLM"),$ur=o(" (DeBERTa model)"),kur=l(),R6=a("li"),H2e=a("strong"),Sur=o("deberta-v2"),Rur=o(" \u2014 "),wQ=a("a"),Pur=o("TFDebertaV2ForMaskedLM"),Bur=o(" (DeBERTa-v2 model)"),Iur=l(),P6=a("li"),U2e=a("strong"),qur=o("distilbert"),Nur=o(" \u2014 "),AQ=a("a"),jur=o("TFDistilBertForMaskedLM"),Dur=o(" (DistilBERT model)"),Gur=l(),B6=a("li"),J2e=a("strong"),Our=o("electra"),Vur=o(" \u2014 "),yQ=a("a"),Xur=o("TFElectraForMaskedLM"),zur=o(" (ELECTRA model)"),Wur=l(),I6=a("li"),Y2e=a("strong"),Qur=o("flaubert"),Hur=o(" \u2014 "),LQ=a("a"),Uur=o("TFFlaubertWithLMHeadModel"),Jur=o(" (FlauBERT model)"),Yur=l(),q6=a("li"),K2e=a("strong"),Kur=o("funnel"),Zur=o(" \u2014 "),xQ=a("a"),e1r=o("TFFunnelForMaskedLM"),o1r=o(" (Funnel Transformer model)"),r1r=l(),N6=a("li"),Z2e=a("strong"),t1r=o("layoutlm"),a1r=o(" \u2014 "),$Q=a("a"),n1r=o("TFLayoutLMForMaskedLM"),s1r=o(" (LayoutLM model)"),l1r=l(),j6=a("li"),e4e=a("strong"),i1r=o("longformer"),d1r=o(" \u2014 "),kQ=a("a"),c1r=o("TFLongformerForMaskedLM"),f1r=o(" (Longformer model)"),m1r=l(),D6=a("li"),o4e=a("strong"),g1r=o("mobilebert"),h1r=o(" \u2014 "),SQ=a("a"),p1r=o("TFMobileBertForMaskedLM"),_1r=o(" (MobileBERT model)"),u1r=l(),G6=a("li"),r4e=a("strong"),b1r=o("mpnet"),v1r=o(" \u2014 "),RQ=a("a"),F1r=o("TFMPNetForMaskedLM"),T1r=o(" (MPNet model)"),M1r=l(),O6=a("li"),t4e=a("strong"),E1r=o("rembert"),C1r=o(" \u2014 "),PQ=a("a"),w1r=o("TFRemBertForMaskedLM"),A1r=o(" (RemBERT model)"),y1r=l(),V6=a("li"),a4e=a("strong"),L1r=o("roberta"),x1r=o(" \u2014 "),BQ=a("a"),$1r=o("TFRobertaForMaskedLM"),k1r=o(" (RoBERTa model)"),S1r=l(),X6=a("li"),n4e=a("strong"),R1r=o("roformer"),P1r=o(" \u2014 "),IQ=a("a"),B1r=o("TFRoFormerForMaskedLM"),I1r=o(" (RoFormer model)"),q1r=l(),z6=a("li"),s4e=a("strong"),N1r=o("tapas"),j1r=o(" \u2014 "),qQ=a("a"),D1r=o("TFTapasForMaskedLM"),G1r=o(" (TAPAS model)"),O1r=l(),W6=a("li"),l4e=a("strong"),V1r=o("xlm"),X1r=o(" \u2014 "),NQ=a("a"),z1r=o("TFXLMWithLMHeadModel"),W1r=o(" (XLM model)"),Q1r=l(),Q6=a("li"),i4e=a("strong"),H1r=o("xlm-roberta"),U1r=o(" \u2014 "),jQ=a("a"),J1r=o("TFXLMRobertaForMaskedLM"),Y1r=o(" (XLM-RoBERTa model)"),K1r=l(),F(H6.$$.fragment),sNe=l(),oc=a("h2"),U6=a("a"),d4e=a("span"),F(b7.$$.fragment),Z1r=l(),c4e=a("span"),ebr=o("TFAutoModelForSeq2SeqLM"),lNe=l(),rr=a("div"),F(v7.$$.fragment),obr=l(),rc=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DQ=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),GQ=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),F7=a("p"),ibr=o("This class cannot be instantiated directly using "),f4e=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),fbr=l(),St=a("div"),F(T7.$$.fragment),mbr=l(),m4e=a("p"),gbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hbr=l(),tc=a("p"),pbr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),_br=o("not"),ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),bbr=o("from_pretrained()"),vbr=o(" to load the model weights."),Fbr=l(),F(J6.$$.fragment),Tbr=l(),$r=a("div"),F(M7.$$.fragment),Mbr=l(),h4e=a("p"),Ebr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cbr=l(),an=a("p"),wbr=o("The model class to instantiate is selected based on the "),p4e=a("code"),Abr=o("model_type"),ybr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),Lbr=o("pretrained_model_name_or_path"),xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=a("code"),$br=o("pretrained_model_name_or_path"),kbr=o(":"),Sbr=l(),ye=a("ul"),Y6=a("li"),b4e=a("strong"),Rbr=o("bart"),Pbr=o(" \u2014 "),VQ=a("a"),Bbr=o("TFBartForConditionalGeneration"),Ibr=o(" (BART model)"),qbr=l(),K6=a("li"),v4e=a("strong"),Nbr=o("blenderbot"),jbr=o(" \u2014 "),XQ=a("a"),Dbr=o("TFBlenderbotForConditionalGeneration"),Gbr=o(" (Blenderbot model)"),Obr=l(),Z6=a("li"),F4e=a("strong"),Vbr=o("blenderbot-small"),Xbr=o(" \u2014 "),zQ=a("a"),zbr=o("TFBlenderbotSmallForConditionalGeneration"),Wbr=o(" (BlenderbotSmall model)"),Qbr=l(),eT=a("li"),T4e=a("strong"),Hbr=o("encoder-decoder"),Ubr=o(" \u2014 "),WQ=a("a"),Jbr=o("TFEncoderDecoderModel"),Ybr=o(" (Encoder decoder model)"),Kbr=l(),oT=a("li"),M4e=a("strong"),Zbr=o("led"),e2r=o(" \u2014 "),QQ=a("a"),o2r=o("TFLEDForConditionalGeneration"),r2r=o(" (LED model)"),t2r=l(),rT=a("li"),E4e=a("strong"),a2r=o("marian"),n2r=o(" \u2014 "),HQ=a("a"),s2r=o("TFMarianMTModel"),l2r=o(" (Marian model)"),i2r=l(),tT=a("li"),C4e=a("strong"),d2r=o("mbart"),c2r=o(" \u2014 "),UQ=a("a"),f2r=o("TFMBartForConditionalGeneration"),m2r=o(" (mBART model)"),g2r=l(),aT=a("li"),w4e=a("strong"),h2r=o("mt5"),p2r=o(" \u2014 "),JQ=a("a"),_2r=o("TFMT5ForConditionalGeneration"),u2r=o(" (mT5 model)"),b2r=l(),nT=a("li"),A4e=a("strong"),v2r=o("pegasus"),F2r=o(" \u2014 "),YQ=a("a"),T2r=o("TFPegasusForConditionalGeneration"),M2r=o(" (Pegasus model)"),E2r=l(),sT=a("li"),y4e=a("strong"),C2r=o("t5"),w2r=o(" \u2014 "),KQ=a("a"),A2r=o("TFT5ForConditionalGeneration"),y2r=o(" (T5 model)"),L2r=l(),F(lT.$$.fragment),iNe=l(),ac=a("h2"),iT=a("a"),L4e=a("span"),F(E7.$$.fragment),x2r=l(),x4e=a("span"),$2r=o("TFAutoModelForSequenceClassification"),dNe=l(),tr=a("div"),F(C7.$$.fragment),k2r=l(),nc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),eH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),q2r=l(),w7=a("p"),N2r=o("This class cannot be instantiated directly using "),$4e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),Rt=a("div"),F(A7.$$.fragment),O2r=l(),k4e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X2r=l(),sc=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),S4e=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(dT.$$.fragment),Y2r=l(),kr=a("div"),F(y7.$$.fragment),K2r=l(),R4e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e4r=l(),nn=a("p"),o4r=o("The model class to instantiate is selected based on the "),P4e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),ee=a("ul"),cT=a("li"),q4e=a("strong"),d4r=o("albert"),c4r=o(" \u2014 "),rH=a("a"),f4r=o("TFAlbertForSequenceClassification"),m4r=o(" (ALBERT model)"),g4r=l(),fT=a("li"),N4e=a("strong"),h4r=o("bert"),p4r=o(" \u2014 "),tH=a("a"),_4r=o("TFBertForSequenceClassification"),u4r=o(" (BERT model)"),b4r=l(),mT=a("li"),j4e=a("strong"),v4r=o("camembert"),F4r=o(" \u2014 "),aH=a("a"),T4r=o("TFCamembertForSequenceClassification"),M4r=o(" (CamemBERT model)"),E4r=l(),gT=a("li"),D4e=a("strong"),C4r=o("convbert"),w4r=o(" \u2014 "),nH=a("a"),A4r=o("TFConvBertForSequenceClassification"),y4r=o(" (ConvBERT model)"),L4r=l(),hT=a("li"),G4e=a("strong"),x4r=o("ctrl"),$4r=o(" \u2014 "),sH=a("a"),k4r=o("TFCTRLForSequenceClassification"),S4r=o(" (CTRL model)"),R4r=l(),pT=a("li"),O4e=a("strong"),P4r=o("deberta"),B4r=o(" \u2014 "),lH=a("a"),I4r=o("TFDebertaForSequenceClassification"),q4r=o(" (DeBERTa model)"),N4r=l(),_T=a("li"),V4e=a("strong"),j4r=o("deberta-v2"),D4r=o(" \u2014 "),iH=a("a"),G4r=o("TFDebertaV2ForSequenceClassification"),O4r=o(" (DeBERTa-v2 model)"),V4r=l(),uT=a("li"),X4e=a("strong"),X4r=o("distilbert"),z4r=o(" \u2014 "),dH=a("a"),W4r=o("TFDistilBertForSequenceClassification"),Q4r=o(" (DistilBERT model)"),H4r=l(),bT=a("li"),z4e=a("strong"),U4r=o("electra"),J4r=o(" \u2014 "),cH=a("a"),Y4r=o("TFElectraForSequenceClassification"),K4r=o(" (ELECTRA model)"),Z4r=l(),vT=a("li"),W4e=a("strong"),e5r=o("flaubert"),o5r=o(" \u2014 "),fH=a("a"),r5r=o("TFFlaubertForSequenceClassification"),t5r=o(" (FlauBERT model)"),a5r=l(),FT=a("li"),Q4e=a("strong"),n5r=o("funnel"),s5r=o(" \u2014 "),mH=a("a"),l5r=o("TFFunnelForSequenceClassification"),i5r=o(" (Funnel Transformer model)"),d5r=l(),TT=a("li"),H4e=a("strong"),c5r=o("gpt2"),f5r=o(" \u2014 "),gH=a("a"),m5r=o("TFGPT2ForSequenceClassification"),g5r=o(" (OpenAI GPT-2 model)"),h5r=l(),MT=a("li"),U4e=a("strong"),p5r=o("gptj"),_5r=o(" \u2014 "),hH=a("a"),u5r=o("TFGPTJForSequenceClassification"),b5r=o(" (GPT-J model)"),v5r=l(),ET=a("li"),J4e=a("strong"),F5r=o("layoutlm"),T5r=o(" \u2014 "),pH=a("a"),M5r=o("TFLayoutLMForSequenceClassification"),E5r=o(" (LayoutLM model)"),C5r=l(),CT=a("li"),Y4e=a("strong"),w5r=o("longformer"),A5r=o(" \u2014 "),_H=a("a"),y5r=o("TFLongformerForSequenceClassification"),L5r=o(" (Longformer model)"),x5r=l(),wT=a("li"),K4e=a("strong"),$5r=o("mobilebert"),k5r=o(" \u2014 "),uH=a("a"),S5r=o("TFMobileBertForSequenceClassification"),R5r=o(" (MobileBERT model)"),P5r=l(),AT=a("li"),Z4e=a("strong"),B5r=o("mpnet"),I5r=o(" \u2014 "),bH=a("a"),q5r=o("TFMPNetForSequenceClassification"),N5r=o(" (MPNet model)"),j5r=l(),yT=a("li"),e5e=a("strong"),D5r=o("openai-gpt"),G5r=o(" \u2014 "),vH=a("a"),O5r=o("TFOpenAIGPTForSequenceClassification"),V5r=o(" (OpenAI GPT model)"),X5r=l(),LT=a("li"),o5e=a("strong"),z5r=o("rembert"),W5r=o(" \u2014 "),FH=a("a"),Q5r=o("TFRemBertForSequenceClassification"),H5r=o(" (RemBERT model)"),U5r=l(),xT=a("li"),r5e=a("strong"),J5r=o("roberta"),Y5r=o(" \u2014 "),TH=a("a"),K5r=o("TFRobertaForSequenceClassification"),Z5r=o(" (RoBERTa model)"),evr=l(),$T=a("li"),t5e=a("strong"),ovr=o("roformer"),rvr=o(" \u2014 "),MH=a("a"),tvr=o("TFRoFormerForSequenceClassification"),avr=o(" (RoFormer model)"),nvr=l(),kT=a("li"),a5e=a("strong"),svr=o("tapas"),lvr=o(" \u2014 "),EH=a("a"),ivr=o("TFTapasForSequenceClassification"),dvr=o(" (TAPAS model)"),cvr=l(),ST=a("li"),n5e=a("strong"),fvr=o("transfo-xl"),mvr=o(" \u2014 "),CH=a("a"),gvr=o("TFTransfoXLForSequenceClassification"),hvr=o(" (Transformer-XL model)"),pvr=l(),RT=a("li"),s5e=a("strong"),_vr=o("xlm"),uvr=o(" \u2014 "),wH=a("a"),bvr=o("TFXLMForSequenceClassification"),vvr=o(" (XLM model)"),Fvr=l(),PT=a("li"),l5e=a("strong"),Tvr=o("xlm-roberta"),Mvr=o(" \u2014 "),AH=a("a"),Evr=o("TFXLMRobertaForSequenceClassification"),Cvr=o(" (XLM-RoBERTa model)"),wvr=l(),BT=a("li"),i5e=a("strong"),Avr=o("xlnet"),yvr=o(" \u2014 "),yH=a("a"),Lvr=o("TFXLNetForSequenceClassification"),xvr=o(" (XLNet model)"),$vr=l(),F(IT.$$.fragment),cNe=l(),lc=a("h2"),qT=a("a"),d5e=a("span"),F(L7.$$.fragment),kvr=l(),c5e=a("span"),Svr=o("TFAutoModelForMultipleChoice"),fNe=l(),ar=a("div"),F(x7.$$.fragment),Rvr=l(),ic=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=a("a"),Bvr=o("from_pretrained()"),Ivr=o(" class method or the "),xH=a("a"),qvr=o("from_config()"),Nvr=o(` class
method.`),jvr=l(),$7=a("p"),Dvr=o("This class cannot be instantiated directly using "),f5e=a("code"),Gvr=o("__init__()"),Ovr=o(" (throws an error)."),Vvr=l(),Pt=a("div"),F(k7.$$.fragment),Xvr=l(),m5e=a("p"),zvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wvr=l(),dc=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),Hvr=o("not"),Uvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" to load the model weights."),Kvr=l(),F(NT.$$.fragment),Zvr=l(),Sr=a("div"),F(S7.$$.fragment),e3r=l(),h5e=a("p"),o3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r3r=l(),sn=a("p"),t3r=o("The model class to instantiate is selected based on the "),p5e=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),he=a("ul"),jT=a("li"),b5e=a("strong"),f3r=o("albert"),m3r=o(" \u2014 "),kH=a("a"),g3r=o("TFAlbertForMultipleChoice"),h3r=o(" (ALBERT model)"),p3r=l(),DT=a("li"),v5e=a("strong"),_3r=o("bert"),u3r=o(" \u2014 "),SH=a("a"),b3r=o("TFBertForMultipleChoice"),v3r=o(" (BERT model)"),F3r=l(),GT=a("li"),F5e=a("strong"),T3r=o("camembert"),M3r=o(" \u2014 "),RH=a("a"),E3r=o("TFCamembertForMultipleChoice"),C3r=o(" (CamemBERT model)"),w3r=l(),OT=a("li"),T5e=a("strong"),A3r=o("convbert"),y3r=o(" \u2014 "),PH=a("a"),L3r=o("TFConvBertForMultipleChoice"),x3r=o(" (ConvBERT model)"),$3r=l(),VT=a("li"),M5e=a("strong"),k3r=o("distilbert"),S3r=o(" \u2014 "),BH=a("a"),R3r=o("TFDistilBertForMultipleChoice"),P3r=o(" (DistilBERT model)"),B3r=l(),XT=a("li"),E5e=a("strong"),I3r=o("electra"),q3r=o(" \u2014 "),IH=a("a"),N3r=o("TFElectraForMultipleChoice"),j3r=o(" (ELECTRA model)"),D3r=l(),zT=a("li"),C5e=a("strong"),G3r=o("flaubert"),O3r=o(" \u2014 "),qH=a("a"),V3r=o("TFFlaubertForMultipleChoice"),X3r=o(" (FlauBERT model)"),z3r=l(),WT=a("li"),w5e=a("strong"),W3r=o("funnel"),Q3r=o(" \u2014 "),NH=a("a"),H3r=o("TFFunnelForMultipleChoice"),U3r=o(" (Funnel Transformer model)"),J3r=l(),QT=a("li"),A5e=a("strong"),Y3r=o("longformer"),K3r=o(" \u2014 "),jH=a("a"),Z3r=o("TFLongformerForMultipleChoice"),eFr=o(" (Longformer model)"),oFr=l(),HT=a("li"),y5e=a("strong"),rFr=o("mobilebert"),tFr=o(" \u2014 "),DH=a("a"),aFr=o("TFMobileBertForMultipleChoice"),nFr=o(" (MobileBERT model)"),sFr=l(),UT=a("li"),L5e=a("strong"),lFr=o("mpnet"),iFr=o(" \u2014 "),GH=a("a"),dFr=o("TFMPNetForMultipleChoice"),cFr=o(" (MPNet model)"),fFr=l(),JT=a("li"),x5e=a("strong"),mFr=o("rembert"),gFr=o(" \u2014 "),OH=a("a"),hFr=o("TFRemBertForMultipleChoice"),pFr=o(" (RemBERT model)"),_Fr=l(),YT=a("li"),$5e=a("strong"),uFr=o("roberta"),bFr=o(" \u2014 "),VH=a("a"),vFr=o("TFRobertaForMultipleChoice"),FFr=o(" (RoBERTa model)"),TFr=l(),KT=a("li"),k5e=a("strong"),MFr=o("roformer"),EFr=o(" \u2014 "),XH=a("a"),CFr=o("TFRoFormerForMultipleChoice"),wFr=o(" (RoFormer model)"),AFr=l(),ZT=a("li"),S5e=a("strong"),yFr=o("xlm"),LFr=o(" \u2014 "),zH=a("a"),xFr=o("TFXLMForMultipleChoice"),$Fr=o(" (XLM model)"),kFr=l(),eM=a("li"),R5e=a("strong"),SFr=o("xlm-roberta"),RFr=o(" \u2014 "),WH=a("a"),PFr=o("TFXLMRobertaForMultipleChoice"),BFr=o(" (XLM-RoBERTa model)"),IFr=l(),oM=a("li"),P5e=a("strong"),qFr=o("xlnet"),NFr=o(" \u2014 "),QH=a("a"),jFr=o("TFXLNetForMultipleChoice"),DFr=o(" (XLNet model)"),GFr=l(),F(rM.$$.fragment),mNe=l(),cc=a("h2"),tM=a("a"),B5e=a("span"),F(R7.$$.fragment),OFr=l(),I5e=a("span"),VFr=o("TFAutoModelForNextSentencePrediction"),gNe=l(),nr=a("div"),F(P7.$$.fragment),XFr=l(),fc=a("p"),zFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=a("a"),WFr=o("from_pretrained()"),QFr=o(" class method or the "),UH=a("a"),HFr=o("from_config()"),UFr=o(` class
method.`),JFr=l(),B7=a("p"),YFr=o("This class cannot be instantiated directly using "),q5e=a("code"),KFr=o("__init__()"),ZFr=o(" (throws an error)."),e6r=l(),Bt=a("div"),F(I7.$$.fragment),o6r=l(),N5e=a("p"),r6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t6r=l(),mc=a("p"),a6r=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),n6r=o("not"),s6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),l6r=o("from_pretrained()"),i6r=o(" to load the model weights."),d6r=l(),F(aM.$$.fragment),c6r=l(),Rr=a("div"),F(q7.$$.fragment),f6r=l(),D5e=a("p"),m6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g6r=l(),ln=a("p"),h6r=o("The model class to instantiate is selected based on the "),G5e=a("code"),p6r=o("model_type"),_6r=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),u6r=o("pretrained_model_name_or_path"),b6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(":"),T6r=l(),N7=a("ul"),nM=a("li"),X5e=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),YH=a("a"),C6r=o("TFBertForNextSentencePrediction"),w6r=o(" (BERT model)"),A6r=l(),sM=a("li"),z5e=a("strong"),y6r=o("mobilebert"),L6r=o(" \u2014 "),KH=a("a"),x6r=o("TFMobileBertForNextSentencePrediction"),$6r=o(" (MobileBERT model)"),k6r=l(),F(lM.$$.fragment),hNe=l(),gc=a("h2"),iM=a("a"),W5e=a("span"),F(j7.$$.fragment),S6r=l(),Q5e=a("span"),R6r=o("TFAutoModelForTableQuestionAnswering"),pNe=l(),sr=a("div"),F(D7.$$.fragment),P6r=l(),hc=a("p"),B6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZH=a("a"),I6r=o("from_pretrained()"),q6r=o(" class method or the "),eU=a("a"),N6r=o("from_config()"),j6r=o(` class
method.`),D6r=l(),G7=a("p"),G6r=o("This class cannot be instantiated directly using "),H5e=a("code"),O6r=o("__init__()"),V6r=o(" (throws an error)."),X6r=l(),It=a("div"),F(O7.$$.fragment),z6r=l(),U5e=a("p"),W6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q6r=l(),pc=a("p"),H6r=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),U6r=o("not"),J6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),Y6r=o("from_pretrained()"),K6r=o(" to load the model weights."),Z6r=l(),F(dM.$$.fragment),eTr=l(),Pr=a("div"),F(V7.$$.fragment),oTr=l(),Y5e=a("p"),rTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tTr=l(),dn=a("p"),aTr=o("The model class to instantiate is selected based on the "),K5e=a("code"),nTr=o("model_type"),sTr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(":"),fTr=l(),ove=a("ul"),cM=a("li"),rve=a("strong"),mTr=o("tapas"),gTr=o(" \u2014 "),rU=a("a"),hTr=o("TFTapasForQuestionAnswering"),pTr=o(" (TAPAS model)"),_Tr=l(),F(fM.$$.fragment),_Ne=l(),_c=a("h2"),mM=a("a"),tve=a("span"),F(X7.$$.fragment),uTr=l(),ave=a("span"),bTr=o("TFAutoModelForTokenClassification"),uNe=l(),lr=a("div"),F(z7.$$.fragment),vTr=l(),uc=a("p"),FTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tU=a("a"),TTr=o("from_pretrained()"),MTr=o(" class method or the "),aU=a("a"),ETr=o("from_config()"),CTr=o(` class
method.`),wTr=l(),W7=a("p"),ATr=o("This class cannot be instantiated directly using "),nve=a("code"),yTr=o("__init__()"),LTr=o(" (throws an error)."),xTr=l(),qt=a("div"),F(Q7.$$.fragment),$Tr=l(),sve=a("p"),kTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),STr=l(),bc=a("p"),RTr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),PTr=o("not"),BTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),ITr=o("from_pretrained()"),qTr=o(" to load the model weights."),NTr=l(),F(gM.$$.fragment),jTr=l(),Br=a("div"),F(H7.$$.fragment),DTr=l(),ive=a("p"),GTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OTr=l(),cn=a("p"),VTr=o("The model class to instantiate is selected based on the "),dve=a("code"),XTr=o("model_type"),zTr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),WTr=o("pretrained_model_name_or_path"),QTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(":"),JTr=l(),de=a("ul"),hM=a("li"),mve=a("strong"),YTr=o("albert"),KTr=o(" \u2014 "),sU=a("a"),ZTr=o("TFAlbertForTokenClassification"),eMr=o(" (ALBERT model)"),oMr=l(),pM=a("li"),gve=a("strong"),rMr=o("bert"),tMr=o(" \u2014 "),lU=a("a"),aMr=o("TFBertForTokenClassification"),nMr=o(" (BERT model)"),sMr=l(),_M=a("li"),hve=a("strong"),lMr=o("camembert"),iMr=o(" \u2014 "),iU=a("a"),dMr=o("TFCamembertForTokenClassification"),cMr=o(" (CamemBERT model)"),fMr=l(),uM=a("li"),pve=a("strong"),mMr=o("convbert"),gMr=o(" \u2014 "),dU=a("a"),hMr=o("TFConvBertForTokenClassification"),pMr=o(" (ConvBERT model)"),_Mr=l(),bM=a("li"),_ve=a("strong"),uMr=o("deberta"),bMr=o(" \u2014 "),cU=a("a"),vMr=o("TFDebertaForTokenClassification"),FMr=o(" (DeBERTa model)"),TMr=l(),vM=a("li"),uve=a("strong"),MMr=o("deberta-v2"),EMr=o(" \u2014 "),fU=a("a"),CMr=o("TFDebertaV2ForTokenClassification"),wMr=o(" (DeBERTa-v2 model)"),AMr=l(),FM=a("li"),bve=a("strong"),yMr=o("distilbert"),LMr=o(" \u2014 "),mU=a("a"),xMr=o("TFDistilBertForTokenClassification"),$Mr=o(" (DistilBERT model)"),kMr=l(),TM=a("li"),vve=a("strong"),SMr=o("electra"),RMr=o(" \u2014 "),gU=a("a"),PMr=o("TFElectraForTokenClassification"),BMr=o(" (ELECTRA model)"),IMr=l(),MM=a("li"),Fve=a("strong"),qMr=o("flaubert"),NMr=o(" \u2014 "),hU=a("a"),jMr=o("TFFlaubertForTokenClassification"),DMr=o(" (FlauBERT model)"),GMr=l(),EM=a("li"),Tve=a("strong"),OMr=o("funnel"),VMr=o(" \u2014 "),pU=a("a"),XMr=o("TFFunnelForTokenClassification"),zMr=o(" (Funnel Transformer model)"),WMr=l(),CM=a("li"),Mve=a("strong"),QMr=o("layoutlm"),HMr=o(" \u2014 "),_U=a("a"),UMr=o("TFLayoutLMForTokenClassification"),JMr=o(" (LayoutLM model)"),YMr=l(),wM=a("li"),Eve=a("strong"),KMr=o("longformer"),ZMr=o(" \u2014 "),uU=a("a"),eEr=o("TFLongformerForTokenClassification"),oEr=o(" (Longformer model)"),rEr=l(),AM=a("li"),Cve=a("strong"),tEr=o("mobilebert"),aEr=o(" \u2014 "),bU=a("a"),nEr=o("TFMobileBertForTokenClassification"),sEr=o(" (MobileBERT model)"),lEr=l(),yM=a("li"),wve=a("strong"),iEr=o("mpnet"),dEr=o(" \u2014 "),vU=a("a"),cEr=o("TFMPNetForTokenClassification"),fEr=o(" (MPNet model)"),mEr=l(),LM=a("li"),Ave=a("strong"),gEr=o("rembert"),hEr=o(" \u2014 "),FU=a("a"),pEr=o("TFRemBertForTokenClassification"),_Er=o(" (RemBERT model)"),uEr=l(),xM=a("li"),yve=a("strong"),bEr=o("roberta"),vEr=o(" \u2014 "),TU=a("a"),FEr=o("TFRobertaForTokenClassification"),TEr=o(" (RoBERTa model)"),MEr=l(),$M=a("li"),Lve=a("strong"),EEr=o("roformer"),CEr=o(" \u2014 "),MU=a("a"),wEr=o("TFRoFormerForTokenClassification"),AEr=o(" (RoFormer model)"),yEr=l(),kM=a("li"),xve=a("strong"),LEr=o("xlm"),xEr=o(" \u2014 "),EU=a("a"),$Er=o("TFXLMForTokenClassification"),kEr=o(" (XLM model)"),SEr=l(),SM=a("li"),$ve=a("strong"),REr=o("xlm-roberta"),PEr=o(" \u2014 "),CU=a("a"),BEr=o("TFXLMRobertaForTokenClassification"),IEr=o(" (XLM-RoBERTa model)"),qEr=l(),RM=a("li"),kve=a("strong"),NEr=o("xlnet"),jEr=o(" \u2014 "),wU=a("a"),DEr=o("TFXLNetForTokenClassification"),GEr=o(" (XLNet model)"),OEr=l(),F(PM.$$.fragment),bNe=l(),vc=a("h2"),BM=a("a"),Sve=a("span"),F(U7.$$.fragment),VEr=l(),Rve=a("span"),XEr=o("TFAutoModelForQuestionAnswering"),vNe=l(),ir=a("div"),F(J7.$$.fragment),zEr=l(),Fc=a("p"),WEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=a("a"),QEr=o("from_pretrained()"),HEr=o(" class method or the "),yU=a("a"),UEr=o("from_config()"),JEr=o(` class
method.`),YEr=l(),Y7=a("p"),KEr=o("This class cannot be instantiated directly using "),Pve=a("code"),ZEr=o("__init__()"),eCr=o(" (throws an error)."),oCr=l(),Nt=a("div"),F(K7.$$.fragment),rCr=l(),Bve=a("p"),tCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aCr=l(),Tc=a("p"),nCr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),sCr=o("not"),lCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),iCr=o("from_pretrained()"),dCr=o(" to load the model weights."),cCr=l(),F(IM.$$.fragment),fCr=l(),Ir=a("div"),F(Z7.$$.fragment),mCr=l(),qve=a("p"),gCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hCr=l(),fn=a("p"),pCr=o("The model class to instantiate is selected based on the "),Nve=a("code"),_Cr=o("model_type"),uCr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(":"),MCr=l(),ce=a("ul"),qM=a("li"),Gve=a("strong"),ECr=o("albert"),CCr=o(" \u2014 "),xU=a("a"),wCr=o("TFAlbertForQuestionAnswering"),ACr=o(" (ALBERT model)"),yCr=l(),NM=a("li"),Ove=a("strong"),LCr=o("bert"),xCr=o(" \u2014 "),$U=a("a"),$Cr=o("TFBertForQuestionAnswering"),kCr=o(" (BERT model)"),SCr=l(),jM=a("li"),Vve=a("strong"),RCr=o("camembert"),PCr=o(" \u2014 "),kU=a("a"),BCr=o("TFCamembertForQuestionAnswering"),ICr=o(" (CamemBERT model)"),qCr=l(),DM=a("li"),Xve=a("strong"),NCr=o("convbert"),jCr=o(" \u2014 "),SU=a("a"),DCr=o("TFConvBertForQuestionAnswering"),GCr=o(" (ConvBERT model)"),OCr=l(),GM=a("li"),zve=a("strong"),VCr=o("deberta"),XCr=o(" \u2014 "),RU=a("a"),zCr=o("TFDebertaForQuestionAnswering"),WCr=o(" (DeBERTa model)"),QCr=l(),OM=a("li"),Wve=a("strong"),HCr=o("deberta-v2"),UCr=o(" \u2014 "),PU=a("a"),JCr=o("TFDebertaV2ForQuestionAnswering"),YCr=o(" (DeBERTa-v2 model)"),KCr=l(),VM=a("li"),Qve=a("strong"),ZCr=o("distilbert"),ewr=o(" \u2014 "),BU=a("a"),owr=o("TFDistilBertForQuestionAnswering"),rwr=o(" (DistilBERT model)"),twr=l(),XM=a("li"),Hve=a("strong"),awr=o("electra"),nwr=o(" \u2014 "),IU=a("a"),swr=o("TFElectraForQuestionAnswering"),lwr=o(" (ELECTRA model)"),iwr=l(),zM=a("li"),Uve=a("strong"),dwr=o("flaubert"),cwr=o(" \u2014 "),qU=a("a"),fwr=o("TFFlaubertForQuestionAnsweringSimple"),mwr=o(" (FlauBERT model)"),gwr=l(),WM=a("li"),Jve=a("strong"),hwr=o("funnel"),pwr=o(" \u2014 "),NU=a("a"),_wr=o("TFFunnelForQuestionAnswering"),uwr=o(" (Funnel Transformer model)"),bwr=l(),QM=a("li"),Yve=a("strong"),vwr=o("gptj"),Fwr=o(" \u2014 "),jU=a("a"),Twr=o("TFGPTJForQuestionAnswering"),Mwr=o(" (GPT-J model)"),Ewr=l(),HM=a("li"),Kve=a("strong"),Cwr=o("longformer"),wwr=o(" \u2014 "),DU=a("a"),Awr=o("TFLongformerForQuestionAnswering"),ywr=o(" (Longformer model)"),Lwr=l(),UM=a("li"),Zve=a("strong"),xwr=o("mobilebert"),$wr=o(" \u2014 "),GU=a("a"),kwr=o("TFMobileBertForQuestionAnswering"),Swr=o(" (MobileBERT model)"),Rwr=l(),JM=a("li"),e3e=a("strong"),Pwr=o("mpnet"),Bwr=o(" \u2014 "),OU=a("a"),Iwr=o("TFMPNetForQuestionAnswering"),qwr=o(" (MPNet model)"),Nwr=l(),YM=a("li"),o3e=a("strong"),jwr=o("rembert"),Dwr=o(" \u2014 "),VU=a("a"),Gwr=o("TFRemBertForQuestionAnswering"),Owr=o(" (RemBERT model)"),Vwr=l(),KM=a("li"),r3e=a("strong"),Xwr=o("roberta"),zwr=o(" \u2014 "),XU=a("a"),Wwr=o("TFRobertaForQuestionAnswering"),Qwr=o(" (RoBERTa model)"),Hwr=l(),ZM=a("li"),t3e=a("strong"),Uwr=o("roformer"),Jwr=o(" \u2014 "),zU=a("a"),Ywr=o("TFRoFormerForQuestionAnswering"),Kwr=o(" (RoFormer model)"),Zwr=l(),eE=a("li"),a3e=a("strong"),e0r=o("xlm"),o0r=o(" \u2014 "),WU=a("a"),r0r=o("TFXLMForQuestionAnsweringSimple"),t0r=o(" (XLM model)"),a0r=l(),oE=a("li"),n3e=a("strong"),n0r=o("xlm-roberta"),s0r=o(" \u2014 "),QU=a("a"),l0r=o("TFXLMRobertaForQuestionAnswering"),i0r=o(" (XLM-RoBERTa model)"),d0r=l(),rE=a("li"),s3e=a("strong"),c0r=o("xlnet"),f0r=o(" \u2014 "),HU=a("a"),m0r=o("TFXLNetForQuestionAnsweringSimple"),g0r=o(" (XLNet model)"),h0r=l(),F(tE.$$.fragment),FNe=l(),Mc=a("h2"),aE=a("a"),l3e=a("span"),F(ex.$$.fragment),p0r=l(),i3e=a("span"),_0r=o("TFAutoModelForVision2Seq"),TNe=l(),dr=a("div"),F(ox.$$.fragment),u0r=l(),Ec=a("p"),b0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UU=a("a"),v0r=o("from_pretrained()"),F0r=o(" class method or the "),JU=a("a"),T0r=o("from_config()"),M0r=o(` class
method.`),E0r=l(),rx=a("p"),C0r=o("This class cannot be instantiated directly using "),d3e=a("code"),w0r=o("__init__()"),A0r=o(" (throws an error)."),y0r=l(),jt=a("div"),F(tx.$$.fragment),L0r=l(),c3e=a("p"),x0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$0r=l(),Cc=a("p"),k0r=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),S0r=o("not"),R0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),P0r=o("from_pretrained()"),B0r=o(" to load the model weights."),I0r=l(),F(nE.$$.fragment),q0r=l(),qr=a("div"),F(ax.$$.fragment),N0r=l(),m3e=a("p"),j0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D0r=l(),mn=a("p"),G0r=o("The model class to instantiate is selected based on the "),g3e=a("code"),O0r=o("model_type"),V0r=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),W0r=o("pretrained_model_name_or_path"),Q0r=o(":"),H0r=l(),_3e=a("ul"),sE=a("li"),u3e=a("strong"),U0r=o("vision-encoder-decoder"),J0r=o(" \u2014 "),KU=a("a"),Y0r=o("TFVisionEncoderDecoderModel"),K0r=o(" (Vision Encoder decoder model)"),Z0r=l(),F(lE.$$.fragment),MNe=l(),wc=a("h2"),iE=a("a"),b3e=a("span"),F(nx.$$.fragment),eAr=l(),v3e=a("span"),oAr=o("TFAutoModelForSpeechSeq2Seq"),ENe=l(),cr=a("div"),F(sx.$$.fragment),rAr=l(),Ac=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZU=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),eJ=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),lx=a("p"),dAr=o("This class cannot be instantiated directly using "),F3e=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),Dt=a("div"),F(ix.$$.fragment),gAr=l(),T3e=a("p"),hAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pAr=l(),yc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),M3e=a("strong"),uAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(dE.$$.fragment),MAr=l(),Nr=a("div"),F(dx.$$.fragment),EAr=l(),E3e=a("p"),CAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wAr=l(),gn=a("p"),AAr=o("The model class to instantiate is selected based on the "),C3e=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),w3e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),y3e=a("ul"),cE=a("li"),L3e=a("strong"),PAr=o("speech_to_text"),BAr=o(" \u2014 "),rJ=a("a"),IAr=o("TFSpeech2TextForConditionalGeneration"),qAr=o(" (Speech2Text model)"),NAr=l(),F(fE.$$.fragment),CNe=l(),Lc=a("h2"),mE=a("a"),x3e=a("span"),F(cx.$$.fragment),jAr=l(),$3e=a("span"),DAr=o("FlaxAutoModel"),wNe=l(),fr=a("div"),F(fx.$$.fragment),GAr=l(),xc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),aJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),mx=a("p"),HAr=o("This class cannot be instantiated directly using "),k3e=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Gt=a("div"),F(gx.$$.fragment),KAr=l(),S3e=a("p"),ZAr=o("Instantiates one of the base model classes of the library from a configuration."),eyr=l(),$c=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),R3e=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(gE.$$.fragment),lyr=l(),jr=a("div"),F(hx.$$.fragment),iyr=l(),P3e=a("p"),dyr=o("Instantiate one of the base model classes of the library from a pretrained model."),cyr=l(),hn=a("p"),fyr=o("The model class to instantiate is selected based on the "),B3e=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),I3e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),re=a("ul"),hE=a("li"),N3e=a("strong"),vyr=o("albert"),Fyr=o(" \u2014 "),sJ=a("a"),Tyr=o("FlaxAlbertModel"),Myr=o(" (ALBERT model)"),Eyr=l(),pE=a("li"),j3e=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),lJ=a("a"),Ayr=o("FlaxBartModel"),yyr=o(" (BART model)"),Lyr=l(),_E=a("li"),D3e=a("strong"),xyr=o("beit"),$yr=o(" \u2014 "),iJ=a("a"),kyr=o("FlaxBeitModel"),Syr=o(" (BEiT model)"),Ryr=l(),uE=a("li"),G3e=a("strong"),Pyr=o("bert"),Byr=o(" \u2014 "),dJ=a("a"),Iyr=o("FlaxBertModel"),qyr=o(" (BERT model)"),Nyr=l(),bE=a("li"),O3e=a("strong"),jyr=o("big_bird"),Dyr=o(" \u2014 "),cJ=a("a"),Gyr=o("FlaxBigBirdModel"),Oyr=o(" (BigBird model)"),Vyr=l(),vE=a("li"),V3e=a("strong"),Xyr=o("blenderbot"),zyr=o(" \u2014 "),fJ=a("a"),Wyr=o("FlaxBlenderbotModel"),Qyr=o(" (Blenderbot model)"),Hyr=l(),FE=a("li"),X3e=a("strong"),Uyr=o("blenderbot-small"),Jyr=o(" \u2014 "),mJ=a("a"),Yyr=o("FlaxBlenderbotSmallModel"),Kyr=o(" (BlenderbotSmall model)"),Zyr=l(),TE=a("li"),z3e=a("strong"),eLr=o("clip"),oLr=o(" \u2014 "),gJ=a("a"),rLr=o("FlaxCLIPModel"),tLr=o(" (CLIP model)"),aLr=l(),ME=a("li"),W3e=a("strong"),nLr=o("distilbert"),sLr=o(" \u2014 "),hJ=a("a"),lLr=o("FlaxDistilBertModel"),iLr=o(" (DistilBERT model)"),dLr=l(),EE=a("li"),Q3e=a("strong"),cLr=o("electra"),fLr=o(" \u2014 "),pJ=a("a"),mLr=o("FlaxElectraModel"),gLr=o(" (ELECTRA model)"),hLr=l(),CE=a("li"),H3e=a("strong"),pLr=o("gpt2"),_Lr=o(" \u2014 "),_J=a("a"),uLr=o("FlaxGPT2Model"),bLr=o(" (OpenAI GPT-2 model)"),vLr=l(),wE=a("li"),U3e=a("strong"),FLr=o("gpt_neo"),TLr=o(" \u2014 "),uJ=a("a"),MLr=o("FlaxGPTNeoModel"),ELr=o(" (GPT Neo model)"),CLr=l(),AE=a("li"),J3e=a("strong"),wLr=o("gptj"),ALr=o(" \u2014 "),bJ=a("a"),yLr=o("FlaxGPTJModel"),LLr=o(" (GPT-J model)"),xLr=l(),yE=a("li"),Y3e=a("strong"),$Lr=o("marian"),kLr=o(" \u2014 "),vJ=a("a"),SLr=o("FlaxMarianModel"),RLr=o(" (Marian model)"),PLr=l(),LE=a("li"),K3e=a("strong"),BLr=o("mbart"),ILr=o(" \u2014 "),FJ=a("a"),qLr=o("FlaxMBartModel"),NLr=o(" (mBART model)"),jLr=l(),xE=a("li"),Z3e=a("strong"),DLr=o("mt5"),GLr=o(" \u2014 "),TJ=a("a"),OLr=o("FlaxMT5Model"),VLr=o(" (mT5 model)"),XLr=l(),$E=a("li"),eFe=a("strong"),zLr=o("pegasus"),WLr=o(" \u2014 "),MJ=a("a"),QLr=o("FlaxPegasusModel"),HLr=o(" (Pegasus model)"),ULr=l(),kE=a("li"),oFe=a("strong"),JLr=o("roberta"),YLr=o(" \u2014 "),EJ=a("a"),KLr=o("FlaxRobertaModel"),ZLr=o(" (RoBERTa model)"),e8r=l(),SE=a("li"),rFe=a("strong"),o8r=o("roformer"),r8r=o(" \u2014 "),CJ=a("a"),t8r=o("FlaxRoFormerModel"),a8r=o(" (RoFormer model)"),n8r=l(),RE=a("li"),tFe=a("strong"),s8r=o("t5"),l8r=o(" \u2014 "),wJ=a("a"),i8r=o("FlaxT5Model"),d8r=o(" (T5 model)"),c8r=l(),PE=a("li"),aFe=a("strong"),f8r=o("vision-text-dual-encoder"),m8r=o(" \u2014 "),AJ=a("a"),g8r=o("FlaxVisionTextDualEncoderModel"),h8r=o(" (VisionTextDualEncoder model)"),p8r=l(),BE=a("li"),nFe=a("strong"),_8r=o("vit"),u8r=o(" \u2014 "),yJ=a("a"),b8r=o("FlaxViTModel"),v8r=o(" (ViT model)"),F8r=l(),IE=a("li"),sFe=a("strong"),T8r=o("wav2vec2"),M8r=o(" \u2014 "),LJ=a("a"),E8r=o("FlaxWav2Vec2Model"),C8r=o(" (Wav2Vec2 model)"),w8r=l(),qE=a("li"),lFe=a("strong"),A8r=o("xglm"),y8r=o(" \u2014 "),xJ=a("a"),L8r=o("FlaxXGLMModel"),x8r=o(" (XGLM model)"),$8r=l(),NE=a("li"),iFe=a("strong"),k8r=o("xlm-roberta"),S8r=o(" \u2014 "),$J=a("a"),R8r=o("FlaxXLMRobertaModel"),P8r=o(" (XLM-RoBERTa model)"),B8r=l(),F(jE.$$.fragment),ANe=l(),kc=a("h2"),DE=a("a"),dFe=a("span"),F(px.$$.fragment),I8r=l(),cFe=a("span"),q8r=o("FlaxAutoModelForCausalLM"),yNe=l(),mr=a("div"),F(_x.$$.fragment),N8r=l(),Sc=a("p"),j8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=a("a"),D8r=o("from_pretrained()"),G8r=o(" class method or the "),SJ=a("a"),O8r=o("from_config()"),V8r=o(` class
method.`),X8r=l(),ux=a("p"),z8r=o("This class cannot be instantiated directly using "),fFe=a("code"),W8r=o("__init__()"),Q8r=o(" (throws an error)."),H8r=l(),Ot=a("div"),F(bx.$$.fragment),U8r=l(),mFe=a("p"),J8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y8r=l(),Rc=a("p"),K8r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),Z8r=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),o7r=o("from_pretrained()"),r7r=o(" to load the model weights."),t7r=l(),F(GE.$$.fragment),a7r=l(),Dr=a("div"),F(vx.$$.fragment),n7r=l(),hFe=a("p"),s7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l7r=l(),pn=a("p"),i7r=o("The model class to instantiate is selected based on the "),pFe=a("code"),d7r=o("model_type"),c7r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(":"),p7r=l(),Re=a("ul"),OE=a("li"),bFe=a("strong"),_7r=o("bart"),u7r=o(" \u2014 "),PJ=a("a"),b7r=o("FlaxBartForCausalLM"),v7r=o(" (BART model)"),F7r=l(),VE=a("li"),vFe=a("strong"),T7r=o("bert"),M7r=o(" \u2014 "),BJ=a("a"),E7r=o("FlaxBertForCausalLM"),C7r=o(" (BERT model)"),w7r=l(),XE=a("li"),FFe=a("strong"),A7r=o("big_bird"),y7r=o(" \u2014 "),IJ=a("a"),L7r=o("FlaxBigBirdForCausalLM"),x7r=o(" (BigBird model)"),$7r=l(),zE=a("li"),TFe=a("strong"),k7r=o("electra"),S7r=o(" \u2014 "),qJ=a("a"),R7r=o("FlaxElectraForCausalLM"),P7r=o(" (ELECTRA model)"),B7r=l(),WE=a("li"),MFe=a("strong"),I7r=o("gpt2"),q7r=o(" \u2014 "),NJ=a("a"),N7r=o("FlaxGPT2LMHeadModel"),j7r=o(" (OpenAI GPT-2 model)"),D7r=l(),QE=a("li"),EFe=a("strong"),G7r=o("gpt_neo"),O7r=o(" \u2014 "),jJ=a("a"),V7r=o("FlaxGPTNeoForCausalLM"),X7r=o(" (GPT Neo model)"),z7r=l(),HE=a("li"),CFe=a("strong"),W7r=o("gptj"),Q7r=o(" \u2014 "),DJ=a("a"),H7r=o("FlaxGPTJForCausalLM"),U7r=o(" (GPT-J model)"),J7r=l(),UE=a("li"),wFe=a("strong"),Y7r=o("roberta"),K7r=o(" \u2014 "),GJ=a("a"),Z7r=o("FlaxRobertaForCausalLM"),exr=o(" (RoBERTa model)"),oxr=l(),JE=a("li"),AFe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),OJ=a("a"),axr=o("FlaxXGLMForCausalLM"),nxr=o(" (XGLM model)"),sxr=l(),F(YE.$$.fragment),LNe=l(),Pc=a("h2"),KE=a("a"),yFe=a("span"),F(Fx.$$.fragment),lxr=l(),LFe=a("span"),ixr=o("FlaxAutoModelForPreTraining"),xNe=l(),gr=a("div"),F(Tx.$$.fragment),dxr=l(),Bc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VJ=a("a"),fxr=o("from_pretrained()"),mxr=o(" class method or the "),XJ=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),pxr=l(),Mx=a("p"),_xr=o("This class cannot be instantiated directly using "),xFe=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Vt=a("div"),F(Ex.$$.fragment),Fxr=l(),$Fe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mxr=l(),Ic=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),Axr=o("from_pretrained()"),yxr=o(" to load the model weights."),Lxr=l(),F(ZE.$$.fragment),xxr=l(),Gr=a("div"),F(Cx.$$.fragment),$xr=l(),SFe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sxr=l(),_n=a("p"),Rxr=o("The model class to instantiate is selected based on the "),RFe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),Ixr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),Nxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),Me=a("ul"),eC=a("li"),IFe=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),WJ=a("a"),Vxr=o("FlaxAlbertForPreTraining"),Xxr=o(" (ALBERT model)"),zxr=l(),oC=a("li"),qFe=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),QJ=a("a"),Hxr=o("FlaxBartForConditionalGeneration"),Uxr=o(" (BART model)"),Jxr=l(),rC=a("li"),NFe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),HJ=a("a"),Zxr=o("FlaxBertForPreTraining"),e9r=o(" (BERT model)"),o9r=l(),tC=a("li"),jFe=a("strong"),r9r=o("big_bird"),t9r=o(" \u2014 "),UJ=a("a"),a9r=o("FlaxBigBirdForPreTraining"),n9r=o(" (BigBird model)"),s9r=l(),aC=a("li"),DFe=a("strong"),l9r=o("electra"),i9r=o(" \u2014 "),JJ=a("a"),d9r=o("FlaxElectraForPreTraining"),c9r=o(" (ELECTRA model)"),f9r=l(),nC=a("li"),GFe=a("strong"),m9r=o("mbart"),g9r=o(" \u2014 "),YJ=a("a"),h9r=o("FlaxMBartForConditionalGeneration"),p9r=o(" (mBART model)"),_9r=l(),sC=a("li"),OFe=a("strong"),u9r=o("mt5"),b9r=o(" \u2014 "),KJ=a("a"),v9r=o("FlaxMT5ForConditionalGeneration"),F9r=o(" (mT5 model)"),T9r=l(),lC=a("li"),VFe=a("strong"),M9r=o("roberta"),E9r=o(" \u2014 "),ZJ=a("a"),C9r=o("FlaxRobertaForMaskedLM"),w9r=o(" (RoBERTa model)"),A9r=l(),iC=a("li"),XFe=a("strong"),y9r=o("roformer"),L9r=o(" \u2014 "),eY=a("a"),x9r=o("FlaxRoFormerForMaskedLM"),$9r=o(" (RoFormer model)"),k9r=l(),dC=a("li"),zFe=a("strong"),S9r=o("t5"),R9r=o(" \u2014 "),oY=a("a"),P9r=o("FlaxT5ForConditionalGeneration"),B9r=o(" (T5 model)"),I9r=l(),cC=a("li"),WFe=a("strong"),q9r=o("wav2vec2"),N9r=o(" \u2014 "),rY=a("a"),j9r=o("FlaxWav2Vec2ForPreTraining"),D9r=o(" (Wav2Vec2 model)"),G9r=l(),fC=a("li"),QFe=a("strong"),O9r=o("xlm-roberta"),V9r=o(" \u2014 "),tY=a("a"),X9r=o("FlaxXLMRobertaForMaskedLM"),z9r=o(" (XLM-RoBERTa model)"),W9r=l(),F(mC.$$.fragment),$Ne=l(),qc=a("h2"),gC=a("a"),HFe=a("span"),F(wx.$$.fragment),Q9r=l(),UFe=a("span"),H9r=o("FlaxAutoModelForMaskedLM"),kNe=l(),hr=a("div"),F(Ax.$$.fragment),U9r=l(),Nc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),nY=a("a"),Z9r=o("from_config()"),e$r=o(` class
method.`),o$r=l(),yx=a("p"),r$r=o("This class cannot be instantiated directly using "),JFe=a("code"),t$r=o("__init__()"),a$r=o(" (throws an error)."),n$r=l(),Xt=a("div"),F(Lx.$$.fragment),s$r=l(),YFe=a("p"),l$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i$r=l(),jc=a("p"),d$r=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),c$r=o("not"),f$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),m$r=o("from_pretrained()"),g$r=o(" to load the model weights."),h$r=l(),F(hC.$$.fragment),p$r=l(),Or=a("div"),F(xx.$$.fragment),_$r=l(),ZFe=a("p"),u$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b$r=l(),un=a("p"),v$r=o("The model class to instantiate is selected based on the "),e6e=a("code"),F$r=o("model_type"),T$r=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),M$r=o("pretrained_model_name_or_path"),E$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),C$r=o("pretrained_model_name_or_path"),w$r=o(":"),A$r=l(),Le=a("ul"),pC=a("li"),t6e=a("strong"),y$r=o("albert"),L$r=o(" \u2014 "),lY=a("a"),x$r=o("FlaxAlbertForMaskedLM"),$$r=o(" (ALBERT model)"),k$r=l(),_C=a("li"),a6e=a("strong"),S$r=o("bart"),R$r=o(" \u2014 "),iY=a("a"),P$r=o("FlaxBartForConditionalGeneration"),B$r=o(" (BART model)"),I$r=l(),uC=a("li"),n6e=a("strong"),q$r=o("bert"),N$r=o(" \u2014 "),dY=a("a"),j$r=o("FlaxBertForMaskedLM"),D$r=o(" (BERT model)"),G$r=l(),bC=a("li"),s6e=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),cY=a("a"),X$r=o("FlaxBigBirdForMaskedLM"),z$r=o(" (BigBird model)"),W$r=l(),vC=a("li"),l6e=a("strong"),Q$r=o("distilbert"),H$r=o(" \u2014 "),fY=a("a"),U$r=o("FlaxDistilBertForMaskedLM"),J$r=o(" (DistilBERT model)"),Y$r=l(),FC=a("li"),i6e=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),mY=a("a"),ekr=o("FlaxElectraForMaskedLM"),okr=o(" (ELECTRA model)"),rkr=l(),TC=a("li"),d6e=a("strong"),tkr=o("mbart"),akr=o(" \u2014 "),gY=a("a"),nkr=o("FlaxMBartForConditionalGeneration"),skr=o(" (mBART model)"),lkr=l(),MC=a("li"),c6e=a("strong"),ikr=o("roberta"),dkr=o(" \u2014 "),hY=a("a"),ckr=o("FlaxRobertaForMaskedLM"),fkr=o(" (RoBERTa model)"),mkr=l(),EC=a("li"),f6e=a("strong"),gkr=o("roformer"),hkr=o(" \u2014 "),pY=a("a"),pkr=o("FlaxRoFormerForMaskedLM"),_kr=o(" (RoFormer model)"),ukr=l(),CC=a("li"),m6e=a("strong"),bkr=o("xlm-roberta"),vkr=o(" \u2014 "),_Y=a("a"),Fkr=o("FlaxXLMRobertaForMaskedLM"),Tkr=o(" (XLM-RoBERTa model)"),Mkr=l(),F(wC.$$.fragment),SNe=l(),Dc=a("h2"),AC=a("a"),g6e=a("span"),F($x.$$.fragment),Ekr=l(),h6e=a("span"),Ckr=o("FlaxAutoModelForSeq2SeqLM"),RNe=l(),pr=a("div"),F(kx.$$.fragment),wkr=l(),Gc=a("p"),Akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uY=a("a"),ykr=o("from_pretrained()"),Lkr=o(" class method or the "),bY=a("a"),xkr=o("from_config()"),$kr=o(` class
method.`),kkr=l(),Sx=a("p"),Skr=o("This class cannot be instantiated directly using "),p6e=a("code"),Rkr=o("__init__()"),Pkr=o(" (throws an error)."),Bkr=l(),zt=a("div"),F(Rx.$$.fragment),Ikr=l(),_6e=a("p"),qkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nkr=l(),Oc=a("p"),jkr=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),Dkr=o("not"),Gkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),Okr=o("from_pretrained()"),Vkr=o(" to load the model weights."),Xkr=l(),F(yC.$$.fragment),zkr=l(),Vr=a("div"),F(Px.$$.fragment),Wkr=l(),b6e=a("p"),Qkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hkr=l(),bn=a("p"),Ukr=o("The model class to instantiate is selected based on the "),v6e=a("code"),Jkr=o("model_type"),Ykr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(":"),rSr=l(),Pe=a("ul"),LC=a("li"),M6e=a("strong"),tSr=o("bart"),aSr=o(" \u2014 "),FY=a("a"),nSr=o("FlaxBartForConditionalGeneration"),sSr=o(" (BART model)"),lSr=l(),xC=a("li"),E6e=a("strong"),iSr=o("blenderbot"),dSr=o(" \u2014 "),TY=a("a"),cSr=o("FlaxBlenderbotForConditionalGeneration"),fSr=o(" (Blenderbot model)"),mSr=l(),$C=a("li"),C6e=a("strong"),gSr=o("blenderbot-small"),hSr=o(" \u2014 "),MY=a("a"),pSr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Sr=o(" (BlenderbotSmall model)"),uSr=l(),kC=a("li"),w6e=a("strong"),bSr=o("encoder-decoder"),vSr=o(" \u2014 "),EY=a("a"),FSr=o("FlaxEncoderDecoderModel"),TSr=o(" (Encoder decoder model)"),MSr=l(),SC=a("li"),A6e=a("strong"),ESr=o("marian"),CSr=o(" \u2014 "),CY=a("a"),wSr=o("FlaxMarianMTModel"),ASr=o(" (Marian model)"),ySr=l(),RC=a("li"),y6e=a("strong"),LSr=o("mbart"),xSr=o(" \u2014 "),wY=a("a"),$Sr=o("FlaxMBartForConditionalGeneration"),kSr=o(" (mBART model)"),SSr=l(),PC=a("li"),L6e=a("strong"),RSr=o("mt5"),PSr=o(" \u2014 "),AY=a("a"),BSr=o("FlaxMT5ForConditionalGeneration"),ISr=o(" (mT5 model)"),qSr=l(),BC=a("li"),x6e=a("strong"),NSr=o("pegasus"),jSr=o(" \u2014 "),yY=a("a"),DSr=o("FlaxPegasusForConditionalGeneration"),GSr=o(" (Pegasus model)"),OSr=l(),IC=a("li"),$6e=a("strong"),VSr=o("t5"),XSr=o(" \u2014 "),LY=a("a"),zSr=o("FlaxT5ForConditionalGeneration"),WSr=o(" (T5 model)"),QSr=l(),F(qC.$$.fragment),PNe=l(),Vc=a("h2"),NC=a("a"),k6e=a("span"),F(Bx.$$.fragment),HSr=l(),S6e=a("span"),USr=o("FlaxAutoModelForSequenceClassification"),BNe=l(),_r=a("div"),F(Ix.$$.fragment),JSr=l(),Xc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xY=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),$Y=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),qx=a("p"),tRr=o("This class cannot be instantiated directly using "),R6e=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Wt=a("div"),F(Nx.$$.fragment),lRr=l(),P6e=a("p"),iRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dRr=l(),zc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(jC.$$.fragment),_Rr=l(),Xr=a("div"),F(jx.$$.fragment),uRr=l(),I6e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vRr=l(),vn=a("p"),FRr=o("The model class to instantiate is selected based on the "),q6e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),N6e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),xe=a("ul"),DC=a("li"),D6e=a("strong"),LRr=o("albert"),xRr=o(" \u2014 "),SY=a("a"),$Rr=o("FlaxAlbertForSequenceClassification"),kRr=o(" (ALBERT model)"),SRr=l(),GC=a("li"),G6e=a("strong"),RRr=o("bart"),PRr=o(" \u2014 "),RY=a("a"),BRr=o("FlaxBartForSequenceClassification"),IRr=o(" (BART model)"),qRr=l(),OC=a("li"),O6e=a("strong"),NRr=o("bert"),jRr=o(" \u2014 "),PY=a("a"),DRr=o("FlaxBertForSequenceClassification"),GRr=o(" (BERT model)"),ORr=l(),VC=a("li"),V6e=a("strong"),VRr=o("big_bird"),XRr=o(" \u2014 "),BY=a("a"),zRr=o("FlaxBigBirdForSequenceClassification"),WRr=o(" (BigBird model)"),QRr=l(),XC=a("li"),X6e=a("strong"),HRr=o("distilbert"),URr=o(" \u2014 "),IY=a("a"),JRr=o("FlaxDistilBertForSequenceClassification"),YRr=o(" (DistilBERT model)"),KRr=l(),zC=a("li"),z6e=a("strong"),ZRr=o("electra"),ePr=o(" \u2014 "),qY=a("a"),oPr=o("FlaxElectraForSequenceClassification"),rPr=o(" (ELECTRA model)"),tPr=l(),WC=a("li"),W6e=a("strong"),aPr=o("mbart"),nPr=o(" \u2014 "),NY=a("a"),sPr=o("FlaxMBartForSequenceClassification"),lPr=o(" (mBART model)"),iPr=l(),QC=a("li"),Q6e=a("strong"),dPr=o("roberta"),cPr=o(" \u2014 "),jY=a("a"),fPr=o("FlaxRobertaForSequenceClassification"),mPr=o(" (RoBERTa model)"),gPr=l(),HC=a("li"),H6e=a("strong"),hPr=o("roformer"),pPr=o(" \u2014 "),DY=a("a"),_Pr=o("FlaxRoFormerForSequenceClassification"),uPr=o(" (RoFormer model)"),bPr=l(),UC=a("li"),U6e=a("strong"),vPr=o("xlm-roberta"),FPr=o(" \u2014 "),GY=a("a"),TPr=o("FlaxXLMRobertaForSequenceClassification"),MPr=o(" (XLM-RoBERTa model)"),EPr=l(),F(JC.$$.fragment),INe=l(),Wc=a("h2"),YC=a("a"),J6e=a("span"),F(Dx.$$.fragment),CPr=l(),Y6e=a("span"),wPr=o("FlaxAutoModelForQuestionAnswering"),qNe=l(),ur=a("div"),F(Gx.$$.fragment),APr=l(),Qc=a("p"),yPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OY=a("a"),LPr=o("from_pretrained()"),xPr=o(" class method or the "),VY=a("a"),$Pr=o("from_config()"),kPr=o(` class
method.`),SPr=l(),Ox=a("p"),RPr=o("This class cannot be instantiated directly using "),K6e=a("code"),PPr=o("__init__()"),BPr=o(" (throws an error)."),IPr=l(),Qt=a("div"),F(Vx.$$.fragment),qPr=l(),Z6e=a("p"),NPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jPr=l(),Hc=a("p"),DPr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),GPr=o("not"),OPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),VPr=o("from_pretrained()"),XPr=o(" to load the model weights."),zPr=l(),F(KC.$$.fragment),WPr=l(),zr=a("div"),F(Xx.$$.fragment),QPr=l(),oTe=a("p"),HPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UPr=l(),Fn=a("p"),JPr=o("The model class to instantiate is selected based on the "),rTe=a("code"),YPr=o("model_type"),KPr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),ZPr=o("pretrained_model_name_or_path"),eBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(":"),tBr=l(),$e=a("ul"),ZC=a("li"),nTe=a("strong"),aBr=o("albert"),nBr=o(" \u2014 "),zY=a("a"),sBr=o("FlaxAlbertForQuestionAnswering"),lBr=o(" (ALBERT model)"),iBr=l(),ew=a("li"),sTe=a("strong"),dBr=o("bart"),cBr=o(" \u2014 "),WY=a("a"),fBr=o("FlaxBartForQuestionAnswering"),mBr=o(" (BART model)"),gBr=l(),ow=a("li"),lTe=a("strong"),hBr=o("bert"),pBr=o(" \u2014 "),QY=a("a"),_Br=o("FlaxBertForQuestionAnswering"),uBr=o(" (BERT model)"),bBr=l(),rw=a("li"),iTe=a("strong"),vBr=o("big_bird"),FBr=o(" \u2014 "),HY=a("a"),TBr=o("FlaxBigBirdForQuestionAnswering"),MBr=o(" (BigBird model)"),EBr=l(),tw=a("li"),dTe=a("strong"),CBr=o("distilbert"),wBr=o(" \u2014 "),UY=a("a"),ABr=o("FlaxDistilBertForQuestionAnswering"),yBr=o(" (DistilBERT model)"),LBr=l(),aw=a("li"),cTe=a("strong"),xBr=o("electra"),$Br=o(" \u2014 "),JY=a("a"),kBr=o("FlaxElectraForQuestionAnswering"),SBr=o(" (ELECTRA model)"),RBr=l(),nw=a("li"),fTe=a("strong"),PBr=o("mbart"),BBr=o(" \u2014 "),YY=a("a"),IBr=o("FlaxMBartForQuestionAnswering"),qBr=o(" (mBART model)"),NBr=l(),sw=a("li"),mTe=a("strong"),jBr=o("roberta"),DBr=o(" \u2014 "),KY=a("a"),GBr=o("FlaxRobertaForQuestionAnswering"),OBr=o(" (RoBERTa model)"),VBr=l(),lw=a("li"),gTe=a("strong"),XBr=o("roformer"),zBr=o(" \u2014 "),ZY=a("a"),WBr=o("FlaxRoFormerForQuestionAnswering"),QBr=o(" (RoFormer model)"),HBr=l(),iw=a("li"),hTe=a("strong"),UBr=o("xlm-roberta"),JBr=o(" \u2014 "),eK=a("a"),YBr=o("FlaxXLMRobertaForQuestionAnswering"),KBr=o(" (XLM-RoBERTa model)"),ZBr=l(),F(dw.$$.fragment),NNe=l(),Uc=a("h2"),cw=a("a"),pTe=a("span"),F(zx.$$.fragment),eIr=l(),_Te=a("span"),oIr=o("FlaxAutoModelForTokenClassification"),jNe=l(),br=a("div"),F(Wx.$$.fragment),rIr=l(),Jc=a("p"),tIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oK=a("a"),aIr=o("from_pretrained()"),nIr=o(" class method or the "),rK=a("a"),sIr=o("from_config()"),lIr=o(` class
method.`),iIr=l(),Qx=a("p"),dIr=o("This class cannot be instantiated directly using "),uTe=a("code"),cIr=o("__init__()"),fIr=o(" (throws an error)."),mIr=l(),Ht=a("div"),F(Hx.$$.fragment),gIr=l(),bTe=a("p"),hIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pIr=l(),Yc=a("p"),_Ir=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),uIr=o("not"),bIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),vIr=o("from_pretrained()"),FIr=o(" to load the model weights."),TIr=l(),F(fw.$$.fragment),MIr=l(),Wr=a("div"),F(Ux.$$.fragment),EIr=l(),FTe=a("p"),CIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wIr=l(),Tn=a("p"),AIr=o("The model class to instantiate is selected based on the "),TTe=a("code"),yIr=o("model_type"),LIr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),kIr=o("pretrained_model_name_or_path"),SIr=o(":"),RIr=l(),De=a("ul"),mw=a("li"),CTe=a("strong"),PIr=o("albert"),BIr=o(" \u2014 "),aK=a("a"),IIr=o("FlaxAlbertForTokenClassification"),qIr=o(" (ALBERT model)"),NIr=l(),gw=a("li"),wTe=a("strong"),jIr=o("bert"),DIr=o(" \u2014 "),nK=a("a"),GIr=o("FlaxBertForTokenClassification"),OIr=o(" (BERT model)"),VIr=l(),hw=a("li"),ATe=a("strong"),XIr=o("big_bird"),zIr=o(" \u2014 "),sK=a("a"),WIr=o("FlaxBigBirdForTokenClassification"),QIr=o(" (BigBird model)"),HIr=l(),pw=a("li"),yTe=a("strong"),UIr=o("distilbert"),JIr=o(" \u2014 "),lK=a("a"),YIr=o("FlaxDistilBertForTokenClassification"),KIr=o(" (DistilBERT model)"),ZIr=l(),_w=a("li"),LTe=a("strong"),eqr=o("electra"),oqr=o(" \u2014 "),iK=a("a"),rqr=o("FlaxElectraForTokenClassification"),tqr=o(" (ELECTRA model)"),aqr=l(),uw=a("li"),xTe=a("strong"),nqr=o("roberta"),sqr=o(" \u2014 "),dK=a("a"),lqr=o("FlaxRobertaForTokenClassification"),iqr=o(" (RoBERTa model)"),dqr=l(),bw=a("li"),$Te=a("strong"),cqr=o("roformer"),fqr=o(" \u2014 "),cK=a("a"),mqr=o("FlaxRoFormerForTokenClassification"),gqr=o(" (RoFormer model)"),hqr=l(),vw=a("li"),kTe=a("strong"),pqr=o("xlm-roberta"),_qr=o(" \u2014 "),fK=a("a"),uqr=o("FlaxXLMRobertaForTokenClassification"),bqr=o(" (XLM-RoBERTa model)"),vqr=l(),F(Fw.$$.fragment),DNe=l(),Kc=a("h2"),Tw=a("a"),STe=a("span"),F(Jx.$$.fragment),Fqr=l(),RTe=a("span"),Tqr=o("FlaxAutoModelForMultipleChoice"),GNe=l(),vr=a("div"),F(Yx.$$.fragment),Mqr=l(),Zc=a("p"),Eqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=a("a"),Cqr=o("from_pretrained()"),wqr=o(" class method or the "),gK=a("a"),Aqr=o("from_config()"),yqr=o(` class
method.`),Lqr=l(),Kx=a("p"),xqr=o("This class cannot be instantiated directly using "),PTe=a("code"),$qr=o("__init__()"),kqr=o(" (throws an error)."),Sqr=l(),Ut=a("div"),F(Zx.$$.fragment),Rqr=l(),BTe=a("p"),Pqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bqr=l(),ef=a("p"),Iqr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),qqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),jqr=o("from_pretrained()"),Dqr=o(" to load the model weights."),Gqr=l(),F(Mw.$$.fragment),Oqr=l(),Qr=a("div"),F(e9.$$.fragment),Vqr=l(),qTe=a("p"),Xqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zqr=l(),Mn=a("p"),Wqr=o("The model class to instantiate is selected based on the "),NTe=a("code"),Qqr=o("model_type"),Hqr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),Yqr=o("pretrained_model_name_or_path"),Kqr=o(":"),Zqr=l(),Ge=a("ul"),Ew=a("li"),GTe=a("strong"),eNr=o("albert"),oNr=o(" \u2014 "),pK=a("a"),rNr=o("FlaxAlbertForMultipleChoice"),tNr=o(" (ALBERT model)"),aNr=l(),Cw=a("li"),OTe=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),_K=a("a"),lNr=o("FlaxBertForMultipleChoice"),iNr=o(" (BERT model)"),dNr=l(),ww=a("li"),VTe=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),uK=a("a"),mNr=o("FlaxBigBirdForMultipleChoice"),gNr=o(" (BigBird model)"),hNr=l(),Aw=a("li"),XTe=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),bK=a("a"),uNr=o("FlaxDistilBertForMultipleChoice"),bNr=o(" (DistilBERT model)"),vNr=l(),yw=a("li"),zTe=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),vK=a("a"),MNr=o("FlaxElectraForMultipleChoice"),ENr=o(" (ELECTRA model)"),CNr=l(),Lw=a("li"),WTe=a("strong"),wNr=o("roberta"),ANr=o(" \u2014 "),FK=a("a"),yNr=o("FlaxRobertaForMultipleChoice"),LNr=o(" (RoBERTa model)"),xNr=l(),xw=a("li"),QTe=a("strong"),$Nr=o("roformer"),kNr=o(" \u2014 "),TK=a("a"),SNr=o("FlaxRoFormerForMultipleChoice"),RNr=o(" (RoFormer model)"),PNr=l(),$w=a("li"),HTe=a("strong"),BNr=o("xlm-roberta"),INr=o(" \u2014 "),MK=a("a"),qNr=o("FlaxXLMRobertaForMultipleChoice"),NNr=o(" (XLM-RoBERTa model)"),jNr=l(),F(kw.$$.fragment),ONe=l(),of=a("h2"),Sw=a("a"),UTe=a("span"),F(o9.$$.fragment),DNr=l(),JTe=a("span"),GNr=o("FlaxAutoModelForNextSentencePrediction"),VNe=l(),Fr=a("div"),F(r9.$$.fragment),ONr=l(),rf=a("p"),VNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EK=a("a"),XNr=o("from_pretrained()"),zNr=o(" class method or the "),CK=a("a"),WNr=o("from_config()"),QNr=o(` class
method.`),HNr=l(),t9=a("p"),UNr=o("This class cannot be instantiated directly using "),YTe=a("code"),JNr=o("__init__()"),YNr=o(" (throws an error)."),KNr=l(),Jt=a("div"),F(a9.$$.fragment),ZNr=l(),KTe=a("p"),ejr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ojr=l(),tf=a("p"),rjr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),tjr=o("not"),ajr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),njr=o("from_pretrained()"),sjr=o(" to load the model weights."),ljr=l(),F(Rw.$$.fragment),ijr=l(),Hr=a("div"),F(n9.$$.fragment),djr=l(),eMe=a("p"),cjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fjr=l(),En=a("p"),mjr=o("The model class to instantiate is selected based on the "),oMe=a("code"),gjr=o("model_type"),hjr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),pjr=o("pretrained_model_name_or_path"),_jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),ujr=o("pretrained_model_name_or_path"),bjr=o(":"),vjr=l(),aMe=a("ul"),Pw=a("li"),nMe=a("strong"),Fjr=o("bert"),Tjr=o(" \u2014 "),AK=a("a"),Mjr=o("FlaxBertForNextSentencePrediction"),Ejr=o(" (BERT model)"),Cjr=l(),F(Bw.$$.fragment),XNe=l(),af=a("h2"),Iw=a("a"),sMe=a("span"),F(s9.$$.fragment),wjr=l(),lMe=a("span"),Ajr=o("FlaxAutoModelForImageClassification"),zNe=l(),Tr=a("div"),F(l9.$$.fragment),yjr=l(),nf=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yK=a("a"),xjr=o("from_pretrained()"),$jr=o(" class method or the "),LK=a("a"),kjr=o("from_config()"),Sjr=o(` class
method.`),Rjr=l(),i9=a("p"),Pjr=o("This class cannot be instantiated directly using "),iMe=a("code"),Bjr=o("__init__()"),Ijr=o(" (throws an error)."),qjr=l(),Yt=a("div"),F(d9.$$.fragment),Njr=l(),dMe=a("p"),jjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Djr=l(),sf=a("p"),Gjr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),Ojr=o("not"),Vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),Xjr=o("from_pretrained()"),zjr=o(" to load the model weights."),Wjr=l(),F(qw.$$.fragment),Qjr=l(),Ur=a("div"),F(c9.$$.fragment),Hjr=l(),fMe=a("p"),Ujr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jjr=l(),Cn=a("p"),Yjr=o("The model class to instantiate is selected based on the "),mMe=a("code"),Kjr=o("model_type"),Zjr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),eDr=o("pretrained_model_name_or_path"),oDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),rDr=o("pretrained_model_name_or_path"),tDr=o(":"),aDr=l(),f9=a("ul"),Nw=a("li"),pMe=a("strong"),nDr=o("beit"),sDr=o(" \u2014 "),$K=a("a"),lDr=o("FlaxBeitForImageClassification"),iDr=o(" (BEiT model)"),dDr=l(),jw=a("li"),_Me=a("strong"),cDr=o("vit"),fDr=o(" \u2014 "),kK=a("a"),mDr=o("FlaxViTForImageClassification"),gDr=o(" (ViT model)"),hDr=l(),F(Dw.$$.fragment),WNe=l(),lf=a("h2"),Gw=a("a"),uMe=a("span"),F(m9.$$.fragment),pDr=l(),bMe=a("span"),_Dr=o("FlaxAutoModelForVision2Seq"),QNe=l(),Mr=a("div"),F(g9.$$.fragment),uDr=l(),df=a("p"),bDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=a("a"),vDr=o("from_pretrained()"),FDr=o(" class method or the "),RK=a("a"),TDr=o("from_config()"),MDr=o(` class
method.`),EDr=l(),h9=a("p"),CDr=o("This class cannot be instantiated directly using "),vMe=a("code"),wDr=o("__init__()"),ADr=o(" (throws an error)."),yDr=l(),Kt=a("div"),F(p9.$$.fragment),LDr=l(),FMe=a("p"),xDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Dr=l(),cf=a("p"),kDr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),SDr=o("not"),RDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=a("a"),PDr=o("from_pretrained()"),BDr=o(" to load the model weights."),IDr=l(),F(Ow.$$.fragment),qDr=l(),Jr=a("div"),F(_9.$$.fragment),NDr=l(),MMe=a("p"),jDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DDr=l(),wn=a("p"),GDr=o("The model class to instantiate is selected based on the "),EMe=a("code"),ODr=o("model_type"),VDr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),XDr=o("pretrained_model_name_or_path"),zDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),WDr=o("pretrained_model_name_or_path"),QDr=o(":"),HDr=l(),AMe=a("ul"),Vw=a("li"),yMe=a("strong"),UDr=o("vision-encoder-decoder"),JDr=o(" \u2014 "),BK=a("a"),YDr=o("FlaxVisionEncoderDecoderModel"),KDr=o(" (Vision Encoder decoder model)"),ZDr=l(),F(Xw.$$.fragment),this.h()},l(f){const u=r7t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var u9=s(p);m=n(u9,"A",{id:!0,class:!0,href:!0});var LMe=s(m);_=n(LMe,"SPAN",{});var xMe=s(_);T(d.$$.fragment,xMe),xMe.forEach(t),LMe.forEach(t),h=i(u9),Mo=n(u9,"SPAN",{});var $Me=s(Mo);ci=r($Me,"Auto Classes"),$Me.forEach(t),u9.forEach(t),hf=i(f),rt=n(f,"P",{});var b9=s(rt);fi=r(b9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(b9,"CODE",{});var kMe=s(mi);iy=r(kMe,"from_pretrained()"),kMe.forEach(t),pf=r(b9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),b9.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var SMe=s(yn);dy=r(SMe,"AutoConfig"),SMe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var RMe=s(xn);cy=r(RMe,"AutoModel"),RMe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var PMe=s($n);fy=r(PMe,"AutoTokenizer"),PMe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var v9=s(Ae);x$=r(v9,"will create a model that is an instance of "),_i=n(v9,"A",{href:!0});var BMe=s(_i);$$=r(BMe,"BertModel"),BMe.forEach(t),k$=r(v9,"."),v9.forEach(t),Eo=i(f),wa=n(f,"P",{});var F9=s(wa);S$=r(F9,"There is one class of "),uf=n(F9,"CODE",{});var IMe=s(uf);R$=r(IMe,"AutoModel"),IMe.forEach(t),rGe=r(F9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),F9.forEach(t),zIe=i(f),ui=n(f,"H2",{class:!0});var T9=s(ui);bf=n(T9,"A",{id:!0,class:!0,href:!0});var qMe=s(bf);Lee=n(qMe,"SPAN",{});var NMe=s(Lee);T(my.$$.fragment,NMe),NMe.forEach(t),qMe.forEach(t),tGe=i(T9),xee=n(T9,"SPAN",{});var jMe=s(xee);aGe=r(jMe,"Extending the Auto Classes"),jMe.forEach(t),T9.forEach(t),WIe=i(f),kn=n(f,"P",{});var ff=s(kn);nGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ee=n(ff,"CODE",{});var DMe=s($ee);sGe=r(DMe,"NewModel"),DMe.forEach(t),lGe=r(ff,", make sure you have a "),kee=n(ff,"CODE",{});var GMe=s(kee);iGe=r(GMe,"NewModelConfig"),GMe.forEach(t),dGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),QIe=i(f),T(gy.$$.fragment,f),HIe=i(f),P$=n(f,"P",{});var OMe=s(P$);cGe=r(OMe,"You will then be able to use the auto classes like you would usually do!"),OMe.forEach(t),UIe=i(f),T(vf.$$.fragment,f),JIe=i(f),bi=n(f,"H2",{class:!0});var M9=s(bi);Ff=n(M9,"A",{id:!0,class:!0,href:!0});var VMe=s(Ff);See=n(VMe,"SPAN",{});var XMe=s(See);T(hy.$$.fragment,XMe),XMe.forEach(t),VMe.forEach(t),fGe=i(M9),Ree=n(M9,"SPAN",{});var zMe=s(Ree);mGe=r(zMe,"AutoConfig"),zMe.forEach(t),M9.forEach(t),YIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(py.$$.fragment,et),gGe=i(et),_y=n(et,"P",{});var E9=s(_y);hGe=r(E9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B$=n(E9,"A",{href:!0});var WMe=s(B$);pGe=r(WMe,"from_pretrained()"),WMe.forEach(t),_Ge=r(E9," class method."),E9.forEach(t),uGe=i(et),uy=n(et,"P",{});var C9=s(uy);bGe=r(C9,"This class cannot be instantiated directly using "),Pee=n(C9,"CODE",{});var QMe=s(Pee);vGe=r(QMe,"__init__()"),QMe.forEach(t),FGe=r(C9," (throws an error)."),C9.forEach(t),TGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(by.$$.fragment,ot),MGe=i(ot),Bee=n(ot,"P",{});var HMe=s(Bee);EGe=r(HMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),HMe.forEach(t),CGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);wGe=r(mf,"The configuration class to instantiate is selected based on the "),Iee=n(mf,"CODE",{});var UMe=s(Iee);AGe=r(UMe,"model_type"),UMe.forEach(t),yGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),qee=n(mf,"CODE",{});var JMe=s(qee);LGe=r(JMe,"pretrained_model_name_or_path"),JMe.forEach(t),xGe=r(mf,":"),mf.forEach(t),$Ge=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var zw=s(Tf);Nee=n(zw,"STRONG",{});var YMe=s(Nee);kGe=r(YMe,"albert"),YMe.forEach(t),SGe=r(zw," \u2014 "),I$=n(zw,"A",{href:!0});var KMe=s(I$);RGe=r(KMe,"AlbertConfig"),KMe.forEach(t),PGe=r(zw," (ALBERT model)"),zw.forEach(t),BGe=i(y),Mf=n(y,"LI",{});var Ww=s(Mf);jee=n(Ww,"STRONG",{});var ZMe=s(jee);IGe=r(ZMe,"bart"),ZMe.forEach(t),qGe=r(Ww," \u2014 "),q$=n(Ww,"A",{href:!0});var eEe=s(q$);NGe=r(eEe,"BartConfig"),eEe.forEach(t),jGe=r(Ww," (BART model)"),Ww.forEach(t),DGe=i(y),Ef=n(y,"LI",{});var Qw=s(Ef);Dee=n(Qw,"STRONG",{});var oEe=s(Dee);GGe=r(oEe,"beit"),oEe.forEach(t),OGe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var rEe=s(N$);VGe=r(rEe,"BeitConfig"),rEe.forEach(t),XGe=r(Qw," (BEiT model)"),Qw.forEach(t),zGe=i(y),Cf=n(y,"LI",{});var Hw=s(Cf);Gee=n(Hw,"STRONG",{});var tEe=s(Gee);WGe=r(tEe,"bert"),tEe.forEach(t),QGe=r(Hw," \u2014 "),j$=n(Hw,"A",{href:!0});var aEe=s(j$);HGe=r(aEe,"BertConfig"),aEe.forEach(t),UGe=r(Hw," (BERT model)"),Hw.forEach(t),JGe=i(y),wf=n(y,"LI",{});var Uw=s(wf);Oee=n(Uw,"STRONG",{});var nEe=s(Oee);YGe=r(nEe,"bert-generation"),nEe.forEach(t),KGe=r(Uw," \u2014 "),D$=n(Uw,"A",{href:!0});var sEe=s(D$);ZGe=r(sEe,"BertGenerationConfig"),sEe.forEach(t),eOe=r(Uw," (Bert Generation model)"),Uw.forEach(t),oOe=i(y),Af=n(y,"LI",{});var Jw=s(Af);Vee=n(Jw,"STRONG",{});var lEe=s(Vee);rOe=r(lEe,"big_bird"),lEe.forEach(t),tOe=r(Jw," \u2014 "),G$=n(Jw,"A",{href:!0});var iEe=s(G$);aOe=r(iEe,"BigBirdConfig"),iEe.forEach(t),nOe=r(Jw," (BigBird model)"),Jw.forEach(t),sOe=i(y),yf=n(y,"LI",{});var Yw=s(yf);Xee=n(Yw,"STRONG",{});var dEe=s(Xee);lOe=r(dEe,"bigbird_pegasus"),dEe.forEach(t),iOe=r(Yw," \u2014 "),O$=n(Yw,"A",{href:!0});var cEe=s(O$);dOe=r(cEe,"BigBirdPegasusConfig"),cEe.forEach(t),cOe=r(Yw," (BigBirdPegasus model)"),Yw.forEach(t),fOe=i(y),Lf=n(y,"LI",{});var Kw=s(Lf);zee=n(Kw,"STRONG",{});var fEe=s(zee);mOe=r(fEe,"blenderbot"),fEe.forEach(t),gOe=r(Kw," \u2014 "),V$=n(Kw,"A",{href:!0});var mEe=s(V$);hOe=r(mEe,"BlenderbotConfig"),mEe.forEach(t),pOe=r(Kw," (Blenderbot model)"),Kw.forEach(t),_Oe=i(y),xf=n(y,"LI",{});var Zw=s(xf);Wee=n(Zw,"STRONG",{});var gEe=s(Wee);uOe=r(gEe,"blenderbot-small"),gEe.forEach(t),bOe=r(Zw," \u2014 "),X$=n(Zw,"A",{href:!0});var hEe=s(X$);vOe=r(hEe,"BlenderbotSmallConfig"),hEe.forEach(t),FOe=r(Zw," (BlenderbotSmall model)"),Zw.forEach(t),TOe=i(y),$f=n(y,"LI",{});var e0=s($f);Qee=n(e0,"STRONG",{});var pEe=s(Qee);MOe=r(pEe,"camembert"),pEe.forEach(t),EOe=r(e0," \u2014 "),z$=n(e0,"A",{href:!0});var _Ee=s(z$);COe=r(_Ee,"CamembertConfig"),_Ee.forEach(t),wOe=r(e0," (CamemBERT model)"),e0.forEach(t),AOe=i(y),kf=n(y,"LI",{});var o0=s(kf);Hee=n(o0,"STRONG",{});var uEe=s(Hee);yOe=r(uEe,"canine"),uEe.forEach(t),LOe=r(o0," \u2014 "),W$=n(o0,"A",{href:!0});var bEe=s(W$);xOe=r(bEe,"CanineConfig"),bEe.forEach(t),$Oe=r(o0," (Canine model)"),o0.forEach(t),kOe=i(y),Sf=n(y,"LI",{});var r0=s(Sf);Uee=n(r0,"STRONG",{});var vEe=s(Uee);SOe=r(vEe,"clip"),vEe.forEach(t),ROe=r(r0," \u2014 "),Q$=n(r0,"A",{href:!0});var FEe=s(Q$);POe=r(FEe,"CLIPConfig"),FEe.forEach(t),BOe=r(r0," (CLIP model)"),r0.forEach(t),IOe=i(y),Rf=n(y,"LI",{});var t0=s(Rf);Jee=n(t0,"STRONG",{});var TEe=s(Jee);qOe=r(TEe,"convbert"),TEe.forEach(t),NOe=r(t0," \u2014 "),H$=n(t0,"A",{href:!0});var MEe=s(H$);jOe=r(MEe,"ConvBertConfig"),MEe.forEach(t),DOe=r(t0," (ConvBERT model)"),t0.forEach(t),GOe=i(y),Pf=n(y,"LI",{});var a0=s(Pf);Yee=n(a0,"STRONG",{});var EEe=s(Yee);OOe=r(EEe,"convnext"),EEe.forEach(t),VOe=r(a0," \u2014 "),U$=n(a0,"A",{href:!0});var CEe=s(U$);XOe=r(CEe,"ConvNextConfig"),CEe.forEach(t),zOe=r(a0," (ConvNext model)"),a0.forEach(t),WOe=i(y),Bf=n(y,"LI",{});var n0=s(Bf);Kee=n(n0,"STRONG",{});var wEe=s(Kee);QOe=r(wEe,"ctrl"),wEe.forEach(t),HOe=r(n0," \u2014 "),J$=n(n0,"A",{href:!0});var AEe=s(J$);UOe=r(AEe,"CTRLConfig"),AEe.forEach(t),JOe=r(n0," (CTRL model)"),n0.forEach(t),YOe=i(y),If=n(y,"LI",{});var s0=s(If);Zee=n(s0,"STRONG",{});var yEe=s(Zee);KOe=r(yEe,"data2vec-audio"),yEe.forEach(t),ZOe=r(s0," \u2014 "),Y$=n(s0,"A",{href:!0});var LEe=s(Y$);eVe=r(LEe,"Data2VecAudioConfig"),LEe.forEach(t),oVe=r(s0," (Data2VecAudio model)"),s0.forEach(t),rVe=i(y),qf=n(y,"LI",{});var l0=s(qf);eoe=n(l0,"STRONG",{});var xEe=s(eoe);tVe=r(xEe,"data2vec-text"),xEe.forEach(t),aVe=r(l0," \u2014 "),K$=n(l0,"A",{href:!0});var $Ee=s(K$);nVe=r($Ee,"Data2VecTextConfig"),$Ee.forEach(t),sVe=r(l0," (Data2VecText model)"),l0.forEach(t),lVe=i(y),Nf=n(y,"LI",{});var i0=s(Nf);ooe=n(i0,"STRONG",{});var kEe=s(ooe);iVe=r(kEe,"data2vec-vision"),kEe.forEach(t),dVe=r(i0," \u2014 "),Z$=n(i0,"A",{href:!0});var SEe=s(Z$);cVe=r(SEe,"Data2VecVisionConfig"),SEe.forEach(t),fVe=r(i0," (Data2VecVision model)"),i0.forEach(t),mVe=i(y),jf=n(y,"LI",{});var d0=s(jf);roe=n(d0,"STRONG",{});var REe=s(roe);gVe=r(REe,"deberta"),REe.forEach(t),hVe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var PEe=s(ek);pVe=r(PEe,"DebertaConfig"),PEe.forEach(t),_Ve=r(d0," (DeBERTa model)"),d0.forEach(t),uVe=i(y),Df=n(y,"LI",{});var c0=s(Df);toe=n(c0,"STRONG",{});var BEe=s(toe);bVe=r(BEe,"deberta-v2"),BEe.forEach(t),vVe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var IEe=s(ok);FVe=r(IEe,"DebertaV2Config"),IEe.forEach(t),TVe=r(c0," (DeBERTa-v2 model)"),c0.forEach(t),MVe=i(y),Gf=n(y,"LI",{});var f0=s(Gf);aoe=n(f0,"STRONG",{});var qEe=s(aoe);EVe=r(qEe,"decision_transformer"),qEe.forEach(t),CVe=r(f0," \u2014 "),rk=n(f0,"A",{href:!0});var NEe=s(rk);wVe=r(NEe,"DecisionTransformerConfig"),NEe.forEach(t),AVe=r(f0," (Decision Transformer model)"),f0.forEach(t),yVe=i(y),Of=n(y,"LI",{});var m0=s(Of);noe=n(m0,"STRONG",{});var jEe=s(noe);LVe=r(jEe,"deit"),jEe.forEach(t),xVe=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var DEe=s(tk);$Ve=r(DEe,"DeiTConfig"),DEe.forEach(t),kVe=r(m0," (DeiT model)"),m0.forEach(t),SVe=i(y),Vf=n(y,"LI",{});var g0=s(Vf);soe=n(g0,"STRONG",{});var GEe=s(soe);RVe=r(GEe,"detr"),GEe.forEach(t),PVe=r(g0," \u2014 "),ak=n(g0,"A",{href:!0});var oGr=s(ak);BVe=r(oGr,"DetrConfig"),oGr.forEach(t),IVe=r(g0," (DETR model)"),g0.forEach(t),qVe=i(y),Xf=n(y,"LI",{});var OEe=s(Xf);loe=n(OEe,"STRONG",{});var rGr=s(loe);NVe=r(rGr,"distilbert"),rGr.forEach(t),jVe=r(OEe," \u2014 "),nk=n(OEe,"A",{href:!0});var tGr=s(nk);DVe=r(tGr,"DistilBertConfig"),tGr.forEach(t),GVe=r(OEe," (DistilBERT model)"),OEe.forEach(t),OVe=i(y),zf=n(y,"LI",{});var VEe=s(zf);ioe=n(VEe,"STRONG",{});var aGr=s(ioe);VVe=r(aGr,"dpr"),aGr.forEach(t),XVe=r(VEe," \u2014 "),sk=n(VEe,"A",{href:!0});var nGr=s(sk);zVe=r(nGr,"DPRConfig"),nGr.forEach(t),WVe=r(VEe," (DPR model)"),VEe.forEach(t),QVe=i(y),Wf=n(y,"LI",{});var XEe=s(Wf);doe=n(XEe,"STRONG",{});var sGr=s(doe);HVe=r(sGr,"dpt"),sGr.forEach(t),UVe=r(XEe," \u2014 "),lk=n(XEe,"A",{href:!0});var lGr=s(lk);JVe=r(lGr,"DPTConfig"),lGr.forEach(t),YVe=r(XEe," (DPT model)"),XEe.forEach(t),KVe=i(y),Qf=n(y,"LI",{});var zEe=s(Qf);coe=n(zEe,"STRONG",{});var iGr=s(coe);ZVe=r(iGr,"electra"),iGr.forEach(t),eXe=r(zEe," \u2014 "),ik=n(zEe,"A",{href:!0});var dGr=s(ik);oXe=r(dGr,"ElectraConfig"),dGr.forEach(t),rXe=r(zEe," (ELECTRA model)"),zEe.forEach(t),tXe=i(y),Hf=n(y,"LI",{});var WEe=s(Hf);foe=n(WEe,"STRONG",{});var cGr=s(foe);aXe=r(cGr,"encoder-decoder"),cGr.forEach(t),nXe=r(WEe," \u2014 "),dk=n(WEe,"A",{href:!0});var fGr=s(dk);sXe=r(fGr,"EncoderDecoderConfig"),fGr.forEach(t),lXe=r(WEe," (Encoder decoder model)"),WEe.forEach(t),iXe=i(y),Uf=n(y,"LI",{});var QEe=s(Uf);moe=n(QEe,"STRONG",{});var mGr=s(moe);dXe=r(mGr,"flaubert"),mGr.forEach(t),cXe=r(QEe," \u2014 "),ck=n(QEe,"A",{href:!0});var gGr=s(ck);fXe=r(gGr,"FlaubertConfig"),gGr.forEach(t),mXe=r(QEe," (FlauBERT model)"),QEe.forEach(t),gXe=i(y),Jf=n(y,"LI",{});var HEe=s(Jf);goe=n(HEe,"STRONG",{});var hGr=s(goe);hXe=r(hGr,"flava"),hGr.forEach(t),pXe=r(HEe," \u2014 "),fk=n(HEe,"A",{href:!0});var pGr=s(fk);_Xe=r(pGr,"FlavaConfig"),pGr.forEach(t),uXe=r(HEe," (Flava model)"),HEe.forEach(t),bXe=i(y),Yf=n(y,"LI",{});var UEe=s(Yf);hoe=n(UEe,"STRONG",{});var _Gr=s(hoe);vXe=r(_Gr,"fnet"),_Gr.forEach(t),FXe=r(UEe," \u2014 "),mk=n(UEe,"A",{href:!0});var uGr=s(mk);TXe=r(uGr,"FNetConfig"),uGr.forEach(t),MXe=r(UEe," (FNet model)"),UEe.forEach(t),EXe=i(y),Kf=n(y,"LI",{});var JEe=s(Kf);poe=n(JEe,"STRONG",{});var bGr=s(poe);CXe=r(bGr,"fsmt"),bGr.forEach(t),wXe=r(JEe," \u2014 "),gk=n(JEe,"A",{href:!0});var vGr=s(gk);AXe=r(vGr,"FSMTConfig"),vGr.forEach(t),yXe=r(JEe," (FairSeq Machine-Translation model)"),JEe.forEach(t),LXe=i(y),Zf=n(y,"LI",{});var YEe=s(Zf);_oe=n(YEe,"STRONG",{});var FGr=s(_oe);xXe=r(FGr,"funnel"),FGr.forEach(t),$Xe=r(YEe," \u2014 "),hk=n(YEe,"A",{href:!0});var TGr=s(hk);kXe=r(TGr,"FunnelConfig"),TGr.forEach(t),SXe=r(YEe," (Funnel Transformer model)"),YEe.forEach(t),RXe=i(y),em=n(y,"LI",{});var KEe=s(em);uoe=n(KEe,"STRONG",{});var MGr=s(uoe);PXe=r(MGr,"glpn"),MGr.forEach(t),BXe=r(KEe," \u2014 "),pk=n(KEe,"A",{href:!0});var EGr=s(pk);IXe=r(EGr,"GLPNConfig"),EGr.forEach(t),qXe=r(KEe," (GLPN model)"),KEe.forEach(t),NXe=i(y),om=n(y,"LI",{});var ZEe=s(om);boe=n(ZEe,"STRONG",{});var CGr=s(boe);jXe=r(CGr,"gpt2"),CGr.forEach(t),DXe=r(ZEe," \u2014 "),_k=n(ZEe,"A",{href:!0});var wGr=s(_k);GXe=r(wGr,"GPT2Config"),wGr.forEach(t),OXe=r(ZEe," (OpenAI GPT-2 model)"),ZEe.forEach(t),VXe=i(y),rm=n(y,"LI",{});var eCe=s(rm);voe=n(eCe,"STRONG",{});var AGr=s(voe);XXe=r(AGr,"gpt_neo"),AGr.forEach(t),zXe=r(eCe," \u2014 "),uk=n(eCe,"A",{href:!0});var yGr=s(uk);WXe=r(yGr,"GPTNeoConfig"),yGr.forEach(t),QXe=r(eCe," (GPT Neo model)"),eCe.forEach(t),HXe=i(y),tm=n(y,"LI",{});var oCe=s(tm);Foe=n(oCe,"STRONG",{});var LGr=s(Foe);UXe=r(LGr,"gptj"),LGr.forEach(t),JXe=r(oCe," \u2014 "),bk=n(oCe,"A",{href:!0});var xGr=s(bk);YXe=r(xGr,"GPTJConfig"),xGr.forEach(t),KXe=r(oCe," (GPT-J model)"),oCe.forEach(t),ZXe=i(y),am=n(y,"LI",{});var rCe=s(am);Toe=n(rCe,"STRONG",{});var $Gr=s(Toe);eze=r($Gr,"hubert"),$Gr.forEach(t),oze=r(rCe," \u2014 "),vk=n(rCe,"A",{href:!0});var kGr=s(vk);rze=r(kGr,"HubertConfig"),kGr.forEach(t),tze=r(rCe," (Hubert model)"),rCe.forEach(t),aze=i(y),nm=n(y,"LI",{});var tCe=s(nm);Moe=n(tCe,"STRONG",{});var SGr=s(Moe);nze=r(SGr,"ibert"),SGr.forEach(t),sze=r(tCe," \u2014 "),Fk=n(tCe,"A",{href:!0});var RGr=s(Fk);lze=r(RGr,"IBertConfig"),RGr.forEach(t),ize=r(tCe," (I-BERT model)"),tCe.forEach(t),dze=i(y),sm=n(y,"LI",{});var aCe=s(sm);Eoe=n(aCe,"STRONG",{});var PGr=s(Eoe);cze=r(PGr,"imagegpt"),PGr.forEach(t),fze=r(aCe," \u2014 "),Tk=n(aCe,"A",{href:!0});var BGr=s(Tk);mze=r(BGr,"ImageGPTConfig"),BGr.forEach(t),gze=r(aCe," (ImageGPT model)"),aCe.forEach(t),hze=i(y),lm=n(y,"LI",{});var nCe=s(lm);Coe=n(nCe,"STRONG",{});var IGr=s(Coe);pze=r(IGr,"layoutlm"),IGr.forEach(t),_ze=r(nCe," \u2014 "),Mk=n(nCe,"A",{href:!0});var qGr=s(Mk);uze=r(qGr,"LayoutLMConfig"),qGr.forEach(t),bze=r(nCe," (LayoutLM model)"),nCe.forEach(t),vze=i(y),im=n(y,"LI",{});var sCe=s(im);woe=n(sCe,"STRONG",{});var NGr=s(woe);Fze=r(NGr,"layoutlmv2"),NGr.forEach(t),Tze=r(sCe," \u2014 "),Ek=n(sCe,"A",{href:!0});var jGr=s(Ek);Mze=r(jGr,"LayoutLMv2Config"),jGr.forEach(t),Eze=r(sCe," (LayoutLMv2 model)"),sCe.forEach(t),Cze=i(y),dm=n(y,"LI",{});var lCe=s(dm);Aoe=n(lCe,"STRONG",{});var DGr=s(Aoe);wze=r(DGr,"led"),DGr.forEach(t),Aze=r(lCe," \u2014 "),Ck=n(lCe,"A",{href:!0});var GGr=s(Ck);yze=r(GGr,"LEDConfig"),GGr.forEach(t),Lze=r(lCe," (LED model)"),lCe.forEach(t),xze=i(y),cm=n(y,"LI",{});var iCe=s(cm);yoe=n(iCe,"STRONG",{});var OGr=s(yoe);$ze=r(OGr,"longformer"),OGr.forEach(t),kze=r(iCe," \u2014 "),wk=n(iCe,"A",{href:!0});var VGr=s(wk);Sze=r(VGr,"LongformerConfig"),VGr.forEach(t),Rze=r(iCe," (Longformer model)"),iCe.forEach(t),Pze=i(y),fm=n(y,"LI",{});var dCe=s(fm);Loe=n(dCe,"STRONG",{});var XGr=s(Loe);Bze=r(XGr,"luke"),XGr.forEach(t),Ize=r(dCe," \u2014 "),Ak=n(dCe,"A",{href:!0});var zGr=s(Ak);qze=r(zGr,"LukeConfig"),zGr.forEach(t),Nze=r(dCe," (LUKE model)"),dCe.forEach(t),jze=i(y),mm=n(y,"LI",{});var cCe=s(mm);xoe=n(cCe,"STRONG",{});var WGr=s(xoe);Dze=r(WGr,"lxmert"),WGr.forEach(t),Gze=r(cCe," \u2014 "),yk=n(cCe,"A",{href:!0});var QGr=s(yk);Oze=r(QGr,"LxmertConfig"),QGr.forEach(t),Vze=r(cCe," (LXMERT model)"),cCe.forEach(t),Xze=i(y),gm=n(y,"LI",{});var fCe=s(gm);$oe=n(fCe,"STRONG",{});var HGr=s($oe);zze=r(HGr,"m2m_100"),HGr.forEach(t),Wze=r(fCe," \u2014 "),Lk=n(fCe,"A",{href:!0});var UGr=s(Lk);Qze=r(UGr,"M2M100Config"),UGr.forEach(t),Hze=r(fCe," (M2M100 model)"),fCe.forEach(t),Uze=i(y),hm=n(y,"LI",{});var mCe=s(hm);koe=n(mCe,"STRONG",{});var JGr=s(koe);Jze=r(JGr,"marian"),JGr.forEach(t),Yze=r(mCe," \u2014 "),xk=n(mCe,"A",{href:!0});var YGr=s(xk);Kze=r(YGr,"MarianConfig"),YGr.forEach(t),Zze=r(mCe," (Marian model)"),mCe.forEach(t),eWe=i(y),pm=n(y,"LI",{});var gCe=s(pm);Soe=n(gCe,"STRONG",{});var KGr=s(Soe);oWe=r(KGr,"maskformer"),KGr.forEach(t),rWe=r(gCe," \u2014 "),$k=n(gCe,"A",{href:!0});var ZGr=s($k);tWe=r(ZGr,"MaskFormerConfig"),ZGr.forEach(t),aWe=r(gCe," (MaskFormer model)"),gCe.forEach(t),nWe=i(y),_m=n(y,"LI",{});var hCe=s(_m);Roe=n(hCe,"STRONG",{});var eOr=s(Roe);sWe=r(eOr,"mbart"),eOr.forEach(t),lWe=r(hCe," \u2014 "),kk=n(hCe,"A",{href:!0});var oOr=s(kk);iWe=r(oOr,"MBartConfig"),oOr.forEach(t),dWe=r(hCe," (mBART model)"),hCe.forEach(t),cWe=i(y),um=n(y,"LI",{});var pCe=s(um);Poe=n(pCe,"STRONG",{});var rOr=s(Poe);fWe=r(rOr,"megatron-bert"),rOr.forEach(t),mWe=r(pCe," \u2014 "),Sk=n(pCe,"A",{href:!0});var tOr=s(Sk);gWe=r(tOr,"MegatronBertConfig"),tOr.forEach(t),hWe=r(pCe," (MegatronBert model)"),pCe.forEach(t),pWe=i(y),bm=n(y,"LI",{});var _Ce=s(bm);Boe=n(_Ce,"STRONG",{});var aOr=s(Boe);_We=r(aOr,"mobilebert"),aOr.forEach(t),uWe=r(_Ce," \u2014 "),Rk=n(_Ce,"A",{href:!0});var nOr=s(Rk);bWe=r(nOr,"MobileBertConfig"),nOr.forEach(t),vWe=r(_Ce," (MobileBERT model)"),_Ce.forEach(t),FWe=i(y),vm=n(y,"LI",{});var uCe=s(vm);Ioe=n(uCe,"STRONG",{});var sOr=s(Ioe);TWe=r(sOr,"mpnet"),sOr.forEach(t),MWe=r(uCe," \u2014 "),Pk=n(uCe,"A",{href:!0});var lOr=s(Pk);EWe=r(lOr,"MPNetConfig"),lOr.forEach(t),CWe=r(uCe," (MPNet model)"),uCe.forEach(t),wWe=i(y),Fm=n(y,"LI",{});var bCe=s(Fm);qoe=n(bCe,"STRONG",{});var iOr=s(qoe);AWe=r(iOr,"mt5"),iOr.forEach(t),yWe=r(bCe," \u2014 "),Bk=n(bCe,"A",{href:!0});var dOr=s(Bk);LWe=r(dOr,"MT5Config"),dOr.forEach(t),xWe=r(bCe," (mT5 model)"),bCe.forEach(t),$We=i(y),Tm=n(y,"LI",{});var vCe=s(Tm);Noe=n(vCe,"STRONG",{});var cOr=s(Noe);kWe=r(cOr,"nystromformer"),cOr.forEach(t),SWe=r(vCe," \u2014 "),Ik=n(vCe,"A",{href:!0});var fOr=s(Ik);RWe=r(fOr,"NystromformerConfig"),fOr.forEach(t),PWe=r(vCe," (Nystromformer model)"),vCe.forEach(t),BWe=i(y),Mm=n(y,"LI",{});var FCe=s(Mm);joe=n(FCe,"STRONG",{});var mOr=s(joe);IWe=r(mOr,"openai-gpt"),mOr.forEach(t),qWe=r(FCe," \u2014 "),qk=n(FCe,"A",{href:!0});var gOr=s(qk);NWe=r(gOr,"OpenAIGPTConfig"),gOr.forEach(t),jWe=r(FCe," (OpenAI GPT model)"),FCe.forEach(t),DWe=i(y),Em=n(y,"LI",{});var TCe=s(Em);Doe=n(TCe,"STRONG",{});var hOr=s(Doe);GWe=r(hOr,"opt"),hOr.forEach(t),OWe=r(TCe," \u2014 "),Nk=n(TCe,"A",{href:!0});var pOr=s(Nk);VWe=r(pOr,"OPTConfig"),pOr.forEach(t),XWe=r(TCe," (OPT model)"),TCe.forEach(t),zWe=i(y),Cm=n(y,"LI",{});var MCe=s(Cm);Goe=n(MCe,"STRONG",{});var _Or=s(Goe);WWe=r(_Or,"pegasus"),_Or.forEach(t),QWe=r(MCe," \u2014 "),jk=n(MCe,"A",{href:!0});var uOr=s(jk);HWe=r(uOr,"PegasusConfig"),uOr.forEach(t),UWe=r(MCe," (Pegasus model)"),MCe.forEach(t),JWe=i(y),wm=n(y,"LI",{});var ECe=s(wm);Ooe=n(ECe,"STRONG",{});var bOr=s(Ooe);YWe=r(bOr,"perceiver"),bOr.forEach(t),KWe=r(ECe," \u2014 "),Dk=n(ECe,"A",{href:!0});var vOr=s(Dk);ZWe=r(vOr,"PerceiverConfig"),vOr.forEach(t),eQe=r(ECe," (Perceiver model)"),ECe.forEach(t),oQe=i(y),Am=n(y,"LI",{});var CCe=s(Am);Voe=n(CCe,"STRONG",{});var FOr=s(Voe);rQe=r(FOr,"plbart"),FOr.forEach(t),tQe=r(CCe," \u2014 "),Gk=n(CCe,"A",{href:!0});var TOr=s(Gk);aQe=r(TOr,"PLBartConfig"),TOr.forEach(t),nQe=r(CCe," (PLBart model)"),CCe.forEach(t),sQe=i(y),ym=n(y,"LI",{});var wCe=s(ym);Xoe=n(wCe,"STRONG",{});var MOr=s(Xoe);lQe=r(MOr,"poolformer"),MOr.forEach(t),iQe=r(wCe," \u2014 "),Ok=n(wCe,"A",{href:!0});var EOr=s(Ok);dQe=r(EOr,"PoolFormerConfig"),EOr.forEach(t),cQe=r(wCe," (PoolFormer model)"),wCe.forEach(t),fQe=i(y),Lm=n(y,"LI",{});var ACe=s(Lm);zoe=n(ACe,"STRONG",{});var COr=s(zoe);mQe=r(COr,"prophetnet"),COr.forEach(t),gQe=r(ACe," \u2014 "),Vk=n(ACe,"A",{href:!0});var wOr=s(Vk);hQe=r(wOr,"ProphetNetConfig"),wOr.forEach(t),pQe=r(ACe," (ProphetNet model)"),ACe.forEach(t),_Qe=i(y),xm=n(y,"LI",{});var yCe=s(xm);Woe=n(yCe,"STRONG",{});var AOr=s(Woe);uQe=r(AOr,"qdqbert"),AOr.forEach(t),bQe=r(yCe," \u2014 "),Xk=n(yCe,"A",{href:!0});var yOr=s(Xk);vQe=r(yOr,"QDQBertConfig"),yOr.forEach(t),FQe=r(yCe," (QDQBert model)"),yCe.forEach(t),TQe=i(y),$m=n(y,"LI",{});var LCe=s($m);Qoe=n(LCe,"STRONG",{});var LOr=s(Qoe);MQe=r(LOr,"rag"),LOr.forEach(t),EQe=r(LCe," \u2014 "),zk=n(LCe,"A",{href:!0});var xOr=s(zk);CQe=r(xOr,"RagConfig"),xOr.forEach(t),wQe=r(LCe," (RAG model)"),LCe.forEach(t),AQe=i(y),km=n(y,"LI",{});var xCe=s(km);Hoe=n(xCe,"STRONG",{});var $Or=s(Hoe);yQe=r($Or,"realm"),$Or.forEach(t),LQe=r(xCe," \u2014 "),Wk=n(xCe,"A",{href:!0});var kOr=s(Wk);xQe=r(kOr,"RealmConfig"),kOr.forEach(t),$Qe=r(xCe," (Realm model)"),xCe.forEach(t),kQe=i(y),Sm=n(y,"LI",{});var $Ce=s(Sm);Uoe=n($Ce,"STRONG",{});var SOr=s(Uoe);SQe=r(SOr,"reformer"),SOr.forEach(t),RQe=r($Ce," \u2014 "),Qk=n($Ce,"A",{href:!0});var ROr=s(Qk);PQe=r(ROr,"ReformerConfig"),ROr.forEach(t),BQe=r($Ce," (Reformer model)"),$Ce.forEach(t),IQe=i(y),Rm=n(y,"LI",{});var kCe=s(Rm);Joe=n(kCe,"STRONG",{});var POr=s(Joe);qQe=r(POr,"regnet"),POr.forEach(t),NQe=r(kCe," \u2014 "),Hk=n(kCe,"A",{href:!0});var BOr=s(Hk);jQe=r(BOr,"RegNetConfig"),BOr.forEach(t),DQe=r(kCe," (RegNet model)"),kCe.forEach(t),GQe=i(y),Pm=n(y,"LI",{});var SCe=s(Pm);Yoe=n(SCe,"STRONG",{});var IOr=s(Yoe);OQe=r(IOr,"rembert"),IOr.forEach(t),VQe=r(SCe," \u2014 "),Uk=n(SCe,"A",{href:!0});var qOr=s(Uk);XQe=r(qOr,"RemBertConfig"),qOr.forEach(t),zQe=r(SCe," (RemBERT model)"),SCe.forEach(t),WQe=i(y),Bm=n(y,"LI",{});var RCe=s(Bm);Koe=n(RCe,"STRONG",{});var NOr=s(Koe);QQe=r(NOr,"resnet"),NOr.forEach(t),HQe=r(RCe," \u2014 "),Jk=n(RCe,"A",{href:!0});var jOr=s(Jk);UQe=r(jOr,"ResNetConfig"),jOr.forEach(t),JQe=r(RCe," (ResNet model)"),RCe.forEach(t),YQe=i(y),Im=n(y,"LI",{});var PCe=s(Im);Zoe=n(PCe,"STRONG",{});var DOr=s(Zoe);KQe=r(DOr,"retribert"),DOr.forEach(t),ZQe=r(PCe," \u2014 "),Yk=n(PCe,"A",{href:!0});var GOr=s(Yk);eHe=r(GOr,"RetriBertConfig"),GOr.forEach(t),oHe=r(PCe," (RetriBERT model)"),PCe.forEach(t),rHe=i(y),qm=n(y,"LI",{});var BCe=s(qm);ere=n(BCe,"STRONG",{});var OOr=s(ere);tHe=r(OOr,"roberta"),OOr.forEach(t),aHe=r(BCe," \u2014 "),Kk=n(BCe,"A",{href:!0});var VOr=s(Kk);nHe=r(VOr,"RobertaConfig"),VOr.forEach(t),sHe=r(BCe," (RoBERTa model)"),BCe.forEach(t),lHe=i(y),Nm=n(y,"LI",{});var ICe=s(Nm);ore=n(ICe,"STRONG",{});var XOr=s(ore);iHe=r(XOr,"roformer"),XOr.forEach(t),dHe=r(ICe," \u2014 "),Zk=n(ICe,"A",{href:!0});var zOr=s(Zk);cHe=r(zOr,"RoFormerConfig"),zOr.forEach(t),fHe=r(ICe," (RoFormer model)"),ICe.forEach(t),mHe=i(y),jm=n(y,"LI",{});var qCe=s(jm);rre=n(qCe,"STRONG",{});var WOr=s(rre);gHe=r(WOr,"segformer"),WOr.forEach(t),hHe=r(qCe," \u2014 "),eS=n(qCe,"A",{href:!0});var QOr=s(eS);pHe=r(QOr,"SegformerConfig"),QOr.forEach(t),_He=r(qCe," (SegFormer model)"),qCe.forEach(t),uHe=i(y),Dm=n(y,"LI",{});var NCe=s(Dm);tre=n(NCe,"STRONG",{});var HOr=s(tre);bHe=r(HOr,"sew"),HOr.forEach(t),vHe=r(NCe," \u2014 "),oS=n(NCe,"A",{href:!0});var UOr=s(oS);FHe=r(UOr,"SEWConfig"),UOr.forEach(t),THe=r(NCe," (SEW model)"),NCe.forEach(t),MHe=i(y),Gm=n(y,"LI",{});var jCe=s(Gm);are=n(jCe,"STRONG",{});var JOr=s(are);EHe=r(JOr,"sew-d"),JOr.forEach(t),CHe=r(jCe," \u2014 "),rS=n(jCe,"A",{href:!0});var YOr=s(rS);wHe=r(YOr,"SEWDConfig"),YOr.forEach(t),AHe=r(jCe," (SEW-D model)"),jCe.forEach(t),yHe=i(y),Om=n(y,"LI",{});var DCe=s(Om);nre=n(DCe,"STRONG",{});var KOr=s(nre);LHe=r(KOr,"speech-encoder-decoder"),KOr.forEach(t),xHe=r(DCe," \u2014 "),tS=n(DCe,"A",{href:!0});var ZOr=s(tS);$He=r(ZOr,"SpeechEncoderDecoderConfig"),ZOr.forEach(t),kHe=r(DCe," (Speech Encoder decoder model)"),DCe.forEach(t),SHe=i(y),Vm=n(y,"LI",{});var GCe=s(Vm);sre=n(GCe,"STRONG",{});var eVr=s(sre);RHe=r(eVr,"speech_to_text"),eVr.forEach(t),PHe=r(GCe," \u2014 "),aS=n(GCe,"A",{href:!0});var oVr=s(aS);BHe=r(oVr,"Speech2TextConfig"),oVr.forEach(t),IHe=r(GCe," (Speech2Text model)"),GCe.forEach(t),qHe=i(y),Xm=n(y,"LI",{});var OCe=s(Xm);lre=n(OCe,"STRONG",{});var rVr=s(lre);NHe=r(rVr,"speech_to_text_2"),rVr.forEach(t),jHe=r(OCe," \u2014 "),nS=n(OCe,"A",{href:!0});var tVr=s(nS);DHe=r(tVr,"Speech2Text2Config"),tVr.forEach(t),GHe=r(OCe," (Speech2Text2 model)"),OCe.forEach(t),OHe=i(y),zm=n(y,"LI",{});var VCe=s(zm);ire=n(VCe,"STRONG",{});var aVr=s(ire);VHe=r(aVr,"splinter"),aVr.forEach(t),XHe=r(VCe," \u2014 "),sS=n(VCe,"A",{href:!0});var nVr=s(sS);zHe=r(nVr,"SplinterConfig"),nVr.forEach(t),WHe=r(VCe," (Splinter model)"),VCe.forEach(t),QHe=i(y),Wm=n(y,"LI",{});var XCe=s(Wm);dre=n(XCe,"STRONG",{});var sVr=s(dre);HHe=r(sVr,"squeezebert"),sVr.forEach(t),UHe=r(XCe," \u2014 "),lS=n(XCe,"A",{href:!0});var lVr=s(lS);JHe=r(lVr,"SqueezeBertConfig"),lVr.forEach(t),YHe=r(XCe," (SqueezeBERT model)"),XCe.forEach(t),KHe=i(y),Qm=n(y,"LI",{});var zCe=s(Qm);cre=n(zCe,"STRONG",{});var iVr=s(cre);ZHe=r(iVr,"swin"),iVr.forEach(t),eUe=r(zCe," \u2014 "),iS=n(zCe,"A",{href:!0});var dVr=s(iS);oUe=r(dVr,"SwinConfig"),dVr.forEach(t),rUe=r(zCe," (Swin model)"),zCe.forEach(t),tUe=i(y),Hm=n(y,"LI",{});var WCe=s(Hm);fre=n(WCe,"STRONG",{});var cVr=s(fre);aUe=r(cVr,"t5"),cVr.forEach(t),nUe=r(WCe," \u2014 "),dS=n(WCe,"A",{href:!0});var fVr=s(dS);sUe=r(fVr,"T5Config"),fVr.forEach(t),lUe=r(WCe," (T5 model)"),WCe.forEach(t),iUe=i(y),Um=n(y,"LI",{});var QCe=s(Um);mre=n(QCe,"STRONG",{});var mVr=s(mre);dUe=r(mVr,"tapas"),mVr.forEach(t),cUe=r(QCe," \u2014 "),cS=n(QCe,"A",{href:!0});var gVr=s(cS);fUe=r(gVr,"TapasConfig"),gVr.forEach(t),mUe=r(QCe," (TAPAS model)"),QCe.forEach(t),gUe=i(y),Jm=n(y,"LI",{});var HCe=s(Jm);gre=n(HCe,"STRONG",{});var hVr=s(gre);hUe=r(hVr,"trajectory_transformer"),hVr.forEach(t),pUe=r(HCe," \u2014 "),fS=n(HCe,"A",{href:!0});var pVr=s(fS);_Ue=r(pVr,"TrajectoryTransformerConfig"),pVr.forEach(t),uUe=r(HCe," (Trajectory Transformer model)"),HCe.forEach(t),bUe=i(y),Ym=n(y,"LI",{});var UCe=s(Ym);hre=n(UCe,"STRONG",{});var _Vr=s(hre);vUe=r(_Vr,"transfo-xl"),_Vr.forEach(t),FUe=r(UCe," \u2014 "),mS=n(UCe,"A",{href:!0});var uVr=s(mS);TUe=r(uVr,"TransfoXLConfig"),uVr.forEach(t),MUe=r(UCe," (Transformer-XL model)"),UCe.forEach(t),EUe=i(y),Km=n(y,"LI",{});var JCe=s(Km);pre=n(JCe,"STRONG",{});var bVr=s(pre);CUe=r(bVr,"trocr"),bVr.forEach(t),wUe=r(JCe," \u2014 "),gS=n(JCe,"A",{href:!0});var vVr=s(gS);AUe=r(vVr,"TrOCRConfig"),vVr.forEach(t),yUe=r(JCe," (TrOCR model)"),JCe.forEach(t),LUe=i(y),Zm=n(y,"LI",{});var YCe=s(Zm);_re=n(YCe,"STRONG",{});var FVr=s(_re);xUe=r(FVr,"unispeech"),FVr.forEach(t),$Ue=r(YCe," \u2014 "),hS=n(YCe,"A",{href:!0});var TVr=s(hS);kUe=r(TVr,"UniSpeechConfig"),TVr.forEach(t),SUe=r(YCe," (UniSpeech model)"),YCe.forEach(t),RUe=i(y),eg=n(y,"LI",{});var KCe=s(eg);ure=n(KCe,"STRONG",{});var MVr=s(ure);PUe=r(MVr,"unispeech-sat"),MVr.forEach(t),BUe=r(KCe," \u2014 "),pS=n(KCe,"A",{href:!0});var EVr=s(pS);IUe=r(EVr,"UniSpeechSatConfig"),EVr.forEach(t),qUe=r(KCe," (UniSpeechSat model)"),KCe.forEach(t),NUe=i(y),og=n(y,"LI",{});var ZCe=s(og);bre=n(ZCe,"STRONG",{});var CVr=s(bre);jUe=r(CVr,"van"),CVr.forEach(t),DUe=r(ZCe," \u2014 "),_S=n(ZCe,"A",{href:!0});var wVr=s(_S);GUe=r(wVr,"VanConfig"),wVr.forEach(t),OUe=r(ZCe," (VAN model)"),ZCe.forEach(t),VUe=i(y),rg=n(y,"LI",{});var ewe=s(rg);vre=n(ewe,"STRONG",{});var AVr=s(vre);XUe=r(AVr,"vilt"),AVr.forEach(t),zUe=r(ewe," \u2014 "),uS=n(ewe,"A",{href:!0});var yVr=s(uS);WUe=r(yVr,"ViltConfig"),yVr.forEach(t),QUe=r(ewe," (ViLT model)"),ewe.forEach(t),HUe=i(y),tg=n(y,"LI",{});var owe=s(tg);Fre=n(owe,"STRONG",{});var LVr=s(Fre);UUe=r(LVr,"vision-encoder-decoder"),LVr.forEach(t),JUe=r(owe," \u2014 "),bS=n(owe,"A",{href:!0});var xVr=s(bS);YUe=r(xVr,"VisionEncoderDecoderConfig"),xVr.forEach(t),KUe=r(owe," (Vision Encoder decoder model)"),owe.forEach(t),ZUe=i(y),ag=n(y,"LI",{});var rwe=s(ag);Tre=n(rwe,"STRONG",{});var $Vr=s(Tre);eJe=r($Vr,"vision-text-dual-encoder"),$Vr.forEach(t),oJe=r(rwe," \u2014 "),vS=n(rwe,"A",{href:!0});var kVr=s(vS);rJe=r(kVr,"VisionTextDualEncoderConfig"),kVr.forEach(t),tJe=r(rwe," (VisionTextDualEncoder model)"),rwe.forEach(t),aJe=i(y),ng=n(y,"LI",{});var twe=s(ng);Mre=n(twe,"STRONG",{});var SVr=s(Mre);nJe=r(SVr,"visual_bert"),SVr.forEach(t),sJe=r(twe," \u2014 "),FS=n(twe,"A",{href:!0});var RVr=s(FS);lJe=r(RVr,"VisualBertConfig"),RVr.forEach(t),iJe=r(twe," (VisualBert model)"),twe.forEach(t),dJe=i(y),sg=n(y,"LI",{});var awe=s(sg);Ere=n(awe,"STRONG",{});var PVr=s(Ere);cJe=r(PVr,"vit"),PVr.forEach(t),fJe=r(awe," \u2014 "),TS=n(awe,"A",{href:!0});var BVr=s(TS);mJe=r(BVr,"ViTConfig"),BVr.forEach(t),gJe=r(awe," (ViT model)"),awe.forEach(t),hJe=i(y),lg=n(y,"LI",{});var nwe=s(lg);Cre=n(nwe,"STRONG",{});var IVr=s(Cre);pJe=r(IVr,"vit_mae"),IVr.forEach(t),_Je=r(nwe," \u2014 "),MS=n(nwe,"A",{href:!0});var qVr=s(MS);uJe=r(qVr,"ViTMAEConfig"),qVr.forEach(t),bJe=r(nwe," (ViTMAE model)"),nwe.forEach(t),vJe=i(y),ig=n(y,"LI",{});var swe=s(ig);wre=n(swe,"STRONG",{});var NVr=s(wre);FJe=r(NVr,"wav2vec2"),NVr.forEach(t),TJe=r(swe," \u2014 "),ES=n(swe,"A",{href:!0});var jVr=s(ES);MJe=r(jVr,"Wav2Vec2Config"),jVr.forEach(t),EJe=r(swe," (Wav2Vec2 model)"),swe.forEach(t),CJe=i(y),dg=n(y,"LI",{});var lwe=s(dg);Are=n(lwe,"STRONG",{});var DVr=s(Are);wJe=r(DVr,"wav2vec2-conformer"),DVr.forEach(t),AJe=r(lwe," \u2014 "),CS=n(lwe,"A",{href:!0});var GVr=s(CS);yJe=r(GVr,"Wav2Vec2ConformerConfig"),GVr.forEach(t),LJe=r(lwe," (Wav2Vec2-Conformer model)"),lwe.forEach(t),xJe=i(y),cg=n(y,"LI",{});var iwe=s(cg);yre=n(iwe,"STRONG",{});var OVr=s(yre);$Je=r(OVr,"wavlm"),OVr.forEach(t),kJe=r(iwe," \u2014 "),wS=n(iwe,"A",{href:!0});var VVr=s(wS);SJe=r(VVr,"WavLMConfig"),VVr.forEach(t),RJe=r(iwe," (WavLM model)"),iwe.forEach(t),PJe=i(y),fg=n(y,"LI",{});var dwe=s(fg);Lre=n(dwe,"STRONG",{});var XVr=s(Lre);BJe=r(XVr,"xglm"),XVr.forEach(t),IJe=r(dwe," \u2014 "),AS=n(dwe,"A",{href:!0});var zVr=s(AS);qJe=r(zVr,"XGLMConfig"),zVr.forEach(t),NJe=r(dwe," (XGLM model)"),dwe.forEach(t),jJe=i(y),mg=n(y,"LI",{});var cwe=s(mg);xre=n(cwe,"STRONG",{});var WVr=s(xre);DJe=r(WVr,"xlm"),WVr.forEach(t),GJe=r(cwe," \u2014 "),yS=n(cwe,"A",{href:!0});var QVr=s(yS);OJe=r(QVr,"XLMConfig"),QVr.forEach(t),VJe=r(cwe," (XLM model)"),cwe.forEach(t),XJe=i(y),gg=n(y,"LI",{});var fwe=s(gg);$re=n(fwe,"STRONG",{});var HVr=s($re);zJe=r(HVr,"xlm-prophetnet"),HVr.forEach(t),WJe=r(fwe," \u2014 "),LS=n(fwe,"A",{href:!0});var UVr=s(LS);QJe=r(UVr,"XLMProphetNetConfig"),UVr.forEach(t),HJe=r(fwe," (XLMProphetNet model)"),fwe.forEach(t),UJe=i(y),hg=n(y,"LI",{});var mwe=s(hg);kre=n(mwe,"STRONG",{});var JVr=s(kre);JJe=r(JVr,"xlm-roberta"),JVr.forEach(t),YJe=r(mwe," \u2014 "),xS=n(mwe,"A",{href:!0});var YVr=s(xS);KJe=r(YVr,"XLMRobertaConfig"),YVr.forEach(t),ZJe=r(mwe," (XLM-RoBERTa model)"),mwe.forEach(t),eYe=i(y),pg=n(y,"LI",{});var gwe=s(pg);Sre=n(gwe,"STRONG",{});var KVr=s(Sre);oYe=r(KVr,"xlm-roberta-xl"),KVr.forEach(t),rYe=r(gwe," \u2014 "),$S=n(gwe,"A",{href:!0});var ZVr=s($S);tYe=r(ZVr,"XLMRobertaXLConfig"),ZVr.forEach(t),aYe=r(gwe," (XLM-RoBERTa-XL model)"),gwe.forEach(t),nYe=i(y),_g=n(y,"LI",{});var hwe=s(_g);Rre=n(hwe,"STRONG",{});var eXr=s(Rre);sYe=r(eXr,"xlnet"),eXr.forEach(t),lYe=r(hwe," \u2014 "),kS=n(hwe,"A",{href:!0});var oXr=s(kS);iYe=r(oXr,"XLNetConfig"),oXr.forEach(t),dYe=r(hwe," (XLNet model)"),hwe.forEach(t),cYe=i(y),ug=n(y,"LI",{});var pwe=s(ug);Pre=n(pwe,"STRONG",{});var rXr=s(Pre);fYe=r(rXr,"yolos"),rXr.forEach(t),mYe=r(pwe," \u2014 "),SS=n(pwe,"A",{href:!0});var tXr=s(SS);gYe=r(tXr,"YolosConfig"),tXr.forEach(t),hYe=r(pwe," (YOLOS model)"),pwe.forEach(t),pYe=i(y),bg=n(y,"LI",{});var _we=s(bg);Bre=n(_we,"STRONG",{});var aXr=s(Bre);_Ye=r(aXr,"yoso"),aXr.forEach(t),uYe=r(_we," \u2014 "),RS=n(_we,"A",{href:!0});var nXr=s(RS);bYe=r(nXr,"YosoConfig"),nXr.forEach(t),vYe=r(_we," (YOSO model)"),_we.forEach(t),y.forEach(t),FYe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),TYe=i(et),Fg=n(et,"DIV",{class:!0});var UNe=s(Fg);T(vy.$$.fragment,UNe),MYe=i(UNe),Ire=n(UNe,"P",{});var sXr=s(Ire);EYe=r(sXr,"Register a new configuration for this class."),sXr.forEach(t),UNe.forEach(t),et.forEach(t),KIe=i(f),Fi=n(f,"H2",{class:!0});var JNe=s(Fi);Tg=n(JNe,"A",{id:!0,class:!0,href:!0});var lXr=s(Tg);qre=n(lXr,"SPAN",{});var iXr=s(qre);T(Fy.$$.fragment,iXr),iXr.forEach(t),lXr.forEach(t),CYe=i(JNe),Nre=n(JNe,"SPAN",{});var dXr=s(Nre);wYe=r(dXr,"AutoTokenizer"),dXr.forEach(t),JNe.forEach(t),ZIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(Ty.$$.fragment,Is),AYe=i(Is),My=n(Is,"P",{});var YNe=s(My);yYe=r(YNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),PS=n(YNe,"A",{href:!0});var cXr=s(PS);LYe=r(cXr,"AutoTokenizer.from_pretrained()"),cXr.forEach(t),xYe=r(YNe," class method."),YNe.forEach(t),$Ye=i(Is),Ey=n(Is,"P",{});var KNe=s(Ey);kYe=r(KNe,"This class cannot be instantiated directly using "),jre=n(KNe,"CODE",{});var fXr=s(jre);SYe=r(fXr,"__init__()"),fXr.forEach(t),RYe=r(KNe," (throws an error)."),KNe.forEach(t),PYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(Cy.$$.fragment,qs),BYe=i(qs),Dre=n(qs,"P",{});var mXr=s(Dre);IYe=r(mXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mXr.forEach(t),qYe=i(qs),Aa=n(qs,"P",{});var h0=s(Aa);NYe=r(h0,"The tokenizer class to instantiate is selected based on the "),Gre=n(h0,"CODE",{});var gXr=s(Gre);jYe=r(gXr,"model_type"),gXr.forEach(t),DYe=r(h0,` property of the config object (either
passed as an argument or loaded from `),Ore=n(h0,"CODE",{});var hXr=s(Ore);GYe=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),OYe=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vre=n(h0,"CODE",{});var pXr=s(Vre);VYe=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),XYe=r(h0,":"),h0.forEach(t),zYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var w9=s(Sn);Xre=n(w9,"STRONG",{});var _Xr=s(Xre);WYe=r(_Xr,"albert"),_Xr.forEach(t),QYe=r(w9," \u2014 "),BS=n(w9,"A",{href:!0});var uXr=s(BS);HYe=r(uXr,"AlbertTokenizer"),uXr.forEach(t),UYe=r(w9," or "),IS=n(w9,"A",{href:!0});var bXr=s(IS);JYe=r(bXr,"AlbertTokenizerFast"),bXr.forEach(t),YYe=r(w9," (ALBERT model)"),w9.forEach(t),KYe=i(S),Rn=n(S,"LI",{});var A9=s(Rn);zre=n(A9,"STRONG",{});var vXr=s(zre);ZYe=r(vXr,"bart"),vXr.forEach(t),eKe=r(A9," \u2014 "),qS=n(A9,"A",{href:!0});var FXr=s(qS);oKe=r(FXr,"BartTokenizer"),FXr.forEach(t),rKe=r(A9," or "),NS=n(A9,"A",{href:!0});var TXr=s(NS);tKe=r(TXr,"BartTokenizerFast"),TXr.forEach(t),aKe=r(A9," (BART model)"),A9.forEach(t),nKe=i(S),Pn=n(S,"LI",{});var y9=s(Pn);Wre=n(y9,"STRONG",{});var MXr=s(Wre);sKe=r(MXr,"barthez"),MXr.forEach(t),lKe=r(y9," \u2014 "),jS=n(y9,"A",{href:!0});var EXr=s(jS);iKe=r(EXr,"BarthezTokenizer"),EXr.forEach(t),dKe=r(y9," or "),DS=n(y9,"A",{href:!0});var CXr=s(DS);cKe=r(CXr,"BarthezTokenizerFast"),CXr.forEach(t),fKe=r(y9," (BARThez model)"),y9.forEach(t),mKe=i(S),Mg=n(S,"LI",{});var uwe=s(Mg);Qre=n(uwe,"STRONG",{});var wXr=s(Qre);gKe=r(wXr,"bartpho"),wXr.forEach(t),hKe=r(uwe," \u2014 "),GS=n(uwe,"A",{href:!0});var AXr=s(GS);pKe=r(AXr,"BartphoTokenizer"),AXr.forEach(t),_Ke=r(uwe," (BARTpho model)"),uwe.forEach(t),uKe=i(S),Bn=n(S,"LI",{});var L9=s(Bn);Hre=n(L9,"STRONG",{});var yXr=s(Hre);bKe=r(yXr,"bert"),yXr.forEach(t),vKe=r(L9," \u2014 "),OS=n(L9,"A",{href:!0});var LXr=s(OS);FKe=r(LXr,"BertTokenizer"),LXr.forEach(t),TKe=r(L9," or "),VS=n(L9,"A",{href:!0});var xXr=s(VS);MKe=r(xXr,"BertTokenizerFast"),xXr.forEach(t),EKe=r(L9," (BERT model)"),L9.forEach(t),CKe=i(S),Eg=n(S,"LI",{});var bwe=s(Eg);Ure=n(bwe,"STRONG",{});var $Xr=s(Ure);wKe=r($Xr,"bert-generation"),$Xr.forEach(t),AKe=r(bwe," \u2014 "),XS=n(bwe,"A",{href:!0});var kXr=s(XS);yKe=r(kXr,"BertGenerationTokenizer"),kXr.forEach(t),LKe=r(bwe," (Bert Generation model)"),bwe.forEach(t),xKe=i(S),Cg=n(S,"LI",{});var vwe=s(Cg);Jre=n(vwe,"STRONG",{});var SXr=s(Jre);$Ke=r(SXr,"bert-japanese"),SXr.forEach(t),kKe=r(vwe," \u2014 "),zS=n(vwe,"A",{href:!0});var RXr=s(zS);SKe=r(RXr,"BertJapaneseTokenizer"),RXr.forEach(t),RKe=r(vwe," (BertJapanese model)"),vwe.forEach(t),PKe=i(S),wg=n(S,"LI",{});var Fwe=s(wg);Yre=n(Fwe,"STRONG",{});var PXr=s(Yre);BKe=r(PXr,"bertweet"),PXr.forEach(t),IKe=r(Fwe," \u2014 "),WS=n(Fwe,"A",{href:!0});var BXr=s(WS);qKe=r(BXr,"BertweetTokenizer"),BXr.forEach(t),NKe=r(Fwe," (Bertweet model)"),Fwe.forEach(t),jKe=i(S),In=n(S,"LI",{});var x9=s(In);Kre=n(x9,"STRONG",{});var IXr=s(Kre);DKe=r(IXr,"big_bird"),IXr.forEach(t),GKe=r(x9," \u2014 "),QS=n(x9,"A",{href:!0});var qXr=s(QS);OKe=r(qXr,"BigBirdTokenizer"),qXr.forEach(t),VKe=r(x9," or "),HS=n(x9,"A",{href:!0});var NXr=s(HS);XKe=r(NXr,"BigBirdTokenizerFast"),NXr.forEach(t),zKe=r(x9," (BigBird model)"),x9.forEach(t),WKe=i(S),qn=n(S,"LI",{});var $9=s(qn);Zre=n($9,"STRONG",{});var jXr=s(Zre);QKe=r(jXr,"bigbird_pegasus"),jXr.forEach(t),HKe=r($9," \u2014 "),US=n($9,"A",{href:!0});var DXr=s(US);UKe=r(DXr,"PegasusTokenizer"),DXr.forEach(t),JKe=r($9," or "),JS=n($9,"A",{href:!0});var GXr=s(JS);YKe=r(GXr,"PegasusTokenizerFast"),GXr.forEach(t),KKe=r($9," (BigBirdPegasus model)"),$9.forEach(t),ZKe=i(S),Nn=n(S,"LI",{});var k9=s(Nn);ete=n(k9,"STRONG",{});var OXr=s(ete);eZe=r(OXr,"blenderbot"),OXr.forEach(t),oZe=r(k9," \u2014 "),YS=n(k9,"A",{href:!0});var VXr=s(YS);rZe=r(VXr,"BlenderbotTokenizer"),VXr.forEach(t),tZe=r(k9," or "),KS=n(k9,"A",{href:!0});var XXr=s(KS);aZe=r(XXr,"BlenderbotTokenizerFast"),XXr.forEach(t),nZe=r(k9," (Blenderbot model)"),k9.forEach(t),sZe=i(S),Ag=n(S,"LI",{});var Twe=s(Ag);ote=n(Twe,"STRONG",{});var zXr=s(ote);lZe=r(zXr,"blenderbot-small"),zXr.forEach(t),iZe=r(Twe," \u2014 "),ZS=n(Twe,"A",{href:!0});var WXr=s(ZS);dZe=r(WXr,"BlenderbotSmallTokenizer"),WXr.forEach(t),cZe=r(Twe," (BlenderbotSmall model)"),Twe.forEach(t),fZe=i(S),yg=n(S,"LI",{});var Mwe=s(yg);rte=n(Mwe,"STRONG",{});var QXr=s(rte);mZe=r(QXr,"byt5"),QXr.forEach(t),gZe=r(Mwe," \u2014 "),eR=n(Mwe,"A",{href:!0});var HXr=s(eR);hZe=r(HXr,"ByT5Tokenizer"),HXr.forEach(t),pZe=r(Mwe," (ByT5 model)"),Mwe.forEach(t),_Ze=i(S),jn=n(S,"LI",{});var S9=s(jn);tte=n(S9,"STRONG",{});var UXr=s(tte);uZe=r(UXr,"camembert"),UXr.forEach(t),bZe=r(S9," \u2014 "),oR=n(S9,"A",{href:!0});var JXr=s(oR);vZe=r(JXr,"CamembertTokenizer"),JXr.forEach(t),FZe=r(S9," or "),rR=n(S9,"A",{href:!0});var YXr=s(rR);TZe=r(YXr,"CamembertTokenizerFast"),YXr.forEach(t),MZe=r(S9," (CamemBERT model)"),S9.forEach(t),EZe=i(S),Lg=n(S,"LI",{});var Ewe=s(Lg);ate=n(Ewe,"STRONG",{});var KXr=s(ate);CZe=r(KXr,"canine"),KXr.forEach(t),wZe=r(Ewe," \u2014 "),tR=n(Ewe,"A",{href:!0});var ZXr=s(tR);AZe=r(ZXr,"CanineTokenizer"),ZXr.forEach(t),yZe=r(Ewe," (Canine model)"),Ewe.forEach(t),LZe=i(S),Dn=n(S,"LI",{});var R9=s(Dn);nte=n(R9,"STRONG",{});var ezr=s(nte);xZe=r(ezr,"clip"),ezr.forEach(t),$Ze=r(R9," \u2014 "),aR=n(R9,"A",{href:!0});var ozr=s(aR);kZe=r(ozr,"CLIPTokenizer"),ozr.forEach(t),SZe=r(R9," or "),nR=n(R9,"A",{href:!0});var rzr=s(nR);RZe=r(rzr,"CLIPTokenizerFast"),rzr.forEach(t),PZe=r(R9," (CLIP model)"),R9.forEach(t),BZe=i(S),Gn=n(S,"LI",{});var P9=s(Gn);ste=n(P9,"STRONG",{});var tzr=s(ste);IZe=r(tzr,"convbert"),tzr.forEach(t),qZe=r(P9," \u2014 "),sR=n(P9,"A",{href:!0});var azr=s(sR);NZe=r(azr,"ConvBertTokenizer"),azr.forEach(t),jZe=r(P9," or "),lR=n(P9,"A",{href:!0});var nzr=s(lR);DZe=r(nzr,"ConvBertTokenizerFast"),nzr.forEach(t),GZe=r(P9," (ConvBERT model)"),P9.forEach(t),OZe=i(S),On=n(S,"LI",{});var B9=s(On);lte=n(B9,"STRONG",{});var szr=s(lte);VZe=r(szr,"cpm"),szr.forEach(t),XZe=r(B9," \u2014 "),iR=n(B9,"A",{href:!0});var lzr=s(iR);zZe=r(lzr,"CpmTokenizer"),lzr.forEach(t),WZe=r(B9," or "),dR=n(B9,"A",{href:!0});var izr=s(dR);QZe=r(izr,"CpmTokenizerFast"),izr.forEach(t),HZe=r(B9," (CPM model)"),B9.forEach(t),UZe=i(S),xg=n(S,"LI",{});var Cwe=s(xg);ite=n(Cwe,"STRONG",{});var dzr=s(ite);JZe=r(dzr,"ctrl"),dzr.forEach(t),YZe=r(Cwe," \u2014 "),cR=n(Cwe,"A",{href:!0});var czr=s(cR);KZe=r(czr,"CTRLTokenizer"),czr.forEach(t),ZZe=r(Cwe," (CTRL model)"),Cwe.forEach(t),eeo=i(S),Vn=n(S,"LI",{});var I9=s(Vn);dte=n(I9,"STRONG",{});var fzr=s(dte);oeo=r(fzr,"data2vec-text"),fzr.forEach(t),reo=r(I9," \u2014 "),fR=n(I9,"A",{href:!0});var mzr=s(fR);teo=r(mzr,"RobertaTokenizer"),mzr.forEach(t),aeo=r(I9," or "),mR=n(I9,"A",{href:!0});var gzr=s(mR);neo=r(gzr,"RobertaTokenizerFast"),gzr.forEach(t),seo=r(I9," (Data2VecText model)"),I9.forEach(t),leo=i(S),Xn=n(S,"LI",{});var q9=s(Xn);cte=n(q9,"STRONG",{});var hzr=s(cte);ieo=r(hzr,"deberta"),hzr.forEach(t),deo=r(q9," \u2014 "),gR=n(q9,"A",{href:!0});var pzr=s(gR);ceo=r(pzr,"DebertaTokenizer"),pzr.forEach(t),feo=r(q9," or "),hR=n(q9,"A",{href:!0});var _zr=s(hR);meo=r(_zr,"DebertaTokenizerFast"),_zr.forEach(t),geo=r(q9," (DeBERTa model)"),q9.forEach(t),heo=i(S),zn=n(S,"LI",{});var N9=s(zn);fte=n(N9,"STRONG",{});var uzr=s(fte);peo=r(uzr,"deberta-v2"),uzr.forEach(t),_eo=r(N9," \u2014 "),pR=n(N9,"A",{href:!0});var bzr=s(pR);ueo=r(bzr,"DebertaV2Tokenizer"),bzr.forEach(t),beo=r(N9," or "),_R=n(N9,"A",{href:!0});var vzr=s(_R);veo=r(vzr,"DebertaV2TokenizerFast"),vzr.forEach(t),Feo=r(N9," (DeBERTa-v2 model)"),N9.forEach(t),Teo=i(S),Wn=n(S,"LI",{});var j9=s(Wn);mte=n(j9,"STRONG",{});var Fzr=s(mte);Meo=r(Fzr,"distilbert"),Fzr.forEach(t),Eeo=r(j9," \u2014 "),uR=n(j9,"A",{href:!0});var Tzr=s(uR);Ceo=r(Tzr,"DistilBertTokenizer"),Tzr.forEach(t),weo=r(j9," or "),bR=n(j9,"A",{href:!0});var Mzr=s(bR);Aeo=r(Mzr,"DistilBertTokenizerFast"),Mzr.forEach(t),yeo=r(j9," (DistilBERT model)"),j9.forEach(t),Leo=i(S),Qn=n(S,"LI",{});var D9=s(Qn);gte=n(D9,"STRONG",{});var Ezr=s(gte);xeo=r(Ezr,"dpr"),Ezr.forEach(t),$eo=r(D9," \u2014 "),vR=n(D9,"A",{href:!0});var Czr=s(vR);keo=r(Czr,"DPRQuestionEncoderTokenizer"),Czr.forEach(t),Seo=r(D9," or "),FR=n(D9,"A",{href:!0});var wzr=s(FR);Reo=r(wzr,"DPRQuestionEncoderTokenizerFast"),wzr.forEach(t),Peo=r(D9," (DPR model)"),D9.forEach(t),Beo=i(S),Hn=n(S,"LI",{});var G9=s(Hn);hte=n(G9,"STRONG",{});var Azr=s(hte);Ieo=r(Azr,"electra"),Azr.forEach(t),qeo=r(G9," \u2014 "),TR=n(G9,"A",{href:!0});var yzr=s(TR);Neo=r(yzr,"ElectraTokenizer"),yzr.forEach(t),jeo=r(G9," or "),MR=n(G9,"A",{href:!0});var Lzr=s(MR);Deo=r(Lzr,"ElectraTokenizerFast"),Lzr.forEach(t),Geo=r(G9," (ELECTRA model)"),G9.forEach(t),Oeo=i(S),$g=n(S,"LI",{});var wwe=s($g);pte=n(wwe,"STRONG",{});var xzr=s(pte);Veo=r(xzr,"flaubert"),xzr.forEach(t),Xeo=r(wwe," \u2014 "),ER=n(wwe,"A",{href:!0});var $zr=s(ER);zeo=r($zr,"FlaubertTokenizer"),$zr.forEach(t),Weo=r(wwe," (FlauBERT model)"),wwe.forEach(t),Qeo=i(S),Un=n(S,"LI",{});var O9=s(Un);_te=n(O9,"STRONG",{});var kzr=s(_te);Heo=r(kzr,"fnet"),kzr.forEach(t),Ueo=r(O9," \u2014 "),CR=n(O9,"A",{href:!0});var Szr=s(CR);Jeo=r(Szr,"FNetTokenizer"),Szr.forEach(t),Yeo=r(O9," or "),wR=n(O9,"A",{href:!0});var Rzr=s(wR);Keo=r(Rzr,"FNetTokenizerFast"),Rzr.forEach(t),Zeo=r(O9," (FNet model)"),O9.forEach(t),eoo=i(S),kg=n(S,"LI",{});var Awe=s(kg);ute=n(Awe,"STRONG",{});var Pzr=s(ute);ooo=r(Pzr,"fsmt"),Pzr.forEach(t),roo=r(Awe," \u2014 "),AR=n(Awe,"A",{href:!0});var Bzr=s(AR);too=r(Bzr,"FSMTTokenizer"),Bzr.forEach(t),aoo=r(Awe," (FairSeq Machine-Translation model)"),Awe.forEach(t),noo=i(S),Jn=n(S,"LI",{});var V9=s(Jn);bte=n(V9,"STRONG",{});var Izr=s(bte);soo=r(Izr,"funnel"),Izr.forEach(t),loo=r(V9," \u2014 "),yR=n(V9,"A",{href:!0});var qzr=s(yR);ioo=r(qzr,"FunnelTokenizer"),qzr.forEach(t),doo=r(V9," or "),LR=n(V9,"A",{href:!0});var Nzr=s(LR);coo=r(Nzr,"FunnelTokenizerFast"),Nzr.forEach(t),foo=r(V9," (Funnel Transformer model)"),V9.forEach(t),moo=i(S),Yn=n(S,"LI",{});var X9=s(Yn);vte=n(X9,"STRONG",{});var jzr=s(vte);goo=r(jzr,"gpt2"),jzr.forEach(t),hoo=r(X9," \u2014 "),xR=n(X9,"A",{href:!0});var Dzr=s(xR);poo=r(Dzr,"GPT2Tokenizer"),Dzr.forEach(t),_oo=r(X9," or "),$R=n(X9,"A",{href:!0});var Gzr=s($R);uoo=r(Gzr,"GPT2TokenizerFast"),Gzr.forEach(t),boo=r(X9," (OpenAI GPT-2 model)"),X9.forEach(t),voo=i(S),Kn=n(S,"LI",{});var z9=s(Kn);Fte=n(z9,"STRONG",{});var Ozr=s(Fte);Foo=r(Ozr,"gpt_neo"),Ozr.forEach(t),Too=r(z9," \u2014 "),kR=n(z9,"A",{href:!0});var Vzr=s(kR);Moo=r(Vzr,"GPT2Tokenizer"),Vzr.forEach(t),Eoo=r(z9," or "),SR=n(z9,"A",{href:!0});var Xzr=s(SR);Coo=r(Xzr,"GPT2TokenizerFast"),Xzr.forEach(t),woo=r(z9," (GPT Neo model)"),z9.forEach(t),Aoo=i(S),Zn=n(S,"LI",{});var W9=s(Zn);Tte=n(W9,"STRONG",{});var zzr=s(Tte);yoo=r(zzr,"gptj"),zzr.forEach(t),Loo=r(W9," \u2014 "),RR=n(W9,"A",{href:!0});var Wzr=s(RR);xoo=r(Wzr,"GPT2Tokenizer"),Wzr.forEach(t),$oo=r(W9," or "),PR=n(W9,"A",{href:!0});var Qzr=s(PR);koo=r(Qzr,"GPT2TokenizerFast"),Qzr.forEach(t),Soo=r(W9," (GPT-J model)"),W9.forEach(t),Roo=i(S),es=n(S,"LI",{});var Q9=s(es);Mte=n(Q9,"STRONG",{});var Hzr=s(Mte);Poo=r(Hzr,"herbert"),Hzr.forEach(t),Boo=r(Q9," \u2014 "),BR=n(Q9,"A",{href:!0});var Uzr=s(BR);Ioo=r(Uzr,"HerbertTokenizer"),Uzr.forEach(t),qoo=r(Q9," or "),IR=n(Q9,"A",{href:!0});var Jzr=s(IR);Noo=r(Jzr,"HerbertTokenizerFast"),Jzr.forEach(t),joo=r(Q9," (HerBERT model)"),Q9.forEach(t),Doo=i(S),Sg=n(S,"LI",{});var ywe=s(Sg);Ete=n(ywe,"STRONG",{});var Yzr=s(Ete);Goo=r(Yzr,"hubert"),Yzr.forEach(t),Ooo=r(ywe," \u2014 "),qR=n(ywe,"A",{href:!0});var Kzr=s(qR);Voo=r(Kzr,"Wav2Vec2CTCTokenizer"),Kzr.forEach(t),Xoo=r(ywe," (Hubert model)"),ywe.forEach(t),zoo=i(S),os=n(S,"LI",{});var H9=s(os);Cte=n(H9,"STRONG",{});var Zzr=s(Cte);Woo=r(Zzr,"ibert"),Zzr.forEach(t),Qoo=r(H9," \u2014 "),NR=n(H9,"A",{href:!0});var eWr=s(NR);Hoo=r(eWr,"RobertaTokenizer"),eWr.forEach(t),Uoo=r(H9," or "),jR=n(H9,"A",{href:!0});var oWr=s(jR);Joo=r(oWr,"RobertaTokenizerFast"),oWr.forEach(t),Yoo=r(H9," (I-BERT model)"),H9.forEach(t),Koo=i(S),rs=n(S,"LI",{});var U9=s(rs);wte=n(U9,"STRONG",{});var rWr=s(wte);Zoo=r(rWr,"layoutlm"),rWr.forEach(t),ero=r(U9," \u2014 "),DR=n(U9,"A",{href:!0});var tWr=s(DR);oro=r(tWr,"LayoutLMTokenizer"),tWr.forEach(t),rro=r(U9," or "),GR=n(U9,"A",{href:!0});var aWr=s(GR);tro=r(aWr,"LayoutLMTokenizerFast"),aWr.forEach(t),aro=r(U9," (LayoutLM model)"),U9.forEach(t),nro=i(S),ts=n(S,"LI",{});var J9=s(ts);Ate=n(J9,"STRONG",{});var nWr=s(Ate);sro=r(nWr,"layoutlmv2"),nWr.forEach(t),lro=r(J9," \u2014 "),OR=n(J9,"A",{href:!0});var sWr=s(OR);iro=r(sWr,"LayoutLMv2Tokenizer"),sWr.forEach(t),dro=r(J9," or "),VR=n(J9,"A",{href:!0});var lWr=s(VR);cro=r(lWr,"LayoutLMv2TokenizerFast"),lWr.forEach(t),fro=r(J9," (LayoutLMv2 model)"),J9.forEach(t),mro=i(S),as=n(S,"LI",{});var Y9=s(as);yte=n(Y9,"STRONG",{});var iWr=s(yte);gro=r(iWr,"layoutxlm"),iWr.forEach(t),hro=r(Y9," \u2014 "),XR=n(Y9,"A",{href:!0});var dWr=s(XR);pro=r(dWr,"LayoutXLMTokenizer"),dWr.forEach(t),_ro=r(Y9," or "),zR=n(Y9,"A",{href:!0});var cWr=s(zR);uro=r(cWr,"LayoutXLMTokenizerFast"),cWr.forEach(t),bro=r(Y9," (LayoutXLM model)"),Y9.forEach(t),vro=i(S),ns=n(S,"LI",{});var K9=s(ns);Lte=n(K9,"STRONG",{});var fWr=s(Lte);Fro=r(fWr,"led"),fWr.forEach(t),Tro=r(K9," \u2014 "),WR=n(K9,"A",{href:!0});var mWr=s(WR);Mro=r(mWr,"LEDTokenizer"),mWr.forEach(t),Ero=r(K9," or "),QR=n(K9,"A",{href:!0});var gWr=s(QR);Cro=r(gWr,"LEDTokenizerFast"),gWr.forEach(t),wro=r(K9," (LED model)"),K9.forEach(t),Aro=i(S),ss=n(S,"LI",{});var Z9=s(ss);xte=n(Z9,"STRONG",{});var hWr=s(xte);yro=r(hWr,"longformer"),hWr.forEach(t),Lro=r(Z9," \u2014 "),HR=n(Z9,"A",{href:!0});var pWr=s(HR);xro=r(pWr,"LongformerTokenizer"),pWr.forEach(t),$ro=r(Z9," or "),UR=n(Z9,"A",{href:!0});var _Wr=s(UR);kro=r(_Wr,"LongformerTokenizerFast"),_Wr.forEach(t),Sro=r(Z9," (Longformer model)"),Z9.forEach(t),Rro=i(S),Rg=n(S,"LI",{});var Lwe=s(Rg);$te=n(Lwe,"STRONG",{});var uWr=s($te);Pro=r(uWr,"luke"),uWr.forEach(t),Bro=r(Lwe," \u2014 "),JR=n(Lwe,"A",{href:!0});var bWr=s(JR);Iro=r(bWr,"LukeTokenizer"),bWr.forEach(t),qro=r(Lwe," (LUKE model)"),Lwe.forEach(t),Nro=i(S),ls=n(S,"LI",{});var e$=s(ls);kte=n(e$,"STRONG",{});var vWr=s(kte);jro=r(vWr,"lxmert"),vWr.forEach(t),Dro=r(e$," \u2014 "),YR=n(e$,"A",{href:!0});var FWr=s(YR);Gro=r(FWr,"LxmertTokenizer"),FWr.forEach(t),Oro=r(e$," or "),KR=n(e$,"A",{href:!0});var TWr=s(KR);Vro=r(TWr,"LxmertTokenizerFast"),TWr.forEach(t),Xro=r(e$," (LXMERT model)"),e$.forEach(t),zro=i(S),Pg=n(S,"LI",{});var xwe=s(Pg);Ste=n(xwe,"STRONG",{});var MWr=s(Ste);Wro=r(MWr,"m2m_100"),MWr.forEach(t),Qro=r(xwe," \u2014 "),ZR=n(xwe,"A",{href:!0});var EWr=s(ZR);Hro=r(EWr,"M2M100Tokenizer"),EWr.forEach(t),Uro=r(xwe," (M2M100 model)"),xwe.forEach(t),Jro=i(S),Bg=n(S,"LI",{});var $we=s(Bg);Rte=n($we,"STRONG",{});var CWr=s(Rte);Yro=r(CWr,"marian"),CWr.forEach(t),Kro=r($we," \u2014 "),eP=n($we,"A",{href:!0});var wWr=s(eP);Zro=r(wWr,"MarianTokenizer"),wWr.forEach(t),eto=r($we," (Marian model)"),$we.forEach(t),oto=i(S),is=n(S,"LI",{});var o$=s(is);Pte=n(o$,"STRONG",{});var AWr=s(Pte);rto=r(AWr,"mbart"),AWr.forEach(t),tto=r(o$," \u2014 "),oP=n(o$,"A",{href:!0});var yWr=s(oP);ato=r(yWr,"MBartTokenizer"),yWr.forEach(t),nto=r(o$," or "),rP=n(o$,"A",{href:!0});var LWr=s(rP);sto=r(LWr,"MBartTokenizerFast"),LWr.forEach(t),lto=r(o$," (mBART model)"),o$.forEach(t),ito=i(S),ds=n(S,"LI",{});var r$=s(ds);Bte=n(r$,"STRONG",{});var xWr=s(Bte);dto=r(xWr,"mbart50"),xWr.forEach(t),cto=r(r$," \u2014 "),tP=n(r$,"A",{href:!0});var $Wr=s(tP);fto=r($Wr,"MBart50Tokenizer"),$Wr.forEach(t),mto=r(r$," or "),aP=n(r$,"A",{href:!0});var kWr=s(aP);gto=r(kWr,"MBart50TokenizerFast"),kWr.forEach(t),hto=r(r$," (mBART-50 model)"),r$.forEach(t),pto=i(S),cs=n(S,"LI",{});var t$=s(cs);Ite=n(t$,"STRONG",{});var SWr=s(Ite);_to=r(SWr,"megatron-bert"),SWr.forEach(t),uto=r(t$," \u2014 "),nP=n(t$,"A",{href:!0});var RWr=s(nP);bto=r(RWr,"BertTokenizer"),RWr.forEach(t),vto=r(t$," or "),sP=n(t$,"A",{href:!0});var PWr=s(sP);Fto=r(PWr,"BertTokenizerFast"),PWr.forEach(t),Tto=r(t$," (MegatronBert model)"),t$.forEach(t),Mto=i(S),Ig=n(S,"LI",{});var kwe=s(Ig);qte=n(kwe,"STRONG",{});var BWr=s(qte);Eto=r(BWr,"mluke"),BWr.forEach(t),Cto=r(kwe," \u2014 "),lP=n(kwe,"A",{href:!0});var IWr=s(lP);wto=r(IWr,"MLukeTokenizer"),IWr.forEach(t),Ato=r(kwe," (mLUKE model)"),kwe.forEach(t),yto=i(S),fs=n(S,"LI",{});var a$=s(fs);Nte=n(a$,"STRONG",{});var qWr=s(Nte);Lto=r(qWr,"mobilebert"),qWr.forEach(t),xto=r(a$," \u2014 "),iP=n(a$,"A",{href:!0});var NWr=s(iP);$to=r(NWr,"MobileBertTokenizer"),NWr.forEach(t),kto=r(a$," or "),dP=n(a$,"A",{href:!0});var jWr=s(dP);Sto=r(jWr,"MobileBertTokenizerFast"),jWr.forEach(t),Rto=r(a$," (MobileBERT model)"),a$.forEach(t),Pto=i(S),ms=n(S,"LI",{});var n$=s(ms);jte=n(n$,"STRONG",{});var DWr=s(jte);Bto=r(DWr,"mpnet"),DWr.forEach(t),Ito=r(n$," \u2014 "),cP=n(n$,"A",{href:!0});var GWr=s(cP);qto=r(GWr,"MPNetTokenizer"),GWr.forEach(t),Nto=r(n$," or "),fP=n(n$,"A",{href:!0});var OWr=s(fP);jto=r(OWr,"MPNetTokenizerFast"),OWr.forEach(t),Dto=r(n$," (MPNet model)"),n$.forEach(t),Gto=i(S),gs=n(S,"LI",{});var s$=s(gs);Dte=n(s$,"STRONG",{});var VWr=s(Dte);Oto=r(VWr,"mt5"),VWr.forEach(t),Vto=r(s$," \u2014 "),mP=n(s$,"A",{href:!0});var XWr=s(mP);Xto=r(XWr,"MT5Tokenizer"),XWr.forEach(t),zto=r(s$," or "),gP=n(s$,"A",{href:!0});var zWr=s(gP);Wto=r(zWr,"MT5TokenizerFast"),zWr.forEach(t),Qto=r(s$," (mT5 model)"),s$.forEach(t),Hto=i(S),hs=n(S,"LI",{});var l$=s(hs);Gte=n(l$,"STRONG",{});var WWr=s(Gte);Uto=r(WWr,"nystromformer"),WWr.forEach(t),Jto=r(l$," \u2014 "),hP=n(l$,"A",{href:!0});var QWr=s(hP);Yto=r(QWr,"AlbertTokenizer"),QWr.forEach(t),Kto=r(l$," or "),pP=n(l$,"A",{href:!0});var HWr=s(pP);Zto=r(HWr,"AlbertTokenizerFast"),HWr.forEach(t),eao=r(l$," (Nystromformer model)"),l$.forEach(t),oao=i(S),ps=n(S,"LI",{});var i$=s(ps);Ote=n(i$,"STRONG",{});var UWr=s(Ote);rao=r(UWr,"openai-gpt"),UWr.forEach(t),tao=r(i$," \u2014 "),_P=n(i$,"A",{href:!0});var JWr=s(_P);aao=r(JWr,"OpenAIGPTTokenizer"),JWr.forEach(t),nao=r(i$," or "),uP=n(i$,"A",{href:!0});var YWr=s(uP);sao=r(YWr,"OpenAIGPTTokenizerFast"),YWr.forEach(t),lao=r(i$," (OpenAI GPT model)"),i$.forEach(t),iao=i(S),qg=n(S,"LI",{});var Swe=s(qg);Vte=n(Swe,"STRONG",{});var KWr=s(Vte);dao=r(KWr,"opt"),KWr.forEach(t),cao=r(Swe," \u2014 "),bP=n(Swe,"A",{href:!0});var ZWr=s(bP);fao=r(ZWr,"GPT2Tokenizer"),ZWr.forEach(t),mao=r(Swe," (OPT model)"),Swe.forEach(t),gao=i(S),_s=n(S,"LI",{});var d$=s(_s);Xte=n(d$,"STRONG",{});var eQr=s(Xte);hao=r(eQr,"pegasus"),eQr.forEach(t),pao=r(d$," \u2014 "),vP=n(d$,"A",{href:!0});var oQr=s(vP);_ao=r(oQr,"PegasusTokenizer"),oQr.forEach(t),uao=r(d$," or "),FP=n(d$,"A",{href:!0});var rQr=s(FP);bao=r(rQr,"PegasusTokenizerFast"),rQr.forEach(t),vao=r(d$," (Pegasus model)"),d$.forEach(t),Fao=i(S),Ng=n(S,"LI",{});var Rwe=s(Ng);zte=n(Rwe,"STRONG",{});var tQr=s(zte);Tao=r(tQr,"perceiver"),tQr.forEach(t),Mao=r(Rwe," \u2014 "),TP=n(Rwe,"A",{href:!0});var aQr=s(TP);Eao=r(aQr,"PerceiverTokenizer"),aQr.forEach(t),Cao=r(Rwe," (Perceiver model)"),Rwe.forEach(t),wao=i(S),jg=n(S,"LI",{});var Pwe=s(jg);Wte=n(Pwe,"STRONG",{});var nQr=s(Wte);Aao=r(nQr,"phobert"),nQr.forEach(t),yao=r(Pwe," \u2014 "),MP=n(Pwe,"A",{href:!0});var sQr=s(MP);Lao=r(sQr,"PhobertTokenizer"),sQr.forEach(t),xao=r(Pwe," (PhoBERT model)"),Pwe.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var Bwe=s(Dg);Qte=n(Bwe,"STRONG",{});var lQr=s(Qte);kao=r(lQr,"plbart"),lQr.forEach(t),Sao=r(Bwe," \u2014 "),EP=n(Bwe,"A",{href:!0});var iQr=s(EP);Rao=r(iQr,"PLBartTokenizer"),iQr.forEach(t),Pao=r(Bwe," (PLBart model)"),Bwe.forEach(t),Bao=i(S),Gg=n(S,"LI",{});var Iwe=s(Gg);Hte=n(Iwe,"STRONG",{});var dQr=s(Hte);Iao=r(dQr,"prophetnet"),dQr.forEach(t),qao=r(Iwe," \u2014 "),CP=n(Iwe,"A",{href:!0});var cQr=s(CP);Nao=r(cQr,"ProphetNetTokenizer"),cQr.forEach(t),jao=r(Iwe," (ProphetNet model)"),Iwe.forEach(t),Dao=i(S),us=n(S,"LI",{});var c$=s(us);Ute=n(c$,"STRONG",{});var fQr=s(Ute);Gao=r(fQr,"qdqbert"),fQr.forEach(t),Oao=r(c$," \u2014 "),wP=n(c$,"A",{href:!0});var mQr=s(wP);Vao=r(mQr,"BertTokenizer"),mQr.forEach(t),Xao=r(c$," or "),AP=n(c$,"A",{href:!0});var gQr=s(AP);zao=r(gQr,"BertTokenizerFast"),gQr.forEach(t),Wao=r(c$," (QDQBert model)"),c$.forEach(t),Qao=i(S),Og=n(S,"LI",{});var qwe=s(Og);Jte=n(qwe,"STRONG",{});var hQr=s(Jte);Hao=r(hQr,"rag"),hQr.forEach(t),Uao=r(qwe," \u2014 "),yP=n(qwe,"A",{href:!0});var pQr=s(yP);Jao=r(pQr,"RagTokenizer"),pQr.forEach(t),Yao=r(qwe," (RAG model)"),qwe.forEach(t),Kao=i(S),bs=n(S,"LI",{});var f$=s(bs);Yte=n(f$,"STRONG",{});var _Qr=s(Yte);Zao=r(_Qr,"realm"),_Qr.forEach(t),eno=r(f$," \u2014 "),LP=n(f$,"A",{href:!0});var uQr=s(LP);ono=r(uQr,"RealmTokenizer"),uQr.forEach(t),rno=r(f$," or "),xP=n(f$,"A",{href:!0});var bQr=s(xP);tno=r(bQr,"RealmTokenizerFast"),bQr.forEach(t),ano=r(f$," (Realm model)"),f$.forEach(t),nno=i(S),vs=n(S,"LI",{});var m$=s(vs);Kte=n(m$,"STRONG",{});var vQr=s(Kte);sno=r(vQr,"reformer"),vQr.forEach(t),lno=r(m$," \u2014 "),$P=n(m$,"A",{href:!0});var FQr=s($P);ino=r(FQr,"ReformerTokenizer"),FQr.forEach(t),dno=r(m$," or "),kP=n(m$,"A",{href:!0});var TQr=s(kP);cno=r(TQr,"ReformerTokenizerFast"),TQr.forEach(t),fno=r(m$," (Reformer model)"),m$.forEach(t),mno=i(S),Fs=n(S,"LI",{});var g$=s(Fs);Zte=n(g$,"STRONG",{});var MQr=s(Zte);gno=r(MQr,"rembert"),MQr.forEach(t),hno=r(g$," \u2014 "),SP=n(g$,"A",{href:!0});var EQr=s(SP);pno=r(EQr,"RemBertTokenizer"),EQr.forEach(t),_no=r(g$," or "),RP=n(g$,"A",{href:!0});var CQr=s(RP);uno=r(CQr,"RemBertTokenizerFast"),CQr.forEach(t),bno=r(g$," (RemBERT model)"),g$.forEach(t),vno=i(S),Ts=n(S,"LI",{});var h$=s(Ts);eae=n(h$,"STRONG",{});var wQr=s(eae);Fno=r(wQr,"retribert"),wQr.forEach(t),Tno=r(h$," \u2014 "),PP=n(h$,"A",{href:!0});var AQr=s(PP);Mno=r(AQr,"RetriBertTokenizer"),AQr.forEach(t),Eno=r(h$," or "),BP=n(h$,"A",{href:!0});var yQr=s(BP);Cno=r(yQr,"RetriBertTokenizerFast"),yQr.forEach(t),wno=r(h$," (RetriBERT model)"),h$.forEach(t),Ano=i(S),Ms=n(S,"LI",{});var p$=s(Ms);oae=n(p$,"STRONG",{});var LQr=s(oae);yno=r(LQr,"roberta"),LQr.forEach(t),Lno=r(p$," \u2014 "),IP=n(p$,"A",{href:!0});var xQr=s(IP);xno=r(xQr,"RobertaTokenizer"),xQr.forEach(t),$no=r(p$," or "),qP=n(p$,"A",{href:!0});var $Qr=s(qP);kno=r($Qr,"RobertaTokenizerFast"),$Qr.forEach(t),Sno=r(p$," (RoBERTa model)"),p$.forEach(t),Rno=i(S),Es=n(S,"LI",{});var _$=s(Es);rae=n(_$,"STRONG",{});var kQr=s(rae);Pno=r(kQr,"roformer"),kQr.forEach(t),Bno=r(_$," \u2014 "),NP=n(_$,"A",{href:!0});var SQr=s(NP);Ino=r(SQr,"RoFormerTokenizer"),SQr.forEach(t),qno=r(_$," or "),jP=n(_$,"A",{href:!0});var RQr=s(jP);Nno=r(RQr,"RoFormerTokenizerFast"),RQr.forEach(t),jno=r(_$," (RoFormer model)"),_$.forEach(t),Dno=i(S),Vg=n(S,"LI",{});var Nwe=s(Vg);tae=n(Nwe,"STRONG",{});var PQr=s(tae);Gno=r(PQr,"speech_to_text"),PQr.forEach(t),Ono=r(Nwe," \u2014 "),DP=n(Nwe,"A",{href:!0});var BQr=s(DP);Vno=r(BQr,"Speech2TextTokenizer"),BQr.forEach(t),Xno=r(Nwe," (Speech2Text model)"),Nwe.forEach(t),zno=i(S),Xg=n(S,"LI",{});var jwe=s(Xg);aae=n(jwe,"STRONG",{});var IQr=s(aae);Wno=r(IQr,"speech_to_text_2"),IQr.forEach(t),Qno=r(jwe," \u2014 "),GP=n(jwe,"A",{href:!0});var qQr=s(GP);Hno=r(qQr,"Speech2Text2Tokenizer"),qQr.forEach(t),Uno=r(jwe," (Speech2Text2 model)"),jwe.forEach(t),Jno=i(S),Cs=n(S,"LI",{});var u$=s(Cs);nae=n(u$,"STRONG",{});var NQr=s(nae);Yno=r(NQr,"splinter"),NQr.forEach(t),Kno=r(u$," \u2014 "),OP=n(u$,"A",{href:!0});var jQr=s(OP);Zno=r(jQr,"SplinterTokenizer"),jQr.forEach(t),eso=r(u$," or "),VP=n(u$,"A",{href:!0});var DQr=s(VP);oso=r(DQr,"SplinterTokenizerFast"),DQr.forEach(t),rso=r(u$," (Splinter model)"),u$.forEach(t),tso=i(S),ws=n(S,"LI",{});var b$=s(ws);sae=n(b$,"STRONG",{});var GQr=s(sae);aso=r(GQr,"squeezebert"),GQr.forEach(t),nso=r(b$," \u2014 "),XP=n(b$,"A",{href:!0});var OQr=s(XP);sso=r(OQr,"SqueezeBertTokenizer"),OQr.forEach(t),lso=r(b$," or "),zP=n(b$,"A",{href:!0});var VQr=s(zP);iso=r(VQr,"SqueezeBertTokenizerFast"),VQr.forEach(t),dso=r(b$," (SqueezeBERT model)"),b$.forEach(t),cso=i(S),As=n(S,"LI",{});var v$=s(As);lae=n(v$,"STRONG",{});var XQr=s(lae);fso=r(XQr,"t5"),XQr.forEach(t),mso=r(v$," \u2014 "),WP=n(v$,"A",{href:!0});var zQr=s(WP);gso=r(zQr,"T5Tokenizer"),zQr.forEach(t),hso=r(v$," or "),QP=n(v$,"A",{href:!0});var WQr=s(QP);pso=r(WQr,"T5TokenizerFast"),WQr.forEach(t),_so=r(v$," (T5 model)"),v$.forEach(t),uso=i(S),zg=n(S,"LI",{});var Dwe=s(zg);iae=n(Dwe,"STRONG",{});var QQr=s(iae);bso=r(QQr,"tapas"),QQr.forEach(t),vso=r(Dwe," \u2014 "),HP=n(Dwe,"A",{href:!0});var HQr=s(HP);Fso=r(HQr,"TapasTokenizer"),HQr.forEach(t),Tso=r(Dwe," (TAPAS model)"),Dwe.forEach(t),Mso=i(S),Wg=n(S,"LI",{});var Gwe=s(Wg);dae=n(Gwe,"STRONG",{});var UQr=s(dae);Eso=r(UQr,"tapex"),UQr.forEach(t),Cso=r(Gwe," \u2014 "),UP=n(Gwe,"A",{href:!0});var JQr=s(UP);wso=r(JQr,"TapexTokenizer"),JQr.forEach(t),Aso=r(Gwe," (TAPEX model)"),Gwe.forEach(t),yso=i(S),Qg=n(S,"LI",{});var Owe=s(Qg);cae=n(Owe,"STRONG",{});var YQr=s(cae);Lso=r(YQr,"transfo-xl"),YQr.forEach(t),xso=r(Owe," \u2014 "),JP=n(Owe,"A",{href:!0});var KQr=s(JP);$so=r(KQr,"TransfoXLTokenizer"),KQr.forEach(t),kso=r(Owe," (Transformer-XL model)"),Owe.forEach(t),Sso=i(S),ys=n(S,"LI",{});var F$=s(ys);fae=n(F$,"STRONG",{});var ZQr=s(fae);Rso=r(ZQr,"visual_bert"),ZQr.forEach(t),Pso=r(F$," \u2014 "),YP=n(F$,"A",{href:!0});var eHr=s(YP);Bso=r(eHr,"BertTokenizer"),eHr.forEach(t),Iso=r(F$," or "),KP=n(F$,"A",{href:!0});var oHr=s(KP);qso=r(oHr,"BertTokenizerFast"),oHr.forEach(t),Nso=r(F$," (VisualBert model)"),F$.forEach(t),jso=i(S),Hg=n(S,"LI",{});var Vwe=s(Hg);mae=n(Vwe,"STRONG",{});var rHr=s(mae);Dso=r(rHr,"wav2vec2"),rHr.forEach(t),Gso=r(Vwe," \u2014 "),ZP=n(Vwe,"A",{href:!0});var tHr=s(ZP);Oso=r(tHr,"Wav2Vec2CTCTokenizer"),tHr.forEach(t),Vso=r(Vwe," (Wav2Vec2 model)"),Vwe.forEach(t),Xso=i(S),Ug=n(S,"LI",{});var Xwe=s(Ug);gae=n(Xwe,"STRONG",{});var aHr=s(gae);zso=r(aHr,"wav2vec2-conformer"),aHr.forEach(t),Wso=r(Xwe," \u2014 "),eB=n(Xwe,"A",{href:!0});var nHr=s(eB);Qso=r(nHr,"Wav2Vec2CTCTokenizer"),nHr.forEach(t),Hso=r(Xwe," (Wav2Vec2-Conformer model)"),Xwe.forEach(t),Uso=i(S),Jg=n(S,"LI",{});var zwe=s(Jg);hae=n(zwe,"STRONG",{});var sHr=s(hae);Jso=r(sHr,"wav2vec2_phoneme"),sHr.forEach(t),Yso=r(zwe," \u2014 "),oB=n(zwe,"A",{href:!0});var lHr=s(oB);Kso=r(lHr,"Wav2Vec2PhonemeCTCTokenizer"),lHr.forEach(t),Zso=r(zwe," (Wav2Vec2Phoneme model)"),zwe.forEach(t),elo=i(S),Ls=n(S,"LI",{});var T$=s(Ls);pae=n(T$,"STRONG",{});var iHr=s(pae);olo=r(iHr,"xglm"),iHr.forEach(t),rlo=r(T$," \u2014 "),rB=n(T$,"A",{href:!0});var dHr=s(rB);tlo=r(dHr,"XGLMTokenizer"),dHr.forEach(t),alo=r(T$," or "),tB=n(T$,"A",{href:!0});var cHr=s(tB);nlo=r(cHr,"XGLMTokenizerFast"),cHr.forEach(t),slo=r(T$," (XGLM model)"),T$.forEach(t),llo=i(S),Yg=n(S,"LI",{});var Wwe=s(Yg);_ae=n(Wwe,"STRONG",{});var fHr=s(_ae);ilo=r(fHr,"xlm"),fHr.forEach(t),dlo=r(Wwe," \u2014 "),aB=n(Wwe,"A",{href:!0});var mHr=s(aB);clo=r(mHr,"XLMTokenizer"),mHr.forEach(t),flo=r(Wwe," (XLM model)"),Wwe.forEach(t),mlo=i(S),Kg=n(S,"LI",{});var Qwe=s(Kg);uae=n(Qwe,"STRONG",{});var gHr=s(uae);glo=r(gHr,"xlm-prophetnet"),gHr.forEach(t),hlo=r(Qwe," \u2014 "),nB=n(Qwe,"A",{href:!0});var hHr=s(nB);plo=r(hHr,"XLMProphetNetTokenizer"),hHr.forEach(t),_lo=r(Qwe," (XLMProphetNet model)"),Qwe.forEach(t),ulo=i(S),xs=n(S,"LI",{});var M$=s(xs);bae=n(M$,"STRONG",{});var pHr=s(bae);blo=r(pHr,"xlm-roberta"),pHr.forEach(t),vlo=r(M$," \u2014 "),sB=n(M$,"A",{href:!0});var _Hr=s(sB);Flo=r(_Hr,"XLMRobertaTokenizer"),_Hr.forEach(t),Tlo=r(M$," or "),lB=n(M$,"A",{href:!0});var uHr=s(lB);Mlo=r(uHr,"XLMRobertaTokenizerFast"),uHr.forEach(t),Elo=r(M$," (XLM-RoBERTa model)"),M$.forEach(t),Clo=i(S),$s=n(S,"LI",{});var E$=s($s);vae=n(E$,"STRONG",{});var bHr=s(vae);wlo=r(bHr,"xlm-roberta-xl"),bHr.forEach(t),Alo=r(E$," \u2014 "),iB=n(E$,"A",{href:!0});var vHr=s(iB);ylo=r(vHr,"RobertaTokenizer"),vHr.forEach(t),Llo=r(E$," or "),dB=n(E$,"A",{href:!0});var FHr=s(dB);xlo=r(FHr,"RobertaTokenizerFast"),FHr.forEach(t),$lo=r(E$," (XLM-RoBERTa-XL model)"),E$.forEach(t),klo=i(S),ks=n(S,"LI",{});var C$=s(ks);Fae=n(C$,"STRONG",{});var THr=s(Fae);Slo=r(THr,"xlnet"),THr.forEach(t),Rlo=r(C$," \u2014 "),cB=n(C$,"A",{href:!0});var MHr=s(cB);Plo=r(MHr,"XLNetTokenizer"),MHr.forEach(t),Blo=r(C$," or "),fB=n(C$,"A",{href:!0});var EHr=s(fB);Ilo=r(EHr,"XLNetTokenizerFast"),EHr.forEach(t),qlo=r(C$," (XLNet model)"),C$.forEach(t),Nlo=i(S),Ss=n(S,"LI",{});var w$=s(Ss);Tae=n(w$,"STRONG",{});var CHr=s(Tae);jlo=r(CHr,"yoso"),CHr.forEach(t),Dlo=r(w$," \u2014 "),mB=n(w$,"A",{href:!0});var wHr=s(mB);Glo=r(wHr,"AlbertTokenizer"),wHr.forEach(t),Olo=r(w$," or "),gB=n(w$,"A",{href:!0});var AHr=s(gB);Vlo=r(AHr,"AlbertTokenizerFast"),AHr.forEach(t),Xlo=r(w$," (YOSO model)"),w$.forEach(t),S.forEach(t),zlo=i(qs),T(Zg.$$.fragment,qs),qs.forEach(t),Wlo=i(Is),eh=n(Is,"DIV",{class:!0});var ZNe=s(eh);T(wy.$$.fragment,ZNe),Qlo=i(ZNe),Mae=n(ZNe,"P",{});var yHr=s(Mae);Hlo=r(yHr,"Register a new tokenizer in this mapping."),yHr.forEach(t),ZNe.forEach(t),Is.forEach(t),eqe=i(f),Ti=n(f,"H2",{class:!0});var eje=s(Ti);oh=n(eje,"A",{id:!0,class:!0,href:!0});var LHr=s(oh);Eae=n(LHr,"SPAN",{});var xHr=s(Eae);T(Ay.$$.fragment,xHr),xHr.forEach(t),LHr.forEach(t),Ulo=i(eje),Cae=n(eje,"SPAN",{});var $Hr=s(Cae);Jlo=r($Hr,"AutoFeatureExtractor"),$Hr.forEach(t),eje.forEach(t),oqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(yy.$$.fragment,Ns),Ylo=i(Ns),Ly=n(Ns,"P",{});var oje=s(Ly);Klo=r(oje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hB=n(oje,"A",{href:!0});var kHr=s(hB);Zlo=r(kHr,"AutoFeatureExtractor.from_pretrained()"),kHr.forEach(t),eio=r(oje," class method."),oje.forEach(t),oio=i(Ns),xy=n(Ns,"P",{});var rje=s(xy);rio=r(rje,"This class cannot be instantiated directly using "),wae=n(rje,"CODE",{});var SHr=s(wae);tio=r(SHr,"__init__()"),SHr.forEach(t),aio=r(rje," (throws an error)."),rje.forEach(t),nio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T($y.$$.fragment,Zt),sio=i(Zt),Aae=n(Zt,"P",{});var RHr=s(Aae);lio=r(RHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),RHr.forEach(t),iio=i(Zt),ya=n(Zt,"P",{});var p0=s(ya);dio=r(p0,"The feature extractor class to instantiate is selected based on the "),yae=n(p0,"CODE",{});var PHr=s(yae);cio=r(PHr,"model_type"),PHr.forEach(t),fio=r(p0,` property of the config object
(either passed as an argument or loaded from `),Lae=n(p0,"CODE",{});var BHr=s(Lae);mio=r(BHr,"pretrained_model_name_or_path"),BHr.forEach(t),gio=r(p0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xae=n(p0,"CODE",{});var IHr=s(xae);hio=r(IHr,"pretrained_model_name_or_path"),IHr.forEach(t),pio=r(p0,":"),p0.forEach(t),_io=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);rh=n(te,"LI",{});var Hwe=s(rh);$ae=n(Hwe,"STRONG",{});var qHr=s($ae);uio=r(qHr,"beit"),qHr.forEach(t),bio=r(Hwe," \u2014 "),pB=n(Hwe,"A",{href:!0});var NHr=s(pB);vio=r(NHr,"BeitFeatureExtractor"),NHr.forEach(t),Fio=r(Hwe," (BEiT model)"),Hwe.forEach(t),Tio=i(te),th=n(te,"LI",{});var Uwe=s(th);kae=n(Uwe,"STRONG",{});var jHr=s(kae);Mio=r(jHr,"clip"),jHr.forEach(t),Eio=r(Uwe," \u2014 "),_B=n(Uwe,"A",{href:!0});var DHr=s(_B);Cio=r(DHr,"CLIPFeatureExtractor"),DHr.forEach(t),wio=r(Uwe," (CLIP model)"),Uwe.forEach(t),Aio=i(te),ah=n(te,"LI",{});var Jwe=s(ah);Sae=n(Jwe,"STRONG",{});var GHr=s(Sae);yio=r(GHr,"convnext"),GHr.forEach(t),Lio=r(Jwe," \u2014 "),uB=n(Jwe,"A",{href:!0});var OHr=s(uB);xio=r(OHr,"ConvNextFeatureExtractor"),OHr.forEach(t),$io=r(Jwe," (ConvNext model)"),Jwe.forEach(t),kio=i(te),nh=n(te,"LI",{});var Ywe=s(nh);Rae=n(Ywe,"STRONG",{});var VHr=s(Rae);Sio=r(VHr,"data2vec-audio"),VHr.forEach(t),Rio=r(Ywe," \u2014 "),bB=n(Ywe,"A",{href:!0});var XHr=s(bB);Pio=r(XHr,"Wav2Vec2FeatureExtractor"),XHr.forEach(t),Bio=r(Ywe," (Data2VecAudio model)"),Ywe.forEach(t),Iio=i(te),sh=n(te,"LI",{});var Kwe=s(sh);Pae=n(Kwe,"STRONG",{});var zHr=s(Pae);qio=r(zHr,"data2vec-vision"),zHr.forEach(t),Nio=r(Kwe," \u2014 "),vB=n(Kwe,"A",{href:!0});var WHr=s(vB);jio=r(WHr,"BeitFeatureExtractor"),WHr.forEach(t),Dio=r(Kwe," (Data2VecVision model)"),Kwe.forEach(t),Gio=i(te),lh=n(te,"LI",{});var Zwe=s(lh);Bae=n(Zwe,"STRONG",{});var QHr=s(Bae);Oio=r(QHr,"deit"),QHr.forEach(t),Vio=r(Zwe," \u2014 "),FB=n(Zwe,"A",{href:!0});var HHr=s(FB);Xio=r(HHr,"DeiTFeatureExtractor"),HHr.forEach(t),zio=r(Zwe," (DeiT model)"),Zwe.forEach(t),Wio=i(te),ih=n(te,"LI",{});var e0e=s(ih);Iae=n(e0e,"STRONG",{});var UHr=s(Iae);Qio=r(UHr,"detr"),UHr.forEach(t),Hio=r(e0e," \u2014 "),TB=n(e0e,"A",{href:!0});var JHr=s(TB);Uio=r(JHr,"DetrFeatureExtractor"),JHr.forEach(t),Jio=r(e0e," (DETR model)"),e0e.forEach(t),Yio=i(te),dh=n(te,"LI",{});var o0e=s(dh);qae=n(o0e,"STRONG",{});var YHr=s(qae);Kio=r(YHr,"dpt"),YHr.forEach(t),Zio=r(o0e," \u2014 "),MB=n(o0e,"A",{href:!0});var KHr=s(MB);edo=r(KHr,"DPTFeatureExtractor"),KHr.forEach(t),odo=r(o0e," (DPT model)"),o0e.forEach(t),rdo=i(te),ch=n(te,"LI",{});var r0e=s(ch);Nae=n(r0e,"STRONG",{});var ZHr=s(Nae);tdo=r(ZHr,"flava"),ZHr.forEach(t),ado=r(r0e," \u2014 "),EB=n(r0e,"A",{href:!0});var eUr=s(EB);ndo=r(eUr,"FlavaFeatureExtractor"),eUr.forEach(t),sdo=r(r0e," (Flava model)"),r0e.forEach(t),ldo=i(te),fh=n(te,"LI",{});var t0e=s(fh);jae=n(t0e,"STRONG",{});var oUr=s(jae);ido=r(oUr,"glpn"),oUr.forEach(t),ddo=r(t0e," \u2014 "),CB=n(t0e,"A",{href:!0});var rUr=s(CB);cdo=r(rUr,"GLPNFeatureExtractor"),rUr.forEach(t),fdo=r(t0e," (GLPN model)"),t0e.forEach(t),mdo=i(te),mh=n(te,"LI",{});var a0e=s(mh);Dae=n(a0e,"STRONG",{});var tUr=s(Dae);gdo=r(tUr,"hubert"),tUr.forEach(t),hdo=r(a0e," \u2014 "),wB=n(a0e,"A",{href:!0});var aUr=s(wB);pdo=r(aUr,"Wav2Vec2FeatureExtractor"),aUr.forEach(t),_do=r(a0e," (Hubert model)"),a0e.forEach(t),udo=i(te),gh=n(te,"LI",{});var n0e=s(gh);Gae=n(n0e,"STRONG",{});var nUr=s(Gae);bdo=r(nUr,"layoutlmv2"),nUr.forEach(t),vdo=r(n0e," \u2014 "),AB=n(n0e,"A",{href:!0});var sUr=s(AB);Fdo=r(sUr,"LayoutLMv2FeatureExtractor"),sUr.forEach(t),Tdo=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),Mdo=i(te),hh=n(te,"LI",{});var s0e=s(hh);Oae=n(s0e,"STRONG",{});var lUr=s(Oae);Edo=r(lUr,"maskformer"),lUr.forEach(t),Cdo=r(s0e," \u2014 "),yB=n(s0e,"A",{href:!0});var iUr=s(yB);wdo=r(iUr,"MaskFormerFeatureExtractor"),iUr.forEach(t),Ado=r(s0e," (MaskFormer model)"),s0e.forEach(t),ydo=i(te),ph=n(te,"LI",{});var l0e=s(ph);Vae=n(l0e,"STRONG",{});var dUr=s(Vae);Ldo=r(dUr,"perceiver"),dUr.forEach(t),xdo=r(l0e," \u2014 "),LB=n(l0e,"A",{href:!0});var cUr=s(LB);$do=r(cUr,"PerceiverFeatureExtractor"),cUr.forEach(t),kdo=r(l0e," (Perceiver model)"),l0e.forEach(t),Sdo=i(te),_h=n(te,"LI",{});var i0e=s(_h);Xae=n(i0e,"STRONG",{});var fUr=s(Xae);Rdo=r(fUr,"poolformer"),fUr.forEach(t),Pdo=r(i0e," \u2014 "),xB=n(i0e,"A",{href:!0});var mUr=s(xB);Bdo=r(mUr,"PoolFormerFeatureExtractor"),mUr.forEach(t),Ido=r(i0e," (PoolFormer model)"),i0e.forEach(t),qdo=i(te),uh=n(te,"LI",{});var d0e=s(uh);zae=n(d0e,"STRONG",{});var gUr=s(zae);Ndo=r(gUr,"regnet"),gUr.forEach(t),jdo=r(d0e," \u2014 "),$B=n(d0e,"A",{href:!0});var hUr=s($B);Ddo=r(hUr,"ConvNextFeatureExtractor"),hUr.forEach(t),Gdo=r(d0e," (RegNet model)"),d0e.forEach(t),Odo=i(te),bh=n(te,"LI",{});var c0e=s(bh);Wae=n(c0e,"STRONG",{});var pUr=s(Wae);Vdo=r(pUr,"resnet"),pUr.forEach(t),Xdo=r(c0e," \u2014 "),kB=n(c0e,"A",{href:!0});var _Ur=s(kB);zdo=r(_Ur,"ConvNextFeatureExtractor"),_Ur.forEach(t),Wdo=r(c0e," (ResNet model)"),c0e.forEach(t),Qdo=i(te),vh=n(te,"LI",{});var f0e=s(vh);Qae=n(f0e,"STRONG",{});var uUr=s(Qae);Hdo=r(uUr,"segformer"),uUr.forEach(t),Udo=r(f0e," \u2014 "),SB=n(f0e,"A",{href:!0});var bUr=s(SB);Jdo=r(bUr,"SegformerFeatureExtractor"),bUr.forEach(t),Ydo=r(f0e," (SegFormer model)"),f0e.forEach(t),Kdo=i(te),Fh=n(te,"LI",{});var m0e=s(Fh);Hae=n(m0e,"STRONG",{});var vUr=s(Hae);Zdo=r(vUr,"speech_to_text"),vUr.forEach(t),eco=r(m0e," \u2014 "),RB=n(m0e,"A",{href:!0});var FUr=s(RB);oco=r(FUr,"Speech2TextFeatureExtractor"),FUr.forEach(t),rco=r(m0e," (Speech2Text model)"),m0e.forEach(t),tco=i(te),Th=n(te,"LI",{});var g0e=s(Th);Uae=n(g0e,"STRONG",{});var TUr=s(Uae);aco=r(TUr,"swin"),TUr.forEach(t),nco=r(g0e," \u2014 "),PB=n(g0e,"A",{href:!0});var MUr=s(PB);sco=r(MUr,"ViTFeatureExtractor"),MUr.forEach(t),lco=r(g0e," (Swin model)"),g0e.forEach(t),ico=i(te),Mh=n(te,"LI",{});var h0e=s(Mh);Jae=n(h0e,"STRONG",{});var EUr=s(Jae);dco=r(EUr,"van"),EUr.forEach(t),cco=r(h0e," \u2014 "),BB=n(h0e,"A",{href:!0});var CUr=s(BB);fco=r(CUr,"ConvNextFeatureExtractor"),CUr.forEach(t),mco=r(h0e," (VAN model)"),h0e.forEach(t),gco=i(te),Eh=n(te,"LI",{});var p0e=s(Eh);Yae=n(p0e,"STRONG",{});var wUr=s(Yae);hco=r(wUr,"vit"),wUr.forEach(t),pco=r(p0e," \u2014 "),IB=n(p0e,"A",{href:!0});var AUr=s(IB);_co=r(AUr,"ViTFeatureExtractor"),AUr.forEach(t),uco=r(p0e," (ViT model)"),p0e.forEach(t),bco=i(te),Ch=n(te,"LI",{});var _0e=s(Ch);Kae=n(_0e,"STRONG",{});var yUr=s(Kae);vco=r(yUr,"vit_mae"),yUr.forEach(t),Fco=r(_0e," \u2014 "),qB=n(_0e,"A",{href:!0});var LUr=s(qB);Tco=r(LUr,"ViTFeatureExtractor"),LUr.forEach(t),Mco=r(_0e," (ViTMAE model)"),_0e.forEach(t),Eco=i(te),wh=n(te,"LI",{});var u0e=s(wh);Zae=n(u0e,"STRONG",{});var xUr=s(Zae);Cco=r(xUr,"wav2vec2"),xUr.forEach(t),wco=r(u0e," \u2014 "),NB=n(u0e,"A",{href:!0});var $Ur=s(NB);Aco=r($Ur,"Wav2Vec2FeatureExtractor"),$Ur.forEach(t),yco=r(u0e," (Wav2Vec2 model)"),u0e.forEach(t),Lco=i(te),Ah=n(te,"LI",{});var b0e=s(Ah);ene=n(b0e,"STRONG",{});var kUr=s(ene);xco=r(kUr,"wav2vec2-conformer"),kUr.forEach(t),$co=r(b0e," \u2014 "),jB=n(b0e,"A",{href:!0});var SUr=s(jB);kco=r(SUr,"Wav2Vec2FeatureExtractor"),SUr.forEach(t),Sco=r(b0e," (Wav2Vec2-Conformer model)"),b0e.forEach(t),Rco=i(te),yh=n(te,"LI",{});var v0e=s(yh);one=n(v0e,"STRONG",{});var RUr=s(one);Pco=r(RUr,"yolos"),RUr.forEach(t),Bco=r(v0e," \u2014 "),DB=n(v0e,"A",{href:!0});var PUr=s(DB);Ico=r(PUr,"YolosFeatureExtractor"),PUr.forEach(t),qco=r(v0e," (YOLOS model)"),v0e.forEach(t),te.forEach(t),Nco=i(Zt),T(Lh.$$.fragment,Zt),jco=i(Zt),T(xh.$$.fragment,Zt),Zt.forEach(t),Dco=i(Ns),$h=n(Ns,"DIV",{class:!0});var tje=s($h);T(ky.$$.fragment,tje),Gco=i(tje),rne=n(tje,"P",{});var BUr=s(rne);Oco=r(BUr,"Register a new feature extractor for this class."),BUr.forEach(t),tje.forEach(t),Ns.forEach(t),rqe=i(f),Mi=n(f,"H2",{class:!0});var aje=s(Mi);kh=n(aje,"A",{id:!0,class:!0,href:!0});var IUr=s(kh);tne=n(IUr,"SPAN",{});var qUr=s(tne);T(Sy.$$.fragment,qUr),qUr.forEach(t),IUr.forEach(t),Vco=i(aje),ane=n(aje,"SPAN",{});var NUr=s(ane);Xco=r(NUr,"AutoProcessor"),NUr.forEach(t),aje.forEach(t),tqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(Ry.$$.fragment,js),zco=i(js),Py=n(js,"P",{});var nje=s(Py);Wco=r(nje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GB=n(nje,"A",{href:!0});var jUr=s(GB);Qco=r(jUr,"AutoProcessor.from_pretrained()"),jUr.forEach(t),Hco=r(nje," class method."),nje.forEach(t),Uco=i(js),By=n(js,"P",{});var sje=s(By);Jco=r(sje,"This class cannot be instantiated directly using "),nne=n(sje,"CODE",{});var DUr=s(nne);Yco=r(DUr,"__init__()"),DUr.forEach(t),Kco=r(sje," (throws an error)."),sje.forEach(t),Zco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(Iy.$$.fragment,ea),efo=i(ea),sne=n(ea,"P",{});var GUr=s(sne);ofo=r(GUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),GUr.forEach(t),rfo=i(ea),Ei=n(ea,"P",{});var IK=s(Ei);tfo=r(IK,"The processor class to instantiate is selected based on the "),lne=n(IK,"CODE",{});var OUr=s(lne);afo=r(OUr,"model_type"),OUr.forEach(t),nfo=r(IK,` property of the config object (either
passed as an argument or loaded from `),ine=n(IK,"CODE",{});var VUr=s(ine);sfo=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),lfo=r(IK," if possible):"),IK.forEach(t),ifo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Sh=n(be,"LI",{});var F0e=s(Sh);dne=n(F0e,"STRONG",{});var XUr=s(dne);dfo=r(XUr,"clip"),XUr.forEach(t),cfo=r(F0e," \u2014 "),OB=n(F0e,"A",{href:!0});var zUr=s(OB);ffo=r(zUr,"CLIPProcessor"),zUr.forEach(t),mfo=r(F0e," (CLIP model)"),F0e.forEach(t),gfo=i(be),Rh=n(be,"LI",{});var T0e=s(Rh);cne=n(T0e,"STRONG",{});var WUr=s(cne);hfo=r(WUr,"flava"),WUr.forEach(t),pfo=r(T0e," \u2014 "),fne=n(T0e,"CODE",{});var QUr=s(fne);_fo=r(QUr,"FLAVAProcessor"),QUr.forEach(t),ufo=r(T0e," (Flava model)"),T0e.forEach(t),bfo=i(be),Ph=n(be,"LI",{});var M0e=s(Ph);mne=n(M0e,"STRONG",{});var HUr=s(mne);vfo=r(HUr,"layoutlmv2"),HUr.forEach(t),Ffo=r(M0e," \u2014 "),VB=n(M0e,"A",{href:!0});var UUr=s(VB);Tfo=r(UUr,"LayoutLMv2Processor"),UUr.forEach(t),Mfo=r(M0e," (LayoutLMv2 model)"),M0e.forEach(t),Efo=i(be),Bh=n(be,"LI",{});var E0e=s(Bh);gne=n(E0e,"STRONG",{});var JUr=s(gne);Cfo=r(JUr,"layoutxlm"),JUr.forEach(t),wfo=r(E0e," \u2014 "),XB=n(E0e,"A",{href:!0});var YUr=s(XB);Afo=r(YUr,"LayoutXLMProcessor"),YUr.forEach(t),yfo=r(E0e," (LayoutXLM model)"),E0e.forEach(t),Lfo=i(be),Ih=n(be,"LI",{});var C0e=s(Ih);hne=n(C0e,"STRONG",{});var KUr=s(hne);xfo=r(KUr,"sew"),KUr.forEach(t),$fo=r(C0e," \u2014 "),zB=n(C0e,"A",{href:!0});var ZUr=s(zB);kfo=r(ZUr,"Wav2Vec2Processor"),ZUr.forEach(t),Sfo=r(C0e," (SEW model)"),C0e.forEach(t),Rfo=i(be),qh=n(be,"LI",{});var w0e=s(qh);pne=n(w0e,"STRONG",{});var eJr=s(pne);Pfo=r(eJr,"sew-d"),eJr.forEach(t),Bfo=r(w0e," \u2014 "),WB=n(w0e,"A",{href:!0});var oJr=s(WB);Ifo=r(oJr,"Wav2Vec2Processor"),oJr.forEach(t),qfo=r(w0e," (SEW-D model)"),w0e.forEach(t),Nfo=i(be),Nh=n(be,"LI",{});var A0e=s(Nh);_ne=n(A0e,"STRONG",{});var rJr=s(_ne);jfo=r(rJr,"speech_to_text"),rJr.forEach(t),Dfo=r(A0e," \u2014 "),QB=n(A0e,"A",{href:!0});var tJr=s(QB);Gfo=r(tJr,"Speech2TextProcessor"),tJr.forEach(t),Ofo=r(A0e," (Speech2Text model)"),A0e.forEach(t),Vfo=i(be),jh=n(be,"LI",{});var y0e=s(jh);une=n(y0e,"STRONG",{});var aJr=s(une);Xfo=r(aJr,"speech_to_text_2"),aJr.forEach(t),zfo=r(y0e," \u2014 "),HB=n(y0e,"A",{href:!0});var nJr=s(HB);Wfo=r(nJr,"Speech2Text2Processor"),nJr.forEach(t),Qfo=r(y0e," (Speech2Text2 model)"),y0e.forEach(t),Hfo=i(be),Dh=n(be,"LI",{});var L0e=s(Dh);bne=n(L0e,"STRONG",{});var sJr=s(bne);Ufo=r(sJr,"trocr"),sJr.forEach(t),Jfo=r(L0e," \u2014 "),UB=n(L0e,"A",{href:!0});var lJr=s(UB);Yfo=r(lJr,"TrOCRProcessor"),lJr.forEach(t),Kfo=r(L0e," (TrOCR model)"),L0e.forEach(t),Zfo=i(be),Gh=n(be,"LI",{});var x0e=s(Gh);vne=n(x0e,"STRONG",{});var iJr=s(vne);emo=r(iJr,"unispeech"),iJr.forEach(t),omo=r(x0e," \u2014 "),JB=n(x0e,"A",{href:!0});var dJr=s(JB);rmo=r(dJr,"Wav2Vec2Processor"),dJr.forEach(t),tmo=r(x0e," (UniSpeech model)"),x0e.forEach(t),amo=i(be),Oh=n(be,"LI",{});var $0e=s(Oh);Fne=n($0e,"STRONG",{});var cJr=s(Fne);nmo=r(cJr,"unispeech-sat"),cJr.forEach(t),smo=r($0e," \u2014 "),YB=n($0e,"A",{href:!0});var fJr=s(YB);lmo=r(fJr,"Wav2Vec2Processor"),fJr.forEach(t),imo=r($0e," (UniSpeechSat model)"),$0e.forEach(t),dmo=i(be),Vh=n(be,"LI",{});var k0e=s(Vh);Tne=n(k0e,"STRONG",{});var mJr=s(Tne);cmo=r(mJr,"vilt"),mJr.forEach(t),fmo=r(k0e," \u2014 "),KB=n(k0e,"A",{href:!0});var gJr=s(KB);mmo=r(gJr,"ViltProcessor"),gJr.forEach(t),gmo=r(k0e," (ViLT model)"),k0e.forEach(t),hmo=i(be),Xh=n(be,"LI",{});var S0e=s(Xh);Mne=n(S0e,"STRONG",{});var hJr=s(Mne);pmo=r(hJr,"vision-text-dual-encoder"),hJr.forEach(t),_mo=r(S0e," \u2014 "),ZB=n(S0e,"A",{href:!0});var pJr=s(ZB);umo=r(pJr,"VisionTextDualEncoderProcessor"),pJr.forEach(t),bmo=r(S0e," (VisionTextDualEncoder model)"),S0e.forEach(t),vmo=i(be),zh=n(be,"LI",{});var R0e=s(zh);Ene=n(R0e,"STRONG",{});var _Jr=s(Ene);Fmo=r(_Jr,"wav2vec2"),_Jr.forEach(t),Tmo=r(R0e," \u2014 "),eI=n(R0e,"A",{href:!0});var uJr=s(eI);Mmo=r(uJr,"Wav2Vec2Processor"),uJr.forEach(t),Emo=r(R0e," (Wav2Vec2 model)"),R0e.forEach(t),Cmo=i(be),Wh=n(be,"LI",{});var P0e=s(Wh);Cne=n(P0e,"STRONG",{});var bJr=s(Cne);wmo=r(bJr,"wav2vec2-conformer"),bJr.forEach(t),Amo=r(P0e," \u2014 "),oI=n(P0e,"A",{href:!0});var vJr=s(oI);ymo=r(vJr,"Wav2Vec2Processor"),vJr.forEach(t),Lmo=r(P0e," (Wav2Vec2-Conformer model)"),P0e.forEach(t),xmo=i(be),Qh=n(be,"LI",{});var B0e=s(Qh);wne=n(B0e,"STRONG",{});var FJr=s(wne);$mo=r(FJr,"wavlm"),FJr.forEach(t),kmo=r(B0e," \u2014 "),rI=n(B0e,"A",{href:!0});var TJr=s(rI);Smo=r(TJr,"Wav2Vec2Processor"),TJr.forEach(t),Rmo=r(B0e," (WavLM model)"),B0e.forEach(t),be.forEach(t),Pmo=i(ea),T(Hh.$$.fragment,ea),Bmo=i(ea),T(Uh.$$.fragment,ea),ea.forEach(t),Imo=i(js),Jh=n(js,"DIV",{class:!0});var lje=s(Jh);T(qy.$$.fragment,lje),qmo=i(lje),Ane=n(lje,"P",{});var MJr=s(Ane);Nmo=r(MJr,"Register a new processor for this class."),MJr.forEach(t),lje.forEach(t),js.forEach(t),aqe=i(f),Ci=n(f,"H2",{class:!0});var ije=s(Ci);Yh=n(ije,"A",{id:!0,class:!0,href:!0});var EJr=s(Yh);yne=n(EJr,"SPAN",{});var CJr=s(yne);T(Ny.$$.fragment,CJr),CJr.forEach(t),EJr.forEach(t),jmo=i(ije),Lne=n(ije,"SPAN",{});var wJr=s(Lne);Dmo=r(wJr,"AutoModel"),wJr.forEach(t),ije.forEach(t),nqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(jy.$$.fragment,Ds),Gmo=i(Ds),wi=n(Ds,"P",{});var qK=s(wi);Omo=r(qK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tI=n(qK,"A",{href:!0});var AJr=s(tI);Vmo=r(AJr,"from_pretrained()"),AJr.forEach(t),Xmo=r(qK," class method or the "),aI=n(qK,"A",{href:!0});var yJr=s(aI);zmo=r(yJr,"from_config()"),yJr.forEach(t),Wmo=r(qK,` class
method.`),qK.forEach(t),Qmo=i(Ds),Dy=n(Ds,"P",{});var dje=s(Dy);Hmo=r(dje,"This class cannot be instantiated directly using "),xne=n(dje,"CODE",{});var LJr=s(xne);Umo=r(LJr,"__init__()"),LJr.forEach(t),Jmo=r(dje," (throws an error)."),dje.forEach(t),Ymo=i(Ds),tt=n(Ds,"DIV",{class:!0});var _0=s(tt);T(Gy.$$.fragment,_0),Kmo=i(_0),$ne=n(_0,"P",{});var xJr=s($ne);Zmo=r(xJr,"Instantiates one of the base model classes of the library from a configuration."),xJr.forEach(t),ego=i(_0),Ai=n(_0,"P",{});var NK=s(Ai);ogo=r(NK,`Note:
Loading a model from its configuration file does `),kne=n(NK,"STRONG",{});var $Jr=s(kne);rgo=r($Jr,"not"),$Jr.forEach(t),tgo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=n(NK,"A",{href:!0});var kJr=s(nI);ago=r(kJr,"from_pretrained()"),kJr.forEach(t),ngo=r(NK," to load the model weights."),NK.forEach(t),sgo=i(_0),T(Kh.$$.fragment,_0),_0.forEach(t),lgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(Oy.$$.fragment,oa),igo=i(oa),Sne=n(oa,"P",{});var SJr=s(Sne);dgo=r(SJr,"Instantiate one of the base model classes of the library from a pretrained model."),SJr.forEach(t),cgo=i(oa),La=n(oa,"P",{});var u0=s(La);fgo=r(u0,"The model class to instantiate is selected based on the "),Rne=n(u0,"CODE",{});var RJr=s(Rne);mgo=r(RJr,"model_type"),RJr.forEach(t),ggo=r(u0,` property of the config object (either
passed as an argument or loaded from `),Pne=n(u0,"CODE",{});var PJr=s(Pne);hgo=r(PJr,"pretrained_model_name_or_path"),PJr.forEach(t),pgo=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(u0,"CODE",{});var BJr=s(Bne);_go=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),ugo=r(u0,":"),u0.forEach(t),bgo=i(oa),x=n(oa,"UL",{});var $=s(x);Zh=n($,"LI",{});var I0e=s(Zh);Ine=n(I0e,"STRONG",{});var IJr=s(Ine);vgo=r(IJr,"albert"),IJr.forEach(t),Fgo=r(I0e," \u2014 "),sI=n(I0e,"A",{href:!0});var qJr=s(sI);Tgo=r(qJr,"AlbertModel"),qJr.forEach(t),Mgo=r(I0e," (ALBERT model)"),I0e.forEach(t),Ego=i($),ep=n($,"LI",{});var q0e=s(ep);qne=n(q0e,"STRONG",{});var NJr=s(qne);Cgo=r(NJr,"bart"),NJr.forEach(t),wgo=r(q0e," \u2014 "),lI=n(q0e,"A",{href:!0});var jJr=s(lI);Ago=r(jJr,"BartModel"),jJr.forEach(t),ygo=r(q0e," (BART model)"),q0e.forEach(t),Lgo=i($),op=n($,"LI",{});var N0e=s(op);Nne=n(N0e,"STRONG",{});var DJr=s(Nne);xgo=r(DJr,"beit"),DJr.forEach(t),$go=r(N0e," \u2014 "),iI=n(N0e,"A",{href:!0});var GJr=s(iI);kgo=r(GJr,"BeitModel"),GJr.forEach(t),Sgo=r(N0e," (BEiT model)"),N0e.forEach(t),Rgo=i($),rp=n($,"LI",{});var j0e=s(rp);jne=n(j0e,"STRONG",{});var OJr=s(jne);Pgo=r(OJr,"bert"),OJr.forEach(t),Bgo=r(j0e," \u2014 "),dI=n(j0e,"A",{href:!0});var VJr=s(dI);Igo=r(VJr,"BertModel"),VJr.forEach(t),qgo=r(j0e," (BERT model)"),j0e.forEach(t),Ngo=i($),tp=n($,"LI",{});var D0e=s(tp);Dne=n(D0e,"STRONG",{});var XJr=s(Dne);jgo=r(XJr,"bert-generation"),XJr.forEach(t),Dgo=r(D0e," \u2014 "),cI=n(D0e,"A",{href:!0});var zJr=s(cI);Ggo=r(zJr,"BertGenerationEncoder"),zJr.forEach(t),Ogo=r(D0e," (Bert Generation model)"),D0e.forEach(t),Vgo=i($),ap=n($,"LI",{});var G0e=s(ap);Gne=n(G0e,"STRONG",{});var WJr=s(Gne);Xgo=r(WJr,"big_bird"),WJr.forEach(t),zgo=r(G0e," \u2014 "),fI=n(G0e,"A",{href:!0});var QJr=s(fI);Wgo=r(QJr,"BigBirdModel"),QJr.forEach(t),Qgo=r(G0e," (BigBird model)"),G0e.forEach(t),Hgo=i($),np=n($,"LI",{});var O0e=s(np);One=n(O0e,"STRONG",{});var HJr=s(One);Ugo=r(HJr,"bigbird_pegasus"),HJr.forEach(t),Jgo=r(O0e," \u2014 "),mI=n(O0e,"A",{href:!0});var UJr=s(mI);Ygo=r(UJr,"BigBirdPegasusModel"),UJr.forEach(t),Kgo=r(O0e," (BigBirdPegasus model)"),O0e.forEach(t),Zgo=i($),sp=n($,"LI",{});var V0e=s(sp);Vne=n(V0e,"STRONG",{});var JJr=s(Vne);eho=r(JJr,"blenderbot"),JJr.forEach(t),oho=r(V0e," \u2014 "),gI=n(V0e,"A",{href:!0});var YJr=s(gI);rho=r(YJr,"BlenderbotModel"),YJr.forEach(t),tho=r(V0e," (Blenderbot model)"),V0e.forEach(t),aho=i($),lp=n($,"LI",{});var X0e=s(lp);Xne=n(X0e,"STRONG",{});var KJr=s(Xne);nho=r(KJr,"blenderbot-small"),KJr.forEach(t),sho=r(X0e," \u2014 "),hI=n(X0e,"A",{href:!0});var ZJr=s(hI);lho=r(ZJr,"BlenderbotSmallModel"),ZJr.forEach(t),iho=r(X0e," (BlenderbotSmall model)"),X0e.forEach(t),dho=i($),ip=n($,"LI",{});var z0e=s(ip);zne=n(z0e,"STRONG",{});var eYr=s(zne);cho=r(eYr,"camembert"),eYr.forEach(t),fho=r(z0e," \u2014 "),pI=n(z0e,"A",{href:!0});var oYr=s(pI);mho=r(oYr,"CamembertModel"),oYr.forEach(t),gho=r(z0e," (CamemBERT model)"),z0e.forEach(t),hho=i($),dp=n($,"LI",{});var W0e=s(dp);Wne=n(W0e,"STRONG",{});var rYr=s(Wne);pho=r(rYr,"canine"),rYr.forEach(t),_ho=r(W0e," \u2014 "),_I=n(W0e,"A",{href:!0});var tYr=s(_I);uho=r(tYr,"CanineModel"),tYr.forEach(t),bho=r(W0e," (Canine model)"),W0e.forEach(t),vho=i($),cp=n($,"LI",{});var Q0e=s(cp);Qne=n(Q0e,"STRONG",{});var aYr=s(Qne);Fho=r(aYr,"clip"),aYr.forEach(t),Tho=r(Q0e," \u2014 "),uI=n(Q0e,"A",{href:!0});var nYr=s(uI);Mho=r(nYr,"CLIPModel"),nYr.forEach(t),Eho=r(Q0e," (CLIP model)"),Q0e.forEach(t),Cho=i($),fp=n($,"LI",{});var H0e=s(fp);Hne=n(H0e,"STRONG",{});var sYr=s(Hne);who=r(sYr,"convbert"),sYr.forEach(t),Aho=r(H0e," \u2014 "),bI=n(H0e,"A",{href:!0});var lYr=s(bI);yho=r(lYr,"ConvBertModel"),lYr.forEach(t),Lho=r(H0e," (ConvBERT model)"),H0e.forEach(t),xho=i($),mp=n($,"LI",{});var U0e=s(mp);Une=n(U0e,"STRONG",{});var iYr=s(Une);$ho=r(iYr,"convnext"),iYr.forEach(t),kho=r(U0e," \u2014 "),vI=n(U0e,"A",{href:!0});var dYr=s(vI);Sho=r(dYr,"ConvNextModel"),dYr.forEach(t),Rho=r(U0e," (ConvNext model)"),U0e.forEach(t),Pho=i($),gp=n($,"LI",{});var J0e=s(gp);Jne=n(J0e,"STRONG",{});var cYr=s(Jne);Bho=r(cYr,"ctrl"),cYr.forEach(t),Iho=r(J0e," \u2014 "),FI=n(J0e,"A",{href:!0});var fYr=s(FI);qho=r(fYr,"CTRLModel"),fYr.forEach(t),Nho=r(J0e," (CTRL model)"),J0e.forEach(t),jho=i($),hp=n($,"LI",{});var Y0e=s(hp);Yne=n(Y0e,"STRONG",{});var mYr=s(Yne);Dho=r(mYr,"data2vec-audio"),mYr.forEach(t),Gho=r(Y0e," \u2014 "),TI=n(Y0e,"A",{href:!0});var gYr=s(TI);Oho=r(gYr,"Data2VecAudioModel"),gYr.forEach(t),Vho=r(Y0e," (Data2VecAudio model)"),Y0e.forEach(t),Xho=i($),pp=n($,"LI",{});var K0e=s(pp);Kne=n(K0e,"STRONG",{});var hYr=s(Kne);zho=r(hYr,"data2vec-text"),hYr.forEach(t),Who=r(K0e," \u2014 "),MI=n(K0e,"A",{href:!0});var pYr=s(MI);Qho=r(pYr,"Data2VecTextModel"),pYr.forEach(t),Hho=r(K0e," (Data2VecText model)"),K0e.forEach(t),Uho=i($),_p=n($,"LI",{});var Z0e=s(_p);Zne=n(Z0e,"STRONG",{});var _Yr=s(Zne);Jho=r(_Yr,"data2vec-vision"),_Yr.forEach(t),Yho=r(Z0e," \u2014 "),EI=n(Z0e,"A",{href:!0});var uYr=s(EI);Kho=r(uYr,"Data2VecVisionModel"),uYr.forEach(t),Zho=r(Z0e," (Data2VecVision model)"),Z0e.forEach(t),epo=i($),up=n($,"LI",{});var eAe=s(up);ese=n(eAe,"STRONG",{});var bYr=s(ese);opo=r(bYr,"deberta"),bYr.forEach(t),rpo=r(eAe," \u2014 "),CI=n(eAe,"A",{href:!0});var vYr=s(CI);tpo=r(vYr,"DebertaModel"),vYr.forEach(t),apo=r(eAe," (DeBERTa model)"),eAe.forEach(t),npo=i($),bp=n($,"LI",{});var oAe=s(bp);ose=n(oAe,"STRONG",{});var FYr=s(ose);spo=r(FYr,"deberta-v2"),FYr.forEach(t),lpo=r(oAe," \u2014 "),wI=n(oAe,"A",{href:!0});var TYr=s(wI);ipo=r(TYr,"DebertaV2Model"),TYr.forEach(t),dpo=r(oAe," (DeBERTa-v2 model)"),oAe.forEach(t),cpo=i($),vp=n($,"LI",{});var rAe=s(vp);rse=n(rAe,"STRONG",{});var MYr=s(rse);fpo=r(MYr,"decision_transformer"),MYr.forEach(t),mpo=r(rAe," \u2014 "),AI=n(rAe,"A",{href:!0});var EYr=s(AI);gpo=r(EYr,"DecisionTransformerModel"),EYr.forEach(t),hpo=r(rAe," (Decision Transformer model)"),rAe.forEach(t),ppo=i($),Fp=n($,"LI",{});var tAe=s(Fp);tse=n(tAe,"STRONG",{});var CYr=s(tse);_po=r(CYr,"deit"),CYr.forEach(t),upo=r(tAe," \u2014 "),yI=n(tAe,"A",{href:!0});var wYr=s(yI);bpo=r(wYr,"DeiTModel"),wYr.forEach(t),vpo=r(tAe," (DeiT model)"),tAe.forEach(t),Fpo=i($),Tp=n($,"LI",{});var aAe=s(Tp);ase=n(aAe,"STRONG",{});var AYr=s(ase);Tpo=r(AYr,"detr"),AYr.forEach(t),Mpo=r(aAe," \u2014 "),LI=n(aAe,"A",{href:!0});var yYr=s(LI);Epo=r(yYr,"DetrModel"),yYr.forEach(t),Cpo=r(aAe," (DETR model)"),aAe.forEach(t),wpo=i($),Mp=n($,"LI",{});var nAe=s(Mp);nse=n(nAe,"STRONG",{});var LYr=s(nse);Apo=r(LYr,"distilbert"),LYr.forEach(t),ypo=r(nAe," \u2014 "),xI=n(nAe,"A",{href:!0});var xYr=s(xI);Lpo=r(xYr,"DistilBertModel"),xYr.forEach(t),xpo=r(nAe," (DistilBERT model)"),nAe.forEach(t),$po=i($),Ep=n($,"LI",{});var sAe=s(Ep);sse=n(sAe,"STRONG",{});var $Yr=s(sse);kpo=r($Yr,"dpr"),$Yr.forEach(t),Spo=r(sAe," \u2014 "),$I=n(sAe,"A",{href:!0});var kYr=s($I);Rpo=r(kYr,"DPRQuestionEncoder"),kYr.forEach(t),Ppo=r(sAe," (DPR model)"),sAe.forEach(t),Bpo=i($),Cp=n($,"LI",{});var lAe=s(Cp);lse=n(lAe,"STRONG",{});var SYr=s(lse);Ipo=r(SYr,"dpt"),SYr.forEach(t),qpo=r(lAe," \u2014 "),kI=n(lAe,"A",{href:!0});var RYr=s(kI);Npo=r(RYr,"DPTModel"),RYr.forEach(t),jpo=r(lAe," (DPT model)"),lAe.forEach(t),Dpo=i($),wp=n($,"LI",{});var iAe=s(wp);ise=n(iAe,"STRONG",{});var PYr=s(ise);Gpo=r(PYr,"electra"),PYr.forEach(t),Opo=r(iAe," \u2014 "),SI=n(iAe,"A",{href:!0});var BYr=s(SI);Vpo=r(BYr,"ElectraModel"),BYr.forEach(t),Xpo=r(iAe," (ELECTRA model)"),iAe.forEach(t),zpo=i($),Ap=n($,"LI",{});var dAe=s(Ap);dse=n(dAe,"STRONG",{});var IYr=s(dse);Wpo=r(IYr,"flaubert"),IYr.forEach(t),Qpo=r(dAe," \u2014 "),RI=n(dAe,"A",{href:!0});var qYr=s(RI);Hpo=r(qYr,"FlaubertModel"),qYr.forEach(t),Upo=r(dAe," (FlauBERT model)"),dAe.forEach(t),Jpo=i($),yp=n($,"LI",{});var cAe=s(yp);cse=n(cAe,"STRONG",{});var NYr=s(cse);Ypo=r(NYr,"flava"),NYr.forEach(t),Kpo=r(cAe," \u2014 "),PI=n(cAe,"A",{href:!0});var jYr=s(PI);Zpo=r(jYr,"FlavaModel"),jYr.forEach(t),e_o=r(cAe," (Flava model)"),cAe.forEach(t),o_o=i($),Lp=n($,"LI",{});var fAe=s(Lp);fse=n(fAe,"STRONG",{});var DYr=s(fse);r_o=r(DYr,"fnet"),DYr.forEach(t),t_o=r(fAe," \u2014 "),BI=n(fAe,"A",{href:!0});var GYr=s(BI);a_o=r(GYr,"FNetModel"),GYr.forEach(t),n_o=r(fAe," (FNet model)"),fAe.forEach(t),s_o=i($),xp=n($,"LI",{});var mAe=s(xp);mse=n(mAe,"STRONG",{});var OYr=s(mse);l_o=r(OYr,"fsmt"),OYr.forEach(t),i_o=r(mAe," \u2014 "),II=n(mAe,"A",{href:!0});var VYr=s(II);d_o=r(VYr,"FSMTModel"),VYr.forEach(t),c_o=r(mAe," (FairSeq Machine-Translation model)"),mAe.forEach(t),f_o=i($),Rs=n($,"LI",{});var A$=s(Rs);gse=n(A$,"STRONG",{});var XYr=s(gse);m_o=r(XYr,"funnel"),XYr.forEach(t),g_o=r(A$," \u2014 "),qI=n(A$,"A",{href:!0});var zYr=s(qI);h_o=r(zYr,"FunnelModel"),zYr.forEach(t),p_o=r(A$," or "),NI=n(A$,"A",{href:!0});var WYr=s(NI);__o=r(WYr,"FunnelBaseModel"),WYr.forEach(t),u_o=r(A$," (Funnel Transformer model)"),A$.forEach(t),b_o=i($),$p=n($,"LI",{});var gAe=s($p);hse=n(gAe,"STRONG",{});var QYr=s(hse);v_o=r(QYr,"glpn"),QYr.forEach(t),F_o=r(gAe," \u2014 "),jI=n(gAe,"A",{href:!0});var HYr=s(jI);T_o=r(HYr,"GLPNModel"),HYr.forEach(t),M_o=r(gAe," (GLPN model)"),gAe.forEach(t),E_o=i($),kp=n($,"LI",{});var hAe=s(kp);pse=n(hAe,"STRONG",{});var UYr=s(pse);C_o=r(UYr,"gpt2"),UYr.forEach(t),w_o=r(hAe," \u2014 "),DI=n(hAe,"A",{href:!0});var JYr=s(DI);A_o=r(JYr,"GPT2Model"),JYr.forEach(t),y_o=r(hAe," (OpenAI GPT-2 model)"),hAe.forEach(t),L_o=i($),Sp=n($,"LI",{});var pAe=s(Sp);_se=n(pAe,"STRONG",{});var YYr=s(_se);x_o=r(YYr,"gpt_neo"),YYr.forEach(t),$_o=r(pAe," \u2014 "),GI=n(pAe,"A",{href:!0});var KYr=s(GI);k_o=r(KYr,"GPTNeoModel"),KYr.forEach(t),S_o=r(pAe," (GPT Neo model)"),pAe.forEach(t),R_o=i($),Rp=n($,"LI",{});var _Ae=s(Rp);use=n(_Ae,"STRONG",{});var ZYr=s(use);P_o=r(ZYr,"gptj"),ZYr.forEach(t),B_o=r(_Ae," \u2014 "),OI=n(_Ae,"A",{href:!0});var eKr=s(OI);I_o=r(eKr,"GPTJModel"),eKr.forEach(t),q_o=r(_Ae," (GPT-J model)"),_Ae.forEach(t),N_o=i($),Pp=n($,"LI",{});var uAe=s(Pp);bse=n(uAe,"STRONG",{});var oKr=s(bse);j_o=r(oKr,"hubert"),oKr.forEach(t),D_o=r(uAe," \u2014 "),VI=n(uAe,"A",{href:!0});var rKr=s(VI);G_o=r(rKr,"HubertModel"),rKr.forEach(t),O_o=r(uAe," (Hubert model)"),uAe.forEach(t),V_o=i($),Bp=n($,"LI",{});var bAe=s(Bp);vse=n(bAe,"STRONG",{});var tKr=s(vse);X_o=r(tKr,"ibert"),tKr.forEach(t),z_o=r(bAe," \u2014 "),XI=n(bAe,"A",{href:!0});var aKr=s(XI);W_o=r(aKr,"IBertModel"),aKr.forEach(t),Q_o=r(bAe," (I-BERT model)"),bAe.forEach(t),H_o=i($),Ip=n($,"LI",{});var vAe=s(Ip);Fse=n(vAe,"STRONG",{});var nKr=s(Fse);U_o=r(nKr,"imagegpt"),nKr.forEach(t),J_o=r(vAe," \u2014 "),zI=n(vAe,"A",{href:!0});var sKr=s(zI);Y_o=r(sKr,"ImageGPTModel"),sKr.forEach(t),K_o=r(vAe," (ImageGPT model)"),vAe.forEach(t),Z_o=i($),qp=n($,"LI",{});var FAe=s(qp);Tse=n(FAe,"STRONG",{});var lKr=s(Tse);euo=r(lKr,"layoutlm"),lKr.forEach(t),ouo=r(FAe," \u2014 "),WI=n(FAe,"A",{href:!0});var iKr=s(WI);ruo=r(iKr,"LayoutLMModel"),iKr.forEach(t),tuo=r(FAe," (LayoutLM model)"),FAe.forEach(t),auo=i($),Np=n($,"LI",{});var TAe=s(Np);Mse=n(TAe,"STRONG",{});var dKr=s(Mse);nuo=r(dKr,"layoutlmv2"),dKr.forEach(t),suo=r(TAe," \u2014 "),QI=n(TAe,"A",{href:!0});var cKr=s(QI);luo=r(cKr,"LayoutLMv2Model"),cKr.forEach(t),iuo=r(TAe," (LayoutLMv2 model)"),TAe.forEach(t),duo=i($),jp=n($,"LI",{});var MAe=s(jp);Ese=n(MAe,"STRONG",{});var fKr=s(Ese);cuo=r(fKr,"led"),fKr.forEach(t),fuo=r(MAe," \u2014 "),HI=n(MAe,"A",{href:!0});var mKr=s(HI);muo=r(mKr,"LEDModel"),mKr.forEach(t),guo=r(MAe," (LED model)"),MAe.forEach(t),huo=i($),Dp=n($,"LI",{});var EAe=s(Dp);Cse=n(EAe,"STRONG",{});var gKr=s(Cse);puo=r(gKr,"longformer"),gKr.forEach(t),_uo=r(EAe," \u2014 "),UI=n(EAe,"A",{href:!0});var hKr=s(UI);uuo=r(hKr,"LongformerModel"),hKr.forEach(t),buo=r(EAe," (Longformer model)"),EAe.forEach(t),vuo=i($),Gp=n($,"LI",{});var CAe=s(Gp);wse=n(CAe,"STRONG",{});var pKr=s(wse);Fuo=r(pKr,"luke"),pKr.forEach(t),Tuo=r(CAe," \u2014 "),JI=n(CAe,"A",{href:!0});var _Kr=s(JI);Muo=r(_Kr,"LukeModel"),_Kr.forEach(t),Euo=r(CAe," (LUKE model)"),CAe.forEach(t),Cuo=i($),Op=n($,"LI",{});var wAe=s(Op);Ase=n(wAe,"STRONG",{});var uKr=s(Ase);wuo=r(uKr,"lxmert"),uKr.forEach(t),Auo=r(wAe," \u2014 "),YI=n(wAe,"A",{href:!0});var bKr=s(YI);yuo=r(bKr,"LxmertModel"),bKr.forEach(t),Luo=r(wAe," (LXMERT model)"),wAe.forEach(t),xuo=i($),Vp=n($,"LI",{});var AAe=s(Vp);yse=n(AAe,"STRONG",{});var vKr=s(yse);$uo=r(vKr,"m2m_100"),vKr.forEach(t),kuo=r(AAe," \u2014 "),KI=n(AAe,"A",{href:!0});var FKr=s(KI);Suo=r(FKr,"M2M100Model"),FKr.forEach(t),Ruo=r(AAe," (M2M100 model)"),AAe.forEach(t),Puo=i($),Xp=n($,"LI",{});var yAe=s(Xp);Lse=n(yAe,"STRONG",{});var TKr=s(Lse);Buo=r(TKr,"marian"),TKr.forEach(t),Iuo=r(yAe," \u2014 "),ZI=n(yAe,"A",{href:!0});var MKr=s(ZI);quo=r(MKr,"MarianModel"),MKr.forEach(t),Nuo=r(yAe," (Marian model)"),yAe.forEach(t),juo=i($),zp=n($,"LI",{});var LAe=s(zp);xse=n(LAe,"STRONG",{});var EKr=s(xse);Duo=r(EKr,"maskformer"),EKr.forEach(t),Guo=r(LAe," \u2014 "),eq=n(LAe,"A",{href:!0});var CKr=s(eq);Ouo=r(CKr,"MaskFormerModel"),CKr.forEach(t),Vuo=r(LAe," (MaskFormer model)"),LAe.forEach(t),Xuo=i($),Wp=n($,"LI",{});var xAe=s(Wp);$se=n(xAe,"STRONG",{});var wKr=s($se);zuo=r(wKr,"mbart"),wKr.forEach(t),Wuo=r(xAe," \u2014 "),oq=n(xAe,"A",{href:!0});var AKr=s(oq);Quo=r(AKr,"MBartModel"),AKr.forEach(t),Huo=r(xAe," (mBART model)"),xAe.forEach(t),Uuo=i($),Qp=n($,"LI",{});var $Ae=s(Qp);kse=n($Ae,"STRONG",{});var yKr=s(kse);Juo=r(yKr,"megatron-bert"),yKr.forEach(t),Yuo=r($Ae," \u2014 "),rq=n($Ae,"A",{href:!0});var LKr=s(rq);Kuo=r(LKr,"MegatronBertModel"),LKr.forEach(t),Zuo=r($Ae," (MegatronBert model)"),$Ae.forEach(t),e1o=i($),Hp=n($,"LI",{});var kAe=s(Hp);Sse=n(kAe,"STRONG",{});var xKr=s(Sse);o1o=r(xKr,"mobilebert"),xKr.forEach(t),r1o=r(kAe," \u2014 "),tq=n(kAe,"A",{href:!0});var $Kr=s(tq);t1o=r($Kr,"MobileBertModel"),$Kr.forEach(t),a1o=r(kAe," (MobileBERT model)"),kAe.forEach(t),n1o=i($),Up=n($,"LI",{});var SAe=s(Up);Rse=n(SAe,"STRONG",{});var kKr=s(Rse);s1o=r(kKr,"mpnet"),kKr.forEach(t),l1o=r(SAe," \u2014 "),aq=n(SAe,"A",{href:!0});var SKr=s(aq);i1o=r(SKr,"MPNetModel"),SKr.forEach(t),d1o=r(SAe," (MPNet model)"),SAe.forEach(t),c1o=i($),Jp=n($,"LI",{});var RAe=s(Jp);Pse=n(RAe,"STRONG",{});var RKr=s(Pse);f1o=r(RKr,"mt5"),RKr.forEach(t),m1o=r(RAe," \u2014 "),nq=n(RAe,"A",{href:!0});var PKr=s(nq);g1o=r(PKr,"MT5Model"),PKr.forEach(t),h1o=r(RAe," (mT5 model)"),RAe.forEach(t),p1o=i($),Yp=n($,"LI",{});var PAe=s(Yp);Bse=n(PAe,"STRONG",{});var BKr=s(Bse);_1o=r(BKr,"nystromformer"),BKr.forEach(t),u1o=r(PAe," \u2014 "),sq=n(PAe,"A",{href:!0});var IKr=s(sq);b1o=r(IKr,"NystromformerModel"),IKr.forEach(t),v1o=r(PAe," (Nystromformer model)"),PAe.forEach(t),F1o=i($),Kp=n($,"LI",{});var BAe=s(Kp);Ise=n(BAe,"STRONG",{});var qKr=s(Ise);T1o=r(qKr,"openai-gpt"),qKr.forEach(t),M1o=r(BAe," \u2014 "),lq=n(BAe,"A",{href:!0});var NKr=s(lq);E1o=r(NKr,"OpenAIGPTModel"),NKr.forEach(t),C1o=r(BAe," (OpenAI GPT model)"),BAe.forEach(t),w1o=i($),Zp=n($,"LI",{});var IAe=s(Zp);qse=n(IAe,"STRONG",{});var jKr=s(qse);A1o=r(jKr,"opt"),jKr.forEach(t),y1o=r(IAe," \u2014 "),iq=n(IAe,"A",{href:!0});var DKr=s(iq);L1o=r(DKr,"OPTModel"),DKr.forEach(t),x1o=r(IAe," (OPT model)"),IAe.forEach(t),$1o=i($),e_=n($,"LI",{});var qAe=s(e_);Nse=n(qAe,"STRONG",{});var GKr=s(Nse);k1o=r(GKr,"pegasus"),GKr.forEach(t),S1o=r(qAe," \u2014 "),dq=n(qAe,"A",{href:!0});var OKr=s(dq);R1o=r(OKr,"PegasusModel"),OKr.forEach(t),P1o=r(qAe," (Pegasus model)"),qAe.forEach(t),B1o=i($),o_=n($,"LI",{});var NAe=s(o_);jse=n(NAe,"STRONG",{});var VKr=s(jse);I1o=r(VKr,"perceiver"),VKr.forEach(t),q1o=r(NAe," \u2014 "),cq=n(NAe,"A",{href:!0});var XKr=s(cq);N1o=r(XKr,"PerceiverModel"),XKr.forEach(t),j1o=r(NAe," (Perceiver model)"),NAe.forEach(t),D1o=i($),r_=n($,"LI",{});var jAe=s(r_);Dse=n(jAe,"STRONG",{});var zKr=s(Dse);G1o=r(zKr,"plbart"),zKr.forEach(t),O1o=r(jAe," \u2014 "),fq=n(jAe,"A",{href:!0});var WKr=s(fq);V1o=r(WKr,"PLBartModel"),WKr.forEach(t),X1o=r(jAe," (PLBart model)"),jAe.forEach(t),z1o=i($),t_=n($,"LI",{});var DAe=s(t_);Gse=n(DAe,"STRONG",{});var QKr=s(Gse);W1o=r(QKr,"poolformer"),QKr.forEach(t),Q1o=r(DAe," \u2014 "),mq=n(DAe,"A",{href:!0});var HKr=s(mq);H1o=r(HKr,"PoolFormerModel"),HKr.forEach(t),U1o=r(DAe," (PoolFormer model)"),DAe.forEach(t),J1o=i($),a_=n($,"LI",{});var GAe=s(a_);Ose=n(GAe,"STRONG",{});var UKr=s(Ose);Y1o=r(UKr,"prophetnet"),UKr.forEach(t),K1o=r(GAe," \u2014 "),gq=n(GAe,"A",{href:!0});var JKr=s(gq);Z1o=r(JKr,"ProphetNetModel"),JKr.forEach(t),ebo=r(GAe," (ProphetNet model)"),GAe.forEach(t),obo=i($),n_=n($,"LI",{});var OAe=s(n_);Vse=n(OAe,"STRONG",{});var YKr=s(Vse);rbo=r(YKr,"qdqbert"),YKr.forEach(t),tbo=r(OAe," \u2014 "),hq=n(OAe,"A",{href:!0});var KKr=s(hq);abo=r(KKr,"QDQBertModel"),KKr.forEach(t),nbo=r(OAe," (QDQBert model)"),OAe.forEach(t),sbo=i($),s_=n($,"LI",{});var VAe=s(s_);Xse=n(VAe,"STRONG",{});var ZKr=s(Xse);lbo=r(ZKr,"reformer"),ZKr.forEach(t),ibo=r(VAe," \u2014 "),pq=n(VAe,"A",{href:!0});var eZr=s(pq);dbo=r(eZr,"ReformerModel"),eZr.forEach(t),cbo=r(VAe," (Reformer model)"),VAe.forEach(t),fbo=i($),l_=n($,"LI",{});var XAe=s(l_);zse=n(XAe,"STRONG",{});var oZr=s(zse);mbo=r(oZr,"regnet"),oZr.forEach(t),gbo=r(XAe," \u2014 "),_q=n(XAe,"A",{href:!0});var rZr=s(_q);hbo=r(rZr,"RegNetModel"),rZr.forEach(t),pbo=r(XAe," (RegNet model)"),XAe.forEach(t),_bo=i($),i_=n($,"LI",{});var zAe=s(i_);Wse=n(zAe,"STRONG",{});var tZr=s(Wse);ubo=r(tZr,"rembert"),tZr.forEach(t),bbo=r(zAe," \u2014 "),uq=n(zAe,"A",{href:!0});var aZr=s(uq);vbo=r(aZr,"RemBertModel"),aZr.forEach(t),Fbo=r(zAe," (RemBERT model)"),zAe.forEach(t),Tbo=i($),d_=n($,"LI",{});var WAe=s(d_);Qse=n(WAe,"STRONG",{});var nZr=s(Qse);Mbo=r(nZr,"resnet"),nZr.forEach(t),Ebo=r(WAe," \u2014 "),bq=n(WAe,"A",{href:!0});var sZr=s(bq);Cbo=r(sZr,"ResNetModel"),sZr.forEach(t),wbo=r(WAe," (ResNet model)"),WAe.forEach(t),Abo=i($),c_=n($,"LI",{});var QAe=s(c_);Hse=n(QAe,"STRONG",{});var lZr=s(Hse);ybo=r(lZr,"retribert"),lZr.forEach(t),Lbo=r(QAe," \u2014 "),vq=n(QAe,"A",{href:!0});var iZr=s(vq);xbo=r(iZr,"RetriBertModel"),iZr.forEach(t),$bo=r(QAe," (RetriBERT model)"),QAe.forEach(t),kbo=i($),f_=n($,"LI",{});var HAe=s(f_);Use=n(HAe,"STRONG",{});var dZr=s(Use);Sbo=r(dZr,"roberta"),dZr.forEach(t),Rbo=r(HAe," \u2014 "),Fq=n(HAe,"A",{href:!0});var cZr=s(Fq);Pbo=r(cZr,"RobertaModel"),cZr.forEach(t),Bbo=r(HAe," (RoBERTa model)"),HAe.forEach(t),Ibo=i($),m_=n($,"LI",{});var UAe=s(m_);Jse=n(UAe,"STRONG",{});var fZr=s(Jse);qbo=r(fZr,"roformer"),fZr.forEach(t),Nbo=r(UAe," \u2014 "),Tq=n(UAe,"A",{href:!0});var mZr=s(Tq);jbo=r(mZr,"RoFormerModel"),mZr.forEach(t),Dbo=r(UAe," (RoFormer model)"),UAe.forEach(t),Gbo=i($),g_=n($,"LI",{});var JAe=s(g_);Yse=n(JAe,"STRONG",{});var gZr=s(Yse);Obo=r(gZr,"segformer"),gZr.forEach(t),Vbo=r(JAe," \u2014 "),Mq=n(JAe,"A",{href:!0});var hZr=s(Mq);Xbo=r(hZr,"SegformerModel"),hZr.forEach(t),zbo=r(JAe," (SegFormer model)"),JAe.forEach(t),Wbo=i($),h_=n($,"LI",{});var YAe=s(h_);Kse=n(YAe,"STRONG",{});var pZr=s(Kse);Qbo=r(pZr,"sew"),pZr.forEach(t),Hbo=r(YAe," \u2014 "),Eq=n(YAe,"A",{href:!0});var _Zr=s(Eq);Ubo=r(_Zr,"SEWModel"),_Zr.forEach(t),Jbo=r(YAe," (SEW model)"),YAe.forEach(t),Ybo=i($),p_=n($,"LI",{});var KAe=s(p_);Zse=n(KAe,"STRONG",{});var uZr=s(Zse);Kbo=r(uZr,"sew-d"),uZr.forEach(t),Zbo=r(KAe," \u2014 "),Cq=n(KAe,"A",{href:!0});var bZr=s(Cq);e2o=r(bZr,"SEWDModel"),bZr.forEach(t),o2o=r(KAe," (SEW-D model)"),KAe.forEach(t),r2o=i($),__=n($,"LI",{});var ZAe=s(__);ele=n(ZAe,"STRONG",{});var vZr=s(ele);t2o=r(vZr,"speech_to_text"),vZr.forEach(t),a2o=r(ZAe," \u2014 "),wq=n(ZAe,"A",{href:!0});var FZr=s(wq);n2o=r(FZr,"Speech2TextModel"),FZr.forEach(t),s2o=r(ZAe," (Speech2Text model)"),ZAe.forEach(t),l2o=i($),u_=n($,"LI",{});var eye=s(u_);ole=n(eye,"STRONG",{});var TZr=s(ole);i2o=r(TZr,"splinter"),TZr.forEach(t),d2o=r(eye," \u2014 "),Aq=n(eye,"A",{href:!0});var MZr=s(Aq);c2o=r(MZr,"SplinterModel"),MZr.forEach(t),f2o=r(eye," (Splinter model)"),eye.forEach(t),m2o=i($),b_=n($,"LI",{});var oye=s(b_);rle=n(oye,"STRONG",{});var EZr=s(rle);g2o=r(EZr,"squeezebert"),EZr.forEach(t),h2o=r(oye," \u2014 "),yq=n(oye,"A",{href:!0});var CZr=s(yq);p2o=r(CZr,"SqueezeBertModel"),CZr.forEach(t),_2o=r(oye," (SqueezeBERT model)"),oye.forEach(t),u2o=i($),v_=n($,"LI",{});var rye=s(v_);tle=n(rye,"STRONG",{});var wZr=s(tle);b2o=r(wZr,"swin"),wZr.forEach(t),v2o=r(rye," \u2014 "),Lq=n(rye,"A",{href:!0});var AZr=s(Lq);F2o=r(AZr,"SwinModel"),AZr.forEach(t),T2o=r(rye," (Swin model)"),rye.forEach(t),M2o=i($),F_=n($,"LI",{});var tye=s(F_);ale=n(tye,"STRONG",{});var yZr=s(ale);E2o=r(yZr,"t5"),yZr.forEach(t),C2o=r(tye," \u2014 "),xq=n(tye,"A",{href:!0});var LZr=s(xq);w2o=r(LZr,"T5Model"),LZr.forEach(t),A2o=r(tye," (T5 model)"),tye.forEach(t),y2o=i($),T_=n($,"LI",{});var aye=s(T_);nle=n(aye,"STRONG",{});var xZr=s(nle);L2o=r(xZr,"tapas"),xZr.forEach(t),x2o=r(aye," \u2014 "),$q=n(aye,"A",{href:!0});var $Zr=s($q);$2o=r($Zr,"TapasModel"),$Zr.forEach(t),k2o=r(aye," (TAPAS model)"),aye.forEach(t),S2o=i($),M_=n($,"LI",{});var nye=s(M_);sle=n(nye,"STRONG",{});var kZr=s(sle);R2o=r(kZr,"trajectory_transformer"),kZr.forEach(t),P2o=r(nye," \u2014 "),kq=n(nye,"A",{href:!0});var SZr=s(kq);B2o=r(SZr,"TrajectoryTransformerModel"),SZr.forEach(t),I2o=r(nye," (Trajectory Transformer model)"),nye.forEach(t),q2o=i($),E_=n($,"LI",{});var sye=s(E_);lle=n(sye,"STRONG",{});var RZr=s(lle);N2o=r(RZr,"transfo-xl"),RZr.forEach(t),j2o=r(sye," \u2014 "),Sq=n(sye,"A",{href:!0});var PZr=s(Sq);D2o=r(PZr,"TransfoXLModel"),PZr.forEach(t),G2o=r(sye," (Transformer-XL model)"),sye.forEach(t),O2o=i($),C_=n($,"LI",{});var lye=s(C_);ile=n(lye,"STRONG",{});var BZr=s(ile);V2o=r(BZr,"unispeech"),BZr.forEach(t),X2o=r(lye," \u2014 "),Rq=n(lye,"A",{href:!0});var IZr=s(Rq);z2o=r(IZr,"UniSpeechModel"),IZr.forEach(t),W2o=r(lye," (UniSpeech model)"),lye.forEach(t),Q2o=i($),w_=n($,"LI",{});var iye=s(w_);dle=n(iye,"STRONG",{});var qZr=s(dle);H2o=r(qZr,"unispeech-sat"),qZr.forEach(t),U2o=r(iye," \u2014 "),Pq=n(iye,"A",{href:!0});var NZr=s(Pq);J2o=r(NZr,"UniSpeechSatModel"),NZr.forEach(t),Y2o=r(iye," (UniSpeechSat model)"),iye.forEach(t),K2o=i($),A_=n($,"LI",{});var dye=s(A_);cle=n(dye,"STRONG",{});var jZr=s(cle);Z2o=r(jZr,"van"),jZr.forEach(t),e4o=r(dye," \u2014 "),Bq=n(dye,"A",{href:!0});var DZr=s(Bq);o4o=r(DZr,"VanModel"),DZr.forEach(t),r4o=r(dye," (VAN model)"),dye.forEach(t),t4o=i($),y_=n($,"LI",{});var cye=s(y_);fle=n(cye,"STRONG",{});var GZr=s(fle);a4o=r(GZr,"vilt"),GZr.forEach(t),n4o=r(cye," \u2014 "),Iq=n(cye,"A",{href:!0});var OZr=s(Iq);s4o=r(OZr,"ViltModel"),OZr.forEach(t),l4o=r(cye," (ViLT model)"),cye.forEach(t),i4o=i($),L_=n($,"LI",{});var fye=s(L_);mle=n(fye,"STRONG",{});var VZr=s(mle);d4o=r(VZr,"vision-text-dual-encoder"),VZr.forEach(t),c4o=r(fye," \u2014 "),qq=n(fye,"A",{href:!0});var XZr=s(qq);f4o=r(XZr,"VisionTextDualEncoderModel"),XZr.forEach(t),m4o=r(fye," (VisionTextDualEncoder model)"),fye.forEach(t),g4o=i($),x_=n($,"LI",{});var mye=s(x_);gle=n(mye,"STRONG",{});var zZr=s(gle);h4o=r(zZr,"visual_bert"),zZr.forEach(t),p4o=r(mye," \u2014 "),Nq=n(mye,"A",{href:!0});var WZr=s(Nq);_4o=r(WZr,"VisualBertModel"),WZr.forEach(t),u4o=r(mye," (VisualBert model)"),mye.forEach(t),b4o=i($),$_=n($,"LI",{});var gye=s($_);hle=n(gye,"STRONG",{});var QZr=s(hle);v4o=r(QZr,"vit"),QZr.forEach(t),F4o=r(gye," \u2014 "),jq=n(gye,"A",{href:!0});var HZr=s(jq);T4o=r(HZr,"ViTModel"),HZr.forEach(t),M4o=r(gye," (ViT model)"),gye.forEach(t),E4o=i($),k_=n($,"LI",{});var hye=s(k_);ple=n(hye,"STRONG",{});var UZr=s(ple);C4o=r(UZr,"vit_mae"),UZr.forEach(t),w4o=r(hye," \u2014 "),Dq=n(hye,"A",{href:!0});var JZr=s(Dq);A4o=r(JZr,"ViTMAEModel"),JZr.forEach(t),y4o=r(hye," (ViTMAE model)"),hye.forEach(t),L4o=i($),S_=n($,"LI",{});var pye=s(S_);_le=n(pye,"STRONG",{});var YZr=s(_le);x4o=r(YZr,"wav2vec2"),YZr.forEach(t),$4o=r(pye," \u2014 "),Gq=n(pye,"A",{href:!0});var KZr=s(Gq);k4o=r(KZr,"Wav2Vec2Model"),KZr.forEach(t),S4o=r(pye," (Wav2Vec2 model)"),pye.forEach(t),R4o=i($),R_=n($,"LI",{});var _ye=s(R_);ule=n(_ye,"STRONG",{});var ZZr=s(ule);P4o=r(ZZr,"wav2vec2-conformer"),ZZr.forEach(t),B4o=r(_ye," \u2014 "),Oq=n(_ye,"A",{href:!0});var eet=s(Oq);I4o=r(eet,"Wav2Vec2ConformerModel"),eet.forEach(t),q4o=r(_ye," (Wav2Vec2-Conformer model)"),_ye.forEach(t),N4o=i($),P_=n($,"LI",{});var uye=s(P_);ble=n(uye,"STRONG",{});var oet=s(ble);j4o=r(oet,"wavlm"),oet.forEach(t),D4o=r(uye," \u2014 "),Vq=n(uye,"A",{href:!0});var ret=s(Vq);G4o=r(ret,"WavLMModel"),ret.forEach(t),O4o=r(uye," (WavLM model)"),uye.forEach(t),V4o=i($),B_=n($,"LI",{});var bye=s(B_);vle=n(bye,"STRONG",{});var tet=s(vle);X4o=r(tet,"xglm"),tet.forEach(t),z4o=r(bye," \u2014 "),Xq=n(bye,"A",{href:!0});var aet=s(Xq);W4o=r(aet,"XGLMModel"),aet.forEach(t),Q4o=r(bye," (XGLM model)"),bye.forEach(t),H4o=i($),I_=n($,"LI",{});var vye=s(I_);Fle=n(vye,"STRONG",{});var net=s(Fle);U4o=r(net,"xlm"),net.forEach(t),J4o=r(vye," \u2014 "),zq=n(vye,"A",{href:!0});var set=s(zq);Y4o=r(set,"XLMModel"),set.forEach(t),K4o=r(vye," (XLM model)"),vye.forEach(t),Z4o=i($),q_=n($,"LI",{});var Fye=s(q_);Tle=n(Fye,"STRONG",{});var iet=s(Tle);e5o=r(iet,"xlm-prophetnet"),iet.forEach(t),o5o=r(Fye," \u2014 "),Wq=n(Fye,"A",{href:!0});var det=s(Wq);r5o=r(det,"XLMProphetNetModel"),det.forEach(t),t5o=r(Fye," (XLMProphetNet model)"),Fye.forEach(t),a5o=i($),N_=n($,"LI",{});var Tye=s(N_);Mle=n(Tye,"STRONG",{});var cet=s(Mle);n5o=r(cet,"xlm-roberta"),cet.forEach(t),s5o=r(Tye," \u2014 "),Qq=n(Tye,"A",{href:!0});var fet=s(Qq);l5o=r(fet,"XLMRobertaModel"),fet.forEach(t),i5o=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),d5o=i($),j_=n($,"LI",{});var Mye=s(j_);Ele=n(Mye,"STRONG",{});var met=s(Ele);c5o=r(met,"xlm-roberta-xl"),met.forEach(t),f5o=r(Mye," \u2014 "),Hq=n(Mye,"A",{href:!0});var get=s(Hq);m5o=r(get,"XLMRobertaXLModel"),get.forEach(t),g5o=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),h5o=i($),D_=n($,"LI",{});var Eye=s(D_);Cle=n(Eye,"STRONG",{});var het=s(Cle);p5o=r(het,"xlnet"),het.forEach(t),_5o=r(Eye," \u2014 "),Uq=n(Eye,"A",{href:!0});var pet=s(Uq);u5o=r(pet,"XLNetModel"),pet.forEach(t),b5o=r(Eye," (XLNet model)"),Eye.forEach(t),v5o=i($),G_=n($,"LI",{});var Cye=s(G_);wle=n(Cye,"STRONG",{});var _et=s(wle);F5o=r(_et,"yolos"),_et.forEach(t),T5o=r(Cye," \u2014 "),Jq=n(Cye,"A",{href:!0});var uet=s(Jq);M5o=r(uet,"YolosModel"),uet.forEach(t),E5o=r(Cye," (YOLOS model)"),Cye.forEach(t),C5o=i($),O_=n($,"LI",{});var wye=s(O_);Ale=n(wye,"STRONG",{});var bet=s(Ale);w5o=r(bet,"yoso"),bet.forEach(t),A5o=r(wye," \u2014 "),Yq=n(wye,"A",{href:!0});var vet=s(Yq);y5o=r(vet,"YosoModel"),vet.forEach(t),L5o=r(wye," (YOSO model)"),wye.forEach(t),$.forEach(t),x5o=i(oa),V_=n(oa,"P",{});var Aye=s(V_);$5o=r(Aye,"The model is set in evaluation mode by default using "),yle=n(Aye,"CODE",{});var Fet=s(yle);k5o=r(Fet,"model.eval()"),Fet.forEach(t),S5o=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=n(Aye,"CODE",{});var Tet=s(Lle);R5o=r(Tet,"model.train()"),Tet.forEach(t),Aye.forEach(t),P5o=i(oa),T(X_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),sqe=i(f),yi=n(f,"H2",{class:!0});var cje=s(yi);z_=n(cje,"A",{id:!0,class:!0,href:!0});var Met=s(z_);xle=n(Met,"SPAN",{});var Eet=s(xle);T(Vy.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),B5o=i(cje),$le=n(cje,"SPAN",{});var Cet=s($le);I5o=r(Cet,"AutoModelForPreTraining"),Cet.forEach(t),cje.forEach(t),lqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(Xy.$$.fragment,Gs),q5o=i(Gs),Li=n(Gs,"P",{});var jK=s(Li);N5o=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kq=n(jK,"A",{href:!0});var wet=s(Kq);j5o=r(wet,"from_pretrained()"),wet.forEach(t),D5o=r(jK," class method or the "),Zq=n(jK,"A",{href:!0});var Aet=s(Zq);G5o=r(Aet,"from_config()"),Aet.forEach(t),O5o=r(jK,` class
method.`),jK.forEach(t),V5o=i(Gs),zy=n(Gs,"P",{});var fje=s(zy);X5o=r(fje,"This class cannot be instantiated directly using "),kle=n(fje,"CODE",{});var yet=s(kle);z5o=r(yet,"__init__()"),yet.forEach(t),W5o=r(fje," (throws an error)."),fje.forEach(t),Q5o=i(Gs),at=n(Gs,"DIV",{class:!0});var b0=s(at);T(Wy.$$.fragment,b0),H5o=i(b0),Sle=n(b0,"P",{});var Let=s(Sle);U5o=r(Let,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Let.forEach(t),J5o=i(b0),xi=n(b0,"P",{});var DK=s(xi);Y5o=r(DK,`Note:
Loading a model from its configuration file does `),Rle=n(DK,"STRONG",{});var xet=s(Rle);K5o=r(xet,"not"),xet.forEach(t),Z5o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eN=n(DK,"A",{href:!0});var $et=s(eN);evo=r($et,"from_pretrained()"),$et.forEach(t),ovo=r(DK," to load the model weights."),DK.forEach(t),rvo=i(b0),T(W_.$$.fragment,b0),b0.forEach(t),tvo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Qy.$$.fragment,ra),avo=i(ra),Ple=n(ra,"P",{});var ket=s(Ple);nvo=r(ket,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ket.forEach(t),svo=i(ra),xa=n(ra,"P",{});var v0=s(xa);lvo=r(v0,"The model class to instantiate is selected based on the "),Ble=n(v0,"CODE",{});var Set=s(Ble);ivo=r(Set,"model_type"),Set.forEach(t),dvo=r(v0,` property of the config object (either
passed as an argument or loaded from `),Ile=n(v0,"CODE",{});var Ret=s(Ile);cvo=r(Ret,"pretrained_model_name_or_path"),Ret.forEach(t),fvo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=n(v0,"CODE",{});var Pet=s(qle);mvo=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),gvo=r(v0,":"),v0.forEach(t),hvo=i(ra),G=n(ra,"UL",{});var O=s(G);Q_=n(O,"LI",{});var yye=s(Q_);Nle=n(yye,"STRONG",{});var Bet=s(Nle);pvo=r(Bet,"albert"),Bet.forEach(t),_vo=r(yye," \u2014 "),oN=n(yye,"A",{href:!0});var Iet=s(oN);uvo=r(Iet,"AlbertForPreTraining"),Iet.forEach(t),bvo=r(yye," (ALBERT model)"),yye.forEach(t),vvo=i(O),H_=n(O,"LI",{});var Lye=s(H_);jle=n(Lye,"STRONG",{});var qet=s(jle);Fvo=r(qet,"bart"),qet.forEach(t),Tvo=r(Lye," \u2014 "),rN=n(Lye,"A",{href:!0});var Net=s(rN);Mvo=r(Net,"BartForConditionalGeneration"),Net.forEach(t),Evo=r(Lye," (BART model)"),Lye.forEach(t),Cvo=i(O),U_=n(O,"LI",{});var xye=s(U_);Dle=n(xye,"STRONG",{});var jet=s(Dle);wvo=r(jet,"bert"),jet.forEach(t),Avo=r(xye," \u2014 "),tN=n(xye,"A",{href:!0});var Det=s(tN);yvo=r(Det,"BertForPreTraining"),Det.forEach(t),Lvo=r(xye," (BERT model)"),xye.forEach(t),xvo=i(O),J_=n(O,"LI",{});var $ye=s(J_);Gle=n($ye,"STRONG",{});var Get=s(Gle);$vo=r(Get,"big_bird"),Get.forEach(t),kvo=r($ye," \u2014 "),aN=n($ye,"A",{href:!0});var Oet=s(aN);Svo=r(Oet,"BigBirdForPreTraining"),Oet.forEach(t),Rvo=r($ye," (BigBird model)"),$ye.forEach(t),Pvo=i(O),Y_=n(O,"LI",{});var kye=s(Y_);Ole=n(kye,"STRONG",{});var Vet=s(Ole);Bvo=r(Vet,"camembert"),Vet.forEach(t),Ivo=r(kye," \u2014 "),nN=n(kye,"A",{href:!0});var Xet=s(nN);qvo=r(Xet,"CamembertForMaskedLM"),Xet.forEach(t),Nvo=r(kye," (CamemBERT model)"),kye.forEach(t),jvo=i(O),K_=n(O,"LI",{});var Sye=s(K_);Vle=n(Sye,"STRONG",{});var zet=s(Vle);Dvo=r(zet,"ctrl"),zet.forEach(t),Gvo=r(Sye," \u2014 "),sN=n(Sye,"A",{href:!0});var Wet=s(sN);Ovo=r(Wet,"CTRLLMHeadModel"),Wet.forEach(t),Vvo=r(Sye," (CTRL model)"),Sye.forEach(t),Xvo=i(O),Z_=n(O,"LI",{});var Rye=s(Z_);Xle=n(Rye,"STRONG",{});var Qet=s(Xle);zvo=r(Qet,"data2vec-text"),Qet.forEach(t),Wvo=r(Rye," \u2014 "),lN=n(Rye,"A",{href:!0});var Het=s(lN);Qvo=r(Het,"Data2VecTextForMaskedLM"),Het.forEach(t),Hvo=r(Rye," (Data2VecText model)"),Rye.forEach(t),Uvo=i(O),eu=n(O,"LI",{});var Pye=s(eu);zle=n(Pye,"STRONG",{});var Uet=s(zle);Jvo=r(Uet,"deberta"),Uet.forEach(t),Yvo=r(Pye," \u2014 "),iN=n(Pye,"A",{href:!0});var Jet=s(iN);Kvo=r(Jet,"DebertaForMaskedLM"),Jet.forEach(t),Zvo=r(Pye," (DeBERTa model)"),Pye.forEach(t),e3o=i(O),ou=n(O,"LI",{});var Bye=s(ou);Wle=n(Bye,"STRONG",{});var Yet=s(Wle);o3o=r(Yet,"deberta-v2"),Yet.forEach(t),r3o=r(Bye," \u2014 "),dN=n(Bye,"A",{href:!0});var Ket=s(dN);t3o=r(Ket,"DebertaV2ForMaskedLM"),Ket.forEach(t),a3o=r(Bye," (DeBERTa-v2 model)"),Bye.forEach(t),n3o=i(O),ru=n(O,"LI",{});var Iye=s(ru);Qle=n(Iye,"STRONG",{});var Zet=s(Qle);s3o=r(Zet,"distilbert"),Zet.forEach(t),l3o=r(Iye," \u2014 "),cN=n(Iye,"A",{href:!0});var eot=s(cN);i3o=r(eot,"DistilBertForMaskedLM"),eot.forEach(t),d3o=r(Iye," (DistilBERT model)"),Iye.forEach(t),c3o=i(O),tu=n(O,"LI",{});var qye=s(tu);Hle=n(qye,"STRONG",{});var oot=s(Hle);f3o=r(oot,"electra"),oot.forEach(t),m3o=r(qye," \u2014 "),fN=n(qye,"A",{href:!0});var rot=s(fN);g3o=r(rot,"ElectraForPreTraining"),rot.forEach(t),h3o=r(qye," (ELECTRA model)"),qye.forEach(t),p3o=i(O),au=n(O,"LI",{});var Nye=s(au);Ule=n(Nye,"STRONG",{});var tot=s(Ule);_3o=r(tot,"flaubert"),tot.forEach(t),u3o=r(Nye," \u2014 "),mN=n(Nye,"A",{href:!0});var aot=s(mN);b3o=r(aot,"FlaubertWithLMHeadModel"),aot.forEach(t),v3o=r(Nye," (FlauBERT model)"),Nye.forEach(t),F3o=i(O),nu=n(O,"LI",{});var jye=s(nu);Jle=n(jye,"STRONG",{});var not=s(Jle);T3o=r(not,"flava"),not.forEach(t),M3o=r(jye," \u2014 "),gN=n(jye,"A",{href:!0});var sot=s(gN);E3o=r(sot,"FlavaForPreTraining"),sot.forEach(t),C3o=r(jye," (Flava model)"),jye.forEach(t),w3o=i(O),su=n(O,"LI",{});var Dye=s(su);Yle=n(Dye,"STRONG",{});var lot=s(Yle);A3o=r(lot,"fnet"),lot.forEach(t),y3o=r(Dye," \u2014 "),hN=n(Dye,"A",{href:!0});var iot=s(hN);L3o=r(iot,"FNetForPreTraining"),iot.forEach(t),x3o=r(Dye," (FNet model)"),Dye.forEach(t),$3o=i(O),lu=n(O,"LI",{});var Gye=s(lu);Kle=n(Gye,"STRONG",{});var dot=s(Kle);k3o=r(dot,"fsmt"),dot.forEach(t),S3o=r(Gye," \u2014 "),pN=n(Gye,"A",{href:!0});var cot=s(pN);R3o=r(cot,"FSMTForConditionalGeneration"),cot.forEach(t),P3o=r(Gye," (FairSeq Machine-Translation model)"),Gye.forEach(t),B3o=i(O),iu=n(O,"LI",{});var Oye=s(iu);Zle=n(Oye,"STRONG",{});var fot=s(Zle);I3o=r(fot,"funnel"),fot.forEach(t),q3o=r(Oye," \u2014 "),_N=n(Oye,"A",{href:!0});var mot=s(_N);N3o=r(mot,"FunnelForPreTraining"),mot.forEach(t),j3o=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),D3o=i(O),du=n(O,"LI",{});var Vye=s(du);eie=n(Vye,"STRONG",{});var got=s(eie);G3o=r(got,"gpt2"),got.forEach(t),O3o=r(Vye," \u2014 "),uN=n(Vye,"A",{href:!0});var hot=s(uN);V3o=r(hot,"GPT2LMHeadModel"),hot.forEach(t),X3o=r(Vye," (OpenAI GPT-2 model)"),Vye.forEach(t),z3o=i(O),cu=n(O,"LI",{});var Xye=s(cu);oie=n(Xye,"STRONG",{});var pot=s(oie);W3o=r(pot,"ibert"),pot.forEach(t),Q3o=r(Xye," \u2014 "),bN=n(Xye,"A",{href:!0});var _ot=s(bN);H3o=r(_ot,"IBertForMaskedLM"),_ot.forEach(t),U3o=r(Xye," (I-BERT model)"),Xye.forEach(t),J3o=i(O),fu=n(O,"LI",{});var zye=s(fu);rie=n(zye,"STRONG",{});var uot=s(rie);Y3o=r(uot,"layoutlm"),uot.forEach(t),K3o=r(zye," \u2014 "),vN=n(zye,"A",{href:!0});var bot=s(vN);Z3o=r(bot,"LayoutLMForMaskedLM"),bot.forEach(t),eFo=r(zye," (LayoutLM model)"),zye.forEach(t),oFo=i(O),mu=n(O,"LI",{});var Wye=s(mu);tie=n(Wye,"STRONG",{});var vot=s(tie);rFo=r(vot,"longformer"),vot.forEach(t),tFo=r(Wye," \u2014 "),FN=n(Wye,"A",{href:!0});var Fot=s(FN);aFo=r(Fot,"LongformerForMaskedLM"),Fot.forEach(t),nFo=r(Wye," (Longformer model)"),Wye.forEach(t),sFo=i(O),gu=n(O,"LI",{});var Qye=s(gu);aie=n(Qye,"STRONG",{});var Tot=s(aie);lFo=r(Tot,"lxmert"),Tot.forEach(t),iFo=r(Qye," \u2014 "),TN=n(Qye,"A",{href:!0});var Mot=s(TN);dFo=r(Mot,"LxmertForPreTraining"),Mot.forEach(t),cFo=r(Qye," (LXMERT model)"),Qye.forEach(t),fFo=i(O),hu=n(O,"LI",{});var Hye=s(hu);nie=n(Hye,"STRONG",{});var Eot=s(nie);mFo=r(Eot,"megatron-bert"),Eot.forEach(t),gFo=r(Hye," \u2014 "),MN=n(Hye,"A",{href:!0});var Cot=s(MN);hFo=r(Cot,"MegatronBertForPreTraining"),Cot.forEach(t),pFo=r(Hye," (MegatronBert model)"),Hye.forEach(t),_Fo=i(O),pu=n(O,"LI",{});var Uye=s(pu);sie=n(Uye,"STRONG",{});var wot=s(sie);uFo=r(wot,"mobilebert"),wot.forEach(t),bFo=r(Uye," \u2014 "),EN=n(Uye,"A",{href:!0});var Aot=s(EN);vFo=r(Aot,"MobileBertForPreTraining"),Aot.forEach(t),FFo=r(Uye," (MobileBERT model)"),Uye.forEach(t),TFo=i(O),_u=n(O,"LI",{});var Jye=s(_u);lie=n(Jye,"STRONG",{});var yot=s(lie);MFo=r(yot,"mpnet"),yot.forEach(t),EFo=r(Jye," \u2014 "),CN=n(Jye,"A",{href:!0});var Lot=s(CN);CFo=r(Lot,"MPNetForMaskedLM"),Lot.forEach(t),wFo=r(Jye," (MPNet model)"),Jye.forEach(t),AFo=i(O),uu=n(O,"LI",{});var Yye=s(uu);iie=n(Yye,"STRONG",{});var xot=s(iie);yFo=r(xot,"openai-gpt"),xot.forEach(t),LFo=r(Yye," \u2014 "),wN=n(Yye,"A",{href:!0});var $ot=s(wN);xFo=r($ot,"OpenAIGPTLMHeadModel"),$ot.forEach(t),$Fo=r(Yye," (OpenAI GPT model)"),Yye.forEach(t),kFo=i(O),bu=n(O,"LI",{});var Kye=s(bu);die=n(Kye,"STRONG",{});var kot=s(die);SFo=r(kot,"retribert"),kot.forEach(t),RFo=r(Kye," \u2014 "),AN=n(Kye,"A",{href:!0});var Sot=s(AN);PFo=r(Sot,"RetriBertModel"),Sot.forEach(t),BFo=r(Kye," (RetriBERT model)"),Kye.forEach(t),IFo=i(O),vu=n(O,"LI",{});var Zye=s(vu);cie=n(Zye,"STRONG",{});var Rot=s(cie);qFo=r(Rot,"roberta"),Rot.forEach(t),NFo=r(Zye," \u2014 "),yN=n(Zye,"A",{href:!0});var Pot=s(yN);jFo=r(Pot,"RobertaForMaskedLM"),Pot.forEach(t),DFo=r(Zye," (RoBERTa model)"),Zye.forEach(t),GFo=i(O),Fu=n(O,"LI",{});var eLe=s(Fu);fie=n(eLe,"STRONG",{});var Bot=s(fie);OFo=r(Bot,"splinter"),Bot.forEach(t),VFo=r(eLe," \u2014 "),LN=n(eLe,"A",{href:!0});var Iot=s(LN);XFo=r(Iot,"SplinterForPreTraining"),Iot.forEach(t),zFo=r(eLe," (Splinter model)"),eLe.forEach(t),WFo=i(O),Tu=n(O,"LI",{});var oLe=s(Tu);mie=n(oLe,"STRONG",{});var qot=s(mie);QFo=r(qot,"squeezebert"),qot.forEach(t),HFo=r(oLe," \u2014 "),xN=n(oLe,"A",{href:!0});var Not=s(xN);UFo=r(Not,"SqueezeBertForMaskedLM"),Not.forEach(t),JFo=r(oLe," (SqueezeBERT model)"),oLe.forEach(t),YFo=i(O),Mu=n(O,"LI",{});var rLe=s(Mu);gie=n(rLe,"STRONG",{});var jot=s(gie);KFo=r(jot,"t5"),jot.forEach(t),ZFo=r(rLe," \u2014 "),$N=n(rLe,"A",{href:!0});var Dot=s($N);e6o=r(Dot,"T5ForConditionalGeneration"),Dot.forEach(t),o6o=r(rLe," (T5 model)"),rLe.forEach(t),r6o=i(O),Eu=n(O,"LI",{});var tLe=s(Eu);hie=n(tLe,"STRONG",{});var Got=s(hie);t6o=r(Got,"tapas"),Got.forEach(t),a6o=r(tLe," \u2014 "),kN=n(tLe,"A",{href:!0});var Oot=s(kN);n6o=r(Oot,"TapasForMaskedLM"),Oot.forEach(t),s6o=r(tLe," (TAPAS model)"),tLe.forEach(t),l6o=i(O),Cu=n(O,"LI",{});var aLe=s(Cu);pie=n(aLe,"STRONG",{});var Vot=s(pie);i6o=r(Vot,"transfo-xl"),Vot.forEach(t),d6o=r(aLe," \u2014 "),SN=n(aLe,"A",{href:!0});var Xot=s(SN);c6o=r(Xot,"TransfoXLLMHeadModel"),Xot.forEach(t),f6o=r(aLe," (Transformer-XL model)"),aLe.forEach(t),m6o=i(O),wu=n(O,"LI",{});var nLe=s(wu);_ie=n(nLe,"STRONG",{});var zot=s(_ie);g6o=r(zot,"unispeech"),zot.forEach(t),h6o=r(nLe," \u2014 "),RN=n(nLe,"A",{href:!0});var Wot=s(RN);p6o=r(Wot,"UniSpeechForPreTraining"),Wot.forEach(t),_6o=r(nLe," (UniSpeech model)"),nLe.forEach(t),u6o=i(O),Au=n(O,"LI",{});var sLe=s(Au);uie=n(sLe,"STRONG",{});var Qot=s(uie);b6o=r(Qot,"unispeech-sat"),Qot.forEach(t),v6o=r(sLe," \u2014 "),PN=n(sLe,"A",{href:!0});var Hot=s(PN);F6o=r(Hot,"UniSpeechSatForPreTraining"),Hot.forEach(t),T6o=r(sLe," (UniSpeechSat model)"),sLe.forEach(t),M6o=i(O),yu=n(O,"LI",{});var lLe=s(yu);bie=n(lLe,"STRONG",{});var Uot=s(bie);E6o=r(Uot,"visual_bert"),Uot.forEach(t),C6o=r(lLe," \u2014 "),BN=n(lLe,"A",{href:!0});var Jot=s(BN);w6o=r(Jot,"VisualBertForPreTraining"),Jot.forEach(t),A6o=r(lLe," (VisualBert model)"),lLe.forEach(t),y6o=i(O),Lu=n(O,"LI",{});var iLe=s(Lu);vie=n(iLe,"STRONG",{});var Yot=s(vie);L6o=r(Yot,"vit_mae"),Yot.forEach(t),x6o=r(iLe," \u2014 "),IN=n(iLe,"A",{href:!0});var Kot=s(IN);$6o=r(Kot,"ViTMAEForPreTraining"),Kot.forEach(t),k6o=r(iLe," (ViTMAE model)"),iLe.forEach(t),S6o=i(O),xu=n(O,"LI",{});var dLe=s(xu);Fie=n(dLe,"STRONG",{});var Zot=s(Fie);R6o=r(Zot,"wav2vec2"),Zot.forEach(t),P6o=r(dLe," \u2014 "),qN=n(dLe,"A",{href:!0});var ert=s(qN);B6o=r(ert,"Wav2Vec2ForPreTraining"),ert.forEach(t),I6o=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),q6o=i(O),$u=n(O,"LI",{});var cLe=s($u);Tie=n(cLe,"STRONG",{});var ort=s(Tie);N6o=r(ort,"wav2vec2-conformer"),ort.forEach(t),j6o=r(cLe," \u2014 "),NN=n(cLe,"A",{href:!0});var rrt=s(NN);D6o=r(rrt,"Wav2Vec2ConformerForPreTraining"),rrt.forEach(t),G6o=r(cLe," (Wav2Vec2-Conformer model)"),cLe.forEach(t),O6o=i(O),ku=n(O,"LI",{});var fLe=s(ku);Mie=n(fLe,"STRONG",{});var trt=s(Mie);V6o=r(trt,"xlm"),trt.forEach(t),X6o=r(fLe," \u2014 "),jN=n(fLe,"A",{href:!0});var art=s(jN);z6o=r(art,"XLMWithLMHeadModel"),art.forEach(t),W6o=r(fLe," (XLM model)"),fLe.forEach(t),Q6o=i(O),Su=n(O,"LI",{});var mLe=s(Su);Eie=n(mLe,"STRONG",{});var nrt=s(Eie);H6o=r(nrt,"xlm-roberta"),nrt.forEach(t),U6o=r(mLe," \u2014 "),DN=n(mLe,"A",{href:!0});var srt=s(DN);J6o=r(srt,"XLMRobertaForMaskedLM"),srt.forEach(t),Y6o=r(mLe," (XLM-RoBERTa model)"),mLe.forEach(t),K6o=i(O),Ru=n(O,"LI",{});var gLe=s(Ru);Cie=n(gLe,"STRONG",{});var lrt=s(Cie);Z6o=r(lrt,"xlm-roberta-xl"),lrt.forEach(t),eTo=r(gLe," \u2014 "),GN=n(gLe,"A",{href:!0});var irt=s(GN);oTo=r(irt,"XLMRobertaXLForMaskedLM"),irt.forEach(t),rTo=r(gLe," (XLM-RoBERTa-XL model)"),gLe.forEach(t),tTo=i(O),Pu=n(O,"LI",{});var hLe=s(Pu);wie=n(hLe,"STRONG",{});var drt=s(wie);aTo=r(drt,"xlnet"),drt.forEach(t),nTo=r(hLe," \u2014 "),ON=n(hLe,"A",{href:!0});var crt=s(ON);sTo=r(crt,"XLNetLMHeadModel"),crt.forEach(t),lTo=r(hLe," (XLNet model)"),hLe.forEach(t),O.forEach(t),iTo=i(ra),Bu=n(ra,"P",{});var pLe=s(Bu);dTo=r(pLe,"The model is set in evaluation mode by default using "),Aie=n(pLe,"CODE",{});var frt=s(Aie);cTo=r(frt,"model.eval()"),frt.forEach(t),fTo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yie=n(pLe,"CODE",{});var mrt=s(yie);mTo=r(mrt,"model.train()"),mrt.forEach(t),pLe.forEach(t),gTo=i(ra),T(Iu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),iqe=i(f),$i=n(f,"H2",{class:!0});var mje=s($i);qu=n(mje,"A",{id:!0,class:!0,href:!0});var grt=s(qu);Lie=n(grt,"SPAN",{});var hrt=s(Lie);T(Hy.$$.fragment,hrt),hrt.forEach(t),grt.forEach(t),hTo=i(mje),xie=n(mje,"SPAN",{});var prt=s(xie);pTo=r(prt,"AutoModelForCausalLM"),prt.forEach(t),mje.forEach(t),dqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(Uy.$$.fragment,Os),_To=i(Os),ki=n(Os,"P",{});var GK=s(ki);uTo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VN=n(GK,"A",{href:!0});var _rt=s(VN);bTo=r(_rt,"from_pretrained()"),_rt.forEach(t),vTo=r(GK," class method or the "),XN=n(GK,"A",{href:!0});var urt=s(XN);FTo=r(urt,"from_config()"),urt.forEach(t),TTo=r(GK,` class
method.`),GK.forEach(t),MTo=i(Os),Jy=n(Os,"P",{});var gje=s(Jy);ETo=r(gje,"This class cannot be instantiated directly using "),$ie=n(gje,"CODE",{});var brt=s($ie);CTo=r(brt,"__init__()"),brt.forEach(t),wTo=r(gje," (throws an error)."),gje.forEach(t),ATo=i(Os),nt=n(Os,"DIV",{class:!0});var F0=s(nt);T(Yy.$$.fragment,F0),yTo=i(F0),kie=n(F0,"P",{});var vrt=s(kie);LTo=r(vrt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vrt.forEach(t),xTo=i(F0),Si=n(F0,"P",{});var OK=s(Si);$To=r(OK,`Note:
Loading a model from its configuration file does `),Sie=n(OK,"STRONG",{});var Frt=s(Sie);kTo=r(Frt,"not"),Frt.forEach(t),STo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=n(OK,"A",{href:!0});var Trt=s(zN);RTo=r(Trt,"from_pretrained()"),Trt.forEach(t),PTo=r(OK," to load the model weights."),OK.forEach(t),BTo=i(F0),T(Nu.$$.fragment,F0),F0.forEach(t),ITo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Ky.$$.fragment,ta),qTo=i(ta),Rie=n(ta,"P",{});var Mrt=s(Rie);NTo=r(Mrt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mrt.forEach(t),jTo=i(ta),$a=n(ta,"P",{});var T0=s($a);DTo=r(T0,"The model class to instantiate is selected based on the "),Pie=n(T0,"CODE",{});var Ert=s(Pie);GTo=r(Ert,"model_type"),Ert.forEach(t),OTo=r(T0,` property of the config object (either
passed as an argument or loaded from `),Bie=n(T0,"CODE",{});var Crt=s(Bie);VTo=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),XTo=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(T0,"CODE",{});var wrt=s(Iie);zTo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),WTo=r(T0,":"),T0.forEach(t),QTo=i(ta),z=n(ta,"UL",{});var Q=s(z);ju=n(Q,"LI",{});var _Le=s(ju);qie=n(_Le,"STRONG",{});var Art=s(qie);HTo=r(Art,"bart"),Art.forEach(t),UTo=r(_Le," \u2014 "),WN=n(_Le,"A",{href:!0});var yrt=s(WN);JTo=r(yrt,"BartForCausalLM"),yrt.forEach(t),YTo=r(_Le," (BART model)"),_Le.forEach(t),KTo=i(Q),Du=n(Q,"LI",{});var uLe=s(Du);Nie=n(uLe,"STRONG",{});var Lrt=s(Nie);ZTo=r(Lrt,"bert"),Lrt.forEach(t),eMo=r(uLe," \u2014 "),QN=n(uLe,"A",{href:!0});var xrt=s(QN);oMo=r(xrt,"BertLMHeadModel"),xrt.forEach(t),rMo=r(uLe," (BERT model)"),uLe.forEach(t),tMo=i(Q),Gu=n(Q,"LI",{});var bLe=s(Gu);jie=n(bLe,"STRONG",{});var $rt=s(jie);aMo=r($rt,"bert-generation"),$rt.forEach(t),nMo=r(bLe," \u2014 "),HN=n(bLe,"A",{href:!0});var krt=s(HN);sMo=r(krt,"BertGenerationDecoder"),krt.forEach(t),lMo=r(bLe," (Bert Generation model)"),bLe.forEach(t),iMo=i(Q),Ou=n(Q,"LI",{});var vLe=s(Ou);Die=n(vLe,"STRONG",{});var Srt=s(Die);dMo=r(Srt,"big_bird"),Srt.forEach(t),cMo=r(vLe," \u2014 "),UN=n(vLe,"A",{href:!0});var Rrt=s(UN);fMo=r(Rrt,"BigBirdForCausalLM"),Rrt.forEach(t),mMo=r(vLe," (BigBird model)"),vLe.forEach(t),gMo=i(Q),Vu=n(Q,"LI",{});var FLe=s(Vu);Gie=n(FLe,"STRONG",{});var Prt=s(Gie);hMo=r(Prt,"bigbird_pegasus"),Prt.forEach(t),pMo=r(FLe," \u2014 "),JN=n(FLe,"A",{href:!0});var Brt=s(JN);_Mo=r(Brt,"BigBirdPegasusForCausalLM"),Brt.forEach(t),uMo=r(FLe," (BigBirdPegasus model)"),FLe.forEach(t),bMo=i(Q),Xu=n(Q,"LI",{});var TLe=s(Xu);Oie=n(TLe,"STRONG",{});var Irt=s(Oie);vMo=r(Irt,"blenderbot"),Irt.forEach(t),FMo=r(TLe," \u2014 "),YN=n(TLe,"A",{href:!0});var qrt=s(YN);TMo=r(qrt,"BlenderbotForCausalLM"),qrt.forEach(t),MMo=r(TLe," (Blenderbot model)"),TLe.forEach(t),EMo=i(Q),zu=n(Q,"LI",{});var MLe=s(zu);Vie=n(MLe,"STRONG",{});var Nrt=s(Vie);CMo=r(Nrt,"blenderbot-small"),Nrt.forEach(t),wMo=r(MLe," \u2014 "),KN=n(MLe,"A",{href:!0});var jrt=s(KN);AMo=r(jrt,"BlenderbotSmallForCausalLM"),jrt.forEach(t),yMo=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),LMo=i(Q),Wu=n(Q,"LI",{});var ELe=s(Wu);Xie=n(ELe,"STRONG",{});var Drt=s(Xie);xMo=r(Drt,"camembert"),Drt.forEach(t),$Mo=r(ELe," \u2014 "),ZN=n(ELe,"A",{href:!0});var Grt=s(ZN);kMo=r(Grt,"CamembertForCausalLM"),Grt.forEach(t),SMo=r(ELe," (CamemBERT model)"),ELe.forEach(t),RMo=i(Q),Qu=n(Q,"LI",{});var CLe=s(Qu);zie=n(CLe,"STRONG",{});var Ort=s(zie);PMo=r(Ort,"ctrl"),Ort.forEach(t),BMo=r(CLe," \u2014 "),ej=n(CLe,"A",{href:!0});var Vrt=s(ej);IMo=r(Vrt,"CTRLLMHeadModel"),Vrt.forEach(t),qMo=r(CLe," (CTRL model)"),CLe.forEach(t),NMo=i(Q),Hu=n(Q,"LI",{});var wLe=s(Hu);Wie=n(wLe,"STRONG",{});var Xrt=s(Wie);jMo=r(Xrt,"data2vec-text"),Xrt.forEach(t),DMo=r(wLe," \u2014 "),oj=n(wLe,"A",{href:!0});var zrt=s(oj);GMo=r(zrt,"Data2VecTextForCausalLM"),zrt.forEach(t),OMo=r(wLe," (Data2VecText model)"),wLe.forEach(t),VMo=i(Q),Uu=n(Q,"LI",{});var ALe=s(Uu);Qie=n(ALe,"STRONG",{});var Wrt=s(Qie);XMo=r(Wrt,"electra"),Wrt.forEach(t),zMo=r(ALe," \u2014 "),rj=n(ALe,"A",{href:!0});var Qrt=s(rj);WMo=r(Qrt,"ElectraForCausalLM"),Qrt.forEach(t),QMo=r(ALe," (ELECTRA model)"),ALe.forEach(t),HMo=i(Q),Ju=n(Q,"LI",{});var yLe=s(Ju);Hie=n(yLe,"STRONG",{});var Hrt=s(Hie);UMo=r(Hrt,"gpt2"),Hrt.forEach(t),JMo=r(yLe," \u2014 "),tj=n(yLe,"A",{href:!0});var Urt=s(tj);YMo=r(Urt,"GPT2LMHeadModel"),Urt.forEach(t),KMo=r(yLe," (OpenAI GPT-2 model)"),yLe.forEach(t),ZMo=i(Q),Yu=n(Q,"LI",{});var LLe=s(Yu);Uie=n(LLe,"STRONG",{});var Jrt=s(Uie);eEo=r(Jrt,"gpt_neo"),Jrt.forEach(t),oEo=r(LLe," \u2014 "),aj=n(LLe,"A",{href:!0});var Yrt=s(aj);rEo=r(Yrt,"GPTNeoForCausalLM"),Yrt.forEach(t),tEo=r(LLe," (GPT Neo model)"),LLe.forEach(t),aEo=i(Q),Ku=n(Q,"LI",{});var xLe=s(Ku);Jie=n(xLe,"STRONG",{});var Krt=s(Jie);nEo=r(Krt,"gptj"),Krt.forEach(t),sEo=r(xLe," \u2014 "),nj=n(xLe,"A",{href:!0});var Zrt=s(nj);lEo=r(Zrt,"GPTJForCausalLM"),Zrt.forEach(t),iEo=r(xLe," (GPT-J model)"),xLe.forEach(t),dEo=i(Q),Zu=n(Q,"LI",{});var $Le=s(Zu);Yie=n($Le,"STRONG",{});var ett=s(Yie);cEo=r(ett,"marian"),ett.forEach(t),fEo=r($Le," \u2014 "),sj=n($Le,"A",{href:!0});var ott=s(sj);mEo=r(ott,"MarianForCausalLM"),ott.forEach(t),gEo=r($Le," (Marian model)"),$Le.forEach(t),hEo=i(Q),e1=n(Q,"LI",{});var kLe=s(e1);Kie=n(kLe,"STRONG",{});var rtt=s(Kie);pEo=r(rtt,"mbart"),rtt.forEach(t),_Eo=r(kLe," \u2014 "),lj=n(kLe,"A",{href:!0});var ttt=s(lj);uEo=r(ttt,"MBartForCausalLM"),ttt.forEach(t),bEo=r(kLe," (mBART model)"),kLe.forEach(t),vEo=i(Q),o1=n(Q,"LI",{});var SLe=s(o1);Zie=n(SLe,"STRONG",{});var att=s(Zie);FEo=r(att,"megatron-bert"),att.forEach(t),TEo=r(SLe," \u2014 "),ij=n(SLe,"A",{href:!0});var ntt=s(ij);MEo=r(ntt,"MegatronBertForCausalLM"),ntt.forEach(t),EEo=r(SLe," (MegatronBert model)"),SLe.forEach(t),CEo=i(Q),r1=n(Q,"LI",{});var RLe=s(r1);ede=n(RLe,"STRONG",{});var stt=s(ede);wEo=r(stt,"openai-gpt"),stt.forEach(t),AEo=r(RLe," \u2014 "),dj=n(RLe,"A",{href:!0});var ltt=s(dj);yEo=r(ltt,"OpenAIGPTLMHeadModel"),ltt.forEach(t),LEo=r(RLe," (OpenAI GPT model)"),RLe.forEach(t),xEo=i(Q),t1=n(Q,"LI",{});var PLe=s(t1);ode=n(PLe,"STRONG",{});var itt=s(ode);$Eo=r(itt,"opt"),itt.forEach(t),kEo=r(PLe," \u2014 "),cj=n(PLe,"A",{href:!0});var dtt=s(cj);SEo=r(dtt,"OPTForCausalLM"),dtt.forEach(t),REo=r(PLe," (OPT model)"),PLe.forEach(t),PEo=i(Q),a1=n(Q,"LI",{});var BLe=s(a1);rde=n(BLe,"STRONG",{});var ctt=s(rde);BEo=r(ctt,"pegasus"),ctt.forEach(t),IEo=r(BLe," \u2014 "),fj=n(BLe,"A",{href:!0});var ftt=s(fj);qEo=r(ftt,"PegasusForCausalLM"),ftt.forEach(t),NEo=r(BLe," (Pegasus model)"),BLe.forEach(t),jEo=i(Q),n1=n(Q,"LI",{});var ILe=s(n1);tde=n(ILe,"STRONG",{});var mtt=s(tde);DEo=r(mtt,"plbart"),mtt.forEach(t),GEo=r(ILe," \u2014 "),mj=n(ILe,"A",{href:!0});var gtt=s(mj);OEo=r(gtt,"PLBartForCausalLM"),gtt.forEach(t),VEo=r(ILe," (PLBart model)"),ILe.forEach(t),XEo=i(Q),s1=n(Q,"LI",{});var qLe=s(s1);ade=n(qLe,"STRONG",{});var htt=s(ade);zEo=r(htt,"prophetnet"),htt.forEach(t),WEo=r(qLe," \u2014 "),gj=n(qLe,"A",{href:!0});var ptt=s(gj);QEo=r(ptt,"ProphetNetForCausalLM"),ptt.forEach(t),HEo=r(qLe," (ProphetNet model)"),qLe.forEach(t),UEo=i(Q),l1=n(Q,"LI",{});var NLe=s(l1);nde=n(NLe,"STRONG",{});var _tt=s(nde);JEo=r(_tt,"qdqbert"),_tt.forEach(t),YEo=r(NLe," \u2014 "),hj=n(NLe,"A",{href:!0});var utt=s(hj);KEo=r(utt,"QDQBertLMHeadModel"),utt.forEach(t),ZEo=r(NLe," (QDQBert model)"),NLe.forEach(t),eCo=i(Q),i1=n(Q,"LI",{});var jLe=s(i1);sde=n(jLe,"STRONG",{});var btt=s(sde);oCo=r(btt,"reformer"),btt.forEach(t),rCo=r(jLe," \u2014 "),pj=n(jLe,"A",{href:!0});var vtt=s(pj);tCo=r(vtt,"ReformerModelWithLMHead"),vtt.forEach(t),aCo=r(jLe," (Reformer model)"),jLe.forEach(t),nCo=i(Q),d1=n(Q,"LI",{});var DLe=s(d1);lde=n(DLe,"STRONG",{});var Ftt=s(lde);sCo=r(Ftt,"rembert"),Ftt.forEach(t),lCo=r(DLe," \u2014 "),_j=n(DLe,"A",{href:!0});var Ttt=s(_j);iCo=r(Ttt,"RemBertForCausalLM"),Ttt.forEach(t),dCo=r(DLe," (RemBERT model)"),DLe.forEach(t),cCo=i(Q),c1=n(Q,"LI",{});var GLe=s(c1);ide=n(GLe,"STRONG",{});var Mtt=s(ide);fCo=r(Mtt,"roberta"),Mtt.forEach(t),mCo=r(GLe," \u2014 "),uj=n(GLe,"A",{href:!0});var Ett=s(uj);gCo=r(Ett,"RobertaForCausalLM"),Ett.forEach(t),hCo=r(GLe," (RoBERTa model)"),GLe.forEach(t),pCo=i(Q),f1=n(Q,"LI",{});var OLe=s(f1);dde=n(OLe,"STRONG",{});var Ctt=s(dde);_Co=r(Ctt,"roformer"),Ctt.forEach(t),uCo=r(OLe," \u2014 "),bj=n(OLe,"A",{href:!0});var wtt=s(bj);bCo=r(wtt,"RoFormerForCausalLM"),wtt.forEach(t),vCo=r(OLe," (RoFormer model)"),OLe.forEach(t),FCo=i(Q),m1=n(Q,"LI",{});var VLe=s(m1);cde=n(VLe,"STRONG",{});var Att=s(cde);TCo=r(Att,"speech_to_text_2"),Att.forEach(t),MCo=r(VLe," \u2014 "),vj=n(VLe,"A",{href:!0});var ytt=s(vj);ECo=r(ytt,"Speech2Text2ForCausalLM"),ytt.forEach(t),CCo=r(VLe," (Speech2Text2 model)"),VLe.forEach(t),wCo=i(Q),g1=n(Q,"LI",{});var XLe=s(g1);fde=n(XLe,"STRONG",{});var Ltt=s(fde);ACo=r(Ltt,"transfo-xl"),Ltt.forEach(t),yCo=r(XLe," \u2014 "),Fj=n(XLe,"A",{href:!0});var xtt=s(Fj);LCo=r(xtt,"TransfoXLLMHeadModel"),xtt.forEach(t),xCo=r(XLe," (Transformer-XL model)"),XLe.forEach(t),$Co=i(Q),h1=n(Q,"LI",{});var zLe=s(h1);mde=n(zLe,"STRONG",{});var $tt=s(mde);kCo=r($tt,"trocr"),$tt.forEach(t),SCo=r(zLe," \u2014 "),Tj=n(zLe,"A",{href:!0});var ktt=s(Tj);RCo=r(ktt,"TrOCRForCausalLM"),ktt.forEach(t),PCo=r(zLe," (TrOCR model)"),zLe.forEach(t),BCo=i(Q),p1=n(Q,"LI",{});var WLe=s(p1);gde=n(WLe,"STRONG",{});var Stt=s(gde);ICo=r(Stt,"xglm"),Stt.forEach(t),qCo=r(WLe," \u2014 "),Mj=n(WLe,"A",{href:!0});var Rtt=s(Mj);NCo=r(Rtt,"XGLMForCausalLM"),Rtt.forEach(t),jCo=r(WLe," (XGLM model)"),WLe.forEach(t),DCo=i(Q),_1=n(Q,"LI",{});var QLe=s(_1);hde=n(QLe,"STRONG",{});var Ptt=s(hde);GCo=r(Ptt,"xlm"),Ptt.forEach(t),OCo=r(QLe," \u2014 "),Ej=n(QLe,"A",{href:!0});var Btt=s(Ej);VCo=r(Btt,"XLMWithLMHeadModel"),Btt.forEach(t),XCo=r(QLe," (XLM model)"),QLe.forEach(t),zCo=i(Q),u1=n(Q,"LI",{});var HLe=s(u1);pde=n(HLe,"STRONG",{});var Itt=s(pde);WCo=r(Itt,"xlm-prophetnet"),Itt.forEach(t),QCo=r(HLe," \u2014 "),Cj=n(HLe,"A",{href:!0});var qtt=s(Cj);HCo=r(qtt,"XLMProphetNetForCausalLM"),qtt.forEach(t),UCo=r(HLe," (XLMProphetNet model)"),HLe.forEach(t),JCo=i(Q),b1=n(Q,"LI",{});var ULe=s(b1);_de=n(ULe,"STRONG",{});var Ntt=s(_de);YCo=r(Ntt,"xlm-roberta"),Ntt.forEach(t),KCo=r(ULe," \u2014 "),wj=n(ULe,"A",{href:!0});var jtt=s(wj);ZCo=r(jtt,"XLMRobertaForCausalLM"),jtt.forEach(t),ewo=r(ULe," (XLM-RoBERTa model)"),ULe.forEach(t),owo=i(Q),v1=n(Q,"LI",{});var JLe=s(v1);ude=n(JLe,"STRONG",{});var Dtt=s(ude);rwo=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),two=r(JLe," \u2014 "),Aj=n(JLe,"A",{href:!0});var Gtt=s(Aj);awo=r(Gtt,"XLMRobertaXLForCausalLM"),Gtt.forEach(t),nwo=r(JLe," (XLM-RoBERTa-XL model)"),JLe.forEach(t),swo=i(Q),F1=n(Q,"LI",{});var YLe=s(F1);bde=n(YLe,"STRONG",{});var Ott=s(bde);lwo=r(Ott,"xlnet"),Ott.forEach(t),iwo=r(YLe," \u2014 "),yj=n(YLe,"A",{href:!0});var Vtt=s(yj);dwo=r(Vtt,"XLNetLMHeadModel"),Vtt.forEach(t),cwo=r(YLe," (XLNet model)"),YLe.forEach(t),Q.forEach(t),fwo=i(ta),T1=n(ta,"P",{});var KLe=s(T1);mwo=r(KLe,"The model is set in evaluation mode by default using "),vde=n(KLe,"CODE",{});var Xtt=s(vde);gwo=r(Xtt,"model.eval()"),Xtt.forEach(t),hwo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=n(KLe,"CODE",{});var ztt=s(Fde);pwo=r(ztt,"model.train()"),ztt.forEach(t),KLe.forEach(t),_wo=i(ta),T(M1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),cqe=i(f),Ri=n(f,"H2",{class:!0});var hje=s(Ri);E1=n(hje,"A",{id:!0,class:!0,href:!0});var Wtt=s(E1);Tde=n(Wtt,"SPAN",{});var Qtt=s(Tde);T(Zy.$$.fragment,Qtt),Qtt.forEach(t),Wtt.forEach(t),uwo=i(hje),Mde=n(hje,"SPAN",{});var Htt=s(Mde);bwo=r(Htt,"AutoModelForMaskedLM"),Htt.forEach(t),hje.forEach(t),fqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(eL.$$.fragment,Vs),vwo=i(Vs),Pi=n(Vs,"P",{});var VK=s(Pi);Fwo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Lj=n(VK,"A",{href:!0});var Utt=s(Lj);Two=r(Utt,"from_pretrained()"),Utt.forEach(t),Mwo=r(VK," class method or the "),xj=n(VK,"A",{href:!0});var Jtt=s(xj);Ewo=r(Jtt,"from_config()"),Jtt.forEach(t),Cwo=r(VK,` class
method.`),VK.forEach(t),wwo=i(Vs),oL=n(Vs,"P",{});var pje=s(oL);Awo=r(pje,"This class cannot be instantiated directly using "),Ede=n(pje,"CODE",{});var Ytt=s(Ede);ywo=r(Ytt,"__init__()"),Ytt.forEach(t),Lwo=r(pje," (throws an error)."),pje.forEach(t),xwo=i(Vs),st=n(Vs,"DIV",{class:!0});var M0=s(st);T(rL.$$.fragment,M0),$wo=i(M0),Cde=n(M0,"P",{});var Ktt=s(Cde);kwo=r(Ktt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ktt.forEach(t),Swo=i(M0),Bi=n(M0,"P",{});var XK=s(Bi);Rwo=r(XK,`Note:
Loading a model from its configuration file does `),wde=n(XK,"STRONG",{});var Ztt=s(wde);Pwo=r(Ztt,"not"),Ztt.forEach(t),Bwo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=n(XK,"A",{href:!0});var eat=s($j);Iwo=r(eat,"from_pretrained()"),eat.forEach(t),qwo=r(XK," to load the model weights."),XK.forEach(t),Nwo=i(M0),T(C1.$$.fragment,M0),M0.forEach(t),jwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(tL.$$.fragment,aa),Dwo=i(aa),Ade=n(aa,"P",{});var oat=s(Ade);Gwo=r(oat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oat.forEach(t),Owo=i(aa),ka=n(aa,"P",{});var E0=s(ka);Vwo=r(E0,"The model class to instantiate is selected based on the "),yde=n(E0,"CODE",{});var rat=s(yde);Xwo=r(rat,"model_type"),rat.forEach(t),zwo=r(E0,` property of the config object (either
passed as an argument or loaded from `),Lde=n(E0,"CODE",{});var tat=s(Lde);Wwo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),Qwo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(E0,"CODE",{});var aat=s(xde);Hwo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),Uwo=r(E0,":"),E0.forEach(t),Jwo=i(aa),W=n(aa,"UL",{});var H=s(W);w1=n(H,"LI",{});var ZLe=s(w1);$de=n(ZLe,"STRONG",{});var nat=s($de);Ywo=r(nat,"albert"),nat.forEach(t),Kwo=r(ZLe," \u2014 "),kj=n(ZLe,"A",{href:!0});var sat=s(kj);Zwo=r(sat,"AlbertForMaskedLM"),sat.forEach(t),e0o=r(ZLe," (ALBERT model)"),ZLe.forEach(t),o0o=i(H),A1=n(H,"LI",{});var e8e=s(A1);kde=n(e8e,"STRONG",{});var lat=s(kde);r0o=r(lat,"bart"),lat.forEach(t),t0o=r(e8e," \u2014 "),Sj=n(e8e,"A",{href:!0});var iat=s(Sj);a0o=r(iat,"BartForConditionalGeneration"),iat.forEach(t),n0o=r(e8e," (BART model)"),e8e.forEach(t),s0o=i(H),y1=n(H,"LI",{});var o8e=s(y1);Sde=n(o8e,"STRONG",{});var dat=s(Sde);l0o=r(dat,"bert"),dat.forEach(t),i0o=r(o8e," \u2014 "),Rj=n(o8e,"A",{href:!0});var cat=s(Rj);d0o=r(cat,"BertForMaskedLM"),cat.forEach(t),c0o=r(o8e," (BERT model)"),o8e.forEach(t),f0o=i(H),L1=n(H,"LI",{});var r8e=s(L1);Rde=n(r8e,"STRONG",{});var fat=s(Rde);m0o=r(fat,"big_bird"),fat.forEach(t),g0o=r(r8e," \u2014 "),Pj=n(r8e,"A",{href:!0});var mat=s(Pj);h0o=r(mat,"BigBirdForMaskedLM"),mat.forEach(t),p0o=r(r8e," (BigBird model)"),r8e.forEach(t),_0o=i(H),x1=n(H,"LI",{});var t8e=s(x1);Pde=n(t8e,"STRONG",{});var gat=s(Pde);u0o=r(gat,"camembert"),gat.forEach(t),b0o=r(t8e," \u2014 "),Bj=n(t8e,"A",{href:!0});var hat=s(Bj);v0o=r(hat,"CamembertForMaskedLM"),hat.forEach(t),F0o=r(t8e," (CamemBERT model)"),t8e.forEach(t),T0o=i(H),$1=n(H,"LI",{});var a8e=s($1);Bde=n(a8e,"STRONG",{});var pat=s(Bde);M0o=r(pat,"convbert"),pat.forEach(t),E0o=r(a8e," \u2014 "),Ij=n(a8e,"A",{href:!0});var _at=s(Ij);C0o=r(_at,"ConvBertForMaskedLM"),_at.forEach(t),w0o=r(a8e," (ConvBERT model)"),a8e.forEach(t),A0o=i(H),k1=n(H,"LI",{});var n8e=s(k1);Ide=n(n8e,"STRONG",{});var uat=s(Ide);y0o=r(uat,"data2vec-text"),uat.forEach(t),L0o=r(n8e," \u2014 "),qj=n(n8e,"A",{href:!0});var bat=s(qj);x0o=r(bat,"Data2VecTextForMaskedLM"),bat.forEach(t),$0o=r(n8e," (Data2VecText model)"),n8e.forEach(t),k0o=i(H),S1=n(H,"LI",{});var s8e=s(S1);qde=n(s8e,"STRONG",{});var vat=s(qde);S0o=r(vat,"deberta"),vat.forEach(t),R0o=r(s8e," \u2014 "),Nj=n(s8e,"A",{href:!0});var Fat=s(Nj);P0o=r(Fat,"DebertaForMaskedLM"),Fat.forEach(t),B0o=r(s8e," (DeBERTa model)"),s8e.forEach(t),I0o=i(H),R1=n(H,"LI",{});var l8e=s(R1);Nde=n(l8e,"STRONG",{});var Tat=s(Nde);q0o=r(Tat,"deberta-v2"),Tat.forEach(t),N0o=r(l8e," \u2014 "),jj=n(l8e,"A",{href:!0});var Mat=s(jj);j0o=r(Mat,"DebertaV2ForMaskedLM"),Mat.forEach(t),D0o=r(l8e," (DeBERTa-v2 model)"),l8e.forEach(t),G0o=i(H),P1=n(H,"LI",{});var i8e=s(P1);jde=n(i8e,"STRONG",{});var Eat=s(jde);O0o=r(Eat,"distilbert"),Eat.forEach(t),V0o=r(i8e," \u2014 "),Dj=n(i8e,"A",{href:!0});var Cat=s(Dj);X0o=r(Cat,"DistilBertForMaskedLM"),Cat.forEach(t),z0o=r(i8e," (DistilBERT model)"),i8e.forEach(t),W0o=i(H),B1=n(H,"LI",{});var d8e=s(B1);Dde=n(d8e,"STRONG",{});var wat=s(Dde);Q0o=r(wat,"electra"),wat.forEach(t),H0o=r(d8e," \u2014 "),Gj=n(d8e,"A",{href:!0});var Aat=s(Gj);U0o=r(Aat,"ElectraForMaskedLM"),Aat.forEach(t),J0o=r(d8e," (ELECTRA model)"),d8e.forEach(t),Y0o=i(H),I1=n(H,"LI",{});var c8e=s(I1);Gde=n(c8e,"STRONG",{});var yat=s(Gde);K0o=r(yat,"flaubert"),yat.forEach(t),Z0o=r(c8e," \u2014 "),Oj=n(c8e,"A",{href:!0});var Lat=s(Oj);eAo=r(Lat,"FlaubertWithLMHeadModel"),Lat.forEach(t),oAo=r(c8e," (FlauBERT model)"),c8e.forEach(t),rAo=i(H),q1=n(H,"LI",{});var f8e=s(q1);Ode=n(f8e,"STRONG",{});var xat=s(Ode);tAo=r(xat,"fnet"),xat.forEach(t),aAo=r(f8e," \u2014 "),Vj=n(f8e,"A",{href:!0});var $at=s(Vj);nAo=r($at,"FNetForMaskedLM"),$at.forEach(t),sAo=r(f8e," (FNet model)"),f8e.forEach(t),lAo=i(H),N1=n(H,"LI",{});var m8e=s(N1);Vde=n(m8e,"STRONG",{});var kat=s(Vde);iAo=r(kat,"funnel"),kat.forEach(t),dAo=r(m8e," \u2014 "),Xj=n(m8e,"A",{href:!0});var Sat=s(Xj);cAo=r(Sat,"FunnelForMaskedLM"),Sat.forEach(t),fAo=r(m8e," (Funnel Transformer model)"),m8e.forEach(t),mAo=i(H),j1=n(H,"LI",{});var g8e=s(j1);Xde=n(g8e,"STRONG",{});var Rat=s(Xde);gAo=r(Rat,"ibert"),Rat.forEach(t),hAo=r(g8e," \u2014 "),zj=n(g8e,"A",{href:!0});var Pat=s(zj);pAo=r(Pat,"IBertForMaskedLM"),Pat.forEach(t),_Ao=r(g8e," (I-BERT model)"),g8e.forEach(t),uAo=i(H),D1=n(H,"LI",{});var h8e=s(D1);zde=n(h8e,"STRONG",{});var Bat=s(zde);bAo=r(Bat,"layoutlm"),Bat.forEach(t),vAo=r(h8e," \u2014 "),Wj=n(h8e,"A",{href:!0});var Iat=s(Wj);FAo=r(Iat,"LayoutLMForMaskedLM"),Iat.forEach(t),TAo=r(h8e," (LayoutLM model)"),h8e.forEach(t),MAo=i(H),G1=n(H,"LI",{});var p8e=s(G1);Wde=n(p8e,"STRONG",{});var qat=s(Wde);EAo=r(qat,"longformer"),qat.forEach(t),CAo=r(p8e," \u2014 "),Qj=n(p8e,"A",{href:!0});var Nat=s(Qj);wAo=r(Nat,"LongformerForMaskedLM"),Nat.forEach(t),AAo=r(p8e," (Longformer model)"),p8e.forEach(t),yAo=i(H),O1=n(H,"LI",{});var _8e=s(O1);Qde=n(_8e,"STRONG",{});var jat=s(Qde);LAo=r(jat,"mbart"),jat.forEach(t),xAo=r(_8e," \u2014 "),Hj=n(_8e,"A",{href:!0});var Dat=s(Hj);$Ao=r(Dat,"MBartForConditionalGeneration"),Dat.forEach(t),kAo=r(_8e," (mBART model)"),_8e.forEach(t),SAo=i(H),V1=n(H,"LI",{});var u8e=s(V1);Hde=n(u8e,"STRONG",{});var Gat=s(Hde);RAo=r(Gat,"megatron-bert"),Gat.forEach(t),PAo=r(u8e," \u2014 "),Uj=n(u8e,"A",{href:!0});var Oat=s(Uj);BAo=r(Oat,"MegatronBertForMaskedLM"),Oat.forEach(t),IAo=r(u8e," (MegatronBert model)"),u8e.forEach(t),qAo=i(H),X1=n(H,"LI",{});var b8e=s(X1);Ude=n(b8e,"STRONG",{});var Vat=s(Ude);NAo=r(Vat,"mobilebert"),Vat.forEach(t),jAo=r(b8e," \u2014 "),Jj=n(b8e,"A",{href:!0});var Xat=s(Jj);DAo=r(Xat,"MobileBertForMaskedLM"),Xat.forEach(t),GAo=r(b8e," (MobileBERT model)"),b8e.forEach(t),OAo=i(H),z1=n(H,"LI",{});var v8e=s(z1);Jde=n(v8e,"STRONG",{});var zat=s(Jde);VAo=r(zat,"mpnet"),zat.forEach(t),XAo=r(v8e," \u2014 "),Yj=n(v8e,"A",{href:!0});var Wat=s(Yj);zAo=r(Wat,"MPNetForMaskedLM"),Wat.forEach(t),WAo=r(v8e," (MPNet model)"),v8e.forEach(t),QAo=i(H),W1=n(H,"LI",{});var F8e=s(W1);Yde=n(F8e,"STRONG",{});var Qat=s(Yde);HAo=r(Qat,"nystromformer"),Qat.forEach(t),UAo=r(F8e," \u2014 "),Kj=n(F8e,"A",{href:!0});var Hat=s(Kj);JAo=r(Hat,"NystromformerForMaskedLM"),Hat.forEach(t),YAo=r(F8e," (Nystromformer model)"),F8e.forEach(t),KAo=i(H),Q1=n(H,"LI",{});var T8e=s(Q1);Kde=n(T8e,"STRONG",{});var Uat=s(Kde);ZAo=r(Uat,"perceiver"),Uat.forEach(t),eyo=r(T8e," \u2014 "),Zj=n(T8e,"A",{href:!0});var Jat=s(Zj);oyo=r(Jat,"PerceiverForMaskedLM"),Jat.forEach(t),ryo=r(T8e," (Perceiver model)"),T8e.forEach(t),tyo=i(H),H1=n(H,"LI",{});var M8e=s(H1);Zde=n(M8e,"STRONG",{});var Yat=s(Zde);ayo=r(Yat,"qdqbert"),Yat.forEach(t),nyo=r(M8e," \u2014 "),eD=n(M8e,"A",{href:!0});var Kat=s(eD);syo=r(Kat,"QDQBertForMaskedLM"),Kat.forEach(t),lyo=r(M8e," (QDQBert model)"),M8e.forEach(t),iyo=i(H),U1=n(H,"LI",{});var E8e=s(U1);ece=n(E8e,"STRONG",{});var Zat=s(ece);dyo=r(Zat,"reformer"),Zat.forEach(t),cyo=r(E8e," \u2014 "),oD=n(E8e,"A",{href:!0});var ent=s(oD);fyo=r(ent,"ReformerForMaskedLM"),ent.forEach(t),myo=r(E8e," (Reformer model)"),E8e.forEach(t),gyo=i(H),J1=n(H,"LI",{});var C8e=s(J1);oce=n(C8e,"STRONG",{});var ont=s(oce);hyo=r(ont,"rembert"),ont.forEach(t),pyo=r(C8e," \u2014 "),rD=n(C8e,"A",{href:!0});var rnt=s(rD);_yo=r(rnt,"RemBertForMaskedLM"),rnt.forEach(t),uyo=r(C8e," (RemBERT model)"),C8e.forEach(t),byo=i(H),Y1=n(H,"LI",{});var w8e=s(Y1);rce=n(w8e,"STRONG",{});var tnt=s(rce);vyo=r(tnt,"roberta"),tnt.forEach(t),Fyo=r(w8e," \u2014 "),tD=n(w8e,"A",{href:!0});var ant=s(tD);Tyo=r(ant,"RobertaForMaskedLM"),ant.forEach(t),Myo=r(w8e," (RoBERTa model)"),w8e.forEach(t),Eyo=i(H),K1=n(H,"LI",{});var A8e=s(K1);tce=n(A8e,"STRONG",{});var nnt=s(tce);Cyo=r(nnt,"roformer"),nnt.forEach(t),wyo=r(A8e," \u2014 "),aD=n(A8e,"A",{href:!0});var snt=s(aD);Ayo=r(snt,"RoFormerForMaskedLM"),snt.forEach(t),yyo=r(A8e," (RoFormer model)"),A8e.forEach(t),Lyo=i(H),Z1=n(H,"LI",{});var y8e=s(Z1);ace=n(y8e,"STRONG",{});var lnt=s(ace);xyo=r(lnt,"squeezebert"),lnt.forEach(t),$yo=r(y8e," \u2014 "),nD=n(y8e,"A",{href:!0});var int=s(nD);kyo=r(int,"SqueezeBertForMaskedLM"),int.forEach(t),Syo=r(y8e," (SqueezeBERT model)"),y8e.forEach(t),Ryo=i(H),eb=n(H,"LI",{});var L8e=s(eb);nce=n(L8e,"STRONG",{});var dnt=s(nce);Pyo=r(dnt,"tapas"),dnt.forEach(t),Byo=r(L8e," \u2014 "),sD=n(L8e,"A",{href:!0});var cnt=s(sD);Iyo=r(cnt,"TapasForMaskedLM"),cnt.forEach(t),qyo=r(L8e," (TAPAS model)"),L8e.forEach(t),Nyo=i(H),ob=n(H,"LI",{});var x8e=s(ob);sce=n(x8e,"STRONG",{});var fnt=s(sce);jyo=r(fnt,"wav2vec2"),fnt.forEach(t),Dyo=r(x8e," \u2014 "),lce=n(x8e,"CODE",{});var mnt=s(lce);Gyo=r(mnt,"Wav2Vec2ForMaskedLM"),mnt.forEach(t),Oyo=r(x8e," (Wav2Vec2 model)"),x8e.forEach(t),Vyo=i(H),rb=n(H,"LI",{});var $8e=s(rb);ice=n($8e,"STRONG",{});var gnt=s(ice);Xyo=r(gnt,"xlm"),gnt.forEach(t),zyo=r($8e," \u2014 "),lD=n($8e,"A",{href:!0});var hnt=s(lD);Wyo=r(hnt,"XLMWithLMHeadModel"),hnt.forEach(t),Qyo=r($8e," (XLM model)"),$8e.forEach(t),Hyo=i(H),tb=n(H,"LI",{});var k8e=s(tb);dce=n(k8e,"STRONG",{});var pnt=s(dce);Uyo=r(pnt,"xlm-roberta"),pnt.forEach(t),Jyo=r(k8e," \u2014 "),iD=n(k8e,"A",{href:!0});var _nt=s(iD);Yyo=r(_nt,"XLMRobertaForMaskedLM"),_nt.forEach(t),Kyo=r(k8e," (XLM-RoBERTa model)"),k8e.forEach(t),Zyo=i(H),ab=n(H,"LI",{});var S8e=s(ab);cce=n(S8e,"STRONG",{});var unt=s(cce);eLo=r(unt,"xlm-roberta-xl"),unt.forEach(t),oLo=r(S8e," \u2014 "),dD=n(S8e,"A",{href:!0});var bnt=s(dD);rLo=r(bnt,"XLMRobertaXLForMaskedLM"),bnt.forEach(t),tLo=r(S8e," (XLM-RoBERTa-XL model)"),S8e.forEach(t),aLo=i(H),nb=n(H,"LI",{});var R8e=s(nb);fce=n(R8e,"STRONG",{});var vnt=s(fce);nLo=r(vnt,"yoso"),vnt.forEach(t),sLo=r(R8e," \u2014 "),cD=n(R8e,"A",{href:!0});var Fnt=s(cD);lLo=r(Fnt,"YosoForMaskedLM"),Fnt.forEach(t),iLo=r(R8e," (YOSO model)"),R8e.forEach(t),H.forEach(t),dLo=i(aa),sb=n(aa,"P",{});var P8e=s(sb);cLo=r(P8e,"The model is set in evaluation mode by default using "),mce=n(P8e,"CODE",{});var Tnt=s(mce);fLo=r(Tnt,"model.eval()"),Tnt.forEach(t),mLo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gce=n(P8e,"CODE",{});var Mnt=s(gce);gLo=r(Mnt,"model.train()"),Mnt.forEach(t),P8e.forEach(t),hLo=i(aa),T(lb.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),mqe=i(f),Ii=n(f,"H2",{class:!0});var _je=s(Ii);ib=n(_je,"A",{id:!0,class:!0,href:!0});var Ent=s(ib);hce=n(Ent,"SPAN",{});var Cnt=s(hce);T(aL.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),pLo=i(_je),pce=n(_je,"SPAN",{});var wnt=s(pce);_Lo=r(wnt,"AutoModelForSeq2SeqLM"),wnt.forEach(t),_je.forEach(t),gqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(nL.$$.fragment,Xs),uLo=i(Xs),qi=n(Xs,"P",{});var zK=s(qi);bLo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fD=n(zK,"A",{href:!0});var Ant=s(fD);vLo=r(Ant,"from_pretrained()"),Ant.forEach(t),FLo=r(zK," class method or the "),mD=n(zK,"A",{href:!0});var ynt=s(mD);TLo=r(ynt,"from_config()"),ynt.forEach(t),MLo=r(zK,` class
method.`),zK.forEach(t),ELo=i(Xs),sL=n(Xs,"P",{});var uje=s(sL);CLo=r(uje,"This class cannot be instantiated directly using "),_ce=n(uje,"CODE",{});var Lnt=s(_ce);wLo=r(Lnt,"__init__()"),Lnt.forEach(t),ALo=r(uje," (throws an error)."),uje.forEach(t),yLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var C0=s(lt);T(lL.$$.fragment,C0),LLo=i(C0),uce=n(C0,"P",{});var xnt=s(uce);xLo=r(xnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xnt.forEach(t),$Lo=i(C0),Ni=n(C0,"P",{});var WK=s(Ni);kLo=r(WK,`Note:
Loading a model from its configuration file does `),bce=n(WK,"STRONG",{});var $nt=s(bce);SLo=r($nt,"not"),$nt.forEach(t),RLo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n(WK,"A",{href:!0});var knt=s(gD);PLo=r(knt,"from_pretrained()"),knt.forEach(t),BLo=r(WK," to load the model weights."),WK.forEach(t),ILo=i(C0),T(db.$$.fragment,C0),C0.forEach(t),qLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(iL.$$.fragment,na),NLo=i(na),vce=n(na,"P",{});var Snt=s(vce);jLo=r(Snt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Snt.forEach(t),DLo=i(na),Sa=n(na,"P",{});var w0=s(Sa);GLo=r(w0,"The model class to instantiate is selected based on the "),Fce=n(w0,"CODE",{});var Rnt=s(Fce);OLo=r(Rnt,"model_type"),Rnt.forEach(t),VLo=r(w0,` property of the config object (either
passed as an argument or loaded from `),Tce=n(w0,"CODE",{});var Pnt=s(Tce);XLo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),zLo=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(w0,"CODE",{});var Bnt=s(Mce);WLo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),QLo=r(w0,":"),w0.forEach(t),HLo=i(na),_e=n(na,"UL",{});var ve=s(_e);cb=n(ve,"LI",{});var B8e=s(cb);Ece=n(B8e,"STRONG",{});var Int=s(Ece);ULo=r(Int,"bart"),Int.forEach(t),JLo=r(B8e," \u2014 "),hD=n(B8e,"A",{href:!0});var qnt=s(hD);YLo=r(qnt,"BartForConditionalGeneration"),qnt.forEach(t),KLo=r(B8e," (BART model)"),B8e.forEach(t),ZLo=i(ve),fb=n(ve,"LI",{});var I8e=s(fb);Cce=n(I8e,"STRONG",{});var Nnt=s(Cce);e8o=r(Nnt,"bigbird_pegasus"),Nnt.forEach(t),o8o=r(I8e," \u2014 "),pD=n(I8e,"A",{href:!0});var jnt=s(pD);r8o=r(jnt,"BigBirdPegasusForConditionalGeneration"),jnt.forEach(t),t8o=r(I8e," (BigBirdPegasus model)"),I8e.forEach(t),a8o=i(ve),mb=n(ve,"LI",{});var q8e=s(mb);wce=n(q8e,"STRONG",{});var Dnt=s(wce);n8o=r(Dnt,"blenderbot"),Dnt.forEach(t),s8o=r(q8e," \u2014 "),_D=n(q8e,"A",{href:!0});var Gnt=s(_D);l8o=r(Gnt,"BlenderbotForConditionalGeneration"),Gnt.forEach(t),i8o=r(q8e," (Blenderbot model)"),q8e.forEach(t),d8o=i(ve),gb=n(ve,"LI",{});var N8e=s(gb);Ace=n(N8e,"STRONG",{});var Ont=s(Ace);c8o=r(Ont,"blenderbot-small"),Ont.forEach(t),f8o=r(N8e," \u2014 "),uD=n(N8e,"A",{href:!0});var Vnt=s(uD);m8o=r(Vnt,"BlenderbotSmallForConditionalGeneration"),Vnt.forEach(t),g8o=r(N8e," (BlenderbotSmall model)"),N8e.forEach(t),h8o=i(ve),hb=n(ve,"LI",{});var j8e=s(hb);yce=n(j8e,"STRONG",{});var Xnt=s(yce);p8o=r(Xnt,"encoder-decoder"),Xnt.forEach(t),_8o=r(j8e," \u2014 "),bD=n(j8e,"A",{href:!0});var znt=s(bD);u8o=r(znt,"EncoderDecoderModel"),znt.forEach(t),b8o=r(j8e," (Encoder decoder model)"),j8e.forEach(t),v8o=i(ve),pb=n(ve,"LI",{});var D8e=s(pb);Lce=n(D8e,"STRONG",{});var Wnt=s(Lce);F8o=r(Wnt,"fsmt"),Wnt.forEach(t),T8o=r(D8e," \u2014 "),vD=n(D8e,"A",{href:!0});var Qnt=s(vD);M8o=r(Qnt,"FSMTForConditionalGeneration"),Qnt.forEach(t),E8o=r(D8e," (FairSeq Machine-Translation model)"),D8e.forEach(t),C8o=i(ve),_b=n(ve,"LI",{});var G8e=s(_b);xce=n(G8e,"STRONG",{});var Hnt=s(xce);w8o=r(Hnt,"led"),Hnt.forEach(t),A8o=r(G8e," \u2014 "),FD=n(G8e,"A",{href:!0});var Unt=s(FD);y8o=r(Unt,"LEDForConditionalGeneration"),Unt.forEach(t),L8o=r(G8e," (LED model)"),G8e.forEach(t),x8o=i(ve),ub=n(ve,"LI",{});var O8e=s(ub);$ce=n(O8e,"STRONG",{});var Jnt=s($ce);$8o=r(Jnt,"m2m_100"),Jnt.forEach(t),k8o=r(O8e," \u2014 "),TD=n(O8e,"A",{href:!0});var Ynt=s(TD);S8o=r(Ynt,"M2M100ForConditionalGeneration"),Ynt.forEach(t),R8o=r(O8e," (M2M100 model)"),O8e.forEach(t),P8o=i(ve),bb=n(ve,"LI",{});var V8e=s(bb);kce=n(V8e,"STRONG",{});var Knt=s(kce);B8o=r(Knt,"marian"),Knt.forEach(t),I8o=r(V8e," \u2014 "),MD=n(V8e,"A",{href:!0});var Znt=s(MD);q8o=r(Znt,"MarianMTModel"),Znt.forEach(t),N8o=r(V8e," (Marian model)"),V8e.forEach(t),j8o=i(ve),vb=n(ve,"LI",{});var X8e=s(vb);Sce=n(X8e,"STRONG",{});var est=s(Sce);D8o=r(est,"mbart"),est.forEach(t),G8o=r(X8e," \u2014 "),ED=n(X8e,"A",{href:!0});var ost=s(ED);O8o=r(ost,"MBartForConditionalGeneration"),ost.forEach(t),V8o=r(X8e," (mBART model)"),X8e.forEach(t),X8o=i(ve),Fb=n(ve,"LI",{});var z8e=s(Fb);Rce=n(z8e,"STRONG",{});var rst=s(Rce);z8o=r(rst,"mt5"),rst.forEach(t),W8o=r(z8e," \u2014 "),CD=n(z8e,"A",{href:!0});var tst=s(CD);Q8o=r(tst,"MT5ForConditionalGeneration"),tst.forEach(t),H8o=r(z8e," (mT5 model)"),z8e.forEach(t),U8o=i(ve),Tb=n(ve,"LI",{});var W8e=s(Tb);Pce=n(W8e,"STRONG",{});var ast=s(Pce);J8o=r(ast,"pegasus"),ast.forEach(t),Y8o=r(W8e," \u2014 "),wD=n(W8e,"A",{href:!0});var nst=s(wD);K8o=r(nst,"PegasusForConditionalGeneration"),nst.forEach(t),Z8o=r(W8e," (Pegasus model)"),W8e.forEach(t),e7o=i(ve),Mb=n(ve,"LI",{});var Q8e=s(Mb);Bce=n(Q8e,"STRONG",{});var sst=s(Bce);o7o=r(sst,"plbart"),sst.forEach(t),r7o=r(Q8e," \u2014 "),AD=n(Q8e,"A",{href:!0});var lst=s(AD);t7o=r(lst,"PLBartForConditionalGeneration"),lst.forEach(t),a7o=r(Q8e," (PLBart model)"),Q8e.forEach(t),n7o=i(ve),Eb=n(ve,"LI",{});var H8e=s(Eb);Ice=n(H8e,"STRONG",{});var ist=s(Ice);s7o=r(ist,"prophetnet"),ist.forEach(t),l7o=r(H8e," \u2014 "),yD=n(H8e,"A",{href:!0});var dst=s(yD);i7o=r(dst,"ProphetNetForConditionalGeneration"),dst.forEach(t),d7o=r(H8e," (ProphetNet model)"),H8e.forEach(t),c7o=i(ve),Cb=n(ve,"LI",{});var U8e=s(Cb);qce=n(U8e,"STRONG",{});var cst=s(qce);f7o=r(cst,"t5"),cst.forEach(t),m7o=r(U8e," \u2014 "),LD=n(U8e,"A",{href:!0});var fst=s(LD);g7o=r(fst,"T5ForConditionalGeneration"),fst.forEach(t),h7o=r(U8e," (T5 model)"),U8e.forEach(t),p7o=i(ve),wb=n(ve,"LI",{});var J8e=s(wb);Nce=n(J8e,"STRONG",{});var mst=s(Nce);_7o=r(mst,"xlm-prophetnet"),mst.forEach(t),u7o=r(J8e," \u2014 "),xD=n(J8e,"A",{href:!0});var gst=s(xD);b7o=r(gst,"XLMProphetNetForConditionalGeneration"),gst.forEach(t),v7o=r(J8e," (XLMProphetNet model)"),J8e.forEach(t),ve.forEach(t),F7o=i(na),Ab=n(na,"P",{});var Y8e=s(Ab);T7o=r(Y8e,"The model is set in evaluation mode by default using "),jce=n(Y8e,"CODE",{});var hst=s(jce);M7o=r(hst,"model.eval()"),hst.forEach(t),E7o=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dce=n(Y8e,"CODE",{});var pst=s(Dce);C7o=r(pst,"model.train()"),pst.forEach(t),Y8e.forEach(t),w7o=i(na),T(yb.$$.fragment,na),na.forEach(t),Xs.forEach(t),hqe=i(f),ji=n(f,"H2",{class:!0});var bje=s(ji);Lb=n(bje,"A",{id:!0,class:!0,href:!0});var _st=s(Lb);Gce=n(_st,"SPAN",{});var ust=s(Gce);T(dL.$$.fragment,ust),ust.forEach(t),_st.forEach(t),A7o=i(bje),Oce=n(bje,"SPAN",{});var bst=s(Oce);y7o=r(bst,"AutoModelForSequenceClassification"),bst.forEach(t),bje.forEach(t),pqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(cL.$$.fragment,zs),L7o=i(zs),Di=n(zs,"P",{});var QK=s(Di);x7o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$D=n(QK,"A",{href:!0});var vst=s($D);$7o=r(vst,"from_pretrained()"),vst.forEach(t),k7o=r(QK," class method or the "),kD=n(QK,"A",{href:!0});var Fst=s(kD);S7o=r(Fst,"from_config()"),Fst.forEach(t),R7o=r(QK,` class
method.`),QK.forEach(t),P7o=i(zs),fL=n(zs,"P",{});var vje=s(fL);B7o=r(vje,"This class cannot be instantiated directly using "),Vce=n(vje,"CODE",{});var Tst=s(Vce);I7o=r(Tst,"__init__()"),Tst.forEach(t),q7o=r(vje," (throws an error)."),vje.forEach(t),N7o=i(zs),it=n(zs,"DIV",{class:!0});var A0=s(it);T(mL.$$.fragment,A0),j7o=i(A0),Xce=n(A0,"P",{});var Mst=s(Xce);D7o=r(Mst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mst.forEach(t),G7o=i(A0),Gi=n(A0,"P",{});var HK=s(Gi);O7o=r(HK,`Note:
Loading a model from its configuration file does `),zce=n(HK,"STRONG",{});var Est=s(zce);V7o=r(Est,"not"),Est.forEach(t),X7o=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SD=n(HK,"A",{href:!0});var Cst=s(SD);z7o=r(Cst,"from_pretrained()"),Cst.forEach(t),W7o=r(HK," to load the model weights."),HK.forEach(t),Q7o=i(A0),T(xb.$$.fragment,A0),A0.forEach(t),H7o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(gL.$$.fragment,sa),U7o=i(sa),Wce=n(sa,"P",{});var wst=s(Wce);J7o=r(wst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wst.forEach(t),Y7o=i(sa),Ra=n(sa,"P",{});var y0=s(Ra);K7o=r(y0,"The model class to instantiate is selected based on the "),Qce=n(y0,"CODE",{});var Ast=s(Qce);Z7o=r(Ast,"model_type"),Ast.forEach(t),exo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Hce=n(y0,"CODE",{});var yst=s(Hce);oxo=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),rxo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(y0,"CODE",{});var Lst=s(Uce);txo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),axo=r(y0,":"),y0.forEach(t),nxo=i(sa),N=n(sa,"UL",{});var D=s(N);$b=n(D,"LI",{});var K8e=s($b);Jce=n(K8e,"STRONG",{});var xst=s(Jce);sxo=r(xst,"albert"),xst.forEach(t),lxo=r(K8e," \u2014 "),RD=n(K8e,"A",{href:!0});var $st=s(RD);ixo=r($st,"AlbertForSequenceClassification"),$st.forEach(t),dxo=r(K8e," (ALBERT model)"),K8e.forEach(t),cxo=i(D),kb=n(D,"LI",{});var Z8e=s(kb);Yce=n(Z8e,"STRONG",{});var kst=s(Yce);fxo=r(kst,"bart"),kst.forEach(t),mxo=r(Z8e," \u2014 "),PD=n(Z8e,"A",{href:!0});var Sst=s(PD);gxo=r(Sst,"BartForSequenceClassification"),Sst.forEach(t),hxo=r(Z8e," (BART model)"),Z8e.forEach(t),pxo=i(D),Sb=n(D,"LI",{});var e7e=s(Sb);Kce=n(e7e,"STRONG",{});var Rst=s(Kce);_xo=r(Rst,"bert"),Rst.forEach(t),uxo=r(e7e," \u2014 "),BD=n(e7e,"A",{href:!0});var Pst=s(BD);bxo=r(Pst,"BertForSequenceClassification"),Pst.forEach(t),vxo=r(e7e," (BERT model)"),e7e.forEach(t),Fxo=i(D),Rb=n(D,"LI",{});var o7e=s(Rb);Zce=n(o7e,"STRONG",{});var Bst=s(Zce);Txo=r(Bst,"big_bird"),Bst.forEach(t),Mxo=r(o7e," \u2014 "),ID=n(o7e,"A",{href:!0});var Ist=s(ID);Exo=r(Ist,"BigBirdForSequenceClassification"),Ist.forEach(t),Cxo=r(o7e," (BigBird model)"),o7e.forEach(t),wxo=i(D),Pb=n(D,"LI",{});var r7e=s(Pb);efe=n(r7e,"STRONG",{});var qst=s(efe);Axo=r(qst,"bigbird_pegasus"),qst.forEach(t),yxo=r(r7e," \u2014 "),qD=n(r7e,"A",{href:!0});var Nst=s(qD);Lxo=r(Nst,"BigBirdPegasusForSequenceClassification"),Nst.forEach(t),xxo=r(r7e," (BigBirdPegasus model)"),r7e.forEach(t),$xo=i(D),Bb=n(D,"LI",{});var t7e=s(Bb);ofe=n(t7e,"STRONG",{});var jst=s(ofe);kxo=r(jst,"camembert"),jst.forEach(t),Sxo=r(t7e," \u2014 "),ND=n(t7e,"A",{href:!0});var Dst=s(ND);Rxo=r(Dst,"CamembertForSequenceClassification"),Dst.forEach(t),Pxo=r(t7e," (CamemBERT model)"),t7e.forEach(t),Bxo=i(D),Ib=n(D,"LI",{});var a7e=s(Ib);rfe=n(a7e,"STRONG",{});var Gst=s(rfe);Ixo=r(Gst,"canine"),Gst.forEach(t),qxo=r(a7e," \u2014 "),jD=n(a7e,"A",{href:!0});var Ost=s(jD);Nxo=r(Ost,"CanineForSequenceClassification"),Ost.forEach(t),jxo=r(a7e," (Canine model)"),a7e.forEach(t),Dxo=i(D),qb=n(D,"LI",{});var n7e=s(qb);tfe=n(n7e,"STRONG",{});var Vst=s(tfe);Gxo=r(Vst,"convbert"),Vst.forEach(t),Oxo=r(n7e," \u2014 "),DD=n(n7e,"A",{href:!0});var Xst=s(DD);Vxo=r(Xst,"ConvBertForSequenceClassification"),Xst.forEach(t),Xxo=r(n7e," (ConvBERT model)"),n7e.forEach(t),zxo=i(D),Nb=n(D,"LI",{});var s7e=s(Nb);afe=n(s7e,"STRONG",{});var zst=s(afe);Wxo=r(zst,"ctrl"),zst.forEach(t),Qxo=r(s7e," \u2014 "),GD=n(s7e,"A",{href:!0});var Wst=s(GD);Hxo=r(Wst,"CTRLForSequenceClassification"),Wst.forEach(t),Uxo=r(s7e," (CTRL model)"),s7e.forEach(t),Jxo=i(D),jb=n(D,"LI",{});var l7e=s(jb);nfe=n(l7e,"STRONG",{});var Qst=s(nfe);Yxo=r(Qst,"data2vec-text"),Qst.forEach(t),Kxo=r(l7e," \u2014 "),OD=n(l7e,"A",{href:!0});var Hst=s(OD);Zxo=r(Hst,"Data2VecTextForSequenceClassification"),Hst.forEach(t),e9o=r(l7e," (Data2VecText model)"),l7e.forEach(t),o9o=i(D),Db=n(D,"LI",{});var i7e=s(Db);sfe=n(i7e,"STRONG",{});var Ust=s(sfe);r9o=r(Ust,"deberta"),Ust.forEach(t),t9o=r(i7e," \u2014 "),VD=n(i7e,"A",{href:!0});var Jst=s(VD);a9o=r(Jst,"DebertaForSequenceClassification"),Jst.forEach(t),n9o=r(i7e," (DeBERTa model)"),i7e.forEach(t),s9o=i(D),Gb=n(D,"LI",{});var d7e=s(Gb);lfe=n(d7e,"STRONG",{});var Yst=s(lfe);l9o=r(Yst,"deberta-v2"),Yst.forEach(t),i9o=r(d7e," \u2014 "),XD=n(d7e,"A",{href:!0});var Kst=s(XD);d9o=r(Kst,"DebertaV2ForSequenceClassification"),Kst.forEach(t),c9o=r(d7e," (DeBERTa-v2 model)"),d7e.forEach(t),f9o=i(D),Ob=n(D,"LI",{});var c7e=s(Ob);ife=n(c7e,"STRONG",{});var Zst=s(ife);m9o=r(Zst,"distilbert"),Zst.forEach(t),g9o=r(c7e," \u2014 "),zD=n(c7e,"A",{href:!0});var elt=s(zD);h9o=r(elt,"DistilBertForSequenceClassification"),elt.forEach(t),p9o=r(c7e," (DistilBERT model)"),c7e.forEach(t),_9o=i(D),Vb=n(D,"LI",{});var f7e=s(Vb);dfe=n(f7e,"STRONG",{});var olt=s(dfe);u9o=r(olt,"electra"),olt.forEach(t),b9o=r(f7e," \u2014 "),WD=n(f7e,"A",{href:!0});var rlt=s(WD);v9o=r(rlt,"ElectraForSequenceClassification"),rlt.forEach(t),F9o=r(f7e," (ELECTRA model)"),f7e.forEach(t),T9o=i(D),Xb=n(D,"LI",{});var m7e=s(Xb);cfe=n(m7e,"STRONG",{});var tlt=s(cfe);M9o=r(tlt,"flaubert"),tlt.forEach(t),E9o=r(m7e," \u2014 "),QD=n(m7e,"A",{href:!0});var alt=s(QD);C9o=r(alt,"FlaubertForSequenceClassification"),alt.forEach(t),w9o=r(m7e," (FlauBERT model)"),m7e.forEach(t),A9o=i(D),zb=n(D,"LI",{});var g7e=s(zb);ffe=n(g7e,"STRONG",{});var nlt=s(ffe);y9o=r(nlt,"fnet"),nlt.forEach(t),L9o=r(g7e," \u2014 "),HD=n(g7e,"A",{href:!0});var slt=s(HD);x9o=r(slt,"FNetForSequenceClassification"),slt.forEach(t),$9o=r(g7e," (FNet model)"),g7e.forEach(t),k9o=i(D),Wb=n(D,"LI",{});var h7e=s(Wb);mfe=n(h7e,"STRONG",{});var llt=s(mfe);S9o=r(llt,"funnel"),llt.forEach(t),R9o=r(h7e," \u2014 "),UD=n(h7e,"A",{href:!0});var ilt=s(UD);P9o=r(ilt,"FunnelForSequenceClassification"),ilt.forEach(t),B9o=r(h7e," (Funnel Transformer model)"),h7e.forEach(t),I9o=i(D),Qb=n(D,"LI",{});var p7e=s(Qb);gfe=n(p7e,"STRONG",{});var dlt=s(gfe);q9o=r(dlt,"gpt2"),dlt.forEach(t),N9o=r(p7e," \u2014 "),JD=n(p7e,"A",{href:!0});var clt=s(JD);j9o=r(clt,"GPT2ForSequenceClassification"),clt.forEach(t),D9o=r(p7e," (OpenAI GPT-2 model)"),p7e.forEach(t),G9o=i(D),Hb=n(D,"LI",{});var _7e=s(Hb);hfe=n(_7e,"STRONG",{});var flt=s(hfe);O9o=r(flt,"gpt_neo"),flt.forEach(t),V9o=r(_7e," \u2014 "),YD=n(_7e,"A",{href:!0});var mlt=s(YD);X9o=r(mlt,"GPTNeoForSequenceClassification"),mlt.forEach(t),z9o=r(_7e," (GPT Neo model)"),_7e.forEach(t),W9o=i(D),Ub=n(D,"LI",{});var u7e=s(Ub);pfe=n(u7e,"STRONG",{});var glt=s(pfe);Q9o=r(glt,"gptj"),glt.forEach(t),H9o=r(u7e," \u2014 "),KD=n(u7e,"A",{href:!0});var hlt=s(KD);U9o=r(hlt,"GPTJForSequenceClassification"),hlt.forEach(t),J9o=r(u7e," (GPT-J model)"),u7e.forEach(t),Y9o=i(D),Jb=n(D,"LI",{});var b7e=s(Jb);_fe=n(b7e,"STRONG",{});var plt=s(_fe);K9o=r(plt,"ibert"),plt.forEach(t),Z9o=r(b7e," \u2014 "),ZD=n(b7e,"A",{href:!0});var _lt=s(ZD);e$o=r(_lt,"IBertForSequenceClassification"),_lt.forEach(t),o$o=r(b7e," (I-BERT model)"),b7e.forEach(t),r$o=i(D),Yb=n(D,"LI",{});var v7e=s(Yb);ufe=n(v7e,"STRONG",{});var ult=s(ufe);t$o=r(ult,"layoutlm"),ult.forEach(t),a$o=r(v7e," \u2014 "),eG=n(v7e,"A",{href:!0});var blt=s(eG);n$o=r(blt,"LayoutLMForSequenceClassification"),blt.forEach(t),s$o=r(v7e," (LayoutLM model)"),v7e.forEach(t),l$o=i(D),Kb=n(D,"LI",{});var F7e=s(Kb);bfe=n(F7e,"STRONG",{});var vlt=s(bfe);i$o=r(vlt,"layoutlmv2"),vlt.forEach(t),d$o=r(F7e," \u2014 "),oG=n(F7e,"A",{href:!0});var Flt=s(oG);c$o=r(Flt,"LayoutLMv2ForSequenceClassification"),Flt.forEach(t),f$o=r(F7e," (LayoutLMv2 model)"),F7e.forEach(t),m$o=i(D),Zb=n(D,"LI",{});var T7e=s(Zb);vfe=n(T7e,"STRONG",{});var Tlt=s(vfe);g$o=r(Tlt,"led"),Tlt.forEach(t),h$o=r(T7e," \u2014 "),rG=n(T7e,"A",{href:!0});var Mlt=s(rG);p$o=r(Mlt,"LEDForSequenceClassification"),Mlt.forEach(t),_$o=r(T7e," (LED model)"),T7e.forEach(t),u$o=i(D),e2=n(D,"LI",{});var M7e=s(e2);Ffe=n(M7e,"STRONG",{});var Elt=s(Ffe);b$o=r(Elt,"longformer"),Elt.forEach(t),v$o=r(M7e," \u2014 "),tG=n(M7e,"A",{href:!0});var Clt=s(tG);F$o=r(Clt,"LongformerForSequenceClassification"),Clt.forEach(t),T$o=r(M7e," (Longformer model)"),M7e.forEach(t),M$o=i(D),o2=n(D,"LI",{});var E7e=s(o2);Tfe=n(E7e,"STRONG",{});var wlt=s(Tfe);E$o=r(wlt,"mbart"),wlt.forEach(t),C$o=r(E7e," \u2014 "),aG=n(E7e,"A",{href:!0});var Alt=s(aG);w$o=r(Alt,"MBartForSequenceClassification"),Alt.forEach(t),A$o=r(E7e," (mBART model)"),E7e.forEach(t),y$o=i(D),r2=n(D,"LI",{});var C7e=s(r2);Mfe=n(C7e,"STRONG",{});var ylt=s(Mfe);L$o=r(ylt,"megatron-bert"),ylt.forEach(t),x$o=r(C7e," \u2014 "),nG=n(C7e,"A",{href:!0});var Llt=s(nG);$$o=r(Llt,"MegatronBertForSequenceClassification"),Llt.forEach(t),k$o=r(C7e," (MegatronBert model)"),C7e.forEach(t),S$o=i(D),t2=n(D,"LI",{});var w7e=s(t2);Efe=n(w7e,"STRONG",{});var xlt=s(Efe);R$o=r(xlt,"mobilebert"),xlt.forEach(t),P$o=r(w7e," \u2014 "),sG=n(w7e,"A",{href:!0});var $lt=s(sG);B$o=r($lt,"MobileBertForSequenceClassification"),$lt.forEach(t),I$o=r(w7e," (MobileBERT model)"),w7e.forEach(t),q$o=i(D),a2=n(D,"LI",{});var A7e=s(a2);Cfe=n(A7e,"STRONG",{});var klt=s(Cfe);N$o=r(klt,"mpnet"),klt.forEach(t),j$o=r(A7e," \u2014 "),lG=n(A7e,"A",{href:!0});var Slt=s(lG);D$o=r(Slt,"MPNetForSequenceClassification"),Slt.forEach(t),G$o=r(A7e," (MPNet model)"),A7e.forEach(t),O$o=i(D),n2=n(D,"LI",{});var y7e=s(n2);wfe=n(y7e,"STRONG",{});var Rlt=s(wfe);V$o=r(Rlt,"nystromformer"),Rlt.forEach(t),X$o=r(y7e," \u2014 "),iG=n(y7e,"A",{href:!0});var Plt=s(iG);z$o=r(Plt,"NystromformerForSequenceClassification"),Plt.forEach(t),W$o=r(y7e," (Nystromformer model)"),y7e.forEach(t),Q$o=i(D),s2=n(D,"LI",{});var L7e=s(s2);Afe=n(L7e,"STRONG",{});var Blt=s(Afe);H$o=r(Blt,"openai-gpt"),Blt.forEach(t),U$o=r(L7e," \u2014 "),dG=n(L7e,"A",{href:!0});var Ilt=s(dG);J$o=r(Ilt,"OpenAIGPTForSequenceClassification"),Ilt.forEach(t),Y$o=r(L7e," (OpenAI GPT model)"),L7e.forEach(t),K$o=i(D),l2=n(D,"LI",{});var x7e=s(l2);yfe=n(x7e,"STRONG",{});var qlt=s(yfe);Z$o=r(qlt,"perceiver"),qlt.forEach(t),eko=r(x7e," \u2014 "),cG=n(x7e,"A",{href:!0});var Nlt=s(cG);oko=r(Nlt,"PerceiverForSequenceClassification"),Nlt.forEach(t),rko=r(x7e," (Perceiver model)"),x7e.forEach(t),tko=i(D),i2=n(D,"LI",{});var $7e=s(i2);Lfe=n($7e,"STRONG",{});var jlt=s(Lfe);ako=r(jlt,"plbart"),jlt.forEach(t),nko=r($7e," \u2014 "),fG=n($7e,"A",{href:!0});var Dlt=s(fG);sko=r(Dlt,"PLBartForSequenceClassification"),Dlt.forEach(t),lko=r($7e," (PLBart model)"),$7e.forEach(t),iko=i(D),d2=n(D,"LI",{});var k7e=s(d2);xfe=n(k7e,"STRONG",{});var Glt=s(xfe);dko=r(Glt,"qdqbert"),Glt.forEach(t),cko=r(k7e," \u2014 "),mG=n(k7e,"A",{href:!0});var Olt=s(mG);fko=r(Olt,"QDQBertForSequenceClassification"),Olt.forEach(t),mko=r(k7e," (QDQBert model)"),k7e.forEach(t),gko=i(D),c2=n(D,"LI",{});var S7e=s(c2);$fe=n(S7e,"STRONG",{});var Vlt=s($fe);hko=r(Vlt,"reformer"),Vlt.forEach(t),pko=r(S7e," \u2014 "),gG=n(S7e,"A",{href:!0});var Xlt=s(gG);_ko=r(Xlt,"ReformerForSequenceClassification"),Xlt.forEach(t),uko=r(S7e," (Reformer model)"),S7e.forEach(t),bko=i(D),f2=n(D,"LI",{});var R7e=s(f2);kfe=n(R7e,"STRONG",{});var zlt=s(kfe);vko=r(zlt,"rembert"),zlt.forEach(t),Fko=r(R7e," \u2014 "),hG=n(R7e,"A",{href:!0});var Wlt=s(hG);Tko=r(Wlt,"RemBertForSequenceClassification"),Wlt.forEach(t),Mko=r(R7e," (RemBERT model)"),R7e.forEach(t),Eko=i(D),m2=n(D,"LI",{});var P7e=s(m2);Sfe=n(P7e,"STRONG",{});var Qlt=s(Sfe);Cko=r(Qlt,"roberta"),Qlt.forEach(t),wko=r(P7e," \u2014 "),pG=n(P7e,"A",{href:!0});var Hlt=s(pG);Ako=r(Hlt,"RobertaForSequenceClassification"),Hlt.forEach(t),yko=r(P7e," (RoBERTa model)"),P7e.forEach(t),Lko=i(D),g2=n(D,"LI",{});var B7e=s(g2);Rfe=n(B7e,"STRONG",{});var Ult=s(Rfe);xko=r(Ult,"roformer"),Ult.forEach(t),$ko=r(B7e," \u2014 "),_G=n(B7e,"A",{href:!0});var Jlt=s(_G);kko=r(Jlt,"RoFormerForSequenceClassification"),Jlt.forEach(t),Sko=r(B7e," (RoFormer model)"),B7e.forEach(t),Rko=i(D),h2=n(D,"LI",{});var I7e=s(h2);Pfe=n(I7e,"STRONG",{});var Ylt=s(Pfe);Pko=r(Ylt,"squeezebert"),Ylt.forEach(t),Bko=r(I7e," \u2014 "),uG=n(I7e,"A",{href:!0});var Klt=s(uG);Iko=r(Klt,"SqueezeBertForSequenceClassification"),Klt.forEach(t),qko=r(I7e," (SqueezeBERT model)"),I7e.forEach(t),Nko=i(D),p2=n(D,"LI",{});var q7e=s(p2);Bfe=n(q7e,"STRONG",{});var Zlt=s(Bfe);jko=r(Zlt,"tapas"),Zlt.forEach(t),Dko=r(q7e," \u2014 "),bG=n(q7e,"A",{href:!0});var eit=s(bG);Gko=r(eit,"TapasForSequenceClassification"),eit.forEach(t),Oko=r(q7e," (TAPAS model)"),q7e.forEach(t),Vko=i(D),_2=n(D,"LI",{});var N7e=s(_2);Ife=n(N7e,"STRONG",{});var oit=s(Ife);Xko=r(oit,"transfo-xl"),oit.forEach(t),zko=r(N7e," \u2014 "),vG=n(N7e,"A",{href:!0});var rit=s(vG);Wko=r(rit,"TransfoXLForSequenceClassification"),rit.forEach(t),Qko=r(N7e," (Transformer-XL model)"),N7e.forEach(t),Hko=i(D),u2=n(D,"LI",{});var j7e=s(u2);qfe=n(j7e,"STRONG",{});var tit=s(qfe);Uko=r(tit,"xlm"),tit.forEach(t),Jko=r(j7e," \u2014 "),FG=n(j7e,"A",{href:!0});var ait=s(FG);Yko=r(ait,"XLMForSequenceClassification"),ait.forEach(t),Kko=r(j7e," (XLM model)"),j7e.forEach(t),Zko=i(D),b2=n(D,"LI",{});var D7e=s(b2);Nfe=n(D7e,"STRONG",{});var nit=s(Nfe);eSo=r(nit,"xlm-roberta"),nit.forEach(t),oSo=r(D7e," \u2014 "),TG=n(D7e,"A",{href:!0});var sit=s(TG);rSo=r(sit,"XLMRobertaForSequenceClassification"),sit.forEach(t),tSo=r(D7e," (XLM-RoBERTa model)"),D7e.forEach(t),aSo=i(D),v2=n(D,"LI",{});var G7e=s(v2);jfe=n(G7e,"STRONG",{});var lit=s(jfe);nSo=r(lit,"xlm-roberta-xl"),lit.forEach(t),sSo=r(G7e," \u2014 "),MG=n(G7e,"A",{href:!0});var iit=s(MG);lSo=r(iit,"XLMRobertaXLForSequenceClassification"),iit.forEach(t),iSo=r(G7e," (XLM-RoBERTa-XL model)"),G7e.forEach(t),dSo=i(D),F2=n(D,"LI",{});var O7e=s(F2);Dfe=n(O7e,"STRONG",{});var dit=s(Dfe);cSo=r(dit,"xlnet"),dit.forEach(t),fSo=r(O7e," \u2014 "),EG=n(O7e,"A",{href:!0});var cit=s(EG);mSo=r(cit,"XLNetForSequenceClassification"),cit.forEach(t),gSo=r(O7e," (XLNet model)"),O7e.forEach(t),hSo=i(D),T2=n(D,"LI",{});var V7e=s(T2);Gfe=n(V7e,"STRONG",{});var fit=s(Gfe);pSo=r(fit,"yoso"),fit.forEach(t),_So=r(V7e," \u2014 "),CG=n(V7e,"A",{href:!0});var mit=s(CG);uSo=r(mit,"YosoForSequenceClassification"),mit.forEach(t),bSo=r(V7e," (YOSO model)"),V7e.forEach(t),D.forEach(t),vSo=i(sa),M2=n(sa,"P",{});var X7e=s(M2);FSo=r(X7e,"The model is set in evaluation mode by default using "),Ofe=n(X7e,"CODE",{});var git=s(Ofe);TSo=r(git,"model.eval()"),git.forEach(t),MSo=r(X7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=n(X7e,"CODE",{});var hit=s(Vfe);ESo=r(hit,"model.train()"),hit.forEach(t),X7e.forEach(t),CSo=i(sa),T(E2.$$.fragment,sa),sa.forEach(t),zs.forEach(t),_qe=i(f),Oi=n(f,"H2",{class:!0});var Fje=s(Oi);C2=n(Fje,"A",{id:!0,class:!0,href:!0});var pit=s(C2);Xfe=n(pit,"SPAN",{});var _it=s(Xfe);T(hL.$$.fragment,_it),_it.forEach(t),pit.forEach(t),wSo=i(Fje),zfe=n(Fje,"SPAN",{});var uit=s(zfe);ASo=r(uit,"AutoModelForMultipleChoice"),uit.forEach(t),Fje.forEach(t),uqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(pL.$$.fragment,Ws),ySo=i(Ws),Vi=n(Ws,"P",{});var UK=s(Vi);LSo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wG=n(UK,"A",{href:!0});var bit=s(wG);xSo=r(bit,"from_pretrained()"),bit.forEach(t),$So=r(UK," class method or the "),AG=n(UK,"A",{href:!0});var vit=s(AG);kSo=r(vit,"from_config()"),vit.forEach(t),SSo=r(UK,` class
method.`),UK.forEach(t),RSo=i(Ws),_L=n(Ws,"P",{});var Tje=s(_L);PSo=r(Tje,"This class cannot be instantiated directly using "),Wfe=n(Tje,"CODE",{});var Fit=s(Wfe);BSo=r(Fit,"__init__()"),Fit.forEach(t),ISo=r(Tje," (throws an error)."),Tje.forEach(t),qSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var L0=s(dt);T(uL.$$.fragment,L0),NSo=i(L0),Qfe=n(L0,"P",{});var Tit=s(Qfe);jSo=r(Tit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tit.forEach(t),DSo=i(L0),Xi=n(L0,"P",{});var JK=s(Xi);GSo=r(JK,`Note:
Loading a model from its configuration file does `),Hfe=n(JK,"STRONG",{});var Mit=s(Hfe);OSo=r(Mit,"not"),Mit.forEach(t),VSo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(JK,"A",{href:!0});var Eit=s(yG);XSo=r(Eit,"from_pretrained()"),Eit.forEach(t),zSo=r(JK," to load the model weights."),JK.forEach(t),WSo=i(L0),T(w2.$$.fragment,L0),L0.forEach(t),QSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(bL.$$.fragment,la),HSo=i(la),Ufe=n(la,"P",{});var Cit=s(Ufe);USo=r(Cit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cit.forEach(t),JSo=i(la),Pa=n(la,"P",{});var x0=s(Pa);YSo=r(x0,"The model class to instantiate is selected based on the "),Jfe=n(x0,"CODE",{});var wit=s(Jfe);KSo=r(wit,"model_type"),wit.forEach(t),ZSo=r(x0,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(x0,"CODE",{});var Ait=s(Yfe);eRo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),oRo=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(x0,"CODE",{});var yit=s(Kfe);rRo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),tRo=r(x0,":"),x0.forEach(t),aRo=i(la),Y=n(la,"UL",{});var K=s(Y);A2=n(K,"LI",{});var z7e=s(A2);Zfe=n(z7e,"STRONG",{});var Lit=s(Zfe);nRo=r(Lit,"albert"),Lit.forEach(t),sRo=r(z7e," \u2014 "),LG=n(z7e,"A",{href:!0});var xit=s(LG);lRo=r(xit,"AlbertForMultipleChoice"),xit.forEach(t),iRo=r(z7e," (ALBERT model)"),z7e.forEach(t),dRo=i(K),y2=n(K,"LI",{});var W7e=s(y2);eme=n(W7e,"STRONG",{});var $it=s(eme);cRo=r($it,"bert"),$it.forEach(t),fRo=r(W7e," \u2014 "),xG=n(W7e,"A",{href:!0});var kit=s(xG);mRo=r(kit,"BertForMultipleChoice"),kit.forEach(t),gRo=r(W7e," (BERT model)"),W7e.forEach(t),hRo=i(K),L2=n(K,"LI",{});var Q7e=s(L2);ome=n(Q7e,"STRONG",{});var Sit=s(ome);pRo=r(Sit,"big_bird"),Sit.forEach(t),_Ro=r(Q7e," \u2014 "),$G=n(Q7e,"A",{href:!0});var Rit=s($G);uRo=r(Rit,"BigBirdForMultipleChoice"),Rit.forEach(t),bRo=r(Q7e," (BigBird model)"),Q7e.forEach(t),vRo=i(K),x2=n(K,"LI",{});var H7e=s(x2);rme=n(H7e,"STRONG",{});var Pit=s(rme);FRo=r(Pit,"camembert"),Pit.forEach(t),TRo=r(H7e," \u2014 "),kG=n(H7e,"A",{href:!0});var Bit=s(kG);MRo=r(Bit,"CamembertForMultipleChoice"),Bit.forEach(t),ERo=r(H7e," (CamemBERT model)"),H7e.forEach(t),CRo=i(K),$2=n(K,"LI",{});var U7e=s($2);tme=n(U7e,"STRONG",{});var Iit=s(tme);wRo=r(Iit,"canine"),Iit.forEach(t),ARo=r(U7e," \u2014 "),SG=n(U7e,"A",{href:!0});var qit=s(SG);yRo=r(qit,"CanineForMultipleChoice"),qit.forEach(t),LRo=r(U7e," (Canine model)"),U7e.forEach(t),xRo=i(K),k2=n(K,"LI",{});var J7e=s(k2);ame=n(J7e,"STRONG",{});var Nit=s(ame);$Ro=r(Nit,"convbert"),Nit.forEach(t),kRo=r(J7e," \u2014 "),RG=n(J7e,"A",{href:!0});var jit=s(RG);SRo=r(jit,"ConvBertForMultipleChoice"),jit.forEach(t),RRo=r(J7e," (ConvBERT model)"),J7e.forEach(t),PRo=i(K),S2=n(K,"LI",{});var Y7e=s(S2);nme=n(Y7e,"STRONG",{});var Dit=s(nme);BRo=r(Dit,"data2vec-text"),Dit.forEach(t),IRo=r(Y7e," \u2014 "),PG=n(Y7e,"A",{href:!0});var Git=s(PG);qRo=r(Git,"Data2VecTextForMultipleChoice"),Git.forEach(t),NRo=r(Y7e," (Data2VecText model)"),Y7e.forEach(t),jRo=i(K),R2=n(K,"LI",{});var K7e=s(R2);sme=n(K7e,"STRONG",{});var Oit=s(sme);DRo=r(Oit,"deberta-v2"),Oit.forEach(t),GRo=r(K7e," \u2014 "),BG=n(K7e,"A",{href:!0});var Vit=s(BG);ORo=r(Vit,"DebertaV2ForMultipleChoice"),Vit.forEach(t),VRo=r(K7e," (DeBERTa-v2 model)"),K7e.forEach(t),XRo=i(K),P2=n(K,"LI",{});var Z7e=s(P2);lme=n(Z7e,"STRONG",{});var Xit=s(lme);zRo=r(Xit,"distilbert"),Xit.forEach(t),WRo=r(Z7e," \u2014 "),IG=n(Z7e,"A",{href:!0});var zit=s(IG);QRo=r(zit,"DistilBertForMultipleChoice"),zit.forEach(t),HRo=r(Z7e," (DistilBERT model)"),Z7e.forEach(t),URo=i(K),B2=n(K,"LI",{});var exe=s(B2);ime=n(exe,"STRONG",{});var Wit=s(ime);JRo=r(Wit,"electra"),Wit.forEach(t),YRo=r(exe," \u2014 "),qG=n(exe,"A",{href:!0});var Qit=s(qG);KRo=r(Qit,"ElectraForMultipleChoice"),Qit.forEach(t),ZRo=r(exe," (ELECTRA model)"),exe.forEach(t),ePo=i(K),I2=n(K,"LI",{});var oxe=s(I2);dme=n(oxe,"STRONG",{});var Hit=s(dme);oPo=r(Hit,"flaubert"),Hit.forEach(t),rPo=r(oxe," \u2014 "),NG=n(oxe,"A",{href:!0});var Uit=s(NG);tPo=r(Uit,"FlaubertForMultipleChoice"),Uit.forEach(t),aPo=r(oxe," (FlauBERT model)"),oxe.forEach(t),nPo=i(K),q2=n(K,"LI",{});var rxe=s(q2);cme=n(rxe,"STRONG",{});var Jit=s(cme);sPo=r(Jit,"fnet"),Jit.forEach(t),lPo=r(rxe," \u2014 "),jG=n(rxe,"A",{href:!0});var Yit=s(jG);iPo=r(Yit,"FNetForMultipleChoice"),Yit.forEach(t),dPo=r(rxe," (FNet model)"),rxe.forEach(t),cPo=i(K),N2=n(K,"LI",{});var txe=s(N2);fme=n(txe,"STRONG",{});var Kit=s(fme);fPo=r(Kit,"funnel"),Kit.forEach(t),mPo=r(txe," \u2014 "),DG=n(txe,"A",{href:!0});var Zit=s(DG);gPo=r(Zit,"FunnelForMultipleChoice"),Zit.forEach(t),hPo=r(txe," (Funnel Transformer model)"),txe.forEach(t),pPo=i(K),j2=n(K,"LI",{});var axe=s(j2);mme=n(axe,"STRONG",{});var edt=s(mme);_Po=r(edt,"ibert"),edt.forEach(t),uPo=r(axe," \u2014 "),GG=n(axe,"A",{href:!0});var odt=s(GG);bPo=r(odt,"IBertForMultipleChoice"),odt.forEach(t),vPo=r(axe," (I-BERT model)"),axe.forEach(t),FPo=i(K),D2=n(K,"LI",{});var nxe=s(D2);gme=n(nxe,"STRONG",{});var rdt=s(gme);TPo=r(rdt,"longformer"),rdt.forEach(t),MPo=r(nxe," \u2014 "),OG=n(nxe,"A",{href:!0});var tdt=s(OG);EPo=r(tdt,"LongformerForMultipleChoice"),tdt.forEach(t),CPo=r(nxe," (Longformer model)"),nxe.forEach(t),wPo=i(K),G2=n(K,"LI",{});var sxe=s(G2);hme=n(sxe,"STRONG",{});var adt=s(hme);APo=r(adt,"megatron-bert"),adt.forEach(t),yPo=r(sxe," \u2014 "),VG=n(sxe,"A",{href:!0});var ndt=s(VG);LPo=r(ndt,"MegatronBertForMultipleChoice"),ndt.forEach(t),xPo=r(sxe," (MegatronBert model)"),sxe.forEach(t),$Po=i(K),O2=n(K,"LI",{});var lxe=s(O2);pme=n(lxe,"STRONG",{});var sdt=s(pme);kPo=r(sdt,"mobilebert"),sdt.forEach(t),SPo=r(lxe," \u2014 "),XG=n(lxe,"A",{href:!0});var ldt=s(XG);RPo=r(ldt,"MobileBertForMultipleChoice"),ldt.forEach(t),PPo=r(lxe," (MobileBERT model)"),lxe.forEach(t),BPo=i(K),V2=n(K,"LI",{});var ixe=s(V2);_me=n(ixe,"STRONG",{});var idt=s(_me);IPo=r(idt,"mpnet"),idt.forEach(t),qPo=r(ixe," \u2014 "),zG=n(ixe,"A",{href:!0});var ddt=s(zG);NPo=r(ddt,"MPNetForMultipleChoice"),ddt.forEach(t),jPo=r(ixe," (MPNet model)"),ixe.forEach(t),DPo=i(K),X2=n(K,"LI",{});var dxe=s(X2);ume=n(dxe,"STRONG",{});var cdt=s(ume);GPo=r(cdt,"nystromformer"),cdt.forEach(t),OPo=r(dxe," \u2014 "),WG=n(dxe,"A",{href:!0});var fdt=s(WG);VPo=r(fdt,"NystromformerForMultipleChoice"),fdt.forEach(t),XPo=r(dxe," (Nystromformer model)"),dxe.forEach(t),zPo=i(K),z2=n(K,"LI",{});var cxe=s(z2);bme=n(cxe,"STRONG",{});var mdt=s(bme);WPo=r(mdt,"qdqbert"),mdt.forEach(t),QPo=r(cxe," \u2014 "),QG=n(cxe,"A",{href:!0});var gdt=s(QG);HPo=r(gdt,"QDQBertForMultipleChoice"),gdt.forEach(t),UPo=r(cxe," (QDQBert model)"),cxe.forEach(t),JPo=i(K),W2=n(K,"LI",{});var fxe=s(W2);vme=n(fxe,"STRONG",{});var hdt=s(vme);YPo=r(hdt,"rembert"),hdt.forEach(t),KPo=r(fxe," \u2014 "),HG=n(fxe,"A",{href:!0});var pdt=s(HG);ZPo=r(pdt,"RemBertForMultipleChoice"),pdt.forEach(t),eBo=r(fxe," (RemBERT model)"),fxe.forEach(t),oBo=i(K),Q2=n(K,"LI",{});var mxe=s(Q2);Fme=n(mxe,"STRONG",{});var _dt=s(Fme);rBo=r(_dt,"roberta"),_dt.forEach(t),tBo=r(mxe," \u2014 "),UG=n(mxe,"A",{href:!0});var udt=s(UG);aBo=r(udt,"RobertaForMultipleChoice"),udt.forEach(t),nBo=r(mxe," (RoBERTa model)"),mxe.forEach(t),sBo=i(K),H2=n(K,"LI",{});var gxe=s(H2);Tme=n(gxe,"STRONG",{});var bdt=s(Tme);lBo=r(bdt,"roformer"),bdt.forEach(t),iBo=r(gxe," \u2014 "),JG=n(gxe,"A",{href:!0});var vdt=s(JG);dBo=r(vdt,"RoFormerForMultipleChoice"),vdt.forEach(t),cBo=r(gxe," (RoFormer model)"),gxe.forEach(t),fBo=i(K),U2=n(K,"LI",{});var hxe=s(U2);Mme=n(hxe,"STRONG",{});var Fdt=s(Mme);mBo=r(Fdt,"squeezebert"),Fdt.forEach(t),gBo=r(hxe," \u2014 "),YG=n(hxe,"A",{href:!0});var Tdt=s(YG);hBo=r(Tdt,"SqueezeBertForMultipleChoice"),Tdt.forEach(t),pBo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),_Bo=i(K),J2=n(K,"LI",{});var pxe=s(J2);Eme=n(pxe,"STRONG",{});var Mdt=s(Eme);uBo=r(Mdt,"xlm"),Mdt.forEach(t),bBo=r(pxe," \u2014 "),KG=n(pxe,"A",{href:!0});var Edt=s(KG);vBo=r(Edt,"XLMForMultipleChoice"),Edt.forEach(t),FBo=r(pxe," (XLM model)"),pxe.forEach(t),TBo=i(K),Y2=n(K,"LI",{});var _xe=s(Y2);Cme=n(_xe,"STRONG",{});var Cdt=s(Cme);MBo=r(Cdt,"xlm-roberta"),Cdt.forEach(t),EBo=r(_xe," \u2014 "),ZG=n(_xe,"A",{href:!0});var wdt=s(ZG);CBo=r(wdt,"XLMRobertaForMultipleChoice"),wdt.forEach(t),wBo=r(_xe," (XLM-RoBERTa model)"),_xe.forEach(t),ABo=i(K),K2=n(K,"LI",{});var uxe=s(K2);wme=n(uxe,"STRONG",{});var Adt=s(wme);yBo=r(Adt,"xlm-roberta-xl"),Adt.forEach(t),LBo=r(uxe," \u2014 "),eO=n(uxe,"A",{href:!0});var ydt=s(eO);xBo=r(ydt,"XLMRobertaXLForMultipleChoice"),ydt.forEach(t),$Bo=r(uxe," (XLM-RoBERTa-XL model)"),uxe.forEach(t),kBo=i(K),Z2=n(K,"LI",{});var bxe=s(Z2);Ame=n(bxe,"STRONG",{});var Ldt=s(Ame);SBo=r(Ldt,"xlnet"),Ldt.forEach(t),RBo=r(bxe," \u2014 "),oO=n(bxe,"A",{href:!0});var xdt=s(oO);PBo=r(xdt,"XLNetForMultipleChoice"),xdt.forEach(t),BBo=r(bxe," (XLNet model)"),bxe.forEach(t),IBo=i(K),e4=n(K,"LI",{});var vxe=s(e4);yme=n(vxe,"STRONG",{});var $dt=s(yme);qBo=r($dt,"yoso"),$dt.forEach(t),NBo=r(vxe," \u2014 "),rO=n(vxe,"A",{href:!0});var kdt=s(rO);jBo=r(kdt,"YosoForMultipleChoice"),kdt.forEach(t),DBo=r(vxe," (YOSO model)"),vxe.forEach(t),K.forEach(t),GBo=i(la),o4=n(la,"P",{});var Fxe=s(o4);OBo=r(Fxe,"The model is set in evaluation mode by default using "),Lme=n(Fxe,"CODE",{});var Sdt=s(Lme);VBo=r(Sdt,"model.eval()"),Sdt.forEach(t),XBo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(Fxe,"CODE",{});var Rdt=s(xme);zBo=r(Rdt,"model.train()"),Rdt.forEach(t),Fxe.forEach(t),WBo=i(la),T(r4.$$.fragment,la),la.forEach(t),Ws.forEach(t),bqe=i(f),zi=n(f,"H2",{class:!0});var Mje=s(zi);t4=n(Mje,"A",{id:!0,class:!0,href:!0});var Pdt=s(t4);$me=n(Pdt,"SPAN",{});var Bdt=s($me);T(vL.$$.fragment,Bdt),Bdt.forEach(t),Pdt.forEach(t),QBo=i(Mje),kme=n(Mje,"SPAN",{});var Idt=s(kme);HBo=r(Idt,"AutoModelForNextSentencePrediction"),Idt.forEach(t),Mje.forEach(t),vqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(FL.$$.fragment,Qs),UBo=i(Qs),Wi=n(Qs,"P",{});var YK=s(Wi);JBo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tO=n(YK,"A",{href:!0});var qdt=s(tO);YBo=r(qdt,"from_pretrained()"),qdt.forEach(t),KBo=r(YK," class method or the "),aO=n(YK,"A",{href:!0});var Ndt=s(aO);ZBo=r(Ndt,"from_config()"),Ndt.forEach(t),eIo=r(YK,` class
method.`),YK.forEach(t),oIo=i(Qs),TL=n(Qs,"P",{});var Eje=s(TL);rIo=r(Eje,"This class cannot be instantiated directly using "),Sme=n(Eje,"CODE",{});var jdt=s(Sme);tIo=r(jdt,"__init__()"),jdt.forEach(t),aIo=r(Eje," (throws an error)."),Eje.forEach(t),nIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var $0=s(ct);T(ML.$$.fragment,$0),sIo=i($0),Rme=n($0,"P",{});var Ddt=s(Rme);lIo=r(Ddt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ddt.forEach(t),iIo=i($0),Qi=n($0,"P",{});var KK=s(Qi);dIo=r(KK,`Note:
Loading a model from its configuration file does `),Pme=n(KK,"STRONG",{});var Gdt=s(Pme);cIo=r(Gdt,"not"),Gdt.forEach(t),fIo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(KK,"A",{href:!0});var Odt=s(nO);mIo=r(Odt,"from_pretrained()"),Odt.forEach(t),gIo=r(KK," to load the model weights."),KK.forEach(t),hIo=i($0),T(a4.$$.fragment,$0),$0.forEach(t),pIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(EL.$$.fragment,ia),_Io=i(ia),Bme=n(ia,"P",{});var Vdt=s(Bme);uIo=r(Vdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vdt.forEach(t),bIo=i(ia),Ba=n(ia,"P",{});var k0=s(Ba);vIo=r(k0,"The model class to instantiate is selected based on the "),Ime=n(k0,"CODE",{});var Xdt=s(Ime);FIo=r(Xdt,"model_type"),Xdt.forEach(t),TIo=r(k0,` property of the config object (either
passed as an argument or loaded from `),qme=n(k0,"CODE",{});var zdt=s(qme);MIo=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),EIo=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(k0,"CODE",{});var Wdt=s(Nme);CIo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),wIo=r(k0,":"),k0.forEach(t),AIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);n4=n(Hs,"LI",{});var Txe=s(n4);jme=n(Txe,"STRONG",{});var Qdt=s(jme);yIo=r(Qdt,"bert"),Qdt.forEach(t),LIo=r(Txe," \u2014 "),sO=n(Txe,"A",{href:!0});var Hdt=s(sO);xIo=r(Hdt,"BertForNextSentencePrediction"),Hdt.forEach(t),$Io=r(Txe," (BERT model)"),Txe.forEach(t),kIo=i(Hs),s4=n(Hs,"LI",{});var Mxe=s(s4);Dme=n(Mxe,"STRONG",{});var Udt=s(Dme);SIo=r(Udt,"fnet"),Udt.forEach(t),RIo=r(Mxe," \u2014 "),lO=n(Mxe,"A",{href:!0});var Jdt=s(lO);PIo=r(Jdt,"FNetForNextSentencePrediction"),Jdt.forEach(t),BIo=r(Mxe," (FNet model)"),Mxe.forEach(t),IIo=i(Hs),l4=n(Hs,"LI",{});var Exe=s(l4);Gme=n(Exe,"STRONG",{});var Ydt=s(Gme);qIo=r(Ydt,"megatron-bert"),Ydt.forEach(t),NIo=r(Exe," \u2014 "),iO=n(Exe,"A",{href:!0});var Kdt=s(iO);jIo=r(Kdt,"MegatronBertForNextSentencePrediction"),Kdt.forEach(t),DIo=r(Exe," (MegatronBert model)"),Exe.forEach(t),GIo=i(Hs),i4=n(Hs,"LI",{});var Cxe=s(i4);Ome=n(Cxe,"STRONG",{});var Zdt=s(Ome);OIo=r(Zdt,"mobilebert"),Zdt.forEach(t),VIo=r(Cxe," \u2014 "),dO=n(Cxe,"A",{href:!0});var ect=s(dO);XIo=r(ect,"MobileBertForNextSentencePrediction"),ect.forEach(t),zIo=r(Cxe," (MobileBERT model)"),Cxe.forEach(t),WIo=i(Hs),d4=n(Hs,"LI",{});var wxe=s(d4);Vme=n(wxe,"STRONG",{});var oct=s(Vme);QIo=r(oct,"qdqbert"),oct.forEach(t),HIo=r(wxe," \u2014 "),cO=n(wxe,"A",{href:!0});var rct=s(cO);UIo=r(rct,"QDQBertForNextSentencePrediction"),rct.forEach(t),JIo=r(wxe," (QDQBert model)"),wxe.forEach(t),Hs.forEach(t),YIo=i(ia),c4=n(ia,"P",{});var Axe=s(c4);KIo=r(Axe,"The model is set in evaluation mode by default using "),Xme=n(Axe,"CODE",{});var tct=s(Xme);ZIo=r(tct,"model.eval()"),tct.forEach(t),eqo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(Axe,"CODE",{});var act=s(zme);oqo=r(act,"model.train()"),act.forEach(t),Axe.forEach(t),rqo=i(ia),T(f4.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Fqe=i(f),Hi=n(f,"H2",{class:!0});var Cje=s(Hi);m4=n(Cje,"A",{id:!0,class:!0,href:!0});var nct=s(m4);Wme=n(nct,"SPAN",{});var sct=s(Wme);T(CL.$$.fragment,sct),sct.forEach(t),nct.forEach(t),tqo=i(Cje),Qme=n(Cje,"SPAN",{});var lct=s(Qme);aqo=r(lct,"AutoModelForTokenClassification"),lct.forEach(t),Cje.forEach(t),Tqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(wL.$$.fragment,Us),nqo=i(Us),Ui=n(Us,"P",{});var ZK=s(Ui);sqo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fO=n(ZK,"A",{href:!0});var ict=s(fO);lqo=r(ict,"from_pretrained()"),ict.forEach(t),iqo=r(ZK," class method or the "),mO=n(ZK,"A",{href:!0});var dct=s(mO);dqo=r(dct,"from_config()"),dct.forEach(t),cqo=r(ZK,` class
method.`),ZK.forEach(t),fqo=i(Us),AL=n(Us,"P",{});var wje=s(AL);mqo=r(wje,"This class cannot be instantiated directly using "),Hme=n(wje,"CODE",{});var cct=s(Hme);gqo=r(cct,"__init__()"),cct.forEach(t),hqo=r(wje," (throws an error)."),wje.forEach(t),pqo=i(Us),ft=n(Us,"DIV",{class:!0});var S0=s(ft);T(yL.$$.fragment,S0),_qo=i(S0),Ume=n(S0,"P",{});var fct=s(Ume);uqo=r(fct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fct.forEach(t),bqo=i(S0),Ji=n(S0,"P",{});var eZ=s(Ji);vqo=r(eZ,`Note:
Loading a model from its configuration file does `),Jme=n(eZ,"STRONG",{});var mct=s(Jme);Fqo=r(mct,"not"),mct.forEach(t),Tqo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(eZ,"A",{href:!0});var gct=s(gO);Mqo=r(gct,"from_pretrained()"),gct.forEach(t),Eqo=r(eZ," to load the model weights."),eZ.forEach(t),Cqo=i(S0),T(g4.$$.fragment,S0),S0.forEach(t),wqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(LL.$$.fragment,da),Aqo=i(da),Yme=n(da,"P",{});var hct=s(Yme);yqo=r(hct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hct.forEach(t),Lqo=i(da),Ia=n(da,"P",{});var R0=s(Ia);xqo=r(R0,"The model class to instantiate is selected based on the "),Kme=n(R0,"CODE",{});var pct=s(Kme);$qo=r(pct,"model_type"),pct.forEach(t),kqo=r(R0,` property of the config object (either
passed as an argument or loaded from `),Zme=n(R0,"CODE",{});var _ct=s(Zme);Sqo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),Rqo=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(R0,"CODE",{});var uct=s(ege);Pqo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Bqo=r(R0,":"),R0.forEach(t),Iqo=i(da),U=n(da,"UL",{});var J=s(U);h4=n(J,"LI",{});var yxe=s(h4);oge=n(yxe,"STRONG",{});var bct=s(oge);qqo=r(bct,"albert"),bct.forEach(t),Nqo=r(yxe," \u2014 "),hO=n(yxe,"A",{href:!0});var vct=s(hO);jqo=r(vct,"AlbertForTokenClassification"),vct.forEach(t),Dqo=r(yxe," (ALBERT model)"),yxe.forEach(t),Gqo=i(J),p4=n(J,"LI",{});var Lxe=s(p4);rge=n(Lxe,"STRONG",{});var Fct=s(rge);Oqo=r(Fct,"bert"),Fct.forEach(t),Vqo=r(Lxe," \u2014 "),pO=n(Lxe,"A",{href:!0});var Tct=s(pO);Xqo=r(Tct,"BertForTokenClassification"),Tct.forEach(t),zqo=r(Lxe," (BERT model)"),Lxe.forEach(t),Wqo=i(J),_4=n(J,"LI",{});var xxe=s(_4);tge=n(xxe,"STRONG",{});var Mct=s(tge);Qqo=r(Mct,"big_bird"),Mct.forEach(t),Hqo=r(xxe," \u2014 "),_O=n(xxe,"A",{href:!0});var Ect=s(_O);Uqo=r(Ect,"BigBirdForTokenClassification"),Ect.forEach(t),Jqo=r(xxe," (BigBird model)"),xxe.forEach(t),Yqo=i(J),u4=n(J,"LI",{});var $xe=s(u4);age=n($xe,"STRONG",{});var Cct=s(age);Kqo=r(Cct,"camembert"),Cct.forEach(t),Zqo=r($xe," \u2014 "),uO=n($xe,"A",{href:!0});var wct=s(uO);eNo=r(wct,"CamembertForTokenClassification"),wct.forEach(t),oNo=r($xe," (CamemBERT model)"),$xe.forEach(t),rNo=i(J),b4=n(J,"LI",{});var kxe=s(b4);nge=n(kxe,"STRONG",{});var Act=s(nge);tNo=r(Act,"canine"),Act.forEach(t),aNo=r(kxe," \u2014 "),bO=n(kxe,"A",{href:!0});var yct=s(bO);nNo=r(yct,"CanineForTokenClassification"),yct.forEach(t),sNo=r(kxe," (Canine model)"),kxe.forEach(t),lNo=i(J),v4=n(J,"LI",{});var Sxe=s(v4);sge=n(Sxe,"STRONG",{});var Lct=s(sge);iNo=r(Lct,"convbert"),Lct.forEach(t),dNo=r(Sxe," \u2014 "),vO=n(Sxe,"A",{href:!0});var xct=s(vO);cNo=r(xct,"ConvBertForTokenClassification"),xct.forEach(t),fNo=r(Sxe," (ConvBERT model)"),Sxe.forEach(t),mNo=i(J),F4=n(J,"LI",{});var Rxe=s(F4);lge=n(Rxe,"STRONG",{});var $ct=s(lge);gNo=r($ct,"data2vec-text"),$ct.forEach(t),hNo=r(Rxe," \u2014 "),FO=n(Rxe,"A",{href:!0});var kct=s(FO);pNo=r(kct,"Data2VecTextForTokenClassification"),kct.forEach(t),_No=r(Rxe," (Data2VecText model)"),Rxe.forEach(t),uNo=i(J),T4=n(J,"LI",{});var Pxe=s(T4);ige=n(Pxe,"STRONG",{});var Sct=s(ige);bNo=r(Sct,"deberta"),Sct.forEach(t),vNo=r(Pxe," \u2014 "),TO=n(Pxe,"A",{href:!0});var Rct=s(TO);FNo=r(Rct,"DebertaForTokenClassification"),Rct.forEach(t),TNo=r(Pxe," (DeBERTa model)"),Pxe.forEach(t),MNo=i(J),M4=n(J,"LI",{});var Bxe=s(M4);dge=n(Bxe,"STRONG",{});var Pct=s(dge);ENo=r(Pct,"deberta-v2"),Pct.forEach(t),CNo=r(Bxe," \u2014 "),MO=n(Bxe,"A",{href:!0});var Bct=s(MO);wNo=r(Bct,"DebertaV2ForTokenClassification"),Bct.forEach(t),ANo=r(Bxe," (DeBERTa-v2 model)"),Bxe.forEach(t),yNo=i(J),E4=n(J,"LI",{});var Ixe=s(E4);cge=n(Ixe,"STRONG",{});var Ict=s(cge);LNo=r(Ict,"distilbert"),Ict.forEach(t),xNo=r(Ixe," \u2014 "),EO=n(Ixe,"A",{href:!0});var qct=s(EO);$No=r(qct,"DistilBertForTokenClassification"),qct.forEach(t),kNo=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),SNo=i(J),C4=n(J,"LI",{});var qxe=s(C4);fge=n(qxe,"STRONG",{});var Nct=s(fge);RNo=r(Nct,"electra"),Nct.forEach(t),PNo=r(qxe," \u2014 "),CO=n(qxe,"A",{href:!0});var jct=s(CO);BNo=r(jct,"ElectraForTokenClassification"),jct.forEach(t),INo=r(qxe," (ELECTRA model)"),qxe.forEach(t),qNo=i(J),w4=n(J,"LI",{});var Nxe=s(w4);mge=n(Nxe,"STRONG",{});var Dct=s(mge);NNo=r(Dct,"flaubert"),Dct.forEach(t),jNo=r(Nxe," \u2014 "),wO=n(Nxe,"A",{href:!0});var Gct=s(wO);DNo=r(Gct,"FlaubertForTokenClassification"),Gct.forEach(t),GNo=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),ONo=i(J),A4=n(J,"LI",{});var jxe=s(A4);gge=n(jxe,"STRONG",{});var Oct=s(gge);VNo=r(Oct,"fnet"),Oct.forEach(t),XNo=r(jxe," \u2014 "),AO=n(jxe,"A",{href:!0});var Vct=s(AO);zNo=r(Vct,"FNetForTokenClassification"),Vct.forEach(t),WNo=r(jxe," (FNet model)"),jxe.forEach(t),QNo=i(J),y4=n(J,"LI",{});var Dxe=s(y4);hge=n(Dxe,"STRONG",{});var Xct=s(hge);HNo=r(Xct,"funnel"),Xct.forEach(t),UNo=r(Dxe," \u2014 "),yO=n(Dxe,"A",{href:!0});var zct=s(yO);JNo=r(zct,"FunnelForTokenClassification"),zct.forEach(t),YNo=r(Dxe," (Funnel Transformer model)"),Dxe.forEach(t),KNo=i(J),L4=n(J,"LI",{});var Gxe=s(L4);pge=n(Gxe,"STRONG",{});var Wct=s(pge);ZNo=r(Wct,"gpt2"),Wct.forEach(t),ejo=r(Gxe," \u2014 "),LO=n(Gxe,"A",{href:!0});var Qct=s(LO);ojo=r(Qct,"GPT2ForTokenClassification"),Qct.forEach(t),rjo=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),tjo=i(J),x4=n(J,"LI",{});var Oxe=s(x4);_ge=n(Oxe,"STRONG",{});var Hct=s(_ge);ajo=r(Hct,"ibert"),Hct.forEach(t),njo=r(Oxe," \u2014 "),xO=n(Oxe,"A",{href:!0});var Uct=s(xO);sjo=r(Uct,"IBertForTokenClassification"),Uct.forEach(t),ljo=r(Oxe," (I-BERT model)"),Oxe.forEach(t),ijo=i(J),$4=n(J,"LI",{});var Vxe=s($4);uge=n(Vxe,"STRONG",{});var Jct=s(uge);djo=r(Jct,"layoutlm"),Jct.forEach(t),cjo=r(Vxe," \u2014 "),$O=n(Vxe,"A",{href:!0});var Yct=s($O);fjo=r(Yct,"LayoutLMForTokenClassification"),Yct.forEach(t),mjo=r(Vxe," (LayoutLM model)"),Vxe.forEach(t),gjo=i(J),k4=n(J,"LI",{});var Xxe=s(k4);bge=n(Xxe,"STRONG",{});var Kct=s(bge);hjo=r(Kct,"layoutlmv2"),Kct.forEach(t),pjo=r(Xxe," \u2014 "),kO=n(Xxe,"A",{href:!0});var Zct=s(kO);_jo=r(Zct,"LayoutLMv2ForTokenClassification"),Zct.forEach(t),ujo=r(Xxe," (LayoutLMv2 model)"),Xxe.forEach(t),bjo=i(J),S4=n(J,"LI",{});var zxe=s(S4);vge=n(zxe,"STRONG",{});var eft=s(vge);vjo=r(eft,"longformer"),eft.forEach(t),Fjo=r(zxe," \u2014 "),SO=n(zxe,"A",{href:!0});var oft=s(SO);Tjo=r(oft,"LongformerForTokenClassification"),oft.forEach(t),Mjo=r(zxe," (Longformer model)"),zxe.forEach(t),Ejo=i(J),R4=n(J,"LI",{});var Wxe=s(R4);Fge=n(Wxe,"STRONG",{});var rft=s(Fge);Cjo=r(rft,"megatron-bert"),rft.forEach(t),wjo=r(Wxe," \u2014 "),RO=n(Wxe,"A",{href:!0});var tft=s(RO);Ajo=r(tft,"MegatronBertForTokenClassification"),tft.forEach(t),yjo=r(Wxe," (MegatronBert model)"),Wxe.forEach(t),Ljo=i(J),P4=n(J,"LI",{});var Qxe=s(P4);Tge=n(Qxe,"STRONG",{});var aft=s(Tge);xjo=r(aft,"mobilebert"),aft.forEach(t),$jo=r(Qxe," \u2014 "),PO=n(Qxe,"A",{href:!0});var nft=s(PO);kjo=r(nft,"MobileBertForTokenClassification"),nft.forEach(t),Sjo=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),Rjo=i(J),B4=n(J,"LI",{});var Hxe=s(B4);Mge=n(Hxe,"STRONG",{});var sft=s(Mge);Pjo=r(sft,"mpnet"),sft.forEach(t),Bjo=r(Hxe," \u2014 "),BO=n(Hxe,"A",{href:!0});var lft=s(BO);Ijo=r(lft,"MPNetForTokenClassification"),lft.forEach(t),qjo=r(Hxe," (MPNet model)"),Hxe.forEach(t),Njo=i(J),I4=n(J,"LI",{});var Uxe=s(I4);Ege=n(Uxe,"STRONG",{});var ift=s(Ege);jjo=r(ift,"nystromformer"),ift.forEach(t),Djo=r(Uxe," \u2014 "),IO=n(Uxe,"A",{href:!0});var dft=s(IO);Gjo=r(dft,"NystromformerForTokenClassification"),dft.forEach(t),Ojo=r(Uxe," (Nystromformer model)"),Uxe.forEach(t),Vjo=i(J),q4=n(J,"LI",{});var Jxe=s(q4);Cge=n(Jxe,"STRONG",{});var cft=s(Cge);Xjo=r(cft,"qdqbert"),cft.forEach(t),zjo=r(Jxe," \u2014 "),qO=n(Jxe,"A",{href:!0});var fft=s(qO);Wjo=r(fft,"QDQBertForTokenClassification"),fft.forEach(t),Qjo=r(Jxe," (QDQBert model)"),Jxe.forEach(t),Hjo=i(J),N4=n(J,"LI",{});var Yxe=s(N4);wge=n(Yxe,"STRONG",{});var mft=s(wge);Ujo=r(mft,"rembert"),mft.forEach(t),Jjo=r(Yxe," \u2014 "),NO=n(Yxe,"A",{href:!0});var gft=s(NO);Yjo=r(gft,"RemBertForTokenClassification"),gft.forEach(t),Kjo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),Zjo=i(J),j4=n(J,"LI",{});var Kxe=s(j4);Age=n(Kxe,"STRONG",{});var hft=s(Age);eDo=r(hft,"roberta"),hft.forEach(t),oDo=r(Kxe," \u2014 "),jO=n(Kxe,"A",{href:!0});var pft=s(jO);rDo=r(pft,"RobertaForTokenClassification"),pft.forEach(t),tDo=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),aDo=i(J),D4=n(J,"LI",{});var Zxe=s(D4);yge=n(Zxe,"STRONG",{});var _ft=s(yge);nDo=r(_ft,"roformer"),_ft.forEach(t),sDo=r(Zxe," \u2014 "),DO=n(Zxe,"A",{href:!0});var uft=s(DO);lDo=r(uft,"RoFormerForTokenClassification"),uft.forEach(t),iDo=r(Zxe," (RoFormer model)"),Zxe.forEach(t),dDo=i(J),G4=n(J,"LI",{});var e9e=s(G4);Lge=n(e9e,"STRONG",{});var bft=s(Lge);cDo=r(bft,"squeezebert"),bft.forEach(t),fDo=r(e9e," \u2014 "),GO=n(e9e,"A",{href:!0});var vft=s(GO);mDo=r(vft,"SqueezeBertForTokenClassification"),vft.forEach(t),gDo=r(e9e," (SqueezeBERT model)"),e9e.forEach(t),hDo=i(J),O4=n(J,"LI",{});var o9e=s(O4);xge=n(o9e,"STRONG",{});var Fft=s(xge);pDo=r(Fft,"xlm"),Fft.forEach(t),_Do=r(o9e," \u2014 "),OO=n(o9e,"A",{href:!0});var Tft=s(OO);uDo=r(Tft,"XLMForTokenClassification"),Tft.forEach(t),bDo=r(o9e," (XLM model)"),o9e.forEach(t),vDo=i(J),V4=n(J,"LI",{});var r9e=s(V4);$ge=n(r9e,"STRONG",{});var Mft=s($ge);FDo=r(Mft,"xlm-roberta"),Mft.forEach(t),TDo=r(r9e," \u2014 "),VO=n(r9e,"A",{href:!0});var Eft=s(VO);MDo=r(Eft,"XLMRobertaForTokenClassification"),Eft.forEach(t),EDo=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),CDo=i(J),X4=n(J,"LI",{});var t9e=s(X4);kge=n(t9e,"STRONG",{});var Cft=s(kge);wDo=r(Cft,"xlm-roberta-xl"),Cft.forEach(t),ADo=r(t9e," \u2014 "),XO=n(t9e,"A",{href:!0});var wft=s(XO);yDo=r(wft,"XLMRobertaXLForTokenClassification"),wft.forEach(t),LDo=r(t9e," (XLM-RoBERTa-XL model)"),t9e.forEach(t),xDo=i(J),z4=n(J,"LI",{});var a9e=s(z4);Sge=n(a9e,"STRONG",{});var Aft=s(Sge);$Do=r(Aft,"xlnet"),Aft.forEach(t),kDo=r(a9e," \u2014 "),zO=n(a9e,"A",{href:!0});var yft=s(zO);SDo=r(yft,"XLNetForTokenClassification"),yft.forEach(t),RDo=r(a9e," (XLNet model)"),a9e.forEach(t),PDo=i(J),W4=n(J,"LI",{});var n9e=s(W4);Rge=n(n9e,"STRONG",{});var Lft=s(Rge);BDo=r(Lft,"yoso"),Lft.forEach(t),IDo=r(n9e," \u2014 "),WO=n(n9e,"A",{href:!0});var xft=s(WO);qDo=r(xft,"YosoForTokenClassification"),xft.forEach(t),NDo=r(n9e," (YOSO model)"),n9e.forEach(t),J.forEach(t),jDo=i(da),Q4=n(da,"P",{});var s9e=s(Q4);DDo=r(s9e,"The model is set in evaluation mode by default using "),Pge=n(s9e,"CODE",{});var $ft=s(Pge);GDo=r($ft,"model.eval()"),$ft.forEach(t),ODo=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(s9e,"CODE",{});var kft=s(Bge);VDo=r(kft,"model.train()"),kft.forEach(t),s9e.forEach(t),XDo=i(da),T(H4.$$.fragment,da),da.forEach(t),Us.forEach(t),Mqe=i(f),Yi=n(f,"H2",{class:!0});var Aje=s(Yi);U4=n(Aje,"A",{id:!0,class:!0,href:!0});var Sft=s(U4);Ige=n(Sft,"SPAN",{});var Rft=s(Ige);T(xL.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),zDo=i(Aje),qge=n(Aje,"SPAN",{});var Pft=s(qge);WDo=r(Pft,"AutoModelForQuestionAnswering"),Pft.forEach(t),Aje.forEach(t),Eqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T($L.$$.fragment,Js),QDo=i(Js),Ki=n(Js,"P",{});var oZ=s(Ki);HDo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QO=n(oZ,"A",{href:!0});var Bft=s(QO);UDo=r(Bft,"from_pretrained()"),Bft.forEach(t),JDo=r(oZ," class method or the "),HO=n(oZ,"A",{href:!0});var Ift=s(HO);YDo=r(Ift,"from_config()"),Ift.forEach(t),KDo=r(oZ,` class
method.`),oZ.forEach(t),ZDo=i(Js),kL=n(Js,"P",{});var yje=s(kL);eGo=r(yje,"This class cannot be instantiated directly using "),Nge=n(yje,"CODE",{});var qft=s(Nge);oGo=r(qft,"__init__()"),qft.forEach(t),rGo=r(yje," (throws an error)."),yje.forEach(t),tGo=i(Js),mt=n(Js,"DIV",{class:!0});var P0=s(mt);T(SL.$$.fragment,P0),aGo=i(P0),jge=n(P0,"P",{});var Nft=s(jge);nGo=r(Nft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nft.forEach(t),sGo=i(P0),Zi=n(P0,"P",{});var rZ=s(Zi);lGo=r(rZ,`Note:
Loading a model from its configuration file does `),Dge=n(rZ,"STRONG",{});var jft=s(Dge);iGo=r(jft,"not"),jft.forEach(t),dGo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(rZ,"A",{href:!0});var Dft=s(UO);cGo=r(Dft,"from_pretrained()"),Dft.forEach(t),fGo=r(rZ," to load the model weights."),rZ.forEach(t),mGo=i(P0),T(J4.$$.fragment,P0),P0.forEach(t),gGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(RL.$$.fragment,ca),hGo=i(ca),Gge=n(ca,"P",{});var Gft=s(Gge);pGo=r(Gft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gft.forEach(t),_Go=i(ca),qa=n(ca,"P",{});var B0=s(qa);uGo=r(B0,"The model class to instantiate is selected based on the "),Oge=n(B0,"CODE",{});var Oft=s(Oge);bGo=r(Oft,"model_type"),Oft.forEach(t),vGo=r(B0,` property of the config object (either
passed as an argument or loaded from `),Vge=n(B0,"CODE",{});var Vft=s(Vge);FGo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),TGo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(B0,"CODE",{});var Xft=s(Xge);MGo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),EGo=r(B0,":"),B0.forEach(t),CGo=i(ca),V=n(ca,"UL",{});var X=s(V);Y4=n(X,"LI",{});var l9e=s(Y4);zge=n(l9e,"STRONG",{});var zft=s(zge);wGo=r(zft,"albert"),zft.forEach(t),AGo=r(l9e," \u2014 "),JO=n(l9e,"A",{href:!0});var Wft=s(JO);yGo=r(Wft,"AlbertForQuestionAnswering"),Wft.forEach(t),LGo=r(l9e," (ALBERT model)"),l9e.forEach(t),xGo=i(X),K4=n(X,"LI",{});var i9e=s(K4);Wge=n(i9e,"STRONG",{});var Qft=s(Wge);$Go=r(Qft,"bart"),Qft.forEach(t),kGo=r(i9e," \u2014 "),YO=n(i9e,"A",{href:!0});var Hft=s(YO);SGo=r(Hft,"BartForQuestionAnswering"),Hft.forEach(t),RGo=r(i9e," (BART model)"),i9e.forEach(t),PGo=i(X),Z4=n(X,"LI",{});var d9e=s(Z4);Qge=n(d9e,"STRONG",{});var Uft=s(Qge);BGo=r(Uft,"bert"),Uft.forEach(t),IGo=r(d9e," \u2014 "),KO=n(d9e,"A",{href:!0});var Jft=s(KO);qGo=r(Jft,"BertForQuestionAnswering"),Jft.forEach(t),NGo=r(d9e," (BERT model)"),d9e.forEach(t),jGo=i(X),e5=n(X,"LI",{});var c9e=s(e5);Hge=n(c9e,"STRONG",{});var Yft=s(Hge);DGo=r(Yft,"big_bird"),Yft.forEach(t),GGo=r(c9e," \u2014 "),ZO=n(c9e,"A",{href:!0});var Kft=s(ZO);OGo=r(Kft,"BigBirdForQuestionAnswering"),Kft.forEach(t),VGo=r(c9e," (BigBird model)"),c9e.forEach(t),XGo=i(X),o5=n(X,"LI",{});var f9e=s(o5);Uge=n(f9e,"STRONG",{});var Zft=s(Uge);zGo=r(Zft,"bigbird_pegasus"),Zft.forEach(t),WGo=r(f9e," \u2014 "),eV=n(f9e,"A",{href:!0});var emt=s(eV);QGo=r(emt,"BigBirdPegasusForQuestionAnswering"),emt.forEach(t),HGo=r(f9e," (BigBirdPegasus model)"),f9e.forEach(t),UGo=i(X),r5=n(X,"LI",{});var m9e=s(r5);Jge=n(m9e,"STRONG",{});var omt=s(Jge);JGo=r(omt,"camembert"),omt.forEach(t),YGo=r(m9e," \u2014 "),oV=n(m9e,"A",{href:!0});var rmt=s(oV);KGo=r(rmt,"CamembertForQuestionAnswering"),rmt.forEach(t),ZGo=r(m9e," (CamemBERT model)"),m9e.forEach(t),eOo=i(X),t5=n(X,"LI",{});var g9e=s(t5);Yge=n(g9e,"STRONG",{});var tmt=s(Yge);oOo=r(tmt,"canine"),tmt.forEach(t),rOo=r(g9e," \u2014 "),rV=n(g9e,"A",{href:!0});var amt=s(rV);tOo=r(amt,"CanineForQuestionAnswering"),amt.forEach(t),aOo=r(g9e," (Canine model)"),g9e.forEach(t),nOo=i(X),a5=n(X,"LI",{});var h9e=s(a5);Kge=n(h9e,"STRONG",{});var nmt=s(Kge);sOo=r(nmt,"convbert"),nmt.forEach(t),lOo=r(h9e," \u2014 "),tV=n(h9e,"A",{href:!0});var smt=s(tV);iOo=r(smt,"ConvBertForQuestionAnswering"),smt.forEach(t),dOo=r(h9e," (ConvBERT model)"),h9e.forEach(t),cOo=i(X),n5=n(X,"LI",{});var p9e=s(n5);Zge=n(p9e,"STRONG",{});var lmt=s(Zge);fOo=r(lmt,"data2vec-text"),lmt.forEach(t),mOo=r(p9e," \u2014 "),aV=n(p9e,"A",{href:!0});var imt=s(aV);gOo=r(imt,"Data2VecTextForQuestionAnswering"),imt.forEach(t),hOo=r(p9e," (Data2VecText model)"),p9e.forEach(t),pOo=i(X),s5=n(X,"LI",{});var _9e=s(s5);ehe=n(_9e,"STRONG",{});var dmt=s(ehe);_Oo=r(dmt,"deberta"),dmt.forEach(t),uOo=r(_9e," \u2014 "),nV=n(_9e,"A",{href:!0});var cmt=s(nV);bOo=r(cmt,"DebertaForQuestionAnswering"),cmt.forEach(t),vOo=r(_9e," (DeBERTa model)"),_9e.forEach(t),FOo=i(X),l5=n(X,"LI",{});var u9e=s(l5);ohe=n(u9e,"STRONG",{});var fmt=s(ohe);TOo=r(fmt,"deberta-v2"),fmt.forEach(t),MOo=r(u9e," \u2014 "),sV=n(u9e,"A",{href:!0});var mmt=s(sV);EOo=r(mmt,"DebertaV2ForQuestionAnswering"),mmt.forEach(t),COo=r(u9e," (DeBERTa-v2 model)"),u9e.forEach(t),wOo=i(X),i5=n(X,"LI",{});var b9e=s(i5);rhe=n(b9e,"STRONG",{});var gmt=s(rhe);AOo=r(gmt,"distilbert"),gmt.forEach(t),yOo=r(b9e," \u2014 "),lV=n(b9e,"A",{href:!0});var hmt=s(lV);LOo=r(hmt,"DistilBertForQuestionAnswering"),hmt.forEach(t),xOo=r(b9e," (DistilBERT model)"),b9e.forEach(t),$Oo=i(X),d5=n(X,"LI",{});var v9e=s(d5);the=n(v9e,"STRONG",{});var pmt=s(the);kOo=r(pmt,"electra"),pmt.forEach(t),SOo=r(v9e," \u2014 "),iV=n(v9e,"A",{href:!0});var _mt=s(iV);ROo=r(_mt,"ElectraForQuestionAnswering"),_mt.forEach(t),POo=r(v9e," (ELECTRA model)"),v9e.forEach(t),BOo=i(X),c5=n(X,"LI",{});var F9e=s(c5);ahe=n(F9e,"STRONG",{});var umt=s(ahe);IOo=r(umt,"flaubert"),umt.forEach(t),qOo=r(F9e," \u2014 "),dV=n(F9e,"A",{href:!0});var bmt=s(dV);NOo=r(bmt,"FlaubertForQuestionAnsweringSimple"),bmt.forEach(t),jOo=r(F9e," (FlauBERT model)"),F9e.forEach(t),DOo=i(X),f5=n(X,"LI",{});var T9e=s(f5);nhe=n(T9e,"STRONG",{});var vmt=s(nhe);GOo=r(vmt,"fnet"),vmt.forEach(t),OOo=r(T9e," \u2014 "),cV=n(T9e,"A",{href:!0});var Fmt=s(cV);VOo=r(Fmt,"FNetForQuestionAnswering"),Fmt.forEach(t),XOo=r(T9e," (FNet model)"),T9e.forEach(t),zOo=i(X),m5=n(X,"LI",{});var M9e=s(m5);she=n(M9e,"STRONG",{});var Tmt=s(she);WOo=r(Tmt,"funnel"),Tmt.forEach(t),QOo=r(M9e," \u2014 "),fV=n(M9e,"A",{href:!0});var Mmt=s(fV);HOo=r(Mmt,"FunnelForQuestionAnswering"),Mmt.forEach(t),UOo=r(M9e," (Funnel Transformer model)"),M9e.forEach(t),JOo=i(X),g5=n(X,"LI",{});var E9e=s(g5);lhe=n(E9e,"STRONG",{});var Emt=s(lhe);YOo=r(Emt,"gptj"),Emt.forEach(t),KOo=r(E9e," \u2014 "),mV=n(E9e,"A",{href:!0});var Cmt=s(mV);ZOo=r(Cmt,"GPTJForQuestionAnswering"),Cmt.forEach(t),eVo=r(E9e," (GPT-J model)"),E9e.forEach(t),oVo=i(X),h5=n(X,"LI",{});var C9e=s(h5);ihe=n(C9e,"STRONG",{});var wmt=s(ihe);rVo=r(wmt,"ibert"),wmt.forEach(t),tVo=r(C9e," \u2014 "),gV=n(C9e,"A",{href:!0});var Amt=s(gV);aVo=r(Amt,"IBertForQuestionAnswering"),Amt.forEach(t),nVo=r(C9e," (I-BERT model)"),C9e.forEach(t),sVo=i(X),p5=n(X,"LI",{});var w9e=s(p5);dhe=n(w9e,"STRONG",{});var ymt=s(dhe);lVo=r(ymt,"layoutlmv2"),ymt.forEach(t),iVo=r(w9e," \u2014 "),hV=n(w9e,"A",{href:!0});var Lmt=s(hV);dVo=r(Lmt,"LayoutLMv2ForQuestionAnswering"),Lmt.forEach(t),cVo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),fVo=i(X),_5=n(X,"LI",{});var A9e=s(_5);che=n(A9e,"STRONG",{});var xmt=s(che);mVo=r(xmt,"led"),xmt.forEach(t),gVo=r(A9e," \u2014 "),pV=n(A9e,"A",{href:!0});var $mt=s(pV);hVo=r($mt,"LEDForQuestionAnswering"),$mt.forEach(t),pVo=r(A9e," (LED model)"),A9e.forEach(t),_Vo=i(X),u5=n(X,"LI",{});var y9e=s(u5);fhe=n(y9e,"STRONG",{});var kmt=s(fhe);uVo=r(kmt,"longformer"),kmt.forEach(t),bVo=r(y9e," \u2014 "),_V=n(y9e,"A",{href:!0});var Smt=s(_V);vVo=r(Smt,"LongformerForQuestionAnswering"),Smt.forEach(t),FVo=r(y9e," (Longformer model)"),y9e.forEach(t),TVo=i(X),b5=n(X,"LI",{});var L9e=s(b5);mhe=n(L9e,"STRONG",{});var Rmt=s(mhe);MVo=r(Rmt,"lxmert"),Rmt.forEach(t),EVo=r(L9e," \u2014 "),uV=n(L9e,"A",{href:!0});var Pmt=s(uV);CVo=r(Pmt,"LxmertForQuestionAnswering"),Pmt.forEach(t),wVo=r(L9e," (LXMERT model)"),L9e.forEach(t),AVo=i(X),v5=n(X,"LI",{});var x9e=s(v5);ghe=n(x9e,"STRONG",{});var Bmt=s(ghe);yVo=r(Bmt,"mbart"),Bmt.forEach(t),LVo=r(x9e," \u2014 "),bV=n(x9e,"A",{href:!0});var Imt=s(bV);xVo=r(Imt,"MBartForQuestionAnswering"),Imt.forEach(t),$Vo=r(x9e," (mBART model)"),x9e.forEach(t),kVo=i(X),F5=n(X,"LI",{});var $9e=s(F5);hhe=n($9e,"STRONG",{});var qmt=s(hhe);SVo=r(qmt,"megatron-bert"),qmt.forEach(t),RVo=r($9e," \u2014 "),vV=n($9e,"A",{href:!0});var Nmt=s(vV);PVo=r(Nmt,"MegatronBertForQuestionAnswering"),Nmt.forEach(t),BVo=r($9e," (MegatronBert model)"),$9e.forEach(t),IVo=i(X),T5=n(X,"LI",{});var k9e=s(T5);phe=n(k9e,"STRONG",{});var jmt=s(phe);qVo=r(jmt,"mobilebert"),jmt.forEach(t),NVo=r(k9e," \u2014 "),FV=n(k9e,"A",{href:!0});var Dmt=s(FV);jVo=r(Dmt,"MobileBertForQuestionAnswering"),Dmt.forEach(t),DVo=r(k9e," (MobileBERT model)"),k9e.forEach(t),GVo=i(X),M5=n(X,"LI",{});var S9e=s(M5);_he=n(S9e,"STRONG",{});var Gmt=s(_he);OVo=r(Gmt,"mpnet"),Gmt.forEach(t),VVo=r(S9e," \u2014 "),TV=n(S9e,"A",{href:!0});var Omt=s(TV);XVo=r(Omt,"MPNetForQuestionAnswering"),Omt.forEach(t),zVo=r(S9e," (MPNet model)"),S9e.forEach(t),WVo=i(X),E5=n(X,"LI",{});var R9e=s(E5);uhe=n(R9e,"STRONG",{});var Vmt=s(uhe);QVo=r(Vmt,"nystromformer"),Vmt.forEach(t),HVo=r(R9e," \u2014 "),MV=n(R9e,"A",{href:!0});var Xmt=s(MV);UVo=r(Xmt,"NystromformerForQuestionAnswering"),Xmt.forEach(t),JVo=r(R9e," (Nystromformer model)"),R9e.forEach(t),YVo=i(X),C5=n(X,"LI",{});var P9e=s(C5);bhe=n(P9e,"STRONG",{});var zmt=s(bhe);KVo=r(zmt,"qdqbert"),zmt.forEach(t),ZVo=r(P9e," \u2014 "),EV=n(P9e,"A",{href:!0});var Wmt=s(EV);eXo=r(Wmt,"QDQBertForQuestionAnswering"),Wmt.forEach(t),oXo=r(P9e," (QDQBert model)"),P9e.forEach(t),rXo=i(X),w5=n(X,"LI",{});var B9e=s(w5);vhe=n(B9e,"STRONG",{});var Qmt=s(vhe);tXo=r(Qmt,"reformer"),Qmt.forEach(t),aXo=r(B9e," \u2014 "),CV=n(B9e,"A",{href:!0});var Hmt=s(CV);nXo=r(Hmt,"ReformerForQuestionAnswering"),Hmt.forEach(t),sXo=r(B9e," (Reformer model)"),B9e.forEach(t),lXo=i(X),A5=n(X,"LI",{});var I9e=s(A5);Fhe=n(I9e,"STRONG",{});var Umt=s(Fhe);iXo=r(Umt,"rembert"),Umt.forEach(t),dXo=r(I9e," \u2014 "),wV=n(I9e,"A",{href:!0});var Jmt=s(wV);cXo=r(Jmt,"RemBertForQuestionAnswering"),Jmt.forEach(t),fXo=r(I9e," (RemBERT model)"),I9e.forEach(t),mXo=i(X),y5=n(X,"LI",{});var q9e=s(y5);The=n(q9e,"STRONG",{});var Ymt=s(The);gXo=r(Ymt,"roberta"),Ymt.forEach(t),hXo=r(q9e," \u2014 "),AV=n(q9e,"A",{href:!0});var Kmt=s(AV);pXo=r(Kmt,"RobertaForQuestionAnswering"),Kmt.forEach(t),_Xo=r(q9e," (RoBERTa model)"),q9e.forEach(t),uXo=i(X),L5=n(X,"LI",{});var N9e=s(L5);Mhe=n(N9e,"STRONG",{});var Zmt=s(Mhe);bXo=r(Zmt,"roformer"),Zmt.forEach(t),vXo=r(N9e," \u2014 "),yV=n(N9e,"A",{href:!0});var egt=s(yV);FXo=r(egt,"RoFormerForQuestionAnswering"),egt.forEach(t),TXo=r(N9e," (RoFormer model)"),N9e.forEach(t),MXo=i(X),x5=n(X,"LI",{});var j9e=s(x5);Ehe=n(j9e,"STRONG",{});var ogt=s(Ehe);EXo=r(ogt,"splinter"),ogt.forEach(t),CXo=r(j9e," \u2014 "),LV=n(j9e,"A",{href:!0});var rgt=s(LV);wXo=r(rgt,"SplinterForQuestionAnswering"),rgt.forEach(t),AXo=r(j9e," (Splinter model)"),j9e.forEach(t),yXo=i(X),$5=n(X,"LI",{});var D9e=s($5);Che=n(D9e,"STRONG",{});var tgt=s(Che);LXo=r(tgt,"squeezebert"),tgt.forEach(t),xXo=r(D9e," \u2014 "),xV=n(D9e,"A",{href:!0});var agt=s(xV);$Xo=r(agt,"SqueezeBertForQuestionAnswering"),agt.forEach(t),kXo=r(D9e," (SqueezeBERT model)"),D9e.forEach(t),SXo=i(X),k5=n(X,"LI",{});var G9e=s(k5);whe=n(G9e,"STRONG",{});var ngt=s(whe);RXo=r(ngt,"xlm"),ngt.forEach(t),PXo=r(G9e," \u2014 "),$V=n(G9e,"A",{href:!0});var sgt=s($V);BXo=r(sgt,"XLMForQuestionAnsweringSimple"),sgt.forEach(t),IXo=r(G9e," (XLM model)"),G9e.forEach(t),qXo=i(X),S5=n(X,"LI",{});var O9e=s(S5);Ahe=n(O9e,"STRONG",{});var lgt=s(Ahe);NXo=r(lgt,"xlm-roberta"),lgt.forEach(t),jXo=r(O9e," \u2014 "),kV=n(O9e,"A",{href:!0});var igt=s(kV);DXo=r(igt,"XLMRobertaForQuestionAnswering"),igt.forEach(t),GXo=r(O9e," (XLM-RoBERTa model)"),O9e.forEach(t),OXo=i(X),R5=n(X,"LI",{});var V9e=s(R5);yhe=n(V9e,"STRONG",{});var dgt=s(yhe);VXo=r(dgt,"xlm-roberta-xl"),dgt.forEach(t),XXo=r(V9e," \u2014 "),SV=n(V9e,"A",{href:!0});var cgt=s(SV);zXo=r(cgt,"XLMRobertaXLForQuestionAnswering"),cgt.forEach(t),WXo=r(V9e," (XLM-RoBERTa-XL model)"),V9e.forEach(t),QXo=i(X),P5=n(X,"LI",{});var X9e=s(P5);Lhe=n(X9e,"STRONG",{});var fgt=s(Lhe);HXo=r(fgt,"xlnet"),fgt.forEach(t),UXo=r(X9e," \u2014 "),RV=n(X9e,"A",{href:!0});var mgt=s(RV);JXo=r(mgt,"XLNetForQuestionAnsweringSimple"),mgt.forEach(t),YXo=r(X9e," (XLNet model)"),X9e.forEach(t),KXo=i(X),B5=n(X,"LI",{});var z9e=s(B5);xhe=n(z9e,"STRONG",{});var ggt=s(xhe);ZXo=r(ggt,"yoso"),ggt.forEach(t),ezo=r(z9e," \u2014 "),PV=n(z9e,"A",{href:!0});var hgt=s(PV);ozo=r(hgt,"YosoForQuestionAnswering"),hgt.forEach(t),rzo=r(z9e," (YOSO model)"),z9e.forEach(t),X.forEach(t),tzo=i(ca),I5=n(ca,"P",{});var W9e=s(I5);azo=r(W9e,"The model is set in evaluation mode by default using "),$he=n(W9e,"CODE",{});var pgt=s($he);nzo=r(pgt,"model.eval()"),pgt.forEach(t),szo=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(W9e,"CODE",{});var _gt=s(khe);lzo=r(_gt,"model.train()"),_gt.forEach(t),W9e.forEach(t),izo=i(ca),T(q5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Cqe=i(f),ed=n(f,"H2",{class:!0});var Lje=s(ed);N5=n(Lje,"A",{id:!0,class:!0,href:!0});var ugt=s(N5);She=n(ugt,"SPAN",{});var bgt=s(She);T(PL.$$.fragment,bgt),bgt.forEach(t),ugt.forEach(t),dzo=i(Lje),Rhe=n(Lje,"SPAN",{});var vgt=s(Rhe);czo=r(vgt,"AutoModelForTableQuestionAnswering"),vgt.forEach(t),Lje.forEach(t),wqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(BL.$$.fragment,Ys),fzo=i(Ys),od=n(Ys,"P",{});var tZ=s(od);mzo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BV=n(tZ,"A",{href:!0});var Fgt=s(BV);gzo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),hzo=r(tZ," class method or the "),IV=n(tZ,"A",{href:!0});var Tgt=s(IV);pzo=r(Tgt,"from_config()"),Tgt.forEach(t),_zo=r(tZ,` class
method.`),tZ.forEach(t),uzo=i(Ys),IL=n(Ys,"P",{});var xje=s(IL);bzo=r(xje,"This class cannot be instantiated directly using "),Phe=n(xje,"CODE",{});var Mgt=s(Phe);vzo=r(Mgt,"__init__()"),Mgt.forEach(t),Fzo=r(xje," (throws an error)."),xje.forEach(t),Tzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var I0=s(gt);T(qL.$$.fragment,I0),Mzo=i(I0),Bhe=n(I0,"P",{});var Egt=s(Bhe);Ezo=r(Egt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Egt.forEach(t),Czo=i(I0),rd=n(I0,"P",{});var aZ=s(rd);wzo=r(aZ,`Note:
Loading a model from its configuration file does `),Ihe=n(aZ,"STRONG",{});var Cgt=s(Ihe);Azo=r(Cgt,"not"),Cgt.forEach(t),yzo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(aZ,"A",{href:!0});var wgt=s(qV);Lzo=r(wgt,"from_pretrained()"),wgt.forEach(t),xzo=r(aZ," to load the model weights."),aZ.forEach(t),$zo=i(I0),T(j5.$$.fragment,I0),I0.forEach(t),kzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(NL.$$.fragment,fa),Szo=i(fa),qhe=n(fa,"P",{});var Agt=s(qhe);Rzo=r(Agt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Agt.forEach(t),Pzo=i(fa),Na=n(fa,"P",{});var q0=s(Na);Bzo=r(q0,"The model class to instantiate is selected based on the "),Nhe=n(q0,"CODE",{});var ygt=s(Nhe);Izo=r(ygt,"model_type"),ygt.forEach(t),qzo=r(q0,` property of the config object (either
passed as an argument or loaded from `),jhe=n(q0,"CODE",{});var Lgt=s(jhe);Nzo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),jzo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(q0,"CODE",{});var xgt=s(Dhe);Dzo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),Gzo=r(q0,":"),q0.forEach(t),Ozo=i(fa),Ghe=n(fa,"UL",{});var $gt=s(Ghe);D5=n($gt,"LI",{});var Q9e=s(D5);Ohe=n(Q9e,"STRONG",{});var kgt=s(Ohe);Vzo=r(kgt,"tapas"),kgt.forEach(t),Xzo=r(Q9e," \u2014 "),NV=n(Q9e,"A",{href:!0});var Sgt=s(NV);zzo=r(Sgt,"TapasForQuestionAnswering"),Sgt.forEach(t),Wzo=r(Q9e," (TAPAS model)"),Q9e.forEach(t),$gt.forEach(t),Qzo=i(fa),G5=n(fa,"P",{});var H9e=s(G5);Hzo=r(H9e,"The model is set in evaluation mode by default using "),Vhe=n(H9e,"CODE",{});var Rgt=s(Vhe);Uzo=r(Rgt,"model.eval()"),Rgt.forEach(t),Jzo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(H9e,"CODE",{});var Pgt=s(Xhe);Yzo=r(Pgt,"model.train()"),Pgt.forEach(t),H9e.forEach(t),Kzo=i(fa),T(O5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Aqe=i(f),td=n(f,"H2",{class:!0});var $je=s(td);V5=n($je,"A",{id:!0,class:!0,href:!0});var Bgt=s(V5);zhe=n(Bgt,"SPAN",{});var Igt=s(zhe);T(jL.$$.fragment,Igt),Igt.forEach(t),Bgt.forEach(t),Zzo=i($je),Whe=n($je,"SPAN",{});var qgt=s(Whe);eWo=r(qgt,"AutoModelForImageClassification"),qgt.forEach(t),$je.forEach(t),yqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(DL.$$.fragment,Ks),oWo=i(Ks),ad=n(Ks,"P",{});var nZ=s(ad);rWo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=n(nZ,"A",{href:!0});var Ngt=s(jV);tWo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),aWo=r(nZ," class method or the "),DV=n(nZ,"A",{href:!0});var jgt=s(DV);nWo=r(jgt,"from_config()"),jgt.forEach(t),sWo=r(nZ,` class
method.`),nZ.forEach(t),lWo=i(Ks),GL=n(Ks,"P",{});var kje=s(GL);iWo=r(kje,"This class cannot be instantiated directly using "),Qhe=n(kje,"CODE",{});var Dgt=s(Qhe);dWo=r(Dgt,"__init__()"),Dgt.forEach(t),cWo=r(kje," (throws an error)."),kje.forEach(t),fWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var N0=s(ht);T(OL.$$.fragment,N0),mWo=i(N0),Hhe=n(N0,"P",{});var Ggt=s(Hhe);gWo=r(Ggt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ggt.forEach(t),hWo=i(N0),nd=n(N0,"P",{});var sZ=s(nd);pWo=r(sZ,`Note:
Loading a model from its configuration file does `),Uhe=n(sZ,"STRONG",{});var Ogt=s(Uhe);_Wo=r(Ogt,"not"),Ogt.forEach(t),uWo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(sZ,"A",{href:!0});var Vgt=s(GV);bWo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),vWo=r(sZ," to load the model weights."),sZ.forEach(t),FWo=i(N0),T(X5.$$.fragment,N0),N0.forEach(t),TWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(VL.$$.fragment,ma),MWo=i(ma),Jhe=n(ma,"P",{});var Xgt=s(Jhe);EWo=r(Xgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xgt.forEach(t),CWo=i(ma),ja=n(ma,"P",{});var j0=s(ja);wWo=r(j0,"The model class to instantiate is selected based on the "),Yhe=n(j0,"CODE",{});var zgt=s(Yhe);AWo=r(zgt,"model_type"),zgt.forEach(t),yWo=r(j0,` property of the config object (either
passed as an argument or loaded from `),Khe=n(j0,"CODE",{});var Wgt=s(Khe);LWo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),xWo=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(j0,"CODE",{});var Qgt=s(Zhe);$Wo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),kWo=r(j0,":"),j0.forEach(t),SWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);z5=n(Ee,"LI",{});var U9e=s(z5);epe=n(U9e,"STRONG",{});var Hgt=s(epe);RWo=r(Hgt,"beit"),Hgt.forEach(t),PWo=r(U9e," \u2014 "),OV=n(U9e,"A",{href:!0});var Ugt=s(OV);BWo=r(Ugt,"BeitForImageClassification"),Ugt.forEach(t),IWo=r(U9e," (BEiT model)"),U9e.forEach(t),qWo=i(Ee),W5=n(Ee,"LI",{});var J9e=s(W5);ope=n(J9e,"STRONG",{});var Jgt=s(ope);NWo=r(Jgt,"convnext"),Jgt.forEach(t),jWo=r(J9e," \u2014 "),VV=n(J9e,"A",{href:!0});var Ygt=s(VV);DWo=r(Ygt,"ConvNextForImageClassification"),Ygt.forEach(t),GWo=r(J9e," (ConvNext model)"),J9e.forEach(t),OWo=i(Ee),Q5=n(Ee,"LI",{});var Y9e=s(Q5);rpe=n(Y9e,"STRONG",{});var Kgt=s(rpe);VWo=r(Kgt,"data2vec-vision"),Kgt.forEach(t),XWo=r(Y9e," \u2014 "),XV=n(Y9e,"A",{href:!0});var Zgt=s(XV);zWo=r(Zgt,"Data2VecVisionForImageClassification"),Zgt.forEach(t),WWo=r(Y9e," (Data2VecVision model)"),Y9e.forEach(t),QWo=i(Ee),Ps=n(Ee,"LI",{});var y$=s(Ps);tpe=n(y$,"STRONG",{});var eht=s(tpe);HWo=r(eht,"deit"),eht.forEach(t),UWo=r(y$," \u2014 "),zV=n(y$,"A",{href:!0});var oht=s(zV);JWo=r(oht,"DeiTForImageClassification"),oht.forEach(t),YWo=r(y$," or "),WV=n(y$,"A",{href:!0});var rht=s(WV);KWo=r(rht,"DeiTForImageClassificationWithTeacher"),rht.forEach(t),ZWo=r(y$," (DeiT model)"),y$.forEach(t),eQo=i(Ee),H5=n(Ee,"LI",{});var K9e=s(H5);ape=n(K9e,"STRONG",{});var tht=s(ape);oQo=r(tht,"imagegpt"),tht.forEach(t),rQo=r(K9e," \u2014 "),QV=n(K9e,"A",{href:!0});var aht=s(QV);tQo=r(aht,"ImageGPTForImageClassification"),aht.forEach(t),aQo=r(K9e," (ImageGPT model)"),K9e.forEach(t),nQo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);npe=n(gf,"STRONG",{});var nht=s(npe);sQo=r(nht,"perceiver"),nht.forEach(t),lQo=r(gf," \u2014 "),HV=n(gf,"A",{href:!0});var sht=s(HV);iQo=r(sht,"PerceiverForImageClassificationLearned"),sht.forEach(t),dQo=r(gf," or "),UV=n(gf,"A",{href:!0});var lht=s(UV);cQo=r(lht,"PerceiverForImageClassificationFourier"),lht.forEach(t),fQo=r(gf," or "),JV=n(gf,"A",{href:!0});var iht=s(JV);mQo=r(iht,"PerceiverForImageClassificationConvProcessing"),iht.forEach(t),gQo=r(gf," (Perceiver model)"),gf.forEach(t),hQo=i(Ee),U5=n(Ee,"LI",{});var Z9e=s(U5);spe=n(Z9e,"STRONG",{});var dht=s(spe);pQo=r(dht,"poolformer"),dht.forEach(t),_Qo=r(Z9e," \u2014 "),YV=n(Z9e,"A",{href:!0});var cht=s(YV);uQo=r(cht,"PoolFormerForImageClassification"),cht.forEach(t),bQo=r(Z9e," (PoolFormer model)"),Z9e.forEach(t),vQo=i(Ee),J5=n(Ee,"LI",{});var e$e=s(J5);lpe=n(e$e,"STRONG",{});var fht=s(lpe);FQo=r(fht,"regnet"),fht.forEach(t),TQo=r(e$e," \u2014 "),KV=n(e$e,"A",{href:!0});var mht=s(KV);MQo=r(mht,"RegNetForImageClassification"),mht.forEach(t),EQo=r(e$e," (RegNet model)"),e$e.forEach(t),CQo=i(Ee),Y5=n(Ee,"LI",{});var o$e=s(Y5);ipe=n(o$e,"STRONG",{});var ght=s(ipe);wQo=r(ght,"resnet"),ght.forEach(t),AQo=r(o$e," \u2014 "),ZV=n(o$e,"A",{href:!0});var hht=s(ZV);yQo=r(hht,"ResNetForImageClassification"),hht.forEach(t),LQo=r(o$e," (ResNet model)"),o$e.forEach(t),xQo=i(Ee),K5=n(Ee,"LI",{});var r$e=s(K5);dpe=n(r$e,"STRONG",{});var pht=s(dpe);$Qo=r(pht,"segformer"),pht.forEach(t),kQo=r(r$e," \u2014 "),eX=n(r$e,"A",{href:!0});var _ht=s(eX);SQo=r(_ht,"SegformerForImageClassification"),_ht.forEach(t),RQo=r(r$e," (SegFormer model)"),r$e.forEach(t),PQo=i(Ee),Z5=n(Ee,"LI",{});var t$e=s(Z5);cpe=n(t$e,"STRONG",{});var uht=s(cpe);BQo=r(uht,"swin"),uht.forEach(t),IQo=r(t$e," \u2014 "),oX=n(t$e,"A",{href:!0});var bht=s(oX);qQo=r(bht,"SwinForImageClassification"),bht.forEach(t),NQo=r(t$e," (Swin model)"),t$e.forEach(t),jQo=i(Ee),ev=n(Ee,"LI",{});var a$e=s(ev);fpe=n(a$e,"STRONG",{});var vht=s(fpe);DQo=r(vht,"van"),vht.forEach(t),GQo=r(a$e," \u2014 "),rX=n(a$e,"A",{href:!0});var Fht=s(rX);OQo=r(Fht,"VanForImageClassification"),Fht.forEach(t),VQo=r(a$e," (VAN model)"),a$e.forEach(t),XQo=i(Ee),ov=n(Ee,"LI",{});var n$e=s(ov);mpe=n(n$e,"STRONG",{});var Tht=s(mpe);zQo=r(Tht,"vit"),Tht.forEach(t),WQo=r(n$e," \u2014 "),tX=n(n$e,"A",{href:!0});var Mht=s(tX);QQo=r(Mht,"ViTForImageClassification"),Mht.forEach(t),HQo=r(n$e," (ViT model)"),n$e.forEach(t),Ee.forEach(t),UQo=i(ma),rv=n(ma,"P",{});var s$e=s(rv);JQo=r(s$e,"The model is set in evaluation mode by default using "),gpe=n(s$e,"CODE",{});var Eht=s(gpe);YQo=r(Eht,"model.eval()"),Eht.forEach(t),KQo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(s$e,"CODE",{});var Cht=s(hpe);ZQo=r(Cht,"model.train()"),Cht.forEach(t),s$e.forEach(t),eHo=i(ma),T(tv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Lqe=i(f),sd=n(f,"H2",{class:!0});var Sje=s(sd);av=n(Sje,"A",{id:!0,class:!0,href:!0});var wht=s(av);ppe=n(wht,"SPAN",{});var Aht=s(ppe);T(XL.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),oHo=i(Sje),_pe=n(Sje,"SPAN",{});var yht=s(_pe);rHo=r(yht,"AutoModelForVision2Seq"),yht.forEach(t),Sje.forEach(t),xqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(zL.$$.fragment,Zs),tHo=i(Zs),ld=n(Zs,"P",{});var lZ=s(ld);aHo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aX=n(lZ,"A",{href:!0});var Lht=s(aX);nHo=r(Lht,"from_pretrained()"),Lht.forEach(t),sHo=r(lZ," class method or the "),nX=n(lZ,"A",{href:!0});var xht=s(nX);lHo=r(xht,"from_config()"),xht.forEach(t),iHo=r(lZ,` class
method.`),lZ.forEach(t),dHo=i(Zs),WL=n(Zs,"P",{});var Rje=s(WL);cHo=r(Rje,"This class cannot be instantiated directly using "),upe=n(Rje,"CODE",{});var $ht=s(upe);fHo=r($ht,"__init__()"),$ht.forEach(t),mHo=r(Rje," (throws an error)."),Rje.forEach(t),gHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var D0=s(_t);T(QL.$$.fragment,D0),hHo=i(D0),bpe=n(D0,"P",{});var kht=s(bpe);pHo=r(kht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kht.forEach(t),_Ho=i(D0),id=n(D0,"P",{});var iZ=s(id);uHo=r(iZ,`Note:
Loading a model from its configuration file does `),vpe=n(iZ,"STRONG",{});var Sht=s(vpe);bHo=r(Sht,"not"),Sht.forEach(t),vHo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(iZ,"A",{href:!0});var Rht=s(sX);FHo=r(Rht,"from_pretrained()"),Rht.forEach(t),THo=r(iZ," to load the model weights."),iZ.forEach(t),MHo=i(D0),T(nv.$$.fragment,D0),D0.forEach(t),EHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(HL.$$.fragment,ga),CHo=i(ga),Fpe=n(ga,"P",{});var Pht=s(Fpe);wHo=r(Pht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pht.forEach(t),AHo=i(ga),Da=n(ga,"P",{});var G0=s(Da);yHo=r(G0,"The model class to instantiate is selected based on the "),Tpe=n(G0,"CODE",{});var Bht=s(Tpe);LHo=r(Bht,"model_type"),Bht.forEach(t),xHo=r(G0,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(G0,"CODE",{});var Iht=s(Mpe);$Ho=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),kHo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(G0,"CODE",{});var qht=s(Epe);SHo=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),RHo=r(G0,":"),G0.forEach(t),PHo=i(ga),Cpe=n(ga,"UL",{});var Nht=s(Cpe);sv=n(Nht,"LI",{});var l$e=s(sv);wpe=n(l$e,"STRONG",{});var jht=s(wpe);BHo=r(jht,"vision-encoder-decoder"),jht.forEach(t),IHo=r(l$e," \u2014 "),lX=n(l$e,"A",{href:!0});var Dht=s(lX);qHo=r(Dht,"VisionEncoderDecoderModel"),Dht.forEach(t),NHo=r(l$e," (Vision Encoder decoder model)"),l$e.forEach(t),Nht.forEach(t),jHo=i(ga),lv=n(ga,"P",{});var i$e=s(lv);DHo=r(i$e,"The model is set in evaluation mode by default using "),Ape=n(i$e,"CODE",{});var Ght=s(Ape);GHo=r(Ght,"model.eval()"),Ght.forEach(t),OHo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(i$e,"CODE",{});var Oht=s(ype);VHo=r(Oht,"model.train()"),Oht.forEach(t),i$e.forEach(t),XHo=i(ga),T(iv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),$qe=i(f),dd=n(f,"H2",{class:!0});var Pje=s(dd);dv=n(Pje,"A",{id:!0,class:!0,href:!0});var Vht=s(dv);Lpe=n(Vht,"SPAN",{});var Xht=s(Lpe);T(UL.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),zHo=i(Pje),xpe=n(Pje,"SPAN",{});var zht=s(xpe);WHo=r(zht,"AutoModelForAudioClassification"),zht.forEach(t),Pje.forEach(t),kqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(JL.$$.fragment,el),QHo=i(el),cd=n(el,"P",{});var dZ=s(cd);HHo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iX=n(dZ,"A",{href:!0});var Wht=s(iX);UHo=r(Wht,"from_pretrained()"),Wht.forEach(t),JHo=r(dZ," class method or the "),dX=n(dZ,"A",{href:!0});var Qht=s(dX);YHo=r(Qht,"from_config()"),Qht.forEach(t),KHo=r(dZ,` class
method.`),dZ.forEach(t),ZHo=i(el),YL=n(el,"P",{});var Bje=s(YL);eUo=r(Bje,"This class cannot be instantiated directly using "),$pe=n(Bje,"CODE",{});var Hht=s($pe);oUo=r(Hht,"__init__()"),Hht.forEach(t),rUo=r(Bje," (throws an error)."),Bje.forEach(t),tUo=i(el),ut=n(el,"DIV",{class:!0});var O0=s(ut);T(KL.$$.fragment,O0),aUo=i(O0),kpe=n(O0,"P",{});var Uht=s(kpe);nUo=r(Uht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Uht.forEach(t),sUo=i(O0),fd=n(O0,"P",{});var cZ=s(fd);lUo=r(cZ,`Note:
Loading a model from its configuration file does `),Spe=n(cZ,"STRONG",{});var Jht=s(Spe);iUo=r(Jht,"not"),Jht.forEach(t),dUo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(cZ,"A",{href:!0});var Yht=s(cX);cUo=r(Yht,"from_pretrained()"),Yht.forEach(t),fUo=r(cZ," to load the model weights."),cZ.forEach(t),mUo=i(O0),T(cv.$$.fragment,O0),O0.forEach(t),gUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(ZL.$$.fragment,ha),hUo=i(ha),Rpe=n(ha,"P",{});var Kht=s(Rpe);pUo=r(Kht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Kht.forEach(t),_Uo=i(ha),Ga=n(ha,"P",{});var V0=s(Ga);uUo=r(V0,"The model class to instantiate is selected based on the "),Ppe=n(V0,"CODE",{});var Zht=s(Ppe);bUo=r(Zht,"model_type"),Zht.forEach(t),vUo=r(V0,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(V0,"CODE",{});var ept=s(Bpe);FUo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),TUo=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(V0,"CODE",{});var opt=s(Ipe);MUo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),EUo=r(V0,":"),V0.forEach(t),CUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);fv=n(Oe,"LI",{});var d$e=s(fv);qpe=n(d$e,"STRONG",{});var rpt=s(qpe);wUo=r(rpt,"data2vec-audio"),rpt.forEach(t),AUo=r(d$e," \u2014 "),fX=n(d$e,"A",{href:!0});var tpt=s(fX);yUo=r(tpt,"Data2VecAudioForSequenceClassification"),tpt.forEach(t),LUo=r(d$e," (Data2VecAudio model)"),d$e.forEach(t),xUo=i(Oe),mv=n(Oe,"LI",{});var c$e=s(mv);Npe=n(c$e,"STRONG",{});var apt=s(Npe);$Uo=r(apt,"hubert"),apt.forEach(t),kUo=r(c$e," \u2014 "),mX=n(c$e,"A",{href:!0});var npt=s(mX);SUo=r(npt,"HubertForSequenceClassification"),npt.forEach(t),RUo=r(c$e," (Hubert model)"),c$e.forEach(t),PUo=i(Oe),gv=n(Oe,"LI",{});var f$e=s(gv);jpe=n(f$e,"STRONG",{});var spt=s(jpe);BUo=r(spt,"sew"),spt.forEach(t),IUo=r(f$e," \u2014 "),gX=n(f$e,"A",{href:!0});var lpt=s(gX);qUo=r(lpt,"SEWForSequenceClassification"),lpt.forEach(t),NUo=r(f$e," (SEW model)"),f$e.forEach(t),jUo=i(Oe),hv=n(Oe,"LI",{});var m$e=s(hv);Dpe=n(m$e,"STRONG",{});var ipt=s(Dpe);DUo=r(ipt,"sew-d"),ipt.forEach(t),GUo=r(m$e," \u2014 "),hX=n(m$e,"A",{href:!0});var dpt=s(hX);OUo=r(dpt,"SEWDForSequenceClassification"),dpt.forEach(t),VUo=r(m$e," (SEW-D model)"),m$e.forEach(t),XUo=i(Oe),pv=n(Oe,"LI",{});var g$e=s(pv);Gpe=n(g$e,"STRONG",{});var cpt=s(Gpe);zUo=r(cpt,"unispeech"),cpt.forEach(t),WUo=r(g$e," \u2014 "),pX=n(g$e,"A",{href:!0});var fpt=s(pX);QUo=r(fpt,"UniSpeechForSequenceClassification"),fpt.forEach(t),HUo=r(g$e," (UniSpeech model)"),g$e.forEach(t),UUo=i(Oe),_v=n(Oe,"LI",{});var h$e=s(_v);Ope=n(h$e,"STRONG",{});var mpt=s(Ope);JUo=r(mpt,"unispeech-sat"),mpt.forEach(t),YUo=r(h$e," \u2014 "),_X=n(h$e,"A",{href:!0});var gpt=s(_X);KUo=r(gpt,"UniSpeechSatForSequenceClassification"),gpt.forEach(t),ZUo=r(h$e," (UniSpeechSat model)"),h$e.forEach(t),eJo=i(Oe),uv=n(Oe,"LI",{});var p$e=s(uv);Vpe=n(p$e,"STRONG",{});var hpt=s(Vpe);oJo=r(hpt,"wav2vec2"),hpt.forEach(t),rJo=r(p$e," \u2014 "),uX=n(p$e,"A",{href:!0});var ppt=s(uX);tJo=r(ppt,"Wav2Vec2ForSequenceClassification"),ppt.forEach(t),aJo=r(p$e," (Wav2Vec2 model)"),p$e.forEach(t),nJo=i(Oe),bv=n(Oe,"LI",{});var _$e=s(bv);Xpe=n(_$e,"STRONG",{});var _pt=s(Xpe);sJo=r(_pt,"wav2vec2-conformer"),_pt.forEach(t),lJo=r(_$e," \u2014 "),bX=n(_$e,"A",{href:!0});var upt=s(bX);iJo=r(upt,"Wav2Vec2ConformerForSequenceClassification"),upt.forEach(t),dJo=r(_$e," (Wav2Vec2-Conformer model)"),_$e.forEach(t),cJo=i(Oe),vv=n(Oe,"LI",{});var u$e=s(vv);zpe=n(u$e,"STRONG",{});var bpt=s(zpe);fJo=r(bpt,"wavlm"),bpt.forEach(t),mJo=r(u$e," \u2014 "),vX=n(u$e,"A",{href:!0});var vpt=s(vX);gJo=r(vpt,"WavLMForSequenceClassification"),vpt.forEach(t),hJo=r(u$e," (WavLM model)"),u$e.forEach(t),Oe.forEach(t),pJo=i(ha),Fv=n(ha,"P",{});var b$e=s(Fv);_Jo=r(b$e,"The model is set in evaluation mode by default using "),Wpe=n(b$e,"CODE",{});var Fpt=s(Wpe);uJo=r(Fpt,"model.eval()"),Fpt.forEach(t),bJo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(b$e,"CODE",{});var Tpt=s(Qpe);vJo=r(Tpt,"model.train()"),Tpt.forEach(t),b$e.forEach(t),FJo=i(ha),T(Tv.$$.fragment,ha),ha.forEach(t),el.forEach(t),Sqe=i(f),md=n(f,"H2",{class:!0});var Ije=s(md);Mv=n(Ije,"A",{id:!0,class:!0,href:!0});var Mpt=s(Mv);Hpe=n(Mpt,"SPAN",{});var Ept=s(Hpe);T(e8.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),TJo=i(Ije),Upe=n(Ije,"SPAN",{});var Cpt=s(Upe);MJo=r(Cpt,"AutoModelForAudioFrameClassification"),Cpt.forEach(t),Ije.forEach(t),Rqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(o8.$$.fragment,ol),EJo=i(ol),gd=n(ol,"P",{});var fZ=s(gd);CJo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FX=n(fZ,"A",{href:!0});var wpt=s(FX);wJo=r(wpt,"from_pretrained()"),wpt.forEach(t),AJo=r(fZ," class method or the "),TX=n(fZ,"A",{href:!0});var Apt=s(TX);yJo=r(Apt,"from_config()"),Apt.forEach(t),LJo=r(fZ,` class
method.`),fZ.forEach(t),xJo=i(ol),r8=n(ol,"P",{});var qje=s(r8);$Jo=r(qje,"This class cannot be instantiated directly using "),Jpe=n(qje,"CODE",{});var ypt=s(Jpe);kJo=r(ypt,"__init__()"),ypt.forEach(t),SJo=r(qje," (throws an error)."),qje.forEach(t),RJo=i(ol),bt=n(ol,"DIV",{class:!0});var X0=s(bt);T(t8.$$.fragment,X0),PJo=i(X0),Ype=n(X0,"P",{});var Lpt=s(Ype);BJo=r(Lpt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Lpt.forEach(t),IJo=i(X0),hd=n(X0,"P",{});var mZ=s(hd);qJo=r(mZ,`Note:
Loading a model from its configuration file does `),Kpe=n(mZ,"STRONG",{});var xpt=s(Kpe);NJo=r(xpt,"not"),xpt.forEach(t),jJo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(mZ,"A",{href:!0});var $pt=s(MX);DJo=r($pt,"from_pretrained()"),$pt.forEach(t),GJo=r(mZ," to load the model weights."),mZ.forEach(t),OJo=i(X0),T(Ev.$$.fragment,X0),X0.forEach(t),VJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(a8.$$.fragment,pa),XJo=i(pa),Zpe=n(pa,"P",{});var kpt=s(Zpe);zJo=r(kpt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kpt.forEach(t),WJo=i(pa),Oa=n(pa,"P",{});var z0=s(Oa);QJo=r(z0,"The model class to instantiate is selected based on the "),e_e=n(z0,"CODE",{});var Spt=s(e_e);HJo=r(Spt,"model_type"),Spt.forEach(t),UJo=r(z0,` property of the config object (either
passed as an argument or loaded from `),o_e=n(z0,"CODE",{});var Rpt=s(o_e);JJo=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),YJo=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(z0,"CODE",{});var Ppt=s(r_e);KJo=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),ZJo=r(z0,":"),z0.forEach(t),eYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);Cv=n(rl,"LI",{});var v$e=s(Cv);t_e=n(v$e,"STRONG",{});var Bpt=s(t_e);oYo=r(Bpt,"data2vec-audio"),Bpt.forEach(t),rYo=r(v$e," \u2014 "),EX=n(v$e,"A",{href:!0});var Ipt=s(EX);tYo=r(Ipt,"Data2VecAudioForAudioFrameClassification"),Ipt.forEach(t),aYo=r(v$e," (Data2VecAudio model)"),v$e.forEach(t),nYo=i(rl),wv=n(rl,"LI",{});var F$e=s(wv);a_e=n(F$e,"STRONG",{});var qpt=s(a_e);sYo=r(qpt,"unispeech-sat"),qpt.forEach(t),lYo=r(F$e," \u2014 "),CX=n(F$e,"A",{href:!0});var Npt=s(CX);iYo=r(Npt,"UniSpeechSatForAudioFrameClassification"),Npt.forEach(t),dYo=r(F$e," (UniSpeechSat model)"),F$e.forEach(t),cYo=i(rl),Av=n(rl,"LI",{});var T$e=s(Av);n_e=n(T$e,"STRONG",{});var jpt=s(n_e);fYo=r(jpt,"wav2vec2"),jpt.forEach(t),mYo=r(T$e," \u2014 "),wX=n(T$e,"A",{href:!0});var Dpt=s(wX);gYo=r(Dpt,"Wav2Vec2ForAudioFrameClassification"),Dpt.forEach(t),hYo=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),pYo=i(rl),yv=n(rl,"LI",{});var M$e=s(yv);s_e=n(M$e,"STRONG",{});var Gpt=s(s_e);_Yo=r(Gpt,"wav2vec2-conformer"),Gpt.forEach(t),uYo=r(M$e," \u2014 "),AX=n(M$e,"A",{href:!0});var Opt=s(AX);bYo=r(Opt,"Wav2Vec2ConformerForAudioFrameClassification"),Opt.forEach(t),vYo=r(M$e," (Wav2Vec2-Conformer model)"),M$e.forEach(t),FYo=i(rl),Lv=n(rl,"LI",{});var E$e=s(Lv);l_e=n(E$e,"STRONG",{});var Vpt=s(l_e);TYo=r(Vpt,"wavlm"),Vpt.forEach(t),MYo=r(E$e," \u2014 "),yX=n(E$e,"A",{href:!0});var Xpt=s(yX);EYo=r(Xpt,"WavLMForAudioFrameClassification"),Xpt.forEach(t),CYo=r(E$e," (WavLM model)"),E$e.forEach(t),rl.forEach(t),wYo=i(pa),xv=n(pa,"P",{});var C$e=s(xv);AYo=r(C$e,"The model is set in evaluation mode by default using "),i_e=n(C$e,"CODE",{});var zpt=s(i_e);yYo=r(zpt,"model.eval()"),zpt.forEach(t),LYo=r(C$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(C$e,"CODE",{});var Wpt=s(d_e);xYo=r(Wpt,"model.train()"),Wpt.forEach(t),C$e.forEach(t),$Yo=i(pa),T($v.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Pqe=i(f),pd=n(f,"H2",{class:!0});var Nje=s(pd);kv=n(Nje,"A",{id:!0,class:!0,href:!0});var Qpt=s(kv);c_e=n(Qpt,"SPAN",{});var Hpt=s(c_e);T(n8.$$.fragment,Hpt),Hpt.forEach(t),Qpt.forEach(t),kYo=i(Nje),f_e=n(Nje,"SPAN",{});var Upt=s(f_e);SYo=r(Upt,"AutoModelForCTC"),Upt.forEach(t),Nje.forEach(t),Bqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(s8.$$.fragment,tl),RYo=i(tl),_d=n(tl,"P",{});var gZ=s(_d);PYo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),LX=n(gZ,"A",{href:!0});var Jpt=s(LX);BYo=r(Jpt,"from_pretrained()"),Jpt.forEach(t),IYo=r(gZ," class method or the "),xX=n(gZ,"A",{href:!0});var Ypt=s(xX);qYo=r(Ypt,"from_config()"),Ypt.forEach(t),NYo=r(gZ,` class
method.`),gZ.forEach(t),jYo=i(tl),l8=n(tl,"P",{});var jje=s(l8);DYo=r(jje,"This class cannot be instantiated directly using "),m_e=n(jje,"CODE",{});var Kpt=s(m_e);GYo=r(Kpt,"__init__()"),Kpt.forEach(t),OYo=r(jje," (throws an error)."),jje.forEach(t),VYo=i(tl),vt=n(tl,"DIV",{class:!0});var W0=s(vt);T(i8.$$.fragment,W0),XYo=i(W0),g_e=n(W0,"P",{});var Zpt=s(g_e);zYo=r(Zpt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Zpt.forEach(t),WYo=i(W0),ud=n(W0,"P",{});var hZ=s(ud);QYo=r(hZ,`Note:
Loading a model from its configuration file does `),h_e=n(hZ,"STRONG",{});var e_t=s(h_e);HYo=r(e_t,"not"),e_t.forEach(t),UYo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(hZ,"A",{href:!0});var o_t=s($X);JYo=r(o_t,"from_pretrained()"),o_t.forEach(t),YYo=r(hZ," to load the model weights."),hZ.forEach(t),KYo=i(W0),T(Sv.$$.fragment,W0),W0.forEach(t),ZYo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(d8.$$.fragment,_a),eKo=i(_a),p_e=n(_a,"P",{});var r_t=s(p_e);oKo=r(r_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),r_t.forEach(t),rKo=i(_a),Va=n(_a,"P",{});var Q0=s(Va);tKo=r(Q0,"The model class to instantiate is selected based on the "),__e=n(Q0,"CODE",{});var t_t=s(__e);aKo=r(t_t,"model_type"),t_t.forEach(t),nKo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),u_e=n(Q0,"CODE",{});var a_t=s(u_e);sKo=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),lKo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(Q0,"CODE",{});var n_t=s(b_e);iKo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),dKo=r(Q0,":"),Q0.forEach(t),cKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);Rv=n(Ve,"LI",{});var w$e=s(Rv);v_e=n(w$e,"STRONG",{});var s_t=s(v_e);fKo=r(s_t,"data2vec-audio"),s_t.forEach(t),mKo=r(w$e," \u2014 "),kX=n(w$e,"A",{href:!0});var l_t=s(kX);gKo=r(l_t,"Data2VecAudioForCTC"),l_t.forEach(t),hKo=r(w$e," (Data2VecAudio model)"),w$e.forEach(t),pKo=i(Ve),Pv=n(Ve,"LI",{});var A$e=s(Pv);F_e=n(A$e,"STRONG",{});var i_t=s(F_e);_Ko=r(i_t,"hubert"),i_t.forEach(t),uKo=r(A$e," \u2014 "),SX=n(A$e,"A",{href:!0});var d_t=s(SX);bKo=r(d_t,"HubertForCTC"),d_t.forEach(t),vKo=r(A$e," (Hubert model)"),A$e.forEach(t),FKo=i(Ve),Bv=n(Ve,"LI",{});var y$e=s(Bv);T_e=n(y$e,"STRONG",{});var c_t=s(T_e);TKo=r(c_t,"sew"),c_t.forEach(t),MKo=r(y$e," \u2014 "),RX=n(y$e,"A",{href:!0});var f_t=s(RX);EKo=r(f_t,"SEWForCTC"),f_t.forEach(t),CKo=r(y$e," (SEW model)"),y$e.forEach(t),wKo=i(Ve),Iv=n(Ve,"LI",{});var L$e=s(Iv);M_e=n(L$e,"STRONG",{});var m_t=s(M_e);AKo=r(m_t,"sew-d"),m_t.forEach(t),yKo=r(L$e," \u2014 "),PX=n(L$e,"A",{href:!0});var g_t=s(PX);LKo=r(g_t,"SEWDForCTC"),g_t.forEach(t),xKo=r(L$e," (SEW-D model)"),L$e.forEach(t),$Ko=i(Ve),qv=n(Ve,"LI",{});var x$e=s(qv);E_e=n(x$e,"STRONG",{});var h_t=s(E_e);kKo=r(h_t,"unispeech"),h_t.forEach(t),SKo=r(x$e," \u2014 "),BX=n(x$e,"A",{href:!0});var p_t=s(BX);RKo=r(p_t,"UniSpeechForCTC"),p_t.forEach(t),PKo=r(x$e," (UniSpeech model)"),x$e.forEach(t),BKo=i(Ve),Nv=n(Ve,"LI",{});var $$e=s(Nv);C_e=n($$e,"STRONG",{});var __t=s(C_e);IKo=r(__t,"unispeech-sat"),__t.forEach(t),qKo=r($$e," \u2014 "),IX=n($$e,"A",{href:!0});var u_t=s(IX);NKo=r(u_t,"UniSpeechSatForCTC"),u_t.forEach(t),jKo=r($$e," (UniSpeechSat model)"),$$e.forEach(t),DKo=i(Ve),jv=n(Ve,"LI",{});var k$e=s(jv);w_e=n(k$e,"STRONG",{});var b_t=s(w_e);GKo=r(b_t,"wav2vec2"),b_t.forEach(t),OKo=r(k$e," \u2014 "),qX=n(k$e,"A",{href:!0});var v_t=s(qX);VKo=r(v_t,"Wav2Vec2ForCTC"),v_t.forEach(t),XKo=r(k$e," (Wav2Vec2 model)"),k$e.forEach(t),zKo=i(Ve),Dv=n(Ve,"LI",{});var S$e=s(Dv);A_e=n(S$e,"STRONG",{});var F_t=s(A_e);WKo=r(F_t,"wav2vec2-conformer"),F_t.forEach(t),QKo=r(S$e," \u2014 "),NX=n(S$e,"A",{href:!0});var T_t=s(NX);HKo=r(T_t,"Wav2Vec2ConformerForCTC"),T_t.forEach(t),UKo=r(S$e," (Wav2Vec2-Conformer model)"),S$e.forEach(t),JKo=i(Ve),Gv=n(Ve,"LI",{});var R$e=s(Gv);y_e=n(R$e,"STRONG",{});var M_t=s(y_e);YKo=r(M_t,"wavlm"),M_t.forEach(t),KKo=r(R$e," \u2014 "),jX=n(R$e,"A",{href:!0});var E_t=s(jX);ZKo=r(E_t,"WavLMForCTC"),E_t.forEach(t),eZo=r(R$e," (WavLM model)"),R$e.forEach(t),Ve.forEach(t),oZo=i(_a),Ov=n(_a,"P",{});var P$e=s(Ov);rZo=r(P$e,"The model is set in evaluation mode by default using "),L_e=n(P$e,"CODE",{});var C_t=s(L_e);tZo=r(C_t,"model.eval()"),C_t.forEach(t),aZo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(P$e,"CODE",{});var w_t=s(x_e);nZo=r(w_t,"model.train()"),w_t.forEach(t),P$e.forEach(t),sZo=i(_a),T(Vv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Iqe=i(f),bd=n(f,"H2",{class:!0});var Dje=s(bd);Xv=n(Dje,"A",{id:!0,class:!0,href:!0});var A_t=s(Xv);$_e=n(A_t,"SPAN",{});var y_t=s($_e);T(c8.$$.fragment,y_t),y_t.forEach(t),A_t.forEach(t),lZo=i(Dje),k_e=n(Dje,"SPAN",{});var L_t=s(k_e);iZo=r(L_t,"AutoModelForSpeechSeq2Seq"),L_t.forEach(t),Dje.forEach(t),qqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(f8.$$.fragment,al),dZo=i(al),vd=n(al,"P",{});var pZ=s(vd);cZo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DX=n(pZ,"A",{href:!0});var x_t=s(DX);fZo=r(x_t,"from_pretrained()"),x_t.forEach(t),mZo=r(pZ," class method or the "),GX=n(pZ,"A",{href:!0});var $_t=s(GX);gZo=r($_t,"from_config()"),$_t.forEach(t),hZo=r(pZ,` class
method.`),pZ.forEach(t),pZo=i(al),m8=n(al,"P",{});var Gje=s(m8);_Zo=r(Gje,"This class cannot be instantiated directly using "),S_e=n(Gje,"CODE",{});var k_t=s(S_e);uZo=r(k_t,"__init__()"),k_t.forEach(t),bZo=r(Gje," (throws an error)."),Gje.forEach(t),vZo=i(al),Ft=n(al,"DIV",{class:!0});var H0=s(Ft);T(g8.$$.fragment,H0),FZo=i(H0),R_e=n(H0,"P",{});var S_t=s(R_e);TZo=r(S_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),S_t.forEach(t),MZo=i(H0),Fd=n(H0,"P",{});var _Z=s(Fd);EZo=r(_Z,`Note:
Loading a model from its configuration file does `),P_e=n(_Z,"STRONG",{});var R_t=s(P_e);CZo=r(R_t,"not"),R_t.forEach(t),wZo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(_Z,"A",{href:!0});var P_t=s(OX);AZo=r(P_t,"from_pretrained()"),P_t.forEach(t),yZo=r(_Z," to load the model weights."),_Z.forEach(t),LZo=i(H0),T(zv.$$.fragment,H0),H0.forEach(t),xZo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(h8.$$.fragment,ua),$Zo=i(ua),B_e=n(ua,"P",{});var B_t=s(B_e);kZo=r(B_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),B_t.forEach(t),SZo=i(ua),Xa=n(ua,"P",{});var U0=s(Xa);RZo=r(U0,"The model class to instantiate is selected based on the "),I_e=n(U0,"CODE",{});var I_t=s(I_e);PZo=r(I_t,"model_type"),I_t.forEach(t),BZo=r(U0,` property of the config object (either
passed as an argument or loaded from `),q_e=n(U0,"CODE",{});var q_t=s(q_e);IZo=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),qZo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(U0,"CODE",{});var N_t=s(N_e);NZo=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),jZo=r(U0,":"),U0.forEach(t),DZo=i(ua),p8=n(ua,"UL",{});var Oje=s(p8);Wv=n(Oje,"LI",{});var B$e=s(Wv);j_e=n(B$e,"STRONG",{});var j_t=s(j_e);GZo=r(j_t,"speech-encoder-decoder"),j_t.forEach(t),OZo=r(B$e," \u2014 "),VX=n(B$e,"A",{href:!0});var D_t=s(VX);VZo=r(D_t,"SpeechEncoderDecoderModel"),D_t.forEach(t),XZo=r(B$e," (Speech Encoder decoder model)"),B$e.forEach(t),zZo=i(Oje),Qv=n(Oje,"LI",{});var I$e=s(Qv);D_e=n(I$e,"STRONG",{});var G_t=s(D_e);WZo=r(G_t,"speech_to_text"),G_t.forEach(t),QZo=r(I$e," \u2014 "),XX=n(I$e,"A",{href:!0});var O_t=s(XX);HZo=r(O_t,"Speech2TextForConditionalGeneration"),O_t.forEach(t),UZo=r(I$e," (Speech2Text model)"),I$e.forEach(t),Oje.forEach(t),JZo=i(ua),Hv=n(ua,"P",{});var q$e=s(Hv);YZo=r(q$e,"The model is set in evaluation mode by default using "),G_e=n(q$e,"CODE",{});var V_t=s(G_e);KZo=r(V_t,"model.eval()"),V_t.forEach(t),ZZo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(q$e,"CODE",{});var X_t=s(O_e);eer=r(X_t,"model.train()"),X_t.forEach(t),q$e.forEach(t),oer=i(ua),T(Uv.$$.fragment,ua),ua.forEach(t),al.forEach(t),Nqe=i(f),Td=n(f,"H2",{class:!0});var Vje=s(Td);Jv=n(Vje,"A",{id:!0,class:!0,href:!0});var z_t=s(Jv);V_e=n(z_t,"SPAN",{});var W_t=s(V_e);T(_8.$$.fragment,W_t),W_t.forEach(t),z_t.forEach(t),rer=i(Vje),X_e=n(Vje,"SPAN",{});var Q_t=s(X_e);ter=r(Q_t,"AutoModelForAudioXVector"),Q_t.forEach(t),Vje.forEach(t),jqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(u8.$$.fragment,nl),aer=i(nl),Md=n(nl,"P",{});var uZ=s(Md);ner=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zX=n(uZ,"A",{href:!0});var H_t=s(zX);ser=r(H_t,"from_pretrained()"),H_t.forEach(t),ler=r(uZ," class method or the "),WX=n(uZ,"A",{href:!0});var U_t=s(WX);ier=r(U_t,"from_config()"),U_t.forEach(t),der=r(uZ,` class
method.`),uZ.forEach(t),cer=i(nl),b8=n(nl,"P",{});var Xje=s(b8);fer=r(Xje,"This class cannot be instantiated directly using "),z_e=n(Xje,"CODE",{});var J_t=s(z_e);mer=r(J_t,"__init__()"),J_t.forEach(t),ger=r(Xje," (throws an error)."),Xje.forEach(t),her=i(nl),Tt=n(nl,"DIV",{class:!0});var J0=s(Tt);T(v8.$$.fragment,J0),per=i(J0),W_e=n(J0,"P",{});var Y_t=s(W_e);_er=r(Y_t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Y_t.forEach(t),uer=i(J0),Ed=n(J0,"P",{});var bZ=s(Ed);ber=r(bZ,`Note:
Loading a model from its configuration file does `),Q_e=n(bZ,"STRONG",{});var K_t=s(Q_e);ver=r(K_t,"not"),K_t.forEach(t),Fer=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(bZ,"A",{href:!0});var Z_t=s(QX);Ter=r(Z_t,"from_pretrained()"),Z_t.forEach(t),Mer=r(bZ," to load the model weights."),bZ.forEach(t),Eer=i(J0),T(Yv.$$.fragment,J0),J0.forEach(t),Cer=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(F8.$$.fragment,ba),wer=i(ba),H_e=n(ba,"P",{});var eut=s(H_e);Aer=r(eut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eut.forEach(t),yer=i(ba),za=n(ba,"P",{});var Y0=s(za);Ler=r(Y0,"The model class to instantiate is selected based on the "),U_e=n(Y0,"CODE",{});var out=s(U_e);xer=r(out,"model_type"),out.forEach(t),$er=r(Y0,` property of the config object (either
passed as an argument or loaded from `),J_e=n(Y0,"CODE",{});var rut=s(J_e);ker=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),Ser=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(Y0,"CODE",{});var tut=s(Y_e);Rer=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),Per=r(Y0,":"),Y0.forEach(t),Ber=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);Kv=n(sl,"LI",{});var N$e=s(Kv);K_e=n(N$e,"STRONG",{});var aut=s(K_e);Ier=r(aut,"data2vec-audio"),aut.forEach(t),qer=r(N$e," \u2014 "),HX=n(N$e,"A",{href:!0});var nut=s(HX);Ner=r(nut,"Data2VecAudioForXVector"),nut.forEach(t),jer=r(N$e," (Data2VecAudio model)"),N$e.forEach(t),Der=i(sl),Zv=n(sl,"LI",{});var j$e=s(Zv);Z_e=n(j$e,"STRONG",{});var sut=s(Z_e);Ger=r(sut,"unispeech-sat"),sut.forEach(t),Oer=r(j$e," \u2014 "),UX=n(j$e,"A",{href:!0});var lut=s(UX);Ver=r(lut,"UniSpeechSatForXVector"),lut.forEach(t),Xer=r(j$e," (UniSpeechSat model)"),j$e.forEach(t),zer=i(sl),e3=n(sl,"LI",{});var D$e=s(e3);eue=n(D$e,"STRONG",{});var iut=s(eue);Wer=r(iut,"wav2vec2"),iut.forEach(t),Qer=r(D$e," \u2014 "),JX=n(D$e,"A",{href:!0});var dut=s(JX);Her=r(dut,"Wav2Vec2ForXVector"),dut.forEach(t),Uer=r(D$e," (Wav2Vec2 model)"),D$e.forEach(t),Jer=i(sl),o3=n(sl,"LI",{});var G$e=s(o3);oue=n(G$e,"STRONG",{});var cut=s(oue);Yer=r(cut,"wav2vec2-conformer"),cut.forEach(t),Ker=r(G$e," \u2014 "),YX=n(G$e,"A",{href:!0});var fut=s(YX);Zer=r(fut,"Wav2Vec2ConformerForXVector"),fut.forEach(t),eor=r(G$e," (Wav2Vec2-Conformer model)"),G$e.forEach(t),oor=i(sl),r3=n(sl,"LI",{});var O$e=s(r3);rue=n(O$e,"STRONG",{});var mut=s(rue);ror=r(mut,"wavlm"),mut.forEach(t),tor=r(O$e," \u2014 "),KX=n(O$e,"A",{href:!0});var gut=s(KX);aor=r(gut,"WavLMForXVector"),gut.forEach(t),nor=r(O$e," (WavLM model)"),O$e.forEach(t),sl.forEach(t),sor=i(ba),t3=n(ba,"P",{});var V$e=s(t3);lor=r(V$e,"The model is set in evaluation mode by default using "),tue=n(V$e,"CODE",{});var hut=s(tue);ior=r(hut,"model.eval()"),hut.forEach(t),dor=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(V$e,"CODE",{});var put=s(aue);cor=r(put,"model.train()"),put.forEach(t),V$e.forEach(t),mor=i(ba),T(a3.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Dqe=i(f),Cd=n(f,"H2",{class:!0});var zje=s(Cd);n3=n(zje,"A",{id:!0,class:!0,href:!0});var _ut=s(n3);nue=n(_ut,"SPAN",{});var uut=s(nue);T(T8.$$.fragment,uut),uut.forEach(t),_ut.forEach(t),gor=i(zje),sue=n(zje,"SPAN",{});var but=s(sue);hor=r(but,"AutoModelForMaskedImageModeling"),but.forEach(t),zje.forEach(t),Gqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(M8.$$.fragment,ll),por=i(ll),wd=n(ll,"P",{});var vZ=s(wd);_or=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ZX=n(vZ,"A",{href:!0});var vut=s(ZX);uor=r(vut,"from_pretrained()"),vut.forEach(t),bor=r(vZ," class method or the "),ez=n(vZ,"A",{href:!0});var Fut=s(ez);vor=r(Fut,"from_config()"),Fut.forEach(t),For=r(vZ,` class
method.`),vZ.forEach(t),Tor=i(ll),E8=n(ll,"P",{});var Wje=s(E8);Mor=r(Wje,"This class cannot be instantiated directly using "),lue=n(Wje,"CODE",{});var Tut=s(lue);Eor=r(Tut,"__init__()"),Tut.forEach(t),Cor=r(Wje," (throws an error)."),Wje.forEach(t),wor=i(ll),Mt=n(ll,"DIV",{class:!0});var K0=s(Mt);T(C8.$$.fragment,K0),Aor=i(K0),iue=n(K0,"P",{});var Mut=s(iue);yor=r(Mut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Mut.forEach(t),Lor=i(K0),Ad=n(K0,"P",{});var FZ=s(Ad);xor=r(FZ,`Note:
Loading a model from its configuration file does `),due=n(FZ,"STRONG",{});var Eut=s(due);$or=r(Eut,"not"),Eut.forEach(t),kor=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(FZ,"A",{href:!0});var Cut=s(oz);Sor=r(Cut,"from_pretrained()"),Cut.forEach(t),Ror=r(FZ," to load the model weights."),FZ.forEach(t),Por=i(K0),T(s3.$$.fragment,K0),K0.forEach(t),Bor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(w8.$$.fragment,va),Ior=i(va),cue=n(va,"P",{});var wut=s(cue);qor=r(wut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wut.forEach(t),Nor=i(va),Wa=n(va,"P",{});var Z0=s(Wa);jor=r(Z0,"The model class to instantiate is selected based on the "),fue=n(Z0,"CODE",{});var Aut=s(fue);Dor=r(Aut,"model_type"),Aut.forEach(t),Gor=r(Z0,` property of the config object (either
passed as an argument or loaded from `),mue=n(Z0,"CODE",{});var yut=s(mue);Oor=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),Vor=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(Z0,"CODE",{});var Lut=s(gue);Xor=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),zor=r(Z0,":"),Z0.forEach(t),Wor=i(va),yd=n(va,"UL",{});var TZ=s(yd);l3=n(TZ,"LI",{});var X$e=s(l3);hue=n(X$e,"STRONG",{});var xut=s(hue);Qor=r(xut,"deit"),xut.forEach(t),Hor=r(X$e," \u2014 "),rz=n(X$e,"A",{href:!0});var $ut=s(rz);Uor=r($ut,"DeiTForMaskedImageModeling"),$ut.forEach(t),Jor=r(X$e," (DeiT model)"),X$e.forEach(t),Yor=i(TZ),i3=n(TZ,"LI",{});var z$e=s(i3);pue=n(z$e,"STRONG",{});var kut=s(pue);Kor=r(kut,"swin"),kut.forEach(t),Zor=r(z$e," \u2014 "),tz=n(z$e,"A",{href:!0});var Sut=s(tz);err=r(Sut,"SwinForMaskedImageModeling"),Sut.forEach(t),orr=r(z$e," (Swin model)"),z$e.forEach(t),rrr=i(TZ),d3=n(TZ,"LI",{});var W$e=s(d3);_ue=n(W$e,"STRONG",{});var Rut=s(_ue);trr=r(Rut,"vit"),Rut.forEach(t),arr=r(W$e," \u2014 "),az=n(W$e,"A",{href:!0});var Put=s(az);nrr=r(Put,"ViTForMaskedImageModeling"),Put.forEach(t),srr=r(W$e," (ViT model)"),W$e.forEach(t),TZ.forEach(t),lrr=i(va),c3=n(va,"P",{});var Q$e=s(c3);irr=r(Q$e,"The model is set in evaluation mode by default using "),uue=n(Q$e,"CODE",{});var But=s(uue);drr=r(But,"model.eval()"),But.forEach(t),crr=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bue=n(Q$e,"CODE",{});var Iut=s(bue);frr=r(Iut,"model.train()"),Iut.forEach(t),Q$e.forEach(t),mrr=i(va),T(f3.$$.fragment,va),va.forEach(t),ll.forEach(t),Oqe=i(f),Ld=n(f,"H2",{class:!0});var Qje=s(Ld);m3=n(Qje,"A",{id:!0,class:!0,href:!0});var qut=s(m3);vue=n(qut,"SPAN",{});var Nut=s(vue);T(A8.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),grr=i(Qje),Fue=n(Qje,"SPAN",{});var jut=s(Fue);hrr=r(jut,"AutoModelForObjectDetection"),jut.forEach(t),Qje.forEach(t),Vqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(y8.$$.fragment,il),prr=i(il),xd=n(il,"P",{});var MZ=s(xd);_rr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nz=n(MZ,"A",{href:!0});var Dut=s(nz);urr=r(Dut,"from_pretrained()"),Dut.forEach(t),brr=r(MZ," class method or the "),sz=n(MZ,"A",{href:!0});var Gut=s(sz);vrr=r(Gut,"from_config()"),Gut.forEach(t),Frr=r(MZ,` class
method.`),MZ.forEach(t),Trr=i(il),L8=n(il,"P",{});var Hje=s(L8);Mrr=r(Hje,"This class cannot be instantiated directly using "),Tue=n(Hje,"CODE",{});var Out=s(Tue);Err=r(Out,"__init__()"),Out.forEach(t),Crr=r(Hje," (throws an error)."),Hje.forEach(t),wrr=i(il),Et=n(il,"DIV",{class:!0});var eA=s(Et);T(x8.$$.fragment,eA),Arr=i(eA),Mue=n(eA,"P",{});var Vut=s(Mue);yrr=r(Vut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Vut.forEach(t),Lrr=i(eA),$d=n(eA,"P",{});var EZ=s($d);xrr=r(EZ,`Note:
Loading a model from its configuration file does `),Eue=n(EZ,"STRONG",{});var Xut=s(Eue);$rr=r(Xut,"not"),Xut.forEach(t),krr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(EZ,"A",{href:!0});var zut=s(lz);Srr=r(zut,"from_pretrained()"),zut.forEach(t),Rrr=r(EZ," to load the model weights."),EZ.forEach(t),Prr=i(eA),T(g3.$$.fragment,eA),eA.forEach(t),Brr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T($8.$$.fragment,Fa),Irr=i(Fa),Cue=n(Fa,"P",{});var Wut=s(Cue);qrr=r(Wut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wut.forEach(t),Nrr=i(Fa),Qa=n(Fa,"P",{});var oA=s(Qa);jrr=r(oA,"The model class to instantiate is selected based on the "),wue=n(oA,"CODE",{});var Qut=s(wue);Drr=r(Qut,"model_type"),Qut.forEach(t),Grr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Aue=n(oA,"CODE",{});var Hut=s(Aue);Orr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Vrr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(oA,"CODE",{});var Uut=s(yue);Xrr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),zrr=r(oA,":"),oA.forEach(t),Wrr=i(Fa),k8=n(Fa,"UL",{});var Uje=s(k8);h3=n(Uje,"LI",{});var H$e=s(h3);Lue=n(H$e,"STRONG",{});var Jut=s(Lue);Qrr=r(Jut,"detr"),Jut.forEach(t),Hrr=r(H$e," \u2014 "),iz=n(H$e,"A",{href:!0});var Yut=s(iz);Urr=r(Yut,"DetrForObjectDetection"),Yut.forEach(t),Jrr=r(H$e," (DETR model)"),H$e.forEach(t),Yrr=i(Uje),p3=n(Uje,"LI",{});var U$e=s(p3);xue=n(U$e,"STRONG",{});var Kut=s(xue);Krr=r(Kut,"yolos"),Kut.forEach(t),Zrr=r(U$e," \u2014 "),dz=n(U$e,"A",{href:!0});var Zut=s(dz);etr=r(Zut,"YolosForObjectDetection"),Zut.forEach(t),otr=r(U$e," (YOLOS model)"),U$e.forEach(t),Uje.forEach(t),rtr=i(Fa),_3=n(Fa,"P",{});var J$e=s(_3);ttr=r(J$e,"The model is set in evaluation mode by default using "),$ue=n(J$e,"CODE",{});var e1t=s($ue);atr=r(e1t,"model.eval()"),e1t.forEach(t),ntr=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kue=n(J$e,"CODE",{});var o1t=s(kue);str=r(o1t,"model.train()"),o1t.forEach(t),J$e.forEach(t),ltr=i(Fa),T(u3.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Xqe=i(f),kd=n(f,"H2",{class:!0});var Jje=s(kd);b3=n(Jje,"A",{id:!0,class:!0,href:!0});var r1t=s(b3);Sue=n(r1t,"SPAN",{});var t1t=s(Sue);T(S8.$$.fragment,t1t),t1t.forEach(t),r1t.forEach(t),itr=i(Jje),Rue=n(Jje,"SPAN",{});var a1t=s(Rue);dtr=r(a1t,"AutoModelForImageSegmentation"),a1t.forEach(t),Jje.forEach(t),zqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(R8.$$.fragment,dl),ctr=i(dl),Sd=n(dl,"P",{});var CZ=s(Sd);ftr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cz=n(CZ,"A",{href:!0});var n1t=s(cz);mtr=r(n1t,"from_pretrained()"),n1t.forEach(t),gtr=r(CZ," class method or the "),fz=n(CZ,"A",{href:!0});var s1t=s(fz);htr=r(s1t,"from_config()"),s1t.forEach(t),ptr=r(CZ,` class
method.`),CZ.forEach(t),_tr=i(dl),P8=n(dl,"P",{});var Yje=s(P8);utr=r(Yje,"This class cannot be instantiated directly using "),Pue=n(Yje,"CODE",{});var l1t=s(Pue);btr=r(l1t,"__init__()"),l1t.forEach(t),vtr=r(Yje," (throws an error)."),Yje.forEach(t),Ftr=i(dl),Ct=n(dl,"DIV",{class:!0});var rA=s(Ct);T(B8.$$.fragment,rA),Ttr=i(rA),Bue=n(rA,"P",{});var i1t=s(Bue);Mtr=r(i1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i1t.forEach(t),Etr=i(rA),Rd=n(rA,"P",{});var wZ=s(Rd);Ctr=r(wZ,`Note:
Loading a model from its configuration file does `),Iue=n(wZ,"STRONG",{});var d1t=s(Iue);wtr=r(d1t,"not"),d1t.forEach(t),Atr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(wZ,"A",{href:!0});var c1t=s(mz);ytr=r(c1t,"from_pretrained()"),c1t.forEach(t),Ltr=r(wZ," to load the model weights."),wZ.forEach(t),xtr=i(rA),T(v3.$$.fragment,rA),rA.forEach(t),$tr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(I8.$$.fragment,Ta),ktr=i(Ta),que=n(Ta,"P",{});var f1t=s(que);Str=r(f1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),f1t.forEach(t),Rtr=i(Ta),Ha=n(Ta,"P",{});var tA=s(Ha);Ptr=r(tA,"The model class to instantiate is selected based on the "),Nue=n(tA,"CODE",{});var m1t=s(Nue);Btr=r(m1t,"model_type"),m1t.forEach(t),Itr=r(tA,` property of the config object (either
passed as an argument or loaded from `),jue=n(tA,"CODE",{});var g1t=s(jue);qtr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Ntr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(tA,"CODE",{});var h1t=s(Due);jtr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Dtr=r(tA,":"),tA.forEach(t),Gtr=i(Ta),Gue=n(Ta,"UL",{});var p1t=s(Gue);F3=n(p1t,"LI",{});var Y$e=s(F3);Oue=n(Y$e,"STRONG",{});var _1t=s(Oue);Otr=r(_1t,"detr"),_1t.forEach(t),Vtr=r(Y$e," \u2014 "),gz=n(Y$e,"A",{href:!0});var u1t=s(gz);Xtr=r(u1t,"DetrForSegmentation"),u1t.forEach(t),ztr=r(Y$e," (DETR model)"),Y$e.forEach(t),p1t.forEach(t),Wtr=i(Ta),T3=n(Ta,"P",{});var K$e=s(T3);Qtr=r(K$e,"The model is set in evaluation mode by default using "),Vue=n(K$e,"CODE",{});var b1t=s(Vue);Htr=r(b1t,"model.eval()"),b1t.forEach(t),Utr=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(K$e,"CODE",{});var v1t=s(Xue);Jtr=r(v1t,"model.train()"),v1t.forEach(t),K$e.forEach(t),Ytr=i(Ta),T(M3.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Wqe=i(f),Pd=n(f,"H2",{class:!0});var Kje=s(Pd);E3=n(Kje,"A",{id:!0,class:!0,href:!0});var F1t=s(E3);zue=n(F1t,"SPAN",{});var T1t=s(zue);T(q8.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),Ktr=i(Kje),Wue=n(Kje,"SPAN",{});var M1t=s(Wue);Ztr=r(M1t,"AutoModelForSemanticSegmentation"),M1t.forEach(t),Kje.forEach(t),Qqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(N8.$$.fragment,cl),ear=i(cl),Bd=n(cl,"P",{});var AZ=s(Bd);oar=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hz=n(AZ,"A",{href:!0});var E1t=s(hz);rar=r(E1t,"from_pretrained()"),E1t.forEach(t),tar=r(AZ," class method or the "),pz=n(AZ,"A",{href:!0});var C1t=s(pz);aar=r(C1t,"from_config()"),C1t.forEach(t),nar=r(AZ,` class
method.`),AZ.forEach(t),sar=i(cl),j8=n(cl,"P",{});var Zje=s(j8);lar=r(Zje,"This class cannot be instantiated directly using "),Que=n(Zje,"CODE",{});var w1t=s(Que);iar=r(w1t,"__init__()"),w1t.forEach(t),dar=r(Zje," (throws an error)."),Zje.forEach(t),car=i(cl),wt=n(cl,"DIV",{class:!0});var aA=s(wt);T(D8.$$.fragment,aA),far=i(aA),Hue=n(aA,"P",{});var A1t=s(Hue);mar=r(A1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A1t.forEach(t),gar=i(aA),Id=n(aA,"P",{});var yZ=s(Id);har=r(yZ,`Note:
Loading a model from its configuration file does `),Uue=n(yZ,"STRONG",{});var y1t=s(Uue);par=r(y1t,"not"),y1t.forEach(t),_ar=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(yZ,"A",{href:!0});var L1t=s(_z);uar=r(L1t,"from_pretrained()"),L1t.forEach(t),bar=r(yZ," to load the model weights."),yZ.forEach(t),Far=i(aA),T(C3.$$.fragment,aA),aA.forEach(t),Tar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(G8.$$.fragment,Ma),Mar=i(Ma),Jue=n(Ma,"P",{});var x1t=s(Jue);Ear=r(x1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x1t.forEach(t),Car=i(Ma),Ua=n(Ma,"P",{});var nA=s(Ua);war=r(nA,"The model class to instantiate is selected based on the "),Yue=n(nA,"CODE",{});var $1t=s(Yue);Aar=r($1t,"model_type"),$1t.forEach(t),yar=r(nA,` property of the config object (either
passed as an argument or loaded from `),Kue=n(nA,"CODE",{});var k1t=s(Kue);Lar=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),xar=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(nA,"CODE",{});var S1t=s(Zue);$ar=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),kar=r(nA,":"),nA.forEach(t),Sar=i(Ma),Ja=n(Ma,"UL",{});var sA=s(Ja);w3=n(sA,"LI",{});var Z$e=s(w3);e1e=n(Z$e,"STRONG",{});var R1t=s(e1e);Rar=r(R1t,"beit"),R1t.forEach(t),Par=r(Z$e," \u2014 "),uz=n(Z$e,"A",{href:!0});var P1t=s(uz);Bar=r(P1t,"BeitForSemanticSegmentation"),P1t.forEach(t),Iar=r(Z$e," (BEiT model)"),Z$e.forEach(t),qar=i(sA),A3=n(sA,"LI",{});var eke=s(A3);o1e=n(eke,"STRONG",{});var B1t=s(o1e);Nar=r(B1t,"data2vec-vision"),B1t.forEach(t),jar=r(eke," \u2014 "),bz=n(eke,"A",{href:!0});var I1t=s(bz);Dar=r(I1t,"Data2VecVisionForSemanticSegmentation"),I1t.forEach(t),Gar=r(eke," (Data2VecVision model)"),eke.forEach(t),Oar=i(sA),y3=n(sA,"LI",{});var oke=s(y3);r1e=n(oke,"STRONG",{});var q1t=s(r1e);Var=r(q1t,"dpt"),q1t.forEach(t),Xar=r(oke," \u2014 "),vz=n(oke,"A",{href:!0});var N1t=s(vz);zar=r(N1t,"DPTForSemanticSegmentation"),N1t.forEach(t),War=r(oke," (DPT model)"),oke.forEach(t),Qar=i(sA),L3=n(sA,"LI",{});var rke=s(L3);t1e=n(rke,"STRONG",{});var j1t=s(t1e);Har=r(j1t,"segformer"),j1t.forEach(t),Uar=r(rke," \u2014 "),Fz=n(rke,"A",{href:!0});var D1t=s(Fz);Jar=r(D1t,"SegformerForSemanticSegmentation"),D1t.forEach(t),Yar=r(rke," (SegFormer model)"),rke.forEach(t),sA.forEach(t),Kar=i(Ma),x3=n(Ma,"P",{});var tke=s(x3);Zar=r(tke,"The model is set in evaluation mode by default using "),a1e=n(tke,"CODE",{});var G1t=s(a1e);enr=r(G1t,"model.eval()"),G1t.forEach(t),onr=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(tke,"CODE",{});var O1t=s(n1e);rnr=r(O1t,"model.train()"),O1t.forEach(t),tke.forEach(t),tnr=i(Ma),T($3.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Hqe=i(f),qd=n(f,"H2",{class:!0});var eDe=s(qd);k3=n(eDe,"A",{id:!0,class:!0,href:!0});var V1t=s(k3);s1e=n(V1t,"SPAN",{});var X1t=s(s1e);T(O8.$$.fragment,X1t),X1t.forEach(t),V1t.forEach(t),anr=i(eDe),l1e=n(eDe,"SPAN",{});var z1t=s(l1e);nnr=r(z1t,"AutoModelForInstanceSegmentation"),z1t.forEach(t),eDe.forEach(t),Uqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(V8.$$.fragment,fl),snr=i(fl),Nd=n(fl,"P",{});var LZ=s(Nd);lnr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Tz=n(LZ,"A",{href:!0});var W1t=s(Tz);inr=r(W1t,"from_pretrained()"),W1t.forEach(t),dnr=r(LZ," class method or the "),Mz=n(LZ,"A",{href:!0});var Q1t=s(Mz);cnr=r(Q1t,"from_config()"),Q1t.forEach(t),fnr=r(LZ,` class
method.`),LZ.forEach(t),mnr=i(fl),X8=n(fl,"P",{});var oDe=s(X8);gnr=r(oDe,"This class cannot be instantiated directly using "),i1e=n(oDe,"CODE",{});var H1t=s(i1e);hnr=r(H1t,"__init__()"),H1t.forEach(t),pnr=r(oDe," (throws an error)."),oDe.forEach(t),_nr=i(fl),At=n(fl,"DIV",{class:!0});var lA=s(At);T(z8.$$.fragment,lA),unr=i(lA),d1e=n(lA,"P",{});var U1t=s(d1e);bnr=r(U1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),U1t.forEach(t),vnr=i(lA),jd=n(lA,"P",{});var xZ=s(jd);Fnr=r(xZ,`Note:
Loading a model from its configuration file does `),c1e=n(xZ,"STRONG",{});var J1t=s(c1e);Tnr=r(J1t,"not"),J1t.forEach(t),Mnr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(xZ,"A",{href:!0});var Y1t=s(Ez);Enr=r(Y1t,"from_pretrained()"),Y1t.forEach(t),Cnr=r(xZ," to load the model weights."),xZ.forEach(t),wnr=i(lA),T(S3.$$.fragment,lA),lA.forEach(t),Anr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(W8.$$.fragment,Ea),ynr=i(Ea),f1e=n(Ea,"P",{});var K1t=s(f1e);Lnr=r(K1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),K1t.forEach(t),xnr=i(Ea),Ya=n(Ea,"P",{});var iA=s(Ya);$nr=r(iA,"The model class to instantiate is selected based on the "),m1e=n(iA,"CODE",{});var Z1t=s(m1e);knr=r(Z1t,"model_type"),Z1t.forEach(t),Snr=r(iA,` property of the config object (either
passed as an argument or loaded from `),g1e=n(iA,"CODE",{});var ebt=s(g1e);Rnr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),Pnr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(iA,"CODE",{});var obt=s(h1e);Bnr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),Inr=r(iA,":"),iA.forEach(t),qnr=i(Ea),p1e=n(Ea,"UL",{});var rbt=s(p1e);R3=n(rbt,"LI",{});var ake=s(R3);_1e=n(ake,"STRONG",{});var tbt=s(_1e);Nnr=r(tbt,"maskformer"),tbt.forEach(t),jnr=r(ake," \u2014 "),Cz=n(ake,"A",{href:!0});var abt=s(Cz);Dnr=r(abt,"MaskFormerForInstanceSegmentation"),abt.forEach(t),Gnr=r(ake," (MaskFormer model)"),ake.forEach(t),rbt.forEach(t),Onr=i(Ea),P3=n(Ea,"P",{});var nke=s(P3);Vnr=r(nke,"The model is set in evaluation mode by default using "),u1e=n(nke,"CODE",{});var nbt=s(u1e);Xnr=r(nbt,"model.eval()"),nbt.forEach(t),znr=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b1e=n(nke,"CODE",{});var sbt=s(b1e);Wnr=r(sbt,"model.train()"),sbt.forEach(t),nke.forEach(t),Qnr=i(Ea),T(B3.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Jqe=i(f),Dd=n(f,"H2",{class:!0});var rDe=s(Dd);I3=n(rDe,"A",{id:!0,class:!0,href:!0});var lbt=s(I3);v1e=n(lbt,"SPAN",{});var ibt=s(v1e);T(Q8.$$.fragment,ibt),ibt.forEach(t),lbt.forEach(t),Hnr=i(rDe),F1e=n(rDe,"SPAN",{});var dbt=s(F1e);Unr=r(dbt,"TFAutoModel"),dbt.forEach(t),rDe.forEach(t),Yqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(H8.$$.fragment,ml),Jnr=i(ml),Gd=n(ml,"P",{});var $Z=s(Gd);Ynr=r($Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wz=n($Z,"A",{href:!0});var cbt=s(wz);Knr=r(cbt,"from_pretrained()"),cbt.forEach(t),Znr=r($Z," class method or the "),Az=n($Z,"A",{href:!0});var fbt=s(Az);esr=r(fbt,"from_config()"),fbt.forEach(t),osr=r($Z,` class
method.`),$Z.forEach(t),rsr=i(ml),U8=n(ml,"P",{});var tDe=s(U8);tsr=r(tDe,"This class cannot be instantiated directly using "),T1e=n(tDe,"CODE",{});var mbt=s(T1e);asr=r(mbt,"__init__()"),mbt.forEach(t),nsr=r(tDe," (throws an error)."),tDe.forEach(t),ssr=i(ml),yt=n(ml,"DIV",{class:!0});var dA=s(yt);T(J8.$$.fragment,dA),lsr=i(dA),M1e=n(dA,"P",{});var gbt=s(M1e);isr=r(gbt,"Instantiates one of the base model classes of the library from a configuration."),gbt.forEach(t),dsr=i(dA),Od=n(dA,"P",{});var kZ=s(Od);csr=r(kZ,`Note:
Loading a model from its configuration file does `),E1e=n(kZ,"STRONG",{});var hbt=s(E1e);fsr=r(hbt,"not"),hbt.forEach(t),msr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(kZ,"A",{href:!0});var pbt=s(yz);gsr=r(pbt,"from_pretrained()"),pbt.forEach(t),hsr=r(kZ," to load the model weights."),kZ.forEach(t),psr=i(dA),T(q3.$$.fragment,dA),dA.forEach(t),_sr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(Y8.$$.fragment,gl),usr=i(gl),C1e=n(gl,"P",{});var _bt=s(C1e);bsr=r(_bt,"Instantiate one of the base model classes of the library from a pretrained model."),_bt.forEach(t),vsr=i(gl),Ka=n(gl,"P",{});var cA=s(Ka);Fsr=r(cA,"The model class to instantiate is selected based on the "),w1e=n(cA,"CODE",{});var ubt=s(w1e);Tsr=r(ubt,"model_type"),ubt.forEach(t),Msr=r(cA,` property of the config object (either
passed as an argument or loaded from `),A1e=n(cA,"CODE",{});var bbt=s(A1e);Esr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Csr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(cA,"CODE",{});var vbt=s(y1e);wsr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),Asr=r(cA,":"),cA.forEach(t),ysr=i(gl),q=n(gl,"UL",{});var j=s(q);N3=n(j,"LI",{});var ske=s(N3);L1e=n(ske,"STRONG",{});var Fbt=s(L1e);Lsr=r(Fbt,"albert"),Fbt.forEach(t),xsr=r(ske," \u2014 "),Lz=n(ske,"A",{href:!0});var Tbt=s(Lz);$sr=r(Tbt,"TFAlbertModel"),Tbt.forEach(t),ksr=r(ske," (ALBERT model)"),ske.forEach(t),Ssr=i(j),j3=n(j,"LI",{});var lke=s(j3);x1e=n(lke,"STRONG",{});var Mbt=s(x1e);Rsr=r(Mbt,"bart"),Mbt.forEach(t),Psr=r(lke," \u2014 "),xz=n(lke,"A",{href:!0});var Ebt=s(xz);Bsr=r(Ebt,"TFBartModel"),Ebt.forEach(t),Isr=r(lke," (BART model)"),lke.forEach(t),qsr=i(j),D3=n(j,"LI",{});var ike=s(D3);$1e=n(ike,"STRONG",{});var Cbt=s($1e);Nsr=r(Cbt,"bert"),Cbt.forEach(t),jsr=r(ike," \u2014 "),$z=n(ike,"A",{href:!0});var wbt=s($z);Dsr=r(wbt,"TFBertModel"),wbt.forEach(t),Gsr=r(ike," (BERT model)"),ike.forEach(t),Osr=i(j),G3=n(j,"LI",{});var dke=s(G3);k1e=n(dke,"STRONG",{});var Abt=s(k1e);Vsr=r(Abt,"blenderbot"),Abt.forEach(t),Xsr=r(dke," \u2014 "),kz=n(dke,"A",{href:!0});var ybt=s(kz);zsr=r(ybt,"TFBlenderbotModel"),ybt.forEach(t),Wsr=r(dke," (Blenderbot model)"),dke.forEach(t),Qsr=i(j),O3=n(j,"LI",{});var cke=s(O3);S1e=n(cke,"STRONG",{});var Lbt=s(S1e);Hsr=r(Lbt,"blenderbot-small"),Lbt.forEach(t),Usr=r(cke," \u2014 "),Sz=n(cke,"A",{href:!0});var xbt=s(Sz);Jsr=r(xbt,"TFBlenderbotSmallModel"),xbt.forEach(t),Ysr=r(cke," (BlenderbotSmall model)"),cke.forEach(t),Ksr=i(j),V3=n(j,"LI",{});var fke=s(V3);R1e=n(fke,"STRONG",{});var $bt=s(R1e);Zsr=r($bt,"camembert"),$bt.forEach(t),elr=r(fke," \u2014 "),Rz=n(fke,"A",{href:!0});var kbt=s(Rz);olr=r(kbt,"TFCamembertModel"),kbt.forEach(t),rlr=r(fke," (CamemBERT model)"),fke.forEach(t),tlr=i(j),X3=n(j,"LI",{});var mke=s(X3);P1e=n(mke,"STRONG",{});var Sbt=s(P1e);alr=r(Sbt,"clip"),Sbt.forEach(t),nlr=r(mke," \u2014 "),Pz=n(mke,"A",{href:!0});var Rbt=s(Pz);slr=r(Rbt,"TFCLIPModel"),Rbt.forEach(t),llr=r(mke," (CLIP model)"),mke.forEach(t),ilr=i(j),z3=n(j,"LI",{});var gke=s(z3);B1e=n(gke,"STRONG",{});var Pbt=s(B1e);dlr=r(Pbt,"convbert"),Pbt.forEach(t),clr=r(gke," \u2014 "),Bz=n(gke,"A",{href:!0});var Bbt=s(Bz);flr=r(Bbt,"TFConvBertModel"),Bbt.forEach(t),mlr=r(gke," (ConvBERT model)"),gke.forEach(t),glr=i(j),W3=n(j,"LI",{});var hke=s(W3);I1e=n(hke,"STRONG",{});var Ibt=s(I1e);hlr=r(Ibt,"convnext"),Ibt.forEach(t),plr=r(hke," \u2014 "),Iz=n(hke,"A",{href:!0});var qbt=s(Iz);_lr=r(qbt,"TFConvNextModel"),qbt.forEach(t),ulr=r(hke," (ConvNext model)"),hke.forEach(t),blr=i(j),Q3=n(j,"LI",{});var pke=s(Q3);q1e=n(pke,"STRONG",{});var Nbt=s(q1e);vlr=r(Nbt,"ctrl"),Nbt.forEach(t),Flr=r(pke," \u2014 "),qz=n(pke,"A",{href:!0});var jbt=s(qz);Tlr=r(jbt,"TFCTRLModel"),jbt.forEach(t),Mlr=r(pke," (CTRL model)"),pke.forEach(t),Elr=i(j),H3=n(j,"LI",{});var _ke=s(H3);N1e=n(_ke,"STRONG",{});var Dbt=s(N1e);Clr=r(Dbt,"data2vec-vision"),Dbt.forEach(t),wlr=r(_ke," \u2014 "),Nz=n(_ke,"A",{href:!0});var Gbt=s(Nz);Alr=r(Gbt,"TFData2VecVisionModel"),Gbt.forEach(t),ylr=r(_ke," (Data2VecVision model)"),_ke.forEach(t),Llr=i(j),U3=n(j,"LI",{});var uke=s(U3);j1e=n(uke,"STRONG",{});var Obt=s(j1e);xlr=r(Obt,"deberta"),Obt.forEach(t),$lr=r(uke," \u2014 "),jz=n(uke,"A",{href:!0});var Vbt=s(jz);klr=r(Vbt,"TFDebertaModel"),Vbt.forEach(t),Slr=r(uke," (DeBERTa model)"),uke.forEach(t),Rlr=i(j),J3=n(j,"LI",{});var bke=s(J3);D1e=n(bke,"STRONG",{});var Xbt=s(D1e);Plr=r(Xbt,"deberta-v2"),Xbt.forEach(t),Blr=r(bke," \u2014 "),Dz=n(bke,"A",{href:!0});var zbt=s(Dz);Ilr=r(zbt,"TFDebertaV2Model"),zbt.forEach(t),qlr=r(bke," (DeBERTa-v2 model)"),bke.forEach(t),Nlr=i(j),Y3=n(j,"LI",{});var vke=s(Y3);G1e=n(vke,"STRONG",{});var Wbt=s(G1e);jlr=r(Wbt,"distilbert"),Wbt.forEach(t),Dlr=r(vke," \u2014 "),Gz=n(vke,"A",{href:!0});var Qbt=s(Gz);Glr=r(Qbt,"TFDistilBertModel"),Qbt.forEach(t),Olr=r(vke," (DistilBERT model)"),vke.forEach(t),Vlr=i(j),K3=n(j,"LI",{});var Fke=s(K3);O1e=n(Fke,"STRONG",{});var Hbt=s(O1e);Xlr=r(Hbt,"dpr"),Hbt.forEach(t),zlr=r(Fke," \u2014 "),Oz=n(Fke,"A",{href:!0});var Ubt=s(Oz);Wlr=r(Ubt,"TFDPRQuestionEncoder"),Ubt.forEach(t),Qlr=r(Fke," (DPR model)"),Fke.forEach(t),Hlr=i(j),Z3=n(j,"LI",{});var Tke=s(Z3);V1e=n(Tke,"STRONG",{});var Jbt=s(V1e);Ulr=r(Jbt,"electra"),Jbt.forEach(t),Jlr=r(Tke," \u2014 "),Vz=n(Tke,"A",{href:!0});var Ybt=s(Vz);Ylr=r(Ybt,"TFElectraModel"),Ybt.forEach(t),Klr=r(Tke," (ELECTRA model)"),Tke.forEach(t),Zlr=i(j),eF=n(j,"LI",{});var Mke=s(eF);X1e=n(Mke,"STRONG",{});var Kbt=s(X1e);eir=r(Kbt,"flaubert"),Kbt.forEach(t),oir=r(Mke," \u2014 "),Xz=n(Mke,"A",{href:!0});var Zbt=s(Xz);rir=r(Zbt,"TFFlaubertModel"),Zbt.forEach(t),tir=r(Mke," (FlauBERT model)"),Mke.forEach(t),air=i(j),Bs=n(j,"LI",{});var L$=s(Bs);z1e=n(L$,"STRONG",{});var e2t=s(z1e);nir=r(e2t,"funnel"),e2t.forEach(t),sir=r(L$," \u2014 "),zz=n(L$,"A",{href:!0});var o2t=s(zz);lir=r(o2t,"TFFunnelModel"),o2t.forEach(t),iir=r(L$," or "),Wz=n(L$,"A",{href:!0});var r2t=s(Wz);dir=r(r2t,"TFFunnelBaseModel"),r2t.forEach(t),cir=r(L$," (Funnel Transformer model)"),L$.forEach(t),fir=i(j),oF=n(j,"LI",{});var Eke=s(oF);W1e=n(Eke,"STRONG",{});var t2t=s(W1e);mir=r(t2t,"gpt2"),t2t.forEach(t),gir=r(Eke," \u2014 "),Qz=n(Eke,"A",{href:!0});var a2t=s(Qz);hir=r(a2t,"TFGPT2Model"),a2t.forEach(t),pir=r(Eke," (OpenAI GPT-2 model)"),Eke.forEach(t),_ir=i(j),rF=n(j,"LI",{});var Cke=s(rF);Q1e=n(Cke,"STRONG",{});var n2t=s(Q1e);uir=r(n2t,"gptj"),n2t.forEach(t),bir=r(Cke," \u2014 "),Hz=n(Cke,"A",{href:!0});var s2t=s(Hz);vir=r(s2t,"TFGPTJModel"),s2t.forEach(t),Fir=r(Cke," (GPT-J model)"),Cke.forEach(t),Tir=i(j),tF=n(j,"LI",{});var wke=s(tF);H1e=n(wke,"STRONG",{});var l2t=s(H1e);Mir=r(l2t,"hubert"),l2t.forEach(t),Eir=r(wke," \u2014 "),Uz=n(wke,"A",{href:!0});var i2t=s(Uz);Cir=r(i2t,"TFHubertModel"),i2t.forEach(t),wir=r(wke," (Hubert model)"),wke.forEach(t),Air=i(j),aF=n(j,"LI",{});var Ake=s(aF);U1e=n(Ake,"STRONG",{});var d2t=s(U1e);yir=r(d2t,"layoutlm"),d2t.forEach(t),Lir=r(Ake," \u2014 "),Jz=n(Ake,"A",{href:!0});var c2t=s(Jz);xir=r(c2t,"TFLayoutLMModel"),c2t.forEach(t),$ir=r(Ake," (LayoutLM model)"),Ake.forEach(t),kir=i(j),nF=n(j,"LI",{});var yke=s(nF);J1e=n(yke,"STRONG",{});var f2t=s(J1e);Sir=r(f2t,"led"),f2t.forEach(t),Rir=r(yke," \u2014 "),Yz=n(yke,"A",{href:!0});var m2t=s(Yz);Pir=r(m2t,"TFLEDModel"),m2t.forEach(t),Bir=r(yke," (LED model)"),yke.forEach(t),Iir=i(j),sF=n(j,"LI",{});var Lke=s(sF);Y1e=n(Lke,"STRONG",{});var g2t=s(Y1e);qir=r(g2t,"longformer"),g2t.forEach(t),Nir=r(Lke," \u2014 "),Kz=n(Lke,"A",{href:!0});var h2t=s(Kz);jir=r(h2t,"TFLongformerModel"),h2t.forEach(t),Dir=r(Lke," (Longformer model)"),Lke.forEach(t),Gir=i(j),lF=n(j,"LI",{});var xke=s(lF);K1e=n(xke,"STRONG",{});var p2t=s(K1e);Oir=r(p2t,"lxmert"),p2t.forEach(t),Vir=r(xke," \u2014 "),Zz=n(xke,"A",{href:!0});var _2t=s(Zz);Xir=r(_2t,"TFLxmertModel"),_2t.forEach(t),zir=r(xke," (LXMERT model)"),xke.forEach(t),Wir=i(j),iF=n(j,"LI",{});var $ke=s(iF);Z1e=n($ke,"STRONG",{});var u2t=s(Z1e);Qir=r(u2t,"marian"),u2t.forEach(t),Hir=r($ke," \u2014 "),eW=n($ke,"A",{href:!0});var b2t=s(eW);Uir=r(b2t,"TFMarianModel"),b2t.forEach(t),Jir=r($ke," (Marian model)"),$ke.forEach(t),Yir=i(j),dF=n(j,"LI",{});var kke=s(dF);ebe=n(kke,"STRONG",{});var v2t=s(ebe);Kir=r(v2t,"mbart"),v2t.forEach(t),Zir=r(kke," \u2014 "),oW=n(kke,"A",{href:!0});var F2t=s(oW);edr=r(F2t,"TFMBartModel"),F2t.forEach(t),odr=r(kke," (mBART model)"),kke.forEach(t),rdr=i(j),cF=n(j,"LI",{});var Ske=s(cF);obe=n(Ske,"STRONG",{});var T2t=s(obe);tdr=r(T2t,"mobilebert"),T2t.forEach(t),adr=r(Ske," \u2014 "),rW=n(Ske,"A",{href:!0});var M2t=s(rW);ndr=r(M2t,"TFMobileBertModel"),M2t.forEach(t),sdr=r(Ske," (MobileBERT model)"),Ske.forEach(t),ldr=i(j),fF=n(j,"LI",{});var Rke=s(fF);rbe=n(Rke,"STRONG",{});var E2t=s(rbe);idr=r(E2t,"mpnet"),E2t.forEach(t),ddr=r(Rke," \u2014 "),tW=n(Rke,"A",{href:!0});var C2t=s(tW);cdr=r(C2t,"TFMPNetModel"),C2t.forEach(t),fdr=r(Rke," (MPNet model)"),Rke.forEach(t),mdr=i(j),mF=n(j,"LI",{});var Pke=s(mF);tbe=n(Pke,"STRONG",{});var w2t=s(tbe);gdr=r(w2t,"mt5"),w2t.forEach(t),hdr=r(Pke," \u2014 "),aW=n(Pke,"A",{href:!0});var A2t=s(aW);pdr=r(A2t,"TFMT5Model"),A2t.forEach(t),_dr=r(Pke," (mT5 model)"),Pke.forEach(t),udr=i(j),gF=n(j,"LI",{});var Bke=s(gF);abe=n(Bke,"STRONG",{});var y2t=s(abe);bdr=r(y2t,"openai-gpt"),y2t.forEach(t),vdr=r(Bke," \u2014 "),nW=n(Bke,"A",{href:!0});var L2t=s(nW);Fdr=r(L2t,"TFOpenAIGPTModel"),L2t.forEach(t),Tdr=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),Mdr=i(j),hF=n(j,"LI",{});var Ike=s(hF);nbe=n(Ike,"STRONG",{});var x2t=s(nbe);Edr=r(x2t,"pegasus"),x2t.forEach(t),Cdr=r(Ike," \u2014 "),sW=n(Ike,"A",{href:!0});var $2t=s(sW);wdr=r($2t,"TFPegasusModel"),$2t.forEach(t),Adr=r(Ike," (Pegasus model)"),Ike.forEach(t),ydr=i(j),pF=n(j,"LI",{});var qke=s(pF);sbe=n(qke,"STRONG",{});var k2t=s(sbe);Ldr=r(k2t,"rembert"),k2t.forEach(t),xdr=r(qke," \u2014 "),lW=n(qke,"A",{href:!0});var S2t=s(lW);$dr=r(S2t,"TFRemBertModel"),S2t.forEach(t),kdr=r(qke," (RemBERT model)"),qke.forEach(t),Sdr=i(j),_F=n(j,"LI",{});var Nke=s(_F);lbe=n(Nke,"STRONG",{});var R2t=s(lbe);Rdr=r(R2t,"roberta"),R2t.forEach(t),Pdr=r(Nke," \u2014 "),iW=n(Nke,"A",{href:!0});var P2t=s(iW);Bdr=r(P2t,"TFRobertaModel"),P2t.forEach(t),Idr=r(Nke," (RoBERTa model)"),Nke.forEach(t),qdr=i(j),uF=n(j,"LI",{});var jke=s(uF);ibe=n(jke,"STRONG",{});var B2t=s(ibe);Ndr=r(B2t,"roformer"),B2t.forEach(t),jdr=r(jke," \u2014 "),dW=n(jke,"A",{href:!0});var I2t=s(dW);Ddr=r(I2t,"TFRoFormerModel"),I2t.forEach(t),Gdr=r(jke," (RoFormer model)"),jke.forEach(t),Odr=i(j),bF=n(j,"LI",{});var Dke=s(bF);dbe=n(Dke,"STRONG",{});var q2t=s(dbe);Vdr=r(q2t,"speech_to_text"),q2t.forEach(t),Xdr=r(Dke," \u2014 "),cW=n(Dke,"A",{href:!0});var N2t=s(cW);zdr=r(N2t,"TFSpeech2TextModel"),N2t.forEach(t),Wdr=r(Dke," (Speech2Text model)"),Dke.forEach(t),Qdr=i(j),vF=n(j,"LI",{});var Gke=s(vF);cbe=n(Gke,"STRONG",{});var j2t=s(cbe);Hdr=r(j2t,"swin"),j2t.forEach(t),Udr=r(Gke," \u2014 "),fW=n(Gke,"A",{href:!0});var D2t=s(fW);Jdr=r(D2t,"TFSwinModel"),D2t.forEach(t),Ydr=r(Gke," (Swin model)"),Gke.forEach(t),Kdr=i(j),FF=n(j,"LI",{});var Oke=s(FF);fbe=n(Oke,"STRONG",{});var G2t=s(fbe);Zdr=r(G2t,"t5"),G2t.forEach(t),ecr=r(Oke," \u2014 "),mW=n(Oke,"A",{href:!0});var O2t=s(mW);ocr=r(O2t,"TFT5Model"),O2t.forEach(t),rcr=r(Oke," (T5 model)"),Oke.forEach(t),tcr=i(j),TF=n(j,"LI",{});var Vke=s(TF);mbe=n(Vke,"STRONG",{});var V2t=s(mbe);acr=r(V2t,"tapas"),V2t.forEach(t),ncr=r(Vke," \u2014 "),gW=n(Vke,"A",{href:!0});var X2t=s(gW);scr=r(X2t,"TFTapasModel"),X2t.forEach(t),lcr=r(Vke," (TAPAS model)"),Vke.forEach(t),icr=i(j),MF=n(j,"LI",{});var Xke=s(MF);gbe=n(Xke,"STRONG",{});var z2t=s(gbe);dcr=r(z2t,"transfo-xl"),z2t.forEach(t),ccr=r(Xke," \u2014 "),hW=n(Xke,"A",{href:!0});var W2t=s(hW);fcr=r(W2t,"TFTransfoXLModel"),W2t.forEach(t),mcr=r(Xke," (Transformer-XL model)"),Xke.forEach(t),gcr=i(j),EF=n(j,"LI",{});var zke=s(EF);hbe=n(zke,"STRONG",{});var Q2t=s(hbe);hcr=r(Q2t,"vit"),Q2t.forEach(t),pcr=r(zke," \u2014 "),pW=n(zke,"A",{href:!0});var H2t=s(pW);_cr=r(H2t,"TFViTModel"),H2t.forEach(t),ucr=r(zke," (ViT model)"),zke.forEach(t),bcr=i(j),CF=n(j,"LI",{});var Wke=s(CF);pbe=n(Wke,"STRONG",{});var U2t=s(pbe);vcr=r(U2t,"vit_mae"),U2t.forEach(t),Fcr=r(Wke," \u2014 "),_W=n(Wke,"A",{href:!0});var J2t=s(_W);Tcr=r(J2t,"TFViTMAEModel"),J2t.forEach(t),Mcr=r(Wke," (ViTMAE model)"),Wke.forEach(t),Ecr=i(j),wF=n(j,"LI",{});var Qke=s(wF);_be=n(Qke,"STRONG",{});var Y2t=s(_be);Ccr=r(Y2t,"wav2vec2"),Y2t.forEach(t),wcr=r(Qke," \u2014 "),uW=n(Qke,"A",{href:!0});var K2t=s(uW);Acr=r(K2t,"TFWav2Vec2Model"),K2t.forEach(t),ycr=r(Qke," (Wav2Vec2 model)"),Qke.forEach(t),Lcr=i(j),AF=n(j,"LI",{});var Hke=s(AF);ube=n(Hke,"STRONG",{});var Z2t=s(ube);xcr=r(Z2t,"xglm"),Z2t.forEach(t),$cr=r(Hke," \u2014 "),bW=n(Hke,"A",{href:!0});var e4t=s(bW);kcr=r(e4t,"TFXGLMModel"),e4t.forEach(t),Scr=r(Hke," (XGLM model)"),Hke.forEach(t),Rcr=i(j),yF=n(j,"LI",{});var Uke=s(yF);bbe=n(Uke,"STRONG",{});var o4t=s(bbe);Pcr=r(o4t,"xlm"),o4t.forEach(t),Bcr=r(Uke," \u2014 "),vW=n(Uke,"A",{href:!0});var r4t=s(vW);Icr=r(r4t,"TFXLMModel"),r4t.forEach(t),qcr=r(Uke," (XLM model)"),Uke.forEach(t),Ncr=i(j),LF=n(j,"LI",{});var Jke=s(LF);vbe=n(Jke,"STRONG",{});var t4t=s(vbe);jcr=r(t4t,"xlm-roberta"),t4t.forEach(t),Dcr=r(Jke," \u2014 "),FW=n(Jke,"A",{href:!0});var a4t=s(FW);Gcr=r(a4t,"TFXLMRobertaModel"),a4t.forEach(t),Ocr=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),Vcr=i(j),xF=n(j,"LI",{});var Yke=s(xF);Fbe=n(Yke,"STRONG",{});var n4t=s(Fbe);Xcr=r(n4t,"xlnet"),n4t.forEach(t),zcr=r(Yke," \u2014 "),TW=n(Yke,"A",{href:!0});var s4t=s(TW);Wcr=r(s4t,"TFXLNetModel"),s4t.forEach(t),Qcr=r(Yke," (XLNet model)"),Yke.forEach(t),j.forEach(t),Hcr=i(gl),T($F.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Kqe=i(f),Vd=n(f,"H2",{class:!0});var aDe=s(Vd);kF=n(aDe,"A",{id:!0,class:!0,href:!0});var l4t=s(kF);Tbe=n(l4t,"SPAN",{});var i4t=s(Tbe);T(K8.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),Ucr=i(aDe),Mbe=n(aDe,"SPAN",{});var d4t=s(Mbe);Jcr=r(d4t,"TFAutoModelForPreTraining"),d4t.forEach(t),aDe.forEach(t),Zqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(Z8.$$.fragment,hl),Ycr=i(hl),Xd=n(hl,"P",{});var SZ=s(Xd);Kcr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MW=n(SZ,"A",{href:!0});var c4t=s(MW);Zcr=r(c4t,"from_pretrained()"),c4t.forEach(t),efr=r(SZ," class method or the "),EW=n(SZ,"A",{href:!0});var f4t=s(EW);ofr=r(f4t,"from_config()"),f4t.forEach(t),rfr=r(SZ,` class
method.`),SZ.forEach(t),tfr=i(hl),e7=n(hl,"P",{});var nDe=s(e7);afr=r(nDe,"This class cannot be instantiated directly using "),Ebe=n(nDe,"CODE",{});var m4t=s(Ebe);nfr=r(m4t,"__init__()"),m4t.forEach(t),sfr=r(nDe," (throws an error)."),nDe.forEach(t),lfr=i(hl),Lt=n(hl,"DIV",{class:!0});var fA=s(Lt);T(o7.$$.fragment,fA),ifr=i(fA),Cbe=n(fA,"P",{});var g4t=s(Cbe);dfr=r(g4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g4t.forEach(t),cfr=i(fA),zd=n(fA,"P",{});var RZ=s(zd);ffr=r(RZ,`Note:
Loading a model from its configuration file does `),wbe=n(RZ,"STRONG",{});var h4t=s(wbe);mfr=r(h4t,"not"),h4t.forEach(t),gfr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(RZ,"A",{href:!0});var p4t=s(CW);hfr=r(p4t,"from_pretrained()"),p4t.forEach(t),pfr=r(RZ," to load the model weights."),RZ.forEach(t),_fr=i(fA),T(SF.$$.fragment,fA),fA.forEach(t),ufr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(r7.$$.fragment,pl),bfr=i(pl),Abe=n(pl,"P",{});var _4t=s(Abe);vfr=r(_4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_4t.forEach(t),Ffr=i(pl),Za=n(pl,"P",{});var mA=s(Za);Tfr=r(mA,"The model class to instantiate is selected based on the "),ybe=n(mA,"CODE",{});var u4t=s(ybe);Mfr=r(u4t,"model_type"),u4t.forEach(t),Efr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(mA,"CODE",{});var b4t=s(Lbe);Cfr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),wfr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(mA,"CODE",{});var v4t=s(xbe);Afr=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),yfr=r(mA,":"),mA.forEach(t),Lfr=i(pl),se=n(pl,"UL",{});var le=s(se);RF=n(le,"LI",{});var Kke=s(RF);$be=n(Kke,"STRONG",{});var F4t=s($be);xfr=r(F4t,"albert"),F4t.forEach(t),$fr=r(Kke," \u2014 "),wW=n(Kke,"A",{href:!0});var T4t=s(wW);kfr=r(T4t,"TFAlbertForPreTraining"),T4t.forEach(t),Sfr=r(Kke," (ALBERT model)"),Kke.forEach(t),Rfr=i(le),PF=n(le,"LI",{});var Zke=s(PF);kbe=n(Zke,"STRONG",{});var M4t=s(kbe);Pfr=r(M4t,"bart"),M4t.forEach(t),Bfr=r(Zke," \u2014 "),AW=n(Zke,"A",{href:!0});var E4t=s(AW);Ifr=r(E4t,"TFBartForConditionalGeneration"),E4t.forEach(t),qfr=r(Zke," (BART model)"),Zke.forEach(t),Nfr=i(le),BF=n(le,"LI",{});var eSe=s(BF);Sbe=n(eSe,"STRONG",{});var C4t=s(Sbe);jfr=r(C4t,"bert"),C4t.forEach(t),Dfr=r(eSe," \u2014 "),yW=n(eSe,"A",{href:!0});var w4t=s(yW);Gfr=r(w4t,"TFBertForPreTraining"),w4t.forEach(t),Ofr=r(eSe," (BERT model)"),eSe.forEach(t),Vfr=i(le),IF=n(le,"LI",{});var oSe=s(IF);Rbe=n(oSe,"STRONG",{});var A4t=s(Rbe);Xfr=r(A4t,"camembert"),A4t.forEach(t),zfr=r(oSe," \u2014 "),LW=n(oSe,"A",{href:!0});var y4t=s(LW);Wfr=r(y4t,"TFCamembertForMaskedLM"),y4t.forEach(t),Qfr=r(oSe," (CamemBERT model)"),oSe.forEach(t),Hfr=i(le),qF=n(le,"LI",{});var rSe=s(qF);Pbe=n(rSe,"STRONG",{});var L4t=s(Pbe);Ufr=r(L4t,"ctrl"),L4t.forEach(t),Jfr=r(rSe," \u2014 "),xW=n(rSe,"A",{href:!0});var x4t=s(xW);Yfr=r(x4t,"TFCTRLLMHeadModel"),x4t.forEach(t),Kfr=r(rSe," (CTRL model)"),rSe.forEach(t),Zfr=i(le),NF=n(le,"LI",{});var tSe=s(NF);Bbe=n(tSe,"STRONG",{});var $4t=s(Bbe);emr=r($4t,"distilbert"),$4t.forEach(t),omr=r(tSe," \u2014 "),$W=n(tSe,"A",{href:!0});var k4t=s($W);rmr=r(k4t,"TFDistilBertForMaskedLM"),k4t.forEach(t),tmr=r(tSe," (DistilBERT model)"),tSe.forEach(t),amr=i(le),jF=n(le,"LI",{});var aSe=s(jF);Ibe=n(aSe,"STRONG",{});var S4t=s(Ibe);nmr=r(S4t,"electra"),S4t.forEach(t),smr=r(aSe," \u2014 "),kW=n(aSe,"A",{href:!0});var R4t=s(kW);lmr=r(R4t,"TFElectraForPreTraining"),R4t.forEach(t),imr=r(aSe," (ELECTRA model)"),aSe.forEach(t),dmr=i(le),DF=n(le,"LI",{});var nSe=s(DF);qbe=n(nSe,"STRONG",{});var P4t=s(qbe);cmr=r(P4t,"flaubert"),P4t.forEach(t),fmr=r(nSe," \u2014 "),SW=n(nSe,"A",{href:!0});var B4t=s(SW);mmr=r(B4t,"TFFlaubertWithLMHeadModel"),B4t.forEach(t),gmr=r(nSe," (FlauBERT model)"),nSe.forEach(t),hmr=i(le),GF=n(le,"LI",{});var sSe=s(GF);Nbe=n(sSe,"STRONG",{});var I4t=s(Nbe);pmr=r(I4t,"funnel"),I4t.forEach(t),_mr=r(sSe," \u2014 "),RW=n(sSe,"A",{href:!0});var q4t=s(RW);umr=r(q4t,"TFFunnelForPreTraining"),q4t.forEach(t),bmr=r(sSe," (Funnel Transformer model)"),sSe.forEach(t),vmr=i(le),OF=n(le,"LI",{});var lSe=s(OF);jbe=n(lSe,"STRONG",{});var N4t=s(jbe);Fmr=r(N4t,"gpt2"),N4t.forEach(t),Tmr=r(lSe," \u2014 "),PW=n(lSe,"A",{href:!0});var j4t=s(PW);Mmr=r(j4t,"TFGPT2LMHeadModel"),j4t.forEach(t),Emr=r(lSe," (OpenAI GPT-2 model)"),lSe.forEach(t),Cmr=i(le),VF=n(le,"LI",{});var iSe=s(VF);Dbe=n(iSe,"STRONG",{});var D4t=s(Dbe);wmr=r(D4t,"layoutlm"),D4t.forEach(t),Amr=r(iSe," \u2014 "),BW=n(iSe,"A",{href:!0});var G4t=s(BW);ymr=r(G4t,"TFLayoutLMForMaskedLM"),G4t.forEach(t),Lmr=r(iSe," (LayoutLM model)"),iSe.forEach(t),xmr=i(le),XF=n(le,"LI",{});var dSe=s(XF);Gbe=n(dSe,"STRONG",{});var O4t=s(Gbe);$mr=r(O4t,"lxmert"),O4t.forEach(t),kmr=r(dSe," \u2014 "),IW=n(dSe,"A",{href:!0});var V4t=s(IW);Smr=r(V4t,"TFLxmertForPreTraining"),V4t.forEach(t),Rmr=r(dSe," (LXMERT model)"),dSe.forEach(t),Pmr=i(le),zF=n(le,"LI",{});var cSe=s(zF);Obe=n(cSe,"STRONG",{});var X4t=s(Obe);Bmr=r(X4t,"mobilebert"),X4t.forEach(t),Imr=r(cSe," \u2014 "),qW=n(cSe,"A",{href:!0});var z4t=s(qW);qmr=r(z4t,"TFMobileBertForPreTraining"),z4t.forEach(t),Nmr=r(cSe," (MobileBERT model)"),cSe.forEach(t),jmr=i(le),WF=n(le,"LI",{});var fSe=s(WF);Vbe=n(fSe,"STRONG",{});var W4t=s(Vbe);Dmr=r(W4t,"mpnet"),W4t.forEach(t),Gmr=r(fSe," \u2014 "),NW=n(fSe,"A",{href:!0});var Q4t=s(NW);Omr=r(Q4t,"TFMPNetForMaskedLM"),Q4t.forEach(t),Vmr=r(fSe," (MPNet model)"),fSe.forEach(t),Xmr=i(le),QF=n(le,"LI",{});var mSe=s(QF);Xbe=n(mSe,"STRONG",{});var H4t=s(Xbe);zmr=r(H4t,"openai-gpt"),H4t.forEach(t),Wmr=r(mSe," \u2014 "),jW=n(mSe,"A",{href:!0});var U4t=s(jW);Qmr=r(U4t,"TFOpenAIGPTLMHeadModel"),U4t.forEach(t),Hmr=r(mSe," (OpenAI GPT model)"),mSe.forEach(t),Umr=i(le),HF=n(le,"LI",{});var gSe=s(HF);zbe=n(gSe,"STRONG",{});var J4t=s(zbe);Jmr=r(J4t,"roberta"),J4t.forEach(t),Ymr=r(gSe," \u2014 "),DW=n(gSe,"A",{href:!0});var Y4t=s(DW);Kmr=r(Y4t,"TFRobertaForMaskedLM"),Y4t.forEach(t),Zmr=r(gSe," (RoBERTa model)"),gSe.forEach(t),egr=i(le),UF=n(le,"LI",{});var hSe=s(UF);Wbe=n(hSe,"STRONG",{});var K4t=s(Wbe);ogr=r(K4t,"t5"),K4t.forEach(t),rgr=r(hSe," \u2014 "),GW=n(hSe,"A",{href:!0});var Z4t=s(GW);tgr=r(Z4t,"TFT5ForConditionalGeneration"),Z4t.forEach(t),agr=r(hSe," (T5 model)"),hSe.forEach(t),ngr=i(le),JF=n(le,"LI",{});var pSe=s(JF);Qbe=n(pSe,"STRONG",{});var e5t=s(Qbe);sgr=r(e5t,"tapas"),e5t.forEach(t),lgr=r(pSe," \u2014 "),OW=n(pSe,"A",{href:!0});var o5t=s(OW);igr=r(o5t,"TFTapasForMaskedLM"),o5t.forEach(t),dgr=r(pSe," (TAPAS model)"),pSe.forEach(t),cgr=i(le),YF=n(le,"LI",{});var _Se=s(YF);Hbe=n(_Se,"STRONG",{});var r5t=s(Hbe);fgr=r(r5t,"transfo-xl"),r5t.forEach(t),mgr=r(_Se," \u2014 "),VW=n(_Se,"A",{href:!0});var t5t=s(VW);ggr=r(t5t,"TFTransfoXLLMHeadModel"),t5t.forEach(t),hgr=r(_Se," (Transformer-XL model)"),_Se.forEach(t),pgr=i(le),KF=n(le,"LI",{});var uSe=s(KF);Ube=n(uSe,"STRONG",{});var a5t=s(Ube);_gr=r(a5t,"vit_mae"),a5t.forEach(t),ugr=r(uSe," \u2014 "),XW=n(uSe,"A",{href:!0});var n5t=s(XW);bgr=r(n5t,"TFViTMAEForPreTraining"),n5t.forEach(t),vgr=r(uSe," (ViTMAE model)"),uSe.forEach(t),Fgr=i(le),ZF=n(le,"LI",{});var bSe=s(ZF);Jbe=n(bSe,"STRONG",{});var s5t=s(Jbe);Tgr=r(s5t,"xlm"),s5t.forEach(t),Mgr=r(bSe," \u2014 "),zW=n(bSe,"A",{href:!0});var l5t=s(zW);Egr=r(l5t,"TFXLMWithLMHeadModel"),l5t.forEach(t),Cgr=r(bSe," (XLM model)"),bSe.forEach(t),wgr=i(le),e6=n(le,"LI",{});var vSe=s(e6);Ybe=n(vSe,"STRONG",{});var i5t=s(Ybe);Agr=r(i5t,"xlm-roberta"),i5t.forEach(t),ygr=r(vSe," \u2014 "),WW=n(vSe,"A",{href:!0});var d5t=s(WW);Lgr=r(d5t,"TFXLMRobertaForMaskedLM"),d5t.forEach(t),xgr=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),$gr=i(le),o6=n(le,"LI",{});var FSe=s(o6);Kbe=n(FSe,"STRONG",{});var c5t=s(Kbe);kgr=r(c5t,"xlnet"),c5t.forEach(t),Sgr=r(FSe," \u2014 "),QW=n(FSe,"A",{href:!0});var f5t=s(QW);Rgr=r(f5t,"TFXLNetLMHeadModel"),f5t.forEach(t),Pgr=r(FSe," (XLNet model)"),FSe.forEach(t),le.forEach(t),Bgr=i(pl),T(r6.$$.fragment,pl),pl.forEach(t),hl.forEach(t),eNe=i(f),Wd=n(f,"H2",{class:!0});var sDe=s(Wd);t6=n(sDe,"A",{id:!0,class:!0,href:!0});var m5t=s(t6);Zbe=n(m5t,"SPAN",{});var g5t=s(Zbe);T(t7.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),Igr=i(sDe),e2e=n(sDe,"SPAN",{});var h5t=s(e2e);qgr=r(h5t,"TFAutoModelForCausalLM"),h5t.forEach(t),sDe.forEach(t),oNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(a7.$$.fragment,_l),Ngr=i(_l),Qd=n(_l,"P",{});var PZ=s(Qd);jgr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HW=n(PZ,"A",{href:!0});var p5t=s(HW);Dgr=r(p5t,"from_pretrained()"),p5t.forEach(t),Ggr=r(PZ," class method or the "),UW=n(PZ,"A",{href:!0});var _5t=s(UW);Ogr=r(_5t,"from_config()"),_5t.forEach(t),Vgr=r(PZ,` class
method.`),PZ.forEach(t),Xgr=i(_l),n7=n(_l,"P",{});var lDe=s(n7);zgr=r(lDe,"This class cannot be instantiated directly using "),o2e=n(lDe,"CODE",{});var u5t=s(o2e);Wgr=r(u5t,"__init__()"),u5t.forEach(t),Qgr=r(lDe," (throws an error)."),lDe.forEach(t),Hgr=i(_l),xt=n(_l,"DIV",{class:!0});var gA=s(xt);T(s7.$$.fragment,gA),Ugr=i(gA),r2e=n(gA,"P",{});var b5t=s(r2e);Jgr=r(b5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b5t.forEach(t),Ygr=i(gA),Hd=n(gA,"P",{});var BZ=s(Hd);Kgr=r(BZ,`Note:
Loading a model from its configuration file does `),t2e=n(BZ,"STRONG",{});var v5t=s(t2e);Zgr=r(v5t,"not"),v5t.forEach(t),ehr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(BZ,"A",{href:!0});var F5t=s(JW);ohr=r(F5t,"from_pretrained()"),F5t.forEach(t),rhr=r(BZ," to load the model weights."),BZ.forEach(t),thr=i(gA),T(a6.$$.fragment,gA),gA.forEach(t),ahr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(l7.$$.fragment,ul),nhr=i(ul),a2e=n(ul,"P",{});var T5t=s(a2e);shr=r(T5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T5t.forEach(t),lhr=i(ul),en=n(ul,"P",{});var hA=s(en);ihr=r(hA,"The model class to instantiate is selected based on the "),n2e=n(hA,"CODE",{});var M5t=s(n2e);dhr=r(M5t,"model_type"),M5t.forEach(t),chr=r(hA,` property of the config object (either
passed as an argument or loaded from `),s2e=n(hA,"CODE",{});var E5t=s(s2e);fhr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),mhr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(hA,"CODE",{});var C5t=s(l2e);ghr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),hhr=r(hA,":"),hA.forEach(t),phr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);n6=n(Ce,"LI",{});var TSe=s(n6);i2e=n(TSe,"STRONG",{});var w5t=s(i2e);_hr=r(w5t,"bert"),w5t.forEach(t),uhr=r(TSe," \u2014 "),YW=n(TSe,"A",{href:!0});var A5t=s(YW);bhr=r(A5t,"TFBertLMHeadModel"),A5t.forEach(t),vhr=r(TSe," (BERT model)"),TSe.forEach(t),Fhr=i(Ce),s6=n(Ce,"LI",{});var MSe=s(s6);d2e=n(MSe,"STRONG",{});var y5t=s(d2e);Thr=r(y5t,"camembert"),y5t.forEach(t),Mhr=r(MSe," \u2014 "),KW=n(MSe,"A",{href:!0});var L5t=s(KW);Ehr=r(L5t,"TFCamembertForCausalLM"),L5t.forEach(t),Chr=r(MSe," (CamemBERT model)"),MSe.forEach(t),whr=i(Ce),l6=n(Ce,"LI",{});var ESe=s(l6);c2e=n(ESe,"STRONG",{});var x5t=s(c2e);Ahr=r(x5t,"ctrl"),x5t.forEach(t),yhr=r(ESe," \u2014 "),ZW=n(ESe,"A",{href:!0});var $5t=s(ZW);Lhr=r($5t,"TFCTRLLMHeadModel"),$5t.forEach(t),xhr=r(ESe," (CTRL model)"),ESe.forEach(t),$hr=i(Ce),i6=n(Ce,"LI",{});var CSe=s(i6);f2e=n(CSe,"STRONG",{});var k5t=s(f2e);khr=r(k5t,"gpt2"),k5t.forEach(t),Shr=r(CSe," \u2014 "),eQ=n(CSe,"A",{href:!0});var S5t=s(eQ);Rhr=r(S5t,"TFGPT2LMHeadModel"),S5t.forEach(t),Phr=r(CSe," (OpenAI GPT-2 model)"),CSe.forEach(t),Bhr=i(Ce),d6=n(Ce,"LI",{});var wSe=s(d6);m2e=n(wSe,"STRONG",{});var R5t=s(m2e);Ihr=r(R5t,"gptj"),R5t.forEach(t),qhr=r(wSe," \u2014 "),oQ=n(wSe,"A",{href:!0});var P5t=s(oQ);Nhr=r(P5t,"TFGPTJForCausalLM"),P5t.forEach(t),jhr=r(wSe," (GPT-J model)"),wSe.forEach(t),Dhr=i(Ce),c6=n(Ce,"LI",{});var ASe=s(c6);g2e=n(ASe,"STRONG",{});var B5t=s(g2e);Ghr=r(B5t,"openai-gpt"),B5t.forEach(t),Ohr=r(ASe," \u2014 "),rQ=n(ASe,"A",{href:!0});var I5t=s(rQ);Vhr=r(I5t,"TFOpenAIGPTLMHeadModel"),I5t.forEach(t),Xhr=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),zhr=i(Ce),f6=n(Ce,"LI",{});var ySe=s(f6);h2e=n(ySe,"STRONG",{});var q5t=s(h2e);Whr=r(q5t,"rembert"),q5t.forEach(t),Qhr=r(ySe," \u2014 "),tQ=n(ySe,"A",{href:!0});var N5t=s(tQ);Hhr=r(N5t,"TFRemBertForCausalLM"),N5t.forEach(t),Uhr=r(ySe," (RemBERT model)"),ySe.forEach(t),Jhr=i(Ce),m6=n(Ce,"LI",{});var LSe=s(m6);p2e=n(LSe,"STRONG",{});var j5t=s(p2e);Yhr=r(j5t,"roberta"),j5t.forEach(t),Khr=r(LSe," \u2014 "),aQ=n(LSe,"A",{href:!0});var D5t=s(aQ);Zhr=r(D5t,"TFRobertaForCausalLM"),D5t.forEach(t),epr=r(LSe," (RoBERTa model)"),LSe.forEach(t),opr=i(Ce),g6=n(Ce,"LI",{});var xSe=s(g6);_2e=n(xSe,"STRONG",{});var G5t=s(_2e);rpr=r(G5t,"roformer"),G5t.forEach(t),tpr=r(xSe," \u2014 "),nQ=n(xSe,"A",{href:!0});var O5t=s(nQ);apr=r(O5t,"TFRoFormerForCausalLM"),O5t.forEach(t),npr=r(xSe," (RoFormer model)"),xSe.forEach(t),spr=i(Ce),h6=n(Ce,"LI",{});var $Se=s(h6);u2e=n($Se,"STRONG",{});var V5t=s(u2e);lpr=r(V5t,"transfo-xl"),V5t.forEach(t),ipr=r($Se," \u2014 "),sQ=n($Se,"A",{href:!0});var X5t=s(sQ);dpr=r(X5t,"TFTransfoXLLMHeadModel"),X5t.forEach(t),cpr=r($Se," (Transformer-XL model)"),$Se.forEach(t),fpr=i(Ce),p6=n(Ce,"LI",{});var kSe=s(p6);b2e=n(kSe,"STRONG",{});var z5t=s(b2e);mpr=r(z5t,"xglm"),z5t.forEach(t),gpr=r(kSe," \u2014 "),lQ=n(kSe,"A",{href:!0});var W5t=s(lQ);hpr=r(W5t,"TFXGLMForCausalLM"),W5t.forEach(t),ppr=r(kSe," (XGLM model)"),kSe.forEach(t),_pr=i(Ce),_6=n(Ce,"LI",{});var SSe=s(_6);v2e=n(SSe,"STRONG",{});var Q5t=s(v2e);upr=r(Q5t,"xlm"),Q5t.forEach(t),bpr=r(SSe," \u2014 "),iQ=n(SSe,"A",{href:!0});var H5t=s(iQ);vpr=r(H5t,"TFXLMWithLMHeadModel"),H5t.forEach(t),Fpr=r(SSe," (XLM model)"),SSe.forEach(t),Tpr=i(Ce),u6=n(Ce,"LI",{});var RSe=s(u6);F2e=n(RSe,"STRONG",{});var U5t=s(F2e);Mpr=r(U5t,"xlnet"),U5t.forEach(t),Epr=r(RSe," \u2014 "),dQ=n(RSe,"A",{href:!0});var J5t=s(dQ);Cpr=r(J5t,"TFXLNetLMHeadModel"),J5t.forEach(t),wpr=r(RSe," (XLNet model)"),RSe.forEach(t),Ce.forEach(t),Apr=i(ul),T(b6.$$.fragment,ul),ul.forEach(t),_l.forEach(t),rNe=i(f),Ud=n(f,"H2",{class:!0});var iDe=s(Ud);v6=n(iDe,"A",{id:!0,class:!0,href:!0});var Y5t=s(v6);T2e=n(Y5t,"SPAN",{});var K5t=s(T2e);T(i7.$$.fragment,K5t),K5t.forEach(t),Y5t.forEach(t),ypr=i(iDe),M2e=n(iDe,"SPAN",{});var Z5t=s(M2e);Lpr=r(Z5t,"TFAutoModelForImageClassification"),Z5t.forEach(t),iDe.forEach(t),tNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(d7.$$.fragment,bl),xpr=i(bl),Jd=n(bl,"P",{});var IZ=s(Jd);$pr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cQ=n(IZ,"A",{href:!0});var evt=s(cQ);kpr=r(evt,"from_pretrained()"),evt.forEach(t),Spr=r(IZ," class method or the "),fQ=n(IZ,"A",{href:!0});var ovt=s(fQ);Rpr=r(ovt,"from_config()"),ovt.forEach(t),Ppr=r(IZ,` class
method.`),IZ.forEach(t),Bpr=i(bl),c7=n(bl,"P",{});var dDe=s(c7);Ipr=r(dDe,"This class cannot be instantiated directly using "),E2e=n(dDe,"CODE",{});var rvt=s(E2e);qpr=r(rvt,"__init__()"),rvt.forEach(t),Npr=r(dDe," (throws an error)."),dDe.forEach(t),jpr=i(bl),$t=n(bl,"DIV",{class:!0});var pA=s($t);T(f7.$$.fragment,pA),Dpr=i(pA),C2e=n(pA,"P",{});var tvt=s(C2e);Gpr=r(tvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tvt.forEach(t),Opr=i(pA),Yd=n(pA,"P",{});var qZ=s(Yd);Vpr=r(qZ,`Note:
Loading a model from its configuration file does `),w2e=n(qZ,"STRONG",{});var avt=s(w2e);Xpr=r(avt,"not"),avt.forEach(t),zpr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(qZ,"A",{href:!0});var nvt=s(mQ);Wpr=r(nvt,"from_pretrained()"),nvt.forEach(t),Qpr=r(qZ," to load the model weights."),qZ.forEach(t),Hpr=i(pA),T(F6.$$.fragment,pA),pA.forEach(t),Upr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(m7.$$.fragment,vl),Jpr=i(vl),A2e=n(vl,"P",{});var svt=s(A2e);Ypr=r(svt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),svt.forEach(t),Kpr=i(vl),on=n(vl,"P",{});var _A=s(on);Zpr=r(_A,"The model class to instantiate is selected based on the "),y2e=n(_A,"CODE",{});var lvt=s(y2e);e_r=r(lvt,"model_type"),lvt.forEach(t),o_r=r(_A,` property of the config object (either
passed as an argument or loaded from `),L2e=n(_A,"CODE",{});var ivt=s(L2e);r_r=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),t_r=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(_A,"CODE",{});var dvt=s(x2e);a_r=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),n_r=r(_A,":"),_A.forEach(t),s_r=i(vl),rn=n(vl,"UL",{});var uA=s(rn);T6=n(uA,"LI",{});var PSe=s(T6);$2e=n(PSe,"STRONG",{});var cvt=s($2e);l_r=r(cvt,"convnext"),cvt.forEach(t),i_r=r(PSe," \u2014 "),gQ=n(PSe,"A",{href:!0});var fvt=s(gQ);d_r=r(fvt,"TFConvNextForImageClassification"),fvt.forEach(t),c_r=r(PSe," (ConvNext model)"),PSe.forEach(t),f_r=i(uA),M6=n(uA,"LI",{});var BSe=s(M6);k2e=n(BSe,"STRONG",{});var mvt=s(k2e);m_r=r(mvt,"data2vec-vision"),mvt.forEach(t),g_r=r(BSe," \u2014 "),hQ=n(BSe,"A",{href:!0});var gvt=s(hQ);h_r=r(gvt,"TFData2VecVisionForImageClassification"),gvt.forEach(t),p_r=r(BSe," (Data2VecVision model)"),BSe.forEach(t),__r=i(uA),E6=n(uA,"LI",{});var ISe=s(E6);S2e=n(ISe,"STRONG",{});var hvt=s(S2e);u_r=r(hvt,"swin"),hvt.forEach(t),b_r=r(ISe," \u2014 "),pQ=n(ISe,"A",{href:!0});var pvt=s(pQ);v_r=r(pvt,"TFSwinForImageClassification"),pvt.forEach(t),F_r=r(ISe," (Swin model)"),ISe.forEach(t),T_r=i(uA),C6=n(uA,"LI",{});var qSe=s(C6);R2e=n(qSe,"STRONG",{});var _vt=s(R2e);M_r=r(_vt,"vit"),_vt.forEach(t),E_r=r(qSe," \u2014 "),_Q=n(qSe,"A",{href:!0});var uvt=s(_Q);C_r=r(uvt,"TFViTForImageClassification"),uvt.forEach(t),w_r=r(qSe," (ViT model)"),qSe.forEach(t),uA.forEach(t),A_r=i(vl),T(w6.$$.fragment,vl),vl.forEach(t),bl.forEach(t),aNe=i(f),Kd=n(f,"H2",{class:!0});var cDe=s(Kd);A6=n(cDe,"A",{id:!0,class:!0,href:!0});var bvt=s(A6);P2e=n(bvt,"SPAN",{});var vvt=s(P2e);T(g7.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),y_r=i(cDe),B2e=n(cDe,"SPAN",{});var Fvt=s(B2e);L_r=r(Fvt,"TFAutoModelForMaskedLM"),Fvt.forEach(t),cDe.forEach(t),nNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(h7.$$.fragment,Fl),x_r=i(Fl),Zd=n(Fl,"P",{});var NZ=s(Zd);$_r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uQ=n(NZ,"A",{href:!0});var Tvt=s(uQ);k_r=r(Tvt,"from_pretrained()"),Tvt.forEach(t),S_r=r(NZ," class method or the "),bQ=n(NZ,"A",{href:!0});var Mvt=s(bQ);R_r=r(Mvt,"from_config()"),Mvt.forEach(t),P_r=r(NZ,` class
method.`),NZ.forEach(t),B_r=i(Fl),p7=n(Fl,"P",{});var fDe=s(p7);I_r=r(fDe,"This class cannot be instantiated directly using "),I2e=n(fDe,"CODE",{});var Evt=s(I2e);q_r=r(Evt,"__init__()"),Evt.forEach(t),N_r=r(fDe," (throws an error)."),fDe.forEach(t),j_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var bA=s(kt);T(_7.$$.fragment,bA),D_r=i(bA),q2e=n(bA,"P",{});var Cvt=s(q2e);G_r=r(Cvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cvt.forEach(t),O_r=i(bA),ec=n(bA,"P",{});var jZ=s(ec);V_r=r(jZ,`Note:
Loading a model from its configuration file does `),N2e=n(jZ,"STRONG",{});var wvt=s(N2e);X_r=r(wvt,"not"),wvt.forEach(t),z_r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(jZ,"A",{href:!0});var Avt=s(vQ);W_r=r(Avt,"from_pretrained()"),Avt.forEach(t),Q_r=r(jZ," to load the model weights."),jZ.forEach(t),H_r=i(bA),T(y6.$$.fragment,bA),bA.forEach(t),U_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(u7.$$.fragment,Tl),J_r=i(Tl),j2e=n(Tl,"P",{});var yvt=s(j2e);Y_r=r(yvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yvt.forEach(t),K_r=i(Tl),tn=n(Tl,"P",{});var vA=s(tn);Z_r=r(vA,"The model class to instantiate is selected based on the "),D2e=n(vA,"CODE",{});var Lvt=s(D2e);eur=r(Lvt,"model_type"),Lvt.forEach(t),our=r(vA,` property of the config object (either
passed as an argument or loaded from `),G2e=n(vA,"CODE",{});var xvt=s(G2e);rur=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),tur=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(vA,"CODE",{});var $vt=s(O2e);aur=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),nur=r(vA,":"),vA.forEach(t),sur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);L6=n(fe,"LI",{});var NSe=s(L6);V2e=n(NSe,"STRONG",{});var kvt=s(V2e);lur=r(kvt,"albert"),kvt.forEach(t),iur=r(NSe," \u2014 "),FQ=n(NSe,"A",{href:!0});var Svt=s(FQ);dur=r(Svt,"TFAlbertForMaskedLM"),Svt.forEach(t),cur=r(NSe," (ALBERT model)"),NSe.forEach(t),fur=i(fe),x6=n(fe,"LI",{});var jSe=s(x6);X2e=n(jSe,"STRONG",{});var Rvt=s(X2e);mur=r(Rvt,"bert"),Rvt.forEach(t),gur=r(jSe," \u2014 "),TQ=n(jSe,"A",{href:!0});var Pvt=s(TQ);hur=r(Pvt,"TFBertForMaskedLM"),Pvt.forEach(t),pur=r(jSe," (BERT model)"),jSe.forEach(t),_ur=i(fe),$6=n(fe,"LI",{});var DSe=s($6);z2e=n(DSe,"STRONG",{});var Bvt=s(z2e);uur=r(Bvt,"camembert"),Bvt.forEach(t),bur=r(DSe," \u2014 "),MQ=n(DSe,"A",{href:!0});var Ivt=s(MQ);vur=r(Ivt,"TFCamembertForMaskedLM"),Ivt.forEach(t),Fur=r(DSe," (CamemBERT model)"),DSe.forEach(t),Tur=i(fe),k6=n(fe,"LI",{});var GSe=s(k6);W2e=n(GSe,"STRONG",{});var qvt=s(W2e);Mur=r(qvt,"convbert"),qvt.forEach(t),Eur=r(GSe," \u2014 "),EQ=n(GSe,"A",{href:!0});var Nvt=s(EQ);Cur=r(Nvt,"TFConvBertForMaskedLM"),Nvt.forEach(t),wur=r(GSe," (ConvBERT model)"),GSe.forEach(t),Aur=i(fe),S6=n(fe,"LI",{});var OSe=s(S6);Q2e=n(OSe,"STRONG",{});var jvt=s(Q2e);yur=r(jvt,"deberta"),jvt.forEach(t),Lur=r(OSe," \u2014 "),CQ=n(OSe,"A",{href:!0});var Dvt=s(CQ);xur=r(Dvt,"TFDebertaForMaskedLM"),Dvt.forEach(t),$ur=r(OSe," (DeBERTa model)"),OSe.forEach(t),kur=i(fe),R6=n(fe,"LI",{});var VSe=s(R6);H2e=n(VSe,"STRONG",{});var Gvt=s(H2e);Sur=r(Gvt,"deberta-v2"),Gvt.forEach(t),Rur=r(VSe," \u2014 "),wQ=n(VSe,"A",{href:!0});var Ovt=s(wQ);Pur=r(Ovt,"TFDebertaV2ForMaskedLM"),Ovt.forEach(t),Bur=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),Iur=i(fe),P6=n(fe,"LI",{});var XSe=s(P6);U2e=n(XSe,"STRONG",{});var Vvt=s(U2e);qur=r(Vvt,"distilbert"),Vvt.forEach(t),Nur=r(XSe," \u2014 "),AQ=n(XSe,"A",{href:!0});var Xvt=s(AQ);jur=r(Xvt,"TFDistilBertForMaskedLM"),Xvt.forEach(t),Dur=r(XSe," (DistilBERT model)"),XSe.forEach(t),Gur=i(fe),B6=n(fe,"LI",{});var zSe=s(B6);J2e=n(zSe,"STRONG",{});var zvt=s(J2e);Our=r(zvt,"electra"),zvt.forEach(t),Vur=r(zSe," \u2014 "),yQ=n(zSe,"A",{href:!0});var Wvt=s(yQ);Xur=r(Wvt,"TFElectraForMaskedLM"),Wvt.forEach(t),zur=r(zSe," (ELECTRA model)"),zSe.forEach(t),Wur=i(fe),I6=n(fe,"LI",{});var WSe=s(I6);Y2e=n(WSe,"STRONG",{});var Qvt=s(Y2e);Qur=r(Qvt,"flaubert"),Qvt.forEach(t),Hur=r(WSe," \u2014 "),LQ=n(WSe,"A",{href:!0});var Hvt=s(LQ);Uur=r(Hvt,"TFFlaubertWithLMHeadModel"),Hvt.forEach(t),Jur=r(WSe," (FlauBERT model)"),WSe.forEach(t),Yur=i(fe),q6=n(fe,"LI",{});var QSe=s(q6);K2e=n(QSe,"STRONG",{});var Uvt=s(K2e);Kur=r(Uvt,"funnel"),Uvt.forEach(t),Zur=r(QSe," \u2014 "),xQ=n(QSe,"A",{href:!0});var Jvt=s(xQ);e1r=r(Jvt,"TFFunnelForMaskedLM"),Jvt.forEach(t),o1r=r(QSe," (Funnel Transformer model)"),QSe.forEach(t),r1r=i(fe),N6=n(fe,"LI",{});var HSe=s(N6);Z2e=n(HSe,"STRONG",{});var Yvt=s(Z2e);t1r=r(Yvt,"layoutlm"),Yvt.forEach(t),a1r=r(HSe," \u2014 "),$Q=n(HSe,"A",{href:!0});var Kvt=s($Q);n1r=r(Kvt,"TFLayoutLMForMaskedLM"),Kvt.forEach(t),s1r=r(HSe," (LayoutLM model)"),HSe.forEach(t),l1r=i(fe),j6=n(fe,"LI",{});var USe=s(j6);e4e=n(USe,"STRONG",{});var Zvt=s(e4e);i1r=r(Zvt,"longformer"),Zvt.forEach(t),d1r=r(USe," \u2014 "),kQ=n(USe,"A",{href:!0});var e3t=s(kQ);c1r=r(e3t,"TFLongformerForMaskedLM"),e3t.forEach(t),f1r=r(USe," (Longformer model)"),USe.forEach(t),m1r=i(fe),D6=n(fe,"LI",{});var JSe=s(D6);o4e=n(JSe,"STRONG",{});var o3t=s(o4e);g1r=r(o3t,"mobilebert"),o3t.forEach(t),h1r=r(JSe," \u2014 "),SQ=n(JSe,"A",{href:!0});var r3t=s(SQ);p1r=r(r3t,"TFMobileBertForMaskedLM"),r3t.forEach(t),_1r=r(JSe," (MobileBERT model)"),JSe.forEach(t),u1r=i(fe),G6=n(fe,"LI",{});var YSe=s(G6);r4e=n(YSe,"STRONG",{});var t3t=s(r4e);b1r=r(t3t,"mpnet"),t3t.forEach(t),v1r=r(YSe," \u2014 "),RQ=n(YSe,"A",{href:!0});var a3t=s(RQ);F1r=r(a3t,"TFMPNetForMaskedLM"),a3t.forEach(t),T1r=r(YSe," (MPNet model)"),YSe.forEach(t),M1r=i(fe),O6=n(fe,"LI",{});var KSe=s(O6);t4e=n(KSe,"STRONG",{});var n3t=s(t4e);E1r=r(n3t,"rembert"),n3t.forEach(t),C1r=r(KSe," \u2014 "),PQ=n(KSe,"A",{href:!0});var s3t=s(PQ);w1r=r(s3t,"TFRemBertForMaskedLM"),s3t.forEach(t),A1r=r(KSe," (RemBERT model)"),KSe.forEach(t),y1r=i(fe),V6=n(fe,"LI",{});var ZSe=s(V6);a4e=n(ZSe,"STRONG",{});var l3t=s(a4e);L1r=r(l3t,"roberta"),l3t.forEach(t),x1r=r(ZSe," \u2014 "),BQ=n(ZSe,"A",{href:!0});var i3t=s(BQ);$1r=r(i3t,"TFRobertaForMaskedLM"),i3t.forEach(t),k1r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),S1r=i(fe),X6=n(fe,"LI",{});var eRe=s(X6);n4e=n(eRe,"STRONG",{});var d3t=s(n4e);R1r=r(d3t,"roformer"),d3t.forEach(t),P1r=r(eRe," \u2014 "),IQ=n(eRe,"A",{href:!0});var c3t=s(IQ);B1r=r(c3t,"TFRoFormerForMaskedLM"),c3t.forEach(t),I1r=r(eRe," (RoFormer model)"),eRe.forEach(t),q1r=i(fe),z6=n(fe,"LI",{});var oRe=s(z6);s4e=n(oRe,"STRONG",{});var f3t=s(s4e);N1r=r(f3t,"tapas"),f3t.forEach(t),j1r=r(oRe," \u2014 "),qQ=n(oRe,"A",{href:!0});var m3t=s(qQ);D1r=r(m3t,"TFTapasForMaskedLM"),m3t.forEach(t),G1r=r(oRe," (TAPAS model)"),oRe.forEach(t),O1r=i(fe),W6=n(fe,"LI",{});var rRe=s(W6);l4e=n(rRe,"STRONG",{});var g3t=s(l4e);V1r=r(g3t,"xlm"),g3t.forEach(t),X1r=r(rRe," \u2014 "),NQ=n(rRe,"A",{href:!0});var h3t=s(NQ);z1r=r(h3t,"TFXLMWithLMHeadModel"),h3t.forEach(t),W1r=r(rRe," (XLM model)"),rRe.forEach(t),Q1r=i(fe),Q6=n(fe,"LI",{});var tRe=s(Q6);i4e=n(tRe,"STRONG",{});var p3t=s(i4e);H1r=r(p3t,"xlm-roberta"),p3t.forEach(t),U1r=r(tRe," \u2014 "),jQ=n(tRe,"A",{href:!0});var _3t=s(jQ);J1r=r(_3t,"TFXLMRobertaForMaskedLM"),_3t.forEach(t),Y1r=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),fe.forEach(t),K1r=i(Tl),T(H6.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),sNe=i(f),oc=n(f,"H2",{class:!0});var mDe=s(oc);U6=n(mDe,"A",{id:!0,class:!0,href:!0});var u3t=s(U6);d4e=n(u3t,"SPAN",{});var b3t=s(d4e);T(b7.$$.fragment,b3t),b3t.forEach(t),u3t.forEach(t),Z1r=i(mDe),c4e=n(mDe,"SPAN",{});var v3t=s(c4e);ebr=r(v3t,"TFAutoModelForSeq2SeqLM"),v3t.forEach(t),mDe.forEach(t),lNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(v7.$$.fragment,Ml),obr=i(Ml),rc=n(Ml,"P",{});var DZ=s(rc);rbr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DQ=n(DZ,"A",{href:!0});var F3t=s(DQ);tbr=r(F3t,"from_pretrained()"),F3t.forEach(t),abr=r(DZ," class method or the "),GQ=n(DZ,"A",{href:!0});var T3t=s(GQ);nbr=r(T3t,"from_config()"),T3t.forEach(t),sbr=r(DZ,` class
method.`),DZ.forEach(t),lbr=i(Ml),F7=n(Ml,"P",{});var gDe=s(F7);ibr=r(gDe,"This class cannot be instantiated directly using "),f4e=n(gDe,"CODE",{});var M3t=s(f4e);dbr=r(M3t,"__init__()"),M3t.forEach(t),cbr=r(gDe," (throws an error)."),gDe.forEach(t),fbr=i(Ml),St=n(Ml,"DIV",{class:!0});var FA=s(St);T(T7.$$.fragment,FA),mbr=i(FA),m4e=n(FA,"P",{});var E3t=s(m4e);gbr=r(E3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E3t.forEach(t),hbr=i(FA),tc=n(FA,"P",{});var GZ=s(tc);pbr=r(GZ,`Note:
Loading a model from its configuration file does `),g4e=n(GZ,"STRONG",{});var C3t=s(g4e);_br=r(C3t,"not"),C3t.forEach(t),ubr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(GZ,"A",{href:!0});var w3t=s(OQ);bbr=r(w3t,"from_pretrained()"),w3t.forEach(t),vbr=r(GZ," to load the model weights."),GZ.forEach(t),Fbr=i(FA),T(J6.$$.fragment,FA),FA.forEach(t),Tbr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(M7.$$.fragment,El),Mbr=i(El),h4e=n(El,"P",{});var A3t=s(h4e);Ebr=r(A3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A3t.forEach(t),Cbr=i(El),an=n(El,"P",{});var TA=s(an);wbr=r(TA,"The model class to instantiate is selected based on the "),p4e=n(TA,"CODE",{});var y3t=s(p4e);Abr=r(y3t,"model_type"),y3t.forEach(t),ybr=r(TA,` property of the config object (either
passed as an argument or loaded from `),_4e=n(TA,"CODE",{});var L3t=s(_4e);Lbr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),xbr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=n(TA,"CODE",{});var x3t=s(u4e);$br=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),kbr=r(TA,":"),TA.forEach(t),Sbr=i(El),ye=n(El,"UL",{});var Be=s(ye);Y6=n(Be,"LI",{});var aRe=s(Y6);b4e=n(aRe,"STRONG",{});var $3t=s(b4e);Rbr=r($3t,"bart"),$3t.forEach(t),Pbr=r(aRe," \u2014 "),VQ=n(aRe,"A",{href:!0});var k3t=s(VQ);Bbr=r(k3t,"TFBartForConditionalGeneration"),k3t.forEach(t),Ibr=r(aRe," (BART model)"),aRe.forEach(t),qbr=i(Be),K6=n(Be,"LI",{});var nRe=s(K6);v4e=n(nRe,"STRONG",{});var S3t=s(v4e);Nbr=r(S3t,"blenderbot"),S3t.forEach(t),jbr=r(nRe," \u2014 "),XQ=n(nRe,"A",{href:!0});var R3t=s(XQ);Dbr=r(R3t,"TFBlenderbotForConditionalGeneration"),R3t.forEach(t),Gbr=r(nRe," (Blenderbot model)"),nRe.forEach(t),Obr=i(Be),Z6=n(Be,"LI",{});var sRe=s(Z6);F4e=n(sRe,"STRONG",{});var P3t=s(F4e);Vbr=r(P3t,"blenderbot-small"),P3t.forEach(t),Xbr=r(sRe," \u2014 "),zQ=n(sRe,"A",{href:!0});var B3t=s(zQ);zbr=r(B3t,"TFBlenderbotSmallForConditionalGeneration"),B3t.forEach(t),Wbr=r(sRe," (BlenderbotSmall model)"),sRe.forEach(t),Qbr=i(Be),eT=n(Be,"LI",{});var lRe=s(eT);T4e=n(lRe,"STRONG",{});var I3t=s(T4e);Hbr=r(I3t,"encoder-decoder"),I3t.forEach(t),Ubr=r(lRe," \u2014 "),WQ=n(lRe,"A",{href:!0});var q3t=s(WQ);Jbr=r(q3t,"TFEncoderDecoderModel"),q3t.forEach(t),Ybr=r(lRe," (Encoder decoder model)"),lRe.forEach(t),Kbr=i(Be),oT=n(Be,"LI",{});var iRe=s(oT);M4e=n(iRe,"STRONG",{});var N3t=s(M4e);Zbr=r(N3t,"led"),N3t.forEach(t),e2r=r(iRe," \u2014 "),QQ=n(iRe,"A",{href:!0});var j3t=s(QQ);o2r=r(j3t,"TFLEDForConditionalGeneration"),j3t.forEach(t),r2r=r(iRe," (LED model)"),iRe.forEach(t),t2r=i(Be),rT=n(Be,"LI",{});var dRe=s(rT);E4e=n(dRe,"STRONG",{});var D3t=s(E4e);a2r=r(D3t,"marian"),D3t.forEach(t),n2r=r(dRe," \u2014 "),HQ=n(dRe,"A",{href:!0});var G3t=s(HQ);s2r=r(G3t,"TFMarianMTModel"),G3t.forEach(t),l2r=r(dRe," (Marian model)"),dRe.forEach(t),i2r=i(Be),tT=n(Be,"LI",{});var cRe=s(tT);C4e=n(cRe,"STRONG",{});var O3t=s(C4e);d2r=r(O3t,"mbart"),O3t.forEach(t),c2r=r(cRe," \u2014 "),UQ=n(cRe,"A",{href:!0});var V3t=s(UQ);f2r=r(V3t,"TFMBartForConditionalGeneration"),V3t.forEach(t),m2r=r(cRe," (mBART model)"),cRe.forEach(t),g2r=i(Be),aT=n(Be,"LI",{});var fRe=s(aT);w4e=n(fRe,"STRONG",{});var X3t=s(w4e);h2r=r(X3t,"mt5"),X3t.forEach(t),p2r=r(fRe," \u2014 "),JQ=n(fRe,"A",{href:!0});var z3t=s(JQ);_2r=r(z3t,"TFMT5ForConditionalGeneration"),z3t.forEach(t),u2r=r(fRe," (mT5 model)"),fRe.forEach(t),b2r=i(Be),nT=n(Be,"LI",{});var mRe=s(nT);A4e=n(mRe,"STRONG",{});var W3t=s(A4e);v2r=r(W3t,"pegasus"),W3t.forEach(t),F2r=r(mRe," \u2014 "),YQ=n(mRe,"A",{href:!0});var Q3t=s(YQ);T2r=r(Q3t,"TFPegasusForConditionalGeneration"),Q3t.forEach(t),M2r=r(mRe," (Pegasus model)"),mRe.forEach(t),E2r=i(Be),sT=n(Be,"LI",{});var gRe=s(sT);y4e=n(gRe,"STRONG",{});var H3t=s(y4e);C2r=r(H3t,"t5"),H3t.forEach(t),w2r=r(gRe," \u2014 "),KQ=n(gRe,"A",{href:!0});var U3t=s(KQ);A2r=r(U3t,"TFT5ForConditionalGeneration"),U3t.forEach(t),y2r=r(gRe," (T5 model)"),gRe.forEach(t),Be.forEach(t),L2r=i(El),T(lT.$$.fragment,El),El.forEach(t),Ml.forEach(t),iNe=i(f),ac=n(f,"H2",{class:!0});var hDe=s(ac);iT=n(hDe,"A",{id:!0,class:!0,href:!0});var J3t=s(iT);L4e=n(J3t,"SPAN",{});var Y3t=s(L4e);T(E7.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),x2r=i(hDe),x4e=n(hDe,"SPAN",{});var K3t=s(x4e);$2r=r(K3t,"TFAutoModelForSequenceClassification"),K3t.forEach(t),hDe.forEach(t),dNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(C7.$$.fragment,Cl),k2r=i(Cl),nc=n(Cl,"P",{});var OZ=s(nc);S2r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=n(OZ,"A",{href:!0});var Z3t=s(ZQ);R2r=r(Z3t,"from_pretrained()"),Z3t.forEach(t),P2r=r(OZ," class method or the "),eH=n(OZ,"A",{href:!0});var eFt=s(eH);B2r=r(eFt,"from_config()"),eFt.forEach(t),I2r=r(OZ,` class
method.`),OZ.forEach(t),q2r=i(Cl),w7=n(Cl,"P",{});var pDe=s(w7);N2r=r(pDe,"This class cannot be instantiated directly using "),$4e=n(pDe,"CODE",{});var oFt=s($4e);j2r=r(oFt,"__init__()"),oFt.forEach(t),D2r=r(pDe," (throws an error)."),pDe.forEach(t),G2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var MA=s(Rt);T(A7.$$.fragment,MA),O2r=i(MA),k4e=n(MA,"P",{});var rFt=s(k4e);V2r=r(rFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rFt.forEach(t),X2r=i(MA),sc=n(MA,"P",{});var VZ=s(sc);z2r=r(VZ,`Note:
Loading a model from its configuration file does `),S4e=n(VZ,"STRONG",{});var tFt=s(S4e);W2r=r(tFt,"not"),tFt.forEach(t),Q2r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(VZ,"A",{href:!0});var aFt=s(oH);H2r=r(aFt,"from_pretrained()"),aFt.forEach(t),U2r=r(VZ," to load the model weights."),VZ.forEach(t),J2r=i(MA),T(dT.$$.fragment,MA),MA.forEach(t),Y2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(y7.$$.fragment,wl),K2r=i(wl),R4e=n(wl,"P",{});var nFt=s(R4e);Z2r=r(nFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nFt.forEach(t),e4r=i(wl),nn=n(wl,"P",{});var EA=s(nn);o4r=r(EA,"The model class to instantiate is selected based on the "),P4e=n(EA,"CODE",{});var sFt=s(P4e);r4r=r(sFt,"model_type"),sFt.forEach(t),t4r=r(EA,` property of the config object (either
passed as an argument or loaded from `),B4e=n(EA,"CODE",{});var lFt=s(B4e);a4r=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),n4r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I4e=n(EA,"CODE",{});var iFt=s(I4e);s4r=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),l4r=r(EA,":"),EA.forEach(t),i4r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);cT=n(ae,"LI",{});var hRe=s(cT);q4e=n(hRe,"STRONG",{});var dFt=s(q4e);d4r=r(dFt,"albert"),dFt.forEach(t),c4r=r(hRe," \u2014 "),rH=n(hRe,"A",{href:!0});var cFt=s(rH);f4r=r(cFt,"TFAlbertForSequenceClassification"),cFt.forEach(t),m4r=r(hRe," (ALBERT model)"),hRe.forEach(t),g4r=i(ae),fT=n(ae,"LI",{});var pRe=s(fT);N4e=n(pRe,"STRONG",{});var fFt=s(N4e);h4r=r(fFt,"bert"),fFt.forEach(t),p4r=r(pRe," \u2014 "),tH=n(pRe,"A",{href:!0});var mFt=s(tH);_4r=r(mFt,"TFBertForSequenceClassification"),mFt.forEach(t),u4r=r(pRe," (BERT model)"),pRe.forEach(t),b4r=i(ae),mT=n(ae,"LI",{});var _Re=s(mT);j4e=n(_Re,"STRONG",{});var gFt=s(j4e);v4r=r(gFt,"camembert"),gFt.forEach(t),F4r=r(_Re," \u2014 "),aH=n(_Re,"A",{href:!0});var hFt=s(aH);T4r=r(hFt,"TFCamembertForSequenceClassification"),hFt.forEach(t),M4r=r(_Re," (CamemBERT model)"),_Re.forEach(t),E4r=i(ae),gT=n(ae,"LI",{});var uRe=s(gT);D4e=n(uRe,"STRONG",{});var pFt=s(D4e);C4r=r(pFt,"convbert"),pFt.forEach(t),w4r=r(uRe," \u2014 "),nH=n(uRe,"A",{href:!0});var _Ft=s(nH);A4r=r(_Ft,"TFConvBertForSequenceClassification"),_Ft.forEach(t),y4r=r(uRe," (ConvBERT model)"),uRe.forEach(t),L4r=i(ae),hT=n(ae,"LI",{});var bRe=s(hT);G4e=n(bRe,"STRONG",{});var uFt=s(G4e);x4r=r(uFt,"ctrl"),uFt.forEach(t),$4r=r(bRe," \u2014 "),sH=n(bRe,"A",{href:!0});var bFt=s(sH);k4r=r(bFt,"TFCTRLForSequenceClassification"),bFt.forEach(t),S4r=r(bRe," (CTRL model)"),bRe.forEach(t),R4r=i(ae),pT=n(ae,"LI",{});var vRe=s(pT);O4e=n(vRe,"STRONG",{});var vFt=s(O4e);P4r=r(vFt,"deberta"),vFt.forEach(t),B4r=r(vRe," \u2014 "),lH=n(vRe,"A",{href:!0});var FFt=s(lH);I4r=r(FFt,"TFDebertaForSequenceClassification"),FFt.forEach(t),q4r=r(vRe," (DeBERTa model)"),vRe.forEach(t),N4r=i(ae),_T=n(ae,"LI",{});var FRe=s(_T);V4e=n(FRe,"STRONG",{});var TFt=s(V4e);j4r=r(TFt,"deberta-v2"),TFt.forEach(t),D4r=r(FRe," \u2014 "),iH=n(FRe,"A",{href:!0});var MFt=s(iH);G4r=r(MFt,"TFDebertaV2ForSequenceClassification"),MFt.forEach(t),O4r=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),V4r=i(ae),uT=n(ae,"LI",{});var TRe=s(uT);X4e=n(TRe,"STRONG",{});var EFt=s(X4e);X4r=r(EFt,"distilbert"),EFt.forEach(t),z4r=r(TRe," \u2014 "),dH=n(TRe,"A",{href:!0});var CFt=s(dH);W4r=r(CFt,"TFDistilBertForSequenceClassification"),CFt.forEach(t),Q4r=r(TRe," (DistilBERT model)"),TRe.forEach(t),H4r=i(ae),bT=n(ae,"LI",{});var MRe=s(bT);z4e=n(MRe,"STRONG",{});var wFt=s(z4e);U4r=r(wFt,"electra"),wFt.forEach(t),J4r=r(MRe," \u2014 "),cH=n(MRe,"A",{href:!0});var AFt=s(cH);Y4r=r(AFt,"TFElectraForSequenceClassification"),AFt.forEach(t),K4r=r(MRe," (ELECTRA model)"),MRe.forEach(t),Z4r=i(ae),vT=n(ae,"LI",{});var ERe=s(vT);W4e=n(ERe,"STRONG",{});var yFt=s(W4e);e5r=r(yFt,"flaubert"),yFt.forEach(t),o5r=r(ERe," \u2014 "),fH=n(ERe,"A",{href:!0});var LFt=s(fH);r5r=r(LFt,"TFFlaubertForSequenceClassification"),LFt.forEach(t),t5r=r(ERe," (FlauBERT model)"),ERe.forEach(t),a5r=i(ae),FT=n(ae,"LI",{});var CRe=s(FT);Q4e=n(CRe,"STRONG",{});var xFt=s(Q4e);n5r=r(xFt,"funnel"),xFt.forEach(t),s5r=r(CRe," \u2014 "),mH=n(CRe,"A",{href:!0});var $Ft=s(mH);l5r=r($Ft,"TFFunnelForSequenceClassification"),$Ft.forEach(t),i5r=r(CRe," (Funnel Transformer model)"),CRe.forEach(t),d5r=i(ae),TT=n(ae,"LI",{});var wRe=s(TT);H4e=n(wRe,"STRONG",{});var kFt=s(H4e);c5r=r(kFt,"gpt2"),kFt.forEach(t),f5r=r(wRe," \u2014 "),gH=n(wRe,"A",{href:!0});var SFt=s(gH);m5r=r(SFt,"TFGPT2ForSequenceClassification"),SFt.forEach(t),g5r=r(wRe," (OpenAI GPT-2 model)"),wRe.forEach(t),h5r=i(ae),MT=n(ae,"LI",{});var ARe=s(MT);U4e=n(ARe,"STRONG",{});var RFt=s(U4e);p5r=r(RFt,"gptj"),RFt.forEach(t),_5r=r(ARe," \u2014 "),hH=n(ARe,"A",{href:!0});var PFt=s(hH);u5r=r(PFt,"TFGPTJForSequenceClassification"),PFt.forEach(t),b5r=r(ARe," (GPT-J model)"),ARe.forEach(t),v5r=i(ae),ET=n(ae,"LI",{});var yRe=s(ET);J4e=n(yRe,"STRONG",{});var BFt=s(J4e);F5r=r(BFt,"layoutlm"),BFt.forEach(t),T5r=r(yRe," \u2014 "),pH=n(yRe,"A",{href:!0});var IFt=s(pH);M5r=r(IFt,"TFLayoutLMForSequenceClassification"),IFt.forEach(t),E5r=r(yRe," (LayoutLM model)"),yRe.forEach(t),C5r=i(ae),CT=n(ae,"LI",{});var LRe=s(CT);Y4e=n(LRe,"STRONG",{});var qFt=s(Y4e);w5r=r(qFt,"longformer"),qFt.forEach(t),A5r=r(LRe," \u2014 "),_H=n(LRe,"A",{href:!0});var NFt=s(_H);y5r=r(NFt,"TFLongformerForSequenceClassification"),NFt.forEach(t),L5r=r(LRe," (Longformer model)"),LRe.forEach(t),x5r=i(ae),wT=n(ae,"LI",{});var xRe=s(wT);K4e=n(xRe,"STRONG",{});var jFt=s(K4e);$5r=r(jFt,"mobilebert"),jFt.forEach(t),k5r=r(xRe," \u2014 "),uH=n(xRe,"A",{href:!0});var DFt=s(uH);S5r=r(DFt,"TFMobileBertForSequenceClassification"),DFt.forEach(t),R5r=r(xRe," (MobileBERT model)"),xRe.forEach(t),P5r=i(ae),AT=n(ae,"LI",{});var $Re=s(AT);Z4e=n($Re,"STRONG",{});var GFt=s(Z4e);B5r=r(GFt,"mpnet"),GFt.forEach(t),I5r=r($Re," \u2014 "),bH=n($Re,"A",{href:!0});var OFt=s(bH);q5r=r(OFt,"TFMPNetForSequenceClassification"),OFt.forEach(t),N5r=r($Re," (MPNet model)"),$Re.forEach(t),j5r=i(ae),yT=n(ae,"LI",{});var kRe=s(yT);e5e=n(kRe,"STRONG",{});var VFt=s(e5e);D5r=r(VFt,"openai-gpt"),VFt.forEach(t),G5r=r(kRe," \u2014 "),vH=n(kRe,"A",{href:!0});var XFt=s(vH);O5r=r(XFt,"TFOpenAIGPTForSequenceClassification"),XFt.forEach(t),V5r=r(kRe," (OpenAI GPT model)"),kRe.forEach(t),X5r=i(ae),LT=n(ae,"LI",{});var SRe=s(LT);o5e=n(SRe,"STRONG",{});var zFt=s(o5e);z5r=r(zFt,"rembert"),zFt.forEach(t),W5r=r(SRe," \u2014 "),FH=n(SRe,"A",{href:!0});var WFt=s(FH);Q5r=r(WFt,"TFRemBertForSequenceClassification"),WFt.forEach(t),H5r=r(SRe," (RemBERT model)"),SRe.forEach(t),U5r=i(ae),xT=n(ae,"LI",{});var RRe=s(xT);r5e=n(RRe,"STRONG",{});var QFt=s(r5e);J5r=r(QFt,"roberta"),QFt.forEach(t),Y5r=r(RRe," \u2014 "),TH=n(RRe,"A",{href:!0});var HFt=s(TH);K5r=r(HFt,"TFRobertaForSequenceClassification"),HFt.forEach(t),Z5r=r(RRe," (RoBERTa model)"),RRe.forEach(t),evr=i(ae),$T=n(ae,"LI",{});var PRe=s($T);t5e=n(PRe,"STRONG",{});var UFt=s(t5e);ovr=r(UFt,"roformer"),UFt.forEach(t),rvr=r(PRe," \u2014 "),MH=n(PRe,"A",{href:!0});var JFt=s(MH);tvr=r(JFt,"TFRoFormerForSequenceClassification"),JFt.forEach(t),avr=r(PRe," (RoFormer model)"),PRe.forEach(t),nvr=i(ae),kT=n(ae,"LI",{});var BRe=s(kT);a5e=n(BRe,"STRONG",{});var YFt=s(a5e);svr=r(YFt,"tapas"),YFt.forEach(t),lvr=r(BRe," \u2014 "),EH=n(BRe,"A",{href:!0});var KFt=s(EH);ivr=r(KFt,"TFTapasForSequenceClassification"),KFt.forEach(t),dvr=r(BRe," (TAPAS model)"),BRe.forEach(t),cvr=i(ae),ST=n(ae,"LI",{});var IRe=s(ST);n5e=n(IRe,"STRONG",{});var ZFt=s(n5e);fvr=r(ZFt,"transfo-xl"),ZFt.forEach(t),mvr=r(IRe," \u2014 "),CH=n(IRe,"A",{href:!0});var e6t=s(CH);gvr=r(e6t,"TFTransfoXLForSequenceClassification"),e6t.forEach(t),hvr=r(IRe," (Transformer-XL model)"),IRe.forEach(t),pvr=i(ae),RT=n(ae,"LI",{});var qRe=s(RT);s5e=n(qRe,"STRONG",{});var o6t=s(s5e);_vr=r(o6t,"xlm"),o6t.forEach(t),uvr=r(qRe," \u2014 "),wH=n(qRe,"A",{href:!0});var r6t=s(wH);bvr=r(r6t,"TFXLMForSequenceClassification"),r6t.forEach(t),vvr=r(qRe," (XLM model)"),qRe.forEach(t),Fvr=i(ae),PT=n(ae,"LI",{});var NRe=s(PT);l5e=n(NRe,"STRONG",{});var t6t=s(l5e);Tvr=r(t6t,"xlm-roberta"),t6t.forEach(t),Mvr=r(NRe," \u2014 "),AH=n(NRe,"A",{href:!0});var a6t=s(AH);Evr=r(a6t,"TFXLMRobertaForSequenceClassification"),a6t.forEach(t),Cvr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),wvr=i(ae),BT=n(ae,"LI",{});var jRe=s(BT);i5e=n(jRe,"STRONG",{});var n6t=s(i5e);Avr=r(n6t,"xlnet"),n6t.forEach(t),yvr=r(jRe," \u2014 "),yH=n(jRe,"A",{href:!0});var s6t=s(yH);Lvr=r(s6t,"TFXLNetForSequenceClassification"),s6t.forEach(t),xvr=r(jRe," (XLNet model)"),jRe.forEach(t),ae.forEach(t),$vr=i(wl),T(IT.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),cNe=i(f),lc=n(f,"H2",{class:!0});var _De=s(lc);qT=n(_De,"A",{id:!0,class:!0,href:!0});var l6t=s(qT);d5e=n(l6t,"SPAN",{});var i6t=s(d5e);T(L7.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),kvr=i(_De),c5e=n(_De,"SPAN",{});var d6t=s(c5e);Svr=r(d6t,"TFAutoModelForMultipleChoice"),d6t.forEach(t),_De.forEach(t),fNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(x7.$$.fragment,Al),Rvr=i(Al),ic=n(Al,"P",{});var XZ=s(ic);Pvr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=n(XZ,"A",{href:!0});var c6t=s(LH);Bvr=r(c6t,"from_pretrained()"),c6t.forEach(t),Ivr=r(XZ," class method or the "),xH=n(XZ,"A",{href:!0});var f6t=s(xH);qvr=r(f6t,"from_config()"),f6t.forEach(t),Nvr=r(XZ,` class
method.`),XZ.forEach(t),jvr=i(Al),$7=n(Al,"P",{});var uDe=s($7);Dvr=r(uDe,"This class cannot be instantiated directly using "),f5e=n(uDe,"CODE",{});var m6t=s(f5e);Gvr=r(m6t,"__init__()"),m6t.forEach(t),Ovr=r(uDe," (throws an error)."),uDe.forEach(t),Vvr=i(Al),Pt=n(Al,"DIV",{class:!0});var CA=s(Pt);T(k7.$$.fragment,CA),Xvr=i(CA),m5e=n(CA,"P",{});var g6t=s(m5e);zvr=r(g6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g6t.forEach(t),Wvr=i(CA),dc=n(CA,"P",{});var zZ=s(dc);Qvr=r(zZ,`Note:
Loading a model from its configuration file does `),g5e=n(zZ,"STRONG",{});var h6t=s(g5e);Hvr=r(h6t,"not"),h6t.forEach(t),Uvr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(zZ,"A",{href:!0});var p6t=s($H);Jvr=r(p6t,"from_pretrained()"),p6t.forEach(t),Yvr=r(zZ," to load the model weights."),zZ.forEach(t),Kvr=i(CA),T(NT.$$.fragment,CA),CA.forEach(t),Zvr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(S7.$$.fragment,yl),e3r=i(yl),h5e=n(yl,"P",{});var _6t=s(h5e);o3r=r(_6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_6t.forEach(t),r3r=i(yl),sn=n(yl,"P",{});var wA=s(sn);t3r=r(wA,"The model class to instantiate is selected based on the "),p5e=n(wA,"CODE",{});var u6t=s(p5e);a3r=r(u6t,"model_type"),u6t.forEach(t),n3r=r(wA,` property of the config object (either
passed as an argument or loaded from `),_5e=n(wA,"CODE",{});var b6t=s(_5e);s3r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),l3r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(wA,"CODE",{});var v6t=s(u5e);i3r=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),d3r=r(wA,":"),wA.forEach(t),c3r=i(yl),he=n(yl,"UL",{});var ue=s(he);jT=n(ue,"LI",{});var DRe=s(jT);b5e=n(DRe,"STRONG",{});var F6t=s(b5e);f3r=r(F6t,"albert"),F6t.forEach(t),m3r=r(DRe," \u2014 "),kH=n(DRe,"A",{href:!0});var T6t=s(kH);g3r=r(T6t,"TFAlbertForMultipleChoice"),T6t.forEach(t),h3r=r(DRe," (ALBERT model)"),DRe.forEach(t),p3r=i(ue),DT=n(ue,"LI",{});var GRe=s(DT);v5e=n(GRe,"STRONG",{});var M6t=s(v5e);_3r=r(M6t,"bert"),M6t.forEach(t),u3r=r(GRe," \u2014 "),SH=n(GRe,"A",{href:!0});var E6t=s(SH);b3r=r(E6t,"TFBertForMultipleChoice"),E6t.forEach(t),v3r=r(GRe," (BERT model)"),GRe.forEach(t),F3r=i(ue),GT=n(ue,"LI",{});var ORe=s(GT);F5e=n(ORe,"STRONG",{});var C6t=s(F5e);T3r=r(C6t,"camembert"),C6t.forEach(t),M3r=r(ORe," \u2014 "),RH=n(ORe,"A",{href:!0});var w6t=s(RH);E3r=r(w6t,"TFCamembertForMultipleChoice"),w6t.forEach(t),C3r=r(ORe," (CamemBERT model)"),ORe.forEach(t),w3r=i(ue),OT=n(ue,"LI",{});var VRe=s(OT);T5e=n(VRe,"STRONG",{});var A6t=s(T5e);A3r=r(A6t,"convbert"),A6t.forEach(t),y3r=r(VRe," \u2014 "),PH=n(VRe,"A",{href:!0});var y6t=s(PH);L3r=r(y6t,"TFConvBertForMultipleChoice"),y6t.forEach(t),x3r=r(VRe," (ConvBERT model)"),VRe.forEach(t),$3r=i(ue),VT=n(ue,"LI",{});var XRe=s(VT);M5e=n(XRe,"STRONG",{});var L6t=s(M5e);k3r=r(L6t,"distilbert"),L6t.forEach(t),S3r=r(XRe," \u2014 "),BH=n(XRe,"A",{href:!0});var x6t=s(BH);R3r=r(x6t,"TFDistilBertForMultipleChoice"),x6t.forEach(t),P3r=r(XRe," (DistilBERT model)"),XRe.forEach(t),B3r=i(ue),XT=n(ue,"LI",{});var zRe=s(XT);E5e=n(zRe,"STRONG",{});var $6t=s(E5e);I3r=r($6t,"electra"),$6t.forEach(t),q3r=r(zRe," \u2014 "),IH=n(zRe,"A",{href:!0});var k6t=s(IH);N3r=r(k6t,"TFElectraForMultipleChoice"),k6t.forEach(t),j3r=r(zRe," (ELECTRA model)"),zRe.forEach(t),D3r=i(ue),zT=n(ue,"LI",{});var WRe=s(zT);C5e=n(WRe,"STRONG",{});var S6t=s(C5e);G3r=r(S6t,"flaubert"),S6t.forEach(t),O3r=r(WRe," \u2014 "),qH=n(WRe,"A",{href:!0});var R6t=s(qH);V3r=r(R6t,"TFFlaubertForMultipleChoice"),R6t.forEach(t),X3r=r(WRe," (FlauBERT model)"),WRe.forEach(t),z3r=i(ue),WT=n(ue,"LI",{});var QRe=s(WT);w5e=n(QRe,"STRONG",{});var P6t=s(w5e);W3r=r(P6t,"funnel"),P6t.forEach(t),Q3r=r(QRe," \u2014 "),NH=n(QRe,"A",{href:!0});var B6t=s(NH);H3r=r(B6t,"TFFunnelForMultipleChoice"),B6t.forEach(t),U3r=r(QRe," (Funnel Transformer model)"),QRe.forEach(t),J3r=i(ue),QT=n(ue,"LI",{});var HRe=s(QT);A5e=n(HRe,"STRONG",{});var I6t=s(A5e);Y3r=r(I6t,"longformer"),I6t.forEach(t),K3r=r(HRe," \u2014 "),jH=n(HRe,"A",{href:!0});var q6t=s(jH);Z3r=r(q6t,"TFLongformerForMultipleChoice"),q6t.forEach(t),eFr=r(HRe," (Longformer model)"),HRe.forEach(t),oFr=i(ue),HT=n(ue,"LI",{});var URe=s(HT);y5e=n(URe,"STRONG",{});var N6t=s(y5e);rFr=r(N6t,"mobilebert"),N6t.forEach(t),tFr=r(URe," \u2014 "),DH=n(URe,"A",{href:!0});var j6t=s(DH);aFr=r(j6t,"TFMobileBertForMultipleChoice"),j6t.forEach(t),nFr=r(URe," (MobileBERT model)"),URe.forEach(t),sFr=i(ue),UT=n(ue,"LI",{});var JRe=s(UT);L5e=n(JRe,"STRONG",{});var D6t=s(L5e);lFr=r(D6t,"mpnet"),D6t.forEach(t),iFr=r(JRe," \u2014 "),GH=n(JRe,"A",{href:!0});var G6t=s(GH);dFr=r(G6t,"TFMPNetForMultipleChoice"),G6t.forEach(t),cFr=r(JRe," (MPNet model)"),JRe.forEach(t),fFr=i(ue),JT=n(ue,"LI",{});var YRe=s(JT);x5e=n(YRe,"STRONG",{});var O6t=s(x5e);mFr=r(O6t,"rembert"),O6t.forEach(t),gFr=r(YRe," \u2014 "),OH=n(YRe,"A",{href:!0});var V6t=s(OH);hFr=r(V6t,"TFRemBertForMultipleChoice"),V6t.forEach(t),pFr=r(YRe," (RemBERT model)"),YRe.forEach(t),_Fr=i(ue),YT=n(ue,"LI",{});var KRe=s(YT);$5e=n(KRe,"STRONG",{});var X6t=s($5e);uFr=r(X6t,"roberta"),X6t.forEach(t),bFr=r(KRe," \u2014 "),VH=n(KRe,"A",{href:!0});var z6t=s(VH);vFr=r(z6t,"TFRobertaForMultipleChoice"),z6t.forEach(t),FFr=r(KRe," (RoBERTa model)"),KRe.forEach(t),TFr=i(ue),KT=n(ue,"LI",{});var ZRe=s(KT);k5e=n(ZRe,"STRONG",{});var W6t=s(k5e);MFr=r(W6t,"roformer"),W6t.forEach(t),EFr=r(ZRe," \u2014 "),XH=n(ZRe,"A",{href:!0});var Q6t=s(XH);CFr=r(Q6t,"TFRoFormerForMultipleChoice"),Q6t.forEach(t),wFr=r(ZRe," (RoFormer model)"),ZRe.forEach(t),AFr=i(ue),ZT=n(ue,"LI",{});var ePe=s(ZT);S5e=n(ePe,"STRONG",{});var H6t=s(S5e);yFr=r(H6t,"xlm"),H6t.forEach(t),LFr=r(ePe," \u2014 "),zH=n(ePe,"A",{href:!0});var U6t=s(zH);xFr=r(U6t,"TFXLMForMultipleChoice"),U6t.forEach(t),$Fr=r(ePe," (XLM model)"),ePe.forEach(t),kFr=i(ue),eM=n(ue,"LI",{});var oPe=s(eM);R5e=n(oPe,"STRONG",{});var J6t=s(R5e);SFr=r(J6t,"xlm-roberta"),J6t.forEach(t),RFr=r(oPe," \u2014 "),WH=n(oPe,"A",{href:!0});var Y6t=s(WH);PFr=r(Y6t,"TFXLMRobertaForMultipleChoice"),Y6t.forEach(t),BFr=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),IFr=i(ue),oM=n(ue,"LI",{});var rPe=s(oM);P5e=n(rPe,"STRONG",{});var K6t=s(P5e);qFr=r(K6t,"xlnet"),K6t.forEach(t),NFr=r(rPe," \u2014 "),QH=n(rPe,"A",{href:!0});var Z6t=s(QH);jFr=r(Z6t,"TFXLNetForMultipleChoice"),Z6t.forEach(t),DFr=r(rPe," (XLNet model)"),rPe.forEach(t),ue.forEach(t),GFr=i(yl),T(rM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),mNe=i(f),cc=n(f,"H2",{class:!0});var bDe=s(cc);tM=n(bDe,"A",{id:!0,class:!0,href:!0});var eTt=s(tM);B5e=n(eTt,"SPAN",{});var oTt=s(B5e);T(R7.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),OFr=i(bDe),I5e=n(bDe,"SPAN",{});var rTt=s(I5e);VFr=r(rTt,"TFAutoModelForNextSentencePrediction"),rTt.forEach(t),bDe.forEach(t),gNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(P7.$$.fragment,Ll),XFr=i(Ll),fc=n(Ll,"P",{});var WZ=s(fc);zFr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=n(WZ,"A",{href:!0});var tTt=s(HH);WFr=r(tTt,"from_pretrained()"),tTt.forEach(t),QFr=r(WZ," class method or the "),UH=n(WZ,"A",{href:!0});var aTt=s(UH);HFr=r(aTt,"from_config()"),aTt.forEach(t),UFr=r(WZ,` class
method.`),WZ.forEach(t),JFr=i(Ll),B7=n(Ll,"P",{});var vDe=s(B7);YFr=r(vDe,"This class cannot be instantiated directly using "),q5e=n(vDe,"CODE",{});var nTt=s(q5e);KFr=r(nTt,"__init__()"),nTt.forEach(t),ZFr=r(vDe," (throws an error)."),vDe.forEach(t),e6r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var AA=s(Bt);T(I7.$$.fragment,AA),o6r=i(AA),N5e=n(AA,"P",{});var sTt=s(N5e);r6r=r(sTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sTt.forEach(t),t6r=i(AA),mc=n(AA,"P",{});var QZ=s(mc);a6r=r(QZ,`Note:
Loading a model from its configuration file does `),j5e=n(QZ,"STRONG",{});var lTt=s(j5e);n6r=r(lTt,"not"),lTt.forEach(t),s6r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(QZ,"A",{href:!0});var iTt=s(JH);l6r=r(iTt,"from_pretrained()"),iTt.forEach(t),i6r=r(QZ," to load the model weights."),QZ.forEach(t),d6r=i(AA),T(aM.$$.fragment,AA),AA.forEach(t),c6r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(q7.$$.fragment,xl),f6r=i(xl),D5e=n(xl,"P",{});var dTt=s(D5e);m6r=r(dTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dTt.forEach(t),g6r=i(xl),ln=n(xl,"P",{});var yA=s(ln);h6r=r(yA,"The model class to instantiate is selected based on the "),G5e=n(yA,"CODE",{});var cTt=s(G5e);p6r=r(cTt,"model_type"),cTt.forEach(t),_6r=r(yA,` property of the config object (either
passed as an argument or loaded from `),O5e=n(yA,"CODE",{});var fTt=s(O5e);u6r=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),b6r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(yA,"CODE",{});var mTt=s(V5e);v6r=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),F6r=r(yA,":"),yA.forEach(t),T6r=i(xl),N7=n(xl,"UL",{});var FDe=s(N7);nM=n(FDe,"LI",{});var tPe=s(nM);X5e=n(tPe,"STRONG",{});var gTt=s(X5e);M6r=r(gTt,"bert"),gTt.forEach(t),E6r=r(tPe," \u2014 "),YH=n(tPe,"A",{href:!0});var hTt=s(YH);C6r=r(hTt,"TFBertForNextSentencePrediction"),hTt.forEach(t),w6r=r(tPe," (BERT model)"),tPe.forEach(t),A6r=i(FDe),sM=n(FDe,"LI",{});var aPe=s(sM);z5e=n(aPe,"STRONG",{});var pTt=s(z5e);y6r=r(pTt,"mobilebert"),pTt.forEach(t),L6r=r(aPe," \u2014 "),KH=n(aPe,"A",{href:!0});var _Tt=s(KH);x6r=r(_Tt,"TFMobileBertForNextSentencePrediction"),_Tt.forEach(t),$6r=r(aPe," (MobileBERT model)"),aPe.forEach(t),FDe.forEach(t),k6r=i(xl),T(lM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),hNe=i(f),gc=n(f,"H2",{class:!0});var TDe=s(gc);iM=n(TDe,"A",{id:!0,class:!0,href:!0});var uTt=s(iM);W5e=n(uTt,"SPAN",{});var bTt=s(W5e);T(j7.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),S6r=i(TDe),Q5e=n(TDe,"SPAN",{});var vTt=s(Q5e);R6r=r(vTt,"TFAutoModelForTableQuestionAnswering"),vTt.forEach(t),TDe.forEach(t),pNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(D7.$$.fragment,$l),P6r=i($l),hc=n($l,"P",{});var HZ=s(hc);B6r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZH=n(HZ,"A",{href:!0});var FTt=s(ZH);I6r=r(FTt,"from_pretrained()"),FTt.forEach(t),q6r=r(HZ," class method or the "),eU=n(HZ,"A",{href:!0});var TTt=s(eU);N6r=r(TTt,"from_config()"),TTt.forEach(t),j6r=r(HZ,` class
method.`),HZ.forEach(t),D6r=i($l),G7=n($l,"P",{});var MDe=s(G7);G6r=r(MDe,"This class cannot be instantiated directly using "),H5e=n(MDe,"CODE",{});var MTt=s(H5e);O6r=r(MTt,"__init__()"),MTt.forEach(t),V6r=r(MDe," (throws an error)."),MDe.forEach(t),X6r=i($l),It=n($l,"DIV",{class:!0});var LA=s(It);T(O7.$$.fragment,LA),z6r=i(LA),U5e=n(LA,"P",{});var ETt=s(U5e);W6r=r(ETt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ETt.forEach(t),Q6r=i(LA),pc=n(LA,"P",{});var UZ=s(pc);H6r=r(UZ,`Note:
Loading a model from its configuration file does `),J5e=n(UZ,"STRONG",{});var CTt=s(J5e);U6r=r(CTt,"not"),CTt.forEach(t),J6r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(UZ,"A",{href:!0});var wTt=s(oU);Y6r=r(wTt,"from_pretrained()"),wTt.forEach(t),K6r=r(UZ," to load the model weights."),UZ.forEach(t),Z6r=i(LA),T(dM.$$.fragment,LA),LA.forEach(t),eTr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(V7.$$.fragment,kl),oTr=i(kl),Y5e=n(kl,"P",{});var ATt=s(Y5e);rTr=r(ATt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ATt.forEach(t),tTr=i(kl),dn=n(kl,"P",{});var xA=s(dn);aTr=r(xA,"The model class to instantiate is selected based on the "),K5e=n(xA,"CODE",{});var yTt=s(K5e);nTr=r(yTt,"model_type"),yTt.forEach(t),sTr=r(xA,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(xA,"CODE",{});var LTt=s(Z5e);lTr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),iTr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(xA,"CODE",{});var xTt=s(eve);dTr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),cTr=r(xA,":"),xA.forEach(t),fTr=i(kl),ove=n(kl,"UL",{});var $Tt=s(ove);cM=n($Tt,"LI",{});var nPe=s(cM);rve=n(nPe,"STRONG",{});var kTt=s(rve);mTr=r(kTt,"tapas"),kTt.forEach(t),gTr=r(nPe," \u2014 "),rU=n(nPe,"A",{href:!0});var STt=s(rU);hTr=r(STt,"TFTapasForQuestionAnswering"),STt.forEach(t),pTr=r(nPe," (TAPAS model)"),nPe.forEach(t),$Tt.forEach(t),_Tr=i(kl),T(fM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),_Ne=i(f),_c=n(f,"H2",{class:!0});var EDe=s(_c);mM=n(EDe,"A",{id:!0,class:!0,href:!0});var RTt=s(mM);tve=n(RTt,"SPAN",{});var PTt=s(tve);T(X7.$$.fragment,PTt),PTt.forEach(t),RTt.forEach(t),uTr=i(EDe),ave=n(EDe,"SPAN",{});var BTt=s(ave);bTr=r(BTt,"TFAutoModelForTokenClassification"),BTt.forEach(t),EDe.forEach(t),uNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(z7.$$.fragment,Sl),vTr=i(Sl),uc=n(Sl,"P",{});var JZ=s(uc);FTr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tU=n(JZ,"A",{href:!0});var ITt=s(tU);TTr=r(ITt,"from_pretrained()"),ITt.forEach(t),MTr=r(JZ," class method or the "),aU=n(JZ,"A",{href:!0});var qTt=s(aU);ETr=r(qTt,"from_config()"),qTt.forEach(t),CTr=r(JZ,` class
method.`),JZ.forEach(t),wTr=i(Sl),W7=n(Sl,"P",{});var CDe=s(W7);ATr=r(CDe,"This class cannot be instantiated directly using "),nve=n(CDe,"CODE",{});var NTt=s(nve);yTr=r(NTt,"__init__()"),NTt.forEach(t),LTr=r(CDe," (throws an error)."),CDe.forEach(t),xTr=i(Sl),qt=n(Sl,"DIV",{class:!0});var $A=s(qt);T(Q7.$$.fragment,$A),$Tr=i($A),sve=n($A,"P",{});var jTt=s(sve);kTr=r(jTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jTt.forEach(t),STr=i($A),bc=n($A,"P",{});var YZ=s(bc);RTr=r(YZ,`Note:
Loading a model from its configuration file does `),lve=n(YZ,"STRONG",{});var DTt=s(lve);PTr=r(DTt,"not"),DTt.forEach(t),BTr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(YZ,"A",{href:!0});var GTt=s(nU);ITr=r(GTt,"from_pretrained()"),GTt.forEach(t),qTr=r(YZ," to load the model weights."),YZ.forEach(t),NTr=i($A),T(gM.$$.fragment,$A),$A.forEach(t),jTr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(H7.$$.fragment,Rl),DTr=i(Rl),ive=n(Rl,"P",{});var OTt=s(ive);GTr=r(OTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OTt.forEach(t),OTr=i(Rl),cn=n(Rl,"P",{});var kA=s(cn);VTr=r(kA,"The model class to instantiate is selected based on the "),dve=n(kA,"CODE",{});var VTt=s(dve);XTr=r(VTt,"model_type"),VTt.forEach(t),zTr=r(kA,` property of the config object (either
passed as an argument or loaded from `),cve=n(kA,"CODE",{});var XTt=s(cve);WTr=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),QTr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(kA,"CODE",{});var zTt=s(fve);HTr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),UTr=r(kA,":"),kA.forEach(t),JTr=i(Rl),de=n(Rl,"UL",{});var me=s(de);hM=n(me,"LI",{});var sPe=s(hM);mve=n(sPe,"STRONG",{});var WTt=s(mve);YTr=r(WTt,"albert"),WTt.forEach(t),KTr=r(sPe," \u2014 "),sU=n(sPe,"A",{href:!0});var QTt=s(sU);ZTr=r(QTt,"TFAlbertForTokenClassification"),QTt.forEach(t),eMr=r(sPe," (ALBERT model)"),sPe.forEach(t),oMr=i(me),pM=n(me,"LI",{});var lPe=s(pM);gve=n(lPe,"STRONG",{});var HTt=s(gve);rMr=r(HTt,"bert"),HTt.forEach(t),tMr=r(lPe," \u2014 "),lU=n(lPe,"A",{href:!0});var UTt=s(lU);aMr=r(UTt,"TFBertForTokenClassification"),UTt.forEach(t),nMr=r(lPe," (BERT model)"),lPe.forEach(t),sMr=i(me),_M=n(me,"LI",{});var iPe=s(_M);hve=n(iPe,"STRONG",{});var JTt=s(hve);lMr=r(JTt,"camembert"),JTt.forEach(t),iMr=r(iPe," \u2014 "),iU=n(iPe,"A",{href:!0});var YTt=s(iU);dMr=r(YTt,"TFCamembertForTokenClassification"),YTt.forEach(t),cMr=r(iPe," (CamemBERT model)"),iPe.forEach(t),fMr=i(me),uM=n(me,"LI",{});var dPe=s(uM);pve=n(dPe,"STRONG",{});var KTt=s(pve);mMr=r(KTt,"convbert"),KTt.forEach(t),gMr=r(dPe," \u2014 "),dU=n(dPe,"A",{href:!0});var ZTt=s(dU);hMr=r(ZTt,"TFConvBertForTokenClassification"),ZTt.forEach(t),pMr=r(dPe," (ConvBERT model)"),dPe.forEach(t),_Mr=i(me),bM=n(me,"LI",{});var cPe=s(bM);_ve=n(cPe,"STRONG",{});var eMt=s(_ve);uMr=r(eMt,"deberta"),eMt.forEach(t),bMr=r(cPe," \u2014 "),cU=n(cPe,"A",{href:!0});var oMt=s(cU);vMr=r(oMt,"TFDebertaForTokenClassification"),oMt.forEach(t),FMr=r(cPe," (DeBERTa model)"),cPe.forEach(t),TMr=i(me),vM=n(me,"LI",{});var fPe=s(vM);uve=n(fPe,"STRONG",{});var rMt=s(uve);MMr=r(rMt,"deberta-v2"),rMt.forEach(t),EMr=r(fPe," \u2014 "),fU=n(fPe,"A",{href:!0});var tMt=s(fU);CMr=r(tMt,"TFDebertaV2ForTokenClassification"),tMt.forEach(t),wMr=r(fPe," (DeBERTa-v2 model)"),fPe.forEach(t),AMr=i(me),FM=n(me,"LI",{});var mPe=s(FM);bve=n(mPe,"STRONG",{});var aMt=s(bve);yMr=r(aMt,"distilbert"),aMt.forEach(t),LMr=r(mPe," \u2014 "),mU=n(mPe,"A",{href:!0});var nMt=s(mU);xMr=r(nMt,"TFDistilBertForTokenClassification"),nMt.forEach(t),$Mr=r(mPe," (DistilBERT model)"),mPe.forEach(t),kMr=i(me),TM=n(me,"LI",{});var gPe=s(TM);vve=n(gPe,"STRONG",{});var sMt=s(vve);SMr=r(sMt,"electra"),sMt.forEach(t),RMr=r(gPe," \u2014 "),gU=n(gPe,"A",{href:!0});var lMt=s(gU);PMr=r(lMt,"TFElectraForTokenClassification"),lMt.forEach(t),BMr=r(gPe," (ELECTRA model)"),gPe.forEach(t),IMr=i(me),MM=n(me,"LI",{});var hPe=s(MM);Fve=n(hPe,"STRONG",{});var iMt=s(Fve);qMr=r(iMt,"flaubert"),iMt.forEach(t),NMr=r(hPe," \u2014 "),hU=n(hPe,"A",{href:!0});var dMt=s(hU);jMr=r(dMt,"TFFlaubertForTokenClassification"),dMt.forEach(t),DMr=r(hPe," (FlauBERT model)"),hPe.forEach(t),GMr=i(me),EM=n(me,"LI",{});var pPe=s(EM);Tve=n(pPe,"STRONG",{});var cMt=s(Tve);OMr=r(cMt,"funnel"),cMt.forEach(t),VMr=r(pPe," \u2014 "),pU=n(pPe,"A",{href:!0});var fMt=s(pU);XMr=r(fMt,"TFFunnelForTokenClassification"),fMt.forEach(t),zMr=r(pPe," (Funnel Transformer model)"),pPe.forEach(t),WMr=i(me),CM=n(me,"LI",{});var _Pe=s(CM);Mve=n(_Pe,"STRONG",{});var mMt=s(Mve);QMr=r(mMt,"layoutlm"),mMt.forEach(t),HMr=r(_Pe," \u2014 "),_U=n(_Pe,"A",{href:!0});var gMt=s(_U);UMr=r(gMt,"TFLayoutLMForTokenClassification"),gMt.forEach(t),JMr=r(_Pe," (LayoutLM model)"),_Pe.forEach(t),YMr=i(me),wM=n(me,"LI",{});var uPe=s(wM);Eve=n(uPe,"STRONG",{});var hMt=s(Eve);KMr=r(hMt,"longformer"),hMt.forEach(t),ZMr=r(uPe," \u2014 "),uU=n(uPe,"A",{href:!0});var pMt=s(uU);eEr=r(pMt,"TFLongformerForTokenClassification"),pMt.forEach(t),oEr=r(uPe," (Longformer model)"),uPe.forEach(t),rEr=i(me),AM=n(me,"LI",{});var bPe=s(AM);Cve=n(bPe,"STRONG",{});var _Mt=s(Cve);tEr=r(_Mt,"mobilebert"),_Mt.forEach(t),aEr=r(bPe," \u2014 "),bU=n(bPe,"A",{href:!0});var uMt=s(bU);nEr=r(uMt,"TFMobileBertForTokenClassification"),uMt.forEach(t),sEr=r(bPe," (MobileBERT model)"),bPe.forEach(t),lEr=i(me),yM=n(me,"LI",{});var vPe=s(yM);wve=n(vPe,"STRONG",{});var bMt=s(wve);iEr=r(bMt,"mpnet"),bMt.forEach(t),dEr=r(vPe," \u2014 "),vU=n(vPe,"A",{href:!0});var vMt=s(vU);cEr=r(vMt,"TFMPNetForTokenClassification"),vMt.forEach(t),fEr=r(vPe," (MPNet model)"),vPe.forEach(t),mEr=i(me),LM=n(me,"LI",{});var FPe=s(LM);Ave=n(FPe,"STRONG",{});var FMt=s(Ave);gEr=r(FMt,"rembert"),FMt.forEach(t),hEr=r(FPe," \u2014 "),FU=n(FPe,"A",{href:!0});var TMt=s(FU);pEr=r(TMt,"TFRemBertForTokenClassification"),TMt.forEach(t),_Er=r(FPe," (RemBERT model)"),FPe.forEach(t),uEr=i(me),xM=n(me,"LI",{});var TPe=s(xM);yve=n(TPe,"STRONG",{});var MMt=s(yve);bEr=r(MMt,"roberta"),MMt.forEach(t),vEr=r(TPe," \u2014 "),TU=n(TPe,"A",{href:!0});var EMt=s(TU);FEr=r(EMt,"TFRobertaForTokenClassification"),EMt.forEach(t),TEr=r(TPe," (RoBERTa model)"),TPe.forEach(t),MEr=i(me),$M=n(me,"LI",{});var MPe=s($M);Lve=n(MPe,"STRONG",{});var CMt=s(Lve);EEr=r(CMt,"roformer"),CMt.forEach(t),CEr=r(MPe," \u2014 "),MU=n(MPe,"A",{href:!0});var wMt=s(MU);wEr=r(wMt,"TFRoFormerForTokenClassification"),wMt.forEach(t),AEr=r(MPe," (RoFormer model)"),MPe.forEach(t),yEr=i(me),kM=n(me,"LI",{});var EPe=s(kM);xve=n(EPe,"STRONG",{});var AMt=s(xve);LEr=r(AMt,"xlm"),AMt.forEach(t),xEr=r(EPe," \u2014 "),EU=n(EPe,"A",{href:!0});var yMt=s(EU);$Er=r(yMt,"TFXLMForTokenClassification"),yMt.forEach(t),kEr=r(EPe," (XLM model)"),EPe.forEach(t),SEr=i(me),SM=n(me,"LI",{});var CPe=s(SM);$ve=n(CPe,"STRONG",{});var LMt=s($ve);REr=r(LMt,"xlm-roberta"),LMt.forEach(t),PEr=r(CPe," \u2014 "),CU=n(CPe,"A",{href:!0});var xMt=s(CU);BEr=r(xMt,"TFXLMRobertaForTokenClassification"),xMt.forEach(t),IEr=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),qEr=i(me),RM=n(me,"LI",{});var wPe=s(RM);kve=n(wPe,"STRONG",{});var $Mt=s(kve);NEr=r($Mt,"xlnet"),$Mt.forEach(t),jEr=r(wPe," \u2014 "),wU=n(wPe,"A",{href:!0});var kMt=s(wU);DEr=r(kMt,"TFXLNetForTokenClassification"),kMt.forEach(t),GEr=r(wPe," (XLNet model)"),wPe.forEach(t),me.forEach(t),OEr=i(Rl),T(PM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),bNe=i(f),vc=n(f,"H2",{class:!0});var wDe=s(vc);BM=n(wDe,"A",{id:!0,class:!0,href:!0});var SMt=s(BM);Sve=n(SMt,"SPAN",{});var RMt=s(Sve);T(U7.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),VEr=i(wDe),Rve=n(wDe,"SPAN",{});var PMt=s(Rve);XEr=r(PMt,"TFAutoModelForQuestionAnswering"),PMt.forEach(t),wDe.forEach(t),vNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(J7.$$.fragment,Pl),zEr=i(Pl),Fc=n(Pl,"P",{});var KZ=s(Fc);WEr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=n(KZ,"A",{href:!0});var BMt=s(AU);QEr=r(BMt,"from_pretrained()"),BMt.forEach(t),HEr=r(KZ," class method or the "),yU=n(KZ,"A",{href:!0});var IMt=s(yU);UEr=r(IMt,"from_config()"),IMt.forEach(t),JEr=r(KZ,` class
method.`),KZ.forEach(t),YEr=i(Pl),Y7=n(Pl,"P",{});var ADe=s(Y7);KEr=r(ADe,"This class cannot be instantiated directly using "),Pve=n(ADe,"CODE",{});var qMt=s(Pve);ZEr=r(qMt,"__init__()"),qMt.forEach(t),eCr=r(ADe," (throws an error)."),ADe.forEach(t),oCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var SA=s(Nt);T(K7.$$.fragment,SA),rCr=i(SA),Bve=n(SA,"P",{});var NMt=s(Bve);tCr=r(NMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NMt.forEach(t),aCr=i(SA),Tc=n(SA,"P",{});var ZZ=s(Tc);nCr=r(ZZ,`Note:
Loading a model from its configuration file does `),Ive=n(ZZ,"STRONG",{});var jMt=s(Ive);sCr=r(jMt,"not"),jMt.forEach(t),lCr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(ZZ,"A",{href:!0});var DMt=s(LU);iCr=r(DMt,"from_pretrained()"),DMt.forEach(t),dCr=r(ZZ," to load the model weights."),ZZ.forEach(t),cCr=i(SA),T(IM.$$.fragment,SA),SA.forEach(t),fCr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(Z7.$$.fragment,Bl),mCr=i(Bl),qve=n(Bl,"P",{});var GMt=s(qve);gCr=r(GMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GMt.forEach(t),hCr=i(Bl),fn=n(Bl,"P",{});var RA=s(fn);pCr=r(RA,"The model class to instantiate is selected based on the "),Nve=n(RA,"CODE",{});var OMt=s(Nve);_Cr=r(OMt,"model_type"),OMt.forEach(t),uCr=r(RA,` property of the config object (either
passed as an argument or loaded from `),jve=n(RA,"CODE",{});var VMt=s(jve);bCr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),vCr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(RA,"CODE",{});var XMt=s(Dve);FCr=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),TCr=r(RA,":"),RA.forEach(t),MCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);qM=n(ge,"LI",{});var APe=s(qM);Gve=n(APe,"STRONG",{});var zMt=s(Gve);ECr=r(zMt,"albert"),zMt.forEach(t),CCr=r(APe," \u2014 "),xU=n(APe,"A",{href:!0});var WMt=s(xU);wCr=r(WMt,"TFAlbertForQuestionAnswering"),WMt.forEach(t),ACr=r(APe," (ALBERT model)"),APe.forEach(t),yCr=i(ge),NM=n(ge,"LI",{});var yPe=s(NM);Ove=n(yPe,"STRONG",{});var QMt=s(Ove);LCr=r(QMt,"bert"),QMt.forEach(t),xCr=r(yPe," \u2014 "),$U=n(yPe,"A",{href:!0});var HMt=s($U);$Cr=r(HMt,"TFBertForQuestionAnswering"),HMt.forEach(t),kCr=r(yPe," (BERT model)"),yPe.forEach(t),SCr=i(ge),jM=n(ge,"LI",{});var LPe=s(jM);Vve=n(LPe,"STRONG",{});var UMt=s(Vve);RCr=r(UMt,"camembert"),UMt.forEach(t),PCr=r(LPe," \u2014 "),kU=n(LPe,"A",{href:!0});var JMt=s(kU);BCr=r(JMt,"TFCamembertForQuestionAnswering"),JMt.forEach(t),ICr=r(LPe," (CamemBERT model)"),LPe.forEach(t),qCr=i(ge),DM=n(ge,"LI",{});var xPe=s(DM);Xve=n(xPe,"STRONG",{});var YMt=s(Xve);NCr=r(YMt,"convbert"),YMt.forEach(t),jCr=r(xPe," \u2014 "),SU=n(xPe,"A",{href:!0});var KMt=s(SU);DCr=r(KMt,"TFConvBertForQuestionAnswering"),KMt.forEach(t),GCr=r(xPe," (ConvBERT model)"),xPe.forEach(t),OCr=i(ge),GM=n(ge,"LI",{});var $Pe=s(GM);zve=n($Pe,"STRONG",{});var ZMt=s(zve);VCr=r(ZMt,"deberta"),ZMt.forEach(t),XCr=r($Pe," \u2014 "),RU=n($Pe,"A",{href:!0});var eEt=s(RU);zCr=r(eEt,"TFDebertaForQuestionAnswering"),eEt.forEach(t),WCr=r($Pe," (DeBERTa model)"),$Pe.forEach(t),QCr=i(ge),OM=n(ge,"LI",{});var kPe=s(OM);Wve=n(kPe,"STRONG",{});var oEt=s(Wve);HCr=r(oEt,"deberta-v2"),oEt.forEach(t),UCr=r(kPe," \u2014 "),PU=n(kPe,"A",{href:!0});var rEt=s(PU);JCr=r(rEt,"TFDebertaV2ForQuestionAnswering"),rEt.forEach(t),YCr=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),KCr=i(ge),VM=n(ge,"LI",{});var SPe=s(VM);Qve=n(SPe,"STRONG",{});var tEt=s(Qve);ZCr=r(tEt,"distilbert"),tEt.forEach(t),ewr=r(SPe," \u2014 "),BU=n(SPe,"A",{href:!0});var aEt=s(BU);owr=r(aEt,"TFDistilBertForQuestionAnswering"),aEt.forEach(t),rwr=r(SPe," (DistilBERT model)"),SPe.forEach(t),twr=i(ge),XM=n(ge,"LI",{});var RPe=s(XM);Hve=n(RPe,"STRONG",{});var nEt=s(Hve);awr=r(nEt,"electra"),nEt.forEach(t),nwr=r(RPe," \u2014 "),IU=n(RPe,"A",{href:!0});var sEt=s(IU);swr=r(sEt,"TFElectraForQuestionAnswering"),sEt.forEach(t),lwr=r(RPe," (ELECTRA model)"),RPe.forEach(t),iwr=i(ge),zM=n(ge,"LI",{});var PPe=s(zM);Uve=n(PPe,"STRONG",{});var lEt=s(Uve);dwr=r(lEt,"flaubert"),lEt.forEach(t),cwr=r(PPe," \u2014 "),qU=n(PPe,"A",{href:!0});var iEt=s(qU);fwr=r(iEt,"TFFlaubertForQuestionAnsweringSimple"),iEt.forEach(t),mwr=r(PPe," (FlauBERT model)"),PPe.forEach(t),gwr=i(ge),WM=n(ge,"LI",{});var BPe=s(WM);Jve=n(BPe,"STRONG",{});var dEt=s(Jve);hwr=r(dEt,"funnel"),dEt.forEach(t),pwr=r(BPe," \u2014 "),NU=n(BPe,"A",{href:!0});var cEt=s(NU);_wr=r(cEt,"TFFunnelForQuestionAnswering"),cEt.forEach(t),uwr=r(BPe," (Funnel Transformer model)"),BPe.forEach(t),bwr=i(ge),QM=n(ge,"LI",{});var IPe=s(QM);Yve=n(IPe,"STRONG",{});var fEt=s(Yve);vwr=r(fEt,"gptj"),fEt.forEach(t),Fwr=r(IPe," \u2014 "),jU=n(IPe,"A",{href:!0});var mEt=s(jU);Twr=r(mEt,"TFGPTJForQuestionAnswering"),mEt.forEach(t),Mwr=r(IPe," (GPT-J model)"),IPe.forEach(t),Ewr=i(ge),HM=n(ge,"LI",{});var qPe=s(HM);Kve=n(qPe,"STRONG",{});var gEt=s(Kve);Cwr=r(gEt,"longformer"),gEt.forEach(t),wwr=r(qPe," \u2014 "),DU=n(qPe,"A",{href:!0});var hEt=s(DU);Awr=r(hEt,"TFLongformerForQuestionAnswering"),hEt.forEach(t),ywr=r(qPe," (Longformer model)"),qPe.forEach(t),Lwr=i(ge),UM=n(ge,"LI",{});var NPe=s(UM);Zve=n(NPe,"STRONG",{});var pEt=s(Zve);xwr=r(pEt,"mobilebert"),pEt.forEach(t),$wr=r(NPe," \u2014 "),GU=n(NPe,"A",{href:!0});var _Et=s(GU);kwr=r(_Et,"TFMobileBertForQuestionAnswering"),_Et.forEach(t),Swr=r(NPe," (MobileBERT model)"),NPe.forEach(t),Rwr=i(ge),JM=n(ge,"LI",{});var jPe=s(JM);e3e=n(jPe,"STRONG",{});var uEt=s(e3e);Pwr=r(uEt,"mpnet"),uEt.forEach(t),Bwr=r(jPe," \u2014 "),OU=n(jPe,"A",{href:!0});var bEt=s(OU);Iwr=r(bEt,"TFMPNetForQuestionAnswering"),bEt.forEach(t),qwr=r(jPe," (MPNet model)"),jPe.forEach(t),Nwr=i(ge),YM=n(ge,"LI",{});var DPe=s(YM);o3e=n(DPe,"STRONG",{});var vEt=s(o3e);jwr=r(vEt,"rembert"),vEt.forEach(t),Dwr=r(DPe," \u2014 "),VU=n(DPe,"A",{href:!0});var FEt=s(VU);Gwr=r(FEt,"TFRemBertForQuestionAnswering"),FEt.forEach(t),Owr=r(DPe," (RemBERT model)"),DPe.forEach(t),Vwr=i(ge),KM=n(ge,"LI",{});var GPe=s(KM);r3e=n(GPe,"STRONG",{});var TEt=s(r3e);Xwr=r(TEt,"roberta"),TEt.forEach(t),zwr=r(GPe," \u2014 "),XU=n(GPe,"A",{href:!0});var MEt=s(XU);Wwr=r(MEt,"TFRobertaForQuestionAnswering"),MEt.forEach(t),Qwr=r(GPe," (RoBERTa model)"),GPe.forEach(t),Hwr=i(ge),ZM=n(ge,"LI",{});var OPe=s(ZM);t3e=n(OPe,"STRONG",{});var EEt=s(t3e);Uwr=r(EEt,"roformer"),EEt.forEach(t),Jwr=r(OPe," \u2014 "),zU=n(OPe,"A",{href:!0});var CEt=s(zU);Ywr=r(CEt,"TFRoFormerForQuestionAnswering"),CEt.forEach(t),Kwr=r(OPe," (RoFormer model)"),OPe.forEach(t),Zwr=i(ge),eE=n(ge,"LI",{});var VPe=s(eE);a3e=n(VPe,"STRONG",{});var wEt=s(a3e);e0r=r(wEt,"xlm"),wEt.forEach(t),o0r=r(VPe," \u2014 "),WU=n(VPe,"A",{href:!0});var AEt=s(WU);r0r=r(AEt,"TFXLMForQuestionAnsweringSimple"),AEt.forEach(t),t0r=r(VPe," (XLM model)"),VPe.forEach(t),a0r=i(ge),oE=n(ge,"LI",{});var XPe=s(oE);n3e=n(XPe,"STRONG",{});var yEt=s(n3e);n0r=r(yEt,"xlm-roberta"),yEt.forEach(t),s0r=r(XPe," \u2014 "),QU=n(XPe,"A",{href:!0});var LEt=s(QU);l0r=r(LEt,"TFXLMRobertaForQuestionAnswering"),LEt.forEach(t),i0r=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),d0r=i(ge),rE=n(ge,"LI",{});var zPe=s(rE);s3e=n(zPe,"STRONG",{});var xEt=s(s3e);c0r=r(xEt,"xlnet"),xEt.forEach(t),f0r=r(zPe," \u2014 "),HU=n(zPe,"A",{href:!0});var $Et=s(HU);m0r=r($Et,"TFXLNetForQuestionAnsweringSimple"),$Et.forEach(t),g0r=r(zPe," (XLNet model)"),zPe.forEach(t),ge.forEach(t),h0r=i(Bl),T(tE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),FNe=i(f),Mc=n(f,"H2",{class:!0});var yDe=s(Mc);aE=n(yDe,"A",{id:!0,class:!0,href:!0});var kEt=s(aE);l3e=n(kEt,"SPAN",{});var SEt=s(l3e);T(ex.$$.fragment,SEt),SEt.forEach(t),kEt.forEach(t),p0r=i(yDe),i3e=n(yDe,"SPAN",{});var REt=s(i3e);_0r=r(REt,"TFAutoModelForVision2Seq"),REt.forEach(t),yDe.forEach(t),TNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(ox.$$.fragment,Il),u0r=i(Il),Ec=n(Il,"P",{});var eee=s(Ec);b0r=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UU=n(eee,"A",{href:!0});var PEt=s(UU);v0r=r(PEt,"from_pretrained()"),PEt.forEach(t),F0r=r(eee," class method or the "),JU=n(eee,"A",{href:!0});var BEt=s(JU);T0r=r(BEt,"from_config()"),BEt.forEach(t),M0r=r(eee,` class
method.`),eee.forEach(t),E0r=i(Il),rx=n(Il,"P",{});var LDe=s(rx);C0r=r(LDe,"This class cannot be instantiated directly using "),d3e=n(LDe,"CODE",{});var IEt=s(d3e);w0r=r(IEt,"__init__()"),IEt.forEach(t),A0r=r(LDe," (throws an error)."),LDe.forEach(t),y0r=i(Il),jt=n(Il,"DIV",{class:!0});var PA=s(jt);T(tx.$$.fragment,PA),L0r=i(PA),c3e=n(PA,"P",{});var qEt=s(c3e);x0r=r(qEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qEt.forEach(t),$0r=i(PA),Cc=n(PA,"P",{});var oee=s(Cc);k0r=r(oee,`Note:
Loading a model from its configuration file does `),f3e=n(oee,"STRONG",{});var NEt=s(f3e);S0r=r(NEt,"not"),NEt.forEach(t),R0r=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(oee,"A",{href:!0});var jEt=s(YU);P0r=r(jEt,"from_pretrained()"),jEt.forEach(t),B0r=r(oee," to load the model weights."),oee.forEach(t),I0r=i(PA),T(nE.$$.fragment,PA),PA.forEach(t),q0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(ax.$$.fragment,ql),N0r=i(ql),m3e=n(ql,"P",{});var DEt=s(m3e);j0r=r(DEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DEt.forEach(t),D0r=i(ql),mn=n(ql,"P",{});var BA=s(mn);G0r=r(BA,"The model class to instantiate is selected based on the "),g3e=n(BA,"CODE",{});var GEt=s(g3e);O0r=r(GEt,"model_type"),GEt.forEach(t),V0r=r(BA,` property of the config object (either
passed as an argument or loaded from `),h3e=n(BA,"CODE",{});var OEt=s(h3e);X0r=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),z0r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(BA,"CODE",{});var VEt=s(p3e);W0r=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),Q0r=r(BA,":"),BA.forEach(t),H0r=i(ql),_3e=n(ql,"UL",{});var XEt=s(_3e);sE=n(XEt,"LI",{});var WPe=s(sE);u3e=n(WPe,"STRONG",{});var zEt=s(u3e);U0r=r(zEt,"vision-encoder-decoder"),zEt.forEach(t),J0r=r(WPe," \u2014 "),KU=n(WPe,"A",{href:!0});var WEt=s(KU);Y0r=r(WEt,"TFVisionEncoderDecoderModel"),WEt.forEach(t),K0r=r(WPe," (Vision Encoder decoder model)"),WPe.forEach(t),XEt.forEach(t),Z0r=i(ql),T(lE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),MNe=i(f),wc=n(f,"H2",{class:!0});var xDe=s(wc);iE=n(xDe,"A",{id:!0,class:!0,href:!0});var QEt=s(iE);b3e=n(QEt,"SPAN",{});var HEt=s(b3e);T(nx.$$.fragment,HEt),HEt.forEach(t),QEt.forEach(t),eAr=i(xDe),v3e=n(xDe,"SPAN",{});var UEt=s(v3e);oAr=r(UEt,"TFAutoModelForSpeechSeq2Seq"),UEt.forEach(t),xDe.forEach(t),ENe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(sx.$$.fragment,Nl),rAr=i(Nl),Ac=n(Nl,"P",{});var ree=s(Ac);tAr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZU=n(ree,"A",{href:!0});var JEt=s(ZU);aAr=r(JEt,"from_pretrained()"),JEt.forEach(t),nAr=r(ree," class method or the "),eJ=n(ree,"A",{href:!0});var YEt=s(eJ);sAr=r(YEt,"from_config()"),YEt.forEach(t),lAr=r(ree,` class
method.`),ree.forEach(t),iAr=i(Nl),lx=n(Nl,"P",{});var $De=s(lx);dAr=r($De,"This class cannot be instantiated directly using "),F3e=n($De,"CODE",{});var KEt=s(F3e);cAr=r(KEt,"__init__()"),KEt.forEach(t),fAr=r($De," (throws an error)."),$De.forEach(t),mAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var IA=s(Dt);T(ix.$$.fragment,IA),gAr=i(IA),T3e=n(IA,"P",{});var ZEt=s(T3e);hAr=r(ZEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZEt.forEach(t),pAr=i(IA),yc=n(IA,"P",{});var tee=s(yc);_Ar=r(tee,`Note:
Loading a model from its configuration file does `),M3e=n(tee,"STRONG",{});var eCt=s(M3e);uAr=r(eCt,"not"),eCt.forEach(t),bAr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(tee,"A",{href:!0});var oCt=s(oJ);vAr=r(oCt,"from_pretrained()"),oCt.forEach(t),FAr=r(tee," to load the model weights."),tee.forEach(t),TAr=i(IA),T(dE.$$.fragment,IA),IA.forEach(t),MAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(dx.$$.fragment,jl),EAr=i(jl),E3e=n(jl,"P",{});var rCt=s(E3e);CAr=r(rCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rCt.forEach(t),wAr=i(jl),gn=n(jl,"P",{});var qA=s(gn);AAr=r(qA,"The model class to instantiate is selected based on the "),C3e=n(qA,"CODE",{});var tCt=s(C3e);yAr=r(tCt,"model_type"),tCt.forEach(t),LAr=r(qA,` property of the config object (either
passed as an argument or loaded from `),w3e=n(qA,"CODE",{});var aCt=s(w3e);xAr=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),$Ar=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A3e=n(qA,"CODE",{});var nCt=s(A3e);kAr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),SAr=r(qA,":"),qA.forEach(t),RAr=i(jl),y3e=n(jl,"UL",{});var sCt=s(y3e);cE=n(sCt,"LI",{});var QPe=s(cE);L3e=n(QPe,"STRONG",{});var lCt=s(L3e);PAr=r(lCt,"speech_to_text"),lCt.forEach(t),BAr=r(QPe," \u2014 "),rJ=n(QPe,"A",{href:!0});var iCt=s(rJ);IAr=r(iCt,"TFSpeech2TextForConditionalGeneration"),iCt.forEach(t),qAr=r(QPe," (Speech2Text model)"),QPe.forEach(t),sCt.forEach(t),NAr=i(jl),T(fE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),CNe=i(f),Lc=n(f,"H2",{class:!0});var kDe=s(Lc);mE=n(kDe,"A",{id:!0,class:!0,href:!0});var dCt=s(mE);x3e=n(dCt,"SPAN",{});var cCt=s(x3e);T(cx.$$.fragment,cCt),cCt.forEach(t),dCt.forEach(t),jAr=i(kDe),$3e=n(kDe,"SPAN",{});var fCt=s($3e);DAr=r(fCt,"FlaxAutoModel"),fCt.forEach(t),kDe.forEach(t),wNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(fx.$$.fragment,Dl),GAr=i(Dl),xc=n(Dl,"P",{});var aee=s(xc);OAr=r(aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tJ=n(aee,"A",{href:!0});var mCt=s(tJ);VAr=r(mCt,"from_pretrained()"),mCt.forEach(t),XAr=r(aee," class method or the "),aJ=n(aee,"A",{href:!0});var gCt=s(aJ);zAr=r(gCt,"from_config()"),gCt.forEach(t),WAr=r(aee,` class
method.`),aee.forEach(t),QAr=i(Dl),mx=n(Dl,"P",{});var SDe=s(mx);HAr=r(SDe,"This class cannot be instantiated directly using "),k3e=n(SDe,"CODE",{});var hCt=s(k3e);UAr=r(hCt,"__init__()"),hCt.forEach(t),JAr=r(SDe," (throws an error)."),SDe.forEach(t),YAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var NA=s(Gt);T(gx.$$.fragment,NA),KAr=i(NA),S3e=n(NA,"P",{});var pCt=s(S3e);ZAr=r(pCt,"Instantiates one of the base model classes of the library from a configuration."),pCt.forEach(t),eyr=i(NA),$c=n(NA,"P",{});var nee=s($c);oyr=r(nee,`Note:
Loading a model from its configuration file does `),R3e=n(nee,"STRONG",{});var _Ct=s(R3e);ryr=r(_Ct,"not"),_Ct.forEach(t),tyr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(nee,"A",{href:!0});var uCt=s(nJ);ayr=r(uCt,"from_pretrained()"),uCt.forEach(t),nyr=r(nee," to load the model weights."),nee.forEach(t),syr=i(NA),T(gE.$$.fragment,NA),NA.forEach(t),lyr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(hx.$$.fragment,Gl),iyr=i(Gl),P3e=n(Gl,"P",{});var bCt=s(P3e);dyr=r(bCt,"Instantiate one of the base model classes of the library from a pretrained model."),bCt.forEach(t),cyr=i(Gl),hn=n(Gl,"P",{});var jA=s(hn);fyr=r(jA,"The model class to instantiate is selected based on the "),B3e=n(jA,"CODE",{});var vCt=s(B3e);myr=r(vCt,"model_type"),vCt.forEach(t),gyr=r(jA,` property of the config object (either
passed as an argument or loaded from `),I3e=n(jA,"CODE",{});var FCt=s(I3e);hyr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),pyr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(jA,"CODE",{});var TCt=s(q3e);_yr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),uyr=r(jA,":"),jA.forEach(t),byr=i(Gl),re=n(Gl,"UL",{});var ne=s(re);hE=n(ne,"LI",{});var HPe=s(hE);N3e=n(HPe,"STRONG",{});var MCt=s(N3e);vyr=r(MCt,"albert"),MCt.forEach(t),Fyr=r(HPe," \u2014 "),sJ=n(HPe,"A",{href:!0});var ECt=s(sJ);Tyr=r(ECt,"FlaxAlbertModel"),ECt.forEach(t),Myr=r(HPe," (ALBERT model)"),HPe.forEach(t),Eyr=i(ne),pE=n(ne,"LI",{});var UPe=s(pE);j3e=n(UPe,"STRONG",{});var CCt=s(j3e);Cyr=r(CCt,"bart"),CCt.forEach(t),wyr=r(UPe," \u2014 "),lJ=n(UPe,"A",{href:!0});var wCt=s(lJ);Ayr=r(wCt,"FlaxBartModel"),wCt.forEach(t),yyr=r(UPe," (BART model)"),UPe.forEach(t),Lyr=i(ne),_E=n(ne,"LI",{});var JPe=s(_E);D3e=n(JPe,"STRONG",{});var ACt=s(D3e);xyr=r(ACt,"beit"),ACt.forEach(t),$yr=r(JPe," \u2014 "),iJ=n(JPe,"A",{href:!0});var yCt=s(iJ);kyr=r(yCt,"FlaxBeitModel"),yCt.forEach(t),Syr=r(JPe," (BEiT model)"),JPe.forEach(t),Ryr=i(ne),uE=n(ne,"LI",{});var YPe=s(uE);G3e=n(YPe,"STRONG",{});var LCt=s(G3e);Pyr=r(LCt,"bert"),LCt.forEach(t),Byr=r(YPe," \u2014 "),dJ=n(YPe,"A",{href:!0});var xCt=s(dJ);Iyr=r(xCt,"FlaxBertModel"),xCt.forEach(t),qyr=r(YPe," (BERT model)"),YPe.forEach(t),Nyr=i(ne),bE=n(ne,"LI",{});var KPe=s(bE);O3e=n(KPe,"STRONG",{});var $Ct=s(O3e);jyr=r($Ct,"big_bird"),$Ct.forEach(t),Dyr=r(KPe," \u2014 "),cJ=n(KPe,"A",{href:!0});var kCt=s(cJ);Gyr=r(kCt,"FlaxBigBirdModel"),kCt.forEach(t),Oyr=r(KPe," (BigBird model)"),KPe.forEach(t),Vyr=i(ne),vE=n(ne,"LI",{});var ZPe=s(vE);V3e=n(ZPe,"STRONG",{});var SCt=s(V3e);Xyr=r(SCt,"blenderbot"),SCt.forEach(t),zyr=r(ZPe," \u2014 "),fJ=n(ZPe,"A",{href:!0});var RCt=s(fJ);Wyr=r(RCt,"FlaxBlenderbotModel"),RCt.forEach(t),Qyr=r(ZPe," (Blenderbot model)"),ZPe.forEach(t),Hyr=i(ne),FE=n(ne,"LI",{});var eBe=s(FE);X3e=n(eBe,"STRONG",{});var PCt=s(X3e);Uyr=r(PCt,"blenderbot-small"),PCt.forEach(t),Jyr=r(eBe," \u2014 "),mJ=n(eBe,"A",{href:!0});var BCt=s(mJ);Yyr=r(BCt,"FlaxBlenderbotSmallModel"),BCt.forEach(t),Kyr=r(eBe," (BlenderbotSmall model)"),eBe.forEach(t),Zyr=i(ne),TE=n(ne,"LI",{});var oBe=s(TE);z3e=n(oBe,"STRONG",{});var ICt=s(z3e);eLr=r(ICt,"clip"),ICt.forEach(t),oLr=r(oBe," \u2014 "),gJ=n(oBe,"A",{href:!0});var qCt=s(gJ);rLr=r(qCt,"FlaxCLIPModel"),qCt.forEach(t),tLr=r(oBe," (CLIP model)"),oBe.forEach(t),aLr=i(ne),ME=n(ne,"LI",{});var rBe=s(ME);W3e=n(rBe,"STRONG",{});var NCt=s(W3e);nLr=r(NCt,"distilbert"),NCt.forEach(t),sLr=r(rBe," \u2014 "),hJ=n(rBe,"A",{href:!0});var jCt=s(hJ);lLr=r(jCt,"FlaxDistilBertModel"),jCt.forEach(t),iLr=r(rBe," (DistilBERT model)"),rBe.forEach(t),dLr=i(ne),EE=n(ne,"LI",{});var tBe=s(EE);Q3e=n(tBe,"STRONG",{});var DCt=s(Q3e);cLr=r(DCt,"electra"),DCt.forEach(t),fLr=r(tBe," \u2014 "),pJ=n(tBe,"A",{href:!0});var GCt=s(pJ);mLr=r(GCt,"FlaxElectraModel"),GCt.forEach(t),gLr=r(tBe," (ELECTRA model)"),tBe.forEach(t),hLr=i(ne),CE=n(ne,"LI",{});var aBe=s(CE);H3e=n(aBe,"STRONG",{});var OCt=s(H3e);pLr=r(OCt,"gpt2"),OCt.forEach(t),_Lr=r(aBe," \u2014 "),_J=n(aBe,"A",{href:!0});var VCt=s(_J);uLr=r(VCt,"FlaxGPT2Model"),VCt.forEach(t),bLr=r(aBe," (OpenAI GPT-2 model)"),aBe.forEach(t),vLr=i(ne),wE=n(ne,"LI",{});var nBe=s(wE);U3e=n(nBe,"STRONG",{});var XCt=s(U3e);FLr=r(XCt,"gpt_neo"),XCt.forEach(t),TLr=r(nBe," \u2014 "),uJ=n(nBe,"A",{href:!0});var zCt=s(uJ);MLr=r(zCt,"FlaxGPTNeoModel"),zCt.forEach(t),ELr=r(nBe," (GPT Neo model)"),nBe.forEach(t),CLr=i(ne),AE=n(ne,"LI",{});var sBe=s(AE);J3e=n(sBe,"STRONG",{});var WCt=s(J3e);wLr=r(WCt,"gptj"),WCt.forEach(t),ALr=r(sBe," \u2014 "),bJ=n(sBe,"A",{href:!0});var QCt=s(bJ);yLr=r(QCt,"FlaxGPTJModel"),QCt.forEach(t),LLr=r(sBe," (GPT-J model)"),sBe.forEach(t),xLr=i(ne),yE=n(ne,"LI",{});var lBe=s(yE);Y3e=n(lBe,"STRONG",{});var HCt=s(Y3e);$Lr=r(HCt,"marian"),HCt.forEach(t),kLr=r(lBe," \u2014 "),vJ=n(lBe,"A",{href:!0});var UCt=s(vJ);SLr=r(UCt,"FlaxMarianModel"),UCt.forEach(t),RLr=r(lBe," (Marian model)"),lBe.forEach(t),PLr=i(ne),LE=n(ne,"LI",{});var iBe=s(LE);K3e=n(iBe,"STRONG",{});var JCt=s(K3e);BLr=r(JCt,"mbart"),JCt.forEach(t),ILr=r(iBe," \u2014 "),FJ=n(iBe,"A",{href:!0});var YCt=s(FJ);qLr=r(YCt,"FlaxMBartModel"),YCt.forEach(t),NLr=r(iBe," (mBART model)"),iBe.forEach(t),jLr=i(ne),xE=n(ne,"LI",{});var dBe=s(xE);Z3e=n(dBe,"STRONG",{});var KCt=s(Z3e);DLr=r(KCt,"mt5"),KCt.forEach(t),GLr=r(dBe," \u2014 "),TJ=n(dBe,"A",{href:!0});var ZCt=s(TJ);OLr=r(ZCt,"FlaxMT5Model"),ZCt.forEach(t),VLr=r(dBe," (mT5 model)"),dBe.forEach(t),XLr=i(ne),$E=n(ne,"LI",{});var cBe=s($E);eFe=n(cBe,"STRONG",{});var ewt=s(eFe);zLr=r(ewt,"pegasus"),ewt.forEach(t),WLr=r(cBe," \u2014 "),MJ=n(cBe,"A",{href:!0});var owt=s(MJ);QLr=r(owt,"FlaxPegasusModel"),owt.forEach(t),HLr=r(cBe," (Pegasus model)"),cBe.forEach(t),ULr=i(ne),kE=n(ne,"LI",{});var fBe=s(kE);oFe=n(fBe,"STRONG",{});var rwt=s(oFe);JLr=r(rwt,"roberta"),rwt.forEach(t),YLr=r(fBe," \u2014 "),EJ=n(fBe,"A",{href:!0});var twt=s(EJ);KLr=r(twt,"FlaxRobertaModel"),twt.forEach(t),ZLr=r(fBe," (RoBERTa model)"),fBe.forEach(t),e8r=i(ne),SE=n(ne,"LI",{});var mBe=s(SE);rFe=n(mBe,"STRONG",{});var awt=s(rFe);o8r=r(awt,"roformer"),awt.forEach(t),r8r=r(mBe," \u2014 "),CJ=n(mBe,"A",{href:!0});var nwt=s(CJ);t8r=r(nwt,"FlaxRoFormerModel"),nwt.forEach(t),a8r=r(mBe," (RoFormer model)"),mBe.forEach(t),n8r=i(ne),RE=n(ne,"LI",{});var gBe=s(RE);tFe=n(gBe,"STRONG",{});var swt=s(tFe);s8r=r(swt,"t5"),swt.forEach(t),l8r=r(gBe," \u2014 "),wJ=n(gBe,"A",{href:!0});var lwt=s(wJ);i8r=r(lwt,"FlaxT5Model"),lwt.forEach(t),d8r=r(gBe," (T5 model)"),gBe.forEach(t),c8r=i(ne),PE=n(ne,"LI",{});var hBe=s(PE);aFe=n(hBe,"STRONG",{});var iwt=s(aFe);f8r=r(iwt,"vision-text-dual-encoder"),iwt.forEach(t),m8r=r(hBe," \u2014 "),AJ=n(hBe,"A",{href:!0});var dwt=s(AJ);g8r=r(dwt,"FlaxVisionTextDualEncoderModel"),dwt.forEach(t),h8r=r(hBe," (VisionTextDualEncoder model)"),hBe.forEach(t),p8r=i(ne),BE=n(ne,"LI",{});var pBe=s(BE);nFe=n(pBe,"STRONG",{});var cwt=s(nFe);_8r=r(cwt,"vit"),cwt.forEach(t),u8r=r(pBe," \u2014 "),yJ=n(pBe,"A",{href:!0});var fwt=s(yJ);b8r=r(fwt,"FlaxViTModel"),fwt.forEach(t),v8r=r(pBe," (ViT model)"),pBe.forEach(t),F8r=i(ne),IE=n(ne,"LI",{});var _Be=s(IE);sFe=n(_Be,"STRONG",{});var mwt=s(sFe);T8r=r(mwt,"wav2vec2"),mwt.forEach(t),M8r=r(_Be," \u2014 "),LJ=n(_Be,"A",{href:!0});var gwt=s(LJ);E8r=r(gwt,"FlaxWav2Vec2Model"),gwt.forEach(t),C8r=r(_Be," (Wav2Vec2 model)"),_Be.forEach(t),w8r=i(ne),qE=n(ne,"LI",{});var uBe=s(qE);lFe=n(uBe,"STRONG",{});var hwt=s(lFe);A8r=r(hwt,"xglm"),hwt.forEach(t),y8r=r(uBe," \u2014 "),xJ=n(uBe,"A",{href:!0});var pwt=s(xJ);L8r=r(pwt,"FlaxXGLMModel"),pwt.forEach(t),x8r=r(uBe," (XGLM model)"),uBe.forEach(t),$8r=i(ne),NE=n(ne,"LI",{});var bBe=s(NE);iFe=n(bBe,"STRONG",{});var _wt=s(iFe);k8r=r(_wt,"xlm-roberta"),_wt.forEach(t),S8r=r(bBe," \u2014 "),$J=n(bBe,"A",{href:!0});var uwt=s($J);R8r=r(uwt,"FlaxXLMRobertaModel"),uwt.forEach(t),P8r=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),ne.forEach(t),B8r=i(Gl),T(jE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),ANe=i(f),kc=n(f,"H2",{class:!0});var RDe=s(kc);DE=n(RDe,"A",{id:!0,class:!0,href:!0});var bwt=s(DE);dFe=n(bwt,"SPAN",{});var vwt=s(dFe);T(px.$$.fragment,vwt),vwt.forEach(t),bwt.forEach(t),I8r=i(RDe),cFe=n(RDe,"SPAN",{});var Fwt=s(cFe);q8r=r(Fwt,"FlaxAutoModelForCausalLM"),Fwt.forEach(t),RDe.forEach(t),yNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(_x.$$.fragment,Ol),N8r=i(Ol),Sc=n(Ol,"P",{});var see=s(Sc);j8r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=n(see,"A",{href:!0});var Twt=s(kJ);D8r=r(Twt,"from_pretrained()"),Twt.forEach(t),G8r=r(see," class method or the "),SJ=n(see,"A",{href:!0});var Mwt=s(SJ);O8r=r(Mwt,"from_config()"),Mwt.forEach(t),V8r=r(see,` class
method.`),see.forEach(t),X8r=i(Ol),ux=n(Ol,"P",{});var PDe=s(ux);z8r=r(PDe,"This class cannot be instantiated directly using "),fFe=n(PDe,"CODE",{});var Ewt=s(fFe);W8r=r(Ewt,"__init__()"),Ewt.forEach(t),Q8r=r(PDe," (throws an error)."),PDe.forEach(t),H8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var DA=s(Ot);T(bx.$$.fragment,DA),U8r=i(DA),mFe=n(DA,"P",{});var Cwt=s(mFe);J8r=r(Cwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cwt.forEach(t),Y8r=i(DA),Rc=n(DA,"P",{});var lee=s(Rc);K8r=r(lee,`Note:
Loading a model from its configuration file does `),gFe=n(lee,"STRONG",{});var wwt=s(gFe);Z8r=r(wwt,"not"),wwt.forEach(t),e7r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(lee,"A",{href:!0});var Awt=s(RJ);o7r=r(Awt,"from_pretrained()"),Awt.forEach(t),r7r=r(lee," to load the model weights."),lee.forEach(t),t7r=i(DA),T(GE.$$.fragment,DA),DA.forEach(t),a7r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(vx.$$.fragment,Vl),n7r=i(Vl),hFe=n(Vl,"P",{});var ywt=s(hFe);s7r=r(ywt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ywt.forEach(t),l7r=i(Vl),pn=n(Vl,"P",{});var GA=s(pn);i7r=r(GA,"The model class to instantiate is selected based on the "),pFe=n(GA,"CODE",{});var Lwt=s(pFe);d7r=r(Lwt,"model_type"),Lwt.forEach(t),c7r=r(GA,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(GA,"CODE",{});var xwt=s(_Fe);f7r=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),m7r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(GA,"CODE",{});var $wt=s(uFe);g7r=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),h7r=r(GA,":"),GA.forEach(t),p7r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);OE=n(Xe,"LI",{});var vBe=s(OE);bFe=n(vBe,"STRONG",{});var kwt=s(bFe);_7r=r(kwt,"bart"),kwt.forEach(t),u7r=r(vBe," \u2014 "),PJ=n(vBe,"A",{href:!0});var Swt=s(PJ);b7r=r(Swt,"FlaxBartForCausalLM"),Swt.forEach(t),v7r=r(vBe," (BART model)"),vBe.forEach(t),F7r=i(Xe),VE=n(Xe,"LI",{});var FBe=s(VE);vFe=n(FBe,"STRONG",{});var Rwt=s(vFe);T7r=r(Rwt,"bert"),Rwt.forEach(t),M7r=r(FBe," \u2014 "),BJ=n(FBe,"A",{href:!0});var Pwt=s(BJ);E7r=r(Pwt,"FlaxBertForCausalLM"),Pwt.forEach(t),C7r=r(FBe," (BERT model)"),FBe.forEach(t),w7r=i(Xe),XE=n(Xe,"LI",{});var TBe=s(XE);FFe=n(TBe,"STRONG",{});var Bwt=s(FFe);A7r=r(Bwt,"big_bird"),Bwt.forEach(t),y7r=r(TBe," \u2014 "),IJ=n(TBe,"A",{href:!0});var Iwt=s(IJ);L7r=r(Iwt,"FlaxBigBirdForCausalLM"),Iwt.forEach(t),x7r=r(TBe," (BigBird model)"),TBe.forEach(t),$7r=i(Xe),zE=n(Xe,"LI",{});var MBe=s(zE);TFe=n(MBe,"STRONG",{});var qwt=s(TFe);k7r=r(qwt,"electra"),qwt.forEach(t),S7r=r(MBe," \u2014 "),qJ=n(MBe,"A",{href:!0});var Nwt=s(qJ);R7r=r(Nwt,"FlaxElectraForCausalLM"),Nwt.forEach(t),P7r=r(MBe," (ELECTRA model)"),MBe.forEach(t),B7r=i(Xe),WE=n(Xe,"LI",{});var EBe=s(WE);MFe=n(EBe,"STRONG",{});var jwt=s(MFe);I7r=r(jwt,"gpt2"),jwt.forEach(t),q7r=r(EBe," \u2014 "),NJ=n(EBe,"A",{href:!0});var Dwt=s(NJ);N7r=r(Dwt,"FlaxGPT2LMHeadModel"),Dwt.forEach(t),j7r=r(EBe," (OpenAI GPT-2 model)"),EBe.forEach(t),D7r=i(Xe),QE=n(Xe,"LI",{});var CBe=s(QE);EFe=n(CBe,"STRONG",{});var Gwt=s(EFe);G7r=r(Gwt,"gpt_neo"),Gwt.forEach(t),O7r=r(CBe," \u2014 "),jJ=n(CBe,"A",{href:!0});var Owt=s(jJ);V7r=r(Owt,"FlaxGPTNeoForCausalLM"),Owt.forEach(t),X7r=r(CBe," (GPT Neo model)"),CBe.forEach(t),z7r=i(Xe),HE=n(Xe,"LI",{});var wBe=s(HE);CFe=n(wBe,"STRONG",{});var Vwt=s(CFe);W7r=r(Vwt,"gptj"),Vwt.forEach(t),Q7r=r(wBe," \u2014 "),DJ=n(wBe,"A",{href:!0});var Xwt=s(DJ);H7r=r(Xwt,"FlaxGPTJForCausalLM"),Xwt.forEach(t),U7r=r(wBe," (GPT-J model)"),wBe.forEach(t),J7r=i(Xe),UE=n(Xe,"LI",{});var ABe=s(UE);wFe=n(ABe,"STRONG",{});var zwt=s(wFe);Y7r=r(zwt,"roberta"),zwt.forEach(t),K7r=r(ABe," \u2014 "),GJ=n(ABe,"A",{href:!0});var Wwt=s(GJ);Z7r=r(Wwt,"FlaxRobertaForCausalLM"),Wwt.forEach(t),exr=r(ABe," (RoBERTa model)"),ABe.forEach(t),oxr=i(Xe),JE=n(Xe,"LI",{});var yBe=s(JE);AFe=n(yBe,"STRONG",{});var Qwt=s(AFe);rxr=r(Qwt,"xglm"),Qwt.forEach(t),txr=r(yBe," \u2014 "),OJ=n(yBe,"A",{href:!0});var Hwt=s(OJ);axr=r(Hwt,"FlaxXGLMForCausalLM"),Hwt.forEach(t),nxr=r(yBe," (XGLM model)"),yBe.forEach(t),Xe.forEach(t),sxr=i(Vl),T(YE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),LNe=i(f),Pc=n(f,"H2",{class:!0});var BDe=s(Pc);KE=n(BDe,"A",{id:!0,class:!0,href:!0});var Uwt=s(KE);yFe=n(Uwt,"SPAN",{});var Jwt=s(yFe);T(Fx.$$.fragment,Jwt),Jwt.forEach(t),Uwt.forEach(t),lxr=i(BDe),LFe=n(BDe,"SPAN",{});var Ywt=s(LFe);ixr=r(Ywt,"FlaxAutoModelForPreTraining"),Ywt.forEach(t),BDe.forEach(t),xNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(Tx.$$.fragment,Xl),dxr=i(Xl),Bc=n(Xl,"P",{});var iee=s(Bc);cxr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VJ=n(iee,"A",{href:!0});var Kwt=s(VJ);fxr=r(Kwt,"from_pretrained()"),Kwt.forEach(t),mxr=r(iee," class method or the "),XJ=n(iee,"A",{href:!0});var Zwt=s(XJ);gxr=r(Zwt,"from_config()"),Zwt.forEach(t),hxr=r(iee,` class
method.`),iee.forEach(t),pxr=i(Xl),Mx=n(Xl,"P",{});var IDe=s(Mx);_xr=r(IDe,"This class cannot be instantiated directly using "),xFe=n(IDe,"CODE",{});var e0t=s(xFe);uxr=r(e0t,"__init__()"),e0t.forEach(t),bxr=r(IDe," (throws an error)."),IDe.forEach(t),vxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var OA=s(Vt);T(Ex.$$.fragment,OA),Fxr=i(OA),$Fe=n(OA,"P",{});var o0t=s($Fe);Txr=r(o0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o0t.forEach(t),Mxr=i(OA),Ic=n(OA,"P",{});var dee=s(Ic);Exr=r(dee,`Note:
Loading a model from its configuration file does `),kFe=n(dee,"STRONG",{});var r0t=s(kFe);Cxr=r(r0t,"not"),r0t.forEach(t),wxr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(dee,"A",{href:!0});var t0t=s(zJ);Axr=r(t0t,"from_pretrained()"),t0t.forEach(t),yxr=r(dee," to load the model weights."),dee.forEach(t),Lxr=i(OA),T(ZE.$$.fragment,OA),OA.forEach(t),xxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(Cx.$$.fragment,zl),$xr=i(zl),SFe=n(zl,"P",{});var a0t=s(SFe);kxr=r(a0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),a0t.forEach(t),Sxr=i(zl),_n=n(zl,"P",{});var VA=s(_n);Rxr=r(VA,"The model class to instantiate is selected based on the "),RFe=n(VA,"CODE",{});var n0t=s(RFe);Pxr=r(n0t,"model_type"),n0t.forEach(t),Bxr=r(VA,` property of the config object (either
passed as an argument or loaded from `),PFe=n(VA,"CODE",{});var s0t=s(PFe);Ixr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),qxr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(VA,"CODE",{});var l0t=s(BFe);Nxr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),jxr=r(VA,":"),VA.forEach(t),Dxr=i(zl),Me=n(zl,"UL",{});var we=s(Me);eC=n(we,"LI",{});var LBe=s(eC);IFe=n(LBe,"STRONG",{});var i0t=s(IFe);Gxr=r(i0t,"albert"),i0t.forEach(t),Oxr=r(LBe," \u2014 "),WJ=n(LBe,"A",{href:!0});var d0t=s(WJ);Vxr=r(d0t,"FlaxAlbertForPreTraining"),d0t.forEach(t),Xxr=r(LBe," (ALBERT model)"),LBe.forEach(t),zxr=i(we),oC=n(we,"LI",{});var xBe=s(oC);qFe=n(xBe,"STRONG",{});var c0t=s(qFe);Wxr=r(c0t,"bart"),c0t.forEach(t),Qxr=r(xBe," \u2014 "),QJ=n(xBe,"A",{href:!0});var f0t=s(QJ);Hxr=r(f0t,"FlaxBartForConditionalGeneration"),f0t.forEach(t),Uxr=r(xBe," (BART model)"),xBe.forEach(t),Jxr=i(we),rC=n(we,"LI",{});var $Be=s(rC);NFe=n($Be,"STRONG",{});var m0t=s(NFe);Yxr=r(m0t,"bert"),m0t.forEach(t),Kxr=r($Be," \u2014 "),HJ=n($Be,"A",{href:!0});var g0t=s(HJ);Zxr=r(g0t,"FlaxBertForPreTraining"),g0t.forEach(t),e9r=r($Be," (BERT model)"),$Be.forEach(t),o9r=i(we),tC=n(we,"LI",{});var kBe=s(tC);jFe=n(kBe,"STRONG",{});var h0t=s(jFe);r9r=r(h0t,"big_bird"),h0t.forEach(t),t9r=r(kBe," \u2014 "),UJ=n(kBe,"A",{href:!0});var p0t=s(UJ);a9r=r(p0t,"FlaxBigBirdForPreTraining"),p0t.forEach(t),n9r=r(kBe," (BigBird model)"),kBe.forEach(t),s9r=i(we),aC=n(we,"LI",{});var SBe=s(aC);DFe=n(SBe,"STRONG",{});var _0t=s(DFe);l9r=r(_0t,"electra"),_0t.forEach(t),i9r=r(SBe," \u2014 "),JJ=n(SBe,"A",{href:!0});var u0t=s(JJ);d9r=r(u0t,"FlaxElectraForPreTraining"),u0t.forEach(t),c9r=r(SBe," (ELECTRA model)"),SBe.forEach(t),f9r=i(we),nC=n(we,"LI",{});var RBe=s(nC);GFe=n(RBe,"STRONG",{});var b0t=s(GFe);m9r=r(b0t,"mbart"),b0t.forEach(t),g9r=r(RBe," \u2014 "),YJ=n(RBe,"A",{href:!0});var v0t=s(YJ);h9r=r(v0t,"FlaxMBartForConditionalGeneration"),v0t.forEach(t),p9r=r(RBe," (mBART model)"),RBe.forEach(t),_9r=i(we),sC=n(we,"LI",{});var PBe=s(sC);OFe=n(PBe,"STRONG",{});var F0t=s(OFe);u9r=r(F0t,"mt5"),F0t.forEach(t),b9r=r(PBe," \u2014 "),KJ=n(PBe,"A",{href:!0});var T0t=s(KJ);v9r=r(T0t,"FlaxMT5ForConditionalGeneration"),T0t.forEach(t),F9r=r(PBe," (mT5 model)"),PBe.forEach(t),T9r=i(we),lC=n(we,"LI",{});var BBe=s(lC);VFe=n(BBe,"STRONG",{});var M0t=s(VFe);M9r=r(M0t,"roberta"),M0t.forEach(t),E9r=r(BBe," \u2014 "),ZJ=n(BBe,"A",{href:!0});var E0t=s(ZJ);C9r=r(E0t,"FlaxRobertaForMaskedLM"),E0t.forEach(t),w9r=r(BBe," (RoBERTa model)"),BBe.forEach(t),A9r=i(we),iC=n(we,"LI",{});var IBe=s(iC);XFe=n(IBe,"STRONG",{});var C0t=s(XFe);y9r=r(C0t,"roformer"),C0t.forEach(t),L9r=r(IBe," \u2014 "),eY=n(IBe,"A",{href:!0});var w0t=s(eY);x9r=r(w0t,"FlaxRoFormerForMaskedLM"),w0t.forEach(t),$9r=r(IBe," (RoFormer model)"),IBe.forEach(t),k9r=i(we),dC=n(we,"LI",{});var qBe=s(dC);zFe=n(qBe,"STRONG",{});var A0t=s(zFe);S9r=r(A0t,"t5"),A0t.forEach(t),R9r=r(qBe," \u2014 "),oY=n(qBe,"A",{href:!0});var y0t=s(oY);P9r=r(y0t,"FlaxT5ForConditionalGeneration"),y0t.forEach(t),B9r=r(qBe," (T5 model)"),qBe.forEach(t),I9r=i(we),cC=n(we,"LI",{});var NBe=s(cC);WFe=n(NBe,"STRONG",{});var L0t=s(WFe);q9r=r(L0t,"wav2vec2"),L0t.forEach(t),N9r=r(NBe," \u2014 "),rY=n(NBe,"A",{href:!0});var x0t=s(rY);j9r=r(x0t,"FlaxWav2Vec2ForPreTraining"),x0t.forEach(t),D9r=r(NBe," (Wav2Vec2 model)"),NBe.forEach(t),G9r=i(we),fC=n(we,"LI",{});var jBe=s(fC);QFe=n(jBe,"STRONG",{});var $0t=s(QFe);O9r=r($0t,"xlm-roberta"),$0t.forEach(t),V9r=r(jBe," \u2014 "),tY=n(jBe,"A",{href:!0});var k0t=s(tY);X9r=r(k0t,"FlaxXLMRobertaForMaskedLM"),k0t.forEach(t),z9r=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),we.forEach(t),W9r=i(zl),T(mC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),$Ne=i(f),qc=n(f,"H2",{class:!0});var qDe=s(qc);gC=n(qDe,"A",{id:!0,class:!0,href:!0});var S0t=s(gC);HFe=n(S0t,"SPAN",{});var R0t=s(HFe);T(wx.$$.fragment,R0t),R0t.forEach(t),S0t.forEach(t),Q9r=i(qDe),UFe=n(qDe,"SPAN",{});var P0t=s(UFe);H9r=r(P0t,"FlaxAutoModelForMaskedLM"),P0t.forEach(t),qDe.forEach(t),kNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(Ax.$$.fragment,Wl),U9r=i(Wl),Nc=n(Wl,"P",{});var cee=s(Nc);J9r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=n(cee,"A",{href:!0});var B0t=s(aY);Y9r=r(B0t,"from_pretrained()"),B0t.forEach(t),K9r=r(cee," class method or the "),nY=n(cee,"A",{href:!0});var I0t=s(nY);Z9r=r(I0t,"from_config()"),I0t.forEach(t),e$r=r(cee,` class
method.`),cee.forEach(t),o$r=i(Wl),yx=n(Wl,"P",{});var NDe=s(yx);r$r=r(NDe,"This class cannot be instantiated directly using "),JFe=n(NDe,"CODE",{});var q0t=s(JFe);t$r=r(q0t,"__init__()"),q0t.forEach(t),a$r=r(NDe," (throws an error)."),NDe.forEach(t),n$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var XA=s(Xt);T(Lx.$$.fragment,XA),s$r=i(XA),YFe=n(XA,"P",{});var N0t=s(YFe);l$r=r(N0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N0t.forEach(t),i$r=i(XA),jc=n(XA,"P",{});var fee=s(jc);d$r=r(fee,`Note:
Loading a model from its configuration file does `),KFe=n(fee,"STRONG",{});var j0t=s(KFe);c$r=r(j0t,"not"),j0t.forEach(t),f$r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(fee,"A",{href:!0});var D0t=s(sY);m$r=r(D0t,"from_pretrained()"),D0t.forEach(t),g$r=r(fee," to load the model weights."),fee.forEach(t),h$r=i(XA),T(hC.$$.fragment,XA),XA.forEach(t),p$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(xx.$$.fragment,Ql),_$r=i(Ql),ZFe=n(Ql,"P",{});var G0t=s(ZFe);u$r=r(G0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G0t.forEach(t),b$r=i(Ql),un=n(Ql,"P",{});var zA=s(un);v$r=r(zA,"The model class to instantiate is selected based on the "),e6e=n(zA,"CODE",{});var O0t=s(e6e);F$r=r(O0t,"model_type"),O0t.forEach(t),T$r=r(zA,` property of the config object (either
passed as an argument or loaded from `),o6e=n(zA,"CODE",{});var V0t=s(o6e);M$r=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),E$r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(zA,"CODE",{});var X0t=s(r6e);C$r=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),w$r=r(zA,":"),zA.forEach(t),A$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);pC=n(Ie,"LI",{});var DBe=s(pC);t6e=n(DBe,"STRONG",{});var z0t=s(t6e);y$r=r(z0t,"albert"),z0t.forEach(t),L$r=r(DBe," \u2014 "),lY=n(DBe,"A",{href:!0});var W0t=s(lY);x$r=r(W0t,"FlaxAlbertForMaskedLM"),W0t.forEach(t),$$r=r(DBe," (ALBERT model)"),DBe.forEach(t),k$r=i(Ie),_C=n(Ie,"LI",{});var GBe=s(_C);a6e=n(GBe,"STRONG",{});var Q0t=s(a6e);S$r=r(Q0t,"bart"),Q0t.forEach(t),R$r=r(GBe," \u2014 "),iY=n(GBe,"A",{href:!0});var H0t=s(iY);P$r=r(H0t,"FlaxBartForConditionalGeneration"),H0t.forEach(t),B$r=r(GBe," (BART model)"),GBe.forEach(t),I$r=i(Ie),uC=n(Ie,"LI",{});var OBe=s(uC);n6e=n(OBe,"STRONG",{});var U0t=s(n6e);q$r=r(U0t,"bert"),U0t.forEach(t),N$r=r(OBe," \u2014 "),dY=n(OBe,"A",{href:!0});var J0t=s(dY);j$r=r(J0t,"FlaxBertForMaskedLM"),J0t.forEach(t),D$r=r(OBe," (BERT model)"),OBe.forEach(t),G$r=i(Ie),bC=n(Ie,"LI",{});var VBe=s(bC);s6e=n(VBe,"STRONG",{});var Y0t=s(s6e);O$r=r(Y0t,"big_bird"),Y0t.forEach(t),V$r=r(VBe," \u2014 "),cY=n(VBe,"A",{href:!0});var K0t=s(cY);X$r=r(K0t,"FlaxBigBirdForMaskedLM"),K0t.forEach(t),z$r=r(VBe," (BigBird model)"),VBe.forEach(t),W$r=i(Ie),vC=n(Ie,"LI",{});var XBe=s(vC);l6e=n(XBe,"STRONG",{});var Z0t=s(l6e);Q$r=r(Z0t,"distilbert"),Z0t.forEach(t),H$r=r(XBe," \u2014 "),fY=n(XBe,"A",{href:!0});var eAt=s(fY);U$r=r(eAt,"FlaxDistilBertForMaskedLM"),eAt.forEach(t),J$r=r(XBe," (DistilBERT model)"),XBe.forEach(t),Y$r=i(Ie),FC=n(Ie,"LI",{});var zBe=s(FC);i6e=n(zBe,"STRONG",{});var oAt=s(i6e);K$r=r(oAt,"electra"),oAt.forEach(t),Z$r=r(zBe," \u2014 "),mY=n(zBe,"A",{href:!0});var rAt=s(mY);ekr=r(rAt,"FlaxElectraForMaskedLM"),rAt.forEach(t),okr=r(zBe," (ELECTRA model)"),zBe.forEach(t),rkr=i(Ie),TC=n(Ie,"LI",{});var WBe=s(TC);d6e=n(WBe,"STRONG",{});var tAt=s(d6e);tkr=r(tAt,"mbart"),tAt.forEach(t),akr=r(WBe," \u2014 "),gY=n(WBe,"A",{href:!0});var aAt=s(gY);nkr=r(aAt,"FlaxMBartForConditionalGeneration"),aAt.forEach(t),skr=r(WBe," (mBART model)"),WBe.forEach(t),lkr=i(Ie),MC=n(Ie,"LI",{});var QBe=s(MC);c6e=n(QBe,"STRONG",{});var nAt=s(c6e);ikr=r(nAt,"roberta"),nAt.forEach(t),dkr=r(QBe," \u2014 "),hY=n(QBe,"A",{href:!0});var sAt=s(hY);ckr=r(sAt,"FlaxRobertaForMaskedLM"),sAt.forEach(t),fkr=r(QBe," (RoBERTa model)"),QBe.forEach(t),mkr=i(Ie),EC=n(Ie,"LI",{});var HBe=s(EC);f6e=n(HBe,"STRONG",{});var lAt=s(f6e);gkr=r(lAt,"roformer"),lAt.forEach(t),hkr=r(HBe," \u2014 "),pY=n(HBe,"A",{href:!0});var iAt=s(pY);pkr=r(iAt,"FlaxRoFormerForMaskedLM"),iAt.forEach(t),_kr=r(HBe," (RoFormer model)"),HBe.forEach(t),ukr=i(Ie),CC=n(Ie,"LI",{});var UBe=s(CC);m6e=n(UBe,"STRONG",{});var dAt=s(m6e);bkr=r(dAt,"xlm-roberta"),dAt.forEach(t),vkr=r(UBe," \u2014 "),_Y=n(UBe,"A",{href:!0});var cAt=s(_Y);Fkr=r(cAt,"FlaxXLMRobertaForMaskedLM"),cAt.forEach(t),Tkr=r(UBe," (XLM-RoBERTa model)"),UBe.forEach(t),Ie.forEach(t),Mkr=i(Ql),T(wC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),SNe=i(f),Dc=n(f,"H2",{class:!0});var jDe=s(Dc);AC=n(jDe,"A",{id:!0,class:!0,href:!0});var fAt=s(AC);g6e=n(fAt,"SPAN",{});var mAt=s(g6e);T($x.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),Ekr=i(jDe),h6e=n(jDe,"SPAN",{});var gAt=s(h6e);Ckr=r(gAt,"FlaxAutoModelForSeq2SeqLM"),gAt.forEach(t),jDe.forEach(t),RNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(kx.$$.fragment,Hl),wkr=i(Hl),Gc=n(Hl,"P",{});var mee=s(Gc);Akr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uY=n(mee,"A",{href:!0});var hAt=s(uY);ykr=r(hAt,"from_pretrained()"),hAt.forEach(t),Lkr=r(mee," class method or the "),bY=n(mee,"A",{href:!0});var pAt=s(bY);xkr=r(pAt,"from_config()"),pAt.forEach(t),$kr=r(mee,` class
method.`),mee.forEach(t),kkr=i(Hl),Sx=n(Hl,"P",{});var DDe=s(Sx);Skr=r(DDe,"This class cannot be instantiated directly using "),p6e=n(DDe,"CODE",{});var _At=s(p6e);Rkr=r(_At,"__init__()"),_At.forEach(t),Pkr=r(DDe," (throws an error)."),DDe.forEach(t),Bkr=i(Hl),zt=n(Hl,"DIV",{class:!0});var WA=s(zt);T(Rx.$$.fragment,WA),Ikr=i(WA),_6e=n(WA,"P",{});var uAt=s(_6e);qkr=r(uAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uAt.forEach(t),Nkr=i(WA),Oc=n(WA,"P",{});var gee=s(Oc);jkr=r(gee,`Note:
Loading a model from its configuration file does `),u6e=n(gee,"STRONG",{});var bAt=s(u6e);Dkr=r(bAt,"not"),bAt.forEach(t),Gkr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(gee,"A",{href:!0});var vAt=s(vY);Okr=r(vAt,"from_pretrained()"),vAt.forEach(t),Vkr=r(gee," to load the model weights."),gee.forEach(t),Xkr=i(WA),T(yC.$$.fragment,WA),WA.forEach(t),zkr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(Px.$$.fragment,Ul),Wkr=i(Ul),b6e=n(Ul,"P",{});var FAt=s(b6e);Qkr=r(FAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FAt.forEach(t),Hkr=i(Ul),bn=n(Ul,"P",{});var QA=s(bn);Ukr=r(QA,"The model class to instantiate is selected based on the "),v6e=n(QA,"CODE",{});var TAt=s(v6e);Jkr=r(TAt,"model_type"),TAt.forEach(t),Ykr=r(QA,` property of the config object (either
passed as an argument or loaded from `),F6e=n(QA,"CODE",{});var MAt=s(F6e);Kkr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),Zkr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(QA,"CODE",{});var EAt=s(T6e);eSr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),oSr=r(QA,":"),QA.forEach(t),rSr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);LC=n(ze,"LI",{});var JBe=s(LC);M6e=n(JBe,"STRONG",{});var CAt=s(M6e);tSr=r(CAt,"bart"),CAt.forEach(t),aSr=r(JBe," \u2014 "),FY=n(JBe,"A",{href:!0});var wAt=s(FY);nSr=r(wAt,"FlaxBartForConditionalGeneration"),wAt.forEach(t),sSr=r(JBe," (BART model)"),JBe.forEach(t),lSr=i(ze),xC=n(ze,"LI",{});var YBe=s(xC);E6e=n(YBe,"STRONG",{});var AAt=s(E6e);iSr=r(AAt,"blenderbot"),AAt.forEach(t),dSr=r(YBe," \u2014 "),TY=n(YBe,"A",{href:!0});var yAt=s(TY);cSr=r(yAt,"FlaxBlenderbotForConditionalGeneration"),yAt.forEach(t),fSr=r(YBe," (Blenderbot model)"),YBe.forEach(t),mSr=i(ze),$C=n(ze,"LI",{});var KBe=s($C);C6e=n(KBe,"STRONG",{});var LAt=s(C6e);gSr=r(LAt,"blenderbot-small"),LAt.forEach(t),hSr=r(KBe," \u2014 "),MY=n(KBe,"A",{href:!0});var xAt=s(MY);pSr=r(xAt,"FlaxBlenderbotSmallForConditionalGeneration"),xAt.forEach(t),_Sr=r(KBe," (BlenderbotSmall model)"),KBe.forEach(t),uSr=i(ze),kC=n(ze,"LI",{});var ZBe=s(kC);w6e=n(ZBe,"STRONG",{});var $At=s(w6e);bSr=r($At,"encoder-decoder"),$At.forEach(t),vSr=r(ZBe," \u2014 "),EY=n(ZBe,"A",{href:!0});var kAt=s(EY);FSr=r(kAt,"FlaxEncoderDecoderModel"),kAt.forEach(t),TSr=r(ZBe," (Encoder decoder model)"),ZBe.forEach(t),MSr=i(ze),SC=n(ze,"LI",{});var eIe=s(SC);A6e=n(eIe,"STRONG",{});var SAt=s(A6e);ESr=r(SAt,"marian"),SAt.forEach(t),CSr=r(eIe," \u2014 "),CY=n(eIe,"A",{href:!0});var RAt=s(CY);wSr=r(RAt,"FlaxMarianMTModel"),RAt.forEach(t),ASr=r(eIe," (Marian model)"),eIe.forEach(t),ySr=i(ze),RC=n(ze,"LI",{});var oIe=s(RC);y6e=n(oIe,"STRONG",{});var PAt=s(y6e);LSr=r(PAt,"mbart"),PAt.forEach(t),xSr=r(oIe," \u2014 "),wY=n(oIe,"A",{href:!0});var BAt=s(wY);$Sr=r(BAt,"FlaxMBartForConditionalGeneration"),BAt.forEach(t),kSr=r(oIe," (mBART model)"),oIe.forEach(t),SSr=i(ze),PC=n(ze,"LI",{});var rIe=s(PC);L6e=n(rIe,"STRONG",{});var IAt=s(L6e);RSr=r(IAt,"mt5"),IAt.forEach(t),PSr=r(rIe," \u2014 "),AY=n(rIe,"A",{href:!0});var qAt=s(AY);BSr=r(qAt,"FlaxMT5ForConditionalGeneration"),qAt.forEach(t),ISr=r(rIe," (mT5 model)"),rIe.forEach(t),qSr=i(ze),BC=n(ze,"LI",{});var tIe=s(BC);x6e=n(tIe,"STRONG",{});var NAt=s(x6e);NSr=r(NAt,"pegasus"),NAt.forEach(t),jSr=r(tIe," \u2014 "),yY=n(tIe,"A",{href:!0});var jAt=s(yY);DSr=r(jAt,"FlaxPegasusForConditionalGeneration"),jAt.forEach(t),GSr=r(tIe," (Pegasus model)"),tIe.forEach(t),OSr=i(ze),IC=n(ze,"LI",{});var aIe=s(IC);$6e=n(aIe,"STRONG",{});var DAt=s($6e);VSr=r(DAt,"t5"),DAt.forEach(t),XSr=r(aIe," \u2014 "),LY=n(aIe,"A",{href:!0});var GAt=s(LY);zSr=r(GAt,"FlaxT5ForConditionalGeneration"),GAt.forEach(t),WSr=r(aIe," (T5 model)"),aIe.forEach(t),ze.forEach(t),QSr=i(Ul),T(qC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),PNe=i(f),Vc=n(f,"H2",{class:!0});var GDe=s(Vc);NC=n(GDe,"A",{id:!0,class:!0,href:!0});var OAt=s(NC);k6e=n(OAt,"SPAN",{});var VAt=s(k6e);T(Bx.$$.fragment,VAt),VAt.forEach(t),OAt.forEach(t),HSr=i(GDe),S6e=n(GDe,"SPAN",{});var XAt=s(S6e);USr=r(XAt,"FlaxAutoModelForSequenceClassification"),XAt.forEach(t),GDe.forEach(t),BNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(Ix.$$.fragment,Jl),JSr=i(Jl),Xc=n(Jl,"P",{});var hee=s(Xc);YSr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xY=n(hee,"A",{href:!0});var zAt=s(xY);KSr=r(zAt,"from_pretrained()"),zAt.forEach(t),ZSr=r(hee," class method or the "),$Y=n(hee,"A",{href:!0});var WAt=s($Y);eRr=r(WAt,"from_config()"),WAt.forEach(t),oRr=r(hee,` class
method.`),hee.forEach(t),rRr=i(Jl),qx=n(Jl,"P",{});var ODe=s(qx);tRr=r(ODe,"This class cannot be instantiated directly using "),R6e=n(ODe,"CODE",{});var QAt=s(R6e);aRr=r(QAt,"__init__()"),QAt.forEach(t),nRr=r(ODe," (throws an error)."),ODe.forEach(t),sRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var HA=s(Wt);T(Nx.$$.fragment,HA),lRr=i(HA),P6e=n(HA,"P",{});var HAt=s(P6e);iRr=r(HAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HAt.forEach(t),dRr=i(HA),zc=n(HA,"P",{});var pee=s(zc);cRr=r(pee,`Note:
Loading a model from its configuration file does `),B6e=n(pee,"STRONG",{});var UAt=s(B6e);fRr=r(UAt,"not"),UAt.forEach(t),mRr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(pee,"A",{href:!0});var JAt=s(kY);gRr=r(JAt,"from_pretrained()"),JAt.forEach(t),hRr=r(pee," to load the model weights."),pee.forEach(t),pRr=i(HA),T(jC.$$.fragment,HA),HA.forEach(t),_Rr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(jx.$$.fragment,Yl),uRr=i(Yl),I6e=n(Yl,"P",{});var YAt=s(I6e);bRr=r(YAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YAt.forEach(t),vRr=i(Yl),vn=n(Yl,"P",{});var UA=s(vn);FRr=r(UA,"The model class to instantiate is selected based on the "),q6e=n(UA,"CODE",{});var KAt=s(q6e);TRr=r(KAt,"model_type"),KAt.forEach(t),MRr=r(UA,` property of the config object (either
passed as an argument or loaded from `),N6e=n(UA,"CODE",{});var ZAt=s(N6e);ERr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),CRr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n(UA,"CODE",{});var eyt=s(j6e);wRr=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),ARr=r(UA,":"),UA.forEach(t),yRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);DC=n(qe,"LI",{});var nIe=s(DC);D6e=n(nIe,"STRONG",{});var oyt=s(D6e);LRr=r(oyt,"albert"),oyt.forEach(t),xRr=r(nIe," \u2014 "),SY=n(nIe,"A",{href:!0});var ryt=s(SY);$Rr=r(ryt,"FlaxAlbertForSequenceClassification"),ryt.forEach(t),kRr=r(nIe," (ALBERT model)"),nIe.forEach(t),SRr=i(qe),GC=n(qe,"LI",{});var sIe=s(GC);G6e=n(sIe,"STRONG",{});var tyt=s(G6e);RRr=r(tyt,"bart"),tyt.forEach(t),PRr=r(sIe," \u2014 "),RY=n(sIe,"A",{href:!0});var ayt=s(RY);BRr=r(ayt,"FlaxBartForSequenceClassification"),ayt.forEach(t),IRr=r(sIe," (BART model)"),sIe.forEach(t),qRr=i(qe),OC=n(qe,"LI",{});var lIe=s(OC);O6e=n(lIe,"STRONG",{});var nyt=s(O6e);NRr=r(nyt,"bert"),nyt.forEach(t),jRr=r(lIe," \u2014 "),PY=n(lIe,"A",{href:!0});var syt=s(PY);DRr=r(syt,"FlaxBertForSequenceClassification"),syt.forEach(t),GRr=r(lIe," (BERT model)"),lIe.forEach(t),ORr=i(qe),VC=n(qe,"LI",{});var iIe=s(VC);V6e=n(iIe,"STRONG",{});var lyt=s(V6e);VRr=r(lyt,"big_bird"),lyt.forEach(t),XRr=r(iIe," \u2014 "),BY=n(iIe,"A",{href:!0});var iyt=s(BY);zRr=r(iyt,"FlaxBigBirdForSequenceClassification"),iyt.forEach(t),WRr=r(iIe," (BigBird model)"),iIe.forEach(t),QRr=i(qe),XC=n(qe,"LI",{});var dIe=s(XC);X6e=n(dIe,"STRONG",{});var dyt=s(X6e);HRr=r(dyt,"distilbert"),dyt.forEach(t),URr=r(dIe," \u2014 "),IY=n(dIe,"A",{href:!0});var cyt=s(IY);JRr=r(cyt,"FlaxDistilBertForSequenceClassification"),cyt.forEach(t),YRr=r(dIe," (DistilBERT model)"),dIe.forEach(t),KRr=i(qe),zC=n(qe,"LI",{});var cIe=s(zC);z6e=n(cIe,"STRONG",{});var fyt=s(z6e);ZRr=r(fyt,"electra"),fyt.forEach(t),ePr=r(cIe," \u2014 "),qY=n(cIe,"A",{href:!0});var myt=s(qY);oPr=r(myt,"FlaxElectraForSequenceClassification"),myt.forEach(t),rPr=r(cIe," (ELECTRA model)"),cIe.forEach(t),tPr=i(qe),WC=n(qe,"LI",{});var fIe=s(WC);W6e=n(fIe,"STRONG",{});var gyt=s(W6e);aPr=r(gyt,"mbart"),gyt.forEach(t),nPr=r(fIe," \u2014 "),NY=n(fIe,"A",{href:!0});var hyt=s(NY);sPr=r(hyt,"FlaxMBartForSequenceClassification"),hyt.forEach(t),lPr=r(fIe," (mBART model)"),fIe.forEach(t),iPr=i(qe),QC=n(qe,"LI",{});var mIe=s(QC);Q6e=n(mIe,"STRONG",{});var pyt=s(Q6e);dPr=r(pyt,"roberta"),pyt.forEach(t),cPr=r(mIe," \u2014 "),jY=n(mIe,"A",{href:!0});var _yt=s(jY);fPr=r(_yt,"FlaxRobertaForSequenceClassification"),_yt.forEach(t),mPr=r(mIe," (RoBERTa model)"),mIe.forEach(t),gPr=i(qe),HC=n(qe,"LI",{});var gIe=s(HC);H6e=n(gIe,"STRONG",{});var uyt=s(H6e);hPr=r(uyt,"roformer"),uyt.forEach(t),pPr=r(gIe," \u2014 "),DY=n(gIe,"A",{href:!0});var byt=s(DY);_Pr=r(byt,"FlaxRoFormerForSequenceClassification"),byt.forEach(t),uPr=r(gIe," (RoFormer model)"),gIe.forEach(t),bPr=i(qe),UC=n(qe,"LI",{});var hIe=s(UC);U6e=n(hIe,"STRONG",{});var vyt=s(U6e);vPr=r(vyt,"xlm-roberta"),vyt.forEach(t),FPr=r(hIe," \u2014 "),GY=n(hIe,"A",{href:!0});var Fyt=s(GY);TPr=r(Fyt,"FlaxXLMRobertaForSequenceClassification"),Fyt.forEach(t),MPr=r(hIe," (XLM-RoBERTa model)"),hIe.forEach(t),qe.forEach(t),EPr=i(Yl),T(JC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),INe=i(f),Wc=n(f,"H2",{class:!0});var VDe=s(Wc);YC=n(VDe,"A",{id:!0,class:!0,href:!0});var Tyt=s(YC);J6e=n(Tyt,"SPAN",{});var Myt=s(J6e);T(Dx.$$.fragment,Myt),Myt.forEach(t),Tyt.forEach(t),CPr=i(VDe),Y6e=n(VDe,"SPAN",{});var Eyt=s(Y6e);wPr=r(Eyt,"FlaxAutoModelForQuestionAnswering"),Eyt.forEach(t),VDe.forEach(t),qNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(Gx.$$.fragment,Kl),APr=i(Kl),Qc=n(Kl,"P",{});var _ee=s(Qc);yPr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OY=n(_ee,"A",{href:!0});var Cyt=s(OY);LPr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),xPr=r(_ee," class method or the "),VY=n(_ee,"A",{href:!0});var wyt=s(VY);$Pr=r(wyt,"from_config()"),wyt.forEach(t),kPr=r(_ee,` class
method.`),_ee.forEach(t),SPr=i(Kl),Ox=n(Kl,"P",{});var XDe=s(Ox);RPr=r(XDe,"This class cannot be instantiated directly using "),K6e=n(XDe,"CODE",{});var Ayt=s(K6e);PPr=r(Ayt,"__init__()"),Ayt.forEach(t),BPr=r(XDe," (throws an error)."),XDe.forEach(t),IPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var JA=s(Qt);T(Vx.$$.fragment,JA),qPr=i(JA),Z6e=n(JA,"P",{});var yyt=s(Z6e);NPr=r(yyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yyt.forEach(t),jPr=i(JA),Hc=n(JA,"P",{});var uee=s(Hc);DPr=r(uee,`Note:
Loading a model from its configuration file does `),eTe=n(uee,"STRONG",{});var Lyt=s(eTe);GPr=r(Lyt,"not"),Lyt.forEach(t),OPr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(uee,"A",{href:!0});var xyt=s(XY);VPr=r(xyt,"from_pretrained()"),xyt.forEach(t),XPr=r(uee," to load the model weights."),uee.forEach(t),zPr=i(JA),T(KC.$$.fragment,JA),JA.forEach(t),WPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Xx.$$.fragment,Zl),QPr=i(Zl),oTe=n(Zl,"P",{});var $yt=s(oTe);HPr=r($yt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$yt.forEach(t),UPr=i(Zl),Fn=n(Zl,"P",{});var YA=s(Fn);JPr=r(YA,"The model class to instantiate is selected based on the "),rTe=n(YA,"CODE",{});var kyt=s(rTe);YPr=r(kyt,"model_type"),kyt.forEach(t),KPr=r(YA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(YA,"CODE",{});var Syt=s(tTe);ZPr=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),eBr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(YA,"CODE",{});var Ryt=s(aTe);oBr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),rBr=r(YA,":"),YA.forEach(t),tBr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);ZC=n(Ne,"LI",{});var pIe=s(ZC);nTe=n(pIe,"STRONG",{});var Pyt=s(nTe);aBr=r(Pyt,"albert"),Pyt.forEach(t),nBr=r(pIe," \u2014 "),zY=n(pIe,"A",{href:!0});var Byt=s(zY);sBr=r(Byt,"FlaxAlbertForQuestionAnswering"),Byt.forEach(t),lBr=r(pIe," (ALBERT model)"),pIe.forEach(t),iBr=i(Ne),ew=n(Ne,"LI",{});var _Ie=s(ew);sTe=n(_Ie,"STRONG",{});var Iyt=s(sTe);dBr=r(Iyt,"bart"),Iyt.forEach(t),cBr=r(_Ie," \u2014 "),WY=n(_Ie,"A",{href:!0});var qyt=s(WY);fBr=r(qyt,"FlaxBartForQuestionAnswering"),qyt.forEach(t),mBr=r(_Ie," (BART model)"),_Ie.forEach(t),gBr=i(Ne),ow=n(Ne,"LI",{});var uIe=s(ow);lTe=n(uIe,"STRONG",{});var Nyt=s(lTe);hBr=r(Nyt,"bert"),Nyt.forEach(t),pBr=r(uIe," \u2014 "),QY=n(uIe,"A",{href:!0});var jyt=s(QY);_Br=r(jyt,"FlaxBertForQuestionAnswering"),jyt.forEach(t),uBr=r(uIe," (BERT model)"),uIe.forEach(t),bBr=i(Ne),rw=n(Ne,"LI",{});var bIe=s(rw);iTe=n(bIe,"STRONG",{});var Dyt=s(iTe);vBr=r(Dyt,"big_bird"),Dyt.forEach(t),FBr=r(bIe," \u2014 "),HY=n(bIe,"A",{href:!0});var Gyt=s(HY);TBr=r(Gyt,"FlaxBigBirdForQuestionAnswering"),Gyt.forEach(t),MBr=r(bIe," (BigBird model)"),bIe.forEach(t),EBr=i(Ne),tw=n(Ne,"LI",{});var vIe=s(tw);dTe=n(vIe,"STRONG",{});var Oyt=s(dTe);CBr=r(Oyt,"distilbert"),Oyt.forEach(t),wBr=r(vIe," \u2014 "),UY=n(vIe,"A",{href:!0});var Vyt=s(UY);ABr=r(Vyt,"FlaxDistilBertForQuestionAnswering"),Vyt.forEach(t),yBr=r(vIe," (DistilBERT model)"),vIe.forEach(t),LBr=i(Ne),aw=n(Ne,"LI",{});var FIe=s(aw);cTe=n(FIe,"STRONG",{});var Xyt=s(cTe);xBr=r(Xyt,"electra"),Xyt.forEach(t),$Br=r(FIe," \u2014 "),JY=n(FIe,"A",{href:!0});var zyt=s(JY);kBr=r(zyt,"FlaxElectraForQuestionAnswering"),zyt.forEach(t),SBr=r(FIe," (ELECTRA model)"),FIe.forEach(t),RBr=i(Ne),nw=n(Ne,"LI",{});var TIe=s(nw);fTe=n(TIe,"STRONG",{});var Wyt=s(fTe);PBr=r(Wyt,"mbart"),Wyt.forEach(t),BBr=r(TIe," \u2014 "),YY=n(TIe,"A",{href:!0});var Qyt=s(YY);IBr=r(Qyt,"FlaxMBartForQuestionAnswering"),Qyt.forEach(t),qBr=r(TIe," (mBART model)"),TIe.forEach(t),NBr=i(Ne),sw=n(Ne,"LI",{});var MIe=s(sw);mTe=n(MIe,"STRONG",{});var Hyt=s(mTe);jBr=r(Hyt,"roberta"),Hyt.forEach(t),DBr=r(MIe," \u2014 "),KY=n(MIe,"A",{href:!0});var Uyt=s(KY);GBr=r(Uyt,"FlaxRobertaForQuestionAnswering"),Uyt.forEach(t),OBr=r(MIe," (RoBERTa model)"),MIe.forEach(t),VBr=i(Ne),lw=n(Ne,"LI",{});var EIe=s(lw);gTe=n(EIe,"STRONG",{});var Jyt=s(gTe);XBr=r(Jyt,"roformer"),Jyt.forEach(t),zBr=r(EIe," \u2014 "),ZY=n(EIe,"A",{href:!0});var Yyt=s(ZY);WBr=r(Yyt,"FlaxRoFormerForQuestionAnswering"),Yyt.forEach(t),QBr=r(EIe," (RoFormer model)"),EIe.forEach(t),HBr=i(Ne),iw=n(Ne,"LI",{});var CIe=s(iw);hTe=n(CIe,"STRONG",{});var Kyt=s(hTe);UBr=r(Kyt,"xlm-roberta"),Kyt.forEach(t),JBr=r(CIe," \u2014 "),eK=n(CIe,"A",{href:!0});var Zyt=s(eK);YBr=r(Zyt,"FlaxXLMRobertaForQuestionAnswering"),Zyt.forEach(t),KBr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Ne.forEach(t),ZBr=i(Zl),T(dw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),NNe=i(f),Uc=n(f,"H2",{class:!0});var zDe=s(Uc);cw=n(zDe,"A",{id:!0,class:!0,href:!0});var eLt=s(cw);pTe=n(eLt,"SPAN",{});var oLt=s(pTe);T(zx.$$.fragment,oLt),oLt.forEach(t),eLt.forEach(t),eIr=i(zDe),_Te=n(zDe,"SPAN",{});var rLt=s(_Te);oIr=r(rLt,"FlaxAutoModelForTokenClassification"),rLt.forEach(t),zDe.forEach(t),jNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Wx.$$.fragment,ei),rIr=i(ei),Jc=n(ei,"P",{});var bee=s(Jc);tIr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oK=n(bee,"A",{href:!0});var tLt=s(oK);aIr=r(tLt,"from_pretrained()"),tLt.forEach(t),nIr=r(bee," class method or the "),rK=n(bee,"A",{href:!0});var aLt=s(rK);sIr=r(aLt,"from_config()"),aLt.forEach(t),lIr=r(bee,` class
method.`),bee.forEach(t),iIr=i(ei),Qx=n(ei,"P",{});var WDe=s(Qx);dIr=r(WDe,"This class cannot be instantiated directly using "),uTe=n(WDe,"CODE",{});var nLt=s(uTe);cIr=r(nLt,"__init__()"),nLt.forEach(t),fIr=r(WDe," (throws an error)."),WDe.forEach(t),mIr=i(ei),Ht=n(ei,"DIV",{class:!0});var KA=s(Ht);T(Hx.$$.fragment,KA),gIr=i(KA),bTe=n(KA,"P",{});var sLt=s(bTe);hIr=r(sLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sLt.forEach(t),pIr=i(KA),Yc=n(KA,"P",{});var vee=s(Yc);_Ir=r(vee,`Note:
Loading a model from its configuration file does `),vTe=n(vee,"STRONG",{});var lLt=s(vTe);uIr=r(lLt,"not"),lLt.forEach(t),bIr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(vee,"A",{href:!0});var iLt=s(tK);vIr=r(iLt,"from_pretrained()"),iLt.forEach(t),FIr=r(vee," to load the model weights."),vee.forEach(t),TIr=i(KA),T(fw.$$.fragment,KA),KA.forEach(t),MIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Ux.$$.fragment,oi),EIr=i(oi),FTe=n(oi,"P",{});var dLt=s(FTe);CIr=r(dLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dLt.forEach(t),wIr=i(oi),Tn=n(oi,"P",{});var ZA=s(Tn);AIr=r(ZA,"The model class to instantiate is selected based on the "),TTe=n(ZA,"CODE",{});var cLt=s(TTe);yIr=r(cLt,"model_type"),cLt.forEach(t),LIr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(ZA,"CODE",{});var fLt=s(MTe);xIr=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),$Ir=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(ZA,"CODE",{});var mLt=s(ETe);kIr=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),SIr=r(ZA,":"),ZA.forEach(t),RIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);mw=n(Fo,"LI",{});var wIe=s(mw);CTe=n(wIe,"STRONG",{});var gLt=s(CTe);PIr=r(gLt,"albert"),gLt.forEach(t),BIr=r(wIe," \u2014 "),aK=n(wIe,"A",{href:!0});var hLt=s(aK);IIr=r(hLt,"FlaxAlbertForTokenClassification"),hLt.forEach(t),qIr=r(wIe," (ALBERT model)"),wIe.forEach(t),NIr=i(Fo),gw=n(Fo,"LI",{});var AIe=s(gw);wTe=n(AIe,"STRONG",{});var pLt=s(wTe);jIr=r(pLt,"bert"),pLt.forEach(t),DIr=r(AIe," \u2014 "),nK=n(AIe,"A",{href:!0});var _Lt=s(nK);GIr=r(_Lt,"FlaxBertForTokenClassification"),_Lt.forEach(t),OIr=r(AIe," (BERT model)"),AIe.forEach(t),VIr=i(Fo),hw=n(Fo,"LI",{});var yIe=s(hw);ATe=n(yIe,"STRONG",{});var uLt=s(ATe);XIr=r(uLt,"big_bird"),uLt.forEach(t),zIr=r(yIe," \u2014 "),sK=n(yIe,"A",{href:!0});var bLt=s(sK);WIr=r(bLt,"FlaxBigBirdForTokenClassification"),bLt.forEach(t),QIr=r(yIe," (BigBird model)"),yIe.forEach(t),HIr=i(Fo),pw=n(Fo,"LI",{});var LIe=s(pw);yTe=n(LIe,"STRONG",{});var vLt=s(yTe);UIr=r(vLt,"distilbert"),vLt.forEach(t),JIr=r(LIe," \u2014 "),lK=n(LIe,"A",{href:!0});var FLt=s(lK);YIr=r(FLt,"FlaxDistilBertForTokenClassification"),FLt.forEach(t),KIr=r(LIe," (DistilBERT model)"),LIe.forEach(t),ZIr=i(Fo),_w=n(Fo,"LI",{});var xIe=s(_w);LTe=n(xIe,"STRONG",{});var TLt=s(LTe);eqr=r(TLt,"electra"),TLt.forEach(t),oqr=r(xIe," \u2014 "),iK=n(xIe,"A",{href:!0});var MLt=s(iK);rqr=r(MLt,"FlaxElectraForTokenClassification"),MLt.forEach(t),tqr=r(xIe," (ELECTRA model)"),xIe.forEach(t),aqr=i(Fo),uw=n(Fo,"LI",{});var $Ie=s(uw);xTe=n($Ie,"STRONG",{});var ELt=s(xTe);nqr=r(ELt,"roberta"),ELt.forEach(t),sqr=r($Ie," \u2014 "),dK=n($Ie,"A",{href:!0});var CLt=s(dK);lqr=r(CLt,"FlaxRobertaForTokenClassification"),CLt.forEach(t),iqr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),dqr=i(Fo),bw=n(Fo,"LI",{});var kIe=s(bw);$Te=n(kIe,"STRONG",{});var wLt=s($Te);cqr=r(wLt,"roformer"),wLt.forEach(t),fqr=r(kIe," \u2014 "),cK=n(kIe,"A",{href:!0});var ALt=s(cK);mqr=r(ALt,"FlaxRoFormerForTokenClassification"),ALt.forEach(t),gqr=r(kIe," (RoFormer model)"),kIe.forEach(t),hqr=i(Fo),vw=n(Fo,"LI",{});var SIe=s(vw);kTe=n(SIe,"STRONG",{});var yLt=s(kTe);pqr=r(yLt,"xlm-roberta"),yLt.forEach(t),_qr=r(SIe," \u2014 "),fK=n(SIe,"A",{href:!0});var LLt=s(fK);uqr=r(LLt,"FlaxXLMRobertaForTokenClassification"),LLt.forEach(t),bqr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),Fo.forEach(t),vqr=i(oi),T(Fw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),DNe=i(f),Kc=n(f,"H2",{class:!0});var QDe=s(Kc);Tw=n(QDe,"A",{id:!0,class:!0,href:!0});var xLt=s(Tw);STe=n(xLt,"SPAN",{});var $Lt=s(STe);T(Jx.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),Fqr=i(QDe),RTe=n(QDe,"SPAN",{});var kLt=s(RTe);Tqr=r(kLt,"FlaxAutoModelForMultipleChoice"),kLt.forEach(t),QDe.forEach(t),GNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Yx.$$.fragment,ri),Mqr=i(ri),Zc=n(ri,"P",{});var Fee=s(Zc);Eqr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=n(Fee,"A",{href:!0});var SLt=s(mK);Cqr=r(SLt,"from_pretrained()"),SLt.forEach(t),wqr=r(Fee," class method or the "),gK=n(Fee,"A",{href:!0});var RLt=s(gK);Aqr=r(RLt,"from_config()"),RLt.forEach(t),yqr=r(Fee,` class
method.`),Fee.forEach(t),Lqr=i(ri),Kx=n(ri,"P",{});var HDe=s(Kx);xqr=r(HDe,"This class cannot be instantiated directly using "),PTe=n(HDe,"CODE",{});var PLt=s(PTe);$qr=r(PLt,"__init__()"),PLt.forEach(t),kqr=r(HDe," (throws an error)."),HDe.forEach(t),Sqr=i(ri),Ut=n(ri,"DIV",{class:!0});var ey=s(Ut);T(Zx.$$.fragment,ey),Rqr=i(ey),BTe=n(ey,"P",{});var BLt=s(BTe);Pqr=r(BLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BLt.forEach(t),Bqr=i(ey),ef=n(ey,"P",{});var Tee=s(ef);Iqr=r(Tee,`Note:
Loading a model from its configuration file does `),ITe=n(Tee,"STRONG",{});var ILt=s(ITe);qqr=r(ILt,"not"),ILt.forEach(t),Nqr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Tee,"A",{href:!0});var qLt=s(hK);jqr=r(qLt,"from_pretrained()"),qLt.forEach(t),Dqr=r(Tee," to load the model weights."),Tee.forEach(t),Gqr=i(ey),T(Mw.$$.fragment,ey),ey.forEach(t),Oqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(e9.$$.fragment,ti),Vqr=i(ti),qTe=n(ti,"P",{});var NLt=s(qTe);Xqr=r(NLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NLt.forEach(t),zqr=i(ti),Mn=n(ti,"P",{});var oy=s(Mn);Wqr=r(oy,"The model class to instantiate is selected based on the "),NTe=n(oy,"CODE",{});var jLt=s(NTe);Qqr=r(jLt,"model_type"),jLt.forEach(t),Hqr=r(oy,` property of the config object (either
passed as an argument or loaded from `),jTe=n(oy,"CODE",{});var DLt=s(jTe);Uqr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),Jqr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(oy,"CODE",{});var GLt=s(DTe);Yqr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),Kqr=r(oy,":"),oy.forEach(t),Zqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);Ew=n(To,"LI",{});var RIe=s(Ew);GTe=n(RIe,"STRONG",{});var OLt=s(GTe);eNr=r(OLt,"albert"),OLt.forEach(t),oNr=r(RIe," \u2014 "),pK=n(RIe,"A",{href:!0});var VLt=s(pK);rNr=r(VLt,"FlaxAlbertForMultipleChoice"),VLt.forEach(t),tNr=r(RIe," (ALBERT model)"),RIe.forEach(t),aNr=i(To),Cw=n(To,"LI",{});var PIe=s(Cw);OTe=n(PIe,"STRONG",{});var XLt=s(OTe);nNr=r(XLt,"bert"),XLt.forEach(t),sNr=r(PIe," \u2014 "),_K=n(PIe,"A",{href:!0});var zLt=s(_K);lNr=r(zLt,"FlaxBertForMultipleChoice"),zLt.forEach(t),iNr=r(PIe," (BERT model)"),PIe.forEach(t),dNr=i(To),ww=n(To,"LI",{});var BIe=s(ww);VTe=n(BIe,"STRONG",{});var WLt=s(VTe);cNr=r(WLt,"big_bird"),WLt.forEach(t),fNr=r(BIe," \u2014 "),uK=n(BIe,"A",{href:!0});var QLt=s(uK);mNr=r(QLt,"FlaxBigBirdForMultipleChoice"),QLt.forEach(t),gNr=r(BIe," (BigBird model)"),BIe.forEach(t),hNr=i(To),Aw=n(To,"LI",{});var IIe=s(Aw);XTe=n(IIe,"STRONG",{});var HLt=s(XTe);pNr=r(HLt,"distilbert"),HLt.forEach(t),_Nr=r(IIe," \u2014 "),bK=n(IIe,"A",{href:!0});var ULt=s(bK);uNr=r(ULt,"FlaxDistilBertForMultipleChoice"),ULt.forEach(t),bNr=r(IIe," (DistilBERT model)"),IIe.forEach(t),vNr=i(To),yw=n(To,"LI",{});var qIe=s(yw);zTe=n(qIe,"STRONG",{});var JLt=s(zTe);FNr=r(JLt,"electra"),JLt.forEach(t),TNr=r(qIe," \u2014 "),vK=n(qIe,"A",{href:!0});var YLt=s(vK);MNr=r(YLt,"FlaxElectraForMultipleChoice"),YLt.forEach(t),ENr=r(qIe," (ELECTRA model)"),qIe.forEach(t),CNr=i(To),Lw=n(To,"LI",{});var NIe=s(Lw);WTe=n(NIe,"STRONG",{});var KLt=s(WTe);wNr=r(KLt,"roberta"),KLt.forEach(t),ANr=r(NIe," \u2014 "),FK=n(NIe,"A",{href:!0});var ZLt=s(FK);yNr=r(ZLt,"FlaxRobertaForMultipleChoice"),ZLt.forEach(t),LNr=r(NIe," (RoBERTa model)"),NIe.forEach(t),xNr=i(To),xw=n(To,"LI",{});var jIe=s(xw);QTe=n(jIe,"STRONG",{});var e8t=s(QTe);$Nr=r(e8t,"roformer"),e8t.forEach(t),kNr=r(jIe," \u2014 "),TK=n(jIe,"A",{href:!0});var o8t=s(TK);SNr=r(o8t,"FlaxRoFormerForMultipleChoice"),o8t.forEach(t),RNr=r(jIe," (RoFormer model)"),jIe.forEach(t),PNr=i(To),$w=n(To,"LI",{});var DIe=s($w);HTe=n(DIe,"STRONG",{});var r8t=s(HTe);BNr=r(r8t,"xlm-roberta"),r8t.forEach(t),INr=r(DIe," \u2014 "),MK=n(DIe,"A",{href:!0});var t8t=s(MK);qNr=r(t8t,"FlaxXLMRobertaForMultipleChoice"),t8t.forEach(t),NNr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),To.forEach(t),jNr=i(ti),T(kw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ONe=i(f),of=n(f,"H2",{class:!0});var UDe=s(of);Sw=n(UDe,"A",{id:!0,class:!0,href:!0});var a8t=s(Sw);UTe=n(a8t,"SPAN",{});var n8t=s(UTe);T(o9.$$.fragment,n8t),n8t.forEach(t),a8t.forEach(t),DNr=i(UDe),JTe=n(UDe,"SPAN",{});var s8t=s(JTe);GNr=r(s8t,"FlaxAutoModelForNextSentencePrediction"),s8t.forEach(t),UDe.forEach(t),VNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(r9.$$.fragment,ai),ONr=i(ai),rf=n(ai,"P",{});var Mee=s(rf);VNr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EK=n(Mee,"A",{href:!0});var l8t=s(EK);XNr=r(l8t,"from_pretrained()"),l8t.forEach(t),zNr=r(Mee," class method or the "),CK=n(Mee,"A",{href:!0});var i8t=s(CK);WNr=r(i8t,"from_config()"),i8t.forEach(t),QNr=r(Mee,` class
method.`),Mee.forEach(t),HNr=i(ai),t9=n(ai,"P",{});var JDe=s(t9);UNr=r(JDe,"This class cannot be instantiated directly using "),YTe=n(JDe,"CODE",{});var d8t=s(YTe);JNr=r(d8t,"__init__()"),d8t.forEach(t),YNr=r(JDe," (throws an error)."),JDe.forEach(t),KNr=i(ai),Jt=n(ai,"DIV",{class:!0});var ry=s(Jt);T(a9.$$.fragment,ry),ZNr=i(ry),KTe=n(ry,"P",{});var c8t=s(KTe);ejr=r(c8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c8t.forEach(t),ojr=i(ry),tf=n(ry,"P",{});var Eee=s(tf);rjr=r(Eee,`Note:
Loading a model from its configuration file does `),ZTe=n(Eee,"STRONG",{});var f8t=s(ZTe);tjr=r(f8t,"not"),f8t.forEach(t),ajr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Eee,"A",{href:!0});var m8t=s(wK);njr=r(m8t,"from_pretrained()"),m8t.forEach(t),sjr=r(Eee," to load the model weights."),Eee.forEach(t),ljr=i(ry),T(Rw.$$.fragment,ry),ry.forEach(t),ijr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(n9.$$.fragment,ni),djr=i(ni),eMe=n(ni,"P",{});var g8t=s(eMe);cjr=r(g8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g8t.forEach(t),fjr=i(ni),En=n(ni,"P",{});var ty=s(En);mjr=r(ty,"The model class to instantiate is selected based on the "),oMe=n(ty,"CODE",{});var h8t=s(oMe);gjr=r(h8t,"model_type"),h8t.forEach(t),hjr=r(ty,` property of the config object (either
passed as an argument or loaded from `),rMe=n(ty,"CODE",{});var p8t=s(rMe);pjr=r(p8t,"pretrained_model_name_or_path"),p8t.forEach(t),_jr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(ty,"CODE",{});var _8t=s(tMe);ujr=r(_8t,"pretrained_model_name_or_path"),_8t.forEach(t),bjr=r(ty,":"),ty.forEach(t),vjr=i(ni),aMe=n(ni,"UL",{});var u8t=s(aMe);Pw=n(u8t,"LI",{});var GIe=s(Pw);nMe=n(GIe,"STRONG",{});var b8t=s(nMe);Fjr=r(b8t,"bert"),b8t.forEach(t),Tjr=r(GIe," \u2014 "),AK=n(GIe,"A",{href:!0});var v8t=s(AK);Mjr=r(v8t,"FlaxBertForNextSentencePrediction"),v8t.forEach(t),Ejr=r(GIe," (BERT model)"),GIe.forEach(t),u8t.forEach(t),Cjr=i(ni),T(Bw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),XNe=i(f),af=n(f,"H2",{class:!0});var YDe=s(af);Iw=n(YDe,"A",{id:!0,class:!0,href:!0});var F8t=s(Iw);sMe=n(F8t,"SPAN",{});var T8t=s(sMe);T(s9.$$.fragment,T8t),T8t.forEach(t),F8t.forEach(t),wjr=i(YDe),lMe=n(YDe,"SPAN",{});var M8t=s(lMe);Ajr=r(M8t,"FlaxAutoModelForImageClassification"),M8t.forEach(t),YDe.forEach(t),zNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(l9.$$.fragment,si),yjr=i(si),nf=n(si,"P",{});var Cee=s(nf);Ljr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yK=n(Cee,"A",{href:!0});var E8t=s(yK);xjr=r(E8t,"from_pretrained()"),E8t.forEach(t),$jr=r(Cee," class method or the "),LK=n(Cee,"A",{href:!0});var C8t=s(LK);kjr=r(C8t,"from_config()"),C8t.forEach(t),Sjr=r(Cee,` class
method.`),Cee.forEach(t),Rjr=i(si),i9=n(si,"P",{});var KDe=s(i9);Pjr=r(KDe,"This class cannot be instantiated directly using "),iMe=n(KDe,"CODE",{});var w8t=s(iMe);Bjr=r(w8t,"__init__()"),w8t.forEach(t),Ijr=r(KDe," (throws an error)."),KDe.forEach(t),qjr=i(si),Yt=n(si,"DIV",{class:!0});var ay=s(Yt);T(d9.$$.fragment,ay),Njr=i(ay),dMe=n(ay,"P",{});var A8t=s(dMe);jjr=r(A8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),A8t.forEach(t),Djr=i(ay),sf=n(ay,"P",{});var wee=s(sf);Gjr=r(wee,`Note:
Loading a model from its configuration file does `),cMe=n(wee,"STRONG",{});var y8t=s(cMe);Ojr=r(y8t,"not"),y8t.forEach(t),Vjr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(wee,"A",{href:!0});var L8t=s(xK);Xjr=r(L8t,"from_pretrained()"),L8t.forEach(t),zjr=r(wee," to load the model weights."),wee.forEach(t),Wjr=i(ay),T(qw.$$.fragment,ay),ay.forEach(t),Qjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(c9.$$.fragment,li),Hjr=i(li),fMe=n(li,"P",{});var x8t=s(fMe);Ujr=r(x8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),x8t.forEach(t),Jjr=i(li),Cn=n(li,"P",{});var ny=s(Cn);Yjr=r(ny,"The model class to instantiate is selected based on the "),mMe=n(ny,"CODE",{});var $8t=s(mMe);Kjr=r($8t,"model_type"),$8t.forEach(t),Zjr=r(ny,` property of the config object (either
passed as an argument or loaded from `),gMe=n(ny,"CODE",{});var k8t=s(gMe);eDr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),oDr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(ny,"CODE",{});var S8t=s(hMe);rDr=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),tDr=r(ny,":"),ny.forEach(t),aDr=i(li),f9=n(li,"UL",{});var ZDe=s(f9);Nw=n(ZDe,"LI",{});var OIe=s(Nw);pMe=n(OIe,"STRONG",{});var R8t=s(pMe);nDr=r(R8t,"beit"),R8t.forEach(t),sDr=r(OIe," \u2014 "),$K=n(OIe,"A",{href:!0});var P8t=s($K);lDr=r(P8t,"FlaxBeitForImageClassification"),P8t.forEach(t),iDr=r(OIe," (BEiT model)"),OIe.forEach(t),dDr=i(ZDe),jw=n(ZDe,"LI",{});var VIe=s(jw);_Me=n(VIe,"STRONG",{});var B8t=s(_Me);cDr=r(B8t,"vit"),B8t.forEach(t),fDr=r(VIe," \u2014 "),kK=n(VIe,"A",{href:!0});var I8t=s(kK);mDr=r(I8t,"FlaxViTForImageClassification"),I8t.forEach(t),gDr=r(VIe," (ViT model)"),VIe.forEach(t),ZDe.forEach(t),hDr=i(li),T(Dw.$$.fragment,li),li.forEach(t),si.forEach(t),WNe=i(f),lf=n(f,"H2",{class:!0});var eGe=s(lf);Gw=n(eGe,"A",{id:!0,class:!0,href:!0});var q8t=s(Gw);uMe=n(q8t,"SPAN",{});var N8t=s(uMe);T(m9.$$.fragment,N8t),N8t.forEach(t),q8t.forEach(t),pDr=i(eGe),bMe=n(eGe,"SPAN",{});var j8t=s(bMe);_Dr=r(j8t,"FlaxAutoModelForVision2Seq"),j8t.forEach(t),eGe.forEach(t),QNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(g9.$$.fragment,ii),uDr=i(ii),df=n(ii,"P",{});var Aee=s(df);bDr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=n(Aee,"A",{href:!0});var D8t=s(SK);vDr=r(D8t,"from_pretrained()"),D8t.forEach(t),FDr=r(Aee," class method or the "),RK=n(Aee,"A",{href:!0});var G8t=s(RK);TDr=r(G8t,"from_config()"),G8t.forEach(t),MDr=r(Aee,` class
method.`),Aee.forEach(t),EDr=i(ii),h9=n(ii,"P",{});var oGe=s(h9);CDr=r(oGe,"This class cannot be instantiated directly using "),vMe=n(oGe,"CODE",{});var O8t=s(vMe);wDr=r(O8t,"__init__()"),O8t.forEach(t),ADr=r(oGe," (throws an error)."),oGe.forEach(t),yDr=i(ii),Kt=n(ii,"DIV",{class:!0});var sy=s(Kt);T(p9.$$.fragment,sy),LDr=i(sy),FMe=n(sy,"P",{});var V8t=s(FMe);xDr=r(V8t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V8t.forEach(t),$Dr=i(sy),cf=n(sy,"P",{});var yee=s(cf);kDr=r(yee,`Note:
Loading a model from its configuration file does `),TMe=n(yee,"STRONG",{});var X8t=s(TMe);SDr=r(X8t,"not"),X8t.forEach(t),RDr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PK=n(yee,"A",{href:!0});var z8t=s(PK);PDr=r(z8t,"from_pretrained()"),z8t.forEach(t),BDr=r(yee," to load the model weights."),yee.forEach(t),IDr=i(sy),T(Ow.$$.fragment,sy),sy.forEach(t),qDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(_9.$$.fragment,di),NDr=i(di),MMe=n(di,"P",{});var W8t=s(MMe);jDr=r(W8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W8t.forEach(t),DDr=i(di),wn=n(di,"P",{});var ly=s(wn);GDr=r(ly,"The model class to instantiate is selected based on the "),EMe=n(ly,"CODE",{});var Q8t=s(EMe);ODr=r(Q8t,"model_type"),Q8t.forEach(t),VDr=r(ly,` property of the config object (either
passed as an argument or loaded from `),CMe=n(ly,"CODE",{});var H8t=s(CMe);XDr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),zDr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(ly,"CODE",{});var U8t=s(wMe);WDr=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),QDr=r(ly,":"),ly.forEach(t),HDr=i(di),AMe=n(di,"UL",{});var J8t=s(AMe);Vw=n(J8t,"LI",{});var XIe=s(Vw);yMe=n(XIe,"STRONG",{});var Y8t=s(yMe);UDr=r(Y8t,"vision-encoder-decoder"),Y8t.forEach(t),JDr=r(XIe," \u2014 "),BK=n(XIe,"A",{href:!0});var K8t=s(BK);YDr=r(K8t,"FlaxVisionEncoderDecoderModel"),K8t.forEach(t),KDr=r(XIe," (Vision Encoder decoder model)"),XIe.forEach(t),J8t.forEach(t),ZDr=i(di),T(Xw.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(r9t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(B$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(I$,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(q$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(N$,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(j$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(D$,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(G$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(O$,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(V$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(X$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(z$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(W$,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(Q$,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(H$,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(U$,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(J$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(Y$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(K$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Z$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ek,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(ok,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(rk,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(tk,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(ak,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(nk,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(sk,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(lk,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(ik,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(dk,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ck,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(fk,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(mk,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(gk,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(hk,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(pk,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(_k,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(uk,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(bk,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(vk,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(Fk,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(Tk,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Mk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ek,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ck,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(wk,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(Ak,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(yk,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(Lk,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(xk,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c($k,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(kk,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(Sk,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Rk,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Pk,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(Bk,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(Ik,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(qk,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Nk,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(jk,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(Dk,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Gk,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(Ok,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Vk,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Xk,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(zk,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(Wk,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(Qk,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(Hk,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(Uk,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(Jk,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(Yk,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(Kk,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(Zk,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(eS,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(oS,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(rS,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(tS,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(aS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(nS,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(sS,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(lS,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(iS,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(dS,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(cS,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(fS,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(mS,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(gS,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(hS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"id","transformers.AutoFeatureExtractor"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoProcessor"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"id","transformers.AutoModel"),c(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForPreTraining"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForCausalLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForMaskedLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ib,"id","transformers.AutoModelForSeq2SeqLM"),c(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ib,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForSequenceClassification"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForMultipleChoice"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForNextSentencePrediction"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.AutoModelForTokenClassification"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.AutoModelForQuestionAnswering"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.AutoModelForTableQuestionAnswering"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.AutoModelForImageClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForVision2Seq"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForAudioClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForAudioFrameClassification"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForCTC"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForAudioXVector"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.AutoModelForMaskedImageModeling"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForObjectDetection"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.AutoModelForImageSegmentation"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E3,"id","transformers.AutoModelForSemanticSegmentation"),c(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.AutoModelForInstanceSegmentation"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.TFAutoModel"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.TFAutoModelForPreTraining"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.TFAutoModelForCausalLM"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.TFAutoModelForImageClassification"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.TFAutoModelForMaskedLM"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.TFAutoModelForSeq2SeqLM"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.TFAutoModelForSequenceClassification"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModelForMultipleChoice"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForTokenClassification"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.TFAutoModelForQuestionAnswering"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.TFAutoModelForVision2Seq"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.FlaxAutoModel"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DE,"id","transformers.FlaxAutoModelForCausalLM"),c(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.FlaxAutoModelForPreTraining"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForMaskedLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForTokenClassification"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(cK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(fK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(mK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(_K,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(bK,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(FK,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(TK,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(MK,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(EK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForImageClassification"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(yK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(kK,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(SK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BK,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,iy),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,dy),e(We,Ln),e(We,xn),e(xn,cy),e(We,hi),e(We,$n),e($n,fy),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,x$),e(Ae,_i),e(_i,$$),e(Ae,k$),b(f,Eo,u),b(f,wa,u),e(wa,S$),e(wa,uf),e(uf,R$),e(wa,rGe),b(f,zIe,u),b(f,ui,u),e(ui,bf),e(bf,Lee),M(my,Lee,null),e(ui,tGe),e(ui,xee),e(xee,aGe),b(f,WIe,u),b(f,kn,u),e(kn,nGe),e(kn,$ee),e($ee,sGe),e(kn,lGe),e(kn,kee),e(kee,iGe),e(kn,dGe),b(f,QIe,u),M(gy,f,u),b(f,HIe,u),b(f,P$,u),e(P$,cGe),b(f,UIe,u),M(vf,f,u),b(f,JIe,u),b(f,bi,u),e(bi,Ff),e(Ff,See),M(hy,See,null),e(bi,fGe),e(bi,Ree),e(Ree,mGe),b(f,YIe,u),b(f,Co,u),M(py,Co,null),e(Co,gGe),e(Co,_y),e(_y,hGe),e(_y,B$),e(B$,pGe),e(_y,_Ge),e(Co,uGe),e(Co,uy),e(uy,bGe),e(uy,Pee),e(Pee,vGe),e(uy,FGe),e(Co,TGe),e(Co,Er),M(by,Er,null),e(Er,MGe),e(Er,Bee),e(Bee,EGe),e(Er,CGe),e(Er,vi),e(vi,wGe),e(vi,Iee),e(Iee,AGe),e(vi,yGe),e(vi,qee),e(qee,LGe),e(vi,xGe),e(Er,$Ge),e(Er,A),e(A,Tf),e(Tf,Nee),e(Nee,kGe),e(Tf,SGe),e(Tf,I$),e(I$,RGe),e(Tf,PGe),e(A,BGe),e(A,Mf),e(Mf,jee),e(jee,IGe),e(Mf,qGe),e(Mf,q$),e(q$,NGe),e(Mf,jGe),e(A,DGe),e(A,Ef),e(Ef,Dee),e(Dee,GGe),e(Ef,OGe),e(Ef,N$),e(N$,VGe),e(Ef,XGe),e(A,zGe),e(A,Cf),e(Cf,Gee),e(Gee,WGe),e(Cf,QGe),e(Cf,j$),e(j$,HGe),e(Cf,UGe),e(A,JGe),e(A,wf),e(wf,Oee),e(Oee,YGe),e(wf,KGe),e(wf,D$),e(D$,ZGe),e(wf,eOe),e(A,oOe),e(A,Af),e(Af,Vee),e(Vee,rOe),e(Af,tOe),e(Af,G$),e(G$,aOe),e(Af,nOe),e(A,sOe),e(A,yf),e(yf,Xee),e(Xee,lOe),e(yf,iOe),e(yf,O$),e(O$,dOe),e(yf,cOe),e(A,fOe),e(A,Lf),e(Lf,zee),e(zee,mOe),e(Lf,gOe),e(Lf,V$),e(V$,hOe),e(Lf,pOe),e(A,_Oe),e(A,xf),e(xf,Wee),e(Wee,uOe),e(xf,bOe),e(xf,X$),e(X$,vOe),e(xf,FOe),e(A,TOe),e(A,$f),e($f,Qee),e(Qee,MOe),e($f,EOe),e($f,z$),e(z$,COe),e($f,wOe),e(A,AOe),e(A,kf),e(kf,Hee),e(Hee,yOe),e(kf,LOe),e(kf,W$),e(W$,xOe),e(kf,$Oe),e(A,kOe),e(A,Sf),e(Sf,Uee),e(Uee,SOe),e(Sf,ROe),e(Sf,Q$),e(Q$,POe),e(Sf,BOe),e(A,IOe),e(A,Rf),e(Rf,Jee),e(Jee,qOe),e(Rf,NOe),e(Rf,H$),e(H$,jOe),e(Rf,DOe),e(A,GOe),e(A,Pf),e(Pf,Yee),e(Yee,OOe),e(Pf,VOe),e(Pf,U$),e(U$,XOe),e(Pf,zOe),e(A,WOe),e(A,Bf),e(Bf,Kee),e(Kee,QOe),e(Bf,HOe),e(Bf,J$),e(J$,UOe),e(Bf,JOe),e(A,YOe),e(A,If),e(If,Zee),e(Zee,KOe),e(If,ZOe),e(If,Y$),e(Y$,eVe),e(If,oVe),e(A,rVe),e(A,qf),e(qf,eoe),e(eoe,tVe),e(qf,aVe),e(qf,K$),e(K$,nVe),e(qf,sVe),e(A,lVe),e(A,Nf),e(Nf,ooe),e(ooe,iVe),e(Nf,dVe),e(Nf,Z$),e(Z$,cVe),e(Nf,fVe),e(A,mVe),e(A,jf),e(jf,roe),e(roe,gVe),e(jf,hVe),e(jf,ek),e(ek,pVe),e(jf,_Ve),e(A,uVe),e(A,Df),e(Df,toe),e(toe,bVe),e(Df,vVe),e(Df,ok),e(ok,FVe),e(Df,TVe),e(A,MVe),e(A,Gf),e(Gf,aoe),e(aoe,EVe),e(Gf,CVe),e(Gf,rk),e(rk,wVe),e(Gf,AVe),e(A,yVe),e(A,Of),e(Of,noe),e(noe,LVe),e(Of,xVe),e(Of,tk),e(tk,$Ve),e(Of,kVe),e(A,SVe),e(A,Vf),e(Vf,soe),e(soe,RVe),e(Vf,PVe),e(Vf,ak),e(ak,BVe),e(Vf,IVe),e(A,qVe),e(A,Xf),e(Xf,loe),e(loe,NVe),e(Xf,jVe),e(Xf,nk),e(nk,DVe),e(Xf,GVe),e(A,OVe),e(A,zf),e(zf,ioe),e(ioe,VVe),e(zf,XVe),e(zf,sk),e(sk,zVe),e(zf,WVe),e(A,QVe),e(A,Wf),e(Wf,doe),e(doe,HVe),e(Wf,UVe),e(Wf,lk),e(lk,JVe),e(Wf,YVe),e(A,KVe),e(A,Qf),e(Qf,coe),e(coe,ZVe),e(Qf,eXe),e(Qf,ik),e(ik,oXe),e(Qf,rXe),e(A,tXe),e(A,Hf),e(Hf,foe),e(foe,aXe),e(Hf,nXe),e(Hf,dk),e(dk,sXe),e(Hf,lXe),e(A,iXe),e(A,Uf),e(Uf,moe),e(moe,dXe),e(Uf,cXe),e(Uf,ck),e(ck,fXe),e(Uf,mXe),e(A,gXe),e(A,Jf),e(Jf,goe),e(goe,hXe),e(Jf,pXe),e(Jf,fk),e(fk,_Xe),e(Jf,uXe),e(A,bXe),e(A,Yf),e(Yf,hoe),e(hoe,vXe),e(Yf,FXe),e(Yf,mk),e(mk,TXe),e(Yf,MXe),e(A,EXe),e(A,Kf),e(Kf,poe),e(poe,CXe),e(Kf,wXe),e(Kf,gk),e(gk,AXe),e(Kf,yXe),e(A,LXe),e(A,Zf),e(Zf,_oe),e(_oe,xXe),e(Zf,$Xe),e(Zf,hk),e(hk,kXe),e(Zf,SXe),e(A,RXe),e(A,em),e(em,uoe),e(uoe,PXe),e(em,BXe),e(em,pk),e(pk,IXe),e(em,qXe),e(A,NXe),e(A,om),e(om,boe),e(boe,jXe),e(om,DXe),e(om,_k),e(_k,GXe),e(om,OXe),e(A,VXe),e(A,rm),e(rm,voe),e(voe,XXe),e(rm,zXe),e(rm,uk),e(uk,WXe),e(rm,QXe),e(A,HXe),e(A,tm),e(tm,Foe),e(Foe,UXe),e(tm,JXe),e(tm,bk),e(bk,YXe),e(tm,KXe),e(A,ZXe),e(A,am),e(am,Toe),e(Toe,eze),e(am,oze),e(am,vk),e(vk,rze),e(am,tze),e(A,aze),e(A,nm),e(nm,Moe),e(Moe,nze),e(nm,sze),e(nm,Fk),e(Fk,lze),e(nm,ize),e(A,dze),e(A,sm),e(sm,Eoe),e(Eoe,cze),e(sm,fze),e(sm,Tk),e(Tk,mze),e(sm,gze),e(A,hze),e(A,lm),e(lm,Coe),e(Coe,pze),e(lm,_ze),e(lm,Mk),e(Mk,uze),e(lm,bze),e(A,vze),e(A,im),e(im,woe),e(woe,Fze),e(im,Tze),e(im,Ek),e(Ek,Mze),e(im,Eze),e(A,Cze),e(A,dm),e(dm,Aoe),e(Aoe,wze),e(dm,Aze),e(dm,Ck),e(Ck,yze),e(dm,Lze),e(A,xze),e(A,cm),e(cm,yoe),e(yoe,$ze),e(cm,kze),e(cm,wk),e(wk,Sze),e(cm,Rze),e(A,Pze),e(A,fm),e(fm,Loe),e(Loe,Bze),e(fm,Ize),e(fm,Ak),e(Ak,qze),e(fm,Nze),e(A,jze),e(A,mm),e(mm,xoe),e(xoe,Dze),e(mm,Gze),e(mm,yk),e(yk,Oze),e(mm,Vze),e(A,Xze),e(A,gm),e(gm,$oe),e($oe,zze),e(gm,Wze),e(gm,Lk),e(Lk,Qze),e(gm,Hze),e(A,Uze),e(A,hm),e(hm,koe),e(koe,Jze),e(hm,Yze),e(hm,xk),e(xk,Kze),e(hm,Zze),e(A,eWe),e(A,pm),e(pm,Soe),e(Soe,oWe),e(pm,rWe),e(pm,$k),e($k,tWe),e(pm,aWe),e(A,nWe),e(A,_m),e(_m,Roe),e(Roe,sWe),e(_m,lWe),e(_m,kk),e(kk,iWe),e(_m,dWe),e(A,cWe),e(A,um),e(um,Poe),e(Poe,fWe),e(um,mWe),e(um,Sk),e(Sk,gWe),e(um,hWe),e(A,pWe),e(A,bm),e(bm,Boe),e(Boe,_We),e(bm,uWe),e(bm,Rk),e(Rk,bWe),e(bm,vWe),e(A,FWe),e(A,vm),e(vm,Ioe),e(Ioe,TWe),e(vm,MWe),e(vm,Pk),e(Pk,EWe),e(vm,CWe),e(A,wWe),e(A,Fm),e(Fm,qoe),e(qoe,AWe),e(Fm,yWe),e(Fm,Bk),e(Bk,LWe),e(Fm,xWe),e(A,$We),e(A,Tm),e(Tm,Noe),e(Noe,kWe),e(Tm,SWe),e(Tm,Ik),e(Ik,RWe),e(Tm,PWe),e(A,BWe),e(A,Mm),e(Mm,joe),e(joe,IWe),e(Mm,qWe),e(Mm,qk),e(qk,NWe),e(Mm,jWe),e(A,DWe),e(A,Em),e(Em,Doe),e(Doe,GWe),e(Em,OWe),e(Em,Nk),e(Nk,VWe),e(Em,XWe),e(A,zWe),e(A,Cm),e(Cm,Goe),e(Goe,WWe),e(Cm,QWe),e(Cm,jk),e(jk,HWe),e(Cm,UWe),e(A,JWe),e(A,wm),e(wm,Ooe),e(Ooe,YWe),e(wm,KWe),e(wm,Dk),e(Dk,ZWe),e(wm,eQe),e(A,oQe),e(A,Am),e(Am,Voe),e(Voe,rQe),e(Am,tQe),e(Am,Gk),e(Gk,aQe),e(Am,nQe),e(A,sQe),e(A,ym),e(ym,Xoe),e(Xoe,lQe),e(ym,iQe),e(ym,Ok),e(Ok,dQe),e(ym,cQe),e(A,fQe),e(A,Lm),e(Lm,zoe),e(zoe,mQe),e(Lm,gQe),e(Lm,Vk),e(Vk,hQe),e(Lm,pQe),e(A,_Qe),e(A,xm),e(xm,Woe),e(Woe,uQe),e(xm,bQe),e(xm,Xk),e(Xk,vQe),e(xm,FQe),e(A,TQe),e(A,$m),e($m,Qoe),e(Qoe,MQe),e($m,EQe),e($m,zk),e(zk,CQe),e($m,wQe),e(A,AQe),e(A,km),e(km,Hoe),e(Hoe,yQe),e(km,LQe),e(km,Wk),e(Wk,xQe),e(km,$Qe),e(A,kQe),e(A,Sm),e(Sm,Uoe),e(Uoe,SQe),e(Sm,RQe),e(Sm,Qk),e(Qk,PQe),e(Sm,BQe),e(A,IQe),e(A,Rm),e(Rm,Joe),e(Joe,qQe),e(Rm,NQe),e(Rm,Hk),e(Hk,jQe),e(Rm,DQe),e(A,GQe),e(A,Pm),e(Pm,Yoe),e(Yoe,OQe),e(Pm,VQe),e(Pm,Uk),e(Uk,XQe),e(Pm,zQe),e(A,WQe),e(A,Bm),e(Bm,Koe),e(Koe,QQe),e(Bm,HQe),e(Bm,Jk),e(Jk,UQe),e(Bm,JQe),e(A,YQe),e(A,Im),e(Im,Zoe),e(Zoe,KQe),e(Im,ZQe),e(Im,Yk),e(Yk,eHe),e(Im,oHe),e(A,rHe),e(A,qm),e(qm,ere),e(ere,tHe),e(qm,aHe),e(qm,Kk),e(Kk,nHe),e(qm,sHe),e(A,lHe),e(A,Nm),e(Nm,ore),e(ore,iHe),e(Nm,dHe),e(Nm,Zk),e(Zk,cHe),e(Nm,fHe),e(A,mHe),e(A,jm),e(jm,rre),e(rre,gHe),e(jm,hHe),e(jm,eS),e(eS,pHe),e(jm,_He),e(A,uHe),e(A,Dm),e(Dm,tre),e(tre,bHe),e(Dm,vHe),e(Dm,oS),e(oS,FHe),e(Dm,THe),e(A,MHe),e(A,Gm),e(Gm,are),e(are,EHe),e(Gm,CHe),e(Gm,rS),e(rS,wHe),e(Gm,AHe),e(A,yHe),e(A,Om),e(Om,nre),e(nre,LHe),e(Om,xHe),e(Om,tS),e(tS,$He),e(Om,kHe),e(A,SHe),e(A,Vm),e(Vm,sre),e(sre,RHe),e(Vm,PHe),e(Vm,aS),e(aS,BHe),e(Vm,IHe),e(A,qHe),e(A,Xm),e(Xm,lre),e(lre,NHe),e(Xm,jHe),e(Xm,nS),e(nS,DHe),e(Xm,GHe),e(A,OHe),e(A,zm),e(zm,ire),e(ire,VHe),e(zm,XHe),e(zm,sS),e(sS,zHe),e(zm,WHe),e(A,QHe),e(A,Wm),e(Wm,dre),e(dre,HHe),e(Wm,UHe),e(Wm,lS),e(lS,JHe),e(Wm,YHe),e(A,KHe),e(A,Qm),e(Qm,cre),e(cre,ZHe),e(Qm,eUe),e(Qm,iS),e(iS,oUe),e(Qm,rUe),e(A,tUe),e(A,Hm),e(Hm,fre),e(fre,aUe),e(Hm,nUe),e(Hm,dS),e(dS,sUe),e(Hm,lUe),e(A,iUe),e(A,Um),e(Um,mre),e(mre,dUe),e(Um,cUe),e(Um,cS),e(cS,fUe),e(Um,mUe),e(A,gUe),e(A,Jm),e(Jm,gre),e(gre,hUe),e(Jm,pUe),e(Jm,fS),e(fS,_Ue),e(Jm,uUe),e(A,bUe),e(A,Ym),e(Ym,hre),e(hre,vUe),e(Ym,FUe),e(Ym,mS),e(mS,TUe),e(Ym,MUe),e(A,EUe),e(A,Km),e(Km,pre),e(pre,CUe),e(Km,wUe),e(Km,gS),e(gS,AUe),e(Km,yUe),e(A,LUe),e(A,Zm),e(Zm,_re),e(_re,xUe),e(Zm,$Ue),e(Zm,hS),e(hS,kUe),e(Zm,SUe),e(A,RUe),e(A,eg),e(eg,ure),e(ure,PUe),e(eg,BUe),e(eg,pS),e(pS,IUe),e(eg,qUe),e(A,NUe),e(A,og),e(og,bre),e(bre,jUe),e(og,DUe),e(og,_S),e(_S,GUe),e(og,OUe),e(A,VUe),e(A,rg),e(rg,vre),e(vre,XUe),e(rg,zUe),e(rg,uS),e(uS,WUe),e(rg,QUe),e(A,HUe),e(A,tg),e(tg,Fre),e(Fre,UUe),e(tg,JUe),e(tg,bS),e(bS,YUe),e(tg,KUe),e(A,ZUe),e(A,ag),e(ag,Tre),e(Tre,eJe),e(ag,oJe),e(ag,vS),e(vS,rJe),e(ag,tJe),e(A,aJe),e(A,ng),e(ng,Mre),e(Mre,nJe),e(ng,sJe),e(ng,FS),e(FS,lJe),e(ng,iJe),e(A,dJe),e(A,sg),e(sg,Ere),e(Ere,cJe),e(sg,fJe),e(sg,TS),e(TS,mJe),e(sg,gJe),e(A,hJe),e(A,lg),e(lg,Cre),e(Cre,pJe),e(lg,_Je),e(lg,MS),e(MS,uJe),e(lg,bJe),e(A,vJe),e(A,ig),e(ig,wre),e(wre,FJe),e(ig,TJe),e(ig,ES),e(ES,MJe),e(ig,EJe),e(A,CJe),e(A,dg),e(dg,Are),e(Are,wJe),e(dg,AJe),e(dg,CS),e(CS,yJe),e(dg,LJe),e(A,xJe),e(A,cg),e(cg,yre),e(yre,$Je),e(cg,kJe),e(cg,wS),e(wS,SJe),e(cg,RJe),e(A,PJe),e(A,fg),e(fg,Lre),e(Lre,BJe),e(fg,IJe),e(fg,AS),e(AS,qJe),e(fg,NJe),e(A,jJe),e(A,mg),e(mg,xre),e(xre,DJe),e(mg,GJe),e(mg,yS),e(yS,OJe),e(mg,VJe),e(A,XJe),e(A,gg),e(gg,$re),e($re,zJe),e(gg,WJe),e(gg,LS),e(LS,QJe),e(gg,HJe),e(A,UJe),e(A,hg),e(hg,kre),e(kre,JJe),e(hg,YJe),e(hg,xS),e(xS,KJe),e(hg,ZJe),e(A,eYe),e(A,pg),e(pg,Sre),e(Sre,oYe),e(pg,rYe),e(pg,$S),e($S,tYe),e(pg,aYe),e(A,nYe),e(A,_g),e(_g,Rre),e(Rre,sYe),e(_g,lYe),e(_g,kS),e(kS,iYe),e(_g,dYe),e(A,cYe),e(A,ug),e(ug,Pre),e(Pre,fYe),e(ug,mYe),e(ug,SS),e(SS,gYe),e(ug,hYe),e(A,pYe),e(A,bg),e(bg,Bre),e(Bre,_Ye),e(bg,uYe),e(bg,RS),e(RS,bYe),e(bg,vYe),e(Er,FYe),M(vg,Er,null),e(Co,TYe),e(Co,Fg),M(vy,Fg,null),e(Fg,MYe),e(Fg,Ire),e(Ire,EYe),b(f,KIe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,qre),M(Fy,qre,null),e(Fi,CYe),e(Fi,Nre),e(Nre,wYe),b(f,ZIe,u),b(f,wo,u),M(Ty,wo,null),e(wo,AYe),e(wo,My),e(My,yYe),e(My,PS),e(PS,LYe),e(My,xYe),e(wo,$Ye),e(wo,Ey),e(Ey,kYe),e(Ey,jre),e(jre,SYe),e(Ey,RYe),e(wo,PYe),e(wo,Cr),M(Cy,Cr,null),e(Cr,BYe),e(Cr,Dre),e(Dre,IYe),e(Cr,qYe),e(Cr,Aa),e(Aa,NYe),e(Aa,Gre),e(Gre,jYe),e(Aa,DYe),e(Aa,Ore),e(Ore,GYe),e(Aa,OYe),e(Aa,Vre),e(Vre,VYe),e(Aa,XYe),e(Cr,zYe),e(Cr,k),e(k,Sn),e(Sn,Xre),e(Xre,WYe),e(Sn,QYe),e(Sn,BS),e(BS,HYe),e(Sn,UYe),e(Sn,IS),e(IS,JYe),e(Sn,YYe),e(k,KYe),e(k,Rn),e(Rn,zre),e(zre,ZYe),e(Rn,eKe),e(Rn,qS),e(qS,oKe),e(Rn,rKe),e(Rn,NS),e(NS,tKe),e(Rn,aKe),e(k,nKe),e(k,Pn),e(Pn,Wre),e(Wre,sKe),e(Pn,lKe),e(Pn,jS),e(jS,iKe),e(Pn,dKe),e(Pn,DS),e(DS,cKe),e(Pn,fKe),e(k,mKe),e(k,Mg),e(Mg,Qre),e(Qre,gKe),e(Mg,hKe),e(Mg,GS),e(GS,pKe),e(Mg,_Ke),e(k,uKe),e(k,Bn),e(Bn,Hre),e(Hre,bKe),e(Bn,vKe),e(Bn,OS),e(OS,FKe),e(Bn,TKe),e(Bn,VS),e(VS,MKe),e(Bn,EKe),e(k,CKe),e(k,Eg),e(Eg,Ure),e(Ure,wKe),e(Eg,AKe),e(Eg,XS),e(XS,yKe),e(Eg,LKe),e(k,xKe),e(k,Cg),e(Cg,Jre),e(Jre,$Ke),e(Cg,kKe),e(Cg,zS),e(zS,SKe),e(Cg,RKe),e(k,PKe),e(k,wg),e(wg,Yre),e(Yre,BKe),e(wg,IKe),e(wg,WS),e(WS,qKe),e(wg,NKe),e(k,jKe),e(k,In),e(In,Kre),e(Kre,DKe),e(In,GKe),e(In,QS),e(QS,OKe),e(In,VKe),e(In,HS),e(HS,XKe),e(In,zKe),e(k,WKe),e(k,qn),e(qn,Zre),e(Zre,QKe),e(qn,HKe),e(qn,US),e(US,UKe),e(qn,JKe),e(qn,JS),e(JS,YKe),e(qn,KKe),e(k,ZKe),e(k,Nn),e(Nn,ete),e(ete,eZe),e(Nn,oZe),e(Nn,YS),e(YS,rZe),e(Nn,tZe),e(Nn,KS),e(KS,aZe),e(Nn,nZe),e(k,sZe),e(k,Ag),e(Ag,ote),e(ote,lZe),e(Ag,iZe),e(Ag,ZS),e(ZS,dZe),e(Ag,cZe),e(k,fZe),e(k,yg),e(yg,rte),e(rte,mZe),e(yg,gZe),e(yg,eR),e(eR,hZe),e(yg,pZe),e(k,_Ze),e(k,jn),e(jn,tte),e(tte,uZe),e(jn,bZe),e(jn,oR),e(oR,vZe),e(jn,FZe),e(jn,rR),e(rR,TZe),e(jn,MZe),e(k,EZe),e(k,Lg),e(Lg,ate),e(ate,CZe),e(Lg,wZe),e(Lg,tR),e(tR,AZe),e(Lg,yZe),e(k,LZe),e(k,Dn),e(Dn,nte),e(nte,xZe),e(Dn,$Ze),e(Dn,aR),e(aR,kZe),e(Dn,SZe),e(Dn,nR),e(nR,RZe),e(Dn,PZe),e(k,BZe),e(k,Gn),e(Gn,ste),e(ste,IZe),e(Gn,qZe),e(Gn,sR),e(sR,NZe),e(Gn,jZe),e(Gn,lR),e(lR,DZe),e(Gn,GZe),e(k,OZe),e(k,On),e(On,lte),e(lte,VZe),e(On,XZe),e(On,iR),e(iR,zZe),e(On,WZe),e(On,dR),e(dR,QZe),e(On,HZe),e(k,UZe),e(k,xg),e(xg,ite),e(ite,JZe),e(xg,YZe),e(xg,cR),e(cR,KZe),e(xg,ZZe),e(k,eeo),e(k,Vn),e(Vn,dte),e(dte,oeo),e(Vn,reo),e(Vn,fR),e(fR,teo),e(Vn,aeo),e(Vn,mR),e(mR,neo),e(Vn,seo),e(k,leo),e(k,Xn),e(Xn,cte),e(cte,ieo),e(Xn,deo),e(Xn,gR),e(gR,ceo),e(Xn,feo),e(Xn,hR),e(hR,meo),e(Xn,geo),e(k,heo),e(k,zn),e(zn,fte),e(fte,peo),e(zn,_eo),e(zn,pR),e(pR,ueo),e(zn,beo),e(zn,_R),e(_R,veo),e(zn,Feo),e(k,Teo),e(k,Wn),e(Wn,mte),e(mte,Meo),e(Wn,Eeo),e(Wn,uR),e(uR,Ceo),e(Wn,weo),e(Wn,bR),e(bR,Aeo),e(Wn,yeo),e(k,Leo),e(k,Qn),e(Qn,gte),e(gte,xeo),e(Qn,$eo),e(Qn,vR),e(vR,keo),e(Qn,Seo),e(Qn,FR),e(FR,Reo),e(Qn,Peo),e(k,Beo),e(k,Hn),e(Hn,hte),e(hte,Ieo),e(Hn,qeo),e(Hn,TR),e(TR,Neo),e(Hn,jeo),e(Hn,MR),e(MR,Deo),e(Hn,Geo),e(k,Oeo),e(k,$g),e($g,pte),e(pte,Veo),e($g,Xeo),e($g,ER),e(ER,zeo),e($g,Weo),e(k,Qeo),e(k,Un),e(Un,_te),e(_te,Heo),e(Un,Ueo),e(Un,CR),e(CR,Jeo),e(Un,Yeo),e(Un,wR),e(wR,Keo),e(Un,Zeo),e(k,eoo),e(k,kg),e(kg,ute),e(ute,ooo),e(kg,roo),e(kg,AR),e(AR,too),e(kg,aoo),e(k,noo),e(k,Jn),e(Jn,bte),e(bte,soo),e(Jn,loo),e(Jn,yR),e(yR,ioo),e(Jn,doo),e(Jn,LR),e(LR,coo),e(Jn,foo),e(k,moo),e(k,Yn),e(Yn,vte),e(vte,goo),e(Yn,hoo),e(Yn,xR),e(xR,poo),e(Yn,_oo),e(Yn,$R),e($R,uoo),e(Yn,boo),e(k,voo),e(k,Kn),e(Kn,Fte),e(Fte,Foo),e(Kn,Too),e(Kn,kR),e(kR,Moo),e(Kn,Eoo),e(Kn,SR),e(SR,Coo),e(Kn,woo),e(k,Aoo),e(k,Zn),e(Zn,Tte),e(Tte,yoo),e(Zn,Loo),e(Zn,RR),e(RR,xoo),e(Zn,$oo),e(Zn,PR),e(PR,koo),e(Zn,Soo),e(k,Roo),e(k,es),e(es,Mte),e(Mte,Poo),e(es,Boo),e(es,BR),e(BR,Ioo),e(es,qoo),e(es,IR),e(IR,Noo),e(es,joo),e(k,Doo),e(k,Sg),e(Sg,Ete),e(Ete,Goo),e(Sg,Ooo),e(Sg,qR),e(qR,Voo),e(Sg,Xoo),e(k,zoo),e(k,os),e(os,Cte),e(Cte,Woo),e(os,Qoo),e(os,NR),e(NR,Hoo),e(os,Uoo),e(os,jR),e(jR,Joo),e(os,Yoo),e(k,Koo),e(k,rs),e(rs,wte),e(wte,Zoo),e(rs,ero),e(rs,DR),e(DR,oro),e(rs,rro),e(rs,GR),e(GR,tro),e(rs,aro),e(k,nro),e(k,ts),e(ts,Ate),e(Ate,sro),e(ts,lro),e(ts,OR),e(OR,iro),e(ts,dro),e(ts,VR),e(VR,cro),e(ts,fro),e(k,mro),e(k,as),e(as,yte),e(yte,gro),e(as,hro),e(as,XR),e(XR,pro),e(as,_ro),e(as,zR),e(zR,uro),e(as,bro),e(k,vro),e(k,ns),e(ns,Lte),e(Lte,Fro),e(ns,Tro),e(ns,WR),e(WR,Mro),e(ns,Ero),e(ns,QR),e(QR,Cro),e(ns,wro),e(k,Aro),e(k,ss),e(ss,xte),e(xte,yro),e(ss,Lro),e(ss,HR),e(HR,xro),e(ss,$ro),e(ss,UR),e(UR,kro),e(ss,Sro),e(k,Rro),e(k,Rg),e(Rg,$te),e($te,Pro),e(Rg,Bro),e(Rg,JR),e(JR,Iro),e(Rg,qro),e(k,Nro),e(k,ls),e(ls,kte),e(kte,jro),e(ls,Dro),e(ls,YR),e(YR,Gro),e(ls,Oro),e(ls,KR),e(KR,Vro),e(ls,Xro),e(k,zro),e(k,Pg),e(Pg,Ste),e(Ste,Wro),e(Pg,Qro),e(Pg,ZR),e(ZR,Hro),e(Pg,Uro),e(k,Jro),e(k,Bg),e(Bg,Rte),e(Rte,Yro),e(Bg,Kro),e(Bg,eP),e(eP,Zro),e(Bg,eto),e(k,oto),e(k,is),e(is,Pte),e(Pte,rto),e(is,tto),e(is,oP),e(oP,ato),e(is,nto),e(is,rP),e(rP,sto),e(is,lto),e(k,ito),e(k,ds),e(ds,Bte),e(Bte,dto),e(ds,cto),e(ds,tP),e(tP,fto),e(ds,mto),e(ds,aP),e(aP,gto),e(ds,hto),e(k,pto),e(k,cs),e(cs,Ite),e(Ite,_to),e(cs,uto),e(cs,nP),e(nP,bto),e(cs,vto),e(cs,sP),e(sP,Fto),e(cs,Tto),e(k,Mto),e(k,Ig),e(Ig,qte),e(qte,Eto),e(Ig,Cto),e(Ig,lP),e(lP,wto),e(Ig,Ato),e(k,yto),e(k,fs),e(fs,Nte),e(Nte,Lto),e(fs,xto),e(fs,iP),e(iP,$to),e(fs,kto),e(fs,dP),e(dP,Sto),e(fs,Rto),e(k,Pto),e(k,ms),e(ms,jte),e(jte,Bto),e(ms,Ito),e(ms,cP),e(cP,qto),e(ms,Nto),e(ms,fP),e(fP,jto),e(ms,Dto),e(k,Gto),e(k,gs),e(gs,Dte),e(Dte,Oto),e(gs,Vto),e(gs,mP),e(mP,Xto),e(gs,zto),e(gs,gP),e(gP,Wto),e(gs,Qto),e(k,Hto),e(k,hs),e(hs,Gte),e(Gte,Uto),e(hs,Jto),e(hs,hP),e(hP,Yto),e(hs,Kto),e(hs,pP),e(pP,Zto),e(hs,eao),e(k,oao),e(k,ps),e(ps,Ote),e(Ote,rao),e(ps,tao),e(ps,_P),e(_P,aao),e(ps,nao),e(ps,uP),e(uP,sao),e(ps,lao),e(k,iao),e(k,qg),e(qg,Vte),e(Vte,dao),e(qg,cao),e(qg,bP),e(bP,fao),e(qg,mao),e(k,gao),e(k,_s),e(_s,Xte),e(Xte,hao),e(_s,pao),e(_s,vP),e(vP,_ao),e(_s,uao),e(_s,FP),e(FP,bao),e(_s,vao),e(k,Fao),e(k,Ng),e(Ng,zte),e(zte,Tao),e(Ng,Mao),e(Ng,TP),e(TP,Eao),e(Ng,Cao),e(k,wao),e(k,jg),e(jg,Wte),e(Wte,Aao),e(jg,yao),e(jg,MP),e(MP,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,Qte),e(Qte,kao),e(Dg,Sao),e(Dg,EP),e(EP,Rao),e(Dg,Pao),e(k,Bao),e(k,Gg),e(Gg,Hte),e(Hte,Iao),e(Gg,qao),e(Gg,CP),e(CP,Nao),e(Gg,jao),e(k,Dao),e(k,us),e(us,Ute),e(Ute,Gao),e(us,Oao),e(us,wP),e(wP,Vao),e(us,Xao),e(us,AP),e(AP,zao),e(us,Wao),e(k,Qao),e(k,Og),e(Og,Jte),e(Jte,Hao),e(Og,Uao),e(Og,yP),e(yP,Jao),e(Og,Yao),e(k,Kao),e(k,bs),e(bs,Yte),e(Yte,Zao),e(bs,eno),e(bs,LP),e(LP,ono),e(bs,rno),e(bs,xP),e(xP,tno),e(bs,ano),e(k,nno),e(k,vs),e(vs,Kte),e(Kte,sno),e(vs,lno),e(vs,$P),e($P,ino),e(vs,dno),e(vs,kP),e(kP,cno),e(vs,fno),e(k,mno),e(k,Fs),e(Fs,Zte),e(Zte,gno),e(Fs,hno),e(Fs,SP),e(SP,pno),e(Fs,_no),e(Fs,RP),e(RP,uno),e(Fs,bno),e(k,vno),e(k,Ts),e(Ts,eae),e(eae,Fno),e(Ts,Tno),e(Ts,PP),e(PP,Mno),e(Ts,Eno),e(Ts,BP),e(BP,Cno),e(Ts,wno),e(k,Ano),e(k,Ms),e(Ms,oae),e(oae,yno),e(Ms,Lno),e(Ms,IP),e(IP,xno),e(Ms,$no),e(Ms,qP),e(qP,kno),e(Ms,Sno),e(k,Rno),e(k,Es),e(Es,rae),e(rae,Pno),e(Es,Bno),e(Es,NP),e(NP,Ino),e(Es,qno),e(Es,jP),e(jP,Nno),e(Es,jno),e(k,Dno),e(k,Vg),e(Vg,tae),e(tae,Gno),e(Vg,Ono),e(Vg,DP),e(DP,Vno),e(Vg,Xno),e(k,zno),e(k,Xg),e(Xg,aae),e(aae,Wno),e(Xg,Qno),e(Xg,GP),e(GP,Hno),e(Xg,Uno),e(k,Jno),e(k,Cs),e(Cs,nae),e(nae,Yno),e(Cs,Kno),e(Cs,OP),e(OP,Zno),e(Cs,eso),e(Cs,VP),e(VP,oso),e(Cs,rso),e(k,tso),e(k,ws),e(ws,sae),e(sae,aso),e(ws,nso),e(ws,XP),e(XP,sso),e(ws,lso),e(ws,zP),e(zP,iso),e(ws,dso),e(k,cso),e(k,As),e(As,lae),e(lae,fso),e(As,mso),e(As,WP),e(WP,gso),e(As,hso),e(As,QP),e(QP,pso),e(As,_so),e(k,uso),e(k,zg),e(zg,iae),e(iae,bso),e(zg,vso),e(zg,HP),e(HP,Fso),e(zg,Tso),e(k,Mso),e(k,Wg),e(Wg,dae),e(dae,Eso),e(Wg,Cso),e(Wg,UP),e(UP,wso),e(Wg,Aso),e(k,yso),e(k,Qg),e(Qg,cae),e(cae,Lso),e(Qg,xso),e(Qg,JP),e(JP,$so),e(Qg,kso),e(k,Sso),e(k,ys),e(ys,fae),e(fae,Rso),e(ys,Pso),e(ys,YP),e(YP,Bso),e(ys,Iso),e(ys,KP),e(KP,qso),e(ys,Nso),e(k,jso),e(k,Hg),e(Hg,mae),e(mae,Dso),e(Hg,Gso),e(Hg,ZP),e(ZP,Oso),e(Hg,Vso),e(k,Xso),e(k,Ug),e(Ug,gae),e(gae,zso),e(Ug,Wso),e(Ug,eB),e(eB,Qso),e(Ug,Hso),e(k,Uso),e(k,Jg),e(Jg,hae),e(hae,Jso),e(Jg,Yso),e(Jg,oB),e(oB,Kso),e(Jg,Zso),e(k,elo),e(k,Ls),e(Ls,pae),e(pae,olo),e(Ls,rlo),e(Ls,rB),e(rB,tlo),e(Ls,alo),e(Ls,tB),e(tB,nlo),e(Ls,slo),e(k,llo),e(k,Yg),e(Yg,_ae),e(_ae,ilo),e(Yg,dlo),e(Yg,aB),e(aB,clo),e(Yg,flo),e(k,mlo),e(k,Kg),e(Kg,uae),e(uae,glo),e(Kg,hlo),e(Kg,nB),e(nB,plo),e(Kg,_lo),e(k,ulo),e(k,xs),e(xs,bae),e(bae,blo),e(xs,vlo),e(xs,sB),e(sB,Flo),e(xs,Tlo),e(xs,lB),e(lB,Mlo),e(xs,Elo),e(k,Clo),e(k,$s),e($s,vae),e(vae,wlo),e($s,Alo),e($s,iB),e(iB,ylo),e($s,Llo),e($s,dB),e(dB,xlo),e($s,$lo),e(k,klo),e(k,ks),e(ks,Fae),e(Fae,Slo),e(ks,Rlo),e(ks,cB),e(cB,Plo),e(ks,Blo),e(ks,fB),e(fB,Ilo),e(ks,qlo),e(k,Nlo),e(k,Ss),e(Ss,Tae),e(Tae,jlo),e(Ss,Dlo),e(Ss,mB),e(mB,Glo),e(Ss,Olo),e(Ss,gB),e(gB,Vlo),e(Ss,Xlo),e(Cr,zlo),M(Zg,Cr,null),e(wo,Wlo),e(wo,eh),M(wy,eh,null),e(eh,Qlo),e(eh,Mae),e(Mae,Hlo),b(f,eqe,u),b(f,Ti,u),e(Ti,oh),e(oh,Eae),M(Ay,Eae,null),e(Ti,Ulo),e(Ti,Cae),e(Cae,Jlo),b(f,oqe,u),b(f,Ao,u),M(yy,Ao,null),e(Ao,Ylo),e(Ao,Ly),e(Ly,Klo),e(Ly,hB),e(hB,Zlo),e(Ly,eio),e(Ao,oio),e(Ao,xy),e(xy,rio),e(xy,wae),e(wae,tio),e(xy,aio),e(Ao,nio),e(Ao,He),M($y,He,null),e(He,sio),e(He,Aae),e(Aae,lio),e(He,iio),e(He,ya),e(ya,dio),e(ya,yae),e(yae,cio),e(ya,fio),e(ya,Lae),e(Lae,mio),e(ya,gio),e(ya,xae),e(xae,hio),e(ya,pio),e(He,_io),e(He,Z),e(Z,rh),e(rh,$ae),e($ae,uio),e(rh,bio),e(rh,pB),e(pB,vio),e(rh,Fio),e(Z,Tio),e(Z,th),e(th,kae),e(kae,Mio),e(th,Eio),e(th,_B),e(_B,Cio),e(th,wio),e(Z,Aio),e(Z,ah),e(ah,Sae),e(Sae,yio),e(ah,Lio),e(ah,uB),e(uB,xio),e(ah,$io),e(Z,kio),e(Z,nh),e(nh,Rae),e(Rae,Sio),e(nh,Rio),e(nh,bB),e(bB,Pio),e(nh,Bio),e(Z,Iio),e(Z,sh),e(sh,Pae),e(Pae,qio),e(sh,Nio),e(sh,vB),e(vB,jio),e(sh,Dio),e(Z,Gio),e(Z,lh),e(lh,Bae),e(Bae,Oio),e(lh,Vio),e(lh,FB),e(FB,Xio),e(lh,zio),e(Z,Wio),e(Z,ih),e(ih,Iae),e(Iae,Qio),e(ih,Hio),e(ih,TB),e(TB,Uio),e(ih,Jio),e(Z,Yio),e(Z,dh),e(dh,qae),e(qae,Kio),e(dh,Zio),e(dh,MB),e(MB,edo),e(dh,odo),e(Z,rdo),e(Z,ch),e(ch,Nae),e(Nae,tdo),e(ch,ado),e(ch,EB),e(EB,ndo),e(ch,sdo),e(Z,ldo),e(Z,fh),e(fh,jae),e(jae,ido),e(fh,ddo),e(fh,CB),e(CB,cdo),e(fh,fdo),e(Z,mdo),e(Z,mh),e(mh,Dae),e(Dae,gdo),e(mh,hdo),e(mh,wB),e(wB,pdo),e(mh,_do),e(Z,udo),e(Z,gh),e(gh,Gae),e(Gae,bdo),e(gh,vdo),e(gh,AB),e(AB,Fdo),e(gh,Tdo),e(Z,Mdo),e(Z,hh),e(hh,Oae),e(Oae,Edo),e(hh,Cdo),e(hh,yB),e(yB,wdo),e(hh,Ado),e(Z,ydo),e(Z,ph),e(ph,Vae),e(Vae,Ldo),e(ph,xdo),e(ph,LB),e(LB,$do),e(ph,kdo),e(Z,Sdo),e(Z,_h),e(_h,Xae),e(Xae,Rdo),e(_h,Pdo),e(_h,xB),e(xB,Bdo),e(_h,Ido),e(Z,qdo),e(Z,uh),e(uh,zae),e(zae,Ndo),e(uh,jdo),e(uh,$B),e($B,Ddo),e(uh,Gdo),e(Z,Odo),e(Z,bh),e(bh,Wae),e(Wae,Vdo),e(bh,Xdo),e(bh,kB),e(kB,zdo),e(bh,Wdo),e(Z,Qdo),e(Z,vh),e(vh,Qae),e(Qae,Hdo),e(vh,Udo),e(vh,SB),e(SB,Jdo),e(vh,Ydo),e(Z,Kdo),e(Z,Fh),e(Fh,Hae),e(Hae,Zdo),e(Fh,eco),e(Fh,RB),e(RB,oco),e(Fh,rco),e(Z,tco),e(Z,Th),e(Th,Uae),e(Uae,aco),e(Th,nco),e(Th,PB),e(PB,sco),e(Th,lco),e(Z,ico),e(Z,Mh),e(Mh,Jae),e(Jae,dco),e(Mh,cco),e(Mh,BB),e(BB,fco),e(Mh,mco),e(Z,gco),e(Z,Eh),e(Eh,Yae),e(Yae,hco),e(Eh,pco),e(Eh,IB),e(IB,_co),e(Eh,uco),e(Z,bco),e(Z,Ch),e(Ch,Kae),e(Kae,vco),e(Ch,Fco),e(Ch,qB),e(qB,Tco),e(Ch,Mco),e(Z,Eco),e(Z,wh),e(wh,Zae),e(Zae,Cco),e(wh,wco),e(wh,NB),e(NB,Aco),e(wh,yco),e(Z,Lco),e(Z,Ah),e(Ah,ene),e(ene,xco),e(Ah,$co),e(Ah,jB),e(jB,kco),e(Ah,Sco),e(Z,Rco),e(Z,yh),e(yh,one),e(one,Pco),e(yh,Bco),e(yh,DB),e(DB,Ico),e(yh,qco),e(He,Nco),M(Lh,He,null),e(He,jco),M(xh,He,null),e(Ao,Dco),e(Ao,$h),M(ky,$h,null),e($h,Gco),e($h,rne),e(rne,Oco),b(f,rqe,u),b(f,Mi,u),e(Mi,kh),e(kh,tne),M(Sy,tne,null),e(Mi,Vco),e(Mi,ane),e(ane,Xco),b(f,tqe,u),b(f,yo,u),M(Ry,yo,null),e(yo,zco),e(yo,Py),e(Py,Wco),e(Py,GB),e(GB,Qco),e(Py,Hco),e(yo,Uco),e(yo,By),e(By,Jco),e(By,nne),e(nne,Yco),e(By,Kco),e(yo,Zco),e(yo,Ue),M(Iy,Ue,null),e(Ue,efo),e(Ue,sne),e(sne,ofo),e(Ue,rfo),e(Ue,Ei),e(Ei,tfo),e(Ei,lne),e(lne,afo),e(Ei,nfo),e(Ei,ine),e(ine,sfo),e(Ei,lfo),e(Ue,ifo),e(Ue,pe),e(pe,Sh),e(Sh,dne),e(dne,dfo),e(Sh,cfo),e(Sh,OB),e(OB,ffo),e(Sh,mfo),e(pe,gfo),e(pe,Rh),e(Rh,cne),e(cne,hfo),e(Rh,pfo),e(Rh,fne),e(fne,_fo),e(Rh,ufo),e(pe,bfo),e(pe,Ph),e(Ph,mne),e(mne,vfo),e(Ph,Ffo),e(Ph,VB),e(VB,Tfo),e(Ph,Mfo),e(pe,Efo),e(pe,Bh),e(Bh,gne),e(gne,Cfo),e(Bh,wfo),e(Bh,XB),e(XB,Afo),e(Bh,yfo),e(pe,Lfo),e(pe,Ih),e(Ih,hne),e(hne,xfo),e(Ih,$fo),e(Ih,zB),e(zB,kfo),e(Ih,Sfo),e(pe,Rfo),e(pe,qh),e(qh,pne),e(pne,Pfo),e(qh,Bfo),e(qh,WB),e(WB,Ifo),e(qh,qfo),e(pe,Nfo),e(pe,Nh),e(Nh,_ne),e(_ne,jfo),e(Nh,Dfo),e(Nh,QB),e(QB,Gfo),e(Nh,Ofo),e(pe,Vfo),e(pe,jh),e(jh,une),e(une,Xfo),e(jh,zfo),e(jh,HB),e(HB,Wfo),e(jh,Qfo),e(pe,Hfo),e(pe,Dh),e(Dh,bne),e(bne,Ufo),e(Dh,Jfo),e(Dh,UB),e(UB,Yfo),e(Dh,Kfo),e(pe,Zfo),e(pe,Gh),e(Gh,vne),e(vne,emo),e(Gh,omo),e(Gh,JB),e(JB,rmo),e(Gh,tmo),e(pe,amo),e(pe,Oh),e(Oh,Fne),e(Fne,nmo),e(Oh,smo),e(Oh,YB),e(YB,lmo),e(Oh,imo),e(pe,dmo),e(pe,Vh),e(Vh,Tne),e(Tne,cmo),e(Vh,fmo),e(Vh,KB),e(KB,mmo),e(Vh,gmo),e(pe,hmo),e(pe,Xh),e(Xh,Mne),e(Mne,pmo),e(Xh,_mo),e(Xh,ZB),e(ZB,umo),e(Xh,bmo),e(pe,vmo),e(pe,zh),e(zh,Ene),e(Ene,Fmo),e(zh,Tmo),e(zh,eI),e(eI,Mmo),e(zh,Emo),e(pe,Cmo),e(pe,Wh),e(Wh,Cne),e(Cne,wmo),e(Wh,Amo),e(Wh,oI),e(oI,ymo),e(Wh,Lmo),e(pe,xmo),e(pe,Qh),e(Qh,wne),e(wne,$mo),e(Qh,kmo),e(Qh,rI),e(rI,Smo),e(Qh,Rmo),e(Ue,Pmo),M(Hh,Ue,null),e(Ue,Bmo),M(Uh,Ue,null),e(yo,Imo),e(yo,Jh),M(qy,Jh,null),e(Jh,qmo),e(Jh,Ane),e(Ane,Nmo),b(f,aqe,u),b(f,Ci,u),e(Ci,Yh),e(Yh,yne),M(Ny,yne,null),e(Ci,jmo),e(Ci,Lne),e(Lne,Dmo),b(f,nqe,u),b(f,Lo,u),M(jy,Lo,null),e(Lo,Gmo),e(Lo,wi),e(wi,Omo),e(wi,tI),e(tI,Vmo),e(wi,Xmo),e(wi,aI),e(aI,zmo),e(wi,Wmo),e(Lo,Qmo),e(Lo,Dy),e(Dy,Hmo),e(Dy,xne),e(xne,Umo),e(Dy,Jmo),e(Lo,Ymo),e(Lo,tt),M(Gy,tt,null),e(tt,Kmo),e(tt,$ne),e($ne,Zmo),e(tt,ego),e(tt,Ai),e(Ai,ogo),e(Ai,kne),e(kne,rgo),e(Ai,tgo),e(Ai,nI),e(nI,ago),e(Ai,ngo),e(tt,sgo),M(Kh,tt,null),e(Lo,lgo),e(Lo,Je),M(Oy,Je,null),e(Je,igo),e(Je,Sne),e(Sne,dgo),e(Je,cgo),e(Je,La),e(La,fgo),e(La,Rne),e(Rne,mgo),e(La,ggo),e(La,Pne),e(Pne,hgo),e(La,pgo),e(La,Bne),e(Bne,_go),e(La,ugo),e(Je,bgo),e(Je,x),e(x,Zh),e(Zh,Ine),e(Ine,vgo),e(Zh,Fgo),e(Zh,sI),e(sI,Tgo),e(Zh,Mgo),e(x,Ego),e(x,ep),e(ep,qne),e(qne,Cgo),e(ep,wgo),e(ep,lI),e(lI,Ago),e(ep,ygo),e(x,Lgo),e(x,op),e(op,Nne),e(Nne,xgo),e(op,$go),e(op,iI),e(iI,kgo),e(op,Sgo),e(x,Rgo),e(x,rp),e(rp,jne),e(jne,Pgo),e(rp,Bgo),e(rp,dI),e(dI,Igo),e(rp,qgo),e(x,Ngo),e(x,tp),e(tp,Dne),e(Dne,jgo),e(tp,Dgo),e(tp,cI),e(cI,Ggo),e(tp,Ogo),e(x,Vgo),e(x,ap),e(ap,Gne),e(Gne,Xgo),e(ap,zgo),e(ap,fI),e(fI,Wgo),e(ap,Qgo),e(x,Hgo),e(x,np),e(np,One),e(One,Ugo),e(np,Jgo),e(np,mI),e(mI,Ygo),e(np,Kgo),e(x,Zgo),e(x,sp),e(sp,Vne),e(Vne,eho),e(sp,oho),e(sp,gI),e(gI,rho),e(sp,tho),e(x,aho),e(x,lp),e(lp,Xne),e(Xne,nho),e(lp,sho),e(lp,hI),e(hI,lho),e(lp,iho),e(x,dho),e(x,ip),e(ip,zne),e(zne,cho),e(ip,fho),e(ip,pI),e(pI,mho),e(ip,gho),e(x,hho),e(x,dp),e(dp,Wne),e(Wne,pho),e(dp,_ho),e(dp,_I),e(_I,uho),e(dp,bho),e(x,vho),e(x,cp),e(cp,Qne),e(Qne,Fho),e(cp,Tho),e(cp,uI),e(uI,Mho),e(cp,Eho),e(x,Cho),e(x,fp),e(fp,Hne),e(Hne,who),e(fp,Aho),e(fp,bI),e(bI,yho),e(fp,Lho),e(x,xho),e(x,mp),e(mp,Une),e(Une,$ho),e(mp,kho),e(mp,vI),e(vI,Sho),e(mp,Rho),e(x,Pho),e(x,gp),e(gp,Jne),e(Jne,Bho),e(gp,Iho),e(gp,FI),e(FI,qho),e(gp,Nho),e(x,jho),e(x,hp),e(hp,Yne),e(Yne,Dho),e(hp,Gho),e(hp,TI),e(TI,Oho),e(hp,Vho),e(x,Xho),e(x,pp),e(pp,Kne),e(Kne,zho),e(pp,Who),e(pp,MI),e(MI,Qho),e(pp,Hho),e(x,Uho),e(x,_p),e(_p,Zne),e(Zne,Jho),e(_p,Yho),e(_p,EI),e(EI,Kho),e(_p,Zho),e(x,epo),e(x,up),e(up,ese),e(ese,opo),e(up,rpo),e(up,CI),e(CI,tpo),e(up,apo),e(x,npo),e(x,bp),e(bp,ose),e(ose,spo),e(bp,lpo),e(bp,wI),e(wI,ipo),e(bp,dpo),e(x,cpo),e(x,vp),e(vp,rse),e(rse,fpo),e(vp,mpo),e(vp,AI),e(AI,gpo),e(vp,hpo),e(x,ppo),e(x,Fp),e(Fp,tse),e(tse,_po),e(Fp,upo),e(Fp,yI),e(yI,bpo),e(Fp,vpo),e(x,Fpo),e(x,Tp),e(Tp,ase),e(ase,Tpo),e(Tp,Mpo),e(Tp,LI),e(LI,Epo),e(Tp,Cpo),e(x,wpo),e(x,Mp),e(Mp,nse),e(nse,Apo),e(Mp,ypo),e(Mp,xI),e(xI,Lpo),e(Mp,xpo),e(x,$po),e(x,Ep),e(Ep,sse),e(sse,kpo),e(Ep,Spo),e(Ep,$I),e($I,Rpo),e(Ep,Ppo),e(x,Bpo),e(x,Cp),e(Cp,lse),e(lse,Ipo),e(Cp,qpo),e(Cp,kI),e(kI,Npo),e(Cp,jpo),e(x,Dpo),e(x,wp),e(wp,ise),e(ise,Gpo),e(wp,Opo),e(wp,SI),e(SI,Vpo),e(wp,Xpo),e(x,zpo),e(x,Ap),e(Ap,dse),e(dse,Wpo),e(Ap,Qpo),e(Ap,RI),e(RI,Hpo),e(Ap,Upo),e(x,Jpo),e(x,yp),e(yp,cse),e(cse,Ypo),e(yp,Kpo),e(yp,PI),e(PI,Zpo),e(yp,e_o),e(x,o_o),e(x,Lp),e(Lp,fse),e(fse,r_o),e(Lp,t_o),e(Lp,BI),e(BI,a_o),e(Lp,n_o),e(x,s_o),e(x,xp),e(xp,mse),e(mse,l_o),e(xp,i_o),e(xp,II),e(II,d_o),e(xp,c_o),e(x,f_o),e(x,Rs),e(Rs,gse),e(gse,m_o),e(Rs,g_o),e(Rs,qI),e(qI,h_o),e(Rs,p_o),e(Rs,NI),e(NI,__o),e(Rs,u_o),e(x,b_o),e(x,$p),e($p,hse),e(hse,v_o),e($p,F_o),e($p,jI),e(jI,T_o),e($p,M_o),e(x,E_o),e(x,kp),e(kp,pse),e(pse,C_o),e(kp,w_o),e(kp,DI),e(DI,A_o),e(kp,y_o),e(x,L_o),e(x,Sp),e(Sp,_se),e(_se,x_o),e(Sp,$_o),e(Sp,GI),e(GI,k_o),e(Sp,S_o),e(x,R_o),e(x,Rp),e(Rp,use),e(use,P_o),e(Rp,B_o),e(Rp,OI),e(OI,I_o),e(Rp,q_o),e(x,N_o),e(x,Pp),e(Pp,bse),e(bse,j_o),e(Pp,D_o),e(Pp,VI),e(VI,G_o),e(Pp,O_o),e(x,V_o),e(x,Bp),e(Bp,vse),e(vse,X_o),e(Bp,z_o),e(Bp,XI),e(XI,W_o),e(Bp,Q_o),e(x,H_o),e(x,Ip),e(Ip,Fse),e(Fse,U_o),e(Ip,J_o),e(Ip,zI),e(zI,Y_o),e(Ip,K_o),e(x,Z_o),e(x,qp),e(qp,Tse),e(Tse,euo),e(qp,ouo),e(qp,WI),e(WI,ruo),e(qp,tuo),e(x,auo),e(x,Np),e(Np,Mse),e(Mse,nuo),e(Np,suo),e(Np,QI),e(QI,luo),e(Np,iuo),e(x,duo),e(x,jp),e(jp,Ese),e(Ese,cuo),e(jp,fuo),e(jp,HI),e(HI,muo),e(jp,guo),e(x,huo),e(x,Dp),e(Dp,Cse),e(Cse,puo),e(Dp,_uo),e(Dp,UI),e(UI,uuo),e(Dp,buo),e(x,vuo),e(x,Gp),e(Gp,wse),e(wse,Fuo),e(Gp,Tuo),e(Gp,JI),e(JI,Muo),e(Gp,Euo),e(x,Cuo),e(x,Op),e(Op,Ase),e(Ase,wuo),e(Op,Auo),e(Op,YI),e(YI,yuo),e(Op,Luo),e(x,xuo),e(x,Vp),e(Vp,yse),e(yse,$uo),e(Vp,kuo),e(Vp,KI),e(KI,Suo),e(Vp,Ruo),e(x,Puo),e(x,Xp),e(Xp,Lse),e(Lse,Buo),e(Xp,Iuo),e(Xp,ZI),e(ZI,quo),e(Xp,Nuo),e(x,juo),e(x,zp),e(zp,xse),e(xse,Duo),e(zp,Guo),e(zp,eq),e(eq,Ouo),e(zp,Vuo),e(x,Xuo),e(x,Wp),e(Wp,$se),e($se,zuo),e(Wp,Wuo),e(Wp,oq),e(oq,Quo),e(Wp,Huo),e(x,Uuo),e(x,Qp),e(Qp,kse),e(kse,Juo),e(Qp,Yuo),e(Qp,rq),e(rq,Kuo),e(Qp,Zuo),e(x,e1o),e(x,Hp),e(Hp,Sse),e(Sse,o1o),e(Hp,r1o),e(Hp,tq),e(tq,t1o),e(Hp,a1o),e(x,n1o),e(x,Up),e(Up,Rse),e(Rse,s1o),e(Up,l1o),e(Up,aq),e(aq,i1o),e(Up,d1o),e(x,c1o),e(x,Jp),e(Jp,Pse),e(Pse,f1o),e(Jp,m1o),e(Jp,nq),e(nq,g1o),e(Jp,h1o),e(x,p1o),e(x,Yp),e(Yp,Bse),e(Bse,_1o),e(Yp,u1o),e(Yp,sq),e(sq,b1o),e(Yp,v1o),e(x,F1o),e(x,Kp),e(Kp,Ise),e(Ise,T1o),e(Kp,M1o),e(Kp,lq),e(lq,E1o),e(Kp,C1o),e(x,w1o),e(x,Zp),e(Zp,qse),e(qse,A1o),e(Zp,y1o),e(Zp,iq),e(iq,L1o),e(Zp,x1o),e(x,$1o),e(x,e_),e(e_,Nse),e(Nse,k1o),e(e_,S1o),e(e_,dq),e(dq,R1o),e(e_,P1o),e(x,B1o),e(x,o_),e(o_,jse),e(jse,I1o),e(o_,q1o),e(o_,cq),e(cq,N1o),e(o_,j1o),e(x,D1o),e(x,r_),e(r_,Dse),e(Dse,G1o),e(r_,O1o),e(r_,fq),e(fq,V1o),e(r_,X1o),e(x,z1o),e(x,t_),e(t_,Gse),e(Gse,W1o),e(t_,Q1o),e(t_,mq),e(mq,H1o),e(t_,U1o),e(x,J1o),e(x,a_),e(a_,Ose),e(Ose,Y1o),e(a_,K1o),e(a_,gq),e(gq,Z1o),e(a_,ebo),e(x,obo),e(x,n_),e(n_,Vse),e(Vse,rbo),e(n_,tbo),e(n_,hq),e(hq,abo),e(n_,nbo),e(x,sbo),e(x,s_),e(s_,Xse),e(Xse,lbo),e(s_,ibo),e(s_,pq),e(pq,dbo),e(s_,cbo),e(x,fbo),e(x,l_),e(l_,zse),e(zse,mbo),e(l_,gbo),e(l_,_q),e(_q,hbo),e(l_,pbo),e(x,_bo),e(x,i_),e(i_,Wse),e(Wse,ubo),e(i_,bbo),e(i_,uq),e(uq,vbo),e(i_,Fbo),e(x,Tbo),e(x,d_),e(d_,Qse),e(Qse,Mbo),e(d_,Ebo),e(d_,bq),e(bq,Cbo),e(d_,wbo),e(x,Abo),e(x,c_),e(c_,Hse),e(Hse,ybo),e(c_,Lbo),e(c_,vq),e(vq,xbo),e(c_,$bo),e(x,kbo),e(x,f_),e(f_,Use),e(Use,Sbo),e(f_,Rbo),e(f_,Fq),e(Fq,Pbo),e(f_,Bbo),e(x,Ibo),e(x,m_),e(m_,Jse),e(Jse,qbo),e(m_,Nbo),e(m_,Tq),e(Tq,jbo),e(m_,Dbo),e(x,Gbo),e(x,g_),e(g_,Yse),e(Yse,Obo),e(g_,Vbo),e(g_,Mq),e(Mq,Xbo),e(g_,zbo),e(x,Wbo),e(x,h_),e(h_,Kse),e(Kse,Qbo),e(h_,Hbo),e(h_,Eq),e(Eq,Ubo),e(h_,Jbo),e(x,Ybo),e(x,p_),e(p_,Zse),e(Zse,Kbo),e(p_,Zbo),e(p_,Cq),e(Cq,e2o),e(p_,o2o),e(x,r2o),e(x,__),e(__,ele),e(ele,t2o),e(__,a2o),e(__,wq),e(wq,n2o),e(__,s2o),e(x,l2o),e(x,u_),e(u_,ole),e(ole,i2o),e(u_,d2o),e(u_,Aq),e(Aq,c2o),e(u_,f2o),e(x,m2o),e(x,b_),e(b_,rle),e(rle,g2o),e(b_,h2o),e(b_,yq),e(yq,p2o),e(b_,_2o),e(x,u2o),e(x,v_),e(v_,tle),e(tle,b2o),e(v_,v2o),e(v_,Lq),e(Lq,F2o),e(v_,T2o),e(x,M2o),e(x,F_),e(F_,ale),e(ale,E2o),e(F_,C2o),e(F_,xq),e(xq,w2o),e(F_,A2o),e(x,y2o),e(x,T_),e(T_,nle),e(nle,L2o),e(T_,x2o),e(T_,$q),e($q,$2o),e(T_,k2o),e(x,S2o),e(x,M_),e(M_,sle),e(sle,R2o),e(M_,P2o),e(M_,kq),e(kq,B2o),e(M_,I2o),e(x,q2o),e(x,E_),e(E_,lle),e(lle,N2o),e(E_,j2o),e(E_,Sq),e(Sq,D2o),e(E_,G2o),e(x,O2o),e(x,C_),e(C_,ile),e(ile,V2o),e(C_,X2o),e(C_,Rq),e(Rq,z2o),e(C_,W2o),e(x,Q2o),e(x,w_),e(w_,dle),e(dle,H2o),e(w_,U2o),e(w_,Pq),e(Pq,J2o),e(w_,Y2o),e(x,K2o),e(x,A_),e(A_,cle),e(cle,Z2o),e(A_,e4o),e(A_,Bq),e(Bq,o4o),e(A_,r4o),e(x,t4o),e(x,y_),e(y_,fle),e(fle,a4o),e(y_,n4o),e(y_,Iq),e(Iq,s4o),e(y_,l4o),e(x,i4o),e(x,L_),e(L_,mle),e(mle,d4o),e(L_,c4o),e(L_,qq),e(qq,f4o),e(L_,m4o),e(x,g4o),e(x,x_),e(x_,gle),e(gle,h4o),e(x_,p4o),e(x_,Nq),e(Nq,_4o),e(x_,u4o),e(x,b4o),e(x,$_),e($_,hle),e(hle,v4o),e($_,F4o),e($_,jq),e(jq,T4o),e($_,M4o),e(x,E4o),e(x,k_),e(k_,ple),e(ple,C4o),e(k_,w4o),e(k_,Dq),e(Dq,A4o),e(k_,y4o),e(x,L4o),e(x,S_),e(S_,_le),e(_le,x4o),e(S_,$4o),e(S_,Gq),e(Gq,k4o),e(S_,S4o),e(x,R4o),e(x,R_),e(R_,ule),e(ule,P4o),e(R_,B4o),e(R_,Oq),e(Oq,I4o),e(R_,q4o),e(x,N4o),e(x,P_),e(P_,ble),e(ble,j4o),e(P_,D4o),e(P_,Vq),e(Vq,G4o),e(P_,O4o),e(x,V4o),e(x,B_),e(B_,vle),e(vle,X4o),e(B_,z4o),e(B_,Xq),e(Xq,W4o),e(B_,Q4o),e(x,H4o),e(x,I_),e(I_,Fle),e(Fle,U4o),e(I_,J4o),e(I_,zq),e(zq,Y4o),e(I_,K4o),e(x,Z4o),e(x,q_),e(q_,Tle),e(Tle,e5o),e(q_,o5o),e(q_,Wq),e(Wq,r5o),e(q_,t5o),e(x,a5o),e(x,N_),e(N_,Mle),e(Mle,n5o),e(N_,s5o),e(N_,Qq),e(Qq,l5o),e(N_,i5o),e(x,d5o),e(x,j_),e(j_,Ele),e(Ele,c5o),e(j_,f5o),e(j_,Hq),e(Hq,m5o),e(j_,g5o),e(x,h5o),e(x,D_),e(D_,Cle),e(Cle,p5o),e(D_,_5o),e(D_,Uq),e(Uq,u5o),e(D_,b5o),e(x,v5o),e(x,G_),e(G_,wle),e(wle,F5o),e(G_,T5o),e(G_,Jq),e(Jq,M5o),e(G_,E5o),e(x,C5o),e(x,O_),e(O_,Ale),e(Ale,w5o),e(O_,A5o),e(O_,Yq),e(Yq,y5o),e(O_,L5o),e(Je,x5o),e(Je,V_),e(V_,$5o),e(V_,yle),e(yle,k5o),e(V_,S5o),e(V_,Lle),e(Lle,R5o),e(Je,P5o),M(X_,Je,null),b(f,sqe,u),b(f,yi,u),e(yi,z_),e(z_,xle),M(Vy,xle,null),e(yi,B5o),e(yi,$le),e($le,I5o),b(f,lqe,u),b(f,xo,u),M(Xy,xo,null),e(xo,q5o),e(xo,Li),e(Li,N5o),e(Li,Kq),e(Kq,j5o),e(Li,D5o),e(Li,Zq),e(Zq,G5o),e(Li,O5o),e(xo,V5o),e(xo,zy),e(zy,X5o),e(zy,kle),e(kle,z5o),e(zy,W5o),e(xo,Q5o),e(xo,at),M(Wy,at,null),e(at,H5o),e(at,Sle),e(Sle,U5o),e(at,J5o),e(at,xi),e(xi,Y5o),e(xi,Rle),e(Rle,K5o),e(xi,Z5o),e(xi,eN),e(eN,evo),e(xi,ovo),e(at,rvo),M(W_,at,null),e(xo,tvo),e(xo,Ye),M(Qy,Ye,null),e(Ye,avo),e(Ye,Ple),e(Ple,nvo),e(Ye,svo),e(Ye,xa),e(xa,lvo),e(xa,Ble),e(Ble,ivo),e(xa,dvo),e(xa,Ile),e(Ile,cvo),e(xa,fvo),e(xa,qle),e(qle,mvo),e(xa,gvo),e(Ye,hvo),e(Ye,G),e(G,Q_),e(Q_,Nle),e(Nle,pvo),e(Q_,_vo),e(Q_,oN),e(oN,uvo),e(Q_,bvo),e(G,vvo),e(G,H_),e(H_,jle),e(jle,Fvo),e(H_,Tvo),e(H_,rN),e(rN,Mvo),e(H_,Evo),e(G,Cvo),e(G,U_),e(U_,Dle),e(Dle,wvo),e(U_,Avo),e(U_,tN),e(tN,yvo),e(U_,Lvo),e(G,xvo),e(G,J_),e(J_,Gle),e(Gle,$vo),e(J_,kvo),e(J_,aN),e(aN,Svo),e(J_,Rvo),e(G,Pvo),e(G,Y_),e(Y_,Ole),e(Ole,Bvo),e(Y_,Ivo),e(Y_,nN),e(nN,qvo),e(Y_,Nvo),e(G,jvo),e(G,K_),e(K_,Vle),e(Vle,Dvo),e(K_,Gvo),e(K_,sN),e(sN,Ovo),e(K_,Vvo),e(G,Xvo),e(G,Z_),e(Z_,Xle),e(Xle,zvo),e(Z_,Wvo),e(Z_,lN),e(lN,Qvo),e(Z_,Hvo),e(G,Uvo),e(G,eu),e(eu,zle),e(zle,Jvo),e(eu,Yvo),e(eu,iN),e(iN,Kvo),e(eu,Zvo),e(G,e3o),e(G,ou),e(ou,Wle),e(Wle,o3o),e(ou,r3o),e(ou,dN),e(dN,t3o),e(ou,a3o),e(G,n3o),e(G,ru),e(ru,Qle),e(Qle,s3o),e(ru,l3o),e(ru,cN),e(cN,i3o),e(ru,d3o),e(G,c3o),e(G,tu),e(tu,Hle),e(Hle,f3o),e(tu,m3o),e(tu,fN),e(fN,g3o),e(tu,h3o),e(G,p3o),e(G,au),e(au,Ule),e(Ule,_3o),e(au,u3o),e(au,mN),e(mN,b3o),e(au,v3o),e(G,F3o),e(G,nu),e(nu,Jle),e(Jle,T3o),e(nu,M3o),e(nu,gN),e(gN,E3o),e(nu,C3o),e(G,w3o),e(G,su),e(su,Yle),e(Yle,A3o),e(su,y3o),e(su,hN),e(hN,L3o),e(su,x3o),e(G,$3o),e(G,lu),e(lu,Kle),e(Kle,k3o),e(lu,S3o),e(lu,pN),e(pN,R3o),e(lu,P3o),e(G,B3o),e(G,iu),e(iu,Zle),e(Zle,I3o),e(iu,q3o),e(iu,_N),e(_N,N3o),e(iu,j3o),e(G,D3o),e(G,du),e(du,eie),e(eie,G3o),e(du,O3o),e(du,uN),e(uN,V3o),e(du,X3o),e(G,z3o),e(G,cu),e(cu,oie),e(oie,W3o),e(cu,Q3o),e(cu,bN),e(bN,H3o),e(cu,U3o),e(G,J3o),e(G,fu),e(fu,rie),e(rie,Y3o),e(fu,K3o),e(fu,vN),e(vN,Z3o),e(fu,eFo),e(G,oFo),e(G,mu),e(mu,tie),e(tie,rFo),e(mu,tFo),e(mu,FN),e(FN,aFo),e(mu,nFo),e(G,sFo),e(G,gu),e(gu,aie),e(aie,lFo),e(gu,iFo),e(gu,TN),e(TN,dFo),e(gu,cFo),e(G,fFo),e(G,hu),e(hu,nie),e(nie,mFo),e(hu,gFo),e(hu,MN),e(MN,hFo),e(hu,pFo),e(G,_Fo),e(G,pu),e(pu,sie),e(sie,uFo),e(pu,bFo),e(pu,EN),e(EN,vFo),e(pu,FFo),e(G,TFo),e(G,_u),e(_u,lie),e(lie,MFo),e(_u,EFo),e(_u,CN),e(CN,CFo),e(_u,wFo),e(G,AFo),e(G,uu),e(uu,iie),e(iie,yFo),e(uu,LFo),e(uu,wN),e(wN,xFo),e(uu,$Fo),e(G,kFo),e(G,bu),e(bu,die),e(die,SFo),e(bu,RFo),e(bu,AN),e(AN,PFo),e(bu,BFo),e(G,IFo),e(G,vu),e(vu,cie),e(cie,qFo),e(vu,NFo),e(vu,yN),e(yN,jFo),e(vu,DFo),e(G,GFo),e(G,Fu),e(Fu,fie),e(fie,OFo),e(Fu,VFo),e(Fu,LN),e(LN,XFo),e(Fu,zFo),e(G,WFo),e(G,Tu),e(Tu,mie),e(mie,QFo),e(Tu,HFo),e(Tu,xN),e(xN,UFo),e(Tu,JFo),e(G,YFo),e(G,Mu),e(Mu,gie),e(gie,KFo),e(Mu,ZFo),e(Mu,$N),e($N,e6o),e(Mu,o6o),e(G,r6o),e(G,Eu),e(Eu,hie),e(hie,t6o),e(Eu,a6o),e(Eu,kN),e(kN,n6o),e(Eu,s6o),e(G,l6o),e(G,Cu),e(Cu,pie),e(pie,i6o),e(Cu,d6o),e(Cu,SN),e(SN,c6o),e(Cu,f6o),e(G,m6o),e(G,wu),e(wu,_ie),e(_ie,g6o),e(wu,h6o),e(wu,RN),e(RN,p6o),e(wu,_6o),e(G,u6o),e(G,Au),e(Au,uie),e(uie,b6o),e(Au,v6o),e(Au,PN),e(PN,F6o),e(Au,T6o),e(G,M6o),e(G,yu),e(yu,bie),e(bie,E6o),e(yu,C6o),e(yu,BN),e(BN,w6o),e(yu,A6o),e(G,y6o),e(G,Lu),e(Lu,vie),e(vie,L6o),e(Lu,x6o),e(Lu,IN),e(IN,$6o),e(Lu,k6o),e(G,S6o),e(G,xu),e(xu,Fie),e(Fie,R6o),e(xu,P6o),e(xu,qN),e(qN,B6o),e(xu,I6o),e(G,q6o),e(G,$u),e($u,Tie),e(Tie,N6o),e($u,j6o),e($u,NN),e(NN,D6o),e($u,G6o),e(G,O6o),e(G,ku),e(ku,Mie),e(Mie,V6o),e(ku,X6o),e(ku,jN),e(jN,z6o),e(ku,W6o),e(G,Q6o),e(G,Su),e(Su,Eie),e(Eie,H6o),e(Su,U6o),e(Su,DN),e(DN,J6o),e(Su,Y6o),e(G,K6o),e(G,Ru),e(Ru,Cie),e(Cie,Z6o),e(Ru,eTo),e(Ru,GN),e(GN,oTo),e(Ru,rTo),e(G,tTo),e(G,Pu),e(Pu,wie),e(wie,aTo),e(Pu,nTo),e(Pu,ON),e(ON,sTo),e(Pu,lTo),e(Ye,iTo),e(Ye,Bu),e(Bu,dTo),e(Bu,Aie),e(Aie,cTo),e(Bu,fTo),e(Bu,yie),e(yie,mTo),e(Ye,gTo),M(Iu,Ye,null),b(f,iqe,u),b(f,$i,u),e($i,qu),e(qu,Lie),M(Hy,Lie,null),e($i,hTo),e($i,xie),e(xie,pTo),b(f,dqe,u),b(f,$o,u),M(Uy,$o,null),e($o,_To),e($o,ki),e(ki,uTo),e(ki,VN),e(VN,bTo),e(ki,vTo),e(ki,XN),e(XN,FTo),e(ki,TTo),e($o,MTo),e($o,Jy),e(Jy,ETo),e(Jy,$ie),e($ie,CTo),e(Jy,wTo),e($o,ATo),e($o,nt),M(Yy,nt,null),e(nt,yTo),e(nt,kie),e(kie,LTo),e(nt,xTo),e(nt,Si),e(Si,$To),e(Si,Sie),e(Sie,kTo),e(Si,STo),e(Si,zN),e(zN,RTo),e(Si,PTo),e(nt,BTo),M(Nu,nt,null),e($o,ITo),e($o,Ke),M(Ky,Ke,null),e(Ke,qTo),e(Ke,Rie),e(Rie,NTo),e(Ke,jTo),e(Ke,$a),e($a,DTo),e($a,Pie),e(Pie,GTo),e($a,OTo),e($a,Bie),e(Bie,VTo),e($a,XTo),e($a,Iie),e(Iie,zTo),e($a,WTo),e(Ke,QTo),e(Ke,z),e(z,ju),e(ju,qie),e(qie,HTo),e(ju,UTo),e(ju,WN),e(WN,JTo),e(ju,YTo),e(z,KTo),e(z,Du),e(Du,Nie),e(Nie,ZTo),e(Du,eMo),e(Du,QN),e(QN,oMo),e(Du,rMo),e(z,tMo),e(z,Gu),e(Gu,jie),e(jie,aMo),e(Gu,nMo),e(Gu,HN),e(HN,sMo),e(Gu,lMo),e(z,iMo),e(z,Ou),e(Ou,Die),e(Die,dMo),e(Ou,cMo),e(Ou,UN),e(UN,fMo),e(Ou,mMo),e(z,gMo),e(z,Vu),e(Vu,Gie),e(Gie,hMo),e(Vu,pMo),e(Vu,JN),e(JN,_Mo),e(Vu,uMo),e(z,bMo),e(z,Xu),e(Xu,Oie),e(Oie,vMo),e(Xu,FMo),e(Xu,YN),e(YN,TMo),e(Xu,MMo),e(z,EMo),e(z,zu),e(zu,Vie),e(Vie,CMo),e(zu,wMo),e(zu,KN),e(KN,AMo),e(zu,yMo),e(z,LMo),e(z,Wu),e(Wu,Xie),e(Xie,xMo),e(Wu,$Mo),e(Wu,ZN),e(ZN,kMo),e(Wu,SMo),e(z,RMo),e(z,Qu),e(Qu,zie),e(zie,PMo),e(Qu,BMo),e(Qu,ej),e(ej,IMo),e(Qu,qMo),e(z,NMo),e(z,Hu),e(Hu,Wie),e(Wie,jMo),e(Hu,DMo),e(Hu,oj),e(oj,GMo),e(Hu,OMo),e(z,VMo),e(z,Uu),e(Uu,Qie),e(Qie,XMo),e(Uu,zMo),e(Uu,rj),e(rj,WMo),e(Uu,QMo),e(z,HMo),e(z,Ju),e(Ju,Hie),e(Hie,UMo),e(Ju,JMo),e(Ju,tj),e(tj,YMo),e(Ju,KMo),e(z,ZMo),e(z,Yu),e(Yu,Uie),e(Uie,eEo),e(Yu,oEo),e(Yu,aj),e(aj,rEo),e(Yu,tEo),e(z,aEo),e(z,Ku),e(Ku,Jie),e(Jie,nEo),e(Ku,sEo),e(Ku,nj),e(nj,lEo),e(Ku,iEo),e(z,dEo),e(z,Zu),e(Zu,Yie),e(Yie,cEo),e(Zu,fEo),e(Zu,sj),e(sj,mEo),e(Zu,gEo),e(z,hEo),e(z,e1),e(e1,Kie),e(Kie,pEo),e(e1,_Eo),e(e1,lj),e(lj,uEo),e(e1,bEo),e(z,vEo),e(z,o1),e(o1,Zie),e(Zie,FEo),e(o1,TEo),e(o1,ij),e(ij,MEo),e(o1,EEo),e(z,CEo),e(z,r1),e(r1,ede),e(ede,wEo),e(r1,AEo),e(r1,dj),e(dj,yEo),e(r1,LEo),e(z,xEo),e(z,t1),e(t1,ode),e(ode,$Eo),e(t1,kEo),e(t1,cj),e(cj,SEo),e(t1,REo),e(z,PEo),e(z,a1),e(a1,rde),e(rde,BEo),e(a1,IEo),e(a1,fj),e(fj,qEo),e(a1,NEo),e(z,jEo),e(z,n1),e(n1,tde),e(tde,DEo),e(n1,GEo),e(n1,mj),e(mj,OEo),e(n1,VEo),e(z,XEo),e(z,s1),e(s1,ade),e(ade,zEo),e(s1,WEo),e(s1,gj),e(gj,QEo),e(s1,HEo),e(z,UEo),e(z,l1),e(l1,nde),e(nde,JEo),e(l1,YEo),e(l1,hj),e(hj,KEo),e(l1,ZEo),e(z,eCo),e(z,i1),e(i1,sde),e(sde,oCo),e(i1,rCo),e(i1,pj),e(pj,tCo),e(i1,aCo),e(z,nCo),e(z,d1),e(d1,lde),e(lde,sCo),e(d1,lCo),e(d1,_j),e(_j,iCo),e(d1,dCo),e(z,cCo),e(z,c1),e(c1,ide),e(ide,fCo),e(c1,mCo),e(c1,uj),e(uj,gCo),e(c1,hCo),e(z,pCo),e(z,f1),e(f1,dde),e(dde,_Co),e(f1,uCo),e(f1,bj),e(bj,bCo),e(f1,vCo),e(z,FCo),e(z,m1),e(m1,cde),e(cde,TCo),e(m1,MCo),e(m1,vj),e(vj,ECo),e(m1,CCo),e(z,wCo),e(z,g1),e(g1,fde),e(fde,ACo),e(g1,yCo),e(g1,Fj),e(Fj,LCo),e(g1,xCo),e(z,$Co),e(z,h1),e(h1,mde),e(mde,kCo),e(h1,SCo),e(h1,Tj),e(Tj,RCo),e(h1,PCo),e(z,BCo),e(z,p1),e(p1,gde),e(gde,ICo),e(p1,qCo),e(p1,Mj),e(Mj,NCo),e(p1,jCo),e(z,DCo),e(z,_1),e(_1,hde),e(hde,GCo),e(_1,OCo),e(_1,Ej),e(Ej,VCo),e(_1,XCo),e(z,zCo),e(z,u1),e(u1,pde),e(pde,WCo),e(u1,QCo),e(u1,Cj),e(Cj,HCo),e(u1,UCo),e(z,JCo),e(z,b1),e(b1,_de),e(_de,YCo),e(b1,KCo),e(b1,wj),e(wj,ZCo),e(b1,ewo),e(z,owo),e(z,v1),e(v1,ude),e(ude,rwo),e(v1,two),e(v1,Aj),e(Aj,awo),e(v1,nwo),e(z,swo),e(z,F1),e(F1,bde),e(bde,lwo),e(F1,iwo),e(F1,yj),e(yj,dwo),e(F1,cwo),e(Ke,fwo),e(Ke,T1),e(T1,mwo),e(T1,vde),e(vde,gwo),e(T1,hwo),e(T1,Fde),e(Fde,pwo),e(Ke,_wo),M(M1,Ke,null),b(f,cqe,u),b(f,Ri,u),e(Ri,E1),e(E1,Tde),M(Zy,Tde,null),e(Ri,uwo),e(Ri,Mde),e(Mde,bwo),b(f,fqe,u),b(f,ko,u),M(eL,ko,null),e(ko,vwo),e(ko,Pi),e(Pi,Fwo),e(Pi,Lj),e(Lj,Two),e(Pi,Mwo),e(Pi,xj),e(xj,Ewo),e(Pi,Cwo),e(ko,wwo),e(ko,oL),e(oL,Awo),e(oL,Ede),e(Ede,ywo),e(oL,Lwo),e(ko,xwo),e(ko,st),M(rL,st,null),e(st,$wo),e(st,Cde),e(Cde,kwo),e(st,Swo),e(st,Bi),e(Bi,Rwo),e(Bi,wde),e(wde,Pwo),e(Bi,Bwo),e(Bi,$j),e($j,Iwo),e(Bi,qwo),e(st,Nwo),M(C1,st,null),e(ko,jwo),e(ko,Ze),M(tL,Ze,null),e(Ze,Dwo),e(Ze,Ade),e(Ade,Gwo),e(Ze,Owo),e(Ze,ka),e(ka,Vwo),e(ka,yde),e(yde,Xwo),e(ka,zwo),e(ka,Lde),e(Lde,Wwo),e(ka,Qwo),e(ka,xde),e(xde,Hwo),e(ka,Uwo),e(Ze,Jwo),e(Ze,W),e(W,w1),e(w1,$de),e($de,Ywo),e(w1,Kwo),e(w1,kj),e(kj,Zwo),e(w1,e0o),e(W,o0o),e(W,A1),e(A1,kde),e(kde,r0o),e(A1,t0o),e(A1,Sj),e(Sj,a0o),e(A1,n0o),e(W,s0o),e(W,y1),e(y1,Sde),e(Sde,l0o),e(y1,i0o),e(y1,Rj),e(Rj,d0o),e(y1,c0o),e(W,f0o),e(W,L1),e(L1,Rde),e(Rde,m0o),e(L1,g0o),e(L1,Pj),e(Pj,h0o),e(L1,p0o),e(W,_0o),e(W,x1),e(x1,Pde),e(Pde,u0o),e(x1,b0o),e(x1,Bj),e(Bj,v0o),e(x1,F0o),e(W,T0o),e(W,$1),e($1,Bde),e(Bde,M0o),e($1,E0o),e($1,Ij),e(Ij,C0o),e($1,w0o),e(W,A0o),e(W,k1),e(k1,Ide),e(Ide,y0o),e(k1,L0o),e(k1,qj),e(qj,x0o),e(k1,$0o),e(W,k0o),e(W,S1),e(S1,qde),e(qde,S0o),e(S1,R0o),e(S1,Nj),e(Nj,P0o),e(S1,B0o),e(W,I0o),e(W,R1),e(R1,Nde),e(Nde,q0o),e(R1,N0o),e(R1,jj),e(jj,j0o),e(R1,D0o),e(W,G0o),e(W,P1),e(P1,jde),e(jde,O0o),e(P1,V0o),e(P1,Dj),e(Dj,X0o),e(P1,z0o),e(W,W0o),e(W,B1),e(B1,Dde),e(Dde,Q0o),e(B1,H0o),e(B1,Gj),e(Gj,U0o),e(B1,J0o),e(W,Y0o),e(W,I1),e(I1,Gde),e(Gde,K0o),e(I1,Z0o),e(I1,Oj),e(Oj,eAo),e(I1,oAo),e(W,rAo),e(W,q1),e(q1,Ode),e(Ode,tAo),e(q1,aAo),e(q1,Vj),e(Vj,nAo),e(q1,sAo),e(W,lAo),e(W,N1),e(N1,Vde),e(Vde,iAo),e(N1,dAo),e(N1,Xj),e(Xj,cAo),e(N1,fAo),e(W,mAo),e(W,j1),e(j1,Xde),e(Xde,gAo),e(j1,hAo),e(j1,zj),e(zj,pAo),e(j1,_Ao),e(W,uAo),e(W,D1),e(D1,zde),e(zde,bAo),e(D1,vAo),e(D1,Wj),e(Wj,FAo),e(D1,TAo),e(W,MAo),e(W,G1),e(G1,Wde),e(Wde,EAo),e(G1,CAo),e(G1,Qj),e(Qj,wAo),e(G1,AAo),e(W,yAo),e(W,O1),e(O1,Qde),e(Qde,LAo),e(O1,xAo),e(O1,Hj),e(Hj,$Ao),e(O1,kAo),e(W,SAo),e(W,V1),e(V1,Hde),e(Hde,RAo),e(V1,PAo),e(V1,Uj),e(Uj,BAo),e(V1,IAo),e(W,qAo),e(W,X1),e(X1,Ude),e(Ude,NAo),e(X1,jAo),e(X1,Jj),e(Jj,DAo),e(X1,GAo),e(W,OAo),e(W,z1),e(z1,Jde),e(Jde,VAo),e(z1,XAo),e(z1,Yj),e(Yj,zAo),e(z1,WAo),e(W,QAo),e(W,W1),e(W1,Yde),e(Yde,HAo),e(W1,UAo),e(W1,Kj),e(Kj,JAo),e(W1,YAo),e(W,KAo),e(W,Q1),e(Q1,Kde),e(Kde,ZAo),e(Q1,eyo),e(Q1,Zj),e(Zj,oyo),e(Q1,ryo),e(W,tyo),e(W,H1),e(H1,Zde),e(Zde,ayo),e(H1,nyo),e(H1,eD),e(eD,syo),e(H1,lyo),e(W,iyo),e(W,U1),e(U1,ece),e(ece,dyo),e(U1,cyo),e(U1,oD),e(oD,fyo),e(U1,myo),e(W,gyo),e(W,J1),e(J1,oce),e(oce,hyo),e(J1,pyo),e(J1,rD),e(rD,_yo),e(J1,uyo),e(W,byo),e(W,Y1),e(Y1,rce),e(rce,vyo),e(Y1,Fyo),e(Y1,tD),e(tD,Tyo),e(Y1,Myo),e(W,Eyo),e(W,K1),e(K1,tce),e(tce,Cyo),e(K1,wyo),e(K1,aD),e(aD,Ayo),e(K1,yyo),e(W,Lyo),e(W,Z1),e(Z1,ace),e(ace,xyo),e(Z1,$yo),e(Z1,nD),e(nD,kyo),e(Z1,Syo),e(W,Ryo),e(W,eb),e(eb,nce),e(nce,Pyo),e(eb,Byo),e(eb,sD),e(sD,Iyo),e(eb,qyo),e(W,Nyo),e(W,ob),e(ob,sce),e(sce,jyo),e(ob,Dyo),e(ob,lce),e(lce,Gyo),e(ob,Oyo),e(W,Vyo),e(W,rb),e(rb,ice),e(ice,Xyo),e(rb,zyo),e(rb,lD),e(lD,Wyo),e(rb,Qyo),e(W,Hyo),e(W,tb),e(tb,dce),e(dce,Uyo),e(tb,Jyo),e(tb,iD),e(iD,Yyo),e(tb,Kyo),e(W,Zyo),e(W,ab),e(ab,cce),e(cce,eLo),e(ab,oLo),e(ab,dD),e(dD,rLo),e(ab,tLo),e(W,aLo),e(W,nb),e(nb,fce),e(fce,nLo),e(nb,sLo),e(nb,cD),e(cD,lLo),e(nb,iLo),e(Ze,dLo),e(Ze,sb),e(sb,cLo),e(sb,mce),e(mce,fLo),e(sb,mLo),e(sb,gce),e(gce,gLo),e(Ze,hLo),M(lb,Ze,null),b(f,mqe,u),b(f,Ii,u),e(Ii,ib),e(ib,hce),M(aL,hce,null),e(Ii,pLo),e(Ii,pce),e(pce,_Lo),b(f,gqe,u),b(f,So,u),M(nL,So,null),e(So,uLo),e(So,qi),e(qi,bLo),e(qi,fD),e(fD,vLo),e(qi,FLo),e(qi,mD),e(mD,TLo),e(qi,MLo),e(So,ELo),e(So,sL),e(sL,CLo),e(sL,_ce),e(_ce,wLo),e(sL,ALo),e(So,yLo),e(So,lt),M(lL,lt,null),e(lt,LLo),e(lt,uce),e(uce,xLo),e(lt,$Lo),e(lt,Ni),e(Ni,kLo),e(Ni,bce),e(bce,SLo),e(Ni,RLo),e(Ni,gD),e(gD,PLo),e(Ni,BLo),e(lt,ILo),M(db,lt,null),e(So,qLo),e(So,eo),M(iL,eo,null),e(eo,NLo),e(eo,vce),e(vce,jLo),e(eo,DLo),e(eo,Sa),e(Sa,GLo),e(Sa,Fce),e(Fce,OLo),e(Sa,VLo),e(Sa,Tce),e(Tce,XLo),e(Sa,zLo),e(Sa,Mce),e(Mce,WLo),e(Sa,QLo),e(eo,HLo),e(eo,_e),e(_e,cb),e(cb,Ece),e(Ece,ULo),e(cb,JLo),e(cb,hD),e(hD,YLo),e(cb,KLo),e(_e,ZLo),e(_e,fb),e(fb,Cce),e(Cce,e8o),e(fb,o8o),e(fb,pD),e(pD,r8o),e(fb,t8o),e(_e,a8o),e(_e,mb),e(mb,wce),e(wce,n8o),e(mb,s8o),e(mb,_D),e(_D,l8o),e(mb,i8o),e(_e,d8o),e(_e,gb),e(gb,Ace),e(Ace,c8o),e(gb,f8o),e(gb,uD),e(uD,m8o),e(gb,g8o),e(_e,h8o),e(_e,hb),e(hb,yce),e(yce,p8o),e(hb,_8o),e(hb,bD),e(bD,u8o),e(hb,b8o),e(_e,v8o),e(_e,pb),e(pb,Lce),e(Lce,F8o),e(pb,T8o),e(pb,vD),e(vD,M8o),e(pb,E8o),e(_e,C8o),e(_e,_b),e(_b,xce),e(xce,w8o),e(_b,A8o),e(_b,FD),e(FD,y8o),e(_b,L8o),e(_e,x8o),e(_e,ub),e(ub,$ce),e($ce,$8o),e(ub,k8o),e(ub,TD),e(TD,S8o),e(ub,R8o),e(_e,P8o),e(_e,bb),e(bb,kce),e(kce,B8o),e(bb,I8o),e(bb,MD),e(MD,q8o),e(bb,N8o),e(_e,j8o),e(_e,vb),e(vb,Sce),e(Sce,D8o),e(vb,G8o),e(vb,ED),e(ED,O8o),e(vb,V8o),e(_e,X8o),e(_e,Fb),e(Fb,Rce),e(Rce,z8o),e(Fb,W8o),e(Fb,CD),e(CD,Q8o),e(Fb,H8o),e(_e,U8o),e(_e,Tb),e(Tb,Pce),e(Pce,J8o),e(Tb,Y8o),e(Tb,wD),e(wD,K8o),e(Tb,Z8o),e(_e,e7o),e(_e,Mb),e(Mb,Bce),e(Bce,o7o),e(Mb,r7o),e(Mb,AD),e(AD,t7o),e(Mb,a7o),e(_e,n7o),e(_e,Eb),e(Eb,Ice),e(Ice,s7o),e(Eb,l7o),e(Eb,yD),e(yD,i7o),e(Eb,d7o),e(_e,c7o),e(_e,Cb),e(Cb,qce),e(qce,f7o),e(Cb,m7o),e(Cb,LD),e(LD,g7o),e(Cb,h7o),e(_e,p7o),e(_e,wb),e(wb,Nce),e(Nce,_7o),e(wb,u7o),e(wb,xD),e(xD,b7o),e(wb,v7o),e(eo,F7o),e(eo,Ab),e(Ab,T7o),e(Ab,jce),e(jce,M7o),e(Ab,E7o),e(Ab,Dce),e(Dce,C7o),e(eo,w7o),M(yb,eo,null),b(f,hqe,u),b(f,ji,u),e(ji,Lb),e(Lb,Gce),M(dL,Gce,null),e(ji,A7o),e(ji,Oce),e(Oce,y7o),b(f,pqe,u),b(f,Ro,u),M(cL,Ro,null),e(Ro,L7o),e(Ro,Di),e(Di,x7o),e(Di,$D),e($D,$7o),e(Di,k7o),e(Di,kD),e(kD,S7o),e(Di,R7o),e(Ro,P7o),e(Ro,fL),e(fL,B7o),e(fL,Vce),e(Vce,I7o),e(fL,q7o),e(Ro,N7o),e(Ro,it),M(mL,it,null),e(it,j7o),e(it,Xce),e(Xce,D7o),e(it,G7o),e(it,Gi),e(Gi,O7o),e(Gi,zce),e(zce,V7o),e(Gi,X7o),e(Gi,SD),e(SD,z7o),e(Gi,W7o),e(it,Q7o),M(xb,it,null),e(Ro,H7o),e(Ro,oo),M(gL,oo,null),e(oo,U7o),e(oo,Wce),e(Wce,J7o),e(oo,Y7o),e(oo,Ra),e(Ra,K7o),e(Ra,Qce),e(Qce,Z7o),e(Ra,exo),e(Ra,Hce),e(Hce,oxo),e(Ra,rxo),e(Ra,Uce),e(Uce,txo),e(Ra,axo),e(oo,nxo),e(oo,N),e(N,$b),e($b,Jce),e(Jce,sxo),e($b,lxo),e($b,RD),e(RD,ixo),e($b,dxo),e(N,cxo),e(N,kb),e(kb,Yce),e(Yce,fxo),e(kb,mxo),e(kb,PD),e(PD,gxo),e(kb,hxo),e(N,pxo),e(N,Sb),e(Sb,Kce),e(Kce,_xo),e(Sb,uxo),e(Sb,BD),e(BD,bxo),e(Sb,vxo),e(N,Fxo),e(N,Rb),e(Rb,Zce),e(Zce,Txo),e(Rb,Mxo),e(Rb,ID),e(ID,Exo),e(Rb,Cxo),e(N,wxo),e(N,Pb),e(Pb,efe),e(efe,Axo),e(Pb,yxo),e(Pb,qD),e(qD,Lxo),e(Pb,xxo),e(N,$xo),e(N,Bb),e(Bb,ofe),e(ofe,kxo),e(Bb,Sxo),e(Bb,ND),e(ND,Rxo),e(Bb,Pxo),e(N,Bxo),e(N,Ib),e(Ib,rfe),e(rfe,Ixo),e(Ib,qxo),e(Ib,jD),e(jD,Nxo),e(Ib,jxo),e(N,Dxo),e(N,qb),e(qb,tfe),e(tfe,Gxo),e(qb,Oxo),e(qb,DD),e(DD,Vxo),e(qb,Xxo),e(N,zxo),e(N,Nb),e(Nb,afe),e(afe,Wxo),e(Nb,Qxo),e(Nb,GD),e(GD,Hxo),e(Nb,Uxo),e(N,Jxo),e(N,jb),e(jb,nfe),e(nfe,Yxo),e(jb,Kxo),e(jb,OD),e(OD,Zxo),e(jb,e9o),e(N,o9o),e(N,Db),e(Db,sfe),e(sfe,r9o),e(Db,t9o),e(Db,VD),e(VD,a9o),e(Db,n9o),e(N,s9o),e(N,Gb),e(Gb,lfe),e(lfe,l9o),e(Gb,i9o),e(Gb,XD),e(XD,d9o),e(Gb,c9o),e(N,f9o),e(N,Ob),e(Ob,ife),e(ife,m9o),e(Ob,g9o),e(Ob,zD),e(zD,h9o),e(Ob,p9o),e(N,_9o),e(N,Vb),e(Vb,dfe),e(dfe,u9o),e(Vb,b9o),e(Vb,WD),e(WD,v9o),e(Vb,F9o),e(N,T9o),e(N,Xb),e(Xb,cfe),e(cfe,M9o),e(Xb,E9o),e(Xb,QD),e(QD,C9o),e(Xb,w9o),e(N,A9o),e(N,zb),e(zb,ffe),e(ffe,y9o),e(zb,L9o),e(zb,HD),e(HD,x9o),e(zb,$9o),e(N,k9o),e(N,Wb),e(Wb,mfe),e(mfe,S9o),e(Wb,R9o),e(Wb,UD),e(UD,P9o),e(Wb,B9o),e(N,I9o),e(N,Qb),e(Qb,gfe),e(gfe,q9o),e(Qb,N9o),e(Qb,JD),e(JD,j9o),e(Qb,D9o),e(N,G9o),e(N,Hb),e(Hb,hfe),e(hfe,O9o),e(Hb,V9o),e(Hb,YD),e(YD,X9o),e(Hb,z9o),e(N,W9o),e(N,Ub),e(Ub,pfe),e(pfe,Q9o),e(Ub,H9o),e(Ub,KD),e(KD,U9o),e(Ub,J9o),e(N,Y9o),e(N,Jb),e(Jb,_fe),e(_fe,K9o),e(Jb,Z9o),e(Jb,ZD),e(ZD,e$o),e(Jb,o$o),e(N,r$o),e(N,Yb),e(Yb,ufe),e(ufe,t$o),e(Yb,a$o),e(Yb,eG),e(eG,n$o),e(Yb,s$o),e(N,l$o),e(N,Kb),e(Kb,bfe),e(bfe,i$o),e(Kb,d$o),e(Kb,oG),e(oG,c$o),e(Kb,f$o),e(N,m$o),e(N,Zb),e(Zb,vfe),e(vfe,g$o),e(Zb,h$o),e(Zb,rG),e(rG,p$o),e(Zb,_$o),e(N,u$o),e(N,e2),e(e2,Ffe),e(Ffe,b$o),e(e2,v$o),e(e2,tG),e(tG,F$o),e(e2,T$o),e(N,M$o),e(N,o2),e(o2,Tfe),e(Tfe,E$o),e(o2,C$o),e(o2,aG),e(aG,w$o),e(o2,A$o),e(N,y$o),e(N,r2),e(r2,Mfe),e(Mfe,L$o),e(r2,x$o),e(r2,nG),e(nG,$$o),e(r2,k$o),e(N,S$o),e(N,t2),e(t2,Efe),e(Efe,R$o),e(t2,P$o),e(t2,sG),e(sG,B$o),e(t2,I$o),e(N,q$o),e(N,a2),e(a2,Cfe),e(Cfe,N$o),e(a2,j$o),e(a2,lG),e(lG,D$o),e(a2,G$o),e(N,O$o),e(N,n2),e(n2,wfe),e(wfe,V$o),e(n2,X$o),e(n2,iG),e(iG,z$o),e(n2,W$o),e(N,Q$o),e(N,s2),e(s2,Afe),e(Afe,H$o),e(s2,U$o),e(s2,dG),e(dG,J$o),e(s2,Y$o),e(N,K$o),e(N,l2),e(l2,yfe),e(yfe,Z$o),e(l2,eko),e(l2,cG),e(cG,oko),e(l2,rko),e(N,tko),e(N,i2),e(i2,Lfe),e(Lfe,ako),e(i2,nko),e(i2,fG),e(fG,sko),e(i2,lko),e(N,iko),e(N,d2),e(d2,xfe),e(xfe,dko),e(d2,cko),e(d2,mG),e(mG,fko),e(d2,mko),e(N,gko),e(N,c2),e(c2,$fe),e($fe,hko),e(c2,pko),e(c2,gG),e(gG,_ko),e(c2,uko),e(N,bko),e(N,f2),e(f2,kfe),e(kfe,vko),e(f2,Fko),e(f2,hG),e(hG,Tko),e(f2,Mko),e(N,Eko),e(N,m2),e(m2,Sfe),e(Sfe,Cko),e(m2,wko),e(m2,pG),e(pG,Ako),e(m2,yko),e(N,Lko),e(N,g2),e(g2,Rfe),e(Rfe,xko),e(g2,$ko),e(g2,_G),e(_G,kko),e(g2,Sko),e(N,Rko),e(N,h2),e(h2,Pfe),e(Pfe,Pko),e(h2,Bko),e(h2,uG),e(uG,Iko),e(h2,qko),e(N,Nko),e(N,p2),e(p2,Bfe),e(Bfe,jko),e(p2,Dko),e(p2,bG),e(bG,Gko),e(p2,Oko),e(N,Vko),e(N,_2),e(_2,Ife),e(Ife,Xko),e(_2,zko),e(_2,vG),e(vG,Wko),e(_2,Qko),e(N,Hko),e(N,u2),e(u2,qfe),e(qfe,Uko),e(u2,Jko),e(u2,FG),e(FG,Yko),e(u2,Kko),e(N,Zko),e(N,b2),e(b2,Nfe),e(Nfe,eSo),e(b2,oSo),e(b2,TG),e(TG,rSo),e(b2,tSo),e(N,aSo),e(N,v2),e(v2,jfe),e(jfe,nSo),e(v2,sSo),e(v2,MG),e(MG,lSo),e(v2,iSo),e(N,dSo),e(N,F2),e(F2,Dfe),e(Dfe,cSo),e(F2,fSo),e(F2,EG),e(EG,mSo),e(F2,gSo),e(N,hSo),e(N,T2),e(T2,Gfe),e(Gfe,pSo),e(T2,_So),e(T2,CG),e(CG,uSo),e(T2,bSo),e(oo,vSo),e(oo,M2),e(M2,FSo),e(M2,Ofe),e(Ofe,TSo),e(M2,MSo),e(M2,Vfe),e(Vfe,ESo),e(oo,CSo),M(E2,oo,null),b(f,_qe,u),b(f,Oi,u),e(Oi,C2),e(C2,Xfe),M(hL,Xfe,null),e(Oi,wSo),e(Oi,zfe),e(zfe,ASo),b(f,uqe,u),b(f,Po,u),M(pL,Po,null),e(Po,ySo),e(Po,Vi),e(Vi,LSo),e(Vi,wG),e(wG,xSo),e(Vi,$So),e(Vi,AG),e(AG,kSo),e(Vi,SSo),e(Po,RSo),e(Po,_L),e(_L,PSo),e(_L,Wfe),e(Wfe,BSo),e(_L,ISo),e(Po,qSo),e(Po,dt),M(uL,dt,null),e(dt,NSo),e(dt,Qfe),e(Qfe,jSo),e(dt,DSo),e(dt,Xi),e(Xi,GSo),e(Xi,Hfe),e(Hfe,OSo),e(Xi,VSo),e(Xi,yG),e(yG,XSo),e(Xi,zSo),e(dt,WSo),M(w2,dt,null),e(Po,QSo),e(Po,ro),M(bL,ro,null),e(ro,HSo),e(ro,Ufe),e(Ufe,USo),e(ro,JSo),e(ro,Pa),e(Pa,YSo),e(Pa,Jfe),e(Jfe,KSo),e(Pa,ZSo),e(Pa,Yfe),e(Yfe,eRo),e(Pa,oRo),e(Pa,Kfe),e(Kfe,rRo),e(Pa,tRo),e(ro,aRo),e(ro,Y),e(Y,A2),e(A2,Zfe),e(Zfe,nRo),e(A2,sRo),e(A2,LG),e(LG,lRo),e(A2,iRo),e(Y,dRo),e(Y,y2),e(y2,eme),e(eme,cRo),e(y2,fRo),e(y2,xG),e(xG,mRo),e(y2,gRo),e(Y,hRo),e(Y,L2),e(L2,ome),e(ome,pRo),e(L2,_Ro),e(L2,$G),e($G,uRo),e(L2,bRo),e(Y,vRo),e(Y,x2),e(x2,rme),e(rme,FRo),e(x2,TRo),e(x2,kG),e(kG,MRo),e(x2,ERo),e(Y,CRo),e(Y,$2),e($2,tme),e(tme,wRo),e($2,ARo),e($2,SG),e(SG,yRo),e($2,LRo),e(Y,xRo),e(Y,k2),e(k2,ame),e(ame,$Ro),e(k2,kRo),e(k2,RG),e(RG,SRo),e(k2,RRo),e(Y,PRo),e(Y,S2),e(S2,nme),e(nme,BRo),e(S2,IRo),e(S2,PG),e(PG,qRo),e(S2,NRo),e(Y,jRo),e(Y,R2),e(R2,sme),e(sme,DRo),e(R2,GRo),e(R2,BG),e(BG,ORo),e(R2,VRo),e(Y,XRo),e(Y,P2),e(P2,lme),e(lme,zRo),e(P2,WRo),e(P2,IG),e(IG,QRo),e(P2,HRo),e(Y,URo),e(Y,B2),e(B2,ime),e(ime,JRo),e(B2,YRo),e(B2,qG),e(qG,KRo),e(B2,ZRo),e(Y,ePo),e(Y,I2),e(I2,dme),e(dme,oPo),e(I2,rPo),e(I2,NG),e(NG,tPo),e(I2,aPo),e(Y,nPo),e(Y,q2),e(q2,cme),e(cme,sPo),e(q2,lPo),e(q2,jG),e(jG,iPo),e(q2,dPo),e(Y,cPo),e(Y,N2),e(N2,fme),e(fme,fPo),e(N2,mPo),e(N2,DG),e(DG,gPo),e(N2,hPo),e(Y,pPo),e(Y,j2),e(j2,mme),e(mme,_Po),e(j2,uPo),e(j2,GG),e(GG,bPo),e(j2,vPo),e(Y,FPo),e(Y,D2),e(D2,gme),e(gme,TPo),e(D2,MPo),e(D2,OG),e(OG,EPo),e(D2,CPo),e(Y,wPo),e(Y,G2),e(G2,hme),e(hme,APo),e(G2,yPo),e(G2,VG),e(VG,LPo),e(G2,xPo),e(Y,$Po),e(Y,O2),e(O2,pme),e(pme,kPo),e(O2,SPo),e(O2,XG),e(XG,RPo),e(O2,PPo),e(Y,BPo),e(Y,V2),e(V2,_me),e(_me,IPo),e(V2,qPo),e(V2,zG),e(zG,NPo),e(V2,jPo),e(Y,DPo),e(Y,X2),e(X2,ume),e(ume,GPo),e(X2,OPo),e(X2,WG),e(WG,VPo),e(X2,XPo),e(Y,zPo),e(Y,z2),e(z2,bme),e(bme,WPo),e(z2,QPo),e(z2,QG),e(QG,HPo),e(z2,UPo),e(Y,JPo),e(Y,W2),e(W2,vme),e(vme,YPo),e(W2,KPo),e(W2,HG),e(HG,ZPo),e(W2,eBo),e(Y,oBo),e(Y,Q2),e(Q2,Fme),e(Fme,rBo),e(Q2,tBo),e(Q2,UG),e(UG,aBo),e(Q2,nBo),e(Y,sBo),e(Y,H2),e(H2,Tme),e(Tme,lBo),e(H2,iBo),e(H2,JG),e(JG,dBo),e(H2,cBo),e(Y,fBo),e(Y,U2),e(U2,Mme),e(Mme,mBo),e(U2,gBo),e(U2,YG),e(YG,hBo),e(U2,pBo),e(Y,_Bo),e(Y,J2),e(J2,Eme),e(Eme,uBo),e(J2,bBo),e(J2,KG),e(KG,vBo),e(J2,FBo),e(Y,TBo),e(Y,Y2),e(Y2,Cme),e(Cme,MBo),e(Y2,EBo),e(Y2,ZG),e(ZG,CBo),e(Y2,wBo),e(Y,ABo),e(Y,K2),e(K2,wme),e(wme,yBo),e(K2,LBo),e(K2,eO),e(eO,xBo),e(K2,$Bo),e(Y,kBo),e(Y,Z2),e(Z2,Ame),e(Ame,SBo),e(Z2,RBo),e(Z2,oO),e(oO,PBo),e(Z2,BBo),e(Y,IBo),e(Y,e4),e(e4,yme),e(yme,qBo),e(e4,NBo),e(e4,rO),e(rO,jBo),e(e4,DBo),e(ro,GBo),e(ro,o4),e(o4,OBo),e(o4,Lme),e(Lme,VBo),e(o4,XBo),e(o4,xme),e(xme,zBo),e(ro,WBo),M(r4,ro,null),b(f,bqe,u),b(f,zi,u),e(zi,t4),e(t4,$me),M(vL,$me,null),e(zi,QBo),e(zi,kme),e(kme,HBo),b(f,vqe,u),b(f,Bo,u),M(FL,Bo,null),e(Bo,UBo),e(Bo,Wi),e(Wi,JBo),e(Wi,tO),e(tO,YBo),e(Wi,KBo),e(Wi,aO),e(aO,ZBo),e(Wi,eIo),e(Bo,oIo),e(Bo,TL),e(TL,rIo),e(TL,Sme),e(Sme,tIo),e(TL,aIo),e(Bo,nIo),e(Bo,ct),M(ML,ct,null),e(ct,sIo),e(ct,Rme),e(Rme,lIo),e(ct,iIo),e(ct,Qi),e(Qi,dIo),e(Qi,Pme),e(Pme,cIo),e(Qi,fIo),e(Qi,nO),e(nO,mIo),e(Qi,gIo),e(ct,hIo),M(a4,ct,null),e(Bo,pIo),e(Bo,to),M(EL,to,null),e(to,_Io),e(to,Bme),e(Bme,uIo),e(to,bIo),e(to,Ba),e(Ba,vIo),e(Ba,Ime),e(Ime,FIo),e(Ba,TIo),e(Ba,qme),e(qme,MIo),e(Ba,EIo),e(Ba,Nme),e(Nme,CIo),e(Ba,wIo),e(to,AIo),e(to,Yr),e(Yr,n4),e(n4,jme),e(jme,yIo),e(n4,LIo),e(n4,sO),e(sO,xIo),e(n4,$Io),e(Yr,kIo),e(Yr,s4),e(s4,Dme),e(Dme,SIo),e(s4,RIo),e(s4,lO),e(lO,PIo),e(s4,BIo),e(Yr,IIo),e(Yr,l4),e(l4,Gme),e(Gme,qIo),e(l4,NIo),e(l4,iO),e(iO,jIo),e(l4,DIo),e(Yr,GIo),e(Yr,i4),e(i4,Ome),e(Ome,OIo),e(i4,VIo),e(i4,dO),e(dO,XIo),e(i4,zIo),e(Yr,WIo),e(Yr,d4),e(d4,Vme),e(Vme,QIo),e(d4,HIo),e(d4,cO),e(cO,UIo),e(d4,JIo),e(to,YIo),e(to,c4),e(c4,KIo),e(c4,Xme),e(Xme,ZIo),e(c4,eqo),e(c4,zme),e(zme,oqo),e(to,rqo),M(f4,to,null),b(f,Fqe,u),b(f,Hi,u),e(Hi,m4),e(m4,Wme),M(CL,Wme,null),e(Hi,tqo),e(Hi,Qme),e(Qme,aqo),b(f,Tqe,u),b(f,Io,u),M(wL,Io,null),e(Io,nqo),e(Io,Ui),e(Ui,sqo),e(Ui,fO),e(fO,lqo),e(Ui,iqo),e(Ui,mO),e(mO,dqo),e(Ui,cqo),e(Io,fqo),e(Io,AL),e(AL,mqo),e(AL,Hme),e(Hme,gqo),e(AL,hqo),e(Io,pqo),e(Io,ft),M(yL,ft,null),e(ft,_qo),e(ft,Ume),e(Ume,uqo),e(ft,bqo),e(ft,Ji),e(Ji,vqo),e(Ji,Jme),e(Jme,Fqo),e(Ji,Tqo),e(Ji,gO),e(gO,Mqo),e(Ji,Eqo),e(ft,Cqo),M(g4,ft,null),e(Io,wqo),e(Io,ao),M(LL,ao,null),e(ao,Aqo),e(ao,Yme),e(Yme,yqo),e(ao,Lqo),e(ao,Ia),e(Ia,xqo),e(Ia,Kme),e(Kme,$qo),e(Ia,kqo),e(Ia,Zme),e(Zme,Sqo),e(Ia,Rqo),e(Ia,ege),e(ege,Pqo),e(Ia,Bqo),e(ao,Iqo),e(ao,U),e(U,h4),e(h4,oge),e(oge,qqo),e(h4,Nqo),e(h4,hO),e(hO,jqo),e(h4,Dqo),e(U,Gqo),e(U,p4),e(p4,rge),e(rge,Oqo),e(p4,Vqo),e(p4,pO),e(pO,Xqo),e(p4,zqo),e(U,Wqo),e(U,_4),e(_4,tge),e(tge,Qqo),e(_4,Hqo),e(_4,_O),e(_O,Uqo),e(_4,Jqo),e(U,Yqo),e(U,u4),e(u4,age),e(age,Kqo),e(u4,Zqo),e(u4,uO),e(uO,eNo),e(u4,oNo),e(U,rNo),e(U,b4),e(b4,nge),e(nge,tNo),e(b4,aNo),e(b4,bO),e(bO,nNo),e(b4,sNo),e(U,lNo),e(U,v4),e(v4,sge),e(sge,iNo),e(v4,dNo),e(v4,vO),e(vO,cNo),e(v4,fNo),e(U,mNo),e(U,F4),e(F4,lge),e(lge,gNo),e(F4,hNo),e(F4,FO),e(FO,pNo),e(F4,_No),e(U,uNo),e(U,T4),e(T4,ige),e(ige,bNo),e(T4,vNo),e(T4,TO),e(TO,FNo),e(T4,TNo),e(U,MNo),e(U,M4),e(M4,dge),e(dge,ENo),e(M4,CNo),e(M4,MO),e(MO,wNo),e(M4,ANo),e(U,yNo),e(U,E4),e(E4,cge),e(cge,LNo),e(E4,xNo),e(E4,EO),e(EO,$No),e(E4,kNo),e(U,SNo),e(U,C4),e(C4,fge),e(fge,RNo),e(C4,PNo),e(C4,CO),e(CO,BNo),e(C4,INo),e(U,qNo),e(U,w4),e(w4,mge),e(mge,NNo),e(w4,jNo),e(w4,wO),e(wO,DNo),e(w4,GNo),e(U,ONo),e(U,A4),e(A4,gge),e(gge,VNo),e(A4,XNo),e(A4,AO),e(AO,zNo),e(A4,WNo),e(U,QNo),e(U,y4),e(y4,hge),e(hge,HNo),e(y4,UNo),e(y4,yO),e(yO,JNo),e(y4,YNo),e(U,KNo),e(U,L4),e(L4,pge),e(pge,ZNo),e(L4,ejo),e(L4,LO),e(LO,ojo),e(L4,rjo),e(U,tjo),e(U,x4),e(x4,_ge),e(_ge,ajo),e(x4,njo),e(x4,xO),e(xO,sjo),e(x4,ljo),e(U,ijo),e(U,$4),e($4,uge),e(uge,djo),e($4,cjo),e($4,$O),e($O,fjo),e($4,mjo),e(U,gjo),e(U,k4),e(k4,bge),e(bge,hjo),e(k4,pjo),e(k4,kO),e(kO,_jo),e(k4,ujo),e(U,bjo),e(U,S4),e(S4,vge),e(vge,vjo),e(S4,Fjo),e(S4,SO),e(SO,Tjo),e(S4,Mjo),e(U,Ejo),e(U,R4),e(R4,Fge),e(Fge,Cjo),e(R4,wjo),e(R4,RO),e(RO,Ajo),e(R4,yjo),e(U,Ljo),e(U,P4),e(P4,Tge),e(Tge,xjo),e(P4,$jo),e(P4,PO),e(PO,kjo),e(P4,Sjo),e(U,Rjo),e(U,B4),e(B4,Mge),e(Mge,Pjo),e(B4,Bjo),e(B4,BO),e(BO,Ijo),e(B4,qjo),e(U,Njo),e(U,I4),e(I4,Ege),e(Ege,jjo),e(I4,Djo),e(I4,IO),e(IO,Gjo),e(I4,Ojo),e(U,Vjo),e(U,q4),e(q4,Cge),e(Cge,Xjo),e(q4,zjo),e(q4,qO),e(qO,Wjo),e(q4,Qjo),e(U,Hjo),e(U,N4),e(N4,wge),e(wge,Ujo),e(N4,Jjo),e(N4,NO),e(NO,Yjo),e(N4,Kjo),e(U,Zjo),e(U,j4),e(j4,Age),e(Age,eDo),e(j4,oDo),e(j4,jO),e(jO,rDo),e(j4,tDo),e(U,aDo),e(U,D4),e(D4,yge),e(yge,nDo),e(D4,sDo),e(D4,DO),e(DO,lDo),e(D4,iDo),e(U,dDo),e(U,G4),e(G4,Lge),e(Lge,cDo),e(G4,fDo),e(G4,GO),e(GO,mDo),e(G4,gDo),e(U,hDo),e(U,O4),e(O4,xge),e(xge,pDo),e(O4,_Do),e(O4,OO),e(OO,uDo),e(O4,bDo),e(U,vDo),e(U,V4),e(V4,$ge),e($ge,FDo),e(V4,TDo),e(V4,VO),e(VO,MDo),e(V4,EDo),e(U,CDo),e(U,X4),e(X4,kge),e(kge,wDo),e(X4,ADo),e(X4,XO),e(XO,yDo),e(X4,LDo),e(U,xDo),e(U,z4),e(z4,Sge),e(Sge,$Do),e(z4,kDo),e(z4,zO),e(zO,SDo),e(z4,RDo),e(U,PDo),e(U,W4),e(W4,Rge),e(Rge,BDo),e(W4,IDo),e(W4,WO),e(WO,qDo),e(W4,NDo),e(ao,jDo),e(ao,Q4),e(Q4,DDo),e(Q4,Pge),e(Pge,GDo),e(Q4,ODo),e(Q4,Bge),e(Bge,VDo),e(ao,XDo),M(H4,ao,null),b(f,Mqe,u),b(f,Yi,u),e(Yi,U4),e(U4,Ige),M(xL,Ige,null),e(Yi,zDo),e(Yi,qge),e(qge,WDo),b(f,Eqe,u),b(f,qo,u),M($L,qo,null),e(qo,QDo),e(qo,Ki),e(Ki,HDo),e(Ki,QO),e(QO,UDo),e(Ki,JDo),e(Ki,HO),e(HO,YDo),e(Ki,KDo),e(qo,ZDo),e(qo,kL),e(kL,eGo),e(kL,Nge),e(Nge,oGo),e(kL,rGo),e(qo,tGo),e(qo,mt),M(SL,mt,null),e(mt,aGo),e(mt,jge),e(jge,nGo),e(mt,sGo),e(mt,Zi),e(Zi,lGo),e(Zi,Dge),e(Dge,iGo),e(Zi,dGo),e(Zi,UO),e(UO,cGo),e(Zi,fGo),e(mt,mGo),M(J4,mt,null),e(qo,gGo),e(qo,no),M(RL,no,null),e(no,hGo),e(no,Gge),e(Gge,pGo),e(no,_Go),e(no,qa),e(qa,uGo),e(qa,Oge),e(Oge,bGo),e(qa,vGo),e(qa,Vge),e(Vge,FGo),e(qa,TGo),e(qa,Xge),e(Xge,MGo),e(qa,EGo),e(no,CGo),e(no,V),e(V,Y4),e(Y4,zge),e(zge,wGo),e(Y4,AGo),e(Y4,JO),e(JO,yGo),e(Y4,LGo),e(V,xGo),e(V,K4),e(K4,Wge),e(Wge,$Go),e(K4,kGo),e(K4,YO),e(YO,SGo),e(K4,RGo),e(V,PGo),e(V,Z4),e(Z4,Qge),e(Qge,BGo),e(Z4,IGo),e(Z4,KO),e(KO,qGo),e(Z4,NGo),e(V,jGo),e(V,e5),e(e5,Hge),e(Hge,DGo),e(e5,GGo),e(e5,ZO),e(ZO,OGo),e(e5,VGo),e(V,XGo),e(V,o5),e(o5,Uge),e(Uge,zGo),e(o5,WGo),e(o5,eV),e(eV,QGo),e(o5,HGo),e(V,UGo),e(V,r5),e(r5,Jge),e(Jge,JGo),e(r5,YGo),e(r5,oV),e(oV,KGo),e(r5,ZGo),e(V,eOo),e(V,t5),e(t5,Yge),e(Yge,oOo),e(t5,rOo),e(t5,rV),e(rV,tOo),e(t5,aOo),e(V,nOo),e(V,a5),e(a5,Kge),e(Kge,sOo),e(a5,lOo),e(a5,tV),e(tV,iOo),e(a5,dOo),e(V,cOo),e(V,n5),e(n5,Zge),e(Zge,fOo),e(n5,mOo),e(n5,aV),e(aV,gOo),e(n5,hOo),e(V,pOo),e(V,s5),e(s5,ehe),e(ehe,_Oo),e(s5,uOo),e(s5,nV),e(nV,bOo),e(s5,vOo),e(V,FOo),e(V,l5),e(l5,ohe),e(ohe,TOo),e(l5,MOo),e(l5,sV),e(sV,EOo),e(l5,COo),e(V,wOo),e(V,i5),e(i5,rhe),e(rhe,AOo),e(i5,yOo),e(i5,lV),e(lV,LOo),e(i5,xOo),e(V,$Oo),e(V,d5),e(d5,the),e(the,kOo),e(d5,SOo),e(d5,iV),e(iV,ROo),e(d5,POo),e(V,BOo),e(V,c5),e(c5,ahe),e(ahe,IOo),e(c5,qOo),e(c5,dV),e(dV,NOo),e(c5,jOo),e(V,DOo),e(V,f5),e(f5,nhe),e(nhe,GOo),e(f5,OOo),e(f5,cV),e(cV,VOo),e(f5,XOo),e(V,zOo),e(V,m5),e(m5,she),e(she,WOo),e(m5,QOo),e(m5,fV),e(fV,HOo),e(m5,UOo),e(V,JOo),e(V,g5),e(g5,lhe),e(lhe,YOo),e(g5,KOo),e(g5,mV),e(mV,ZOo),e(g5,eVo),e(V,oVo),e(V,h5),e(h5,ihe),e(ihe,rVo),e(h5,tVo),e(h5,gV),e(gV,aVo),e(h5,nVo),e(V,sVo),e(V,p5),e(p5,dhe),e(dhe,lVo),e(p5,iVo),e(p5,hV),e(hV,dVo),e(p5,cVo),e(V,fVo),e(V,_5),e(_5,che),e(che,mVo),e(_5,gVo),e(_5,pV),e(pV,hVo),e(_5,pVo),e(V,_Vo),e(V,u5),e(u5,fhe),e(fhe,uVo),e(u5,bVo),e(u5,_V),e(_V,vVo),e(u5,FVo),e(V,TVo),e(V,b5),e(b5,mhe),e(mhe,MVo),e(b5,EVo),e(b5,uV),e(uV,CVo),e(b5,wVo),e(V,AVo),e(V,v5),e(v5,ghe),e(ghe,yVo),e(v5,LVo),e(v5,bV),e(bV,xVo),e(v5,$Vo),e(V,kVo),e(V,F5),e(F5,hhe),e(hhe,SVo),e(F5,RVo),e(F5,vV),e(vV,PVo),e(F5,BVo),e(V,IVo),e(V,T5),e(T5,phe),e(phe,qVo),e(T5,NVo),e(T5,FV),e(FV,jVo),e(T5,DVo),e(V,GVo),e(V,M5),e(M5,_he),e(_he,OVo),e(M5,VVo),e(M5,TV),e(TV,XVo),e(M5,zVo),e(V,WVo),e(V,E5),e(E5,uhe),e(uhe,QVo),e(E5,HVo),e(E5,MV),e(MV,UVo),e(E5,JVo),e(V,YVo),e(V,C5),e(C5,bhe),e(bhe,KVo),e(C5,ZVo),e(C5,EV),e(EV,eXo),e(C5,oXo),e(V,rXo),e(V,w5),e(w5,vhe),e(vhe,tXo),e(w5,aXo),e(w5,CV),e(CV,nXo),e(w5,sXo),e(V,lXo),e(V,A5),e(A5,Fhe),e(Fhe,iXo),e(A5,dXo),e(A5,wV),e(wV,cXo),e(A5,fXo),e(V,mXo),e(V,y5),e(y5,The),e(The,gXo),e(y5,hXo),e(y5,AV),e(AV,pXo),e(y5,_Xo),e(V,uXo),e(V,L5),e(L5,Mhe),e(Mhe,bXo),e(L5,vXo),e(L5,yV),e(yV,FXo),e(L5,TXo),e(V,MXo),e(V,x5),e(x5,Ehe),e(Ehe,EXo),e(x5,CXo),e(x5,LV),e(LV,wXo),e(x5,AXo),e(V,yXo),e(V,$5),e($5,Che),e(Che,LXo),e($5,xXo),e($5,xV),e(xV,$Xo),e($5,kXo),e(V,SXo),e(V,k5),e(k5,whe),e(whe,RXo),e(k5,PXo),e(k5,$V),e($V,BXo),e(k5,IXo),e(V,qXo),e(V,S5),e(S5,Ahe),e(Ahe,NXo),e(S5,jXo),e(S5,kV),e(kV,DXo),e(S5,GXo),e(V,OXo),e(V,R5),e(R5,yhe),e(yhe,VXo),e(R5,XXo),e(R5,SV),e(SV,zXo),e(R5,WXo),e(V,QXo),e(V,P5),e(P5,Lhe),e(Lhe,HXo),e(P5,UXo),e(P5,RV),e(RV,JXo),e(P5,YXo),e(V,KXo),e(V,B5),e(B5,xhe),e(xhe,ZXo),e(B5,ezo),e(B5,PV),e(PV,ozo),e(B5,rzo),e(no,tzo),e(no,I5),e(I5,azo),e(I5,$he),e($he,nzo),e(I5,szo),e(I5,khe),e(khe,lzo),e(no,izo),M(q5,no,null),b(f,Cqe,u),b(f,ed,u),e(ed,N5),e(N5,She),M(PL,She,null),e(ed,dzo),e(ed,Rhe),e(Rhe,czo),b(f,wqe,u),b(f,No,u),M(BL,No,null),e(No,fzo),e(No,od),e(od,mzo),e(od,BV),e(BV,gzo),e(od,hzo),e(od,IV),e(IV,pzo),e(od,_zo),e(No,uzo),e(No,IL),e(IL,bzo),e(IL,Phe),e(Phe,vzo),e(IL,Fzo),e(No,Tzo),e(No,gt),M(qL,gt,null),e(gt,Mzo),e(gt,Bhe),e(Bhe,Ezo),e(gt,Czo),e(gt,rd),e(rd,wzo),e(rd,Ihe),e(Ihe,Azo),e(rd,yzo),e(rd,qV),e(qV,Lzo),e(rd,xzo),e(gt,$zo),M(j5,gt,null),e(No,kzo),e(No,so),M(NL,so,null),e(so,Szo),e(so,qhe),e(qhe,Rzo),e(so,Pzo),e(so,Na),e(Na,Bzo),e(Na,Nhe),e(Nhe,Izo),e(Na,qzo),e(Na,jhe),e(jhe,Nzo),e(Na,jzo),e(Na,Dhe),e(Dhe,Dzo),e(Na,Gzo),e(so,Ozo),e(so,Ghe),e(Ghe,D5),e(D5,Ohe),e(Ohe,Vzo),e(D5,Xzo),e(D5,NV),e(NV,zzo),e(D5,Wzo),e(so,Qzo),e(so,G5),e(G5,Hzo),e(G5,Vhe),e(Vhe,Uzo),e(G5,Jzo),e(G5,Xhe),e(Xhe,Yzo),e(so,Kzo),M(O5,so,null),b(f,Aqe,u),b(f,td,u),e(td,V5),e(V5,zhe),M(jL,zhe,null),e(td,Zzo),e(td,Whe),e(Whe,eWo),b(f,yqe,u),b(f,jo,u),M(DL,jo,null),e(jo,oWo),e(jo,ad),e(ad,rWo),e(ad,jV),e(jV,tWo),e(ad,aWo),e(ad,DV),e(DV,nWo),e(ad,sWo),e(jo,lWo),e(jo,GL),e(GL,iWo),e(GL,Qhe),e(Qhe,dWo),e(GL,cWo),e(jo,fWo),e(jo,ht),M(OL,ht,null),e(ht,mWo),e(ht,Hhe),e(Hhe,gWo),e(ht,hWo),e(ht,nd),e(nd,pWo),e(nd,Uhe),e(Uhe,_Wo),e(nd,uWo),e(nd,GV),e(GV,bWo),e(nd,vWo),e(ht,FWo),M(X5,ht,null),e(jo,TWo),e(jo,lo),M(VL,lo,null),e(lo,MWo),e(lo,Jhe),e(Jhe,EWo),e(lo,CWo),e(lo,ja),e(ja,wWo),e(ja,Yhe),e(Yhe,AWo),e(ja,yWo),e(ja,Khe),e(Khe,LWo),e(ja,xWo),e(ja,Zhe),e(Zhe,$Wo),e(ja,kWo),e(lo,SWo),e(lo,Fe),e(Fe,z5),e(z5,epe),e(epe,RWo),e(z5,PWo),e(z5,OV),e(OV,BWo),e(z5,IWo),e(Fe,qWo),e(Fe,W5),e(W5,ope),e(ope,NWo),e(W5,jWo),e(W5,VV),e(VV,DWo),e(W5,GWo),e(Fe,OWo),e(Fe,Q5),e(Q5,rpe),e(rpe,VWo),e(Q5,XWo),e(Q5,XV),e(XV,zWo),e(Q5,WWo),e(Fe,QWo),e(Fe,Ps),e(Ps,tpe),e(tpe,HWo),e(Ps,UWo),e(Ps,zV),e(zV,JWo),e(Ps,YWo),e(Ps,WV),e(WV,KWo),e(Ps,ZWo),e(Fe,eQo),e(Fe,H5),e(H5,ape),e(ape,oQo),e(H5,rQo),e(H5,QV),e(QV,tQo),e(H5,aQo),e(Fe,nQo),e(Fe,pt),e(pt,npe),e(npe,sQo),e(pt,lQo),e(pt,HV),e(HV,iQo),e(pt,dQo),e(pt,UV),e(UV,cQo),e(pt,fQo),e(pt,JV),e(JV,mQo),e(pt,gQo),e(Fe,hQo),e(Fe,U5),e(U5,spe),e(spe,pQo),e(U5,_Qo),e(U5,YV),e(YV,uQo),e(U5,bQo),e(Fe,vQo),e(Fe,J5),e(J5,lpe),e(lpe,FQo),e(J5,TQo),e(J5,KV),e(KV,MQo),e(J5,EQo),e(Fe,CQo),e(Fe,Y5),e(Y5,ipe),e(ipe,wQo),e(Y5,AQo),e(Y5,ZV),e(ZV,yQo),e(Y5,LQo),e(Fe,xQo),e(Fe,K5),e(K5,dpe),e(dpe,$Qo),e(K5,kQo),e(K5,eX),e(eX,SQo),e(K5,RQo),e(Fe,PQo),e(Fe,Z5),e(Z5,cpe),e(cpe,BQo),e(Z5,IQo),e(Z5,oX),e(oX,qQo),e(Z5,NQo),e(Fe,jQo),e(Fe,ev),e(ev,fpe),e(fpe,DQo),e(ev,GQo),e(ev,rX),e(rX,OQo),e(ev,VQo),e(Fe,XQo),e(Fe,ov),e(ov,mpe),e(mpe,zQo),e(ov,WQo),e(ov,tX),e(tX,QQo),e(ov,HQo),e(lo,UQo),e(lo,rv),e(rv,JQo),e(rv,gpe),e(gpe,YQo),e(rv,KQo),e(rv,hpe),e(hpe,ZQo),e(lo,eHo),M(tv,lo,null),b(f,Lqe,u),b(f,sd,u),e(sd,av),e(av,ppe),M(XL,ppe,null),e(sd,oHo),e(sd,_pe),e(_pe,rHo),b(f,xqe,u),b(f,Do,u),M(zL,Do,null),e(Do,tHo),e(Do,ld),e(ld,aHo),e(ld,aX),e(aX,nHo),e(ld,sHo),e(ld,nX),e(nX,lHo),e(ld,iHo),e(Do,dHo),e(Do,WL),e(WL,cHo),e(WL,upe),e(upe,fHo),e(WL,mHo),e(Do,gHo),e(Do,_t),M(QL,_t,null),e(_t,hHo),e(_t,bpe),e(bpe,pHo),e(_t,_Ho),e(_t,id),e(id,uHo),e(id,vpe),e(vpe,bHo),e(id,vHo),e(id,sX),e(sX,FHo),e(id,THo),e(_t,MHo),M(nv,_t,null),e(Do,EHo),e(Do,io),M(HL,io,null),e(io,CHo),e(io,Fpe),e(Fpe,wHo),e(io,AHo),e(io,Da),e(Da,yHo),e(Da,Tpe),e(Tpe,LHo),e(Da,xHo),e(Da,Mpe),e(Mpe,$Ho),e(Da,kHo),e(Da,Epe),e(Epe,SHo),e(Da,RHo),e(io,PHo),e(io,Cpe),e(Cpe,sv),e(sv,wpe),e(wpe,BHo),e(sv,IHo),e(sv,lX),e(lX,qHo),e(sv,NHo),e(io,jHo),e(io,lv),e(lv,DHo),e(lv,Ape),e(Ape,GHo),e(lv,OHo),e(lv,ype),e(ype,VHo),e(io,XHo),M(iv,io,null),b(f,$qe,u),b(f,dd,u),e(dd,dv),e(dv,Lpe),M(UL,Lpe,null),e(dd,zHo),e(dd,xpe),e(xpe,WHo),b(f,kqe,u),b(f,Go,u),M(JL,Go,null),e(Go,QHo),e(Go,cd),e(cd,HHo),e(cd,iX),e(iX,UHo),e(cd,JHo),e(cd,dX),e(dX,YHo),e(cd,KHo),e(Go,ZHo),e(Go,YL),e(YL,eUo),e(YL,$pe),e($pe,oUo),e(YL,rUo),e(Go,tUo),e(Go,ut),M(KL,ut,null),e(ut,aUo),e(ut,kpe),e(kpe,nUo),e(ut,sUo),e(ut,fd),e(fd,lUo),e(fd,Spe),e(Spe,iUo),e(fd,dUo),e(fd,cX),e(cX,cUo),e(fd,fUo),e(ut,mUo),M(cv,ut,null),e(Go,gUo),e(Go,co),M(ZL,co,null),e(co,hUo),e(co,Rpe),e(Rpe,pUo),e(co,_Uo),e(co,Ga),e(Ga,uUo),e(Ga,Ppe),e(Ppe,bUo),e(Ga,vUo),e(Ga,Bpe),e(Bpe,FUo),e(Ga,TUo),e(Ga,Ipe),e(Ipe,MUo),e(Ga,EUo),e(co,CUo),e(co,ke),e(ke,fv),e(fv,qpe),e(qpe,wUo),e(fv,AUo),e(fv,fX),e(fX,yUo),e(fv,LUo),e(ke,xUo),e(ke,mv),e(mv,Npe),e(Npe,$Uo),e(mv,kUo),e(mv,mX),e(mX,SUo),e(mv,RUo),e(ke,PUo),e(ke,gv),e(gv,jpe),e(jpe,BUo),e(gv,IUo),e(gv,gX),e(gX,qUo),e(gv,NUo),e(ke,jUo),e(ke,hv),e(hv,Dpe),e(Dpe,DUo),e(hv,GUo),e(hv,hX),e(hX,OUo),e(hv,VUo),e(ke,XUo),e(ke,pv),e(pv,Gpe),e(Gpe,zUo),e(pv,WUo),e(pv,pX),e(pX,QUo),e(pv,HUo),e(ke,UUo),e(ke,_v),e(_v,Ope),e(Ope,JUo),e(_v,YUo),e(_v,_X),e(_X,KUo),e(_v,ZUo),e(ke,eJo),e(ke,uv),e(uv,Vpe),e(Vpe,oJo),e(uv,rJo),e(uv,uX),e(uX,tJo),e(uv,aJo),e(ke,nJo),e(ke,bv),e(bv,Xpe),e(Xpe,sJo),e(bv,lJo),e(bv,bX),e(bX,iJo),e(bv,dJo),e(ke,cJo),e(ke,vv),e(vv,zpe),e(zpe,fJo),e(vv,mJo),e(vv,vX),e(vX,gJo),e(vv,hJo),e(co,pJo),e(co,Fv),e(Fv,_Jo),e(Fv,Wpe),e(Wpe,uJo),e(Fv,bJo),e(Fv,Qpe),e(Qpe,vJo),e(co,FJo),M(Tv,co,null),b(f,Sqe,u),b(f,md,u),e(md,Mv),e(Mv,Hpe),M(e8,Hpe,null),e(md,TJo),e(md,Upe),e(Upe,MJo),b(f,Rqe,u),b(f,Oo,u),M(o8,Oo,null),e(Oo,EJo),e(Oo,gd),e(gd,CJo),e(gd,FX),e(FX,wJo),e(gd,AJo),e(gd,TX),e(TX,yJo),e(gd,LJo),e(Oo,xJo),e(Oo,r8),e(r8,$Jo),e(r8,Jpe),e(Jpe,kJo),e(r8,SJo),e(Oo,RJo),e(Oo,bt),M(t8,bt,null),e(bt,PJo),e(bt,Ype),e(Ype,BJo),e(bt,IJo),e(bt,hd),e(hd,qJo),e(hd,Kpe),e(Kpe,NJo),e(hd,jJo),e(hd,MX),e(MX,DJo),e(hd,GJo),e(bt,OJo),M(Ev,bt,null),e(Oo,VJo),e(Oo,fo),M(a8,fo,null),e(fo,XJo),e(fo,Zpe),e(Zpe,zJo),e(fo,WJo),e(fo,Oa),e(Oa,QJo),e(Oa,e_e),e(e_e,HJo),e(Oa,UJo),e(Oa,o_e),e(o_e,JJo),e(Oa,YJo),e(Oa,r_e),e(r_e,KJo),e(Oa,ZJo),e(fo,eYo),e(fo,Kr),e(Kr,Cv),e(Cv,t_e),e(t_e,oYo),e(Cv,rYo),e(Cv,EX),e(EX,tYo),e(Cv,aYo),e(Kr,nYo),e(Kr,wv),e(wv,a_e),e(a_e,sYo),e(wv,lYo),e(wv,CX),e(CX,iYo),e(wv,dYo),e(Kr,cYo),e(Kr,Av),e(Av,n_e),e(n_e,fYo),e(Av,mYo),e(Av,wX),e(wX,gYo),e(Av,hYo),e(Kr,pYo),e(Kr,yv),e(yv,s_e),e(s_e,_Yo),e(yv,uYo),e(yv,AX),e(AX,bYo),e(yv,vYo),e(Kr,FYo),e(Kr,Lv),e(Lv,l_e),e(l_e,TYo),e(Lv,MYo),e(Lv,yX),e(yX,EYo),e(Lv,CYo),e(fo,wYo),e(fo,xv),e(xv,AYo),e(xv,i_e),e(i_e,yYo),e(xv,LYo),e(xv,d_e),e(d_e,xYo),e(fo,$Yo),M($v,fo,null),b(f,Pqe,u),b(f,pd,u),e(pd,kv),e(kv,c_e),M(n8,c_e,null),e(pd,kYo),e(pd,f_e),e(f_e,SYo),b(f,Bqe,u),b(f,Vo,u),M(s8,Vo,null),e(Vo,RYo),e(Vo,_d),e(_d,PYo),e(_d,LX),e(LX,BYo),e(_d,IYo),e(_d,xX),e(xX,qYo),e(_d,NYo),e(Vo,jYo),e(Vo,l8),e(l8,DYo),e(l8,m_e),e(m_e,GYo),e(l8,OYo),e(Vo,VYo),e(Vo,vt),M(i8,vt,null),e(vt,XYo),e(vt,g_e),e(g_e,zYo),e(vt,WYo),e(vt,ud),e(ud,QYo),e(ud,h_e),e(h_e,HYo),e(ud,UYo),e(ud,$X),e($X,JYo),e(ud,YYo),e(vt,KYo),M(Sv,vt,null),e(Vo,ZYo),e(Vo,mo),M(d8,mo,null),e(mo,eKo),e(mo,p_e),e(p_e,oKo),e(mo,rKo),e(mo,Va),e(Va,tKo),e(Va,__e),e(__e,aKo),e(Va,nKo),e(Va,u_e),e(u_e,sKo),e(Va,lKo),e(Va,b_e),e(b_e,iKo),e(Va,dKo),e(mo,cKo),e(mo,Se),e(Se,Rv),e(Rv,v_e),e(v_e,fKo),e(Rv,mKo),e(Rv,kX),e(kX,gKo),e(Rv,hKo),e(Se,pKo),e(Se,Pv),e(Pv,F_e),e(F_e,_Ko),e(Pv,uKo),e(Pv,SX),e(SX,bKo),e(Pv,vKo),e(Se,FKo),e(Se,Bv),e(Bv,T_e),e(T_e,TKo),e(Bv,MKo),e(Bv,RX),e(RX,EKo),e(Bv,CKo),e(Se,wKo),e(Se,Iv),e(Iv,M_e),e(M_e,AKo),e(Iv,yKo),e(Iv,PX),e(PX,LKo),e(Iv,xKo),e(Se,$Ko),e(Se,qv),e(qv,E_e),e(E_e,kKo),e(qv,SKo),e(qv,BX),e(BX,RKo),e(qv,PKo),e(Se,BKo),e(Se,Nv),e(Nv,C_e),e(C_e,IKo),e(Nv,qKo),e(Nv,IX),e(IX,NKo),e(Nv,jKo),e(Se,DKo),e(Se,jv),e(jv,w_e),e(w_e,GKo),e(jv,OKo),e(jv,qX),e(qX,VKo),e(jv,XKo),e(Se,zKo),e(Se,Dv),e(Dv,A_e),e(A_e,WKo),e(Dv,QKo),e(Dv,NX),e(NX,HKo),e(Dv,UKo),e(Se,JKo),e(Se,Gv),e(Gv,y_e),e(y_e,YKo),e(Gv,KKo),e(Gv,jX),e(jX,ZKo),e(Gv,eZo),e(mo,oZo),e(mo,Ov),e(Ov,rZo),e(Ov,L_e),e(L_e,tZo),e(Ov,aZo),e(Ov,x_e),e(x_e,nZo),e(mo,sZo),M(Vv,mo,null),b(f,Iqe,u),b(f,bd,u),e(bd,Xv),e(Xv,$_e),M(c8,$_e,null),e(bd,lZo),e(bd,k_e),e(k_e,iZo),b(f,qqe,u),b(f,Xo,u),M(f8,Xo,null),e(Xo,dZo),e(Xo,vd),e(vd,cZo),e(vd,DX),e(DX,fZo),e(vd,mZo),e(vd,GX),e(GX,gZo),e(vd,hZo),e(Xo,pZo),e(Xo,m8),e(m8,_Zo),e(m8,S_e),e(S_e,uZo),e(m8,bZo),e(Xo,vZo),e(Xo,Ft),M(g8,Ft,null),e(Ft,FZo),e(Ft,R_e),e(R_e,TZo),e(Ft,MZo),e(Ft,Fd),e(Fd,EZo),e(Fd,P_e),e(P_e,CZo),e(Fd,wZo),e(Fd,OX),e(OX,AZo),e(Fd,yZo),e(Ft,LZo),M(zv,Ft,null),e(Xo,xZo),e(Xo,go),M(h8,go,null),e(go,$Zo),e(go,B_e),e(B_e,kZo),e(go,SZo),e(go,Xa),e(Xa,RZo),e(Xa,I_e),e(I_e,PZo),e(Xa,BZo),e(Xa,q_e),e(q_e,IZo),e(Xa,qZo),e(Xa,N_e),e(N_e,NZo),e(Xa,jZo),e(go,DZo),e(go,p8),e(p8,Wv),e(Wv,j_e),e(j_e,GZo),e(Wv,OZo),e(Wv,VX),e(VX,VZo),e(Wv,XZo),e(p8,zZo),e(p8,Qv),e(Qv,D_e),e(D_e,WZo),e(Qv,QZo),e(Qv,XX),e(XX,HZo),e(Qv,UZo),e(go,JZo),e(go,Hv),e(Hv,YZo),e(Hv,G_e),e(G_e,KZo),e(Hv,ZZo),e(Hv,O_e),e(O_e,eer),e(go,oer),M(Uv,go,null),b(f,Nqe,u),b(f,Td,u),e(Td,Jv),e(Jv,V_e),M(_8,V_e,null),e(Td,rer),e(Td,X_e),e(X_e,ter),b(f,jqe,u),b(f,zo,u),M(u8,zo,null),e(zo,aer),e(zo,Md),e(Md,ner),e(Md,zX),e(zX,ser),e(Md,ler),e(Md,WX),e(WX,ier),e(Md,der),e(zo,cer),e(zo,b8),e(b8,fer),e(b8,z_e),e(z_e,mer),e(b8,ger),e(zo,her),e(zo,Tt),M(v8,Tt,null),e(Tt,per),e(Tt,W_e),e(W_e,_er),e(Tt,uer),e(Tt,Ed),e(Ed,ber),e(Ed,Q_e),e(Q_e,ver),e(Ed,Fer),e(Ed,QX),e(QX,Ter),e(Ed,Mer),e(Tt,Eer),M(Yv,Tt,null),e(zo,Cer),e(zo,ho),M(F8,ho,null),e(ho,wer),e(ho,H_e),e(H_e,Aer),e(ho,yer),e(ho,za),e(za,Ler),e(za,U_e),e(U_e,xer),e(za,$er),e(za,J_e),e(J_e,ker),e(za,Ser),e(za,Y_e),e(Y_e,Rer),e(za,Per),e(ho,Ber),e(ho,Zr),e(Zr,Kv),e(Kv,K_e),e(K_e,Ier),e(Kv,qer),e(Kv,HX),e(HX,Ner),e(Kv,jer),e(Zr,Der),e(Zr,Zv),e(Zv,Z_e),e(Z_e,Ger),e(Zv,Oer),e(Zv,UX),e(UX,Ver),e(Zv,Xer),e(Zr,zer),e(Zr,e3),e(e3,eue),e(eue,Wer),e(e3,Qer),e(e3,JX),e(JX,Her),e(e3,Uer),e(Zr,Jer),e(Zr,o3),e(o3,oue),e(oue,Yer),e(o3,Ker),e(o3,YX),e(YX,Zer),e(o3,eor),e(Zr,oor),e(Zr,r3),e(r3,rue),e(rue,ror),e(r3,tor),e(r3,KX),e(KX,aor),e(r3,nor),e(ho,sor),e(ho,t3),e(t3,lor),e(t3,tue),e(tue,ior),e(t3,dor),e(t3,aue),e(aue,cor),e(ho,mor),M(a3,ho,null),b(f,Dqe,u),b(f,Cd,u),e(Cd,n3),e(n3,nue),M(T8,nue,null),e(Cd,gor),e(Cd,sue),e(sue,hor),b(f,Gqe,u),b(f,Wo,u),M(M8,Wo,null),e(Wo,por),e(Wo,wd),e(wd,_or),e(wd,ZX),e(ZX,uor),e(wd,bor),e(wd,ez),e(ez,vor),e(wd,For),e(Wo,Tor),e(Wo,E8),e(E8,Mor),e(E8,lue),e(lue,Eor),e(E8,Cor),e(Wo,wor),e(Wo,Mt),M(C8,Mt,null),e(Mt,Aor),e(Mt,iue),e(iue,yor),e(Mt,Lor),e(Mt,Ad),e(Ad,xor),e(Ad,due),e(due,$or),e(Ad,kor),e(Ad,oz),e(oz,Sor),e(Ad,Ror),e(Mt,Por),M(s3,Mt,null),e(Wo,Bor),e(Wo,po),M(w8,po,null),e(po,Ior),e(po,cue),e(cue,qor),e(po,Nor),e(po,Wa),e(Wa,jor),e(Wa,fue),e(fue,Dor),e(Wa,Gor),e(Wa,mue),e(mue,Oor),e(Wa,Vor),e(Wa,gue),e(gue,Xor),e(Wa,zor),e(po,Wor),e(po,yd),e(yd,l3),e(l3,hue),e(hue,Qor),e(l3,Hor),e(l3,rz),e(rz,Uor),e(l3,Jor),e(yd,Yor),e(yd,i3),e(i3,pue),e(pue,Kor),e(i3,Zor),e(i3,tz),e(tz,err),e(i3,orr),e(yd,rrr),e(yd,d3),e(d3,_ue),e(_ue,trr),e(d3,arr),e(d3,az),e(az,nrr),e(d3,srr),e(po,lrr),e(po,c3),e(c3,irr),e(c3,uue),e(uue,drr),e(c3,crr),e(c3,bue),e(bue,frr),e(po,mrr),M(f3,po,null),b(f,Oqe,u),b(f,Ld,u),e(Ld,m3),e(m3,vue),M(A8,vue,null),e(Ld,grr),e(Ld,Fue),e(Fue,hrr),b(f,Vqe,u),b(f,Qo,u),M(y8,Qo,null),e(Qo,prr),e(Qo,xd),e(xd,_rr),e(xd,nz),e(nz,urr),e(xd,brr),e(xd,sz),e(sz,vrr),e(xd,Frr),e(Qo,Trr),e(Qo,L8),e(L8,Mrr),e(L8,Tue),e(Tue,Err),e(L8,Crr),e(Qo,wrr),e(Qo,Et),M(x8,Et,null),e(Et,Arr),e(Et,Mue),e(Mue,yrr),e(Et,Lrr),e(Et,$d),e($d,xrr),e($d,Eue),e(Eue,$rr),e($d,krr),e($d,lz),e(lz,Srr),e($d,Rrr),e(Et,Prr),M(g3,Et,null),e(Qo,Brr),e(Qo,_o),M($8,_o,null),e(_o,Irr),e(_o,Cue),e(Cue,qrr),e(_o,Nrr),e(_o,Qa),e(Qa,jrr),e(Qa,wue),e(wue,Drr),e(Qa,Grr),e(Qa,Aue),e(Aue,Orr),e(Qa,Vrr),e(Qa,yue),e(yue,Xrr),e(Qa,zrr),e(_o,Wrr),e(_o,k8),e(k8,h3),e(h3,Lue),e(Lue,Qrr),e(h3,Hrr),e(h3,iz),e(iz,Urr),e(h3,Jrr),e(k8,Yrr),e(k8,p3),e(p3,xue),e(xue,Krr),e(p3,Zrr),e(p3,dz),e(dz,etr),e(p3,otr),e(_o,rtr),e(_o,_3),e(_3,ttr),e(_3,$ue),e($ue,atr),e(_3,ntr),e(_3,kue),e(kue,str),e(_o,ltr),M(u3,_o,null),b(f,Xqe,u),b(f,kd,u),e(kd,b3),e(b3,Sue),M(S8,Sue,null),e(kd,itr),e(kd,Rue),e(Rue,dtr),b(f,zqe,u),b(f,Ho,u),M(R8,Ho,null),e(Ho,ctr),e(Ho,Sd),e(Sd,ftr),e(Sd,cz),e(cz,mtr),e(Sd,gtr),e(Sd,fz),e(fz,htr),e(Sd,ptr),e(Ho,_tr),e(Ho,P8),e(P8,utr),e(P8,Pue),e(Pue,btr),e(P8,vtr),e(Ho,Ftr),e(Ho,Ct),M(B8,Ct,null),e(Ct,Ttr),e(Ct,Bue),e(Bue,Mtr),e(Ct,Etr),e(Ct,Rd),e(Rd,Ctr),e(Rd,Iue),e(Iue,wtr),e(Rd,Atr),e(Rd,mz),e(mz,ytr),e(Rd,Ltr),e(Ct,xtr),M(v3,Ct,null),e(Ho,$tr),e(Ho,uo),M(I8,uo,null),e(uo,ktr),e(uo,que),e(que,Str),e(uo,Rtr),e(uo,Ha),e(Ha,Ptr),e(Ha,Nue),e(Nue,Btr),e(Ha,Itr),e(Ha,jue),e(jue,qtr),e(Ha,Ntr),e(Ha,Due),e(Due,jtr),e(Ha,Dtr),e(uo,Gtr),e(uo,Gue),e(Gue,F3),e(F3,Oue),e(Oue,Otr),e(F3,Vtr),e(F3,gz),e(gz,Xtr),e(F3,ztr),e(uo,Wtr),e(uo,T3),e(T3,Qtr),e(T3,Vue),e(Vue,Htr),e(T3,Utr),e(T3,Xue),e(Xue,Jtr),e(uo,Ytr),M(M3,uo,null),b(f,Wqe,u),b(f,Pd,u),e(Pd,E3),e(E3,zue),M(q8,zue,null),e(Pd,Ktr),e(Pd,Wue),e(Wue,Ztr),b(f,Qqe,u),b(f,Uo,u),M(N8,Uo,null),e(Uo,ear),e(Uo,Bd),e(Bd,oar),e(Bd,hz),e(hz,rar),e(Bd,tar),e(Bd,pz),e(pz,aar),e(Bd,nar),e(Uo,sar),e(Uo,j8),e(j8,lar),e(j8,Que),e(Que,iar),e(j8,dar),e(Uo,car),e(Uo,wt),M(D8,wt,null),e(wt,far),e(wt,Hue),e(Hue,mar),e(wt,gar),e(wt,Id),e(Id,har),e(Id,Uue),e(Uue,par),e(Id,_ar),e(Id,_z),e(_z,uar),e(Id,bar),e(wt,Far),M(C3,wt,null),e(Uo,Tar),e(Uo,bo),M(G8,bo,null),e(bo,Mar),e(bo,Jue),e(Jue,Ear),e(bo,Car),e(bo,Ua),e(Ua,war),e(Ua,Yue),e(Yue,Aar),e(Ua,yar),e(Ua,Kue),e(Kue,Lar),e(Ua,xar),e(Ua,Zue),e(Zue,$ar),e(Ua,kar),e(bo,Sar),e(bo,Ja),e(Ja,w3),e(w3,e1e),e(e1e,Rar),e(w3,Par),e(w3,uz),e(uz,Bar),e(w3,Iar),e(Ja,qar),e(Ja,A3),e(A3,o1e),e(o1e,Nar),e(A3,jar),e(A3,bz),e(bz,Dar),e(A3,Gar),e(Ja,Oar),e(Ja,y3),e(y3,r1e),e(r1e,Var),e(y3,Xar),e(y3,vz),e(vz,zar),e(y3,War),e(Ja,Qar),e(Ja,L3),e(L3,t1e),e(t1e,Har),e(L3,Uar),e(L3,Fz),e(Fz,Jar),e(L3,Yar),e(bo,Kar),e(bo,x3),e(x3,Zar),e(x3,a1e),e(a1e,enr),e(x3,onr),e(x3,n1e),e(n1e,rnr),e(bo,tnr),M($3,bo,null),b(f,Hqe,u),b(f,qd,u),e(qd,k3),e(k3,s1e),M(O8,s1e,null),e(qd,anr),e(qd,l1e),e(l1e,nnr),b(f,Uqe,u),b(f,Jo,u),M(V8,Jo,null),e(Jo,snr),e(Jo,Nd),e(Nd,lnr),e(Nd,Tz),e(Tz,inr),e(Nd,dnr),e(Nd,Mz),e(Mz,cnr),e(Nd,fnr),e(Jo,mnr),e(Jo,X8),e(X8,gnr),e(X8,i1e),e(i1e,hnr),e(X8,pnr),e(Jo,_nr),e(Jo,At),M(z8,At,null),e(At,unr),e(At,d1e),e(d1e,bnr),e(At,vnr),e(At,jd),e(jd,Fnr),e(jd,c1e),e(c1e,Tnr),e(jd,Mnr),e(jd,Ez),e(Ez,Enr),e(jd,Cnr),e(At,wnr),M(S3,At,null),e(Jo,Anr),e(Jo,vo),M(W8,vo,null),e(vo,ynr),e(vo,f1e),e(f1e,Lnr),e(vo,xnr),e(vo,Ya),e(Ya,$nr),e(Ya,m1e),e(m1e,knr),e(Ya,Snr),e(Ya,g1e),e(g1e,Rnr),e(Ya,Pnr),e(Ya,h1e),e(h1e,Bnr),e(Ya,Inr),e(vo,qnr),e(vo,p1e),e(p1e,R3),e(R3,_1e),e(_1e,Nnr),e(R3,jnr),e(R3,Cz),e(Cz,Dnr),e(R3,Gnr),e(vo,Onr),e(vo,P3),e(P3,Vnr),e(P3,u1e),e(u1e,Xnr),e(P3,znr),e(P3,b1e),e(b1e,Wnr),e(vo,Qnr),M(B3,vo,null),b(f,Jqe,u),b(f,Dd,u),e(Dd,I3),e(I3,v1e),M(Q8,v1e,null),e(Dd,Hnr),e(Dd,F1e),e(F1e,Unr),b(f,Yqe,u),b(f,Yo,u),M(H8,Yo,null),e(Yo,Jnr),e(Yo,Gd),e(Gd,Ynr),e(Gd,wz),e(wz,Knr),e(Gd,Znr),e(Gd,Az),e(Az,esr),e(Gd,osr),e(Yo,rsr),e(Yo,U8),e(U8,tsr),e(U8,T1e),e(T1e,asr),e(U8,nsr),e(Yo,ssr),e(Yo,yt),M(J8,yt,null),e(yt,lsr),e(yt,M1e),e(M1e,isr),e(yt,dsr),e(yt,Od),e(Od,csr),e(Od,E1e),e(E1e,fsr),e(Od,msr),e(Od,yz),e(yz,gsr),e(Od,hsr),e(yt,psr),M(q3,yt,null),e(Yo,_sr),e(Yo,wr),M(Y8,wr,null),e(wr,usr),e(wr,C1e),e(C1e,bsr),e(wr,vsr),e(wr,Ka),e(Ka,Fsr),e(Ka,w1e),e(w1e,Tsr),e(Ka,Msr),e(Ka,A1e),e(A1e,Esr),e(Ka,Csr),e(Ka,y1e),e(y1e,wsr),e(Ka,Asr),e(wr,ysr),e(wr,q),e(q,N3),e(N3,L1e),e(L1e,Lsr),e(N3,xsr),e(N3,Lz),e(Lz,$sr),e(N3,ksr),e(q,Ssr),e(q,j3),e(j3,x1e),e(x1e,Rsr),e(j3,Psr),e(j3,xz),e(xz,Bsr),e(j3,Isr),e(q,qsr),e(q,D3),e(D3,$1e),e($1e,Nsr),e(D3,jsr),e(D3,$z),e($z,Dsr),e(D3,Gsr),e(q,Osr),e(q,G3),e(G3,k1e),e(k1e,Vsr),e(G3,Xsr),e(G3,kz),e(kz,zsr),e(G3,Wsr),e(q,Qsr),e(q,O3),e(O3,S1e),e(S1e,Hsr),e(O3,Usr),e(O3,Sz),e(Sz,Jsr),e(O3,Ysr),e(q,Ksr),e(q,V3),e(V3,R1e),e(R1e,Zsr),e(V3,elr),e(V3,Rz),e(Rz,olr),e(V3,rlr),e(q,tlr),e(q,X3),e(X3,P1e),e(P1e,alr),e(X3,nlr),e(X3,Pz),e(Pz,slr),e(X3,llr),e(q,ilr),e(q,z3),e(z3,B1e),e(B1e,dlr),e(z3,clr),e(z3,Bz),e(Bz,flr),e(z3,mlr),e(q,glr),e(q,W3),e(W3,I1e),e(I1e,hlr),e(W3,plr),e(W3,Iz),e(Iz,_lr),e(W3,ulr),e(q,blr),e(q,Q3),e(Q3,q1e),e(q1e,vlr),e(Q3,Flr),e(Q3,qz),e(qz,Tlr),e(Q3,Mlr),e(q,Elr),e(q,H3),e(H3,N1e),e(N1e,Clr),e(H3,wlr),e(H3,Nz),e(Nz,Alr),e(H3,ylr),e(q,Llr),e(q,U3),e(U3,j1e),e(j1e,xlr),e(U3,$lr),e(U3,jz),e(jz,klr),e(U3,Slr),e(q,Rlr),e(q,J3),e(J3,D1e),e(D1e,Plr),e(J3,Blr),e(J3,Dz),e(Dz,Ilr),e(J3,qlr),e(q,Nlr),e(q,Y3),e(Y3,G1e),e(G1e,jlr),e(Y3,Dlr),e(Y3,Gz),e(Gz,Glr),e(Y3,Olr),e(q,Vlr),e(q,K3),e(K3,O1e),e(O1e,Xlr),e(K3,zlr),e(K3,Oz),e(Oz,Wlr),e(K3,Qlr),e(q,Hlr),e(q,Z3),e(Z3,V1e),e(V1e,Ulr),e(Z3,Jlr),e(Z3,Vz),e(Vz,Ylr),e(Z3,Klr),e(q,Zlr),e(q,eF),e(eF,X1e),e(X1e,eir),e(eF,oir),e(eF,Xz),e(Xz,rir),e(eF,tir),e(q,air),e(q,Bs),e(Bs,z1e),e(z1e,nir),e(Bs,sir),e(Bs,zz),e(zz,lir),e(Bs,iir),e(Bs,Wz),e(Wz,dir),e(Bs,cir),e(q,fir),e(q,oF),e(oF,W1e),e(W1e,mir),e(oF,gir),e(oF,Qz),e(Qz,hir),e(oF,pir),e(q,_ir),e(q,rF),e(rF,Q1e),e(Q1e,uir),e(rF,bir),e(rF,Hz),e(Hz,vir),e(rF,Fir),e(q,Tir),e(q,tF),e(tF,H1e),e(H1e,Mir),e(tF,Eir),e(tF,Uz),e(Uz,Cir),e(tF,wir),e(q,Air),e(q,aF),e(aF,U1e),e(U1e,yir),e(aF,Lir),e(aF,Jz),e(Jz,xir),e(aF,$ir),e(q,kir),e(q,nF),e(nF,J1e),e(J1e,Sir),e(nF,Rir),e(nF,Yz),e(Yz,Pir),e(nF,Bir),e(q,Iir),e(q,sF),e(sF,Y1e),e(Y1e,qir),e(sF,Nir),e(sF,Kz),e(Kz,jir),e(sF,Dir),e(q,Gir),e(q,lF),e(lF,K1e),e(K1e,Oir),e(lF,Vir),e(lF,Zz),e(Zz,Xir),e(lF,zir),e(q,Wir),e(q,iF),e(iF,Z1e),e(Z1e,Qir),e(iF,Hir),e(iF,eW),e(eW,Uir),e(iF,Jir),e(q,Yir),e(q,dF),e(dF,ebe),e(ebe,Kir),e(dF,Zir),e(dF,oW),e(oW,edr),e(dF,odr),e(q,rdr),e(q,cF),e(cF,obe),e(obe,tdr),e(cF,adr),e(cF,rW),e(rW,ndr),e(cF,sdr),e(q,ldr),e(q,fF),e(fF,rbe),e(rbe,idr),e(fF,ddr),e(fF,tW),e(tW,cdr),e(fF,fdr),e(q,mdr),e(q,mF),e(mF,tbe),e(tbe,gdr),e(mF,hdr),e(mF,aW),e(aW,pdr),e(mF,_dr),e(q,udr),e(q,gF),e(gF,abe),e(abe,bdr),e(gF,vdr),e(gF,nW),e(nW,Fdr),e(gF,Tdr),e(q,Mdr),e(q,hF),e(hF,nbe),e(nbe,Edr),e(hF,Cdr),e(hF,sW),e(sW,wdr),e(hF,Adr),e(q,ydr),e(q,pF),e(pF,sbe),e(sbe,Ldr),e(pF,xdr),e(pF,lW),e(lW,$dr),e(pF,kdr),e(q,Sdr),e(q,_F),e(_F,lbe),e(lbe,Rdr),e(_F,Pdr),e(_F,iW),e(iW,Bdr),e(_F,Idr),e(q,qdr),e(q,uF),e(uF,ibe),e(ibe,Ndr),e(uF,jdr),e(uF,dW),e(dW,Ddr),e(uF,Gdr),e(q,Odr),e(q,bF),e(bF,dbe),e(dbe,Vdr),e(bF,Xdr),e(bF,cW),e(cW,zdr),e(bF,Wdr),e(q,Qdr),e(q,vF),e(vF,cbe),e(cbe,Hdr),e(vF,Udr),e(vF,fW),e(fW,Jdr),e(vF,Ydr),e(q,Kdr),e(q,FF),e(FF,fbe),e(fbe,Zdr),e(FF,ecr),e(FF,mW),e(mW,ocr),e(FF,rcr),e(q,tcr),e(q,TF),e(TF,mbe),e(mbe,acr),e(TF,ncr),e(TF,gW),e(gW,scr),e(TF,lcr),e(q,icr),e(q,MF),e(MF,gbe),e(gbe,dcr),e(MF,ccr),e(MF,hW),e(hW,fcr),e(MF,mcr),e(q,gcr),e(q,EF),e(EF,hbe),e(hbe,hcr),e(EF,pcr),e(EF,pW),e(pW,_cr),e(EF,ucr),e(q,bcr),e(q,CF),e(CF,pbe),e(pbe,vcr),e(CF,Fcr),e(CF,_W),e(_W,Tcr),e(CF,Mcr),e(q,Ecr),e(q,wF),e(wF,_be),e(_be,Ccr),e(wF,wcr),e(wF,uW),e(uW,Acr),e(wF,ycr),e(q,Lcr),e(q,AF),e(AF,ube),e(ube,xcr),e(AF,$cr),e(AF,bW),e(bW,kcr),e(AF,Scr),e(q,Rcr),e(q,yF),e(yF,bbe),e(bbe,Pcr),e(yF,Bcr),e(yF,vW),e(vW,Icr),e(yF,qcr),e(q,Ncr),e(q,LF),e(LF,vbe),e(vbe,jcr),e(LF,Dcr),e(LF,FW),e(FW,Gcr),e(LF,Ocr),e(q,Vcr),e(q,xF),e(xF,Fbe),e(Fbe,Xcr),e(xF,zcr),e(xF,TW),e(TW,Wcr),e(xF,Qcr),e(wr,Hcr),M($F,wr,null),b(f,Kqe,u),b(f,Vd,u),e(Vd,kF),e(kF,Tbe),M(K8,Tbe,null),e(Vd,Ucr),e(Vd,Mbe),e(Mbe,Jcr),b(f,Zqe,u),b(f,Ko,u),M(Z8,Ko,null),e(Ko,Ycr),e(Ko,Xd),e(Xd,Kcr),e(Xd,MW),e(MW,Zcr),e(Xd,efr),e(Xd,EW),e(EW,ofr),e(Xd,rfr),e(Ko,tfr),e(Ko,e7),e(e7,afr),e(e7,Ebe),e(Ebe,nfr),e(e7,sfr),e(Ko,lfr),e(Ko,Lt),M(o7,Lt,null),e(Lt,ifr),e(Lt,Cbe),e(Cbe,dfr),e(Lt,cfr),e(Lt,zd),e(zd,ffr),e(zd,wbe),e(wbe,mfr),e(zd,gfr),e(zd,CW),e(CW,hfr),e(zd,pfr),e(Lt,_fr),M(SF,Lt,null),e(Ko,ufr),e(Ko,Ar),M(r7,Ar,null),e(Ar,bfr),e(Ar,Abe),e(Abe,vfr),e(Ar,Ffr),e(Ar,Za),e(Za,Tfr),e(Za,ybe),e(ybe,Mfr),e(Za,Efr),e(Za,Lbe),e(Lbe,Cfr),e(Za,wfr),e(Za,xbe),e(xbe,Afr),e(Za,yfr),e(Ar,Lfr),e(Ar,se),e(se,RF),e(RF,$be),e($be,xfr),e(RF,$fr),e(RF,wW),e(wW,kfr),e(RF,Sfr),e(se,Rfr),e(se,PF),e(PF,kbe),e(kbe,Pfr),e(PF,Bfr),e(PF,AW),e(AW,Ifr),e(PF,qfr),e(se,Nfr),e(se,BF),e(BF,Sbe),e(Sbe,jfr),e(BF,Dfr),e(BF,yW),e(yW,Gfr),e(BF,Ofr),e(se,Vfr),e(se,IF),e(IF,Rbe),e(Rbe,Xfr),e(IF,zfr),e(IF,LW),e(LW,Wfr),e(IF,Qfr),e(se,Hfr),e(se,qF),e(qF,Pbe),e(Pbe,Ufr),e(qF,Jfr),e(qF,xW),e(xW,Yfr),e(qF,Kfr),e(se,Zfr),e(se,NF),e(NF,Bbe),e(Bbe,emr),e(NF,omr),e(NF,$W),e($W,rmr),e(NF,tmr),e(se,amr),e(se,jF),e(jF,Ibe),e(Ibe,nmr),e(jF,smr),e(jF,kW),e(kW,lmr),e(jF,imr),e(se,dmr),e(se,DF),e(DF,qbe),e(qbe,cmr),e(DF,fmr),e(DF,SW),e(SW,mmr),e(DF,gmr),e(se,hmr),e(se,GF),e(GF,Nbe),e(Nbe,pmr),e(GF,_mr),e(GF,RW),e(RW,umr),e(GF,bmr),e(se,vmr),e(se,OF),e(OF,jbe),e(jbe,Fmr),e(OF,Tmr),e(OF,PW),e(PW,Mmr),e(OF,Emr),e(se,Cmr),e(se,VF),e(VF,Dbe),e(Dbe,wmr),e(VF,Amr),e(VF,BW),e(BW,ymr),e(VF,Lmr),e(se,xmr),e(se,XF),e(XF,Gbe),e(Gbe,$mr),e(XF,kmr),e(XF,IW),e(IW,Smr),e(XF,Rmr),e(se,Pmr),e(se,zF),e(zF,Obe),e(Obe,Bmr),e(zF,Imr),e(zF,qW),e(qW,qmr),e(zF,Nmr),e(se,jmr),e(se,WF),e(WF,Vbe),e(Vbe,Dmr),e(WF,Gmr),e(WF,NW),e(NW,Omr),e(WF,Vmr),e(se,Xmr),e(se,QF),e(QF,Xbe),e(Xbe,zmr),e(QF,Wmr),e(QF,jW),e(jW,Qmr),e(QF,Hmr),e(se,Umr),e(se,HF),e(HF,zbe),e(zbe,Jmr),e(HF,Ymr),e(HF,DW),e(DW,Kmr),e(HF,Zmr),e(se,egr),e(se,UF),e(UF,Wbe),e(Wbe,ogr),e(UF,rgr),e(UF,GW),e(GW,tgr),e(UF,agr),e(se,ngr),e(se,JF),e(JF,Qbe),e(Qbe,sgr),e(JF,lgr),e(JF,OW),e(OW,igr),e(JF,dgr),e(se,cgr),e(se,YF),e(YF,Hbe),e(Hbe,fgr),e(YF,mgr),e(YF,VW),e(VW,ggr),e(YF,hgr),e(se,pgr),e(se,KF),e(KF,Ube),e(Ube,_gr),e(KF,ugr),e(KF,XW),e(XW,bgr),e(KF,vgr),e(se,Fgr),e(se,ZF),e(ZF,Jbe),e(Jbe,Tgr),e(ZF,Mgr),e(ZF,zW),e(zW,Egr),e(ZF,Cgr),e(se,wgr),e(se,e6),e(e6,Ybe),e(Ybe,Agr),e(e6,ygr),e(e6,WW),e(WW,Lgr),e(e6,xgr),e(se,$gr),e(se,o6),e(o6,Kbe),e(Kbe,kgr),e(o6,Sgr),e(o6,QW),e(QW,Rgr),e(o6,Pgr),e(Ar,Bgr),M(r6,Ar,null),b(f,eNe,u),b(f,Wd,u),e(Wd,t6),e(t6,Zbe),M(t7,Zbe,null),e(Wd,Igr),e(Wd,e2e),e(e2e,qgr),b(f,oNe,u),b(f,Zo,u),M(a7,Zo,null),e(Zo,Ngr),e(Zo,Qd),e(Qd,jgr),e(Qd,HW),e(HW,Dgr),e(Qd,Ggr),e(Qd,UW),e(UW,Ogr),e(Qd,Vgr),e(Zo,Xgr),e(Zo,n7),e(n7,zgr),e(n7,o2e),e(o2e,Wgr),e(n7,Qgr),e(Zo,Hgr),e(Zo,xt),M(s7,xt,null),e(xt,Ugr),e(xt,r2e),e(r2e,Jgr),e(xt,Ygr),e(xt,Hd),e(Hd,Kgr),e(Hd,t2e),e(t2e,Zgr),e(Hd,ehr),e(Hd,JW),e(JW,ohr),e(Hd,rhr),e(xt,thr),M(a6,xt,null),e(Zo,ahr),e(Zo,yr),M(l7,yr,null),e(yr,nhr),e(yr,a2e),e(a2e,shr),e(yr,lhr),e(yr,en),e(en,ihr),e(en,n2e),e(n2e,dhr),e(en,chr),e(en,s2e),e(s2e,fhr),e(en,mhr),e(en,l2e),e(l2e,ghr),e(en,hhr),e(yr,phr),e(yr,Te),e(Te,n6),e(n6,i2e),e(i2e,_hr),e(n6,uhr),e(n6,YW),e(YW,bhr),e(n6,vhr),e(Te,Fhr),e(Te,s6),e(s6,d2e),e(d2e,Thr),e(s6,Mhr),e(s6,KW),e(KW,Ehr),e(s6,Chr),e(Te,whr),e(Te,l6),e(l6,c2e),e(c2e,Ahr),e(l6,yhr),e(l6,ZW),e(ZW,Lhr),e(l6,xhr),e(Te,$hr),e(Te,i6),e(i6,f2e),e(f2e,khr),e(i6,Shr),e(i6,eQ),e(eQ,Rhr),e(i6,Phr),e(Te,Bhr),e(Te,d6),e(d6,m2e),e(m2e,Ihr),e(d6,qhr),e(d6,oQ),e(oQ,Nhr),e(d6,jhr),e(Te,Dhr),e(Te,c6),e(c6,g2e),e(g2e,Ghr),e(c6,Ohr),e(c6,rQ),e(rQ,Vhr),e(c6,Xhr),e(Te,zhr),e(Te,f6),e(f6,h2e),e(h2e,Whr),e(f6,Qhr),e(f6,tQ),e(tQ,Hhr),e(f6,Uhr),e(Te,Jhr),e(Te,m6),e(m6,p2e),e(p2e,Yhr),e(m6,Khr),e(m6,aQ),e(aQ,Zhr),e(m6,epr),e(Te,opr),e(Te,g6),e(g6,_2e),e(_2e,rpr),e(g6,tpr),e(g6,nQ),e(nQ,apr),e(g6,npr),e(Te,spr),e(Te,h6),e(h6,u2e),e(u2e,lpr),e(h6,ipr),e(h6,sQ),e(sQ,dpr),e(h6,cpr),e(Te,fpr),e(Te,p6),e(p6,b2e),e(b2e,mpr),e(p6,gpr),e(p6,lQ),e(lQ,hpr),e(p6,ppr),e(Te,_pr),e(Te,_6),e(_6,v2e),e(v2e,upr),e(_6,bpr),e(_6,iQ),e(iQ,vpr),e(_6,Fpr),e(Te,Tpr),e(Te,u6),e(u6,F2e),e(F2e,Mpr),e(u6,Epr),e(u6,dQ),e(dQ,Cpr),e(u6,wpr),e(yr,Apr),M(b6,yr,null),b(f,rNe,u),b(f,Ud,u),e(Ud,v6),e(v6,T2e),M(i7,T2e,null),e(Ud,ypr),e(Ud,M2e),e(M2e,Lpr),b(f,tNe,u),b(f,er,u),M(d7,er,null),e(er,xpr),e(er,Jd),e(Jd,$pr),e(Jd,cQ),e(cQ,kpr),e(Jd,Spr),e(Jd,fQ),e(fQ,Rpr),e(Jd,Ppr),e(er,Bpr),e(er,c7),e(c7,Ipr),e(c7,E2e),e(E2e,qpr),e(c7,Npr),e(er,jpr),e(er,$t),M(f7,$t,null),e($t,Dpr),e($t,C2e),e(C2e,Gpr),e($t,Opr),e($t,Yd),e(Yd,Vpr),e(Yd,w2e),e(w2e,Xpr),e(Yd,zpr),e(Yd,mQ),e(mQ,Wpr),e(Yd,Qpr),e($t,Hpr),M(F6,$t,null),e(er,Upr),e(er,Lr),M(m7,Lr,null),e(Lr,Jpr),e(Lr,A2e),e(A2e,Ypr),e(Lr,Kpr),e(Lr,on),e(on,Zpr),e(on,y2e),e(y2e,e_r),e(on,o_r),e(on,L2e),e(L2e,r_r),e(on,t_r),e(on,x2e),e(x2e,a_r),e(on,n_r),e(Lr,s_r),e(Lr,rn),e(rn,T6),e(T6,$2e),e($2e,l_r),e(T6,i_r),e(T6,gQ),e(gQ,d_r),e(T6,c_r),e(rn,f_r),e(rn,M6),e(M6,k2e),e(k2e,m_r),e(M6,g_r),e(M6,hQ),e(hQ,h_r),e(M6,p_r),e(rn,__r),e(rn,E6),e(E6,S2e),e(S2e,u_r),e(E6,b_r),e(E6,pQ),e(pQ,v_r),e(E6,F_r),e(rn,T_r),e(rn,C6),e(C6,R2e),e(R2e,M_r),e(C6,E_r),e(C6,_Q),e(_Q,C_r),e(C6,w_r),e(Lr,A_r),M(w6,Lr,null),b(f,aNe,u),b(f,Kd,u),e(Kd,A6),e(A6,P2e),M(g7,P2e,null),e(Kd,y_r),e(Kd,B2e),e(B2e,L_r),b(f,nNe,u),b(f,or,u),M(h7,or,null),e(or,x_r),e(or,Zd),e(Zd,$_r),e(Zd,uQ),e(uQ,k_r),e(Zd,S_r),e(Zd,bQ),e(bQ,R_r),e(Zd,P_r),e(or,B_r),e(or,p7),e(p7,I_r),e(p7,I2e),e(I2e,q_r),e(p7,N_r),e(or,j_r),e(or,kt),M(_7,kt,null),e(kt,D_r),e(kt,q2e),e(q2e,G_r),e(kt,O_r),e(kt,ec),e(ec,V_r),e(ec,N2e),e(N2e,X_r),e(ec,z_r),e(ec,vQ),e(vQ,W_r),e(ec,Q_r),e(kt,H_r),M(y6,kt,null),e(or,U_r),e(or,xr),M(u7,xr,null),e(xr,J_r),e(xr,j2e),e(j2e,Y_r),e(xr,K_r),e(xr,tn),e(tn,Z_r),e(tn,D2e),e(D2e,eur),e(tn,our),e(tn,G2e),e(G2e,rur),e(tn,tur),e(tn,O2e),e(O2e,aur),e(tn,nur),e(xr,sur),e(xr,ie),e(ie,L6),e(L6,V2e),e(V2e,lur),e(L6,iur),e(L6,FQ),e(FQ,dur),e(L6,cur),e(ie,fur),e(ie,x6),e(x6,X2e),e(X2e,mur),e(x6,gur),e(x6,TQ),e(TQ,hur),e(x6,pur),e(ie,_ur),e(ie,$6),e($6,z2e),e(z2e,uur),e($6,bur),e($6,MQ),e(MQ,vur),e($6,Fur),e(ie,Tur),e(ie,k6),e(k6,W2e),e(W2e,Mur),e(k6,Eur),e(k6,EQ),e(EQ,Cur),e(k6,wur),e(ie,Aur),e(ie,S6),e(S6,Q2e),e(Q2e,yur),e(S6,Lur),e(S6,CQ),e(CQ,xur),e(S6,$ur),e(ie,kur),e(ie,R6),e(R6,H2e),e(H2e,Sur),e(R6,Rur),e(R6,wQ),e(wQ,Pur),e(R6,Bur),e(ie,Iur),e(ie,P6),e(P6,U2e),e(U2e,qur),e(P6,Nur),e(P6,AQ),e(AQ,jur),e(P6,Dur),e(ie,Gur),e(ie,B6),e(B6,J2e),e(J2e,Our),e(B6,Vur),e(B6,yQ),e(yQ,Xur),e(B6,zur),e(ie,Wur),e(ie,I6),e(I6,Y2e),e(Y2e,Qur),e(I6,Hur),e(I6,LQ),e(LQ,Uur),e(I6,Jur),e(ie,Yur),e(ie,q6),e(q6,K2e),e(K2e,Kur),e(q6,Zur),e(q6,xQ),e(xQ,e1r),e(q6,o1r),e(ie,r1r),e(ie,N6),e(N6,Z2e),e(Z2e,t1r),e(N6,a1r),e(N6,$Q),e($Q,n1r),e(N6,s1r),e(ie,l1r),e(ie,j6),e(j6,e4e),e(e4e,i1r),e(j6,d1r),e(j6,kQ),e(kQ,c1r),e(j6,f1r),e(ie,m1r),e(ie,D6),e(D6,o4e),e(o4e,g1r),e(D6,h1r),e(D6,SQ),e(SQ,p1r),e(D6,_1r),e(ie,u1r),e(ie,G6),e(G6,r4e),e(r4e,b1r),e(G6,v1r),e(G6,RQ),e(RQ,F1r),e(G6,T1r),e(ie,M1r),e(ie,O6),e(O6,t4e),e(t4e,E1r),e(O6,C1r),e(O6,PQ),e(PQ,w1r),e(O6,A1r),e(ie,y1r),e(ie,V6),e(V6,a4e),e(a4e,L1r),e(V6,x1r),e(V6,BQ),e(BQ,$1r),e(V6,k1r),e(ie,S1r),e(ie,X6),e(X6,n4e),e(n4e,R1r),e(X6,P1r),e(X6,IQ),e(IQ,B1r),e(X6,I1r),e(ie,q1r),e(ie,z6),e(z6,s4e),e(s4e,N1r),e(z6,j1r),e(z6,qQ),e(qQ,D1r),e(z6,G1r),e(ie,O1r),e(ie,W6),e(W6,l4e),e(l4e,V1r),e(W6,X1r),e(W6,NQ),e(NQ,z1r),e(W6,W1r),e(ie,Q1r),e(ie,Q6),e(Q6,i4e),e(i4e,H1r),e(Q6,U1r),e(Q6,jQ),e(jQ,J1r),e(Q6,Y1r),e(xr,K1r),M(H6,xr,null),b(f,sNe,u),b(f,oc,u),e(oc,U6),e(U6,d4e),M(b7,d4e,null),e(oc,Z1r),e(oc,c4e),e(c4e,ebr),b(f,lNe,u),b(f,rr,u),M(v7,rr,null),e(rr,obr),e(rr,rc),e(rc,rbr),e(rc,DQ),e(DQ,tbr),e(rc,abr),e(rc,GQ),e(GQ,nbr),e(rc,sbr),e(rr,lbr),e(rr,F7),e(F7,ibr),e(F7,f4e),e(f4e,dbr),e(F7,cbr),e(rr,fbr),e(rr,St),M(T7,St,null),e(St,mbr),e(St,m4e),e(m4e,gbr),e(St,hbr),e(St,tc),e(tc,pbr),e(tc,g4e),e(g4e,_br),e(tc,ubr),e(tc,OQ),e(OQ,bbr),e(tc,vbr),e(St,Fbr),M(J6,St,null),e(rr,Tbr),e(rr,$r),M(M7,$r,null),e($r,Mbr),e($r,h4e),e(h4e,Ebr),e($r,Cbr),e($r,an),e(an,wbr),e(an,p4e),e(p4e,Abr),e(an,ybr),e(an,_4e),e(_4e,Lbr),e(an,xbr),e(an,u4e),e(u4e,$br),e(an,kbr),e($r,Sbr),e($r,ye),e(ye,Y6),e(Y6,b4e),e(b4e,Rbr),e(Y6,Pbr),e(Y6,VQ),e(VQ,Bbr),e(Y6,Ibr),e(ye,qbr),e(ye,K6),e(K6,v4e),e(v4e,Nbr),e(K6,jbr),e(K6,XQ),e(XQ,Dbr),e(K6,Gbr),e(ye,Obr),e(ye,Z6),e(Z6,F4e),e(F4e,Vbr),e(Z6,Xbr),e(Z6,zQ),e(zQ,zbr),e(Z6,Wbr),e(ye,Qbr),e(ye,eT),e(eT,T4e),e(T4e,Hbr),e(eT,Ubr),e(eT,WQ),e(WQ,Jbr),e(eT,Ybr),e(ye,Kbr),e(ye,oT),e(oT,M4e),e(M4e,Zbr),e(oT,e2r),e(oT,QQ),e(QQ,o2r),e(oT,r2r),e(ye,t2r),e(ye,rT),e(rT,E4e),e(E4e,a2r),e(rT,n2r),e(rT,HQ),e(HQ,s2r),e(rT,l2r),e(ye,i2r),e(ye,tT),e(tT,C4e),e(C4e,d2r),e(tT,c2r),e(tT,UQ),e(UQ,f2r),e(tT,m2r),e(ye,g2r),e(ye,aT),e(aT,w4e),e(w4e,h2r),e(aT,p2r),e(aT,JQ),e(JQ,_2r),e(aT,u2r),e(ye,b2r),e(ye,nT),e(nT,A4e),e(A4e,v2r),e(nT,F2r),e(nT,YQ),e(YQ,T2r),e(nT,M2r),e(ye,E2r),e(ye,sT),e(sT,y4e),e(y4e,C2r),e(sT,w2r),e(sT,KQ),e(KQ,A2r),e(sT,y2r),e($r,L2r),M(lT,$r,null),b(f,iNe,u),b(f,ac,u),e(ac,iT),e(iT,L4e),M(E7,L4e,null),e(ac,x2r),e(ac,x4e),e(x4e,$2r),b(f,dNe,u),b(f,tr,u),M(C7,tr,null),e(tr,k2r),e(tr,nc),e(nc,S2r),e(nc,ZQ),e(ZQ,R2r),e(nc,P2r),e(nc,eH),e(eH,B2r),e(nc,I2r),e(tr,q2r),e(tr,w7),e(w7,N2r),e(w7,$4e),e($4e,j2r),e(w7,D2r),e(tr,G2r),e(tr,Rt),M(A7,Rt,null),e(Rt,O2r),e(Rt,k4e),e(k4e,V2r),e(Rt,X2r),e(Rt,sc),e(sc,z2r),e(sc,S4e),e(S4e,W2r),e(sc,Q2r),e(sc,oH),e(oH,H2r),e(sc,U2r),e(Rt,J2r),M(dT,Rt,null),e(tr,Y2r),e(tr,kr),M(y7,kr,null),e(kr,K2r),e(kr,R4e),e(R4e,Z2r),e(kr,e4r),e(kr,nn),e(nn,o4r),e(nn,P4e),e(P4e,r4r),e(nn,t4r),e(nn,B4e),e(B4e,a4r),e(nn,n4r),e(nn,I4e),e(I4e,s4r),e(nn,l4r),e(kr,i4r),e(kr,ee),e(ee,cT),e(cT,q4e),e(q4e,d4r),e(cT,c4r),e(cT,rH),e(rH,f4r),e(cT,m4r),e(ee,g4r),e(ee,fT),e(fT,N4e),e(N4e,h4r),e(fT,p4r),e(fT,tH),e(tH,_4r),e(fT,u4r),e(ee,b4r),e(ee,mT),e(mT,j4e),e(j4e,v4r),e(mT,F4r),e(mT,aH),e(aH,T4r),e(mT,M4r),e(ee,E4r),e(ee,gT),e(gT,D4e),e(D4e,C4r),e(gT,w4r),e(gT,nH),e(nH,A4r),e(gT,y4r),e(ee,L4r),e(ee,hT),e(hT,G4e),e(G4e,x4r),e(hT,$4r),e(hT,sH),e(sH,k4r),e(hT,S4r),e(ee,R4r),e(ee,pT),e(pT,O4e),e(O4e,P4r),e(pT,B4r),e(pT,lH),e(lH,I4r),e(pT,q4r),e(ee,N4r),e(ee,_T),e(_T,V4e),e(V4e,j4r),e(_T,D4r),e(_T,iH),e(iH,G4r),e(_T,O4r),e(ee,V4r),e(ee,uT),e(uT,X4e),e(X4e,X4r),e(uT,z4r),e(uT,dH),e(dH,W4r),e(uT,Q4r),e(ee,H4r),e(ee,bT),e(bT,z4e),e(z4e,U4r),e(bT,J4r),e(bT,cH),e(cH,Y4r),e(bT,K4r),e(ee,Z4r),e(ee,vT),e(vT,W4e),e(W4e,e5r),e(vT,o5r),e(vT,fH),e(fH,r5r),e(vT,t5r),e(ee,a5r),e(ee,FT),e(FT,Q4e),e(Q4e,n5r),e(FT,s5r),e(FT,mH),e(mH,l5r),e(FT,i5r),e(ee,d5r),e(ee,TT),e(TT,H4e),e(H4e,c5r),e(TT,f5r),e(TT,gH),e(gH,m5r),e(TT,g5r),e(ee,h5r),e(ee,MT),e(MT,U4e),e(U4e,p5r),e(MT,_5r),e(MT,hH),e(hH,u5r),e(MT,b5r),e(ee,v5r),e(ee,ET),e(ET,J4e),e(J4e,F5r),e(ET,T5r),e(ET,pH),e(pH,M5r),e(ET,E5r),e(ee,C5r),e(ee,CT),e(CT,Y4e),e(Y4e,w5r),e(CT,A5r),e(CT,_H),e(_H,y5r),e(CT,L5r),e(ee,x5r),e(ee,wT),e(wT,K4e),e(K4e,$5r),e(wT,k5r),e(wT,uH),e(uH,S5r),e(wT,R5r),e(ee,P5r),e(ee,AT),e(AT,Z4e),e(Z4e,B5r),e(AT,I5r),e(AT,bH),e(bH,q5r),e(AT,N5r),e(ee,j5r),e(ee,yT),e(yT,e5e),e(e5e,D5r),e(yT,G5r),e(yT,vH),e(vH,O5r),e(yT,V5r),e(ee,X5r),e(ee,LT),e(LT,o5e),e(o5e,z5r),e(LT,W5r),e(LT,FH),e(FH,Q5r),e(LT,H5r),e(ee,U5r),e(ee,xT),e(xT,r5e),e(r5e,J5r),e(xT,Y5r),e(xT,TH),e(TH,K5r),e(xT,Z5r),e(ee,evr),e(ee,$T),e($T,t5e),e(t5e,ovr),e($T,rvr),e($T,MH),e(MH,tvr),e($T,avr),e(ee,nvr),e(ee,kT),e(kT,a5e),e(a5e,svr),e(kT,lvr),e(kT,EH),e(EH,ivr),e(kT,dvr),e(ee,cvr),e(ee,ST),e(ST,n5e),e(n5e,fvr),e(ST,mvr),e(ST,CH),e(CH,gvr),e(ST,hvr),e(ee,pvr),e(ee,RT),e(RT,s5e),e(s5e,_vr),e(RT,uvr),e(RT,wH),e(wH,bvr),e(RT,vvr),e(ee,Fvr),e(ee,PT),e(PT,l5e),e(l5e,Tvr),e(PT,Mvr),e(PT,AH),e(AH,Evr),e(PT,Cvr),e(ee,wvr),e(ee,BT),e(BT,i5e),e(i5e,Avr),e(BT,yvr),e(BT,yH),e(yH,Lvr),e(BT,xvr),e(kr,$vr),M(IT,kr,null),b(f,cNe,u),b(f,lc,u),e(lc,qT),e(qT,d5e),M(L7,d5e,null),e(lc,kvr),e(lc,c5e),e(c5e,Svr),b(f,fNe,u),b(f,ar,u),M(x7,ar,null),e(ar,Rvr),e(ar,ic),e(ic,Pvr),e(ic,LH),e(LH,Bvr),e(ic,Ivr),e(ic,xH),e(xH,qvr),e(ic,Nvr),e(ar,jvr),e(ar,$7),e($7,Dvr),e($7,f5e),e(f5e,Gvr),e($7,Ovr),e(ar,Vvr),e(ar,Pt),M(k7,Pt,null),e(Pt,Xvr),e(Pt,m5e),e(m5e,zvr),e(Pt,Wvr),e(Pt,dc),e(dc,Qvr),e(dc,g5e),e(g5e,Hvr),e(dc,Uvr),e(dc,$H),e($H,Jvr),e(dc,Yvr),e(Pt,Kvr),M(NT,Pt,null),e(ar,Zvr),e(ar,Sr),M(S7,Sr,null),e(Sr,e3r),e(Sr,h5e),e(h5e,o3r),e(Sr,r3r),e(Sr,sn),e(sn,t3r),e(sn,p5e),e(p5e,a3r),e(sn,n3r),e(sn,_5e),e(_5e,s3r),e(sn,l3r),e(sn,u5e),e(u5e,i3r),e(sn,d3r),e(Sr,c3r),e(Sr,he),e(he,jT),e(jT,b5e),e(b5e,f3r),e(jT,m3r),e(jT,kH),e(kH,g3r),e(jT,h3r),e(he,p3r),e(he,DT),e(DT,v5e),e(v5e,_3r),e(DT,u3r),e(DT,SH),e(SH,b3r),e(DT,v3r),e(he,F3r),e(he,GT),e(GT,F5e),e(F5e,T3r),e(GT,M3r),e(GT,RH),e(RH,E3r),e(GT,C3r),e(he,w3r),e(he,OT),e(OT,T5e),e(T5e,A3r),e(OT,y3r),e(OT,PH),e(PH,L3r),e(OT,x3r),e(he,$3r),e(he,VT),e(VT,M5e),e(M5e,k3r),e(VT,S3r),e(VT,BH),e(BH,R3r),e(VT,P3r),e(he,B3r),e(he,XT),e(XT,E5e),e(E5e,I3r),e(XT,q3r),e(XT,IH),e(IH,N3r),e(XT,j3r),e(he,D3r),e(he,zT),e(zT,C5e),e(C5e,G3r),e(zT,O3r),e(zT,qH),e(qH,V3r),e(zT,X3r),e(he,z3r),e(he,WT),e(WT,w5e),e(w5e,W3r),e(WT,Q3r),e(WT,NH),e(NH,H3r),e(WT,U3r),e(he,J3r),e(he,QT),e(QT,A5e),e(A5e,Y3r),e(QT,K3r),e(QT,jH),e(jH,Z3r),e(QT,eFr),e(he,oFr),e(he,HT),e(HT,y5e),e(y5e,rFr),e(HT,tFr),e(HT,DH),e(DH,aFr),e(HT,nFr),e(he,sFr),e(he,UT),e(UT,L5e),e(L5e,lFr),e(UT,iFr),e(UT,GH),e(GH,dFr),e(UT,cFr),e(he,fFr),e(he,JT),e(JT,x5e),e(x5e,mFr),e(JT,gFr),e(JT,OH),e(OH,hFr),e(JT,pFr),e(he,_Fr),e(he,YT),e(YT,$5e),e($5e,uFr),e(YT,bFr),e(YT,VH),e(VH,vFr),e(YT,FFr),e(he,TFr),e(he,KT),e(KT,k5e),e(k5e,MFr),e(KT,EFr),e(KT,XH),e(XH,CFr),e(KT,wFr),e(he,AFr),e(he,ZT),e(ZT,S5e),e(S5e,yFr),e(ZT,LFr),e(ZT,zH),e(zH,xFr),e(ZT,$Fr),e(he,kFr),e(he,eM),e(eM,R5e),e(R5e,SFr),e(eM,RFr),e(eM,WH),e(WH,PFr),e(eM,BFr),e(he,IFr),e(he,oM),e(oM,P5e),e(P5e,qFr),e(oM,NFr),e(oM,QH),e(QH,jFr),e(oM,DFr),e(Sr,GFr),M(rM,Sr,null),b(f,mNe,u),b(f,cc,u),e(cc,tM),e(tM,B5e),M(R7,B5e,null),e(cc,OFr),e(cc,I5e),e(I5e,VFr),b(f,gNe,u),b(f,nr,u),M(P7,nr,null),e(nr,XFr),e(nr,fc),e(fc,zFr),e(fc,HH),e(HH,WFr),e(fc,QFr),e(fc,UH),e(UH,HFr),e(fc,UFr),e(nr,JFr),e(nr,B7),e(B7,YFr),e(B7,q5e),e(q5e,KFr),e(B7,ZFr),e(nr,e6r),e(nr,Bt),M(I7,Bt,null),e(Bt,o6r),e(Bt,N5e),e(N5e,r6r),e(Bt,t6r),e(Bt,mc),e(mc,a6r),e(mc,j5e),e(j5e,n6r),e(mc,s6r),e(mc,JH),e(JH,l6r),e(mc,i6r),e(Bt,d6r),M(aM,Bt,null),e(nr,c6r),e(nr,Rr),M(q7,Rr,null),e(Rr,f6r),e(Rr,D5e),e(D5e,m6r),e(Rr,g6r),e(Rr,ln),e(ln,h6r),e(ln,G5e),e(G5e,p6r),e(ln,_6r),e(ln,O5e),e(O5e,u6r),e(ln,b6r),e(ln,V5e),e(V5e,v6r),e(ln,F6r),e(Rr,T6r),e(Rr,N7),e(N7,nM),e(nM,X5e),e(X5e,M6r),e(nM,E6r),e(nM,YH),e(YH,C6r),e(nM,w6r),e(N7,A6r),e(N7,sM),e(sM,z5e),e(z5e,y6r),e(sM,L6r),e(sM,KH),e(KH,x6r),e(sM,$6r),e(Rr,k6r),M(lM,Rr,null),b(f,hNe,u),b(f,gc,u),e(gc,iM),e(iM,W5e),M(j7,W5e,null),e(gc,S6r),e(gc,Q5e),e(Q5e,R6r),b(f,pNe,u),b(f,sr,u),M(D7,sr,null),e(sr,P6r),e(sr,hc),e(hc,B6r),e(hc,ZH),e(ZH,I6r),e(hc,q6r),e(hc,eU),e(eU,N6r),e(hc,j6r),e(sr,D6r),e(sr,G7),e(G7,G6r),e(G7,H5e),e(H5e,O6r),e(G7,V6r),e(sr,X6r),e(sr,It),M(O7,It,null),e(It,z6r),e(It,U5e),e(U5e,W6r),e(It,Q6r),e(It,pc),e(pc,H6r),e(pc,J5e),e(J5e,U6r),e(pc,J6r),e(pc,oU),e(oU,Y6r),e(pc,K6r),e(It,Z6r),M(dM,It,null),e(sr,eTr),e(sr,Pr),M(V7,Pr,null),e(Pr,oTr),e(Pr,Y5e),e(Y5e,rTr),e(Pr,tTr),e(Pr,dn),e(dn,aTr),e(dn,K5e),e(K5e,nTr),e(dn,sTr),e(dn,Z5e),e(Z5e,lTr),e(dn,iTr),e(dn,eve),e(eve,dTr),e(dn,cTr),e(Pr,fTr),e(Pr,ove),e(ove,cM),e(cM,rve),e(rve,mTr),e(cM,gTr),e(cM,rU),e(rU,hTr),e(cM,pTr),e(Pr,_Tr),M(fM,Pr,null),b(f,_Ne,u),b(f,_c,u),e(_c,mM),e(mM,tve),M(X7,tve,null),e(_c,uTr),e(_c,ave),e(ave,bTr),b(f,uNe,u),b(f,lr,u),M(z7,lr,null),e(lr,vTr),e(lr,uc),e(uc,FTr),e(uc,tU),e(tU,TTr),e(uc,MTr),e(uc,aU),e(aU,ETr),e(uc,CTr),e(lr,wTr),e(lr,W7),e(W7,ATr),e(W7,nve),e(nve,yTr),e(W7,LTr),e(lr,xTr),e(lr,qt),M(Q7,qt,null),e(qt,$Tr),e(qt,sve),e(sve,kTr),e(qt,STr),e(qt,bc),e(bc,RTr),e(bc,lve),e(lve,PTr),e(bc,BTr),e(bc,nU),e(nU,ITr),e(bc,qTr),e(qt,NTr),M(gM,qt,null),e(lr,jTr),e(lr,Br),M(H7,Br,null),e(Br,DTr),e(Br,ive),e(ive,GTr),e(Br,OTr),e(Br,cn),e(cn,VTr),e(cn,dve),e(dve,XTr),e(cn,zTr),e(cn,cve),e(cve,WTr),e(cn,QTr),e(cn,fve),e(fve,HTr),e(cn,UTr),e(Br,JTr),e(Br,de),e(de,hM),e(hM,mve),e(mve,YTr),e(hM,KTr),e(hM,sU),e(sU,ZTr),e(hM,eMr),e(de,oMr),e(de,pM),e(pM,gve),e(gve,rMr),e(pM,tMr),e(pM,lU),e(lU,aMr),e(pM,nMr),e(de,sMr),e(de,_M),e(_M,hve),e(hve,lMr),e(_M,iMr),e(_M,iU),e(iU,dMr),e(_M,cMr),e(de,fMr),e(de,uM),e(uM,pve),e(pve,mMr),e(uM,gMr),e(uM,dU),e(dU,hMr),e(uM,pMr),e(de,_Mr),e(de,bM),e(bM,_ve),e(_ve,uMr),e(bM,bMr),e(bM,cU),e(cU,vMr),e(bM,FMr),e(de,TMr),e(de,vM),e(vM,uve),e(uve,MMr),e(vM,EMr),e(vM,fU),e(fU,CMr),e(vM,wMr),e(de,AMr),e(de,FM),e(FM,bve),e(bve,yMr),e(FM,LMr),e(FM,mU),e(mU,xMr),e(FM,$Mr),e(de,kMr),e(de,TM),e(TM,vve),e(vve,SMr),e(TM,RMr),e(TM,gU),e(gU,PMr),e(TM,BMr),e(de,IMr),e(de,MM),e(MM,Fve),e(Fve,qMr),e(MM,NMr),e(MM,hU),e(hU,jMr),e(MM,DMr),e(de,GMr),e(de,EM),e(EM,Tve),e(Tve,OMr),e(EM,VMr),e(EM,pU),e(pU,XMr),e(EM,zMr),e(de,WMr),e(de,CM),e(CM,Mve),e(Mve,QMr),e(CM,HMr),e(CM,_U),e(_U,UMr),e(CM,JMr),e(de,YMr),e(de,wM),e(wM,Eve),e(Eve,KMr),e(wM,ZMr),e(wM,uU),e(uU,eEr),e(wM,oEr),e(de,rEr),e(de,AM),e(AM,Cve),e(Cve,tEr),e(AM,aEr),e(AM,bU),e(bU,nEr),e(AM,sEr),e(de,lEr),e(de,yM),e(yM,wve),e(wve,iEr),e(yM,dEr),e(yM,vU),e(vU,cEr),e(yM,fEr),e(de,mEr),e(de,LM),e(LM,Ave),e(Ave,gEr),e(LM,hEr),e(LM,FU),e(FU,pEr),e(LM,_Er),e(de,uEr),e(de,xM),e(xM,yve),e(yve,bEr),e(xM,vEr),e(xM,TU),e(TU,FEr),e(xM,TEr),e(de,MEr),e(de,$M),e($M,Lve),e(Lve,EEr),e($M,CEr),e($M,MU),e(MU,wEr),e($M,AEr),e(de,yEr),e(de,kM),e(kM,xve),e(xve,LEr),e(kM,xEr),e(kM,EU),e(EU,$Er),e(kM,kEr),e(de,SEr),e(de,SM),e(SM,$ve),e($ve,REr),e(SM,PEr),e(SM,CU),e(CU,BEr),e(SM,IEr),e(de,qEr),e(de,RM),e(RM,kve),e(kve,NEr),e(RM,jEr),e(RM,wU),e(wU,DEr),e(RM,GEr),e(Br,OEr),M(PM,Br,null),b(f,bNe,u),b(f,vc,u),e(vc,BM),e(BM,Sve),M(U7,Sve,null),e(vc,VEr),e(vc,Rve),e(Rve,XEr),b(f,vNe,u),b(f,ir,u),M(J7,ir,null),e(ir,zEr),e(ir,Fc),e(Fc,WEr),e(Fc,AU),e(AU,QEr),e(Fc,HEr),e(Fc,yU),e(yU,UEr),e(Fc,JEr),e(ir,YEr),e(ir,Y7),e(Y7,KEr),e(Y7,Pve),e(Pve,ZEr),e(Y7,eCr),e(ir,oCr),e(ir,Nt),M(K7,Nt,null),e(Nt,rCr),e(Nt,Bve),e(Bve,tCr),e(Nt,aCr),e(Nt,Tc),e(Tc,nCr),e(Tc,Ive),e(Ive,sCr),e(Tc,lCr),e(Tc,LU),e(LU,iCr),e(Tc,dCr),e(Nt,cCr),M(IM,Nt,null),e(ir,fCr),e(ir,Ir),M(Z7,Ir,null),e(Ir,mCr),e(Ir,qve),e(qve,gCr),e(Ir,hCr),e(Ir,fn),e(fn,pCr),e(fn,Nve),e(Nve,_Cr),e(fn,uCr),e(fn,jve),e(jve,bCr),e(fn,vCr),e(fn,Dve),e(Dve,FCr),e(fn,TCr),e(Ir,MCr),e(Ir,ce),e(ce,qM),e(qM,Gve),e(Gve,ECr),e(qM,CCr),e(qM,xU),e(xU,wCr),e(qM,ACr),e(ce,yCr),e(ce,NM),e(NM,Ove),e(Ove,LCr),e(NM,xCr),e(NM,$U),e($U,$Cr),e(NM,kCr),e(ce,SCr),e(ce,jM),e(jM,Vve),e(Vve,RCr),e(jM,PCr),e(jM,kU),e(kU,BCr),e(jM,ICr),e(ce,qCr),e(ce,DM),e(DM,Xve),e(Xve,NCr),e(DM,jCr),e(DM,SU),e(SU,DCr),e(DM,GCr),e(ce,OCr),e(ce,GM),e(GM,zve),e(zve,VCr),e(GM,XCr),e(GM,RU),e(RU,zCr),e(GM,WCr),e(ce,QCr),e(ce,OM),e(OM,Wve),e(Wve,HCr),e(OM,UCr),e(OM,PU),e(PU,JCr),e(OM,YCr),e(ce,KCr),e(ce,VM),e(VM,Qve),e(Qve,ZCr),e(VM,ewr),e(VM,BU),e(BU,owr),e(VM,rwr),e(ce,twr),e(ce,XM),e(XM,Hve),e(Hve,awr),e(XM,nwr),e(XM,IU),e(IU,swr),e(XM,lwr),e(ce,iwr),e(ce,zM),e(zM,Uve),e(Uve,dwr),e(zM,cwr),e(zM,qU),e(qU,fwr),e(zM,mwr),e(ce,gwr),e(ce,WM),e(WM,Jve),e(Jve,hwr),e(WM,pwr),e(WM,NU),e(NU,_wr),e(WM,uwr),e(ce,bwr),e(ce,QM),e(QM,Yve),e(Yve,vwr),e(QM,Fwr),e(QM,jU),e(jU,Twr),e(QM,Mwr),e(ce,Ewr),e(ce,HM),e(HM,Kve),e(Kve,Cwr),e(HM,wwr),e(HM,DU),e(DU,Awr),e(HM,ywr),e(ce,Lwr),e(ce,UM),e(UM,Zve),e(Zve,xwr),e(UM,$wr),e(UM,GU),e(GU,kwr),e(UM,Swr),e(ce,Rwr),e(ce,JM),e(JM,e3e),e(e3e,Pwr),e(JM,Bwr),e(JM,OU),e(OU,Iwr),e(JM,qwr),e(ce,Nwr),e(ce,YM),e(YM,o3e),e(o3e,jwr),e(YM,Dwr),e(YM,VU),e(VU,Gwr),e(YM,Owr),e(ce,Vwr),e(ce,KM),e(KM,r3e),e(r3e,Xwr),e(KM,zwr),e(KM,XU),e(XU,Wwr),e(KM,Qwr),e(ce,Hwr),e(ce,ZM),e(ZM,t3e),e(t3e,Uwr),e(ZM,Jwr),e(ZM,zU),e(zU,Ywr),e(ZM,Kwr),e(ce,Zwr),e(ce,eE),e(eE,a3e),e(a3e,e0r),e(eE,o0r),e(eE,WU),e(WU,r0r),e(eE,t0r),e(ce,a0r),e(ce,oE),e(oE,n3e),e(n3e,n0r),e(oE,s0r),e(oE,QU),e(QU,l0r),e(oE,i0r),e(ce,d0r),e(ce,rE),e(rE,s3e),e(s3e,c0r),e(rE,f0r),e(rE,HU),e(HU,m0r),e(rE,g0r),e(Ir,h0r),M(tE,Ir,null),b(f,FNe,u),b(f,Mc,u),e(Mc,aE),e(aE,l3e),M(ex,l3e,null),e(Mc,p0r),e(Mc,i3e),e(i3e,_0r),b(f,TNe,u),b(f,dr,u),M(ox,dr,null),e(dr,u0r),e(dr,Ec),e(Ec,b0r),e(Ec,UU),e(UU,v0r),e(Ec,F0r),e(Ec,JU),e(JU,T0r),e(Ec,M0r),e(dr,E0r),e(dr,rx),e(rx,C0r),e(rx,d3e),e(d3e,w0r),e(rx,A0r),e(dr,y0r),e(dr,jt),M(tx,jt,null),e(jt,L0r),e(jt,c3e),e(c3e,x0r),e(jt,$0r),e(jt,Cc),e(Cc,k0r),e(Cc,f3e),e(f3e,S0r),e(Cc,R0r),e(Cc,YU),e(YU,P0r),e(Cc,B0r),e(jt,I0r),M(nE,jt,null),e(dr,q0r),e(dr,qr),M(ax,qr,null),e(qr,N0r),e(qr,m3e),e(m3e,j0r),e(qr,D0r),e(qr,mn),e(mn,G0r),e(mn,g3e),e(g3e,O0r),e(mn,V0r),e(mn,h3e),e(h3e,X0r),e(mn,z0r),e(mn,p3e),e(p3e,W0r),e(mn,Q0r),e(qr,H0r),e(qr,_3e),e(_3e,sE),e(sE,u3e),e(u3e,U0r),e(sE,J0r),e(sE,KU),e(KU,Y0r),e(sE,K0r),e(qr,Z0r),M(lE,qr,null),b(f,MNe,u),b(f,wc,u),e(wc,iE),e(iE,b3e),M(nx,b3e,null),e(wc,eAr),e(wc,v3e),e(v3e,oAr),b(f,ENe,u),b(f,cr,u),M(sx,cr,null),e(cr,rAr),e(cr,Ac),e(Ac,tAr),e(Ac,ZU),e(ZU,aAr),e(Ac,nAr),e(Ac,eJ),e(eJ,sAr),e(Ac,lAr),e(cr,iAr),e(cr,lx),e(lx,dAr),e(lx,F3e),e(F3e,cAr),e(lx,fAr),e(cr,mAr),e(cr,Dt),M(ix,Dt,null),e(Dt,gAr),e(Dt,T3e),e(T3e,hAr),e(Dt,pAr),e(Dt,yc),e(yc,_Ar),e(yc,M3e),e(M3e,uAr),e(yc,bAr),e(yc,oJ),e(oJ,vAr),e(yc,FAr),e(Dt,TAr),M(dE,Dt,null),e(cr,MAr),e(cr,Nr),M(dx,Nr,null),e(Nr,EAr),e(Nr,E3e),e(E3e,CAr),e(Nr,wAr),e(Nr,gn),e(gn,AAr),e(gn,C3e),e(C3e,yAr),e(gn,LAr),e(gn,w3e),e(w3e,xAr),e(gn,$Ar),e(gn,A3e),e(A3e,kAr),e(gn,SAr),e(Nr,RAr),e(Nr,y3e),e(y3e,cE),e(cE,L3e),e(L3e,PAr),e(cE,BAr),e(cE,rJ),e(rJ,IAr),e(cE,qAr),e(Nr,NAr),M(fE,Nr,null),b(f,CNe,u),b(f,Lc,u),e(Lc,mE),e(mE,x3e),M(cx,x3e,null),e(Lc,jAr),e(Lc,$3e),e($3e,DAr),b(f,wNe,u),b(f,fr,u),M(fx,fr,null),e(fr,GAr),e(fr,xc),e(xc,OAr),e(xc,tJ),e(tJ,VAr),e(xc,XAr),e(xc,aJ),e(aJ,zAr),e(xc,WAr),e(fr,QAr),e(fr,mx),e(mx,HAr),e(mx,k3e),e(k3e,UAr),e(mx,JAr),e(fr,YAr),e(fr,Gt),M(gx,Gt,null),e(Gt,KAr),e(Gt,S3e),e(S3e,ZAr),e(Gt,eyr),e(Gt,$c),e($c,oyr),e($c,R3e),e(R3e,ryr),e($c,tyr),e($c,nJ),e(nJ,ayr),e($c,nyr),e(Gt,syr),M(gE,Gt,null),e(fr,lyr),e(fr,jr),M(hx,jr,null),e(jr,iyr),e(jr,P3e),e(P3e,dyr),e(jr,cyr),e(jr,hn),e(hn,fyr),e(hn,B3e),e(B3e,myr),e(hn,gyr),e(hn,I3e),e(I3e,hyr),e(hn,pyr),e(hn,q3e),e(q3e,_yr),e(hn,uyr),e(jr,byr),e(jr,re),e(re,hE),e(hE,N3e),e(N3e,vyr),e(hE,Fyr),e(hE,sJ),e(sJ,Tyr),e(hE,Myr),e(re,Eyr),e(re,pE),e(pE,j3e),e(j3e,Cyr),e(pE,wyr),e(pE,lJ),e(lJ,Ayr),e(pE,yyr),e(re,Lyr),e(re,_E),e(_E,D3e),e(D3e,xyr),e(_E,$yr),e(_E,iJ),e(iJ,kyr),e(_E,Syr),e(re,Ryr),e(re,uE),e(uE,G3e),e(G3e,Pyr),e(uE,Byr),e(uE,dJ),e(dJ,Iyr),e(uE,qyr),e(re,Nyr),e(re,bE),e(bE,O3e),e(O3e,jyr),e(bE,Dyr),e(bE,cJ),e(cJ,Gyr),e(bE,Oyr),e(re,Vyr),e(re,vE),e(vE,V3e),e(V3e,Xyr),e(vE,zyr),e(vE,fJ),e(fJ,Wyr),e(vE,Qyr),e(re,Hyr),e(re,FE),e(FE,X3e),e(X3e,Uyr),e(FE,Jyr),e(FE,mJ),e(mJ,Yyr),e(FE,Kyr),e(re,Zyr),e(re,TE),e(TE,z3e),e(z3e,eLr),e(TE,oLr),e(TE,gJ),e(gJ,rLr),e(TE,tLr),e(re,aLr),e(re,ME),e(ME,W3e),e(W3e,nLr),e(ME,sLr),e(ME,hJ),e(hJ,lLr),e(ME,iLr),e(re,dLr),e(re,EE),e(EE,Q3e),e(Q3e,cLr),e(EE,fLr),e(EE,pJ),e(pJ,mLr),e(EE,gLr),e(re,hLr),e(re,CE),e(CE,H3e),e(H3e,pLr),e(CE,_Lr),e(CE,_J),e(_J,uLr),e(CE,bLr),e(re,vLr),e(re,wE),e(wE,U3e),e(U3e,FLr),e(wE,TLr),e(wE,uJ),e(uJ,MLr),e(wE,ELr),e(re,CLr),e(re,AE),e(AE,J3e),e(J3e,wLr),e(AE,ALr),e(AE,bJ),e(bJ,yLr),e(AE,LLr),e(re,xLr),e(re,yE),e(yE,Y3e),e(Y3e,$Lr),e(yE,kLr),e(yE,vJ),e(vJ,SLr),e(yE,RLr),e(re,PLr),e(re,LE),e(LE,K3e),e(K3e,BLr),e(LE,ILr),e(LE,FJ),e(FJ,qLr),e(LE,NLr),e(re,jLr),e(re,xE),e(xE,Z3e),e(Z3e,DLr),e(xE,GLr),e(xE,TJ),e(TJ,OLr),e(xE,VLr),e(re,XLr),e(re,$E),e($E,eFe),e(eFe,zLr),e($E,WLr),e($E,MJ),e(MJ,QLr),e($E,HLr),e(re,ULr),e(re,kE),e(kE,oFe),e(oFe,JLr),e(kE,YLr),e(kE,EJ),e(EJ,KLr),e(kE,ZLr),e(re,e8r),e(re,SE),e(SE,rFe),e(rFe,o8r),e(SE,r8r),e(SE,CJ),e(CJ,t8r),e(SE,a8r),e(re,n8r),e(re,RE),e(RE,tFe),e(tFe,s8r),e(RE,l8r),e(RE,wJ),e(wJ,i8r),e(RE,d8r),e(re,c8r),e(re,PE),e(PE,aFe),e(aFe,f8r),e(PE,m8r),e(PE,AJ),e(AJ,g8r),e(PE,h8r),e(re,p8r),e(re,BE),e(BE,nFe),e(nFe,_8r),e(BE,u8r),e(BE,yJ),e(yJ,b8r),e(BE,v8r),e(re,F8r),e(re,IE),e(IE,sFe),e(sFe,T8r),e(IE,M8r),e(IE,LJ),e(LJ,E8r),e(IE,C8r),e(re,w8r),e(re,qE),e(qE,lFe),e(lFe,A8r),e(qE,y8r),e(qE,xJ),e(xJ,L8r),e(qE,x8r),e(re,$8r),e(re,NE),e(NE,iFe),e(iFe,k8r),e(NE,S8r),e(NE,$J),e($J,R8r),e(NE,P8r),e(jr,B8r),M(jE,jr,null),b(f,ANe,u),b(f,kc,u),e(kc,DE),e(DE,dFe),M(px,dFe,null),e(kc,I8r),e(kc,cFe),e(cFe,q8r),b(f,yNe,u),b(f,mr,u),M(_x,mr,null),e(mr,N8r),e(mr,Sc),e(Sc,j8r),e(Sc,kJ),e(kJ,D8r),e(Sc,G8r),e(Sc,SJ),e(SJ,O8r),e(Sc,V8r),e(mr,X8r),e(mr,ux),e(ux,z8r),e(ux,fFe),e(fFe,W8r),e(ux,Q8r),e(mr,H8r),e(mr,Ot),M(bx,Ot,null),e(Ot,U8r),e(Ot,mFe),e(mFe,J8r),e(Ot,Y8r),e(Ot,Rc),e(Rc,K8r),e(Rc,gFe),e(gFe,Z8r),e(Rc,e7r),e(Rc,RJ),e(RJ,o7r),e(Rc,r7r),e(Ot,t7r),M(GE,Ot,null),e(mr,a7r),e(mr,Dr),M(vx,Dr,null),e(Dr,n7r),e(Dr,hFe),e(hFe,s7r),e(Dr,l7r),e(Dr,pn),e(pn,i7r),e(pn,pFe),e(pFe,d7r),e(pn,c7r),e(pn,_Fe),e(_Fe,f7r),e(pn,m7r),e(pn,uFe),e(uFe,g7r),e(pn,h7r),e(Dr,p7r),e(Dr,Re),e(Re,OE),e(OE,bFe),e(bFe,_7r),e(OE,u7r),e(OE,PJ),e(PJ,b7r),e(OE,v7r),e(Re,F7r),e(Re,VE),e(VE,vFe),e(vFe,T7r),e(VE,M7r),e(VE,BJ),e(BJ,E7r),e(VE,C7r),e(Re,w7r),e(Re,XE),e(XE,FFe),e(FFe,A7r),e(XE,y7r),e(XE,IJ),e(IJ,L7r),e(XE,x7r),e(Re,$7r),e(Re,zE),e(zE,TFe),e(TFe,k7r),e(zE,S7r),e(zE,qJ),e(qJ,R7r),e(zE,P7r),e(Re,B7r),e(Re,WE),e(WE,MFe),e(MFe,I7r),e(WE,q7r),e(WE,NJ),e(NJ,N7r),e(WE,j7r),e(Re,D7r),e(Re,QE),e(QE,EFe),e(EFe,G7r),e(QE,O7r),e(QE,jJ),e(jJ,V7r),e(QE,X7r),e(Re,z7r),e(Re,HE),e(HE,CFe),e(CFe,W7r),e(HE,Q7r),e(HE,DJ),e(DJ,H7r),e(HE,U7r),e(Re,J7r),e(Re,UE),e(UE,wFe),e(wFe,Y7r),e(UE,K7r),e(UE,GJ),e(GJ,Z7r),e(UE,exr),e(Re,oxr),e(Re,JE),e(JE,AFe),e(AFe,rxr),e(JE,txr),e(JE,OJ),e(OJ,axr),e(JE,nxr),e(Dr,sxr),M(YE,Dr,null),b(f,LNe,u),b(f,Pc,u),e(Pc,KE),e(KE,yFe),M(Fx,yFe,null),e(Pc,lxr),e(Pc,LFe),e(LFe,ixr),b(f,xNe,u),b(f,gr,u),M(Tx,gr,null),e(gr,dxr),e(gr,Bc),e(Bc,cxr),e(Bc,VJ),e(VJ,fxr),e(Bc,mxr),e(Bc,XJ),e(XJ,gxr),e(Bc,hxr),e(gr,pxr),e(gr,Mx),e(Mx,_xr),e(Mx,xFe),e(xFe,uxr),e(Mx,bxr),e(gr,vxr),e(gr,Vt),M(Ex,Vt,null),e(Vt,Fxr),e(Vt,$Fe),e($Fe,Txr),e(Vt,Mxr),e(Vt,Ic),e(Ic,Exr),e(Ic,kFe),e(kFe,Cxr),e(Ic,wxr),e(Ic,zJ),e(zJ,Axr),e(Ic,yxr),e(Vt,Lxr),M(ZE,Vt,null),e(gr,xxr),e(gr,Gr),M(Cx,Gr,null),e(Gr,$xr),e(Gr,SFe),e(SFe,kxr),e(Gr,Sxr),e(Gr,_n),e(_n,Rxr),e(_n,RFe),e(RFe,Pxr),e(_n,Bxr),e(_n,PFe),e(PFe,Ixr),e(_n,qxr),e(_n,BFe),e(BFe,Nxr),e(_n,jxr),e(Gr,Dxr),e(Gr,Me),e(Me,eC),e(eC,IFe),e(IFe,Gxr),e(eC,Oxr),e(eC,WJ),e(WJ,Vxr),e(eC,Xxr),e(Me,zxr),e(Me,oC),e(oC,qFe),e(qFe,Wxr),e(oC,Qxr),e(oC,QJ),e(QJ,Hxr),e(oC,Uxr),e(Me,Jxr),e(Me,rC),e(rC,NFe),e(NFe,Yxr),e(rC,Kxr),e(rC,HJ),e(HJ,Zxr),e(rC,e9r),e(Me,o9r),e(Me,tC),e(tC,jFe),e(jFe,r9r),e(tC,t9r),e(tC,UJ),e(UJ,a9r),e(tC,n9r),e(Me,s9r),e(Me,aC),e(aC,DFe),e(DFe,l9r),e(aC,i9r),e(aC,JJ),e(JJ,d9r),e(aC,c9r),e(Me,f9r),e(Me,nC),e(nC,GFe),e(GFe,m9r),e(nC,g9r),e(nC,YJ),e(YJ,h9r),e(nC,p9r),e(Me,_9r),e(Me,sC),e(sC,OFe),e(OFe,u9r),e(sC,b9r),e(sC,KJ),e(KJ,v9r),e(sC,F9r),e(Me,T9r),e(Me,lC),e(lC,VFe),e(VFe,M9r),e(lC,E9r),e(lC,ZJ),e(ZJ,C9r),e(lC,w9r),e(Me,A9r),e(Me,iC),e(iC,XFe),e(XFe,y9r),e(iC,L9r),e(iC,eY),e(eY,x9r),e(iC,$9r),e(Me,k9r),e(Me,dC),e(dC,zFe),e(zFe,S9r),e(dC,R9r),e(dC,oY),e(oY,P9r),e(dC,B9r),e(Me,I9r),e(Me,cC),e(cC,WFe),e(WFe,q9r),e(cC,N9r),e(cC,rY),e(rY,j9r),e(cC,D9r),e(Me,G9r),e(Me,fC),e(fC,QFe),e(QFe,O9r),e(fC,V9r),e(fC,tY),e(tY,X9r),e(fC,z9r),e(Gr,W9r),M(mC,Gr,null),b(f,$Ne,u),b(f,qc,u),e(qc,gC),e(gC,HFe),M(wx,HFe,null),e(qc,Q9r),e(qc,UFe),e(UFe,H9r),b(f,kNe,u),b(f,hr,u),M(Ax,hr,null),e(hr,U9r),e(hr,Nc),e(Nc,J9r),e(Nc,aY),e(aY,Y9r),e(Nc,K9r),e(Nc,nY),e(nY,Z9r),e(Nc,e$r),e(hr,o$r),e(hr,yx),e(yx,r$r),e(yx,JFe),e(JFe,t$r),e(yx,a$r),e(hr,n$r),e(hr,Xt),M(Lx,Xt,null),e(Xt,s$r),e(Xt,YFe),e(YFe,l$r),e(Xt,i$r),e(Xt,jc),e(jc,d$r),e(jc,KFe),e(KFe,c$r),e(jc,f$r),e(jc,sY),e(sY,m$r),e(jc,g$r),e(Xt,h$r),M(hC,Xt,null),e(hr,p$r),e(hr,Or),M(xx,Or,null),e(Or,_$r),e(Or,ZFe),e(ZFe,u$r),e(Or,b$r),e(Or,un),e(un,v$r),e(un,e6e),e(e6e,F$r),e(un,T$r),e(un,o6e),e(o6e,M$r),e(un,E$r),e(un,r6e),e(r6e,C$r),e(un,w$r),e(Or,A$r),e(Or,Le),e(Le,pC),e(pC,t6e),e(t6e,y$r),e(pC,L$r),e(pC,lY),e(lY,x$r),e(pC,$$r),e(Le,k$r),e(Le,_C),e(_C,a6e),e(a6e,S$r),e(_C,R$r),e(_C,iY),e(iY,P$r),e(_C,B$r),e(Le,I$r),e(Le,uC),e(uC,n6e),e(n6e,q$r),e(uC,N$r),e(uC,dY),e(dY,j$r),e(uC,D$r),e(Le,G$r),e(Le,bC),e(bC,s6e),e(s6e,O$r),e(bC,V$r),e(bC,cY),e(cY,X$r),e(bC,z$r),e(Le,W$r),e(Le,vC),e(vC,l6e),e(l6e,Q$r),e(vC,H$r),e(vC,fY),e(fY,U$r),e(vC,J$r),e(Le,Y$r),e(Le,FC),e(FC,i6e),e(i6e,K$r),e(FC,Z$r),e(FC,mY),e(mY,ekr),e(FC,okr),e(Le,rkr),e(Le,TC),e(TC,d6e),e(d6e,tkr),e(TC,akr),e(TC,gY),e(gY,nkr),e(TC,skr),e(Le,lkr),e(Le,MC),e(MC,c6e),e(c6e,ikr),e(MC,dkr),e(MC,hY),e(hY,ckr),e(MC,fkr),e(Le,mkr),e(Le,EC),e(EC,f6e),e(f6e,gkr),e(EC,hkr),e(EC,pY),e(pY,pkr),e(EC,_kr),e(Le,ukr),e(Le,CC),e(CC,m6e),e(m6e,bkr),e(CC,vkr),e(CC,_Y),e(_Y,Fkr),e(CC,Tkr),e(Or,Mkr),M(wC,Or,null),b(f,SNe,u),b(f,Dc,u),e(Dc,AC),e(AC,g6e),M($x,g6e,null),e(Dc,Ekr),e(Dc,h6e),e(h6e,Ckr),b(f,RNe,u),b(f,pr,u),M(kx,pr,null),e(pr,wkr),e(pr,Gc),e(Gc,Akr),e(Gc,uY),e(uY,ykr),e(Gc,Lkr),e(Gc,bY),e(bY,xkr),e(Gc,$kr),e(pr,kkr),e(pr,Sx),e(Sx,Skr),e(Sx,p6e),e(p6e,Rkr),e(Sx,Pkr),e(pr,Bkr),e(pr,zt),M(Rx,zt,null),e(zt,Ikr),e(zt,_6e),e(_6e,qkr),e(zt,Nkr),e(zt,Oc),e(Oc,jkr),e(Oc,u6e),e(u6e,Dkr),e(Oc,Gkr),e(Oc,vY),e(vY,Okr),e(Oc,Vkr),e(zt,Xkr),M(yC,zt,null),e(pr,zkr),e(pr,Vr),M(Px,Vr,null),e(Vr,Wkr),e(Vr,b6e),e(b6e,Qkr),e(Vr,Hkr),e(Vr,bn),e(bn,Ukr),e(bn,v6e),e(v6e,Jkr),e(bn,Ykr),e(bn,F6e),e(F6e,Kkr),e(bn,Zkr),e(bn,T6e),e(T6e,eSr),e(bn,oSr),e(Vr,rSr),e(Vr,Pe),e(Pe,LC),e(LC,M6e),e(M6e,tSr),e(LC,aSr),e(LC,FY),e(FY,nSr),e(LC,sSr),e(Pe,lSr),e(Pe,xC),e(xC,E6e),e(E6e,iSr),e(xC,dSr),e(xC,TY),e(TY,cSr),e(xC,fSr),e(Pe,mSr),e(Pe,$C),e($C,C6e),e(C6e,gSr),e($C,hSr),e($C,MY),e(MY,pSr),e($C,_Sr),e(Pe,uSr),e(Pe,kC),e(kC,w6e),e(w6e,bSr),e(kC,vSr),e(kC,EY),e(EY,FSr),e(kC,TSr),e(Pe,MSr),e(Pe,SC),e(SC,A6e),e(A6e,ESr),e(SC,CSr),e(SC,CY),e(CY,wSr),e(SC,ASr),e(Pe,ySr),e(Pe,RC),e(RC,y6e),e(y6e,LSr),e(RC,xSr),e(RC,wY),e(wY,$Sr),e(RC,kSr),e(Pe,SSr),e(Pe,PC),e(PC,L6e),e(L6e,RSr),e(PC,PSr),e(PC,AY),e(AY,BSr),e(PC,ISr),e(Pe,qSr),e(Pe,BC),e(BC,x6e),e(x6e,NSr),e(BC,jSr),e(BC,yY),e(yY,DSr),e(BC,GSr),e(Pe,OSr),e(Pe,IC),e(IC,$6e),e($6e,VSr),e(IC,XSr),e(IC,LY),e(LY,zSr),e(IC,WSr),e(Vr,QSr),M(qC,Vr,null),b(f,PNe,u),b(f,Vc,u),e(Vc,NC),e(NC,k6e),M(Bx,k6e,null),e(Vc,HSr),e(Vc,S6e),e(S6e,USr),b(f,BNe,u),b(f,_r,u),M(Ix,_r,null),e(_r,JSr),e(_r,Xc),e(Xc,YSr),e(Xc,xY),e(xY,KSr),e(Xc,ZSr),e(Xc,$Y),e($Y,eRr),e(Xc,oRr),e(_r,rRr),e(_r,qx),e(qx,tRr),e(qx,R6e),e(R6e,aRr),e(qx,nRr),e(_r,sRr),e(_r,Wt),M(Nx,Wt,null),e(Wt,lRr),e(Wt,P6e),e(P6e,iRr),e(Wt,dRr),e(Wt,zc),e(zc,cRr),e(zc,B6e),e(B6e,fRr),e(zc,mRr),e(zc,kY),e(kY,gRr),e(zc,hRr),e(Wt,pRr),M(jC,Wt,null),e(_r,_Rr),e(_r,Xr),M(jx,Xr,null),e(Xr,uRr),e(Xr,I6e),e(I6e,bRr),e(Xr,vRr),e(Xr,vn),e(vn,FRr),e(vn,q6e),e(q6e,TRr),e(vn,MRr),e(vn,N6e),e(N6e,ERr),e(vn,CRr),e(vn,j6e),e(j6e,wRr),e(vn,ARr),e(Xr,yRr),e(Xr,xe),e(xe,DC),e(DC,D6e),e(D6e,LRr),e(DC,xRr),e(DC,SY),e(SY,$Rr),e(DC,kRr),e(xe,SRr),e(xe,GC),e(GC,G6e),e(G6e,RRr),e(GC,PRr),e(GC,RY),e(RY,BRr),e(GC,IRr),e(xe,qRr),e(xe,OC),e(OC,O6e),e(O6e,NRr),e(OC,jRr),e(OC,PY),e(PY,DRr),e(OC,GRr),e(xe,ORr),e(xe,VC),e(VC,V6e),e(V6e,VRr),e(VC,XRr),e(VC,BY),e(BY,zRr),e(VC,WRr),e(xe,QRr),e(xe,XC),e(XC,X6e),e(X6e,HRr),e(XC,URr),e(XC,IY),e(IY,JRr),e(XC,YRr),e(xe,KRr),e(xe,zC),e(zC,z6e),e(z6e,ZRr),e(zC,ePr),e(zC,qY),e(qY,oPr),e(zC,rPr),e(xe,tPr),e(xe,WC),e(WC,W6e),e(W6e,aPr),e(WC,nPr),e(WC,NY),e(NY,sPr),e(WC,lPr),e(xe,iPr),e(xe,QC),e(QC,Q6e),e(Q6e,dPr),e(QC,cPr),e(QC,jY),e(jY,fPr),e(QC,mPr),e(xe,gPr),e(xe,HC),e(HC,H6e),e(H6e,hPr),e(HC,pPr),e(HC,DY),e(DY,_Pr),e(HC,uPr),e(xe,bPr),e(xe,UC),e(UC,U6e),e(U6e,vPr),e(UC,FPr),e(UC,GY),e(GY,TPr),e(UC,MPr),e(Xr,EPr),M(JC,Xr,null),b(f,INe,u),b(f,Wc,u),e(Wc,YC),e(YC,J6e),M(Dx,J6e,null),e(Wc,CPr),e(Wc,Y6e),e(Y6e,wPr),b(f,qNe,u),b(f,ur,u),M(Gx,ur,null),e(ur,APr),e(ur,Qc),e(Qc,yPr),e(Qc,OY),e(OY,LPr),e(Qc,xPr),e(Qc,VY),e(VY,$Pr),e(Qc,kPr),e(ur,SPr),e(ur,Ox),e(Ox,RPr),e(Ox,K6e),e(K6e,PPr),e(Ox,BPr),e(ur,IPr),e(ur,Qt),M(Vx,Qt,null),e(Qt,qPr),e(Qt,Z6e),e(Z6e,NPr),e(Qt,jPr),e(Qt,Hc),e(Hc,DPr),e(Hc,eTe),e(eTe,GPr),e(Hc,OPr),e(Hc,XY),e(XY,VPr),e(Hc,XPr),e(Qt,zPr),M(KC,Qt,null),e(ur,WPr),e(ur,zr),M(Xx,zr,null),e(zr,QPr),e(zr,oTe),e(oTe,HPr),e(zr,UPr),e(zr,Fn),e(Fn,JPr),e(Fn,rTe),e(rTe,YPr),e(Fn,KPr),e(Fn,tTe),e(tTe,ZPr),e(Fn,eBr),e(Fn,aTe),e(aTe,oBr),e(Fn,rBr),e(zr,tBr),e(zr,$e),e($e,ZC),e(ZC,nTe),e(nTe,aBr),e(ZC,nBr),e(ZC,zY),e(zY,sBr),e(ZC,lBr),e($e,iBr),e($e,ew),e(ew,sTe),e(sTe,dBr),e(ew,cBr),e(ew,WY),e(WY,fBr),e(ew,mBr),e($e,gBr),e($e,ow),e(ow,lTe),e(lTe,hBr),e(ow,pBr),e(ow,QY),e(QY,_Br),e(ow,uBr),e($e,bBr),e($e,rw),e(rw,iTe),e(iTe,vBr),e(rw,FBr),e(rw,HY),e(HY,TBr),e(rw,MBr),e($e,EBr),e($e,tw),e(tw,dTe),e(dTe,CBr),e(tw,wBr),e(tw,UY),e(UY,ABr),e(tw,yBr),e($e,LBr),e($e,aw),e(aw,cTe),e(cTe,xBr),e(aw,$Br),e(aw,JY),e(JY,kBr),e(aw,SBr),e($e,RBr),e($e,nw),e(nw,fTe),e(fTe,PBr),e(nw,BBr),e(nw,YY),e(YY,IBr),e(nw,qBr),e($e,NBr),e($e,sw),e(sw,mTe),e(mTe,jBr),e(sw,DBr),e(sw,KY),e(KY,GBr),e(sw,OBr),e($e,VBr),e($e,lw),e(lw,gTe),e(gTe,XBr),e(lw,zBr),e(lw,ZY),e(ZY,WBr),e(lw,QBr),e($e,HBr),e($e,iw),e(iw,hTe),e(hTe,UBr),e(iw,JBr),e(iw,eK),e(eK,YBr),e(iw,KBr),e(zr,ZBr),M(dw,zr,null),b(f,NNe,u),b(f,Uc,u),e(Uc,cw),e(cw,pTe),M(zx,pTe,null),e(Uc,eIr),e(Uc,_Te),e(_Te,oIr),b(f,jNe,u),b(f,br,u),M(Wx,br,null),e(br,rIr),e(br,Jc),e(Jc,tIr),e(Jc,oK),e(oK,aIr),e(Jc,nIr),e(Jc,rK),e(rK,sIr),e(Jc,lIr),e(br,iIr),e(br,Qx),e(Qx,dIr),e(Qx,uTe),e(uTe,cIr),e(Qx,fIr),e(br,mIr),e(br,Ht),M(Hx,Ht,null),e(Ht,gIr),e(Ht,bTe),e(bTe,hIr),e(Ht,pIr),e(Ht,Yc),e(Yc,_Ir),e(Yc,vTe),e(vTe,uIr),e(Yc,bIr),e(Yc,tK),e(tK,vIr),e(Yc,FIr),e(Ht,TIr),M(fw,Ht,null),e(br,MIr),e(br,Wr),M(Ux,Wr,null),e(Wr,EIr),e(Wr,FTe),e(FTe,CIr),e(Wr,wIr),e(Wr,Tn),e(Tn,AIr),e(Tn,TTe),e(TTe,yIr),e(Tn,LIr),e(Tn,MTe),e(MTe,xIr),e(Tn,$Ir),e(Tn,ETe),e(ETe,kIr),e(Tn,SIr),e(Wr,RIr),e(Wr,De),e(De,mw),e(mw,CTe),e(CTe,PIr),e(mw,BIr),e(mw,aK),e(aK,IIr),e(mw,qIr),e(De,NIr),e(De,gw),e(gw,wTe),e(wTe,jIr),e(gw,DIr),e(gw,nK),e(nK,GIr),e(gw,OIr),e(De,VIr),e(De,hw),e(hw,ATe),e(ATe,XIr),e(hw,zIr),e(hw,sK),e(sK,WIr),e(hw,QIr),e(De,HIr),e(De,pw),e(pw,yTe),e(yTe,UIr),e(pw,JIr),e(pw,lK),e(lK,YIr),e(pw,KIr),e(De,ZIr),e(De,_w),e(_w,LTe),e(LTe,eqr),e(_w,oqr),e(_w,iK),e(iK,rqr),e(_w,tqr),e(De,aqr),e(De,uw),e(uw,xTe),e(xTe,nqr),e(uw,sqr),e(uw,dK),e(dK,lqr),e(uw,iqr),e(De,dqr),e(De,bw),e(bw,$Te),e($Te,cqr),e(bw,fqr),e(bw,cK),e(cK,mqr),e(bw,gqr),e(De,hqr),e(De,vw),e(vw,kTe),e(kTe,pqr),e(vw,_qr),e(vw,fK),e(fK,uqr),e(vw,bqr),e(Wr,vqr),M(Fw,Wr,null),b(f,DNe,u),b(f,Kc,u),e(Kc,Tw),e(Tw,STe),M(Jx,STe,null),e(Kc,Fqr),e(Kc,RTe),e(RTe,Tqr),b(f,GNe,u),b(f,vr,u),M(Yx,vr,null),e(vr,Mqr),e(vr,Zc),e(Zc,Eqr),e(Zc,mK),e(mK,Cqr),e(Zc,wqr),e(Zc,gK),e(gK,Aqr),e(Zc,yqr),e(vr,Lqr),e(vr,Kx),e(Kx,xqr),e(Kx,PTe),e(PTe,$qr),e(Kx,kqr),e(vr,Sqr),e(vr,Ut),M(Zx,Ut,null),e(Ut,Rqr),e(Ut,BTe),e(BTe,Pqr),e(Ut,Bqr),e(Ut,ef),e(ef,Iqr),e(ef,ITe),e(ITe,qqr),e(ef,Nqr),e(ef,hK),e(hK,jqr),e(ef,Dqr),e(Ut,Gqr),M(Mw,Ut,null),e(vr,Oqr),e(vr,Qr),M(e9,Qr,null),e(Qr,Vqr),e(Qr,qTe),e(qTe,Xqr),e(Qr,zqr),e(Qr,Mn),e(Mn,Wqr),e(Mn,NTe),e(NTe,Qqr),e(Mn,Hqr),e(Mn,jTe),e(jTe,Uqr),e(Mn,Jqr),e(Mn,DTe),e(DTe,Yqr),e(Mn,Kqr),e(Qr,Zqr),e(Qr,Ge),e(Ge,Ew),e(Ew,GTe),e(GTe,eNr),e(Ew,oNr),e(Ew,pK),e(pK,rNr),e(Ew,tNr),e(Ge,aNr),e(Ge,Cw),e(Cw,OTe),e(OTe,nNr),e(Cw,sNr),e(Cw,_K),e(_K,lNr),e(Cw,iNr),e(Ge,dNr),e(Ge,ww),e(ww,VTe),e(VTe,cNr),e(ww,fNr),e(ww,uK),e(uK,mNr),e(ww,gNr),e(Ge,hNr),e(Ge,Aw),e(Aw,XTe),e(XTe,pNr),e(Aw,_Nr),e(Aw,bK),e(bK,uNr),e(Aw,bNr),e(Ge,vNr),e(Ge,yw),e(yw,zTe),e(zTe,FNr),e(yw,TNr),e(yw,vK),e(vK,MNr),e(yw,ENr),e(Ge,CNr),e(Ge,Lw),e(Lw,WTe),e(WTe,wNr),e(Lw,ANr),e(Lw,FK),e(FK,yNr),e(Lw,LNr),e(Ge,xNr),e(Ge,xw),e(xw,QTe),e(QTe,$Nr),e(xw,kNr),e(xw,TK),e(TK,SNr),e(xw,RNr),e(Ge,PNr),e(Ge,$w),e($w,HTe),e(HTe,BNr),e($w,INr),e($w,MK),e(MK,qNr),e($w,NNr),e(Qr,jNr),M(kw,Qr,null),b(f,ONe,u),b(f,of,u),e(of,Sw),e(Sw,UTe),M(o9,UTe,null),e(of,DNr),e(of,JTe),e(JTe,GNr),b(f,VNe,u),b(f,Fr,u),M(r9,Fr,null),e(Fr,ONr),e(Fr,rf),e(rf,VNr),e(rf,EK),e(EK,XNr),e(rf,zNr),e(rf,CK),e(CK,WNr),e(rf,QNr),e(Fr,HNr),e(Fr,t9),e(t9,UNr),e(t9,YTe),e(YTe,JNr),e(t9,YNr),e(Fr,KNr),e(Fr,Jt),M(a9,Jt,null),e(Jt,ZNr),e(Jt,KTe),e(KTe,ejr),e(Jt,ojr),e(Jt,tf),e(tf,rjr),e(tf,ZTe),e(ZTe,tjr),e(tf,ajr),e(tf,wK),e(wK,njr),e(tf,sjr),e(Jt,ljr),M(Rw,Jt,null),e(Fr,ijr),e(Fr,Hr),M(n9,Hr,null),e(Hr,djr),e(Hr,eMe),e(eMe,cjr),e(Hr,fjr),e(Hr,En),e(En,mjr),e(En,oMe),e(oMe,gjr),e(En,hjr),e(En,rMe),e(rMe,pjr),e(En,_jr),e(En,tMe),e(tMe,ujr),e(En,bjr),e(Hr,vjr),e(Hr,aMe),e(aMe,Pw),e(Pw,nMe),e(nMe,Fjr),e(Pw,Tjr),e(Pw,AK),e(AK,Mjr),e(Pw,Ejr),e(Hr,Cjr),M(Bw,Hr,null),b(f,XNe,u),b(f,af,u),e(af,Iw),e(Iw,sMe),M(s9,sMe,null),e(af,wjr),e(af,lMe),e(lMe,Ajr),b(f,zNe,u),b(f,Tr,u),M(l9,Tr,null),e(Tr,yjr),e(Tr,nf),e(nf,Ljr),e(nf,yK),e(yK,xjr),e(nf,$jr),e(nf,LK),e(LK,kjr),e(nf,Sjr),e(Tr,Rjr),e(Tr,i9),e(i9,Pjr),e(i9,iMe),e(iMe,Bjr),e(i9,Ijr),e(Tr,qjr),e(Tr,Yt),M(d9,Yt,null),e(Yt,Njr),e(Yt,dMe),e(dMe,jjr),e(Yt,Djr),e(Yt,sf),e(sf,Gjr),e(sf,cMe),e(cMe,Ojr),e(sf,Vjr),e(sf,xK),e(xK,Xjr),e(sf,zjr),e(Yt,Wjr),M(qw,Yt,null),e(Tr,Qjr),e(Tr,Ur),M(c9,Ur,null),e(Ur,Hjr),e(Ur,fMe),e(fMe,Ujr),e(Ur,Jjr),e(Ur,Cn),e(Cn,Yjr),e(Cn,mMe),e(mMe,Kjr),e(Cn,Zjr),e(Cn,gMe),e(gMe,eDr),e(Cn,oDr),e(Cn,hMe),e(hMe,rDr),e(Cn,tDr),e(Ur,aDr),e(Ur,f9),e(f9,Nw),e(Nw,pMe),e(pMe,nDr),e(Nw,sDr),e(Nw,$K),e($K,lDr),e(Nw,iDr),e(f9,dDr),e(f9,jw),e(jw,_Me),e(_Me,cDr),e(jw,fDr),e(jw,kK),e(kK,mDr),e(jw,gDr),e(Ur,hDr),M(Dw,Ur,null),b(f,WNe,u),b(f,lf,u),e(lf,Gw),e(Gw,uMe),M(m9,uMe,null),e(lf,pDr),e(lf,bMe),e(bMe,_Dr),b(f,QNe,u),b(f,Mr,u),M(g9,Mr,null),e(Mr,uDr),e(Mr,df),e(df,bDr),e(df,SK),e(SK,vDr),e(df,FDr),e(df,RK),e(RK,TDr),e(df,MDr),e(Mr,EDr),e(Mr,h9),e(h9,CDr),e(h9,vMe),e(vMe,wDr),e(h9,ADr),e(Mr,yDr),e(Mr,Kt),M(p9,Kt,null),e(Kt,LDr),e(Kt,FMe),e(FMe,xDr),e(Kt,$Dr),e(Kt,cf),e(cf,kDr),e(cf,TMe),e(TMe,SDr),e(cf,RDr),e(cf,PK),e(PK,PDr),e(cf,BDr),e(Kt,IDr),M(Ow,Kt,null),e(Mr,qDr),e(Mr,Jr),M(_9,Jr,null),e(Jr,NDr),e(Jr,MMe),e(MMe,jDr),e(Jr,DDr),e(Jr,wn),e(wn,GDr),e(wn,EMe),e(EMe,ODr),e(wn,VDr),e(wn,CMe),e(CMe,XDr),e(wn,zDr),e(wn,wMe),e(wMe,WDr),e(wn,QDr),e(Jr,HDr),e(Jr,AMe),e(AMe,Vw),e(Vw,yMe),e(yMe,UDr),e(Vw,JDr),e(Vw,BK),e(BK,YDr),e(Vw,KDr),e(Jr,ZDr),M(Xw,Jr,null),HNe=!0},p(f,[u]){const u9={};u&2&&(u9.$$scope={dirty:u,ctx:f}),vf.$set(u9);const LMe={};u&2&&(LMe.$$scope={dirty:u,ctx:f}),vg.$set(LMe);const xMe={};u&2&&(xMe.$$scope={dirty:u,ctx:f}),Zg.$set(xMe);const $Me={};u&2&&($Me.$$scope={dirty:u,ctx:f}),Lh.$set($Me);const b9={};u&2&&(b9.$$scope={dirty:u,ctx:f}),xh.$set(b9);const kMe={};u&2&&(kMe.$$scope={dirty:u,ctx:f}),Hh.$set(kMe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Uh.$set(An);const SMe={};u&2&&(SMe.$$scope={dirty:u,ctx:f}),Kh.$set(SMe);const RMe={};u&2&&(RMe.$$scope={dirty:u,ctx:f}),X_.$set(RMe);const PMe={};u&2&&(PMe.$$scope={dirty:u,ctx:f}),W_.$set(PMe);const v9={};u&2&&(v9.$$scope={dirty:u,ctx:f}),Iu.$set(v9);const BMe={};u&2&&(BMe.$$scope={dirty:u,ctx:f}),Nu.$set(BMe);const F9={};u&2&&(F9.$$scope={dirty:u,ctx:f}),M1.$set(F9);const IMe={};u&2&&(IMe.$$scope={dirty:u,ctx:f}),C1.$set(IMe);const T9={};u&2&&(T9.$$scope={dirty:u,ctx:f}),lb.$set(T9);const qMe={};u&2&&(qMe.$$scope={dirty:u,ctx:f}),db.$set(qMe);const NMe={};u&2&&(NMe.$$scope={dirty:u,ctx:f}),yb.$set(NMe);const jMe={};u&2&&(jMe.$$scope={dirty:u,ctx:f}),xb.$set(jMe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),E2.$set(ff);const DMe={};u&2&&(DMe.$$scope={dirty:u,ctx:f}),w2.$set(DMe);const GMe={};u&2&&(GMe.$$scope={dirty:u,ctx:f}),r4.$set(GMe);const OMe={};u&2&&(OMe.$$scope={dirty:u,ctx:f}),a4.$set(OMe);const M9={};u&2&&(M9.$$scope={dirty:u,ctx:f}),f4.$set(M9);const VMe={};u&2&&(VMe.$$scope={dirty:u,ctx:f}),g4.$set(VMe);const XMe={};u&2&&(XMe.$$scope={dirty:u,ctx:f}),H4.$set(XMe);const zMe={};u&2&&(zMe.$$scope={dirty:u,ctx:f}),J4.$set(zMe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),q5.$set(et);const E9={};u&2&&(E9.$$scope={dirty:u,ctx:f}),j5.$set(E9);const WMe={};u&2&&(WMe.$$scope={dirty:u,ctx:f}),O5.$set(WMe);const C9={};u&2&&(C9.$$scope={dirty:u,ctx:f}),X5.$set(C9);const QMe={};u&2&&(QMe.$$scope={dirty:u,ctx:f}),tv.$set(QMe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),nv.$set(ot);const HMe={};u&2&&(HMe.$$scope={dirty:u,ctx:f}),iv.$set(HMe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),cv.$set(mf);const UMe={};u&2&&(UMe.$$scope={dirty:u,ctx:f}),Tv.$set(UMe);const JMe={};u&2&&(JMe.$$scope={dirty:u,ctx:f}),Ev.$set(JMe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),$v.$set(y);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),Sv.$set(zw);const YMe={};u&2&&(YMe.$$scope={dirty:u,ctx:f}),Vv.$set(YMe);const KMe={};u&2&&(KMe.$$scope={dirty:u,ctx:f}),zv.$set(KMe);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),Uv.$set(Ww);const ZMe={};u&2&&(ZMe.$$scope={dirty:u,ctx:f}),Yv.$set(ZMe);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),a3.$set(eEe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),s3.$set(Qw);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),f3.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),g3.$set(rEe);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),u3.$set(Hw);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),v3.$set(tEe);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),M3.$set(aEe);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),C3.$set(Uw);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),$3.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),S3.$set(sEe);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),B3.$set(Jw);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),q3.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),$F.$set(iEe);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),SF.$set(Yw);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),r6.$set(dEe);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),a6.$set(cEe);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),b6.$set(Kw);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),F6.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),w6.$set(mEe);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),y6.$set(Zw);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),H6.$set(gEe);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),J6.$set(hEe);const e0={};u&2&&(e0.$$scope={dirty:u,ctx:f}),lT.$set(e0);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),dT.$set(pEe);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),IT.$set(_Ee);const o0={};u&2&&(o0.$$scope={dirty:u,ctx:f}),NT.$set(o0);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),rM.$set(uEe);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),aM.$set(bEe);const r0={};u&2&&(r0.$$scope={dirty:u,ctx:f}),lM.$set(r0);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),dM.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),fM.$set(FEe);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),gM.$set(t0);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),PM.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),IM.$set(MEe);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),tE.$set(a0);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),nE.$set(EEe);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),lE.$set(CEe);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),dE.$set(n0);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),fE.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),gE.$set(AEe);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),jE.$set(s0);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),GE.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),YE.$set(LEe);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),ZE.$set(l0);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),mC.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),hC.$set($Ee);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),wC.$set(i0);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),yC.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),qC.$set(SEe);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),jC.$set(d0);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),JC.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),KC.$set(PEe);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),dw.$set(c0);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),fw.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),Fw.$set(IEe);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),Mw.$set(f0);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),kw.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),Rw.$set(NEe);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),Bw.$set(m0);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),qw.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),Dw.$set(DEe);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),Ow.$set(g0);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),Xw.$set(GEe)},i(f){HNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(vf.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(by.$$.fragment,f),E(vg.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Cy.$$.fragment,f),E(Zg.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Iy.$$.fragment,f),E(Hh.$$.fragment,f),E(Uh.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(Kh.$$.fragment,f),E(Oy.$$.fragment,f),E(X_.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(W_.$$.fragment,f),E(Qy.$$.fragment,f),E(Iu.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(Nu.$$.fragment,f),E(Ky.$$.fragment,f),E(M1.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(C1.$$.fragment,f),E(tL.$$.fragment,f),E(lb.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(db.$$.fragment,f),E(iL.$$.fragment,f),E(yb.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(xb.$$.fragment,f),E(gL.$$.fragment,f),E(E2.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(w2.$$.fragment,f),E(bL.$$.fragment,f),E(r4.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(a4.$$.fragment,f),E(EL.$$.fragment,f),E(f4.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(g4.$$.fragment,f),E(LL.$$.fragment,f),E(H4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(J4.$$.fragment,f),E(RL.$$.fragment,f),E(q5.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(j5.$$.fragment,f),E(NL.$$.fragment,f),E(O5.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(X5.$$.fragment,f),E(VL.$$.fragment,f),E(tv.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(nv.$$.fragment,f),E(HL.$$.fragment,f),E(iv.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(cv.$$.fragment,f),E(ZL.$$.fragment,f),E(Tv.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(Ev.$$.fragment,f),E(a8.$$.fragment,f),E($v.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(Sv.$$.fragment,f),E(d8.$$.fragment,f),E(Vv.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(zv.$$.fragment,f),E(h8.$$.fragment,f),E(Uv.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(Yv.$$.fragment,f),E(F8.$$.fragment,f),E(a3.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(s3.$$.fragment,f),E(w8.$$.fragment,f),E(f3.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(g3.$$.fragment,f),E($8.$$.fragment,f),E(u3.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(v3.$$.fragment,f),E(I8.$$.fragment,f),E(M3.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(C3.$$.fragment,f),E(G8.$$.fragment,f),E($3.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(S3.$$.fragment,f),E(W8.$$.fragment,f),E(B3.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(q3.$$.fragment,f),E(Y8.$$.fragment,f),E($F.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o7.$$.fragment,f),E(SF.$$.fragment,f),E(r7.$$.fragment,f),E(r6.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(a6.$$.fragment,f),E(l7.$$.fragment,f),E(b6.$$.fragment,f),E(i7.$$.fragment,f),E(d7.$$.fragment,f),E(f7.$$.fragment,f),E(F6.$$.fragment,f),E(m7.$$.fragment,f),E(w6.$$.fragment,f),E(g7.$$.fragment,f),E(h7.$$.fragment,f),E(_7.$$.fragment,f),E(y6.$$.fragment,f),E(u7.$$.fragment,f),E(H6.$$.fragment,f),E(b7.$$.fragment,f),E(v7.$$.fragment,f),E(T7.$$.fragment,f),E(J6.$$.fragment,f),E(M7.$$.fragment,f),E(lT.$$.fragment,f),E(E7.$$.fragment,f),E(C7.$$.fragment,f),E(A7.$$.fragment,f),E(dT.$$.fragment,f),E(y7.$$.fragment,f),E(IT.$$.fragment,f),E(L7.$$.fragment,f),E(x7.$$.fragment,f),E(k7.$$.fragment,f),E(NT.$$.fragment,f),E(S7.$$.fragment,f),E(rM.$$.fragment,f),E(R7.$$.fragment,f),E(P7.$$.fragment,f),E(I7.$$.fragment,f),E(aM.$$.fragment,f),E(q7.$$.fragment,f),E(lM.$$.fragment,f),E(j7.$$.fragment,f),E(D7.$$.fragment,f),E(O7.$$.fragment,f),E(dM.$$.fragment,f),E(V7.$$.fragment,f),E(fM.$$.fragment,f),E(X7.$$.fragment,f),E(z7.$$.fragment,f),E(Q7.$$.fragment,f),E(gM.$$.fragment,f),E(H7.$$.fragment,f),E(PM.$$.fragment,f),E(U7.$$.fragment,f),E(J7.$$.fragment,f),E(K7.$$.fragment,f),E(IM.$$.fragment,f),E(Z7.$$.fragment,f),E(tE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(nE.$$.fragment,f),E(ax.$$.fragment,f),E(lE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(dE.$$.fragment,f),E(dx.$$.fragment,f),E(fE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(gE.$$.fragment,f),E(hx.$$.fragment,f),E(jE.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(GE.$$.fragment,f),E(vx.$$.fragment,f),E(YE.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(ZE.$$.fragment,f),E(Cx.$$.fragment,f),E(mC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(hC.$$.fragment,f),E(xx.$$.fragment,f),E(wC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(yC.$$.fragment,f),E(Px.$$.fragment,f),E(qC.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jC.$$.fragment,f),E(jx.$$.fragment,f),E(JC.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(KC.$$.fragment,f),E(Xx.$$.fragment,f),E(dw.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(fw.$$.fragment,f),E(Ux.$$.fragment,f),E(Fw.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(Mw.$$.fragment,f),E(e9.$$.fragment,f),E(kw.$$.fragment,f),E(o9.$$.fragment,f),E(r9.$$.fragment,f),E(a9.$$.fragment,f),E(Rw.$$.fragment,f),E(n9.$$.fragment,f),E(Bw.$$.fragment,f),E(s9.$$.fragment,f),E(l9.$$.fragment,f),E(d9.$$.fragment,f),E(qw.$$.fragment,f),E(c9.$$.fragment,f),E(Dw.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(Ow.$$.fragment,f),E(_9.$$.fragment,f),E(Xw.$$.fragment,f),HNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(vf.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(by.$$.fragment,f),C(vg.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Cy.$$.fragment,f),C(Zg.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Iy.$$.fragment,f),C(Hh.$$.fragment,f),C(Uh.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(Kh.$$.fragment,f),C(Oy.$$.fragment,f),C(X_.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(W_.$$.fragment,f),C(Qy.$$.fragment,f),C(Iu.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(Nu.$$.fragment,f),C(Ky.$$.fragment,f),C(M1.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(C1.$$.fragment,f),C(tL.$$.fragment,f),C(lb.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(db.$$.fragment,f),C(iL.$$.fragment,f),C(yb.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(xb.$$.fragment,f),C(gL.$$.fragment,f),C(E2.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(w2.$$.fragment,f),C(bL.$$.fragment,f),C(r4.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(a4.$$.fragment,f),C(EL.$$.fragment,f),C(f4.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(g4.$$.fragment,f),C(LL.$$.fragment,f),C(H4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(J4.$$.fragment,f),C(RL.$$.fragment,f),C(q5.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(j5.$$.fragment,f),C(NL.$$.fragment,f),C(O5.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(X5.$$.fragment,f),C(VL.$$.fragment,f),C(tv.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(nv.$$.fragment,f),C(HL.$$.fragment,f),C(iv.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(cv.$$.fragment,f),C(ZL.$$.fragment,f),C(Tv.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(Ev.$$.fragment,f),C(a8.$$.fragment,f),C($v.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(Sv.$$.fragment,f),C(d8.$$.fragment,f),C(Vv.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(zv.$$.fragment,f),C(h8.$$.fragment,f),C(Uv.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(Yv.$$.fragment,f),C(F8.$$.fragment,f),C(a3.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(s3.$$.fragment,f),C(w8.$$.fragment,f),C(f3.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(g3.$$.fragment,f),C($8.$$.fragment,f),C(u3.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(v3.$$.fragment,f),C(I8.$$.fragment,f),C(M3.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(C3.$$.fragment,f),C(G8.$$.fragment,f),C($3.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(S3.$$.fragment,f),C(W8.$$.fragment,f),C(B3.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(q3.$$.fragment,f),C(Y8.$$.fragment,f),C($F.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o7.$$.fragment,f),C(SF.$$.fragment,f),C(r7.$$.fragment,f),C(r6.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(a6.$$.fragment,f),C(l7.$$.fragment,f),C(b6.$$.fragment,f),C(i7.$$.fragment,f),C(d7.$$.fragment,f),C(f7.$$.fragment,f),C(F6.$$.fragment,f),C(m7.$$.fragment,f),C(w6.$$.fragment,f),C(g7.$$.fragment,f),C(h7.$$.fragment,f),C(_7.$$.fragment,f),C(y6.$$.fragment,f),C(u7.$$.fragment,f),C(H6.$$.fragment,f),C(b7.$$.fragment,f),C(v7.$$.fragment,f),C(T7.$$.fragment,f),C(J6.$$.fragment,f),C(M7.$$.fragment,f),C(lT.$$.fragment,f),C(E7.$$.fragment,f),C(C7.$$.fragment,f),C(A7.$$.fragment,f),C(dT.$$.fragment,f),C(y7.$$.fragment,f),C(IT.$$.fragment,f),C(L7.$$.fragment,f),C(x7.$$.fragment,f),C(k7.$$.fragment,f),C(NT.$$.fragment,f),C(S7.$$.fragment,f),C(rM.$$.fragment,f),C(R7.$$.fragment,f),C(P7.$$.fragment,f),C(I7.$$.fragment,f),C(aM.$$.fragment,f),C(q7.$$.fragment,f),C(lM.$$.fragment,f),C(j7.$$.fragment,f),C(D7.$$.fragment,f),C(O7.$$.fragment,f),C(dM.$$.fragment,f),C(V7.$$.fragment,f),C(fM.$$.fragment,f),C(X7.$$.fragment,f),C(z7.$$.fragment,f),C(Q7.$$.fragment,f),C(gM.$$.fragment,f),C(H7.$$.fragment,f),C(PM.$$.fragment,f),C(U7.$$.fragment,f),C(J7.$$.fragment,f),C(K7.$$.fragment,f),C(IM.$$.fragment,f),C(Z7.$$.fragment,f),C(tE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(nE.$$.fragment,f),C(ax.$$.fragment,f),C(lE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(dE.$$.fragment,f),C(dx.$$.fragment,f),C(fE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(gE.$$.fragment,f),C(hx.$$.fragment,f),C(jE.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(GE.$$.fragment,f),C(vx.$$.fragment,f),C(YE.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(ZE.$$.fragment,f),C(Cx.$$.fragment,f),C(mC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(hC.$$.fragment,f),C(xx.$$.fragment,f),C(wC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(yC.$$.fragment,f),C(Px.$$.fragment,f),C(qC.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jC.$$.fragment,f),C(jx.$$.fragment,f),C(JC.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(KC.$$.fragment,f),C(Xx.$$.fragment,f),C(dw.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(fw.$$.fragment,f),C(Ux.$$.fragment,f),C(Fw.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(Mw.$$.fragment,f),C(e9.$$.fragment,f),C(kw.$$.fragment,f),C(o9.$$.fragment,f),C(r9.$$.fragment,f),C(a9.$$.fragment,f),C(Rw.$$.fragment,f),C(n9.$$.fragment,f),C(Bw.$$.fragment,f),C(s9.$$.fragment,f),C(l9.$$.fragment,f),C(d9.$$.fragment,f),C(qw.$$.fragment,f),C(c9.$$.fragment,f),C(Dw.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(Ow.$$.fragment,f),C(_9.$$.fragment,f),C(Xw.$$.fragment,f),HNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(zIe),f&&t(ui),w(my),f&&t(WIe),f&&t(kn),f&&t(QIe),w(gy,f),f&&t(HIe),f&&t(P$),f&&t(UIe),w(vf,f),f&&t(JIe),f&&t(bi),w(hy),f&&t(YIe),f&&t(Co),w(py),w(by),w(vg),w(vy),f&&t(KIe),f&&t(Fi),w(Fy),f&&t(ZIe),f&&t(wo),w(Ty),w(Cy),w(Zg),w(wy),f&&t(eqe),f&&t(Ti),w(Ay),f&&t(oqe),f&&t(Ao),w(yy),w($y),w(Lh),w(xh),w(ky),f&&t(rqe),f&&t(Mi),w(Sy),f&&t(tqe),f&&t(yo),w(Ry),w(Iy),w(Hh),w(Uh),w(qy),f&&t(aqe),f&&t(Ci),w(Ny),f&&t(nqe),f&&t(Lo),w(jy),w(Gy),w(Kh),w(Oy),w(X_),f&&t(sqe),f&&t(yi),w(Vy),f&&t(lqe),f&&t(xo),w(Xy),w(Wy),w(W_),w(Qy),w(Iu),f&&t(iqe),f&&t($i),w(Hy),f&&t(dqe),f&&t($o),w(Uy),w(Yy),w(Nu),w(Ky),w(M1),f&&t(cqe),f&&t(Ri),w(Zy),f&&t(fqe),f&&t(ko),w(eL),w(rL),w(C1),w(tL),w(lb),f&&t(mqe),f&&t(Ii),w(aL),f&&t(gqe),f&&t(So),w(nL),w(lL),w(db),w(iL),w(yb),f&&t(hqe),f&&t(ji),w(dL),f&&t(pqe),f&&t(Ro),w(cL),w(mL),w(xb),w(gL),w(E2),f&&t(_qe),f&&t(Oi),w(hL),f&&t(uqe),f&&t(Po),w(pL),w(uL),w(w2),w(bL),w(r4),f&&t(bqe),f&&t(zi),w(vL),f&&t(vqe),f&&t(Bo),w(FL),w(ML),w(a4),w(EL),w(f4),f&&t(Fqe),f&&t(Hi),w(CL),f&&t(Tqe),f&&t(Io),w(wL),w(yL),w(g4),w(LL),w(H4),f&&t(Mqe),f&&t(Yi),w(xL),f&&t(Eqe),f&&t(qo),w($L),w(SL),w(J4),w(RL),w(q5),f&&t(Cqe),f&&t(ed),w(PL),f&&t(wqe),f&&t(No),w(BL),w(qL),w(j5),w(NL),w(O5),f&&t(Aqe),f&&t(td),w(jL),f&&t(yqe),f&&t(jo),w(DL),w(OL),w(X5),w(VL),w(tv),f&&t(Lqe),f&&t(sd),w(XL),f&&t(xqe),f&&t(Do),w(zL),w(QL),w(nv),w(HL),w(iv),f&&t($qe),f&&t(dd),w(UL),f&&t(kqe),f&&t(Go),w(JL),w(KL),w(cv),w(ZL),w(Tv),f&&t(Sqe),f&&t(md),w(e8),f&&t(Rqe),f&&t(Oo),w(o8),w(t8),w(Ev),w(a8),w($v),f&&t(Pqe),f&&t(pd),w(n8),f&&t(Bqe),f&&t(Vo),w(s8),w(i8),w(Sv),w(d8),w(Vv),f&&t(Iqe),f&&t(bd),w(c8),f&&t(qqe),f&&t(Xo),w(f8),w(g8),w(zv),w(h8),w(Uv),f&&t(Nqe),f&&t(Td),w(_8),f&&t(jqe),f&&t(zo),w(u8),w(v8),w(Yv),w(F8),w(a3),f&&t(Dqe),f&&t(Cd),w(T8),f&&t(Gqe),f&&t(Wo),w(M8),w(C8),w(s3),w(w8),w(f3),f&&t(Oqe),f&&t(Ld),w(A8),f&&t(Vqe),f&&t(Qo),w(y8),w(x8),w(g3),w($8),w(u3),f&&t(Xqe),f&&t(kd),w(S8),f&&t(zqe),f&&t(Ho),w(R8),w(B8),w(v3),w(I8),w(M3),f&&t(Wqe),f&&t(Pd),w(q8),f&&t(Qqe),f&&t(Uo),w(N8),w(D8),w(C3),w(G8),w($3),f&&t(Hqe),f&&t(qd),w(O8),f&&t(Uqe),f&&t(Jo),w(V8),w(z8),w(S3),w(W8),w(B3),f&&t(Jqe),f&&t(Dd),w(Q8),f&&t(Yqe),f&&t(Yo),w(H8),w(J8),w(q3),w(Y8),w($F),f&&t(Kqe),f&&t(Vd),w(K8),f&&t(Zqe),f&&t(Ko),w(Z8),w(o7),w(SF),w(r7),w(r6),f&&t(eNe),f&&t(Wd),w(t7),f&&t(oNe),f&&t(Zo),w(a7),w(s7),w(a6),w(l7),w(b6),f&&t(rNe),f&&t(Ud),w(i7),f&&t(tNe),f&&t(er),w(d7),w(f7),w(F6),w(m7),w(w6),f&&t(aNe),f&&t(Kd),w(g7),f&&t(nNe),f&&t(or),w(h7),w(_7),w(y6),w(u7),w(H6),f&&t(sNe),f&&t(oc),w(b7),f&&t(lNe),f&&t(rr),w(v7),w(T7),w(J6),w(M7),w(lT),f&&t(iNe),f&&t(ac),w(E7),f&&t(dNe),f&&t(tr),w(C7),w(A7),w(dT),w(y7),w(IT),f&&t(cNe),f&&t(lc),w(L7),f&&t(fNe),f&&t(ar),w(x7),w(k7),w(NT),w(S7),w(rM),f&&t(mNe),f&&t(cc),w(R7),f&&t(gNe),f&&t(nr),w(P7),w(I7),w(aM),w(q7),w(lM),f&&t(hNe),f&&t(gc),w(j7),f&&t(pNe),f&&t(sr),w(D7),w(O7),w(dM),w(V7),w(fM),f&&t(_Ne),f&&t(_c),w(X7),f&&t(uNe),f&&t(lr),w(z7),w(Q7),w(gM),w(H7),w(PM),f&&t(bNe),f&&t(vc),w(U7),f&&t(vNe),f&&t(ir),w(J7),w(K7),w(IM),w(Z7),w(tE),f&&t(FNe),f&&t(Mc),w(ex),f&&t(TNe),f&&t(dr),w(ox),w(tx),w(nE),w(ax),w(lE),f&&t(MNe),f&&t(wc),w(nx),f&&t(ENe),f&&t(cr),w(sx),w(ix),w(dE),w(dx),w(fE),f&&t(CNe),f&&t(Lc),w(cx),f&&t(wNe),f&&t(fr),w(fx),w(gx),w(gE),w(hx),w(jE),f&&t(ANe),f&&t(kc),w(px),f&&t(yNe),f&&t(mr),w(_x),w(bx),w(GE),w(vx),w(YE),f&&t(LNe),f&&t(Pc),w(Fx),f&&t(xNe),f&&t(gr),w(Tx),w(Ex),w(ZE),w(Cx),w(mC),f&&t($Ne),f&&t(qc),w(wx),f&&t(kNe),f&&t(hr),w(Ax),w(Lx),w(hC),w(xx),w(wC),f&&t(SNe),f&&t(Dc),w($x),f&&t(RNe),f&&t(pr),w(kx),w(Rx),w(yC),w(Px),w(qC),f&&t(PNe),f&&t(Vc),w(Bx),f&&t(BNe),f&&t(_r),w(Ix),w(Nx),w(jC),w(jx),w(JC),f&&t(INe),f&&t(Wc),w(Dx),f&&t(qNe),f&&t(ur),w(Gx),w(Vx),w(KC),w(Xx),w(dw),f&&t(NNe),f&&t(Uc),w(zx),f&&t(jNe),f&&t(br),w(Wx),w(Hx),w(fw),w(Ux),w(Fw),f&&t(DNe),f&&t(Kc),w(Jx),f&&t(GNe),f&&t(vr),w(Yx),w(Zx),w(Mw),w(e9),w(kw),f&&t(ONe),f&&t(of),w(o9),f&&t(VNe),f&&t(Fr),w(r9),w(a9),w(Rw),w(n9),w(Bw),f&&t(XNe),f&&t(af),w(s9),f&&t(zNe),f&&t(Tr),w(l9),w(d9),w(qw),w(c9),w(Dw),f&&t(WNe),f&&t(lf),w(m9),f&&t(QNe),f&&t(Mr),w(g9),w(p9),w(Ow),w(_9),w(Xw)}}}const r9t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function t9t(L){return t7t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class c9t extends Z8t{constructor(g){super();e7t(this,g,t9t,o9t,o7t,{})}}export{c9t as default,r9t as metadata};
