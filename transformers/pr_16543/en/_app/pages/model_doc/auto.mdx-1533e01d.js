import{S as byt,i as vyt,s as Fyt,e as a,k as l,w as F,t as o,M as Tyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Myt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function Eyt(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,U0,gf,qe,Xe,fi,yn,J0,Ln,xn,Y0,mi,$n,K0,gi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),U0=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),yn=o("NewModel"),J0=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Y0=o(`, make sure its
`),mi=a("code"),$n=o("config_class"),K0=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var u$=s(p);m=r(u$,"NewModelConfig"),u$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var _$=s(ii);mf=r(_$,"model_type"),_$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var b$=s(di);ci=r(b$,'"new-model"'),b$.forEach(t),U0=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);yn=r(Ea,"NewModel"),Ea.forEach(t),J0=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var v$=s(Ln);xn=r(v$,"PreTrainedModel"),v$.forEach(t),Y0=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var pf=s(mi);$n=r(pf,"config_class"),pf.forEach(t),K0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var F$=s(gi);hf=r(F$,"NewModelConfig"),F$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mf),e(g,et),e(g,di),e(di,ci),e(g,U0),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,yn),e(qe,J0),e(qe,Ln),e(Ln,xn),e(qe,Y0),e(qe,mi),e(mi,$n),e(qe,K0),e(qe,gi),e(gi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function Cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,U0,gf,qe,Xe,fi,yn,J0,Ln,xn,Y0,mi,$n,K0,gi,hf,Ma,ze,Ae,u$,hi,_$,b$,Eo,Ea,v$,pf,F$,aDe,WPe,pi,uf,ree,Z0,nDe,tee,sDe,HPe,kn,lDe,aee,iDe,dDe,nee,cDe,fDe,UPe,ey,JPe,T$,mDe,YPe,_f,KPe,ui,bf,see,oy,gDe,lee,hDe,ZPe,Co,ry,pDe,ty,uDe,M$,_De,bDe,vDe,ay,FDe,iee,TDe,MDe,EDe,Er,ny,CDe,dee,wDe,ADe,_i,yDe,cee,LDe,xDe,fee,$De,kDe,SDe,y,vf,mee,RDe,BDe,E$,PDe,IDe,qDe,Ff,gee,NDe,jDe,C$,DDe,GDe,ODe,Tf,hee,VDe,XDe,w$,zDe,QDe,WDe,Mf,pee,HDe,UDe,A$,JDe,YDe,KDe,Ef,uee,ZDe,eGe,y$,oGe,rGe,tGe,Cf,_ee,aGe,nGe,L$,sGe,lGe,iGe,wf,bee,dGe,cGe,x$,fGe,mGe,gGe,Af,vee,hGe,pGe,$$,uGe,_Ge,bGe,yf,Fee,vGe,FGe,k$,TGe,MGe,EGe,Lf,Tee,CGe,wGe,S$,AGe,yGe,LGe,xf,Mee,xGe,$Ge,R$,kGe,SGe,RGe,$f,Eee,BGe,PGe,B$,IGe,qGe,NGe,kf,Cee,jGe,DGe,P$,GGe,OGe,VGe,Sf,wee,XGe,zGe,I$,QGe,WGe,HGe,Rf,Aee,UGe,JGe,q$,YGe,KGe,ZGe,Bf,yee,eOe,oOe,N$,rOe,tOe,aOe,Pf,Lee,nOe,sOe,j$,lOe,iOe,dOe,If,xee,cOe,fOe,D$,mOe,gOe,hOe,qf,$ee,pOe,uOe,G$,_Oe,bOe,vOe,Nf,kee,FOe,TOe,O$,MOe,EOe,COe,jf,See,wOe,AOe,V$,yOe,LOe,xOe,Df,Ree,$Oe,kOe,X$,SOe,ROe,BOe,Gf,Bee,POe,IOe,z$,qOe,NOe,jOe,Of,Pee,DOe,GOe,Q$,OOe,VOe,XOe,Vf,Iee,zOe,QOe,W$,WOe,HOe,UOe,Xf,qee,JOe,YOe,H$,KOe,ZOe,eVe,zf,Nee,oVe,rVe,U$,tVe,aVe,nVe,Qf,jee,sVe,lVe,J$,iVe,dVe,cVe,Wf,Dee,fVe,mVe,Y$,gVe,hVe,pVe,Hf,Gee,uVe,_Ve,K$,bVe,vVe,FVe,Uf,Oee,TVe,MVe,Z$,EVe,CVe,wVe,Jf,Vee,AVe,yVe,ek,LVe,xVe,$Ve,Yf,Xee,kVe,SVe,ok,RVe,BVe,PVe,Kf,zee,IVe,qVe,rk,NVe,jVe,DVe,Zf,Qee,GVe,OVe,tk,VVe,XVe,zVe,em,Wee,QVe,WVe,ak,HVe,UVe,JVe,om,Hee,YVe,KVe,nk,ZVe,eXe,oXe,rm,Uee,rXe,tXe,sk,aXe,nXe,sXe,tm,Jee,lXe,iXe,lk,dXe,cXe,fXe,am,Yee,mXe,gXe,ik,hXe,pXe,uXe,nm,Kee,_Xe,bXe,dk,vXe,FXe,TXe,sm,Zee,MXe,EXe,ck,CXe,wXe,AXe,lm,eoe,yXe,LXe,fk,xXe,$Xe,kXe,im,ooe,SXe,RXe,mk,BXe,PXe,IXe,dm,roe,qXe,NXe,gk,jXe,DXe,GXe,cm,toe,OXe,VXe,hk,XXe,zXe,QXe,fm,aoe,WXe,HXe,pk,UXe,JXe,YXe,mm,noe,KXe,ZXe,uk,eze,oze,rze,gm,soe,tze,aze,_k,nze,sze,lze,hm,loe,ize,dze,bk,cze,fze,mze,pm,ioe,gze,hze,vk,pze,uze,_ze,um,doe,bze,vze,Fk,Fze,Tze,Mze,_m,coe,Eze,Cze,Tk,wze,Aze,yze,bm,foe,Lze,xze,Mk,$ze,kze,Sze,vm,moe,Rze,Bze,Ek,Pze,Ize,qze,Fm,goe,Nze,jze,Ck,Dze,Gze,Oze,Tm,hoe,Vze,Xze,wk,zze,Qze,Wze,Mm,poe,Hze,Uze,Ak,Jze,Yze,Kze,Em,uoe,Zze,eQe,yk,oQe,rQe,tQe,Cm,_oe,aQe,nQe,Lk,sQe,lQe,iQe,wm,boe,dQe,cQe,xk,fQe,mQe,gQe,Am,voe,hQe,pQe,$k,uQe,_Qe,bQe,ym,Foe,vQe,FQe,kk,TQe,MQe,EQe,Lm,Toe,CQe,wQe,Sk,AQe,yQe,LQe,xm,Moe,xQe,$Qe,Rk,kQe,SQe,RQe,$m,Eoe,BQe,PQe,Bk,IQe,qQe,NQe,km,Coe,jQe,DQe,Pk,GQe,OQe,VQe,Sm,woe,XQe,zQe,Ik,QQe,WQe,HQe,Rm,Aoe,UQe,JQe,qk,YQe,KQe,ZQe,Bm,yoe,eWe,oWe,Nk,rWe,tWe,aWe,Pm,Loe,nWe,sWe,jk,lWe,iWe,dWe,Im,xoe,cWe,fWe,Dk,mWe,gWe,hWe,qm,$oe,pWe,uWe,Gk,_We,bWe,vWe,Nm,koe,FWe,TWe,Ok,MWe,EWe,CWe,jm,Soe,wWe,AWe,Vk,yWe,LWe,xWe,Dm,Roe,$We,kWe,Xk,SWe,RWe,BWe,Gm,Boe,PWe,IWe,zk,qWe,NWe,jWe,Om,Poe,DWe,GWe,Qk,OWe,VWe,XWe,Vm,Ioe,zWe,QWe,Wk,WWe,HWe,UWe,Xm,qoe,JWe,YWe,Hk,KWe,ZWe,eHe,zm,Noe,oHe,rHe,Uk,tHe,aHe,nHe,Qm,joe,sHe,lHe,Jk,iHe,dHe,cHe,Wm,Doe,fHe,mHe,Yk,gHe,hHe,pHe,Hm,Goe,uHe,_He,Kk,bHe,vHe,FHe,Um,Ooe,THe,MHe,Zk,EHe,CHe,wHe,Jm,Voe,AHe,yHe,eS,LHe,xHe,$He,Ym,Xoe,kHe,SHe,oS,RHe,BHe,PHe,Km,zoe,IHe,qHe,rS,NHe,jHe,DHe,Zm,Qoe,GHe,OHe,tS,VHe,XHe,zHe,eg,Woe,QHe,WHe,aS,HHe,UHe,JHe,og,Hoe,YHe,KHe,nS,ZHe,eUe,oUe,rg,Uoe,rUe,tUe,sS,aUe,nUe,sUe,tg,Joe,lUe,iUe,lS,dUe,cUe,fUe,ag,Yoe,mUe,gUe,iS,hUe,pUe,uUe,ng,Koe,_Ue,bUe,dS,vUe,FUe,TUe,sg,Zoe,MUe,EUe,cS,CUe,wUe,AUe,lg,ere,yUe,LUe,fS,xUe,$Ue,kUe,ig,ore,SUe,RUe,mS,BUe,PUe,IUe,dg,rre,qUe,NUe,gS,jUe,DUe,GUe,cg,tre,OUe,VUe,hS,XUe,zUe,QUe,fg,are,WUe,HUe,pS,UUe,JUe,YUe,mg,nre,KUe,ZUe,uS,eJe,oJe,rJe,gg,sre,tJe,aJe,_S,nJe,sJe,lJe,hg,lre,iJe,dJe,bS,cJe,fJe,mJe,pg,gJe,ug,sy,hJe,ire,pJe,eIe,bi,_g,dre,ly,uJe,cre,_Je,oIe,wo,iy,bJe,dy,vJe,vS,FJe,TJe,MJe,cy,EJe,fre,CJe,wJe,AJe,Cr,fy,yJe,mre,LJe,xJe,Ca,$Je,gre,kJe,SJe,hre,RJe,BJe,pre,PJe,IJe,qJe,k,Sn,ure,NJe,jJe,FS,DJe,GJe,TS,OJe,VJe,XJe,Rn,_re,zJe,QJe,MS,WJe,HJe,ES,UJe,JJe,YJe,Bn,bre,KJe,ZJe,CS,eYe,oYe,wS,rYe,tYe,aYe,bg,vre,nYe,sYe,AS,lYe,iYe,dYe,Pn,Fre,cYe,fYe,yS,mYe,gYe,LS,hYe,pYe,uYe,vg,Tre,_Ye,bYe,xS,vYe,FYe,TYe,Fg,Mre,MYe,EYe,$S,CYe,wYe,AYe,Tg,Ere,yYe,LYe,kS,xYe,$Ye,kYe,In,Cre,SYe,RYe,SS,BYe,PYe,RS,IYe,qYe,NYe,qn,wre,jYe,DYe,BS,GYe,OYe,PS,VYe,XYe,zYe,Nn,Are,QYe,WYe,IS,HYe,UYe,qS,JYe,YYe,KYe,Mg,yre,ZYe,eKe,NS,oKe,rKe,tKe,Eg,Lre,aKe,nKe,jS,sKe,lKe,iKe,jn,xre,dKe,cKe,DS,fKe,mKe,GS,gKe,hKe,pKe,Cg,$re,uKe,_Ke,OS,bKe,vKe,FKe,Dn,kre,TKe,MKe,VS,EKe,CKe,XS,wKe,AKe,yKe,Gn,Sre,LKe,xKe,zS,$Ke,kKe,QS,SKe,RKe,BKe,On,Rre,PKe,IKe,WS,qKe,NKe,HS,jKe,DKe,GKe,wg,Bre,OKe,VKe,US,XKe,zKe,QKe,Vn,Pre,WKe,HKe,JS,UKe,JKe,YS,YKe,KKe,ZKe,Xn,Ire,eZe,oZe,KS,rZe,tZe,ZS,aZe,nZe,sZe,zn,qre,lZe,iZe,eR,dZe,cZe,oR,fZe,mZe,gZe,Qn,Nre,hZe,pZe,rR,uZe,_Ze,tR,bZe,vZe,FZe,Wn,jre,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,Hn,Dre,LZe,xZe,sR,$Ze,kZe,lR,SZe,RZe,BZe,Ag,Gre,PZe,IZe,iR,qZe,NZe,jZe,Un,Ore,DZe,GZe,dR,OZe,VZe,cR,XZe,zZe,QZe,yg,Vre,WZe,HZe,fR,UZe,JZe,YZe,Jn,Xre,KZe,ZZe,mR,eeo,oeo,gR,reo,teo,aeo,Yn,zre,neo,seo,hR,leo,ieo,pR,deo,ceo,feo,Kn,Qre,meo,geo,uR,heo,peo,_R,ueo,_eo,beo,Zn,Wre,veo,Feo,bR,Teo,Meo,vR,Eeo,Ceo,weo,es,Hre,Aeo,yeo,FR,Leo,xeo,TR,$eo,keo,Seo,Lg,Ure,Reo,Beo,MR,Peo,Ieo,qeo,os,Jre,Neo,jeo,ER,Deo,Geo,CR,Oeo,Veo,Xeo,rs,Yre,zeo,Qeo,wR,Weo,Heo,AR,Ueo,Jeo,Yeo,ts,Kre,Keo,Zeo,yR,eoo,ooo,LR,roo,too,aoo,as,Zre,noo,soo,xR,loo,ioo,$R,doo,coo,foo,ns,ete,moo,goo,kR,hoo,poo,SR,uoo,_oo,boo,ss,ote,voo,Foo,RR,Too,Moo,BR,Eoo,Coo,woo,xg,rte,Aoo,yoo,PR,Loo,xoo,$oo,ls,tte,koo,Soo,IR,Roo,Boo,qR,Poo,Ioo,qoo,$g,ate,Noo,joo,NR,Doo,Goo,Ooo,kg,nte,Voo,Xoo,jR,zoo,Qoo,Woo,is,ste,Hoo,Uoo,DR,Joo,Yoo,GR,Koo,Zoo,ero,ds,lte,oro,rro,OR,tro,aro,VR,nro,sro,lro,cs,ite,iro,dro,XR,cro,fro,zR,mro,gro,hro,Sg,dte,pro,uro,QR,_ro,bro,vro,fs,cte,Fro,Tro,WR,Mro,Ero,HR,Cro,wro,Aro,ms,fte,yro,Lro,UR,xro,$ro,JR,kro,Sro,Rro,gs,mte,Bro,Pro,YR,Iro,qro,KR,Nro,jro,Dro,hs,gte,Gro,Oro,ZR,Vro,Xro,eB,zro,Qro,Wro,ps,hte,Hro,Uro,oB,Jro,Yro,rB,Kro,Zro,eto,Rg,pte,oto,rto,tB,tto,ato,nto,us,ute,sto,lto,aB,ito,dto,nB,cto,fto,mto,Bg,_te,gto,hto,sB,pto,uto,_to,Pg,bte,bto,vto,lB,Fto,Tto,Mto,Ig,vte,Eto,Cto,iB,wto,Ato,yto,qg,Fte,Lto,xto,dB,$to,kto,Sto,_s,Tte,Rto,Bto,cB,Pto,Ito,fB,qto,Nto,jto,Ng,Mte,Dto,Gto,mB,Oto,Vto,Xto,bs,Ete,zto,Qto,gB,Wto,Hto,hB,Uto,Jto,Yto,vs,Cte,Kto,Zto,pB,eao,oao,uB,rao,tao,aao,Fs,wte,nao,sao,_B,lao,iao,bB,dao,cao,fao,Ts,Ate,mao,gao,vB,hao,pao,FB,uao,_ao,bao,Ms,yte,vao,Fao,TB,Tao,Mao,MB,Eao,Cao,wao,Es,Lte,Aao,yao,EB,Lao,xao,CB,$ao,kao,Sao,jg,xte,Rao,Bao,wB,Pao,Iao,qao,Dg,$te,Nao,jao,AB,Dao,Gao,Oao,Cs,kte,Vao,Xao,yB,zao,Qao,LB,Wao,Hao,Uao,ws,Ste,Jao,Yao,xB,Kao,Zao,$B,eno,ono,rno,As,Rte,tno,ano,kB,nno,sno,SB,lno,ino,dno,Gg,Bte,cno,fno,RB,mno,gno,hno,Og,Pte,pno,uno,BB,_no,bno,vno,Vg,Ite,Fno,Tno,PB,Mno,Eno,Cno,ys,qte,wno,Ano,IB,yno,Lno,qB,xno,$no,kno,Xg,Nte,Sno,Rno,NB,Bno,Pno,Ino,zg,jte,qno,Nno,jB,jno,Dno,Gno,Ls,Dte,Ono,Vno,DB,Xno,zno,GB,Qno,Wno,Hno,Qg,Gte,Uno,Jno,OB,Yno,Kno,Zno,Wg,Ote,eso,oso,VB,rso,tso,aso,xs,Vte,nso,sso,XB,lso,iso,zB,dso,cso,fso,$s,Xte,mso,gso,QB,hso,pso,WB,uso,_so,bso,ks,zte,vso,Fso,HB,Tso,Mso,UB,Eso,Cso,wso,Ss,Qte,Aso,yso,JB,Lso,xso,YB,$so,kso,Sso,Hg,Rso,Ug,my,Bso,Wte,Pso,rIe,vi,Jg,Hte,gy,Iso,Ute,qso,tIe,Ao,hy,Nso,py,jso,KB,Dso,Gso,Oso,uy,Vso,Jte,Xso,zso,Qso,Qe,_y,Wso,Yte,Hso,Uso,wa,Jso,Kte,Yso,Kso,Zte,Zso,elo,eae,olo,rlo,tlo,oe,Yg,oae,alo,nlo,ZB,slo,llo,ilo,Kg,rae,dlo,clo,eP,flo,mlo,glo,Zg,tae,hlo,plo,oP,ulo,_lo,blo,eh,aae,vlo,Flo,rP,Tlo,Mlo,Elo,oh,nae,Clo,wlo,tP,Alo,ylo,Llo,rh,sae,xlo,$lo,aP,klo,Slo,Rlo,th,lae,Blo,Plo,nP,Ilo,qlo,Nlo,ah,iae,jlo,Dlo,sP,Glo,Olo,Vlo,nh,dae,Xlo,zlo,lP,Qlo,Wlo,Hlo,sh,cae,Ulo,Jlo,iP,Ylo,Klo,Zlo,lh,fae,eio,oio,dP,rio,tio,aio,ih,mae,nio,sio,cP,lio,iio,dio,dh,gae,cio,fio,fP,mio,gio,hio,ch,hae,pio,uio,mP,_io,bio,vio,fh,pae,Fio,Tio,gP,Mio,Eio,Cio,mh,uae,wio,Aio,hP,yio,Lio,xio,gh,_ae,$io,kio,pP,Sio,Rio,Bio,hh,bae,Pio,Iio,uP,qio,Nio,jio,ph,vae,Dio,Gio,_P,Oio,Vio,Xio,uh,Fae,zio,Qio,bP,Wio,Hio,Uio,_h,Tae,Jio,Yio,vP,Kio,Zio,edo,bh,Mae,odo,rdo,FP,tdo,ado,ndo,vh,Eae,sdo,ldo,TP,ido,ddo,cdo,Fh,Cae,fdo,mdo,MP,gdo,hdo,pdo,Th,wae,udo,_do,EP,bdo,vdo,Fdo,Mh,Tdo,Eh,Mdo,Ch,by,Edo,Aae,Cdo,aIe,Fi,wh,yae,vy,wdo,Lae,Ado,nIe,yo,Fy,ydo,Ty,Ldo,CP,xdo,$do,kdo,My,Sdo,xae,Rdo,Bdo,Pdo,We,Ey,Ido,$ae,qdo,Ndo,Ti,jdo,kae,Ddo,Gdo,Sae,Odo,Vdo,Xdo,_e,Ah,Rae,zdo,Qdo,wP,Wdo,Hdo,Udo,yh,Bae,Jdo,Ydo,Pae,Kdo,Zdo,eco,Lh,Iae,oco,rco,AP,tco,aco,nco,xh,qae,sco,lco,yP,ico,dco,cco,$h,Nae,fco,mco,LP,gco,hco,pco,kh,jae,uco,_co,xP,bco,vco,Fco,Sh,Dae,Tco,Mco,$P,Eco,Cco,wco,Rh,Gae,Aco,yco,kP,Lco,xco,$co,Bh,Oae,kco,Sco,SP,Rco,Bco,Pco,Ph,Vae,Ico,qco,RP,Nco,jco,Dco,Ih,Xae,Gco,Oco,BP,Vco,Xco,zco,qh,zae,Qco,Wco,PP,Hco,Uco,Jco,Nh,Qae,Yco,Kco,IP,Zco,efo,ofo,jh,Wae,rfo,tfo,qP,afo,nfo,sfo,Dh,Hae,lfo,ifo,NP,dfo,cfo,ffo,Gh,mfo,Oh,gfo,Vh,Cy,hfo,Uae,pfo,sIe,Mi,Xh,Jae,wy,ufo,Yae,_fo,lIe,Lo,Ay,bfo,Ei,vfo,jP,Ffo,Tfo,DP,Mfo,Efo,Cfo,yy,wfo,Kae,Afo,yfo,Lfo,ot,Ly,xfo,Zae,$fo,kfo,Ci,Sfo,ene,Rfo,Bfo,GP,Pfo,Ifo,qfo,zh,Nfo,He,xy,jfo,one,Dfo,Gfo,Aa,Ofo,rne,Vfo,Xfo,tne,zfo,Qfo,ane,Wfo,Hfo,Ufo,x,Qh,nne,Jfo,Yfo,OP,Kfo,Zfo,emo,Wh,sne,omo,rmo,VP,tmo,amo,nmo,Hh,lne,smo,lmo,XP,imo,dmo,cmo,Uh,ine,fmo,mmo,zP,gmo,hmo,pmo,Jh,dne,umo,_mo,QP,bmo,vmo,Fmo,Yh,cne,Tmo,Mmo,WP,Emo,Cmo,wmo,Kh,fne,Amo,ymo,HP,Lmo,xmo,$mo,Zh,mne,kmo,Smo,UP,Rmo,Bmo,Pmo,ep,gne,Imo,qmo,JP,Nmo,jmo,Dmo,op,hne,Gmo,Omo,YP,Vmo,Xmo,zmo,rp,pne,Qmo,Wmo,KP,Hmo,Umo,Jmo,tp,une,Ymo,Kmo,ZP,Zmo,ego,ogo,ap,_ne,rgo,tgo,eI,ago,ngo,sgo,np,bne,lgo,igo,oI,dgo,cgo,fgo,sp,vne,mgo,ggo,rI,hgo,pgo,ugo,lp,Fne,_go,bgo,tI,vgo,Fgo,Tgo,ip,Tne,Mgo,Ego,aI,Cgo,wgo,Ago,dp,Mne,ygo,Lgo,nI,xgo,$go,kgo,cp,Ene,Sgo,Rgo,sI,Bgo,Pgo,Igo,fp,Cne,qgo,Ngo,lI,jgo,Dgo,Ggo,mp,wne,Ogo,Vgo,iI,Xgo,zgo,Qgo,gp,Ane,Wgo,Hgo,dI,Ugo,Jgo,Ygo,hp,yne,Kgo,Zgo,cI,eho,oho,rho,pp,Lne,tho,aho,fI,nho,sho,lho,up,xne,iho,dho,mI,cho,fho,mho,_p,$ne,gho,hho,gI,pho,uho,_ho,bp,kne,bho,vho,hI,Fho,Tho,Mho,vp,Sne,Eho,Cho,pI,who,Aho,yho,Fp,Rne,Lho,xho,uI,$ho,kho,Sho,Tp,Bne,Rho,Bho,_I,Pho,Iho,qho,Mp,Pne,Nho,jho,bI,Dho,Gho,Oho,Rs,Ine,Vho,Xho,vI,zho,Qho,FI,Who,Hho,Uho,Ep,qne,Jho,Yho,TI,Kho,Zho,epo,Cp,Nne,opo,rpo,MI,tpo,apo,npo,wp,jne,spo,lpo,EI,ipo,dpo,cpo,Ap,Dne,fpo,mpo,CI,gpo,hpo,ppo,yp,Gne,upo,_po,wI,bpo,vpo,Fpo,Lp,One,Tpo,Mpo,AI,Epo,Cpo,wpo,xp,Vne,Apo,ypo,yI,Lpo,xpo,$po,$p,Xne,kpo,Spo,LI,Rpo,Bpo,Ppo,kp,zne,Ipo,qpo,xI,Npo,jpo,Dpo,Sp,Qne,Gpo,Opo,$I,Vpo,Xpo,zpo,Rp,Wne,Qpo,Wpo,kI,Hpo,Upo,Jpo,Bp,Hne,Ypo,Kpo,SI,Zpo,euo,ouo,Pp,Une,ruo,tuo,RI,auo,nuo,suo,Ip,Jne,luo,iuo,BI,duo,cuo,fuo,qp,Yne,muo,guo,PI,huo,puo,uuo,Np,Kne,_uo,buo,II,vuo,Fuo,Tuo,jp,Zne,Muo,Euo,qI,Cuo,wuo,Auo,Dp,ese,yuo,Luo,NI,xuo,$uo,kuo,Gp,ose,Suo,Ruo,jI,Buo,Puo,Iuo,Op,rse,quo,Nuo,DI,juo,Duo,Guo,Vp,tse,Ouo,Vuo,GI,Xuo,zuo,Quo,Xp,ase,Wuo,Huo,OI,Uuo,Juo,Yuo,zp,nse,Kuo,Zuo,VI,e_o,o_o,r_o,Qp,sse,t_o,a_o,XI,n_o,s_o,l_o,Wp,lse,i_o,d_o,zI,c_o,f_o,m_o,Hp,ise,g_o,h_o,QI,p_o,u_o,__o,Up,dse,b_o,v_o,WI,F_o,T_o,M_o,Jp,cse,E_o,C_o,HI,w_o,A_o,y_o,Yp,fse,L_o,x_o,UI,$_o,k_o,S_o,Kp,mse,R_o,B_o,JI,P_o,I_o,q_o,Zp,gse,N_o,j_o,YI,D_o,G_o,O_o,eu,hse,V_o,X_o,KI,z_o,Q_o,W_o,ou,pse,H_o,U_o,ZI,J_o,Y_o,K_o,ru,use,Z_o,e1o,eq,o1o,r1o,t1o,tu,_se,a1o,n1o,oq,s1o,l1o,i1o,au,bse,d1o,c1o,rq,f1o,m1o,g1o,nu,vse,h1o,p1o,tq,u1o,_1o,b1o,su,Fse,v1o,F1o,aq,T1o,M1o,E1o,lu,Tse,C1o,w1o,nq,A1o,y1o,L1o,iu,Mse,x1o,$1o,sq,k1o,S1o,R1o,du,Ese,B1o,P1o,lq,I1o,q1o,N1o,cu,Cse,j1o,D1o,iq,G1o,O1o,V1o,fu,wse,X1o,z1o,dq,Q1o,W1o,H1o,mu,Ase,U1o,J1o,cq,Y1o,K1o,Z1o,gu,yse,ebo,obo,fq,rbo,tbo,abo,hu,Lse,nbo,sbo,mq,lbo,ibo,dbo,pu,xse,cbo,fbo,gq,mbo,gbo,hbo,uu,$se,pbo,ubo,hq,_bo,bbo,vbo,_u,kse,Fbo,Tbo,pq,Mbo,Ebo,Cbo,bu,Sse,wbo,Abo,uq,ybo,Lbo,xbo,vu,Rse,$bo,kbo,_q,Sbo,Rbo,Bbo,Fu,Bse,Pbo,Ibo,bq,qbo,Nbo,jbo,Tu,Pse,Dbo,Gbo,vq,Obo,Vbo,Xbo,Mu,Ise,zbo,Qbo,Fq,Wbo,Hbo,Ubo,Eu,qse,Jbo,Ybo,Tq,Kbo,Zbo,e4o,Cu,Nse,o4o,r4o,Mq,t4o,a4o,n4o,wu,jse,s4o,l4o,Eq,i4o,d4o,c4o,Au,Dse,f4o,m4o,Cq,g4o,h4o,p4o,yu,Gse,u4o,_4o,wq,b4o,v4o,F4o,Lu,Ose,T4o,M4o,Aq,E4o,C4o,w4o,xu,Vse,A4o,y4o,yq,L4o,x4o,$4o,$u,Xse,k4o,S4o,Lq,R4o,B4o,P4o,ku,zse,I4o,q4o,xq,N4o,j4o,D4o,Su,Qse,G4o,O4o,$q,V4o,X4o,z4o,Ru,Wse,Q4o,W4o,kq,H4o,U4o,J4o,Bu,Y4o,Hse,K4o,Z4o,Use,e2o,o2o,Pu,iIe,wi,Iu,Jse,$y,r2o,Yse,t2o,dIe,xo,ky,a2o,Ai,n2o,Sq,s2o,l2o,Rq,i2o,d2o,c2o,Sy,f2o,Kse,m2o,g2o,h2o,rt,Ry,p2o,Zse,u2o,_2o,yi,b2o,ele,v2o,F2o,Bq,T2o,M2o,E2o,qu,C2o,Ue,By,w2o,ole,A2o,y2o,ya,L2o,rle,x2o,$2o,tle,k2o,S2o,ale,R2o,B2o,P2o,G,Nu,nle,I2o,q2o,Pq,N2o,j2o,D2o,ju,sle,G2o,O2o,Iq,V2o,X2o,z2o,Du,lle,Q2o,W2o,qq,H2o,U2o,J2o,Gu,ile,Y2o,K2o,Nq,Z2o,e5o,o5o,Ou,dle,r5o,t5o,jq,a5o,n5o,s5o,Vu,cle,l5o,i5o,Dq,d5o,c5o,f5o,Xu,fle,m5o,g5o,Gq,h5o,p5o,u5o,zu,mle,_5o,b5o,Oq,v5o,F5o,T5o,Qu,gle,M5o,E5o,Vq,C5o,w5o,A5o,Wu,hle,y5o,L5o,Xq,x5o,$5o,k5o,Hu,ple,S5o,R5o,zq,B5o,P5o,I5o,Uu,ule,q5o,N5o,Qq,j5o,D5o,G5o,Ju,_le,O5o,V5o,Wq,X5o,z5o,Q5o,Yu,ble,W5o,H5o,Hq,U5o,J5o,Y5o,Ku,vle,K5o,Z5o,Uq,e3o,o3o,r3o,Zu,Fle,t3o,a3o,Jq,n3o,s3o,l3o,e_,Tle,i3o,d3o,Yq,c3o,f3o,m3o,o_,Mle,g3o,h3o,Kq,p3o,u3o,_3o,r_,Ele,b3o,v3o,Zq,F3o,T3o,M3o,t_,Cle,E3o,C3o,eN,w3o,A3o,y3o,a_,wle,L3o,x3o,oN,$3o,k3o,S3o,n_,Ale,R3o,B3o,rN,P3o,I3o,q3o,s_,yle,N3o,j3o,tN,D3o,G3o,O3o,l_,Lle,V3o,X3o,aN,z3o,Q3o,W3o,i_,xle,H3o,U3o,nN,J3o,Y3o,K3o,d_,$le,Z3o,evo,sN,ovo,rvo,tvo,c_,kle,avo,nvo,lN,svo,lvo,ivo,f_,Sle,dvo,cvo,iN,fvo,mvo,gvo,m_,Rle,hvo,pvo,dN,uvo,_vo,bvo,g_,Ble,vvo,Fvo,cN,Tvo,Mvo,Evo,h_,Ple,Cvo,wvo,fN,Avo,yvo,Lvo,p_,Ile,xvo,$vo,mN,kvo,Svo,Rvo,u_,qle,Bvo,Pvo,gN,Ivo,qvo,Nvo,__,Nle,jvo,Dvo,hN,Gvo,Ovo,Vvo,b_,jle,Xvo,zvo,pN,Qvo,Wvo,Hvo,v_,Dle,Uvo,Jvo,uN,Yvo,Kvo,Zvo,F_,Gle,eFo,oFo,_N,rFo,tFo,aFo,T_,Ole,nFo,sFo,bN,lFo,iFo,dFo,M_,Vle,cFo,fFo,vN,mFo,gFo,hFo,E_,Xle,pFo,uFo,FN,_Fo,bFo,vFo,C_,FFo,zle,TFo,MFo,Qle,EFo,CFo,w_,cIe,Li,A_,Wle,Py,wFo,Hle,AFo,fIe,$o,Iy,yFo,xi,LFo,TN,xFo,$Fo,MN,kFo,SFo,RFo,qy,BFo,Ule,PFo,IFo,qFo,tt,Ny,NFo,Jle,jFo,DFo,$i,GFo,Yle,OFo,VFo,EN,XFo,zFo,QFo,y_,WFo,Je,jy,HFo,Kle,UFo,JFo,La,YFo,Zle,KFo,ZFo,eie,e6o,o6o,oie,r6o,t6o,a6o,z,L_,rie,n6o,s6o,CN,l6o,i6o,d6o,x_,tie,c6o,f6o,wN,m6o,g6o,h6o,$_,aie,p6o,u6o,AN,_6o,b6o,v6o,k_,nie,F6o,T6o,yN,M6o,E6o,C6o,S_,sie,w6o,A6o,LN,y6o,L6o,x6o,R_,lie,$6o,k6o,xN,S6o,R6o,B6o,B_,iie,P6o,I6o,$N,q6o,N6o,j6o,P_,die,D6o,G6o,kN,O6o,V6o,X6o,I_,cie,z6o,Q6o,SN,W6o,H6o,U6o,q_,fie,J6o,Y6o,RN,K6o,Z6o,eTo,N_,mie,oTo,rTo,BN,tTo,aTo,nTo,j_,gie,sTo,lTo,PN,iTo,dTo,cTo,D_,hie,fTo,mTo,IN,gTo,hTo,pTo,G_,pie,uTo,_To,qN,bTo,vTo,FTo,O_,uie,TTo,MTo,NN,ETo,CTo,wTo,V_,_ie,ATo,yTo,jN,LTo,xTo,$To,X_,bie,kTo,STo,DN,RTo,BTo,PTo,z_,vie,ITo,qTo,GN,NTo,jTo,DTo,Q_,Fie,GTo,OTo,ON,VTo,XTo,zTo,W_,Tie,QTo,WTo,VN,HTo,UTo,JTo,H_,Mie,YTo,KTo,XN,ZTo,eMo,oMo,U_,Eie,rMo,tMo,zN,aMo,nMo,sMo,J_,Cie,lMo,iMo,QN,dMo,cMo,fMo,Y_,wie,mMo,gMo,WN,hMo,pMo,uMo,K_,Aie,_Mo,bMo,HN,vMo,FMo,TMo,Z_,yie,MMo,EMo,UN,CMo,wMo,AMo,e1,Lie,yMo,LMo,JN,xMo,$Mo,kMo,o1,xie,SMo,RMo,YN,BMo,PMo,IMo,r1,$ie,qMo,NMo,KN,jMo,DMo,GMo,t1,kie,OMo,VMo,ZN,XMo,zMo,QMo,a1,Sie,WMo,HMo,ej,UMo,JMo,YMo,n1,Rie,KMo,ZMo,oj,eEo,oEo,rEo,s1,Bie,tEo,aEo,rj,nEo,sEo,lEo,l1,Pie,iEo,dEo,tj,cEo,fEo,mEo,i1,Iie,gEo,hEo,aj,pEo,uEo,_Eo,d1,qie,bEo,vEo,nj,FEo,TEo,MEo,c1,EEo,Nie,CEo,wEo,jie,AEo,yEo,f1,mIe,ki,m1,Die,Dy,LEo,Gie,xEo,gIe,ko,Gy,$Eo,Si,kEo,sj,SEo,REo,lj,BEo,PEo,IEo,Oy,qEo,Oie,NEo,jEo,DEo,at,Vy,GEo,Vie,OEo,VEo,Ri,XEo,Xie,zEo,QEo,ij,WEo,HEo,UEo,g1,JEo,Ye,Xy,YEo,zie,KEo,ZEo,xa,eCo,Qie,oCo,rCo,Wie,tCo,aCo,Hie,nCo,sCo,lCo,Q,h1,Uie,iCo,dCo,dj,cCo,fCo,mCo,p1,Jie,gCo,hCo,cj,pCo,uCo,_Co,u1,Yie,bCo,vCo,fj,FCo,TCo,MCo,_1,Kie,ECo,CCo,mj,wCo,ACo,yCo,b1,Zie,LCo,xCo,gj,$Co,kCo,SCo,v1,ede,RCo,BCo,hj,PCo,ICo,qCo,F1,ode,NCo,jCo,pj,DCo,GCo,OCo,T1,rde,VCo,XCo,uj,zCo,QCo,WCo,M1,tde,HCo,UCo,_j,JCo,YCo,KCo,E1,ade,ZCo,ewo,bj,owo,rwo,two,C1,nde,awo,nwo,vj,swo,lwo,iwo,w1,sde,dwo,cwo,Fj,fwo,mwo,gwo,A1,lde,hwo,pwo,Tj,uwo,_wo,bwo,y1,ide,vwo,Fwo,Mj,Two,Mwo,Ewo,L1,dde,Cwo,wwo,Ej,Awo,ywo,Lwo,x1,cde,xwo,$wo,Cj,kwo,Swo,Rwo,$1,fde,Bwo,Pwo,wj,Iwo,qwo,Nwo,k1,mde,jwo,Dwo,Aj,Gwo,Owo,Vwo,S1,gde,Xwo,zwo,yj,Qwo,Wwo,Hwo,R1,hde,Uwo,Jwo,Lj,Ywo,Kwo,Zwo,B1,pde,eAo,oAo,xj,rAo,tAo,aAo,P1,ude,nAo,sAo,$j,lAo,iAo,dAo,I1,_de,cAo,fAo,kj,mAo,gAo,hAo,q1,bde,pAo,uAo,Sj,_Ao,bAo,vAo,N1,vde,FAo,TAo,Rj,MAo,EAo,CAo,j1,Fde,wAo,AAo,Bj,yAo,LAo,xAo,D1,Tde,$Ao,kAo,Pj,SAo,RAo,BAo,G1,Mde,PAo,IAo,Ij,qAo,NAo,jAo,O1,Ede,DAo,GAo,qj,OAo,VAo,XAo,V1,Cde,zAo,QAo,Nj,WAo,HAo,UAo,X1,wde,JAo,YAo,Ade,KAo,ZAo,e0o,z1,yde,o0o,r0o,jj,t0o,a0o,n0o,Q1,Lde,s0o,l0o,Dj,i0o,d0o,c0o,W1,xde,f0o,m0o,Gj,g0o,h0o,p0o,H1,$de,u0o,_0o,Oj,b0o,v0o,F0o,U1,T0o,kde,M0o,E0o,Sde,C0o,w0o,J1,hIe,Bi,Y1,Rde,zy,A0o,Bde,y0o,pIe,So,Qy,L0o,Pi,x0o,Vj,$0o,k0o,Xj,S0o,R0o,B0o,Wy,P0o,Pde,I0o,q0o,N0o,nt,Hy,j0o,Ide,D0o,G0o,Ii,O0o,qde,V0o,X0o,zj,z0o,Q0o,W0o,K1,H0o,Ke,Uy,U0o,Nde,J0o,Y0o,$a,K0o,jde,Z0o,eyo,Dde,oyo,ryo,Gde,tyo,ayo,nyo,pe,Z1,Ode,syo,lyo,Qj,iyo,dyo,cyo,eb,Vde,fyo,myo,Wj,gyo,hyo,pyo,ob,Xde,uyo,_yo,Hj,byo,vyo,Fyo,rb,zde,Tyo,Myo,Uj,Eyo,Cyo,wyo,tb,Qde,Ayo,yyo,Jj,Lyo,xyo,$yo,ab,Wde,kyo,Syo,Yj,Ryo,Byo,Pyo,nb,Hde,Iyo,qyo,Kj,Nyo,jyo,Dyo,sb,Ude,Gyo,Oyo,Zj,Vyo,Xyo,zyo,lb,Jde,Qyo,Wyo,eD,Hyo,Uyo,Jyo,ib,Yde,Yyo,Kyo,oD,Zyo,eLo,oLo,db,Kde,rLo,tLo,rD,aLo,nLo,sLo,cb,Zde,lLo,iLo,tD,dLo,cLo,fLo,fb,ece,mLo,gLo,aD,hLo,pLo,uLo,mb,oce,_Lo,bLo,nD,vLo,FLo,TLo,gb,rce,MLo,ELo,sD,CLo,wLo,ALo,hb,tce,yLo,LLo,lD,xLo,$Lo,kLo,pb,SLo,ace,RLo,BLo,nce,PLo,ILo,ub,uIe,qi,_b,sce,Jy,qLo,lce,NLo,_Ie,Ro,Yy,jLo,Ni,DLo,iD,GLo,OLo,dD,VLo,XLo,zLo,Ky,QLo,ice,WLo,HLo,ULo,st,Zy,JLo,dce,YLo,KLo,ji,ZLo,cce,e8o,o8o,cD,r8o,t8o,a8o,bb,n8o,Ze,eL,s8o,fce,l8o,i8o,ka,d8o,mce,c8o,f8o,gce,m8o,g8o,hce,h8o,p8o,u8o,N,vb,pce,_8o,b8o,fD,v8o,F8o,T8o,Fb,uce,M8o,E8o,mD,C8o,w8o,A8o,Tb,_ce,y8o,L8o,gD,x8o,$8o,k8o,Mb,bce,S8o,R8o,hD,B8o,P8o,I8o,Eb,vce,q8o,N8o,pD,j8o,D8o,G8o,Cb,Fce,O8o,V8o,uD,X8o,z8o,Q8o,wb,Tce,W8o,H8o,_D,U8o,J8o,Y8o,Ab,Mce,K8o,Z8o,bD,exo,oxo,rxo,yb,Ece,txo,axo,vD,nxo,sxo,lxo,Lb,Cce,ixo,dxo,FD,cxo,fxo,mxo,xb,wce,gxo,hxo,TD,pxo,uxo,_xo,$b,Ace,bxo,vxo,MD,Fxo,Txo,Mxo,kb,yce,Exo,Cxo,ED,wxo,Axo,yxo,Sb,Lce,Lxo,xxo,CD,$xo,kxo,Sxo,Rb,xce,Rxo,Bxo,wD,Pxo,Ixo,qxo,Bb,$ce,Nxo,jxo,AD,Dxo,Gxo,Oxo,Pb,kce,Vxo,Xxo,yD,zxo,Qxo,Wxo,Ib,Sce,Hxo,Uxo,LD,Jxo,Yxo,Kxo,qb,Rce,Zxo,e7o,xD,o7o,r7o,t7o,Nb,Bce,a7o,n7o,$D,s7o,l7o,i7o,jb,Pce,d7o,c7o,kD,f7o,m7o,g7o,Db,Ice,h7o,p7o,SD,u7o,_7o,b7o,Gb,qce,v7o,F7o,RD,T7o,M7o,E7o,Ob,Nce,C7o,w7o,BD,A7o,y7o,L7o,Vb,jce,x7o,$7o,PD,k7o,S7o,R7o,Xb,Dce,B7o,P7o,ID,I7o,q7o,N7o,zb,Gce,j7o,D7o,qD,G7o,O7o,V7o,Qb,Oce,X7o,z7o,ND,Q7o,W7o,H7o,Wb,Vce,U7o,J7o,jD,Y7o,K7o,Z7o,Hb,Xce,e9o,o9o,DD,r9o,t9o,a9o,Ub,zce,n9o,s9o,GD,l9o,i9o,d9o,Jb,Qce,c9o,f9o,OD,m9o,g9o,h9o,Yb,Wce,p9o,u9o,VD,_9o,b9o,v9o,Kb,Hce,F9o,T9o,XD,M9o,E9o,C9o,Zb,Uce,w9o,A9o,zD,y9o,L9o,x9o,e4,Jce,$9o,k9o,QD,S9o,R9o,B9o,o4,Yce,P9o,I9o,WD,q9o,N9o,j9o,r4,Kce,D9o,G9o,HD,O9o,V9o,X9o,t4,Zce,z9o,Q9o,UD,W9o,H9o,U9o,a4,efe,J9o,Y9o,JD,K9o,Z9o,e$o,n4,ofe,o$o,r$o,YD,t$o,a$o,n$o,s4,rfe,s$o,l$o,KD,i$o,d$o,c$o,l4,tfe,f$o,m$o,ZD,g$o,h$o,p$o,i4,afe,u$o,_$o,eG,b$o,v$o,F$o,d4,nfe,T$o,M$o,oG,E$o,C$o,w$o,c4,sfe,A$o,y$o,rG,L$o,x$o,$$o,f4,k$o,lfe,S$o,R$o,ife,B$o,P$o,m4,bIe,Di,g4,dfe,oL,I$o,cfe,q$o,vIe,Bo,rL,N$o,Gi,j$o,tG,D$o,G$o,aG,O$o,V$o,X$o,tL,z$o,ffe,Q$o,W$o,H$o,lt,aL,U$o,mfe,J$o,Y$o,Oi,K$o,gfe,Z$o,eko,nG,oko,rko,tko,h4,ako,eo,nL,nko,hfe,sko,lko,Sa,iko,pfe,dko,cko,ufe,fko,mko,_fe,gko,hko,pko,Y,p4,bfe,uko,_ko,sG,bko,vko,Fko,u4,vfe,Tko,Mko,lG,Eko,Cko,wko,_4,Ffe,Ako,yko,iG,Lko,xko,$ko,b4,Tfe,kko,Sko,dG,Rko,Bko,Pko,v4,Mfe,Iko,qko,cG,Nko,jko,Dko,F4,Efe,Gko,Oko,fG,Vko,Xko,zko,T4,Cfe,Qko,Wko,mG,Hko,Uko,Jko,M4,wfe,Yko,Kko,gG,Zko,eSo,oSo,E4,Afe,rSo,tSo,hG,aSo,nSo,sSo,C4,yfe,lSo,iSo,pG,dSo,cSo,fSo,w4,Lfe,mSo,gSo,uG,hSo,pSo,uSo,A4,xfe,_So,bSo,_G,vSo,FSo,TSo,y4,$fe,MSo,ESo,bG,CSo,wSo,ASo,L4,kfe,ySo,LSo,vG,xSo,$So,kSo,x4,Sfe,SSo,RSo,FG,BSo,PSo,ISo,$4,Rfe,qSo,NSo,TG,jSo,DSo,GSo,k4,Bfe,OSo,VSo,MG,XSo,zSo,QSo,S4,Pfe,WSo,HSo,EG,USo,JSo,YSo,R4,Ife,KSo,ZSo,CG,eRo,oRo,rRo,B4,qfe,tRo,aRo,wG,nRo,sRo,lRo,P4,Nfe,iRo,dRo,AG,cRo,fRo,mRo,I4,jfe,gRo,hRo,yG,pRo,uRo,_Ro,q4,Dfe,bRo,vRo,LG,FRo,TRo,MRo,N4,Gfe,ERo,CRo,xG,wRo,ARo,yRo,j4,Ofe,LRo,xRo,$G,$Ro,kRo,SRo,D4,Vfe,RRo,BRo,kG,PRo,IRo,qRo,G4,Xfe,NRo,jRo,SG,DRo,GRo,ORo,O4,zfe,VRo,XRo,RG,zRo,QRo,WRo,V4,Qfe,HRo,URo,BG,JRo,YRo,KRo,X4,ZRo,Wfe,eBo,oBo,Hfe,rBo,tBo,z4,FIe,Vi,Q4,Ufe,sL,aBo,Jfe,nBo,TIe,Po,lL,sBo,Xi,lBo,PG,iBo,dBo,IG,cBo,fBo,mBo,iL,gBo,Yfe,hBo,pBo,uBo,it,dL,_Bo,Kfe,bBo,vBo,zi,FBo,Zfe,TBo,MBo,qG,EBo,CBo,wBo,W4,ABo,oo,cL,yBo,eme,LBo,xBo,Ra,$Bo,ome,kBo,SBo,rme,RBo,BBo,tme,PBo,IBo,qBo,Yr,H4,ame,NBo,jBo,NG,DBo,GBo,OBo,U4,nme,VBo,XBo,jG,zBo,QBo,WBo,J4,sme,HBo,UBo,DG,JBo,YBo,KBo,Y4,lme,ZBo,ePo,GG,oPo,rPo,tPo,K4,ime,aPo,nPo,OG,sPo,lPo,iPo,Z4,dPo,dme,cPo,fPo,cme,mPo,gPo,e2,MIe,Qi,o2,fme,fL,hPo,mme,pPo,EIe,Io,mL,uPo,Wi,_Po,VG,bPo,vPo,XG,FPo,TPo,MPo,gL,EPo,gme,CPo,wPo,APo,dt,hL,yPo,hme,LPo,xPo,Hi,$Po,pme,kPo,SPo,zG,RPo,BPo,PPo,r2,IPo,ro,pL,qPo,ume,NPo,jPo,Ba,DPo,_me,GPo,OPo,bme,VPo,XPo,vme,zPo,QPo,WPo,U,t2,Fme,HPo,UPo,QG,JPo,YPo,KPo,a2,Tme,ZPo,eIo,WG,oIo,rIo,tIo,n2,Mme,aIo,nIo,HG,sIo,lIo,iIo,s2,Eme,dIo,cIo,UG,fIo,mIo,gIo,l2,Cme,hIo,pIo,JG,uIo,_Io,bIo,i2,wme,vIo,FIo,YG,TIo,MIo,EIo,d2,Ame,CIo,wIo,KG,AIo,yIo,LIo,c2,yme,xIo,$Io,ZG,kIo,SIo,RIo,f2,Lme,BIo,PIo,eO,IIo,qIo,NIo,m2,xme,jIo,DIo,oO,GIo,OIo,VIo,g2,$me,XIo,zIo,rO,QIo,WIo,HIo,h2,kme,UIo,JIo,tO,YIo,KIo,ZIo,p2,Sme,eqo,oqo,aO,rqo,tqo,aqo,u2,Rme,nqo,sqo,nO,lqo,iqo,dqo,_2,Bme,cqo,fqo,sO,mqo,gqo,hqo,b2,Pme,pqo,uqo,lO,_qo,bqo,vqo,v2,Ime,Fqo,Tqo,iO,Mqo,Eqo,Cqo,F2,qme,wqo,Aqo,dO,yqo,Lqo,xqo,T2,Nme,$qo,kqo,cO,Sqo,Rqo,Bqo,M2,jme,Pqo,Iqo,fO,qqo,Nqo,jqo,E2,Dme,Dqo,Gqo,mO,Oqo,Vqo,Xqo,C2,Gme,zqo,Qqo,gO,Wqo,Hqo,Uqo,w2,Ome,Jqo,Yqo,hO,Kqo,Zqo,eNo,A2,Vme,oNo,rNo,pO,tNo,aNo,nNo,y2,Xme,sNo,lNo,uO,iNo,dNo,cNo,L2,zme,fNo,mNo,_O,gNo,hNo,pNo,x2,Qme,uNo,_No,bO,bNo,vNo,FNo,$2,Wme,TNo,MNo,vO,ENo,CNo,wNo,k2,Hme,ANo,yNo,FO,LNo,xNo,$No,S2,Ume,kNo,SNo,TO,RNo,BNo,PNo,R2,Jme,INo,qNo,MO,NNo,jNo,DNo,B2,Yme,GNo,ONo,EO,VNo,XNo,zNo,P2,Kme,QNo,WNo,CO,HNo,UNo,JNo,I2,YNo,Zme,KNo,ZNo,ege,ejo,ojo,q2,CIe,Ui,N2,oge,uL,rjo,rge,tjo,wIe,qo,_L,ajo,Ji,njo,wO,sjo,ljo,AO,ijo,djo,cjo,bL,fjo,tge,mjo,gjo,hjo,ct,vL,pjo,age,ujo,_jo,Yi,bjo,nge,vjo,Fjo,yO,Tjo,Mjo,Ejo,j2,Cjo,to,FL,wjo,sge,Ajo,yjo,Pa,Ljo,lge,xjo,$jo,ige,kjo,Sjo,dge,Rjo,Bjo,Pjo,O,D2,cge,Ijo,qjo,LO,Njo,jjo,Djo,G2,fge,Gjo,Ojo,xO,Vjo,Xjo,zjo,O2,mge,Qjo,Wjo,$O,Hjo,Ujo,Jjo,V2,gge,Yjo,Kjo,kO,Zjo,eDo,oDo,X2,hge,rDo,tDo,SO,aDo,nDo,sDo,z2,pge,lDo,iDo,RO,dDo,cDo,fDo,Q2,uge,mDo,gDo,BO,hDo,pDo,uDo,W2,_ge,_Do,bDo,PO,vDo,FDo,TDo,H2,bge,MDo,EDo,IO,CDo,wDo,ADo,U2,vge,yDo,LDo,qO,xDo,$Do,kDo,J2,Fge,SDo,RDo,NO,BDo,PDo,IDo,Y2,Tge,qDo,NDo,jO,jDo,DDo,GDo,K2,Mge,ODo,VDo,DO,XDo,zDo,QDo,Z2,Ege,WDo,HDo,GO,UDo,JDo,YDo,e5,Cge,KDo,ZDo,OO,eGo,oGo,rGo,o5,wge,tGo,aGo,VO,nGo,sGo,lGo,r5,Age,iGo,dGo,XO,cGo,fGo,mGo,t5,yge,gGo,hGo,zO,pGo,uGo,_Go,a5,Lge,bGo,vGo,QO,FGo,TGo,MGo,n5,xge,EGo,CGo,WO,wGo,AGo,yGo,s5,$ge,LGo,xGo,HO,$Go,kGo,SGo,l5,kge,RGo,BGo,UO,PGo,IGo,qGo,i5,Sge,NGo,jGo,JO,DGo,GGo,OGo,d5,Rge,VGo,XGo,YO,zGo,QGo,WGo,c5,Bge,HGo,UGo,KO,JGo,YGo,KGo,f5,Pge,ZGo,eOo,ZO,oOo,rOo,tOo,m5,Ige,aOo,nOo,eV,sOo,lOo,iOo,g5,qge,dOo,cOo,oV,fOo,mOo,gOo,h5,Nge,hOo,pOo,rV,uOo,_Oo,bOo,p5,jge,vOo,FOo,tV,TOo,MOo,EOo,u5,Dge,COo,wOo,aV,AOo,yOo,LOo,_5,Gge,xOo,$Oo,nV,kOo,SOo,ROo,b5,Oge,BOo,POo,sV,IOo,qOo,NOo,v5,Vge,jOo,DOo,lV,GOo,OOo,VOo,F5,Xge,XOo,zOo,iV,QOo,WOo,HOo,T5,zge,UOo,JOo,dV,YOo,KOo,ZOo,M5,Qge,eVo,oVo,cV,rVo,tVo,aVo,E5,Wge,nVo,sVo,fV,lVo,iVo,dVo,C5,Hge,cVo,fVo,mV,mVo,gVo,hVo,w5,pVo,Uge,uVo,_Vo,Jge,bVo,vVo,A5,AIe,Ki,y5,Yge,TL,FVo,Kge,TVo,yIe,No,ML,MVo,Zi,EVo,gV,CVo,wVo,hV,AVo,yVo,LVo,EL,xVo,Zge,$Vo,kVo,SVo,ft,CL,RVo,ehe,BVo,PVo,ed,IVo,ohe,qVo,NVo,pV,jVo,DVo,GVo,L5,OVo,ao,wL,VVo,rhe,XVo,zVo,Ia,QVo,the,WVo,HVo,ahe,UVo,JVo,nhe,YVo,KVo,ZVo,she,x5,lhe,eXo,oXo,uV,rXo,tXo,aXo,$5,nXo,ihe,sXo,lXo,dhe,iXo,dXo,k5,LIe,od,S5,che,AL,cXo,fhe,fXo,xIe,jo,yL,mXo,rd,gXo,_V,hXo,pXo,bV,uXo,_Xo,bXo,LL,vXo,mhe,FXo,TXo,MXo,mt,xL,EXo,ghe,CXo,wXo,td,AXo,hhe,yXo,LXo,vV,xXo,$Xo,kXo,R5,SXo,no,$L,RXo,phe,BXo,PXo,qa,IXo,uhe,qXo,NXo,_he,jXo,DXo,bhe,GXo,OXo,VXo,Fe,B5,vhe,XXo,zXo,FV,QXo,WXo,HXo,P5,Fhe,UXo,JXo,TV,YXo,KXo,ZXo,I5,The,ezo,ozo,MV,rzo,tzo,azo,Bs,Mhe,nzo,szo,EV,lzo,izo,CV,dzo,czo,fzo,q5,Ehe,mzo,gzo,wV,hzo,pzo,uzo,gt,Che,_zo,bzo,AV,vzo,Fzo,yV,Tzo,Mzo,LV,Ezo,Czo,wzo,N5,whe,Azo,yzo,xV,Lzo,xzo,$zo,j5,Ahe,kzo,Szo,$V,Rzo,Bzo,Pzo,D5,yhe,Izo,qzo,kV,Nzo,jzo,Dzo,G5,Lhe,Gzo,Ozo,SV,Vzo,Xzo,zzo,O5,xhe,Qzo,Wzo,RV,Hzo,Uzo,Jzo,V5,$he,Yzo,Kzo,BV,Zzo,eQo,oQo,X5,khe,rQo,tQo,PV,aQo,nQo,sQo,z5,lQo,She,iQo,dQo,Rhe,cQo,fQo,Q5,$Ie,ad,W5,Bhe,kL,mQo,Phe,gQo,kIe,Do,SL,hQo,nd,pQo,IV,uQo,_Qo,qV,bQo,vQo,FQo,RL,TQo,Ihe,MQo,EQo,CQo,ht,BL,wQo,qhe,AQo,yQo,sd,LQo,Nhe,xQo,$Qo,NV,kQo,SQo,RQo,H5,BQo,so,PL,PQo,jhe,IQo,qQo,Na,NQo,Dhe,jQo,DQo,Ghe,GQo,OQo,Ohe,VQo,XQo,zQo,Vhe,U5,Xhe,QQo,WQo,jV,HQo,UQo,JQo,J5,YQo,zhe,KQo,ZQo,Qhe,eWo,oWo,Y5,SIe,ld,K5,Whe,IL,rWo,Hhe,tWo,RIe,Go,qL,aWo,id,nWo,DV,sWo,lWo,GV,iWo,dWo,cWo,NL,fWo,Uhe,mWo,gWo,hWo,pt,jL,pWo,Jhe,uWo,_Wo,dd,bWo,Yhe,vWo,FWo,OV,TWo,MWo,EWo,Z5,CWo,lo,DL,wWo,Khe,AWo,yWo,ja,LWo,Zhe,xWo,$Wo,epe,kWo,SWo,ope,RWo,BWo,PWo,Ne,e3,rpe,IWo,qWo,VV,NWo,jWo,DWo,o3,tpe,GWo,OWo,XV,VWo,XWo,zWo,r3,ape,QWo,WWo,zV,HWo,UWo,JWo,t3,npe,YWo,KWo,QV,ZWo,eHo,oHo,a3,spe,rHo,tHo,WV,aHo,nHo,sHo,n3,lpe,lHo,iHo,HV,dHo,cHo,fHo,s3,ipe,mHo,gHo,UV,hHo,pHo,uHo,l3,dpe,_Ho,bHo,JV,vHo,FHo,THo,i3,MHo,cpe,EHo,CHo,fpe,wHo,AHo,d3,BIe,cd,c3,mpe,GL,yHo,gpe,LHo,PIe,Oo,OL,xHo,fd,$Ho,YV,kHo,SHo,KV,RHo,BHo,PHo,VL,IHo,hpe,qHo,NHo,jHo,ut,XL,DHo,ppe,GHo,OHo,md,VHo,upe,XHo,zHo,ZV,QHo,WHo,HHo,f3,UHo,io,zL,JHo,_pe,YHo,KHo,Da,ZHo,bpe,eUo,oUo,vpe,rUo,tUo,Fpe,aUo,nUo,sUo,Ga,m3,Tpe,lUo,iUo,eX,dUo,cUo,fUo,g3,Mpe,mUo,gUo,oX,hUo,pUo,uUo,h3,Epe,_Uo,bUo,rX,vUo,FUo,TUo,p3,Cpe,MUo,EUo,tX,CUo,wUo,AUo,u3,yUo,wpe,LUo,xUo,Ape,$Uo,kUo,_3,IIe,gd,b3,ype,QL,SUo,Lpe,RUo,qIe,Vo,WL,BUo,hd,PUo,aX,IUo,qUo,nX,NUo,jUo,DUo,HL,GUo,xpe,OUo,VUo,XUo,_t,UL,zUo,$pe,QUo,WUo,pd,HUo,kpe,UUo,JUo,sX,YUo,KUo,ZUo,v3,eJo,co,JL,oJo,Spe,rJo,tJo,Oa,aJo,Rpe,nJo,sJo,Bpe,lJo,iJo,Ppe,dJo,cJo,fJo,je,F3,Ipe,mJo,gJo,lX,hJo,pJo,uJo,T3,qpe,_Jo,bJo,iX,vJo,FJo,TJo,M3,Npe,MJo,EJo,dX,CJo,wJo,AJo,E3,jpe,yJo,LJo,cX,xJo,$Jo,kJo,C3,Dpe,SJo,RJo,fX,BJo,PJo,IJo,w3,Gpe,qJo,NJo,mX,jJo,DJo,GJo,A3,Ope,OJo,VJo,gX,XJo,zJo,QJo,y3,Vpe,WJo,HJo,hX,UJo,JJo,YJo,L3,KJo,Xpe,ZJo,eYo,zpe,oYo,rYo,x3,NIe,ud,$3,Qpe,YL,tYo,Wpe,aYo,jIe,Xo,KL,nYo,_d,sYo,pX,lYo,iYo,uX,dYo,cYo,fYo,ZL,mYo,Hpe,gYo,hYo,pYo,bt,e8,uYo,Upe,_Yo,bYo,bd,vYo,Jpe,FYo,TYo,_X,MYo,EYo,CYo,k3,wYo,fo,o8,AYo,Ype,yYo,LYo,Va,xYo,Kpe,$Yo,kYo,Zpe,SYo,RYo,eue,BYo,PYo,IYo,r8,S3,oue,qYo,NYo,bX,jYo,DYo,GYo,R3,rue,OYo,VYo,vX,XYo,zYo,QYo,B3,WYo,tue,HYo,UYo,aue,JYo,YYo,P3,DIe,vd,I3,nue,t8,KYo,sue,ZYo,GIe,zo,a8,eKo,Fd,oKo,FX,rKo,tKo,TX,aKo,nKo,sKo,n8,lKo,lue,iKo,dKo,cKo,vt,s8,fKo,iue,mKo,gKo,Td,hKo,due,pKo,uKo,MX,_Ko,bKo,vKo,q3,FKo,mo,l8,TKo,cue,MKo,EKo,Xa,CKo,fue,wKo,AKo,mue,yKo,LKo,gue,xKo,$Ko,kKo,za,N3,hue,SKo,RKo,EX,BKo,PKo,IKo,j3,pue,qKo,NKo,CX,jKo,DKo,GKo,D3,uue,OKo,VKo,wX,XKo,zKo,QKo,G3,_ue,WKo,HKo,AX,UKo,JKo,YKo,O3,KKo,bue,ZKo,eZo,vue,oZo,rZo,V3,OIe,Md,X3,Fue,i8,tZo,Tue,aZo,VIe,Qo,d8,nZo,Ed,sZo,yX,lZo,iZo,LX,dZo,cZo,fZo,c8,mZo,Mue,gZo,hZo,pZo,Ft,f8,uZo,Eue,_Zo,bZo,Cd,vZo,Cue,FZo,TZo,xX,MZo,EZo,CZo,z3,wZo,go,m8,AZo,wue,yZo,LZo,Qa,xZo,Aue,$Zo,kZo,yue,SZo,RZo,Lue,BZo,PZo,IZo,wd,Q3,xue,qZo,NZo,$X,jZo,DZo,GZo,W3,$ue,OZo,VZo,kX,XZo,zZo,QZo,H3,kue,WZo,HZo,SX,UZo,JZo,YZo,U3,KZo,Sue,ZZo,eer,Rue,oer,rer,J3,XIe,Ad,Y3,Bue,g8,ter,Pue,aer,zIe,Wo,h8,ner,yd,ser,RX,ler,ier,BX,der,cer,fer,p8,mer,Iue,ger,her,per,Tt,u8,uer,que,_er,ber,Ld,ver,Nue,Fer,Ter,PX,Mer,Eer,Cer,K3,wer,ho,_8,Aer,jue,yer,Ler,Wa,xer,Due,$er,ker,Gue,Ser,Rer,Oue,Ber,Per,Ier,b8,Z3,Vue,qer,Ner,IX,jer,Der,Ger,ev,Xue,Oer,Ver,qX,Xer,zer,Qer,ov,Wer,zue,Her,Uer,Que,Jer,Yer,rv,QIe,xd,tv,Wue,v8,Ker,Hue,Zer,WIe,Ho,F8,eor,$d,oor,NX,ror,tor,jX,aor,nor,sor,T8,lor,Uue,ior,dor,cor,Mt,M8,mor,Jue,gor,hor,kd,por,Yue,uor,_or,DX,bor,vor,For,av,Tor,po,E8,Mor,Kue,Eor,Cor,Ha,wor,Zue,Aor,yor,e_e,Lor,xor,o_e,$or,kor,Sor,r_e,nv,t_e,Ror,Bor,GX,Por,Ior,qor,sv,Nor,a_e,jor,Dor,n_e,Gor,Oor,lv,HIe,Sd,iv,s_e,C8,Vor,l_e,Xor,UIe,Uo,w8,zor,Rd,Qor,OX,Wor,Hor,VX,Uor,Jor,Yor,A8,Kor,i_e,Zor,err,orr,Et,y8,rrr,d_e,trr,arr,Bd,nrr,c_e,srr,lrr,XX,irr,drr,crr,dv,frr,uo,L8,mrr,f_e,grr,hrr,Ua,prr,m_e,urr,_rr,g_e,brr,vrr,h_e,Frr,Trr,Mrr,Ja,cv,p_e,Err,Crr,zX,wrr,Arr,yrr,fv,u_e,Lrr,xrr,QX,$rr,krr,Srr,mv,__e,Rrr,Brr,WX,Prr,Irr,qrr,gv,b_e,Nrr,jrr,HX,Drr,Grr,Orr,hv,Vrr,v_e,Xrr,zrr,F_e,Qrr,Wrr,pv,JIe,Pd,uv,T_e,x8,Hrr,M_e,Urr,YIe,Jo,$8,Jrr,Id,Yrr,UX,Krr,Zrr,JX,etr,otr,rtr,k8,ttr,E_e,atr,ntr,str,Ct,S8,ltr,C_e,itr,dtr,qd,ctr,w_e,ftr,mtr,YX,gtr,htr,ptr,_v,utr,_o,R8,_tr,A_e,btr,vtr,Ya,Ftr,y_e,Ttr,Mtr,L_e,Etr,Ctr,x_e,wtr,Atr,ytr,$_e,bv,k_e,Ltr,xtr,KX,$tr,ktr,Str,vv,Rtr,S_e,Btr,Ptr,R_e,Itr,qtr,Fv,KIe,Nd,Tv,B_e,B8,Ntr,P_e,jtr,ZIe,Yo,P8,Dtr,jd,Gtr,ZX,Otr,Vtr,ez,Xtr,ztr,Qtr,I8,Wtr,I_e,Htr,Utr,Jtr,wt,q8,Ytr,q_e,Ktr,Ztr,Dd,ear,N_e,oar,rar,oz,tar,aar,nar,Mv,sar,wr,N8,lar,j_e,iar,dar,Ka,car,D_e,far,mar,G_e,gar,har,O_e,par,uar,_ar,q,Ev,V_e,bar,Far,rz,Tar,Mar,Ear,Cv,X_e,Car,war,tz,Aar,yar,Lar,wv,z_e,xar,$ar,az,kar,Sar,Rar,Av,Q_e,Bar,Par,nz,Iar,qar,Nar,yv,W_e,jar,Dar,sz,Gar,Oar,Var,Lv,H_e,Xar,zar,lz,Qar,War,Har,xv,U_e,Uar,Jar,iz,Yar,Kar,Zar,$v,J_e,enr,onr,dz,rnr,tnr,anr,kv,Y_e,nnr,snr,cz,lnr,inr,dnr,Sv,K_e,cnr,fnr,fz,mnr,gnr,hnr,Rv,Z_e,pnr,unr,mz,_nr,bnr,vnr,Bv,e1e,Fnr,Tnr,gz,Mnr,Enr,Cnr,Pv,o1e,wnr,Anr,hz,ynr,Lnr,xnr,Iv,r1e,$nr,knr,pz,Snr,Rnr,Bnr,qv,t1e,Pnr,Inr,uz,qnr,Nnr,jnr,Nv,a1e,Dnr,Gnr,_z,Onr,Vnr,Xnr,jv,n1e,znr,Qnr,bz,Wnr,Hnr,Unr,Ps,s1e,Jnr,Ynr,vz,Knr,Znr,Fz,esr,osr,rsr,Dv,l1e,tsr,asr,Tz,nsr,ssr,lsr,Gv,i1e,isr,dsr,Mz,csr,fsr,msr,Ov,d1e,gsr,hsr,Ez,psr,usr,_sr,Vv,c1e,bsr,vsr,Cz,Fsr,Tsr,Msr,Xv,f1e,Esr,Csr,wz,wsr,Asr,ysr,zv,m1e,Lsr,xsr,Az,$sr,ksr,Ssr,Qv,g1e,Rsr,Bsr,yz,Psr,Isr,qsr,Wv,h1e,Nsr,jsr,Lz,Dsr,Gsr,Osr,Hv,p1e,Vsr,Xsr,xz,zsr,Qsr,Wsr,Uv,u1e,Hsr,Usr,$z,Jsr,Ysr,Ksr,Jv,_1e,Zsr,elr,kz,olr,rlr,tlr,Yv,b1e,alr,nlr,Sz,slr,llr,ilr,Kv,v1e,dlr,clr,Rz,flr,mlr,glr,Zv,F1e,hlr,plr,Bz,ulr,_lr,blr,eF,T1e,vlr,Flr,Pz,Tlr,Mlr,Elr,oF,M1e,Clr,wlr,Iz,Alr,ylr,Llr,rF,E1e,xlr,$lr,qz,klr,Slr,Rlr,tF,C1e,Blr,Plr,Nz,Ilr,qlr,Nlr,aF,w1e,jlr,Dlr,jz,Glr,Olr,Vlr,nF,A1e,Xlr,zlr,Dz,Qlr,Wlr,Hlr,sF,y1e,Ulr,Jlr,Gz,Ylr,Klr,Zlr,lF,L1e,eir,oir,Oz,rir,tir,air,iF,x1e,nir,sir,Vz,lir,iir,dir,dF,$1e,cir,fir,Xz,mir,gir,hir,cF,k1e,pir,uir,zz,_ir,bir,vir,fF,S1e,Fir,Tir,Qz,Mir,Eir,Cir,mF,R1e,wir,Air,Wz,yir,Lir,xir,gF,B1e,$ir,kir,Hz,Sir,Rir,Bir,hF,P1e,Pir,Iir,Uz,qir,Nir,jir,pF,eqe,Gd,uF,I1e,j8,Dir,q1e,Gir,oqe,Ko,D8,Oir,Od,Vir,Jz,Xir,zir,Yz,Qir,Wir,Hir,G8,Uir,N1e,Jir,Yir,Kir,At,O8,Zir,j1e,edr,odr,Vd,rdr,D1e,tdr,adr,Kz,ndr,sdr,ldr,_F,idr,Ar,V8,ddr,G1e,cdr,fdr,Za,mdr,O1e,gdr,hdr,V1e,pdr,udr,X1e,_dr,bdr,vdr,se,bF,z1e,Fdr,Tdr,Zz,Mdr,Edr,Cdr,vF,Q1e,wdr,Adr,eQ,ydr,Ldr,xdr,FF,W1e,$dr,kdr,oQ,Sdr,Rdr,Bdr,TF,H1e,Pdr,Idr,rQ,qdr,Ndr,jdr,MF,U1e,Ddr,Gdr,tQ,Odr,Vdr,Xdr,EF,J1e,zdr,Qdr,aQ,Wdr,Hdr,Udr,CF,Y1e,Jdr,Ydr,nQ,Kdr,Zdr,ecr,wF,K1e,ocr,rcr,sQ,tcr,acr,ncr,AF,Z1e,scr,lcr,lQ,icr,dcr,ccr,yF,ebe,fcr,mcr,iQ,gcr,hcr,pcr,LF,obe,ucr,_cr,dQ,bcr,vcr,Fcr,xF,rbe,Tcr,Mcr,cQ,Ecr,Ccr,wcr,$F,tbe,Acr,ycr,fQ,Lcr,xcr,$cr,kF,abe,kcr,Scr,mQ,Rcr,Bcr,Pcr,SF,nbe,Icr,qcr,gQ,Ncr,jcr,Dcr,RF,sbe,Gcr,Ocr,hQ,Vcr,Xcr,zcr,BF,lbe,Qcr,Wcr,pQ,Hcr,Ucr,Jcr,PF,ibe,Ycr,Kcr,uQ,Zcr,efr,ofr,IF,dbe,rfr,tfr,_Q,afr,nfr,sfr,qF,cbe,lfr,ifr,bQ,dfr,cfr,ffr,NF,fbe,mfr,gfr,vQ,hfr,pfr,ufr,jF,mbe,_fr,bfr,FQ,vfr,Ffr,Tfr,DF,gbe,Mfr,Efr,TQ,Cfr,wfr,Afr,GF,rqe,Xd,OF,hbe,X8,yfr,pbe,Lfr,tqe,Zo,z8,xfr,zd,$fr,MQ,kfr,Sfr,EQ,Rfr,Bfr,Pfr,Q8,Ifr,ube,qfr,Nfr,jfr,yt,W8,Dfr,_be,Gfr,Ofr,Qd,Vfr,bbe,Xfr,zfr,CQ,Qfr,Wfr,Hfr,VF,Ufr,yr,H8,Jfr,vbe,Yfr,Kfr,en,Zfr,Fbe,emr,omr,Tbe,rmr,tmr,Mbe,amr,nmr,smr,Te,XF,Ebe,lmr,imr,wQ,dmr,cmr,fmr,zF,Cbe,mmr,gmr,AQ,hmr,pmr,umr,QF,wbe,_mr,bmr,yQ,vmr,Fmr,Tmr,WF,Abe,Mmr,Emr,LQ,Cmr,wmr,Amr,HF,ybe,ymr,Lmr,xQ,xmr,$mr,kmr,UF,Lbe,Smr,Rmr,$Q,Bmr,Pmr,Imr,JF,xbe,qmr,Nmr,kQ,jmr,Dmr,Gmr,YF,$be,Omr,Vmr,SQ,Xmr,zmr,Qmr,KF,kbe,Wmr,Hmr,RQ,Umr,Jmr,Ymr,ZF,Sbe,Kmr,Zmr,BQ,egr,ogr,rgr,e6,Rbe,tgr,agr,PQ,ngr,sgr,lgr,o6,Bbe,igr,dgr,IQ,cgr,fgr,mgr,r6,Pbe,ggr,hgr,qQ,pgr,ugr,_gr,t6,aqe,Wd,a6,Ibe,U8,bgr,qbe,vgr,nqe,er,J8,Fgr,Hd,Tgr,NQ,Mgr,Egr,jQ,Cgr,wgr,Agr,Y8,ygr,Nbe,Lgr,xgr,$gr,Lt,K8,kgr,jbe,Sgr,Rgr,Ud,Bgr,Dbe,Pgr,Igr,DQ,qgr,Ngr,jgr,n6,Dgr,Lr,Z8,Ggr,Gbe,Ogr,Vgr,on,Xgr,Obe,zgr,Qgr,Vbe,Wgr,Hgr,Xbe,Ugr,Jgr,Ygr,rn,s6,zbe,Kgr,Zgr,GQ,ehr,ohr,rhr,l6,Qbe,thr,ahr,OQ,nhr,shr,lhr,i6,Wbe,ihr,dhr,VQ,chr,fhr,mhr,d6,Hbe,ghr,hhr,XQ,phr,uhr,_hr,c6,sqe,Jd,f6,Ube,ex,bhr,Jbe,vhr,lqe,or,ox,Fhr,Yd,Thr,zQ,Mhr,Ehr,QQ,Chr,whr,Ahr,rx,yhr,Ybe,Lhr,xhr,$hr,xt,tx,khr,Kbe,Shr,Rhr,Kd,Bhr,Zbe,Phr,Ihr,WQ,qhr,Nhr,jhr,m6,Dhr,xr,ax,Ghr,e4e,Ohr,Vhr,tn,Xhr,o4e,zhr,Qhr,r4e,Whr,Hhr,t4e,Uhr,Jhr,Yhr,ie,g6,a4e,Khr,Zhr,HQ,epr,opr,rpr,h6,n4e,tpr,apr,UQ,npr,spr,lpr,p6,s4e,ipr,dpr,JQ,cpr,fpr,mpr,u6,l4e,gpr,hpr,YQ,ppr,upr,_pr,_6,i4e,bpr,vpr,KQ,Fpr,Tpr,Mpr,b6,d4e,Epr,Cpr,ZQ,wpr,Apr,ypr,v6,c4e,Lpr,xpr,eW,$pr,kpr,Spr,F6,f4e,Rpr,Bpr,oW,Ppr,Ipr,qpr,T6,m4e,Npr,jpr,rW,Dpr,Gpr,Opr,M6,g4e,Vpr,Xpr,tW,zpr,Qpr,Wpr,E6,h4e,Hpr,Upr,aW,Jpr,Ypr,Kpr,C6,p4e,Zpr,eur,nW,our,rur,tur,w6,u4e,aur,nur,sW,sur,lur,iur,A6,_4e,dur,cur,lW,fur,mur,gur,y6,b4e,hur,pur,iW,uur,_ur,bur,L6,v4e,vur,Fur,dW,Tur,Mur,Eur,x6,F4e,Cur,wur,cW,Aur,yur,Lur,$6,T4e,xur,$ur,fW,kur,Sur,Rur,k6,M4e,Bur,Pur,mW,Iur,qur,Nur,S6,E4e,jur,Dur,gW,Gur,Our,Vur,R6,iqe,Zd,B6,C4e,nx,Xur,w4e,zur,dqe,rr,sx,Qur,ec,Wur,hW,Hur,Uur,pW,Jur,Yur,Kur,lx,Zur,A4e,e_r,o_r,r_r,$t,ix,t_r,y4e,a_r,n_r,oc,s_r,L4e,l_r,i_r,uW,d_r,c_r,f_r,P6,m_r,$r,dx,g_r,x4e,h_r,p_r,an,u_r,$4e,__r,b_r,k4e,v_r,F_r,S4e,T_r,M_r,E_r,ye,I6,R4e,C_r,w_r,_W,A_r,y_r,L_r,q6,B4e,x_r,$_r,bW,k_r,S_r,R_r,N6,P4e,B_r,P_r,vW,I_r,q_r,N_r,j6,I4e,j_r,D_r,FW,G_r,O_r,V_r,D6,q4e,X_r,z_r,TW,Q_r,W_r,H_r,G6,N4e,U_r,J_r,MW,Y_r,K_r,Z_r,O6,j4e,e1r,o1r,EW,r1r,t1r,a1r,V6,D4e,n1r,s1r,CW,l1r,i1r,d1r,X6,G4e,c1r,f1r,wW,m1r,g1r,h1r,z6,O4e,p1r,u1r,AW,_1r,b1r,v1r,Q6,cqe,rc,W6,V4e,cx,F1r,X4e,T1r,fqe,tr,fx,M1r,tc,E1r,yW,C1r,w1r,LW,A1r,y1r,L1r,mx,x1r,z4e,$1r,k1r,S1r,kt,gx,R1r,Q4e,B1r,P1r,ac,I1r,W4e,q1r,N1r,xW,j1r,D1r,G1r,H6,O1r,kr,hx,V1r,H4e,X1r,z1r,nn,Q1r,U4e,W1r,H1r,J4e,U1r,J1r,Y4e,Y1r,K1r,Z1r,Z,U6,K4e,ebr,obr,$W,rbr,tbr,abr,J6,Z4e,nbr,sbr,kW,lbr,ibr,dbr,Y6,e2e,cbr,fbr,SW,mbr,gbr,hbr,K6,o2e,pbr,ubr,RW,_br,bbr,vbr,Z6,r2e,Fbr,Tbr,BW,Mbr,Ebr,Cbr,eT,t2e,wbr,Abr,PW,ybr,Lbr,xbr,oT,a2e,$br,kbr,IW,Sbr,Rbr,Bbr,rT,n2e,Pbr,Ibr,qW,qbr,Nbr,jbr,tT,s2e,Dbr,Gbr,NW,Obr,Vbr,Xbr,aT,l2e,zbr,Qbr,jW,Wbr,Hbr,Ubr,nT,i2e,Jbr,Ybr,DW,Kbr,Zbr,e4r,sT,d2e,o4r,r4r,GW,t4r,a4r,n4r,lT,c2e,s4r,l4r,OW,i4r,d4r,c4r,iT,f2e,f4r,m4r,VW,g4r,h4r,p4r,dT,m2e,u4r,_4r,XW,b4r,v4r,F4r,cT,g2e,T4r,M4r,zW,E4r,C4r,w4r,fT,h2e,A4r,y4r,QW,L4r,x4r,$4r,mT,p2e,k4r,S4r,WW,R4r,B4r,P4r,gT,u2e,I4r,q4r,HW,N4r,j4r,D4r,hT,_2e,G4r,O4r,UW,V4r,X4r,z4r,pT,b2e,Q4r,W4r,JW,H4r,U4r,J4r,uT,v2e,Y4r,K4r,YW,Z4r,e2r,o2r,_T,F2e,r2r,t2r,KW,a2r,n2r,s2r,bT,T2e,l2r,i2r,ZW,d2r,c2r,f2r,vT,M2e,m2r,g2r,eH,h2r,p2r,u2r,FT,E2e,_2r,b2r,oH,v2r,F2r,T2r,TT,mqe,nc,MT,C2e,px,M2r,w2e,E2r,gqe,ar,ux,C2r,sc,w2r,rH,A2r,y2r,tH,L2r,x2r,$2r,_x,k2r,A2e,S2r,R2r,B2r,St,bx,P2r,y2e,I2r,q2r,lc,N2r,L2e,j2r,D2r,aH,G2r,O2r,V2r,ET,X2r,Sr,vx,z2r,x2e,Q2r,W2r,sn,H2r,$2e,U2r,J2r,k2e,Y2r,K2r,S2e,Z2r,e5r,o5r,he,CT,R2e,r5r,t5r,nH,a5r,n5r,s5r,wT,B2e,l5r,i5r,sH,d5r,c5r,f5r,AT,P2e,m5r,g5r,lH,h5r,p5r,u5r,yT,I2e,_5r,b5r,iH,v5r,F5r,T5r,LT,q2e,M5r,E5r,dH,C5r,w5r,A5r,xT,N2e,y5r,L5r,cH,x5r,$5r,k5r,$T,j2e,S5r,R5r,fH,B5r,P5r,I5r,kT,D2e,q5r,N5r,mH,j5r,D5r,G5r,ST,G2e,O5r,V5r,gH,X5r,z5r,Q5r,RT,O2e,W5r,H5r,hH,U5r,J5r,Y5r,BT,V2e,K5r,Z5r,pH,e3r,o3r,r3r,PT,X2e,t3r,a3r,uH,n3r,s3r,l3r,IT,z2e,i3r,d3r,_H,c3r,f3r,m3r,qT,Q2e,g3r,h3r,bH,p3r,u3r,_3r,NT,W2e,b3r,v3r,vH,F3r,T3r,M3r,jT,H2e,E3r,C3r,FH,w3r,A3r,y3r,DT,U2e,L3r,x3r,TH,$3r,k3r,S3r,GT,hqe,ic,OT,J2e,Fx,R3r,Y2e,B3r,pqe,nr,Tx,P3r,dc,I3r,MH,q3r,N3r,EH,j3r,D3r,G3r,Mx,O3r,K2e,V3r,X3r,z3r,Rt,Ex,Q3r,Z2e,W3r,H3r,cc,U3r,e5e,J3r,Y3r,CH,K3r,Z3r,evr,VT,ovr,Rr,Cx,rvr,o5e,tvr,avr,ln,nvr,r5e,svr,lvr,t5e,ivr,dvr,a5e,cvr,fvr,mvr,wx,XT,n5e,gvr,hvr,wH,pvr,uvr,_vr,zT,s5e,bvr,vvr,AH,Fvr,Tvr,Mvr,QT,uqe,fc,WT,l5e,Ax,Evr,i5e,Cvr,_qe,sr,yx,wvr,mc,Avr,yH,yvr,Lvr,LH,xvr,$vr,kvr,Lx,Svr,d5e,Rvr,Bvr,Pvr,Bt,xx,Ivr,c5e,qvr,Nvr,gc,jvr,f5e,Dvr,Gvr,xH,Ovr,Vvr,Xvr,HT,zvr,Br,$x,Qvr,m5e,Wvr,Hvr,dn,Uvr,g5e,Jvr,Yvr,h5e,Kvr,Zvr,p5e,eFr,oFr,rFr,u5e,UT,_5e,tFr,aFr,$H,nFr,sFr,lFr,JT,bqe,hc,YT,b5e,kx,iFr,v5e,dFr,vqe,lr,Sx,cFr,pc,fFr,kH,mFr,gFr,SH,hFr,pFr,uFr,Rx,_Fr,F5e,bFr,vFr,FFr,Pt,Bx,TFr,T5e,MFr,EFr,uc,CFr,M5e,wFr,AFr,RH,yFr,LFr,xFr,KT,$Fr,Pr,Px,kFr,E5e,SFr,RFr,cn,BFr,C5e,PFr,IFr,w5e,qFr,NFr,A5e,jFr,DFr,GFr,de,ZT,y5e,OFr,VFr,BH,XFr,zFr,QFr,eM,L5e,WFr,HFr,PH,UFr,JFr,YFr,oM,x5e,KFr,ZFr,IH,e6r,o6r,r6r,rM,$5e,t6r,a6r,qH,n6r,s6r,l6r,tM,k5e,i6r,d6r,NH,c6r,f6r,m6r,aM,S5e,g6r,h6r,jH,p6r,u6r,_6r,nM,R5e,b6r,v6r,DH,F6r,T6r,M6r,sM,B5e,E6r,C6r,GH,w6r,A6r,y6r,lM,P5e,L6r,x6r,OH,$6r,k6r,S6r,iM,I5e,R6r,B6r,VH,P6r,I6r,q6r,dM,q5e,N6r,j6r,XH,D6r,G6r,O6r,cM,N5e,V6r,X6r,zH,z6r,Q6r,W6r,fM,j5e,H6r,U6r,QH,J6r,Y6r,K6r,mM,D5e,Z6r,eTr,WH,oTr,rTr,tTr,gM,G5e,aTr,nTr,HH,sTr,lTr,iTr,hM,O5e,dTr,cTr,UH,fTr,mTr,gTr,pM,V5e,hTr,pTr,JH,uTr,_Tr,bTr,uM,X5e,vTr,FTr,YH,TTr,MTr,ETr,_M,z5e,CTr,wTr,KH,ATr,yTr,LTr,bM,Q5e,xTr,$Tr,ZH,kTr,STr,RTr,vM,Fqe,_c,FM,W5e,Ix,BTr,H5e,PTr,Tqe,ir,qx,ITr,bc,qTr,eU,NTr,jTr,oU,DTr,GTr,OTr,Nx,VTr,U5e,XTr,zTr,QTr,It,jx,WTr,J5e,HTr,UTr,vc,JTr,Y5e,YTr,KTr,rU,ZTr,eMr,oMr,TM,rMr,Ir,Dx,tMr,K5e,aMr,nMr,fn,sMr,Z5e,lMr,iMr,e3e,dMr,cMr,o3e,fMr,mMr,gMr,ce,MM,r3e,hMr,pMr,tU,uMr,_Mr,bMr,EM,t3e,vMr,FMr,aU,TMr,MMr,EMr,CM,a3e,CMr,wMr,nU,AMr,yMr,LMr,wM,n3e,xMr,$Mr,sU,kMr,SMr,RMr,AM,s3e,BMr,PMr,lU,IMr,qMr,NMr,yM,l3e,jMr,DMr,iU,GMr,OMr,VMr,LM,i3e,XMr,zMr,dU,QMr,WMr,HMr,xM,d3e,UMr,JMr,cU,YMr,KMr,ZMr,$M,c3e,eEr,oEr,fU,rEr,tEr,aEr,kM,f3e,nEr,sEr,mU,lEr,iEr,dEr,SM,m3e,cEr,fEr,gU,mEr,gEr,hEr,RM,g3e,pEr,uEr,hU,_Er,bEr,vEr,BM,h3e,FEr,TEr,pU,MEr,EEr,CEr,PM,p3e,wEr,AEr,uU,yEr,LEr,xEr,IM,u3e,$Er,kEr,_U,SEr,REr,BEr,qM,_3e,PEr,IEr,bU,qEr,NEr,jEr,NM,b3e,DEr,GEr,vU,OEr,VEr,XEr,jM,v3e,zEr,QEr,FU,WEr,HEr,UEr,DM,F3e,JEr,YEr,TU,KEr,ZEr,eCr,GM,T3e,oCr,rCr,MU,tCr,aCr,nCr,OM,Mqe,Fc,VM,M3e,Gx,sCr,E3e,lCr,Eqe,dr,Ox,iCr,Tc,dCr,EU,cCr,fCr,CU,mCr,gCr,hCr,Vx,pCr,C3e,uCr,_Cr,bCr,qt,Xx,vCr,w3e,FCr,TCr,Mc,MCr,A3e,ECr,CCr,wU,wCr,ACr,yCr,XM,LCr,qr,zx,xCr,y3e,$Cr,kCr,mn,SCr,L3e,RCr,BCr,x3e,PCr,ICr,$3e,qCr,NCr,jCr,k3e,zM,S3e,DCr,GCr,AU,OCr,VCr,XCr,QM,Cqe,Ec,WM,R3e,Qx,zCr,B3e,QCr,wqe,cr,Wx,WCr,Cc,HCr,yU,UCr,JCr,LU,YCr,KCr,ZCr,Hx,ewr,P3e,owr,rwr,twr,Nt,Ux,awr,I3e,nwr,swr,wc,lwr,q3e,iwr,dwr,xU,cwr,fwr,mwr,HM,gwr,Nr,Jx,hwr,N3e,pwr,uwr,gn,_wr,j3e,bwr,vwr,D3e,Fwr,Twr,G3e,Mwr,Ewr,Cwr,O3e,UM,V3e,wwr,Awr,$U,ywr,Lwr,xwr,JM,Aqe,Ac,YM,X3e,Yx,$wr,z3e,kwr,yqe,fr,Kx,Swr,yc,Rwr,kU,Bwr,Pwr,SU,Iwr,qwr,Nwr,Zx,jwr,Q3e,Dwr,Gwr,Owr,jt,e7,Vwr,W3e,Xwr,zwr,Lc,Qwr,H3e,Wwr,Hwr,RU,Uwr,Jwr,Ywr,KM,Kwr,jr,o7,Zwr,U3e,eAr,oAr,hn,rAr,J3e,tAr,aAr,Y3e,nAr,sAr,K3e,lAr,iAr,dAr,re,ZM,Z3e,cAr,fAr,BU,mAr,gAr,hAr,eE,eve,pAr,uAr,PU,_Ar,bAr,vAr,oE,ove,FAr,TAr,IU,MAr,EAr,CAr,rE,rve,wAr,AAr,qU,yAr,LAr,xAr,tE,tve,$Ar,kAr,NU,SAr,RAr,BAr,aE,ave,PAr,IAr,jU,qAr,NAr,jAr,nE,nve,DAr,GAr,DU,OAr,VAr,XAr,sE,sve,zAr,QAr,GU,WAr,HAr,UAr,lE,lve,JAr,YAr,OU,KAr,ZAr,e0r,iE,ive,o0r,r0r,VU,t0r,a0r,n0r,dE,dve,s0r,l0r,XU,i0r,d0r,c0r,cE,cve,f0r,m0r,zU,g0r,h0r,p0r,fE,fve,u0r,_0r,QU,b0r,v0r,F0r,mE,mve,T0r,M0r,WU,E0r,C0r,w0r,gE,gve,A0r,y0r,HU,L0r,x0r,$0r,hE,hve,k0r,S0r,UU,R0r,B0r,P0r,pE,pve,I0r,q0r,JU,N0r,j0r,D0r,uE,uve,G0r,O0r,YU,V0r,X0r,z0r,_E,_ve,Q0r,W0r,KU,H0r,U0r,J0r,bE,bve,Y0r,K0r,ZU,Z0r,eyr,oyr,vE,vve,ryr,tyr,eJ,ayr,nyr,syr,FE,Fve,lyr,iyr,oJ,dyr,cyr,fyr,TE,Tve,myr,gyr,rJ,hyr,pyr,uyr,ME,Mve,_yr,byr,tJ,vyr,Fyr,Tyr,EE,Eve,Myr,Eyr,aJ,Cyr,wyr,Ayr,CE,Lqe,xc,wE,Cve,r7,yyr,wve,Lyr,xqe,mr,t7,xyr,$c,$yr,nJ,kyr,Syr,sJ,Ryr,Byr,Pyr,a7,Iyr,Ave,qyr,Nyr,jyr,Dt,n7,Dyr,yve,Gyr,Oyr,kc,Vyr,Lve,Xyr,zyr,lJ,Qyr,Wyr,Hyr,AE,Uyr,Dr,s7,Jyr,xve,Yyr,Kyr,pn,Zyr,$ve,eLr,oLr,kve,rLr,tLr,Sve,aLr,nLr,sLr,ke,yE,Rve,lLr,iLr,iJ,dLr,cLr,fLr,LE,Bve,mLr,gLr,dJ,hLr,pLr,uLr,xE,Pve,_Lr,bLr,cJ,vLr,FLr,TLr,$E,Ive,MLr,ELr,fJ,CLr,wLr,ALr,kE,qve,yLr,LLr,mJ,xLr,$Lr,kLr,SE,Nve,SLr,RLr,gJ,BLr,PLr,ILr,RE,jve,qLr,NLr,hJ,jLr,DLr,GLr,BE,Dve,OLr,VLr,pJ,XLr,zLr,QLr,PE,Gve,WLr,HLr,uJ,ULr,JLr,YLr,IE,$qe,Sc,qE,Ove,l7,KLr,Vve,ZLr,kqe,gr,i7,e8r,Rc,o8r,_J,r8r,t8r,bJ,a8r,n8r,s8r,d7,l8r,Xve,i8r,d8r,c8r,Gt,c7,f8r,zve,m8r,g8r,Bc,h8r,Qve,p8r,u8r,vJ,_8r,b8r,v8r,NE,F8r,Gr,f7,T8r,Wve,M8r,E8r,un,C8r,Hve,w8r,A8r,Uve,y8r,L8r,Jve,x8r,$8r,k8r,Me,jE,Yve,S8r,R8r,FJ,B8r,P8r,I8r,DE,Kve,q8r,N8r,TJ,j8r,D8r,G8r,GE,Zve,O8r,V8r,MJ,X8r,z8r,Q8r,OE,eFe,W8r,H8r,EJ,U8r,J8r,Y8r,VE,oFe,K8r,Z8r,CJ,exr,oxr,rxr,XE,rFe,txr,axr,wJ,nxr,sxr,lxr,zE,tFe,ixr,dxr,AJ,cxr,fxr,mxr,QE,aFe,gxr,hxr,yJ,pxr,uxr,_xr,WE,nFe,bxr,vxr,LJ,Fxr,Txr,Mxr,HE,sFe,Exr,Cxr,xJ,wxr,Axr,yxr,UE,lFe,Lxr,xxr,$J,$xr,kxr,Sxr,JE,iFe,Rxr,Bxr,kJ,Pxr,Ixr,qxr,YE,Sqe,Pc,KE,dFe,m7,Nxr,cFe,jxr,Rqe,hr,g7,Dxr,Ic,Gxr,SJ,Oxr,Vxr,RJ,Xxr,zxr,Qxr,h7,Wxr,fFe,Hxr,Uxr,Jxr,Ot,p7,Yxr,mFe,Kxr,Zxr,qc,e7r,gFe,o7r,r7r,BJ,t7r,a7r,n7r,ZE,s7r,Or,u7,l7r,hFe,i7r,d7r,_n,c7r,pFe,f7r,m7r,uFe,g7r,h7r,_Fe,p7r,u7r,_7r,Le,eC,bFe,b7r,v7r,PJ,F7r,T7r,M7r,oC,vFe,E7r,C7r,IJ,w7r,A7r,y7r,rC,FFe,L7r,x7r,qJ,$7r,k7r,S7r,tC,TFe,R7r,B7r,NJ,P7r,I7r,q7r,aC,MFe,N7r,j7r,jJ,D7r,G7r,O7r,nC,EFe,V7r,X7r,DJ,z7r,Q7r,W7r,sC,CFe,H7r,U7r,GJ,J7r,Y7r,K7r,lC,wFe,Z7r,e9r,OJ,o9r,r9r,t9r,iC,AFe,a9r,n9r,VJ,s9r,l9r,i9r,dC,yFe,d9r,c9r,XJ,f9r,m9r,g9r,cC,Bqe,Nc,fC,LFe,_7,h9r,xFe,p9r,Pqe,pr,b7,u9r,jc,_9r,zJ,b9r,v9r,QJ,F9r,T9r,M9r,v7,E9r,$Fe,C9r,w9r,A9r,Vt,F7,y9r,kFe,L9r,x9r,Dc,$9r,SFe,k9r,S9r,WJ,R9r,B9r,P9r,mC,I9r,Vr,T7,q9r,RFe,N9r,j9r,bn,D9r,BFe,G9r,O9r,PFe,V9r,X9r,IFe,z9r,Q9r,W9r,Se,gC,qFe,H9r,U9r,HJ,J9r,Y9r,K9r,hC,NFe,Z9r,e$r,UJ,o$r,r$r,t$r,pC,jFe,a$r,n$r,JJ,s$r,l$r,i$r,uC,DFe,d$r,c$r,YJ,f$r,m$r,g$r,_C,GFe,h$r,p$r,KJ,u$r,_$r,b$r,bC,OFe,v$r,F$r,ZJ,T$r,M$r,E$r,vC,VFe,C$r,w$r,eY,A$r,y$r,L$r,FC,XFe,x$r,$$r,oY,k$r,S$r,R$r,TC,zFe,B$r,P$r,rY,I$r,q$r,N$r,MC,Iqe,Gc,EC,QFe,M7,j$r,WFe,D$r,qqe,ur,E7,G$r,Oc,O$r,tY,V$r,X$r,aY,z$r,Q$r,W$r,C7,H$r,HFe,U$r,J$r,Y$r,Xt,w7,K$r,UFe,Z$r,ekr,Vc,okr,JFe,rkr,tkr,nY,akr,nkr,skr,CC,lkr,Xr,A7,ikr,YFe,dkr,ckr,vn,fkr,KFe,mkr,gkr,ZFe,hkr,pkr,e6e,ukr,_kr,bkr,xe,wC,o6e,vkr,Fkr,sY,Tkr,Mkr,Ekr,AC,r6e,Ckr,wkr,lY,Akr,ykr,Lkr,yC,t6e,xkr,$kr,iY,kkr,Skr,Rkr,LC,a6e,Bkr,Pkr,dY,Ikr,qkr,Nkr,xC,n6e,jkr,Dkr,cY,Gkr,Okr,Vkr,$C,s6e,Xkr,zkr,fY,Qkr,Wkr,Hkr,kC,l6e,Ukr,Jkr,mY,Ykr,Kkr,Zkr,SC,i6e,eSr,oSr,gY,rSr,tSr,aSr,RC,d6e,nSr,sSr,hY,lSr,iSr,dSr,BC,c6e,cSr,fSr,pY,mSr,gSr,hSr,PC,Nqe,Xc,IC,f6e,y7,pSr,m6e,uSr,jqe,_r,L7,_Sr,zc,bSr,uY,vSr,FSr,_Y,TSr,MSr,ESr,x7,CSr,g6e,wSr,ASr,ySr,zt,$7,LSr,h6e,xSr,$Sr,Qc,kSr,p6e,SSr,RSr,bY,BSr,PSr,ISr,qC,qSr,zr,k7,NSr,u6e,jSr,DSr,Fn,GSr,_6e,OSr,VSr,b6e,XSr,zSr,v6e,QSr,WSr,HSr,$e,NC,F6e,USr,JSr,vY,YSr,KSr,ZSr,jC,T6e,eRr,oRr,FY,rRr,tRr,aRr,DC,M6e,nRr,sRr,TY,lRr,iRr,dRr,GC,E6e,cRr,fRr,MY,mRr,gRr,hRr,OC,C6e,pRr,uRr,EY,_Rr,bRr,vRr,VC,w6e,FRr,TRr,CY,MRr,ERr,CRr,XC,A6e,wRr,ARr,wY,yRr,LRr,xRr,zC,y6e,$Rr,kRr,AY,SRr,RRr,BRr,QC,L6e,PRr,IRr,yY,qRr,NRr,jRr,WC,x6e,DRr,GRr,LY,ORr,VRr,XRr,HC,Dqe,Wc,UC,$6e,S7,zRr,k6e,QRr,Gqe,br,R7,WRr,Hc,HRr,xY,URr,JRr,$Y,YRr,KRr,ZRr,B7,eBr,S6e,oBr,rBr,tBr,Qt,P7,aBr,R6e,nBr,sBr,Uc,lBr,B6e,iBr,dBr,kY,cBr,fBr,mBr,JC,gBr,Qr,I7,hBr,P6e,pBr,uBr,Tn,_Br,I6e,bBr,vBr,q6e,FBr,TBr,N6e,MBr,EBr,CBr,De,YC,j6e,wBr,ABr,SY,yBr,LBr,xBr,KC,D6e,$Br,kBr,RY,SBr,RBr,BBr,ZC,G6e,PBr,IBr,BY,qBr,NBr,jBr,ew,O6e,DBr,GBr,PY,OBr,VBr,XBr,ow,V6e,zBr,QBr,IY,WBr,HBr,UBr,rw,X6e,JBr,YBr,qY,KBr,ZBr,ePr,tw,z6e,oPr,rPr,NY,tPr,aPr,nPr,aw,Q6e,sPr,lPr,jY,iPr,dPr,cPr,nw,Oqe,Jc,sw,W6e,q7,fPr,H6e,mPr,Vqe,vr,N7,gPr,Yc,hPr,DY,pPr,uPr,GY,_Pr,bPr,vPr,j7,FPr,U6e,TPr,MPr,EPr,Wt,D7,CPr,J6e,wPr,APr,Kc,yPr,Y6e,LPr,xPr,OY,$Pr,kPr,SPr,lw,RPr,Wr,G7,BPr,K6e,PPr,IPr,Mn,qPr,Z6e,NPr,jPr,eTe,DPr,GPr,oTe,OPr,VPr,XPr,Ge,iw,rTe,zPr,QPr,VY,WPr,HPr,UPr,dw,tTe,JPr,YPr,XY,KPr,ZPr,eIr,cw,aTe,oIr,rIr,zY,tIr,aIr,nIr,fw,nTe,sIr,lIr,QY,iIr,dIr,cIr,mw,sTe,fIr,mIr,WY,gIr,hIr,pIr,gw,lTe,uIr,_Ir,HY,bIr,vIr,FIr,hw,iTe,TIr,MIr,UY,EIr,CIr,wIr,pw,dTe,AIr,yIr,JY,LIr,xIr,$Ir,uw,Xqe,Zc,_w,cTe,O7,kIr,fTe,SIr,zqe,Fr,V7,RIr,ef,BIr,YY,PIr,IIr,KY,qIr,NIr,jIr,X7,DIr,mTe,GIr,OIr,VIr,Ht,z7,XIr,gTe,zIr,QIr,of,WIr,hTe,HIr,UIr,ZY,JIr,YIr,KIr,bw,ZIr,Hr,Q7,eqr,pTe,oqr,rqr,En,tqr,uTe,aqr,nqr,_Te,sqr,lqr,bTe,iqr,dqr,cqr,vTe,vw,FTe,fqr,mqr,eK,gqr,hqr,pqr,Fw,Qqe,rf,Tw,TTe,W7,uqr,MTe,_qr,Wqe,Tr,H7,bqr,tf,vqr,oK,Fqr,Tqr,rK,Mqr,Eqr,Cqr,U7,wqr,ETe,Aqr,yqr,Lqr,Ut,J7,xqr,CTe,$qr,kqr,af,Sqr,wTe,Rqr,Bqr,tK,Pqr,Iqr,qqr,Mw,Nqr,Ur,Y7,jqr,ATe,Dqr,Gqr,Cn,Oqr,yTe,Vqr,Xqr,LTe,zqr,Qqr,xTe,Wqr,Hqr,Uqr,K7,Ew,$Te,Jqr,Yqr,aK,Kqr,Zqr,eNr,Cw,kTe,oNr,rNr,nK,tNr,aNr,nNr,ww,Hqe,nf,Aw,STe,Z7,sNr,RTe,lNr,Uqe,Mr,e9,iNr,sf,dNr,sK,cNr,fNr,lK,mNr,gNr,hNr,o9,pNr,BTe,uNr,_Nr,bNr,Jt,r9,vNr,PTe,FNr,TNr,lf,MNr,ITe,ENr,CNr,iK,wNr,ANr,yNr,yw,LNr,Jr,t9,xNr,qTe,$Nr,kNr,wn,SNr,NTe,RNr,BNr,jTe,PNr,INr,DTe,qNr,NNr,jNr,GTe,Lw,OTe,DNr,GNr,dK,ONr,VNr,XNr,xw,Jqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Z0=new ee({}),ey=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new zNr({props:{warning:!0,$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L570"}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L593"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),sy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/configuration_auto.py#L716"}}),ly=new ee({}),iy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L387"}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16543/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L401"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),my=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/tokenization_auto.py#L597"}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16543/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Mh=new zNr({props:{$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),by=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L86"}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L100"}}),Gh=new zNr({props:{$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/processing_auto.py#L253"}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L719"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L726"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L741"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L748"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L755"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L764"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L798"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L805"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),e2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L791"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),r2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L773"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L780"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:A}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L814"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:A}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:A}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L853"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:A}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:A}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L860"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:A}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:A}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L883"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:A}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:A}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L867"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:A}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L874"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:A}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:A}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L892"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:A}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:A}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L899"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:A}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:A}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L846"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:A}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:A}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L821"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),av=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:A}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:A}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L828"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:A}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:A}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_auto.py#L837"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:A}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:A}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:A}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:A}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:A}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:A}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:A}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:A}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:A}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:A}}}),px=new ee({}),ux=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:A}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:A}}}),Ax=new ee({}),yx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:A}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:A}}}),kx=new ee({}),Sx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:A}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:A}}}),Ix=new ee({}),qx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),TM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:A}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:A}}}),Gx=new ee({}),Ox=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:A}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:A}}}),Qx=new ee({}),Wx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:A}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:A}}}),Yx=new ee({}),Kx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),e7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:A}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:A}}}),r7=new ee({}),t7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),n7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:A}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:A}}}),l7=new ee({}),i7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),c7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:A}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:A}}}),m7=new ee({}),g7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),p7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:A}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:A}}}),_7=new ee({}),b7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),F7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:A}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:A}}}),M7=new ee({}),E7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),w7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:A}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:A}}}),y7=new ee({}),L7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),$7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:A}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:A}}}),S7=new ee({}),R7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),P7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[c8t]},$$scope:{ctx:A}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[f8t]},$$scope:{ctx:A}}}),q7=new ee({}),N7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),D7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[m8t]},$$scope:{ctx:A}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[g8t]},$$scope:{ctx:A}}}),O7=new ee({}),V7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[h8t]},$$scope:{ctx:A}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:A}}}),W7=new ee({}),H7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),J7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[u8t]},$$scope:{ctx:A}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:A}}}),Z7=new ee({}),e9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),r9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[b8t]},$$scope:{ctx:A}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16543/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16543/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16543/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[v8t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),U0=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),yn=a("a"),J0=o("AutoConfig"),Ln=o(", "),xn=a("a"),Y0=o("AutoModel"),mi=o(`, and
`),$n=a("a"),K0=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),u$=o("will create a model that is an instance of "),hi=a("a"),_$=o("BertModel"),b$=o("."),Eo=l(),Ea=a("p"),v$=o("There is one class of "),pf=a("code"),F$=o("AutoModel"),aDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WPe=l(),pi=a("h2"),uf=a("a"),ree=a("span"),F(Z0.$$.fragment),nDe=l(),tee=a("span"),sDe=o("Extending the Auto Classes"),HPe=l(),kn=a("p"),lDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aee=a("code"),iDe=o("NewModel"),dDe=o(", make sure you have a "),nee=a("code"),cDe=o("NewModelConfig"),fDe=o(` then you can add those to the auto
classes like this:`),UPe=l(),F(ey.$$.fragment),JPe=l(),T$=a("p"),mDe=o("You will then be able to use the auto classes like you would usually do!"),YPe=l(),F(_f.$$.fragment),KPe=l(),ui=a("h2"),bf=a("a"),see=a("span"),F(oy.$$.fragment),gDe=l(),lee=a("span"),hDe=o("AutoConfig"),ZPe=l(),Co=a("div"),F(ry.$$.fragment),pDe=l(),ty=a("p"),uDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M$=a("a"),_De=o("from_pretrained()"),bDe=o(" class method."),vDe=l(),ay=a("p"),FDe=o("This class cannot be instantiated directly using "),iee=a("code"),TDe=o("__init__()"),MDe=o(" (throws an error)."),EDe=l(),Er=a("div"),F(ny.$$.fragment),CDe=l(),dee=a("p"),wDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ADe=l(),_i=a("p"),yDe=o("The configuration class to instantiate is selected based on the "),cee=a("code"),LDe=o("model_type"),xDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fee=a("code"),$De=o("pretrained_model_name_or_path"),kDe=o(":"),SDe=l(),y=a("ul"),vf=a("li"),mee=a("strong"),RDe=o("albert"),BDe=o(" \u2014 "),E$=a("a"),PDe=o("AlbertConfig"),IDe=o(" (ALBERT model)"),qDe=l(),Ff=a("li"),gee=a("strong"),NDe=o("bart"),jDe=o(" \u2014 "),C$=a("a"),DDe=o("BartConfig"),GDe=o(" (BART model)"),ODe=l(),Tf=a("li"),hee=a("strong"),VDe=o("beit"),XDe=o(" \u2014 "),w$=a("a"),zDe=o("BeitConfig"),QDe=o(" (BEiT model)"),WDe=l(),Mf=a("li"),pee=a("strong"),HDe=o("bert"),UDe=o(" \u2014 "),A$=a("a"),JDe=o("BertConfig"),YDe=o(" (BERT model)"),KDe=l(),Ef=a("li"),uee=a("strong"),ZDe=o("bert-generation"),eGe=o(" \u2014 "),y$=a("a"),oGe=o("BertGenerationConfig"),rGe=o(" (Bert Generation model)"),tGe=l(),Cf=a("li"),_ee=a("strong"),aGe=o("big_bird"),nGe=o(" \u2014 "),L$=a("a"),sGe=o("BigBirdConfig"),lGe=o(" (BigBird model)"),iGe=l(),wf=a("li"),bee=a("strong"),dGe=o("bigbird_pegasus"),cGe=o(" \u2014 "),x$=a("a"),fGe=o("BigBirdPegasusConfig"),mGe=o(" (BigBirdPegasus model)"),gGe=l(),Af=a("li"),vee=a("strong"),hGe=o("blenderbot"),pGe=o(" \u2014 "),$$=a("a"),uGe=o("BlenderbotConfig"),_Ge=o(" (Blenderbot model)"),bGe=l(),yf=a("li"),Fee=a("strong"),vGe=o("blenderbot-small"),FGe=o(" \u2014 "),k$=a("a"),TGe=o("BlenderbotSmallConfig"),MGe=o(" (BlenderbotSmall model)"),EGe=l(),Lf=a("li"),Tee=a("strong"),CGe=o("camembert"),wGe=o(" \u2014 "),S$=a("a"),AGe=o("CamembertConfig"),yGe=o(" (CamemBERT model)"),LGe=l(),xf=a("li"),Mee=a("strong"),xGe=o("canine"),$Ge=o(" \u2014 "),R$=a("a"),kGe=o("CanineConfig"),SGe=o(" (Canine model)"),RGe=l(),$f=a("li"),Eee=a("strong"),BGe=o("clip"),PGe=o(" \u2014 "),B$=a("a"),IGe=o("CLIPConfig"),qGe=o(" (CLIP model)"),NGe=l(),kf=a("li"),Cee=a("strong"),jGe=o("convbert"),DGe=o(" \u2014 "),P$=a("a"),GGe=o("ConvBertConfig"),OGe=o(" (ConvBERT model)"),VGe=l(),Sf=a("li"),wee=a("strong"),XGe=o("convnext"),zGe=o(" \u2014 "),I$=a("a"),QGe=o("ConvNextConfig"),WGe=o(" (ConvNext model)"),HGe=l(),Rf=a("li"),Aee=a("strong"),UGe=o("ctrl"),JGe=o(" \u2014 "),q$=a("a"),YGe=o("CTRLConfig"),KGe=o(" (CTRL model)"),ZGe=l(),Bf=a("li"),yee=a("strong"),eOe=o("data2vec-audio"),oOe=o(" \u2014 "),N$=a("a"),rOe=o("Data2VecAudioConfig"),tOe=o(" (Data2VecAudio model)"),aOe=l(),Pf=a("li"),Lee=a("strong"),nOe=o("data2vec-text"),sOe=o(" \u2014 "),j$=a("a"),lOe=o("Data2VecTextConfig"),iOe=o(" (Data2VecText model)"),dOe=l(),If=a("li"),xee=a("strong"),cOe=o("data2vec-vision"),fOe=o(" \u2014 "),D$=a("a"),mOe=o("Data2VecVisionConfig"),gOe=o(" (Data2VecVision model)"),hOe=l(),qf=a("li"),$ee=a("strong"),pOe=o("deberta"),uOe=o(" \u2014 "),G$=a("a"),_Oe=o("DebertaConfig"),bOe=o(" (DeBERTa model)"),vOe=l(),Nf=a("li"),kee=a("strong"),FOe=o("deberta-v2"),TOe=o(" \u2014 "),O$=a("a"),MOe=o("DebertaV2Config"),EOe=o(" (DeBERTa-v2 model)"),COe=l(),jf=a("li"),See=a("strong"),wOe=o("decision_transformer"),AOe=o(" \u2014 "),V$=a("a"),yOe=o("DecisionTransformerConfig"),LOe=o(" (Decision Transformer model)"),xOe=l(),Df=a("li"),Ree=a("strong"),$Oe=o("deit"),kOe=o(" \u2014 "),X$=a("a"),SOe=o("DeiTConfig"),ROe=o(" (DeiT model)"),BOe=l(),Gf=a("li"),Bee=a("strong"),POe=o("detr"),IOe=o(" \u2014 "),z$=a("a"),qOe=o("DetrConfig"),NOe=o(" (DETR model)"),jOe=l(),Of=a("li"),Pee=a("strong"),DOe=o("distilbert"),GOe=o(" \u2014 "),Q$=a("a"),OOe=o("DistilBertConfig"),VOe=o(" (DistilBERT model)"),XOe=l(),Vf=a("li"),Iee=a("strong"),zOe=o("dpr"),QOe=o(" \u2014 "),W$=a("a"),WOe=o("DPRConfig"),HOe=o(" (DPR model)"),UOe=l(),Xf=a("li"),qee=a("strong"),JOe=o("dpt"),YOe=o(" \u2014 "),H$=a("a"),KOe=o("DPTConfig"),ZOe=o(" (DPT model)"),eVe=l(),zf=a("li"),Nee=a("strong"),oVe=o("electra"),rVe=o(" \u2014 "),U$=a("a"),tVe=o("ElectraConfig"),aVe=o(" (ELECTRA model)"),nVe=l(),Qf=a("li"),jee=a("strong"),sVe=o("encoder-decoder"),lVe=o(" \u2014 "),J$=a("a"),iVe=o("EncoderDecoderConfig"),dVe=o(" (Encoder decoder model)"),cVe=l(),Wf=a("li"),Dee=a("strong"),fVe=o("flaubert"),mVe=o(" \u2014 "),Y$=a("a"),gVe=o("FlaubertConfig"),hVe=o(" (FlauBERT model)"),pVe=l(),Hf=a("li"),Gee=a("strong"),uVe=o("flava"),_Ve=o(" \u2014 "),K$=a("a"),bVe=o("FlavaConfig"),vVe=o(" (Flava model)"),FVe=l(),Uf=a("li"),Oee=a("strong"),TVe=o("fnet"),MVe=o(" \u2014 "),Z$=a("a"),EVe=o("FNetConfig"),CVe=o(" (FNet model)"),wVe=l(),Jf=a("li"),Vee=a("strong"),AVe=o("fsmt"),yVe=o(" \u2014 "),ek=a("a"),LVe=o("FSMTConfig"),xVe=o(" (FairSeq Machine-Translation model)"),$Ve=l(),Yf=a("li"),Xee=a("strong"),kVe=o("funnel"),SVe=o(" \u2014 "),ok=a("a"),RVe=o("FunnelConfig"),BVe=o(" (Funnel Transformer model)"),PVe=l(),Kf=a("li"),zee=a("strong"),IVe=o("glpn"),qVe=o(" \u2014 "),rk=a("a"),NVe=o("GLPNConfig"),jVe=o(" (GLPN model)"),DVe=l(),Zf=a("li"),Qee=a("strong"),GVe=o("gpt2"),OVe=o(" \u2014 "),tk=a("a"),VVe=o("GPT2Config"),XVe=o(" (OpenAI GPT-2 model)"),zVe=l(),em=a("li"),Wee=a("strong"),QVe=o("gpt_neo"),WVe=o(" \u2014 "),ak=a("a"),HVe=o("GPTNeoConfig"),UVe=o(" (GPT Neo model)"),JVe=l(),om=a("li"),Hee=a("strong"),YVe=o("gptj"),KVe=o(" \u2014 "),nk=a("a"),ZVe=o("GPTJConfig"),eXe=o(" (GPT-J model)"),oXe=l(),rm=a("li"),Uee=a("strong"),rXe=o("hubert"),tXe=o(" \u2014 "),sk=a("a"),aXe=o("HubertConfig"),nXe=o(" (Hubert model)"),sXe=l(),tm=a("li"),Jee=a("strong"),lXe=o("ibert"),iXe=o(" \u2014 "),lk=a("a"),dXe=o("IBertConfig"),cXe=o(" (I-BERT model)"),fXe=l(),am=a("li"),Yee=a("strong"),mXe=o("imagegpt"),gXe=o(" \u2014 "),ik=a("a"),hXe=o("ImageGPTConfig"),pXe=o(" (ImageGPT model)"),uXe=l(),nm=a("li"),Kee=a("strong"),_Xe=o("layoutlm"),bXe=o(" \u2014 "),dk=a("a"),vXe=o("LayoutLMConfig"),FXe=o(" (LayoutLM model)"),TXe=l(),sm=a("li"),Zee=a("strong"),MXe=o("layoutlmv2"),EXe=o(" \u2014 "),ck=a("a"),CXe=o("LayoutLMv2Config"),wXe=o(" (LayoutLMv2 model)"),AXe=l(),lm=a("li"),eoe=a("strong"),yXe=o("led"),LXe=o(" \u2014 "),fk=a("a"),xXe=o("LEDConfig"),$Xe=o(" (LED model)"),kXe=l(),im=a("li"),ooe=a("strong"),SXe=o("longformer"),RXe=o(" \u2014 "),mk=a("a"),BXe=o("LongformerConfig"),PXe=o(" (Longformer model)"),IXe=l(),dm=a("li"),roe=a("strong"),qXe=o("luke"),NXe=o(" \u2014 "),gk=a("a"),jXe=o("LukeConfig"),DXe=o(" (LUKE model)"),GXe=l(),cm=a("li"),toe=a("strong"),OXe=o("lxmert"),VXe=o(" \u2014 "),hk=a("a"),XXe=o("LxmertConfig"),zXe=o(" (LXMERT model)"),QXe=l(),fm=a("li"),aoe=a("strong"),WXe=o("m2m_100"),HXe=o(" \u2014 "),pk=a("a"),UXe=o("M2M100Config"),JXe=o(" (M2M100 model)"),YXe=l(),mm=a("li"),noe=a("strong"),KXe=o("marian"),ZXe=o(" \u2014 "),uk=a("a"),eze=o("MarianConfig"),oze=o(" (Marian model)"),rze=l(),gm=a("li"),soe=a("strong"),tze=o("maskformer"),aze=o(" \u2014 "),_k=a("a"),nze=o("MaskFormerConfig"),sze=o(" (MaskFormer model)"),lze=l(),hm=a("li"),loe=a("strong"),ize=o("mbart"),dze=o(" \u2014 "),bk=a("a"),cze=o("MBartConfig"),fze=o(" (mBART model)"),mze=l(),pm=a("li"),ioe=a("strong"),gze=o("megatron-bert"),hze=o(" \u2014 "),vk=a("a"),pze=o("MegatronBertConfig"),uze=o(" (MegatronBert model)"),_ze=l(),um=a("li"),doe=a("strong"),bze=o("mobilebert"),vze=o(" \u2014 "),Fk=a("a"),Fze=o("MobileBertConfig"),Tze=o(" (MobileBERT model)"),Mze=l(),_m=a("li"),coe=a("strong"),Eze=o("mpnet"),Cze=o(" \u2014 "),Tk=a("a"),wze=o("MPNetConfig"),Aze=o(" (MPNet model)"),yze=l(),bm=a("li"),foe=a("strong"),Lze=o("mt5"),xze=o(" \u2014 "),Mk=a("a"),$ze=o("MT5Config"),kze=o(" (mT5 model)"),Sze=l(),vm=a("li"),moe=a("strong"),Rze=o("nystromformer"),Bze=o(" \u2014 "),Ek=a("a"),Pze=o("NystromformerConfig"),Ize=o(" (Nystromformer model)"),qze=l(),Fm=a("li"),goe=a("strong"),Nze=o("openai-gpt"),jze=o(" \u2014 "),Ck=a("a"),Dze=o("OpenAIGPTConfig"),Gze=o(" (OpenAI GPT model)"),Oze=l(),Tm=a("li"),hoe=a("strong"),Vze=o("opt"),Xze=o(" \u2014 "),wk=a("a"),zze=o("OPTConfig"),Qze=o(" (OPT model)"),Wze=l(),Mm=a("li"),poe=a("strong"),Hze=o("pegasus"),Uze=o(" \u2014 "),Ak=a("a"),Jze=o("PegasusConfig"),Yze=o(" (Pegasus model)"),Kze=l(),Em=a("li"),uoe=a("strong"),Zze=o("perceiver"),eQe=o(" \u2014 "),yk=a("a"),oQe=o("PerceiverConfig"),rQe=o(" (Perceiver model)"),tQe=l(),Cm=a("li"),_oe=a("strong"),aQe=o("plbart"),nQe=o(" \u2014 "),Lk=a("a"),sQe=o("PLBartConfig"),lQe=o(" (PLBart model)"),iQe=l(),wm=a("li"),boe=a("strong"),dQe=o("poolformer"),cQe=o(" \u2014 "),xk=a("a"),fQe=o("PoolFormerConfig"),mQe=o(" (PoolFormer model)"),gQe=l(),Am=a("li"),voe=a("strong"),hQe=o("prophetnet"),pQe=o(" \u2014 "),$k=a("a"),uQe=o("ProphetNetConfig"),_Qe=o(" (ProphetNet model)"),bQe=l(),ym=a("li"),Foe=a("strong"),vQe=o("qdqbert"),FQe=o(" \u2014 "),kk=a("a"),TQe=o("QDQBertConfig"),MQe=o(" (QDQBert model)"),EQe=l(),Lm=a("li"),Toe=a("strong"),CQe=o("rag"),wQe=o(" \u2014 "),Sk=a("a"),AQe=o("RagConfig"),yQe=o(" (RAG model)"),LQe=l(),xm=a("li"),Moe=a("strong"),xQe=o("realm"),$Qe=o(" \u2014 "),Rk=a("a"),kQe=o("RealmConfig"),SQe=o(" (Realm model)"),RQe=l(),$m=a("li"),Eoe=a("strong"),BQe=o("reformer"),PQe=o(" \u2014 "),Bk=a("a"),IQe=o("ReformerConfig"),qQe=o(" (Reformer model)"),NQe=l(),km=a("li"),Coe=a("strong"),jQe=o("regnet"),DQe=o(" \u2014 "),Pk=a("a"),GQe=o("RegNetConfig"),OQe=o(" (RegNet model)"),VQe=l(),Sm=a("li"),woe=a("strong"),XQe=o("rembert"),zQe=o(" \u2014 "),Ik=a("a"),QQe=o("RemBertConfig"),WQe=o(" (RemBERT model)"),HQe=l(),Rm=a("li"),Aoe=a("strong"),UQe=o("resnet"),JQe=o(" \u2014 "),qk=a("a"),YQe=o("ResNetConfig"),KQe=o(" (ResNet model)"),ZQe=l(),Bm=a("li"),yoe=a("strong"),eWe=o("retribert"),oWe=o(" \u2014 "),Nk=a("a"),rWe=o("RetriBertConfig"),tWe=o(" (RetriBERT model)"),aWe=l(),Pm=a("li"),Loe=a("strong"),nWe=o("roberta"),sWe=o(" \u2014 "),jk=a("a"),lWe=o("RobertaConfig"),iWe=o(" (RoBERTa model)"),dWe=l(),Im=a("li"),xoe=a("strong"),cWe=o("roformer"),fWe=o(" \u2014 "),Dk=a("a"),mWe=o("RoFormerConfig"),gWe=o(" (RoFormer model)"),hWe=l(),qm=a("li"),$oe=a("strong"),pWe=o("segformer"),uWe=o(" \u2014 "),Gk=a("a"),_We=o("SegformerConfig"),bWe=o(" (SegFormer model)"),vWe=l(),Nm=a("li"),koe=a("strong"),FWe=o("sew"),TWe=o(" \u2014 "),Ok=a("a"),MWe=o("SEWConfig"),EWe=o(" (SEW model)"),CWe=l(),jm=a("li"),Soe=a("strong"),wWe=o("sew-d"),AWe=o(" \u2014 "),Vk=a("a"),yWe=o("SEWDConfig"),LWe=o(" (SEW-D model)"),xWe=l(),Dm=a("li"),Roe=a("strong"),$We=o("speech-encoder-decoder"),kWe=o(" \u2014 "),Xk=a("a"),SWe=o("SpeechEncoderDecoderConfig"),RWe=o(" (Speech Encoder decoder model)"),BWe=l(),Gm=a("li"),Boe=a("strong"),PWe=o("speech_to_text"),IWe=o(" \u2014 "),zk=a("a"),qWe=o("Speech2TextConfig"),NWe=o(" (Speech2Text model)"),jWe=l(),Om=a("li"),Poe=a("strong"),DWe=o("speech_to_text_2"),GWe=o(" \u2014 "),Qk=a("a"),OWe=o("Speech2Text2Config"),VWe=o(" (Speech2Text2 model)"),XWe=l(),Vm=a("li"),Ioe=a("strong"),zWe=o("splinter"),QWe=o(" \u2014 "),Wk=a("a"),WWe=o("SplinterConfig"),HWe=o(" (Splinter model)"),UWe=l(),Xm=a("li"),qoe=a("strong"),JWe=o("squeezebert"),YWe=o(" \u2014 "),Hk=a("a"),KWe=o("SqueezeBertConfig"),ZWe=o(" (SqueezeBERT model)"),eHe=l(),zm=a("li"),Noe=a("strong"),oHe=o("swin"),rHe=o(" \u2014 "),Uk=a("a"),tHe=o("SwinConfig"),aHe=o(" (Swin model)"),nHe=l(),Qm=a("li"),joe=a("strong"),sHe=o("t5"),lHe=o(" \u2014 "),Jk=a("a"),iHe=o("T5Config"),dHe=o(" (T5 model)"),cHe=l(),Wm=a("li"),Doe=a("strong"),fHe=o("tapas"),mHe=o(" \u2014 "),Yk=a("a"),gHe=o("TapasConfig"),hHe=o(" (TAPAS model)"),pHe=l(),Hm=a("li"),Goe=a("strong"),uHe=o("transfo-xl"),_He=o(" \u2014 "),Kk=a("a"),bHe=o("TransfoXLConfig"),vHe=o(" (Transformer-XL model)"),FHe=l(),Um=a("li"),Ooe=a("strong"),THe=o("trocr"),MHe=o(" \u2014 "),Zk=a("a"),EHe=o("TrOCRConfig"),CHe=o(" (TrOCR model)"),wHe=l(),Jm=a("li"),Voe=a("strong"),AHe=o("unispeech"),yHe=o(" \u2014 "),eS=a("a"),LHe=o("UniSpeechConfig"),xHe=o(" (UniSpeech model)"),$He=l(),Ym=a("li"),Xoe=a("strong"),kHe=o("unispeech-sat"),SHe=o(" \u2014 "),oS=a("a"),RHe=o("UniSpeechSatConfig"),BHe=o(" (UniSpeechSat model)"),PHe=l(),Km=a("li"),zoe=a("strong"),IHe=o("van"),qHe=o(" \u2014 "),rS=a("a"),NHe=o("VanConfig"),jHe=o(" (VAN model)"),DHe=l(),Zm=a("li"),Qoe=a("strong"),GHe=o("vilt"),OHe=o(" \u2014 "),tS=a("a"),VHe=o("ViltConfig"),XHe=o(" (ViLT model)"),zHe=l(),eg=a("li"),Woe=a("strong"),QHe=o("vision-encoder-decoder"),WHe=o(" \u2014 "),aS=a("a"),HHe=o("VisionEncoderDecoderConfig"),UHe=o(" (Vision Encoder decoder model)"),JHe=l(),og=a("li"),Hoe=a("strong"),YHe=o("vision-text-dual-encoder"),KHe=o(" \u2014 "),nS=a("a"),ZHe=o("VisionTextDualEncoderConfig"),eUe=o(" (VisionTextDualEncoder model)"),oUe=l(),rg=a("li"),Uoe=a("strong"),rUe=o("visual_bert"),tUe=o(" \u2014 "),sS=a("a"),aUe=o("VisualBertConfig"),nUe=o(" (VisualBert model)"),sUe=l(),tg=a("li"),Joe=a("strong"),lUe=o("vit"),iUe=o(" \u2014 "),lS=a("a"),dUe=o("ViTConfig"),cUe=o(" (ViT model)"),fUe=l(),ag=a("li"),Yoe=a("strong"),mUe=o("vit_mae"),gUe=o(" \u2014 "),iS=a("a"),hUe=o("ViTMAEConfig"),pUe=o(" (ViTMAE model)"),uUe=l(),ng=a("li"),Koe=a("strong"),_Ue=o("wav2vec2"),bUe=o(" \u2014 "),dS=a("a"),vUe=o("Wav2Vec2Config"),FUe=o(" (Wav2Vec2 model)"),TUe=l(),sg=a("li"),Zoe=a("strong"),MUe=o("wavlm"),EUe=o(" \u2014 "),cS=a("a"),CUe=o("WavLMConfig"),wUe=o(" (WavLM model)"),AUe=l(),lg=a("li"),ere=a("strong"),yUe=o("xglm"),LUe=o(" \u2014 "),fS=a("a"),xUe=o("XGLMConfig"),$Ue=o(" (XGLM model)"),kUe=l(),ig=a("li"),ore=a("strong"),SUe=o("xlm"),RUe=o(" \u2014 "),mS=a("a"),BUe=o("XLMConfig"),PUe=o(" (XLM model)"),IUe=l(),dg=a("li"),rre=a("strong"),qUe=o("xlm-prophetnet"),NUe=o(" \u2014 "),gS=a("a"),jUe=o("XLMProphetNetConfig"),DUe=o(" (XLMProphetNet model)"),GUe=l(),cg=a("li"),tre=a("strong"),OUe=o("xlm-roberta"),VUe=o(" \u2014 "),hS=a("a"),XUe=o("XLMRobertaConfig"),zUe=o(" (XLM-RoBERTa model)"),QUe=l(),fg=a("li"),are=a("strong"),WUe=o("xlm-roberta-xl"),HUe=o(" \u2014 "),pS=a("a"),UUe=o("XLMRobertaXLConfig"),JUe=o(" (XLM-RoBERTa-XL model)"),YUe=l(),mg=a("li"),nre=a("strong"),KUe=o("xlnet"),ZUe=o(" \u2014 "),uS=a("a"),eJe=o("XLNetConfig"),oJe=o(" (XLNet model)"),rJe=l(),gg=a("li"),sre=a("strong"),tJe=o("yolos"),aJe=o(" \u2014 "),_S=a("a"),nJe=o("YolosConfig"),sJe=o(" (YOLOS model)"),lJe=l(),hg=a("li"),lre=a("strong"),iJe=o("yoso"),dJe=o(" \u2014 "),bS=a("a"),cJe=o("YosoConfig"),fJe=o(" (YOSO model)"),mJe=l(),F(pg.$$.fragment),gJe=l(),ug=a("div"),F(sy.$$.fragment),hJe=l(),ire=a("p"),pJe=o("Register a new configuration for this class."),eIe=l(),bi=a("h2"),_g=a("a"),dre=a("span"),F(ly.$$.fragment),uJe=l(),cre=a("span"),_Je=o("AutoTokenizer"),oIe=l(),wo=a("div"),F(iy.$$.fragment),bJe=l(),dy=a("p"),vJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vS=a("a"),FJe=o("AutoTokenizer.from_pretrained()"),TJe=o(" class method."),MJe=l(),cy=a("p"),EJe=o("This class cannot be instantiated directly using "),fre=a("code"),CJe=o("__init__()"),wJe=o(" (throws an error)."),AJe=l(),Cr=a("div"),F(fy.$$.fragment),yJe=l(),mre=a("p"),LJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xJe=l(),Ca=a("p"),$Je=o("The tokenizer class to instantiate is selected based on the "),gre=a("code"),kJe=o("model_type"),SJe=o(` property of the config object (either
passed as an argument or loaded from `),hre=a("code"),RJe=o("pretrained_model_name_or_path"),BJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=a("code"),PJe=o("pretrained_model_name_or_path"),IJe=o(":"),qJe=l(),k=a("ul"),Sn=a("li"),ure=a("strong"),NJe=o("albert"),jJe=o(" \u2014 "),FS=a("a"),DJe=o("AlbertTokenizer"),GJe=o(" or "),TS=a("a"),OJe=o("AlbertTokenizerFast"),VJe=o(" (ALBERT model)"),XJe=l(),Rn=a("li"),_re=a("strong"),zJe=o("bart"),QJe=o(" \u2014 "),MS=a("a"),WJe=o("BartTokenizer"),HJe=o(" or "),ES=a("a"),UJe=o("BartTokenizerFast"),JJe=o(" (BART model)"),YJe=l(),Bn=a("li"),bre=a("strong"),KJe=o("barthez"),ZJe=o(" \u2014 "),CS=a("a"),eYe=o("BarthezTokenizer"),oYe=o(" or "),wS=a("a"),rYe=o("BarthezTokenizerFast"),tYe=o(" (BARThez model)"),aYe=l(),bg=a("li"),vre=a("strong"),nYe=o("bartpho"),sYe=o(" \u2014 "),AS=a("a"),lYe=o("BartphoTokenizer"),iYe=o(" (BARTpho model)"),dYe=l(),Pn=a("li"),Fre=a("strong"),cYe=o("bert"),fYe=o(" \u2014 "),yS=a("a"),mYe=o("BertTokenizer"),gYe=o(" or "),LS=a("a"),hYe=o("BertTokenizerFast"),pYe=o(" (BERT model)"),uYe=l(),vg=a("li"),Tre=a("strong"),_Ye=o("bert-generation"),bYe=o(" \u2014 "),xS=a("a"),vYe=o("BertGenerationTokenizer"),FYe=o(" (Bert Generation model)"),TYe=l(),Fg=a("li"),Mre=a("strong"),MYe=o("bert-japanese"),EYe=o(" \u2014 "),$S=a("a"),CYe=o("BertJapaneseTokenizer"),wYe=o(" (BertJapanese model)"),AYe=l(),Tg=a("li"),Ere=a("strong"),yYe=o("bertweet"),LYe=o(" \u2014 "),kS=a("a"),xYe=o("BertweetTokenizer"),$Ye=o(" (Bertweet model)"),kYe=l(),In=a("li"),Cre=a("strong"),SYe=o("big_bird"),RYe=o(" \u2014 "),SS=a("a"),BYe=o("BigBirdTokenizer"),PYe=o(" or "),RS=a("a"),IYe=o("BigBirdTokenizerFast"),qYe=o(" (BigBird model)"),NYe=l(),qn=a("li"),wre=a("strong"),jYe=o("bigbird_pegasus"),DYe=o(" \u2014 "),BS=a("a"),GYe=o("PegasusTokenizer"),OYe=o(" or "),PS=a("a"),VYe=o("PegasusTokenizerFast"),XYe=o(" (BigBirdPegasus model)"),zYe=l(),Nn=a("li"),Are=a("strong"),QYe=o("blenderbot"),WYe=o(" \u2014 "),IS=a("a"),HYe=o("BlenderbotTokenizer"),UYe=o(" or "),qS=a("a"),JYe=o("BlenderbotTokenizerFast"),YYe=o(" (Blenderbot model)"),KYe=l(),Mg=a("li"),yre=a("strong"),ZYe=o("blenderbot-small"),eKe=o(" \u2014 "),NS=a("a"),oKe=o("BlenderbotSmallTokenizer"),rKe=o(" (BlenderbotSmall model)"),tKe=l(),Eg=a("li"),Lre=a("strong"),aKe=o("byt5"),nKe=o(" \u2014 "),jS=a("a"),sKe=o("ByT5Tokenizer"),lKe=o(" (ByT5 model)"),iKe=l(),jn=a("li"),xre=a("strong"),dKe=o("camembert"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("CamembertTokenizer"),mKe=o(" or "),GS=a("a"),gKe=o("CamembertTokenizerFast"),hKe=o(" (CamemBERT model)"),pKe=l(),Cg=a("li"),$re=a("strong"),uKe=o("canine"),_Ke=o(" \u2014 "),OS=a("a"),bKe=o("CanineTokenizer"),vKe=o(" (Canine model)"),FKe=l(),Dn=a("li"),kre=a("strong"),TKe=o("clip"),MKe=o(" \u2014 "),VS=a("a"),EKe=o("CLIPTokenizer"),CKe=o(" or "),XS=a("a"),wKe=o("CLIPTokenizerFast"),AKe=o(" (CLIP model)"),yKe=l(),Gn=a("li"),Sre=a("strong"),LKe=o("convbert"),xKe=o(" \u2014 "),zS=a("a"),$Ke=o("ConvBertTokenizer"),kKe=o(" or "),QS=a("a"),SKe=o("ConvBertTokenizerFast"),RKe=o(" (ConvBERT model)"),BKe=l(),On=a("li"),Rre=a("strong"),PKe=o("cpm"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("CpmTokenizer"),NKe=o(" or "),HS=a("a"),jKe=o("CpmTokenizerFast"),DKe=o(" (CPM model)"),GKe=l(),wg=a("li"),Bre=a("strong"),OKe=o("ctrl"),VKe=o(" \u2014 "),US=a("a"),XKe=o("CTRLTokenizer"),zKe=o(" (CTRL model)"),QKe=l(),Vn=a("li"),Pre=a("strong"),WKe=o("data2vec-text"),HKe=o(" \u2014 "),JS=a("a"),UKe=o("RobertaTokenizer"),JKe=o(" or "),YS=a("a"),YKe=o("RobertaTokenizerFast"),KKe=o(" (Data2VecText model)"),ZKe=l(),Xn=a("li"),Ire=a("strong"),eZe=o("deberta"),oZe=o(" \u2014 "),KS=a("a"),rZe=o("DebertaTokenizer"),tZe=o(" or "),ZS=a("a"),aZe=o("DebertaTokenizerFast"),nZe=o(" (DeBERTa model)"),sZe=l(),zn=a("li"),qre=a("strong"),lZe=o("deberta-v2"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("DebertaV2Tokenizer"),cZe=o(" or "),oR=a("a"),fZe=o("DebertaV2TokenizerFast"),mZe=o(" (DeBERTa-v2 model)"),gZe=l(),Qn=a("li"),Nre=a("strong"),hZe=o("distilbert"),pZe=o(" \u2014 "),rR=a("a"),uZe=o("DistilBertTokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("DistilBertTokenizerFast"),vZe=o(" (DistilBERT model)"),FZe=l(),Wn=a("li"),jre=a("strong"),TZe=o("dpr"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("DPRQuestionEncoderTokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("DPRQuestionEncoderTokenizerFast"),AZe=o(" (DPR model)"),yZe=l(),Hn=a("li"),Dre=a("strong"),LZe=o("electra"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("ElectraTokenizer"),kZe=o(" or "),lR=a("a"),SZe=o("ElectraTokenizerFast"),RZe=o(" (ELECTRA model)"),BZe=l(),Ag=a("li"),Gre=a("strong"),PZe=o("flaubert"),IZe=o(" \u2014 "),iR=a("a"),qZe=o("FlaubertTokenizer"),NZe=o(" (FlauBERT model)"),jZe=l(),Un=a("li"),Ore=a("strong"),DZe=o("fnet"),GZe=o(" \u2014 "),dR=a("a"),OZe=o("FNetTokenizer"),VZe=o(" or "),cR=a("a"),XZe=o("FNetTokenizerFast"),zZe=o(" (FNet model)"),QZe=l(),yg=a("li"),Vre=a("strong"),WZe=o("fsmt"),HZe=o(" \u2014 "),fR=a("a"),UZe=o("FSMTTokenizer"),JZe=o(" (FairSeq Machine-Translation model)"),YZe=l(),Jn=a("li"),Xre=a("strong"),KZe=o("funnel"),ZZe=o(" \u2014 "),mR=a("a"),eeo=o("FunnelTokenizer"),oeo=o(" or "),gR=a("a"),reo=o("FunnelTokenizerFast"),teo=o(" (Funnel Transformer model)"),aeo=l(),Yn=a("li"),zre=a("strong"),neo=o("gpt2"),seo=o(" \u2014 "),hR=a("a"),leo=o("GPT2Tokenizer"),ieo=o(" or "),pR=a("a"),deo=o("GPT2TokenizerFast"),ceo=o(" (OpenAI GPT-2 model)"),feo=l(),Kn=a("li"),Qre=a("strong"),meo=o("gpt_neo"),geo=o(" \u2014 "),uR=a("a"),heo=o("GPT2Tokenizer"),peo=o(" or "),_R=a("a"),ueo=o("GPT2TokenizerFast"),_eo=o(" (GPT Neo model)"),beo=l(),Zn=a("li"),Wre=a("strong"),veo=o("gptj"),Feo=o(" \u2014 "),bR=a("a"),Teo=o("GPT2Tokenizer"),Meo=o(" or "),vR=a("a"),Eeo=o("GPT2TokenizerFast"),Ceo=o(" (GPT-J model)"),weo=l(),es=a("li"),Hre=a("strong"),Aeo=o("herbert"),yeo=o(" \u2014 "),FR=a("a"),Leo=o("HerbertTokenizer"),xeo=o(" or "),TR=a("a"),$eo=o("HerbertTokenizerFast"),keo=o(" (HerBERT model)"),Seo=l(),Lg=a("li"),Ure=a("strong"),Reo=o("hubert"),Beo=o(" \u2014 "),MR=a("a"),Peo=o("Wav2Vec2CTCTokenizer"),Ieo=o(" (Hubert model)"),qeo=l(),os=a("li"),Jre=a("strong"),Neo=o("ibert"),jeo=o(" \u2014 "),ER=a("a"),Deo=o("RobertaTokenizer"),Geo=o(" or "),CR=a("a"),Oeo=o("RobertaTokenizerFast"),Veo=o(" (I-BERT model)"),Xeo=l(),rs=a("li"),Yre=a("strong"),zeo=o("layoutlm"),Qeo=o(" \u2014 "),wR=a("a"),Weo=o("LayoutLMTokenizer"),Heo=o(" or "),AR=a("a"),Ueo=o("LayoutLMTokenizerFast"),Jeo=o(" (LayoutLM model)"),Yeo=l(),ts=a("li"),Kre=a("strong"),Keo=o("layoutlmv2"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("LayoutLMv2Tokenizer"),ooo=o(" or "),LR=a("a"),roo=o("LayoutLMv2TokenizerFast"),too=o(" (LayoutLMv2 model)"),aoo=l(),as=a("li"),Zre=a("strong"),noo=o("layoutxlm"),soo=o(" \u2014 "),xR=a("a"),loo=o("LayoutXLMTokenizer"),ioo=o(" or "),$R=a("a"),doo=o("LayoutXLMTokenizerFast"),coo=o(" (LayoutXLM model)"),foo=l(),ns=a("li"),ete=a("strong"),moo=o("led"),goo=o(" \u2014 "),kR=a("a"),hoo=o("LEDTokenizer"),poo=o(" or "),SR=a("a"),uoo=o("LEDTokenizerFast"),_oo=o(" (LED model)"),boo=l(),ss=a("li"),ote=a("strong"),voo=o("longformer"),Foo=o(" \u2014 "),RR=a("a"),Too=o("LongformerTokenizer"),Moo=o(" or "),BR=a("a"),Eoo=o("LongformerTokenizerFast"),Coo=o(" (Longformer model)"),woo=l(),xg=a("li"),rte=a("strong"),Aoo=o("luke"),yoo=o(" \u2014 "),PR=a("a"),Loo=o("LukeTokenizer"),xoo=o(" (LUKE model)"),$oo=l(),ls=a("li"),tte=a("strong"),koo=o("lxmert"),Soo=o(" \u2014 "),IR=a("a"),Roo=o("LxmertTokenizer"),Boo=o(" or "),qR=a("a"),Poo=o("LxmertTokenizerFast"),Ioo=o(" (LXMERT model)"),qoo=l(),$g=a("li"),ate=a("strong"),Noo=o("m2m_100"),joo=o(" \u2014 "),NR=a("a"),Doo=o("M2M100Tokenizer"),Goo=o(" (M2M100 model)"),Ooo=l(),kg=a("li"),nte=a("strong"),Voo=o("marian"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("MarianTokenizer"),Qoo=o(" (Marian model)"),Woo=l(),is=a("li"),ste=a("strong"),Hoo=o("mbart"),Uoo=o(" \u2014 "),DR=a("a"),Joo=o("MBartTokenizer"),Yoo=o(" or "),GR=a("a"),Koo=o("MBartTokenizerFast"),Zoo=o(" (mBART model)"),ero=l(),ds=a("li"),lte=a("strong"),oro=o("mbart50"),rro=o(" \u2014 "),OR=a("a"),tro=o("MBart50Tokenizer"),aro=o(" or "),VR=a("a"),nro=o("MBart50TokenizerFast"),sro=o(" (mBART-50 model)"),lro=l(),cs=a("li"),ite=a("strong"),iro=o("megatron-bert"),dro=o(" \u2014 "),XR=a("a"),cro=o("BertTokenizer"),fro=o(" or "),zR=a("a"),mro=o("BertTokenizerFast"),gro=o(" (MegatronBert model)"),hro=l(),Sg=a("li"),dte=a("strong"),pro=o("mluke"),uro=o(" \u2014 "),QR=a("a"),_ro=o("MLukeTokenizer"),bro=o(" (mLUKE model)"),vro=l(),fs=a("li"),cte=a("strong"),Fro=o("mobilebert"),Tro=o(" \u2014 "),WR=a("a"),Mro=o("MobileBertTokenizer"),Ero=o(" or "),HR=a("a"),Cro=o("MobileBertTokenizerFast"),wro=o(" (MobileBERT model)"),Aro=l(),ms=a("li"),fte=a("strong"),yro=o("mpnet"),Lro=o(" \u2014 "),UR=a("a"),xro=o("MPNetTokenizer"),$ro=o(" or "),JR=a("a"),kro=o("MPNetTokenizerFast"),Sro=o(" (MPNet model)"),Rro=l(),gs=a("li"),mte=a("strong"),Bro=o("mt5"),Pro=o(" \u2014 "),YR=a("a"),Iro=o("MT5Tokenizer"),qro=o(" or "),KR=a("a"),Nro=o("MT5TokenizerFast"),jro=o(" (mT5 model)"),Dro=l(),hs=a("li"),gte=a("strong"),Gro=o("nystromformer"),Oro=o(" \u2014 "),ZR=a("a"),Vro=o("AlbertTokenizer"),Xro=o(" or "),eB=a("a"),zro=o("AlbertTokenizerFast"),Qro=o(" (Nystromformer model)"),Wro=l(),ps=a("li"),hte=a("strong"),Hro=o("openai-gpt"),Uro=o(" \u2014 "),oB=a("a"),Jro=o("OpenAIGPTTokenizer"),Yro=o(" or "),rB=a("a"),Kro=o("OpenAIGPTTokenizerFast"),Zro=o(" (OpenAI GPT model)"),eto=l(),Rg=a("li"),pte=a("strong"),oto=o("opt"),rto=o(" \u2014 "),tB=a("a"),tto=o("GPT2Tokenizer"),ato=o(" (OPT model)"),nto=l(),us=a("li"),ute=a("strong"),sto=o("pegasus"),lto=o(" \u2014 "),aB=a("a"),ito=o("PegasusTokenizer"),dto=o(" or "),nB=a("a"),cto=o("PegasusTokenizerFast"),fto=o(" (Pegasus model)"),mto=l(),Bg=a("li"),_te=a("strong"),gto=o("perceiver"),hto=o(" \u2014 "),sB=a("a"),pto=o("PerceiverTokenizer"),uto=o(" (Perceiver model)"),_to=l(),Pg=a("li"),bte=a("strong"),bto=o("phobert"),vto=o(" \u2014 "),lB=a("a"),Fto=o("PhobertTokenizer"),Tto=o(" (PhoBERT model)"),Mto=l(),Ig=a("li"),vte=a("strong"),Eto=o("plbart"),Cto=o(" \u2014 "),iB=a("a"),wto=o("PLBartTokenizer"),Ato=o(" (PLBart model)"),yto=l(),qg=a("li"),Fte=a("strong"),Lto=o("prophetnet"),xto=o(" \u2014 "),dB=a("a"),$to=o("ProphetNetTokenizer"),kto=o(" (ProphetNet model)"),Sto=l(),_s=a("li"),Tte=a("strong"),Rto=o("qdqbert"),Bto=o(" \u2014 "),cB=a("a"),Pto=o("BertTokenizer"),Ito=o(" or "),fB=a("a"),qto=o("BertTokenizerFast"),Nto=o(" (QDQBert model)"),jto=l(),Ng=a("li"),Mte=a("strong"),Dto=o("rag"),Gto=o(" \u2014 "),mB=a("a"),Oto=o("RagTokenizer"),Vto=o(" (RAG model)"),Xto=l(),bs=a("li"),Ete=a("strong"),zto=o("realm"),Qto=o(" \u2014 "),gB=a("a"),Wto=o("RealmTokenizer"),Hto=o(" or "),hB=a("a"),Uto=o("RealmTokenizerFast"),Jto=o(" (Realm model)"),Yto=l(),vs=a("li"),Cte=a("strong"),Kto=o("reformer"),Zto=o(" \u2014 "),pB=a("a"),eao=o("ReformerTokenizer"),oao=o(" or "),uB=a("a"),rao=o("ReformerTokenizerFast"),tao=o(" (Reformer model)"),aao=l(),Fs=a("li"),wte=a("strong"),nao=o("rembert"),sao=o(" \u2014 "),_B=a("a"),lao=o("RemBertTokenizer"),iao=o(" or "),bB=a("a"),dao=o("RemBertTokenizerFast"),cao=o(" (RemBERT model)"),fao=l(),Ts=a("li"),Ate=a("strong"),mao=o("retribert"),gao=o(" \u2014 "),vB=a("a"),hao=o("RetriBertTokenizer"),pao=o(" or "),FB=a("a"),uao=o("RetriBertTokenizerFast"),_ao=o(" (RetriBERT model)"),bao=l(),Ms=a("li"),yte=a("strong"),vao=o("roberta"),Fao=o(" \u2014 "),TB=a("a"),Tao=o("RobertaTokenizer"),Mao=o(" or "),MB=a("a"),Eao=o("RobertaTokenizerFast"),Cao=o(" (RoBERTa model)"),wao=l(),Es=a("li"),Lte=a("strong"),Aao=o("roformer"),yao=o(" \u2014 "),EB=a("a"),Lao=o("RoFormerTokenizer"),xao=o(" or "),CB=a("a"),$ao=o("RoFormerTokenizerFast"),kao=o(" (RoFormer model)"),Sao=l(),jg=a("li"),xte=a("strong"),Rao=o("speech_to_text"),Bao=o(" \u2014 "),wB=a("a"),Pao=o("Speech2TextTokenizer"),Iao=o(" (Speech2Text model)"),qao=l(),Dg=a("li"),$te=a("strong"),Nao=o("speech_to_text_2"),jao=o(" \u2014 "),AB=a("a"),Dao=o("Speech2Text2Tokenizer"),Gao=o(" (Speech2Text2 model)"),Oao=l(),Cs=a("li"),kte=a("strong"),Vao=o("splinter"),Xao=o(" \u2014 "),yB=a("a"),zao=o("SplinterTokenizer"),Qao=o(" or "),LB=a("a"),Wao=o("SplinterTokenizerFast"),Hao=o(" (Splinter model)"),Uao=l(),ws=a("li"),Ste=a("strong"),Jao=o("squeezebert"),Yao=o(" \u2014 "),xB=a("a"),Kao=o("SqueezeBertTokenizer"),Zao=o(" or "),$B=a("a"),eno=o("SqueezeBertTokenizerFast"),ono=o(" (SqueezeBERT model)"),rno=l(),As=a("li"),Rte=a("strong"),tno=o("t5"),ano=o(" \u2014 "),kB=a("a"),nno=o("T5Tokenizer"),sno=o(" or "),SB=a("a"),lno=o("T5TokenizerFast"),ino=o(" (T5 model)"),dno=l(),Gg=a("li"),Bte=a("strong"),cno=o("tapas"),fno=o(" \u2014 "),RB=a("a"),mno=o("TapasTokenizer"),gno=o(" (TAPAS model)"),hno=l(),Og=a("li"),Pte=a("strong"),pno=o("tapex"),uno=o(" \u2014 "),BB=a("a"),_no=o("TapexTokenizer"),bno=o(" (TAPEX model)"),vno=l(),Vg=a("li"),Ite=a("strong"),Fno=o("transfo-xl"),Tno=o(" \u2014 "),PB=a("a"),Mno=o("TransfoXLTokenizer"),Eno=o(" (Transformer-XL model)"),Cno=l(),ys=a("li"),qte=a("strong"),wno=o("visual_bert"),Ano=o(" \u2014 "),IB=a("a"),yno=o("BertTokenizer"),Lno=o(" or "),qB=a("a"),xno=o("BertTokenizerFast"),$no=o(" (VisualBert model)"),kno=l(),Xg=a("li"),Nte=a("strong"),Sno=o("wav2vec2"),Rno=o(" \u2014 "),NB=a("a"),Bno=o("Wav2Vec2CTCTokenizer"),Pno=o(" (Wav2Vec2 model)"),Ino=l(),zg=a("li"),jte=a("strong"),qno=o("wav2vec2_phoneme"),Nno=o(" \u2014 "),jB=a("a"),jno=o("Wav2Vec2PhonemeCTCTokenizer"),Dno=o(" (Wav2Vec2Phoneme model)"),Gno=l(),Ls=a("li"),Dte=a("strong"),Ono=o("xglm"),Vno=o(" \u2014 "),DB=a("a"),Xno=o("XGLMTokenizer"),zno=o(" or "),GB=a("a"),Qno=o("XGLMTokenizerFast"),Wno=o(" (XGLM model)"),Hno=l(),Qg=a("li"),Gte=a("strong"),Uno=o("xlm"),Jno=o(" \u2014 "),OB=a("a"),Yno=o("XLMTokenizer"),Kno=o(" (XLM model)"),Zno=l(),Wg=a("li"),Ote=a("strong"),eso=o("xlm-prophetnet"),oso=o(" \u2014 "),VB=a("a"),rso=o("XLMProphetNetTokenizer"),tso=o(" (XLMProphetNet model)"),aso=l(),xs=a("li"),Vte=a("strong"),nso=o("xlm-roberta"),sso=o(" \u2014 "),XB=a("a"),lso=o("XLMRobertaTokenizer"),iso=o(" or "),zB=a("a"),dso=o("XLMRobertaTokenizerFast"),cso=o(" (XLM-RoBERTa model)"),fso=l(),$s=a("li"),Xte=a("strong"),mso=o("xlm-roberta-xl"),gso=o(" \u2014 "),QB=a("a"),hso=o("RobertaTokenizer"),pso=o(" or "),WB=a("a"),uso=o("RobertaTokenizerFast"),_so=o(" (XLM-RoBERTa-XL model)"),bso=l(),ks=a("li"),zte=a("strong"),vso=o("xlnet"),Fso=o(" \u2014 "),HB=a("a"),Tso=o("XLNetTokenizer"),Mso=o(" or "),UB=a("a"),Eso=o("XLNetTokenizerFast"),Cso=o(" (XLNet model)"),wso=l(),Ss=a("li"),Qte=a("strong"),Aso=o("yoso"),yso=o(" \u2014 "),JB=a("a"),Lso=o("AlbertTokenizer"),xso=o(" or "),YB=a("a"),$so=o("AlbertTokenizerFast"),kso=o(" (YOSO model)"),Sso=l(),F(Hg.$$.fragment),Rso=l(),Ug=a("div"),F(my.$$.fragment),Bso=l(),Wte=a("p"),Pso=o("Register a new tokenizer in this mapping."),rIe=l(),vi=a("h2"),Jg=a("a"),Hte=a("span"),F(gy.$$.fragment),Iso=l(),Ute=a("span"),qso=o("AutoFeatureExtractor"),tIe=l(),Ao=a("div"),F(hy.$$.fragment),Nso=l(),py=a("p"),jso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KB=a("a"),Dso=o("AutoFeatureExtractor.from_pretrained()"),Gso=o(" class method."),Oso=l(),uy=a("p"),Vso=o("This class cannot be instantiated directly using "),Jte=a("code"),Xso=o("__init__()"),zso=o(" (throws an error)."),Qso=l(),Qe=a("div"),F(_y.$$.fragment),Wso=l(),Yte=a("p"),Hso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uso=l(),wa=a("p"),Jso=o("The feature extractor class to instantiate is selected based on the "),Kte=a("code"),Yso=o("model_type"),Kso=o(` property of the config object
(either passed as an argument or loaded from `),Zte=a("code"),Zso=o("pretrained_model_name_or_path"),elo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eae=a("code"),olo=o("pretrained_model_name_or_path"),rlo=o(":"),tlo=l(),oe=a("ul"),Yg=a("li"),oae=a("strong"),alo=o("beit"),nlo=o(" \u2014 "),ZB=a("a"),slo=o("BeitFeatureExtractor"),llo=o(" (BEiT model)"),ilo=l(),Kg=a("li"),rae=a("strong"),dlo=o("clip"),clo=o(" \u2014 "),eP=a("a"),flo=o("CLIPFeatureExtractor"),mlo=o(" (CLIP model)"),glo=l(),Zg=a("li"),tae=a("strong"),hlo=o("convnext"),plo=o(" \u2014 "),oP=a("a"),ulo=o("ConvNextFeatureExtractor"),_lo=o(" (ConvNext model)"),blo=l(),eh=a("li"),aae=a("strong"),vlo=o("data2vec-audio"),Flo=o(" \u2014 "),rP=a("a"),Tlo=o("Wav2Vec2FeatureExtractor"),Mlo=o(" (Data2VecAudio model)"),Elo=l(),oh=a("li"),nae=a("strong"),Clo=o("data2vec-vision"),wlo=o(" \u2014 "),tP=a("a"),Alo=o("BeitFeatureExtractor"),ylo=o(" (Data2VecVision model)"),Llo=l(),rh=a("li"),sae=a("strong"),xlo=o("deit"),$lo=o(" \u2014 "),aP=a("a"),klo=o("DeiTFeatureExtractor"),Slo=o(" (DeiT model)"),Rlo=l(),th=a("li"),lae=a("strong"),Blo=o("detr"),Plo=o(" \u2014 "),nP=a("a"),Ilo=o("DetrFeatureExtractor"),qlo=o(" (DETR model)"),Nlo=l(),ah=a("li"),iae=a("strong"),jlo=o("dpt"),Dlo=o(" \u2014 "),sP=a("a"),Glo=o("DPTFeatureExtractor"),Olo=o(" (DPT model)"),Vlo=l(),nh=a("li"),dae=a("strong"),Xlo=o("flava"),zlo=o(" \u2014 "),lP=a("a"),Qlo=o("FlavaFeatureExtractor"),Wlo=o(" (Flava model)"),Hlo=l(),sh=a("li"),cae=a("strong"),Ulo=o("glpn"),Jlo=o(" \u2014 "),iP=a("a"),Ylo=o("GLPNFeatureExtractor"),Klo=o(" (GLPN model)"),Zlo=l(),lh=a("li"),fae=a("strong"),eio=o("hubert"),oio=o(" \u2014 "),dP=a("a"),rio=o("Wav2Vec2FeatureExtractor"),tio=o(" (Hubert model)"),aio=l(),ih=a("li"),mae=a("strong"),nio=o("layoutlmv2"),sio=o(" \u2014 "),cP=a("a"),lio=o("LayoutLMv2FeatureExtractor"),iio=o(" (LayoutLMv2 model)"),dio=l(),dh=a("li"),gae=a("strong"),cio=o("maskformer"),fio=o(" \u2014 "),fP=a("a"),mio=o("MaskFormerFeatureExtractor"),gio=o(" (MaskFormer model)"),hio=l(),ch=a("li"),hae=a("strong"),pio=o("perceiver"),uio=o(" \u2014 "),mP=a("a"),_io=o("PerceiverFeatureExtractor"),bio=o(" (Perceiver model)"),vio=l(),fh=a("li"),pae=a("strong"),Fio=o("poolformer"),Tio=o(" \u2014 "),gP=a("a"),Mio=o("PoolFormerFeatureExtractor"),Eio=o(" (PoolFormer model)"),Cio=l(),mh=a("li"),uae=a("strong"),wio=o("regnet"),Aio=o(" \u2014 "),hP=a("a"),yio=o("ConvNextFeatureExtractor"),Lio=o(" (RegNet model)"),xio=l(),gh=a("li"),_ae=a("strong"),$io=o("resnet"),kio=o(" \u2014 "),pP=a("a"),Sio=o("ConvNextFeatureExtractor"),Rio=o(" (ResNet model)"),Bio=l(),hh=a("li"),bae=a("strong"),Pio=o("segformer"),Iio=o(" \u2014 "),uP=a("a"),qio=o("SegformerFeatureExtractor"),Nio=o(" (SegFormer model)"),jio=l(),ph=a("li"),vae=a("strong"),Dio=o("speech_to_text"),Gio=o(" \u2014 "),_P=a("a"),Oio=o("Speech2TextFeatureExtractor"),Vio=o(" (Speech2Text model)"),Xio=l(),uh=a("li"),Fae=a("strong"),zio=o("swin"),Qio=o(" \u2014 "),bP=a("a"),Wio=o("ViTFeatureExtractor"),Hio=o(" (Swin model)"),Uio=l(),_h=a("li"),Tae=a("strong"),Jio=o("van"),Yio=o(" \u2014 "),vP=a("a"),Kio=o("ConvNextFeatureExtractor"),Zio=o(" (VAN model)"),edo=l(),bh=a("li"),Mae=a("strong"),odo=o("vit"),rdo=o(" \u2014 "),FP=a("a"),tdo=o("ViTFeatureExtractor"),ado=o(" (ViT model)"),ndo=l(),vh=a("li"),Eae=a("strong"),sdo=o("vit_mae"),ldo=o(" \u2014 "),TP=a("a"),ido=o("ViTFeatureExtractor"),ddo=o(" (ViTMAE model)"),cdo=l(),Fh=a("li"),Cae=a("strong"),fdo=o("wav2vec2"),mdo=o(" \u2014 "),MP=a("a"),gdo=o("Wav2Vec2FeatureExtractor"),hdo=o(" (Wav2Vec2 model)"),pdo=l(),Th=a("li"),wae=a("strong"),udo=o("yolos"),_do=o(" \u2014 "),EP=a("a"),bdo=o("YolosFeatureExtractor"),vdo=o(" (YOLOS model)"),Fdo=l(),F(Mh.$$.fragment),Tdo=l(),F(Eh.$$.fragment),Mdo=l(),Ch=a("div"),F(by.$$.fragment),Edo=l(),Aae=a("p"),Cdo=o("Register a new feature extractor for this class."),aIe=l(),Fi=a("h2"),wh=a("a"),yae=a("span"),F(vy.$$.fragment),wdo=l(),Lae=a("span"),Ado=o("AutoProcessor"),nIe=l(),yo=a("div"),F(Fy.$$.fragment),ydo=l(),Ty=a("p"),Ldo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CP=a("a"),xdo=o("AutoProcessor.from_pretrained()"),$do=o(" class method."),kdo=l(),My=a("p"),Sdo=o("This class cannot be instantiated directly using "),xae=a("code"),Rdo=o("__init__()"),Bdo=o(" (throws an error)."),Pdo=l(),We=a("div"),F(Ey.$$.fragment),Ido=l(),$ae=a("p"),qdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ndo=l(),Ti=a("p"),jdo=o("The processor class to instantiate is selected based on the "),kae=a("code"),Ddo=o("model_type"),Gdo=o(` property of the config object (either
passed as an argument or loaded from `),Sae=a("code"),Odo=o("pretrained_model_name_or_path"),Vdo=o(" if possible):"),Xdo=l(),_e=a("ul"),Ah=a("li"),Rae=a("strong"),zdo=o("clip"),Qdo=o(" \u2014 "),wP=a("a"),Wdo=o("CLIPProcessor"),Hdo=o(" (CLIP model)"),Udo=l(),yh=a("li"),Bae=a("strong"),Jdo=o("flava"),Ydo=o(" \u2014 "),Pae=a("code"),Kdo=o("FLAVAProcessor"),Zdo=o(" (Flava model)"),eco=l(),Lh=a("li"),Iae=a("strong"),oco=o("layoutlmv2"),rco=o(" \u2014 "),AP=a("a"),tco=o("LayoutLMv2Processor"),aco=o(" (LayoutLMv2 model)"),nco=l(),xh=a("li"),qae=a("strong"),sco=o("layoutxlm"),lco=o(" \u2014 "),yP=a("a"),ico=o("LayoutXLMProcessor"),dco=o(" (LayoutXLM model)"),cco=l(),$h=a("li"),Nae=a("strong"),fco=o("sew"),mco=o(" \u2014 "),LP=a("a"),gco=o("Wav2Vec2Processor"),hco=o(" (SEW model)"),pco=l(),kh=a("li"),jae=a("strong"),uco=o("sew-d"),_co=o(" \u2014 "),xP=a("a"),bco=o("Wav2Vec2Processor"),vco=o(" (SEW-D model)"),Fco=l(),Sh=a("li"),Dae=a("strong"),Tco=o("speech_to_text"),Mco=o(" \u2014 "),$P=a("a"),Eco=o("Speech2TextProcessor"),Cco=o(" (Speech2Text model)"),wco=l(),Rh=a("li"),Gae=a("strong"),Aco=o("speech_to_text_2"),yco=o(" \u2014 "),kP=a("a"),Lco=o("Speech2Text2Processor"),xco=o(" (Speech2Text2 model)"),$co=l(),Bh=a("li"),Oae=a("strong"),kco=o("trocr"),Sco=o(" \u2014 "),SP=a("a"),Rco=o("TrOCRProcessor"),Bco=o(" (TrOCR model)"),Pco=l(),Ph=a("li"),Vae=a("strong"),Ico=o("unispeech"),qco=o(" \u2014 "),RP=a("a"),Nco=o("Wav2Vec2Processor"),jco=o(" (UniSpeech model)"),Dco=l(),Ih=a("li"),Xae=a("strong"),Gco=o("unispeech-sat"),Oco=o(" \u2014 "),BP=a("a"),Vco=o("Wav2Vec2Processor"),Xco=o(" (UniSpeechSat model)"),zco=l(),qh=a("li"),zae=a("strong"),Qco=o("vilt"),Wco=o(" \u2014 "),PP=a("a"),Hco=o("ViltProcessor"),Uco=o(" (ViLT model)"),Jco=l(),Nh=a("li"),Qae=a("strong"),Yco=o("vision-text-dual-encoder"),Kco=o(" \u2014 "),IP=a("a"),Zco=o("VisionTextDualEncoderProcessor"),efo=o(" (VisionTextDualEncoder model)"),ofo=l(),jh=a("li"),Wae=a("strong"),rfo=o("wav2vec2"),tfo=o(" \u2014 "),qP=a("a"),afo=o("Wav2Vec2Processor"),nfo=o(" (Wav2Vec2 model)"),sfo=l(),Dh=a("li"),Hae=a("strong"),lfo=o("wavlm"),ifo=o(" \u2014 "),NP=a("a"),dfo=o("Wav2Vec2Processor"),cfo=o(" (WavLM model)"),ffo=l(),F(Gh.$$.fragment),mfo=l(),F(Oh.$$.fragment),gfo=l(),Vh=a("div"),F(Cy.$$.fragment),hfo=l(),Uae=a("p"),pfo=o("Register a new processor for this class."),sIe=l(),Mi=a("h2"),Xh=a("a"),Jae=a("span"),F(wy.$$.fragment),ufo=l(),Yae=a("span"),_fo=o("AutoModel"),lIe=l(),Lo=a("div"),F(Ay.$$.fragment),bfo=l(),Ei=a("p"),vfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jP=a("a"),Ffo=o("from_pretrained()"),Tfo=o(" class method or the "),DP=a("a"),Mfo=o("from_config()"),Efo=o(` class
method.`),Cfo=l(),yy=a("p"),wfo=o("This class cannot be instantiated directly using "),Kae=a("code"),Afo=o("__init__()"),yfo=o(" (throws an error)."),Lfo=l(),ot=a("div"),F(Ly.$$.fragment),xfo=l(),Zae=a("p"),$fo=o("Instantiates one of the base model classes of the library from a configuration."),kfo=l(),Ci=a("p"),Sfo=o(`Note:
Loading a model from its configuration file does `),ene=a("strong"),Rfo=o("not"),Bfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=a("a"),Pfo=o("from_pretrained()"),Ifo=o(" to load the model weights."),qfo=l(),F(zh.$$.fragment),Nfo=l(),He=a("div"),F(xy.$$.fragment),jfo=l(),one=a("p"),Dfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Gfo=l(),Aa=a("p"),Ofo=o("The model class to instantiate is selected based on the "),rne=a("code"),Vfo=o("model_type"),Xfo=o(` property of the config object (either
passed as an argument or loaded from `),tne=a("code"),zfo=o("pretrained_model_name_or_path"),Qfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ane=a("code"),Wfo=o("pretrained_model_name_or_path"),Hfo=o(":"),Ufo=l(),x=a("ul"),Qh=a("li"),nne=a("strong"),Jfo=o("albert"),Yfo=o(" \u2014 "),OP=a("a"),Kfo=o("AlbertModel"),Zfo=o(" (ALBERT model)"),emo=l(),Wh=a("li"),sne=a("strong"),omo=o("bart"),rmo=o(" \u2014 "),VP=a("a"),tmo=o("BartModel"),amo=o(" (BART model)"),nmo=l(),Hh=a("li"),lne=a("strong"),smo=o("beit"),lmo=o(" \u2014 "),XP=a("a"),imo=o("BeitModel"),dmo=o(" (BEiT model)"),cmo=l(),Uh=a("li"),ine=a("strong"),fmo=o("bert"),mmo=o(" \u2014 "),zP=a("a"),gmo=o("BertModel"),hmo=o(" (BERT model)"),pmo=l(),Jh=a("li"),dne=a("strong"),umo=o("bert-generation"),_mo=o(" \u2014 "),QP=a("a"),bmo=o("BertGenerationEncoder"),vmo=o(" (Bert Generation model)"),Fmo=l(),Yh=a("li"),cne=a("strong"),Tmo=o("big_bird"),Mmo=o(" \u2014 "),WP=a("a"),Emo=o("BigBirdModel"),Cmo=o(" (BigBird model)"),wmo=l(),Kh=a("li"),fne=a("strong"),Amo=o("bigbird_pegasus"),ymo=o(" \u2014 "),HP=a("a"),Lmo=o("BigBirdPegasusModel"),xmo=o(" (BigBirdPegasus model)"),$mo=l(),Zh=a("li"),mne=a("strong"),kmo=o("blenderbot"),Smo=o(" \u2014 "),UP=a("a"),Rmo=o("BlenderbotModel"),Bmo=o(" (Blenderbot model)"),Pmo=l(),ep=a("li"),gne=a("strong"),Imo=o("blenderbot-small"),qmo=o(" \u2014 "),JP=a("a"),Nmo=o("BlenderbotSmallModel"),jmo=o(" (BlenderbotSmall model)"),Dmo=l(),op=a("li"),hne=a("strong"),Gmo=o("camembert"),Omo=o(" \u2014 "),YP=a("a"),Vmo=o("CamembertModel"),Xmo=o(" (CamemBERT model)"),zmo=l(),rp=a("li"),pne=a("strong"),Qmo=o("canine"),Wmo=o(" \u2014 "),KP=a("a"),Hmo=o("CanineModel"),Umo=o(" (Canine model)"),Jmo=l(),tp=a("li"),une=a("strong"),Ymo=o("clip"),Kmo=o(" \u2014 "),ZP=a("a"),Zmo=o("CLIPModel"),ego=o(" (CLIP model)"),ogo=l(),ap=a("li"),_ne=a("strong"),rgo=o("convbert"),tgo=o(" \u2014 "),eI=a("a"),ago=o("ConvBertModel"),ngo=o(" (ConvBERT model)"),sgo=l(),np=a("li"),bne=a("strong"),lgo=o("convnext"),igo=o(" \u2014 "),oI=a("a"),dgo=o("ConvNextModel"),cgo=o(" (ConvNext model)"),fgo=l(),sp=a("li"),vne=a("strong"),mgo=o("ctrl"),ggo=o(" \u2014 "),rI=a("a"),hgo=o("CTRLModel"),pgo=o(" (CTRL model)"),ugo=l(),lp=a("li"),Fne=a("strong"),_go=o("data2vec-audio"),bgo=o(" \u2014 "),tI=a("a"),vgo=o("Data2VecAudioModel"),Fgo=o(" (Data2VecAudio model)"),Tgo=l(),ip=a("li"),Tne=a("strong"),Mgo=o("data2vec-text"),Ego=o(" \u2014 "),aI=a("a"),Cgo=o("Data2VecTextModel"),wgo=o(" (Data2VecText model)"),Ago=l(),dp=a("li"),Mne=a("strong"),ygo=o("data2vec-vision"),Lgo=o(" \u2014 "),nI=a("a"),xgo=o("Data2VecVisionModel"),$go=o(" (Data2VecVision model)"),kgo=l(),cp=a("li"),Ene=a("strong"),Sgo=o("deberta"),Rgo=o(" \u2014 "),sI=a("a"),Bgo=o("DebertaModel"),Pgo=o(" (DeBERTa model)"),Igo=l(),fp=a("li"),Cne=a("strong"),qgo=o("deberta-v2"),Ngo=o(" \u2014 "),lI=a("a"),jgo=o("DebertaV2Model"),Dgo=o(" (DeBERTa-v2 model)"),Ggo=l(),mp=a("li"),wne=a("strong"),Ogo=o("decision_transformer"),Vgo=o(" \u2014 "),iI=a("a"),Xgo=o("DecisionTransformerModel"),zgo=o(" (Decision Transformer model)"),Qgo=l(),gp=a("li"),Ane=a("strong"),Wgo=o("deit"),Hgo=o(" \u2014 "),dI=a("a"),Ugo=o("DeiTModel"),Jgo=o(" (DeiT model)"),Ygo=l(),hp=a("li"),yne=a("strong"),Kgo=o("detr"),Zgo=o(" \u2014 "),cI=a("a"),eho=o("DetrModel"),oho=o(" (DETR model)"),rho=l(),pp=a("li"),Lne=a("strong"),tho=o("distilbert"),aho=o(" \u2014 "),fI=a("a"),nho=o("DistilBertModel"),sho=o(" (DistilBERT model)"),lho=l(),up=a("li"),xne=a("strong"),iho=o("dpr"),dho=o(" \u2014 "),mI=a("a"),cho=o("DPRQuestionEncoder"),fho=o(" (DPR model)"),mho=l(),_p=a("li"),$ne=a("strong"),gho=o("dpt"),hho=o(" \u2014 "),gI=a("a"),pho=o("DPTModel"),uho=o(" (DPT model)"),_ho=l(),bp=a("li"),kne=a("strong"),bho=o("electra"),vho=o(" \u2014 "),hI=a("a"),Fho=o("ElectraModel"),Tho=o(" (ELECTRA model)"),Mho=l(),vp=a("li"),Sne=a("strong"),Eho=o("flaubert"),Cho=o(" \u2014 "),pI=a("a"),who=o("FlaubertModel"),Aho=o(" (FlauBERT model)"),yho=l(),Fp=a("li"),Rne=a("strong"),Lho=o("flava"),xho=o(" \u2014 "),uI=a("a"),$ho=o("FlavaModel"),kho=o(" (Flava model)"),Sho=l(),Tp=a("li"),Bne=a("strong"),Rho=o("fnet"),Bho=o(" \u2014 "),_I=a("a"),Pho=o("FNetModel"),Iho=o(" (FNet model)"),qho=l(),Mp=a("li"),Pne=a("strong"),Nho=o("fsmt"),jho=o(" \u2014 "),bI=a("a"),Dho=o("FSMTModel"),Gho=o(" (FairSeq Machine-Translation model)"),Oho=l(),Rs=a("li"),Ine=a("strong"),Vho=o("funnel"),Xho=o(" \u2014 "),vI=a("a"),zho=o("FunnelModel"),Qho=o(" or "),FI=a("a"),Who=o("FunnelBaseModel"),Hho=o(" (Funnel Transformer model)"),Uho=l(),Ep=a("li"),qne=a("strong"),Jho=o("glpn"),Yho=o(" \u2014 "),TI=a("a"),Kho=o("GLPNModel"),Zho=o(" (GLPN model)"),epo=l(),Cp=a("li"),Nne=a("strong"),opo=o("gpt2"),rpo=o(" \u2014 "),MI=a("a"),tpo=o("GPT2Model"),apo=o(" (OpenAI GPT-2 model)"),npo=l(),wp=a("li"),jne=a("strong"),spo=o("gpt_neo"),lpo=o(" \u2014 "),EI=a("a"),ipo=o("GPTNeoModel"),dpo=o(" (GPT Neo model)"),cpo=l(),Ap=a("li"),Dne=a("strong"),fpo=o("gptj"),mpo=o(" \u2014 "),CI=a("a"),gpo=o("GPTJModel"),hpo=o(" (GPT-J model)"),ppo=l(),yp=a("li"),Gne=a("strong"),upo=o("hubert"),_po=o(" \u2014 "),wI=a("a"),bpo=o("HubertModel"),vpo=o(" (Hubert model)"),Fpo=l(),Lp=a("li"),One=a("strong"),Tpo=o("ibert"),Mpo=o(" \u2014 "),AI=a("a"),Epo=o("IBertModel"),Cpo=o(" (I-BERT model)"),wpo=l(),xp=a("li"),Vne=a("strong"),Apo=o("imagegpt"),ypo=o(" \u2014 "),yI=a("a"),Lpo=o("ImageGPTModel"),xpo=o(" (ImageGPT model)"),$po=l(),$p=a("li"),Xne=a("strong"),kpo=o("layoutlm"),Spo=o(" \u2014 "),LI=a("a"),Rpo=o("LayoutLMModel"),Bpo=o(" (LayoutLM model)"),Ppo=l(),kp=a("li"),zne=a("strong"),Ipo=o("layoutlmv2"),qpo=o(" \u2014 "),xI=a("a"),Npo=o("LayoutLMv2Model"),jpo=o(" (LayoutLMv2 model)"),Dpo=l(),Sp=a("li"),Qne=a("strong"),Gpo=o("led"),Opo=o(" \u2014 "),$I=a("a"),Vpo=o("LEDModel"),Xpo=o(" (LED model)"),zpo=l(),Rp=a("li"),Wne=a("strong"),Qpo=o("longformer"),Wpo=o(" \u2014 "),kI=a("a"),Hpo=o("LongformerModel"),Upo=o(" (Longformer model)"),Jpo=l(),Bp=a("li"),Hne=a("strong"),Ypo=o("luke"),Kpo=o(" \u2014 "),SI=a("a"),Zpo=o("LukeModel"),euo=o(" (LUKE model)"),ouo=l(),Pp=a("li"),Une=a("strong"),ruo=o("lxmert"),tuo=o(" \u2014 "),RI=a("a"),auo=o("LxmertModel"),nuo=o(" (LXMERT model)"),suo=l(),Ip=a("li"),Jne=a("strong"),luo=o("m2m_100"),iuo=o(" \u2014 "),BI=a("a"),duo=o("M2M100Model"),cuo=o(" (M2M100 model)"),fuo=l(),qp=a("li"),Yne=a("strong"),muo=o("marian"),guo=o(" \u2014 "),PI=a("a"),huo=o("MarianModel"),puo=o(" (Marian model)"),uuo=l(),Np=a("li"),Kne=a("strong"),_uo=o("maskformer"),buo=o(" \u2014 "),II=a("a"),vuo=o("MaskFormerModel"),Fuo=o(" (MaskFormer model)"),Tuo=l(),jp=a("li"),Zne=a("strong"),Muo=o("mbart"),Euo=o(" \u2014 "),qI=a("a"),Cuo=o("MBartModel"),wuo=o(" (mBART model)"),Auo=l(),Dp=a("li"),ese=a("strong"),yuo=o("megatron-bert"),Luo=o(" \u2014 "),NI=a("a"),xuo=o("MegatronBertModel"),$uo=o(" (MegatronBert model)"),kuo=l(),Gp=a("li"),ose=a("strong"),Suo=o("mobilebert"),Ruo=o(" \u2014 "),jI=a("a"),Buo=o("MobileBertModel"),Puo=o(" (MobileBERT model)"),Iuo=l(),Op=a("li"),rse=a("strong"),quo=o("mpnet"),Nuo=o(" \u2014 "),DI=a("a"),juo=o("MPNetModel"),Duo=o(" (MPNet model)"),Guo=l(),Vp=a("li"),tse=a("strong"),Ouo=o("mt5"),Vuo=o(" \u2014 "),GI=a("a"),Xuo=o("MT5Model"),zuo=o(" (mT5 model)"),Quo=l(),Xp=a("li"),ase=a("strong"),Wuo=o("nystromformer"),Huo=o(" \u2014 "),OI=a("a"),Uuo=o("NystromformerModel"),Juo=o(" (Nystromformer model)"),Yuo=l(),zp=a("li"),nse=a("strong"),Kuo=o("openai-gpt"),Zuo=o(" \u2014 "),VI=a("a"),e_o=o("OpenAIGPTModel"),o_o=o(" (OpenAI GPT model)"),r_o=l(),Qp=a("li"),sse=a("strong"),t_o=o("opt"),a_o=o(" \u2014 "),XI=a("a"),n_o=o("OPTModel"),s_o=o(" (OPT model)"),l_o=l(),Wp=a("li"),lse=a("strong"),i_o=o("pegasus"),d_o=o(" \u2014 "),zI=a("a"),c_o=o("PegasusModel"),f_o=o(" (Pegasus model)"),m_o=l(),Hp=a("li"),ise=a("strong"),g_o=o("perceiver"),h_o=o(" \u2014 "),QI=a("a"),p_o=o("PerceiverModel"),u_o=o(" (Perceiver model)"),__o=l(),Up=a("li"),dse=a("strong"),b_o=o("plbart"),v_o=o(" \u2014 "),WI=a("a"),F_o=o("PLBartModel"),T_o=o(" (PLBart model)"),M_o=l(),Jp=a("li"),cse=a("strong"),E_o=o("poolformer"),C_o=o(" \u2014 "),HI=a("a"),w_o=o("PoolFormerModel"),A_o=o(" (PoolFormer model)"),y_o=l(),Yp=a("li"),fse=a("strong"),L_o=o("prophetnet"),x_o=o(" \u2014 "),UI=a("a"),$_o=o("ProphetNetModel"),k_o=o(" (ProphetNet model)"),S_o=l(),Kp=a("li"),mse=a("strong"),R_o=o("qdqbert"),B_o=o(" \u2014 "),JI=a("a"),P_o=o("QDQBertModel"),I_o=o(" (QDQBert model)"),q_o=l(),Zp=a("li"),gse=a("strong"),N_o=o("reformer"),j_o=o(" \u2014 "),YI=a("a"),D_o=o("ReformerModel"),G_o=o(" (Reformer model)"),O_o=l(),eu=a("li"),hse=a("strong"),V_o=o("regnet"),X_o=o(" \u2014 "),KI=a("a"),z_o=o("RegNetModel"),Q_o=o(" (RegNet model)"),W_o=l(),ou=a("li"),pse=a("strong"),H_o=o("rembert"),U_o=o(" \u2014 "),ZI=a("a"),J_o=o("RemBertModel"),Y_o=o(" (RemBERT model)"),K_o=l(),ru=a("li"),use=a("strong"),Z_o=o("resnet"),e1o=o(" \u2014 "),eq=a("a"),o1o=o("ResNetModel"),r1o=o(" (ResNet model)"),t1o=l(),tu=a("li"),_se=a("strong"),a1o=o("retribert"),n1o=o(" \u2014 "),oq=a("a"),s1o=o("RetriBertModel"),l1o=o(" (RetriBERT model)"),i1o=l(),au=a("li"),bse=a("strong"),d1o=o("roberta"),c1o=o(" \u2014 "),rq=a("a"),f1o=o("RobertaModel"),m1o=o(" (RoBERTa model)"),g1o=l(),nu=a("li"),vse=a("strong"),h1o=o("roformer"),p1o=o(" \u2014 "),tq=a("a"),u1o=o("RoFormerModel"),_1o=o(" (RoFormer model)"),b1o=l(),su=a("li"),Fse=a("strong"),v1o=o("segformer"),F1o=o(" \u2014 "),aq=a("a"),T1o=o("SegformerModel"),M1o=o(" (SegFormer model)"),E1o=l(),lu=a("li"),Tse=a("strong"),C1o=o("sew"),w1o=o(" \u2014 "),nq=a("a"),A1o=o("SEWModel"),y1o=o(" (SEW model)"),L1o=l(),iu=a("li"),Mse=a("strong"),x1o=o("sew-d"),$1o=o(" \u2014 "),sq=a("a"),k1o=o("SEWDModel"),S1o=o(" (SEW-D model)"),R1o=l(),du=a("li"),Ese=a("strong"),B1o=o("speech_to_text"),P1o=o(" \u2014 "),lq=a("a"),I1o=o("Speech2TextModel"),q1o=o(" (Speech2Text model)"),N1o=l(),cu=a("li"),Cse=a("strong"),j1o=o("splinter"),D1o=o(" \u2014 "),iq=a("a"),G1o=o("SplinterModel"),O1o=o(" (Splinter model)"),V1o=l(),fu=a("li"),wse=a("strong"),X1o=o("squeezebert"),z1o=o(" \u2014 "),dq=a("a"),Q1o=o("SqueezeBertModel"),W1o=o(" (SqueezeBERT model)"),H1o=l(),mu=a("li"),Ase=a("strong"),U1o=o("swin"),J1o=o(" \u2014 "),cq=a("a"),Y1o=o("SwinModel"),K1o=o(" (Swin model)"),Z1o=l(),gu=a("li"),yse=a("strong"),ebo=o("t5"),obo=o(" \u2014 "),fq=a("a"),rbo=o("T5Model"),tbo=o(" (T5 model)"),abo=l(),hu=a("li"),Lse=a("strong"),nbo=o("tapas"),sbo=o(" \u2014 "),mq=a("a"),lbo=o("TapasModel"),ibo=o(" (TAPAS model)"),dbo=l(),pu=a("li"),xse=a("strong"),cbo=o("transfo-xl"),fbo=o(" \u2014 "),gq=a("a"),mbo=o("TransfoXLModel"),gbo=o(" (Transformer-XL model)"),hbo=l(),uu=a("li"),$se=a("strong"),pbo=o("unispeech"),ubo=o(" \u2014 "),hq=a("a"),_bo=o("UniSpeechModel"),bbo=o(" (UniSpeech model)"),vbo=l(),_u=a("li"),kse=a("strong"),Fbo=o("unispeech-sat"),Tbo=o(" \u2014 "),pq=a("a"),Mbo=o("UniSpeechSatModel"),Ebo=o(" (UniSpeechSat model)"),Cbo=l(),bu=a("li"),Sse=a("strong"),wbo=o("van"),Abo=o(" \u2014 "),uq=a("a"),ybo=o("VanModel"),Lbo=o(" (VAN model)"),xbo=l(),vu=a("li"),Rse=a("strong"),$bo=o("vilt"),kbo=o(" \u2014 "),_q=a("a"),Sbo=o("ViltModel"),Rbo=o(" (ViLT model)"),Bbo=l(),Fu=a("li"),Bse=a("strong"),Pbo=o("vision-text-dual-encoder"),Ibo=o(" \u2014 "),bq=a("a"),qbo=o("VisionTextDualEncoderModel"),Nbo=o(" (VisionTextDualEncoder model)"),jbo=l(),Tu=a("li"),Pse=a("strong"),Dbo=o("visual_bert"),Gbo=o(" \u2014 "),vq=a("a"),Obo=o("VisualBertModel"),Vbo=o(" (VisualBert model)"),Xbo=l(),Mu=a("li"),Ise=a("strong"),zbo=o("vit"),Qbo=o(" \u2014 "),Fq=a("a"),Wbo=o("ViTModel"),Hbo=o(" (ViT model)"),Ubo=l(),Eu=a("li"),qse=a("strong"),Jbo=o("vit_mae"),Ybo=o(" \u2014 "),Tq=a("a"),Kbo=o("ViTMAEModel"),Zbo=o(" (ViTMAE model)"),e4o=l(),Cu=a("li"),Nse=a("strong"),o4o=o("wav2vec2"),r4o=o(" \u2014 "),Mq=a("a"),t4o=o("Wav2Vec2Model"),a4o=o(" (Wav2Vec2 model)"),n4o=l(),wu=a("li"),jse=a("strong"),s4o=o("wavlm"),l4o=o(" \u2014 "),Eq=a("a"),i4o=o("WavLMModel"),d4o=o(" (WavLM model)"),c4o=l(),Au=a("li"),Dse=a("strong"),f4o=o("xglm"),m4o=o(" \u2014 "),Cq=a("a"),g4o=o("XGLMModel"),h4o=o(" (XGLM model)"),p4o=l(),yu=a("li"),Gse=a("strong"),u4o=o("xlm"),_4o=o(" \u2014 "),wq=a("a"),b4o=o("XLMModel"),v4o=o(" (XLM model)"),F4o=l(),Lu=a("li"),Ose=a("strong"),T4o=o("xlm-prophetnet"),M4o=o(" \u2014 "),Aq=a("a"),E4o=o("XLMProphetNetModel"),C4o=o(" (XLMProphetNet model)"),w4o=l(),xu=a("li"),Vse=a("strong"),A4o=o("xlm-roberta"),y4o=o(" \u2014 "),yq=a("a"),L4o=o("XLMRobertaModel"),x4o=o(" (XLM-RoBERTa model)"),$4o=l(),$u=a("li"),Xse=a("strong"),k4o=o("xlm-roberta-xl"),S4o=o(" \u2014 "),Lq=a("a"),R4o=o("XLMRobertaXLModel"),B4o=o(" (XLM-RoBERTa-XL model)"),P4o=l(),ku=a("li"),zse=a("strong"),I4o=o("xlnet"),q4o=o(" \u2014 "),xq=a("a"),N4o=o("XLNetModel"),j4o=o(" (XLNet model)"),D4o=l(),Su=a("li"),Qse=a("strong"),G4o=o("yolos"),O4o=o(" \u2014 "),$q=a("a"),V4o=o("YolosModel"),X4o=o(" (YOLOS model)"),z4o=l(),Ru=a("li"),Wse=a("strong"),Q4o=o("yoso"),W4o=o(" \u2014 "),kq=a("a"),H4o=o("YosoModel"),U4o=o(" (YOSO model)"),J4o=l(),Bu=a("p"),Y4o=o("The model is set in evaluation mode by default using "),Hse=a("code"),K4o=o("model.eval()"),Z4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),e2o=o("model.train()"),o2o=l(),F(Pu.$$.fragment),iIe=l(),wi=a("h2"),Iu=a("a"),Jse=a("span"),F($y.$$.fragment),r2o=l(),Yse=a("span"),t2o=o("AutoModelForPreTraining"),dIe=l(),xo=a("div"),F(ky.$$.fragment),a2o=l(),Ai=a("p"),n2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=a("a"),s2o=o("from_pretrained()"),l2o=o(" class method or the "),Rq=a("a"),i2o=o("from_config()"),d2o=o(` class
method.`),c2o=l(),Sy=a("p"),f2o=o("This class cannot be instantiated directly using "),Kse=a("code"),m2o=o("__init__()"),g2o=o(" (throws an error)."),h2o=l(),rt=a("div"),F(Ry.$$.fragment),p2o=l(),Zse=a("p"),u2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_2o=l(),yi=a("p"),b2o=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),v2o=o("not"),F2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=a("a"),T2o=o("from_pretrained()"),M2o=o(" to load the model weights."),E2o=l(),F(qu.$$.fragment),C2o=l(),Ue=a("div"),F(By.$$.fragment),w2o=l(),ole=a("p"),A2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y2o=l(),ya=a("p"),L2o=o("The model class to instantiate is selected based on the "),rle=a("code"),x2o=o("model_type"),$2o=o(` property of the config object (either
passed as an argument or loaded from `),tle=a("code"),k2o=o("pretrained_model_name_or_path"),S2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=a("code"),R2o=o("pretrained_model_name_or_path"),B2o=o(":"),P2o=l(),G=a("ul"),Nu=a("li"),nle=a("strong"),I2o=o("albert"),q2o=o(" \u2014 "),Pq=a("a"),N2o=o("AlbertForPreTraining"),j2o=o(" (ALBERT model)"),D2o=l(),ju=a("li"),sle=a("strong"),G2o=o("bart"),O2o=o(" \u2014 "),Iq=a("a"),V2o=o("BartForConditionalGeneration"),X2o=o(" (BART model)"),z2o=l(),Du=a("li"),lle=a("strong"),Q2o=o("bert"),W2o=o(" \u2014 "),qq=a("a"),H2o=o("BertForPreTraining"),U2o=o(" (BERT model)"),J2o=l(),Gu=a("li"),ile=a("strong"),Y2o=o("big_bird"),K2o=o(" \u2014 "),Nq=a("a"),Z2o=o("BigBirdForPreTraining"),e5o=o(" (BigBird model)"),o5o=l(),Ou=a("li"),dle=a("strong"),r5o=o("camembert"),t5o=o(" \u2014 "),jq=a("a"),a5o=o("CamembertForMaskedLM"),n5o=o(" (CamemBERT model)"),s5o=l(),Vu=a("li"),cle=a("strong"),l5o=o("ctrl"),i5o=o(" \u2014 "),Dq=a("a"),d5o=o("CTRLLMHeadModel"),c5o=o(" (CTRL model)"),f5o=l(),Xu=a("li"),fle=a("strong"),m5o=o("data2vec-text"),g5o=o(" \u2014 "),Gq=a("a"),h5o=o("Data2VecTextForMaskedLM"),p5o=o(" (Data2VecText model)"),u5o=l(),zu=a("li"),mle=a("strong"),_5o=o("deberta"),b5o=o(" \u2014 "),Oq=a("a"),v5o=o("DebertaForMaskedLM"),F5o=o(" (DeBERTa model)"),T5o=l(),Qu=a("li"),gle=a("strong"),M5o=o("deberta-v2"),E5o=o(" \u2014 "),Vq=a("a"),C5o=o("DebertaV2ForMaskedLM"),w5o=o(" (DeBERTa-v2 model)"),A5o=l(),Wu=a("li"),hle=a("strong"),y5o=o("distilbert"),L5o=o(" \u2014 "),Xq=a("a"),x5o=o("DistilBertForMaskedLM"),$5o=o(" (DistilBERT model)"),k5o=l(),Hu=a("li"),ple=a("strong"),S5o=o("electra"),R5o=o(" \u2014 "),zq=a("a"),B5o=o("ElectraForPreTraining"),P5o=o(" (ELECTRA model)"),I5o=l(),Uu=a("li"),ule=a("strong"),q5o=o("flaubert"),N5o=o(" \u2014 "),Qq=a("a"),j5o=o("FlaubertWithLMHeadModel"),D5o=o(" (FlauBERT model)"),G5o=l(),Ju=a("li"),_le=a("strong"),O5o=o("flava"),V5o=o(" \u2014 "),Wq=a("a"),X5o=o("FlavaForPreTraining"),z5o=o(" (Flava model)"),Q5o=l(),Yu=a("li"),ble=a("strong"),W5o=o("fnet"),H5o=o(" \u2014 "),Hq=a("a"),U5o=o("FNetForPreTraining"),J5o=o(" (FNet model)"),Y5o=l(),Ku=a("li"),vle=a("strong"),K5o=o("fsmt"),Z5o=o(" \u2014 "),Uq=a("a"),e3o=o("FSMTForConditionalGeneration"),o3o=o(" (FairSeq Machine-Translation model)"),r3o=l(),Zu=a("li"),Fle=a("strong"),t3o=o("funnel"),a3o=o(" \u2014 "),Jq=a("a"),n3o=o("FunnelForPreTraining"),s3o=o(" (Funnel Transformer model)"),l3o=l(),e_=a("li"),Tle=a("strong"),i3o=o("gpt2"),d3o=o(" \u2014 "),Yq=a("a"),c3o=o("GPT2LMHeadModel"),f3o=o(" (OpenAI GPT-2 model)"),m3o=l(),o_=a("li"),Mle=a("strong"),g3o=o("ibert"),h3o=o(" \u2014 "),Kq=a("a"),p3o=o("IBertForMaskedLM"),u3o=o(" (I-BERT model)"),_3o=l(),r_=a("li"),Ele=a("strong"),b3o=o("layoutlm"),v3o=o(" \u2014 "),Zq=a("a"),F3o=o("LayoutLMForMaskedLM"),T3o=o(" (LayoutLM model)"),M3o=l(),t_=a("li"),Cle=a("strong"),E3o=o("longformer"),C3o=o(" \u2014 "),eN=a("a"),w3o=o("LongformerForMaskedLM"),A3o=o(" (Longformer model)"),y3o=l(),a_=a("li"),wle=a("strong"),L3o=o("lxmert"),x3o=o(" \u2014 "),oN=a("a"),$3o=o("LxmertForPreTraining"),k3o=o(" (LXMERT model)"),S3o=l(),n_=a("li"),Ale=a("strong"),R3o=o("megatron-bert"),B3o=o(" \u2014 "),rN=a("a"),P3o=o("MegatronBertForPreTraining"),I3o=o(" (MegatronBert model)"),q3o=l(),s_=a("li"),yle=a("strong"),N3o=o("mobilebert"),j3o=o(" \u2014 "),tN=a("a"),D3o=o("MobileBertForPreTraining"),G3o=o(" (MobileBERT model)"),O3o=l(),l_=a("li"),Lle=a("strong"),V3o=o("mpnet"),X3o=o(" \u2014 "),aN=a("a"),z3o=o("MPNetForMaskedLM"),Q3o=o(" (MPNet model)"),W3o=l(),i_=a("li"),xle=a("strong"),H3o=o("openai-gpt"),U3o=o(" \u2014 "),nN=a("a"),J3o=o("OpenAIGPTLMHeadModel"),Y3o=o(" (OpenAI GPT model)"),K3o=l(),d_=a("li"),$le=a("strong"),Z3o=o("retribert"),evo=o(" \u2014 "),sN=a("a"),ovo=o("RetriBertModel"),rvo=o(" (RetriBERT model)"),tvo=l(),c_=a("li"),kle=a("strong"),avo=o("roberta"),nvo=o(" \u2014 "),lN=a("a"),svo=o("RobertaForMaskedLM"),lvo=o(" (RoBERTa model)"),ivo=l(),f_=a("li"),Sle=a("strong"),dvo=o("squeezebert"),cvo=o(" \u2014 "),iN=a("a"),fvo=o("SqueezeBertForMaskedLM"),mvo=o(" (SqueezeBERT model)"),gvo=l(),m_=a("li"),Rle=a("strong"),hvo=o("t5"),pvo=o(" \u2014 "),dN=a("a"),uvo=o("T5ForConditionalGeneration"),_vo=o(" (T5 model)"),bvo=l(),g_=a("li"),Ble=a("strong"),vvo=o("tapas"),Fvo=o(" \u2014 "),cN=a("a"),Tvo=o("TapasForMaskedLM"),Mvo=o(" (TAPAS model)"),Evo=l(),h_=a("li"),Ple=a("strong"),Cvo=o("transfo-xl"),wvo=o(" \u2014 "),fN=a("a"),Avo=o("TransfoXLLMHeadModel"),yvo=o(" (Transformer-XL model)"),Lvo=l(),p_=a("li"),Ile=a("strong"),xvo=o("unispeech"),$vo=o(" \u2014 "),mN=a("a"),kvo=o("UniSpeechForPreTraining"),Svo=o(" (UniSpeech model)"),Rvo=l(),u_=a("li"),qle=a("strong"),Bvo=o("unispeech-sat"),Pvo=o(" \u2014 "),gN=a("a"),Ivo=o("UniSpeechSatForPreTraining"),qvo=o(" (UniSpeechSat model)"),Nvo=l(),__=a("li"),Nle=a("strong"),jvo=o("visual_bert"),Dvo=o(" \u2014 "),hN=a("a"),Gvo=o("VisualBertForPreTraining"),Ovo=o(" (VisualBert model)"),Vvo=l(),b_=a("li"),jle=a("strong"),Xvo=o("vit_mae"),zvo=o(" \u2014 "),pN=a("a"),Qvo=o("ViTMAEForPreTraining"),Wvo=o(" (ViTMAE model)"),Hvo=l(),v_=a("li"),Dle=a("strong"),Uvo=o("wav2vec2"),Jvo=o(" \u2014 "),uN=a("a"),Yvo=o("Wav2Vec2ForPreTraining"),Kvo=o(" (Wav2Vec2 model)"),Zvo=l(),F_=a("li"),Gle=a("strong"),eFo=o("xlm"),oFo=o(" \u2014 "),_N=a("a"),rFo=o("XLMWithLMHeadModel"),tFo=o(" (XLM model)"),aFo=l(),T_=a("li"),Ole=a("strong"),nFo=o("xlm-roberta"),sFo=o(" \u2014 "),bN=a("a"),lFo=o("XLMRobertaForMaskedLM"),iFo=o(" (XLM-RoBERTa model)"),dFo=l(),M_=a("li"),Vle=a("strong"),cFo=o("xlm-roberta-xl"),fFo=o(" \u2014 "),vN=a("a"),mFo=o("XLMRobertaXLForMaskedLM"),gFo=o(" (XLM-RoBERTa-XL model)"),hFo=l(),E_=a("li"),Xle=a("strong"),pFo=o("xlnet"),uFo=o(" \u2014 "),FN=a("a"),_Fo=o("XLNetLMHeadModel"),bFo=o(" (XLNet model)"),vFo=l(),C_=a("p"),FFo=o("The model is set in evaluation mode by default using "),zle=a("code"),TFo=o("model.eval()"),MFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),EFo=o("model.train()"),CFo=l(),F(w_.$$.fragment),cIe=l(),Li=a("h2"),A_=a("a"),Wle=a("span"),F(Py.$$.fragment),wFo=l(),Hle=a("span"),AFo=o("AutoModelForCausalLM"),fIe=l(),$o=a("div"),F(Iy.$$.fragment),yFo=l(),xi=a("p"),LFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TN=a("a"),xFo=o("from_pretrained()"),$Fo=o(" class method or the "),MN=a("a"),kFo=o("from_config()"),SFo=o(` class
method.`),RFo=l(),qy=a("p"),BFo=o("This class cannot be instantiated directly using "),Ule=a("code"),PFo=o("__init__()"),IFo=o(" (throws an error)."),qFo=l(),tt=a("div"),F(Ny.$$.fragment),NFo=l(),Jle=a("p"),jFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DFo=l(),$i=a("p"),GFo=o(`Note:
Loading a model from its configuration file does `),Yle=a("strong"),OFo=o("not"),VFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=a("a"),XFo=o("from_pretrained()"),zFo=o(" to load the model weights."),QFo=l(),F(y_.$$.fragment),WFo=l(),Je=a("div"),F(jy.$$.fragment),HFo=l(),Kle=a("p"),UFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JFo=l(),La=a("p"),YFo=o("The model class to instantiate is selected based on the "),Zle=a("code"),KFo=o("model_type"),ZFo=o(` property of the config object (either
passed as an argument or loaded from `),eie=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=a("code"),r6o=o("pretrained_model_name_or_path"),t6o=o(":"),a6o=l(),z=a("ul"),L_=a("li"),rie=a("strong"),n6o=o("bart"),s6o=o(" \u2014 "),CN=a("a"),l6o=o("BartForCausalLM"),i6o=o(" (BART model)"),d6o=l(),x_=a("li"),tie=a("strong"),c6o=o("bert"),f6o=o(" \u2014 "),wN=a("a"),m6o=o("BertLMHeadModel"),g6o=o(" (BERT model)"),h6o=l(),$_=a("li"),aie=a("strong"),p6o=o("bert-generation"),u6o=o(" \u2014 "),AN=a("a"),_6o=o("BertGenerationDecoder"),b6o=o(" (Bert Generation model)"),v6o=l(),k_=a("li"),nie=a("strong"),F6o=o("big_bird"),T6o=o(" \u2014 "),yN=a("a"),M6o=o("BigBirdForCausalLM"),E6o=o(" (BigBird model)"),C6o=l(),S_=a("li"),sie=a("strong"),w6o=o("bigbird_pegasus"),A6o=o(" \u2014 "),LN=a("a"),y6o=o("BigBirdPegasusForCausalLM"),L6o=o(" (BigBirdPegasus model)"),x6o=l(),R_=a("li"),lie=a("strong"),$6o=o("blenderbot"),k6o=o(" \u2014 "),xN=a("a"),S6o=o("BlenderbotForCausalLM"),R6o=o(" (Blenderbot model)"),B6o=l(),B_=a("li"),iie=a("strong"),P6o=o("blenderbot-small"),I6o=o(" \u2014 "),$N=a("a"),q6o=o("BlenderbotSmallForCausalLM"),N6o=o(" (BlenderbotSmall model)"),j6o=l(),P_=a("li"),die=a("strong"),D6o=o("camembert"),G6o=o(" \u2014 "),kN=a("a"),O6o=o("CamembertForCausalLM"),V6o=o(" (CamemBERT model)"),X6o=l(),I_=a("li"),cie=a("strong"),z6o=o("ctrl"),Q6o=o(" \u2014 "),SN=a("a"),W6o=o("CTRLLMHeadModel"),H6o=o(" (CTRL model)"),U6o=l(),q_=a("li"),fie=a("strong"),J6o=o("data2vec-text"),Y6o=o(" \u2014 "),RN=a("a"),K6o=o("Data2VecTextForCausalLM"),Z6o=o(" (Data2VecText model)"),eTo=l(),N_=a("li"),mie=a("strong"),oTo=o("electra"),rTo=o(" \u2014 "),BN=a("a"),tTo=o("ElectraForCausalLM"),aTo=o(" (ELECTRA model)"),nTo=l(),j_=a("li"),gie=a("strong"),sTo=o("gpt2"),lTo=o(" \u2014 "),PN=a("a"),iTo=o("GPT2LMHeadModel"),dTo=o(" (OpenAI GPT-2 model)"),cTo=l(),D_=a("li"),hie=a("strong"),fTo=o("gpt_neo"),mTo=o(" \u2014 "),IN=a("a"),gTo=o("GPTNeoForCausalLM"),hTo=o(" (GPT Neo model)"),pTo=l(),G_=a("li"),pie=a("strong"),uTo=o("gptj"),_To=o(" \u2014 "),qN=a("a"),bTo=o("GPTJForCausalLM"),vTo=o(" (GPT-J model)"),FTo=l(),O_=a("li"),uie=a("strong"),TTo=o("marian"),MTo=o(" \u2014 "),NN=a("a"),ETo=o("MarianForCausalLM"),CTo=o(" (Marian model)"),wTo=l(),V_=a("li"),_ie=a("strong"),ATo=o("mbart"),yTo=o(" \u2014 "),jN=a("a"),LTo=o("MBartForCausalLM"),xTo=o(" (mBART model)"),$To=l(),X_=a("li"),bie=a("strong"),kTo=o("megatron-bert"),STo=o(" \u2014 "),DN=a("a"),RTo=o("MegatronBertForCausalLM"),BTo=o(" (MegatronBert model)"),PTo=l(),z_=a("li"),vie=a("strong"),ITo=o("openai-gpt"),qTo=o(" \u2014 "),GN=a("a"),NTo=o("OpenAIGPTLMHeadModel"),jTo=o(" (OpenAI GPT model)"),DTo=l(),Q_=a("li"),Fie=a("strong"),GTo=o("opt"),OTo=o(" \u2014 "),ON=a("a"),VTo=o("OPTForCausalLM"),XTo=o(" (OPT model)"),zTo=l(),W_=a("li"),Tie=a("strong"),QTo=o("pegasus"),WTo=o(" \u2014 "),VN=a("a"),HTo=o("PegasusForCausalLM"),UTo=o(" (Pegasus model)"),JTo=l(),H_=a("li"),Mie=a("strong"),YTo=o("plbart"),KTo=o(" \u2014 "),XN=a("a"),ZTo=o("PLBartForCausalLM"),eMo=o(" (PLBart model)"),oMo=l(),U_=a("li"),Eie=a("strong"),rMo=o("prophetnet"),tMo=o(" \u2014 "),zN=a("a"),aMo=o("ProphetNetForCausalLM"),nMo=o(" (ProphetNet model)"),sMo=l(),J_=a("li"),Cie=a("strong"),lMo=o("qdqbert"),iMo=o(" \u2014 "),QN=a("a"),dMo=o("QDQBertLMHeadModel"),cMo=o(" (QDQBert model)"),fMo=l(),Y_=a("li"),wie=a("strong"),mMo=o("reformer"),gMo=o(" \u2014 "),WN=a("a"),hMo=o("ReformerModelWithLMHead"),pMo=o(" (Reformer model)"),uMo=l(),K_=a("li"),Aie=a("strong"),_Mo=o("rembert"),bMo=o(" \u2014 "),HN=a("a"),vMo=o("RemBertForCausalLM"),FMo=o(" (RemBERT model)"),TMo=l(),Z_=a("li"),yie=a("strong"),MMo=o("roberta"),EMo=o(" \u2014 "),UN=a("a"),CMo=o("RobertaForCausalLM"),wMo=o(" (RoBERTa model)"),AMo=l(),e1=a("li"),Lie=a("strong"),yMo=o("roformer"),LMo=o(" \u2014 "),JN=a("a"),xMo=o("RoFormerForCausalLM"),$Mo=o(" (RoFormer model)"),kMo=l(),o1=a("li"),xie=a("strong"),SMo=o("speech_to_text_2"),RMo=o(" \u2014 "),YN=a("a"),BMo=o("Speech2Text2ForCausalLM"),PMo=o(" (Speech2Text2 model)"),IMo=l(),r1=a("li"),$ie=a("strong"),qMo=o("transfo-xl"),NMo=o(" \u2014 "),KN=a("a"),jMo=o("TransfoXLLMHeadModel"),DMo=o(" (Transformer-XL model)"),GMo=l(),t1=a("li"),kie=a("strong"),OMo=o("trocr"),VMo=o(" \u2014 "),ZN=a("a"),XMo=o("TrOCRForCausalLM"),zMo=o(" (TrOCR model)"),QMo=l(),a1=a("li"),Sie=a("strong"),WMo=o("xglm"),HMo=o(" \u2014 "),ej=a("a"),UMo=o("XGLMForCausalLM"),JMo=o(" (XGLM model)"),YMo=l(),n1=a("li"),Rie=a("strong"),KMo=o("xlm"),ZMo=o(" \u2014 "),oj=a("a"),eEo=o("XLMWithLMHeadModel"),oEo=o(" (XLM model)"),rEo=l(),s1=a("li"),Bie=a("strong"),tEo=o("xlm-prophetnet"),aEo=o(" \u2014 "),rj=a("a"),nEo=o("XLMProphetNetForCausalLM"),sEo=o(" (XLMProphetNet model)"),lEo=l(),l1=a("li"),Pie=a("strong"),iEo=o("xlm-roberta"),dEo=o(" \u2014 "),tj=a("a"),cEo=o("XLMRobertaForCausalLM"),fEo=o(" (XLM-RoBERTa model)"),mEo=l(),i1=a("li"),Iie=a("strong"),gEo=o("xlm-roberta-xl"),hEo=o(" \u2014 "),aj=a("a"),pEo=o("XLMRobertaXLForCausalLM"),uEo=o(" (XLM-RoBERTa-XL model)"),_Eo=l(),d1=a("li"),qie=a("strong"),bEo=o("xlnet"),vEo=o(" \u2014 "),nj=a("a"),FEo=o("XLNetLMHeadModel"),TEo=o(" (XLNet model)"),MEo=l(),c1=a("p"),EEo=o("The model is set in evaluation mode by default using "),Nie=a("code"),CEo=o("model.eval()"),wEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),AEo=o("model.train()"),yEo=l(),F(f1.$$.fragment),mIe=l(),ki=a("h2"),m1=a("a"),Die=a("span"),F(Dy.$$.fragment),LEo=l(),Gie=a("span"),xEo=o("AutoModelForMaskedLM"),gIe=l(),ko=a("div"),F(Gy.$$.fragment),$Eo=l(),Si=a("p"),kEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sj=a("a"),SEo=o("from_pretrained()"),REo=o(" class method or the "),lj=a("a"),BEo=o("from_config()"),PEo=o(` class
method.`),IEo=l(),Oy=a("p"),qEo=o("This class cannot be instantiated directly using "),Oie=a("code"),NEo=o("__init__()"),jEo=o(" (throws an error)."),DEo=l(),at=a("div"),F(Vy.$$.fragment),GEo=l(),Vie=a("p"),OEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VEo=l(),Ri=a("p"),XEo=o(`Note:
Loading a model from its configuration file does `),Xie=a("strong"),zEo=o("not"),QEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=a("a"),WEo=o("from_pretrained()"),HEo=o(" to load the model weights."),UEo=l(),F(g1.$$.fragment),JEo=l(),Ye=a("div"),F(Xy.$$.fragment),YEo=l(),zie=a("p"),KEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZEo=l(),xa=a("p"),eCo=o("The model class to instantiate is selected based on the "),Qie=a("code"),oCo=o("model_type"),rCo=o(` property of the config object (either
passed as an argument or loaded from `),Wie=a("code"),tCo=o("pretrained_model_name_or_path"),aCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),nCo=o("pretrained_model_name_or_path"),sCo=o(":"),lCo=l(),Q=a("ul"),h1=a("li"),Uie=a("strong"),iCo=o("albert"),dCo=o(" \u2014 "),dj=a("a"),cCo=o("AlbertForMaskedLM"),fCo=o(" (ALBERT model)"),mCo=l(),p1=a("li"),Jie=a("strong"),gCo=o("bart"),hCo=o(" \u2014 "),cj=a("a"),pCo=o("BartForConditionalGeneration"),uCo=o(" (BART model)"),_Co=l(),u1=a("li"),Yie=a("strong"),bCo=o("bert"),vCo=o(" \u2014 "),fj=a("a"),FCo=o("BertForMaskedLM"),TCo=o(" (BERT model)"),MCo=l(),_1=a("li"),Kie=a("strong"),ECo=o("big_bird"),CCo=o(" \u2014 "),mj=a("a"),wCo=o("BigBirdForMaskedLM"),ACo=o(" (BigBird model)"),yCo=l(),b1=a("li"),Zie=a("strong"),LCo=o("camembert"),xCo=o(" \u2014 "),gj=a("a"),$Co=o("CamembertForMaskedLM"),kCo=o(" (CamemBERT model)"),SCo=l(),v1=a("li"),ede=a("strong"),RCo=o("convbert"),BCo=o(" \u2014 "),hj=a("a"),PCo=o("ConvBertForMaskedLM"),ICo=o(" (ConvBERT model)"),qCo=l(),F1=a("li"),ode=a("strong"),NCo=o("data2vec-text"),jCo=o(" \u2014 "),pj=a("a"),DCo=o("Data2VecTextForMaskedLM"),GCo=o(" (Data2VecText model)"),OCo=l(),T1=a("li"),rde=a("strong"),VCo=o("deberta"),XCo=o(" \u2014 "),uj=a("a"),zCo=o("DebertaForMaskedLM"),QCo=o(" (DeBERTa model)"),WCo=l(),M1=a("li"),tde=a("strong"),HCo=o("deberta-v2"),UCo=o(" \u2014 "),_j=a("a"),JCo=o("DebertaV2ForMaskedLM"),YCo=o(" (DeBERTa-v2 model)"),KCo=l(),E1=a("li"),ade=a("strong"),ZCo=o("distilbert"),ewo=o(" \u2014 "),bj=a("a"),owo=o("DistilBertForMaskedLM"),rwo=o(" (DistilBERT model)"),two=l(),C1=a("li"),nde=a("strong"),awo=o("electra"),nwo=o(" \u2014 "),vj=a("a"),swo=o("ElectraForMaskedLM"),lwo=o(" (ELECTRA model)"),iwo=l(),w1=a("li"),sde=a("strong"),dwo=o("flaubert"),cwo=o(" \u2014 "),Fj=a("a"),fwo=o("FlaubertWithLMHeadModel"),mwo=o(" (FlauBERT model)"),gwo=l(),A1=a("li"),lde=a("strong"),hwo=o("fnet"),pwo=o(" \u2014 "),Tj=a("a"),uwo=o("FNetForMaskedLM"),_wo=o(" (FNet model)"),bwo=l(),y1=a("li"),ide=a("strong"),vwo=o("funnel"),Fwo=o(" \u2014 "),Mj=a("a"),Two=o("FunnelForMaskedLM"),Mwo=o(" (Funnel Transformer model)"),Ewo=l(),L1=a("li"),dde=a("strong"),Cwo=o("ibert"),wwo=o(" \u2014 "),Ej=a("a"),Awo=o("IBertForMaskedLM"),ywo=o(" (I-BERT model)"),Lwo=l(),x1=a("li"),cde=a("strong"),xwo=o("layoutlm"),$wo=o(" \u2014 "),Cj=a("a"),kwo=o("LayoutLMForMaskedLM"),Swo=o(" (LayoutLM model)"),Rwo=l(),$1=a("li"),fde=a("strong"),Bwo=o("longformer"),Pwo=o(" \u2014 "),wj=a("a"),Iwo=o("LongformerForMaskedLM"),qwo=o(" (Longformer model)"),Nwo=l(),k1=a("li"),mde=a("strong"),jwo=o("mbart"),Dwo=o(" \u2014 "),Aj=a("a"),Gwo=o("MBartForConditionalGeneration"),Owo=o(" (mBART model)"),Vwo=l(),S1=a("li"),gde=a("strong"),Xwo=o("megatron-bert"),zwo=o(" \u2014 "),yj=a("a"),Qwo=o("MegatronBertForMaskedLM"),Wwo=o(" (MegatronBert model)"),Hwo=l(),R1=a("li"),hde=a("strong"),Uwo=o("mobilebert"),Jwo=o(" \u2014 "),Lj=a("a"),Ywo=o("MobileBertForMaskedLM"),Kwo=o(" (MobileBERT model)"),Zwo=l(),B1=a("li"),pde=a("strong"),eAo=o("mpnet"),oAo=o(" \u2014 "),xj=a("a"),rAo=o("MPNetForMaskedLM"),tAo=o(" (MPNet model)"),aAo=l(),P1=a("li"),ude=a("strong"),nAo=o("nystromformer"),sAo=o(" \u2014 "),$j=a("a"),lAo=o("NystromformerForMaskedLM"),iAo=o(" (Nystromformer model)"),dAo=l(),I1=a("li"),_de=a("strong"),cAo=o("perceiver"),fAo=o(" \u2014 "),kj=a("a"),mAo=o("PerceiverForMaskedLM"),gAo=o(" (Perceiver model)"),hAo=l(),q1=a("li"),bde=a("strong"),pAo=o("qdqbert"),uAo=o(" \u2014 "),Sj=a("a"),_Ao=o("QDQBertForMaskedLM"),bAo=o(" (QDQBert model)"),vAo=l(),N1=a("li"),vde=a("strong"),FAo=o("reformer"),TAo=o(" \u2014 "),Rj=a("a"),MAo=o("ReformerForMaskedLM"),EAo=o(" (Reformer model)"),CAo=l(),j1=a("li"),Fde=a("strong"),wAo=o("rembert"),AAo=o(" \u2014 "),Bj=a("a"),yAo=o("RemBertForMaskedLM"),LAo=o(" (RemBERT model)"),xAo=l(),D1=a("li"),Tde=a("strong"),$Ao=o("roberta"),kAo=o(" \u2014 "),Pj=a("a"),SAo=o("RobertaForMaskedLM"),RAo=o(" (RoBERTa model)"),BAo=l(),G1=a("li"),Mde=a("strong"),PAo=o("roformer"),IAo=o(" \u2014 "),Ij=a("a"),qAo=o("RoFormerForMaskedLM"),NAo=o(" (RoFormer model)"),jAo=l(),O1=a("li"),Ede=a("strong"),DAo=o("squeezebert"),GAo=o(" \u2014 "),qj=a("a"),OAo=o("SqueezeBertForMaskedLM"),VAo=o(" (SqueezeBERT model)"),XAo=l(),V1=a("li"),Cde=a("strong"),zAo=o("tapas"),QAo=o(" \u2014 "),Nj=a("a"),WAo=o("TapasForMaskedLM"),HAo=o(" (TAPAS model)"),UAo=l(),X1=a("li"),wde=a("strong"),JAo=o("wav2vec2"),YAo=o(" \u2014 "),Ade=a("code"),KAo=o("Wav2Vec2ForMaskedLM"),ZAo=o(" (Wav2Vec2 model)"),e0o=l(),z1=a("li"),yde=a("strong"),o0o=o("xlm"),r0o=o(" \u2014 "),jj=a("a"),t0o=o("XLMWithLMHeadModel"),a0o=o(" (XLM model)"),n0o=l(),Q1=a("li"),Lde=a("strong"),s0o=o("xlm-roberta"),l0o=o(" \u2014 "),Dj=a("a"),i0o=o("XLMRobertaForMaskedLM"),d0o=o(" (XLM-RoBERTa model)"),c0o=l(),W1=a("li"),xde=a("strong"),f0o=o("xlm-roberta-xl"),m0o=o(" \u2014 "),Gj=a("a"),g0o=o("XLMRobertaXLForMaskedLM"),h0o=o(" (XLM-RoBERTa-XL model)"),p0o=l(),H1=a("li"),$de=a("strong"),u0o=o("yoso"),_0o=o(" \u2014 "),Oj=a("a"),b0o=o("YosoForMaskedLM"),v0o=o(" (YOSO model)"),F0o=l(),U1=a("p"),T0o=o("The model is set in evaluation mode by default using "),kde=a("code"),M0o=o("model.eval()"),E0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),C0o=o("model.train()"),w0o=l(),F(J1.$$.fragment),hIe=l(),Bi=a("h2"),Y1=a("a"),Rde=a("span"),F(zy.$$.fragment),A0o=l(),Bde=a("span"),y0o=o("AutoModelForSeq2SeqLM"),pIe=l(),So=a("div"),F(Qy.$$.fragment),L0o=l(),Pi=a("p"),x0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Vj=a("a"),$0o=o("from_pretrained()"),k0o=o(" class method or the "),Xj=a("a"),S0o=o("from_config()"),R0o=o(` class
method.`),B0o=l(),Wy=a("p"),P0o=o("This class cannot be instantiated directly using "),Pde=a("code"),I0o=o("__init__()"),q0o=o(" (throws an error)."),N0o=l(),nt=a("div"),F(Hy.$$.fragment),j0o=l(),Ide=a("p"),D0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G0o=l(),Ii=a("p"),O0o=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),V0o=o("not"),X0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),z0o=o("from_pretrained()"),Q0o=o(" to load the model weights."),W0o=l(),F(K1.$$.fragment),H0o=l(),Ke=a("div"),F(Uy.$$.fragment),U0o=l(),Nde=a("p"),J0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y0o=l(),$a=a("p"),K0o=o("The model class to instantiate is selected based on the "),jde=a("code"),Z0o=o("model_type"),eyo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),oyo=o("pretrained_model_name_or_path"),ryo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(":"),nyo=l(),pe=a("ul"),Z1=a("li"),Ode=a("strong"),syo=o("bart"),lyo=o(" \u2014 "),Qj=a("a"),iyo=o("BartForConditionalGeneration"),dyo=o(" (BART model)"),cyo=l(),eb=a("li"),Vde=a("strong"),fyo=o("bigbird_pegasus"),myo=o(" \u2014 "),Wj=a("a"),gyo=o("BigBirdPegasusForConditionalGeneration"),hyo=o(" (BigBirdPegasus model)"),pyo=l(),ob=a("li"),Xde=a("strong"),uyo=o("blenderbot"),_yo=o(" \u2014 "),Hj=a("a"),byo=o("BlenderbotForConditionalGeneration"),vyo=o(" (Blenderbot model)"),Fyo=l(),rb=a("li"),zde=a("strong"),Tyo=o("blenderbot-small"),Myo=o(" \u2014 "),Uj=a("a"),Eyo=o("BlenderbotSmallForConditionalGeneration"),Cyo=o(" (BlenderbotSmall model)"),wyo=l(),tb=a("li"),Qde=a("strong"),Ayo=o("encoder-decoder"),yyo=o(" \u2014 "),Jj=a("a"),Lyo=o("EncoderDecoderModel"),xyo=o(" (Encoder decoder model)"),$yo=l(),ab=a("li"),Wde=a("strong"),kyo=o("fsmt"),Syo=o(" \u2014 "),Yj=a("a"),Ryo=o("FSMTForConditionalGeneration"),Byo=o(" (FairSeq Machine-Translation model)"),Pyo=l(),nb=a("li"),Hde=a("strong"),Iyo=o("led"),qyo=o(" \u2014 "),Kj=a("a"),Nyo=o("LEDForConditionalGeneration"),jyo=o(" (LED model)"),Dyo=l(),sb=a("li"),Ude=a("strong"),Gyo=o("m2m_100"),Oyo=o(" \u2014 "),Zj=a("a"),Vyo=o("M2M100ForConditionalGeneration"),Xyo=o(" (M2M100 model)"),zyo=l(),lb=a("li"),Jde=a("strong"),Qyo=o("marian"),Wyo=o(" \u2014 "),eD=a("a"),Hyo=o("MarianMTModel"),Uyo=o(" (Marian model)"),Jyo=l(),ib=a("li"),Yde=a("strong"),Yyo=o("mbart"),Kyo=o(" \u2014 "),oD=a("a"),Zyo=o("MBartForConditionalGeneration"),eLo=o(" (mBART model)"),oLo=l(),db=a("li"),Kde=a("strong"),rLo=o("mt5"),tLo=o(" \u2014 "),rD=a("a"),aLo=o("MT5ForConditionalGeneration"),nLo=o(" (mT5 model)"),sLo=l(),cb=a("li"),Zde=a("strong"),lLo=o("pegasus"),iLo=o(" \u2014 "),tD=a("a"),dLo=o("PegasusForConditionalGeneration"),cLo=o(" (Pegasus model)"),fLo=l(),fb=a("li"),ece=a("strong"),mLo=o("plbart"),gLo=o(" \u2014 "),aD=a("a"),hLo=o("PLBartForConditionalGeneration"),pLo=o(" (PLBart model)"),uLo=l(),mb=a("li"),oce=a("strong"),_Lo=o("prophetnet"),bLo=o(" \u2014 "),nD=a("a"),vLo=o("ProphetNetForConditionalGeneration"),FLo=o(" (ProphetNet model)"),TLo=l(),gb=a("li"),rce=a("strong"),MLo=o("t5"),ELo=o(" \u2014 "),sD=a("a"),CLo=o("T5ForConditionalGeneration"),wLo=o(" (T5 model)"),ALo=l(),hb=a("li"),tce=a("strong"),yLo=o("xlm-prophetnet"),LLo=o(" \u2014 "),lD=a("a"),xLo=o("XLMProphetNetForConditionalGeneration"),$Lo=o(" (XLMProphetNet model)"),kLo=l(),pb=a("p"),SLo=o("The model is set in evaluation mode by default using "),ace=a("code"),RLo=o("model.eval()"),BLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),PLo=o("model.train()"),ILo=l(),F(ub.$$.fragment),uIe=l(),qi=a("h2"),_b=a("a"),sce=a("span"),F(Jy.$$.fragment),qLo=l(),lce=a("span"),NLo=o("AutoModelForSequenceClassification"),_Ie=l(),Ro=a("div"),F(Yy.$$.fragment),jLo=l(),Ni=a("p"),DLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=a("a"),GLo=o("from_pretrained()"),OLo=o(" class method or the "),dD=a("a"),VLo=o("from_config()"),XLo=o(` class
method.`),zLo=l(),Ky=a("p"),QLo=o("This class cannot be instantiated directly using "),ice=a("code"),WLo=o("__init__()"),HLo=o(" (throws an error)."),ULo=l(),st=a("div"),F(Zy.$$.fragment),JLo=l(),dce=a("p"),YLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KLo=l(),ji=a("p"),ZLo=o(`Note:
Loading a model from its configuration file does `),cce=a("strong"),e8o=o("not"),o8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),r8o=o("from_pretrained()"),t8o=o(" to load the model weights."),a8o=l(),F(bb.$$.fragment),n8o=l(),Ze=a("div"),F(eL.$$.fragment),s8o=l(),fce=a("p"),l8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),i8o=l(),ka=a("p"),d8o=o("The model class to instantiate is selected based on the "),mce=a("code"),c8o=o("model_type"),f8o=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),m8o=o("pretrained_model_name_or_path"),g8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),h8o=o("pretrained_model_name_or_path"),p8o=o(":"),u8o=l(),N=a("ul"),vb=a("li"),pce=a("strong"),_8o=o("albert"),b8o=o(" \u2014 "),fD=a("a"),v8o=o("AlbertForSequenceClassification"),F8o=o(" (ALBERT model)"),T8o=l(),Fb=a("li"),uce=a("strong"),M8o=o("bart"),E8o=o(" \u2014 "),mD=a("a"),C8o=o("BartForSequenceClassification"),w8o=o(" (BART model)"),A8o=l(),Tb=a("li"),_ce=a("strong"),y8o=o("bert"),L8o=o(" \u2014 "),gD=a("a"),x8o=o("BertForSequenceClassification"),$8o=o(" (BERT model)"),k8o=l(),Mb=a("li"),bce=a("strong"),S8o=o("big_bird"),R8o=o(" \u2014 "),hD=a("a"),B8o=o("BigBirdForSequenceClassification"),P8o=o(" (BigBird model)"),I8o=l(),Eb=a("li"),vce=a("strong"),q8o=o("bigbird_pegasus"),N8o=o(" \u2014 "),pD=a("a"),j8o=o("BigBirdPegasusForSequenceClassification"),D8o=o(" (BigBirdPegasus model)"),G8o=l(),Cb=a("li"),Fce=a("strong"),O8o=o("camembert"),V8o=o(" \u2014 "),uD=a("a"),X8o=o("CamembertForSequenceClassification"),z8o=o(" (CamemBERT model)"),Q8o=l(),wb=a("li"),Tce=a("strong"),W8o=o("canine"),H8o=o(" \u2014 "),_D=a("a"),U8o=o("CanineForSequenceClassification"),J8o=o(" (Canine model)"),Y8o=l(),Ab=a("li"),Mce=a("strong"),K8o=o("convbert"),Z8o=o(" \u2014 "),bD=a("a"),exo=o("ConvBertForSequenceClassification"),oxo=o(" (ConvBERT model)"),rxo=l(),yb=a("li"),Ece=a("strong"),txo=o("ctrl"),axo=o(" \u2014 "),vD=a("a"),nxo=o("CTRLForSequenceClassification"),sxo=o(" (CTRL model)"),lxo=l(),Lb=a("li"),Cce=a("strong"),ixo=o("data2vec-text"),dxo=o(" \u2014 "),FD=a("a"),cxo=o("Data2VecTextForSequenceClassification"),fxo=o(" (Data2VecText model)"),mxo=l(),xb=a("li"),wce=a("strong"),gxo=o("deberta"),hxo=o(" \u2014 "),TD=a("a"),pxo=o("DebertaForSequenceClassification"),uxo=o(" (DeBERTa model)"),_xo=l(),$b=a("li"),Ace=a("strong"),bxo=o("deberta-v2"),vxo=o(" \u2014 "),MD=a("a"),Fxo=o("DebertaV2ForSequenceClassification"),Txo=o(" (DeBERTa-v2 model)"),Mxo=l(),kb=a("li"),yce=a("strong"),Exo=o("distilbert"),Cxo=o(" \u2014 "),ED=a("a"),wxo=o("DistilBertForSequenceClassification"),Axo=o(" (DistilBERT model)"),yxo=l(),Sb=a("li"),Lce=a("strong"),Lxo=o("electra"),xxo=o(" \u2014 "),CD=a("a"),$xo=o("ElectraForSequenceClassification"),kxo=o(" (ELECTRA model)"),Sxo=l(),Rb=a("li"),xce=a("strong"),Rxo=o("flaubert"),Bxo=o(" \u2014 "),wD=a("a"),Pxo=o("FlaubertForSequenceClassification"),Ixo=o(" (FlauBERT model)"),qxo=l(),Bb=a("li"),$ce=a("strong"),Nxo=o("fnet"),jxo=o(" \u2014 "),AD=a("a"),Dxo=o("FNetForSequenceClassification"),Gxo=o(" (FNet model)"),Oxo=l(),Pb=a("li"),kce=a("strong"),Vxo=o("funnel"),Xxo=o(" \u2014 "),yD=a("a"),zxo=o("FunnelForSequenceClassification"),Qxo=o(" (Funnel Transformer model)"),Wxo=l(),Ib=a("li"),Sce=a("strong"),Hxo=o("gpt2"),Uxo=o(" \u2014 "),LD=a("a"),Jxo=o("GPT2ForSequenceClassification"),Yxo=o(" (OpenAI GPT-2 model)"),Kxo=l(),qb=a("li"),Rce=a("strong"),Zxo=o("gpt_neo"),e7o=o(" \u2014 "),xD=a("a"),o7o=o("GPTNeoForSequenceClassification"),r7o=o(" (GPT Neo model)"),t7o=l(),Nb=a("li"),Bce=a("strong"),a7o=o("gptj"),n7o=o(" \u2014 "),$D=a("a"),s7o=o("GPTJForSequenceClassification"),l7o=o(" (GPT-J model)"),i7o=l(),jb=a("li"),Pce=a("strong"),d7o=o("ibert"),c7o=o(" \u2014 "),kD=a("a"),f7o=o("IBertForSequenceClassification"),m7o=o(" (I-BERT model)"),g7o=l(),Db=a("li"),Ice=a("strong"),h7o=o("layoutlm"),p7o=o(" \u2014 "),SD=a("a"),u7o=o("LayoutLMForSequenceClassification"),_7o=o(" (LayoutLM model)"),b7o=l(),Gb=a("li"),qce=a("strong"),v7o=o("layoutlmv2"),F7o=o(" \u2014 "),RD=a("a"),T7o=o("LayoutLMv2ForSequenceClassification"),M7o=o(" (LayoutLMv2 model)"),E7o=l(),Ob=a("li"),Nce=a("strong"),C7o=o("led"),w7o=o(" \u2014 "),BD=a("a"),A7o=o("LEDForSequenceClassification"),y7o=o(" (LED model)"),L7o=l(),Vb=a("li"),jce=a("strong"),x7o=o("longformer"),$7o=o(" \u2014 "),PD=a("a"),k7o=o("LongformerForSequenceClassification"),S7o=o(" (Longformer model)"),R7o=l(),Xb=a("li"),Dce=a("strong"),B7o=o("mbart"),P7o=o(" \u2014 "),ID=a("a"),I7o=o("MBartForSequenceClassification"),q7o=o(" (mBART model)"),N7o=l(),zb=a("li"),Gce=a("strong"),j7o=o("megatron-bert"),D7o=o(" \u2014 "),qD=a("a"),G7o=o("MegatronBertForSequenceClassification"),O7o=o(" (MegatronBert model)"),V7o=l(),Qb=a("li"),Oce=a("strong"),X7o=o("mobilebert"),z7o=o(" \u2014 "),ND=a("a"),Q7o=o("MobileBertForSequenceClassification"),W7o=o(" (MobileBERT model)"),H7o=l(),Wb=a("li"),Vce=a("strong"),U7o=o("mpnet"),J7o=o(" \u2014 "),jD=a("a"),Y7o=o("MPNetForSequenceClassification"),K7o=o(" (MPNet model)"),Z7o=l(),Hb=a("li"),Xce=a("strong"),e9o=o("nystromformer"),o9o=o(" \u2014 "),DD=a("a"),r9o=o("NystromformerForSequenceClassification"),t9o=o(" (Nystromformer model)"),a9o=l(),Ub=a("li"),zce=a("strong"),n9o=o("openai-gpt"),s9o=o(" \u2014 "),GD=a("a"),l9o=o("OpenAIGPTForSequenceClassification"),i9o=o(" (OpenAI GPT model)"),d9o=l(),Jb=a("li"),Qce=a("strong"),c9o=o("perceiver"),f9o=o(" \u2014 "),OD=a("a"),m9o=o("PerceiverForSequenceClassification"),g9o=o(" (Perceiver model)"),h9o=l(),Yb=a("li"),Wce=a("strong"),p9o=o("plbart"),u9o=o(" \u2014 "),VD=a("a"),_9o=o("PLBartForSequenceClassification"),b9o=o(" (PLBart model)"),v9o=l(),Kb=a("li"),Hce=a("strong"),F9o=o("qdqbert"),T9o=o(" \u2014 "),XD=a("a"),M9o=o("QDQBertForSequenceClassification"),E9o=o(" (QDQBert model)"),C9o=l(),Zb=a("li"),Uce=a("strong"),w9o=o("reformer"),A9o=o(" \u2014 "),zD=a("a"),y9o=o("ReformerForSequenceClassification"),L9o=o(" (Reformer model)"),x9o=l(),e4=a("li"),Jce=a("strong"),$9o=o("rembert"),k9o=o(" \u2014 "),QD=a("a"),S9o=o("RemBertForSequenceClassification"),R9o=o(" (RemBERT model)"),B9o=l(),o4=a("li"),Yce=a("strong"),P9o=o("roberta"),I9o=o(" \u2014 "),WD=a("a"),q9o=o("RobertaForSequenceClassification"),N9o=o(" (RoBERTa model)"),j9o=l(),r4=a("li"),Kce=a("strong"),D9o=o("roformer"),G9o=o(" \u2014 "),HD=a("a"),O9o=o("RoFormerForSequenceClassification"),V9o=o(" (RoFormer model)"),X9o=l(),t4=a("li"),Zce=a("strong"),z9o=o("squeezebert"),Q9o=o(" \u2014 "),UD=a("a"),W9o=o("SqueezeBertForSequenceClassification"),H9o=o(" (SqueezeBERT model)"),U9o=l(),a4=a("li"),efe=a("strong"),J9o=o("tapas"),Y9o=o(" \u2014 "),JD=a("a"),K9o=o("TapasForSequenceClassification"),Z9o=o(" (TAPAS model)"),e$o=l(),n4=a("li"),ofe=a("strong"),o$o=o("transfo-xl"),r$o=o(" \u2014 "),YD=a("a"),t$o=o("TransfoXLForSequenceClassification"),a$o=o(" (Transformer-XL model)"),n$o=l(),s4=a("li"),rfe=a("strong"),s$o=o("xlm"),l$o=o(" \u2014 "),KD=a("a"),i$o=o("XLMForSequenceClassification"),d$o=o(" (XLM model)"),c$o=l(),l4=a("li"),tfe=a("strong"),f$o=o("xlm-roberta"),m$o=o(" \u2014 "),ZD=a("a"),g$o=o("XLMRobertaForSequenceClassification"),h$o=o(" (XLM-RoBERTa model)"),p$o=l(),i4=a("li"),afe=a("strong"),u$o=o("xlm-roberta-xl"),_$o=o(" \u2014 "),eG=a("a"),b$o=o("XLMRobertaXLForSequenceClassification"),v$o=o(" (XLM-RoBERTa-XL model)"),F$o=l(),d4=a("li"),nfe=a("strong"),T$o=o("xlnet"),M$o=o(" \u2014 "),oG=a("a"),E$o=o("XLNetForSequenceClassification"),C$o=o(" (XLNet model)"),w$o=l(),c4=a("li"),sfe=a("strong"),A$o=o("yoso"),y$o=o(" \u2014 "),rG=a("a"),L$o=o("YosoForSequenceClassification"),x$o=o(" (YOSO model)"),$$o=l(),f4=a("p"),k$o=o("The model is set in evaluation mode by default using "),lfe=a("code"),S$o=o("model.eval()"),R$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),B$o=o("model.train()"),P$o=l(),F(m4.$$.fragment),bIe=l(),Di=a("h2"),g4=a("a"),dfe=a("span"),F(oL.$$.fragment),I$o=l(),cfe=a("span"),q$o=o("AutoModelForMultipleChoice"),vIe=l(),Bo=a("div"),F(rL.$$.fragment),N$o=l(),Gi=a("p"),j$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tG=a("a"),D$o=o("from_pretrained()"),G$o=o(" class method or the "),aG=a("a"),O$o=o("from_config()"),V$o=o(` class
method.`),X$o=l(),tL=a("p"),z$o=o("This class cannot be instantiated directly using "),ffe=a("code"),Q$o=o("__init__()"),W$o=o(" (throws an error)."),H$o=l(),lt=a("div"),F(aL.$$.fragment),U$o=l(),mfe=a("p"),J$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y$o=l(),Oi=a("p"),K$o=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),Z$o=o("not"),eko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),oko=o("from_pretrained()"),rko=o(" to load the model weights."),tko=l(),F(h4.$$.fragment),ako=l(),eo=a("div"),F(nL.$$.fragment),nko=l(),hfe=a("p"),sko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lko=l(),Sa=a("p"),iko=o("The model class to instantiate is selected based on the "),pfe=a("code"),dko=o("model_type"),cko=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),fko=o("pretrained_model_name_or_path"),mko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=a("code"),gko=o("pretrained_model_name_or_path"),hko=o(":"),pko=l(),Y=a("ul"),p4=a("li"),bfe=a("strong"),uko=o("albert"),_ko=o(" \u2014 "),sG=a("a"),bko=o("AlbertForMultipleChoice"),vko=o(" (ALBERT model)"),Fko=l(),u4=a("li"),vfe=a("strong"),Tko=o("bert"),Mko=o(" \u2014 "),lG=a("a"),Eko=o("BertForMultipleChoice"),Cko=o(" (BERT model)"),wko=l(),_4=a("li"),Ffe=a("strong"),Ako=o("big_bird"),yko=o(" \u2014 "),iG=a("a"),Lko=o("BigBirdForMultipleChoice"),xko=o(" (BigBird model)"),$ko=l(),b4=a("li"),Tfe=a("strong"),kko=o("camembert"),Sko=o(" \u2014 "),dG=a("a"),Rko=o("CamembertForMultipleChoice"),Bko=o(" (CamemBERT model)"),Pko=l(),v4=a("li"),Mfe=a("strong"),Iko=o("canine"),qko=o(" \u2014 "),cG=a("a"),Nko=o("CanineForMultipleChoice"),jko=o(" (Canine model)"),Dko=l(),F4=a("li"),Efe=a("strong"),Gko=o("convbert"),Oko=o(" \u2014 "),fG=a("a"),Vko=o("ConvBertForMultipleChoice"),Xko=o(" (ConvBERT model)"),zko=l(),T4=a("li"),Cfe=a("strong"),Qko=o("data2vec-text"),Wko=o(" \u2014 "),mG=a("a"),Hko=o("Data2VecTextForMultipleChoice"),Uko=o(" (Data2VecText model)"),Jko=l(),M4=a("li"),wfe=a("strong"),Yko=o("deberta-v2"),Kko=o(" \u2014 "),gG=a("a"),Zko=o("DebertaV2ForMultipleChoice"),eSo=o(" (DeBERTa-v2 model)"),oSo=l(),E4=a("li"),Afe=a("strong"),rSo=o("distilbert"),tSo=o(" \u2014 "),hG=a("a"),aSo=o("DistilBertForMultipleChoice"),nSo=o(" (DistilBERT model)"),sSo=l(),C4=a("li"),yfe=a("strong"),lSo=o("electra"),iSo=o(" \u2014 "),pG=a("a"),dSo=o("ElectraForMultipleChoice"),cSo=o(" (ELECTRA model)"),fSo=l(),w4=a("li"),Lfe=a("strong"),mSo=o("flaubert"),gSo=o(" \u2014 "),uG=a("a"),hSo=o("FlaubertForMultipleChoice"),pSo=o(" (FlauBERT model)"),uSo=l(),A4=a("li"),xfe=a("strong"),_So=o("fnet"),bSo=o(" \u2014 "),_G=a("a"),vSo=o("FNetForMultipleChoice"),FSo=o(" (FNet model)"),TSo=l(),y4=a("li"),$fe=a("strong"),MSo=o("funnel"),ESo=o(" \u2014 "),bG=a("a"),CSo=o("FunnelForMultipleChoice"),wSo=o(" (Funnel Transformer model)"),ASo=l(),L4=a("li"),kfe=a("strong"),ySo=o("ibert"),LSo=o(" \u2014 "),vG=a("a"),xSo=o("IBertForMultipleChoice"),$So=o(" (I-BERT model)"),kSo=l(),x4=a("li"),Sfe=a("strong"),SSo=o("longformer"),RSo=o(" \u2014 "),FG=a("a"),BSo=o("LongformerForMultipleChoice"),PSo=o(" (Longformer model)"),ISo=l(),$4=a("li"),Rfe=a("strong"),qSo=o("megatron-bert"),NSo=o(" \u2014 "),TG=a("a"),jSo=o("MegatronBertForMultipleChoice"),DSo=o(" (MegatronBert model)"),GSo=l(),k4=a("li"),Bfe=a("strong"),OSo=o("mobilebert"),VSo=o(" \u2014 "),MG=a("a"),XSo=o("MobileBertForMultipleChoice"),zSo=o(" (MobileBERT model)"),QSo=l(),S4=a("li"),Pfe=a("strong"),WSo=o("mpnet"),HSo=o(" \u2014 "),EG=a("a"),USo=o("MPNetForMultipleChoice"),JSo=o(" (MPNet model)"),YSo=l(),R4=a("li"),Ife=a("strong"),KSo=o("nystromformer"),ZSo=o(" \u2014 "),CG=a("a"),eRo=o("NystromformerForMultipleChoice"),oRo=o(" (Nystromformer model)"),rRo=l(),B4=a("li"),qfe=a("strong"),tRo=o("qdqbert"),aRo=o(" \u2014 "),wG=a("a"),nRo=o("QDQBertForMultipleChoice"),sRo=o(" (QDQBert model)"),lRo=l(),P4=a("li"),Nfe=a("strong"),iRo=o("rembert"),dRo=o(" \u2014 "),AG=a("a"),cRo=o("RemBertForMultipleChoice"),fRo=o(" (RemBERT model)"),mRo=l(),I4=a("li"),jfe=a("strong"),gRo=o("roberta"),hRo=o(" \u2014 "),yG=a("a"),pRo=o("RobertaForMultipleChoice"),uRo=o(" (RoBERTa model)"),_Ro=l(),q4=a("li"),Dfe=a("strong"),bRo=o("roformer"),vRo=o(" \u2014 "),LG=a("a"),FRo=o("RoFormerForMultipleChoice"),TRo=o(" (RoFormer model)"),MRo=l(),N4=a("li"),Gfe=a("strong"),ERo=o("squeezebert"),CRo=o(" \u2014 "),xG=a("a"),wRo=o("SqueezeBertForMultipleChoice"),ARo=o(" (SqueezeBERT model)"),yRo=l(),j4=a("li"),Ofe=a("strong"),LRo=o("xlm"),xRo=o(" \u2014 "),$G=a("a"),$Ro=o("XLMForMultipleChoice"),kRo=o(" (XLM model)"),SRo=l(),D4=a("li"),Vfe=a("strong"),RRo=o("xlm-roberta"),BRo=o(" \u2014 "),kG=a("a"),PRo=o("XLMRobertaForMultipleChoice"),IRo=o(" (XLM-RoBERTa model)"),qRo=l(),G4=a("li"),Xfe=a("strong"),NRo=o("xlm-roberta-xl"),jRo=o(" \u2014 "),SG=a("a"),DRo=o("XLMRobertaXLForMultipleChoice"),GRo=o(" (XLM-RoBERTa-XL model)"),ORo=l(),O4=a("li"),zfe=a("strong"),VRo=o("xlnet"),XRo=o(" \u2014 "),RG=a("a"),zRo=o("XLNetForMultipleChoice"),QRo=o(" (XLNet model)"),WRo=l(),V4=a("li"),Qfe=a("strong"),HRo=o("yoso"),URo=o(" \u2014 "),BG=a("a"),JRo=o("YosoForMultipleChoice"),YRo=o(" (YOSO model)"),KRo=l(),X4=a("p"),ZRo=o("The model is set in evaluation mode by default using "),Wfe=a("code"),eBo=o("model.eval()"),oBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=a("code"),rBo=o("model.train()"),tBo=l(),F(z4.$$.fragment),FIe=l(),Vi=a("h2"),Q4=a("a"),Ufe=a("span"),F(sL.$$.fragment),aBo=l(),Jfe=a("span"),nBo=o("AutoModelForNextSentencePrediction"),TIe=l(),Po=a("div"),F(lL.$$.fragment),sBo=l(),Xi=a("p"),lBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PG=a("a"),iBo=o("from_pretrained()"),dBo=o(" class method or the "),IG=a("a"),cBo=o("from_config()"),fBo=o(` class
method.`),mBo=l(),iL=a("p"),gBo=o("This class cannot be instantiated directly using "),Yfe=a("code"),hBo=o("__init__()"),pBo=o(" (throws an error)."),uBo=l(),it=a("div"),F(dL.$$.fragment),_Bo=l(),Kfe=a("p"),bBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vBo=l(),zi=a("p"),FBo=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),TBo=o("not"),MBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),EBo=o("from_pretrained()"),CBo=o(" to load the model weights."),wBo=l(),F(W4.$$.fragment),ABo=l(),oo=a("div"),F(cL.$$.fragment),yBo=l(),eme=a("p"),LBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xBo=l(),Ra=a("p"),$Bo=o("The model class to instantiate is selected based on the "),ome=a("code"),kBo=o("model_type"),SBo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),RBo=o("pretrained_model_name_or_path"),BBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),PBo=o("pretrained_model_name_or_path"),IBo=o(":"),qBo=l(),Yr=a("ul"),H4=a("li"),ame=a("strong"),NBo=o("bert"),jBo=o(" \u2014 "),NG=a("a"),DBo=o("BertForNextSentencePrediction"),GBo=o(" (BERT model)"),OBo=l(),U4=a("li"),nme=a("strong"),VBo=o("fnet"),XBo=o(" \u2014 "),jG=a("a"),zBo=o("FNetForNextSentencePrediction"),QBo=o(" (FNet model)"),WBo=l(),J4=a("li"),sme=a("strong"),HBo=o("megatron-bert"),UBo=o(" \u2014 "),DG=a("a"),JBo=o("MegatronBertForNextSentencePrediction"),YBo=o(" (MegatronBert model)"),KBo=l(),Y4=a("li"),lme=a("strong"),ZBo=o("mobilebert"),ePo=o(" \u2014 "),GG=a("a"),oPo=o("MobileBertForNextSentencePrediction"),rPo=o(" (MobileBERT model)"),tPo=l(),K4=a("li"),ime=a("strong"),aPo=o("qdqbert"),nPo=o(" \u2014 "),OG=a("a"),sPo=o("QDQBertForNextSentencePrediction"),lPo=o(" (QDQBert model)"),iPo=l(),Z4=a("p"),dPo=o("The model is set in evaluation mode by default using "),dme=a("code"),cPo=o("model.eval()"),fPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),mPo=o("model.train()"),gPo=l(),F(e2.$$.fragment),MIe=l(),Qi=a("h2"),o2=a("a"),fme=a("span"),F(fL.$$.fragment),hPo=l(),mme=a("span"),pPo=o("AutoModelForTokenClassification"),EIe=l(),Io=a("div"),F(mL.$$.fragment),uPo=l(),Wi=a("p"),_Po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VG=a("a"),bPo=o("from_pretrained()"),vPo=o(" class method or the "),XG=a("a"),FPo=o("from_config()"),TPo=o(` class
method.`),MPo=l(),gL=a("p"),EPo=o("This class cannot be instantiated directly using "),gme=a("code"),CPo=o("__init__()"),wPo=o(" (throws an error)."),APo=l(),dt=a("div"),F(hL.$$.fragment),yPo=l(),hme=a("p"),LPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xPo=l(),Hi=a("p"),$Po=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),kPo=o("not"),SPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),RPo=o("from_pretrained()"),BPo=o(" to load the model weights."),PPo=l(),F(r2.$$.fragment),IPo=l(),ro=a("div"),F(pL.$$.fragment),qPo=l(),ume=a("p"),NPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jPo=l(),Ba=a("p"),DPo=o("The model class to instantiate is selected based on the "),_me=a("code"),GPo=o("model_type"),OPo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),VPo=o("pretrained_model_name_or_path"),XPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),zPo=o("pretrained_model_name_or_path"),QPo=o(":"),WPo=l(),U=a("ul"),t2=a("li"),Fme=a("strong"),HPo=o("albert"),UPo=o(" \u2014 "),QG=a("a"),JPo=o("AlbertForTokenClassification"),YPo=o(" (ALBERT model)"),KPo=l(),a2=a("li"),Tme=a("strong"),ZPo=o("bert"),eIo=o(" \u2014 "),WG=a("a"),oIo=o("BertForTokenClassification"),rIo=o(" (BERT model)"),tIo=l(),n2=a("li"),Mme=a("strong"),aIo=o("big_bird"),nIo=o(" \u2014 "),HG=a("a"),sIo=o("BigBirdForTokenClassification"),lIo=o(" (BigBird model)"),iIo=l(),s2=a("li"),Eme=a("strong"),dIo=o("camembert"),cIo=o(" \u2014 "),UG=a("a"),fIo=o("CamembertForTokenClassification"),mIo=o(" (CamemBERT model)"),gIo=l(),l2=a("li"),Cme=a("strong"),hIo=o("canine"),pIo=o(" \u2014 "),JG=a("a"),uIo=o("CanineForTokenClassification"),_Io=o(" (Canine model)"),bIo=l(),i2=a("li"),wme=a("strong"),vIo=o("convbert"),FIo=o(" \u2014 "),YG=a("a"),TIo=o("ConvBertForTokenClassification"),MIo=o(" (ConvBERT model)"),EIo=l(),d2=a("li"),Ame=a("strong"),CIo=o("data2vec-text"),wIo=o(" \u2014 "),KG=a("a"),AIo=o("Data2VecTextForTokenClassification"),yIo=o(" (Data2VecText model)"),LIo=l(),c2=a("li"),yme=a("strong"),xIo=o("deberta"),$Io=o(" \u2014 "),ZG=a("a"),kIo=o("DebertaForTokenClassification"),SIo=o(" (DeBERTa model)"),RIo=l(),f2=a("li"),Lme=a("strong"),BIo=o("deberta-v2"),PIo=o(" \u2014 "),eO=a("a"),IIo=o("DebertaV2ForTokenClassification"),qIo=o(" (DeBERTa-v2 model)"),NIo=l(),m2=a("li"),xme=a("strong"),jIo=o("distilbert"),DIo=o(" \u2014 "),oO=a("a"),GIo=o("DistilBertForTokenClassification"),OIo=o(" (DistilBERT model)"),VIo=l(),g2=a("li"),$me=a("strong"),XIo=o("electra"),zIo=o(" \u2014 "),rO=a("a"),QIo=o("ElectraForTokenClassification"),WIo=o(" (ELECTRA model)"),HIo=l(),h2=a("li"),kme=a("strong"),UIo=o("flaubert"),JIo=o(" \u2014 "),tO=a("a"),YIo=o("FlaubertForTokenClassification"),KIo=o(" (FlauBERT model)"),ZIo=l(),p2=a("li"),Sme=a("strong"),eqo=o("fnet"),oqo=o(" \u2014 "),aO=a("a"),rqo=o("FNetForTokenClassification"),tqo=o(" (FNet model)"),aqo=l(),u2=a("li"),Rme=a("strong"),nqo=o("funnel"),sqo=o(" \u2014 "),nO=a("a"),lqo=o("FunnelForTokenClassification"),iqo=o(" (Funnel Transformer model)"),dqo=l(),_2=a("li"),Bme=a("strong"),cqo=o("gpt2"),fqo=o(" \u2014 "),sO=a("a"),mqo=o("GPT2ForTokenClassification"),gqo=o(" (OpenAI GPT-2 model)"),hqo=l(),b2=a("li"),Pme=a("strong"),pqo=o("ibert"),uqo=o(" \u2014 "),lO=a("a"),_qo=o("IBertForTokenClassification"),bqo=o(" (I-BERT model)"),vqo=l(),v2=a("li"),Ime=a("strong"),Fqo=o("layoutlm"),Tqo=o(" \u2014 "),iO=a("a"),Mqo=o("LayoutLMForTokenClassification"),Eqo=o(" (LayoutLM model)"),Cqo=l(),F2=a("li"),qme=a("strong"),wqo=o("layoutlmv2"),Aqo=o(" \u2014 "),dO=a("a"),yqo=o("LayoutLMv2ForTokenClassification"),Lqo=o(" (LayoutLMv2 model)"),xqo=l(),T2=a("li"),Nme=a("strong"),$qo=o("longformer"),kqo=o(" \u2014 "),cO=a("a"),Sqo=o("LongformerForTokenClassification"),Rqo=o(" (Longformer model)"),Bqo=l(),M2=a("li"),jme=a("strong"),Pqo=o("megatron-bert"),Iqo=o(" \u2014 "),fO=a("a"),qqo=o("MegatronBertForTokenClassification"),Nqo=o(" (MegatronBert model)"),jqo=l(),E2=a("li"),Dme=a("strong"),Dqo=o("mobilebert"),Gqo=o(" \u2014 "),mO=a("a"),Oqo=o("MobileBertForTokenClassification"),Vqo=o(" (MobileBERT model)"),Xqo=l(),C2=a("li"),Gme=a("strong"),zqo=o("mpnet"),Qqo=o(" \u2014 "),gO=a("a"),Wqo=o("MPNetForTokenClassification"),Hqo=o(" (MPNet model)"),Uqo=l(),w2=a("li"),Ome=a("strong"),Jqo=o("nystromformer"),Yqo=o(" \u2014 "),hO=a("a"),Kqo=o("NystromformerForTokenClassification"),Zqo=o(" (Nystromformer model)"),eNo=l(),A2=a("li"),Vme=a("strong"),oNo=o("qdqbert"),rNo=o(" \u2014 "),pO=a("a"),tNo=o("QDQBertForTokenClassification"),aNo=o(" (QDQBert model)"),nNo=l(),y2=a("li"),Xme=a("strong"),sNo=o("rembert"),lNo=o(" \u2014 "),uO=a("a"),iNo=o("RemBertForTokenClassification"),dNo=o(" (RemBERT model)"),cNo=l(),L2=a("li"),zme=a("strong"),fNo=o("roberta"),mNo=o(" \u2014 "),_O=a("a"),gNo=o("RobertaForTokenClassification"),hNo=o(" (RoBERTa model)"),pNo=l(),x2=a("li"),Qme=a("strong"),uNo=o("roformer"),_No=o(" \u2014 "),bO=a("a"),bNo=o("RoFormerForTokenClassification"),vNo=o(" (RoFormer model)"),FNo=l(),$2=a("li"),Wme=a("strong"),TNo=o("squeezebert"),MNo=o(" \u2014 "),vO=a("a"),ENo=o("SqueezeBertForTokenClassification"),CNo=o(" (SqueezeBERT model)"),wNo=l(),k2=a("li"),Hme=a("strong"),ANo=o("xlm"),yNo=o(" \u2014 "),FO=a("a"),LNo=o("XLMForTokenClassification"),xNo=o(" (XLM model)"),$No=l(),S2=a("li"),Ume=a("strong"),kNo=o("xlm-roberta"),SNo=o(" \u2014 "),TO=a("a"),RNo=o("XLMRobertaForTokenClassification"),BNo=o(" (XLM-RoBERTa model)"),PNo=l(),R2=a("li"),Jme=a("strong"),INo=o("xlm-roberta-xl"),qNo=o(" \u2014 "),MO=a("a"),NNo=o("XLMRobertaXLForTokenClassification"),jNo=o(" (XLM-RoBERTa-XL model)"),DNo=l(),B2=a("li"),Yme=a("strong"),GNo=o("xlnet"),ONo=o(" \u2014 "),EO=a("a"),VNo=o("XLNetForTokenClassification"),XNo=o(" (XLNet model)"),zNo=l(),P2=a("li"),Kme=a("strong"),QNo=o("yoso"),WNo=o(" \u2014 "),CO=a("a"),HNo=o("YosoForTokenClassification"),UNo=o(" (YOSO model)"),JNo=l(),I2=a("p"),YNo=o("The model is set in evaluation mode by default using "),Zme=a("code"),KNo=o("model.eval()"),ZNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),ejo=o("model.train()"),ojo=l(),F(q2.$$.fragment),CIe=l(),Ui=a("h2"),N2=a("a"),oge=a("span"),F(uL.$$.fragment),rjo=l(),rge=a("span"),tjo=o("AutoModelForQuestionAnswering"),wIe=l(),qo=a("div"),F(_L.$$.fragment),ajo=l(),Ji=a("p"),njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wO=a("a"),sjo=o("from_pretrained()"),ljo=o(" class method or the "),AO=a("a"),ijo=o("from_config()"),djo=o(` class
method.`),cjo=l(),bL=a("p"),fjo=o("This class cannot be instantiated directly using "),tge=a("code"),mjo=o("__init__()"),gjo=o(" (throws an error)."),hjo=l(),ct=a("div"),F(vL.$$.fragment),pjo=l(),age=a("p"),ujo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_jo=l(),Yi=a("p"),bjo=o(`Note:
Loading a model from its configuration file does `),nge=a("strong"),vjo=o("not"),Fjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" to load the model weights."),Ejo=l(),F(j2.$$.fragment),Cjo=l(),to=a("div"),F(FL.$$.fragment),wjo=l(),sge=a("p"),Ajo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yjo=l(),Pa=a("p"),Ljo=o("The model class to instantiate is selected based on the "),lge=a("code"),xjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),kjo=o("pretrained_model_name_or_path"),Sjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),Rjo=o("pretrained_model_name_or_path"),Bjo=o(":"),Pjo=l(),O=a("ul"),D2=a("li"),cge=a("strong"),Ijo=o("albert"),qjo=o(" \u2014 "),LO=a("a"),Njo=o("AlbertForQuestionAnswering"),jjo=o(" (ALBERT model)"),Djo=l(),G2=a("li"),fge=a("strong"),Gjo=o("bart"),Ojo=o(" \u2014 "),xO=a("a"),Vjo=o("BartForQuestionAnswering"),Xjo=o(" (BART model)"),zjo=l(),O2=a("li"),mge=a("strong"),Qjo=o("bert"),Wjo=o(" \u2014 "),$O=a("a"),Hjo=o("BertForQuestionAnswering"),Ujo=o(" (BERT model)"),Jjo=l(),V2=a("li"),gge=a("strong"),Yjo=o("big_bird"),Kjo=o(" \u2014 "),kO=a("a"),Zjo=o("BigBirdForQuestionAnswering"),eDo=o(" (BigBird model)"),oDo=l(),X2=a("li"),hge=a("strong"),rDo=o("bigbird_pegasus"),tDo=o(" \u2014 "),SO=a("a"),aDo=o("BigBirdPegasusForQuestionAnswering"),nDo=o(" (BigBirdPegasus model)"),sDo=l(),z2=a("li"),pge=a("strong"),lDo=o("camembert"),iDo=o(" \u2014 "),RO=a("a"),dDo=o("CamembertForQuestionAnswering"),cDo=o(" (CamemBERT model)"),fDo=l(),Q2=a("li"),uge=a("strong"),mDo=o("canine"),gDo=o(" \u2014 "),BO=a("a"),hDo=o("CanineForQuestionAnswering"),pDo=o(" (Canine model)"),uDo=l(),W2=a("li"),_ge=a("strong"),_Do=o("convbert"),bDo=o(" \u2014 "),PO=a("a"),vDo=o("ConvBertForQuestionAnswering"),FDo=o(" (ConvBERT model)"),TDo=l(),H2=a("li"),bge=a("strong"),MDo=o("data2vec-text"),EDo=o(" \u2014 "),IO=a("a"),CDo=o("Data2VecTextForQuestionAnswering"),wDo=o(" (Data2VecText model)"),ADo=l(),U2=a("li"),vge=a("strong"),yDo=o("deberta"),LDo=o(" \u2014 "),qO=a("a"),xDo=o("DebertaForQuestionAnswering"),$Do=o(" (DeBERTa model)"),kDo=l(),J2=a("li"),Fge=a("strong"),SDo=o("deberta-v2"),RDo=o(" \u2014 "),NO=a("a"),BDo=o("DebertaV2ForQuestionAnswering"),PDo=o(" (DeBERTa-v2 model)"),IDo=l(),Y2=a("li"),Tge=a("strong"),qDo=o("distilbert"),NDo=o(" \u2014 "),jO=a("a"),jDo=o("DistilBertForQuestionAnswering"),DDo=o(" (DistilBERT model)"),GDo=l(),K2=a("li"),Mge=a("strong"),ODo=o("electra"),VDo=o(" \u2014 "),DO=a("a"),XDo=o("ElectraForQuestionAnswering"),zDo=o(" (ELECTRA model)"),QDo=l(),Z2=a("li"),Ege=a("strong"),WDo=o("flaubert"),HDo=o(" \u2014 "),GO=a("a"),UDo=o("FlaubertForQuestionAnsweringSimple"),JDo=o(" (FlauBERT model)"),YDo=l(),e5=a("li"),Cge=a("strong"),KDo=o("fnet"),ZDo=o(" \u2014 "),OO=a("a"),eGo=o("FNetForQuestionAnswering"),oGo=o(" (FNet model)"),rGo=l(),o5=a("li"),wge=a("strong"),tGo=o("funnel"),aGo=o(" \u2014 "),VO=a("a"),nGo=o("FunnelForQuestionAnswering"),sGo=o(" (Funnel Transformer model)"),lGo=l(),r5=a("li"),Age=a("strong"),iGo=o("gptj"),dGo=o(" \u2014 "),XO=a("a"),cGo=o("GPTJForQuestionAnswering"),fGo=o(" (GPT-J model)"),mGo=l(),t5=a("li"),yge=a("strong"),gGo=o("ibert"),hGo=o(" \u2014 "),zO=a("a"),pGo=o("IBertForQuestionAnswering"),uGo=o(" (I-BERT model)"),_Go=l(),a5=a("li"),Lge=a("strong"),bGo=o("layoutlmv2"),vGo=o(" \u2014 "),QO=a("a"),FGo=o("LayoutLMv2ForQuestionAnswering"),TGo=o(" (LayoutLMv2 model)"),MGo=l(),n5=a("li"),xge=a("strong"),EGo=o("led"),CGo=o(" \u2014 "),WO=a("a"),wGo=o("LEDForQuestionAnswering"),AGo=o(" (LED model)"),yGo=l(),s5=a("li"),$ge=a("strong"),LGo=o("longformer"),xGo=o(" \u2014 "),HO=a("a"),$Go=o("LongformerForQuestionAnswering"),kGo=o(" (Longformer model)"),SGo=l(),l5=a("li"),kge=a("strong"),RGo=o("lxmert"),BGo=o(" \u2014 "),UO=a("a"),PGo=o("LxmertForQuestionAnswering"),IGo=o(" (LXMERT model)"),qGo=l(),i5=a("li"),Sge=a("strong"),NGo=o("mbart"),jGo=o(" \u2014 "),JO=a("a"),DGo=o("MBartForQuestionAnswering"),GGo=o(" (mBART model)"),OGo=l(),d5=a("li"),Rge=a("strong"),VGo=o("megatron-bert"),XGo=o(" \u2014 "),YO=a("a"),zGo=o("MegatronBertForQuestionAnswering"),QGo=o(" (MegatronBert model)"),WGo=l(),c5=a("li"),Bge=a("strong"),HGo=o("mobilebert"),UGo=o(" \u2014 "),KO=a("a"),JGo=o("MobileBertForQuestionAnswering"),YGo=o(" (MobileBERT model)"),KGo=l(),f5=a("li"),Pge=a("strong"),ZGo=o("mpnet"),eOo=o(" \u2014 "),ZO=a("a"),oOo=o("MPNetForQuestionAnswering"),rOo=o(" (MPNet model)"),tOo=l(),m5=a("li"),Ige=a("strong"),aOo=o("nystromformer"),nOo=o(" \u2014 "),eV=a("a"),sOo=o("NystromformerForQuestionAnswering"),lOo=o(" (Nystromformer model)"),iOo=l(),g5=a("li"),qge=a("strong"),dOo=o("qdqbert"),cOo=o(" \u2014 "),oV=a("a"),fOo=o("QDQBertForQuestionAnswering"),mOo=o(" (QDQBert model)"),gOo=l(),h5=a("li"),Nge=a("strong"),hOo=o("reformer"),pOo=o(" \u2014 "),rV=a("a"),uOo=o("ReformerForQuestionAnswering"),_Oo=o(" (Reformer model)"),bOo=l(),p5=a("li"),jge=a("strong"),vOo=o("rembert"),FOo=o(" \u2014 "),tV=a("a"),TOo=o("RemBertForQuestionAnswering"),MOo=o(" (RemBERT model)"),EOo=l(),u5=a("li"),Dge=a("strong"),COo=o("roberta"),wOo=o(" \u2014 "),aV=a("a"),AOo=o("RobertaForQuestionAnswering"),yOo=o(" (RoBERTa model)"),LOo=l(),_5=a("li"),Gge=a("strong"),xOo=o("roformer"),$Oo=o(" \u2014 "),nV=a("a"),kOo=o("RoFormerForQuestionAnswering"),SOo=o(" (RoFormer model)"),ROo=l(),b5=a("li"),Oge=a("strong"),BOo=o("splinter"),POo=o(" \u2014 "),sV=a("a"),IOo=o("SplinterForQuestionAnswering"),qOo=o(" (Splinter model)"),NOo=l(),v5=a("li"),Vge=a("strong"),jOo=o("squeezebert"),DOo=o(" \u2014 "),lV=a("a"),GOo=o("SqueezeBertForQuestionAnswering"),OOo=o(" (SqueezeBERT model)"),VOo=l(),F5=a("li"),Xge=a("strong"),XOo=o("xlm"),zOo=o(" \u2014 "),iV=a("a"),QOo=o("XLMForQuestionAnsweringSimple"),WOo=o(" (XLM model)"),HOo=l(),T5=a("li"),zge=a("strong"),UOo=o("xlm-roberta"),JOo=o(" \u2014 "),dV=a("a"),YOo=o("XLMRobertaForQuestionAnswering"),KOo=o(" (XLM-RoBERTa model)"),ZOo=l(),M5=a("li"),Qge=a("strong"),eVo=o("xlm-roberta-xl"),oVo=o(" \u2014 "),cV=a("a"),rVo=o("XLMRobertaXLForQuestionAnswering"),tVo=o(" (XLM-RoBERTa-XL model)"),aVo=l(),E5=a("li"),Wge=a("strong"),nVo=o("xlnet"),sVo=o(" \u2014 "),fV=a("a"),lVo=o("XLNetForQuestionAnsweringSimple"),iVo=o(" (XLNet model)"),dVo=l(),C5=a("li"),Hge=a("strong"),cVo=o("yoso"),fVo=o(" \u2014 "),mV=a("a"),mVo=o("YosoForQuestionAnswering"),gVo=o(" (YOSO model)"),hVo=l(),w5=a("p"),pVo=o("The model is set in evaluation mode by default using "),Uge=a("code"),uVo=o("model.eval()"),_Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),bVo=o("model.train()"),vVo=l(),F(A5.$$.fragment),AIe=l(),Ki=a("h2"),y5=a("a"),Yge=a("span"),F(TL.$$.fragment),FVo=l(),Kge=a("span"),TVo=o("AutoModelForTableQuestionAnswering"),yIe=l(),No=a("div"),F(ML.$$.fragment),MVo=l(),Zi=a("p"),EVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gV=a("a"),CVo=o("from_pretrained()"),wVo=o(" class method or the "),hV=a("a"),AVo=o("from_config()"),yVo=o(` class
method.`),LVo=l(),EL=a("p"),xVo=o("This class cannot be instantiated directly using "),Zge=a("code"),$Vo=o("__init__()"),kVo=o(" (throws an error)."),SVo=l(),ft=a("div"),F(CL.$$.fragment),RVo=l(),ehe=a("p"),BVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),PVo=l(),ed=a("p"),IVo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),qVo=o("not"),NVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),jVo=o("from_pretrained()"),DVo=o(" to load the model weights."),GVo=l(),F(L5.$$.fragment),OVo=l(),ao=a("div"),F(wL.$$.fragment),VVo=l(),rhe=a("p"),XVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zVo=l(),Ia=a("p"),QVo=o("The model class to instantiate is selected based on the "),the=a("code"),WVo=o("model_type"),HVo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),UVo=o("pretrained_model_name_or_path"),JVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(":"),ZVo=l(),she=a("ul"),x5=a("li"),lhe=a("strong"),eXo=o("tapas"),oXo=o(" \u2014 "),uV=a("a"),rXo=o("TapasForQuestionAnswering"),tXo=o(" (TAPAS model)"),aXo=l(),$5=a("p"),nXo=o("The model is set in evaluation mode by default using "),ihe=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),iXo=o("model.train()"),dXo=l(),F(k5.$$.fragment),LIe=l(),od=a("h2"),S5=a("a"),che=a("span"),F(AL.$$.fragment),cXo=l(),fhe=a("span"),fXo=o("AutoModelForImageClassification"),xIe=l(),jo=a("div"),F(yL.$$.fragment),mXo=l(),rd=a("p"),gXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_V=a("a"),hXo=o("from_pretrained()"),pXo=o(" class method or the "),bV=a("a"),uXo=o("from_config()"),_Xo=o(` class
method.`),bXo=l(),LL=a("p"),vXo=o("This class cannot be instantiated directly using "),mhe=a("code"),FXo=o("__init__()"),TXo=o(" (throws an error)."),MXo=l(),mt=a("div"),F(xL.$$.fragment),EXo=l(),ghe=a("p"),CXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wXo=l(),td=a("p"),AXo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),yXo=o("not"),LXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),xXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),kXo=l(),F(R5.$$.fragment),SXo=l(),no=a("div"),F($L.$$.fragment),RXo=l(),phe=a("p"),BXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PXo=l(),qa=a("p"),IXo=o("The model class to instantiate is selected based on the "),uhe=a("code"),qXo=o("model_type"),NXo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),jXo=o("pretrained_model_name_or_path"),DXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(":"),VXo=l(),Fe=a("ul"),B5=a("li"),vhe=a("strong"),XXo=o("beit"),zXo=o(" \u2014 "),FV=a("a"),QXo=o("BeitForImageClassification"),WXo=o(" (BEiT model)"),HXo=l(),P5=a("li"),Fhe=a("strong"),UXo=o("convnext"),JXo=o(" \u2014 "),TV=a("a"),YXo=o("ConvNextForImageClassification"),KXo=o(" (ConvNext model)"),ZXo=l(),I5=a("li"),The=a("strong"),ezo=o("data2vec-vision"),ozo=o(" \u2014 "),MV=a("a"),rzo=o("Data2VecVisionForImageClassification"),tzo=o(" (Data2VecVision model)"),azo=l(),Bs=a("li"),Mhe=a("strong"),nzo=o("deit"),szo=o(" \u2014 "),EV=a("a"),lzo=o("DeiTForImageClassification"),izo=o(" or "),CV=a("a"),dzo=o("DeiTForImageClassificationWithTeacher"),czo=o(" (DeiT model)"),fzo=l(),q5=a("li"),Ehe=a("strong"),mzo=o("imagegpt"),gzo=o(" \u2014 "),wV=a("a"),hzo=o("ImageGPTForImageClassification"),pzo=o(" (ImageGPT model)"),uzo=l(),gt=a("li"),Che=a("strong"),_zo=o("perceiver"),bzo=o(" \u2014 "),AV=a("a"),vzo=o("PerceiverForImageClassificationLearned"),Fzo=o(" or "),yV=a("a"),Tzo=o("PerceiverForImageClassificationFourier"),Mzo=o(" or "),LV=a("a"),Ezo=o("PerceiverForImageClassificationConvProcessing"),Czo=o(" (Perceiver model)"),wzo=l(),N5=a("li"),whe=a("strong"),Azo=o("poolformer"),yzo=o(" \u2014 "),xV=a("a"),Lzo=o("PoolFormerForImageClassification"),xzo=o(" (PoolFormer model)"),$zo=l(),j5=a("li"),Ahe=a("strong"),kzo=o("regnet"),Szo=o(" \u2014 "),$V=a("a"),Rzo=o("RegNetForImageClassification"),Bzo=o(" (RegNet model)"),Pzo=l(),D5=a("li"),yhe=a("strong"),Izo=o("resnet"),qzo=o(" \u2014 "),kV=a("a"),Nzo=o("ResNetForImageClassification"),jzo=o(" (ResNet model)"),Dzo=l(),G5=a("li"),Lhe=a("strong"),Gzo=o("segformer"),Ozo=o(" \u2014 "),SV=a("a"),Vzo=o("SegformerForImageClassification"),Xzo=o(" (SegFormer model)"),zzo=l(),O5=a("li"),xhe=a("strong"),Qzo=o("swin"),Wzo=o(" \u2014 "),RV=a("a"),Hzo=o("SwinForImageClassification"),Uzo=o(" (Swin model)"),Jzo=l(),V5=a("li"),$he=a("strong"),Yzo=o("van"),Kzo=o(" \u2014 "),BV=a("a"),Zzo=o("VanForImageClassification"),eQo=o(" (VAN model)"),oQo=l(),X5=a("li"),khe=a("strong"),rQo=o("vit"),tQo=o(" \u2014 "),PV=a("a"),aQo=o("ViTForImageClassification"),nQo=o(" (ViT model)"),sQo=l(),z5=a("p"),lQo=o("The model is set in evaluation mode by default using "),She=a("code"),iQo=o("model.eval()"),dQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),cQo=o("model.train()"),fQo=l(),F(Q5.$$.fragment),$Ie=l(),ad=a("h2"),W5=a("a"),Bhe=a("span"),F(kL.$$.fragment),mQo=l(),Phe=a("span"),gQo=o("AutoModelForVision2Seq"),kIe=l(),Do=a("div"),F(SL.$$.fragment),hQo=l(),nd=a("p"),pQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IV=a("a"),uQo=o("from_pretrained()"),_Qo=o(" class method or the "),qV=a("a"),bQo=o("from_config()"),vQo=o(` class
method.`),FQo=l(),RL=a("p"),TQo=o("This class cannot be instantiated directly using "),Ihe=a("code"),MQo=o("__init__()"),EQo=o(" (throws an error)."),CQo=l(),ht=a("div"),F(BL.$$.fragment),wQo=l(),qhe=a("p"),AQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yQo=l(),sd=a("p"),LQo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),xQo=o("not"),$Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),kQo=o("from_pretrained()"),SQo=o(" to load the model weights."),RQo=l(),F(H5.$$.fragment),BQo=l(),so=a("div"),F(PL.$$.fragment),PQo=l(),jhe=a("p"),IQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qQo=l(),Na=a("p"),NQo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),jQo=o("model_type"),DQo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),GQo=o("pretrained_model_name_or_path"),OQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(":"),zQo=l(),Vhe=a("ul"),U5=a("li"),Xhe=a("strong"),QQo=o("vision-encoder-decoder"),WQo=o(" \u2014 "),jV=a("a"),HQo=o("VisionEncoderDecoderModel"),UQo=o(" (Vision Encoder decoder model)"),JQo=l(),J5=a("p"),YQo=o("The model is set in evaluation mode by default using "),zhe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),eWo=o("model.train()"),oWo=l(),F(Y5.$$.fragment),SIe=l(),ld=a("h2"),K5=a("a"),Whe=a("span"),F(IL.$$.fragment),rWo=l(),Hhe=a("span"),tWo=o("AutoModelForAudioClassification"),RIe=l(),Go=a("div"),F(qL.$$.fragment),aWo=l(),id=a("p"),nWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DV=a("a"),sWo=o("from_pretrained()"),lWo=o(" class method or the "),GV=a("a"),iWo=o("from_config()"),dWo=o(` class
method.`),cWo=l(),NL=a("p"),fWo=o("This class cannot be instantiated directly using "),Uhe=a("code"),mWo=o("__init__()"),gWo=o(" (throws an error)."),hWo=l(),pt=a("div"),F(jL.$$.fragment),pWo=l(),Jhe=a("p"),uWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Wo=l(),dd=a("p"),bWo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),vWo=o("not"),FWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),TWo=o("from_pretrained()"),MWo=o(" to load the model weights."),EWo=l(),F(Z5.$$.fragment),CWo=l(),lo=a("div"),F(DL.$$.fragment),wWo=l(),Khe=a("p"),AWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yWo=l(),ja=a("p"),LWo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),xWo=o("model_type"),$Wo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),kWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),RWo=o("pretrained_model_name_or_path"),BWo=o(":"),PWo=l(),Ne=a("ul"),e3=a("li"),rpe=a("strong"),IWo=o("data2vec-audio"),qWo=o(" \u2014 "),VV=a("a"),NWo=o("Data2VecAudioForSequenceClassification"),jWo=o(" (Data2VecAudio model)"),DWo=l(),o3=a("li"),tpe=a("strong"),GWo=o("hubert"),OWo=o(" \u2014 "),XV=a("a"),VWo=o("HubertForSequenceClassification"),XWo=o(" (Hubert model)"),zWo=l(),r3=a("li"),ape=a("strong"),QWo=o("sew"),WWo=o(" \u2014 "),zV=a("a"),HWo=o("SEWForSequenceClassification"),UWo=o(" (SEW model)"),JWo=l(),t3=a("li"),npe=a("strong"),YWo=o("sew-d"),KWo=o(" \u2014 "),QV=a("a"),ZWo=o("SEWDForSequenceClassification"),eHo=o(" (SEW-D model)"),oHo=l(),a3=a("li"),spe=a("strong"),rHo=o("unispeech"),tHo=o(" \u2014 "),WV=a("a"),aHo=o("UniSpeechForSequenceClassification"),nHo=o(" (UniSpeech model)"),sHo=l(),n3=a("li"),lpe=a("strong"),lHo=o("unispeech-sat"),iHo=o(" \u2014 "),HV=a("a"),dHo=o("UniSpeechSatForSequenceClassification"),cHo=o(" (UniSpeechSat model)"),fHo=l(),s3=a("li"),ipe=a("strong"),mHo=o("wav2vec2"),gHo=o(" \u2014 "),UV=a("a"),hHo=o("Wav2Vec2ForSequenceClassification"),pHo=o(" (Wav2Vec2 model)"),uHo=l(),l3=a("li"),dpe=a("strong"),_Ho=o("wavlm"),bHo=o(" \u2014 "),JV=a("a"),vHo=o("WavLMForSequenceClassification"),FHo=o(" (WavLM model)"),THo=l(),i3=a("p"),MHo=o("The model is set in evaluation mode by default using "),cpe=a("code"),EHo=o("model.eval()"),CHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),wHo=o("model.train()"),AHo=l(),F(d3.$$.fragment),BIe=l(),cd=a("h2"),c3=a("a"),mpe=a("span"),F(GL.$$.fragment),yHo=l(),gpe=a("span"),LHo=o("AutoModelForAudioFrameClassification"),PIe=l(),Oo=a("div"),F(OL.$$.fragment),xHo=l(),fd=a("p"),$Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YV=a("a"),kHo=o("from_pretrained()"),SHo=o(" class method or the "),KV=a("a"),RHo=o("from_config()"),BHo=o(` class
method.`),PHo=l(),VL=a("p"),IHo=o("This class cannot be instantiated directly using "),hpe=a("code"),qHo=o("__init__()"),NHo=o(" (throws an error)."),jHo=l(),ut=a("div"),F(XL.$$.fragment),DHo=l(),ppe=a("p"),GHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),OHo=l(),md=a("p"),VHo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),XHo=o("not"),zHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),QHo=o("from_pretrained()"),WHo=o(" to load the model weights."),HHo=l(),F(f3.$$.fragment),UHo=l(),io=a("div"),F(zL.$$.fragment),JHo=l(),_pe=a("p"),YHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),KHo=l(),Da=a("p"),ZHo=o("The model class to instantiate is selected based on the "),bpe=a("code"),eUo=o("model_type"),oUo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),rUo=o("pretrained_model_name_or_path"),tUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(":"),sUo=l(),Ga=a("ul"),m3=a("li"),Tpe=a("strong"),lUo=o("data2vec-audio"),iUo=o(" \u2014 "),eX=a("a"),dUo=o("Data2VecAudioForAudioFrameClassification"),cUo=o(" (Data2VecAudio model)"),fUo=l(),g3=a("li"),Mpe=a("strong"),mUo=o("unispeech-sat"),gUo=o(" \u2014 "),oX=a("a"),hUo=o("UniSpeechSatForAudioFrameClassification"),pUo=o(" (UniSpeechSat model)"),uUo=l(),h3=a("li"),Epe=a("strong"),_Uo=o("wav2vec2"),bUo=o(" \u2014 "),rX=a("a"),vUo=o("Wav2Vec2ForAudioFrameClassification"),FUo=o(" (Wav2Vec2 model)"),TUo=l(),p3=a("li"),Cpe=a("strong"),MUo=o("wavlm"),EUo=o(" \u2014 "),tX=a("a"),CUo=o("WavLMForAudioFrameClassification"),wUo=o(" (WavLM model)"),AUo=l(),u3=a("p"),yUo=o("The model is set in evaluation mode by default using "),wpe=a("code"),LUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),$Uo=o("model.train()"),kUo=l(),F(_3.$$.fragment),IIe=l(),gd=a("h2"),b3=a("a"),ype=a("span"),F(QL.$$.fragment),SUo=l(),Lpe=a("span"),RUo=o("AutoModelForCTC"),qIe=l(),Vo=a("div"),F(WL.$$.fragment),BUo=l(),hd=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aX=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),nX=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),HL=a("p"),GUo=o("This class cannot be instantiated directly using "),xpe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),_t=a("div"),F(UL.$$.fragment),zUo=l(),$pe=a("p"),QUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),WUo=l(),pd=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(v3.$$.fragment),eJo=l(),co=a("div"),F(JL.$$.fragment),oJo=l(),Spe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),tJo=l(),Oa=a("p"),aJo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),je=a("ul"),F3=a("li"),Ipe=a("strong"),mJo=o("data2vec-audio"),gJo=o(" \u2014 "),lX=a("a"),hJo=o("Data2VecAudioForCTC"),pJo=o(" (Data2VecAudio model)"),uJo=l(),T3=a("li"),qpe=a("strong"),_Jo=o("hubert"),bJo=o(" \u2014 "),iX=a("a"),vJo=o("HubertForCTC"),FJo=o(" (Hubert model)"),TJo=l(),M3=a("li"),Npe=a("strong"),MJo=o("sew"),EJo=o(" \u2014 "),dX=a("a"),CJo=o("SEWForCTC"),wJo=o(" (SEW model)"),AJo=l(),E3=a("li"),jpe=a("strong"),yJo=o("sew-d"),LJo=o(" \u2014 "),cX=a("a"),xJo=o("SEWDForCTC"),$Jo=o(" (SEW-D model)"),kJo=l(),C3=a("li"),Dpe=a("strong"),SJo=o("unispeech"),RJo=o(" \u2014 "),fX=a("a"),BJo=o("UniSpeechForCTC"),PJo=o(" (UniSpeech model)"),IJo=l(),w3=a("li"),Gpe=a("strong"),qJo=o("unispeech-sat"),NJo=o(" \u2014 "),mX=a("a"),jJo=o("UniSpeechSatForCTC"),DJo=o(" (UniSpeechSat model)"),GJo=l(),A3=a("li"),Ope=a("strong"),OJo=o("wav2vec2"),VJo=o(" \u2014 "),gX=a("a"),XJo=o("Wav2Vec2ForCTC"),zJo=o(" (Wav2Vec2 model)"),QJo=l(),y3=a("li"),Vpe=a("strong"),WJo=o("wavlm"),HJo=o(" \u2014 "),hX=a("a"),UJo=o("WavLMForCTC"),JJo=o(" (WavLM model)"),YJo=l(),L3=a("p"),KJo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),ZJo=o("model.eval()"),eYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),oYo=o("model.train()"),rYo=l(),F(x3.$$.fragment),NIe=l(),ud=a("h2"),$3=a("a"),Qpe=a("span"),F(YL.$$.fragment),tYo=l(),Wpe=a("span"),aYo=o("AutoModelForSpeechSeq2Seq"),jIe=l(),Xo=a("div"),F(KL.$$.fragment),nYo=l(),_d=a("p"),sYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pX=a("a"),lYo=o("from_pretrained()"),iYo=o(" class method or the "),uX=a("a"),dYo=o("from_config()"),cYo=o(` class
method.`),fYo=l(),ZL=a("p"),mYo=o("This class cannot be instantiated directly using "),Hpe=a("code"),gYo=o("__init__()"),hYo=o(" (throws an error)."),pYo=l(),bt=a("div"),F(e8.$$.fragment),uYo=l(),Upe=a("p"),_Yo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bYo=l(),bd=a("p"),vYo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),FYo=o("not"),TYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),MYo=o("from_pretrained()"),EYo=o(" to load the model weights."),CYo=l(),F(k3.$$.fragment),wYo=l(),fo=a("div"),F(o8.$$.fragment),AYo=l(),Ype=a("p"),yYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LYo=l(),Va=a("p"),xYo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),$Yo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),BYo=o("pretrained_model_name_or_path"),PYo=o(":"),IYo=l(),r8=a("ul"),S3=a("li"),oue=a("strong"),qYo=o("speech-encoder-decoder"),NYo=o(" \u2014 "),bX=a("a"),jYo=o("SpeechEncoderDecoderModel"),DYo=o(" (Speech Encoder decoder model)"),GYo=l(),R3=a("li"),rue=a("strong"),OYo=o("speech_to_text"),VYo=o(" \u2014 "),vX=a("a"),XYo=o("Speech2TextForConditionalGeneration"),zYo=o(" (Speech2Text model)"),QYo=l(),B3=a("p"),WYo=o("The model is set in evaluation mode by default using "),tue=a("code"),HYo=o("model.eval()"),UYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),JYo=o("model.train()"),YYo=l(),F(P3.$$.fragment),DIe=l(),vd=a("h2"),I3=a("a"),nue=a("span"),F(t8.$$.fragment),KYo=l(),sue=a("span"),ZYo=o("AutoModelForAudioXVector"),GIe=l(),zo=a("div"),F(a8.$$.fragment),eKo=l(),Fd=a("p"),oKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FX=a("a"),rKo=o("from_pretrained()"),tKo=o(" class method or the "),TX=a("a"),aKo=o("from_config()"),nKo=o(` class
method.`),sKo=l(),n8=a("p"),lKo=o("This class cannot be instantiated directly using "),lue=a("code"),iKo=o("__init__()"),dKo=o(" (throws an error)."),cKo=l(),vt=a("div"),F(s8.$$.fragment),fKo=l(),iue=a("p"),mKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gKo=l(),Td=a("p"),hKo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),pKo=o("not"),uKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),_Ko=o("from_pretrained()"),bKo=o(" to load the model weights."),vKo=l(),F(q3.$$.fragment),FKo=l(),mo=a("div"),F(l8.$$.fragment),TKo=l(),cue=a("p"),MKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),EKo=l(),Xa=a("p"),CKo=o("The model class to instantiate is selected based on the "),fue=a("code"),wKo=o("model_type"),AKo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),xKo=o("pretrained_model_name_or_path"),$Ko=o(":"),kKo=l(),za=a("ul"),N3=a("li"),hue=a("strong"),SKo=o("data2vec-audio"),RKo=o(" \u2014 "),EX=a("a"),BKo=o("Data2VecAudioForXVector"),PKo=o(" (Data2VecAudio model)"),IKo=l(),j3=a("li"),pue=a("strong"),qKo=o("unispeech-sat"),NKo=o(" \u2014 "),CX=a("a"),jKo=o("UniSpeechSatForXVector"),DKo=o(" (UniSpeechSat model)"),GKo=l(),D3=a("li"),uue=a("strong"),OKo=o("wav2vec2"),VKo=o(" \u2014 "),wX=a("a"),XKo=o("Wav2Vec2ForXVector"),zKo=o(" (Wav2Vec2 model)"),QKo=l(),G3=a("li"),_ue=a("strong"),WKo=o("wavlm"),HKo=o(" \u2014 "),AX=a("a"),UKo=o("WavLMForXVector"),JKo=o(" (WavLM model)"),YKo=l(),O3=a("p"),KKo=o("The model is set in evaluation mode by default using "),bue=a("code"),ZKo=o("model.eval()"),eZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),oZo=o("model.train()"),rZo=l(),F(V3.$$.fragment),OIe=l(),Md=a("h2"),X3=a("a"),Fue=a("span"),F(i8.$$.fragment),tZo=l(),Tue=a("span"),aZo=o("AutoModelForMaskedImageModeling"),VIe=l(),Qo=a("div"),F(d8.$$.fragment),nZo=l(),Ed=a("p"),sZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yX=a("a"),lZo=o("from_pretrained()"),iZo=o(" class method or the "),LX=a("a"),dZo=o("from_config()"),cZo=o(` class
method.`),fZo=l(),c8=a("p"),mZo=o("This class cannot be instantiated directly using "),Mue=a("code"),gZo=o("__init__()"),hZo=o(" (throws an error)."),pZo=l(),Ft=a("div"),F(f8.$$.fragment),uZo=l(),Eue=a("p"),_Zo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),bZo=l(),Cd=a("p"),vZo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),FZo=o("not"),TZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),MZo=o("from_pretrained()"),EZo=o(" to load the model weights."),CZo=l(),F(z3.$$.fragment),wZo=l(),go=a("div"),F(m8.$$.fragment),AZo=l(),wue=a("p"),yZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),LZo=l(),Qa=a("p"),xZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),$Zo=o("model_type"),kZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),SZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(":"),IZo=l(),wd=a("ul"),Q3=a("li"),xue=a("strong"),qZo=o("deit"),NZo=o(" \u2014 "),$X=a("a"),jZo=o("DeiTForMaskedImageModeling"),DZo=o(" (DeiT model)"),GZo=l(),W3=a("li"),$ue=a("strong"),OZo=o("swin"),VZo=o(" \u2014 "),kX=a("a"),XZo=o("SwinForMaskedImageModeling"),zZo=o(" (Swin model)"),QZo=l(),H3=a("li"),kue=a("strong"),WZo=o("vit"),HZo=o(" \u2014 "),SX=a("a"),UZo=o("ViTForMaskedImageModeling"),JZo=o(" (ViT model)"),YZo=l(),U3=a("p"),KZo=o("The model is set in evaluation mode by default using "),Sue=a("code"),ZZo=o("model.eval()"),eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),oer=o("model.train()"),rer=l(),F(J3.$$.fragment),XIe=l(),Ad=a("h2"),Y3=a("a"),Bue=a("span"),F(g8.$$.fragment),ter=l(),Pue=a("span"),aer=o("AutoModelForObjectDetection"),zIe=l(),Wo=a("div"),F(h8.$$.fragment),ner=l(),yd=a("p"),ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RX=a("a"),ler=o("from_pretrained()"),ier=o(" class method or the "),BX=a("a"),der=o("from_config()"),cer=o(` class
method.`),fer=l(),p8=a("p"),mer=o("This class cannot be instantiated directly using "),Iue=a("code"),ger=o("__init__()"),her=o(" (throws an error)."),per=l(),Tt=a("div"),F(u8.$$.fragment),uer=l(),que=a("p"),_er=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ber=l(),Ld=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Fer=o("not"),Ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Mer=o("from_pretrained()"),Eer=o(" to load the model weights."),Cer=l(),F(K3.$$.fragment),wer=l(),ho=a("div"),F(_8.$$.fragment),Aer=l(),jue=a("p"),yer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ler=l(),Wa=a("p"),xer=o("The model class to instantiate is selected based on the "),Due=a("code"),$er=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(":"),Ier=l(),b8=a("ul"),Z3=a("li"),Vue=a("strong"),qer=o("detr"),Ner=o(" \u2014 "),IX=a("a"),jer=o("DetrForObjectDetection"),Der=o(" (DETR model)"),Ger=l(),ev=a("li"),Xue=a("strong"),Oer=o("yolos"),Ver=o(" \u2014 "),qX=a("a"),Xer=o("YolosForObjectDetection"),zer=o(" (YOLOS model)"),Qer=l(),ov=a("p"),Wer=o("The model is set in evaluation mode by default using "),zue=a("code"),Her=o("model.eval()"),Uer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=a("code"),Jer=o("model.train()"),Yer=l(),F(rv.$$.fragment),QIe=l(),xd=a("h2"),tv=a("a"),Wue=a("span"),F(v8.$$.fragment),Ker=l(),Hue=a("span"),Zer=o("AutoModelForImageSegmentation"),WIe=l(),Ho=a("div"),F(F8.$$.fragment),eor=l(),$d=a("p"),oor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NX=a("a"),ror=o("from_pretrained()"),tor=o(" class method or the "),jX=a("a"),aor=o("from_config()"),nor=o(` class
method.`),sor=l(),T8=a("p"),lor=o("This class cannot be instantiated directly using "),Uue=a("code"),ior=o("__init__()"),dor=o(" (throws an error)."),cor=l(),Mt=a("div"),F(M8.$$.fragment),mor=l(),Jue=a("p"),gor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hor=l(),kd=a("p"),por=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),uor=o("not"),_or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),bor=o("from_pretrained()"),vor=o(" to load the model weights."),For=l(),F(av.$$.fragment),Tor=l(),po=a("div"),F(E8.$$.fragment),Mor=l(),Kue=a("p"),Eor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cor=l(),Ha=a("p"),wor=o("The model class to instantiate is selected based on the "),Zue=a("code"),Aor=o("model_type"),yor=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),Lor=o("pretrained_model_name_or_path"),xor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),$or=o("pretrained_model_name_or_path"),kor=o(":"),Sor=l(),r_e=a("ul"),nv=a("li"),t_e=a("strong"),Ror=o("detr"),Bor=o(" \u2014 "),GX=a("a"),Por=o("DetrForSegmentation"),Ior=o(" (DETR model)"),qor=l(),sv=a("p"),Nor=o("The model is set in evaluation mode by default using "),a_e=a("code"),jor=o("model.eval()"),Dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=a("code"),Gor=o("model.train()"),Oor=l(),F(lv.$$.fragment),HIe=l(),Sd=a("h2"),iv=a("a"),s_e=a("span"),F(C8.$$.fragment),Vor=l(),l_e=a("span"),Xor=o("AutoModelForSemanticSegmentation"),UIe=l(),Uo=a("div"),F(w8.$$.fragment),zor=l(),Rd=a("p"),Qor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OX=a("a"),Wor=o("from_pretrained()"),Hor=o(" class method or the "),VX=a("a"),Uor=o("from_config()"),Jor=o(` class
method.`),Yor=l(),A8=a("p"),Kor=o("This class cannot be instantiated directly using "),i_e=a("code"),Zor=o("__init__()"),err=o(" (throws an error)."),orr=l(),Et=a("div"),F(y8.$$.fragment),rrr=l(),d_e=a("p"),trr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),arr=l(),Bd=a("p"),nrr=o(`Note:
Loading a model from its configuration file does `),c_e=a("strong"),srr=o("not"),lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),irr=o("from_pretrained()"),drr=o(" to load the model weights."),crr=l(),F(dv.$$.fragment),frr=l(),uo=a("div"),F(L8.$$.fragment),mrr=l(),f_e=a("p"),grr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hrr=l(),Ua=a("p"),prr=o("The model class to instantiate is selected based on the "),m_e=a("code"),urr=o("model_type"),_rr=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Frr=o("pretrained_model_name_or_path"),Trr=o(":"),Mrr=l(),Ja=a("ul"),cv=a("li"),p_e=a("strong"),Err=o("beit"),Crr=o(" \u2014 "),zX=a("a"),wrr=o("BeitForSemanticSegmentation"),Arr=o(" (BEiT model)"),yrr=l(),fv=a("li"),u_e=a("strong"),Lrr=o("data2vec-vision"),xrr=o(" \u2014 "),QX=a("a"),$rr=o("Data2VecVisionForSemanticSegmentation"),krr=o(" (Data2VecVision model)"),Srr=l(),mv=a("li"),__e=a("strong"),Rrr=o("dpt"),Brr=o(" \u2014 "),WX=a("a"),Prr=o("DPTForSemanticSegmentation"),Irr=o(" (DPT model)"),qrr=l(),gv=a("li"),b_e=a("strong"),Nrr=o("segformer"),jrr=o(" \u2014 "),HX=a("a"),Drr=o("SegformerForSemanticSegmentation"),Grr=o(" (SegFormer model)"),Orr=l(),hv=a("p"),Vrr=o("The model is set in evaluation mode by default using "),v_e=a("code"),Xrr=o("model.eval()"),zrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),Qrr=o("model.train()"),Wrr=l(),F(pv.$$.fragment),JIe=l(),Pd=a("h2"),uv=a("a"),T_e=a("span"),F(x8.$$.fragment),Hrr=l(),M_e=a("span"),Urr=o("AutoModelForInstanceSegmentation"),YIe=l(),Jo=a("div"),F($8.$$.fragment),Jrr=l(),Id=a("p"),Yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UX=a("a"),Krr=o("from_pretrained()"),Zrr=o(" class method or the "),JX=a("a"),etr=o("from_config()"),otr=o(` class
method.`),rtr=l(),k8=a("p"),ttr=o("This class cannot be instantiated directly using "),E_e=a("code"),atr=o("__init__()"),ntr=o(" (throws an error)."),str=l(),Ct=a("div"),F(S8.$$.fragment),ltr=l(),C_e=a("p"),itr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dtr=l(),qd=a("p"),ctr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),ftr=o("not"),mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),gtr=o("from_pretrained()"),htr=o(" to load the model weights."),ptr=l(),F(_v.$$.fragment),utr=l(),_o=a("div"),F(R8.$$.fragment),_tr=l(),A_e=a("p"),btr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vtr=l(),Ya=a("p"),Ftr=o("The model class to instantiate is selected based on the "),y_e=a("code"),Ttr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),Etr=o("pretrained_model_name_or_path"),Ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),ytr=l(),$_e=a("ul"),bv=a("li"),k_e=a("strong"),Ltr=o("maskformer"),xtr=o(" \u2014 "),KX=a("a"),$tr=o("MaskFormerForInstanceSegmentation"),ktr=o(" (MaskFormer model)"),Str=l(),vv=a("p"),Rtr=o("The model is set in evaluation mode by default using "),S_e=a("code"),Btr=o("model.eval()"),Ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=a("code"),Itr=o("model.train()"),qtr=l(),F(Fv.$$.fragment),KIe=l(),Nd=a("h2"),Tv=a("a"),B_e=a("span"),F(B8.$$.fragment),Ntr=l(),P_e=a("span"),jtr=o("TFAutoModel"),ZIe=l(),Yo=a("div"),F(P8.$$.fragment),Dtr=l(),jd=a("p"),Gtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZX=a("a"),Otr=o("from_pretrained()"),Vtr=o(" class method or the "),ez=a("a"),Xtr=o("from_config()"),ztr=o(` class
method.`),Qtr=l(),I8=a("p"),Wtr=o("This class cannot be instantiated directly using "),I_e=a("code"),Htr=o("__init__()"),Utr=o(" (throws an error)."),Jtr=l(),wt=a("div"),F(q8.$$.fragment),Ytr=l(),q_e=a("p"),Ktr=o("Instantiates one of the base model classes of the library from a configuration."),Ztr=l(),Dd=a("p"),ear=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),oar=o("not"),rar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),tar=o("from_pretrained()"),aar=o(" to load the model weights."),nar=l(),F(Mv.$$.fragment),sar=l(),wr=a("div"),F(N8.$$.fragment),lar=l(),j_e=a("p"),iar=o("Instantiate one of the base model classes of the library from a pretrained model."),dar=l(),Ka=a("p"),car=o("The model class to instantiate is selected based on the "),D_e=a("code"),far=o("model_type"),mar=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),gar=o("pretrained_model_name_or_path"),har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),par=o("pretrained_model_name_or_path"),uar=o(":"),_ar=l(),q=a("ul"),Ev=a("li"),V_e=a("strong"),bar=o("albert"),Far=o(" \u2014 "),rz=a("a"),Tar=o("TFAlbertModel"),Mar=o(" (ALBERT model)"),Ear=l(),Cv=a("li"),X_e=a("strong"),Car=o("bart"),war=o(" \u2014 "),tz=a("a"),Aar=o("TFBartModel"),yar=o(" (BART model)"),Lar=l(),wv=a("li"),z_e=a("strong"),xar=o("bert"),$ar=o(" \u2014 "),az=a("a"),kar=o("TFBertModel"),Sar=o(" (BERT model)"),Rar=l(),Av=a("li"),Q_e=a("strong"),Bar=o("blenderbot"),Par=o(" \u2014 "),nz=a("a"),Iar=o("TFBlenderbotModel"),qar=o(" (Blenderbot model)"),Nar=l(),yv=a("li"),W_e=a("strong"),jar=o("blenderbot-small"),Dar=o(" \u2014 "),sz=a("a"),Gar=o("TFBlenderbotSmallModel"),Oar=o(" (BlenderbotSmall model)"),Var=l(),Lv=a("li"),H_e=a("strong"),Xar=o("camembert"),zar=o(" \u2014 "),lz=a("a"),Qar=o("TFCamembertModel"),War=o(" (CamemBERT model)"),Har=l(),xv=a("li"),U_e=a("strong"),Uar=o("clip"),Jar=o(" \u2014 "),iz=a("a"),Yar=o("TFCLIPModel"),Kar=o(" (CLIP model)"),Zar=l(),$v=a("li"),J_e=a("strong"),enr=o("convbert"),onr=o(" \u2014 "),dz=a("a"),rnr=o("TFConvBertModel"),tnr=o(" (ConvBERT model)"),anr=l(),kv=a("li"),Y_e=a("strong"),nnr=o("convnext"),snr=o(" \u2014 "),cz=a("a"),lnr=o("TFConvNextModel"),inr=o(" (ConvNext model)"),dnr=l(),Sv=a("li"),K_e=a("strong"),cnr=o("ctrl"),fnr=o(" \u2014 "),fz=a("a"),mnr=o("TFCTRLModel"),gnr=o(" (CTRL model)"),hnr=l(),Rv=a("li"),Z_e=a("strong"),pnr=o("data2vec-vision"),unr=o(" \u2014 "),mz=a("a"),_nr=o("TFData2VecVisionModel"),bnr=o(" (Data2VecVision model)"),vnr=l(),Bv=a("li"),e1e=a("strong"),Fnr=o("deberta"),Tnr=o(" \u2014 "),gz=a("a"),Mnr=o("TFDebertaModel"),Enr=o(" (DeBERTa model)"),Cnr=l(),Pv=a("li"),o1e=a("strong"),wnr=o("deberta-v2"),Anr=o(" \u2014 "),hz=a("a"),ynr=o("TFDebertaV2Model"),Lnr=o(" (DeBERTa-v2 model)"),xnr=l(),Iv=a("li"),r1e=a("strong"),$nr=o("distilbert"),knr=o(" \u2014 "),pz=a("a"),Snr=o("TFDistilBertModel"),Rnr=o(" (DistilBERT model)"),Bnr=l(),qv=a("li"),t1e=a("strong"),Pnr=o("dpr"),Inr=o(" \u2014 "),uz=a("a"),qnr=o("TFDPRQuestionEncoder"),Nnr=o(" (DPR model)"),jnr=l(),Nv=a("li"),a1e=a("strong"),Dnr=o("electra"),Gnr=o(" \u2014 "),_z=a("a"),Onr=o("TFElectraModel"),Vnr=o(" (ELECTRA model)"),Xnr=l(),jv=a("li"),n1e=a("strong"),znr=o("flaubert"),Qnr=o(" \u2014 "),bz=a("a"),Wnr=o("TFFlaubertModel"),Hnr=o(" (FlauBERT model)"),Unr=l(),Ps=a("li"),s1e=a("strong"),Jnr=o("funnel"),Ynr=o(" \u2014 "),vz=a("a"),Knr=o("TFFunnelModel"),Znr=o(" or "),Fz=a("a"),esr=o("TFFunnelBaseModel"),osr=o(" (Funnel Transformer model)"),rsr=l(),Dv=a("li"),l1e=a("strong"),tsr=o("gpt2"),asr=o(" \u2014 "),Tz=a("a"),nsr=o("TFGPT2Model"),ssr=o(" (OpenAI GPT-2 model)"),lsr=l(),Gv=a("li"),i1e=a("strong"),isr=o("gptj"),dsr=o(" \u2014 "),Mz=a("a"),csr=o("TFGPTJModel"),fsr=o(" (GPT-J model)"),msr=l(),Ov=a("li"),d1e=a("strong"),gsr=o("hubert"),hsr=o(" \u2014 "),Ez=a("a"),psr=o("TFHubertModel"),usr=o(" (Hubert model)"),_sr=l(),Vv=a("li"),c1e=a("strong"),bsr=o("layoutlm"),vsr=o(" \u2014 "),Cz=a("a"),Fsr=o("TFLayoutLMModel"),Tsr=o(" (LayoutLM model)"),Msr=l(),Xv=a("li"),f1e=a("strong"),Esr=o("led"),Csr=o(" \u2014 "),wz=a("a"),wsr=o("TFLEDModel"),Asr=o(" (LED model)"),ysr=l(),zv=a("li"),m1e=a("strong"),Lsr=o("longformer"),xsr=o(" \u2014 "),Az=a("a"),$sr=o("TFLongformerModel"),ksr=o(" (Longformer model)"),Ssr=l(),Qv=a("li"),g1e=a("strong"),Rsr=o("lxmert"),Bsr=o(" \u2014 "),yz=a("a"),Psr=o("TFLxmertModel"),Isr=o(" (LXMERT model)"),qsr=l(),Wv=a("li"),h1e=a("strong"),Nsr=o("marian"),jsr=o(" \u2014 "),Lz=a("a"),Dsr=o("TFMarianModel"),Gsr=o(" (Marian model)"),Osr=l(),Hv=a("li"),p1e=a("strong"),Vsr=o("mbart"),Xsr=o(" \u2014 "),xz=a("a"),zsr=o("TFMBartModel"),Qsr=o(" (mBART model)"),Wsr=l(),Uv=a("li"),u1e=a("strong"),Hsr=o("mobilebert"),Usr=o(" \u2014 "),$z=a("a"),Jsr=o("TFMobileBertModel"),Ysr=o(" (MobileBERT model)"),Ksr=l(),Jv=a("li"),_1e=a("strong"),Zsr=o("mpnet"),elr=o(" \u2014 "),kz=a("a"),olr=o("TFMPNetModel"),rlr=o(" (MPNet model)"),tlr=l(),Yv=a("li"),b1e=a("strong"),alr=o("mt5"),nlr=o(" \u2014 "),Sz=a("a"),slr=o("TFMT5Model"),llr=o(" (mT5 model)"),ilr=l(),Kv=a("li"),v1e=a("strong"),dlr=o("openai-gpt"),clr=o(" \u2014 "),Rz=a("a"),flr=o("TFOpenAIGPTModel"),mlr=o(" (OpenAI GPT model)"),glr=l(),Zv=a("li"),F1e=a("strong"),hlr=o("pegasus"),plr=o(" \u2014 "),Bz=a("a"),ulr=o("TFPegasusModel"),_lr=o(" (Pegasus model)"),blr=l(),eF=a("li"),T1e=a("strong"),vlr=o("rembert"),Flr=o(" \u2014 "),Pz=a("a"),Tlr=o("TFRemBertModel"),Mlr=o(" (RemBERT model)"),Elr=l(),oF=a("li"),M1e=a("strong"),Clr=o("roberta"),wlr=o(" \u2014 "),Iz=a("a"),Alr=o("TFRobertaModel"),ylr=o(" (RoBERTa model)"),Llr=l(),rF=a("li"),E1e=a("strong"),xlr=o("roformer"),$lr=o(" \u2014 "),qz=a("a"),klr=o("TFRoFormerModel"),Slr=o(" (RoFormer model)"),Rlr=l(),tF=a("li"),C1e=a("strong"),Blr=o("speech_to_text"),Plr=o(" \u2014 "),Nz=a("a"),Ilr=o("TFSpeech2TextModel"),qlr=o(" (Speech2Text model)"),Nlr=l(),aF=a("li"),w1e=a("strong"),jlr=o("swin"),Dlr=o(" \u2014 "),jz=a("a"),Glr=o("TFSwinModel"),Olr=o(" (Swin model)"),Vlr=l(),nF=a("li"),A1e=a("strong"),Xlr=o("t5"),zlr=o(" \u2014 "),Dz=a("a"),Qlr=o("TFT5Model"),Wlr=o(" (T5 model)"),Hlr=l(),sF=a("li"),y1e=a("strong"),Ulr=o("tapas"),Jlr=o(" \u2014 "),Gz=a("a"),Ylr=o("TFTapasModel"),Klr=o(" (TAPAS model)"),Zlr=l(),lF=a("li"),L1e=a("strong"),eir=o("transfo-xl"),oir=o(" \u2014 "),Oz=a("a"),rir=o("TFTransfoXLModel"),tir=o(" (Transformer-XL model)"),air=l(),iF=a("li"),x1e=a("strong"),nir=o("vit"),sir=o(" \u2014 "),Vz=a("a"),lir=o("TFViTModel"),iir=o(" (ViT model)"),dir=l(),dF=a("li"),$1e=a("strong"),cir=o("vit_mae"),fir=o(" \u2014 "),Xz=a("a"),mir=o("TFViTMAEModel"),gir=o(" (ViTMAE model)"),hir=l(),cF=a("li"),k1e=a("strong"),pir=o("wav2vec2"),uir=o(" \u2014 "),zz=a("a"),_ir=o("TFWav2Vec2Model"),bir=o(" (Wav2Vec2 model)"),vir=l(),fF=a("li"),S1e=a("strong"),Fir=o("xglm"),Tir=o(" \u2014 "),Qz=a("a"),Mir=o("TFXGLMModel"),Eir=o(" (XGLM model)"),Cir=l(),mF=a("li"),R1e=a("strong"),wir=o("xlm"),Air=o(" \u2014 "),Wz=a("a"),yir=o("TFXLMModel"),Lir=o(" (XLM model)"),xir=l(),gF=a("li"),B1e=a("strong"),$ir=o("xlm-roberta"),kir=o(" \u2014 "),Hz=a("a"),Sir=o("TFXLMRobertaModel"),Rir=o(" (XLM-RoBERTa model)"),Bir=l(),hF=a("li"),P1e=a("strong"),Pir=o("xlnet"),Iir=o(" \u2014 "),Uz=a("a"),qir=o("TFXLNetModel"),Nir=o(" (XLNet model)"),jir=l(),F(pF.$$.fragment),eqe=l(),Gd=a("h2"),uF=a("a"),I1e=a("span"),F(j8.$$.fragment),Dir=l(),q1e=a("span"),Gir=o("TFAutoModelForPreTraining"),oqe=l(),Ko=a("div"),F(D8.$$.fragment),Oir=l(),Od=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),Yz=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),G8=a("p"),Uir=o("This class cannot be instantiated directly using "),N1e=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),At=a("div"),F(O8.$$.fragment),Zir=l(),j1e=a("p"),edr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),odr=l(),Vd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(_F.$$.fragment),idr=l(),Ar=a("div"),F(V8.$$.fragment),ddr=l(),G1e=a("p"),cdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fdr=l(),Za=a("p"),mdr=o("The model class to instantiate is selected based on the "),O1e=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),pdr=o("pretrained_model_name_or_path"),udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),_dr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),se=a("ul"),bF=a("li"),z1e=a("strong"),Fdr=o("albert"),Tdr=o(" \u2014 "),Zz=a("a"),Mdr=o("TFAlbertForPreTraining"),Edr=o(" (ALBERT model)"),Cdr=l(),vF=a("li"),Q1e=a("strong"),wdr=o("bart"),Adr=o(" \u2014 "),eQ=a("a"),ydr=o("TFBartForConditionalGeneration"),Ldr=o(" (BART model)"),xdr=l(),FF=a("li"),W1e=a("strong"),$dr=o("bert"),kdr=o(" \u2014 "),oQ=a("a"),Sdr=o("TFBertForPreTraining"),Rdr=o(" (BERT model)"),Bdr=l(),TF=a("li"),H1e=a("strong"),Pdr=o("camembert"),Idr=o(" \u2014 "),rQ=a("a"),qdr=o("TFCamembertForMaskedLM"),Ndr=o(" (CamemBERT model)"),jdr=l(),MF=a("li"),U1e=a("strong"),Ddr=o("ctrl"),Gdr=o(" \u2014 "),tQ=a("a"),Odr=o("TFCTRLLMHeadModel"),Vdr=o(" (CTRL model)"),Xdr=l(),EF=a("li"),J1e=a("strong"),zdr=o("distilbert"),Qdr=o(" \u2014 "),aQ=a("a"),Wdr=o("TFDistilBertForMaskedLM"),Hdr=o(" (DistilBERT model)"),Udr=l(),CF=a("li"),Y1e=a("strong"),Jdr=o("electra"),Ydr=o(" \u2014 "),nQ=a("a"),Kdr=o("TFElectraForPreTraining"),Zdr=o(" (ELECTRA model)"),ecr=l(),wF=a("li"),K1e=a("strong"),ocr=o("flaubert"),rcr=o(" \u2014 "),sQ=a("a"),tcr=o("TFFlaubertWithLMHeadModel"),acr=o(" (FlauBERT model)"),ncr=l(),AF=a("li"),Z1e=a("strong"),scr=o("funnel"),lcr=o(" \u2014 "),lQ=a("a"),icr=o("TFFunnelForPreTraining"),dcr=o(" (Funnel Transformer model)"),ccr=l(),yF=a("li"),ebe=a("strong"),fcr=o("gpt2"),mcr=o(" \u2014 "),iQ=a("a"),gcr=o("TFGPT2LMHeadModel"),hcr=o(" (OpenAI GPT-2 model)"),pcr=l(),LF=a("li"),obe=a("strong"),ucr=o("layoutlm"),_cr=o(" \u2014 "),dQ=a("a"),bcr=o("TFLayoutLMForMaskedLM"),vcr=o(" (LayoutLM model)"),Fcr=l(),xF=a("li"),rbe=a("strong"),Tcr=o("lxmert"),Mcr=o(" \u2014 "),cQ=a("a"),Ecr=o("TFLxmertForPreTraining"),Ccr=o(" (LXMERT model)"),wcr=l(),$F=a("li"),tbe=a("strong"),Acr=o("mobilebert"),ycr=o(" \u2014 "),fQ=a("a"),Lcr=o("TFMobileBertForPreTraining"),xcr=o(" (MobileBERT model)"),$cr=l(),kF=a("li"),abe=a("strong"),kcr=o("mpnet"),Scr=o(" \u2014 "),mQ=a("a"),Rcr=o("TFMPNetForMaskedLM"),Bcr=o(" (MPNet model)"),Pcr=l(),SF=a("li"),nbe=a("strong"),Icr=o("openai-gpt"),qcr=o(" \u2014 "),gQ=a("a"),Ncr=o("TFOpenAIGPTLMHeadModel"),jcr=o(" (OpenAI GPT model)"),Dcr=l(),RF=a("li"),sbe=a("strong"),Gcr=o("roberta"),Ocr=o(" \u2014 "),hQ=a("a"),Vcr=o("TFRobertaForMaskedLM"),Xcr=o(" (RoBERTa model)"),zcr=l(),BF=a("li"),lbe=a("strong"),Qcr=o("t5"),Wcr=o(" \u2014 "),pQ=a("a"),Hcr=o("TFT5ForConditionalGeneration"),Ucr=o(" (T5 model)"),Jcr=l(),PF=a("li"),ibe=a("strong"),Ycr=o("tapas"),Kcr=o(" \u2014 "),uQ=a("a"),Zcr=o("TFTapasForMaskedLM"),efr=o(" (TAPAS model)"),ofr=l(),IF=a("li"),dbe=a("strong"),rfr=o("transfo-xl"),tfr=o(" \u2014 "),_Q=a("a"),afr=o("TFTransfoXLLMHeadModel"),nfr=o(" (Transformer-XL model)"),sfr=l(),qF=a("li"),cbe=a("strong"),lfr=o("vit_mae"),ifr=o(" \u2014 "),bQ=a("a"),dfr=o("TFViTMAEForPreTraining"),cfr=o(" (ViTMAE model)"),ffr=l(),NF=a("li"),fbe=a("strong"),mfr=o("xlm"),gfr=o(" \u2014 "),vQ=a("a"),hfr=o("TFXLMWithLMHeadModel"),pfr=o(" (XLM model)"),ufr=l(),jF=a("li"),mbe=a("strong"),_fr=o("xlm-roberta"),bfr=o(" \u2014 "),FQ=a("a"),vfr=o("TFXLMRobertaForMaskedLM"),Ffr=o(" (XLM-RoBERTa model)"),Tfr=l(),DF=a("li"),gbe=a("strong"),Mfr=o("xlnet"),Efr=o(" \u2014 "),TQ=a("a"),Cfr=o("TFXLNetLMHeadModel"),wfr=o(" (XLNet model)"),Afr=l(),F(GF.$$.fragment),rqe=l(),Xd=a("h2"),OF=a("a"),hbe=a("span"),F(X8.$$.fragment),yfr=l(),pbe=a("span"),Lfr=o("TFAutoModelForCausalLM"),tqe=l(),Zo=a("div"),F(z8.$$.fragment),xfr=l(),zd=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=a("a"),kfr=o("from_pretrained()"),Sfr=o(" class method or the "),EQ=a("a"),Rfr=o("from_config()"),Bfr=o(` class
method.`),Pfr=l(),Q8=a("p"),Ifr=o("This class cannot be instantiated directly using "),ube=a("code"),qfr=o("__init__()"),Nfr=o(" (throws an error)."),jfr=l(),yt=a("div"),F(W8.$$.fragment),Dfr=l(),_be=a("p"),Gfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ofr=l(),Qd=a("p"),Vfr=o(`Note:
Loading a model from its configuration file does `),bbe=a("strong"),Xfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Qfr=o("from_pretrained()"),Wfr=o(" to load the model weights."),Hfr=l(),F(VF.$$.fragment),Ufr=l(),yr=a("div"),F(H8.$$.fragment),Jfr=l(),vbe=a("p"),Yfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kfr=l(),en=a("p"),Zfr=o("The model class to instantiate is selected based on the "),Fbe=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),Te=a("ul"),XF=a("li"),Ebe=a("strong"),lmr=o("bert"),imr=o(" \u2014 "),wQ=a("a"),dmr=o("TFBertLMHeadModel"),cmr=o(" (BERT model)"),fmr=l(),zF=a("li"),Cbe=a("strong"),mmr=o("camembert"),gmr=o(" \u2014 "),AQ=a("a"),hmr=o("TFCamembertForCausalLM"),pmr=o(" (CamemBERT model)"),umr=l(),QF=a("li"),wbe=a("strong"),_mr=o("ctrl"),bmr=o(" \u2014 "),yQ=a("a"),vmr=o("TFCTRLLMHeadModel"),Fmr=o(" (CTRL model)"),Tmr=l(),WF=a("li"),Abe=a("strong"),Mmr=o("gpt2"),Emr=o(" \u2014 "),LQ=a("a"),Cmr=o("TFGPT2LMHeadModel"),wmr=o(" (OpenAI GPT-2 model)"),Amr=l(),HF=a("li"),ybe=a("strong"),ymr=o("gptj"),Lmr=o(" \u2014 "),xQ=a("a"),xmr=o("TFGPTJForCausalLM"),$mr=o(" (GPT-J model)"),kmr=l(),UF=a("li"),Lbe=a("strong"),Smr=o("openai-gpt"),Rmr=o(" \u2014 "),$Q=a("a"),Bmr=o("TFOpenAIGPTLMHeadModel"),Pmr=o(" (OpenAI GPT model)"),Imr=l(),JF=a("li"),xbe=a("strong"),qmr=o("rembert"),Nmr=o(" \u2014 "),kQ=a("a"),jmr=o("TFRemBertForCausalLM"),Dmr=o(" (RemBERT model)"),Gmr=l(),YF=a("li"),$be=a("strong"),Omr=o("roberta"),Vmr=o(" \u2014 "),SQ=a("a"),Xmr=o("TFRobertaForCausalLM"),zmr=o(" (RoBERTa model)"),Qmr=l(),KF=a("li"),kbe=a("strong"),Wmr=o("roformer"),Hmr=o(" \u2014 "),RQ=a("a"),Umr=o("TFRoFormerForCausalLM"),Jmr=o(" (RoFormer model)"),Ymr=l(),ZF=a("li"),Sbe=a("strong"),Kmr=o("transfo-xl"),Zmr=o(" \u2014 "),BQ=a("a"),egr=o("TFTransfoXLLMHeadModel"),ogr=o(" (Transformer-XL model)"),rgr=l(),e6=a("li"),Rbe=a("strong"),tgr=o("xglm"),agr=o(" \u2014 "),PQ=a("a"),ngr=o("TFXGLMForCausalLM"),sgr=o(" (XGLM model)"),lgr=l(),o6=a("li"),Bbe=a("strong"),igr=o("xlm"),dgr=o(" \u2014 "),IQ=a("a"),cgr=o("TFXLMWithLMHeadModel"),fgr=o(" (XLM model)"),mgr=l(),r6=a("li"),Pbe=a("strong"),ggr=o("xlnet"),hgr=o(" \u2014 "),qQ=a("a"),pgr=o("TFXLNetLMHeadModel"),ugr=o(" (XLNet model)"),_gr=l(),F(t6.$$.fragment),aqe=l(),Wd=a("h2"),a6=a("a"),Ibe=a("span"),F(U8.$$.fragment),bgr=l(),qbe=a("span"),vgr=o("TFAutoModelForImageClassification"),nqe=l(),er=a("div"),F(J8.$$.fragment),Fgr=l(),Hd=a("p"),Tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=a("a"),Mgr=o("from_pretrained()"),Egr=o(" class method or the "),jQ=a("a"),Cgr=o("from_config()"),wgr=o(` class
method.`),Agr=l(),Y8=a("p"),ygr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Lgr=o("__init__()"),xgr=o(" (throws an error)."),$gr=l(),Lt=a("div"),F(K8.$$.fragment),kgr=l(),jbe=a("p"),Sgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rgr=l(),Ud=a("p"),Bgr=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),Pgr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),qgr=o("from_pretrained()"),Ngr=o(" to load the model weights."),jgr=l(),F(n6.$$.fragment),Dgr=l(),Lr=a("div"),F(Z8.$$.fragment),Ggr=l(),Gbe=a("p"),Ogr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vgr=l(),on=a("p"),Xgr=o("The model class to instantiate is selected based on the "),Obe=a("code"),zgr=o("model_type"),Qgr=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),Wgr=o("pretrained_model_name_or_path"),Hgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(":"),Ygr=l(),rn=a("ul"),s6=a("li"),zbe=a("strong"),Kgr=o("convnext"),Zgr=o(" \u2014 "),GQ=a("a"),ehr=o("TFConvNextForImageClassification"),ohr=o(" (ConvNext model)"),rhr=l(),l6=a("li"),Qbe=a("strong"),thr=o("data2vec-vision"),ahr=o(" \u2014 "),OQ=a("a"),nhr=o("TFData2VecVisionForImageClassification"),shr=o(" (Data2VecVision model)"),lhr=l(),i6=a("li"),Wbe=a("strong"),ihr=o("swin"),dhr=o(" \u2014 "),VQ=a("a"),chr=o("TFSwinForImageClassification"),fhr=o(" (Swin model)"),mhr=l(),d6=a("li"),Hbe=a("strong"),ghr=o("vit"),hhr=o(" \u2014 "),XQ=a("a"),phr=o("TFViTForImageClassification"),uhr=o(" (ViT model)"),_hr=l(),F(c6.$$.fragment),sqe=l(),Jd=a("h2"),f6=a("a"),Ube=a("span"),F(ex.$$.fragment),bhr=l(),Jbe=a("span"),vhr=o("TFAutoModelForMaskedLM"),lqe=l(),or=a("div"),F(ox.$$.fragment),Fhr=l(),Yd=a("p"),Thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zQ=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" class method or the "),QQ=a("a"),Chr=o("from_config()"),whr=o(` class
method.`),Ahr=l(),rx=a("p"),yhr=o("This class cannot be instantiated directly using "),Ybe=a("code"),Lhr=o("__init__()"),xhr=o(" (throws an error)."),$hr=l(),xt=a("div"),F(tx.$$.fragment),khr=l(),Kbe=a("p"),Shr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rhr=l(),Kd=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),Phr=o("not"),Ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),qhr=o("from_pretrained()"),Nhr=o(" to load the model weights."),jhr=l(),F(m6.$$.fragment),Dhr=l(),xr=a("div"),F(ax.$$.fragment),Ghr=l(),e4e=a("p"),Ohr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vhr=l(),tn=a("p"),Xhr=o("The model class to instantiate is selected based on the "),o4e=a("code"),zhr=o("model_type"),Qhr=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),Whr=o("pretrained_model_name_or_path"),Hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(":"),Yhr=l(),ie=a("ul"),g6=a("li"),a4e=a("strong"),Khr=o("albert"),Zhr=o(" \u2014 "),HQ=a("a"),epr=o("TFAlbertForMaskedLM"),opr=o(" (ALBERT model)"),rpr=l(),h6=a("li"),n4e=a("strong"),tpr=o("bert"),apr=o(" \u2014 "),UQ=a("a"),npr=o("TFBertForMaskedLM"),spr=o(" (BERT model)"),lpr=l(),p6=a("li"),s4e=a("strong"),ipr=o("camembert"),dpr=o(" \u2014 "),JQ=a("a"),cpr=o("TFCamembertForMaskedLM"),fpr=o(" (CamemBERT model)"),mpr=l(),u6=a("li"),l4e=a("strong"),gpr=o("convbert"),hpr=o(" \u2014 "),YQ=a("a"),ppr=o("TFConvBertForMaskedLM"),upr=o(" (ConvBERT model)"),_pr=l(),_6=a("li"),i4e=a("strong"),bpr=o("deberta"),vpr=o(" \u2014 "),KQ=a("a"),Fpr=o("TFDebertaForMaskedLM"),Tpr=o(" (DeBERTa model)"),Mpr=l(),b6=a("li"),d4e=a("strong"),Epr=o("deberta-v2"),Cpr=o(" \u2014 "),ZQ=a("a"),wpr=o("TFDebertaV2ForMaskedLM"),Apr=o(" (DeBERTa-v2 model)"),ypr=l(),v6=a("li"),c4e=a("strong"),Lpr=o("distilbert"),xpr=o(" \u2014 "),eW=a("a"),$pr=o("TFDistilBertForMaskedLM"),kpr=o(" (DistilBERT model)"),Spr=l(),F6=a("li"),f4e=a("strong"),Rpr=o("electra"),Bpr=o(" \u2014 "),oW=a("a"),Ppr=o("TFElectraForMaskedLM"),Ipr=o(" (ELECTRA model)"),qpr=l(),T6=a("li"),m4e=a("strong"),Npr=o("flaubert"),jpr=o(" \u2014 "),rW=a("a"),Dpr=o("TFFlaubertWithLMHeadModel"),Gpr=o(" (FlauBERT model)"),Opr=l(),M6=a("li"),g4e=a("strong"),Vpr=o("funnel"),Xpr=o(" \u2014 "),tW=a("a"),zpr=o("TFFunnelForMaskedLM"),Qpr=o(" (Funnel Transformer model)"),Wpr=l(),E6=a("li"),h4e=a("strong"),Hpr=o("layoutlm"),Upr=o(" \u2014 "),aW=a("a"),Jpr=o("TFLayoutLMForMaskedLM"),Ypr=o(" (LayoutLM model)"),Kpr=l(),C6=a("li"),p4e=a("strong"),Zpr=o("longformer"),eur=o(" \u2014 "),nW=a("a"),our=o("TFLongformerForMaskedLM"),rur=o(" (Longformer model)"),tur=l(),w6=a("li"),u4e=a("strong"),aur=o("mobilebert"),nur=o(" \u2014 "),sW=a("a"),sur=o("TFMobileBertForMaskedLM"),lur=o(" (MobileBERT model)"),iur=l(),A6=a("li"),_4e=a("strong"),dur=o("mpnet"),cur=o(" \u2014 "),lW=a("a"),fur=o("TFMPNetForMaskedLM"),mur=o(" (MPNet model)"),gur=l(),y6=a("li"),b4e=a("strong"),hur=o("rembert"),pur=o(" \u2014 "),iW=a("a"),uur=o("TFRemBertForMaskedLM"),_ur=o(" (RemBERT model)"),bur=l(),L6=a("li"),v4e=a("strong"),vur=o("roberta"),Fur=o(" \u2014 "),dW=a("a"),Tur=o("TFRobertaForMaskedLM"),Mur=o(" (RoBERTa model)"),Eur=l(),x6=a("li"),F4e=a("strong"),Cur=o("roformer"),wur=o(" \u2014 "),cW=a("a"),Aur=o("TFRoFormerForMaskedLM"),yur=o(" (RoFormer model)"),Lur=l(),$6=a("li"),T4e=a("strong"),xur=o("tapas"),$ur=o(" \u2014 "),fW=a("a"),kur=o("TFTapasForMaskedLM"),Sur=o(" (TAPAS model)"),Rur=l(),k6=a("li"),M4e=a("strong"),Bur=o("xlm"),Pur=o(" \u2014 "),mW=a("a"),Iur=o("TFXLMWithLMHeadModel"),qur=o(" (XLM model)"),Nur=l(),S6=a("li"),E4e=a("strong"),jur=o("xlm-roberta"),Dur=o(" \u2014 "),gW=a("a"),Gur=o("TFXLMRobertaForMaskedLM"),Our=o(" (XLM-RoBERTa model)"),Vur=l(),F(R6.$$.fragment),iqe=l(),Zd=a("h2"),B6=a("a"),C4e=a("span"),F(nx.$$.fragment),Xur=l(),w4e=a("span"),zur=o("TFAutoModelForSeq2SeqLM"),dqe=l(),rr=a("div"),F(sx.$$.fragment),Qur=l(),ec=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hW=a("a"),Hur=o("from_pretrained()"),Uur=o(" class method or the "),pW=a("a"),Jur=o("from_config()"),Yur=o(` class
method.`),Kur=l(),lx=a("p"),Zur=o("This class cannot be instantiated directly using "),A4e=a("code"),e_r=o("__init__()"),o_r=o(" (throws an error)."),r_r=l(),$t=a("div"),F(ix.$$.fragment),t_r=l(),y4e=a("p"),a_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n_r=l(),oc=a("p"),s_r=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),l_r=o("not"),i_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),d_r=o("from_pretrained()"),c_r=o(" to load the model weights."),f_r=l(),F(P6.$$.fragment),m_r=l(),$r=a("div"),F(dx.$$.fragment),g_r=l(),x4e=a("p"),h_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p_r=l(),an=a("p"),u_r=o("The model class to instantiate is selected based on the "),$4e=a("code"),__r=o("model_type"),b_r=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),T_r=o("pretrained_model_name_or_path"),M_r=o(":"),E_r=l(),ye=a("ul"),I6=a("li"),R4e=a("strong"),C_r=o("bart"),w_r=o(" \u2014 "),_W=a("a"),A_r=o("TFBartForConditionalGeneration"),y_r=o(" (BART model)"),L_r=l(),q6=a("li"),B4e=a("strong"),x_r=o("blenderbot"),$_r=o(" \u2014 "),bW=a("a"),k_r=o("TFBlenderbotForConditionalGeneration"),S_r=o(" (Blenderbot model)"),R_r=l(),N6=a("li"),P4e=a("strong"),B_r=o("blenderbot-small"),P_r=o(" \u2014 "),vW=a("a"),I_r=o("TFBlenderbotSmallForConditionalGeneration"),q_r=o(" (BlenderbotSmall model)"),N_r=l(),j6=a("li"),I4e=a("strong"),j_r=o("encoder-decoder"),D_r=o(" \u2014 "),FW=a("a"),G_r=o("TFEncoderDecoderModel"),O_r=o(" (Encoder decoder model)"),V_r=l(),D6=a("li"),q4e=a("strong"),X_r=o("led"),z_r=o(" \u2014 "),TW=a("a"),Q_r=o("TFLEDForConditionalGeneration"),W_r=o(" (LED model)"),H_r=l(),G6=a("li"),N4e=a("strong"),U_r=o("marian"),J_r=o(" \u2014 "),MW=a("a"),Y_r=o("TFMarianMTModel"),K_r=o(" (Marian model)"),Z_r=l(),O6=a("li"),j4e=a("strong"),e1r=o("mbart"),o1r=o(" \u2014 "),EW=a("a"),r1r=o("TFMBartForConditionalGeneration"),t1r=o(" (mBART model)"),a1r=l(),V6=a("li"),D4e=a("strong"),n1r=o("mt5"),s1r=o(" \u2014 "),CW=a("a"),l1r=o("TFMT5ForConditionalGeneration"),i1r=o(" (mT5 model)"),d1r=l(),X6=a("li"),G4e=a("strong"),c1r=o("pegasus"),f1r=o(" \u2014 "),wW=a("a"),m1r=o("TFPegasusForConditionalGeneration"),g1r=o(" (Pegasus model)"),h1r=l(),z6=a("li"),O4e=a("strong"),p1r=o("t5"),u1r=o(" \u2014 "),AW=a("a"),_1r=o("TFT5ForConditionalGeneration"),b1r=o(" (T5 model)"),v1r=l(),F(Q6.$$.fragment),cqe=l(),rc=a("h2"),W6=a("a"),V4e=a("span"),F(cx.$$.fragment),F1r=l(),X4e=a("span"),T1r=o("TFAutoModelForSequenceClassification"),fqe=l(),tr=a("div"),F(fx.$$.fragment),M1r=l(),tc=a("p"),E1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yW=a("a"),C1r=o("from_pretrained()"),w1r=o(" class method or the "),LW=a("a"),A1r=o("from_config()"),y1r=o(` class
method.`),L1r=l(),mx=a("p"),x1r=o("This class cannot be instantiated directly using "),z4e=a("code"),$1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),kt=a("div"),F(gx.$$.fragment),R1r=l(),Q4e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P1r=l(),ac=a("p"),I1r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),q1r=o("not"),N1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),j1r=o("from_pretrained()"),D1r=o(" to load the model weights."),G1r=l(),F(H6.$$.fragment),O1r=l(),kr=a("div"),F(hx.$$.fragment),V1r=l(),H4e=a("p"),X1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z1r=l(),nn=a("p"),Q1r=o("The model class to instantiate is selected based on the "),U4e=a("code"),W1r=o("model_type"),H1r=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(":"),Z1r=l(),Z=a("ul"),U6=a("li"),K4e=a("strong"),ebr=o("albert"),obr=o(" \u2014 "),$W=a("a"),rbr=o("TFAlbertForSequenceClassification"),tbr=o(" (ALBERT model)"),abr=l(),J6=a("li"),Z4e=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),kW=a("a"),lbr=o("TFBertForSequenceClassification"),ibr=o(" (BERT model)"),dbr=l(),Y6=a("li"),e2e=a("strong"),cbr=o("camembert"),fbr=o(" \u2014 "),SW=a("a"),mbr=o("TFCamembertForSequenceClassification"),gbr=o(" (CamemBERT model)"),hbr=l(),K6=a("li"),o2e=a("strong"),pbr=o("convbert"),ubr=o(" \u2014 "),RW=a("a"),_br=o("TFConvBertForSequenceClassification"),bbr=o(" (ConvBERT model)"),vbr=l(),Z6=a("li"),r2e=a("strong"),Fbr=o("ctrl"),Tbr=o(" \u2014 "),BW=a("a"),Mbr=o("TFCTRLForSequenceClassification"),Ebr=o(" (CTRL model)"),Cbr=l(),eT=a("li"),t2e=a("strong"),wbr=o("deberta"),Abr=o(" \u2014 "),PW=a("a"),ybr=o("TFDebertaForSequenceClassification"),Lbr=o(" (DeBERTa model)"),xbr=l(),oT=a("li"),a2e=a("strong"),$br=o("deberta-v2"),kbr=o(" \u2014 "),IW=a("a"),Sbr=o("TFDebertaV2ForSequenceClassification"),Rbr=o(" (DeBERTa-v2 model)"),Bbr=l(),rT=a("li"),n2e=a("strong"),Pbr=o("distilbert"),Ibr=o(" \u2014 "),qW=a("a"),qbr=o("TFDistilBertForSequenceClassification"),Nbr=o(" (DistilBERT model)"),jbr=l(),tT=a("li"),s2e=a("strong"),Dbr=o("electra"),Gbr=o(" \u2014 "),NW=a("a"),Obr=o("TFElectraForSequenceClassification"),Vbr=o(" (ELECTRA model)"),Xbr=l(),aT=a("li"),l2e=a("strong"),zbr=o("flaubert"),Qbr=o(" \u2014 "),jW=a("a"),Wbr=o("TFFlaubertForSequenceClassification"),Hbr=o(" (FlauBERT model)"),Ubr=l(),nT=a("li"),i2e=a("strong"),Jbr=o("funnel"),Ybr=o(" \u2014 "),DW=a("a"),Kbr=o("TFFunnelForSequenceClassification"),Zbr=o(" (Funnel Transformer model)"),e4r=l(),sT=a("li"),d2e=a("strong"),o4r=o("gpt2"),r4r=o(" \u2014 "),GW=a("a"),t4r=o("TFGPT2ForSequenceClassification"),a4r=o(" (OpenAI GPT-2 model)"),n4r=l(),lT=a("li"),c2e=a("strong"),s4r=o("gptj"),l4r=o(" \u2014 "),OW=a("a"),i4r=o("TFGPTJForSequenceClassification"),d4r=o(" (GPT-J model)"),c4r=l(),iT=a("li"),f2e=a("strong"),f4r=o("layoutlm"),m4r=o(" \u2014 "),VW=a("a"),g4r=o("TFLayoutLMForSequenceClassification"),h4r=o(" (LayoutLM model)"),p4r=l(),dT=a("li"),m2e=a("strong"),u4r=o("longformer"),_4r=o(" \u2014 "),XW=a("a"),b4r=o("TFLongformerForSequenceClassification"),v4r=o(" (Longformer model)"),F4r=l(),cT=a("li"),g2e=a("strong"),T4r=o("mobilebert"),M4r=o(" \u2014 "),zW=a("a"),E4r=o("TFMobileBertForSequenceClassification"),C4r=o(" (MobileBERT model)"),w4r=l(),fT=a("li"),h2e=a("strong"),A4r=o("mpnet"),y4r=o(" \u2014 "),QW=a("a"),L4r=o("TFMPNetForSequenceClassification"),x4r=o(" (MPNet model)"),$4r=l(),mT=a("li"),p2e=a("strong"),k4r=o("openai-gpt"),S4r=o(" \u2014 "),WW=a("a"),R4r=o("TFOpenAIGPTForSequenceClassification"),B4r=o(" (OpenAI GPT model)"),P4r=l(),gT=a("li"),u2e=a("strong"),I4r=o("rembert"),q4r=o(" \u2014 "),HW=a("a"),N4r=o("TFRemBertForSequenceClassification"),j4r=o(" (RemBERT model)"),D4r=l(),hT=a("li"),_2e=a("strong"),G4r=o("roberta"),O4r=o(" \u2014 "),UW=a("a"),V4r=o("TFRobertaForSequenceClassification"),X4r=o(" (RoBERTa model)"),z4r=l(),pT=a("li"),b2e=a("strong"),Q4r=o("roformer"),W4r=o(" \u2014 "),JW=a("a"),H4r=o("TFRoFormerForSequenceClassification"),U4r=o(" (RoFormer model)"),J4r=l(),uT=a("li"),v2e=a("strong"),Y4r=o("tapas"),K4r=o(" \u2014 "),YW=a("a"),Z4r=o("TFTapasForSequenceClassification"),e2r=o(" (TAPAS model)"),o2r=l(),_T=a("li"),F2e=a("strong"),r2r=o("transfo-xl"),t2r=o(" \u2014 "),KW=a("a"),a2r=o("TFTransfoXLForSequenceClassification"),n2r=o(" (Transformer-XL model)"),s2r=l(),bT=a("li"),T2e=a("strong"),l2r=o("xlm"),i2r=o(" \u2014 "),ZW=a("a"),d2r=o("TFXLMForSequenceClassification"),c2r=o(" (XLM model)"),f2r=l(),vT=a("li"),M2e=a("strong"),m2r=o("xlm-roberta"),g2r=o(" \u2014 "),eH=a("a"),h2r=o("TFXLMRobertaForSequenceClassification"),p2r=o(" (XLM-RoBERTa model)"),u2r=l(),FT=a("li"),E2e=a("strong"),_2r=o("xlnet"),b2r=o(" \u2014 "),oH=a("a"),v2r=o("TFXLNetForSequenceClassification"),F2r=o(" (XLNet model)"),T2r=l(),F(TT.$$.fragment),mqe=l(),nc=a("h2"),MT=a("a"),C2e=a("span"),F(px.$$.fragment),M2r=l(),w2e=a("span"),E2r=o("TFAutoModelForMultipleChoice"),gqe=l(),ar=a("div"),F(ux.$$.fragment),C2r=l(),sc=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rH=a("a"),A2r=o("from_pretrained()"),y2r=o(" class method or the "),tH=a("a"),L2r=o("from_config()"),x2r=o(` class
method.`),$2r=l(),_x=a("p"),k2r=o("This class cannot be instantiated directly using "),A2e=a("code"),S2r=o("__init__()"),R2r=o(" (throws an error)."),B2r=l(),St=a("div"),F(bx.$$.fragment),P2r=l(),y2e=a("p"),I2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q2r=l(),lc=a("p"),N2r=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),j2r=o("not"),D2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),G2r=o("from_pretrained()"),O2r=o(" to load the model weights."),V2r=l(),F(ET.$$.fragment),X2r=l(),Sr=a("div"),F(vx.$$.fragment),z2r=l(),x2e=a("p"),Q2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),W2r=l(),sn=a("p"),H2r=o("The model class to instantiate is selected based on the "),$2e=a("code"),U2r=o("model_type"),J2r=o(` property of the config object (either
passed as an argument or loaded from `),k2e=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),Z2r=o("pretrained_model_name_or_path"),e5r=o(":"),o5r=l(),he=a("ul"),CT=a("li"),R2e=a("strong"),r5r=o("albert"),t5r=o(" \u2014 "),nH=a("a"),a5r=o("TFAlbertForMultipleChoice"),n5r=o(" (ALBERT model)"),s5r=l(),wT=a("li"),B2e=a("strong"),l5r=o("bert"),i5r=o(" \u2014 "),sH=a("a"),d5r=o("TFBertForMultipleChoice"),c5r=o(" (BERT model)"),f5r=l(),AT=a("li"),P2e=a("strong"),m5r=o("camembert"),g5r=o(" \u2014 "),lH=a("a"),h5r=o("TFCamembertForMultipleChoice"),p5r=o(" (CamemBERT model)"),u5r=l(),yT=a("li"),I2e=a("strong"),_5r=o("convbert"),b5r=o(" \u2014 "),iH=a("a"),v5r=o("TFConvBertForMultipleChoice"),F5r=o(" (ConvBERT model)"),T5r=l(),LT=a("li"),q2e=a("strong"),M5r=o("distilbert"),E5r=o(" \u2014 "),dH=a("a"),C5r=o("TFDistilBertForMultipleChoice"),w5r=o(" (DistilBERT model)"),A5r=l(),xT=a("li"),N2e=a("strong"),y5r=o("electra"),L5r=o(" \u2014 "),cH=a("a"),x5r=o("TFElectraForMultipleChoice"),$5r=o(" (ELECTRA model)"),k5r=l(),$T=a("li"),j2e=a("strong"),S5r=o("flaubert"),R5r=o(" \u2014 "),fH=a("a"),B5r=o("TFFlaubertForMultipleChoice"),P5r=o(" (FlauBERT model)"),I5r=l(),kT=a("li"),D2e=a("strong"),q5r=o("funnel"),N5r=o(" \u2014 "),mH=a("a"),j5r=o("TFFunnelForMultipleChoice"),D5r=o(" (Funnel Transformer model)"),G5r=l(),ST=a("li"),G2e=a("strong"),O5r=o("longformer"),V5r=o(" \u2014 "),gH=a("a"),X5r=o("TFLongformerForMultipleChoice"),z5r=o(" (Longformer model)"),Q5r=l(),RT=a("li"),O2e=a("strong"),W5r=o("mobilebert"),H5r=o(" \u2014 "),hH=a("a"),U5r=o("TFMobileBertForMultipleChoice"),J5r=o(" (MobileBERT model)"),Y5r=l(),BT=a("li"),V2e=a("strong"),K5r=o("mpnet"),Z5r=o(" \u2014 "),pH=a("a"),e3r=o("TFMPNetForMultipleChoice"),o3r=o(" (MPNet model)"),r3r=l(),PT=a("li"),X2e=a("strong"),t3r=o("rembert"),a3r=o(" \u2014 "),uH=a("a"),n3r=o("TFRemBertForMultipleChoice"),s3r=o(" (RemBERT model)"),l3r=l(),IT=a("li"),z2e=a("strong"),i3r=o("roberta"),d3r=o(" \u2014 "),_H=a("a"),c3r=o("TFRobertaForMultipleChoice"),f3r=o(" (RoBERTa model)"),m3r=l(),qT=a("li"),Q2e=a("strong"),g3r=o("roformer"),h3r=o(" \u2014 "),bH=a("a"),p3r=o("TFRoFormerForMultipleChoice"),u3r=o(" (RoFormer model)"),_3r=l(),NT=a("li"),W2e=a("strong"),b3r=o("xlm"),v3r=o(" \u2014 "),vH=a("a"),F3r=o("TFXLMForMultipleChoice"),T3r=o(" (XLM model)"),M3r=l(),jT=a("li"),H2e=a("strong"),E3r=o("xlm-roberta"),C3r=o(" \u2014 "),FH=a("a"),w3r=o("TFXLMRobertaForMultipleChoice"),A3r=o(" (XLM-RoBERTa model)"),y3r=l(),DT=a("li"),U2e=a("strong"),L3r=o("xlnet"),x3r=o(" \u2014 "),TH=a("a"),$3r=o("TFXLNetForMultipleChoice"),k3r=o(" (XLNet model)"),S3r=l(),F(GT.$$.fragment),hqe=l(),ic=a("h2"),OT=a("a"),J2e=a("span"),F(Fx.$$.fragment),R3r=l(),Y2e=a("span"),B3r=o("TFAutoModelForNextSentencePrediction"),pqe=l(),nr=a("div"),F(Tx.$$.fragment),P3r=l(),dc=a("p"),I3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MH=a("a"),q3r=o("from_pretrained()"),N3r=o(" class method or the "),EH=a("a"),j3r=o("from_config()"),D3r=o(` class
method.`),G3r=l(),Mx=a("p"),O3r=o("This class cannot be instantiated directly using "),K2e=a("code"),V3r=o("__init__()"),X3r=o(" (throws an error)."),z3r=l(),Rt=a("div"),F(Ex.$$.fragment),Q3r=l(),Z2e=a("p"),W3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H3r=l(),cc=a("p"),U3r=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),J3r=o("not"),Y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),K3r=o("from_pretrained()"),Z3r=o(" to load the model weights."),evr=l(),F(VT.$$.fragment),ovr=l(),Rr=a("div"),F(Cx.$$.fragment),rvr=l(),o5e=a("p"),tvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),avr=l(),ln=a("p"),nvr=o("The model class to instantiate is selected based on the "),r5e=a("code"),svr=o("model_type"),lvr=o(` property of the config object (either
passed as an argument or loaded from `),t5e=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=a("code"),cvr=o("pretrained_model_name_or_path"),fvr=o(":"),mvr=l(),wx=a("ul"),XT=a("li"),n5e=a("strong"),gvr=o("bert"),hvr=o(" \u2014 "),wH=a("a"),pvr=o("TFBertForNextSentencePrediction"),uvr=o(" (BERT model)"),_vr=l(),zT=a("li"),s5e=a("strong"),bvr=o("mobilebert"),vvr=o(" \u2014 "),AH=a("a"),Fvr=o("TFMobileBertForNextSentencePrediction"),Tvr=o(" (MobileBERT model)"),Mvr=l(),F(QT.$$.fragment),uqe=l(),fc=a("h2"),WT=a("a"),l5e=a("span"),F(Ax.$$.fragment),Evr=l(),i5e=a("span"),Cvr=o("TFAutoModelForTableQuestionAnswering"),_qe=l(),sr=a("div"),F(yx.$$.fragment),wvr=l(),mc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),LH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),Lx=a("p"),Svr=o("This class cannot be instantiated directly using "),d5e=a("code"),Rvr=o("__init__()"),Bvr=o(" (throws an error)."),Pvr=l(),Bt=a("div"),F(xx.$$.fragment),Ivr=l(),c5e=a("p"),qvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nvr=l(),gc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(HT.$$.fragment),zvr=l(),Br=a("div"),F($x.$$.fragment),Qvr=l(),m5e=a("p"),Wvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hvr=l(),dn=a("p"),Uvr=o("The model class to instantiate is selected based on the "),g5e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),u5e=a("ul"),UT=a("li"),_5e=a("strong"),tFr=o("tapas"),aFr=o(" \u2014 "),$H=a("a"),nFr=o("TFTapasForQuestionAnswering"),sFr=o(" (TAPAS model)"),lFr=l(),F(JT.$$.fragment),bqe=l(),hc=a("h2"),YT=a("a"),b5e=a("span"),F(kx.$$.fragment),iFr=l(),v5e=a("span"),dFr=o("TFAutoModelForTokenClassification"),vqe=l(),lr=a("div"),F(Sx.$$.fragment),cFr=l(),pc=a("p"),fFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kH=a("a"),mFr=o("from_pretrained()"),gFr=o(" class method or the "),SH=a("a"),hFr=o("from_config()"),pFr=o(` class
method.`),uFr=l(),Rx=a("p"),_Fr=o("This class cannot be instantiated directly using "),F5e=a("code"),bFr=o("__init__()"),vFr=o(" (throws an error)."),FFr=l(),Pt=a("div"),F(Bx.$$.fragment),TFr=l(),T5e=a("p"),MFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EFr=l(),uc=a("p"),CFr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),wFr=o("not"),AFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),yFr=o("from_pretrained()"),LFr=o(" to load the model weights."),xFr=l(),F(KT.$$.fragment),$Fr=l(),Pr=a("div"),F(Px.$$.fragment),kFr=l(),E5e=a("p"),SFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RFr=l(),cn=a("p"),BFr=o("The model class to instantiate is selected based on the "),C5e=a("code"),PFr=o("model_type"),IFr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),qFr=o("pretrained_model_name_or_path"),NFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),jFr=o("pretrained_model_name_or_path"),DFr=o(":"),GFr=l(),de=a("ul"),ZT=a("li"),y5e=a("strong"),OFr=o("albert"),VFr=o(" \u2014 "),BH=a("a"),XFr=o("TFAlbertForTokenClassification"),zFr=o(" (ALBERT model)"),QFr=l(),eM=a("li"),L5e=a("strong"),WFr=o("bert"),HFr=o(" \u2014 "),PH=a("a"),UFr=o("TFBertForTokenClassification"),JFr=o(" (BERT model)"),YFr=l(),oM=a("li"),x5e=a("strong"),KFr=o("camembert"),ZFr=o(" \u2014 "),IH=a("a"),e6r=o("TFCamembertForTokenClassification"),o6r=o(" (CamemBERT model)"),r6r=l(),rM=a("li"),$5e=a("strong"),t6r=o("convbert"),a6r=o(" \u2014 "),qH=a("a"),n6r=o("TFConvBertForTokenClassification"),s6r=o(" (ConvBERT model)"),l6r=l(),tM=a("li"),k5e=a("strong"),i6r=o("deberta"),d6r=o(" \u2014 "),NH=a("a"),c6r=o("TFDebertaForTokenClassification"),f6r=o(" (DeBERTa model)"),m6r=l(),aM=a("li"),S5e=a("strong"),g6r=o("deberta-v2"),h6r=o(" \u2014 "),jH=a("a"),p6r=o("TFDebertaV2ForTokenClassification"),u6r=o(" (DeBERTa-v2 model)"),_6r=l(),nM=a("li"),R5e=a("strong"),b6r=o("distilbert"),v6r=o(" \u2014 "),DH=a("a"),F6r=o("TFDistilBertForTokenClassification"),T6r=o(" (DistilBERT model)"),M6r=l(),sM=a("li"),B5e=a("strong"),E6r=o("electra"),C6r=o(" \u2014 "),GH=a("a"),w6r=o("TFElectraForTokenClassification"),A6r=o(" (ELECTRA model)"),y6r=l(),lM=a("li"),P5e=a("strong"),L6r=o("flaubert"),x6r=o(" \u2014 "),OH=a("a"),$6r=o("TFFlaubertForTokenClassification"),k6r=o(" (FlauBERT model)"),S6r=l(),iM=a("li"),I5e=a("strong"),R6r=o("funnel"),B6r=o(" \u2014 "),VH=a("a"),P6r=o("TFFunnelForTokenClassification"),I6r=o(" (Funnel Transformer model)"),q6r=l(),dM=a("li"),q5e=a("strong"),N6r=o("layoutlm"),j6r=o(" \u2014 "),XH=a("a"),D6r=o("TFLayoutLMForTokenClassification"),G6r=o(" (LayoutLM model)"),O6r=l(),cM=a("li"),N5e=a("strong"),V6r=o("longformer"),X6r=o(" \u2014 "),zH=a("a"),z6r=o("TFLongformerForTokenClassification"),Q6r=o(" (Longformer model)"),W6r=l(),fM=a("li"),j5e=a("strong"),H6r=o("mobilebert"),U6r=o(" \u2014 "),QH=a("a"),J6r=o("TFMobileBertForTokenClassification"),Y6r=o(" (MobileBERT model)"),K6r=l(),mM=a("li"),D5e=a("strong"),Z6r=o("mpnet"),eTr=o(" \u2014 "),WH=a("a"),oTr=o("TFMPNetForTokenClassification"),rTr=o(" (MPNet model)"),tTr=l(),gM=a("li"),G5e=a("strong"),aTr=o("rembert"),nTr=o(" \u2014 "),HH=a("a"),sTr=o("TFRemBertForTokenClassification"),lTr=o(" (RemBERT model)"),iTr=l(),hM=a("li"),O5e=a("strong"),dTr=o("roberta"),cTr=o(" \u2014 "),UH=a("a"),fTr=o("TFRobertaForTokenClassification"),mTr=o(" (RoBERTa model)"),gTr=l(),pM=a("li"),V5e=a("strong"),hTr=o("roformer"),pTr=o(" \u2014 "),JH=a("a"),uTr=o("TFRoFormerForTokenClassification"),_Tr=o(" (RoFormer model)"),bTr=l(),uM=a("li"),X5e=a("strong"),vTr=o("xlm"),FTr=o(" \u2014 "),YH=a("a"),TTr=o("TFXLMForTokenClassification"),MTr=o(" (XLM model)"),ETr=l(),_M=a("li"),z5e=a("strong"),CTr=o("xlm-roberta"),wTr=o(" \u2014 "),KH=a("a"),ATr=o("TFXLMRobertaForTokenClassification"),yTr=o(" (XLM-RoBERTa model)"),LTr=l(),bM=a("li"),Q5e=a("strong"),xTr=o("xlnet"),$Tr=o(" \u2014 "),ZH=a("a"),kTr=o("TFXLNetForTokenClassification"),STr=o(" (XLNet model)"),RTr=l(),F(vM.$$.fragment),Fqe=l(),_c=a("h2"),FM=a("a"),W5e=a("span"),F(Ix.$$.fragment),BTr=l(),H5e=a("span"),PTr=o("TFAutoModelForQuestionAnswering"),Tqe=l(),ir=a("div"),F(qx.$$.fragment),ITr=l(),bc=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eU=a("a"),NTr=o("from_pretrained()"),jTr=o(" class method or the "),oU=a("a"),DTr=o("from_config()"),GTr=o(` class
method.`),OTr=l(),Nx=a("p"),VTr=o("This class cannot be instantiated directly using "),U5e=a("code"),XTr=o("__init__()"),zTr=o(" (throws an error)."),QTr=l(),It=a("div"),F(jx.$$.fragment),WTr=l(),J5e=a("p"),HTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UTr=l(),vc=a("p"),JTr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),YTr=o("not"),KTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),ZTr=o("from_pretrained()"),eMr=o(" to load the model weights."),oMr=l(),F(TM.$$.fragment),rMr=l(),Ir=a("div"),F(Dx.$$.fragment),tMr=l(),K5e=a("p"),aMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nMr=l(),fn=a("p"),sMr=o("The model class to instantiate is selected based on the "),Z5e=a("code"),lMr=o("model_type"),iMr=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),dMr=o("pretrained_model_name_or_path"),cMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),fMr=o("pretrained_model_name_or_path"),mMr=o(":"),gMr=l(),ce=a("ul"),MM=a("li"),r3e=a("strong"),hMr=o("albert"),pMr=o(" \u2014 "),tU=a("a"),uMr=o("TFAlbertForQuestionAnswering"),_Mr=o(" (ALBERT model)"),bMr=l(),EM=a("li"),t3e=a("strong"),vMr=o("bert"),FMr=o(" \u2014 "),aU=a("a"),TMr=o("TFBertForQuestionAnswering"),MMr=o(" (BERT model)"),EMr=l(),CM=a("li"),a3e=a("strong"),CMr=o("camembert"),wMr=o(" \u2014 "),nU=a("a"),AMr=o("TFCamembertForQuestionAnswering"),yMr=o(" (CamemBERT model)"),LMr=l(),wM=a("li"),n3e=a("strong"),xMr=o("convbert"),$Mr=o(" \u2014 "),sU=a("a"),kMr=o("TFConvBertForQuestionAnswering"),SMr=o(" (ConvBERT model)"),RMr=l(),AM=a("li"),s3e=a("strong"),BMr=o("deberta"),PMr=o(" \u2014 "),lU=a("a"),IMr=o("TFDebertaForQuestionAnswering"),qMr=o(" (DeBERTa model)"),NMr=l(),yM=a("li"),l3e=a("strong"),jMr=o("deberta-v2"),DMr=o(" \u2014 "),iU=a("a"),GMr=o("TFDebertaV2ForQuestionAnswering"),OMr=o(" (DeBERTa-v2 model)"),VMr=l(),LM=a("li"),i3e=a("strong"),XMr=o("distilbert"),zMr=o(" \u2014 "),dU=a("a"),QMr=o("TFDistilBertForQuestionAnswering"),WMr=o(" (DistilBERT model)"),HMr=l(),xM=a("li"),d3e=a("strong"),UMr=o("electra"),JMr=o(" \u2014 "),cU=a("a"),YMr=o("TFElectraForQuestionAnswering"),KMr=o(" (ELECTRA model)"),ZMr=l(),$M=a("li"),c3e=a("strong"),eEr=o("flaubert"),oEr=o(" \u2014 "),fU=a("a"),rEr=o("TFFlaubertForQuestionAnsweringSimple"),tEr=o(" (FlauBERT model)"),aEr=l(),kM=a("li"),f3e=a("strong"),nEr=o("funnel"),sEr=o(" \u2014 "),mU=a("a"),lEr=o("TFFunnelForQuestionAnswering"),iEr=o(" (Funnel Transformer model)"),dEr=l(),SM=a("li"),m3e=a("strong"),cEr=o("gptj"),fEr=o(" \u2014 "),gU=a("a"),mEr=o("TFGPTJForQuestionAnswering"),gEr=o(" (GPT-J model)"),hEr=l(),RM=a("li"),g3e=a("strong"),pEr=o("longformer"),uEr=o(" \u2014 "),hU=a("a"),_Er=o("TFLongformerForQuestionAnswering"),bEr=o(" (Longformer model)"),vEr=l(),BM=a("li"),h3e=a("strong"),FEr=o("mobilebert"),TEr=o(" \u2014 "),pU=a("a"),MEr=o("TFMobileBertForQuestionAnswering"),EEr=o(" (MobileBERT model)"),CEr=l(),PM=a("li"),p3e=a("strong"),wEr=o("mpnet"),AEr=o(" \u2014 "),uU=a("a"),yEr=o("TFMPNetForQuestionAnswering"),LEr=o(" (MPNet model)"),xEr=l(),IM=a("li"),u3e=a("strong"),$Er=o("rembert"),kEr=o(" \u2014 "),_U=a("a"),SEr=o("TFRemBertForQuestionAnswering"),REr=o(" (RemBERT model)"),BEr=l(),qM=a("li"),_3e=a("strong"),PEr=o("roberta"),IEr=o(" \u2014 "),bU=a("a"),qEr=o("TFRobertaForQuestionAnswering"),NEr=o(" (RoBERTa model)"),jEr=l(),NM=a("li"),b3e=a("strong"),DEr=o("roformer"),GEr=o(" \u2014 "),vU=a("a"),OEr=o("TFRoFormerForQuestionAnswering"),VEr=o(" (RoFormer model)"),XEr=l(),jM=a("li"),v3e=a("strong"),zEr=o("xlm"),QEr=o(" \u2014 "),FU=a("a"),WEr=o("TFXLMForQuestionAnsweringSimple"),HEr=o(" (XLM model)"),UEr=l(),DM=a("li"),F3e=a("strong"),JEr=o("xlm-roberta"),YEr=o(" \u2014 "),TU=a("a"),KEr=o("TFXLMRobertaForQuestionAnswering"),ZEr=o(" (XLM-RoBERTa model)"),eCr=l(),GM=a("li"),T3e=a("strong"),oCr=o("xlnet"),rCr=o(" \u2014 "),MU=a("a"),tCr=o("TFXLNetForQuestionAnsweringSimple"),aCr=o(" (XLNet model)"),nCr=l(),F(OM.$$.fragment),Mqe=l(),Fc=a("h2"),VM=a("a"),M3e=a("span"),F(Gx.$$.fragment),sCr=l(),E3e=a("span"),lCr=o("TFAutoModelForVision2Seq"),Eqe=l(),dr=a("div"),F(Ox.$$.fragment),iCr=l(),Tc=a("p"),dCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EU=a("a"),cCr=o("from_pretrained()"),fCr=o(" class method or the "),CU=a("a"),mCr=o("from_config()"),gCr=o(` class
method.`),hCr=l(),Vx=a("p"),pCr=o("This class cannot be instantiated directly using "),C3e=a("code"),uCr=o("__init__()"),_Cr=o(" (throws an error)."),bCr=l(),qt=a("div"),F(Xx.$$.fragment),vCr=l(),w3e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TCr=l(),Mc=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),ECr=o("not"),CCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),wCr=o("from_pretrained()"),ACr=o(" to load the model weights."),yCr=l(),F(XM.$$.fragment),LCr=l(),qr=a("div"),F(zx.$$.fragment),xCr=l(),y3e=a("p"),$Cr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kCr=l(),mn=a("p"),SCr=o("The model class to instantiate is selected based on the "),L3e=a("code"),RCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),PCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),qCr=o("pretrained_model_name_or_path"),NCr=o(":"),jCr=l(),k3e=a("ul"),zM=a("li"),S3e=a("strong"),DCr=o("vision-encoder-decoder"),GCr=o(" \u2014 "),AU=a("a"),OCr=o("TFVisionEncoderDecoderModel"),VCr=o(" (Vision Encoder decoder model)"),XCr=l(),F(QM.$$.fragment),Cqe=l(),Ec=a("h2"),WM=a("a"),R3e=a("span"),F(Qx.$$.fragment),zCr=l(),B3e=a("span"),QCr=o("TFAutoModelForSpeechSeq2Seq"),wqe=l(),cr=a("div"),F(Wx.$$.fragment),WCr=l(),Cc=a("p"),HCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yU=a("a"),UCr=o("from_pretrained()"),JCr=o(" class method or the "),LU=a("a"),YCr=o("from_config()"),KCr=o(` class
method.`),ZCr=l(),Hx=a("p"),ewr=o("This class cannot be instantiated directly using "),P3e=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),Nt=a("div"),F(Ux.$$.fragment),awr=l(),I3e=a("p"),nwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),swr=l(),wc=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),F(HM.$$.fragment),gwr=l(),Nr=a("div"),F(Jx.$$.fragment),hwr=l(),N3e=a("p"),pwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uwr=l(),gn=a("p"),_wr=o("The model class to instantiate is selected based on the "),j3e=a("code"),bwr=o("model_type"),vwr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),Fwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),O3e=a("ul"),UM=a("li"),V3e=a("strong"),wwr=o("speech_to_text"),Awr=o(" \u2014 "),$U=a("a"),ywr=o("TFSpeech2TextForConditionalGeneration"),Lwr=o(" (Speech2Text model)"),xwr=l(),F(JM.$$.fragment),Aqe=l(),Ac=a("h2"),YM=a("a"),X3e=a("span"),F(Yx.$$.fragment),$wr=l(),z3e=a("span"),kwr=o("FlaxAutoModel"),yqe=l(),fr=a("div"),F(Kx.$$.fragment),Swr=l(),yc=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kU=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" class method or the "),SU=a("a"),Iwr=o("from_config()"),qwr=o(` class
method.`),Nwr=l(),Zx=a("p"),jwr=o("This class cannot be instantiated directly using "),Q3e=a("code"),Dwr=o("__init__()"),Gwr=o(" (throws an error)."),Owr=l(),jt=a("div"),F(e7.$$.fragment),Vwr=l(),W3e=a("p"),Xwr=o("Instantiates one of the base model classes of the library from a configuration."),zwr=l(),Lc=a("p"),Qwr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),Wwr=o("not"),Hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" to load the model weights."),Ywr=l(),F(KM.$$.fragment),Kwr=l(),jr=a("div"),F(o7.$$.fragment),Zwr=l(),U3e=a("p"),eAr=o("Instantiate one of the base model classes of the library from a pretrained model."),oAr=l(),hn=a("p"),rAr=o("The model class to instantiate is selected based on the "),J3e=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),re=a("ul"),ZM=a("li"),Z3e=a("strong"),cAr=o("albert"),fAr=o(" \u2014 "),BU=a("a"),mAr=o("FlaxAlbertModel"),gAr=o(" (ALBERT model)"),hAr=l(),eE=a("li"),eve=a("strong"),pAr=o("bart"),uAr=o(" \u2014 "),PU=a("a"),_Ar=o("FlaxBartModel"),bAr=o(" (BART model)"),vAr=l(),oE=a("li"),ove=a("strong"),FAr=o("beit"),TAr=o(" \u2014 "),IU=a("a"),MAr=o("FlaxBeitModel"),EAr=o(" (BEiT model)"),CAr=l(),rE=a("li"),rve=a("strong"),wAr=o("bert"),AAr=o(" \u2014 "),qU=a("a"),yAr=o("FlaxBertModel"),LAr=o(" (BERT model)"),xAr=l(),tE=a("li"),tve=a("strong"),$Ar=o("big_bird"),kAr=o(" \u2014 "),NU=a("a"),SAr=o("FlaxBigBirdModel"),RAr=o(" (BigBird model)"),BAr=l(),aE=a("li"),ave=a("strong"),PAr=o("blenderbot"),IAr=o(" \u2014 "),jU=a("a"),qAr=o("FlaxBlenderbotModel"),NAr=o(" (Blenderbot model)"),jAr=l(),nE=a("li"),nve=a("strong"),DAr=o("blenderbot-small"),GAr=o(" \u2014 "),DU=a("a"),OAr=o("FlaxBlenderbotSmallModel"),VAr=o(" (BlenderbotSmall model)"),XAr=l(),sE=a("li"),sve=a("strong"),zAr=o("clip"),QAr=o(" \u2014 "),GU=a("a"),WAr=o("FlaxCLIPModel"),HAr=o(" (CLIP model)"),UAr=l(),lE=a("li"),lve=a("strong"),JAr=o("distilbert"),YAr=o(" \u2014 "),OU=a("a"),KAr=o("FlaxDistilBertModel"),ZAr=o(" (DistilBERT model)"),e0r=l(),iE=a("li"),ive=a("strong"),o0r=o("electra"),r0r=o(" \u2014 "),VU=a("a"),t0r=o("FlaxElectraModel"),a0r=o(" (ELECTRA model)"),n0r=l(),dE=a("li"),dve=a("strong"),s0r=o("gpt2"),l0r=o(" \u2014 "),XU=a("a"),i0r=o("FlaxGPT2Model"),d0r=o(" (OpenAI GPT-2 model)"),c0r=l(),cE=a("li"),cve=a("strong"),f0r=o("gpt_neo"),m0r=o(" \u2014 "),zU=a("a"),g0r=o("FlaxGPTNeoModel"),h0r=o(" (GPT Neo model)"),p0r=l(),fE=a("li"),fve=a("strong"),u0r=o("gptj"),_0r=o(" \u2014 "),QU=a("a"),b0r=o("FlaxGPTJModel"),v0r=o(" (GPT-J model)"),F0r=l(),mE=a("li"),mve=a("strong"),T0r=o("marian"),M0r=o(" \u2014 "),WU=a("a"),E0r=o("FlaxMarianModel"),C0r=o(" (Marian model)"),w0r=l(),gE=a("li"),gve=a("strong"),A0r=o("mbart"),y0r=o(" \u2014 "),HU=a("a"),L0r=o("FlaxMBartModel"),x0r=o(" (mBART model)"),$0r=l(),hE=a("li"),hve=a("strong"),k0r=o("mt5"),S0r=o(" \u2014 "),UU=a("a"),R0r=o("FlaxMT5Model"),B0r=o(" (mT5 model)"),P0r=l(),pE=a("li"),pve=a("strong"),I0r=o("pegasus"),q0r=o(" \u2014 "),JU=a("a"),N0r=o("FlaxPegasusModel"),j0r=o(" (Pegasus model)"),D0r=l(),uE=a("li"),uve=a("strong"),G0r=o("roberta"),O0r=o(" \u2014 "),YU=a("a"),V0r=o("FlaxRobertaModel"),X0r=o(" (RoBERTa model)"),z0r=l(),_E=a("li"),_ve=a("strong"),Q0r=o("roformer"),W0r=o(" \u2014 "),KU=a("a"),H0r=o("FlaxRoFormerModel"),U0r=o(" (RoFormer model)"),J0r=l(),bE=a("li"),bve=a("strong"),Y0r=o("t5"),K0r=o(" \u2014 "),ZU=a("a"),Z0r=o("FlaxT5Model"),eyr=o(" (T5 model)"),oyr=l(),vE=a("li"),vve=a("strong"),ryr=o("vision-text-dual-encoder"),tyr=o(" \u2014 "),eJ=a("a"),ayr=o("FlaxVisionTextDualEncoderModel"),nyr=o(" (VisionTextDualEncoder model)"),syr=l(),FE=a("li"),Fve=a("strong"),lyr=o("vit"),iyr=o(" \u2014 "),oJ=a("a"),dyr=o("FlaxViTModel"),cyr=o(" (ViT model)"),fyr=l(),TE=a("li"),Tve=a("strong"),myr=o("wav2vec2"),gyr=o(" \u2014 "),rJ=a("a"),hyr=o("FlaxWav2Vec2Model"),pyr=o(" (Wav2Vec2 model)"),uyr=l(),ME=a("li"),Mve=a("strong"),_yr=o("xglm"),byr=o(" \u2014 "),tJ=a("a"),vyr=o("FlaxXGLMModel"),Fyr=o(" (XGLM model)"),Tyr=l(),EE=a("li"),Eve=a("strong"),Myr=o("xlm-roberta"),Eyr=o(" \u2014 "),aJ=a("a"),Cyr=o("FlaxXLMRobertaModel"),wyr=o(" (XLM-RoBERTa model)"),Ayr=l(),F(CE.$$.fragment),Lqe=l(),xc=a("h2"),wE=a("a"),Cve=a("span"),F(r7.$$.fragment),yyr=l(),wve=a("span"),Lyr=o("FlaxAutoModelForCausalLM"),xqe=l(),mr=a("div"),F(t7.$$.fragment),xyr=l(),$c=a("p"),$yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),sJ=a("a"),Ryr=o("from_config()"),Byr=o(` class
method.`),Pyr=l(),a7=a("p"),Iyr=o("This class cannot be instantiated directly using "),Ave=a("code"),qyr=o("__init__()"),Nyr=o(" (throws an error)."),jyr=l(),Dt=a("div"),F(n7.$$.fragment),Dyr=l(),yve=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Oyr=l(),kc=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),Xyr=o("not"),zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),Qyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Hyr=l(),F(AE.$$.fragment),Uyr=l(),Dr=a("div"),F(s7.$$.fragment),Jyr=l(),xve=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kyr=l(),pn=a("p"),Zyr=o("The model class to instantiate is selected based on the "),$ve=a("code"),eLr=o("model_type"),oLr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(":"),sLr=l(),ke=a("ul"),yE=a("li"),Rve=a("strong"),lLr=o("bart"),iLr=o(" \u2014 "),iJ=a("a"),dLr=o("FlaxBartForCausalLM"),cLr=o(" (BART model)"),fLr=l(),LE=a("li"),Bve=a("strong"),mLr=o("bert"),gLr=o(" \u2014 "),dJ=a("a"),hLr=o("FlaxBertForCausalLM"),pLr=o(" (BERT model)"),uLr=l(),xE=a("li"),Pve=a("strong"),_Lr=o("big_bird"),bLr=o(" \u2014 "),cJ=a("a"),vLr=o("FlaxBigBirdForCausalLM"),FLr=o(" (BigBird model)"),TLr=l(),$E=a("li"),Ive=a("strong"),MLr=o("electra"),ELr=o(" \u2014 "),fJ=a("a"),CLr=o("FlaxElectraForCausalLM"),wLr=o(" (ELECTRA model)"),ALr=l(),kE=a("li"),qve=a("strong"),yLr=o("gpt2"),LLr=o(" \u2014 "),mJ=a("a"),xLr=o("FlaxGPT2LMHeadModel"),$Lr=o(" (OpenAI GPT-2 model)"),kLr=l(),SE=a("li"),Nve=a("strong"),SLr=o("gpt_neo"),RLr=o(" \u2014 "),gJ=a("a"),BLr=o("FlaxGPTNeoForCausalLM"),PLr=o(" (GPT Neo model)"),ILr=l(),RE=a("li"),jve=a("strong"),qLr=o("gptj"),NLr=o(" \u2014 "),hJ=a("a"),jLr=o("FlaxGPTJForCausalLM"),DLr=o(" (GPT-J model)"),GLr=l(),BE=a("li"),Dve=a("strong"),OLr=o("roberta"),VLr=o(" \u2014 "),pJ=a("a"),XLr=o("FlaxRobertaForCausalLM"),zLr=o(" (RoBERTa model)"),QLr=l(),PE=a("li"),Gve=a("strong"),WLr=o("xglm"),HLr=o(" \u2014 "),uJ=a("a"),ULr=o("FlaxXGLMForCausalLM"),JLr=o(" (XGLM model)"),YLr=l(),F(IE.$$.fragment),$qe=l(),Sc=a("h2"),qE=a("a"),Ove=a("span"),F(l7.$$.fragment),KLr=l(),Vve=a("span"),ZLr=o("FlaxAutoModelForPreTraining"),kqe=l(),gr=a("div"),F(i7.$$.fragment),e8r=l(),Rc=a("p"),o8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_J=a("a"),r8r=o("from_pretrained()"),t8r=o(" class method or the "),bJ=a("a"),a8r=o("from_config()"),n8r=o(` class
method.`),s8r=l(),d7=a("p"),l8r=o("This class cannot be instantiated directly using "),Xve=a("code"),i8r=o("__init__()"),d8r=o(" (throws an error)."),c8r=l(),Gt=a("div"),F(c7.$$.fragment),f8r=l(),zve=a("p"),m8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g8r=l(),Bc=a("p"),h8r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),p8r=o("not"),u8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),_8r=o("from_pretrained()"),b8r=o(" to load the model weights."),v8r=l(),F(NE.$$.fragment),F8r=l(),Gr=a("div"),F(f7.$$.fragment),T8r=l(),Wve=a("p"),M8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E8r=l(),un=a("p"),C8r=o("The model class to instantiate is selected based on the "),Hve=a("code"),w8r=o("model_type"),A8r=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),y8r=o("pretrained_model_name_or_path"),L8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(":"),k8r=l(),Me=a("ul"),jE=a("li"),Yve=a("strong"),S8r=o("albert"),R8r=o(" \u2014 "),FJ=a("a"),B8r=o("FlaxAlbertForPreTraining"),P8r=o(" (ALBERT model)"),I8r=l(),DE=a("li"),Kve=a("strong"),q8r=o("bart"),N8r=o(" \u2014 "),TJ=a("a"),j8r=o("FlaxBartForConditionalGeneration"),D8r=o(" (BART model)"),G8r=l(),GE=a("li"),Zve=a("strong"),O8r=o("bert"),V8r=o(" \u2014 "),MJ=a("a"),X8r=o("FlaxBertForPreTraining"),z8r=o(" (BERT model)"),Q8r=l(),OE=a("li"),eFe=a("strong"),W8r=o("big_bird"),H8r=o(" \u2014 "),EJ=a("a"),U8r=o("FlaxBigBirdForPreTraining"),J8r=o(" (BigBird model)"),Y8r=l(),VE=a("li"),oFe=a("strong"),K8r=o("electra"),Z8r=o(" \u2014 "),CJ=a("a"),exr=o("FlaxElectraForPreTraining"),oxr=o(" (ELECTRA model)"),rxr=l(),XE=a("li"),rFe=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),wJ=a("a"),nxr=o("FlaxMBartForConditionalGeneration"),sxr=o(" (mBART model)"),lxr=l(),zE=a("li"),tFe=a("strong"),ixr=o("mt5"),dxr=o(" \u2014 "),AJ=a("a"),cxr=o("FlaxMT5ForConditionalGeneration"),fxr=o(" (mT5 model)"),mxr=l(),QE=a("li"),aFe=a("strong"),gxr=o("roberta"),hxr=o(" \u2014 "),yJ=a("a"),pxr=o("FlaxRobertaForMaskedLM"),uxr=o(" (RoBERTa model)"),_xr=l(),WE=a("li"),nFe=a("strong"),bxr=o("roformer"),vxr=o(" \u2014 "),LJ=a("a"),Fxr=o("FlaxRoFormerForMaskedLM"),Txr=o(" (RoFormer model)"),Mxr=l(),HE=a("li"),sFe=a("strong"),Exr=o("t5"),Cxr=o(" \u2014 "),xJ=a("a"),wxr=o("FlaxT5ForConditionalGeneration"),Axr=o(" (T5 model)"),yxr=l(),UE=a("li"),lFe=a("strong"),Lxr=o("wav2vec2"),xxr=o(" \u2014 "),$J=a("a"),$xr=o("FlaxWav2Vec2ForPreTraining"),kxr=o(" (Wav2Vec2 model)"),Sxr=l(),JE=a("li"),iFe=a("strong"),Rxr=o("xlm-roberta"),Bxr=o(" \u2014 "),kJ=a("a"),Pxr=o("FlaxXLMRobertaForMaskedLM"),Ixr=o(" (XLM-RoBERTa model)"),qxr=l(),F(YE.$$.fragment),Sqe=l(),Pc=a("h2"),KE=a("a"),dFe=a("span"),F(m7.$$.fragment),Nxr=l(),cFe=a("span"),jxr=o("FlaxAutoModelForMaskedLM"),Rqe=l(),hr=a("div"),F(g7.$$.fragment),Dxr=l(),Ic=a("p"),Gxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SJ=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" class method or the "),RJ=a("a"),Xxr=o("from_config()"),zxr=o(` class
method.`),Qxr=l(),h7=a("p"),Wxr=o("This class cannot be instantiated directly using "),fFe=a("code"),Hxr=o("__init__()"),Uxr=o(" (throws an error)."),Jxr=l(),Ot=a("div"),F(p7.$$.fragment),Yxr=l(),mFe=a("p"),Kxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zxr=l(),qc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),F(ZE.$$.fragment),s7r=l(),Or=a("div"),F(u7.$$.fragment),l7r=l(),hFe=a("p"),i7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d7r=l(),_n=a("p"),c7r=o("The model class to instantiate is selected based on the "),pFe=a("code"),f7r=o("model_type"),m7r=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),p7r=o("pretrained_model_name_or_path"),u7r=o(":"),_7r=l(),Le=a("ul"),eC=a("li"),bFe=a("strong"),b7r=o("albert"),v7r=o(" \u2014 "),PJ=a("a"),F7r=o("FlaxAlbertForMaskedLM"),T7r=o(" (ALBERT model)"),M7r=l(),oC=a("li"),vFe=a("strong"),E7r=o("bart"),C7r=o(" \u2014 "),IJ=a("a"),w7r=o("FlaxBartForConditionalGeneration"),A7r=o(" (BART model)"),y7r=l(),rC=a("li"),FFe=a("strong"),L7r=o("bert"),x7r=o(" \u2014 "),qJ=a("a"),$7r=o("FlaxBertForMaskedLM"),k7r=o(" (BERT model)"),S7r=l(),tC=a("li"),TFe=a("strong"),R7r=o("big_bird"),B7r=o(" \u2014 "),NJ=a("a"),P7r=o("FlaxBigBirdForMaskedLM"),I7r=o(" (BigBird model)"),q7r=l(),aC=a("li"),MFe=a("strong"),N7r=o("distilbert"),j7r=o(" \u2014 "),jJ=a("a"),D7r=o("FlaxDistilBertForMaskedLM"),G7r=o(" (DistilBERT model)"),O7r=l(),nC=a("li"),EFe=a("strong"),V7r=o("electra"),X7r=o(" \u2014 "),DJ=a("a"),z7r=o("FlaxElectraForMaskedLM"),Q7r=o(" (ELECTRA model)"),W7r=l(),sC=a("li"),CFe=a("strong"),H7r=o("mbart"),U7r=o(" \u2014 "),GJ=a("a"),J7r=o("FlaxMBartForConditionalGeneration"),Y7r=o(" (mBART model)"),K7r=l(),lC=a("li"),wFe=a("strong"),Z7r=o("roberta"),e9r=o(" \u2014 "),OJ=a("a"),o9r=o("FlaxRobertaForMaskedLM"),r9r=o(" (RoBERTa model)"),t9r=l(),iC=a("li"),AFe=a("strong"),a9r=o("roformer"),n9r=o(" \u2014 "),VJ=a("a"),s9r=o("FlaxRoFormerForMaskedLM"),l9r=o(" (RoFormer model)"),i9r=l(),dC=a("li"),yFe=a("strong"),d9r=o("xlm-roberta"),c9r=o(" \u2014 "),XJ=a("a"),f9r=o("FlaxXLMRobertaForMaskedLM"),m9r=o(" (XLM-RoBERTa model)"),g9r=l(),F(cC.$$.fragment),Bqe=l(),Nc=a("h2"),fC=a("a"),LFe=a("span"),F(_7.$$.fragment),h9r=l(),xFe=a("span"),p9r=o("FlaxAutoModelForSeq2SeqLM"),Pqe=l(),pr=a("div"),F(b7.$$.fragment),u9r=l(),jc=a("p"),_9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zJ=a("a"),b9r=o("from_pretrained()"),v9r=o(" class method or the "),QJ=a("a"),F9r=o("from_config()"),T9r=o(` class
method.`),M9r=l(),v7=a("p"),E9r=o("This class cannot be instantiated directly using "),$Fe=a("code"),C9r=o("__init__()"),w9r=o(" (throws an error)."),A9r=l(),Vt=a("div"),F(F7.$$.fragment),y9r=l(),kFe=a("p"),L9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x9r=l(),Dc=a("p"),$9r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),k9r=o("not"),S9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),R9r=o("from_pretrained()"),B9r=o(" to load the model weights."),P9r=l(),F(mC.$$.fragment),I9r=l(),Vr=a("div"),F(T7.$$.fragment),q9r=l(),RFe=a("p"),N9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j9r=l(),bn=a("p"),D9r=o("The model class to instantiate is selected based on the "),BFe=a("code"),G9r=o("model_type"),O9r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),z9r=o("pretrained_model_name_or_path"),Q9r=o(":"),W9r=l(),Se=a("ul"),gC=a("li"),qFe=a("strong"),H9r=o("bart"),U9r=o(" \u2014 "),HJ=a("a"),J9r=o("FlaxBartForConditionalGeneration"),Y9r=o(" (BART model)"),K9r=l(),hC=a("li"),NFe=a("strong"),Z9r=o("blenderbot"),e$r=o(" \u2014 "),UJ=a("a"),o$r=o("FlaxBlenderbotForConditionalGeneration"),r$r=o(" (Blenderbot model)"),t$r=l(),pC=a("li"),jFe=a("strong"),a$r=o("blenderbot-small"),n$r=o(" \u2014 "),JJ=a("a"),s$r=o("FlaxBlenderbotSmallForConditionalGeneration"),l$r=o(" (BlenderbotSmall model)"),i$r=l(),uC=a("li"),DFe=a("strong"),d$r=o("encoder-decoder"),c$r=o(" \u2014 "),YJ=a("a"),f$r=o("FlaxEncoderDecoderModel"),m$r=o(" (Encoder decoder model)"),g$r=l(),_C=a("li"),GFe=a("strong"),h$r=o("marian"),p$r=o(" \u2014 "),KJ=a("a"),u$r=o("FlaxMarianMTModel"),_$r=o(" (Marian model)"),b$r=l(),bC=a("li"),OFe=a("strong"),v$r=o("mbart"),F$r=o(" \u2014 "),ZJ=a("a"),T$r=o("FlaxMBartForConditionalGeneration"),M$r=o(" (mBART model)"),E$r=l(),vC=a("li"),VFe=a("strong"),C$r=o("mt5"),w$r=o(" \u2014 "),eY=a("a"),A$r=o("FlaxMT5ForConditionalGeneration"),y$r=o(" (mT5 model)"),L$r=l(),FC=a("li"),XFe=a("strong"),x$r=o("pegasus"),$$r=o(" \u2014 "),oY=a("a"),k$r=o("FlaxPegasusForConditionalGeneration"),S$r=o(" (Pegasus model)"),R$r=l(),TC=a("li"),zFe=a("strong"),B$r=o("t5"),P$r=o(" \u2014 "),rY=a("a"),I$r=o("FlaxT5ForConditionalGeneration"),q$r=o(" (T5 model)"),N$r=l(),F(MC.$$.fragment),Iqe=l(),Gc=a("h2"),EC=a("a"),QFe=a("span"),F(M7.$$.fragment),j$r=l(),WFe=a("span"),D$r=o("FlaxAutoModelForSequenceClassification"),qqe=l(),ur=a("div"),F(E7.$$.fragment),G$r=l(),Oc=a("p"),O$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tY=a("a"),V$r=o("from_pretrained()"),X$r=o(" class method or the "),aY=a("a"),z$r=o("from_config()"),Q$r=o(` class
method.`),W$r=l(),C7=a("p"),H$r=o("This class cannot be instantiated directly using "),HFe=a("code"),U$r=o("__init__()"),J$r=o(" (throws an error)."),Y$r=l(),Xt=a("div"),F(w7.$$.fragment),K$r=l(),UFe=a("p"),Z$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ekr=l(),Vc=a("p"),okr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),rkr=o("not"),tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),akr=o("from_pretrained()"),nkr=o(" to load the model weights."),skr=l(),F(CC.$$.fragment),lkr=l(),Xr=a("div"),F(A7.$$.fragment),ikr=l(),YFe=a("p"),dkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ckr=l(),vn=a("p"),fkr=o("The model class to instantiate is selected based on the "),KFe=a("code"),mkr=o("model_type"),gkr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),ukr=o("pretrained_model_name_or_path"),_kr=o(":"),bkr=l(),xe=a("ul"),wC=a("li"),o6e=a("strong"),vkr=o("albert"),Fkr=o(" \u2014 "),sY=a("a"),Tkr=o("FlaxAlbertForSequenceClassification"),Mkr=o(" (ALBERT model)"),Ekr=l(),AC=a("li"),r6e=a("strong"),Ckr=o("bart"),wkr=o(" \u2014 "),lY=a("a"),Akr=o("FlaxBartForSequenceClassification"),ykr=o(" (BART model)"),Lkr=l(),yC=a("li"),t6e=a("strong"),xkr=o("bert"),$kr=o(" \u2014 "),iY=a("a"),kkr=o("FlaxBertForSequenceClassification"),Skr=o(" (BERT model)"),Rkr=l(),LC=a("li"),a6e=a("strong"),Bkr=o("big_bird"),Pkr=o(" \u2014 "),dY=a("a"),Ikr=o("FlaxBigBirdForSequenceClassification"),qkr=o(" (BigBird model)"),Nkr=l(),xC=a("li"),n6e=a("strong"),jkr=o("distilbert"),Dkr=o(" \u2014 "),cY=a("a"),Gkr=o("FlaxDistilBertForSequenceClassification"),Okr=o(" (DistilBERT model)"),Vkr=l(),$C=a("li"),s6e=a("strong"),Xkr=o("electra"),zkr=o(" \u2014 "),fY=a("a"),Qkr=o("FlaxElectraForSequenceClassification"),Wkr=o(" (ELECTRA model)"),Hkr=l(),kC=a("li"),l6e=a("strong"),Ukr=o("mbart"),Jkr=o(" \u2014 "),mY=a("a"),Ykr=o("FlaxMBartForSequenceClassification"),Kkr=o(" (mBART model)"),Zkr=l(),SC=a("li"),i6e=a("strong"),eSr=o("roberta"),oSr=o(" \u2014 "),gY=a("a"),rSr=o("FlaxRobertaForSequenceClassification"),tSr=o(" (RoBERTa model)"),aSr=l(),RC=a("li"),d6e=a("strong"),nSr=o("roformer"),sSr=o(" \u2014 "),hY=a("a"),lSr=o("FlaxRoFormerForSequenceClassification"),iSr=o(" (RoFormer model)"),dSr=l(),BC=a("li"),c6e=a("strong"),cSr=o("xlm-roberta"),fSr=o(" \u2014 "),pY=a("a"),mSr=o("FlaxXLMRobertaForSequenceClassification"),gSr=o(" (XLM-RoBERTa model)"),hSr=l(),F(PC.$$.fragment),Nqe=l(),Xc=a("h2"),IC=a("a"),f6e=a("span"),F(y7.$$.fragment),pSr=l(),m6e=a("span"),uSr=o("FlaxAutoModelForQuestionAnswering"),jqe=l(),_r=a("div"),F(L7.$$.fragment),_Sr=l(),zc=a("p"),bSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uY=a("a"),vSr=o("from_pretrained()"),FSr=o(" class method or the "),_Y=a("a"),TSr=o("from_config()"),MSr=o(` class
method.`),ESr=l(),x7=a("p"),CSr=o("This class cannot be instantiated directly using "),g6e=a("code"),wSr=o("__init__()"),ASr=o(" (throws an error)."),ySr=l(),zt=a("div"),F($7.$$.fragment),LSr=l(),h6e=a("p"),xSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Sr=l(),Qc=a("p"),kSr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),SSr=o("not"),RSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),BSr=o("from_pretrained()"),PSr=o(" to load the model weights."),ISr=l(),F(qC.$$.fragment),qSr=l(),zr=a("div"),F(k7.$$.fragment),NSr=l(),u6e=a("p"),jSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DSr=l(),Fn=a("p"),GSr=o("The model class to instantiate is selected based on the "),_6e=a("code"),OSr=o("model_type"),VSr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),QSr=o("pretrained_model_name_or_path"),WSr=o(":"),HSr=l(),$e=a("ul"),NC=a("li"),F6e=a("strong"),USr=o("albert"),JSr=o(" \u2014 "),vY=a("a"),YSr=o("FlaxAlbertForQuestionAnswering"),KSr=o(" (ALBERT model)"),ZSr=l(),jC=a("li"),T6e=a("strong"),eRr=o("bart"),oRr=o(" \u2014 "),FY=a("a"),rRr=o("FlaxBartForQuestionAnswering"),tRr=o(" (BART model)"),aRr=l(),DC=a("li"),M6e=a("strong"),nRr=o("bert"),sRr=o(" \u2014 "),TY=a("a"),lRr=o("FlaxBertForQuestionAnswering"),iRr=o(" (BERT model)"),dRr=l(),GC=a("li"),E6e=a("strong"),cRr=o("big_bird"),fRr=o(" \u2014 "),MY=a("a"),mRr=o("FlaxBigBirdForQuestionAnswering"),gRr=o(" (BigBird model)"),hRr=l(),OC=a("li"),C6e=a("strong"),pRr=o("distilbert"),uRr=o(" \u2014 "),EY=a("a"),_Rr=o("FlaxDistilBertForQuestionAnswering"),bRr=o(" (DistilBERT model)"),vRr=l(),VC=a("li"),w6e=a("strong"),FRr=o("electra"),TRr=o(" \u2014 "),CY=a("a"),MRr=o("FlaxElectraForQuestionAnswering"),ERr=o(" (ELECTRA model)"),CRr=l(),XC=a("li"),A6e=a("strong"),wRr=o("mbart"),ARr=o(" \u2014 "),wY=a("a"),yRr=o("FlaxMBartForQuestionAnswering"),LRr=o(" (mBART model)"),xRr=l(),zC=a("li"),y6e=a("strong"),$Rr=o("roberta"),kRr=o(" \u2014 "),AY=a("a"),SRr=o("FlaxRobertaForQuestionAnswering"),RRr=o(" (RoBERTa model)"),BRr=l(),QC=a("li"),L6e=a("strong"),PRr=o("roformer"),IRr=o(" \u2014 "),yY=a("a"),qRr=o("FlaxRoFormerForQuestionAnswering"),NRr=o(" (RoFormer model)"),jRr=l(),WC=a("li"),x6e=a("strong"),DRr=o("xlm-roberta"),GRr=o(" \u2014 "),LY=a("a"),ORr=o("FlaxXLMRobertaForQuestionAnswering"),VRr=o(" (XLM-RoBERTa model)"),XRr=l(),F(HC.$$.fragment),Dqe=l(),Wc=a("h2"),UC=a("a"),$6e=a("span"),F(S7.$$.fragment),zRr=l(),k6e=a("span"),QRr=o("FlaxAutoModelForTokenClassification"),Gqe=l(),br=a("div"),F(R7.$$.fragment),WRr=l(),Hc=a("p"),HRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xY=a("a"),URr=o("from_pretrained()"),JRr=o(" class method or the "),$Y=a("a"),YRr=o("from_config()"),KRr=o(` class
method.`),ZRr=l(),B7=a("p"),eBr=o("This class cannot be instantiated directly using "),S6e=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),Qt=a("div"),F(P7.$$.fragment),aBr=l(),R6e=a("p"),nBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sBr=l(),Uc=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),cBr=o("from_pretrained()"),fBr=o(" to load the model weights."),mBr=l(),F(JC.$$.fragment),gBr=l(),Qr=a("div"),F(I7.$$.fragment),hBr=l(),P6e=a("p"),pBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uBr=l(),Tn=a("p"),_Br=o("The model class to instantiate is selected based on the "),I6e=a("code"),bBr=o("model_type"),vBr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),FBr=o("pretrained_model_name_or_path"),TBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(":"),CBr=l(),De=a("ul"),YC=a("li"),j6e=a("strong"),wBr=o("albert"),ABr=o(" \u2014 "),SY=a("a"),yBr=o("FlaxAlbertForTokenClassification"),LBr=o(" (ALBERT model)"),xBr=l(),KC=a("li"),D6e=a("strong"),$Br=o("bert"),kBr=o(" \u2014 "),RY=a("a"),SBr=o("FlaxBertForTokenClassification"),RBr=o(" (BERT model)"),BBr=l(),ZC=a("li"),G6e=a("strong"),PBr=o("big_bird"),IBr=o(" \u2014 "),BY=a("a"),qBr=o("FlaxBigBirdForTokenClassification"),NBr=o(" (BigBird model)"),jBr=l(),ew=a("li"),O6e=a("strong"),DBr=o("distilbert"),GBr=o(" \u2014 "),PY=a("a"),OBr=o("FlaxDistilBertForTokenClassification"),VBr=o(" (DistilBERT model)"),XBr=l(),ow=a("li"),V6e=a("strong"),zBr=o("electra"),QBr=o(" \u2014 "),IY=a("a"),WBr=o("FlaxElectraForTokenClassification"),HBr=o(" (ELECTRA model)"),UBr=l(),rw=a("li"),X6e=a("strong"),JBr=o("roberta"),YBr=o(" \u2014 "),qY=a("a"),KBr=o("FlaxRobertaForTokenClassification"),ZBr=o(" (RoBERTa model)"),ePr=l(),tw=a("li"),z6e=a("strong"),oPr=o("roformer"),rPr=o(" \u2014 "),NY=a("a"),tPr=o("FlaxRoFormerForTokenClassification"),aPr=o(" (RoFormer model)"),nPr=l(),aw=a("li"),Q6e=a("strong"),sPr=o("xlm-roberta"),lPr=o(" \u2014 "),jY=a("a"),iPr=o("FlaxXLMRobertaForTokenClassification"),dPr=o(" (XLM-RoBERTa model)"),cPr=l(),F(nw.$$.fragment),Oqe=l(),Jc=a("h2"),sw=a("a"),W6e=a("span"),F(q7.$$.fragment),fPr=l(),H6e=a("span"),mPr=o("FlaxAutoModelForMultipleChoice"),Vqe=l(),vr=a("div"),F(N7.$$.fragment),gPr=l(),Yc=a("p"),hPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DY=a("a"),pPr=o("from_pretrained()"),uPr=o(" class method or the "),GY=a("a"),_Pr=o("from_config()"),bPr=o(` class
method.`),vPr=l(),j7=a("p"),FPr=o("This class cannot be instantiated directly using "),U6e=a("code"),TPr=o("__init__()"),MPr=o(" (throws an error)."),EPr=l(),Wt=a("div"),F(D7.$$.fragment),CPr=l(),J6e=a("p"),wPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),APr=l(),Kc=a("p"),yPr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),LPr=o("not"),xPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),$Pr=o("from_pretrained()"),kPr=o(" to load the model weights."),SPr=l(),F(lw.$$.fragment),RPr=l(),Wr=a("div"),F(G7.$$.fragment),BPr=l(),K6e=a("p"),PPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IPr=l(),Mn=a("p"),qPr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),NPr=o("model_type"),jPr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),DPr=o("pretrained_model_name_or_path"),GPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),OPr=o("pretrained_model_name_or_path"),VPr=o(":"),XPr=l(),Ge=a("ul"),iw=a("li"),rTe=a("strong"),zPr=o("albert"),QPr=o(" \u2014 "),VY=a("a"),WPr=o("FlaxAlbertForMultipleChoice"),HPr=o(" (ALBERT model)"),UPr=l(),dw=a("li"),tTe=a("strong"),JPr=o("bert"),YPr=o(" \u2014 "),XY=a("a"),KPr=o("FlaxBertForMultipleChoice"),ZPr=o(" (BERT model)"),eIr=l(),cw=a("li"),aTe=a("strong"),oIr=o("big_bird"),rIr=o(" \u2014 "),zY=a("a"),tIr=o("FlaxBigBirdForMultipleChoice"),aIr=o(" (BigBird model)"),nIr=l(),fw=a("li"),nTe=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),QY=a("a"),iIr=o("FlaxDistilBertForMultipleChoice"),dIr=o(" (DistilBERT model)"),cIr=l(),mw=a("li"),sTe=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),WY=a("a"),gIr=o("FlaxElectraForMultipleChoice"),hIr=o(" (ELECTRA model)"),pIr=l(),gw=a("li"),lTe=a("strong"),uIr=o("roberta"),_Ir=o(" \u2014 "),HY=a("a"),bIr=o("FlaxRobertaForMultipleChoice"),vIr=o(" (RoBERTa model)"),FIr=l(),hw=a("li"),iTe=a("strong"),TIr=o("roformer"),MIr=o(" \u2014 "),UY=a("a"),EIr=o("FlaxRoFormerForMultipleChoice"),CIr=o(" (RoFormer model)"),wIr=l(),pw=a("li"),dTe=a("strong"),AIr=o("xlm-roberta"),yIr=o(" \u2014 "),JY=a("a"),LIr=o("FlaxXLMRobertaForMultipleChoice"),xIr=o(" (XLM-RoBERTa model)"),$Ir=l(),F(uw.$$.fragment),Xqe=l(),Zc=a("h2"),_w=a("a"),cTe=a("span"),F(O7.$$.fragment),kIr=l(),fTe=a("span"),SIr=o("FlaxAutoModelForNextSentencePrediction"),zqe=l(),Fr=a("div"),F(V7.$$.fragment),RIr=l(),ef=a("p"),BIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=a("a"),PIr=o("from_pretrained()"),IIr=o(" class method or the "),KY=a("a"),qIr=o("from_config()"),NIr=o(` class
method.`),jIr=l(),X7=a("p"),DIr=o("This class cannot be instantiated directly using "),mTe=a("code"),GIr=o("__init__()"),OIr=o(" (throws an error)."),VIr=l(),Ht=a("div"),F(z7.$$.fragment),XIr=l(),gTe=a("p"),zIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QIr=l(),of=a("p"),WIr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),HIr=o("not"),UIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),JIr=o("from_pretrained()"),YIr=o(" to load the model weights."),KIr=l(),F(bw.$$.fragment),ZIr=l(),Hr=a("div"),F(Q7.$$.fragment),eqr=l(),pTe=a("p"),oqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rqr=l(),En=a("p"),tqr=o("The model class to instantiate is selected based on the "),uTe=a("code"),aqr=o("model_type"),nqr=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),sqr=o("pretrained_model_name_or_path"),lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(":"),cqr=l(),vTe=a("ul"),vw=a("li"),FTe=a("strong"),fqr=o("bert"),mqr=o(" \u2014 "),eK=a("a"),gqr=o("FlaxBertForNextSentencePrediction"),hqr=o(" (BERT model)"),pqr=l(),F(Fw.$$.fragment),Qqe=l(),rf=a("h2"),Tw=a("a"),TTe=a("span"),F(W7.$$.fragment),uqr=l(),MTe=a("span"),_qr=o("FlaxAutoModelForImageClassification"),Wqe=l(),Tr=a("div"),F(H7.$$.fragment),bqr=l(),tf=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oK=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),rK=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),U7=a("p"),wqr=o("This class cannot be instantiated directly using "),ETe=a("code"),Aqr=o("__init__()"),yqr=o(" (throws an error)."),Lqr=l(),Ut=a("div"),F(J7.$$.fragment),xqr=l(),CTe=a("p"),$qr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kqr=l(),af=a("p"),Sqr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),Rqr=o("not"),Bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),Pqr=o("from_pretrained()"),Iqr=o(" to load the model weights."),qqr=l(),F(Mw.$$.fragment),Nqr=l(),Ur=a("div"),F(Y7.$$.fragment),jqr=l(),ATe=a("p"),Dqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gqr=l(),Cn=a("p"),Oqr=o("The model class to instantiate is selected based on the "),yTe=a("code"),Vqr=o("model_type"),Xqr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),zqr=o("pretrained_model_name_or_path"),Qqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),Wqr=o("pretrained_model_name_or_path"),Hqr=o(":"),Uqr=l(),K7=a("ul"),Ew=a("li"),$Te=a("strong"),Jqr=o("beit"),Yqr=o(" \u2014 "),aK=a("a"),Kqr=o("FlaxBeitForImageClassification"),Zqr=o(" (BEiT model)"),eNr=l(),Cw=a("li"),kTe=a("strong"),oNr=o("vit"),rNr=o(" \u2014 "),nK=a("a"),tNr=o("FlaxViTForImageClassification"),aNr=o(" (ViT model)"),nNr=l(),F(ww.$$.fragment),Hqe=l(),nf=a("h2"),Aw=a("a"),STe=a("span"),F(Z7.$$.fragment),sNr=l(),RTe=a("span"),lNr=o("FlaxAutoModelForVision2Seq"),Uqe=l(),Mr=a("div"),F(e9.$$.fragment),iNr=l(),sf=a("p"),dNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sK=a("a"),cNr=o("from_pretrained()"),fNr=o(" class method or the "),lK=a("a"),mNr=o("from_config()"),gNr=o(` class
method.`),hNr=l(),o9=a("p"),pNr=o("This class cannot be instantiated directly using "),BTe=a("code"),uNr=o("__init__()"),_Nr=o(" (throws an error)."),bNr=l(),Jt=a("div"),F(r9.$$.fragment),vNr=l(),PTe=a("p"),FNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TNr=l(),lf=a("p"),MNr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),ENr=o("not"),CNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),wNr=o("from_pretrained()"),ANr=o(" to load the model weights."),yNr=l(),F(yw.$$.fragment),LNr=l(),Jr=a("div"),F(t9.$$.fragment),xNr=l(),qTe=a("p"),$Nr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kNr=l(),wn=a("p"),SNr=o("The model class to instantiate is selected based on the "),NTe=a("code"),RNr=o("model_type"),BNr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),PNr=o("pretrained_model_name_or_path"),INr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),qNr=o("pretrained_model_name_or_path"),NNr=o(":"),jNr=l(),GTe=a("ul"),Lw=a("li"),OTe=a("strong"),DNr=o("vision-encoder-decoder"),GNr=o(" \u2014 "),dK=a("a"),ONr=o("FlaxVisionEncoderDecoderModel"),VNr=o(" (Vision Encoder decoder model)"),XNr=l(),F(xw.$$.fragment),this.h()},l(f){const _=Tyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var a9=s(p);m=n(a9,"A",{id:!0,class:!0,href:!0});var VTe=s(m);u=n(VTe,"SPAN",{});var XTe=s(u);T(d.$$.fragment,XTe),XTe.forEach(t),VTe.forEach(t),h=i(a9),Mo=n(a9,"SPAN",{});var zTe=s(Mo);ii=r(zTe,"Auto Classes"),zTe.forEach(t),a9.forEach(t),mf=i(f),et=n(f,"P",{});var n9=s(et);di=r(n9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(n9,"CODE",{});var QTe=s(ci);U0=r(QTe,"from_pretrained()"),QTe.forEach(t),gf=r(n9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),n9.forEach(t),qe=i(f),Xe=n(f,"P",{});var An=s(Xe);fi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var WTe=s(yn);J0=r(WTe,"AutoConfig"),WTe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var HTe=s(xn);Y0=r(HTe,"AutoModel"),HTe.forEach(t),mi=r(An,`, and
`),$n=n(An,"A",{href:!0});var UTe=s($n);K0=r(UTe,"AutoTokenizer"),UTe.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var s9=s(Ae);u$=r(s9,"will create a model that is an instance of "),hi=n(s9,"A",{href:!0});var JTe=s(hi);_$=r(JTe,"BertModel"),JTe.forEach(t),b$=r(s9,"."),s9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var l9=s(Ea);v$=r(l9,"There is one class of "),pf=n(l9,"CODE",{});var YTe=s(pf);F$=r(YTe,"AutoModel"),YTe.forEach(t),aDe=r(l9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),l9.forEach(t),WPe=i(f),pi=n(f,"H2",{class:!0});var i9=s(pi);uf=n(i9,"A",{id:!0,class:!0,href:!0});var KTe=s(uf);ree=n(KTe,"SPAN",{});var ZTe=s(ree);T(Z0.$$.fragment,ZTe),ZTe.forEach(t),KTe.forEach(t),nDe=i(i9),tee=n(i9,"SPAN",{});var eMe=s(tee);sDe=r(eMe,"Extending the Auto Classes"),eMe.forEach(t),i9.forEach(t),HPe=i(f),kn=n(f,"P",{});var df=s(kn);lDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),aee=n(df,"CODE",{});var oMe=s(aee);iDe=r(oMe,"NewModel"),oMe.forEach(t),dDe=r(df,", make sure you have a "),nee=n(df,"CODE",{});var rMe=s(nee);cDe=r(rMe,"NewModelConfig"),rMe.forEach(t),fDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),UPe=i(f),T(ey.$$.fragment,f),JPe=i(f),T$=n(f,"P",{});var tMe=s(T$);mDe=r(tMe,"You will then be able to use the auto classes like you would usually do!"),tMe.forEach(t),YPe=i(f),T(_f.$$.fragment,f),KPe=i(f),ui=n(f,"H2",{class:!0});var d9=s(ui);bf=n(d9,"A",{id:!0,class:!0,href:!0});var aMe=s(bf);see=n(aMe,"SPAN",{});var nMe=s(see);T(oy.$$.fragment,nMe),nMe.forEach(t),aMe.forEach(t),gDe=i(d9),lee=n(d9,"SPAN",{});var sMe=s(lee);hDe=r(sMe,"AutoConfig"),sMe.forEach(t),d9.forEach(t),ZPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(ry.$$.fragment,Kr),pDe=i(Kr),ty=n(Kr,"P",{});var c9=s(ty);uDe=r(c9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M$=n(c9,"A",{href:!0});var lMe=s(M$);_De=r(lMe,"from_pretrained()"),lMe.forEach(t),bDe=r(c9," class method."),c9.forEach(t),vDe=i(Kr),ay=n(Kr,"P",{});var f9=s(ay);FDe=r(f9,"This class cannot be instantiated directly using "),iee=n(f9,"CODE",{});var iMe=s(iee);TDe=r(iMe,"__init__()"),iMe.forEach(t),MDe=r(f9," (throws an error)."),f9.forEach(t),EDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(ny.$$.fragment,Zr),CDe=i(Zr),dee=n(Zr,"P",{});var dMe=s(dee);wDe=r(dMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dMe.forEach(t),ADe=i(Zr),_i=n(Zr,"P",{});var cf=s(_i);yDe=r(cf,"The configuration class to instantiate is selected based on the "),cee=n(cf,"CODE",{});var cMe=s(cee);LDe=r(cMe,"model_type"),cMe.forEach(t),xDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),fee=n(cf,"CODE",{});var fMe=s(fee);$De=r(fMe,"pretrained_model_name_or_path"),fMe.forEach(t),kDe=r(cf,":"),cf.forEach(t),SDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var $w=s(vf);mee=n($w,"STRONG",{});var mMe=s(mee);RDe=r(mMe,"albert"),mMe.forEach(t),BDe=r($w," \u2014 "),E$=n($w,"A",{href:!0});var gMe=s(E$);PDe=r(gMe,"AlbertConfig"),gMe.forEach(t),IDe=r($w," (ALBERT model)"),$w.forEach(t),qDe=i(L),Ff=n(L,"LI",{});var kw=s(Ff);gee=n(kw,"STRONG",{});var hMe=s(gee);NDe=r(hMe,"bart"),hMe.forEach(t),jDe=r(kw," \u2014 "),C$=n(kw,"A",{href:!0});var pMe=s(C$);DDe=r(pMe,"BartConfig"),pMe.forEach(t),GDe=r(kw," (BART model)"),kw.forEach(t),ODe=i(L),Tf=n(L,"LI",{});var Sw=s(Tf);hee=n(Sw,"STRONG",{});var uMe=s(hee);VDe=r(uMe,"beit"),uMe.forEach(t),XDe=r(Sw," \u2014 "),w$=n(Sw,"A",{href:!0});var _Me=s(w$);zDe=r(_Me,"BeitConfig"),_Me.forEach(t),QDe=r(Sw," (BEiT model)"),Sw.forEach(t),WDe=i(L),Mf=n(L,"LI",{});var Rw=s(Mf);pee=n(Rw,"STRONG",{});var bMe=s(pee);HDe=r(bMe,"bert"),bMe.forEach(t),UDe=r(Rw," \u2014 "),A$=n(Rw,"A",{href:!0});var vMe=s(A$);JDe=r(vMe,"BertConfig"),vMe.forEach(t),YDe=r(Rw," (BERT model)"),Rw.forEach(t),KDe=i(L),Ef=n(L,"LI",{});var Bw=s(Ef);uee=n(Bw,"STRONG",{});var FMe=s(uee);ZDe=r(FMe,"bert-generation"),FMe.forEach(t),eGe=r(Bw," \u2014 "),y$=n(Bw,"A",{href:!0});var TMe=s(y$);oGe=r(TMe,"BertGenerationConfig"),TMe.forEach(t),rGe=r(Bw," (Bert Generation model)"),Bw.forEach(t),tGe=i(L),Cf=n(L,"LI",{});var Pw=s(Cf);_ee=n(Pw,"STRONG",{});var MMe=s(_ee);aGe=r(MMe,"big_bird"),MMe.forEach(t),nGe=r(Pw," \u2014 "),L$=n(Pw,"A",{href:!0});var EMe=s(L$);sGe=r(EMe,"BigBirdConfig"),EMe.forEach(t),lGe=r(Pw," (BigBird model)"),Pw.forEach(t),iGe=i(L),wf=n(L,"LI",{});var Iw=s(wf);bee=n(Iw,"STRONG",{});var CMe=s(bee);dGe=r(CMe,"bigbird_pegasus"),CMe.forEach(t),cGe=r(Iw," \u2014 "),x$=n(Iw,"A",{href:!0});var wMe=s(x$);fGe=r(wMe,"BigBirdPegasusConfig"),wMe.forEach(t),mGe=r(Iw," (BigBirdPegasus model)"),Iw.forEach(t),gGe=i(L),Af=n(L,"LI",{});var qw=s(Af);vee=n(qw,"STRONG",{});var AMe=s(vee);hGe=r(AMe,"blenderbot"),AMe.forEach(t),pGe=r(qw," \u2014 "),$$=n(qw,"A",{href:!0});var yMe=s($$);uGe=r(yMe,"BlenderbotConfig"),yMe.forEach(t),_Ge=r(qw," (Blenderbot model)"),qw.forEach(t),bGe=i(L),yf=n(L,"LI",{});var Nw=s(yf);Fee=n(Nw,"STRONG",{});var LMe=s(Fee);vGe=r(LMe,"blenderbot-small"),LMe.forEach(t),FGe=r(Nw," \u2014 "),k$=n(Nw,"A",{href:!0});var xMe=s(k$);TGe=r(xMe,"BlenderbotSmallConfig"),xMe.forEach(t),MGe=r(Nw," (BlenderbotSmall model)"),Nw.forEach(t),EGe=i(L),Lf=n(L,"LI",{});var jw=s(Lf);Tee=n(jw,"STRONG",{});var $Me=s(Tee);CGe=r($Me,"camembert"),$Me.forEach(t),wGe=r(jw," \u2014 "),S$=n(jw,"A",{href:!0});var kMe=s(S$);AGe=r(kMe,"CamembertConfig"),kMe.forEach(t),yGe=r(jw," (CamemBERT model)"),jw.forEach(t),LGe=i(L),xf=n(L,"LI",{});var Dw=s(xf);Mee=n(Dw,"STRONG",{});var SMe=s(Mee);xGe=r(SMe,"canine"),SMe.forEach(t),$Ge=r(Dw," \u2014 "),R$=n(Dw,"A",{href:!0});var RMe=s(R$);kGe=r(RMe,"CanineConfig"),RMe.forEach(t),SGe=r(Dw," (Canine model)"),Dw.forEach(t),RGe=i(L),$f=n(L,"LI",{});var Gw=s($f);Eee=n(Gw,"STRONG",{});var BMe=s(Eee);BGe=r(BMe,"clip"),BMe.forEach(t),PGe=r(Gw," \u2014 "),B$=n(Gw,"A",{href:!0});var PMe=s(B$);IGe=r(PMe,"CLIPConfig"),PMe.forEach(t),qGe=r(Gw," (CLIP model)"),Gw.forEach(t),NGe=i(L),kf=n(L,"LI",{});var Ow=s(kf);Cee=n(Ow,"STRONG",{});var IMe=s(Cee);jGe=r(IMe,"convbert"),IMe.forEach(t),DGe=r(Ow," \u2014 "),P$=n(Ow,"A",{href:!0});var qMe=s(P$);GGe=r(qMe,"ConvBertConfig"),qMe.forEach(t),OGe=r(Ow," (ConvBERT model)"),Ow.forEach(t),VGe=i(L),Sf=n(L,"LI",{});var Vw=s(Sf);wee=n(Vw,"STRONG",{});var NMe=s(wee);XGe=r(NMe,"convnext"),NMe.forEach(t),zGe=r(Vw," \u2014 "),I$=n(Vw,"A",{href:!0});var jMe=s(I$);QGe=r(jMe,"ConvNextConfig"),jMe.forEach(t),WGe=r(Vw," (ConvNext model)"),Vw.forEach(t),HGe=i(L),Rf=n(L,"LI",{});var Xw=s(Rf);Aee=n(Xw,"STRONG",{});var DMe=s(Aee);UGe=r(DMe,"ctrl"),DMe.forEach(t),JGe=r(Xw," \u2014 "),q$=n(Xw,"A",{href:!0});var GMe=s(q$);YGe=r(GMe,"CTRLConfig"),GMe.forEach(t),KGe=r(Xw," (CTRL model)"),Xw.forEach(t),ZGe=i(L),Bf=n(L,"LI",{});var zw=s(Bf);yee=n(zw,"STRONG",{});var OMe=s(yee);eOe=r(OMe,"data2vec-audio"),OMe.forEach(t),oOe=r(zw," \u2014 "),N$=n(zw,"A",{href:!0});var VMe=s(N$);rOe=r(VMe,"Data2VecAudioConfig"),VMe.forEach(t),tOe=r(zw," (Data2VecAudio model)"),zw.forEach(t),aOe=i(L),Pf=n(L,"LI",{});var Qw=s(Pf);Lee=n(Qw,"STRONG",{});var XMe=s(Lee);nOe=r(XMe,"data2vec-text"),XMe.forEach(t),sOe=r(Qw," \u2014 "),j$=n(Qw,"A",{href:!0});var zMe=s(j$);lOe=r(zMe,"Data2VecTextConfig"),zMe.forEach(t),iOe=r(Qw," (Data2VecText model)"),Qw.forEach(t),dOe=i(L),If=n(L,"LI",{});var Ww=s(If);xee=n(Ww,"STRONG",{});var QMe=s(xee);cOe=r(QMe,"data2vec-vision"),QMe.forEach(t),fOe=r(Ww," \u2014 "),D$=n(Ww,"A",{href:!0});var WMe=s(D$);mOe=r(WMe,"Data2VecVisionConfig"),WMe.forEach(t),gOe=r(Ww," (Data2VecVision model)"),Ww.forEach(t),hOe=i(L),qf=n(L,"LI",{});var Hw=s(qf);$ee=n(Hw,"STRONG",{});var HMe=s($ee);pOe=r(HMe,"deberta"),HMe.forEach(t),uOe=r(Hw," \u2014 "),G$=n(Hw,"A",{href:!0});var UMe=s(G$);_Oe=r(UMe,"DebertaConfig"),UMe.forEach(t),bOe=r(Hw," (DeBERTa model)"),Hw.forEach(t),vOe=i(L),Nf=n(L,"LI",{});var Uw=s(Nf);kee=n(Uw,"STRONG",{});var JMe=s(kee);FOe=r(JMe,"deberta-v2"),JMe.forEach(t),TOe=r(Uw," \u2014 "),O$=n(Uw,"A",{href:!0});var YMe=s(O$);MOe=r(YMe,"DebertaV2Config"),YMe.forEach(t),EOe=r(Uw," (DeBERTa-v2 model)"),Uw.forEach(t),COe=i(L),jf=n(L,"LI",{});var Jw=s(jf);See=n(Jw,"STRONG",{});var KMe=s(See);wOe=r(KMe,"decision_transformer"),KMe.forEach(t),AOe=r(Jw," \u2014 "),V$=n(Jw,"A",{href:!0});var ZMe=s(V$);yOe=r(ZMe,"DecisionTransformerConfig"),ZMe.forEach(t),LOe=r(Jw," (Decision Transformer model)"),Jw.forEach(t),xOe=i(L),Df=n(L,"LI",{});var Yw=s(Df);Ree=n(Yw,"STRONG",{});var eEe=s(Ree);$Oe=r(eEe,"deit"),eEe.forEach(t),kOe=r(Yw," \u2014 "),X$=n(Yw,"A",{href:!0});var oEe=s(X$);SOe=r(oEe,"DeiTConfig"),oEe.forEach(t),ROe=r(Yw," (DeiT model)"),Yw.forEach(t),BOe=i(L),Gf=n(L,"LI",{});var Kw=s(Gf);Bee=n(Kw,"STRONG",{});var rEe=s(Bee);POe=r(rEe,"detr"),rEe.forEach(t),IOe=r(Kw," \u2014 "),z$=n(Kw,"A",{href:!0});var QNr=s(z$);qOe=r(QNr,"DetrConfig"),QNr.forEach(t),NOe=r(Kw," (DETR model)"),Kw.forEach(t),jOe=i(L),Of=n(L,"LI",{});var tEe=s(Of);Pee=n(tEe,"STRONG",{});var WNr=s(Pee);DOe=r(WNr,"distilbert"),WNr.forEach(t),GOe=r(tEe," \u2014 "),Q$=n(tEe,"A",{href:!0});var HNr=s(Q$);OOe=r(HNr,"DistilBertConfig"),HNr.forEach(t),VOe=r(tEe," (DistilBERT model)"),tEe.forEach(t),XOe=i(L),Vf=n(L,"LI",{});var aEe=s(Vf);Iee=n(aEe,"STRONG",{});var UNr=s(Iee);zOe=r(UNr,"dpr"),UNr.forEach(t),QOe=r(aEe," \u2014 "),W$=n(aEe,"A",{href:!0});var JNr=s(W$);WOe=r(JNr,"DPRConfig"),JNr.forEach(t),HOe=r(aEe," (DPR model)"),aEe.forEach(t),UOe=i(L),Xf=n(L,"LI",{});var nEe=s(Xf);qee=n(nEe,"STRONG",{});var YNr=s(qee);JOe=r(YNr,"dpt"),YNr.forEach(t),YOe=r(nEe," \u2014 "),H$=n(nEe,"A",{href:!0});var KNr=s(H$);KOe=r(KNr,"DPTConfig"),KNr.forEach(t),ZOe=r(nEe," (DPT model)"),nEe.forEach(t),eVe=i(L),zf=n(L,"LI",{});var sEe=s(zf);Nee=n(sEe,"STRONG",{});var ZNr=s(Nee);oVe=r(ZNr,"electra"),ZNr.forEach(t),rVe=r(sEe," \u2014 "),U$=n(sEe,"A",{href:!0});var ejr=s(U$);tVe=r(ejr,"ElectraConfig"),ejr.forEach(t),aVe=r(sEe," (ELECTRA model)"),sEe.forEach(t),nVe=i(L),Qf=n(L,"LI",{});var lEe=s(Qf);jee=n(lEe,"STRONG",{});var ojr=s(jee);sVe=r(ojr,"encoder-decoder"),ojr.forEach(t),lVe=r(lEe," \u2014 "),J$=n(lEe,"A",{href:!0});var rjr=s(J$);iVe=r(rjr,"EncoderDecoderConfig"),rjr.forEach(t),dVe=r(lEe," (Encoder decoder model)"),lEe.forEach(t),cVe=i(L),Wf=n(L,"LI",{});var iEe=s(Wf);Dee=n(iEe,"STRONG",{});var tjr=s(Dee);fVe=r(tjr,"flaubert"),tjr.forEach(t),mVe=r(iEe," \u2014 "),Y$=n(iEe,"A",{href:!0});var ajr=s(Y$);gVe=r(ajr,"FlaubertConfig"),ajr.forEach(t),hVe=r(iEe," (FlauBERT model)"),iEe.forEach(t),pVe=i(L),Hf=n(L,"LI",{});var dEe=s(Hf);Gee=n(dEe,"STRONG",{});var njr=s(Gee);uVe=r(njr,"flava"),njr.forEach(t),_Ve=r(dEe," \u2014 "),K$=n(dEe,"A",{href:!0});var sjr=s(K$);bVe=r(sjr,"FlavaConfig"),sjr.forEach(t),vVe=r(dEe," (Flava model)"),dEe.forEach(t),FVe=i(L),Uf=n(L,"LI",{});var cEe=s(Uf);Oee=n(cEe,"STRONG",{});var ljr=s(Oee);TVe=r(ljr,"fnet"),ljr.forEach(t),MVe=r(cEe," \u2014 "),Z$=n(cEe,"A",{href:!0});var ijr=s(Z$);EVe=r(ijr,"FNetConfig"),ijr.forEach(t),CVe=r(cEe," (FNet model)"),cEe.forEach(t),wVe=i(L),Jf=n(L,"LI",{});var fEe=s(Jf);Vee=n(fEe,"STRONG",{});var djr=s(Vee);AVe=r(djr,"fsmt"),djr.forEach(t),yVe=r(fEe," \u2014 "),ek=n(fEe,"A",{href:!0});var cjr=s(ek);LVe=r(cjr,"FSMTConfig"),cjr.forEach(t),xVe=r(fEe," (FairSeq Machine-Translation model)"),fEe.forEach(t),$Ve=i(L),Yf=n(L,"LI",{});var mEe=s(Yf);Xee=n(mEe,"STRONG",{});var fjr=s(Xee);kVe=r(fjr,"funnel"),fjr.forEach(t),SVe=r(mEe," \u2014 "),ok=n(mEe,"A",{href:!0});var mjr=s(ok);RVe=r(mjr,"FunnelConfig"),mjr.forEach(t),BVe=r(mEe," (Funnel Transformer model)"),mEe.forEach(t),PVe=i(L),Kf=n(L,"LI",{});var gEe=s(Kf);zee=n(gEe,"STRONG",{});var gjr=s(zee);IVe=r(gjr,"glpn"),gjr.forEach(t),qVe=r(gEe," \u2014 "),rk=n(gEe,"A",{href:!0});var hjr=s(rk);NVe=r(hjr,"GLPNConfig"),hjr.forEach(t),jVe=r(gEe," (GLPN model)"),gEe.forEach(t),DVe=i(L),Zf=n(L,"LI",{});var hEe=s(Zf);Qee=n(hEe,"STRONG",{});var pjr=s(Qee);GVe=r(pjr,"gpt2"),pjr.forEach(t),OVe=r(hEe," \u2014 "),tk=n(hEe,"A",{href:!0});var ujr=s(tk);VVe=r(ujr,"GPT2Config"),ujr.forEach(t),XVe=r(hEe," (OpenAI GPT-2 model)"),hEe.forEach(t),zVe=i(L),em=n(L,"LI",{});var pEe=s(em);Wee=n(pEe,"STRONG",{});var _jr=s(Wee);QVe=r(_jr,"gpt_neo"),_jr.forEach(t),WVe=r(pEe," \u2014 "),ak=n(pEe,"A",{href:!0});var bjr=s(ak);HVe=r(bjr,"GPTNeoConfig"),bjr.forEach(t),UVe=r(pEe," (GPT Neo model)"),pEe.forEach(t),JVe=i(L),om=n(L,"LI",{});var uEe=s(om);Hee=n(uEe,"STRONG",{});var vjr=s(Hee);YVe=r(vjr,"gptj"),vjr.forEach(t),KVe=r(uEe," \u2014 "),nk=n(uEe,"A",{href:!0});var Fjr=s(nk);ZVe=r(Fjr,"GPTJConfig"),Fjr.forEach(t),eXe=r(uEe," (GPT-J model)"),uEe.forEach(t),oXe=i(L),rm=n(L,"LI",{});var _Ee=s(rm);Uee=n(_Ee,"STRONG",{});var Tjr=s(Uee);rXe=r(Tjr,"hubert"),Tjr.forEach(t),tXe=r(_Ee," \u2014 "),sk=n(_Ee,"A",{href:!0});var Mjr=s(sk);aXe=r(Mjr,"HubertConfig"),Mjr.forEach(t),nXe=r(_Ee," (Hubert model)"),_Ee.forEach(t),sXe=i(L),tm=n(L,"LI",{});var bEe=s(tm);Jee=n(bEe,"STRONG",{});var Ejr=s(Jee);lXe=r(Ejr,"ibert"),Ejr.forEach(t),iXe=r(bEe," \u2014 "),lk=n(bEe,"A",{href:!0});var Cjr=s(lk);dXe=r(Cjr,"IBertConfig"),Cjr.forEach(t),cXe=r(bEe," (I-BERT model)"),bEe.forEach(t),fXe=i(L),am=n(L,"LI",{});var vEe=s(am);Yee=n(vEe,"STRONG",{});var wjr=s(Yee);mXe=r(wjr,"imagegpt"),wjr.forEach(t),gXe=r(vEe," \u2014 "),ik=n(vEe,"A",{href:!0});var Ajr=s(ik);hXe=r(Ajr,"ImageGPTConfig"),Ajr.forEach(t),pXe=r(vEe," (ImageGPT model)"),vEe.forEach(t),uXe=i(L),nm=n(L,"LI",{});var FEe=s(nm);Kee=n(FEe,"STRONG",{});var yjr=s(Kee);_Xe=r(yjr,"layoutlm"),yjr.forEach(t),bXe=r(FEe," \u2014 "),dk=n(FEe,"A",{href:!0});var Ljr=s(dk);vXe=r(Ljr,"LayoutLMConfig"),Ljr.forEach(t),FXe=r(FEe," (LayoutLM model)"),FEe.forEach(t),TXe=i(L),sm=n(L,"LI",{});var TEe=s(sm);Zee=n(TEe,"STRONG",{});var xjr=s(Zee);MXe=r(xjr,"layoutlmv2"),xjr.forEach(t),EXe=r(TEe," \u2014 "),ck=n(TEe,"A",{href:!0});var $jr=s(ck);CXe=r($jr,"LayoutLMv2Config"),$jr.forEach(t),wXe=r(TEe," (LayoutLMv2 model)"),TEe.forEach(t),AXe=i(L),lm=n(L,"LI",{});var MEe=s(lm);eoe=n(MEe,"STRONG",{});var kjr=s(eoe);yXe=r(kjr,"led"),kjr.forEach(t),LXe=r(MEe," \u2014 "),fk=n(MEe,"A",{href:!0});var Sjr=s(fk);xXe=r(Sjr,"LEDConfig"),Sjr.forEach(t),$Xe=r(MEe," (LED model)"),MEe.forEach(t),kXe=i(L),im=n(L,"LI",{});var EEe=s(im);ooe=n(EEe,"STRONG",{});var Rjr=s(ooe);SXe=r(Rjr,"longformer"),Rjr.forEach(t),RXe=r(EEe," \u2014 "),mk=n(EEe,"A",{href:!0});var Bjr=s(mk);BXe=r(Bjr,"LongformerConfig"),Bjr.forEach(t),PXe=r(EEe," (Longformer model)"),EEe.forEach(t),IXe=i(L),dm=n(L,"LI",{});var CEe=s(dm);roe=n(CEe,"STRONG",{});var Pjr=s(roe);qXe=r(Pjr,"luke"),Pjr.forEach(t),NXe=r(CEe," \u2014 "),gk=n(CEe,"A",{href:!0});var Ijr=s(gk);jXe=r(Ijr,"LukeConfig"),Ijr.forEach(t),DXe=r(CEe," (LUKE model)"),CEe.forEach(t),GXe=i(L),cm=n(L,"LI",{});var wEe=s(cm);toe=n(wEe,"STRONG",{});var qjr=s(toe);OXe=r(qjr,"lxmert"),qjr.forEach(t),VXe=r(wEe," \u2014 "),hk=n(wEe,"A",{href:!0});var Njr=s(hk);XXe=r(Njr,"LxmertConfig"),Njr.forEach(t),zXe=r(wEe," (LXMERT model)"),wEe.forEach(t),QXe=i(L),fm=n(L,"LI",{});var AEe=s(fm);aoe=n(AEe,"STRONG",{});var jjr=s(aoe);WXe=r(jjr,"m2m_100"),jjr.forEach(t),HXe=r(AEe," \u2014 "),pk=n(AEe,"A",{href:!0});var Djr=s(pk);UXe=r(Djr,"M2M100Config"),Djr.forEach(t),JXe=r(AEe," (M2M100 model)"),AEe.forEach(t),YXe=i(L),mm=n(L,"LI",{});var yEe=s(mm);noe=n(yEe,"STRONG",{});var Gjr=s(noe);KXe=r(Gjr,"marian"),Gjr.forEach(t),ZXe=r(yEe," \u2014 "),uk=n(yEe,"A",{href:!0});var Ojr=s(uk);eze=r(Ojr,"MarianConfig"),Ojr.forEach(t),oze=r(yEe," (Marian model)"),yEe.forEach(t),rze=i(L),gm=n(L,"LI",{});var LEe=s(gm);soe=n(LEe,"STRONG",{});var Vjr=s(soe);tze=r(Vjr,"maskformer"),Vjr.forEach(t),aze=r(LEe," \u2014 "),_k=n(LEe,"A",{href:!0});var Xjr=s(_k);nze=r(Xjr,"MaskFormerConfig"),Xjr.forEach(t),sze=r(LEe," (MaskFormer model)"),LEe.forEach(t),lze=i(L),hm=n(L,"LI",{});var xEe=s(hm);loe=n(xEe,"STRONG",{});var zjr=s(loe);ize=r(zjr,"mbart"),zjr.forEach(t),dze=r(xEe," \u2014 "),bk=n(xEe,"A",{href:!0});var Qjr=s(bk);cze=r(Qjr,"MBartConfig"),Qjr.forEach(t),fze=r(xEe," (mBART model)"),xEe.forEach(t),mze=i(L),pm=n(L,"LI",{});var $Ee=s(pm);ioe=n($Ee,"STRONG",{});var Wjr=s(ioe);gze=r(Wjr,"megatron-bert"),Wjr.forEach(t),hze=r($Ee," \u2014 "),vk=n($Ee,"A",{href:!0});var Hjr=s(vk);pze=r(Hjr,"MegatronBertConfig"),Hjr.forEach(t),uze=r($Ee," (MegatronBert model)"),$Ee.forEach(t),_ze=i(L),um=n(L,"LI",{});var kEe=s(um);doe=n(kEe,"STRONG",{});var Ujr=s(doe);bze=r(Ujr,"mobilebert"),Ujr.forEach(t),vze=r(kEe," \u2014 "),Fk=n(kEe,"A",{href:!0});var Jjr=s(Fk);Fze=r(Jjr,"MobileBertConfig"),Jjr.forEach(t),Tze=r(kEe," (MobileBERT model)"),kEe.forEach(t),Mze=i(L),_m=n(L,"LI",{});var SEe=s(_m);coe=n(SEe,"STRONG",{});var Yjr=s(coe);Eze=r(Yjr,"mpnet"),Yjr.forEach(t),Cze=r(SEe," \u2014 "),Tk=n(SEe,"A",{href:!0});var Kjr=s(Tk);wze=r(Kjr,"MPNetConfig"),Kjr.forEach(t),Aze=r(SEe," (MPNet model)"),SEe.forEach(t),yze=i(L),bm=n(L,"LI",{});var REe=s(bm);foe=n(REe,"STRONG",{});var Zjr=s(foe);Lze=r(Zjr,"mt5"),Zjr.forEach(t),xze=r(REe," \u2014 "),Mk=n(REe,"A",{href:!0});var eDr=s(Mk);$ze=r(eDr,"MT5Config"),eDr.forEach(t),kze=r(REe," (mT5 model)"),REe.forEach(t),Sze=i(L),vm=n(L,"LI",{});var BEe=s(vm);moe=n(BEe,"STRONG",{});var oDr=s(moe);Rze=r(oDr,"nystromformer"),oDr.forEach(t),Bze=r(BEe," \u2014 "),Ek=n(BEe,"A",{href:!0});var rDr=s(Ek);Pze=r(rDr,"NystromformerConfig"),rDr.forEach(t),Ize=r(BEe," (Nystromformer model)"),BEe.forEach(t),qze=i(L),Fm=n(L,"LI",{});var PEe=s(Fm);goe=n(PEe,"STRONG",{});var tDr=s(goe);Nze=r(tDr,"openai-gpt"),tDr.forEach(t),jze=r(PEe," \u2014 "),Ck=n(PEe,"A",{href:!0});var aDr=s(Ck);Dze=r(aDr,"OpenAIGPTConfig"),aDr.forEach(t),Gze=r(PEe," (OpenAI GPT model)"),PEe.forEach(t),Oze=i(L),Tm=n(L,"LI",{});var IEe=s(Tm);hoe=n(IEe,"STRONG",{});var nDr=s(hoe);Vze=r(nDr,"opt"),nDr.forEach(t),Xze=r(IEe," \u2014 "),wk=n(IEe,"A",{href:!0});var sDr=s(wk);zze=r(sDr,"OPTConfig"),sDr.forEach(t),Qze=r(IEe," (OPT model)"),IEe.forEach(t),Wze=i(L),Mm=n(L,"LI",{});var qEe=s(Mm);poe=n(qEe,"STRONG",{});var lDr=s(poe);Hze=r(lDr,"pegasus"),lDr.forEach(t),Uze=r(qEe," \u2014 "),Ak=n(qEe,"A",{href:!0});var iDr=s(Ak);Jze=r(iDr,"PegasusConfig"),iDr.forEach(t),Yze=r(qEe," (Pegasus model)"),qEe.forEach(t),Kze=i(L),Em=n(L,"LI",{});var NEe=s(Em);uoe=n(NEe,"STRONG",{});var dDr=s(uoe);Zze=r(dDr,"perceiver"),dDr.forEach(t),eQe=r(NEe," \u2014 "),yk=n(NEe,"A",{href:!0});var cDr=s(yk);oQe=r(cDr,"PerceiverConfig"),cDr.forEach(t),rQe=r(NEe," (Perceiver model)"),NEe.forEach(t),tQe=i(L),Cm=n(L,"LI",{});var jEe=s(Cm);_oe=n(jEe,"STRONG",{});var fDr=s(_oe);aQe=r(fDr,"plbart"),fDr.forEach(t),nQe=r(jEe," \u2014 "),Lk=n(jEe,"A",{href:!0});var mDr=s(Lk);sQe=r(mDr,"PLBartConfig"),mDr.forEach(t),lQe=r(jEe," (PLBart model)"),jEe.forEach(t),iQe=i(L),wm=n(L,"LI",{});var DEe=s(wm);boe=n(DEe,"STRONG",{});var gDr=s(boe);dQe=r(gDr,"poolformer"),gDr.forEach(t),cQe=r(DEe," \u2014 "),xk=n(DEe,"A",{href:!0});var hDr=s(xk);fQe=r(hDr,"PoolFormerConfig"),hDr.forEach(t),mQe=r(DEe," (PoolFormer model)"),DEe.forEach(t),gQe=i(L),Am=n(L,"LI",{});var GEe=s(Am);voe=n(GEe,"STRONG",{});var pDr=s(voe);hQe=r(pDr,"prophetnet"),pDr.forEach(t),pQe=r(GEe," \u2014 "),$k=n(GEe,"A",{href:!0});var uDr=s($k);uQe=r(uDr,"ProphetNetConfig"),uDr.forEach(t),_Qe=r(GEe," (ProphetNet model)"),GEe.forEach(t),bQe=i(L),ym=n(L,"LI",{});var OEe=s(ym);Foe=n(OEe,"STRONG",{});var _Dr=s(Foe);vQe=r(_Dr,"qdqbert"),_Dr.forEach(t),FQe=r(OEe," \u2014 "),kk=n(OEe,"A",{href:!0});var bDr=s(kk);TQe=r(bDr,"QDQBertConfig"),bDr.forEach(t),MQe=r(OEe," (QDQBert model)"),OEe.forEach(t),EQe=i(L),Lm=n(L,"LI",{});var VEe=s(Lm);Toe=n(VEe,"STRONG",{});var vDr=s(Toe);CQe=r(vDr,"rag"),vDr.forEach(t),wQe=r(VEe," \u2014 "),Sk=n(VEe,"A",{href:!0});var FDr=s(Sk);AQe=r(FDr,"RagConfig"),FDr.forEach(t),yQe=r(VEe," (RAG model)"),VEe.forEach(t),LQe=i(L),xm=n(L,"LI",{});var XEe=s(xm);Moe=n(XEe,"STRONG",{});var TDr=s(Moe);xQe=r(TDr,"realm"),TDr.forEach(t),$Qe=r(XEe," \u2014 "),Rk=n(XEe,"A",{href:!0});var MDr=s(Rk);kQe=r(MDr,"RealmConfig"),MDr.forEach(t),SQe=r(XEe," (Realm model)"),XEe.forEach(t),RQe=i(L),$m=n(L,"LI",{});var zEe=s($m);Eoe=n(zEe,"STRONG",{});var EDr=s(Eoe);BQe=r(EDr,"reformer"),EDr.forEach(t),PQe=r(zEe," \u2014 "),Bk=n(zEe,"A",{href:!0});var CDr=s(Bk);IQe=r(CDr,"ReformerConfig"),CDr.forEach(t),qQe=r(zEe," (Reformer model)"),zEe.forEach(t),NQe=i(L),km=n(L,"LI",{});var QEe=s(km);Coe=n(QEe,"STRONG",{});var wDr=s(Coe);jQe=r(wDr,"regnet"),wDr.forEach(t),DQe=r(QEe," \u2014 "),Pk=n(QEe,"A",{href:!0});var ADr=s(Pk);GQe=r(ADr,"RegNetConfig"),ADr.forEach(t),OQe=r(QEe," (RegNet model)"),QEe.forEach(t),VQe=i(L),Sm=n(L,"LI",{});var WEe=s(Sm);woe=n(WEe,"STRONG",{});var yDr=s(woe);XQe=r(yDr,"rembert"),yDr.forEach(t),zQe=r(WEe," \u2014 "),Ik=n(WEe,"A",{href:!0});var LDr=s(Ik);QQe=r(LDr,"RemBertConfig"),LDr.forEach(t),WQe=r(WEe," (RemBERT model)"),WEe.forEach(t),HQe=i(L),Rm=n(L,"LI",{});var HEe=s(Rm);Aoe=n(HEe,"STRONG",{});var xDr=s(Aoe);UQe=r(xDr,"resnet"),xDr.forEach(t),JQe=r(HEe," \u2014 "),qk=n(HEe,"A",{href:!0});var $Dr=s(qk);YQe=r($Dr,"ResNetConfig"),$Dr.forEach(t),KQe=r(HEe," (ResNet model)"),HEe.forEach(t),ZQe=i(L),Bm=n(L,"LI",{});var UEe=s(Bm);yoe=n(UEe,"STRONG",{});var kDr=s(yoe);eWe=r(kDr,"retribert"),kDr.forEach(t),oWe=r(UEe," \u2014 "),Nk=n(UEe,"A",{href:!0});var SDr=s(Nk);rWe=r(SDr,"RetriBertConfig"),SDr.forEach(t),tWe=r(UEe," (RetriBERT model)"),UEe.forEach(t),aWe=i(L),Pm=n(L,"LI",{});var JEe=s(Pm);Loe=n(JEe,"STRONG",{});var RDr=s(Loe);nWe=r(RDr,"roberta"),RDr.forEach(t),sWe=r(JEe," \u2014 "),jk=n(JEe,"A",{href:!0});var BDr=s(jk);lWe=r(BDr,"RobertaConfig"),BDr.forEach(t),iWe=r(JEe," (RoBERTa model)"),JEe.forEach(t),dWe=i(L),Im=n(L,"LI",{});var YEe=s(Im);xoe=n(YEe,"STRONG",{});var PDr=s(xoe);cWe=r(PDr,"roformer"),PDr.forEach(t),fWe=r(YEe," \u2014 "),Dk=n(YEe,"A",{href:!0});var IDr=s(Dk);mWe=r(IDr,"RoFormerConfig"),IDr.forEach(t),gWe=r(YEe," (RoFormer model)"),YEe.forEach(t),hWe=i(L),qm=n(L,"LI",{});var KEe=s(qm);$oe=n(KEe,"STRONG",{});var qDr=s($oe);pWe=r(qDr,"segformer"),qDr.forEach(t),uWe=r(KEe," \u2014 "),Gk=n(KEe,"A",{href:!0});var NDr=s(Gk);_We=r(NDr,"SegformerConfig"),NDr.forEach(t),bWe=r(KEe," (SegFormer model)"),KEe.forEach(t),vWe=i(L),Nm=n(L,"LI",{});var ZEe=s(Nm);koe=n(ZEe,"STRONG",{});var jDr=s(koe);FWe=r(jDr,"sew"),jDr.forEach(t),TWe=r(ZEe," \u2014 "),Ok=n(ZEe,"A",{href:!0});var DDr=s(Ok);MWe=r(DDr,"SEWConfig"),DDr.forEach(t),EWe=r(ZEe," (SEW model)"),ZEe.forEach(t),CWe=i(L),jm=n(L,"LI",{});var eCe=s(jm);Soe=n(eCe,"STRONG",{});var GDr=s(Soe);wWe=r(GDr,"sew-d"),GDr.forEach(t),AWe=r(eCe," \u2014 "),Vk=n(eCe,"A",{href:!0});var ODr=s(Vk);yWe=r(ODr,"SEWDConfig"),ODr.forEach(t),LWe=r(eCe," (SEW-D model)"),eCe.forEach(t),xWe=i(L),Dm=n(L,"LI",{});var oCe=s(Dm);Roe=n(oCe,"STRONG",{});var VDr=s(Roe);$We=r(VDr,"speech-encoder-decoder"),VDr.forEach(t),kWe=r(oCe," \u2014 "),Xk=n(oCe,"A",{href:!0});var XDr=s(Xk);SWe=r(XDr,"SpeechEncoderDecoderConfig"),XDr.forEach(t),RWe=r(oCe," (Speech Encoder decoder model)"),oCe.forEach(t),BWe=i(L),Gm=n(L,"LI",{});var rCe=s(Gm);Boe=n(rCe,"STRONG",{});var zDr=s(Boe);PWe=r(zDr,"speech_to_text"),zDr.forEach(t),IWe=r(rCe," \u2014 "),zk=n(rCe,"A",{href:!0});var QDr=s(zk);qWe=r(QDr,"Speech2TextConfig"),QDr.forEach(t),NWe=r(rCe," (Speech2Text model)"),rCe.forEach(t),jWe=i(L),Om=n(L,"LI",{});var tCe=s(Om);Poe=n(tCe,"STRONG",{});var WDr=s(Poe);DWe=r(WDr,"speech_to_text_2"),WDr.forEach(t),GWe=r(tCe," \u2014 "),Qk=n(tCe,"A",{href:!0});var HDr=s(Qk);OWe=r(HDr,"Speech2Text2Config"),HDr.forEach(t),VWe=r(tCe," (Speech2Text2 model)"),tCe.forEach(t),XWe=i(L),Vm=n(L,"LI",{});var aCe=s(Vm);Ioe=n(aCe,"STRONG",{});var UDr=s(Ioe);zWe=r(UDr,"splinter"),UDr.forEach(t),QWe=r(aCe," \u2014 "),Wk=n(aCe,"A",{href:!0});var JDr=s(Wk);WWe=r(JDr,"SplinterConfig"),JDr.forEach(t),HWe=r(aCe," (Splinter model)"),aCe.forEach(t),UWe=i(L),Xm=n(L,"LI",{});var nCe=s(Xm);qoe=n(nCe,"STRONG",{});var YDr=s(qoe);JWe=r(YDr,"squeezebert"),YDr.forEach(t),YWe=r(nCe," \u2014 "),Hk=n(nCe,"A",{href:!0});var KDr=s(Hk);KWe=r(KDr,"SqueezeBertConfig"),KDr.forEach(t),ZWe=r(nCe," (SqueezeBERT model)"),nCe.forEach(t),eHe=i(L),zm=n(L,"LI",{});var sCe=s(zm);Noe=n(sCe,"STRONG",{});var ZDr=s(Noe);oHe=r(ZDr,"swin"),ZDr.forEach(t),rHe=r(sCe," \u2014 "),Uk=n(sCe,"A",{href:!0});var eGr=s(Uk);tHe=r(eGr,"SwinConfig"),eGr.forEach(t),aHe=r(sCe," (Swin model)"),sCe.forEach(t),nHe=i(L),Qm=n(L,"LI",{});var lCe=s(Qm);joe=n(lCe,"STRONG",{});var oGr=s(joe);sHe=r(oGr,"t5"),oGr.forEach(t),lHe=r(lCe," \u2014 "),Jk=n(lCe,"A",{href:!0});var rGr=s(Jk);iHe=r(rGr,"T5Config"),rGr.forEach(t),dHe=r(lCe," (T5 model)"),lCe.forEach(t),cHe=i(L),Wm=n(L,"LI",{});var iCe=s(Wm);Doe=n(iCe,"STRONG",{});var tGr=s(Doe);fHe=r(tGr,"tapas"),tGr.forEach(t),mHe=r(iCe," \u2014 "),Yk=n(iCe,"A",{href:!0});var aGr=s(Yk);gHe=r(aGr,"TapasConfig"),aGr.forEach(t),hHe=r(iCe," (TAPAS model)"),iCe.forEach(t),pHe=i(L),Hm=n(L,"LI",{});var dCe=s(Hm);Goe=n(dCe,"STRONG",{});var nGr=s(Goe);uHe=r(nGr,"transfo-xl"),nGr.forEach(t),_He=r(dCe," \u2014 "),Kk=n(dCe,"A",{href:!0});var sGr=s(Kk);bHe=r(sGr,"TransfoXLConfig"),sGr.forEach(t),vHe=r(dCe," (Transformer-XL model)"),dCe.forEach(t),FHe=i(L),Um=n(L,"LI",{});var cCe=s(Um);Ooe=n(cCe,"STRONG",{});var lGr=s(Ooe);THe=r(lGr,"trocr"),lGr.forEach(t),MHe=r(cCe," \u2014 "),Zk=n(cCe,"A",{href:!0});var iGr=s(Zk);EHe=r(iGr,"TrOCRConfig"),iGr.forEach(t),CHe=r(cCe," (TrOCR model)"),cCe.forEach(t),wHe=i(L),Jm=n(L,"LI",{});var fCe=s(Jm);Voe=n(fCe,"STRONG",{});var dGr=s(Voe);AHe=r(dGr,"unispeech"),dGr.forEach(t),yHe=r(fCe," \u2014 "),eS=n(fCe,"A",{href:!0});var cGr=s(eS);LHe=r(cGr,"UniSpeechConfig"),cGr.forEach(t),xHe=r(fCe," (UniSpeech model)"),fCe.forEach(t),$He=i(L),Ym=n(L,"LI",{});var mCe=s(Ym);Xoe=n(mCe,"STRONG",{});var fGr=s(Xoe);kHe=r(fGr,"unispeech-sat"),fGr.forEach(t),SHe=r(mCe," \u2014 "),oS=n(mCe,"A",{href:!0});var mGr=s(oS);RHe=r(mGr,"UniSpeechSatConfig"),mGr.forEach(t),BHe=r(mCe," (UniSpeechSat model)"),mCe.forEach(t),PHe=i(L),Km=n(L,"LI",{});var gCe=s(Km);zoe=n(gCe,"STRONG",{});var gGr=s(zoe);IHe=r(gGr,"van"),gGr.forEach(t),qHe=r(gCe," \u2014 "),rS=n(gCe,"A",{href:!0});var hGr=s(rS);NHe=r(hGr,"VanConfig"),hGr.forEach(t),jHe=r(gCe," (VAN model)"),gCe.forEach(t),DHe=i(L),Zm=n(L,"LI",{});var hCe=s(Zm);Qoe=n(hCe,"STRONG",{});var pGr=s(Qoe);GHe=r(pGr,"vilt"),pGr.forEach(t),OHe=r(hCe," \u2014 "),tS=n(hCe,"A",{href:!0});var uGr=s(tS);VHe=r(uGr,"ViltConfig"),uGr.forEach(t),XHe=r(hCe," (ViLT model)"),hCe.forEach(t),zHe=i(L),eg=n(L,"LI",{});var pCe=s(eg);Woe=n(pCe,"STRONG",{});var _Gr=s(Woe);QHe=r(_Gr,"vision-encoder-decoder"),_Gr.forEach(t),WHe=r(pCe," \u2014 "),aS=n(pCe,"A",{href:!0});var bGr=s(aS);HHe=r(bGr,"VisionEncoderDecoderConfig"),bGr.forEach(t),UHe=r(pCe," (Vision Encoder decoder model)"),pCe.forEach(t),JHe=i(L),og=n(L,"LI",{});var uCe=s(og);Hoe=n(uCe,"STRONG",{});var vGr=s(Hoe);YHe=r(vGr,"vision-text-dual-encoder"),vGr.forEach(t),KHe=r(uCe," \u2014 "),nS=n(uCe,"A",{href:!0});var FGr=s(nS);ZHe=r(FGr,"VisionTextDualEncoderConfig"),FGr.forEach(t),eUe=r(uCe," (VisionTextDualEncoder model)"),uCe.forEach(t),oUe=i(L),rg=n(L,"LI",{});var _Ce=s(rg);Uoe=n(_Ce,"STRONG",{});var TGr=s(Uoe);rUe=r(TGr,"visual_bert"),TGr.forEach(t),tUe=r(_Ce," \u2014 "),sS=n(_Ce,"A",{href:!0});var MGr=s(sS);aUe=r(MGr,"VisualBertConfig"),MGr.forEach(t),nUe=r(_Ce," (VisualBert model)"),_Ce.forEach(t),sUe=i(L),tg=n(L,"LI",{});var bCe=s(tg);Joe=n(bCe,"STRONG",{});var EGr=s(Joe);lUe=r(EGr,"vit"),EGr.forEach(t),iUe=r(bCe," \u2014 "),lS=n(bCe,"A",{href:!0});var CGr=s(lS);dUe=r(CGr,"ViTConfig"),CGr.forEach(t),cUe=r(bCe," (ViT model)"),bCe.forEach(t),fUe=i(L),ag=n(L,"LI",{});var vCe=s(ag);Yoe=n(vCe,"STRONG",{});var wGr=s(Yoe);mUe=r(wGr,"vit_mae"),wGr.forEach(t),gUe=r(vCe," \u2014 "),iS=n(vCe,"A",{href:!0});var AGr=s(iS);hUe=r(AGr,"ViTMAEConfig"),AGr.forEach(t),pUe=r(vCe," (ViTMAE model)"),vCe.forEach(t),uUe=i(L),ng=n(L,"LI",{});var FCe=s(ng);Koe=n(FCe,"STRONG",{});var yGr=s(Koe);_Ue=r(yGr,"wav2vec2"),yGr.forEach(t),bUe=r(FCe," \u2014 "),dS=n(FCe,"A",{href:!0});var LGr=s(dS);vUe=r(LGr,"Wav2Vec2Config"),LGr.forEach(t),FUe=r(FCe," (Wav2Vec2 model)"),FCe.forEach(t),TUe=i(L),sg=n(L,"LI",{});var TCe=s(sg);Zoe=n(TCe,"STRONG",{});var xGr=s(Zoe);MUe=r(xGr,"wavlm"),xGr.forEach(t),EUe=r(TCe," \u2014 "),cS=n(TCe,"A",{href:!0});var $Gr=s(cS);CUe=r($Gr,"WavLMConfig"),$Gr.forEach(t),wUe=r(TCe," (WavLM model)"),TCe.forEach(t),AUe=i(L),lg=n(L,"LI",{});var MCe=s(lg);ere=n(MCe,"STRONG",{});var kGr=s(ere);yUe=r(kGr,"xglm"),kGr.forEach(t),LUe=r(MCe," \u2014 "),fS=n(MCe,"A",{href:!0});var SGr=s(fS);xUe=r(SGr,"XGLMConfig"),SGr.forEach(t),$Ue=r(MCe," (XGLM model)"),MCe.forEach(t),kUe=i(L),ig=n(L,"LI",{});var ECe=s(ig);ore=n(ECe,"STRONG",{});var RGr=s(ore);SUe=r(RGr,"xlm"),RGr.forEach(t),RUe=r(ECe," \u2014 "),mS=n(ECe,"A",{href:!0});var BGr=s(mS);BUe=r(BGr,"XLMConfig"),BGr.forEach(t),PUe=r(ECe," (XLM model)"),ECe.forEach(t),IUe=i(L),dg=n(L,"LI",{});var CCe=s(dg);rre=n(CCe,"STRONG",{});var PGr=s(rre);qUe=r(PGr,"xlm-prophetnet"),PGr.forEach(t),NUe=r(CCe," \u2014 "),gS=n(CCe,"A",{href:!0});var IGr=s(gS);jUe=r(IGr,"XLMProphetNetConfig"),IGr.forEach(t),DUe=r(CCe," (XLMProphetNet model)"),CCe.forEach(t),GUe=i(L),cg=n(L,"LI",{});var wCe=s(cg);tre=n(wCe,"STRONG",{});var qGr=s(tre);OUe=r(qGr,"xlm-roberta"),qGr.forEach(t),VUe=r(wCe," \u2014 "),hS=n(wCe,"A",{href:!0});var NGr=s(hS);XUe=r(NGr,"XLMRobertaConfig"),NGr.forEach(t),zUe=r(wCe," (XLM-RoBERTa model)"),wCe.forEach(t),QUe=i(L),fg=n(L,"LI",{});var ACe=s(fg);are=n(ACe,"STRONG",{});var jGr=s(are);WUe=r(jGr,"xlm-roberta-xl"),jGr.forEach(t),HUe=r(ACe," \u2014 "),pS=n(ACe,"A",{href:!0});var DGr=s(pS);UUe=r(DGr,"XLMRobertaXLConfig"),DGr.forEach(t),JUe=r(ACe," (XLM-RoBERTa-XL model)"),ACe.forEach(t),YUe=i(L),mg=n(L,"LI",{});var yCe=s(mg);nre=n(yCe,"STRONG",{});var GGr=s(nre);KUe=r(GGr,"xlnet"),GGr.forEach(t),ZUe=r(yCe," \u2014 "),uS=n(yCe,"A",{href:!0});var OGr=s(uS);eJe=r(OGr,"XLNetConfig"),OGr.forEach(t),oJe=r(yCe," (XLNet model)"),yCe.forEach(t),rJe=i(L),gg=n(L,"LI",{});var LCe=s(gg);sre=n(LCe,"STRONG",{});var VGr=s(sre);tJe=r(VGr,"yolos"),VGr.forEach(t),aJe=r(LCe," \u2014 "),_S=n(LCe,"A",{href:!0});var XGr=s(_S);nJe=r(XGr,"YolosConfig"),XGr.forEach(t),sJe=r(LCe," (YOLOS model)"),LCe.forEach(t),lJe=i(L),hg=n(L,"LI",{});var xCe=s(hg);lre=n(xCe,"STRONG",{});var zGr=s(lre);iJe=r(zGr,"yoso"),zGr.forEach(t),dJe=r(xCe," \u2014 "),bS=n(xCe,"A",{href:!0});var QGr=s(bS);cJe=r(QGr,"YosoConfig"),QGr.forEach(t),fJe=r(xCe," (YOSO model)"),xCe.forEach(t),L.forEach(t),mJe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),gJe=i(Kr),ug=n(Kr,"DIV",{class:!0});var Yqe=s(ug);T(sy.$$.fragment,Yqe),hJe=i(Yqe),ire=n(Yqe,"P",{});var WGr=s(ire);pJe=r(WGr,"Register a new configuration for this class."),WGr.forEach(t),Yqe.forEach(t),Kr.forEach(t),eIe=i(f),bi=n(f,"H2",{class:!0});var Kqe=s(bi);_g=n(Kqe,"A",{id:!0,class:!0,href:!0});var HGr=s(_g);dre=n(HGr,"SPAN",{});var UGr=s(dre);T(ly.$$.fragment,UGr),UGr.forEach(t),HGr.forEach(t),uJe=i(Kqe),cre=n(Kqe,"SPAN",{});var JGr=s(cre);_Je=r(JGr,"AutoTokenizer"),JGr.forEach(t),Kqe.forEach(t),oIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(iy.$$.fragment,Is),bJe=i(Is),dy=n(Is,"P",{});var Zqe=s(dy);vJe=r(Zqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vS=n(Zqe,"A",{href:!0});var YGr=s(vS);FJe=r(YGr,"AutoTokenizer.from_pretrained()"),YGr.forEach(t),TJe=r(Zqe," class method."),Zqe.forEach(t),MJe=i(Is),cy=n(Is,"P",{});var eNe=s(cy);EJe=r(eNe,"This class cannot be instantiated directly using "),fre=n(eNe,"CODE",{});var KGr=s(fre);CJe=r(KGr,"__init__()"),KGr.forEach(t),wJe=r(eNe," (throws an error)."),eNe.forEach(t),AJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(fy.$$.fragment,qs),yJe=i(qs),mre=n(qs,"P",{});var ZGr=s(mre);LJe=r(ZGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZGr.forEach(t),xJe=i(qs),Ca=n(qs,"P",{});var Zw=s(Ca);$Je=r(Zw,"The tokenizer class to instantiate is selected based on the "),gre=n(Zw,"CODE",{});var eOr=s(gre);kJe=r(eOr,"model_type"),eOr.forEach(t),SJe=r(Zw,` property of the config object (either
passed as an argument or loaded from `),hre=n(Zw,"CODE",{});var oOr=s(hre);RJe=r(oOr,"pretrained_model_name_or_path"),oOr.forEach(t),BJe=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=n(Zw,"CODE",{});var rOr=s(pre);PJe=r(rOr,"pretrained_model_name_or_path"),rOr.forEach(t),IJe=r(Zw,":"),Zw.forEach(t),qJe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var m9=s(Sn);ure=n(m9,"STRONG",{});var tOr=s(ure);NJe=r(tOr,"albert"),tOr.forEach(t),jJe=r(m9," \u2014 "),FS=n(m9,"A",{href:!0});var aOr=s(FS);DJe=r(aOr,"AlbertTokenizer"),aOr.forEach(t),GJe=r(m9," or "),TS=n(m9,"A",{href:!0});var nOr=s(TS);OJe=r(nOr,"AlbertTokenizerFast"),nOr.forEach(t),VJe=r(m9," (ALBERT model)"),m9.forEach(t),XJe=i(S),Rn=n(S,"LI",{});var g9=s(Rn);_re=n(g9,"STRONG",{});var sOr=s(_re);zJe=r(sOr,"bart"),sOr.forEach(t),QJe=r(g9," \u2014 "),MS=n(g9,"A",{href:!0});var lOr=s(MS);WJe=r(lOr,"BartTokenizer"),lOr.forEach(t),HJe=r(g9," or "),ES=n(g9,"A",{href:!0});var iOr=s(ES);UJe=r(iOr,"BartTokenizerFast"),iOr.forEach(t),JJe=r(g9," (BART model)"),g9.forEach(t),YJe=i(S),Bn=n(S,"LI",{});var h9=s(Bn);bre=n(h9,"STRONG",{});var dOr=s(bre);KJe=r(dOr,"barthez"),dOr.forEach(t),ZJe=r(h9," \u2014 "),CS=n(h9,"A",{href:!0});var cOr=s(CS);eYe=r(cOr,"BarthezTokenizer"),cOr.forEach(t),oYe=r(h9," or "),wS=n(h9,"A",{href:!0});var fOr=s(wS);rYe=r(fOr,"BarthezTokenizerFast"),fOr.forEach(t),tYe=r(h9," (BARThez model)"),h9.forEach(t),aYe=i(S),bg=n(S,"LI",{});var $Ce=s(bg);vre=n($Ce,"STRONG",{});var mOr=s(vre);nYe=r(mOr,"bartpho"),mOr.forEach(t),sYe=r($Ce," \u2014 "),AS=n($Ce,"A",{href:!0});var gOr=s(AS);lYe=r(gOr,"BartphoTokenizer"),gOr.forEach(t),iYe=r($Ce," (BARTpho model)"),$Ce.forEach(t),dYe=i(S),Pn=n(S,"LI",{});var p9=s(Pn);Fre=n(p9,"STRONG",{});var hOr=s(Fre);cYe=r(hOr,"bert"),hOr.forEach(t),fYe=r(p9," \u2014 "),yS=n(p9,"A",{href:!0});var pOr=s(yS);mYe=r(pOr,"BertTokenizer"),pOr.forEach(t),gYe=r(p9," or "),LS=n(p9,"A",{href:!0});var uOr=s(LS);hYe=r(uOr,"BertTokenizerFast"),uOr.forEach(t),pYe=r(p9," (BERT model)"),p9.forEach(t),uYe=i(S),vg=n(S,"LI",{});var kCe=s(vg);Tre=n(kCe,"STRONG",{});var _Or=s(Tre);_Ye=r(_Or,"bert-generation"),_Or.forEach(t),bYe=r(kCe," \u2014 "),xS=n(kCe,"A",{href:!0});var bOr=s(xS);vYe=r(bOr,"BertGenerationTokenizer"),bOr.forEach(t),FYe=r(kCe," (Bert Generation model)"),kCe.forEach(t),TYe=i(S),Fg=n(S,"LI",{});var SCe=s(Fg);Mre=n(SCe,"STRONG",{});var vOr=s(Mre);MYe=r(vOr,"bert-japanese"),vOr.forEach(t),EYe=r(SCe," \u2014 "),$S=n(SCe,"A",{href:!0});var FOr=s($S);CYe=r(FOr,"BertJapaneseTokenizer"),FOr.forEach(t),wYe=r(SCe," (BertJapanese model)"),SCe.forEach(t),AYe=i(S),Tg=n(S,"LI",{});var RCe=s(Tg);Ere=n(RCe,"STRONG",{});var TOr=s(Ere);yYe=r(TOr,"bertweet"),TOr.forEach(t),LYe=r(RCe," \u2014 "),kS=n(RCe,"A",{href:!0});var MOr=s(kS);xYe=r(MOr,"BertweetTokenizer"),MOr.forEach(t),$Ye=r(RCe," (Bertweet model)"),RCe.forEach(t),kYe=i(S),In=n(S,"LI",{});var u9=s(In);Cre=n(u9,"STRONG",{});var EOr=s(Cre);SYe=r(EOr,"big_bird"),EOr.forEach(t),RYe=r(u9," \u2014 "),SS=n(u9,"A",{href:!0});var COr=s(SS);BYe=r(COr,"BigBirdTokenizer"),COr.forEach(t),PYe=r(u9," or "),RS=n(u9,"A",{href:!0});var wOr=s(RS);IYe=r(wOr,"BigBirdTokenizerFast"),wOr.forEach(t),qYe=r(u9," (BigBird model)"),u9.forEach(t),NYe=i(S),qn=n(S,"LI",{});var _9=s(qn);wre=n(_9,"STRONG",{});var AOr=s(wre);jYe=r(AOr,"bigbird_pegasus"),AOr.forEach(t),DYe=r(_9," \u2014 "),BS=n(_9,"A",{href:!0});var yOr=s(BS);GYe=r(yOr,"PegasusTokenizer"),yOr.forEach(t),OYe=r(_9," or "),PS=n(_9,"A",{href:!0});var LOr=s(PS);VYe=r(LOr,"PegasusTokenizerFast"),LOr.forEach(t),XYe=r(_9," (BigBirdPegasus model)"),_9.forEach(t),zYe=i(S),Nn=n(S,"LI",{});var b9=s(Nn);Are=n(b9,"STRONG",{});var xOr=s(Are);QYe=r(xOr,"blenderbot"),xOr.forEach(t),WYe=r(b9," \u2014 "),IS=n(b9,"A",{href:!0});var $Or=s(IS);HYe=r($Or,"BlenderbotTokenizer"),$Or.forEach(t),UYe=r(b9," or "),qS=n(b9,"A",{href:!0});var kOr=s(qS);JYe=r(kOr,"BlenderbotTokenizerFast"),kOr.forEach(t),YYe=r(b9," (Blenderbot model)"),b9.forEach(t),KYe=i(S),Mg=n(S,"LI",{});var BCe=s(Mg);yre=n(BCe,"STRONG",{});var SOr=s(yre);ZYe=r(SOr,"blenderbot-small"),SOr.forEach(t),eKe=r(BCe," \u2014 "),NS=n(BCe,"A",{href:!0});var ROr=s(NS);oKe=r(ROr,"BlenderbotSmallTokenizer"),ROr.forEach(t),rKe=r(BCe," (BlenderbotSmall model)"),BCe.forEach(t),tKe=i(S),Eg=n(S,"LI",{});var PCe=s(Eg);Lre=n(PCe,"STRONG",{});var BOr=s(Lre);aKe=r(BOr,"byt5"),BOr.forEach(t),nKe=r(PCe," \u2014 "),jS=n(PCe,"A",{href:!0});var POr=s(jS);sKe=r(POr,"ByT5Tokenizer"),POr.forEach(t),lKe=r(PCe," (ByT5 model)"),PCe.forEach(t),iKe=i(S),jn=n(S,"LI",{});var v9=s(jn);xre=n(v9,"STRONG",{});var IOr=s(xre);dKe=r(IOr,"camembert"),IOr.forEach(t),cKe=r(v9," \u2014 "),DS=n(v9,"A",{href:!0});var qOr=s(DS);fKe=r(qOr,"CamembertTokenizer"),qOr.forEach(t),mKe=r(v9," or "),GS=n(v9,"A",{href:!0});var NOr=s(GS);gKe=r(NOr,"CamembertTokenizerFast"),NOr.forEach(t),hKe=r(v9," (CamemBERT model)"),v9.forEach(t),pKe=i(S),Cg=n(S,"LI",{});var ICe=s(Cg);$re=n(ICe,"STRONG",{});var jOr=s($re);uKe=r(jOr,"canine"),jOr.forEach(t),_Ke=r(ICe," \u2014 "),OS=n(ICe,"A",{href:!0});var DOr=s(OS);bKe=r(DOr,"CanineTokenizer"),DOr.forEach(t),vKe=r(ICe," (Canine model)"),ICe.forEach(t),FKe=i(S),Dn=n(S,"LI",{});var F9=s(Dn);kre=n(F9,"STRONG",{});var GOr=s(kre);TKe=r(GOr,"clip"),GOr.forEach(t),MKe=r(F9," \u2014 "),VS=n(F9,"A",{href:!0});var OOr=s(VS);EKe=r(OOr,"CLIPTokenizer"),OOr.forEach(t),CKe=r(F9," or "),XS=n(F9,"A",{href:!0});var VOr=s(XS);wKe=r(VOr,"CLIPTokenizerFast"),VOr.forEach(t),AKe=r(F9," (CLIP model)"),F9.forEach(t),yKe=i(S),Gn=n(S,"LI",{});var T9=s(Gn);Sre=n(T9,"STRONG",{});var XOr=s(Sre);LKe=r(XOr,"convbert"),XOr.forEach(t),xKe=r(T9," \u2014 "),zS=n(T9,"A",{href:!0});var zOr=s(zS);$Ke=r(zOr,"ConvBertTokenizer"),zOr.forEach(t),kKe=r(T9," or "),QS=n(T9,"A",{href:!0});var QOr=s(QS);SKe=r(QOr,"ConvBertTokenizerFast"),QOr.forEach(t),RKe=r(T9," (ConvBERT model)"),T9.forEach(t),BKe=i(S),On=n(S,"LI",{});var M9=s(On);Rre=n(M9,"STRONG",{});var WOr=s(Rre);PKe=r(WOr,"cpm"),WOr.forEach(t),IKe=r(M9," \u2014 "),WS=n(M9,"A",{href:!0});var HOr=s(WS);qKe=r(HOr,"CpmTokenizer"),HOr.forEach(t),NKe=r(M9," or "),HS=n(M9,"A",{href:!0});var UOr=s(HS);jKe=r(UOr,"CpmTokenizerFast"),UOr.forEach(t),DKe=r(M9," (CPM model)"),M9.forEach(t),GKe=i(S),wg=n(S,"LI",{});var qCe=s(wg);Bre=n(qCe,"STRONG",{});var JOr=s(Bre);OKe=r(JOr,"ctrl"),JOr.forEach(t),VKe=r(qCe," \u2014 "),US=n(qCe,"A",{href:!0});var YOr=s(US);XKe=r(YOr,"CTRLTokenizer"),YOr.forEach(t),zKe=r(qCe," (CTRL model)"),qCe.forEach(t),QKe=i(S),Vn=n(S,"LI",{});var E9=s(Vn);Pre=n(E9,"STRONG",{});var KOr=s(Pre);WKe=r(KOr,"data2vec-text"),KOr.forEach(t),HKe=r(E9," \u2014 "),JS=n(E9,"A",{href:!0});var ZOr=s(JS);UKe=r(ZOr,"RobertaTokenizer"),ZOr.forEach(t),JKe=r(E9," or "),YS=n(E9,"A",{href:!0});var eVr=s(YS);YKe=r(eVr,"RobertaTokenizerFast"),eVr.forEach(t),KKe=r(E9," (Data2VecText model)"),E9.forEach(t),ZKe=i(S),Xn=n(S,"LI",{});var C9=s(Xn);Ire=n(C9,"STRONG",{});var oVr=s(Ire);eZe=r(oVr,"deberta"),oVr.forEach(t),oZe=r(C9," \u2014 "),KS=n(C9,"A",{href:!0});var rVr=s(KS);rZe=r(rVr,"DebertaTokenizer"),rVr.forEach(t),tZe=r(C9," or "),ZS=n(C9,"A",{href:!0});var tVr=s(ZS);aZe=r(tVr,"DebertaTokenizerFast"),tVr.forEach(t),nZe=r(C9," (DeBERTa model)"),C9.forEach(t),sZe=i(S),zn=n(S,"LI",{});var w9=s(zn);qre=n(w9,"STRONG",{});var aVr=s(qre);lZe=r(aVr,"deberta-v2"),aVr.forEach(t),iZe=r(w9," \u2014 "),eR=n(w9,"A",{href:!0});var nVr=s(eR);dZe=r(nVr,"DebertaV2Tokenizer"),nVr.forEach(t),cZe=r(w9," or "),oR=n(w9,"A",{href:!0});var sVr=s(oR);fZe=r(sVr,"DebertaV2TokenizerFast"),sVr.forEach(t),mZe=r(w9," (DeBERTa-v2 model)"),w9.forEach(t),gZe=i(S),Qn=n(S,"LI",{});var A9=s(Qn);Nre=n(A9,"STRONG",{});var lVr=s(Nre);hZe=r(lVr,"distilbert"),lVr.forEach(t),pZe=r(A9," \u2014 "),rR=n(A9,"A",{href:!0});var iVr=s(rR);uZe=r(iVr,"DistilBertTokenizer"),iVr.forEach(t),_Ze=r(A9," or "),tR=n(A9,"A",{href:!0});var dVr=s(tR);bZe=r(dVr,"DistilBertTokenizerFast"),dVr.forEach(t),vZe=r(A9," (DistilBERT model)"),A9.forEach(t),FZe=i(S),Wn=n(S,"LI",{});var y9=s(Wn);jre=n(y9,"STRONG",{});var cVr=s(jre);TZe=r(cVr,"dpr"),cVr.forEach(t),MZe=r(y9," \u2014 "),aR=n(y9,"A",{href:!0});var fVr=s(aR);EZe=r(fVr,"DPRQuestionEncoderTokenizer"),fVr.forEach(t),CZe=r(y9," or "),nR=n(y9,"A",{href:!0});var mVr=s(nR);wZe=r(mVr,"DPRQuestionEncoderTokenizerFast"),mVr.forEach(t),AZe=r(y9," (DPR model)"),y9.forEach(t),yZe=i(S),Hn=n(S,"LI",{});var L9=s(Hn);Dre=n(L9,"STRONG",{});var gVr=s(Dre);LZe=r(gVr,"electra"),gVr.forEach(t),xZe=r(L9," \u2014 "),sR=n(L9,"A",{href:!0});var hVr=s(sR);$Ze=r(hVr,"ElectraTokenizer"),hVr.forEach(t),kZe=r(L9," or "),lR=n(L9,"A",{href:!0});var pVr=s(lR);SZe=r(pVr,"ElectraTokenizerFast"),pVr.forEach(t),RZe=r(L9," (ELECTRA model)"),L9.forEach(t),BZe=i(S),Ag=n(S,"LI",{});var NCe=s(Ag);Gre=n(NCe,"STRONG",{});var uVr=s(Gre);PZe=r(uVr,"flaubert"),uVr.forEach(t),IZe=r(NCe," \u2014 "),iR=n(NCe,"A",{href:!0});var _Vr=s(iR);qZe=r(_Vr,"FlaubertTokenizer"),_Vr.forEach(t),NZe=r(NCe," (FlauBERT model)"),NCe.forEach(t),jZe=i(S),Un=n(S,"LI",{});var x9=s(Un);Ore=n(x9,"STRONG",{});var bVr=s(Ore);DZe=r(bVr,"fnet"),bVr.forEach(t),GZe=r(x9," \u2014 "),dR=n(x9,"A",{href:!0});var vVr=s(dR);OZe=r(vVr,"FNetTokenizer"),vVr.forEach(t),VZe=r(x9," or "),cR=n(x9,"A",{href:!0});var FVr=s(cR);XZe=r(FVr,"FNetTokenizerFast"),FVr.forEach(t),zZe=r(x9," (FNet model)"),x9.forEach(t),QZe=i(S),yg=n(S,"LI",{});var jCe=s(yg);Vre=n(jCe,"STRONG",{});var TVr=s(Vre);WZe=r(TVr,"fsmt"),TVr.forEach(t),HZe=r(jCe," \u2014 "),fR=n(jCe,"A",{href:!0});var MVr=s(fR);UZe=r(MVr,"FSMTTokenizer"),MVr.forEach(t),JZe=r(jCe," (FairSeq Machine-Translation model)"),jCe.forEach(t),YZe=i(S),Jn=n(S,"LI",{});var $9=s(Jn);Xre=n($9,"STRONG",{});var EVr=s(Xre);KZe=r(EVr,"funnel"),EVr.forEach(t),ZZe=r($9," \u2014 "),mR=n($9,"A",{href:!0});var CVr=s(mR);eeo=r(CVr,"FunnelTokenizer"),CVr.forEach(t),oeo=r($9," or "),gR=n($9,"A",{href:!0});var wVr=s(gR);reo=r(wVr,"FunnelTokenizerFast"),wVr.forEach(t),teo=r($9," (Funnel Transformer model)"),$9.forEach(t),aeo=i(S),Yn=n(S,"LI",{});var k9=s(Yn);zre=n(k9,"STRONG",{});var AVr=s(zre);neo=r(AVr,"gpt2"),AVr.forEach(t),seo=r(k9," \u2014 "),hR=n(k9,"A",{href:!0});var yVr=s(hR);leo=r(yVr,"GPT2Tokenizer"),yVr.forEach(t),ieo=r(k9," or "),pR=n(k9,"A",{href:!0});var LVr=s(pR);deo=r(LVr,"GPT2TokenizerFast"),LVr.forEach(t),ceo=r(k9," (OpenAI GPT-2 model)"),k9.forEach(t),feo=i(S),Kn=n(S,"LI",{});var S9=s(Kn);Qre=n(S9,"STRONG",{});var xVr=s(Qre);meo=r(xVr,"gpt_neo"),xVr.forEach(t),geo=r(S9," \u2014 "),uR=n(S9,"A",{href:!0});var $Vr=s(uR);heo=r($Vr,"GPT2Tokenizer"),$Vr.forEach(t),peo=r(S9," or "),_R=n(S9,"A",{href:!0});var kVr=s(_R);ueo=r(kVr,"GPT2TokenizerFast"),kVr.forEach(t),_eo=r(S9," (GPT Neo model)"),S9.forEach(t),beo=i(S),Zn=n(S,"LI",{});var R9=s(Zn);Wre=n(R9,"STRONG",{});var SVr=s(Wre);veo=r(SVr,"gptj"),SVr.forEach(t),Feo=r(R9," \u2014 "),bR=n(R9,"A",{href:!0});var RVr=s(bR);Teo=r(RVr,"GPT2Tokenizer"),RVr.forEach(t),Meo=r(R9," or "),vR=n(R9,"A",{href:!0});var BVr=s(vR);Eeo=r(BVr,"GPT2TokenizerFast"),BVr.forEach(t),Ceo=r(R9," (GPT-J model)"),R9.forEach(t),weo=i(S),es=n(S,"LI",{});var B9=s(es);Hre=n(B9,"STRONG",{});var PVr=s(Hre);Aeo=r(PVr,"herbert"),PVr.forEach(t),yeo=r(B9," \u2014 "),FR=n(B9,"A",{href:!0});var IVr=s(FR);Leo=r(IVr,"HerbertTokenizer"),IVr.forEach(t),xeo=r(B9," or "),TR=n(B9,"A",{href:!0});var qVr=s(TR);$eo=r(qVr,"HerbertTokenizerFast"),qVr.forEach(t),keo=r(B9," (HerBERT model)"),B9.forEach(t),Seo=i(S),Lg=n(S,"LI",{});var DCe=s(Lg);Ure=n(DCe,"STRONG",{});var NVr=s(Ure);Reo=r(NVr,"hubert"),NVr.forEach(t),Beo=r(DCe," \u2014 "),MR=n(DCe,"A",{href:!0});var jVr=s(MR);Peo=r(jVr,"Wav2Vec2CTCTokenizer"),jVr.forEach(t),Ieo=r(DCe," (Hubert model)"),DCe.forEach(t),qeo=i(S),os=n(S,"LI",{});var P9=s(os);Jre=n(P9,"STRONG",{});var DVr=s(Jre);Neo=r(DVr,"ibert"),DVr.forEach(t),jeo=r(P9," \u2014 "),ER=n(P9,"A",{href:!0});var GVr=s(ER);Deo=r(GVr,"RobertaTokenizer"),GVr.forEach(t),Geo=r(P9," or "),CR=n(P9,"A",{href:!0});var OVr=s(CR);Oeo=r(OVr,"RobertaTokenizerFast"),OVr.forEach(t),Veo=r(P9," (I-BERT model)"),P9.forEach(t),Xeo=i(S),rs=n(S,"LI",{});var I9=s(rs);Yre=n(I9,"STRONG",{});var VVr=s(Yre);zeo=r(VVr,"layoutlm"),VVr.forEach(t),Qeo=r(I9," \u2014 "),wR=n(I9,"A",{href:!0});var XVr=s(wR);Weo=r(XVr,"LayoutLMTokenizer"),XVr.forEach(t),Heo=r(I9," or "),AR=n(I9,"A",{href:!0});var zVr=s(AR);Ueo=r(zVr,"LayoutLMTokenizerFast"),zVr.forEach(t),Jeo=r(I9," (LayoutLM model)"),I9.forEach(t),Yeo=i(S),ts=n(S,"LI",{});var q9=s(ts);Kre=n(q9,"STRONG",{});var QVr=s(Kre);Keo=r(QVr,"layoutlmv2"),QVr.forEach(t),Zeo=r(q9," \u2014 "),yR=n(q9,"A",{href:!0});var WVr=s(yR);eoo=r(WVr,"LayoutLMv2Tokenizer"),WVr.forEach(t),ooo=r(q9," or "),LR=n(q9,"A",{href:!0});var HVr=s(LR);roo=r(HVr,"LayoutLMv2TokenizerFast"),HVr.forEach(t),too=r(q9," (LayoutLMv2 model)"),q9.forEach(t),aoo=i(S),as=n(S,"LI",{});var N9=s(as);Zre=n(N9,"STRONG",{});var UVr=s(Zre);noo=r(UVr,"layoutxlm"),UVr.forEach(t),soo=r(N9," \u2014 "),xR=n(N9,"A",{href:!0});var JVr=s(xR);loo=r(JVr,"LayoutXLMTokenizer"),JVr.forEach(t),ioo=r(N9," or "),$R=n(N9,"A",{href:!0});var YVr=s($R);doo=r(YVr,"LayoutXLMTokenizerFast"),YVr.forEach(t),coo=r(N9," (LayoutXLM model)"),N9.forEach(t),foo=i(S),ns=n(S,"LI",{});var j9=s(ns);ete=n(j9,"STRONG",{});var KVr=s(ete);moo=r(KVr,"led"),KVr.forEach(t),goo=r(j9," \u2014 "),kR=n(j9,"A",{href:!0});var ZVr=s(kR);hoo=r(ZVr,"LEDTokenizer"),ZVr.forEach(t),poo=r(j9," or "),SR=n(j9,"A",{href:!0});var eXr=s(SR);uoo=r(eXr,"LEDTokenizerFast"),eXr.forEach(t),_oo=r(j9," (LED model)"),j9.forEach(t),boo=i(S),ss=n(S,"LI",{});var D9=s(ss);ote=n(D9,"STRONG",{});var oXr=s(ote);voo=r(oXr,"longformer"),oXr.forEach(t),Foo=r(D9," \u2014 "),RR=n(D9,"A",{href:!0});var rXr=s(RR);Too=r(rXr,"LongformerTokenizer"),rXr.forEach(t),Moo=r(D9," or "),BR=n(D9,"A",{href:!0});var tXr=s(BR);Eoo=r(tXr,"LongformerTokenizerFast"),tXr.forEach(t),Coo=r(D9," (Longformer model)"),D9.forEach(t),woo=i(S),xg=n(S,"LI",{});var GCe=s(xg);rte=n(GCe,"STRONG",{});var aXr=s(rte);Aoo=r(aXr,"luke"),aXr.forEach(t),yoo=r(GCe," \u2014 "),PR=n(GCe,"A",{href:!0});var nXr=s(PR);Loo=r(nXr,"LukeTokenizer"),nXr.forEach(t),xoo=r(GCe," (LUKE model)"),GCe.forEach(t),$oo=i(S),ls=n(S,"LI",{});var G9=s(ls);tte=n(G9,"STRONG",{});var sXr=s(tte);koo=r(sXr,"lxmert"),sXr.forEach(t),Soo=r(G9," \u2014 "),IR=n(G9,"A",{href:!0});var lXr=s(IR);Roo=r(lXr,"LxmertTokenizer"),lXr.forEach(t),Boo=r(G9," or "),qR=n(G9,"A",{href:!0});var iXr=s(qR);Poo=r(iXr,"LxmertTokenizerFast"),iXr.forEach(t),Ioo=r(G9," (LXMERT model)"),G9.forEach(t),qoo=i(S),$g=n(S,"LI",{});var OCe=s($g);ate=n(OCe,"STRONG",{});var dXr=s(ate);Noo=r(dXr,"m2m_100"),dXr.forEach(t),joo=r(OCe," \u2014 "),NR=n(OCe,"A",{href:!0});var cXr=s(NR);Doo=r(cXr,"M2M100Tokenizer"),cXr.forEach(t),Goo=r(OCe," (M2M100 model)"),OCe.forEach(t),Ooo=i(S),kg=n(S,"LI",{});var VCe=s(kg);nte=n(VCe,"STRONG",{});var fXr=s(nte);Voo=r(fXr,"marian"),fXr.forEach(t),Xoo=r(VCe," \u2014 "),jR=n(VCe,"A",{href:!0});var mXr=s(jR);zoo=r(mXr,"MarianTokenizer"),mXr.forEach(t),Qoo=r(VCe," (Marian model)"),VCe.forEach(t),Woo=i(S),is=n(S,"LI",{});var O9=s(is);ste=n(O9,"STRONG",{});var gXr=s(ste);Hoo=r(gXr,"mbart"),gXr.forEach(t),Uoo=r(O9," \u2014 "),DR=n(O9,"A",{href:!0});var hXr=s(DR);Joo=r(hXr,"MBartTokenizer"),hXr.forEach(t),Yoo=r(O9," or "),GR=n(O9,"A",{href:!0});var pXr=s(GR);Koo=r(pXr,"MBartTokenizerFast"),pXr.forEach(t),Zoo=r(O9," (mBART model)"),O9.forEach(t),ero=i(S),ds=n(S,"LI",{});var V9=s(ds);lte=n(V9,"STRONG",{});var uXr=s(lte);oro=r(uXr,"mbart50"),uXr.forEach(t),rro=r(V9," \u2014 "),OR=n(V9,"A",{href:!0});var _Xr=s(OR);tro=r(_Xr,"MBart50Tokenizer"),_Xr.forEach(t),aro=r(V9," or "),VR=n(V9,"A",{href:!0});var bXr=s(VR);nro=r(bXr,"MBart50TokenizerFast"),bXr.forEach(t),sro=r(V9," (mBART-50 model)"),V9.forEach(t),lro=i(S),cs=n(S,"LI",{});var X9=s(cs);ite=n(X9,"STRONG",{});var vXr=s(ite);iro=r(vXr,"megatron-bert"),vXr.forEach(t),dro=r(X9," \u2014 "),XR=n(X9,"A",{href:!0});var FXr=s(XR);cro=r(FXr,"BertTokenizer"),FXr.forEach(t),fro=r(X9," or "),zR=n(X9,"A",{href:!0});var TXr=s(zR);mro=r(TXr,"BertTokenizerFast"),TXr.forEach(t),gro=r(X9," (MegatronBert model)"),X9.forEach(t),hro=i(S),Sg=n(S,"LI",{});var XCe=s(Sg);dte=n(XCe,"STRONG",{});var MXr=s(dte);pro=r(MXr,"mluke"),MXr.forEach(t),uro=r(XCe," \u2014 "),QR=n(XCe,"A",{href:!0});var EXr=s(QR);_ro=r(EXr,"MLukeTokenizer"),EXr.forEach(t),bro=r(XCe," (mLUKE model)"),XCe.forEach(t),vro=i(S),fs=n(S,"LI",{});var z9=s(fs);cte=n(z9,"STRONG",{});var CXr=s(cte);Fro=r(CXr,"mobilebert"),CXr.forEach(t),Tro=r(z9," \u2014 "),WR=n(z9,"A",{href:!0});var wXr=s(WR);Mro=r(wXr,"MobileBertTokenizer"),wXr.forEach(t),Ero=r(z9," or "),HR=n(z9,"A",{href:!0});var AXr=s(HR);Cro=r(AXr,"MobileBertTokenizerFast"),AXr.forEach(t),wro=r(z9," (MobileBERT model)"),z9.forEach(t),Aro=i(S),ms=n(S,"LI",{});var Q9=s(ms);fte=n(Q9,"STRONG",{});var yXr=s(fte);yro=r(yXr,"mpnet"),yXr.forEach(t),Lro=r(Q9," \u2014 "),UR=n(Q9,"A",{href:!0});var LXr=s(UR);xro=r(LXr,"MPNetTokenizer"),LXr.forEach(t),$ro=r(Q9," or "),JR=n(Q9,"A",{href:!0});var xXr=s(JR);kro=r(xXr,"MPNetTokenizerFast"),xXr.forEach(t),Sro=r(Q9," (MPNet model)"),Q9.forEach(t),Rro=i(S),gs=n(S,"LI",{});var W9=s(gs);mte=n(W9,"STRONG",{});var $Xr=s(mte);Bro=r($Xr,"mt5"),$Xr.forEach(t),Pro=r(W9," \u2014 "),YR=n(W9,"A",{href:!0});var kXr=s(YR);Iro=r(kXr,"MT5Tokenizer"),kXr.forEach(t),qro=r(W9," or "),KR=n(W9,"A",{href:!0});var SXr=s(KR);Nro=r(SXr,"MT5TokenizerFast"),SXr.forEach(t),jro=r(W9," (mT5 model)"),W9.forEach(t),Dro=i(S),hs=n(S,"LI",{});var H9=s(hs);gte=n(H9,"STRONG",{});var RXr=s(gte);Gro=r(RXr,"nystromformer"),RXr.forEach(t),Oro=r(H9," \u2014 "),ZR=n(H9,"A",{href:!0});var BXr=s(ZR);Vro=r(BXr,"AlbertTokenizer"),BXr.forEach(t),Xro=r(H9," or "),eB=n(H9,"A",{href:!0});var PXr=s(eB);zro=r(PXr,"AlbertTokenizerFast"),PXr.forEach(t),Qro=r(H9," (Nystromformer model)"),H9.forEach(t),Wro=i(S),ps=n(S,"LI",{});var U9=s(ps);hte=n(U9,"STRONG",{});var IXr=s(hte);Hro=r(IXr,"openai-gpt"),IXr.forEach(t),Uro=r(U9," \u2014 "),oB=n(U9,"A",{href:!0});var qXr=s(oB);Jro=r(qXr,"OpenAIGPTTokenizer"),qXr.forEach(t),Yro=r(U9," or "),rB=n(U9,"A",{href:!0});var NXr=s(rB);Kro=r(NXr,"OpenAIGPTTokenizerFast"),NXr.forEach(t),Zro=r(U9," (OpenAI GPT model)"),U9.forEach(t),eto=i(S),Rg=n(S,"LI",{});var zCe=s(Rg);pte=n(zCe,"STRONG",{});var jXr=s(pte);oto=r(jXr,"opt"),jXr.forEach(t),rto=r(zCe," \u2014 "),tB=n(zCe,"A",{href:!0});var DXr=s(tB);tto=r(DXr,"GPT2Tokenizer"),DXr.forEach(t),ato=r(zCe," (OPT model)"),zCe.forEach(t),nto=i(S),us=n(S,"LI",{});var J9=s(us);ute=n(J9,"STRONG",{});var GXr=s(ute);sto=r(GXr,"pegasus"),GXr.forEach(t),lto=r(J9," \u2014 "),aB=n(J9,"A",{href:!0});var OXr=s(aB);ito=r(OXr,"PegasusTokenizer"),OXr.forEach(t),dto=r(J9," or "),nB=n(J9,"A",{href:!0});var VXr=s(nB);cto=r(VXr,"PegasusTokenizerFast"),VXr.forEach(t),fto=r(J9," (Pegasus model)"),J9.forEach(t),mto=i(S),Bg=n(S,"LI",{});var QCe=s(Bg);_te=n(QCe,"STRONG",{});var XXr=s(_te);gto=r(XXr,"perceiver"),XXr.forEach(t),hto=r(QCe," \u2014 "),sB=n(QCe,"A",{href:!0});var zXr=s(sB);pto=r(zXr,"PerceiverTokenizer"),zXr.forEach(t),uto=r(QCe," (Perceiver model)"),QCe.forEach(t),_to=i(S),Pg=n(S,"LI",{});var WCe=s(Pg);bte=n(WCe,"STRONG",{});var QXr=s(bte);bto=r(QXr,"phobert"),QXr.forEach(t),vto=r(WCe," \u2014 "),lB=n(WCe,"A",{href:!0});var WXr=s(lB);Fto=r(WXr,"PhobertTokenizer"),WXr.forEach(t),Tto=r(WCe," (PhoBERT model)"),WCe.forEach(t),Mto=i(S),Ig=n(S,"LI",{});var HCe=s(Ig);vte=n(HCe,"STRONG",{});var HXr=s(vte);Eto=r(HXr,"plbart"),HXr.forEach(t),Cto=r(HCe," \u2014 "),iB=n(HCe,"A",{href:!0});var UXr=s(iB);wto=r(UXr,"PLBartTokenizer"),UXr.forEach(t),Ato=r(HCe," (PLBart model)"),HCe.forEach(t),yto=i(S),qg=n(S,"LI",{});var UCe=s(qg);Fte=n(UCe,"STRONG",{});var JXr=s(Fte);Lto=r(JXr,"prophetnet"),JXr.forEach(t),xto=r(UCe," \u2014 "),dB=n(UCe,"A",{href:!0});var YXr=s(dB);$to=r(YXr,"ProphetNetTokenizer"),YXr.forEach(t),kto=r(UCe," (ProphetNet model)"),UCe.forEach(t),Sto=i(S),_s=n(S,"LI",{});var Y9=s(_s);Tte=n(Y9,"STRONG",{});var KXr=s(Tte);Rto=r(KXr,"qdqbert"),KXr.forEach(t),Bto=r(Y9," \u2014 "),cB=n(Y9,"A",{href:!0});var ZXr=s(cB);Pto=r(ZXr,"BertTokenizer"),ZXr.forEach(t),Ito=r(Y9," or "),fB=n(Y9,"A",{href:!0});var ezr=s(fB);qto=r(ezr,"BertTokenizerFast"),ezr.forEach(t),Nto=r(Y9," (QDQBert model)"),Y9.forEach(t),jto=i(S),Ng=n(S,"LI",{});var JCe=s(Ng);Mte=n(JCe,"STRONG",{});var ozr=s(Mte);Dto=r(ozr,"rag"),ozr.forEach(t),Gto=r(JCe," \u2014 "),mB=n(JCe,"A",{href:!0});var rzr=s(mB);Oto=r(rzr,"RagTokenizer"),rzr.forEach(t),Vto=r(JCe," (RAG model)"),JCe.forEach(t),Xto=i(S),bs=n(S,"LI",{});var K9=s(bs);Ete=n(K9,"STRONG",{});var tzr=s(Ete);zto=r(tzr,"realm"),tzr.forEach(t),Qto=r(K9," \u2014 "),gB=n(K9,"A",{href:!0});var azr=s(gB);Wto=r(azr,"RealmTokenizer"),azr.forEach(t),Hto=r(K9," or "),hB=n(K9,"A",{href:!0});var nzr=s(hB);Uto=r(nzr,"RealmTokenizerFast"),nzr.forEach(t),Jto=r(K9," (Realm model)"),K9.forEach(t),Yto=i(S),vs=n(S,"LI",{});var Z9=s(vs);Cte=n(Z9,"STRONG",{});var szr=s(Cte);Kto=r(szr,"reformer"),szr.forEach(t),Zto=r(Z9," \u2014 "),pB=n(Z9,"A",{href:!0});var lzr=s(pB);eao=r(lzr,"ReformerTokenizer"),lzr.forEach(t),oao=r(Z9," or "),uB=n(Z9,"A",{href:!0});var izr=s(uB);rao=r(izr,"ReformerTokenizerFast"),izr.forEach(t),tao=r(Z9," (Reformer model)"),Z9.forEach(t),aao=i(S),Fs=n(S,"LI",{});var e$=s(Fs);wte=n(e$,"STRONG",{});var dzr=s(wte);nao=r(dzr,"rembert"),dzr.forEach(t),sao=r(e$," \u2014 "),_B=n(e$,"A",{href:!0});var czr=s(_B);lao=r(czr,"RemBertTokenizer"),czr.forEach(t),iao=r(e$," or "),bB=n(e$,"A",{href:!0});var fzr=s(bB);dao=r(fzr,"RemBertTokenizerFast"),fzr.forEach(t),cao=r(e$," (RemBERT model)"),e$.forEach(t),fao=i(S),Ts=n(S,"LI",{});var o$=s(Ts);Ate=n(o$,"STRONG",{});var mzr=s(Ate);mao=r(mzr,"retribert"),mzr.forEach(t),gao=r(o$," \u2014 "),vB=n(o$,"A",{href:!0});var gzr=s(vB);hao=r(gzr,"RetriBertTokenizer"),gzr.forEach(t),pao=r(o$," or "),FB=n(o$,"A",{href:!0});var hzr=s(FB);uao=r(hzr,"RetriBertTokenizerFast"),hzr.forEach(t),_ao=r(o$," (RetriBERT model)"),o$.forEach(t),bao=i(S),Ms=n(S,"LI",{});var r$=s(Ms);yte=n(r$,"STRONG",{});var pzr=s(yte);vao=r(pzr,"roberta"),pzr.forEach(t),Fao=r(r$," \u2014 "),TB=n(r$,"A",{href:!0});var uzr=s(TB);Tao=r(uzr,"RobertaTokenizer"),uzr.forEach(t),Mao=r(r$," or "),MB=n(r$,"A",{href:!0});var _zr=s(MB);Eao=r(_zr,"RobertaTokenizerFast"),_zr.forEach(t),Cao=r(r$," (RoBERTa model)"),r$.forEach(t),wao=i(S),Es=n(S,"LI",{});var t$=s(Es);Lte=n(t$,"STRONG",{});var bzr=s(Lte);Aao=r(bzr,"roformer"),bzr.forEach(t),yao=r(t$," \u2014 "),EB=n(t$,"A",{href:!0});var vzr=s(EB);Lao=r(vzr,"RoFormerTokenizer"),vzr.forEach(t),xao=r(t$," or "),CB=n(t$,"A",{href:!0});var Fzr=s(CB);$ao=r(Fzr,"RoFormerTokenizerFast"),Fzr.forEach(t),kao=r(t$," (RoFormer model)"),t$.forEach(t),Sao=i(S),jg=n(S,"LI",{});var YCe=s(jg);xte=n(YCe,"STRONG",{});var Tzr=s(xte);Rao=r(Tzr,"speech_to_text"),Tzr.forEach(t),Bao=r(YCe," \u2014 "),wB=n(YCe,"A",{href:!0});var Mzr=s(wB);Pao=r(Mzr,"Speech2TextTokenizer"),Mzr.forEach(t),Iao=r(YCe," (Speech2Text model)"),YCe.forEach(t),qao=i(S),Dg=n(S,"LI",{});var KCe=s(Dg);$te=n(KCe,"STRONG",{});var Ezr=s($te);Nao=r(Ezr,"speech_to_text_2"),Ezr.forEach(t),jao=r(KCe," \u2014 "),AB=n(KCe,"A",{href:!0});var Czr=s(AB);Dao=r(Czr,"Speech2Text2Tokenizer"),Czr.forEach(t),Gao=r(KCe," (Speech2Text2 model)"),KCe.forEach(t),Oao=i(S),Cs=n(S,"LI",{});var a$=s(Cs);kte=n(a$,"STRONG",{});var wzr=s(kte);Vao=r(wzr,"splinter"),wzr.forEach(t),Xao=r(a$," \u2014 "),yB=n(a$,"A",{href:!0});var Azr=s(yB);zao=r(Azr,"SplinterTokenizer"),Azr.forEach(t),Qao=r(a$," or "),LB=n(a$,"A",{href:!0});var yzr=s(LB);Wao=r(yzr,"SplinterTokenizerFast"),yzr.forEach(t),Hao=r(a$," (Splinter model)"),a$.forEach(t),Uao=i(S),ws=n(S,"LI",{});var n$=s(ws);Ste=n(n$,"STRONG",{});var Lzr=s(Ste);Jao=r(Lzr,"squeezebert"),Lzr.forEach(t),Yao=r(n$," \u2014 "),xB=n(n$,"A",{href:!0});var xzr=s(xB);Kao=r(xzr,"SqueezeBertTokenizer"),xzr.forEach(t),Zao=r(n$," or "),$B=n(n$,"A",{href:!0});var $zr=s($B);eno=r($zr,"SqueezeBertTokenizerFast"),$zr.forEach(t),ono=r(n$," (SqueezeBERT model)"),n$.forEach(t),rno=i(S),As=n(S,"LI",{});var s$=s(As);Rte=n(s$,"STRONG",{});var kzr=s(Rte);tno=r(kzr,"t5"),kzr.forEach(t),ano=r(s$," \u2014 "),kB=n(s$,"A",{href:!0});var Szr=s(kB);nno=r(Szr,"T5Tokenizer"),Szr.forEach(t),sno=r(s$," or "),SB=n(s$,"A",{href:!0});var Rzr=s(SB);lno=r(Rzr,"T5TokenizerFast"),Rzr.forEach(t),ino=r(s$," (T5 model)"),s$.forEach(t),dno=i(S),Gg=n(S,"LI",{});var ZCe=s(Gg);Bte=n(ZCe,"STRONG",{});var Bzr=s(Bte);cno=r(Bzr,"tapas"),Bzr.forEach(t),fno=r(ZCe," \u2014 "),RB=n(ZCe,"A",{href:!0});var Pzr=s(RB);mno=r(Pzr,"TapasTokenizer"),Pzr.forEach(t),gno=r(ZCe," (TAPAS model)"),ZCe.forEach(t),hno=i(S),Og=n(S,"LI",{});var ewe=s(Og);Pte=n(ewe,"STRONG",{});var Izr=s(Pte);pno=r(Izr,"tapex"),Izr.forEach(t),uno=r(ewe," \u2014 "),BB=n(ewe,"A",{href:!0});var qzr=s(BB);_no=r(qzr,"TapexTokenizer"),qzr.forEach(t),bno=r(ewe," (TAPEX model)"),ewe.forEach(t),vno=i(S),Vg=n(S,"LI",{});var owe=s(Vg);Ite=n(owe,"STRONG",{});var Nzr=s(Ite);Fno=r(Nzr,"transfo-xl"),Nzr.forEach(t),Tno=r(owe," \u2014 "),PB=n(owe,"A",{href:!0});var jzr=s(PB);Mno=r(jzr,"TransfoXLTokenizer"),jzr.forEach(t),Eno=r(owe," (Transformer-XL model)"),owe.forEach(t),Cno=i(S),ys=n(S,"LI",{});var l$=s(ys);qte=n(l$,"STRONG",{});var Dzr=s(qte);wno=r(Dzr,"visual_bert"),Dzr.forEach(t),Ano=r(l$," \u2014 "),IB=n(l$,"A",{href:!0});var Gzr=s(IB);yno=r(Gzr,"BertTokenizer"),Gzr.forEach(t),Lno=r(l$," or "),qB=n(l$,"A",{href:!0});var Ozr=s(qB);xno=r(Ozr,"BertTokenizerFast"),Ozr.forEach(t),$no=r(l$," (VisualBert model)"),l$.forEach(t),kno=i(S),Xg=n(S,"LI",{});var rwe=s(Xg);Nte=n(rwe,"STRONG",{});var Vzr=s(Nte);Sno=r(Vzr,"wav2vec2"),Vzr.forEach(t),Rno=r(rwe," \u2014 "),NB=n(rwe,"A",{href:!0});var Xzr=s(NB);Bno=r(Xzr,"Wav2Vec2CTCTokenizer"),Xzr.forEach(t),Pno=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),Ino=i(S),zg=n(S,"LI",{});var twe=s(zg);jte=n(twe,"STRONG",{});var zzr=s(jte);qno=r(zzr,"wav2vec2_phoneme"),zzr.forEach(t),Nno=r(twe," \u2014 "),jB=n(twe,"A",{href:!0});var Qzr=s(jB);jno=r(Qzr,"Wav2Vec2PhonemeCTCTokenizer"),Qzr.forEach(t),Dno=r(twe," (Wav2Vec2Phoneme model)"),twe.forEach(t),Gno=i(S),Ls=n(S,"LI",{});var i$=s(Ls);Dte=n(i$,"STRONG",{});var Wzr=s(Dte);Ono=r(Wzr,"xglm"),Wzr.forEach(t),Vno=r(i$," \u2014 "),DB=n(i$,"A",{href:!0});var Hzr=s(DB);Xno=r(Hzr,"XGLMTokenizer"),Hzr.forEach(t),zno=r(i$," or "),GB=n(i$,"A",{href:!0});var Uzr=s(GB);Qno=r(Uzr,"XGLMTokenizerFast"),Uzr.forEach(t),Wno=r(i$," (XGLM model)"),i$.forEach(t),Hno=i(S),Qg=n(S,"LI",{});var awe=s(Qg);Gte=n(awe,"STRONG",{});var Jzr=s(Gte);Uno=r(Jzr,"xlm"),Jzr.forEach(t),Jno=r(awe," \u2014 "),OB=n(awe,"A",{href:!0});var Yzr=s(OB);Yno=r(Yzr,"XLMTokenizer"),Yzr.forEach(t),Kno=r(awe," (XLM model)"),awe.forEach(t),Zno=i(S),Wg=n(S,"LI",{});var nwe=s(Wg);Ote=n(nwe,"STRONG",{});var Kzr=s(Ote);eso=r(Kzr,"xlm-prophetnet"),Kzr.forEach(t),oso=r(nwe," \u2014 "),VB=n(nwe,"A",{href:!0});var Zzr=s(VB);rso=r(Zzr,"XLMProphetNetTokenizer"),Zzr.forEach(t),tso=r(nwe," (XLMProphetNet model)"),nwe.forEach(t),aso=i(S),xs=n(S,"LI",{});var d$=s(xs);Vte=n(d$,"STRONG",{});var eQr=s(Vte);nso=r(eQr,"xlm-roberta"),eQr.forEach(t),sso=r(d$," \u2014 "),XB=n(d$,"A",{href:!0});var oQr=s(XB);lso=r(oQr,"XLMRobertaTokenizer"),oQr.forEach(t),iso=r(d$," or "),zB=n(d$,"A",{href:!0});var rQr=s(zB);dso=r(rQr,"XLMRobertaTokenizerFast"),rQr.forEach(t),cso=r(d$," (XLM-RoBERTa model)"),d$.forEach(t),fso=i(S),$s=n(S,"LI",{});var c$=s($s);Xte=n(c$,"STRONG",{});var tQr=s(Xte);mso=r(tQr,"xlm-roberta-xl"),tQr.forEach(t),gso=r(c$," \u2014 "),QB=n(c$,"A",{href:!0});var aQr=s(QB);hso=r(aQr,"RobertaTokenizer"),aQr.forEach(t),pso=r(c$," or "),WB=n(c$,"A",{href:!0});var nQr=s(WB);uso=r(nQr,"RobertaTokenizerFast"),nQr.forEach(t),_so=r(c$," (XLM-RoBERTa-XL model)"),c$.forEach(t),bso=i(S),ks=n(S,"LI",{});var f$=s(ks);zte=n(f$,"STRONG",{});var sQr=s(zte);vso=r(sQr,"xlnet"),sQr.forEach(t),Fso=r(f$," \u2014 "),HB=n(f$,"A",{href:!0});var lQr=s(HB);Tso=r(lQr,"XLNetTokenizer"),lQr.forEach(t),Mso=r(f$," or "),UB=n(f$,"A",{href:!0});var iQr=s(UB);Eso=r(iQr,"XLNetTokenizerFast"),iQr.forEach(t),Cso=r(f$," (XLNet model)"),f$.forEach(t),wso=i(S),Ss=n(S,"LI",{});var m$=s(Ss);Qte=n(m$,"STRONG",{});var dQr=s(Qte);Aso=r(dQr,"yoso"),dQr.forEach(t),yso=r(m$," \u2014 "),JB=n(m$,"A",{href:!0});var cQr=s(JB);Lso=r(cQr,"AlbertTokenizer"),cQr.forEach(t),xso=r(m$," or "),YB=n(m$,"A",{href:!0});var fQr=s(YB);$so=r(fQr,"AlbertTokenizerFast"),fQr.forEach(t),kso=r(m$," (YOSO model)"),m$.forEach(t),S.forEach(t),Sso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),Rso=i(Is),Ug=n(Is,"DIV",{class:!0});var oNe=s(Ug);T(my.$$.fragment,oNe),Bso=i(oNe),Wte=n(oNe,"P",{});var mQr=s(Wte);Pso=r(mQr,"Register a new tokenizer in this mapping."),mQr.forEach(t),oNe.forEach(t),Is.forEach(t),rIe=i(f),vi=n(f,"H2",{class:!0});var rNe=s(vi);Jg=n(rNe,"A",{id:!0,class:!0,href:!0});var gQr=s(Jg);Hte=n(gQr,"SPAN",{});var hQr=s(Hte);T(gy.$$.fragment,hQr),hQr.forEach(t),gQr.forEach(t),Iso=i(rNe),Ute=n(rNe,"SPAN",{});var pQr=s(Ute);qso=r(pQr,"AutoFeatureExtractor"),pQr.forEach(t),rNe.forEach(t),tIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(hy.$$.fragment,Ns),Nso=i(Ns),py=n(Ns,"P",{});var tNe=s(py);jso=r(tNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),KB=n(tNe,"A",{href:!0});var uQr=s(KB);Dso=r(uQr,"AutoFeatureExtractor.from_pretrained()"),uQr.forEach(t),Gso=r(tNe," class method."),tNe.forEach(t),Oso=i(Ns),uy=n(Ns,"P",{});var aNe=s(uy);Vso=r(aNe,"This class cannot be instantiated directly using "),Jte=n(aNe,"CODE",{});var _Qr=s(Jte);Xso=r(_Qr,"__init__()"),_Qr.forEach(t),zso=r(aNe," (throws an error)."),aNe.forEach(t),Qso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(_y.$$.fragment,Yt),Wso=i(Yt),Yte=n(Yt,"P",{});var bQr=s(Yte);Hso=r(bQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bQr.forEach(t),Uso=i(Yt),wa=n(Yt,"P",{});var eA=s(wa);Jso=r(eA,"The feature extractor class to instantiate is selected based on the "),Kte=n(eA,"CODE",{});var vQr=s(Kte);Yso=r(vQr,"model_type"),vQr.forEach(t),Kso=r(eA,` property of the config object
(either passed as an argument or loaded from `),Zte=n(eA,"CODE",{});var FQr=s(Zte);Zso=r(FQr,"pretrained_model_name_or_path"),FQr.forEach(t),elo=r(eA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eae=n(eA,"CODE",{});var TQr=s(eae);olo=r(TQr,"pretrained_model_name_or_path"),TQr.forEach(t),rlo=r(eA,":"),eA.forEach(t),tlo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var swe=s(Yg);oae=n(swe,"STRONG",{});var MQr=s(oae);alo=r(MQr,"beit"),MQr.forEach(t),nlo=r(swe," \u2014 "),ZB=n(swe,"A",{href:!0});var EQr=s(ZB);slo=r(EQr,"BeitFeatureExtractor"),EQr.forEach(t),llo=r(swe," (BEiT model)"),swe.forEach(t),ilo=i(ae),Kg=n(ae,"LI",{});var lwe=s(Kg);rae=n(lwe,"STRONG",{});var CQr=s(rae);dlo=r(CQr,"clip"),CQr.forEach(t),clo=r(lwe," \u2014 "),eP=n(lwe,"A",{href:!0});var wQr=s(eP);flo=r(wQr,"CLIPFeatureExtractor"),wQr.forEach(t),mlo=r(lwe," (CLIP model)"),lwe.forEach(t),glo=i(ae),Zg=n(ae,"LI",{});var iwe=s(Zg);tae=n(iwe,"STRONG",{});var AQr=s(tae);hlo=r(AQr,"convnext"),AQr.forEach(t),plo=r(iwe," \u2014 "),oP=n(iwe,"A",{href:!0});var yQr=s(oP);ulo=r(yQr,"ConvNextFeatureExtractor"),yQr.forEach(t),_lo=r(iwe," (ConvNext model)"),iwe.forEach(t),blo=i(ae),eh=n(ae,"LI",{});var dwe=s(eh);aae=n(dwe,"STRONG",{});var LQr=s(aae);vlo=r(LQr,"data2vec-audio"),LQr.forEach(t),Flo=r(dwe," \u2014 "),rP=n(dwe,"A",{href:!0});var xQr=s(rP);Tlo=r(xQr,"Wav2Vec2FeatureExtractor"),xQr.forEach(t),Mlo=r(dwe," (Data2VecAudio model)"),dwe.forEach(t),Elo=i(ae),oh=n(ae,"LI",{});var cwe=s(oh);nae=n(cwe,"STRONG",{});var $Qr=s(nae);Clo=r($Qr,"data2vec-vision"),$Qr.forEach(t),wlo=r(cwe," \u2014 "),tP=n(cwe,"A",{href:!0});var kQr=s(tP);Alo=r(kQr,"BeitFeatureExtractor"),kQr.forEach(t),ylo=r(cwe," (Data2VecVision model)"),cwe.forEach(t),Llo=i(ae),rh=n(ae,"LI",{});var fwe=s(rh);sae=n(fwe,"STRONG",{});var SQr=s(sae);xlo=r(SQr,"deit"),SQr.forEach(t),$lo=r(fwe," \u2014 "),aP=n(fwe,"A",{href:!0});var RQr=s(aP);klo=r(RQr,"DeiTFeatureExtractor"),RQr.forEach(t),Slo=r(fwe," (DeiT model)"),fwe.forEach(t),Rlo=i(ae),th=n(ae,"LI",{});var mwe=s(th);lae=n(mwe,"STRONG",{});var BQr=s(lae);Blo=r(BQr,"detr"),BQr.forEach(t),Plo=r(mwe," \u2014 "),nP=n(mwe,"A",{href:!0});var PQr=s(nP);Ilo=r(PQr,"DetrFeatureExtractor"),PQr.forEach(t),qlo=r(mwe," (DETR model)"),mwe.forEach(t),Nlo=i(ae),ah=n(ae,"LI",{});var gwe=s(ah);iae=n(gwe,"STRONG",{});var IQr=s(iae);jlo=r(IQr,"dpt"),IQr.forEach(t),Dlo=r(gwe," \u2014 "),sP=n(gwe,"A",{href:!0});var qQr=s(sP);Glo=r(qQr,"DPTFeatureExtractor"),qQr.forEach(t),Olo=r(gwe," (DPT model)"),gwe.forEach(t),Vlo=i(ae),nh=n(ae,"LI",{});var hwe=s(nh);dae=n(hwe,"STRONG",{});var NQr=s(dae);Xlo=r(NQr,"flava"),NQr.forEach(t),zlo=r(hwe," \u2014 "),lP=n(hwe,"A",{href:!0});var jQr=s(lP);Qlo=r(jQr,"FlavaFeatureExtractor"),jQr.forEach(t),Wlo=r(hwe," (Flava model)"),hwe.forEach(t),Hlo=i(ae),sh=n(ae,"LI",{});var pwe=s(sh);cae=n(pwe,"STRONG",{});var DQr=s(cae);Ulo=r(DQr,"glpn"),DQr.forEach(t),Jlo=r(pwe," \u2014 "),iP=n(pwe,"A",{href:!0});var GQr=s(iP);Ylo=r(GQr,"GLPNFeatureExtractor"),GQr.forEach(t),Klo=r(pwe," (GLPN model)"),pwe.forEach(t),Zlo=i(ae),lh=n(ae,"LI",{});var uwe=s(lh);fae=n(uwe,"STRONG",{});var OQr=s(fae);eio=r(OQr,"hubert"),OQr.forEach(t),oio=r(uwe," \u2014 "),dP=n(uwe,"A",{href:!0});var VQr=s(dP);rio=r(VQr,"Wav2Vec2FeatureExtractor"),VQr.forEach(t),tio=r(uwe," (Hubert model)"),uwe.forEach(t),aio=i(ae),ih=n(ae,"LI",{});var _we=s(ih);mae=n(_we,"STRONG",{});var XQr=s(mae);nio=r(XQr,"layoutlmv2"),XQr.forEach(t),sio=r(_we," \u2014 "),cP=n(_we,"A",{href:!0});var zQr=s(cP);lio=r(zQr,"LayoutLMv2FeatureExtractor"),zQr.forEach(t),iio=r(_we," (LayoutLMv2 model)"),_we.forEach(t),dio=i(ae),dh=n(ae,"LI",{});var bwe=s(dh);gae=n(bwe,"STRONG",{});var QQr=s(gae);cio=r(QQr,"maskformer"),QQr.forEach(t),fio=r(bwe," \u2014 "),fP=n(bwe,"A",{href:!0});var WQr=s(fP);mio=r(WQr,"MaskFormerFeatureExtractor"),WQr.forEach(t),gio=r(bwe," (MaskFormer model)"),bwe.forEach(t),hio=i(ae),ch=n(ae,"LI",{});var vwe=s(ch);hae=n(vwe,"STRONG",{});var HQr=s(hae);pio=r(HQr,"perceiver"),HQr.forEach(t),uio=r(vwe," \u2014 "),mP=n(vwe,"A",{href:!0});var UQr=s(mP);_io=r(UQr,"PerceiverFeatureExtractor"),UQr.forEach(t),bio=r(vwe," (Perceiver model)"),vwe.forEach(t),vio=i(ae),fh=n(ae,"LI",{});var Fwe=s(fh);pae=n(Fwe,"STRONG",{});var JQr=s(pae);Fio=r(JQr,"poolformer"),JQr.forEach(t),Tio=r(Fwe," \u2014 "),gP=n(Fwe,"A",{href:!0});var YQr=s(gP);Mio=r(YQr,"PoolFormerFeatureExtractor"),YQr.forEach(t),Eio=r(Fwe," (PoolFormer model)"),Fwe.forEach(t),Cio=i(ae),mh=n(ae,"LI",{});var Twe=s(mh);uae=n(Twe,"STRONG",{});var KQr=s(uae);wio=r(KQr,"regnet"),KQr.forEach(t),Aio=r(Twe," \u2014 "),hP=n(Twe,"A",{href:!0});var ZQr=s(hP);yio=r(ZQr,"ConvNextFeatureExtractor"),ZQr.forEach(t),Lio=r(Twe," (RegNet model)"),Twe.forEach(t),xio=i(ae),gh=n(ae,"LI",{});var Mwe=s(gh);_ae=n(Mwe,"STRONG",{});var eWr=s(_ae);$io=r(eWr,"resnet"),eWr.forEach(t),kio=r(Mwe," \u2014 "),pP=n(Mwe,"A",{href:!0});var oWr=s(pP);Sio=r(oWr,"ConvNextFeatureExtractor"),oWr.forEach(t),Rio=r(Mwe," (ResNet model)"),Mwe.forEach(t),Bio=i(ae),hh=n(ae,"LI",{});var Ewe=s(hh);bae=n(Ewe,"STRONG",{});var rWr=s(bae);Pio=r(rWr,"segformer"),rWr.forEach(t),Iio=r(Ewe," \u2014 "),uP=n(Ewe,"A",{href:!0});var tWr=s(uP);qio=r(tWr,"SegformerFeatureExtractor"),tWr.forEach(t),Nio=r(Ewe," (SegFormer model)"),Ewe.forEach(t),jio=i(ae),ph=n(ae,"LI",{});var Cwe=s(ph);vae=n(Cwe,"STRONG",{});var aWr=s(vae);Dio=r(aWr,"speech_to_text"),aWr.forEach(t),Gio=r(Cwe," \u2014 "),_P=n(Cwe,"A",{href:!0});var nWr=s(_P);Oio=r(nWr,"Speech2TextFeatureExtractor"),nWr.forEach(t),Vio=r(Cwe," (Speech2Text model)"),Cwe.forEach(t),Xio=i(ae),uh=n(ae,"LI",{});var wwe=s(uh);Fae=n(wwe,"STRONG",{});var sWr=s(Fae);zio=r(sWr,"swin"),sWr.forEach(t),Qio=r(wwe," \u2014 "),bP=n(wwe,"A",{href:!0});var lWr=s(bP);Wio=r(lWr,"ViTFeatureExtractor"),lWr.forEach(t),Hio=r(wwe," (Swin model)"),wwe.forEach(t),Uio=i(ae),_h=n(ae,"LI",{});var Awe=s(_h);Tae=n(Awe,"STRONG",{});var iWr=s(Tae);Jio=r(iWr,"van"),iWr.forEach(t),Yio=r(Awe," \u2014 "),vP=n(Awe,"A",{href:!0});var dWr=s(vP);Kio=r(dWr,"ConvNextFeatureExtractor"),dWr.forEach(t),Zio=r(Awe," (VAN model)"),Awe.forEach(t),edo=i(ae),bh=n(ae,"LI",{});var ywe=s(bh);Mae=n(ywe,"STRONG",{});var cWr=s(Mae);odo=r(cWr,"vit"),cWr.forEach(t),rdo=r(ywe," \u2014 "),FP=n(ywe,"A",{href:!0});var fWr=s(FP);tdo=r(fWr,"ViTFeatureExtractor"),fWr.forEach(t),ado=r(ywe," (ViT model)"),ywe.forEach(t),ndo=i(ae),vh=n(ae,"LI",{});var Lwe=s(vh);Eae=n(Lwe,"STRONG",{});var mWr=s(Eae);sdo=r(mWr,"vit_mae"),mWr.forEach(t),ldo=r(Lwe," \u2014 "),TP=n(Lwe,"A",{href:!0});var gWr=s(TP);ido=r(gWr,"ViTFeatureExtractor"),gWr.forEach(t),ddo=r(Lwe," (ViTMAE model)"),Lwe.forEach(t),cdo=i(ae),Fh=n(ae,"LI",{});var xwe=s(Fh);Cae=n(xwe,"STRONG",{});var hWr=s(Cae);fdo=r(hWr,"wav2vec2"),hWr.forEach(t),mdo=r(xwe," \u2014 "),MP=n(xwe,"A",{href:!0});var pWr=s(MP);gdo=r(pWr,"Wav2Vec2FeatureExtractor"),pWr.forEach(t),hdo=r(xwe," (Wav2Vec2 model)"),xwe.forEach(t),pdo=i(ae),Th=n(ae,"LI",{});var $we=s(Th);wae=n($we,"STRONG",{});var uWr=s(wae);udo=r(uWr,"yolos"),uWr.forEach(t),_do=r($we," \u2014 "),EP=n($we,"A",{href:!0});var _Wr=s(EP);bdo=r(_Wr,"YolosFeatureExtractor"),_Wr.forEach(t),vdo=r($we," (YOLOS model)"),$we.forEach(t),ae.forEach(t),Fdo=i(Yt),T(Mh.$$.fragment,Yt),Tdo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),Mdo=i(Ns),Ch=n(Ns,"DIV",{class:!0});var nNe=s(Ch);T(by.$$.fragment,nNe),Edo=i(nNe),Aae=n(nNe,"P",{});var bWr=s(Aae);Cdo=r(bWr,"Register a new feature extractor for this class."),bWr.forEach(t),nNe.forEach(t),Ns.forEach(t),aIe=i(f),Fi=n(f,"H2",{class:!0});var sNe=s(Fi);wh=n(sNe,"A",{id:!0,class:!0,href:!0});var vWr=s(wh);yae=n(vWr,"SPAN",{});var FWr=s(yae);T(vy.$$.fragment,FWr),FWr.forEach(t),vWr.forEach(t),wdo=i(sNe),Lae=n(sNe,"SPAN",{});var TWr=s(Lae);Ado=r(TWr,"AutoProcessor"),TWr.forEach(t),sNe.forEach(t),nIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(Fy.$$.fragment,js),ydo=i(js),Ty=n(js,"P",{});var lNe=s(Ty);Ldo=r(lNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CP=n(lNe,"A",{href:!0});var MWr=s(CP);xdo=r(MWr,"AutoProcessor.from_pretrained()"),MWr.forEach(t),$do=r(lNe," class method."),lNe.forEach(t),kdo=i(js),My=n(js,"P",{});var iNe=s(My);Sdo=r(iNe,"This class cannot be instantiated directly using "),xae=n(iNe,"CODE",{});var EWr=s(xae);Rdo=r(EWr,"__init__()"),EWr.forEach(t),Bdo=r(iNe," (throws an error)."),iNe.forEach(t),Pdo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(Ey.$$.fragment,Kt),Ido=i(Kt),$ae=n(Kt,"P",{});var CWr=s($ae);qdo=r(CWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),CWr.forEach(t),Ndo=i(Kt),Ti=n(Kt,"P",{});var cK=s(Ti);jdo=r(cK,"The processor class to instantiate is selected based on the "),kae=n(cK,"CODE",{});var wWr=s(kae);Ddo=r(wWr,"model_type"),wWr.forEach(t),Gdo=r(cK,` property of the config object (either
passed as an argument or loaded from `),Sae=n(cK,"CODE",{});var AWr=s(Sae);Odo=r(AWr,"pretrained_model_name_or_path"),AWr.forEach(t),Vdo=r(cK," if possible):"),cK.forEach(t),Xdo=i(Kt),_e=n(Kt,"UL",{});var ve=s(_e);Ah=n(ve,"LI",{});var kwe=s(Ah);Rae=n(kwe,"STRONG",{});var yWr=s(Rae);zdo=r(yWr,"clip"),yWr.forEach(t),Qdo=r(kwe," \u2014 "),wP=n(kwe,"A",{href:!0});var LWr=s(wP);Wdo=r(LWr,"CLIPProcessor"),LWr.forEach(t),Hdo=r(kwe," (CLIP model)"),kwe.forEach(t),Udo=i(ve),yh=n(ve,"LI",{});var Swe=s(yh);Bae=n(Swe,"STRONG",{});var xWr=s(Bae);Jdo=r(xWr,"flava"),xWr.forEach(t),Ydo=r(Swe," \u2014 "),Pae=n(Swe,"CODE",{});var $Wr=s(Pae);Kdo=r($Wr,"FLAVAProcessor"),$Wr.forEach(t),Zdo=r(Swe," (Flava model)"),Swe.forEach(t),eco=i(ve),Lh=n(ve,"LI",{});var Rwe=s(Lh);Iae=n(Rwe,"STRONG",{});var kWr=s(Iae);oco=r(kWr,"layoutlmv2"),kWr.forEach(t),rco=r(Rwe," \u2014 "),AP=n(Rwe,"A",{href:!0});var SWr=s(AP);tco=r(SWr,"LayoutLMv2Processor"),SWr.forEach(t),aco=r(Rwe," (LayoutLMv2 model)"),Rwe.forEach(t),nco=i(ve),xh=n(ve,"LI",{});var Bwe=s(xh);qae=n(Bwe,"STRONG",{});var RWr=s(qae);sco=r(RWr,"layoutxlm"),RWr.forEach(t),lco=r(Bwe," \u2014 "),yP=n(Bwe,"A",{href:!0});var BWr=s(yP);ico=r(BWr,"LayoutXLMProcessor"),BWr.forEach(t),dco=r(Bwe," (LayoutXLM model)"),Bwe.forEach(t),cco=i(ve),$h=n(ve,"LI",{});var Pwe=s($h);Nae=n(Pwe,"STRONG",{});var PWr=s(Nae);fco=r(PWr,"sew"),PWr.forEach(t),mco=r(Pwe," \u2014 "),LP=n(Pwe,"A",{href:!0});var IWr=s(LP);gco=r(IWr,"Wav2Vec2Processor"),IWr.forEach(t),hco=r(Pwe," (SEW model)"),Pwe.forEach(t),pco=i(ve),kh=n(ve,"LI",{});var Iwe=s(kh);jae=n(Iwe,"STRONG",{});var qWr=s(jae);uco=r(qWr,"sew-d"),qWr.forEach(t),_co=r(Iwe," \u2014 "),xP=n(Iwe,"A",{href:!0});var NWr=s(xP);bco=r(NWr,"Wav2Vec2Processor"),NWr.forEach(t),vco=r(Iwe," (SEW-D model)"),Iwe.forEach(t),Fco=i(ve),Sh=n(ve,"LI",{});var qwe=s(Sh);Dae=n(qwe,"STRONG",{});var jWr=s(Dae);Tco=r(jWr,"speech_to_text"),jWr.forEach(t),Mco=r(qwe," \u2014 "),$P=n(qwe,"A",{href:!0});var DWr=s($P);Eco=r(DWr,"Speech2TextProcessor"),DWr.forEach(t),Cco=r(qwe," (Speech2Text model)"),qwe.forEach(t),wco=i(ve),Rh=n(ve,"LI",{});var Nwe=s(Rh);Gae=n(Nwe,"STRONG",{});var GWr=s(Gae);Aco=r(GWr,"speech_to_text_2"),GWr.forEach(t),yco=r(Nwe," \u2014 "),kP=n(Nwe,"A",{href:!0});var OWr=s(kP);Lco=r(OWr,"Speech2Text2Processor"),OWr.forEach(t),xco=r(Nwe," (Speech2Text2 model)"),Nwe.forEach(t),$co=i(ve),Bh=n(ve,"LI",{});var jwe=s(Bh);Oae=n(jwe,"STRONG",{});var VWr=s(Oae);kco=r(VWr,"trocr"),VWr.forEach(t),Sco=r(jwe," \u2014 "),SP=n(jwe,"A",{href:!0});var XWr=s(SP);Rco=r(XWr,"TrOCRProcessor"),XWr.forEach(t),Bco=r(jwe," (TrOCR model)"),jwe.forEach(t),Pco=i(ve),Ph=n(ve,"LI",{});var Dwe=s(Ph);Vae=n(Dwe,"STRONG",{});var zWr=s(Vae);Ico=r(zWr,"unispeech"),zWr.forEach(t),qco=r(Dwe," \u2014 "),RP=n(Dwe,"A",{href:!0});var QWr=s(RP);Nco=r(QWr,"Wav2Vec2Processor"),QWr.forEach(t),jco=r(Dwe," (UniSpeech model)"),Dwe.forEach(t),Dco=i(ve),Ih=n(ve,"LI",{});var Gwe=s(Ih);Xae=n(Gwe,"STRONG",{});var WWr=s(Xae);Gco=r(WWr,"unispeech-sat"),WWr.forEach(t),Oco=r(Gwe," \u2014 "),BP=n(Gwe,"A",{href:!0});var HWr=s(BP);Vco=r(HWr,"Wav2Vec2Processor"),HWr.forEach(t),Xco=r(Gwe," (UniSpeechSat model)"),Gwe.forEach(t),zco=i(ve),qh=n(ve,"LI",{});var Owe=s(qh);zae=n(Owe,"STRONG",{});var UWr=s(zae);Qco=r(UWr,"vilt"),UWr.forEach(t),Wco=r(Owe," \u2014 "),PP=n(Owe,"A",{href:!0});var JWr=s(PP);Hco=r(JWr,"ViltProcessor"),JWr.forEach(t),Uco=r(Owe," (ViLT model)"),Owe.forEach(t),Jco=i(ve),Nh=n(ve,"LI",{});var Vwe=s(Nh);Qae=n(Vwe,"STRONG",{});var YWr=s(Qae);Yco=r(YWr,"vision-text-dual-encoder"),YWr.forEach(t),Kco=r(Vwe," \u2014 "),IP=n(Vwe,"A",{href:!0});var KWr=s(IP);Zco=r(KWr,"VisionTextDualEncoderProcessor"),KWr.forEach(t),efo=r(Vwe," (VisionTextDualEncoder model)"),Vwe.forEach(t),ofo=i(ve),jh=n(ve,"LI",{});var Xwe=s(jh);Wae=n(Xwe,"STRONG",{});var ZWr=s(Wae);rfo=r(ZWr,"wav2vec2"),ZWr.forEach(t),tfo=r(Xwe," \u2014 "),qP=n(Xwe,"A",{href:!0});var eHr=s(qP);afo=r(eHr,"Wav2Vec2Processor"),eHr.forEach(t),nfo=r(Xwe," (Wav2Vec2 model)"),Xwe.forEach(t),sfo=i(ve),Dh=n(ve,"LI",{});var zwe=s(Dh);Hae=n(zwe,"STRONG",{});var oHr=s(Hae);lfo=r(oHr,"wavlm"),oHr.forEach(t),ifo=r(zwe," \u2014 "),NP=n(zwe,"A",{href:!0});var rHr=s(NP);dfo=r(rHr,"Wav2Vec2Processor"),rHr.forEach(t),cfo=r(zwe," (WavLM model)"),zwe.forEach(t),ve.forEach(t),ffo=i(Kt),T(Gh.$$.fragment,Kt),mfo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),gfo=i(js),Vh=n(js,"DIV",{class:!0});var dNe=s(Vh);T(Cy.$$.fragment,dNe),hfo=i(dNe),Uae=n(dNe,"P",{});var tHr=s(Uae);pfo=r(tHr,"Register a new processor for this class."),tHr.forEach(t),dNe.forEach(t),js.forEach(t),sIe=i(f),Mi=n(f,"H2",{class:!0});var cNe=s(Mi);Xh=n(cNe,"A",{id:!0,class:!0,href:!0});var aHr=s(Xh);Jae=n(aHr,"SPAN",{});var nHr=s(Jae);T(wy.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),ufo=i(cNe),Yae=n(cNe,"SPAN",{});var sHr=s(Yae);_fo=r(sHr,"AutoModel"),sHr.forEach(t),cNe.forEach(t),lIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(Ay.$$.fragment,Ds),bfo=i(Ds),Ei=n(Ds,"P",{});var fK=s(Ei);vfo=r(fK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jP=n(fK,"A",{href:!0});var lHr=s(jP);Ffo=r(lHr,"from_pretrained()"),lHr.forEach(t),Tfo=r(fK," class method or the "),DP=n(fK,"A",{href:!0});var iHr=s(DP);Mfo=r(iHr,"from_config()"),iHr.forEach(t),Efo=r(fK,` class
method.`),fK.forEach(t),Cfo=i(Ds),yy=n(Ds,"P",{});var fNe=s(yy);wfo=r(fNe,"This class cannot be instantiated directly using "),Kae=n(fNe,"CODE",{});var dHr=s(Kae);Afo=r(dHr,"__init__()"),dHr.forEach(t),yfo=r(fNe," (throws an error)."),fNe.forEach(t),Lfo=i(Ds),ot=n(Ds,"DIV",{class:!0});var oA=s(ot);T(Ly.$$.fragment,oA),xfo=i(oA),Zae=n(oA,"P",{});var cHr=s(Zae);$fo=r(cHr,"Instantiates one of the base model classes of the library from a configuration."),cHr.forEach(t),kfo=i(oA),Ci=n(oA,"P",{});var mK=s(Ci);Sfo=r(mK,`Note:
Loading a model from its configuration file does `),ene=n(mK,"STRONG",{});var fHr=s(ene);Rfo=r(fHr,"not"),fHr.forEach(t),Bfo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GP=n(mK,"A",{href:!0});var mHr=s(GP);Pfo=r(mHr,"from_pretrained()"),mHr.forEach(t),Ifo=r(mK," to load the model weights."),mK.forEach(t),qfo=i(oA),T(zh.$$.fragment,oA),oA.forEach(t),Nfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(xy.$$.fragment,Zt),jfo=i(Zt),one=n(Zt,"P",{});var gHr=s(one);Dfo=r(gHr,"Instantiate one of the base model classes of the library from a pretrained model."),gHr.forEach(t),Gfo=i(Zt),Aa=n(Zt,"P",{});var rA=s(Aa);Ofo=r(rA,"The model class to instantiate is selected based on the "),rne=n(rA,"CODE",{});var hHr=s(rne);Vfo=r(hHr,"model_type"),hHr.forEach(t),Xfo=r(rA,` property of the config object (either
passed as an argument or loaded from `),tne=n(rA,"CODE",{});var pHr=s(tne);zfo=r(pHr,"pretrained_model_name_or_path"),pHr.forEach(t),Qfo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ane=n(rA,"CODE",{});var uHr=s(ane);Wfo=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),Hfo=r(rA,":"),rA.forEach(t),Ufo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var Qwe=s(Qh);nne=n(Qwe,"STRONG",{});var _Hr=s(nne);Jfo=r(_Hr,"albert"),_Hr.forEach(t),Yfo=r(Qwe," \u2014 "),OP=n(Qwe,"A",{href:!0});var bHr=s(OP);Kfo=r(bHr,"AlbertModel"),bHr.forEach(t),Zfo=r(Qwe," (ALBERT model)"),Qwe.forEach(t),emo=i($),Wh=n($,"LI",{});var Wwe=s(Wh);sne=n(Wwe,"STRONG",{});var vHr=s(sne);omo=r(vHr,"bart"),vHr.forEach(t),rmo=r(Wwe," \u2014 "),VP=n(Wwe,"A",{href:!0});var FHr=s(VP);tmo=r(FHr,"BartModel"),FHr.forEach(t),amo=r(Wwe," (BART model)"),Wwe.forEach(t),nmo=i($),Hh=n($,"LI",{});var Hwe=s(Hh);lne=n(Hwe,"STRONG",{});var THr=s(lne);smo=r(THr,"beit"),THr.forEach(t),lmo=r(Hwe," \u2014 "),XP=n(Hwe,"A",{href:!0});var MHr=s(XP);imo=r(MHr,"BeitModel"),MHr.forEach(t),dmo=r(Hwe," (BEiT model)"),Hwe.forEach(t),cmo=i($),Uh=n($,"LI",{});var Uwe=s(Uh);ine=n(Uwe,"STRONG",{});var EHr=s(ine);fmo=r(EHr,"bert"),EHr.forEach(t),mmo=r(Uwe," \u2014 "),zP=n(Uwe,"A",{href:!0});var CHr=s(zP);gmo=r(CHr,"BertModel"),CHr.forEach(t),hmo=r(Uwe," (BERT model)"),Uwe.forEach(t),pmo=i($),Jh=n($,"LI",{});var Jwe=s(Jh);dne=n(Jwe,"STRONG",{});var wHr=s(dne);umo=r(wHr,"bert-generation"),wHr.forEach(t),_mo=r(Jwe," \u2014 "),QP=n(Jwe,"A",{href:!0});var AHr=s(QP);bmo=r(AHr,"BertGenerationEncoder"),AHr.forEach(t),vmo=r(Jwe," (Bert Generation model)"),Jwe.forEach(t),Fmo=i($),Yh=n($,"LI",{});var Ywe=s(Yh);cne=n(Ywe,"STRONG",{});var yHr=s(cne);Tmo=r(yHr,"big_bird"),yHr.forEach(t),Mmo=r(Ywe," \u2014 "),WP=n(Ywe,"A",{href:!0});var LHr=s(WP);Emo=r(LHr,"BigBirdModel"),LHr.forEach(t),Cmo=r(Ywe," (BigBird model)"),Ywe.forEach(t),wmo=i($),Kh=n($,"LI",{});var Kwe=s(Kh);fne=n(Kwe,"STRONG",{});var xHr=s(fne);Amo=r(xHr,"bigbird_pegasus"),xHr.forEach(t),ymo=r(Kwe," \u2014 "),HP=n(Kwe,"A",{href:!0});var $Hr=s(HP);Lmo=r($Hr,"BigBirdPegasusModel"),$Hr.forEach(t),xmo=r(Kwe," (BigBirdPegasus model)"),Kwe.forEach(t),$mo=i($),Zh=n($,"LI",{});var Zwe=s(Zh);mne=n(Zwe,"STRONG",{});var kHr=s(mne);kmo=r(kHr,"blenderbot"),kHr.forEach(t),Smo=r(Zwe," \u2014 "),UP=n(Zwe,"A",{href:!0});var SHr=s(UP);Rmo=r(SHr,"BlenderbotModel"),SHr.forEach(t),Bmo=r(Zwe," (Blenderbot model)"),Zwe.forEach(t),Pmo=i($),ep=n($,"LI",{});var eAe=s(ep);gne=n(eAe,"STRONG",{});var RHr=s(gne);Imo=r(RHr,"blenderbot-small"),RHr.forEach(t),qmo=r(eAe," \u2014 "),JP=n(eAe,"A",{href:!0});var BHr=s(JP);Nmo=r(BHr,"BlenderbotSmallModel"),BHr.forEach(t),jmo=r(eAe," (BlenderbotSmall model)"),eAe.forEach(t),Dmo=i($),op=n($,"LI",{});var oAe=s(op);hne=n(oAe,"STRONG",{});var PHr=s(hne);Gmo=r(PHr,"camembert"),PHr.forEach(t),Omo=r(oAe," \u2014 "),YP=n(oAe,"A",{href:!0});var IHr=s(YP);Vmo=r(IHr,"CamembertModel"),IHr.forEach(t),Xmo=r(oAe," (CamemBERT model)"),oAe.forEach(t),zmo=i($),rp=n($,"LI",{});var rAe=s(rp);pne=n(rAe,"STRONG",{});var qHr=s(pne);Qmo=r(qHr,"canine"),qHr.forEach(t),Wmo=r(rAe," \u2014 "),KP=n(rAe,"A",{href:!0});var NHr=s(KP);Hmo=r(NHr,"CanineModel"),NHr.forEach(t),Umo=r(rAe," (Canine model)"),rAe.forEach(t),Jmo=i($),tp=n($,"LI",{});var tAe=s(tp);une=n(tAe,"STRONG",{});var jHr=s(une);Ymo=r(jHr,"clip"),jHr.forEach(t),Kmo=r(tAe," \u2014 "),ZP=n(tAe,"A",{href:!0});var DHr=s(ZP);Zmo=r(DHr,"CLIPModel"),DHr.forEach(t),ego=r(tAe," (CLIP model)"),tAe.forEach(t),ogo=i($),ap=n($,"LI",{});var aAe=s(ap);_ne=n(aAe,"STRONG",{});var GHr=s(_ne);rgo=r(GHr,"convbert"),GHr.forEach(t),tgo=r(aAe," \u2014 "),eI=n(aAe,"A",{href:!0});var OHr=s(eI);ago=r(OHr,"ConvBertModel"),OHr.forEach(t),ngo=r(aAe," (ConvBERT model)"),aAe.forEach(t),sgo=i($),np=n($,"LI",{});var nAe=s(np);bne=n(nAe,"STRONG",{});var VHr=s(bne);lgo=r(VHr,"convnext"),VHr.forEach(t),igo=r(nAe," \u2014 "),oI=n(nAe,"A",{href:!0});var XHr=s(oI);dgo=r(XHr,"ConvNextModel"),XHr.forEach(t),cgo=r(nAe," (ConvNext model)"),nAe.forEach(t),fgo=i($),sp=n($,"LI",{});var sAe=s(sp);vne=n(sAe,"STRONG",{});var zHr=s(vne);mgo=r(zHr,"ctrl"),zHr.forEach(t),ggo=r(sAe," \u2014 "),rI=n(sAe,"A",{href:!0});var QHr=s(rI);hgo=r(QHr,"CTRLModel"),QHr.forEach(t),pgo=r(sAe," (CTRL model)"),sAe.forEach(t),ugo=i($),lp=n($,"LI",{});var lAe=s(lp);Fne=n(lAe,"STRONG",{});var WHr=s(Fne);_go=r(WHr,"data2vec-audio"),WHr.forEach(t),bgo=r(lAe," \u2014 "),tI=n(lAe,"A",{href:!0});var HHr=s(tI);vgo=r(HHr,"Data2VecAudioModel"),HHr.forEach(t),Fgo=r(lAe," (Data2VecAudio model)"),lAe.forEach(t),Tgo=i($),ip=n($,"LI",{});var iAe=s(ip);Tne=n(iAe,"STRONG",{});var UHr=s(Tne);Mgo=r(UHr,"data2vec-text"),UHr.forEach(t),Ego=r(iAe," \u2014 "),aI=n(iAe,"A",{href:!0});var JHr=s(aI);Cgo=r(JHr,"Data2VecTextModel"),JHr.forEach(t),wgo=r(iAe," (Data2VecText model)"),iAe.forEach(t),Ago=i($),dp=n($,"LI",{});var dAe=s(dp);Mne=n(dAe,"STRONG",{});var YHr=s(Mne);ygo=r(YHr,"data2vec-vision"),YHr.forEach(t),Lgo=r(dAe," \u2014 "),nI=n(dAe,"A",{href:!0});var KHr=s(nI);xgo=r(KHr,"Data2VecVisionModel"),KHr.forEach(t),$go=r(dAe," (Data2VecVision model)"),dAe.forEach(t),kgo=i($),cp=n($,"LI",{});var cAe=s(cp);Ene=n(cAe,"STRONG",{});var ZHr=s(Ene);Sgo=r(ZHr,"deberta"),ZHr.forEach(t),Rgo=r(cAe," \u2014 "),sI=n(cAe,"A",{href:!0});var eUr=s(sI);Bgo=r(eUr,"DebertaModel"),eUr.forEach(t),Pgo=r(cAe," (DeBERTa model)"),cAe.forEach(t),Igo=i($),fp=n($,"LI",{});var fAe=s(fp);Cne=n(fAe,"STRONG",{});var oUr=s(Cne);qgo=r(oUr,"deberta-v2"),oUr.forEach(t),Ngo=r(fAe," \u2014 "),lI=n(fAe,"A",{href:!0});var rUr=s(lI);jgo=r(rUr,"DebertaV2Model"),rUr.forEach(t),Dgo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),Ggo=i($),mp=n($,"LI",{});var mAe=s(mp);wne=n(mAe,"STRONG",{});var tUr=s(wne);Ogo=r(tUr,"decision_transformer"),tUr.forEach(t),Vgo=r(mAe," \u2014 "),iI=n(mAe,"A",{href:!0});var aUr=s(iI);Xgo=r(aUr,"DecisionTransformerModel"),aUr.forEach(t),zgo=r(mAe," (Decision Transformer model)"),mAe.forEach(t),Qgo=i($),gp=n($,"LI",{});var gAe=s(gp);Ane=n(gAe,"STRONG",{});var nUr=s(Ane);Wgo=r(nUr,"deit"),nUr.forEach(t),Hgo=r(gAe," \u2014 "),dI=n(gAe,"A",{href:!0});var sUr=s(dI);Ugo=r(sUr,"DeiTModel"),sUr.forEach(t),Jgo=r(gAe," (DeiT model)"),gAe.forEach(t),Ygo=i($),hp=n($,"LI",{});var hAe=s(hp);yne=n(hAe,"STRONG",{});var lUr=s(yne);Kgo=r(lUr,"detr"),lUr.forEach(t),Zgo=r(hAe," \u2014 "),cI=n(hAe,"A",{href:!0});var iUr=s(cI);eho=r(iUr,"DetrModel"),iUr.forEach(t),oho=r(hAe," (DETR model)"),hAe.forEach(t),rho=i($),pp=n($,"LI",{});var pAe=s(pp);Lne=n(pAe,"STRONG",{});var dUr=s(Lne);tho=r(dUr,"distilbert"),dUr.forEach(t),aho=r(pAe," \u2014 "),fI=n(pAe,"A",{href:!0});var cUr=s(fI);nho=r(cUr,"DistilBertModel"),cUr.forEach(t),sho=r(pAe," (DistilBERT model)"),pAe.forEach(t),lho=i($),up=n($,"LI",{});var uAe=s(up);xne=n(uAe,"STRONG",{});var fUr=s(xne);iho=r(fUr,"dpr"),fUr.forEach(t),dho=r(uAe," \u2014 "),mI=n(uAe,"A",{href:!0});var mUr=s(mI);cho=r(mUr,"DPRQuestionEncoder"),mUr.forEach(t),fho=r(uAe," (DPR model)"),uAe.forEach(t),mho=i($),_p=n($,"LI",{});var _Ae=s(_p);$ne=n(_Ae,"STRONG",{});var gUr=s($ne);gho=r(gUr,"dpt"),gUr.forEach(t),hho=r(_Ae," \u2014 "),gI=n(_Ae,"A",{href:!0});var hUr=s(gI);pho=r(hUr,"DPTModel"),hUr.forEach(t),uho=r(_Ae," (DPT model)"),_Ae.forEach(t),_ho=i($),bp=n($,"LI",{});var bAe=s(bp);kne=n(bAe,"STRONG",{});var pUr=s(kne);bho=r(pUr,"electra"),pUr.forEach(t),vho=r(bAe," \u2014 "),hI=n(bAe,"A",{href:!0});var uUr=s(hI);Fho=r(uUr,"ElectraModel"),uUr.forEach(t),Tho=r(bAe," (ELECTRA model)"),bAe.forEach(t),Mho=i($),vp=n($,"LI",{});var vAe=s(vp);Sne=n(vAe,"STRONG",{});var _Ur=s(Sne);Eho=r(_Ur,"flaubert"),_Ur.forEach(t),Cho=r(vAe," \u2014 "),pI=n(vAe,"A",{href:!0});var bUr=s(pI);who=r(bUr,"FlaubertModel"),bUr.forEach(t),Aho=r(vAe," (FlauBERT model)"),vAe.forEach(t),yho=i($),Fp=n($,"LI",{});var FAe=s(Fp);Rne=n(FAe,"STRONG",{});var vUr=s(Rne);Lho=r(vUr,"flava"),vUr.forEach(t),xho=r(FAe," \u2014 "),uI=n(FAe,"A",{href:!0});var FUr=s(uI);$ho=r(FUr,"FlavaModel"),FUr.forEach(t),kho=r(FAe," (Flava model)"),FAe.forEach(t),Sho=i($),Tp=n($,"LI",{});var TAe=s(Tp);Bne=n(TAe,"STRONG",{});var TUr=s(Bne);Rho=r(TUr,"fnet"),TUr.forEach(t),Bho=r(TAe," \u2014 "),_I=n(TAe,"A",{href:!0});var MUr=s(_I);Pho=r(MUr,"FNetModel"),MUr.forEach(t),Iho=r(TAe," (FNet model)"),TAe.forEach(t),qho=i($),Mp=n($,"LI",{});var MAe=s(Mp);Pne=n(MAe,"STRONG",{});var EUr=s(Pne);Nho=r(EUr,"fsmt"),EUr.forEach(t),jho=r(MAe," \u2014 "),bI=n(MAe,"A",{href:!0});var CUr=s(bI);Dho=r(CUr,"FSMTModel"),CUr.forEach(t),Gho=r(MAe," (FairSeq Machine-Translation model)"),MAe.forEach(t),Oho=i($),Rs=n($,"LI",{});var g$=s(Rs);Ine=n(g$,"STRONG",{});var wUr=s(Ine);Vho=r(wUr,"funnel"),wUr.forEach(t),Xho=r(g$," \u2014 "),vI=n(g$,"A",{href:!0});var AUr=s(vI);zho=r(AUr,"FunnelModel"),AUr.forEach(t),Qho=r(g$," or "),FI=n(g$,"A",{href:!0});var yUr=s(FI);Who=r(yUr,"FunnelBaseModel"),yUr.forEach(t),Hho=r(g$," (Funnel Transformer model)"),g$.forEach(t),Uho=i($),Ep=n($,"LI",{});var EAe=s(Ep);qne=n(EAe,"STRONG",{});var LUr=s(qne);Jho=r(LUr,"glpn"),LUr.forEach(t),Yho=r(EAe," \u2014 "),TI=n(EAe,"A",{href:!0});var xUr=s(TI);Kho=r(xUr,"GLPNModel"),xUr.forEach(t),Zho=r(EAe," (GLPN model)"),EAe.forEach(t),epo=i($),Cp=n($,"LI",{});var CAe=s(Cp);Nne=n(CAe,"STRONG",{});var $Ur=s(Nne);opo=r($Ur,"gpt2"),$Ur.forEach(t),rpo=r(CAe," \u2014 "),MI=n(CAe,"A",{href:!0});var kUr=s(MI);tpo=r(kUr,"GPT2Model"),kUr.forEach(t),apo=r(CAe," (OpenAI GPT-2 model)"),CAe.forEach(t),npo=i($),wp=n($,"LI",{});var wAe=s(wp);jne=n(wAe,"STRONG",{});var SUr=s(jne);spo=r(SUr,"gpt_neo"),SUr.forEach(t),lpo=r(wAe," \u2014 "),EI=n(wAe,"A",{href:!0});var RUr=s(EI);ipo=r(RUr,"GPTNeoModel"),RUr.forEach(t),dpo=r(wAe," (GPT Neo model)"),wAe.forEach(t),cpo=i($),Ap=n($,"LI",{});var AAe=s(Ap);Dne=n(AAe,"STRONG",{});var BUr=s(Dne);fpo=r(BUr,"gptj"),BUr.forEach(t),mpo=r(AAe," \u2014 "),CI=n(AAe,"A",{href:!0});var PUr=s(CI);gpo=r(PUr,"GPTJModel"),PUr.forEach(t),hpo=r(AAe," (GPT-J model)"),AAe.forEach(t),ppo=i($),yp=n($,"LI",{});var yAe=s(yp);Gne=n(yAe,"STRONG",{});var IUr=s(Gne);upo=r(IUr,"hubert"),IUr.forEach(t),_po=r(yAe," \u2014 "),wI=n(yAe,"A",{href:!0});var qUr=s(wI);bpo=r(qUr,"HubertModel"),qUr.forEach(t),vpo=r(yAe," (Hubert model)"),yAe.forEach(t),Fpo=i($),Lp=n($,"LI",{});var LAe=s(Lp);One=n(LAe,"STRONG",{});var NUr=s(One);Tpo=r(NUr,"ibert"),NUr.forEach(t),Mpo=r(LAe," \u2014 "),AI=n(LAe,"A",{href:!0});var jUr=s(AI);Epo=r(jUr,"IBertModel"),jUr.forEach(t),Cpo=r(LAe," (I-BERT model)"),LAe.forEach(t),wpo=i($),xp=n($,"LI",{});var xAe=s(xp);Vne=n(xAe,"STRONG",{});var DUr=s(Vne);Apo=r(DUr,"imagegpt"),DUr.forEach(t),ypo=r(xAe," \u2014 "),yI=n(xAe,"A",{href:!0});var GUr=s(yI);Lpo=r(GUr,"ImageGPTModel"),GUr.forEach(t),xpo=r(xAe," (ImageGPT model)"),xAe.forEach(t),$po=i($),$p=n($,"LI",{});var $Ae=s($p);Xne=n($Ae,"STRONG",{});var OUr=s(Xne);kpo=r(OUr,"layoutlm"),OUr.forEach(t),Spo=r($Ae," \u2014 "),LI=n($Ae,"A",{href:!0});var VUr=s(LI);Rpo=r(VUr,"LayoutLMModel"),VUr.forEach(t),Bpo=r($Ae," (LayoutLM model)"),$Ae.forEach(t),Ppo=i($),kp=n($,"LI",{});var kAe=s(kp);zne=n(kAe,"STRONG",{});var XUr=s(zne);Ipo=r(XUr,"layoutlmv2"),XUr.forEach(t),qpo=r(kAe," \u2014 "),xI=n(kAe,"A",{href:!0});var zUr=s(xI);Npo=r(zUr,"LayoutLMv2Model"),zUr.forEach(t),jpo=r(kAe," (LayoutLMv2 model)"),kAe.forEach(t),Dpo=i($),Sp=n($,"LI",{});var SAe=s(Sp);Qne=n(SAe,"STRONG",{});var QUr=s(Qne);Gpo=r(QUr,"led"),QUr.forEach(t),Opo=r(SAe," \u2014 "),$I=n(SAe,"A",{href:!0});var WUr=s($I);Vpo=r(WUr,"LEDModel"),WUr.forEach(t),Xpo=r(SAe," (LED model)"),SAe.forEach(t),zpo=i($),Rp=n($,"LI",{});var RAe=s(Rp);Wne=n(RAe,"STRONG",{});var HUr=s(Wne);Qpo=r(HUr,"longformer"),HUr.forEach(t),Wpo=r(RAe," \u2014 "),kI=n(RAe,"A",{href:!0});var UUr=s(kI);Hpo=r(UUr,"LongformerModel"),UUr.forEach(t),Upo=r(RAe," (Longformer model)"),RAe.forEach(t),Jpo=i($),Bp=n($,"LI",{});var BAe=s(Bp);Hne=n(BAe,"STRONG",{});var JUr=s(Hne);Ypo=r(JUr,"luke"),JUr.forEach(t),Kpo=r(BAe," \u2014 "),SI=n(BAe,"A",{href:!0});var YUr=s(SI);Zpo=r(YUr,"LukeModel"),YUr.forEach(t),euo=r(BAe," (LUKE model)"),BAe.forEach(t),ouo=i($),Pp=n($,"LI",{});var PAe=s(Pp);Une=n(PAe,"STRONG",{});var KUr=s(Une);ruo=r(KUr,"lxmert"),KUr.forEach(t),tuo=r(PAe," \u2014 "),RI=n(PAe,"A",{href:!0});var ZUr=s(RI);auo=r(ZUr,"LxmertModel"),ZUr.forEach(t),nuo=r(PAe," (LXMERT model)"),PAe.forEach(t),suo=i($),Ip=n($,"LI",{});var IAe=s(Ip);Jne=n(IAe,"STRONG",{});var eJr=s(Jne);luo=r(eJr,"m2m_100"),eJr.forEach(t),iuo=r(IAe," \u2014 "),BI=n(IAe,"A",{href:!0});var oJr=s(BI);duo=r(oJr,"M2M100Model"),oJr.forEach(t),cuo=r(IAe," (M2M100 model)"),IAe.forEach(t),fuo=i($),qp=n($,"LI",{});var qAe=s(qp);Yne=n(qAe,"STRONG",{});var rJr=s(Yne);muo=r(rJr,"marian"),rJr.forEach(t),guo=r(qAe," \u2014 "),PI=n(qAe,"A",{href:!0});var tJr=s(PI);huo=r(tJr,"MarianModel"),tJr.forEach(t),puo=r(qAe," (Marian model)"),qAe.forEach(t),uuo=i($),Np=n($,"LI",{});var NAe=s(Np);Kne=n(NAe,"STRONG",{});var aJr=s(Kne);_uo=r(aJr,"maskformer"),aJr.forEach(t),buo=r(NAe," \u2014 "),II=n(NAe,"A",{href:!0});var nJr=s(II);vuo=r(nJr,"MaskFormerModel"),nJr.forEach(t),Fuo=r(NAe," (MaskFormer model)"),NAe.forEach(t),Tuo=i($),jp=n($,"LI",{});var jAe=s(jp);Zne=n(jAe,"STRONG",{});var sJr=s(Zne);Muo=r(sJr,"mbart"),sJr.forEach(t),Euo=r(jAe," \u2014 "),qI=n(jAe,"A",{href:!0});var lJr=s(qI);Cuo=r(lJr,"MBartModel"),lJr.forEach(t),wuo=r(jAe," (mBART model)"),jAe.forEach(t),Auo=i($),Dp=n($,"LI",{});var DAe=s(Dp);ese=n(DAe,"STRONG",{});var iJr=s(ese);yuo=r(iJr,"megatron-bert"),iJr.forEach(t),Luo=r(DAe," \u2014 "),NI=n(DAe,"A",{href:!0});var dJr=s(NI);xuo=r(dJr,"MegatronBertModel"),dJr.forEach(t),$uo=r(DAe," (MegatronBert model)"),DAe.forEach(t),kuo=i($),Gp=n($,"LI",{});var GAe=s(Gp);ose=n(GAe,"STRONG",{});var cJr=s(ose);Suo=r(cJr,"mobilebert"),cJr.forEach(t),Ruo=r(GAe," \u2014 "),jI=n(GAe,"A",{href:!0});var fJr=s(jI);Buo=r(fJr,"MobileBertModel"),fJr.forEach(t),Puo=r(GAe," (MobileBERT model)"),GAe.forEach(t),Iuo=i($),Op=n($,"LI",{});var OAe=s(Op);rse=n(OAe,"STRONG",{});var mJr=s(rse);quo=r(mJr,"mpnet"),mJr.forEach(t),Nuo=r(OAe," \u2014 "),DI=n(OAe,"A",{href:!0});var gJr=s(DI);juo=r(gJr,"MPNetModel"),gJr.forEach(t),Duo=r(OAe," (MPNet model)"),OAe.forEach(t),Guo=i($),Vp=n($,"LI",{});var VAe=s(Vp);tse=n(VAe,"STRONG",{});var hJr=s(tse);Ouo=r(hJr,"mt5"),hJr.forEach(t),Vuo=r(VAe," \u2014 "),GI=n(VAe,"A",{href:!0});var pJr=s(GI);Xuo=r(pJr,"MT5Model"),pJr.forEach(t),zuo=r(VAe," (mT5 model)"),VAe.forEach(t),Quo=i($),Xp=n($,"LI",{});var XAe=s(Xp);ase=n(XAe,"STRONG",{});var uJr=s(ase);Wuo=r(uJr,"nystromformer"),uJr.forEach(t),Huo=r(XAe," \u2014 "),OI=n(XAe,"A",{href:!0});var _Jr=s(OI);Uuo=r(_Jr,"NystromformerModel"),_Jr.forEach(t),Juo=r(XAe," (Nystromformer model)"),XAe.forEach(t),Yuo=i($),zp=n($,"LI",{});var zAe=s(zp);nse=n(zAe,"STRONG",{});var bJr=s(nse);Kuo=r(bJr,"openai-gpt"),bJr.forEach(t),Zuo=r(zAe," \u2014 "),VI=n(zAe,"A",{href:!0});var vJr=s(VI);e_o=r(vJr,"OpenAIGPTModel"),vJr.forEach(t),o_o=r(zAe," (OpenAI GPT model)"),zAe.forEach(t),r_o=i($),Qp=n($,"LI",{});var QAe=s(Qp);sse=n(QAe,"STRONG",{});var FJr=s(sse);t_o=r(FJr,"opt"),FJr.forEach(t),a_o=r(QAe," \u2014 "),XI=n(QAe,"A",{href:!0});var TJr=s(XI);n_o=r(TJr,"OPTModel"),TJr.forEach(t),s_o=r(QAe," (OPT model)"),QAe.forEach(t),l_o=i($),Wp=n($,"LI",{});var WAe=s(Wp);lse=n(WAe,"STRONG",{});var MJr=s(lse);i_o=r(MJr,"pegasus"),MJr.forEach(t),d_o=r(WAe," \u2014 "),zI=n(WAe,"A",{href:!0});var EJr=s(zI);c_o=r(EJr,"PegasusModel"),EJr.forEach(t),f_o=r(WAe," (Pegasus model)"),WAe.forEach(t),m_o=i($),Hp=n($,"LI",{});var HAe=s(Hp);ise=n(HAe,"STRONG",{});var CJr=s(ise);g_o=r(CJr,"perceiver"),CJr.forEach(t),h_o=r(HAe," \u2014 "),QI=n(HAe,"A",{href:!0});var wJr=s(QI);p_o=r(wJr,"PerceiverModel"),wJr.forEach(t),u_o=r(HAe," (Perceiver model)"),HAe.forEach(t),__o=i($),Up=n($,"LI",{});var UAe=s(Up);dse=n(UAe,"STRONG",{});var AJr=s(dse);b_o=r(AJr,"plbart"),AJr.forEach(t),v_o=r(UAe," \u2014 "),WI=n(UAe,"A",{href:!0});var yJr=s(WI);F_o=r(yJr,"PLBartModel"),yJr.forEach(t),T_o=r(UAe," (PLBart model)"),UAe.forEach(t),M_o=i($),Jp=n($,"LI",{});var JAe=s(Jp);cse=n(JAe,"STRONG",{});var LJr=s(cse);E_o=r(LJr,"poolformer"),LJr.forEach(t),C_o=r(JAe," \u2014 "),HI=n(JAe,"A",{href:!0});var xJr=s(HI);w_o=r(xJr,"PoolFormerModel"),xJr.forEach(t),A_o=r(JAe," (PoolFormer model)"),JAe.forEach(t),y_o=i($),Yp=n($,"LI",{});var YAe=s(Yp);fse=n(YAe,"STRONG",{});var $Jr=s(fse);L_o=r($Jr,"prophetnet"),$Jr.forEach(t),x_o=r(YAe," \u2014 "),UI=n(YAe,"A",{href:!0});var kJr=s(UI);$_o=r(kJr,"ProphetNetModel"),kJr.forEach(t),k_o=r(YAe," (ProphetNet model)"),YAe.forEach(t),S_o=i($),Kp=n($,"LI",{});var KAe=s(Kp);mse=n(KAe,"STRONG",{});var SJr=s(mse);R_o=r(SJr,"qdqbert"),SJr.forEach(t),B_o=r(KAe," \u2014 "),JI=n(KAe,"A",{href:!0});var RJr=s(JI);P_o=r(RJr,"QDQBertModel"),RJr.forEach(t),I_o=r(KAe," (QDQBert model)"),KAe.forEach(t),q_o=i($),Zp=n($,"LI",{});var ZAe=s(Zp);gse=n(ZAe,"STRONG",{});var BJr=s(gse);N_o=r(BJr,"reformer"),BJr.forEach(t),j_o=r(ZAe," \u2014 "),YI=n(ZAe,"A",{href:!0});var PJr=s(YI);D_o=r(PJr,"ReformerModel"),PJr.forEach(t),G_o=r(ZAe," (Reformer model)"),ZAe.forEach(t),O_o=i($),eu=n($,"LI",{});var e0e=s(eu);hse=n(e0e,"STRONG",{});var IJr=s(hse);V_o=r(IJr,"regnet"),IJr.forEach(t),X_o=r(e0e," \u2014 "),KI=n(e0e,"A",{href:!0});var qJr=s(KI);z_o=r(qJr,"RegNetModel"),qJr.forEach(t),Q_o=r(e0e," (RegNet model)"),e0e.forEach(t),W_o=i($),ou=n($,"LI",{});var o0e=s(ou);pse=n(o0e,"STRONG",{});var NJr=s(pse);H_o=r(NJr,"rembert"),NJr.forEach(t),U_o=r(o0e," \u2014 "),ZI=n(o0e,"A",{href:!0});var jJr=s(ZI);J_o=r(jJr,"RemBertModel"),jJr.forEach(t),Y_o=r(o0e," (RemBERT model)"),o0e.forEach(t),K_o=i($),ru=n($,"LI",{});var r0e=s(ru);use=n(r0e,"STRONG",{});var DJr=s(use);Z_o=r(DJr,"resnet"),DJr.forEach(t),e1o=r(r0e," \u2014 "),eq=n(r0e,"A",{href:!0});var GJr=s(eq);o1o=r(GJr,"ResNetModel"),GJr.forEach(t),r1o=r(r0e," (ResNet model)"),r0e.forEach(t),t1o=i($),tu=n($,"LI",{});var t0e=s(tu);_se=n(t0e,"STRONG",{});var OJr=s(_se);a1o=r(OJr,"retribert"),OJr.forEach(t),n1o=r(t0e," \u2014 "),oq=n(t0e,"A",{href:!0});var VJr=s(oq);s1o=r(VJr,"RetriBertModel"),VJr.forEach(t),l1o=r(t0e," (RetriBERT model)"),t0e.forEach(t),i1o=i($),au=n($,"LI",{});var a0e=s(au);bse=n(a0e,"STRONG",{});var XJr=s(bse);d1o=r(XJr,"roberta"),XJr.forEach(t),c1o=r(a0e," \u2014 "),rq=n(a0e,"A",{href:!0});var zJr=s(rq);f1o=r(zJr,"RobertaModel"),zJr.forEach(t),m1o=r(a0e," (RoBERTa model)"),a0e.forEach(t),g1o=i($),nu=n($,"LI",{});var n0e=s(nu);vse=n(n0e,"STRONG",{});var QJr=s(vse);h1o=r(QJr,"roformer"),QJr.forEach(t),p1o=r(n0e," \u2014 "),tq=n(n0e,"A",{href:!0});var WJr=s(tq);u1o=r(WJr,"RoFormerModel"),WJr.forEach(t),_1o=r(n0e," (RoFormer model)"),n0e.forEach(t),b1o=i($),su=n($,"LI",{});var s0e=s(su);Fse=n(s0e,"STRONG",{});var HJr=s(Fse);v1o=r(HJr,"segformer"),HJr.forEach(t),F1o=r(s0e," \u2014 "),aq=n(s0e,"A",{href:!0});var UJr=s(aq);T1o=r(UJr,"SegformerModel"),UJr.forEach(t),M1o=r(s0e," (SegFormer model)"),s0e.forEach(t),E1o=i($),lu=n($,"LI",{});var l0e=s(lu);Tse=n(l0e,"STRONG",{});var JJr=s(Tse);C1o=r(JJr,"sew"),JJr.forEach(t),w1o=r(l0e," \u2014 "),nq=n(l0e,"A",{href:!0});var YJr=s(nq);A1o=r(YJr,"SEWModel"),YJr.forEach(t),y1o=r(l0e," (SEW model)"),l0e.forEach(t),L1o=i($),iu=n($,"LI",{});var i0e=s(iu);Mse=n(i0e,"STRONG",{});var KJr=s(Mse);x1o=r(KJr,"sew-d"),KJr.forEach(t),$1o=r(i0e," \u2014 "),sq=n(i0e,"A",{href:!0});var ZJr=s(sq);k1o=r(ZJr,"SEWDModel"),ZJr.forEach(t),S1o=r(i0e," (SEW-D model)"),i0e.forEach(t),R1o=i($),du=n($,"LI",{});var d0e=s(du);Ese=n(d0e,"STRONG",{});var eYr=s(Ese);B1o=r(eYr,"speech_to_text"),eYr.forEach(t),P1o=r(d0e," \u2014 "),lq=n(d0e,"A",{href:!0});var oYr=s(lq);I1o=r(oYr,"Speech2TextModel"),oYr.forEach(t),q1o=r(d0e," (Speech2Text model)"),d0e.forEach(t),N1o=i($),cu=n($,"LI",{});var c0e=s(cu);Cse=n(c0e,"STRONG",{});var rYr=s(Cse);j1o=r(rYr,"splinter"),rYr.forEach(t),D1o=r(c0e," \u2014 "),iq=n(c0e,"A",{href:!0});var tYr=s(iq);G1o=r(tYr,"SplinterModel"),tYr.forEach(t),O1o=r(c0e," (Splinter model)"),c0e.forEach(t),V1o=i($),fu=n($,"LI",{});var f0e=s(fu);wse=n(f0e,"STRONG",{});var aYr=s(wse);X1o=r(aYr,"squeezebert"),aYr.forEach(t),z1o=r(f0e," \u2014 "),dq=n(f0e,"A",{href:!0});var nYr=s(dq);Q1o=r(nYr,"SqueezeBertModel"),nYr.forEach(t),W1o=r(f0e," (SqueezeBERT model)"),f0e.forEach(t),H1o=i($),mu=n($,"LI",{});var m0e=s(mu);Ase=n(m0e,"STRONG",{});var sYr=s(Ase);U1o=r(sYr,"swin"),sYr.forEach(t),J1o=r(m0e," \u2014 "),cq=n(m0e,"A",{href:!0});var lYr=s(cq);Y1o=r(lYr,"SwinModel"),lYr.forEach(t),K1o=r(m0e," (Swin model)"),m0e.forEach(t),Z1o=i($),gu=n($,"LI",{});var g0e=s(gu);yse=n(g0e,"STRONG",{});var iYr=s(yse);ebo=r(iYr,"t5"),iYr.forEach(t),obo=r(g0e," \u2014 "),fq=n(g0e,"A",{href:!0});var dYr=s(fq);rbo=r(dYr,"T5Model"),dYr.forEach(t),tbo=r(g0e," (T5 model)"),g0e.forEach(t),abo=i($),hu=n($,"LI",{});var h0e=s(hu);Lse=n(h0e,"STRONG",{});var cYr=s(Lse);nbo=r(cYr,"tapas"),cYr.forEach(t),sbo=r(h0e," \u2014 "),mq=n(h0e,"A",{href:!0});var fYr=s(mq);lbo=r(fYr,"TapasModel"),fYr.forEach(t),ibo=r(h0e," (TAPAS model)"),h0e.forEach(t),dbo=i($),pu=n($,"LI",{});var p0e=s(pu);xse=n(p0e,"STRONG",{});var mYr=s(xse);cbo=r(mYr,"transfo-xl"),mYr.forEach(t),fbo=r(p0e," \u2014 "),gq=n(p0e,"A",{href:!0});var gYr=s(gq);mbo=r(gYr,"TransfoXLModel"),gYr.forEach(t),gbo=r(p0e," (Transformer-XL model)"),p0e.forEach(t),hbo=i($),uu=n($,"LI",{});var u0e=s(uu);$se=n(u0e,"STRONG",{});var hYr=s($se);pbo=r(hYr,"unispeech"),hYr.forEach(t),ubo=r(u0e," \u2014 "),hq=n(u0e,"A",{href:!0});var pYr=s(hq);_bo=r(pYr,"UniSpeechModel"),pYr.forEach(t),bbo=r(u0e," (UniSpeech model)"),u0e.forEach(t),vbo=i($),_u=n($,"LI",{});var _0e=s(_u);kse=n(_0e,"STRONG",{});var uYr=s(kse);Fbo=r(uYr,"unispeech-sat"),uYr.forEach(t),Tbo=r(_0e," \u2014 "),pq=n(_0e,"A",{href:!0});var _Yr=s(pq);Mbo=r(_Yr,"UniSpeechSatModel"),_Yr.forEach(t),Ebo=r(_0e," (UniSpeechSat model)"),_0e.forEach(t),Cbo=i($),bu=n($,"LI",{});var b0e=s(bu);Sse=n(b0e,"STRONG",{});var bYr=s(Sse);wbo=r(bYr,"van"),bYr.forEach(t),Abo=r(b0e," \u2014 "),uq=n(b0e,"A",{href:!0});var vYr=s(uq);ybo=r(vYr,"VanModel"),vYr.forEach(t),Lbo=r(b0e," (VAN model)"),b0e.forEach(t),xbo=i($),vu=n($,"LI",{});var v0e=s(vu);Rse=n(v0e,"STRONG",{});var FYr=s(Rse);$bo=r(FYr,"vilt"),FYr.forEach(t),kbo=r(v0e," \u2014 "),_q=n(v0e,"A",{href:!0});var TYr=s(_q);Sbo=r(TYr,"ViltModel"),TYr.forEach(t),Rbo=r(v0e," (ViLT model)"),v0e.forEach(t),Bbo=i($),Fu=n($,"LI",{});var F0e=s(Fu);Bse=n(F0e,"STRONG",{});var MYr=s(Bse);Pbo=r(MYr,"vision-text-dual-encoder"),MYr.forEach(t),Ibo=r(F0e," \u2014 "),bq=n(F0e,"A",{href:!0});var EYr=s(bq);qbo=r(EYr,"VisionTextDualEncoderModel"),EYr.forEach(t),Nbo=r(F0e," (VisionTextDualEncoder model)"),F0e.forEach(t),jbo=i($),Tu=n($,"LI",{});var T0e=s(Tu);Pse=n(T0e,"STRONG",{});var CYr=s(Pse);Dbo=r(CYr,"visual_bert"),CYr.forEach(t),Gbo=r(T0e," \u2014 "),vq=n(T0e,"A",{href:!0});var wYr=s(vq);Obo=r(wYr,"VisualBertModel"),wYr.forEach(t),Vbo=r(T0e," (VisualBert model)"),T0e.forEach(t),Xbo=i($),Mu=n($,"LI",{});var M0e=s(Mu);Ise=n(M0e,"STRONG",{});var AYr=s(Ise);zbo=r(AYr,"vit"),AYr.forEach(t),Qbo=r(M0e," \u2014 "),Fq=n(M0e,"A",{href:!0});var yYr=s(Fq);Wbo=r(yYr,"ViTModel"),yYr.forEach(t),Hbo=r(M0e," (ViT model)"),M0e.forEach(t),Ubo=i($),Eu=n($,"LI",{});var E0e=s(Eu);qse=n(E0e,"STRONG",{});var LYr=s(qse);Jbo=r(LYr,"vit_mae"),LYr.forEach(t),Ybo=r(E0e," \u2014 "),Tq=n(E0e,"A",{href:!0});var xYr=s(Tq);Kbo=r(xYr,"ViTMAEModel"),xYr.forEach(t),Zbo=r(E0e," (ViTMAE model)"),E0e.forEach(t),e4o=i($),Cu=n($,"LI",{});var C0e=s(Cu);Nse=n(C0e,"STRONG",{});var $Yr=s(Nse);o4o=r($Yr,"wav2vec2"),$Yr.forEach(t),r4o=r(C0e," \u2014 "),Mq=n(C0e,"A",{href:!0});var kYr=s(Mq);t4o=r(kYr,"Wav2Vec2Model"),kYr.forEach(t),a4o=r(C0e," (Wav2Vec2 model)"),C0e.forEach(t),n4o=i($),wu=n($,"LI",{});var w0e=s(wu);jse=n(w0e,"STRONG",{});var SYr=s(jse);s4o=r(SYr,"wavlm"),SYr.forEach(t),l4o=r(w0e," \u2014 "),Eq=n(w0e,"A",{href:!0});var RYr=s(Eq);i4o=r(RYr,"WavLMModel"),RYr.forEach(t),d4o=r(w0e," (WavLM model)"),w0e.forEach(t),c4o=i($),Au=n($,"LI",{});var A0e=s(Au);Dse=n(A0e,"STRONG",{});var BYr=s(Dse);f4o=r(BYr,"xglm"),BYr.forEach(t),m4o=r(A0e," \u2014 "),Cq=n(A0e,"A",{href:!0});var PYr=s(Cq);g4o=r(PYr,"XGLMModel"),PYr.forEach(t),h4o=r(A0e," (XGLM model)"),A0e.forEach(t),p4o=i($),yu=n($,"LI",{});var y0e=s(yu);Gse=n(y0e,"STRONG",{});var IYr=s(Gse);u4o=r(IYr,"xlm"),IYr.forEach(t),_4o=r(y0e," \u2014 "),wq=n(y0e,"A",{href:!0});var qYr=s(wq);b4o=r(qYr,"XLMModel"),qYr.forEach(t),v4o=r(y0e," (XLM model)"),y0e.forEach(t),F4o=i($),Lu=n($,"LI",{});var L0e=s(Lu);Ose=n(L0e,"STRONG",{});var NYr=s(Ose);T4o=r(NYr,"xlm-prophetnet"),NYr.forEach(t),M4o=r(L0e," \u2014 "),Aq=n(L0e,"A",{href:!0});var jYr=s(Aq);E4o=r(jYr,"XLMProphetNetModel"),jYr.forEach(t),C4o=r(L0e," (XLMProphetNet model)"),L0e.forEach(t),w4o=i($),xu=n($,"LI",{});var x0e=s(xu);Vse=n(x0e,"STRONG",{});var DYr=s(Vse);A4o=r(DYr,"xlm-roberta"),DYr.forEach(t),y4o=r(x0e," \u2014 "),yq=n(x0e,"A",{href:!0});var GYr=s(yq);L4o=r(GYr,"XLMRobertaModel"),GYr.forEach(t),x4o=r(x0e," (XLM-RoBERTa model)"),x0e.forEach(t),$4o=i($),$u=n($,"LI",{});var $0e=s($u);Xse=n($0e,"STRONG",{});var OYr=s(Xse);k4o=r(OYr,"xlm-roberta-xl"),OYr.forEach(t),S4o=r($0e," \u2014 "),Lq=n($0e,"A",{href:!0});var VYr=s(Lq);R4o=r(VYr,"XLMRobertaXLModel"),VYr.forEach(t),B4o=r($0e," (XLM-RoBERTa-XL model)"),$0e.forEach(t),P4o=i($),ku=n($,"LI",{});var k0e=s(ku);zse=n(k0e,"STRONG",{});var XYr=s(zse);I4o=r(XYr,"xlnet"),XYr.forEach(t),q4o=r(k0e," \u2014 "),xq=n(k0e,"A",{href:!0});var zYr=s(xq);N4o=r(zYr,"XLNetModel"),zYr.forEach(t),j4o=r(k0e," (XLNet model)"),k0e.forEach(t),D4o=i($),Su=n($,"LI",{});var S0e=s(Su);Qse=n(S0e,"STRONG",{});var QYr=s(Qse);G4o=r(QYr,"yolos"),QYr.forEach(t),O4o=r(S0e," \u2014 "),$q=n(S0e,"A",{href:!0});var WYr=s($q);V4o=r(WYr,"YolosModel"),WYr.forEach(t),X4o=r(S0e," (YOLOS model)"),S0e.forEach(t),z4o=i($),Ru=n($,"LI",{});var R0e=s(Ru);Wse=n(R0e,"STRONG",{});var HYr=s(Wse);Q4o=r(HYr,"yoso"),HYr.forEach(t),W4o=r(R0e," \u2014 "),kq=n(R0e,"A",{href:!0});var UYr=s(kq);H4o=r(UYr,"YosoModel"),UYr.forEach(t),U4o=r(R0e," (YOSO model)"),R0e.forEach(t),$.forEach(t),J4o=i(Zt),Bu=n(Zt,"P",{});var B0e=s(Bu);Y4o=r(B0e,"The model is set in evaluation mode by default using "),Hse=n(B0e,"CODE",{});var JYr=s(Hse);K4o=r(JYr,"model.eval()"),JYr.forEach(t),Z4o=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(B0e,"CODE",{});var YYr=s(Use);e2o=r(YYr,"model.train()"),YYr.forEach(t),B0e.forEach(t),o2o=i(Zt),T(Pu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),iIe=i(f),wi=n(f,"H2",{class:!0});var mNe=s(wi);Iu=n(mNe,"A",{id:!0,class:!0,href:!0});var KYr=s(Iu);Jse=n(KYr,"SPAN",{});var ZYr=s(Jse);T($y.$$.fragment,ZYr),ZYr.forEach(t),KYr.forEach(t),r2o=i(mNe),Yse=n(mNe,"SPAN",{});var eKr=s(Yse);t2o=r(eKr,"AutoModelForPreTraining"),eKr.forEach(t),mNe.forEach(t),dIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(ky.$$.fragment,Gs),a2o=i(Gs),Ai=n(Gs,"P",{});var gK=s(Ai);n2o=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sq=n(gK,"A",{href:!0});var oKr=s(Sq);s2o=r(oKr,"from_pretrained()"),oKr.forEach(t),l2o=r(gK," class method or the "),Rq=n(gK,"A",{href:!0});var rKr=s(Rq);i2o=r(rKr,"from_config()"),rKr.forEach(t),d2o=r(gK,` class
method.`),gK.forEach(t),c2o=i(Gs),Sy=n(Gs,"P",{});var gNe=s(Sy);f2o=r(gNe,"This class cannot be instantiated directly using "),Kse=n(gNe,"CODE",{});var tKr=s(Kse);m2o=r(tKr,"__init__()"),tKr.forEach(t),g2o=r(gNe," (throws an error)."),gNe.forEach(t),h2o=i(Gs),rt=n(Gs,"DIV",{class:!0});var tA=s(rt);T(Ry.$$.fragment,tA),p2o=i(tA),Zse=n(tA,"P",{});var aKr=s(Zse);u2o=r(aKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aKr.forEach(t),_2o=i(tA),yi=n(tA,"P",{});var hK=s(yi);b2o=r(hK,`Note:
Loading a model from its configuration file does `),ele=n(hK,"STRONG",{});var nKr=s(ele);v2o=r(nKr,"not"),nKr.forEach(t),F2o=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=n(hK,"A",{href:!0});var sKr=s(Bq);T2o=r(sKr,"from_pretrained()"),sKr.forEach(t),M2o=r(hK," to load the model weights."),hK.forEach(t),E2o=i(tA),T(qu.$$.fragment,tA),tA.forEach(t),C2o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(By.$$.fragment,ea),w2o=i(ea),ole=n(ea,"P",{});var lKr=s(ole);A2o=r(lKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lKr.forEach(t),y2o=i(ea),ya=n(ea,"P",{});var aA=s(ya);L2o=r(aA,"The model class to instantiate is selected based on the "),rle=n(aA,"CODE",{});var iKr=s(rle);x2o=r(iKr,"model_type"),iKr.forEach(t),$2o=r(aA,` property of the config object (either
passed as an argument or loaded from `),tle=n(aA,"CODE",{});var dKr=s(tle);k2o=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),S2o=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ale=n(aA,"CODE",{});var cKr=s(ale);R2o=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),B2o=r(aA,":"),aA.forEach(t),P2o=i(ea),G=n(ea,"UL",{});var V=s(G);Nu=n(V,"LI",{});var P0e=s(Nu);nle=n(P0e,"STRONG",{});var fKr=s(nle);I2o=r(fKr,"albert"),fKr.forEach(t),q2o=r(P0e," \u2014 "),Pq=n(P0e,"A",{href:!0});var mKr=s(Pq);N2o=r(mKr,"AlbertForPreTraining"),mKr.forEach(t),j2o=r(P0e," (ALBERT model)"),P0e.forEach(t),D2o=i(V),ju=n(V,"LI",{});var I0e=s(ju);sle=n(I0e,"STRONG",{});var gKr=s(sle);G2o=r(gKr,"bart"),gKr.forEach(t),O2o=r(I0e," \u2014 "),Iq=n(I0e,"A",{href:!0});var hKr=s(Iq);V2o=r(hKr,"BartForConditionalGeneration"),hKr.forEach(t),X2o=r(I0e," (BART model)"),I0e.forEach(t),z2o=i(V),Du=n(V,"LI",{});var q0e=s(Du);lle=n(q0e,"STRONG",{});var pKr=s(lle);Q2o=r(pKr,"bert"),pKr.forEach(t),W2o=r(q0e," \u2014 "),qq=n(q0e,"A",{href:!0});var uKr=s(qq);H2o=r(uKr,"BertForPreTraining"),uKr.forEach(t),U2o=r(q0e," (BERT model)"),q0e.forEach(t),J2o=i(V),Gu=n(V,"LI",{});var N0e=s(Gu);ile=n(N0e,"STRONG",{});var _Kr=s(ile);Y2o=r(_Kr,"big_bird"),_Kr.forEach(t),K2o=r(N0e," \u2014 "),Nq=n(N0e,"A",{href:!0});var bKr=s(Nq);Z2o=r(bKr,"BigBirdForPreTraining"),bKr.forEach(t),e5o=r(N0e," (BigBird model)"),N0e.forEach(t),o5o=i(V),Ou=n(V,"LI",{});var j0e=s(Ou);dle=n(j0e,"STRONG",{});var vKr=s(dle);r5o=r(vKr,"camembert"),vKr.forEach(t),t5o=r(j0e," \u2014 "),jq=n(j0e,"A",{href:!0});var FKr=s(jq);a5o=r(FKr,"CamembertForMaskedLM"),FKr.forEach(t),n5o=r(j0e," (CamemBERT model)"),j0e.forEach(t),s5o=i(V),Vu=n(V,"LI",{});var D0e=s(Vu);cle=n(D0e,"STRONG",{});var TKr=s(cle);l5o=r(TKr,"ctrl"),TKr.forEach(t),i5o=r(D0e," \u2014 "),Dq=n(D0e,"A",{href:!0});var MKr=s(Dq);d5o=r(MKr,"CTRLLMHeadModel"),MKr.forEach(t),c5o=r(D0e," (CTRL model)"),D0e.forEach(t),f5o=i(V),Xu=n(V,"LI",{});var G0e=s(Xu);fle=n(G0e,"STRONG",{});var EKr=s(fle);m5o=r(EKr,"data2vec-text"),EKr.forEach(t),g5o=r(G0e," \u2014 "),Gq=n(G0e,"A",{href:!0});var CKr=s(Gq);h5o=r(CKr,"Data2VecTextForMaskedLM"),CKr.forEach(t),p5o=r(G0e," (Data2VecText model)"),G0e.forEach(t),u5o=i(V),zu=n(V,"LI",{});var O0e=s(zu);mle=n(O0e,"STRONG",{});var wKr=s(mle);_5o=r(wKr,"deberta"),wKr.forEach(t),b5o=r(O0e," \u2014 "),Oq=n(O0e,"A",{href:!0});var AKr=s(Oq);v5o=r(AKr,"DebertaForMaskedLM"),AKr.forEach(t),F5o=r(O0e," (DeBERTa model)"),O0e.forEach(t),T5o=i(V),Qu=n(V,"LI",{});var V0e=s(Qu);gle=n(V0e,"STRONG",{});var yKr=s(gle);M5o=r(yKr,"deberta-v2"),yKr.forEach(t),E5o=r(V0e," \u2014 "),Vq=n(V0e,"A",{href:!0});var LKr=s(Vq);C5o=r(LKr,"DebertaV2ForMaskedLM"),LKr.forEach(t),w5o=r(V0e," (DeBERTa-v2 model)"),V0e.forEach(t),A5o=i(V),Wu=n(V,"LI",{});var X0e=s(Wu);hle=n(X0e,"STRONG",{});var xKr=s(hle);y5o=r(xKr,"distilbert"),xKr.forEach(t),L5o=r(X0e," \u2014 "),Xq=n(X0e,"A",{href:!0});var $Kr=s(Xq);x5o=r($Kr,"DistilBertForMaskedLM"),$Kr.forEach(t),$5o=r(X0e," (DistilBERT model)"),X0e.forEach(t),k5o=i(V),Hu=n(V,"LI",{});var z0e=s(Hu);ple=n(z0e,"STRONG",{});var kKr=s(ple);S5o=r(kKr,"electra"),kKr.forEach(t),R5o=r(z0e," \u2014 "),zq=n(z0e,"A",{href:!0});var SKr=s(zq);B5o=r(SKr,"ElectraForPreTraining"),SKr.forEach(t),P5o=r(z0e," (ELECTRA model)"),z0e.forEach(t),I5o=i(V),Uu=n(V,"LI",{});var Q0e=s(Uu);ule=n(Q0e,"STRONG",{});var RKr=s(ule);q5o=r(RKr,"flaubert"),RKr.forEach(t),N5o=r(Q0e," \u2014 "),Qq=n(Q0e,"A",{href:!0});var BKr=s(Qq);j5o=r(BKr,"FlaubertWithLMHeadModel"),BKr.forEach(t),D5o=r(Q0e," (FlauBERT model)"),Q0e.forEach(t),G5o=i(V),Ju=n(V,"LI",{});var W0e=s(Ju);_le=n(W0e,"STRONG",{});var PKr=s(_le);O5o=r(PKr,"flava"),PKr.forEach(t),V5o=r(W0e," \u2014 "),Wq=n(W0e,"A",{href:!0});var IKr=s(Wq);X5o=r(IKr,"FlavaForPreTraining"),IKr.forEach(t),z5o=r(W0e," (Flava model)"),W0e.forEach(t),Q5o=i(V),Yu=n(V,"LI",{});var H0e=s(Yu);ble=n(H0e,"STRONG",{});var qKr=s(ble);W5o=r(qKr,"fnet"),qKr.forEach(t),H5o=r(H0e," \u2014 "),Hq=n(H0e,"A",{href:!0});var NKr=s(Hq);U5o=r(NKr,"FNetForPreTraining"),NKr.forEach(t),J5o=r(H0e," (FNet model)"),H0e.forEach(t),Y5o=i(V),Ku=n(V,"LI",{});var U0e=s(Ku);vle=n(U0e,"STRONG",{});var jKr=s(vle);K5o=r(jKr,"fsmt"),jKr.forEach(t),Z5o=r(U0e," \u2014 "),Uq=n(U0e,"A",{href:!0});var DKr=s(Uq);e3o=r(DKr,"FSMTForConditionalGeneration"),DKr.forEach(t),o3o=r(U0e," (FairSeq Machine-Translation model)"),U0e.forEach(t),r3o=i(V),Zu=n(V,"LI",{});var J0e=s(Zu);Fle=n(J0e,"STRONG",{});var GKr=s(Fle);t3o=r(GKr,"funnel"),GKr.forEach(t),a3o=r(J0e," \u2014 "),Jq=n(J0e,"A",{href:!0});var OKr=s(Jq);n3o=r(OKr,"FunnelForPreTraining"),OKr.forEach(t),s3o=r(J0e," (Funnel Transformer model)"),J0e.forEach(t),l3o=i(V),e_=n(V,"LI",{});var Y0e=s(e_);Tle=n(Y0e,"STRONG",{});var VKr=s(Tle);i3o=r(VKr,"gpt2"),VKr.forEach(t),d3o=r(Y0e," \u2014 "),Yq=n(Y0e,"A",{href:!0});var XKr=s(Yq);c3o=r(XKr,"GPT2LMHeadModel"),XKr.forEach(t),f3o=r(Y0e," (OpenAI GPT-2 model)"),Y0e.forEach(t),m3o=i(V),o_=n(V,"LI",{});var K0e=s(o_);Mle=n(K0e,"STRONG",{});var zKr=s(Mle);g3o=r(zKr,"ibert"),zKr.forEach(t),h3o=r(K0e," \u2014 "),Kq=n(K0e,"A",{href:!0});var QKr=s(Kq);p3o=r(QKr,"IBertForMaskedLM"),QKr.forEach(t),u3o=r(K0e," (I-BERT model)"),K0e.forEach(t),_3o=i(V),r_=n(V,"LI",{});var Z0e=s(r_);Ele=n(Z0e,"STRONG",{});var WKr=s(Ele);b3o=r(WKr,"layoutlm"),WKr.forEach(t),v3o=r(Z0e," \u2014 "),Zq=n(Z0e,"A",{href:!0});var HKr=s(Zq);F3o=r(HKr,"LayoutLMForMaskedLM"),HKr.forEach(t),T3o=r(Z0e," (LayoutLM model)"),Z0e.forEach(t),M3o=i(V),t_=n(V,"LI",{});var eye=s(t_);Cle=n(eye,"STRONG",{});var UKr=s(Cle);E3o=r(UKr,"longformer"),UKr.forEach(t),C3o=r(eye," \u2014 "),eN=n(eye,"A",{href:!0});var JKr=s(eN);w3o=r(JKr,"LongformerForMaskedLM"),JKr.forEach(t),A3o=r(eye," (Longformer model)"),eye.forEach(t),y3o=i(V),a_=n(V,"LI",{});var oye=s(a_);wle=n(oye,"STRONG",{});var YKr=s(wle);L3o=r(YKr,"lxmert"),YKr.forEach(t),x3o=r(oye," \u2014 "),oN=n(oye,"A",{href:!0});var KKr=s(oN);$3o=r(KKr,"LxmertForPreTraining"),KKr.forEach(t),k3o=r(oye," (LXMERT model)"),oye.forEach(t),S3o=i(V),n_=n(V,"LI",{});var rye=s(n_);Ale=n(rye,"STRONG",{});var ZKr=s(Ale);R3o=r(ZKr,"megatron-bert"),ZKr.forEach(t),B3o=r(rye," \u2014 "),rN=n(rye,"A",{href:!0});var eZr=s(rN);P3o=r(eZr,"MegatronBertForPreTraining"),eZr.forEach(t),I3o=r(rye," (MegatronBert model)"),rye.forEach(t),q3o=i(V),s_=n(V,"LI",{});var tye=s(s_);yle=n(tye,"STRONG",{});var oZr=s(yle);N3o=r(oZr,"mobilebert"),oZr.forEach(t),j3o=r(tye," \u2014 "),tN=n(tye,"A",{href:!0});var rZr=s(tN);D3o=r(rZr,"MobileBertForPreTraining"),rZr.forEach(t),G3o=r(tye," (MobileBERT model)"),tye.forEach(t),O3o=i(V),l_=n(V,"LI",{});var aye=s(l_);Lle=n(aye,"STRONG",{});var tZr=s(Lle);V3o=r(tZr,"mpnet"),tZr.forEach(t),X3o=r(aye," \u2014 "),aN=n(aye,"A",{href:!0});var aZr=s(aN);z3o=r(aZr,"MPNetForMaskedLM"),aZr.forEach(t),Q3o=r(aye," (MPNet model)"),aye.forEach(t),W3o=i(V),i_=n(V,"LI",{});var nye=s(i_);xle=n(nye,"STRONG",{});var nZr=s(xle);H3o=r(nZr,"openai-gpt"),nZr.forEach(t),U3o=r(nye," \u2014 "),nN=n(nye,"A",{href:!0});var sZr=s(nN);J3o=r(sZr,"OpenAIGPTLMHeadModel"),sZr.forEach(t),Y3o=r(nye," (OpenAI GPT model)"),nye.forEach(t),K3o=i(V),d_=n(V,"LI",{});var sye=s(d_);$le=n(sye,"STRONG",{});var lZr=s($le);Z3o=r(lZr,"retribert"),lZr.forEach(t),evo=r(sye," \u2014 "),sN=n(sye,"A",{href:!0});var iZr=s(sN);ovo=r(iZr,"RetriBertModel"),iZr.forEach(t),rvo=r(sye," (RetriBERT model)"),sye.forEach(t),tvo=i(V),c_=n(V,"LI",{});var lye=s(c_);kle=n(lye,"STRONG",{});var dZr=s(kle);avo=r(dZr,"roberta"),dZr.forEach(t),nvo=r(lye," \u2014 "),lN=n(lye,"A",{href:!0});var cZr=s(lN);svo=r(cZr,"RobertaForMaskedLM"),cZr.forEach(t),lvo=r(lye," (RoBERTa model)"),lye.forEach(t),ivo=i(V),f_=n(V,"LI",{});var iye=s(f_);Sle=n(iye,"STRONG",{});var fZr=s(Sle);dvo=r(fZr,"squeezebert"),fZr.forEach(t),cvo=r(iye," \u2014 "),iN=n(iye,"A",{href:!0});var mZr=s(iN);fvo=r(mZr,"SqueezeBertForMaskedLM"),mZr.forEach(t),mvo=r(iye," (SqueezeBERT model)"),iye.forEach(t),gvo=i(V),m_=n(V,"LI",{});var dye=s(m_);Rle=n(dye,"STRONG",{});var gZr=s(Rle);hvo=r(gZr,"t5"),gZr.forEach(t),pvo=r(dye," \u2014 "),dN=n(dye,"A",{href:!0});var hZr=s(dN);uvo=r(hZr,"T5ForConditionalGeneration"),hZr.forEach(t),_vo=r(dye," (T5 model)"),dye.forEach(t),bvo=i(V),g_=n(V,"LI",{});var cye=s(g_);Ble=n(cye,"STRONG",{});var pZr=s(Ble);vvo=r(pZr,"tapas"),pZr.forEach(t),Fvo=r(cye," \u2014 "),cN=n(cye,"A",{href:!0});var uZr=s(cN);Tvo=r(uZr,"TapasForMaskedLM"),uZr.forEach(t),Mvo=r(cye," (TAPAS model)"),cye.forEach(t),Evo=i(V),h_=n(V,"LI",{});var fye=s(h_);Ple=n(fye,"STRONG",{});var _Zr=s(Ple);Cvo=r(_Zr,"transfo-xl"),_Zr.forEach(t),wvo=r(fye," \u2014 "),fN=n(fye,"A",{href:!0});var bZr=s(fN);Avo=r(bZr,"TransfoXLLMHeadModel"),bZr.forEach(t),yvo=r(fye," (Transformer-XL model)"),fye.forEach(t),Lvo=i(V),p_=n(V,"LI",{});var mye=s(p_);Ile=n(mye,"STRONG",{});var vZr=s(Ile);xvo=r(vZr,"unispeech"),vZr.forEach(t),$vo=r(mye," \u2014 "),mN=n(mye,"A",{href:!0});var FZr=s(mN);kvo=r(FZr,"UniSpeechForPreTraining"),FZr.forEach(t),Svo=r(mye," (UniSpeech model)"),mye.forEach(t),Rvo=i(V),u_=n(V,"LI",{});var gye=s(u_);qle=n(gye,"STRONG",{});var TZr=s(qle);Bvo=r(TZr,"unispeech-sat"),TZr.forEach(t),Pvo=r(gye," \u2014 "),gN=n(gye,"A",{href:!0});var MZr=s(gN);Ivo=r(MZr,"UniSpeechSatForPreTraining"),MZr.forEach(t),qvo=r(gye," (UniSpeechSat model)"),gye.forEach(t),Nvo=i(V),__=n(V,"LI",{});var hye=s(__);Nle=n(hye,"STRONG",{});var EZr=s(Nle);jvo=r(EZr,"visual_bert"),EZr.forEach(t),Dvo=r(hye," \u2014 "),hN=n(hye,"A",{href:!0});var CZr=s(hN);Gvo=r(CZr,"VisualBertForPreTraining"),CZr.forEach(t),Ovo=r(hye," (VisualBert model)"),hye.forEach(t),Vvo=i(V),b_=n(V,"LI",{});var pye=s(b_);jle=n(pye,"STRONG",{});var wZr=s(jle);Xvo=r(wZr,"vit_mae"),wZr.forEach(t),zvo=r(pye," \u2014 "),pN=n(pye,"A",{href:!0});var AZr=s(pN);Qvo=r(AZr,"ViTMAEForPreTraining"),AZr.forEach(t),Wvo=r(pye," (ViTMAE model)"),pye.forEach(t),Hvo=i(V),v_=n(V,"LI",{});var uye=s(v_);Dle=n(uye,"STRONG",{});var yZr=s(Dle);Uvo=r(yZr,"wav2vec2"),yZr.forEach(t),Jvo=r(uye," \u2014 "),uN=n(uye,"A",{href:!0});var LZr=s(uN);Yvo=r(LZr,"Wav2Vec2ForPreTraining"),LZr.forEach(t),Kvo=r(uye," (Wav2Vec2 model)"),uye.forEach(t),Zvo=i(V),F_=n(V,"LI",{});var _ye=s(F_);Gle=n(_ye,"STRONG",{});var xZr=s(Gle);eFo=r(xZr,"xlm"),xZr.forEach(t),oFo=r(_ye," \u2014 "),_N=n(_ye,"A",{href:!0});var $Zr=s(_N);rFo=r($Zr,"XLMWithLMHeadModel"),$Zr.forEach(t),tFo=r(_ye," (XLM model)"),_ye.forEach(t),aFo=i(V),T_=n(V,"LI",{});var bye=s(T_);Ole=n(bye,"STRONG",{});var kZr=s(Ole);nFo=r(kZr,"xlm-roberta"),kZr.forEach(t),sFo=r(bye," \u2014 "),bN=n(bye,"A",{href:!0});var SZr=s(bN);lFo=r(SZr,"XLMRobertaForMaskedLM"),SZr.forEach(t),iFo=r(bye," (XLM-RoBERTa model)"),bye.forEach(t),dFo=i(V),M_=n(V,"LI",{});var vye=s(M_);Vle=n(vye,"STRONG",{});var RZr=s(Vle);cFo=r(RZr,"xlm-roberta-xl"),RZr.forEach(t),fFo=r(vye," \u2014 "),vN=n(vye,"A",{href:!0});var BZr=s(vN);mFo=r(BZr,"XLMRobertaXLForMaskedLM"),BZr.forEach(t),gFo=r(vye," (XLM-RoBERTa-XL model)"),vye.forEach(t),hFo=i(V),E_=n(V,"LI",{});var Fye=s(E_);Xle=n(Fye,"STRONG",{});var PZr=s(Xle);pFo=r(PZr,"xlnet"),PZr.forEach(t),uFo=r(Fye," \u2014 "),FN=n(Fye,"A",{href:!0});var IZr=s(FN);_Fo=r(IZr,"XLNetLMHeadModel"),IZr.forEach(t),bFo=r(Fye," (XLNet model)"),Fye.forEach(t),V.forEach(t),vFo=i(ea),C_=n(ea,"P",{});var Tye=s(C_);FFo=r(Tye,"The model is set in evaluation mode by default using "),zle=n(Tye,"CODE",{});var qZr=s(zle);TFo=r(qZr,"model.eval()"),qZr.forEach(t),MFo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=n(Tye,"CODE",{});var NZr=s(Qle);EFo=r(NZr,"model.train()"),NZr.forEach(t),Tye.forEach(t),CFo=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),cIe=i(f),Li=n(f,"H2",{class:!0});var hNe=s(Li);A_=n(hNe,"A",{id:!0,class:!0,href:!0});var jZr=s(A_);Wle=n(jZr,"SPAN",{});var DZr=s(Wle);T(Py.$$.fragment,DZr),DZr.forEach(t),jZr.forEach(t),wFo=i(hNe),Hle=n(hNe,"SPAN",{});var GZr=s(Hle);AFo=r(GZr,"AutoModelForCausalLM"),GZr.forEach(t),hNe.forEach(t),fIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(Iy.$$.fragment,Os),yFo=i(Os),xi=n(Os,"P",{});var pK=s(xi);LFo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TN=n(pK,"A",{href:!0});var OZr=s(TN);xFo=r(OZr,"from_pretrained()"),OZr.forEach(t),$Fo=r(pK," class method or the "),MN=n(pK,"A",{href:!0});var VZr=s(MN);kFo=r(VZr,"from_config()"),VZr.forEach(t),SFo=r(pK,` class
method.`),pK.forEach(t),RFo=i(Os),qy=n(Os,"P",{});var pNe=s(qy);BFo=r(pNe,"This class cannot be instantiated directly using "),Ule=n(pNe,"CODE",{});var XZr=s(Ule);PFo=r(XZr,"__init__()"),XZr.forEach(t),IFo=r(pNe," (throws an error)."),pNe.forEach(t),qFo=i(Os),tt=n(Os,"DIV",{class:!0});var nA=s(tt);T(Ny.$$.fragment,nA),NFo=i(nA),Jle=n(nA,"P",{});var zZr=s(Jle);jFo=r(zZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zZr.forEach(t),DFo=i(nA),$i=n(nA,"P",{});var uK=s($i);GFo=r(uK,`Note:
Loading a model from its configuration file does `),Yle=n(uK,"STRONG",{});var QZr=s(Yle);OFo=r(QZr,"not"),QZr.forEach(t),VFo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=n(uK,"A",{href:!0});var WZr=s(EN);XFo=r(WZr,"from_pretrained()"),WZr.forEach(t),zFo=r(uK," to load the model weights."),uK.forEach(t),QFo=i(nA),T(y_.$$.fragment,nA),nA.forEach(t),WFo=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(jy.$$.fragment,oa),HFo=i(oa),Kle=n(oa,"P",{});var HZr=s(Kle);UFo=r(HZr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HZr.forEach(t),JFo=i(oa),La=n(oa,"P",{});var sA=s(La);YFo=r(sA,"The model class to instantiate is selected based on the "),Zle=n(sA,"CODE",{});var UZr=s(Zle);KFo=r(UZr,"model_type"),UZr.forEach(t),ZFo=r(sA,` property of the config object (either
passed as an argument or loaded from `),eie=n(sA,"CODE",{});var JZr=s(eie);e6o=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),o6o=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=n(sA,"CODE",{});var YZr=s(oie);r6o=r(YZr,"pretrained_model_name_or_path"),YZr.forEach(t),t6o=r(sA,":"),sA.forEach(t),a6o=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var Mye=s(L_);rie=n(Mye,"STRONG",{});var KZr=s(rie);n6o=r(KZr,"bart"),KZr.forEach(t),s6o=r(Mye," \u2014 "),CN=n(Mye,"A",{href:!0});var ZZr=s(CN);l6o=r(ZZr,"BartForCausalLM"),ZZr.forEach(t),i6o=r(Mye," (BART model)"),Mye.forEach(t),d6o=i(W),x_=n(W,"LI",{});var Eye=s(x_);tie=n(Eye,"STRONG",{});var eet=s(tie);c6o=r(eet,"bert"),eet.forEach(t),f6o=r(Eye," \u2014 "),wN=n(Eye,"A",{href:!0});var oet=s(wN);m6o=r(oet,"BertLMHeadModel"),oet.forEach(t),g6o=r(Eye," (BERT model)"),Eye.forEach(t),h6o=i(W),$_=n(W,"LI",{});var Cye=s($_);aie=n(Cye,"STRONG",{});var ret=s(aie);p6o=r(ret,"bert-generation"),ret.forEach(t),u6o=r(Cye," \u2014 "),AN=n(Cye,"A",{href:!0});var tet=s(AN);_6o=r(tet,"BertGenerationDecoder"),tet.forEach(t),b6o=r(Cye," (Bert Generation model)"),Cye.forEach(t),v6o=i(W),k_=n(W,"LI",{});var wye=s(k_);nie=n(wye,"STRONG",{});var aet=s(nie);F6o=r(aet,"big_bird"),aet.forEach(t),T6o=r(wye," \u2014 "),yN=n(wye,"A",{href:!0});var net=s(yN);M6o=r(net,"BigBirdForCausalLM"),net.forEach(t),E6o=r(wye," (BigBird model)"),wye.forEach(t),C6o=i(W),S_=n(W,"LI",{});var Aye=s(S_);sie=n(Aye,"STRONG",{});var set=s(sie);w6o=r(set,"bigbird_pegasus"),set.forEach(t),A6o=r(Aye," \u2014 "),LN=n(Aye,"A",{href:!0});var iet=s(LN);y6o=r(iet,"BigBirdPegasusForCausalLM"),iet.forEach(t),L6o=r(Aye," (BigBirdPegasus model)"),Aye.forEach(t),x6o=i(W),R_=n(W,"LI",{});var yye=s(R_);lie=n(yye,"STRONG",{});var det=s(lie);$6o=r(det,"blenderbot"),det.forEach(t),k6o=r(yye," \u2014 "),xN=n(yye,"A",{href:!0});var cet=s(xN);S6o=r(cet,"BlenderbotForCausalLM"),cet.forEach(t),R6o=r(yye," (Blenderbot model)"),yye.forEach(t),B6o=i(W),B_=n(W,"LI",{});var Lye=s(B_);iie=n(Lye,"STRONG",{});var fet=s(iie);P6o=r(fet,"blenderbot-small"),fet.forEach(t),I6o=r(Lye," \u2014 "),$N=n(Lye,"A",{href:!0});var met=s($N);q6o=r(met,"BlenderbotSmallForCausalLM"),met.forEach(t),N6o=r(Lye," (BlenderbotSmall model)"),Lye.forEach(t),j6o=i(W),P_=n(W,"LI",{});var xye=s(P_);die=n(xye,"STRONG",{});var get=s(die);D6o=r(get,"camembert"),get.forEach(t),G6o=r(xye," \u2014 "),kN=n(xye,"A",{href:!0});var het=s(kN);O6o=r(het,"CamembertForCausalLM"),het.forEach(t),V6o=r(xye," (CamemBERT model)"),xye.forEach(t),X6o=i(W),I_=n(W,"LI",{});var $ye=s(I_);cie=n($ye,"STRONG",{});var pet=s(cie);z6o=r(pet,"ctrl"),pet.forEach(t),Q6o=r($ye," \u2014 "),SN=n($ye,"A",{href:!0});var uet=s(SN);W6o=r(uet,"CTRLLMHeadModel"),uet.forEach(t),H6o=r($ye," (CTRL model)"),$ye.forEach(t),U6o=i(W),q_=n(W,"LI",{});var kye=s(q_);fie=n(kye,"STRONG",{});var _et=s(fie);J6o=r(_et,"data2vec-text"),_et.forEach(t),Y6o=r(kye," \u2014 "),RN=n(kye,"A",{href:!0});var bet=s(RN);K6o=r(bet,"Data2VecTextForCausalLM"),bet.forEach(t),Z6o=r(kye," (Data2VecText model)"),kye.forEach(t),eTo=i(W),N_=n(W,"LI",{});var Sye=s(N_);mie=n(Sye,"STRONG",{});var vet=s(mie);oTo=r(vet,"electra"),vet.forEach(t),rTo=r(Sye," \u2014 "),BN=n(Sye,"A",{href:!0});var Fet=s(BN);tTo=r(Fet,"ElectraForCausalLM"),Fet.forEach(t),aTo=r(Sye," (ELECTRA model)"),Sye.forEach(t),nTo=i(W),j_=n(W,"LI",{});var Rye=s(j_);gie=n(Rye,"STRONG",{});var Tet=s(gie);sTo=r(Tet,"gpt2"),Tet.forEach(t),lTo=r(Rye," \u2014 "),PN=n(Rye,"A",{href:!0});var Met=s(PN);iTo=r(Met,"GPT2LMHeadModel"),Met.forEach(t),dTo=r(Rye," (OpenAI GPT-2 model)"),Rye.forEach(t),cTo=i(W),D_=n(W,"LI",{});var Bye=s(D_);hie=n(Bye,"STRONG",{});var Eet=s(hie);fTo=r(Eet,"gpt_neo"),Eet.forEach(t),mTo=r(Bye," \u2014 "),IN=n(Bye,"A",{href:!0});var Cet=s(IN);gTo=r(Cet,"GPTNeoForCausalLM"),Cet.forEach(t),hTo=r(Bye," (GPT Neo model)"),Bye.forEach(t),pTo=i(W),G_=n(W,"LI",{});var Pye=s(G_);pie=n(Pye,"STRONG",{});var wet=s(pie);uTo=r(wet,"gptj"),wet.forEach(t),_To=r(Pye," \u2014 "),qN=n(Pye,"A",{href:!0});var Aet=s(qN);bTo=r(Aet,"GPTJForCausalLM"),Aet.forEach(t),vTo=r(Pye," (GPT-J model)"),Pye.forEach(t),FTo=i(W),O_=n(W,"LI",{});var Iye=s(O_);uie=n(Iye,"STRONG",{});var yet=s(uie);TTo=r(yet,"marian"),yet.forEach(t),MTo=r(Iye," \u2014 "),NN=n(Iye,"A",{href:!0});var Let=s(NN);ETo=r(Let,"MarianForCausalLM"),Let.forEach(t),CTo=r(Iye," (Marian model)"),Iye.forEach(t),wTo=i(W),V_=n(W,"LI",{});var qye=s(V_);_ie=n(qye,"STRONG",{});var xet=s(_ie);ATo=r(xet,"mbart"),xet.forEach(t),yTo=r(qye," \u2014 "),jN=n(qye,"A",{href:!0});var $et=s(jN);LTo=r($et,"MBartForCausalLM"),$et.forEach(t),xTo=r(qye," (mBART model)"),qye.forEach(t),$To=i(W),X_=n(W,"LI",{});var Nye=s(X_);bie=n(Nye,"STRONG",{});var ket=s(bie);kTo=r(ket,"megatron-bert"),ket.forEach(t),STo=r(Nye," \u2014 "),DN=n(Nye,"A",{href:!0});var Set=s(DN);RTo=r(Set,"MegatronBertForCausalLM"),Set.forEach(t),BTo=r(Nye," (MegatronBert model)"),Nye.forEach(t),PTo=i(W),z_=n(W,"LI",{});var jye=s(z_);vie=n(jye,"STRONG",{});var Ret=s(vie);ITo=r(Ret,"openai-gpt"),Ret.forEach(t),qTo=r(jye," \u2014 "),GN=n(jye,"A",{href:!0});var Bet=s(GN);NTo=r(Bet,"OpenAIGPTLMHeadModel"),Bet.forEach(t),jTo=r(jye," (OpenAI GPT model)"),jye.forEach(t),DTo=i(W),Q_=n(W,"LI",{});var Dye=s(Q_);Fie=n(Dye,"STRONG",{});var Pet=s(Fie);GTo=r(Pet,"opt"),Pet.forEach(t),OTo=r(Dye," \u2014 "),ON=n(Dye,"A",{href:!0});var Iet=s(ON);VTo=r(Iet,"OPTForCausalLM"),Iet.forEach(t),XTo=r(Dye," (OPT model)"),Dye.forEach(t),zTo=i(W),W_=n(W,"LI",{});var Gye=s(W_);Tie=n(Gye,"STRONG",{});var qet=s(Tie);QTo=r(qet,"pegasus"),qet.forEach(t),WTo=r(Gye," \u2014 "),VN=n(Gye,"A",{href:!0});var Net=s(VN);HTo=r(Net,"PegasusForCausalLM"),Net.forEach(t),UTo=r(Gye," (Pegasus model)"),Gye.forEach(t),JTo=i(W),H_=n(W,"LI",{});var Oye=s(H_);Mie=n(Oye,"STRONG",{});var jet=s(Mie);YTo=r(jet,"plbart"),jet.forEach(t),KTo=r(Oye," \u2014 "),XN=n(Oye,"A",{href:!0});var Det=s(XN);ZTo=r(Det,"PLBartForCausalLM"),Det.forEach(t),eMo=r(Oye," (PLBart model)"),Oye.forEach(t),oMo=i(W),U_=n(W,"LI",{});var Vye=s(U_);Eie=n(Vye,"STRONG",{});var Get=s(Eie);rMo=r(Get,"prophetnet"),Get.forEach(t),tMo=r(Vye," \u2014 "),zN=n(Vye,"A",{href:!0});var Oet=s(zN);aMo=r(Oet,"ProphetNetForCausalLM"),Oet.forEach(t),nMo=r(Vye," (ProphetNet model)"),Vye.forEach(t),sMo=i(W),J_=n(W,"LI",{});var Xye=s(J_);Cie=n(Xye,"STRONG",{});var Vet=s(Cie);lMo=r(Vet,"qdqbert"),Vet.forEach(t),iMo=r(Xye," \u2014 "),QN=n(Xye,"A",{href:!0});var Xet=s(QN);dMo=r(Xet,"QDQBertLMHeadModel"),Xet.forEach(t),cMo=r(Xye," (QDQBert model)"),Xye.forEach(t),fMo=i(W),Y_=n(W,"LI",{});var zye=s(Y_);wie=n(zye,"STRONG",{});var zet=s(wie);mMo=r(zet,"reformer"),zet.forEach(t),gMo=r(zye," \u2014 "),WN=n(zye,"A",{href:!0});var Qet=s(WN);hMo=r(Qet,"ReformerModelWithLMHead"),Qet.forEach(t),pMo=r(zye," (Reformer model)"),zye.forEach(t),uMo=i(W),K_=n(W,"LI",{});var Qye=s(K_);Aie=n(Qye,"STRONG",{});var Wet=s(Aie);_Mo=r(Wet,"rembert"),Wet.forEach(t),bMo=r(Qye," \u2014 "),HN=n(Qye,"A",{href:!0});var Het=s(HN);vMo=r(Het,"RemBertForCausalLM"),Het.forEach(t),FMo=r(Qye," (RemBERT model)"),Qye.forEach(t),TMo=i(W),Z_=n(W,"LI",{});var Wye=s(Z_);yie=n(Wye,"STRONG",{});var Uet=s(yie);MMo=r(Uet,"roberta"),Uet.forEach(t),EMo=r(Wye," \u2014 "),UN=n(Wye,"A",{href:!0});var Jet=s(UN);CMo=r(Jet,"RobertaForCausalLM"),Jet.forEach(t),wMo=r(Wye," (RoBERTa model)"),Wye.forEach(t),AMo=i(W),e1=n(W,"LI",{});var Hye=s(e1);Lie=n(Hye,"STRONG",{});var Yet=s(Lie);yMo=r(Yet,"roformer"),Yet.forEach(t),LMo=r(Hye," \u2014 "),JN=n(Hye,"A",{href:!0});var Ket=s(JN);xMo=r(Ket,"RoFormerForCausalLM"),Ket.forEach(t),$Mo=r(Hye," (RoFormer model)"),Hye.forEach(t),kMo=i(W),o1=n(W,"LI",{});var Uye=s(o1);xie=n(Uye,"STRONG",{});var Zet=s(xie);SMo=r(Zet,"speech_to_text_2"),Zet.forEach(t),RMo=r(Uye," \u2014 "),YN=n(Uye,"A",{href:!0});var eot=s(YN);BMo=r(eot,"Speech2Text2ForCausalLM"),eot.forEach(t),PMo=r(Uye," (Speech2Text2 model)"),Uye.forEach(t),IMo=i(W),r1=n(W,"LI",{});var Jye=s(r1);$ie=n(Jye,"STRONG",{});var oot=s($ie);qMo=r(oot,"transfo-xl"),oot.forEach(t),NMo=r(Jye," \u2014 "),KN=n(Jye,"A",{href:!0});var rot=s(KN);jMo=r(rot,"TransfoXLLMHeadModel"),rot.forEach(t),DMo=r(Jye," (Transformer-XL model)"),Jye.forEach(t),GMo=i(W),t1=n(W,"LI",{});var Yye=s(t1);kie=n(Yye,"STRONG",{});var tot=s(kie);OMo=r(tot,"trocr"),tot.forEach(t),VMo=r(Yye," \u2014 "),ZN=n(Yye,"A",{href:!0});var aot=s(ZN);XMo=r(aot,"TrOCRForCausalLM"),aot.forEach(t),zMo=r(Yye," (TrOCR model)"),Yye.forEach(t),QMo=i(W),a1=n(W,"LI",{});var Kye=s(a1);Sie=n(Kye,"STRONG",{});var not=s(Sie);WMo=r(not,"xglm"),not.forEach(t),HMo=r(Kye," \u2014 "),ej=n(Kye,"A",{href:!0});var sot=s(ej);UMo=r(sot,"XGLMForCausalLM"),sot.forEach(t),JMo=r(Kye," (XGLM model)"),Kye.forEach(t),YMo=i(W),n1=n(W,"LI",{});var Zye=s(n1);Rie=n(Zye,"STRONG",{});var lot=s(Rie);KMo=r(lot,"xlm"),lot.forEach(t),ZMo=r(Zye," \u2014 "),oj=n(Zye,"A",{href:!0});var iot=s(oj);eEo=r(iot,"XLMWithLMHeadModel"),iot.forEach(t),oEo=r(Zye," (XLM model)"),Zye.forEach(t),rEo=i(W),s1=n(W,"LI",{});var eLe=s(s1);Bie=n(eLe,"STRONG",{});var dot=s(Bie);tEo=r(dot,"xlm-prophetnet"),dot.forEach(t),aEo=r(eLe," \u2014 "),rj=n(eLe,"A",{href:!0});var cot=s(rj);nEo=r(cot,"XLMProphetNetForCausalLM"),cot.forEach(t),sEo=r(eLe," (XLMProphetNet model)"),eLe.forEach(t),lEo=i(W),l1=n(W,"LI",{});var oLe=s(l1);Pie=n(oLe,"STRONG",{});var fot=s(Pie);iEo=r(fot,"xlm-roberta"),fot.forEach(t),dEo=r(oLe," \u2014 "),tj=n(oLe,"A",{href:!0});var mot=s(tj);cEo=r(mot,"XLMRobertaForCausalLM"),mot.forEach(t),fEo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),mEo=i(W),i1=n(W,"LI",{});var rLe=s(i1);Iie=n(rLe,"STRONG",{});var got=s(Iie);gEo=r(got,"xlm-roberta-xl"),got.forEach(t),hEo=r(rLe," \u2014 "),aj=n(rLe,"A",{href:!0});var hot=s(aj);pEo=r(hot,"XLMRobertaXLForCausalLM"),hot.forEach(t),uEo=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),_Eo=i(W),d1=n(W,"LI",{});var tLe=s(d1);qie=n(tLe,"STRONG",{});var pot=s(qie);bEo=r(pot,"xlnet"),pot.forEach(t),vEo=r(tLe," \u2014 "),nj=n(tLe,"A",{href:!0});var uot=s(nj);FEo=r(uot,"XLNetLMHeadModel"),uot.forEach(t),TEo=r(tLe," (XLNet model)"),tLe.forEach(t),W.forEach(t),MEo=i(oa),c1=n(oa,"P",{});var aLe=s(c1);EEo=r(aLe,"The model is set in evaluation mode by default using "),Nie=n(aLe,"CODE",{});var _ot=s(Nie);CEo=r(_ot,"model.eval()"),_ot.forEach(t),wEo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(aLe,"CODE",{});var bot=s(jie);AEo=r(bot,"model.train()"),bot.forEach(t),aLe.forEach(t),yEo=i(oa),T(f1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),mIe=i(f),ki=n(f,"H2",{class:!0});var uNe=s(ki);m1=n(uNe,"A",{id:!0,class:!0,href:!0});var vot=s(m1);Die=n(vot,"SPAN",{});var Fot=s(Die);T(Dy.$$.fragment,Fot),Fot.forEach(t),vot.forEach(t),LEo=i(uNe),Gie=n(uNe,"SPAN",{});var Tot=s(Gie);xEo=r(Tot,"AutoModelForMaskedLM"),Tot.forEach(t),uNe.forEach(t),gIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(Gy.$$.fragment,Vs),$Eo=i(Vs),Si=n(Vs,"P",{});var _K=s(Si);kEo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sj=n(_K,"A",{href:!0});var Mot=s(sj);SEo=r(Mot,"from_pretrained()"),Mot.forEach(t),REo=r(_K," class method or the "),lj=n(_K,"A",{href:!0});var Eot=s(lj);BEo=r(Eot,"from_config()"),Eot.forEach(t),PEo=r(_K,` class
method.`),_K.forEach(t),IEo=i(Vs),Oy=n(Vs,"P",{});var _Ne=s(Oy);qEo=r(_Ne,"This class cannot be instantiated directly using "),Oie=n(_Ne,"CODE",{});var Cot=s(Oie);NEo=r(Cot,"__init__()"),Cot.forEach(t),jEo=r(_Ne," (throws an error)."),_Ne.forEach(t),DEo=i(Vs),at=n(Vs,"DIV",{class:!0});var lA=s(at);T(Vy.$$.fragment,lA),GEo=i(lA),Vie=n(lA,"P",{});var wot=s(Vie);OEo=r(wot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wot.forEach(t),VEo=i(lA),Ri=n(lA,"P",{});var bK=s(Ri);XEo=r(bK,`Note:
Loading a model from its configuration file does `),Xie=n(bK,"STRONG",{});var Aot=s(Xie);zEo=r(Aot,"not"),Aot.forEach(t),QEo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=n(bK,"A",{href:!0});var yot=s(ij);WEo=r(yot,"from_pretrained()"),yot.forEach(t),HEo=r(bK," to load the model weights."),bK.forEach(t),UEo=i(lA),T(g1.$$.fragment,lA),lA.forEach(t),JEo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(Xy.$$.fragment,ra),YEo=i(ra),zie=n(ra,"P",{});var Lot=s(zie);KEo=r(Lot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lot.forEach(t),ZEo=i(ra),xa=n(ra,"P",{});var iA=s(xa);eCo=r(iA,"The model class to instantiate is selected based on the "),Qie=n(iA,"CODE",{});var xot=s(Qie);oCo=r(xot,"model_type"),xot.forEach(t),rCo=r(iA,` property of the config object (either
passed as an argument or loaded from `),Wie=n(iA,"CODE",{});var $ot=s(Wie);tCo=r($ot,"pretrained_model_name_or_path"),$ot.forEach(t),aCo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(iA,"CODE",{});var kot=s(Hie);nCo=r(kot,"pretrained_model_name_or_path"),kot.forEach(t),sCo=r(iA,":"),iA.forEach(t),lCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);h1=n(H,"LI",{});var nLe=s(h1);Uie=n(nLe,"STRONG",{});var Sot=s(Uie);iCo=r(Sot,"albert"),Sot.forEach(t),dCo=r(nLe," \u2014 "),dj=n(nLe,"A",{href:!0});var Rot=s(dj);cCo=r(Rot,"AlbertForMaskedLM"),Rot.forEach(t),fCo=r(nLe," (ALBERT model)"),nLe.forEach(t),mCo=i(H),p1=n(H,"LI",{});var sLe=s(p1);Jie=n(sLe,"STRONG",{});var Bot=s(Jie);gCo=r(Bot,"bart"),Bot.forEach(t),hCo=r(sLe," \u2014 "),cj=n(sLe,"A",{href:!0});var Pot=s(cj);pCo=r(Pot,"BartForConditionalGeneration"),Pot.forEach(t),uCo=r(sLe," (BART model)"),sLe.forEach(t),_Co=i(H),u1=n(H,"LI",{});var lLe=s(u1);Yie=n(lLe,"STRONG",{});var Iot=s(Yie);bCo=r(Iot,"bert"),Iot.forEach(t),vCo=r(lLe," \u2014 "),fj=n(lLe,"A",{href:!0});var qot=s(fj);FCo=r(qot,"BertForMaskedLM"),qot.forEach(t),TCo=r(lLe," (BERT model)"),lLe.forEach(t),MCo=i(H),_1=n(H,"LI",{});var iLe=s(_1);Kie=n(iLe,"STRONG",{});var Not=s(Kie);ECo=r(Not,"big_bird"),Not.forEach(t),CCo=r(iLe," \u2014 "),mj=n(iLe,"A",{href:!0});var jot=s(mj);wCo=r(jot,"BigBirdForMaskedLM"),jot.forEach(t),ACo=r(iLe," (BigBird model)"),iLe.forEach(t),yCo=i(H),b1=n(H,"LI",{});var dLe=s(b1);Zie=n(dLe,"STRONG",{});var Dot=s(Zie);LCo=r(Dot,"camembert"),Dot.forEach(t),xCo=r(dLe," \u2014 "),gj=n(dLe,"A",{href:!0});var Got=s(gj);$Co=r(Got,"CamembertForMaskedLM"),Got.forEach(t),kCo=r(dLe," (CamemBERT model)"),dLe.forEach(t),SCo=i(H),v1=n(H,"LI",{});var cLe=s(v1);ede=n(cLe,"STRONG",{});var Oot=s(ede);RCo=r(Oot,"convbert"),Oot.forEach(t),BCo=r(cLe," \u2014 "),hj=n(cLe,"A",{href:!0});var Vot=s(hj);PCo=r(Vot,"ConvBertForMaskedLM"),Vot.forEach(t),ICo=r(cLe," (ConvBERT model)"),cLe.forEach(t),qCo=i(H),F1=n(H,"LI",{});var fLe=s(F1);ode=n(fLe,"STRONG",{});var Xot=s(ode);NCo=r(Xot,"data2vec-text"),Xot.forEach(t),jCo=r(fLe," \u2014 "),pj=n(fLe,"A",{href:!0});var zot=s(pj);DCo=r(zot,"Data2VecTextForMaskedLM"),zot.forEach(t),GCo=r(fLe," (Data2VecText model)"),fLe.forEach(t),OCo=i(H),T1=n(H,"LI",{});var mLe=s(T1);rde=n(mLe,"STRONG",{});var Qot=s(rde);VCo=r(Qot,"deberta"),Qot.forEach(t),XCo=r(mLe," \u2014 "),uj=n(mLe,"A",{href:!0});var Wot=s(uj);zCo=r(Wot,"DebertaForMaskedLM"),Wot.forEach(t),QCo=r(mLe," (DeBERTa model)"),mLe.forEach(t),WCo=i(H),M1=n(H,"LI",{});var gLe=s(M1);tde=n(gLe,"STRONG",{});var Hot=s(tde);HCo=r(Hot,"deberta-v2"),Hot.forEach(t),UCo=r(gLe," \u2014 "),_j=n(gLe,"A",{href:!0});var Uot=s(_j);JCo=r(Uot,"DebertaV2ForMaskedLM"),Uot.forEach(t),YCo=r(gLe," (DeBERTa-v2 model)"),gLe.forEach(t),KCo=i(H),E1=n(H,"LI",{});var hLe=s(E1);ade=n(hLe,"STRONG",{});var Jot=s(ade);ZCo=r(Jot,"distilbert"),Jot.forEach(t),ewo=r(hLe," \u2014 "),bj=n(hLe,"A",{href:!0});var Yot=s(bj);owo=r(Yot,"DistilBertForMaskedLM"),Yot.forEach(t),rwo=r(hLe," (DistilBERT model)"),hLe.forEach(t),two=i(H),C1=n(H,"LI",{});var pLe=s(C1);nde=n(pLe,"STRONG",{});var Kot=s(nde);awo=r(Kot,"electra"),Kot.forEach(t),nwo=r(pLe," \u2014 "),vj=n(pLe,"A",{href:!0});var Zot=s(vj);swo=r(Zot,"ElectraForMaskedLM"),Zot.forEach(t),lwo=r(pLe," (ELECTRA model)"),pLe.forEach(t),iwo=i(H),w1=n(H,"LI",{});var uLe=s(w1);sde=n(uLe,"STRONG",{});var ert=s(sde);dwo=r(ert,"flaubert"),ert.forEach(t),cwo=r(uLe," \u2014 "),Fj=n(uLe,"A",{href:!0});var ort=s(Fj);fwo=r(ort,"FlaubertWithLMHeadModel"),ort.forEach(t),mwo=r(uLe," (FlauBERT model)"),uLe.forEach(t),gwo=i(H),A1=n(H,"LI",{});var _Le=s(A1);lde=n(_Le,"STRONG",{});var rrt=s(lde);hwo=r(rrt,"fnet"),rrt.forEach(t),pwo=r(_Le," \u2014 "),Tj=n(_Le,"A",{href:!0});var trt=s(Tj);uwo=r(trt,"FNetForMaskedLM"),trt.forEach(t),_wo=r(_Le," (FNet model)"),_Le.forEach(t),bwo=i(H),y1=n(H,"LI",{});var bLe=s(y1);ide=n(bLe,"STRONG",{});var art=s(ide);vwo=r(art,"funnel"),art.forEach(t),Fwo=r(bLe," \u2014 "),Mj=n(bLe,"A",{href:!0});var nrt=s(Mj);Two=r(nrt,"FunnelForMaskedLM"),nrt.forEach(t),Mwo=r(bLe," (Funnel Transformer model)"),bLe.forEach(t),Ewo=i(H),L1=n(H,"LI",{});var vLe=s(L1);dde=n(vLe,"STRONG",{});var srt=s(dde);Cwo=r(srt,"ibert"),srt.forEach(t),wwo=r(vLe," \u2014 "),Ej=n(vLe,"A",{href:!0});var lrt=s(Ej);Awo=r(lrt,"IBertForMaskedLM"),lrt.forEach(t),ywo=r(vLe," (I-BERT model)"),vLe.forEach(t),Lwo=i(H),x1=n(H,"LI",{});var FLe=s(x1);cde=n(FLe,"STRONG",{});var irt=s(cde);xwo=r(irt,"layoutlm"),irt.forEach(t),$wo=r(FLe," \u2014 "),Cj=n(FLe,"A",{href:!0});var drt=s(Cj);kwo=r(drt,"LayoutLMForMaskedLM"),drt.forEach(t),Swo=r(FLe," (LayoutLM model)"),FLe.forEach(t),Rwo=i(H),$1=n(H,"LI",{});var TLe=s($1);fde=n(TLe,"STRONG",{});var crt=s(fde);Bwo=r(crt,"longformer"),crt.forEach(t),Pwo=r(TLe," \u2014 "),wj=n(TLe,"A",{href:!0});var frt=s(wj);Iwo=r(frt,"LongformerForMaskedLM"),frt.forEach(t),qwo=r(TLe," (Longformer model)"),TLe.forEach(t),Nwo=i(H),k1=n(H,"LI",{});var MLe=s(k1);mde=n(MLe,"STRONG",{});var mrt=s(mde);jwo=r(mrt,"mbart"),mrt.forEach(t),Dwo=r(MLe," \u2014 "),Aj=n(MLe,"A",{href:!0});var grt=s(Aj);Gwo=r(grt,"MBartForConditionalGeneration"),grt.forEach(t),Owo=r(MLe," (mBART model)"),MLe.forEach(t),Vwo=i(H),S1=n(H,"LI",{});var ELe=s(S1);gde=n(ELe,"STRONG",{});var hrt=s(gde);Xwo=r(hrt,"megatron-bert"),hrt.forEach(t),zwo=r(ELe," \u2014 "),yj=n(ELe,"A",{href:!0});var prt=s(yj);Qwo=r(prt,"MegatronBertForMaskedLM"),prt.forEach(t),Wwo=r(ELe," (MegatronBert model)"),ELe.forEach(t),Hwo=i(H),R1=n(H,"LI",{});var CLe=s(R1);hde=n(CLe,"STRONG",{});var urt=s(hde);Uwo=r(urt,"mobilebert"),urt.forEach(t),Jwo=r(CLe," \u2014 "),Lj=n(CLe,"A",{href:!0});var _rt=s(Lj);Ywo=r(_rt,"MobileBertForMaskedLM"),_rt.forEach(t),Kwo=r(CLe," (MobileBERT model)"),CLe.forEach(t),Zwo=i(H),B1=n(H,"LI",{});var wLe=s(B1);pde=n(wLe,"STRONG",{});var brt=s(pde);eAo=r(brt,"mpnet"),brt.forEach(t),oAo=r(wLe," \u2014 "),xj=n(wLe,"A",{href:!0});var vrt=s(xj);rAo=r(vrt,"MPNetForMaskedLM"),vrt.forEach(t),tAo=r(wLe," (MPNet model)"),wLe.forEach(t),aAo=i(H),P1=n(H,"LI",{});var ALe=s(P1);ude=n(ALe,"STRONG",{});var Frt=s(ude);nAo=r(Frt,"nystromformer"),Frt.forEach(t),sAo=r(ALe," \u2014 "),$j=n(ALe,"A",{href:!0});var Trt=s($j);lAo=r(Trt,"NystromformerForMaskedLM"),Trt.forEach(t),iAo=r(ALe," (Nystromformer model)"),ALe.forEach(t),dAo=i(H),I1=n(H,"LI",{});var yLe=s(I1);_de=n(yLe,"STRONG",{});var Mrt=s(_de);cAo=r(Mrt,"perceiver"),Mrt.forEach(t),fAo=r(yLe," \u2014 "),kj=n(yLe,"A",{href:!0});var Ert=s(kj);mAo=r(Ert,"PerceiverForMaskedLM"),Ert.forEach(t),gAo=r(yLe," (Perceiver model)"),yLe.forEach(t),hAo=i(H),q1=n(H,"LI",{});var LLe=s(q1);bde=n(LLe,"STRONG",{});var Crt=s(bde);pAo=r(Crt,"qdqbert"),Crt.forEach(t),uAo=r(LLe," \u2014 "),Sj=n(LLe,"A",{href:!0});var wrt=s(Sj);_Ao=r(wrt,"QDQBertForMaskedLM"),wrt.forEach(t),bAo=r(LLe," (QDQBert model)"),LLe.forEach(t),vAo=i(H),N1=n(H,"LI",{});var xLe=s(N1);vde=n(xLe,"STRONG",{});var Art=s(vde);FAo=r(Art,"reformer"),Art.forEach(t),TAo=r(xLe," \u2014 "),Rj=n(xLe,"A",{href:!0});var yrt=s(Rj);MAo=r(yrt,"ReformerForMaskedLM"),yrt.forEach(t),EAo=r(xLe," (Reformer model)"),xLe.forEach(t),CAo=i(H),j1=n(H,"LI",{});var $Le=s(j1);Fde=n($Le,"STRONG",{});var Lrt=s(Fde);wAo=r(Lrt,"rembert"),Lrt.forEach(t),AAo=r($Le," \u2014 "),Bj=n($Le,"A",{href:!0});var xrt=s(Bj);yAo=r(xrt,"RemBertForMaskedLM"),xrt.forEach(t),LAo=r($Le," (RemBERT model)"),$Le.forEach(t),xAo=i(H),D1=n(H,"LI",{});var kLe=s(D1);Tde=n(kLe,"STRONG",{});var $rt=s(Tde);$Ao=r($rt,"roberta"),$rt.forEach(t),kAo=r(kLe," \u2014 "),Pj=n(kLe,"A",{href:!0});var krt=s(Pj);SAo=r(krt,"RobertaForMaskedLM"),krt.forEach(t),RAo=r(kLe," (RoBERTa model)"),kLe.forEach(t),BAo=i(H),G1=n(H,"LI",{});var SLe=s(G1);Mde=n(SLe,"STRONG",{});var Srt=s(Mde);PAo=r(Srt,"roformer"),Srt.forEach(t),IAo=r(SLe," \u2014 "),Ij=n(SLe,"A",{href:!0});var Rrt=s(Ij);qAo=r(Rrt,"RoFormerForMaskedLM"),Rrt.forEach(t),NAo=r(SLe," (RoFormer model)"),SLe.forEach(t),jAo=i(H),O1=n(H,"LI",{});var RLe=s(O1);Ede=n(RLe,"STRONG",{});var Brt=s(Ede);DAo=r(Brt,"squeezebert"),Brt.forEach(t),GAo=r(RLe," \u2014 "),qj=n(RLe,"A",{href:!0});var Prt=s(qj);OAo=r(Prt,"SqueezeBertForMaskedLM"),Prt.forEach(t),VAo=r(RLe," (SqueezeBERT model)"),RLe.forEach(t),XAo=i(H),V1=n(H,"LI",{});var BLe=s(V1);Cde=n(BLe,"STRONG",{});var Irt=s(Cde);zAo=r(Irt,"tapas"),Irt.forEach(t),QAo=r(BLe," \u2014 "),Nj=n(BLe,"A",{href:!0});var qrt=s(Nj);WAo=r(qrt,"TapasForMaskedLM"),qrt.forEach(t),HAo=r(BLe," (TAPAS model)"),BLe.forEach(t),UAo=i(H),X1=n(H,"LI",{});var PLe=s(X1);wde=n(PLe,"STRONG",{});var Nrt=s(wde);JAo=r(Nrt,"wav2vec2"),Nrt.forEach(t),YAo=r(PLe," \u2014 "),Ade=n(PLe,"CODE",{});var jrt=s(Ade);KAo=r(jrt,"Wav2Vec2ForMaskedLM"),jrt.forEach(t),ZAo=r(PLe," (Wav2Vec2 model)"),PLe.forEach(t),e0o=i(H),z1=n(H,"LI",{});var ILe=s(z1);yde=n(ILe,"STRONG",{});var Drt=s(yde);o0o=r(Drt,"xlm"),Drt.forEach(t),r0o=r(ILe," \u2014 "),jj=n(ILe,"A",{href:!0});var Grt=s(jj);t0o=r(Grt,"XLMWithLMHeadModel"),Grt.forEach(t),a0o=r(ILe," (XLM model)"),ILe.forEach(t),n0o=i(H),Q1=n(H,"LI",{});var qLe=s(Q1);Lde=n(qLe,"STRONG",{});var Ort=s(Lde);s0o=r(Ort,"xlm-roberta"),Ort.forEach(t),l0o=r(qLe," \u2014 "),Dj=n(qLe,"A",{href:!0});var Vrt=s(Dj);i0o=r(Vrt,"XLMRobertaForMaskedLM"),Vrt.forEach(t),d0o=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),c0o=i(H),W1=n(H,"LI",{});var NLe=s(W1);xde=n(NLe,"STRONG",{});var Xrt=s(xde);f0o=r(Xrt,"xlm-roberta-xl"),Xrt.forEach(t),m0o=r(NLe," \u2014 "),Gj=n(NLe,"A",{href:!0});var zrt=s(Gj);g0o=r(zrt,"XLMRobertaXLForMaskedLM"),zrt.forEach(t),h0o=r(NLe," (XLM-RoBERTa-XL model)"),NLe.forEach(t),p0o=i(H),H1=n(H,"LI",{});var jLe=s(H1);$de=n(jLe,"STRONG",{});var Qrt=s($de);u0o=r(Qrt,"yoso"),Qrt.forEach(t),_0o=r(jLe," \u2014 "),Oj=n(jLe,"A",{href:!0});var Wrt=s(Oj);b0o=r(Wrt,"YosoForMaskedLM"),Wrt.forEach(t),v0o=r(jLe," (YOSO model)"),jLe.forEach(t),H.forEach(t),F0o=i(ra),U1=n(ra,"P",{});var DLe=s(U1);T0o=r(DLe,"The model is set in evaluation mode by default using "),kde=n(DLe,"CODE",{});var Hrt=s(kde);M0o=r(Hrt,"model.eval()"),Hrt.forEach(t),E0o=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(DLe,"CODE",{});var Urt=s(Sde);C0o=r(Urt,"model.train()"),Urt.forEach(t),DLe.forEach(t),w0o=i(ra),T(J1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),hIe=i(f),Bi=n(f,"H2",{class:!0});var bNe=s(Bi);Y1=n(bNe,"A",{id:!0,class:!0,href:!0});var Jrt=s(Y1);Rde=n(Jrt,"SPAN",{});var Yrt=s(Rde);T(zy.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),A0o=i(bNe),Bde=n(bNe,"SPAN",{});var Krt=s(Bde);y0o=r(Krt,"AutoModelForSeq2SeqLM"),Krt.forEach(t),bNe.forEach(t),pIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(Qy.$$.fragment,Xs),L0o=i(Xs),Pi=n(Xs,"P",{});var vK=s(Pi);x0o=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Vj=n(vK,"A",{href:!0});var Zrt=s(Vj);$0o=r(Zrt,"from_pretrained()"),Zrt.forEach(t),k0o=r(vK," class method or the "),Xj=n(vK,"A",{href:!0});var ett=s(Xj);S0o=r(ett,"from_config()"),ett.forEach(t),R0o=r(vK,` class
method.`),vK.forEach(t),B0o=i(Xs),Wy=n(Xs,"P",{});var vNe=s(Wy);P0o=r(vNe,"This class cannot be instantiated directly using "),Pde=n(vNe,"CODE",{});var ott=s(Pde);I0o=r(ott,"__init__()"),ott.forEach(t),q0o=r(vNe," (throws an error)."),vNe.forEach(t),N0o=i(Xs),nt=n(Xs,"DIV",{class:!0});var dA=s(nt);T(Hy.$$.fragment,dA),j0o=i(dA),Ide=n(dA,"P",{});var rtt=s(Ide);D0o=r(rtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rtt.forEach(t),G0o=i(dA),Ii=n(dA,"P",{});var FK=s(Ii);O0o=r(FK,`Note:
Loading a model from its configuration file does `),qde=n(FK,"STRONG",{});var ttt=s(qde);V0o=r(ttt,"not"),ttt.forEach(t),X0o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(FK,"A",{href:!0});var att=s(zj);z0o=r(att,"from_pretrained()"),att.forEach(t),Q0o=r(FK," to load the model weights."),FK.forEach(t),W0o=i(dA),T(K1.$$.fragment,dA),dA.forEach(t),H0o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(Uy.$$.fragment,ta),U0o=i(ta),Nde=n(ta,"P",{});var ntt=s(Nde);J0o=r(ntt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ntt.forEach(t),Y0o=i(ta),$a=n(ta,"P",{});var cA=s($a);K0o=r(cA,"The model class to instantiate is selected based on the "),jde=n(cA,"CODE",{});var stt=s(jde);Z0o=r(stt,"model_type"),stt.forEach(t),eyo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Dde=n(cA,"CODE",{});var ltt=s(Dde);oyo=r(ltt,"pretrained_model_name_or_path"),ltt.forEach(t),ryo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(cA,"CODE",{});var itt=s(Gde);tyo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),ayo=r(cA,":"),cA.forEach(t),nyo=i(ta),pe=n(ta,"UL",{});var be=s(pe);Z1=n(be,"LI",{});var GLe=s(Z1);Ode=n(GLe,"STRONG",{});var dtt=s(Ode);syo=r(dtt,"bart"),dtt.forEach(t),lyo=r(GLe," \u2014 "),Qj=n(GLe,"A",{href:!0});var ctt=s(Qj);iyo=r(ctt,"BartForConditionalGeneration"),ctt.forEach(t),dyo=r(GLe," (BART model)"),GLe.forEach(t),cyo=i(be),eb=n(be,"LI",{});var OLe=s(eb);Vde=n(OLe,"STRONG",{});var ftt=s(Vde);fyo=r(ftt,"bigbird_pegasus"),ftt.forEach(t),myo=r(OLe," \u2014 "),Wj=n(OLe,"A",{href:!0});var mtt=s(Wj);gyo=r(mtt,"BigBirdPegasusForConditionalGeneration"),mtt.forEach(t),hyo=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),pyo=i(be),ob=n(be,"LI",{});var VLe=s(ob);Xde=n(VLe,"STRONG",{});var gtt=s(Xde);uyo=r(gtt,"blenderbot"),gtt.forEach(t),_yo=r(VLe," \u2014 "),Hj=n(VLe,"A",{href:!0});var htt=s(Hj);byo=r(htt,"BlenderbotForConditionalGeneration"),htt.forEach(t),vyo=r(VLe," (Blenderbot model)"),VLe.forEach(t),Fyo=i(be),rb=n(be,"LI",{});var XLe=s(rb);zde=n(XLe,"STRONG",{});var ptt=s(zde);Tyo=r(ptt,"blenderbot-small"),ptt.forEach(t),Myo=r(XLe," \u2014 "),Uj=n(XLe,"A",{href:!0});var utt=s(Uj);Eyo=r(utt,"BlenderbotSmallForConditionalGeneration"),utt.forEach(t),Cyo=r(XLe," (BlenderbotSmall model)"),XLe.forEach(t),wyo=i(be),tb=n(be,"LI",{});var zLe=s(tb);Qde=n(zLe,"STRONG",{});var _tt=s(Qde);Ayo=r(_tt,"encoder-decoder"),_tt.forEach(t),yyo=r(zLe," \u2014 "),Jj=n(zLe,"A",{href:!0});var btt=s(Jj);Lyo=r(btt,"EncoderDecoderModel"),btt.forEach(t),xyo=r(zLe," (Encoder decoder model)"),zLe.forEach(t),$yo=i(be),ab=n(be,"LI",{});var QLe=s(ab);Wde=n(QLe,"STRONG",{});var vtt=s(Wde);kyo=r(vtt,"fsmt"),vtt.forEach(t),Syo=r(QLe," \u2014 "),Yj=n(QLe,"A",{href:!0});var Ftt=s(Yj);Ryo=r(Ftt,"FSMTForConditionalGeneration"),Ftt.forEach(t),Byo=r(QLe," (FairSeq Machine-Translation model)"),QLe.forEach(t),Pyo=i(be),nb=n(be,"LI",{});var WLe=s(nb);Hde=n(WLe,"STRONG",{});var Ttt=s(Hde);Iyo=r(Ttt,"led"),Ttt.forEach(t),qyo=r(WLe," \u2014 "),Kj=n(WLe,"A",{href:!0});var Mtt=s(Kj);Nyo=r(Mtt,"LEDForConditionalGeneration"),Mtt.forEach(t),jyo=r(WLe," (LED model)"),WLe.forEach(t),Dyo=i(be),sb=n(be,"LI",{});var HLe=s(sb);Ude=n(HLe,"STRONG",{});var Ett=s(Ude);Gyo=r(Ett,"m2m_100"),Ett.forEach(t),Oyo=r(HLe," \u2014 "),Zj=n(HLe,"A",{href:!0});var Ctt=s(Zj);Vyo=r(Ctt,"M2M100ForConditionalGeneration"),Ctt.forEach(t),Xyo=r(HLe," (M2M100 model)"),HLe.forEach(t),zyo=i(be),lb=n(be,"LI",{});var ULe=s(lb);Jde=n(ULe,"STRONG",{});var wtt=s(Jde);Qyo=r(wtt,"marian"),wtt.forEach(t),Wyo=r(ULe," \u2014 "),eD=n(ULe,"A",{href:!0});var Att=s(eD);Hyo=r(Att,"MarianMTModel"),Att.forEach(t),Uyo=r(ULe," (Marian model)"),ULe.forEach(t),Jyo=i(be),ib=n(be,"LI",{});var JLe=s(ib);Yde=n(JLe,"STRONG",{});var ytt=s(Yde);Yyo=r(ytt,"mbart"),ytt.forEach(t),Kyo=r(JLe," \u2014 "),oD=n(JLe,"A",{href:!0});var Ltt=s(oD);Zyo=r(Ltt,"MBartForConditionalGeneration"),Ltt.forEach(t),eLo=r(JLe," (mBART model)"),JLe.forEach(t),oLo=i(be),db=n(be,"LI",{});var YLe=s(db);Kde=n(YLe,"STRONG",{});var xtt=s(Kde);rLo=r(xtt,"mt5"),xtt.forEach(t),tLo=r(YLe," \u2014 "),rD=n(YLe,"A",{href:!0});var $tt=s(rD);aLo=r($tt,"MT5ForConditionalGeneration"),$tt.forEach(t),nLo=r(YLe," (mT5 model)"),YLe.forEach(t),sLo=i(be),cb=n(be,"LI",{});var KLe=s(cb);Zde=n(KLe,"STRONG",{});var ktt=s(Zde);lLo=r(ktt,"pegasus"),ktt.forEach(t),iLo=r(KLe," \u2014 "),tD=n(KLe,"A",{href:!0});var Stt=s(tD);dLo=r(Stt,"PegasusForConditionalGeneration"),Stt.forEach(t),cLo=r(KLe," (Pegasus model)"),KLe.forEach(t),fLo=i(be),fb=n(be,"LI",{});var ZLe=s(fb);ece=n(ZLe,"STRONG",{});var Rtt=s(ece);mLo=r(Rtt,"plbart"),Rtt.forEach(t),gLo=r(ZLe," \u2014 "),aD=n(ZLe,"A",{href:!0});var Btt=s(aD);hLo=r(Btt,"PLBartForConditionalGeneration"),Btt.forEach(t),pLo=r(ZLe," (PLBart model)"),ZLe.forEach(t),uLo=i(be),mb=n(be,"LI",{});var e8e=s(mb);oce=n(e8e,"STRONG",{});var Ptt=s(oce);_Lo=r(Ptt,"prophetnet"),Ptt.forEach(t),bLo=r(e8e," \u2014 "),nD=n(e8e,"A",{href:!0});var Itt=s(nD);vLo=r(Itt,"ProphetNetForConditionalGeneration"),Itt.forEach(t),FLo=r(e8e," (ProphetNet model)"),e8e.forEach(t),TLo=i(be),gb=n(be,"LI",{});var o8e=s(gb);rce=n(o8e,"STRONG",{});var qtt=s(rce);MLo=r(qtt,"t5"),qtt.forEach(t),ELo=r(o8e," \u2014 "),sD=n(o8e,"A",{href:!0});var Ntt=s(sD);CLo=r(Ntt,"T5ForConditionalGeneration"),Ntt.forEach(t),wLo=r(o8e," (T5 model)"),o8e.forEach(t),ALo=i(be),hb=n(be,"LI",{});var r8e=s(hb);tce=n(r8e,"STRONG",{});var jtt=s(tce);yLo=r(jtt,"xlm-prophetnet"),jtt.forEach(t),LLo=r(r8e," \u2014 "),lD=n(r8e,"A",{href:!0});var Dtt=s(lD);xLo=r(Dtt,"XLMProphetNetForConditionalGeneration"),Dtt.forEach(t),$Lo=r(r8e," (XLMProphetNet model)"),r8e.forEach(t),be.forEach(t),kLo=i(ta),pb=n(ta,"P",{});var t8e=s(pb);SLo=r(t8e,"The model is set in evaluation mode by default using "),ace=n(t8e,"CODE",{});var Gtt=s(ace);RLo=r(Gtt,"model.eval()"),Gtt.forEach(t),BLo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(t8e,"CODE",{});var Ott=s(nce);PLo=r(Ott,"model.train()"),Ott.forEach(t),t8e.forEach(t),ILo=i(ta),T(ub.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),uIe=i(f),qi=n(f,"H2",{class:!0});var FNe=s(qi);_b=n(FNe,"A",{id:!0,class:!0,href:!0});var Vtt=s(_b);sce=n(Vtt,"SPAN",{});var Xtt=s(sce);T(Jy.$$.fragment,Xtt),Xtt.forEach(t),Vtt.forEach(t),qLo=i(FNe),lce=n(FNe,"SPAN",{});var ztt=s(lce);NLo=r(ztt,"AutoModelForSequenceClassification"),ztt.forEach(t),FNe.forEach(t),_Ie=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(Yy.$$.fragment,zs),jLo=i(zs),Ni=n(zs,"P",{});var TK=s(Ni);DLo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iD=n(TK,"A",{href:!0});var Qtt=s(iD);GLo=r(Qtt,"from_pretrained()"),Qtt.forEach(t),OLo=r(TK," class method or the "),dD=n(TK,"A",{href:!0});var Wtt=s(dD);VLo=r(Wtt,"from_config()"),Wtt.forEach(t),XLo=r(TK,` class
method.`),TK.forEach(t),zLo=i(zs),Ky=n(zs,"P",{});var TNe=s(Ky);QLo=r(TNe,"This class cannot be instantiated directly using "),ice=n(TNe,"CODE",{});var Htt=s(ice);WLo=r(Htt,"__init__()"),Htt.forEach(t),HLo=r(TNe," (throws an error)."),TNe.forEach(t),ULo=i(zs),st=n(zs,"DIV",{class:!0});var fA=s(st);T(Zy.$$.fragment,fA),JLo=i(fA),dce=n(fA,"P",{});var Utt=s(dce);YLo=r(Utt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Utt.forEach(t),KLo=i(fA),ji=n(fA,"P",{});var MK=s(ji);ZLo=r(MK,`Note:
Loading a model from its configuration file does `),cce=n(MK,"STRONG",{});var Jtt=s(cce);e8o=r(Jtt,"not"),Jtt.forEach(t),o8o=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(MK,"A",{href:!0});var Ytt=s(cD);r8o=r(Ytt,"from_pretrained()"),Ytt.forEach(t),t8o=r(MK," to load the model weights."),MK.forEach(t),a8o=i(fA),T(bb.$$.fragment,fA),fA.forEach(t),n8o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(eL.$$.fragment,aa),s8o=i(aa),fce=n(aa,"P",{});var Ktt=s(fce);l8o=r(Ktt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ktt.forEach(t),i8o=i(aa),ka=n(aa,"P",{});var mA=s(ka);d8o=r(mA,"The model class to instantiate is selected based on the "),mce=n(mA,"CODE",{});var Ztt=s(mce);c8o=r(Ztt,"model_type"),Ztt.forEach(t),f8o=r(mA,` property of the config object (either
passed as an argument or loaded from `),gce=n(mA,"CODE",{});var eat=s(gce);m8o=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),g8o=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(mA,"CODE",{});var oat=s(hce);h8o=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),p8o=r(mA,":"),mA.forEach(t),u8o=i(aa),N=n(aa,"UL",{});var D=s(N);vb=n(D,"LI",{});var a8e=s(vb);pce=n(a8e,"STRONG",{});var rat=s(pce);_8o=r(rat,"albert"),rat.forEach(t),b8o=r(a8e," \u2014 "),fD=n(a8e,"A",{href:!0});var tat=s(fD);v8o=r(tat,"AlbertForSequenceClassification"),tat.forEach(t),F8o=r(a8e," (ALBERT model)"),a8e.forEach(t),T8o=i(D),Fb=n(D,"LI",{});var n8e=s(Fb);uce=n(n8e,"STRONG",{});var aat=s(uce);M8o=r(aat,"bart"),aat.forEach(t),E8o=r(n8e," \u2014 "),mD=n(n8e,"A",{href:!0});var nat=s(mD);C8o=r(nat,"BartForSequenceClassification"),nat.forEach(t),w8o=r(n8e," (BART model)"),n8e.forEach(t),A8o=i(D),Tb=n(D,"LI",{});var s8e=s(Tb);_ce=n(s8e,"STRONG",{});var sat=s(_ce);y8o=r(sat,"bert"),sat.forEach(t),L8o=r(s8e," \u2014 "),gD=n(s8e,"A",{href:!0});var lat=s(gD);x8o=r(lat,"BertForSequenceClassification"),lat.forEach(t),$8o=r(s8e," (BERT model)"),s8e.forEach(t),k8o=i(D),Mb=n(D,"LI",{});var l8e=s(Mb);bce=n(l8e,"STRONG",{});var iat=s(bce);S8o=r(iat,"big_bird"),iat.forEach(t),R8o=r(l8e," \u2014 "),hD=n(l8e,"A",{href:!0});var dat=s(hD);B8o=r(dat,"BigBirdForSequenceClassification"),dat.forEach(t),P8o=r(l8e," (BigBird model)"),l8e.forEach(t),I8o=i(D),Eb=n(D,"LI",{});var i8e=s(Eb);vce=n(i8e,"STRONG",{});var cat=s(vce);q8o=r(cat,"bigbird_pegasus"),cat.forEach(t),N8o=r(i8e," \u2014 "),pD=n(i8e,"A",{href:!0});var fat=s(pD);j8o=r(fat,"BigBirdPegasusForSequenceClassification"),fat.forEach(t),D8o=r(i8e," (BigBirdPegasus model)"),i8e.forEach(t),G8o=i(D),Cb=n(D,"LI",{});var d8e=s(Cb);Fce=n(d8e,"STRONG",{});var mat=s(Fce);O8o=r(mat,"camembert"),mat.forEach(t),V8o=r(d8e," \u2014 "),uD=n(d8e,"A",{href:!0});var gat=s(uD);X8o=r(gat,"CamembertForSequenceClassification"),gat.forEach(t),z8o=r(d8e," (CamemBERT model)"),d8e.forEach(t),Q8o=i(D),wb=n(D,"LI",{});var c8e=s(wb);Tce=n(c8e,"STRONG",{});var hat=s(Tce);W8o=r(hat,"canine"),hat.forEach(t),H8o=r(c8e," \u2014 "),_D=n(c8e,"A",{href:!0});var pat=s(_D);U8o=r(pat,"CanineForSequenceClassification"),pat.forEach(t),J8o=r(c8e," (Canine model)"),c8e.forEach(t),Y8o=i(D),Ab=n(D,"LI",{});var f8e=s(Ab);Mce=n(f8e,"STRONG",{});var uat=s(Mce);K8o=r(uat,"convbert"),uat.forEach(t),Z8o=r(f8e," \u2014 "),bD=n(f8e,"A",{href:!0});var _at=s(bD);exo=r(_at,"ConvBertForSequenceClassification"),_at.forEach(t),oxo=r(f8e," (ConvBERT model)"),f8e.forEach(t),rxo=i(D),yb=n(D,"LI",{});var m8e=s(yb);Ece=n(m8e,"STRONG",{});var bat=s(Ece);txo=r(bat,"ctrl"),bat.forEach(t),axo=r(m8e," \u2014 "),vD=n(m8e,"A",{href:!0});var vat=s(vD);nxo=r(vat,"CTRLForSequenceClassification"),vat.forEach(t),sxo=r(m8e," (CTRL model)"),m8e.forEach(t),lxo=i(D),Lb=n(D,"LI",{});var g8e=s(Lb);Cce=n(g8e,"STRONG",{});var Fat=s(Cce);ixo=r(Fat,"data2vec-text"),Fat.forEach(t),dxo=r(g8e," \u2014 "),FD=n(g8e,"A",{href:!0});var Tat=s(FD);cxo=r(Tat,"Data2VecTextForSequenceClassification"),Tat.forEach(t),fxo=r(g8e," (Data2VecText model)"),g8e.forEach(t),mxo=i(D),xb=n(D,"LI",{});var h8e=s(xb);wce=n(h8e,"STRONG",{});var Mat=s(wce);gxo=r(Mat,"deberta"),Mat.forEach(t),hxo=r(h8e," \u2014 "),TD=n(h8e,"A",{href:!0});var Eat=s(TD);pxo=r(Eat,"DebertaForSequenceClassification"),Eat.forEach(t),uxo=r(h8e," (DeBERTa model)"),h8e.forEach(t),_xo=i(D),$b=n(D,"LI",{});var p8e=s($b);Ace=n(p8e,"STRONG",{});var Cat=s(Ace);bxo=r(Cat,"deberta-v2"),Cat.forEach(t),vxo=r(p8e," \u2014 "),MD=n(p8e,"A",{href:!0});var wat=s(MD);Fxo=r(wat,"DebertaV2ForSequenceClassification"),wat.forEach(t),Txo=r(p8e," (DeBERTa-v2 model)"),p8e.forEach(t),Mxo=i(D),kb=n(D,"LI",{});var u8e=s(kb);yce=n(u8e,"STRONG",{});var Aat=s(yce);Exo=r(Aat,"distilbert"),Aat.forEach(t),Cxo=r(u8e," \u2014 "),ED=n(u8e,"A",{href:!0});var yat=s(ED);wxo=r(yat,"DistilBertForSequenceClassification"),yat.forEach(t),Axo=r(u8e," (DistilBERT model)"),u8e.forEach(t),yxo=i(D),Sb=n(D,"LI",{});var _8e=s(Sb);Lce=n(_8e,"STRONG",{});var Lat=s(Lce);Lxo=r(Lat,"electra"),Lat.forEach(t),xxo=r(_8e," \u2014 "),CD=n(_8e,"A",{href:!0});var xat=s(CD);$xo=r(xat,"ElectraForSequenceClassification"),xat.forEach(t),kxo=r(_8e," (ELECTRA model)"),_8e.forEach(t),Sxo=i(D),Rb=n(D,"LI",{});var b8e=s(Rb);xce=n(b8e,"STRONG",{});var $at=s(xce);Rxo=r($at,"flaubert"),$at.forEach(t),Bxo=r(b8e," \u2014 "),wD=n(b8e,"A",{href:!0});var kat=s(wD);Pxo=r(kat,"FlaubertForSequenceClassification"),kat.forEach(t),Ixo=r(b8e," (FlauBERT model)"),b8e.forEach(t),qxo=i(D),Bb=n(D,"LI",{});var v8e=s(Bb);$ce=n(v8e,"STRONG",{});var Sat=s($ce);Nxo=r(Sat,"fnet"),Sat.forEach(t),jxo=r(v8e," \u2014 "),AD=n(v8e,"A",{href:!0});var Rat=s(AD);Dxo=r(Rat,"FNetForSequenceClassification"),Rat.forEach(t),Gxo=r(v8e," (FNet model)"),v8e.forEach(t),Oxo=i(D),Pb=n(D,"LI",{});var F8e=s(Pb);kce=n(F8e,"STRONG",{});var Bat=s(kce);Vxo=r(Bat,"funnel"),Bat.forEach(t),Xxo=r(F8e," \u2014 "),yD=n(F8e,"A",{href:!0});var Pat=s(yD);zxo=r(Pat,"FunnelForSequenceClassification"),Pat.forEach(t),Qxo=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),Wxo=i(D),Ib=n(D,"LI",{});var T8e=s(Ib);Sce=n(T8e,"STRONG",{});var Iat=s(Sce);Hxo=r(Iat,"gpt2"),Iat.forEach(t),Uxo=r(T8e," \u2014 "),LD=n(T8e,"A",{href:!0});var qat=s(LD);Jxo=r(qat,"GPT2ForSequenceClassification"),qat.forEach(t),Yxo=r(T8e," (OpenAI GPT-2 model)"),T8e.forEach(t),Kxo=i(D),qb=n(D,"LI",{});var M8e=s(qb);Rce=n(M8e,"STRONG",{});var Nat=s(Rce);Zxo=r(Nat,"gpt_neo"),Nat.forEach(t),e7o=r(M8e," \u2014 "),xD=n(M8e,"A",{href:!0});var jat=s(xD);o7o=r(jat,"GPTNeoForSequenceClassification"),jat.forEach(t),r7o=r(M8e," (GPT Neo model)"),M8e.forEach(t),t7o=i(D),Nb=n(D,"LI",{});var E8e=s(Nb);Bce=n(E8e,"STRONG",{});var Dat=s(Bce);a7o=r(Dat,"gptj"),Dat.forEach(t),n7o=r(E8e," \u2014 "),$D=n(E8e,"A",{href:!0});var Gat=s($D);s7o=r(Gat,"GPTJForSequenceClassification"),Gat.forEach(t),l7o=r(E8e," (GPT-J model)"),E8e.forEach(t),i7o=i(D),jb=n(D,"LI",{});var C8e=s(jb);Pce=n(C8e,"STRONG",{});var Oat=s(Pce);d7o=r(Oat,"ibert"),Oat.forEach(t),c7o=r(C8e," \u2014 "),kD=n(C8e,"A",{href:!0});var Vat=s(kD);f7o=r(Vat,"IBertForSequenceClassification"),Vat.forEach(t),m7o=r(C8e," (I-BERT model)"),C8e.forEach(t),g7o=i(D),Db=n(D,"LI",{});var w8e=s(Db);Ice=n(w8e,"STRONG",{});var Xat=s(Ice);h7o=r(Xat,"layoutlm"),Xat.forEach(t),p7o=r(w8e," \u2014 "),SD=n(w8e,"A",{href:!0});var zat=s(SD);u7o=r(zat,"LayoutLMForSequenceClassification"),zat.forEach(t),_7o=r(w8e," (LayoutLM model)"),w8e.forEach(t),b7o=i(D),Gb=n(D,"LI",{});var A8e=s(Gb);qce=n(A8e,"STRONG",{});var Qat=s(qce);v7o=r(Qat,"layoutlmv2"),Qat.forEach(t),F7o=r(A8e," \u2014 "),RD=n(A8e,"A",{href:!0});var Wat=s(RD);T7o=r(Wat,"LayoutLMv2ForSequenceClassification"),Wat.forEach(t),M7o=r(A8e," (LayoutLMv2 model)"),A8e.forEach(t),E7o=i(D),Ob=n(D,"LI",{});var y8e=s(Ob);Nce=n(y8e,"STRONG",{});var Hat=s(Nce);C7o=r(Hat,"led"),Hat.forEach(t),w7o=r(y8e," \u2014 "),BD=n(y8e,"A",{href:!0});var Uat=s(BD);A7o=r(Uat,"LEDForSequenceClassification"),Uat.forEach(t),y7o=r(y8e," (LED model)"),y8e.forEach(t),L7o=i(D),Vb=n(D,"LI",{});var L8e=s(Vb);jce=n(L8e,"STRONG",{});var Jat=s(jce);x7o=r(Jat,"longformer"),Jat.forEach(t),$7o=r(L8e," \u2014 "),PD=n(L8e,"A",{href:!0});var Yat=s(PD);k7o=r(Yat,"LongformerForSequenceClassification"),Yat.forEach(t),S7o=r(L8e," (Longformer model)"),L8e.forEach(t),R7o=i(D),Xb=n(D,"LI",{});var x8e=s(Xb);Dce=n(x8e,"STRONG",{});var Kat=s(Dce);B7o=r(Kat,"mbart"),Kat.forEach(t),P7o=r(x8e," \u2014 "),ID=n(x8e,"A",{href:!0});var Zat=s(ID);I7o=r(Zat,"MBartForSequenceClassification"),Zat.forEach(t),q7o=r(x8e," (mBART model)"),x8e.forEach(t),N7o=i(D),zb=n(D,"LI",{});var $8e=s(zb);Gce=n($8e,"STRONG",{});var ent=s(Gce);j7o=r(ent,"megatron-bert"),ent.forEach(t),D7o=r($8e," \u2014 "),qD=n($8e,"A",{href:!0});var ont=s(qD);G7o=r(ont,"MegatronBertForSequenceClassification"),ont.forEach(t),O7o=r($8e," (MegatronBert model)"),$8e.forEach(t),V7o=i(D),Qb=n(D,"LI",{});var k8e=s(Qb);Oce=n(k8e,"STRONG",{});var rnt=s(Oce);X7o=r(rnt,"mobilebert"),rnt.forEach(t),z7o=r(k8e," \u2014 "),ND=n(k8e,"A",{href:!0});var tnt=s(ND);Q7o=r(tnt,"MobileBertForSequenceClassification"),tnt.forEach(t),W7o=r(k8e," (MobileBERT model)"),k8e.forEach(t),H7o=i(D),Wb=n(D,"LI",{});var S8e=s(Wb);Vce=n(S8e,"STRONG",{});var ant=s(Vce);U7o=r(ant,"mpnet"),ant.forEach(t),J7o=r(S8e," \u2014 "),jD=n(S8e,"A",{href:!0});var nnt=s(jD);Y7o=r(nnt,"MPNetForSequenceClassification"),nnt.forEach(t),K7o=r(S8e," (MPNet model)"),S8e.forEach(t),Z7o=i(D),Hb=n(D,"LI",{});var R8e=s(Hb);Xce=n(R8e,"STRONG",{});var snt=s(Xce);e9o=r(snt,"nystromformer"),snt.forEach(t),o9o=r(R8e," \u2014 "),DD=n(R8e,"A",{href:!0});var lnt=s(DD);r9o=r(lnt,"NystromformerForSequenceClassification"),lnt.forEach(t),t9o=r(R8e," (Nystromformer model)"),R8e.forEach(t),a9o=i(D),Ub=n(D,"LI",{});var B8e=s(Ub);zce=n(B8e,"STRONG",{});var int=s(zce);n9o=r(int,"openai-gpt"),int.forEach(t),s9o=r(B8e," \u2014 "),GD=n(B8e,"A",{href:!0});var dnt=s(GD);l9o=r(dnt,"OpenAIGPTForSequenceClassification"),dnt.forEach(t),i9o=r(B8e," (OpenAI GPT model)"),B8e.forEach(t),d9o=i(D),Jb=n(D,"LI",{});var P8e=s(Jb);Qce=n(P8e,"STRONG",{});var cnt=s(Qce);c9o=r(cnt,"perceiver"),cnt.forEach(t),f9o=r(P8e," \u2014 "),OD=n(P8e,"A",{href:!0});var fnt=s(OD);m9o=r(fnt,"PerceiverForSequenceClassification"),fnt.forEach(t),g9o=r(P8e," (Perceiver model)"),P8e.forEach(t),h9o=i(D),Yb=n(D,"LI",{});var I8e=s(Yb);Wce=n(I8e,"STRONG",{});var mnt=s(Wce);p9o=r(mnt,"plbart"),mnt.forEach(t),u9o=r(I8e," \u2014 "),VD=n(I8e,"A",{href:!0});var gnt=s(VD);_9o=r(gnt,"PLBartForSequenceClassification"),gnt.forEach(t),b9o=r(I8e," (PLBart model)"),I8e.forEach(t),v9o=i(D),Kb=n(D,"LI",{});var q8e=s(Kb);Hce=n(q8e,"STRONG",{});var hnt=s(Hce);F9o=r(hnt,"qdqbert"),hnt.forEach(t),T9o=r(q8e," \u2014 "),XD=n(q8e,"A",{href:!0});var pnt=s(XD);M9o=r(pnt,"QDQBertForSequenceClassification"),pnt.forEach(t),E9o=r(q8e," (QDQBert model)"),q8e.forEach(t),C9o=i(D),Zb=n(D,"LI",{});var N8e=s(Zb);Uce=n(N8e,"STRONG",{});var unt=s(Uce);w9o=r(unt,"reformer"),unt.forEach(t),A9o=r(N8e," \u2014 "),zD=n(N8e,"A",{href:!0});var _nt=s(zD);y9o=r(_nt,"ReformerForSequenceClassification"),_nt.forEach(t),L9o=r(N8e," (Reformer model)"),N8e.forEach(t),x9o=i(D),e4=n(D,"LI",{});var j8e=s(e4);Jce=n(j8e,"STRONG",{});var bnt=s(Jce);$9o=r(bnt,"rembert"),bnt.forEach(t),k9o=r(j8e," \u2014 "),QD=n(j8e,"A",{href:!0});var vnt=s(QD);S9o=r(vnt,"RemBertForSequenceClassification"),vnt.forEach(t),R9o=r(j8e," (RemBERT model)"),j8e.forEach(t),B9o=i(D),o4=n(D,"LI",{});var D8e=s(o4);Yce=n(D8e,"STRONG",{});var Fnt=s(Yce);P9o=r(Fnt,"roberta"),Fnt.forEach(t),I9o=r(D8e," \u2014 "),WD=n(D8e,"A",{href:!0});var Tnt=s(WD);q9o=r(Tnt,"RobertaForSequenceClassification"),Tnt.forEach(t),N9o=r(D8e," (RoBERTa model)"),D8e.forEach(t),j9o=i(D),r4=n(D,"LI",{});var G8e=s(r4);Kce=n(G8e,"STRONG",{});var Mnt=s(Kce);D9o=r(Mnt,"roformer"),Mnt.forEach(t),G9o=r(G8e," \u2014 "),HD=n(G8e,"A",{href:!0});var Ent=s(HD);O9o=r(Ent,"RoFormerForSequenceClassification"),Ent.forEach(t),V9o=r(G8e," (RoFormer model)"),G8e.forEach(t),X9o=i(D),t4=n(D,"LI",{});var O8e=s(t4);Zce=n(O8e,"STRONG",{});var Cnt=s(Zce);z9o=r(Cnt,"squeezebert"),Cnt.forEach(t),Q9o=r(O8e," \u2014 "),UD=n(O8e,"A",{href:!0});var wnt=s(UD);W9o=r(wnt,"SqueezeBertForSequenceClassification"),wnt.forEach(t),H9o=r(O8e," (SqueezeBERT model)"),O8e.forEach(t),U9o=i(D),a4=n(D,"LI",{});var V8e=s(a4);efe=n(V8e,"STRONG",{});var Ant=s(efe);J9o=r(Ant,"tapas"),Ant.forEach(t),Y9o=r(V8e," \u2014 "),JD=n(V8e,"A",{href:!0});var ynt=s(JD);K9o=r(ynt,"TapasForSequenceClassification"),ynt.forEach(t),Z9o=r(V8e," (TAPAS model)"),V8e.forEach(t),e$o=i(D),n4=n(D,"LI",{});var X8e=s(n4);ofe=n(X8e,"STRONG",{});var Lnt=s(ofe);o$o=r(Lnt,"transfo-xl"),Lnt.forEach(t),r$o=r(X8e," \u2014 "),YD=n(X8e,"A",{href:!0});var xnt=s(YD);t$o=r(xnt,"TransfoXLForSequenceClassification"),xnt.forEach(t),a$o=r(X8e," (Transformer-XL model)"),X8e.forEach(t),n$o=i(D),s4=n(D,"LI",{});var z8e=s(s4);rfe=n(z8e,"STRONG",{});var $nt=s(rfe);s$o=r($nt,"xlm"),$nt.forEach(t),l$o=r(z8e," \u2014 "),KD=n(z8e,"A",{href:!0});var knt=s(KD);i$o=r(knt,"XLMForSequenceClassification"),knt.forEach(t),d$o=r(z8e," (XLM model)"),z8e.forEach(t),c$o=i(D),l4=n(D,"LI",{});var Q8e=s(l4);tfe=n(Q8e,"STRONG",{});var Snt=s(tfe);f$o=r(Snt,"xlm-roberta"),Snt.forEach(t),m$o=r(Q8e," \u2014 "),ZD=n(Q8e,"A",{href:!0});var Rnt=s(ZD);g$o=r(Rnt,"XLMRobertaForSequenceClassification"),Rnt.forEach(t),h$o=r(Q8e," (XLM-RoBERTa model)"),Q8e.forEach(t),p$o=i(D),i4=n(D,"LI",{});var W8e=s(i4);afe=n(W8e,"STRONG",{});var Bnt=s(afe);u$o=r(Bnt,"xlm-roberta-xl"),Bnt.forEach(t),_$o=r(W8e," \u2014 "),eG=n(W8e,"A",{href:!0});var Pnt=s(eG);b$o=r(Pnt,"XLMRobertaXLForSequenceClassification"),Pnt.forEach(t),v$o=r(W8e," (XLM-RoBERTa-XL model)"),W8e.forEach(t),F$o=i(D),d4=n(D,"LI",{});var H8e=s(d4);nfe=n(H8e,"STRONG",{});var Int=s(nfe);T$o=r(Int,"xlnet"),Int.forEach(t),M$o=r(H8e," \u2014 "),oG=n(H8e,"A",{href:!0});var qnt=s(oG);E$o=r(qnt,"XLNetForSequenceClassification"),qnt.forEach(t),C$o=r(H8e," (XLNet model)"),H8e.forEach(t),w$o=i(D),c4=n(D,"LI",{});var U8e=s(c4);sfe=n(U8e,"STRONG",{});var Nnt=s(sfe);A$o=r(Nnt,"yoso"),Nnt.forEach(t),y$o=r(U8e," \u2014 "),rG=n(U8e,"A",{href:!0});var jnt=s(rG);L$o=r(jnt,"YosoForSequenceClassification"),jnt.forEach(t),x$o=r(U8e," (YOSO model)"),U8e.forEach(t),D.forEach(t),$$o=i(aa),f4=n(aa,"P",{});var J8e=s(f4);k$o=r(J8e,"The model is set in evaluation mode by default using "),lfe=n(J8e,"CODE",{});var Dnt=s(lfe);S$o=r(Dnt,"model.eval()"),Dnt.forEach(t),R$o=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(J8e,"CODE",{});var Gnt=s(ife);B$o=r(Gnt,"model.train()"),Gnt.forEach(t),J8e.forEach(t),P$o=i(aa),T(m4.$$.fragment,aa),aa.forEach(t),zs.forEach(t),bIe=i(f),Di=n(f,"H2",{class:!0});var MNe=s(Di);g4=n(MNe,"A",{id:!0,class:!0,href:!0});var Ont=s(g4);dfe=n(Ont,"SPAN",{});var Vnt=s(dfe);T(oL.$$.fragment,Vnt),Vnt.forEach(t),Ont.forEach(t),I$o=i(MNe),cfe=n(MNe,"SPAN",{});var Xnt=s(cfe);q$o=r(Xnt,"AutoModelForMultipleChoice"),Xnt.forEach(t),MNe.forEach(t),vIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(rL.$$.fragment,Qs),N$o=i(Qs),Gi=n(Qs,"P",{});var EK=s(Gi);j$o=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tG=n(EK,"A",{href:!0});var znt=s(tG);D$o=r(znt,"from_pretrained()"),znt.forEach(t),G$o=r(EK," class method or the "),aG=n(EK,"A",{href:!0});var Qnt=s(aG);O$o=r(Qnt,"from_config()"),Qnt.forEach(t),V$o=r(EK,` class
method.`),EK.forEach(t),X$o=i(Qs),tL=n(Qs,"P",{});var ENe=s(tL);z$o=r(ENe,"This class cannot be instantiated directly using "),ffe=n(ENe,"CODE",{});var Wnt=s(ffe);Q$o=r(Wnt,"__init__()"),Wnt.forEach(t),W$o=r(ENe," (throws an error)."),ENe.forEach(t),H$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var gA=s(lt);T(aL.$$.fragment,gA),U$o=i(gA),mfe=n(gA,"P",{});var Hnt=s(mfe);J$o=r(Hnt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hnt.forEach(t),Y$o=i(gA),Oi=n(gA,"P",{});var CK=s(Oi);K$o=r(CK,`Note:
Loading a model from its configuration file does `),gfe=n(CK,"STRONG",{});var Unt=s(gfe);Z$o=r(Unt,"not"),Unt.forEach(t),eko=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(CK,"A",{href:!0});var Jnt=s(nG);oko=r(Jnt,"from_pretrained()"),Jnt.forEach(t),rko=r(CK," to load the model weights."),CK.forEach(t),tko=i(gA),T(h4.$$.fragment,gA),gA.forEach(t),ako=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(nL.$$.fragment,na),nko=i(na),hfe=n(na,"P",{});var Ynt=s(hfe);sko=r(Ynt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ynt.forEach(t),lko=i(na),Sa=n(na,"P",{});var hA=s(Sa);iko=r(hA,"The model class to instantiate is selected based on the "),pfe=n(hA,"CODE",{});var Knt=s(pfe);dko=r(Knt,"model_type"),Knt.forEach(t),cko=r(hA,` property of the config object (either
passed as an argument or loaded from `),ufe=n(hA,"CODE",{});var Znt=s(ufe);fko=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),mko=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=n(hA,"CODE",{});var est=s(_fe);gko=r(est,"pretrained_model_name_or_path"),est.forEach(t),hko=r(hA,":"),hA.forEach(t),pko=i(na),Y=n(na,"UL",{});var K=s(Y);p4=n(K,"LI",{});var Y8e=s(p4);bfe=n(Y8e,"STRONG",{});var ost=s(bfe);uko=r(ost,"albert"),ost.forEach(t),_ko=r(Y8e," \u2014 "),sG=n(Y8e,"A",{href:!0});var rst=s(sG);bko=r(rst,"AlbertForMultipleChoice"),rst.forEach(t),vko=r(Y8e," (ALBERT model)"),Y8e.forEach(t),Fko=i(K),u4=n(K,"LI",{});var K8e=s(u4);vfe=n(K8e,"STRONG",{});var tst=s(vfe);Tko=r(tst,"bert"),tst.forEach(t),Mko=r(K8e," \u2014 "),lG=n(K8e,"A",{href:!0});var ast=s(lG);Eko=r(ast,"BertForMultipleChoice"),ast.forEach(t),Cko=r(K8e," (BERT model)"),K8e.forEach(t),wko=i(K),_4=n(K,"LI",{});var Z8e=s(_4);Ffe=n(Z8e,"STRONG",{});var nst=s(Ffe);Ako=r(nst,"big_bird"),nst.forEach(t),yko=r(Z8e," \u2014 "),iG=n(Z8e,"A",{href:!0});var sst=s(iG);Lko=r(sst,"BigBirdForMultipleChoice"),sst.forEach(t),xko=r(Z8e," (BigBird model)"),Z8e.forEach(t),$ko=i(K),b4=n(K,"LI",{});var exe=s(b4);Tfe=n(exe,"STRONG",{});var lst=s(Tfe);kko=r(lst,"camembert"),lst.forEach(t),Sko=r(exe," \u2014 "),dG=n(exe,"A",{href:!0});var ist=s(dG);Rko=r(ist,"CamembertForMultipleChoice"),ist.forEach(t),Bko=r(exe," (CamemBERT model)"),exe.forEach(t),Pko=i(K),v4=n(K,"LI",{});var oxe=s(v4);Mfe=n(oxe,"STRONG",{});var dst=s(Mfe);Iko=r(dst,"canine"),dst.forEach(t),qko=r(oxe," \u2014 "),cG=n(oxe,"A",{href:!0});var cst=s(cG);Nko=r(cst,"CanineForMultipleChoice"),cst.forEach(t),jko=r(oxe," (Canine model)"),oxe.forEach(t),Dko=i(K),F4=n(K,"LI",{});var rxe=s(F4);Efe=n(rxe,"STRONG",{});var fst=s(Efe);Gko=r(fst,"convbert"),fst.forEach(t),Oko=r(rxe," \u2014 "),fG=n(rxe,"A",{href:!0});var mst=s(fG);Vko=r(mst,"ConvBertForMultipleChoice"),mst.forEach(t),Xko=r(rxe," (ConvBERT model)"),rxe.forEach(t),zko=i(K),T4=n(K,"LI",{});var txe=s(T4);Cfe=n(txe,"STRONG",{});var gst=s(Cfe);Qko=r(gst,"data2vec-text"),gst.forEach(t),Wko=r(txe," \u2014 "),mG=n(txe,"A",{href:!0});var hst=s(mG);Hko=r(hst,"Data2VecTextForMultipleChoice"),hst.forEach(t),Uko=r(txe," (Data2VecText model)"),txe.forEach(t),Jko=i(K),M4=n(K,"LI",{});var axe=s(M4);wfe=n(axe,"STRONG",{});var pst=s(wfe);Yko=r(pst,"deberta-v2"),pst.forEach(t),Kko=r(axe," \u2014 "),gG=n(axe,"A",{href:!0});var ust=s(gG);Zko=r(ust,"DebertaV2ForMultipleChoice"),ust.forEach(t),eSo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),oSo=i(K),E4=n(K,"LI",{});var nxe=s(E4);Afe=n(nxe,"STRONG",{});var _st=s(Afe);rSo=r(_st,"distilbert"),_st.forEach(t),tSo=r(nxe," \u2014 "),hG=n(nxe,"A",{href:!0});var bst=s(hG);aSo=r(bst,"DistilBertForMultipleChoice"),bst.forEach(t),nSo=r(nxe," (DistilBERT model)"),nxe.forEach(t),sSo=i(K),C4=n(K,"LI",{});var sxe=s(C4);yfe=n(sxe,"STRONG",{});var vst=s(yfe);lSo=r(vst,"electra"),vst.forEach(t),iSo=r(sxe," \u2014 "),pG=n(sxe,"A",{href:!0});var Fst=s(pG);dSo=r(Fst,"ElectraForMultipleChoice"),Fst.forEach(t),cSo=r(sxe," (ELECTRA model)"),sxe.forEach(t),fSo=i(K),w4=n(K,"LI",{});var lxe=s(w4);Lfe=n(lxe,"STRONG",{});var Tst=s(Lfe);mSo=r(Tst,"flaubert"),Tst.forEach(t),gSo=r(lxe," \u2014 "),uG=n(lxe,"A",{href:!0});var Mst=s(uG);hSo=r(Mst,"FlaubertForMultipleChoice"),Mst.forEach(t),pSo=r(lxe," (FlauBERT model)"),lxe.forEach(t),uSo=i(K),A4=n(K,"LI",{});var ixe=s(A4);xfe=n(ixe,"STRONG",{});var Est=s(xfe);_So=r(Est,"fnet"),Est.forEach(t),bSo=r(ixe," \u2014 "),_G=n(ixe,"A",{href:!0});var Cst=s(_G);vSo=r(Cst,"FNetForMultipleChoice"),Cst.forEach(t),FSo=r(ixe," (FNet model)"),ixe.forEach(t),TSo=i(K),y4=n(K,"LI",{});var dxe=s(y4);$fe=n(dxe,"STRONG",{});var wst=s($fe);MSo=r(wst,"funnel"),wst.forEach(t),ESo=r(dxe," \u2014 "),bG=n(dxe,"A",{href:!0});var Ast=s(bG);CSo=r(Ast,"FunnelForMultipleChoice"),Ast.forEach(t),wSo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),ASo=i(K),L4=n(K,"LI",{});var cxe=s(L4);kfe=n(cxe,"STRONG",{});var yst=s(kfe);ySo=r(yst,"ibert"),yst.forEach(t),LSo=r(cxe," \u2014 "),vG=n(cxe,"A",{href:!0});var Lst=s(vG);xSo=r(Lst,"IBertForMultipleChoice"),Lst.forEach(t),$So=r(cxe," (I-BERT model)"),cxe.forEach(t),kSo=i(K),x4=n(K,"LI",{});var fxe=s(x4);Sfe=n(fxe,"STRONG",{});var xst=s(Sfe);SSo=r(xst,"longformer"),xst.forEach(t),RSo=r(fxe," \u2014 "),FG=n(fxe,"A",{href:!0});var $st=s(FG);BSo=r($st,"LongformerForMultipleChoice"),$st.forEach(t),PSo=r(fxe," (Longformer model)"),fxe.forEach(t),ISo=i(K),$4=n(K,"LI",{});var mxe=s($4);Rfe=n(mxe,"STRONG",{});var kst=s(Rfe);qSo=r(kst,"megatron-bert"),kst.forEach(t),NSo=r(mxe," \u2014 "),TG=n(mxe,"A",{href:!0});var Sst=s(TG);jSo=r(Sst,"MegatronBertForMultipleChoice"),Sst.forEach(t),DSo=r(mxe," (MegatronBert model)"),mxe.forEach(t),GSo=i(K),k4=n(K,"LI",{});var gxe=s(k4);Bfe=n(gxe,"STRONG",{});var Rst=s(Bfe);OSo=r(Rst,"mobilebert"),Rst.forEach(t),VSo=r(gxe," \u2014 "),MG=n(gxe,"A",{href:!0});var Bst=s(MG);XSo=r(Bst,"MobileBertForMultipleChoice"),Bst.forEach(t),zSo=r(gxe," (MobileBERT model)"),gxe.forEach(t),QSo=i(K),S4=n(K,"LI",{});var hxe=s(S4);Pfe=n(hxe,"STRONG",{});var Pst=s(Pfe);WSo=r(Pst,"mpnet"),Pst.forEach(t),HSo=r(hxe," \u2014 "),EG=n(hxe,"A",{href:!0});var Ist=s(EG);USo=r(Ist,"MPNetForMultipleChoice"),Ist.forEach(t),JSo=r(hxe," (MPNet model)"),hxe.forEach(t),YSo=i(K),R4=n(K,"LI",{});var pxe=s(R4);Ife=n(pxe,"STRONG",{});var qst=s(Ife);KSo=r(qst,"nystromformer"),qst.forEach(t),ZSo=r(pxe," \u2014 "),CG=n(pxe,"A",{href:!0});var Nst=s(CG);eRo=r(Nst,"NystromformerForMultipleChoice"),Nst.forEach(t),oRo=r(pxe," (Nystromformer model)"),pxe.forEach(t),rRo=i(K),B4=n(K,"LI",{});var uxe=s(B4);qfe=n(uxe,"STRONG",{});var jst=s(qfe);tRo=r(jst,"qdqbert"),jst.forEach(t),aRo=r(uxe," \u2014 "),wG=n(uxe,"A",{href:!0});var Dst=s(wG);nRo=r(Dst,"QDQBertForMultipleChoice"),Dst.forEach(t),sRo=r(uxe," (QDQBert model)"),uxe.forEach(t),lRo=i(K),P4=n(K,"LI",{});var _xe=s(P4);Nfe=n(_xe,"STRONG",{});var Gst=s(Nfe);iRo=r(Gst,"rembert"),Gst.forEach(t),dRo=r(_xe," \u2014 "),AG=n(_xe,"A",{href:!0});var Ost=s(AG);cRo=r(Ost,"RemBertForMultipleChoice"),Ost.forEach(t),fRo=r(_xe," (RemBERT model)"),_xe.forEach(t),mRo=i(K),I4=n(K,"LI",{});var bxe=s(I4);jfe=n(bxe,"STRONG",{});var Vst=s(jfe);gRo=r(Vst,"roberta"),Vst.forEach(t),hRo=r(bxe," \u2014 "),yG=n(bxe,"A",{href:!0});var Xst=s(yG);pRo=r(Xst,"RobertaForMultipleChoice"),Xst.forEach(t),uRo=r(bxe," (RoBERTa model)"),bxe.forEach(t),_Ro=i(K),q4=n(K,"LI",{});var vxe=s(q4);Dfe=n(vxe,"STRONG",{});var zst=s(Dfe);bRo=r(zst,"roformer"),zst.forEach(t),vRo=r(vxe," \u2014 "),LG=n(vxe,"A",{href:!0});var Qst=s(LG);FRo=r(Qst,"RoFormerForMultipleChoice"),Qst.forEach(t),TRo=r(vxe," (RoFormer model)"),vxe.forEach(t),MRo=i(K),N4=n(K,"LI",{});var Fxe=s(N4);Gfe=n(Fxe,"STRONG",{});var Wst=s(Gfe);ERo=r(Wst,"squeezebert"),Wst.forEach(t),CRo=r(Fxe," \u2014 "),xG=n(Fxe,"A",{href:!0});var Hst=s(xG);wRo=r(Hst,"SqueezeBertForMultipleChoice"),Hst.forEach(t),ARo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),yRo=i(K),j4=n(K,"LI",{});var Txe=s(j4);Ofe=n(Txe,"STRONG",{});var Ust=s(Ofe);LRo=r(Ust,"xlm"),Ust.forEach(t),xRo=r(Txe," \u2014 "),$G=n(Txe,"A",{href:!0});var Jst=s($G);$Ro=r(Jst,"XLMForMultipleChoice"),Jst.forEach(t),kRo=r(Txe," (XLM model)"),Txe.forEach(t),SRo=i(K),D4=n(K,"LI",{});var Mxe=s(D4);Vfe=n(Mxe,"STRONG",{});var Yst=s(Vfe);RRo=r(Yst,"xlm-roberta"),Yst.forEach(t),BRo=r(Mxe," \u2014 "),kG=n(Mxe,"A",{href:!0});var Kst=s(kG);PRo=r(Kst,"XLMRobertaForMultipleChoice"),Kst.forEach(t),IRo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),qRo=i(K),G4=n(K,"LI",{});var Exe=s(G4);Xfe=n(Exe,"STRONG",{});var Zst=s(Xfe);NRo=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),jRo=r(Exe," \u2014 "),SG=n(Exe,"A",{href:!0});var elt=s(SG);DRo=r(elt,"XLMRobertaXLForMultipleChoice"),elt.forEach(t),GRo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),ORo=i(K),O4=n(K,"LI",{});var Cxe=s(O4);zfe=n(Cxe,"STRONG",{});var olt=s(zfe);VRo=r(olt,"xlnet"),olt.forEach(t),XRo=r(Cxe," \u2014 "),RG=n(Cxe,"A",{href:!0});var rlt=s(RG);zRo=r(rlt,"XLNetForMultipleChoice"),rlt.forEach(t),QRo=r(Cxe," (XLNet model)"),Cxe.forEach(t),WRo=i(K),V4=n(K,"LI",{});var wxe=s(V4);Qfe=n(wxe,"STRONG",{});var tlt=s(Qfe);HRo=r(tlt,"yoso"),tlt.forEach(t),URo=r(wxe," \u2014 "),BG=n(wxe,"A",{href:!0});var alt=s(BG);JRo=r(alt,"YosoForMultipleChoice"),alt.forEach(t),YRo=r(wxe," (YOSO model)"),wxe.forEach(t),K.forEach(t),KRo=i(na),X4=n(na,"P",{});var Axe=s(X4);ZRo=r(Axe,"The model is set in evaluation mode by default using "),Wfe=n(Axe,"CODE",{});var nlt=s(Wfe);eBo=r(nlt,"model.eval()"),nlt.forEach(t),oBo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hfe=n(Axe,"CODE",{});var slt=s(Hfe);rBo=r(slt,"model.train()"),slt.forEach(t),Axe.forEach(t),tBo=i(na),T(z4.$$.fragment,na),na.forEach(t),Qs.forEach(t),FIe=i(f),Vi=n(f,"H2",{class:!0});var CNe=s(Vi);Q4=n(CNe,"A",{id:!0,class:!0,href:!0});var llt=s(Q4);Ufe=n(llt,"SPAN",{});var ilt=s(Ufe);T(sL.$$.fragment,ilt),ilt.forEach(t),llt.forEach(t),aBo=i(CNe),Jfe=n(CNe,"SPAN",{});var dlt=s(Jfe);nBo=r(dlt,"AutoModelForNextSentencePrediction"),dlt.forEach(t),CNe.forEach(t),TIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(lL.$$.fragment,Ws),sBo=i(Ws),Xi=n(Ws,"P",{});var wK=s(Xi);lBo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PG=n(wK,"A",{href:!0});var clt=s(PG);iBo=r(clt,"from_pretrained()"),clt.forEach(t),dBo=r(wK," class method or the "),IG=n(wK,"A",{href:!0});var flt=s(IG);cBo=r(flt,"from_config()"),flt.forEach(t),fBo=r(wK,` class
method.`),wK.forEach(t),mBo=i(Ws),iL=n(Ws,"P",{});var wNe=s(iL);gBo=r(wNe,"This class cannot be instantiated directly using "),Yfe=n(wNe,"CODE",{});var mlt=s(Yfe);hBo=r(mlt,"__init__()"),mlt.forEach(t),pBo=r(wNe," (throws an error)."),wNe.forEach(t),uBo=i(Ws),it=n(Ws,"DIV",{class:!0});var pA=s(it);T(dL.$$.fragment,pA),_Bo=i(pA),Kfe=n(pA,"P",{});var glt=s(Kfe);bBo=r(glt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),glt.forEach(t),vBo=i(pA),zi=n(pA,"P",{});var AK=s(zi);FBo=r(AK,`Note:
Loading a model from its configuration file does `),Zfe=n(AK,"STRONG",{});var hlt=s(Zfe);TBo=r(hlt,"not"),hlt.forEach(t),MBo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(AK,"A",{href:!0});var plt=s(qG);EBo=r(plt,"from_pretrained()"),plt.forEach(t),CBo=r(AK," to load the model weights."),AK.forEach(t),wBo=i(pA),T(W4.$$.fragment,pA),pA.forEach(t),ABo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(cL.$$.fragment,sa),yBo=i(sa),eme=n(sa,"P",{});var ult=s(eme);LBo=r(ult,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ult.forEach(t),xBo=i(sa),Ra=n(sa,"P",{});var uA=s(Ra);$Bo=r(uA,"The model class to instantiate is selected based on the "),ome=n(uA,"CODE",{});var _lt=s(ome);kBo=r(_lt,"model_type"),_lt.forEach(t),SBo=r(uA,` property of the config object (either
passed as an argument or loaded from `),rme=n(uA,"CODE",{});var blt=s(rme);RBo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),BBo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(uA,"CODE",{});var vlt=s(tme);PBo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),IBo=r(uA,":"),uA.forEach(t),qBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);H4=n(Hs,"LI",{});var yxe=s(H4);ame=n(yxe,"STRONG",{});var Flt=s(ame);NBo=r(Flt,"bert"),Flt.forEach(t),jBo=r(yxe," \u2014 "),NG=n(yxe,"A",{href:!0});var Tlt=s(NG);DBo=r(Tlt,"BertForNextSentencePrediction"),Tlt.forEach(t),GBo=r(yxe," (BERT model)"),yxe.forEach(t),OBo=i(Hs),U4=n(Hs,"LI",{});var Lxe=s(U4);nme=n(Lxe,"STRONG",{});var Mlt=s(nme);VBo=r(Mlt,"fnet"),Mlt.forEach(t),XBo=r(Lxe," \u2014 "),jG=n(Lxe,"A",{href:!0});var Elt=s(jG);zBo=r(Elt,"FNetForNextSentencePrediction"),Elt.forEach(t),QBo=r(Lxe," (FNet model)"),Lxe.forEach(t),WBo=i(Hs),J4=n(Hs,"LI",{});var xxe=s(J4);sme=n(xxe,"STRONG",{});var Clt=s(sme);HBo=r(Clt,"megatron-bert"),Clt.forEach(t),UBo=r(xxe," \u2014 "),DG=n(xxe,"A",{href:!0});var wlt=s(DG);JBo=r(wlt,"MegatronBertForNextSentencePrediction"),wlt.forEach(t),YBo=r(xxe," (MegatronBert model)"),xxe.forEach(t),KBo=i(Hs),Y4=n(Hs,"LI",{});var $xe=s(Y4);lme=n($xe,"STRONG",{});var Alt=s(lme);ZBo=r(Alt,"mobilebert"),Alt.forEach(t),ePo=r($xe," \u2014 "),GG=n($xe,"A",{href:!0});var ylt=s(GG);oPo=r(ylt,"MobileBertForNextSentencePrediction"),ylt.forEach(t),rPo=r($xe," (MobileBERT model)"),$xe.forEach(t),tPo=i(Hs),K4=n(Hs,"LI",{});var kxe=s(K4);ime=n(kxe,"STRONG",{});var Llt=s(ime);aPo=r(Llt,"qdqbert"),Llt.forEach(t),nPo=r(kxe," \u2014 "),OG=n(kxe,"A",{href:!0});var xlt=s(OG);sPo=r(xlt,"QDQBertForNextSentencePrediction"),xlt.forEach(t),lPo=r(kxe," (QDQBert model)"),kxe.forEach(t),Hs.forEach(t),iPo=i(sa),Z4=n(sa,"P",{});var Sxe=s(Z4);dPo=r(Sxe,"The model is set in evaluation mode by default using "),dme=n(Sxe,"CODE",{});var $lt=s(dme);cPo=r($lt,"model.eval()"),$lt.forEach(t),fPo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(Sxe,"CODE",{});var klt=s(cme);mPo=r(klt,"model.train()"),klt.forEach(t),Sxe.forEach(t),gPo=i(sa),T(e2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),MIe=i(f),Qi=n(f,"H2",{class:!0});var ANe=s(Qi);o2=n(ANe,"A",{id:!0,class:!0,href:!0});var Slt=s(o2);fme=n(Slt,"SPAN",{});var Rlt=s(fme);T(fL.$$.fragment,Rlt),Rlt.forEach(t),Slt.forEach(t),hPo=i(ANe),mme=n(ANe,"SPAN",{});var Blt=s(mme);pPo=r(Blt,"AutoModelForTokenClassification"),Blt.forEach(t),ANe.forEach(t),EIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(mL.$$.fragment,Us),uPo=i(Us),Wi=n(Us,"P",{});var yK=s(Wi);_Po=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VG=n(yK,"A",{href:!0});var Plt=s(VG);bPo=r(Plt,"from_pretrained()"),Plt.forEach(t),vPo=r(yK," class method or the "),XG=n(yK,"A",{href:!0});var Ilt=s(XG);FPo=r(Ilt,"from_config()"),Ilt.forEach(t),TPo=r(yK,` class
method.`),yK.forEach(t),MPo=i(Us),gL=n(Us,"P",{});var yNe=s(gL);EPo=r(yNe,"This class cannot be instantiated directly using "),gme=n(yNe,"CODE",{});var qlt=s(gme);CPo=r(qlt,"__init__()"),qlt.forEach(t),wPo=r(yNe," (throws an error)."),yNe.forEach(t),APo=i(Us),dt=n(Us,"DIV",{class:!0});var _A=s(dt);T(hL.$$.fragment,_A),yPo=i(_A),hme=n(_A,"P",{});var Nlt=s(hme);LPo=r(Nlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nlt.forEach(t),xPo=i(_A),Hi=n(_A,"P",{});var LK=s(Hi);$Po=r(LK,`Note:
Loading a model from its configuration file does `),pme=n(LK,"STRONG",{});var jlt=s(pme);kPo=r(jlt,"not"),jlt.forEach(t),SPo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(LK,"A",{href:!0});var Dlt=s(zG);RPo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),BPo=r(LK," to load the model weights."),LK.forEach(t),PPo=i(_A),T(r2.$$.fragment,_A),_A.forEach(t),IPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(pL.$$.fragment,la),qPo=i(la),ume=n(la,"P",{});var Glt=s(ume);NPo=r(Glt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Glt.forEach(t),jPo=i(la),Ba=n(la,"P",{});var bA=s(Ba);DPo=r(bA,"The model class to instantiate is selected based on the "),_me=n(bA,"CODE",{});var Olt=s(_me);GPo=r(Olt,"model_type"),Olt.forEach(t),OPo=r(bA,` property of the config object (either
passed as an argument or loaded from `),bme=n(bA,"CODE",{});var Vlt=s(bme);VPo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),XPo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(bA,"CODE",{});var Xlt=s(vme);zPo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),QPo=r(bA,":"),bA.forEach(t),WPo=i(la),U=n(la,"UL",{});var J=s(U);t2=n(J,"LI",{});var Rxe=s(t2);Fme=n(Rxe,"STRONG",{});var zlt=s(Fme);HPo=r(zlt,"albert"),zlt.forEach(t),UPo=r(Rxe," \u2014 "),QG=n(Rxe,"A",{href:!0});var Qlt=s(QG);JPo=r(Qlt,"AlbertForTokenClassification"),Qlt.forEach(t),YPo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),KPo=i(J),a2=n(J,"LI",{});var Bxe=s(a2);Tme=n(Bxe,"STRONG",{});var Wlt=s(Tme);ZPo=r(Wlt,"bert"),Wlt.forEach(t),eIo=r(Bxe," \u2014 "),WG=n(Bxe,"A",{href:!0});var Hlt=s(WG);oIo=r(Hlt,"BertForTokenClassification"),Hlt.forEach(t),rIo=r(Bxe," (BERT model)"),Bxe.forEach(t),tIo=i(J),n2=n(J,"LI",{});var Pxe=s(n2);Mme=n(Pxe,"STRONG",{});var Ult=s(Mme);aIo=r(Ult,"big_bird"),Ult.forEach(t),nIo=r(Pxe," \u2014 "),HG=n(Pxe,"A",{href:!0});var Jlt=s(HG);sIo=r(Jlt,"BigBirdForTokenClassification"),Jlt.forEach(t),lIo=r(Pxe," (BigBird model)"),Pxe.forEach(t),iIo=i(J),s2=n(J,"LI",{});var Ixe=s(s2);Eme=n(Ixe,"STRONG",{});var Ylt=s(Eme);dIo=r(Ylt,"camembert"),Ylt.forEach(t),cIo=r(Ixe," \u2014 "),UG=n(Ixe,"A",{href:!0});var Klt=s(UG);fIo=r(Klt,"CamembertForTokenClassification"),Klt.forEach(t),mIo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),gIo=i(J),l2=n(J,"LI",{});var qxe=s(l2);Cme=n(qxe,"STRONG",{});var Zlt=s(Cme);hIo=r(Zlt,"canine"),Zlt.forEach(t),pIo=r(qxe," \u2014 "),JG=n(qxe,"A",{href:!0});var eit=s(JG);uIo=r(eit,"CanineForTokenClassification"),eit.forEach(t),_Io=r(qxe," (Canine model)"),qxe.forEach(t),bIo=i(J),i2=n(J,"LI",{});var Nxe=s(i2);wme=n(Nxe,"STRONG",{});var oit=s(wme);vIo=r(oit,"convbert"),oit.forEach(t),FIo=r(Nxe," \u2014 "),YG=n(Nxe,"A",{href:!0});var rit=s(YG);TIo=r(rit,"ConvBertForTokenClassification"),rit.forEach(t),MIo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),EIo=i(J),d2=n(J,"LI",{});var jxe=s(d2);Ame=n(jxe,"STRONG",{});var tit=s(Ame);CIo=r(tit,"data2vec-text"),tit.forEach(t),wIo=r(jxe," \u2014 "),KG=n(jxe,"A",{href:!0});var ait=s(KG);AIo=r(ait,"Data2VecTextForTokenClassification"),ait.forEach(t),yIo=r(jxe," (Data2VecText model)"),jxe.forEach(t),LIo=i(J),c2=n(J,"LI",{});var Dxe=s(c2);yme=n(Dxe,"STRONG",{});var nit=s(yme);xIo=r(nit,"deberta"),nit.forEach(t),$Io=r(Dxe," \u2014 "),ZG=n(Dxe,"A",{href:!0});var sit=s(ZG);kIo=r(sit,"DebertaForTokenClassification"),sit.forEach(t),SIo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),RIo=i(J),f2=n(J,"LI",{});var Gxe=s(f2);Lme=n(Gxe,"STRONG",{});var lit=s(Lme);BIo=r(lit,"deberta-v2"),lit.forEach(t),PIo=r(Gxe," \u2014 "),eO=n(Gxe,"A",{href:!0});var iit=s(eO);IIo=r(iit,"DebertaV2ForTokenClassification"),iit.forEach(t),qIo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),NIo=i(J),m2=n(J,"LI",{});var Oxe=s(m2);xme=n(Oxe,"STRONG",{});var dit=s(xme);jIo=r(dit,"distilbert"),dit.forEach(t),DIo=r(Oxe," \u2014 "),oO=n(Oxe,"A",{href:!0});var cit=s(oO);GIo=r(cit,"DistilBertForTokenClassification"),cit.forEach(t),OIo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),VIo=i(J),g2=n(J,"LI",{});var Vxe=s(g2);$me=n(Vxe,"STRONG",{});var fit=s($me);XIo=r(fit,"electra"),fit.forEach(t),zIo=r(Vxe," \u2014 "),rO=n(Vxe,"A",{href:!0});var mit=s(rO);QIo=r(mit,"ElectraForTokenClassification"),mit.forEach(t),WIo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),HIo=i(J),h2=n(J,"LI",{});var Xxe=s(h2);kme=n(Xxe,"STRONG",{});var git=s(kme);UIo=r(git,"flaubert"),git.forEach(t),JIo=r(Xxe," \u2014 "),tO=n(Xxe,"A",{href:!0});var hit=s(tO);YIo=r(hit,"FlaubertForTokenClassification"),hit.forEach(t),KIo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),ZIo=i(J),p2=n(J,"LI",{});var zxe=s(p2);Sme=n(zxe,"STRONG",{});var pit=s(Sme);eqo=r(pit,"fnet"),pit.forEach(t),oqo=r(zxe," \u2014 "),aO=n(zxe,"A",{href:!0});var uit=s(aO);rqo=r(uit,"FNetForTokenClassification"),uit.forEach(t),tqo=r(zxe," (FNet model)"),zxe.forEach(t),aqo=i(J),u2=n(J,"LI",{});var Qxe=s(u2);Rme=n(Qxe,"STRONG",{});var _it=s(Rme);nqo=r(_it,"funnel"),_it.forEach(t),sqo=r(Qxe," \u2014 "),nO=n(Qxe,"A",{href:!0});var bit=s(nO);lqo=r(bit,"FunnelForTokenClassification"),bit.forEach(t),iqo=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),dqo=i(J),_2=n(J,"LI",{});var Wxe=s(_2);Bme=n(Wxe,"STRONG",{});var vit=s(Bme);cqo=r(vit,"gpt2"),vit.forEach(t),fqo=r(Wxe," \u2014 "),sO=n(Wxe,"A",{href:!0});var Fit=s(sO);mqo=r(Fit,"GPT2ForTokenClassification"),Fit.forEach(t),gqo=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),hqo=i(J),b2=n(J,"LI",{});var Hxe=s(b2);Pme=n(Hxe,"STRONG",{});var Tit=s(Pme);pqo=r(Tit,"ibert"),Tit.forEach(t),uqo=r(Hxe," \u2014 "),lO=n(Hxe,"A",{href:!0});var Mit=s(lO);_qo=r(Mit,"IBertForTokenClassification"),Mit.forEach(t),bqo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),vqo=i(J),v2=n(J,"LI",{});var Uxe=s(v2);Ime=n(Uxe,"STRONG",{});var Eit=s(Ime);Fqo=r(Eit,"layoutlm"),Eit.forEach(t),Tqo=r(Uxe," \u2014 "),iO=n(Uxe,"A",{href:!0});var Cit=s(iO);Mqo=r(Cit,"LayoutLMForTokenClassification"),Cit.forEach(t),Eqo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),Cqo=i(J),F2=n(J,"LI",{});var Jxe=s(F2);qme=n(Jxe,"STRONG",{});var wit=s(qme);wqo=r(wit,"layoutlmv2"),wit.forEach(t),Aqo=r(Jxe," \u2014 "),dO=n(Jxe,"A",{href:!0});var Ait=s(dO);yqo=r(Ait,"LayoutLMv2ForTokenClassification"),Ait.forEach(t),Lqo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),xqo=i(J),T2=n(J,"LI",{});var Yxe=s(T2);Nme=n(Yxe,"STRONG",{});var yit=s(Nme);$qo=r(yit,"longformer"),yit.forEach(t),kqo=r(Yxe," \u2014 "),cO=n(Yxe,"A",{href:!0});var Lit=s(cO);Sqo=r(Lit,"LongformerForTokenClassification"),Lit.forEach(t),Rqo=r(Yxe," (Longformer model)"),Yxe.forEach(t),Bqo=i(J),M2=n(J,"LI",{});var Kxe=s(M2);jme=n(Kxe,"STRONG",{});var xit=s(jme);Pqo=r(xit,"megatron-bert"),xit.forEach(t),Iqo=r(Kxe," \u2014 "),fO=n(Kxe,"A",{href:!0});var $it=s(fO);qqo=r($it,"MegatronBertForTokenClassification"),$it.forEach(t),Nqo=r(Kxe," (MegatronBert model)"),Kxe.forEach(t),jqo=i(J),E2=n(J,"LI",{});var Zxe=s(E2);Dme=n(Zxe,"STRONG",{});var kit=s(Dme);Dqo=r(kit,"mobilebert"),kit.forEach(t),Gqo=r(Zxe," \u2014 "),mO=n(Zxe,"A",{href:!0});var Sit=s(mO);Oqo=r(Sit,"MobileBertForTokenClassification"),Sit.forEach(t),Vqo=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),Xqo=i(J),C2=n(J,"LI",{});var e7e=s(C2);Gme=n(e7e,"STRONG",{});var Rit=s(Gme);zqo=r(Rit,"mpnet"),Rit.forEach(t),Qqo=r(e7e," \u2014 "),gO=n(e7e,"A",{href:!0});var Bit=s(gO);Wqo=r(Bit,"MPNetForTokenClassification"),Bit.forEach(t),Hqo=r(e7e," (MPNet model)"),e7e.forEach(t),Uqo=i(J),w2=n(J,"LI",{});var o7e=s(w2);Ome=n(o7e,"STRONG",{});var Pit=s(Ome);Jqo=r(Pit,"nystromformer"),Pit.forEach(t),Yqo=r(o7e," \u2014 "),hO=n(o7e,"A",{href:!0});var Iit=s(hO);Kqo=r(Iit,"NystromformerForTokenClassification"),Iit.forEach(t),Zqo=r(o7e," (Nystromformer model)"),o7e.forEach(t),eNo=i(J),A2=n(J,"LI",{});var r7e=s(A2);Vme=n(r7e,"STRONG",{});var qit=s(Vme);oNo=r(qit,"qdqbert"),qit.forEach(t),rNo=r(r7e," \u2014 "),pO=n(r7e,"A",{href:!0});var Nit=s(pO);tNo=r(Nit,"QDQBertForTokenClassification"),Nit.forEach(t),aNo=r(r7e," (QDQBert model)"),r7e.forEach(t),nNo=i(J),y2=n(J,"LI",{});var t7e=s(y2);Xme=n(t7e,"STRONG",{});var jit=s(Xme);sNo=r(jit,"rembert"),jit.forEach(t),lNo=r(t7e," \u2014 "),uO=n(t7e,"A",{href:!0});var Dit=s(uO);iNo=r(Dit,"RemBertForTokenClassification"),Dit.forEach(t),dNo=r(t7e," (RemBERT model)"),t7e.forEach(t),cNo=i(J),L2=n(J,"LI",{});var a7e=s(L2);zme=n(a7e,"STRONG",{});var Git=s(zme);fNo=r(Git,"roberta"),Git.forEach(t),mNo=r(a7e," \u2014 "),_O=n(a7e,"A",{href:!0});var Oit=s(_O);gNo=r(Oit,"RobertaForTokenClassification"),Oit.forEach(t),hNo=r(a7e," (RoBERTa model)"),a7e.forEach(t),pNo=i(J),x2=n(J,"LI",{});var n7e=s(x2);Qme=n(n7e,"STRONG",{});var Vit=s(Qme);uNo=r(Vit,"roformer"),Vit.forEach(t),_No=r(n7e," \u2014 "),bO=n(n7e,"A",{href:!0});var Xit=s(bO);bNo=r(Xit,"RoFormerForTokenClassification"),Xit.forEach(t),vNo=r(n7e," (RoFormer model)"),n7e.forEach(t),FNo=i(J),$2=n(J,"LI",{});var s7e=s($2);Wme=n(s7e,"STRONG",{});var zit=s(Wme);TNo=r(zit,"squeezebert"),zit.forEach(t),MNo=r(s7e," \u2014 "),vO=n(s7e,"A",{href:!0});var Qit=s(vO);ENo=r(Qit,"SqueezeBertForTokenClassification"),Qit.forEach(t),CNo=r(s7e," (SqueezeBERT model)"),s7e.forEach(t),wNo=i(J),k2=n(J,"LI",{});var l7e=s(k2);Hme=n(l7e,"STRONG",{});var Wit=s(Hme);ANo=r(Wit,"xlm"),Wit.forEach(t),yNo=r(l7e," \u2014 "),FO=n(l7e,"A",{href:!0});var Hit=s(FO);LNo=r(Hit,"XLMForTokenClassification"),Hit.forEach(t),xNo=r(l7e," (XLM model)"),l7e.forEach(t),$No=i(J),S2=n(J,"LI",{});var i7e=s(S2);Ume=n(i7e,"STRONG",{});var Uit=s(Ume);kNo=r(Uit,"xlm-roberta"),Uit.forEach(t),SNo=r(i7e," \u2014 "),TO=n(i7e,"A",{href:!0});var Jit=s(TO);RNo=r(Jit,"XLMRobertaForTokenClassification"),Jit.forEach(t),BNo=r(i7e," (XLM-RoBERTa model)"),i7e.forEach(t),PNo=i(J),R2=n(J,"LI",{});var d7e=s(R2);Jme=n(d7e,"STRONG",{});var Yit=s(Jme);INo=r(Yit,"xlm-roberta-xl"),Yit.forEach(t),qNo=r(d7e," \u2014 "),MO=n(d7e,"A",{href:!0});var Kit=s(MO);NNo=r(Kit,"XLMRobertaXLForTokenClassification"),Kit.forEach(t),jNo=r(d7e," (XLM-RoBERTa-XL model)"),d7e.forEach(t),DNo=i(J),B2=n(J,"LI",{});var c7e=s(B2);Yme=n(c7e,"STRONG",{});var Zit=s(Yme);GNo=r(Zit,"xlnet"),Zit.forEach(t),ONo=r(c7e," \u2014 "),EO=n(c7e,"A",{href:!0});var edt=s(EO);VNo=r(edt,"XLNetForTokenClassification"),edt.forEach(t),XNo=r(c7e," (XLNet model)"),c7e.forEach(t),zNo=i(J),P2=n(J,"LI",{});var f7e=s(P2);Kme=n(f7e,"STRONG",{});var odt=s(Kme);QNo=r(odt,"yoso"),odt.forEach(t),WNo=r(f7e," \u2014 "),CO=n(f7e,"A",{href:!0});var rdt=s(CO);HNo=r(rdt,"YosoForTokenClassification"),rdt.forEach(t),UNo=r(f7e," (YOSO model)"),f7e.forEach(t),J.forEach(t),JNo=i(la),I2=n(la,"P",{});var m7e=s(I2);YNo=r(m7e,"The model is set in evaluation mode by default using "),Zme=n(m7e,"CODE",{});var tdt=s(Zme);KNo=r(tdt,"model.eval()"),tdt.forEach(t),ZNo=r(m7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(m7e,"CODE",{});var adt=s(ege);ejo=r(adt,"model.train()"),adt.forEach(t),m7e.forEach(t),ojo=i(la),T(q2.$$.fragment,la),la.forEach(t),Us.forEach(t),CIe=i(f),Ui=n(f,"H2",{class:!0});var LNe=s(Ui);N2=n(LNe,"A",{id:!0,class:!0,href:!0});var ndt=s(N2);oge=n(ndt,"SPAN",{});var sdt=s(oge);T(uL.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),rjo=i(LNe),rge=n(LNe,"SPAN",{});var ldt=s(rge);tjo=r(ldt,"AutoModelForQuestionAnswering"),ldt.forEach(t),LNe.forEach(t),wIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(_L.$$.fragment,Js),ajo=i(Js),Ji=n(Js,"P",{});var xK=s(Ji);njo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wO=n(xK,"A",{href:!0});var idt=s(wO);sjo=r(idt,"from_pretrained()"),idt.forEach(t),ljo=r(xK," class method or the "),AO=n(xK,"A",{href:!0});var ddt=s(AO);ijo=r(ddt,"from_config()"),ddt.forEach(t),djo=r(xK,` class
method.`),xK.forEach(t),cjo=i(Js),bL=n(Js,"P",{});var xNe=s(bL);fjo=r(xNe,"This class cannot be instantiated directly using "),tge=n(xNe,"CODE",{});var cdt=s(tge);mjo=r(cdt,"__init__()"),cdt.forEach(t),gjo=r(xNe," (throws an error)."),xNe.forEach(t),hjo=i(Js),ct=n(Js,"DIV",{class:!0});var vA=s(ct);T(vL.$$.fragment,vA),pjo=i(vA),age=n(vA,"P",{});var fdt=s(age);ujo=r(fdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fdt.forEach(t),_jo=i(vA),Yi=n(vA,"P",{});var $K=s(Yi);bjo=r($K,`Note:
Loading a model from its configuration file does `),nge=n($K,"STRONG",{});var mdt=s(nge);vjo=r(mdt,"not"),mdt.forEach(t),Fjo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n($K,"A",{href:!0});var gdt=s(yO);Tjo=r(gdt,"from_pretrained()"),gdt.forEach(t),Mjo=r($K," to load the model weights."),$K.forEach(t),Ejo=i(vA),T(j2.$$.fragment,vA),vA.forEach(t),Cjo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(FL.$$.fragment,ia),wjo=i(ia),sge=n(ia,"P",{});var hdt=s(sge);Ajo=r(hdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hdt.forEach(t),yjo=i(ia),Pa=n(ia,"P",{});var FA=s(Pa);Ljo=r(FA,"The model class to instantiate is selected based on the "),lge=n(FA,"CODE",{});var pdt=s(lge);xjo=r(pdt,"model_type"),pdt.forEach(t),$jo=r(FA,` property of the config object (either
passed as an argument or loaded from `),ige=n(FA,"CODE",{});var udt=s(ige);kjo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),Sjo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(FA,"CODE",{});var _dt=s(dge);Rjo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),Bjo=r(FA,":"),FA.forEach(t),Pjo=i(ia),O=n(ia,"UL",{});var X=s(O);D2=n(X,"LI",{});var g7e=s(D2);cge=n(g7e,"STRONG",{});var bdt=s(cge);Ijo=r(bdt,"albert"),bdt.forEach(t),qjo=r(g7e," \u2014 "),LO=n(g7e,"A",{href:!0});var vdt=s(LO);Njo=r(vdt,"AlbertForQuestionAnswering"),vdt.forEach(t),jjo=r(g7e," (ALBERT model)"),g7e.forEach(t),Djo=i(X),G2=n(X,"LI",{});var h7e=s(G2);fge=n(h7e,"STRONG",{});var Fdt=s(fge);Gjo=r(Fdt,"bart"),Fdt.forEach(t),Ojo=r(h7e," \u2014 "),xO=n(h7e,"A",{href:!0});var Tdt=s(xO);Vjo=r(Tdt,"BartForQuestionAnswering"),Tdt.forEach(t),Xjo=r(h7e," (BART model)"),h7e.forEach(t),zjo=i(X),O2=n(X,"LI",{});var p7e=s(O2);mge=n(p7e,"STRONG",{});var Mdt=s(mge);Qjo=r(Mdt,"bert"),Mdt.forEach(t),Wjo=r(p7e," \u2014 "),$O=n(p7e,"A",{href:!0});var Edt=s($O);Hjo=r(Edt,"BertForQuestionAnswering"),Edt.forEach(t),Ujo=r(p7e," (BERT model)"),p7e.forEach(t),Jjo=i(X),V2=n(X,"LI",{});var u7e=s(V2);gge=n(u7e,"STRONG",{});var Cdt=s(gge);Yjo=r(Cdt,"big_bird"),Cdt.forEach(t),Kjo=r(u7e," \u2014 "),kO=n(u7e,"A",{href:!0});var wdt=s(kO);Zjo=r(wdt,"BigBirdForQuestionAnswering"),wdt.forEach(t),eDo=r(u7e," (BigBird model)"),u7e.forEach(t),oDo=i(X),X2=n(X,"LI",{});var _7e=s(X2);hge=n(_7e,"STRONG",{});var Adt=s(hge);rDo=r(Adt,"bigbird_pegasus"),Adt.forEach(t),tDo=r(_7e," \u2014 "),SO=n(_7e,"A",{href:!0});var ydt=s(SO);aDo=r(ydt,"BigBirdPegasusForQuestionAnswering"),ydt.forEach(t),nDo=r(_7e," (BigBirdPegasus model)"),_7e.forEach(t),sDo=i(X),z2=n(X,"LI",{});var b7e=s(z2);pge=n(b7e,"STRONG",{});var Ldt=s(pge);lDo=r(Ldt,"camembert"),Ldt.forEach(t),iDo=r(b7e," \u2014 "),RO=n(b7e,"A",{href:!0});var xdt=s(RO);dDo=r(xdt,"CamembertForQuestionAnswering"),xdt.forEach(t),cDo=r(b7e," (CamemBERT model)"),b7e.forEach(t),fDo=i(X),Q2=n(X,"LI",{});var v7e=s(Q2);uge=n(v7e,"STRONG",{});var $dt=s(uge);mDo=r($dt,"canine"),$dt.forEach(t),gDo=r(v7e," \u2014 "),BO=n(v7e,"A",{href:!0});var kdt=s(BO);hDo=r(kdt,"CanineForQuestionAnswering"),kdt.forEach(t),pDo=r(v7e," (Canine model)"),v7e.forEach(t),uDo=i(X),W2=n(X,"LI",{});var F7e=s(W2);_ge=n(F7e,"STRONG",{});var Sdt=s(_ge);_Do=r(Sdt,"convbert"),Sdt.forEach(t),bDo=r(F7e," \u2014 "),PO=n(F7e,"A",{href:!0});var Rdt=s(PO);vDo=r(Rdt,"ConvBertForQuestionAnswering"),Rdt.forEach(t),FDo=r(F7e," (ConvBERT model)"),F7e.forEach(t),TDo=i(X),H2=n(X,"LI",{});var T7e=s(H2);bge=n(T7e,"STRONG",{});var Bdt=s(bge);MDo=r(Bdt,"data2vec-text"),Bdt.forEach(t),EDo=r(T7e," \u2014 "),IO=n(T7e,"A",{href:!0});var Pdt=s(IO);CDo=r(Pdt,"Data2VecTextForQuestionAnswering"),Pdt.forEach(t),wDo=r(T7e," (Data2VecText model)"),T7e.forEach(t),ADo=i(X),U2=n(X,"LI",{});var M7e=s(U2);vge=n(M7e,"STRONG",{});var Idt=s(vge);yDo=r(Idt,"deberta"),Idt.forEach(t),LDo=r(M7e," \u2014 "),qO=n(M7e,"A",{href:!0});var qdt=s(qO);xDo=r(qdt,"DebertaForQuestionAnswering"),qdt.forEach(t),$Do=r(M7e," (DeBERTa model)"),M7e.forEach(t),kDo=i(X),J2=n(X,"LI",{});var E7e=s(J2);Fge=n(E7e,"STRONG",{});var Ndt=s(Fge);SDo=r(Ndt,"deberta-v2"),Ndt.forEach(t),RDo=r(E7e," \u2014 "),NO=n(E7e,"A",{href:!0});var jdt=s(NO);BDo=r(jdt,"DebertaV2ForQuestionAnswering"),jdt.forEach(t),PDo=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),IDo=i(X),Y2=n(X,"LI",{});var C7e=s(Y2);Tge=n(C7e,"STRONG",{});var Ddt=s(Tge);qDo=r(Ddt,"distilbert"),Ddt.forEach(t),NDo=r(C7e," \u2014 "),jO=n(C7e,"A",{href:!0});var Gdt=s(jO);jDo=r(Gdt,"DistilBertForQuestionAnswering"),Gdt.forEach(t),DDo=r(C7e," (DistilBERT model)"),C7e.forEach(t),GDo=i(X),K2=n(X,"LI",{});var w7e=s(K2);Mge=n(w7e,"STRONG",{});var Odt=s(Mge);ODo=r(Odt,"electra"),Odt.forEach(t),VDo=r(w7e," \u2014 "),DO=n(w7e,"A",{href:!0});var Vdt=s(DO);XDo=r(Vdt,"ElectraForQuestionAnswering"),Vdt.forEach(t),zDo=r(w7e," (ELECTRA model)"),w7e.forEach(t),QDo=i(X),Z2=n(X,"LI",{});var A7e=s(Z2);Ege=n(A7e,"STRONG",{});var Xdt=s(Ege);WDo=r(Xdt,"flaubert"),Xdt.forEach(t),HDo=r(A7e," \u2014 "),GO=n(A7e,"A",{href:!0});var zdt=s(GO);UDo=r(zdt,"FlaubertForQuestionAnsweringSimple"),zdt.forEach(t),JDo=r(A7e," (FlauBERT model)"),A7e.forEach(t),YDo=i(X),e5=n(X,"LI",{});var y7e=s(e5);Cge=n(y7e,"STRONG",{});var Qdt=s(Cge);KDo=r(Qdt,"fnet"),Qdt.forEach(t),ZDo=r(y7e," \u2014 "),OO=n(y7e,"A",{href:!0});var Wdt=s(OO);eGo=r(Wdt,"FNetForQuestionAnswering"),Wdt.forEach(t),oGo=r(y7e," (FNet model)"),y7e.forEach(t),rGo=i(X),o5=n(X,"LI",{});var L7e=s(o5);wge=n(L7e,"STRONG",{});var Hdt=s(wge);tGo=r(Hdt,"funnel"),Hdt.forEach(t),aGo=r(L7e," \u2014 "),VO=n(L7e,"A",{href:!0});var Udt=s(VO);nGo=r(Udt,"FunnelForQuestionAnswering"),Udt.forEach(t),sGo=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),lGo=i(X),r5=n(X,"LI",{});var x7e=s(r5);Age=n(x7e,"STRONG",{});var Jdt=s(Age);iGo=r(Jdt,"gptj"),Jdt.forEach(t),dGo=r(x7e," \u2014 "),XO=n(x7e,"A",{href:!0});var Ydt=s(XO);cGo=r(Ydt,"GPTJForQuestionAnswering"),Ydt.forEach(t),fGo=r(x7e," (GPT-J model)"),x7e.forEach(t),mGo=i(X),t5=n(X,"LI",{});var $7e=s(t5);yge=n($7e,"STRONG",{});var Kdt=s(yge);gGo=r(Kdt,"ibert"),Kdt.forEach(t),hGo=r($7e," \u2014 "),zO=n($7e,"A",{href:!0});var Zdt=s(zO);pGo=r(Zdt,"IBertForQuestionAnswering"),Zdt.forEach(t),uGo=r($7e," (I-BERT model)"),$7e.forEach(t),_Go=i(X),a5=n(X,"LI",{});var k7e=s(a5);Lge=n(k7e,"STRONG",{});var ect=s(Lge);bGo=r(ect,"layoutlmv2"),ect.forEach(t),vGo=r(k7e," \u2014 "),QO=n(k7e,"A",{href:!0});var oct=s(QO);FGo=r(oct,"LayoutLMv2ForQuestionAnswering"),oct.forEach(t),TGo=r(k7e," (LayoutLMv2 model)"),k7e.forEach(t),MGo=i(X),n5=n(X,"LI",{});var S7e=s(n5);xge=n(S7e,"STRONG",{});var rct=s(xge);EGo=r(rct,"led"),rct.forEach(t),CGo=r(S7e," \u2014 "),WO=n(S7e,"A",{href:!0});var tct=s(WO);wGo=r(tct,"LEDForQuestionAnswering"),tct.forEach(t),AGo=r(S7e," (LED model)"),S7e.forEach(t),yGo=i(X),s5=n(X,"LI",{});var R7e=s(s5);$ge=n(R7e,"STRONG",{});var act=s($ge);LGo=r(act,"longformer"),act.forEach(t),xGo=r(R7e," \u2014 "),HO=n(R7e,"A",{href:!0});var nct=s(HO);$Go=r(nct,"LongformerForQuestionAnswering"),nct.forEach(t),kGo=r(R7e," (Longformer model)"),R7e.forEach(t),SGo=i(X),l5=n(X,"LI",{});var B7e=s(l5);kge=n(B7e,"STRONG",{});var sct=s(kge);RGo=r(sct,"lxmert"),sct.forEach(t),BGo=r(B7e," \u2014 "),UO=n(B7e,"A",{href:!0});var lct=s(UO);PGo=r(lct,"LxmertForQuestionAnswering"),lct.forEach(t),IGo=r(B7e," (LXMERT model)"),B7e.forEach(t),qGo=i(X),i5=n(X,"LI",{});var P7e=s(i5);Sge=n(P7e,"STRONG",{});var ict=s(Sge);NGo=r(ict,"mbart"),ict.forEach(t),jGo=r(P7e," \u2014 "),JO=n(P7e,"A",{href:!0});var dct=s(JO);DGo=r(dct,"MBartForQuestionAnswering"),dct.forEach(t),GGo=r(P7e," (mBART model)"),P7e.forEach(t),OGo=i(X),d5=n(X,"LI",{});var I7e=s(d5);Rge=n(I7e,"STRONG",{});var cct=s(Rge);VGo=r(cct,"megatron-bert"),cct.forEach(t),XGo=r(I7e," \u2014 "),YO=n(I7e,"A",{href:!0});var fct=s(YO);zGo=r(fct,"MegatronBertForQuestionAnswering"),fct.forEach(t),QGo=r(I7e," (MegatronBert model)"),I7e.forEach(t),WGo=i(X),c5=n(X,"LI",{});var q7e=s(c5);Bge=n(q7e,"STRONG",{});var mct=s(Bge);HGo=r(mct,"mobilebert"),mct.forEach(t),UGo=r(q7e," \u2014 "),KO=n(q7e,"A",{href:!0});var gct=s(KO);JGo=r(gct,"MobileBertForQuestionAnswering"),gct.forEach(t),YGo=r(q7e," (MobileBERT model)"),q7e.forEach(t),KGo=i(X),f5=n(X,"LI",{});var N7e=s(f5);Pge=n(N7e,"STRONG",{});var hct=s(Pge);ZGo=r(hct,"mpnet"),hct.forEach(t),eOo=r(N7e," \u2014 "),ZO=n(N7e,"A",{href:!0});var pct=s(ZO);oOo=r(pct,"MPNetForQuestionAnswering"),pct.forEach(t),rOo=r(N7e," (MPNet model)"),N7e.forEach(t),tOo=i(X),m5=n(X,"LI",{});var j7e=s(m5);Ige=n(j7e,"STRONG",{});var uct=s(Ige);aOo=r(uct,"nystromformer"),uct.forEach(t),nOo=r(j7e," \u2014 "),eV=n(j7e,"A",{href:!0});var _ct=s(eV);sOo=r(_ct,"NystromformerForQuestionAnswering"),_ct.forEach(t),lOo=r(j7e," (Nystromformer model)"),j7e.forEach(t),iOo=i(X),g5=n(X,"LI",{});var D7e=s(g5);qge=n(D7e,"STRONG",{});var bct=s(qge);dOo=r(bct,"qdqbert"),bct.forEach(t),cOo=r(D7e," \u2014 "),oV=n(D7e,"A",{href:!0});var vct=s(oV);fOo=r(vct,"QDQBertForQuestionAnswering"),vct.forEach(t),mOo=r(D7e," (QDQBert model)"),D7e.forEach(t),gOo=i(X),h5=n(X,"LI",{});var G7e=s(h5);Nge=n(G7e,"STRONG",{});var Fct=s(Nge);hOo=r(Fct,"reformer"),Fct.forEach(t),pOo=r(G7e," \u2014 "),rV=n(G7e,"A",{href:!0});var Tct=s(rV);uOo=r(Tct,"ReformerForQuestionAnswering"),Tct.forEach(t),_Oo=r(G7e," (Reformer model)"),G7e.forEach(t),bOo=i(X),p5=n(X,"LI",{});var O7e=s(p5);jge=n(O7e,"STRONG",{});var Mct=s(jge);vOo=r(Mct,"rembert"),Mct.forEach(t),FOo=r(O7e," \u2014 "),tV=n(O7e,"A",{href:!0});var Ect=s(tV);TOo=r(Ect,"RemBertForQuestionAnswering"),Ect.forEach(t),MOo=r(O7e," (RemBERT model)"),O7e.forEach(t),EOo=i(X),u5=n(X,"LI",{});var V7e=s(u5);Dge=n(V7e,"STRONG",{});var Cct=s(Dge);COo=r(Cct,"roberta"),Cct.forEach(t),wOo=r(V7e," \u2014 "),aV=n(V7e,"A",{href:!0});var wct=s(aV);AOo=r(wct,"RobertaForQuestionAnswering"),wct.forEach(t),yOo=r(V7e," (RoBERTa model)"),V7e.forEach(t),LOo=i(X),_5=n(X,"LI",{});var X7e=s(_5);Gge=n(X7e,"STRONG",{});var Act=s(Gge);xOo=r(Act,"roformer"),Act.forEach(t),$Oo=r(X7e," \u2014 "),nV=n(X7e,"A",{href:!0});var yct=s(nV);kOo=r(yct,"RoFormerForQuestionAnswering"),yct.forEach(t),SOo=r(X7e," (RoFormer model)"),X7e.forEach(t),ROo=i(X),b5=n(X,"LI",{});var z7e=s(b5);Oge=n(z7e,"STRONG",{});var Lct=s(Oge);BOo=r(Lct,"splinter"),Lct.forEach(t),POo=r(z7e," \u2014 "),sV=n(z7e,"A",{href:!0});var xct=s(sV);IOo=r(xct,"SplinterForQuestionAnswering"),xct.forEach(t),qOo=r(z7e," (Splinter model)"),z7e.forEach(t),NOo=i(X),v5=n(X,"LI",{});var Q7e=s(v5);Vge=n(Q7e,"STRONG",{});var $ct=s(Vge);jOo=r($ct,"squeezebert"),$ct.forEach(t),DOo=r(Q7e," \u2014 "),lV=n(Q7e,"A",{href:!0});var kct=s(lV);GOo=r(kct,"SqueezeBertForQuestionAnswering"),kct.forEach(t),OOo=r(Q7e," (SqueezeBERT model)"),Q7e.forEach(t),VOo=i(X),F5=n(X,"LI",{});var W7e=s(F5);Xge=n(W7e,"STRONG",{});var Sct=s(Xge);XOo=r(Sct,"xlm"),Sct.forEach(t),zOo=r(W7e," \u2014 "),iV=n(W7e,"A",{href:!0});var Rct=s(iV);QOo=r(Rct,"XLMForQuestionAnsweringSimple"),Rct.forEach(t),WOo=r(W7e," (XLM model)"),W7e.forEach(t),HOo=i(X),T5=n(X,"LI",{});var H7e=s(T5);zge=n(H7e,"STRONG",{});var Bct=s(zge);UOo=r(Bct,"xlm-roberta"),Bct.forEach(t),JOo=r(H7e," \u2014 "),dV=n(H7e,"A",{href:!0});var Pct=s(dV);YOo=r(Pct,"XLMRobertaForQuestionAnswering"),Pct.forEach(t),KOo=r(H7e," (XLM-RoBERTa model)"),H7e.forEach(t),ZOo=i(X),M5=n(X,"LI",{});var U7e=s(M5);Qge=n(U7e,"STRONG",{});var Ict=s(Qge);eVo=r(Ict,"xlm-roberta-xl"),Ict.forEach(t),oVo=r(U7e," \u2014 "),cV=n(U7e,"A",{href:!0});var qct=s(cV);rVo=r(qct,"XLMRobertaXLForQuestionAnswering"),qct.forEach(t),tVo=r(U7e," (XLM-RoBERTa-XL model)"),U7e.forEach(t),aVo=i(X),E5=n(X,"LI",{});var J7e=s(E5);Wge=n(J7e,"STRONG",{});var Nct=s(Wge);nVo=r(Nct,"xlnet"),Nct.forEach(t),sVo=r(J7e," \u2014 "),fV=n(J7e,"A",{href:!0});var jct=s(fV);lVo=r(jct,"XLNetForQuestionAnsweringSimple"),jct.forEach(t),iVo=r(J7e," (XLNet model)"),J7e.forEach(t),dVo=i(X),C5=n(X,"LI",{});var Y7e=s(C5);Hge=n(Y7e,"STRONG",{});var Dct=s(Hge);cVo=r(Dct,"yoso"),Dct.forEach(t),fVo=r(Y7e," \u2014 "),mV=n(Y7e,"A",{href:!0});var Gct=s(mV);mVo=r(Gct,"YosoForQuestionAnswering"),Gct.forEach(t),gVo=r(Y7e," (YOSO model)"),Y7e.forEach(t),X.forEach(t),hVo=i(ia),w5=n(ia,"P",{});var K7e=s(w5);pVo=r(K7e,"The model is set in evaluation mode by default using "),Uge=n(K7e,"CODE",{});var Oct=s(Uge);uVo=r(Oct,"model.eval()"),Oct.forEach(t),_Vo=r(K7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(K7e,"CODE",{});var Vct=s(Jge);bVo=r(Vct,"model.train()"),Vct.forEach(t),K7e.forEach(t),vVo=i(ia),T(A5.$$.fragment,ia),ia.forEach(t),Js.forEach(t),AIe=i(f),Ki=n(f,"H2",{class:!0});var $Ne=s(Ki);y5=n($Ne,"A",{id:!0,class:!0,href:!0});var Xct=s(y5);Yge=n(Xct,"SPAN",{});var zct=s(Yge);T(TL.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),FVo=i($Ne),Kge=n($Ne,"SPAN",{});var Qct=s(Kge);TVo=r(Qct,"AutoModelForTableQuestionAnswering"),Qct.forEach(t),$Ne.forEach(t),yIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(ML.$$.fragment,Ys),MVo=i(Ys),Zi=n(Ys,"P",{});var kK=s(Zi);EVo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gV=n(kK,"A",{href:!0});var Wct=s(gV);CVo=r(Wct,"from_pretrained()"),Wct.forEach(t),wVo=r(kK," class method or the "),hV=n(kK,"A",{href:!0});var Hct=s(hV);AVo=r(Hct,"from_config()"),Hct.forEach(t),yVo=r(kK,` class
method.`),kK.forEach(t),LVo=i(Ys),EL=n(Ys,"P",{});var kNe=s(EL);xVo=r(kNe,"This class cannot be instantiated directly using "),Zge=n(kNe,"CODE",{});var Uct=s(Zge);$Vo=r(Uct,"__init__()"),Uct.forEach(t),kVo=r(kNe," (throws an error)."),kNe.forEach(t),SVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var TA=s(ft);T(CL.$$.fragment,TA),RVo=i(TA),ehe=n(TA,"P",{});var Jct=s(ehe);BVo=r(Jct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jct.forEach(t),PVo=i(TA),ed=n(TA,"P",{});var SK=s(ed);IVo=r(SK,`Note:
Loading a model from its configuration file does `),ohe=n(SK,"STRONG",{});var Yct=s(ohe);qVo=r(Yct,"not"),Yct.forEach(t),NVo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(SK,"A",{href:!0});var Kct=s(pV);jVo=r(Kct,"from_pretrained()"),Kct.forEach(t),DVo=r(SK," to load the model weights."),SK.forEach(t),GVo=i(TA),T(L5.$$.fragment,TA),TA.forEach(t),OVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(wL.$$.fragment,da),VVo=i(da),rhe=n(da,"P",{});var Zct=s(rhe);XVo=r(Zct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zct.forEach(t),zVo=i(da),Ia=n(da,"P",{});var MA=s(Ia);QVo=r(MA,"The model class to instantiate is selected based on the "),the=n(MA,"CODE",{});var eft=s(the);WVo=r(eft,"model_type"),eft.forEach(t),HVo=r(MA,` property of the config object (either
passed as an argument or loaded from `),ahe=n(MA,"CODE",{});var oft=s(ahe);UVo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),JVo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(MA,"CODE",{});var rft=s(nhe);YVo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),KVo=r(MA,":"),MA.forEach(t),ZVo=i(da),she=n(da,"UL",{});var tft=s(she);x5=n(tft,"LI",{});var Z7e=s(x5);lhe=n(Z7e,"STRONG",{});var aft=s(lhe);eXo=r(aft,"tapas"),aft.forEach(t),oXo=r(Z7e," \u2014 "),uV=n(Z7e,"A",{href:!0});var nft=s(uV);rXo=r(nft,"TapasForQuestionAnswering"),nft.forEach(t),tXo=r(Z7e," (TAPAS model)"),Z7e.forEach(t),tft.forEach(t),aXo=i(da),$5=n(da,"P",{});var e9e=s($5);nXo=r(e9e,"The model is set in evaluation mode by default using "),ihe=n(e9e,"CODE",{});var sft=s(ihe);sXo=r(sft,"model.eval()"),sft.forEach(t),lXo=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(e9e,"CODE",{});var lft=s(dhe);iXo=r(lft,"model.train()"),lft.forEach(t),e9e.forEach(t),dXo=i(da),T(k5.$$.fragment,da),da.forEach(t),Ys.forEach(t),LIe=i(f),od=n(f,"H2",{class:!0});var SNe=s(od);S5=n(SNe,"A",{id:!0,class:!0,href:!0});var ift=s(S5);che=n(ift,"SPAN",{});var dft=s(che);T(AL.$$.fragment,dft),dft.forEach(t),ift.forEach(t),cXo=i(SNe),fhe=n(SNe,"SPAN",{});var cft=s(fhe);fXo=r(cft,"AutoModelForImageClassification"),cft.forEach(t),SNe.forEach(t),xIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(yL.$$.fragment,Ks),mXo=i(Ks),rd=n(Ks,"P",{});var RK=s(rd);gXo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_V=n(RK,"A",{href:!0});var fft=s(_V);hXo=r(fft,"from_pretrained()"),fft.forEach(t),pXo=r(RK," class method or the "),bV=n(RK,"A",{href:!0});var mft=s(bV);uXo=r(mft,"from_config()"),mft.forEach(t),_Xo=r(RK,` class
method.`),RK.forEach(t),bXo=i(Ks),LL=n(Ks,"P",{});var RNe=s(LL);vXo=r(RNe,"This class cannot be instantiated directly using "),mhe=n(RNe,"CODE",{});var gft=s(mhe);FXo=r(gft,"__init__()"),gft.forEach(t),TXo=r(RNe," (throws an error)."),RNe.forEach(t),MXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var EA=s(mt);T(xL.$$.fragment,EA),EXo=i(EA),ghe=n(EA,"P",{});var hft=s(ghe);CXo=r(hft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hft.forEach(t),wXo=i(EA),td=n(EA,"P",{});var BK=s(td);AXo=r(BK,`Note:
Loading a model from its configuration file does `),hhe=n(BK,"STRONG",{});var pft=s(hhe);yXo=r(pft,"not"),pft.forEach(t),LXo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(BK,"A",{href:!0});var uft=s(vV);xXo=r(uft,"from_pretrained()"),uft.forEach(t),$Xo=r(BK," to load the model weights."),BK.forEach(t),kXo=i(EA),T(R5.$$.fragment,EA),EA.forEach(t),SXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T($L.$$.fragment,ca),RXo=i(ca),phe=n(ca,"P",{});var _ft=s(phe);BXo=r(_ft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_ft.forEach(t),PXo=i(ca),qa=n(ca,"P",{});var CA=s(qa);IXo=r(CA,"The model class to instantiate is selected based on the "),uhe=n(CA,"CODE",{});var bft=s(uhe);qXo=r(bft,"model_type"),bft.forEach(t),NXo=r(CA,` property of the config object (either
passed as an argument or loaded from `),_he=n(CA,"CODE",{});var vft=s(_he);jXo=r(vft,"pretrained_model_name_or_path"),vft.forEach(t),DXo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(CA,"CODE",{});var Fft=s(bhe);GXo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),OXo=r(CA,":"),CA.forEach(t),VXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);B5=n(Ee,"LI",{});var o9e=s(B5);vhe=n(o9e,"STRONG",{});var Tft=s(vhe);XXo=r(Tft,"beit"),Tft.forEach(t),zXo=r(o9e," \u2014 "),FV=n(o9e,"A",{href:!0});var Mft=s(FV);QXo=r(Mft,"BeitForImageClassification"),Mft.forEach(t),WXo=r(o9e," (BEiT model)"),o9e.forEach(t),HXo=i(Ee),P5=n(Ee,"LI",{});var r9e=s(P5);Fhe=n(r9e,"STRONG",{});var Eft=s(Fhe);UXo=r(Eft,"convnext"),Eft.forEach(t),JXo=r(r9e," \u2014 "),TV=n(r9e,"A",{href:!0});var Cft=s(TV);YXo=r(Cft,"ConvNextForImageClassification"),Cft.forEach(t),KXo=r(r9e," (ConvNext model)"),r9e.forEach(t),ZXo=i(Ee),I5=n(Ee,"LI",{});var t9e=s(I5);The=n(t9e,"STRONG",{});var wft=s(The);ezo=r(wft,"data2vec-vision"),wft.forEach(t),ozo=r(t9e," \u2014 "),MV=n(t9e,"A",{href:!0});var Aft=s(MV);rzo=r(Aft,"Data2VecVisionForImageClassification"),Aft.forEach(t),tzo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),azo=i(Ee),Bs=n(Ee,"LI",{});var h$=s(Bs);Mhe=n(h$,"STRONG",{});var yft=s(Mhe);nzo=r(yft,"deit"),yft.forEach(t),szo=r(h$," \u2014 "),EV=n(h$,"A",{href:!0});var Lft=s(EV);lzo=r(Lft,"DeiTForImageClassification"),Lft.forEach(t),izo=r(h$," or "),CV=n(h$,"A",{href:!0});var xft=s(CV);dzo=r(xft,"DeiTForImageClassificationWithTeacher"),xft.forEach(t),czo=r(h$," (DeiT model)"),h$.forEach(t),fzo=i(Ee),q5=n(Ee,"LI",{});var a9e=s(q5);Ehe=n(a9e,"STRONG",{});var $ft=s(Ehe);mzo=r($ft,"imagegpt"),$ft.forEach(t),gzo=r(a9e," \u2014 "),wV=n(a9e,"A",{href:!0});var kft=s(wV);hzo=r(kft,"ImageGPTForImageClassification"),kft.forEach(t),pzo=r(a9e," (ImageGPT model)"),a9e.forEach(t),uzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Che=n(ff,"STRONG",{});var Sft=s(Che);_zo=r(Sft,"perceiver"),Sft.forEach(t),bzo=r(ff," \u2014 "),AV=n(ff,"A",{href:!0});var Rft=s(AV);vzo=r(Rft,"PerceiverForImageClassificationLearned"),Rft.forEach(t),Fzo=r(ff," or "),yV=n(ff,"A",{href:!0});var Bft=s(yV);Tzo=r(Bft,"PerceiverForImageClassificationFourier"),Bft.forEach(t),Mzo=r(ff," or "),LV=n(ff,"A",{href:!0});var Pft=s(LV);Ezo=r(Pft,"PerceiverForImageClassificationConvProcessing"),Pft.forEach(t),Czo=r(ff," (Perceiver model)"),ff.forEach(t),wzo=i(Ee),N5=n(Ee,"LI",{});var n9e=s(N5);whe=n(n9e,"STRONG",{});var Ift=s(whe);Azo=r(Ift,"poolformer"),Ift.forEach(t),yzo=r(n9e," \u2014 "),xV=n(n9e,"A",{href:!0});var qft=s(xV);Lzo=r(qft,"PoolFormerForImageClassification"),qft.forEach(t),xzo=r(n9e," (PoolFormer model)"),n9e.forEach(t),$zo=i(Ee),j5=n(Ee,"LI",{});var s9e=s(j5);Ahe=n(s9e,"STRONG",{});var Nft=s(Ahe);kzo=r(Nft,"regnet"),Nft.forEach(t),Szo=r(s9e," \u2014 "),$V=n(s9e,"A",{href:!0});var jft=s($V);Rzo=r(jft,"RegNetForImageClassification"),jft.forEach(t),Bzo=r(s9e," (RegNet model)"),s9e.forEach(t),Pzo=i(Ee),D5=n(Ee,"LI",{});var l9e=s(D5);yhe=n(l9e,"STRONG",{});var Dft=s(yhe);Izo=r(Dft,"resnet"),Dft.forEach(t),qzo=r(l9e," \u2014 "),kV=n(l9e,"A",{href:!0});var Gft=s(kV);Nzo=r(Gft,"ResNetForImageClassification"),Gft.forEach(t),jzo=r(l9e," (ResNet model)"),l9e.forEach(t),Dzo=i(Ee),G5=n(Ee,"LI",{});var i9e=s(G5);Lhe=n(i9e,"STRONG",{});var Oft=s(Lhe);Gzo=r(Oft,"segformer"),Oft.forEach(t),Ozo=r(i9e," \u2014 "),SV=n(i9e,"A",{href:!0});var Vft=s(SV);Vzo=r(Vft,"SegformerForImageClassification"),Vft.forEach(t),Xzo=r(i9e," (SegFormer model)"),i9e.forEach(t),zzo=i(Ee),O5=n(Ee,"LI",{});var d9e=s(O5);xhe=n(d9e,"STRONG",{});var Xft=s(xhe);Qzo=r(Xft,"swin"),Xft.forEach(t),Wzo=r(d9e," \u2014 "),RV=n(d9e,"A",{href:!0});var zft=s(RV);Hzo=r(zft,"SwinForImageClassification"),zft.forEach(t),Uzo=r(d9e," (Swin model)"),d9e.forEach(t),Jzo=i(Ee),V5=n(Ee,"LI",{});var c9e=s(V5);$he=n(c9e,"STRONG",{});var Qft=s($he);Yzo=r(Qft,"van"),Qft.forEach(t),Kzo=r(c9e," \u2014 "),BV=n(c9e,"A",{href:!0});var Wft=s(BV);Zzo=r(Wft,"VanForImageClassification"),Wft.forEach(t),eQo=r(c9e," (VAN model)"),c9e.forEach(t),oQo=i(Ee),X5=n(Ee,"LI",{});var f9e=s(X5);khe=n(f9e,"STRONG",{});var Hft=s(khe);rQo=r(Hft,"vit"),Hft.forEach(t),tQo=r(f9e," \u2014 "),PV=n(f9e,"A",{href:!0});var Uft=s(PV);aQo=r(Uft,"ViTForImageClassification"),Uft.forEach(t),nQo=r(f9e," (ViT model)"),f9e.forEach(t),Ee.forEach(t),sQo=i(ca),z5=n(ca,"P",{});var m9e=s(z5);lQo=r(m9e,"The model is set in evaluation mode by default using "),She=n(m9e,"CODE",{});var Jft=s(She);iQo=r(Jft,"model.eval()"),Jft.forEach(t),dQo=r(m9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(m9e,"CODE",{});var Yft=s(Rhe);cQo=r(Yft,"model.train()"),Yft.forEach(t),m9e.forEach(t),fQo=i(ca),T(Q5.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),$Ie=i(f),ad=n(f,"H2",{class:!0});var BNe=s(ad);W5=n(BNe,"A",{id:!0,class:!0,href:!0});var Kft=s(W5);Bhe=n(Kft,"SPAN",{});var Zft=s(Bhe);T(kL.$$.fragment,Zft),Zft.forEach(t),Kft.forEach(t),mQo=i(BNe),Phe=n(BNe,"SPAN",{});var emt=s(Phe);gQo=r(emt,"AutoModelForVision2Seq"),emt.forEach(t),BNe.forEach(t),kIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(SL.$$.fragment,Zs),hQo=i(Zs),nd=n(Zs,"P",{});var PK=s(nd);pQo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IV=n(PK,"A",{href:!0});var omt=s(IV);uQo=r(omt,"from_pretrained()"),omt.forEach(t),_Qo=r(PK," class method or the "),qV=n(PK,"A",{href:!0});var rmt=s(qV);bQo=r(rmt,"from_config()"),rmt.forEach(t),vQo=r(PK,` class
method.`),PK.forEach(t),FQo=i(Zs),RL=n(Zs,"P",{});var PNe=s(RL);TQo=r(PNe,"This class cannot be instantiated directly using "),Ihe=n(PNe,"CODE",{});var tmt=s(Ihe);MQo=r(tmt,"__init__()"),tmt.forEach(t),EQo=r(PNe," (throws an error)."),PNe.forEach(t),CQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var wA=s(ht);T(BL.$$.fragment,wA),wQo=i(wA),qhe=n(wA,"P",{});var amt=s(qhe);AQo=r(amt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),amt.forEach(t),yQo=i(wA),sd=n(wA,"P",{});var IK=s(sd);LQo=r(IK,`Note:
Loading a model from its configuration file does `),Nhe=n(IK,"STRONG",{});var nmt=s(Nhe);xQo=r(nmt,"not"),nmt.forEach(t),$Qo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(IK,"A",{href:!0});var smt=s(NV);kQo=r(smt,"from_pretrained()"),smt.forEach(t),SQo=r(IK," to load the model weights."),IK.forEach(t),RQo=i(wA),T(H5.$$.fragment,wA),wA.forEach(t),BQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(PL.$$.fragment,fa),PQo=i(fa),jhe=n(fa,"P",{});var lmt=s(jhe);IQo=r(lmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lmt.forEach(t),qQo=i(fa),Na=n(fa,"P",{});var AA=s(Na);NQo=r(AA,"The model class to instantiate is selected based on the "),Dhe=n(AA,"CODE",{});var imt=s(Dhe);jQo=r(imt,"model_type"),imt.forEach(t),DQo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(AA,"CODE",{});var dmt=s(Ghe);GQo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),OQo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(AA,"CODE",{});var cmt=s(Ohe);VQo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),XQo=r(AA,":"),AA.forEach(t),zQo=i(fa),Vhe=n(fa,"UL",{});var fmt=s(Vhe);U5=n(fmt,"LI",{});var g9e=s(U5);Xhe=n(g9e,"STRONG",{});var mmt=s(Xhe);QQo=r(mmt,"vision-encoder-decoder"),mmt.forEach(t),WQo=r(g9e," \u2014 "),jV=n(g9e,"A",{href:!0});var gmt=s(jV);HQo=r(gmt,"VisionEncoderDecoderModel"),gmt.forEach(t),UQo=r(g9e," (Vision Encoder decoder model)"),g9e.forEach(t),fmt.forEach(t),JQo=i(fa),J5=n(fa,"P",{});var h9e=s(J5);YQo=r(h9e,"The model is set in evaluation mode by default using "),zhe=n(h9e,"CODE",{});var hmt=s(zhe);KQo=r(hmt,"model.eval()"),hmt.forEach(t),ZQo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(h9e,"CODE",{});var pmt=s(Qhe);eWo=r(pmt,"model.train()"),pmt.forEach(t),h9e.forEach(t),oWo=i(fa),T(Y5.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),SIe=i(f),ld=n(f,"H2",{class:!0});var INe=s(ld);K5=n(INe,"A",{id:!0,class:!0,href:!0});var umt=s(K5);Whe=n(umt,"SPAN",{});var _mt=s(Whe);T(IL.$$.fragment,_mt),_mt.forEach(t),umt.forEach(t),rWo=i(INe),Hhe=n(INe,"SPAN",{});var bmt=s(Hhe);tWo=r(bmt,"AutoModelForAudioClassification"),bmt.forEach(t),INe.forEach(t),RIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(qL.$$.fragment,el),aWo=i(el),id=n(el,"P",{});var qK=s(id);nWo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DV=n(qK,"A",{href:!0});var vmt=s(DV);sWo=r(vmt,"from_pretrained()"),vmt.forEach(t),lWo=r(qK," class method or the "),GV=n(qK,"A",{href:!0});var Fmt=s(GV);iWo=r(Fmt,"from_config()"),Fmt.forEach(t),dWo=r(qK,` class
method.`),qK.forEach(t),cWo=i(el),NL=n(el,"P",{});var qNe=s(NL);fWo=r(qNe,"This class cannot be instantiated directly using "),Uhe=n(qNe,"CODE",{});var Tmt=s(Uhe);mWo=r(Tmt,"__init__()"),Tmt.forEach(t),gWo=r(qNe," (throws an error)."),qNe.forEach(t),hWo=i(el),pt=n(el,"DIV",{class:!0});var yA=s(pt);T(jL.$$.fragment,yA),pWo=i(yA),Jhe=n(yA,"P",{});var Mmt=s(Jhe);uWo=r(Mmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mmt.forEach(t),_Wo=i(yA),dd=n(yA,"P",{});var NK=s(dd);bWo=r(NK,`Note:
Loading a model from its configuration file does `),Yhe=n(NK,"STRONG",{});var Emt=s(Yhe);vWo=r(Emt,"not"),Emt.forEach(t),FWo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(NK,"A",{href:!0});var Cmt=s(OV);TWo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),MWo=r(NK," to load the model weights."),NK.forEach(t),EWo=i(yA),T(Z5.$$.fragment,yA),yA.forEach(t),CWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(DL.$$.fragment,ma),wWo=i(ma),Khe=n(ma,"P",{});var wmt=s(Khe);AWo=r(wmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wmt.forEach(t),yWo=i(ma),ja=n(ma,"P",{});var LA=s(ja);LWo=r(LA,"The model class to instantiate is selected based on the "),Zhe=n(LA,"CODE",{});var Amt=s(Zhe);xWo=r(Amt,"model_type"),Amt.forEach(t),$Wo=r(LA,` property of the config object (either
passed as an argument or loaded from `),epe=n(LA,"CODE",{});var ymt=s(epe);kWo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),SWo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(LA,"CODE",{});var Lmt=s(ope);RWo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),BWo=r(LA,":"),LA.forEach(t),PWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);e3=n(bo,"LI",{});var p9e=s(e3);rpe=n(p9e,"STRONG",{});var xmt=s(rpe);IWo=r(xmt,"data2vec-audio"),xmt.forEach(t),qWo=r(p9e," \u2014 "),VV=n(p9e,"A",{href:!0});var $mt=s(VV);NWo=r($mt,"Data2VecAudioForSequenceClassification"),$mt.forEach(t),jWo=r(p9e," (Data2VecAudio model)"),p9e.forEach(t),DWo=i(bo),o3=n(bo,"LI",{});var u9e=s(o3);tpe=n(u9e,"STRONG",{});var kmt=s(tpe);GWo=r(kmt,"hubert"),kmt.forEach(t),OWo=r(u9e," \u2014 "),XV=n(u9e,"A",{href:!0});var Smt=s(XV);VWo=r(Smt,"HubertForSequenceClassification"),Smt.forEach(t),XWo=r(u9e," (Hubert model)"),u9e.forEach(t),zWo=i(bo),r3=n(bo,"LI",{});var _9e=s(r3);ape=n(_9e,"STRONG",{});var Rmt=s(ape);QWo=r(Rmt,"sew"),Rmt.forEach(t),WWo=r(_9e," \u2014 "),zV=n(_9e,"A",{href:!0});var Bmt=s(zV);HWo=r(Bmt,"SEWForSequenceClassification"),Bmt.forEach(t),UWo=r(_9e," (SEW model)"),_9e.forEach(t),JWo=i(bo),t3=n(bo,"LI",{});var b9e=s(t3);npe=n(b9e,"STRONG",{});var Pmt=s(npe);YWo=r(Pmt,"sew-d"),Pmt.forEach(t),KWo=r(b9e," \u2014 "),QV=n(b9e,"A",{href:!0});var Imt=s(QV);ZWo=r(Imt,"SEWDForSequenceClassification"),Imt.forEach(t),eHo=r(b9e," (SEW-D model)"),b9e.forEach(t),oHo=i(bo),a3=n(bo,"LI",{});var v9e=s(a3);spe=n(v9e,"STRONG",{});var qmt=s(spe);rHo=r(qmt,"unispeech"),qmt.forEach(t),tHo=r(v9e," \u2014 "),WV=n(v9e,"A",{href:!0});var Nmt=s(WV);aHo=r(Nmt,"UniSpeechForSequenceClassification"),Nmt.forEach(t),nHo=r(v9e," (UniSpeech model)"),v9e.forEach(t),sHo=i(bo),n3=n(bo,"LI",{});var F9e=s(n3);lpe=n(F9e,"STRONG",{});var jmt=s(lpe);lHo=r(jmt,"unispeech-sat"),jmt.forEach(t),iHo=r(F9e," \u2014 "),HV=n(F9e,"A",{href:!0});var Dmt=s(HV);dHo=r(Dmt,"UniSpeechSatForSequenceClassification"),Dmt.forEach(t),cHo=r(F9e," (UniSpeechSat model)"),F9e.forEach(t),fHo=i(bo),s3=n(bo,"LI",{});var T9e=s(s3);ipe=n(T9e,"STRONG",{});var Gmt=s(ipe);mHo=r(Gmt,"wav2vec2"),Gmt.forEach(t),gHo=r(T9e," \u2014 "),UV=n(T9e,"A",{href:!0});var Omt=s(UV);hHo=r(Omt,"Wav2Vec2ForSequenceClassification"),Omt.forEach(t),pHo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),uHo=i(bo),l3=n(bo,"LI",{});var M9e=s(l3);dpe=n(M9e,"STRONG",{});var Vmt=s(dpe);_Ho=r(Vmt,"wavlm"),Vmt.forEach(t),bHo=r(M9e," \u2014 "),JV=n(M9e,"A",{href:!0});var Xmt=s(JV);vHo=r(Xmt,"WavLMForSequenceClassification"),Xmt.forEach(t),FHo=r(M9e," (WavLM model)"),M9e.forEach(t),bo.forEach(t),THo=i(ma),i3=n(ma,"P",{});var E9e=s(i3);MHo=r(E9e,"The model is set in evaluation mode by default using "),cpe=n(E9e,"CODE",{});var zmt=s(cpe);EHo=r(zmt,"model.eval()"),zmt.forEach(t),CHo=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(E9e,"CODE",{});var Qmt=s(fpe);wHo=r(Qmt,"model.train()"),Qmt.forEach(t),E9e.forEach(t),AHo=i(ma),T(d3.$$.fragment,ma),ma.forEach(t),el.forEach(t),BIe=i(f),cd=n(f,"H2",{class:!0});var NNe=s(cd);c3=n(NNe,"A",{id:!0,class:!0,href:!0});var Wmt=s(c3);mpe=n(Wmt,"SPAN",{});var Hmt=s(mpe);T(GL.$$.fragment,Hmt),Hmt.forEach(t),Wmt.forEach(t),yHo=i(NNe),gpe=n(NNe,"SPAN",{});var Umt=s(gpe);LHo=r(Umt,"AutoModelForAudioFrameClassification"),Umt.forEach(t),NNe.forEach(t),PIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(OL.$$.fragment,ol),xHo=i(ol),fd=n(ol,"P",{});var jK=s(fd);$Ho=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YV=n(jK,"A",{href:!0});var Jmt=s(YV);kHo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),SHo=r(jK," class method or the "),KV=n(jK,"A",{href:!0});var Ymt=s(KV);RHo=r(Ymt,"from_config()"),Ymt.forEach(t),BHo=r(jK,` class
method.`),jK.forEach(t),PHo=i(ol),VL=n(ol,"P",{});var jNe=s(VL);IHo=r(jNe,"This class cannot be instantiated directly using "),hpe=n(jNe,"CODE",{});var Kmt=s(hpe);qHo=r(Kmt,"__init__()"),Kmt.forEach(t),NHo=r(jNe," (throws an error)."),jNe.forEach(t),jHo=i(ol),ut=n(ol,"DIV",{class:!0});var xA=s(ut);T(XL.$$.fragment,xA),DHo=i(xA),ppe=n(xA,"P",{});var Zmt=s(ppe);GHo=r(Zmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zmt.forEach(t),OHo=i(xA),md=n(xA,"P",{});var DK=s(md);VHo=r(DK,`Note:
Loading a model from its configuration file does `),upe=n(DK,"STRONG",{});var egt=s(upe);XHo=r(egt,"not"),egt.forEach(t),zHo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(DK,"A",{href:!0});var ogt=s(ZV);QHo=r(ogt,"from_pretrained()"),ogt.forEach(t),WHo=r(DK," to load the model weights."),DK.forEach(t),HHo=i(xA),T(f3.$$.fragment,xA),xA.forEach(t),UHo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(zL.$$.fragment,ga),JHo=i(ga),_pe=n(ga,"P",{});var rgt=s(_pe);YHo=r(rgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rgt.forEach(t),KHo=i(ga),Da=n(ga,"P",{});var $A=s(Da);ZHo=r($A,"The model class to instantiate is selected based on the "),bpe=n($A,"CODE",{});var tgt=s(bpe);eUo=r(tgt,"model_type"),tgt.forEach(t),oUo=r($A,` property of the config object (either
passed as an argument or loaded from `),vpe=n($A,"CODE",{});var agt=s(vpe);rUo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),tUo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n($A,"CODE",{});var ngt=s(Fpe);aUo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),nUo=r($A,":"),$A.forEach(t),sUo=i(ga),Ga=n(ga,"UL",{});var kA=s(Ga);m3=n(kA,"LI",{});var C9e=s(m3);Tpe=n(C9e,"STRONG",{});var sgt=s(Tpe);lUo=r(sgt,"data2vec-audio"),sgt.forEach(t),iUo=r(C9e," \u2014 "),eX=n(C9e,"A",{href:!0});var lgt=s(eX);dUo=r(lgt,"Data2VecAudioForAudioFrameClassification"),lgt.forEach(t),cUo=r(C9e," (Data2VecAudio model)"),C9e.forEach(t),fUo=i(kA),g3=n(kA,"LI",{});var w9e=s(g3);Mpe=n(w9e,"STRONG",{});var igt=s(Mpe);mUo=r(igt,"unispeech-sat"),igt.forEach(t),gUo=r(w9e," \u2014 "),oX=n(w9e,"A",{href:!0});var dgt=s(oX);hUo=r(dgt,"UniSpeechSatForAudioFrameClassification"),dgt.forEach(t),pUo=r(w9e," (UniSpeechSat model)"),w9e.forEach(t),uUo=i(kA),h3=n(kA,"LI",{});var A9e=s(h3);Epe=n(A9e,"STRONG",{});var cgt=s(Epe);_Uo=r(cgt,"wav2vec2"),cgt.forEach(t),bUo=r(A9e," \u2014 "),rX=n(A9e,"A",{href:!0});var fgt=s(rX);vUo=r(fgt,"Wav2Vec2ForAudioFrameClassification"),fgt.forEach(t),FUo=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),TUo=i(kA),p3=n(kA,"LI",{});var y9e=s(p3);Cpe=n(y9e,"STRONG",{});var mgt=s(Cpe);MUo=r(mgt,"wavlm"),mgt.forEach(t),EUo=r(y9e," \u2014 "),tX=n(y9e,"A",{href:!0});var ggt=s(tX);CUo=r(ggt,"WavLMForAudioFrameClassification"),ggt.forEach(t),wUo=r(y9e," (WavLM model)"),y9e.forEach(t),kA.forEach(t),AUo=i(ga),u3=n(ga,"P",{});var L9e=s(u3);yUo=r(L9e,"The model is set in evaluation mode by default using "),wpe=n(L9e,"CODE",{});var hgt=s(wpe);LUo=r(hgt,"model.eval()"),hgt.forEach(t),xUo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(L9e,"CODE",{});var pgt=s(Ape);$Uo=r(pgt,"model.train()"),pgt.forEach(t),L9e.forEach(t),kUo=i(ga),T(_3.$$.fragment,ga),ga.forEach(t),ol.forEach(t),IIe=i(f),gd=n(f,"H2",{class:!0});var DNe=s(gd);b3=n(DNe,"A",{id:!0,class:!0,href:!0});var ugt=s(b3);ype=n(ugt,"SPAN",{});var _gt=s(ype);T(QL.$$.fragment,_gt),_gt.forEach(t),ugt.forEach(t),SUo=i(DNe),Lpe=n(DNe,"SPAN",{});var bgt=s(Lpe);RUo=r(bgt,"AutoModelForCTC"),bgt.forEach(t),DNe.forEach(t),qIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(WL.$$.fragment,rl),BUo=i(rl),hd=n(rl,"P",{});var GK=s(hd);PUo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aX=n(GK,"A",{href:!0});var vgt=s(aX);IUo=r(vgt,"from_pretrained()"),vgt.forEach(t),qUo=r(GK," class method or the "),nX=n(GK,"A",{href:!0});var Fgt=s(nX);NUo=r(Fgt,"from_config()"),Fgt.forEach(t),jUo=r(GK,` class
method.`),GK.forEach(t),DUo=i(rl),HL=n(rl,"P",{});var GNe=s(HL);GUo=r(GNe,"This class cannot be instantiated directly using "),xpe=n(GNe,"CODE",{});var Tgt=s(xpe);OUo=r(Tgt,"__init__()"),Tgt.forEach(t),VUo=r(GNe," (throws an error)."),GNe.forEach(t),XUo=i(rl),_t=n(rl,"DIV",{class:!0});var SA=s(_t);T(UL.$$.fragment,SA),zUo=i(SA),$pe=n(SA,"P",{});var Mgt=s($pe);QUo=r(Mgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Mgt.forEach(t),WUo=i(SA),pd=n(SA,"P",{});var OK=s(pd);HUo=r(OK,`Note:
Loading a model from its configuration file does `),kpe=n(OK,"STRONG",{});var Egt=s(kpe);UUo=r(Egt,"not"),Egt.forEach(t),JUo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(OK,"A",{href:!0});var Cgt=s(sX);YUo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),KUo=r(OK," to load the model weights."),OK.forEach(t),ZUo=i(SA),T(v3.$$.fragment,SA),SA.forEach(t),eJo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(JL.$$.fragment,ha),oJo=i(ha),Spe=n(ha,"P",{});var wgt=s(Spe);rJo=r(wgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wgt.forEach(t),tJo=i(ha),Oa=n(ha,"P",{});var RA=s(Oa);aJo=r(RA,"The model class to instantiate is selected based on the "),Rpe=n(RA,"CODE",{});var Agt=s(Rpe);nJo=r(Agt,"model_type"),Agt.forEach(t),sJo=r(RA,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(RA,"CODE",{});var ygt=s(Bpe);lJo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),iJo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(RA,"CODE",{});var Lgt=s(Ppe);dJo=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),cJo=r(RA,":"),RA.forEach(t),fJo=i(ha),je=n(ha,"UL",{});var vo=s(je);F3=n(vo,"LI",{});var x9e=s(F3);Ipe=n(x9e,"STRONG",{});var xgt=s(Ipe);mJo=r(xgt,"data2vec-audio"),xgt.forEach(t),gJo=r(x9e," \u2014 "),lX=n(x9e,"A",{href:!0});var $gt=s(lX);hJo=r($gt,"Data2VecAudioForCTC"),$gt.forEach(t),pJo=r(x9e," (Data2VecAudio model)"),x9e.forEach(t),uJo=i(vo),T3=n(vo,"LI",{});var $9e=s(T3);qpe=n($9e,"STRONG",{});var kgt=s(qpe);_Jo=r(kgt,"hubert"),kgt.forEach(t),bJo=r($9e," \u2014 "),iX=n($9e,"A",{href:!0});var Sgt=s(iX);vJo=r(Sgt,"HubertForCTC"),Sgt.forEach(t),FJo=r($9e," (Hubert model)"),$9e.forEach(t),TJo=i(vo),M3=n(vo,"LI",{});var k9e=s(M3);Npe=n(k9e,"STRONG",{});var Rgt=s(Npe);MJo=r(Rgt,"sew"),Rgt.forEach(t),EJo=r(k9e," \u2014 "),dX=n(k9e,"A",{href:!0});var Bgt=s(dX);CJo=r(Bgt,"SEWForCTC"),Bgt.forEach(t),wJo=r(k9e," (SEW model)"),k9e.forEach(t),AJo=i(vo),E3=n(vo,"LI",{});var S9e=s(E3);jpe=n(S9e,"STRONG",{});var Pgt=s(jpe);yJo=r(Pgt,"sew-d"),Pgt.forEach(t),LJo=r(S9e," \u2014 "),cX=n(S9e,"A",{href:!0});var Igt=s(cX);xJo=r(Igt,"SEWDForCTC"),Igt.forEach(t),$Jo=r(S9e," (SEW-D model)"),S9e.forEach(t),kJo=i(vo),C3=n(vo,"LI",{});var R9e=s(C3);Dpe=n(R9e,"STRONG",{});var qgt=s(Dpe);SJo=r(qgt,"unispeech"),qgt.forEach(t),RJo=r(R9e," \u2014 "),fX=n(R9e,"A",{href:!0});var Ngt=s(fX);BJo=r(Ngt,"UniSpeechForCTC"),Ngt.forEach(t),PJo=r(R9e," (UniSpeech model)"),R9e.forEach(t),IJo=i(vo),w3=n(vo,"LI",{});var B9e=s(w3);Gpe=n(B9e,"STRONG",{});var jgt=s(Gpe);qJo=r(jgt,"unispeech-sat"),jgt.forEach(t),NJo=r(B9e," \u2014 "),mX=n(B9e,"A",{href:!0});var Dgt=s(mX);jJo=r(Dgt,"UniSpeechSatForCTC"),Dgt.forEach(t),DJo=r(B9e," (UniSpeechSat model)"),B9e.forEach(t),GJo=i(vo),A3=n(vo,"LI",{});var P9e=s(A3);Ope=n(P9e,"STRONG",{});var Ggt=s(Ope);OJo=r(Ggt,"wav2vec2"),Ggt.forEach(t),VJo=r(P9e," \u2014 "),gX=n(P9e,"A",{href:!0});var Ogt=s(gX);XJo=r(Ogt,"Wav2Vec2ForCTC"),Ogt.forEach(t),zJo=r(P9e," (Wav2Vec2 model)"),P9e.forEach(t),QJo=i(vo),y3=n(vo,"LI",{});var I9e=s(y3);Vpe=n(I9e,"STRONG",{});var Vgt=s(Vpe);WJo=r(Vgt,"wavlm"),Vgt.forEach(t),HJo=r(I9e," \u2014 "),hX=n(I9e,"A",{href:!0});var Xgt=s(hX);UJo=r(Xgt,"WavLMForCTC"),Xgt.forEach(t),JJo=r(I9e," (WavLM model)"),I9e.forEach(t),vo.forEach(t),YJo=i(ha),L3=n(ha,"P",{});var q9e=s(L3);KJo=r(q9e,"The model is set in evaluation mode by default using "),Xpe=n(q9e,"CODE",{});var zgt=s(Xpe);ZJo=r(zgt,"model.eval()"),zgt.forEach(t),eYo=r(q9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(q9e,"CODE",{});var Qgt=s(zpe);oYo=r(Qgt,"model.train()"),Qgt.forEach(t),q9e.forEach(t),rYo=i(ha),T(x3.$$.fragment,ha),ha.forEach(t),rl.forEach(t),NIe=i(f),ud=n(f,"H2",{class:!0});var ONe=s(ud);$3=n(ONe,"A",{id:!0,class:!0,href:!0});var Wgt=s($3);Qpe=n(Wgt,"SPAN",{});var Hgt=s(Qpe);T(YL.$$.fragment,Hgt),Hgt.forEach(t),Wgt.forEach(t),tYo=i(ONe),Wpe=n(ONe,"SPAN",{});var Ugt=s(Wpe);aYo=r(Ugt,"AutoModelForSpeechSeq2Seq"),Ugt.forEach(t),ONe.forEach(t),jIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(KL.$$.fragment,tl),nYo=i(tl),_d=n(tl,"P",{});var VK=s(_d);sYo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pX=n(VK,"A",{href:!0});var Jgt=s(pX);lYo=r(Jgt,"from_pretrained()"),Jgt.forEach(t),iYo=r(VK," class method or the "),uX=n(VK,"A",{href:!0});var Ygt=s(uX);dYo=r(Ygt,"from_config()"),Ygt.forEach(t),cYo=r(VK,` class
method.`),VK.forEach(t),fYo=i(tl),ZL=n(tl,"P",{});var VNe=s(ZL);mYo=r(VNe,"This class cannot be instantiated directly using "),Hpe=n(VNe,"CODE",{});var Kgt=s(Hpe);gYo=r(Kgt,"__init__()"),Kgt.forEach(t),hYo=r(VNe," (throws an error)."),VNe.forEach(t),pYo=i(tl),bt=n(tl,"DIV",{class:!0});var BA=s(bt);T(e8.$$.fragment,BA),uYo=i(BA),Upe=n(BA,"P",{});var Zgt=s(Upe);_Yo=r(Zgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zgt.forEach(t),bYo=i(BA),bd=n(BA,"P",{});var XK=s(bd);vYo=r(XK,`Note:
Loading a model from its configuration file does `),Jpe=n(XK,"STRONG",{});var eht=s(Jpe);FYo=r(eht,"not"),eht.forEach(t),TYo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(XK,"A",{href:!0});var oht=s(_X);MYo=r(oht,"from_pretrained()"),oht.forEach(t),EYo=r(XK," to load the model weights."),XK.forEach(t),CYo=i(BA),T(k3.$$.fragment,BA),BA.forEach(t),wYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(o8.$$.fragment,pa),AYo=i(pa),Ype=n(pa,"P",{});var rht=s(Ype);yYo=r(rht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rht.forEach(t),LYo=i(pa),Va=n(pa,"P",{});var PA=s(Va);xYo=r(PA,"The model class to instantiate is selected based on the "),Kpe=n(PA,"CODE",{});var tht=s(Kpe);$Yo=r(tht,"model_type"),tht.forEach(t),kYo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(PA,"CODE",{});var aht=s(Zpe);SYo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),RYo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(PA,"CODE",{});var nht=s(eue);BYo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),PYo=r(PA,":"),PA.forEach(t),IYo=i(pa),r8=n(pa,"UL",{});var XNe=s(r8);S3=n(XNe,"LI",{});var N9e=s(S3);oue=n(N9e,"STRONG",{});var sht=s(oue);qYo=r(sht,"speech-encoder-decoder"),sht.forEach(t),NYo=r(N9e," \u2014 "),bX=n(N9e,"A",{href:!0});var lht=s(bX);jYo=r(lht,"SpeechEncoderDecoderModel"),lht.forEach(t),DYo=r(N9e," (Speech Encoder decoder model)"),N9e.forEach(t),GYo=i(XNe),R3=n(XNe,"LI",{});var j9e=s(R3);rue=n(j9e,"STRONG",{});var iht=s(rue);OYo=r(iht,"speech_to_text"),iht.forEach(t),VYo=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var dht=s(vX);XYo=r(dht,"Speech2TextForConditionalGeneration"),dht.forEach(t),zYo=r(j9e," (Speech2Text model)"),j9e.forEach(t),XNe.forEach(t),QYo=i(pa),B3=n(pa,"P",{});var D9e=s(B3);WYo=r(D9e,"The model is set in evaluation mode by default using "),tue=n(D9e,"CODE",{});var cht=s(tue);HYo=r(cht,"model.eval()"),cht.forEach(t),UYo=r(D9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(D9e,"CODE",{});var fht=s(aue);JYo=r(fht,"model.train()"),fht.forEach(t),D9e.forEach(t),YYo=i(pa),T(P3.$$.fragment,pa),pa.forEach(t),tl.forEach(t),DIe=i(f),vd=n(f,"H2",{class:!0});var zNe=s(vd);I3=n(zNe,"A",{id:!0,class:!0,href:!0});var mht=s(I3);nue=n(mht,"SPAN",{});var ght=s(nue);T(t8.$$.fragment,ght),ght.forEach(t),mht.forEach(t),KYo=i(zNe),sue=n(zNe,"SPAN",{});var hht=s(sue);ZYo=r(hht,"AutoModelForAudioXVector"),hht.forEach(t),zNe.forEach(t),GIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(a8.$$.fragment,al),eKo=i(al),Fd=n(al,"P",{});var zK=s(Fd);oKo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FX=n(zK,"A",{href:!0});var pht=s(FX);rKo=r(pht,"from_pretrained()"),pht.forEach(t),tKo=r(zK," class method or the "),TX=n(zK,"A",{href:!0});var uht=s(TX);aKo=r(uht,"from_config()"),uht.forEach(t),nKo=r(zK,` class
method.`),zK.forEach(t),sKo=i(al),n8=n(al,"P",{});var QNe=s(n8);lKo=r(QNe,"This class cannot be instantiated directly using "),lue=n(QNe,"CODE",{});var _ht=s(lue);iKo=r(_ht,"__init__()"),_ht.forEach(t),dKo=r(QNe," (throws an error)."),QNe.forEach(t),cKo=i(al),vt=n(al,"DIV",{class:!0});var IA=s(vt);T(s8.$$.fragment,IA),fKo=i(IA),iue=n(IA,"P",{});var bht=s(iue);mKo=r(bht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bht.forEach(t),gKo=i(IA),Td=n(IA,"P",{});var QK=s(Td);hKo=r(QK,`Note:
Loading a model from its configuration file does `),due=n(QK,"STRONG",{});var vht=s(due);pKo=r(vht,"not"),vht.forEach(t),uKo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(QK,"A",{href:!0});var Fht=s(MX);_Ko=r(Fht,"from_pretrained()"),Fht.forEach(t),bKo=r(QK," to load the model weights."),QK.forEach(t),vKo=i(IA),T(q3.$$.fragment,IA),IA.forEach(t),FKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(l8.$$.fragment,ua),TKo=i(ua),cue=n(ua,"P",{});var Tht=s(cue);MKo=r(Tht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Tht.forEach(t),EKo=i(ua),Xa=n(ua,"P",{});var qA=s(Xa);CKo=r(qA,"The model class to instantiate is selected based on the "),fue=n(qA,"CODE",{});var Mht=s(fue);wKo=r(Mht,"model_type"),Mht.forEach(t),AKo=r(qA,` property of the config object (either
passed as an argument or loaded from `),mue=n(qA,"CODE",{});var Eht=s(mue);yKo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),LKo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(qA,"CODE",{});var Cht=s(gue);xKo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),$Ko=r(qA,":"),qA.forEach(t),kKo=i(ua),za=n(ua,"UL",{});var NA=s(za);N3=n(NA,"LI",{});var G9e=s(N3);hue=n(G9e,"STRONG",{});var wht=s(hue);SKo=r(wht,"data2vec-audio"),wht.forEach(t),RKo=r(G9e," \u2014 "),EX=n(G9e,"A",{href:!0});var Aht=s(EX);BKo=r(Aht,"Data2VecAudioForXVector"),Aht.forEach(t),PKo=r(G9e," (Data2VecAudio model)"),G9e.forEach(t),IKo=i(NA),j3=n(NA,"LI",{});var O9e=s(j3);pue=n(O9e,"STRONG",{});var yht=s(pue);qKo=r(yht,"unispeech-sat"),yht.forEach(t),NKo=r(O9e," \u2014 "),CX=n(O9e,"A",{href:!0});var Lht=s(CX);jKo=r(Lht,"UniSpeechSatForXVector"),Lht.forEach(t),DKo=r(O9e," (UniSpeechSat model)"),O9e.forEach(t),GKo=i(NA),D3=n(NA,"LI",{});var V9e=s(D3);uue=n(V9e,"STRONG",{});var xht=s(uue);OKo=r(xht,"wav2vec2"),xht.forEach(t),VKo=r(V9e," \u2014 "),wX=n(V9e,"A",{href:!0});var $ht=s(wX);XKo=r($ht,"Wav2Vec2ForXVector"),$ht.forEach(t),zKo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),QKo=i(NA),G3=n(NA,"LI",{});var X9e=s(G3);_ue=n(X9e,"STRONG",{});var kht=s(_ue);WKo=r(kht,"wavlm"),kht.forEach(t),HKo=r(X9e," \u2014 "),AX=n(X9e,"A",{href:!0});var Sht=s(AX);UKo=r(Sht,"WavLMForXVector"),Sht.forEach(t),JKo=r(X9e," (WavLM model)"),X9e.forEach(t),NA.forEach(t),YKo=i(ua),O3=n(ua,"P",{});var z9e=s(O3);KKo=r(z9e,"The model is set in evaluation mode by default using "),bue=n(z9e,"CODE",{});var Rht=s(bue);ZKo=r(Rht,"model.eval()"),Rht.forEach(t),eZo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(z9e,"CODE",{});var Bht=s(vue);oZo=r(Bht,"model.train()"),Bht.forEach(t),z9e.forEach(t),rZo=i(ua),T(V3.$$.fragment,ua),ua.forEach(t),al.forEach(t),OIe=i(f),Md=n(f,"H2",{class:!0});var WNe=s(Md);X3=n(WNe,"A",{id:!0,class:!0,href:!0});var Pht=s(X3);Fue=n(Pht,"SPAN",{});var Iht=s(Fue);T(i8.$$.fragment,Iht),Iht.forEach(t),Pht.forEach(t),tZo=i(WNe),Tue=n(WNe,"SPAN",{});var qht=s(Tue);aZo=r(qht,"AutoModelForMaskedImageModeling"),qht.forEach(t),WNe.forEach(t),VIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(d8.$$.fragment,nl),nZo=i(nl),Ed=n(nl,"P",{});var WK=s(Ed);sZo=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yX=n(WK,"A",{href:!0});var Nht=s(yX);lZo=r(Nht,"from_pretrained()"),Nht.forEach(t),iZo=r(WK," class method or the "),LX=n(WK,"A",{href:!0});var jht=s(LX);dZo=r(jht,"from_config()"),jht.forEach(t),cZo=r(WK,` class
method.`),WK.forEach(t),fZo=i(nl),c8=n(nl,"P",{});var HNe=s(c8);mZo=r(HNe,"This class cannot be instantiated directly using "),Mue=n(HNe,"CODE",{});var Dht=s(Mue);gZo=r(Dht,"__init__()"),Dht.forEach(t),hZo=r(HNe," (throws an error)."),HNe.forEach(t),pZo=i(nl),Ft=n(nl,"DIV",{class:!0});var jA=s(Ft);T(f8.$$.fragment,jA),uZo=i(jA),Eue=n(jA,"P",{});var Ght=s(Eue);_Zo=r(Ght,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ght.forEach(t),bZo=i(jA),Cd=n(jA,"P",{});var HK=s(Cd);vZo=r(HK,`Note:
Loading a model from its configuration file does `),Cue=n(HK,"STRONG",{});var Oht=s(Cue);FZo=r(Oht,"not"),Oht.forEach(t),TZo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(HK,"A",{href:!0});var Vht=s(xX);MZo=r(Vht,"from_pretrained()"),Vht.forEach(t),EZo=r(HK," to load the model weights."),HK.forEach(t),CZo=i(jA),T(z3.$$.fragment,jA),jA.forEach(t),wZo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(m8.$$.fragment,_a),AZo=i(_a),wue=n(_a,"P",{});var Xht=s(wue);yZo=r(Xht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Xht.forEach(t),LZo=i(_a),Qa=n(_a,"P",{});var DA=s(Qa);xZo=r(DA,"The model class to instantiate is selected based on the "),Aue=n(DA,"CODE",{});var zht=s(Aue);$Zo=r(zht,"model_type"),zht.forEach(t),kZo=r(DA,` property of the config object (either
passed as an argument or loaded from `),yue=n(DA,"CODE",{});var Qht=s(yue);SZo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),RZo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(DA,"CODE",{});var Wht=s(Lue);BZo=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),PZo=r(DA,":"),DA.forEach(t),IZo=i(_a),wd=n(_a,"UL",{});var UK=s(wd);Q3=n(UK,"LI",{});var Q9e=s(Q3);xue=n(Q9e,"STRONG",{});var Hht=s(xue);qZo=r(Hht,"deit"),Hht.forEach(t),NZo=r(Q9e," \u2014 "),$X=n(Q9e,"A",{href:!0});var Uht=s($X);jZo=r(Uht,"DeiTForMaskedImageModeling"),Uht.forEach(t),DZo=r(Q9e," (DeiT model)"),Q9e.forEach(t),GZo=i(UK),W3=n(UK,"LI",{});var W9e=s(W3);$ue=n(W9e,"STRONG",{});var Jht=s($ue);OZo=r(Jht,"swin"),Jht.forEach(t),VZo=r(W9e," \u2014 "),kX=n(W9e,"A",{href:!0});var Yht=s(kX);XZo=r(Yht,"SwinForMaskedImageModeling"),Yht.forEach(t),zZo=r(W9e," (Swin model)"),W9e.forEach(t),QZo=i(UK),H3=n(UK,"LI",{});var H9e=s(H3);kue=n(H9e,"STRONG",{});var Kht=s(kue);WZo=r(Kht,"vit"),Kht.forEach(t),HZo=r(H9e," \u2014 "),SX=n(H9e,"A",{href:!0});var Zht=s(SX);UZo=r(Zht,"ViTForMaskedImageModeling"),Zht.forEach(t),JZo=r(H9e," (ViT model)"),H9e.forEach(t),UK.forEach(t),YZo=i(_a),U3=n(_a,"P",{});var U9e=s(U3);KZo=r(U9e,"The model is set in evaluation mode by default using "),Sue=n(U9e,"CODE",{});var ept=s(Sue);ZZo=r(ept,"model.eval()"),ept.forEach(t),eer=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(U9e,"CODE",{});var opt=s(Rue);oer=r(opt,"model.train()"),opt.forEach(t),U9e.forEach(t),rer=i(_a),T(J3.$$.fragment,_a),_a.forEach(t),nl.forEach(t),XIe=i(f),Ad=n(f,"H2",{class:!0});var UNe=s(Ad);Y3=n(UNe,"A",{id:!0,class:!0,href:!0});var rpt=s(Y3);Bue=n(rpt,"SPAN",{});var tpt=s(Bue);T(g8.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),ter=i(UNe),Pue=n(UNe,"SPAN",{});var apt=s(Pue);aer=r(apt,"AutoModelForObjectDetection"),apt.forEach(t),UNe.forEach(t),zIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(h8.$$.fragment,sl),ner=i(sl),yd=n(sl,"P",{});var JK=s(yd);ser=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RX=n(JK,"A",{href:!0});var npt=s(RX);ler=r(npt,"from_pretrained()"),npt.forEach(t),ier=r(JK," class method or the "),BX=n(JK,"A",{href:!0});var spt=s(BX);der=r(spt,"from_config()"),spt.forEach(t),cer=r(JK,` class
method.`),JK.forEach(t),fer=i(sl),p8=n(sl,"P",{});var JNe=s(p8);mer=r(JNe,"This class cannot be instantiated directly using "),Iue=n(JNe,"CODE",{});var lpt=s(Iue);ger=r(lpt,"__init__()"),lpt.forEach(t),her=r(JNe," (throws an error)."),JNe.forEach(t),per=i(sl),Tt=n(sl,"DIV",{class:!0});var GA=s(Tt);T(u8.$$.fragment,GA),uer=i(GA),que=n(GA,"P",{});var ipt=s(que);_er=r(ipt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ipt.forEach(t),ber=i(GA),Ld=n(GA,"P",{});var YK=s(Ld);ver=r(YK,`Note:
Loading a model from its configuration file does `),Nue=n(YK,"STRONG",{});var dpt=s(Nue);Fer=r(dpt,"not"),dpt.forEach(t),Ter=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(YK,"A",{href:!0});var cpt=s(PX);Mer=r(cpt,"from_pretrained()"),cpt.forEach(t),Eer=r(YK," to load the model weights."),YK.forEach(t),Cer=i(GA),T(K3.$$.fragment,GA),GA.forEach(t),wer=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(_8.$$.fragment,ba),Aer=i(ba),jue=n(ba,"P",{});var fpt=s(jue);yer=r(fpt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fpt.forEach(t),Ler=i(ba),Wa=n(ba,"P",{});var OA=s(Wa);xer=r(OA,"The model class to instantiate is selected based on the "),Due=n(OA,"CODE",{});var mpt=s(Due);$er=r(mpt,"model_type"),mpt.forEach(t),ker=r(OA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(OA,"CODE",{});var gpt=s(Gue);Ser=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),Rer=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(OA,"CODE",{});var hpt=s(Oue);Ber=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Per=r(OA,":"),OA.forEach(t),Ier=i(ba),b8=n(ba,"UL",{});var YNe=s(b8);Z3=n(YNe,"LI",{});var J9e=s(Z3);Vue=n(J9e,"STRONG",{});var ppt=s(Vue);qer=r(ppt,"detr"),ppt.forEach(t),Ner=r(J9e," \u2014 "),IX=n(J9e,"A",{href:!0});var upt=s(IX);jer=r(upt,"DetrForObjectDetection"),upt.forEach(t),Der=r(J9e," (DETR model)"),J9e.forEach(t),Ger=i(YNe),ev=n(YNe,"LI",{});var Y9e=s(ev);Xue=n(Y9e,"STRONG",{});var _pt=s(Xue);Oer=r(_pt,"yolos"),_pt.forEach(t),Ver=r(Y9e," \u2014 "),qX=n(Y9e,"A",{href:!0});var bpt=s(qX);Xer=r(bpt,"YolosForObjectDetection"),bpt.forEach(t),zer=r(Y9e," (YOLOS model)"),Y9e.forEach(t),YNe.forEach(t),Qer=i(ba),ov=n(ba,"P",{});var K9e=s(ov);Wer=r(K9e,"The model is set in evaluation mode by default using "),zue=n(K9e,"CODE",{});var vpt=s(zue);Her=r(vpt,"model.eval()"),vpt.forEach(t),Uer=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Que=n(K9e,"CODE",{});var Fpt=s(Que);Jer=r(Fpt,"model.train()"),Fpt.forEach(t),K9e.forEach(t),Yer=i(ba),T(rv.$$.fragment,ba),ba.forEach(t),sl.forEach(t),QIe=i(f),xd=n(f,"H2",{class:!0});var KNe=s(xd);tv=n(KNe,"A",{id:!0,class:!0,href:!0});var Tpt=s(tv);Wue=n(Tpt,"SPAN",{});var Mpt=s(Wue);T(v8.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),Ker=i(KNe),Hue=n(KNe,"SPAN",{});var Ept=s(Hue);Zer=r(Ept,"AutoModelForImageSegmentation"),Ept.forEach(t),KNe.forEach(t),WIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(F8.$$.fragment,ll),eor=i(ll),$d=n(ll,"P",{});var KK=s($d);oor=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NX=n(KK,"A",{href:!0});var Cpt=s(NX);ror=r(Cpt,"from_pretrained()"),Cpt.forEach(t),tor=r(KK," class method or the "),jX=n(KK,"A",{href:!0});var wpt=s(jX);aor=r(wpt,"from_config()"),wpt.forEach(t),nor=r(KK,` class
method.`),KK.forEach(t),sor=i(ll),T8=n(ll,"P",{});var ZNe=s(T8);lor=r(ZNe,"This class cannot be instantiated directly using "),Uue=n(ZNe,"CODE",{});var Apt=s(Uue);ior=r(Apt,"__init__()"),Apt.forEach(t),dor=r(ZNe," (throws an error)."),ZNe.forEach(t),cor=i(ll),Mt=n(ll,"DIV",{class:!0});var VA=s(Mt);T(M8.$$.fragment,VA),mor=i(VA),Jue=n(VA,"P",{});var ypt=s(Jue);gor=r(ypt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ypt.forEach(t),hor=i(VA),kd=n(VA,"P",{});var ZK=s(kd);por=r(ZK,`Note:
Loading a model from its configuration file does `),Yue=n(ZK,"STRONG",{});var Lpt=s(Yue);uor=r(Lpt,"not"),Lpt.forEach(t),_or=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(ZK,"A",{href:!0});var xpt=s(DX);bor=r(xpt,"from_pretrained()"),xpt.forEach(t),vor=r(ZK," to load the model weights."),ZK.forEach(t),For=i(VA),T(av.$$.fragment,VA),VA.forEach(t),Tor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(E8.$$.fragment,va),Mor=i(va),Kue=n(va,"P",{});var $pt=s(Kue);Eor=r($pt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),$pt.forEach(t),Cor=i(va),Ha=n(va,"P",{});var XA=s(Ha);wor=r(XA,"The model class to instantiate is selected based on the "),Zue=n(XA,"CODE",{});var kpt=s(Zue);Aor=r(kpt,"model_type"),kpt.forEach(t),yor=r(XA,` property of the config object (either
passed as an argument or loaded from `),e_e=n(XA,"CODE",{});var Spt=s(e_e);Lor=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),xor=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(XA,"CODE",{});var Rpt=s(o_e);$or=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),kor=r(XA,":"),XA.forEach(t),Sor=i(va),r_e=n(va,"UL",{});var Bpt=s(r_e);nv=n(Bpt,"LI",{});var Z9e=s(nv);t_e=n(Z9e,"STRONG",{});var Ppt=s(t_e);Ror=r(Ppt,"detr"),Ppt.forEach(t),Bor=r(Z9e," \u2014 "),GX=n(Z9e,"A",{href:!0});var Ipt=s(GX);Por=r(Ipt,"DetrForSegmentation"),Ipt.forEach(t),Ior=r(Z9e," (DETR model)"),Z9e.forEach(t),Bpt.forEach(t),qor=i(va),sv=n(va,"P",{});var e$e=s(sv);Nor=r(e$e,"The model is set in evaluation mode by default using "),a_e=n(e$e,"CODE",{});var qpt=s(a_e);jor=r(qpt,"model.eval()"),qpt.forEach(t),Dor=r(e$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n_e=n(e$e,"CODE",{});var Npt=s(n_e);Gor=r(Npt,"model.train()"),Npt.forEach(t),e$e.forEach(t),Oor=i(va),T(lv.$$.fragment,va),va.forEach(t),ll.forEach(t),HIe=i(f),Sd=n(f,"H2",{class:!0});var eje=s(Sd);iv=n(eje,"A",{id:!0,class:!0,href:!0});var jpt=s(iv);s_e=n(jpt,"SPAN",{});var Dpt=s(s_e);T(C8.$$.fragment,Dpt),Dpt.forEach(t),jpt.forEach(t),Vor=i(eje),l_e=n(eje,"SPAN",{});var Gpt=s(l_e);Xor=r(Gpt,"AutoModelForSemanticSegmentation"),Gpt.forEach(t),eje.forEach(t),UIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(w8.$$.fragment,il),zor=i(il),Rd=n(il,"P",{});var eZ=s(Rd);Qor=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OX=n(eZ,"A",{href:!0});var Opt=s(OX);Wor=r(Opt,"from_pretrained()"),Opt.forEach(t),Hor=r(eZ," class method or the "),VX=n(eZ,"A",{href:!0});var Vpt=s(VX);Uor=r(Vpt,"from_config()"),Vpt.forEach(t),Jor=r(eZ,` class
method.`),eZ.forEach(t),Yor=i(il),A8=n(il,"P",{});var oje=s(A8);Kor=r(oje,"This class cannot be instantiated directly using "),i_e=n(oje,"CODE",{});var Xpt=s(i_e);Zor=r(Xpt,"__init__()"),Xpt.forEach(t),err=r(oje," (throws an error)."),oje.forEach(t),orr=i(il),Et=n(il,"DIV",{class:!0});var zA=s(Et);T(y8.$$.fragment,zA),rrr=i(zA),d_e=n(zA,"P",{});var zpt=s(d_e);trr=r(zpt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zpt.forEach(t),arr=i(zA),Bd=n(zA,"P",{});var oZ=s(Bd);nrr=r(oZ,`Note:
Loading a model from its configuration file does `),c_e=n(oZ,"STRONG",{});var Qpt=s(c_e);srr=r(Qpt,"not"),Qpt.forEach(t),lrr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(oZ,"A",{href:!0});var Wpt=s(XX);irr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),drr=r(oZ," to load the model weights."),oZ.forEach(t),crr=i(zA),T(dv.$$.fragment,zA),zA.forEach(t),frr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(L8.$$.fragment,Fa),mrr=i(Fa),f_e=n(Fa,"P",{});var Hpt=s(f_e);grr=r(Hpt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hpt.forEach(t),hrr=i(Fa),Ua=n(Fa,"P",{});var QA=s(Ua);prr=r(QA,"The model class to instantiate is selected based on the "),m_e=n(QA,"CODE",{});var Upt=s(m_e);urr=r(Upt,"model_type"),Upt.forEach(t),_rr=r(QA,` property of the config object (either
passed as an argument or loaded from `),g_e=n(QA,"CODE",{});var Jpt=s(g_e);brr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),vrr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(QA,"CODE",{});var Ypt=s(h_e);Frr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),Trr=r(QA,":"),QA.forEach(t),Mrr=i(Fa),Ja=n(Fa,"UL",{});var WA=s(Ja);cv=n(WA,"LI",{});var o$e=s(cv);p_e=n(o$e,"STRONG",{});var Kpt=s(p_e);Err=r(Kpt,"beit"),Kpt.forEach(t),Crr=r(o$e," \u2014 "),zX=n(o$e,"A",{href:!0});var Zpt=s(zX);wrr=r(Zpt,"BeitForSemanticSegmentation"),Zpt.forEach(t),Arr=r(o$e," (BEiT model)"),o$e.forEach(t),yrr=i(WA),fv=n(WA,"LI",{});var r$e=s(fv);u_e=n(r$e,"STRONG",{});var eut=s(u_e);Lrr=r(eut,"data2vec-vision"),eut.forEach(t),xrr=r(r$e," \u2014 "),QX=n(r$e,"A",{href:!0});var out=s(QX);$rr=r(out,"Data2VecVisionForSemanticSegmentation"),out.forEach(t),krr=r(r$e," (Data2VecVision model)"),r$e.forEach(t),Srr=i(WA),mv=n(WA,"LI",{});var t$e=s(mv);__e=n(t$e,"STRONG",{});var rut=s(__e);Rrr=r(rut,"dpt"),rut.forEach(t),Brr=r(t$e," \u2014 "),WX=n(t$e,"A",{href:!0});var tut=s(WX);Prr=r(tut,"DPTForSemanticSegmentation"),tut.forEach(t),Irr=r(t$e," (DPT model)"),t$e.forEach(t),qrr=i(WA),gv=n(WA,"LI",{});var a$e=s(gv);b_e=n(a$e,"STRONG",{});var aut=s(b_e);Nrr=r(aut,"segformer"),aut.forEach(t),jrr=r(a$e," \u2014 "),HX=n(a$e,"A",{href:!0});var nut=s(HX);Drr=r(nut,"SegformerForSemanticSegmentation"),nut.forEach(t),Grr=r(a$e," (SegFormer model)"),a$e.forEach(t),WA.forEach(t),Orr=i(Fa),hv=n(Fa,"P",{});var n$e=s(hv);Vrr=r(n$e,"The model is set in evaluation mode by default using "),v_e=n(n$e,"CODE",{});var sut=s(v_e);Xrr=r(sut,"model.eval()"),sut.forEach(t),zrr=r(n$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(n$e,"CODE",{});var lut=s(F_e);Qrr=r(lut,"model.train()"),lut.forEach(t),n$e.forEach(t),Wrr=i(Fa),T(pv.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),JIe=i(f),Pd=n(f,"H2",{class:!0});var rje=s(Pd);uv=n(rje,"A",{id:!0,class:!0,href:!0});var iut=s(uv);T_e=n(iut,"SPAN",{});var dut=s(T_e);T(x8.$$.fragment,dut),dut.forEach(t),iut.forEach(t),Hrr=i(rje),M_e=n(rje,"SPAN",{});var cut=s(M_e);Urr=r(cut,"AutoModelForInstanceSegmentation"),cut.forEach(t),rje.forEach(t),YIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T($8.$$.fragment,dl),Jrr=i(dl),Id=n(dl,"P",{});var rZ=s(Id);Yrr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UX=n(rZ,"A",{href:!0});var fut=s(UX);Krr=r(fut,"from_pretrained()"),fut.forEach(t),Zrr=r(rZ," class method or the "),JX=n(rZ,"A",{href:!0});var mut=s(JX);etr=r(mut,"from_config()"),mut.forEach(t),otr=r(rZ,` class
method.`),rZ.forEach(t),rtr=i(dl),k8=n(dl,"P",{});var tje=s(k8);ttr=r(tje,"This class cannot be instantiated directly using "),E_e=n(tje,"CODE",{});var gut=s(E_e);atr=r(gut,"__init__()"),gut.forEach(t),ntr=r(tje," (throws an error)."),tje.forEach(t),str=i(dl),Ct=n(dl,"DIV",{class:!0});var HA=s(Ct);T(S8.$$.fragment,HA),ltr=i(HA),C_e=n(HA,"P",{});var hut=s(C_e);itr=r(hut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hut.forEach(t),dtr=i(HA),qd=n(HA,"P",{});var tZ=s(qd);ctr=r(tZ,`Note:
Loading a model from its configuration file does `),w_e=n(tZ,"STRONG",{});var put=s(w_e);ftr=r(put,"not"),put.forEach(t),mtr=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(tZ,"A",{href:!0});var uut=s(YX);gtr=r(uut,"from_pretrained()"),uut.forEach(t),htr=r(tZ," to load the model weights."),tZ.forEach(t),ptr=i(HA),T(_v.$$.fragment,HA),HA.forEach(t),utr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(R8.$$.fragment,Ta),_tr=i(Ta),A_e=n(Ta,"P",{});var _ut=s(A_e);btr=r(_ut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_ut.forEach(t),vtr=i(Ta),Ya=n(Ta,"P",{});var UA=s(Ya);Ftr=r(UA,"The model class to instantiate is selected based on the "),y_e=n(UA,"CODE",{});var but=s(y_e);Ttr=r(but,"model_type"),but.forEach(t),Mtr=r(UA,` property of the config object (either
passed as an argument or loaded from `),L_e=n(UA,"CODE",{});var vut=s(L_e);Etr=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),Ctr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(UA,"CODE",{});var Fut=s(x_e);wtr=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Atr=r(UA,":"),UA.forEach(t),ytr=i(Ta),$_e=n(Ta,"UL",{});var Tut=s($_e);bv=n(Tut,"LI",{});var s$e=s(bv);k_e=n(s$e,"STRONG",{});var Mut=s(k_e);Ltr=r(Mut,"maskformer"),Mut.forEach(t),xtr=r(s$e," \u2014 "),KX=n(s$e,"A",{href:!0});var Eut=s(KX);$tr=r(Eut,"MaskFormerForInstanceSegmentation"),Eut.forEach(t),ktr=r(s$e," (MaskFormer model)"),s$e.forEach(t),Tut.forEach(t),Str=i(Ta),vv=n(Ta,"P",{});var l$e=s(vv);Rtr=r(l$e,"The model is set in evaluation mode by default using "),S_e=n(l$e,"CODE",{});var Cut=s(S_e);Btr=r(Cut,"model.eval()"),Cut.forEach(t),Ptr=r(l$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R_e=n(l$e,"CODE",{});var wut=s(R_e);Itr=r(wut,"model.train()"),wut.forEach(t),l$e.forEach(t),qtr=i(Ta),T(Fv.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),KIe=i(f),Nd=n(f,"H2",{class:!0});var aje=s(Nd);Tv=n(aje,"A",{id:!0,class:!0,href:!0});var Aut=s(Tv);B_e=n(Aut,"SPAN",{});var yut=s(B_e);T(B8.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),Ntr=i(aje),P_e=n(aje,"SPAN",{});var Lut=s(P_e);jtr=r(Lut,"TFAutoModel"),Lut.forEach(t),aje.forEach(t),ZIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(P8.$$.fragment,cl),Dtr=i(cl),jd=n(cl,"P",{});var aZ=s(jd);Gtr=r(aZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZX=n(aZ,"A",{href:!0});var xut=s(ZX);Otr=r(xut,"from_pretrained()"),xut.forEach(t),Vtr=r(aZ," class method or the "),ez=n(aZ,"A",{href:!0});var $ut=s(ez);Xtr=r($ut,"from_config()"),$ut.forEach(t),ztr=r(aZ,` class
method.`),aZ.forEach(t),Qtr=i(cl),I8=n(cl,"P",{});var nje=s(I8);Wtr=r(nje,"This class cannot be instantiated directly using "),I_e=n(nje,"CODE",{});var kut=s(I_e);Htr=r(kut,"__init__()"),kut.forEach(t),Utr=r(nje," (throws an error)."),nje.forEach(t),Jtr=i(cl),wt=n(cl,"DIV",{class:!0});var JA=s(wt);T(q8.$$.fragment,JA),Ytr=i(JA),q_e=n(JA,"P",{});var Sut=s(q_e);Ktr=r(Sut,"Instantiates one of the base model classes of the library from a configuration."),Sut.forEach(t),Ztr=i(JA),Dd=n(JA,"P",{});var nZ=s(Dd);ear=r(nZ,`Note:
Loading a model from its configuration file does `),N_e=n(nZ,"STRONG",{});var Rut=s(N_e);oar=r(Rut,"not"),Rut.forEach(t),rar=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(nZ,"A",{href:!0});var But=s(oz);tar=r(But,"from_pretrained()"),But.forEach(t),aar=r(nZ," to load the model weights."),nZ.forEach(t),nar=i(JA),T(Mv.$$.fragment,JA),JA.forEach(t),sar=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(N8.$$.fragment,fl),lar=i(fl),j_e=n(fl,"P",{});var Put=s(j_e);iar=r(Put,"Instantiate one of the base model classes of the library from a pretrained model."),Put.forEach(t),dar=i(fl),Ka=n(fl,"P",{});var YA=s(Ka);car=r(YA,"The model class to instantiate is selected based on the "),D_e=n(YA,"CODE",{});var Iut=s(D_e);far=r(Iut,"model_type"),Iut.forEach(t),mar=r(YA,` property of the config object (either
passed as an argument or loaded from `),G_e=n(YA,"CODE",{});var qut=s(G_e);gar=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),har=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(YA,"CODE",{});var Nut=s(O_e);par=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),uar=r(YA,":"),YA.forEach(t),_ar=i(fl),q=n(fl,"UL",{});var j=s(q);Ev=n(j,"LI",{});var i$e=s(Ev);V_e=n(i$e,"STRONG",{});var jut=s(V_e);bar=r(jut,"albert"),jut.forEach(t),Far=r(i$e," \u2014 "),rz=n(i$e,"A",{href:!0});var Dut=s(rz);Tar=r(Dut,"TFAlbertModel"),Dut.forEach(t),Mar=r(i$e," (ALBERT model)"),i$e.forEach(t),Ear=i(j),Cv=n(j,"LI",{});var d$e=s(Cv);X_e=n(d$e,"STRONG",{});var Gut=s(X_e);Car=r(Gut,"bart"),Gut.forEach(t),war=r(d$e," \u2014 "),tz=n(d$e,"A",{href:!0});var Out=s(tz);Aar=r(Out,"TFBartModel"),Out.forEach(t),yar=r(d$e," (BART model)"),d$e.forEach(t),Lar=i(j),wv=n(j,"LI",{});var c$e=s(wv);z_e=n(c$e,"STRONG",{});var Vut=s(z_e);xar=r(Vut,"bert"),Vut.forEach(t),$ar=r(c$e," \u2014 "),az=n(c$e,"A",{href:!0});var Xut=s(az);kar=r(Xut,"TFBertModel"),Xut.forEach(t),Sar=r(c$e," (BERT model)"),c$e.forEach(t),Rar=i(j),Av=n(j,"LI",{});var f$e=s(Av);Q_e=n(f$e,"STRONG",{});var zut=s(Q_e);Bar=r(zut,"blenderbot"),zut.forEach(t),Par=r(f$e," \u2014 "),nz=n(f$e,"A",{href:!0});var Qut=s(nz);Iar=r(Qut,"TFBlenderbotModel"),Qut.forEach(t),qar=r(f$e," (Blenderbot model)"),f$e.forEach(t),Nar=i(j),yv=n(j,"LI",{});var m$e=s(yv);W_e=n(m$e,"STRONG",{});var Wut=s(W_e);jar=r(Wut,"blenderbot-small"),Wut.forEach(t),Dar=r(m$e," \u2014 "),sz=n(m$e,"A",{href:!0});var Hut=s(sz);Gar=r(Hut,"TFBlenderbotSmallModel"),Hut.forEach(t),Oar=r(m$e," (BlenderbotSmall model)"),m$e.forEach(t),Var=i(j),Lv=n(j,"LI",{});var g$e=s(Lv);H_e=n(g$e,"STRONG",{});var Uut=s(H_e);Xar=r(Uut,"camembert"),Uut.forEach(t),zar=r(g$e," \u2014 "),lz=n(g$e,"A",{href:!0});var Jut=s(lz);Qar=r(Jut,"TFCamembertModel"),Jut.forEach(t),War=r(g$e," (CamemBERT model)"),g$e.forEach(t),Har=i(j),xv=n(j,"LI",{});var h$e=s(xv);U_e=n(h$e,"STRONG",{});var Yut=s(U_e);Uar=r(Yut,"clip"),Yut.forEach(t),Jar=r(h$e," \u2014 "),iz=n(h$e,"A",{href:!0});var Kut=s(iz);Yar=r(Kut,"TFCLIPModel"),Kut.forEach(t),Kar=r(h$e," (CLIP model)"),h$e.forEach(t),Zar=i(j),$v=n(j,"LI",{});var p$e=s($v);J_e=n(p$e,"STRONG",{});var Zut=s(J_e);enr=r(Zut,"convbert"),Zut.forEach(t),onr=r(p$e," \u2014 "),dz=n(p$e,"A",{href:!0});var e_t=s(dz);rnr=r(e_t,"TFConvBertModel"),e_t.forEach(t),tnr=r(p$e," (ConvBERT model)"),p$e.forEach(t),anr=i(j),kv=n(j,"LI",{});var u$e=s(kv);Y_e=n(u$e,"STRONG",{});var o_t=s(Y_e);nnr=r(o_t,"convnext"),o_t.forEach(t),snr=r(u$e," \u2014 "),cz=n(u$e,"A",{href:!0});var r_t=s(cz);lnr=r(r_t,"TFConvNextModel"),r_t.forEach(t),inr=r(u$e," (ConvNext model)"),u$e.forEach(t),dnr=i(j),Sv=n(j,"LI",{});var _$e=s(Sv);K_e=n(_$e,"STRONG",{});var t_t=s(K_e);cnr=r(t_t,"ctrl"),t_t.forEach(t),fnr=r(_$e," \u2014 "),fz=n(_$e,"A",{href:!0});var a_t=s(fz);mnr=r(a_t,"TFCTRLModel"),a_t.forEach(t),gnr=r(_$e," (CTRL model)"),_$e.forEach(t),hnr=i(j),Rv=n(j,"LI",{});var b$e=s(Rv);Z_e=n(b$e,"STRONG",{});var n_t=s(Z_e);pnr=r(n_t,"data2vec-vision"),n_t.forEach(t),unr=r(b$e," \u2014 "),mz=n(b$e,"A",{href:!0});var s_t=s(mz);_nr=r(s_t,"TFData2VecVisionModel"),s_t.forEach(t),bnr=r(b$e," (Data2VecVision model)"),b$e.forEach(t),vnr=i(j),Bv=n(j,"LI",{});var v$e=s(Bv);e1e=n(v$e,"STRONG",{});var l_t=s(e1e);Fnr=r(l_t,"deberta"),l_t.forEach(t),Tnr=r(v$e," \u2014 "),gz=n(v$e,"A",{href:!0});var i_t=s(gz);Mnr=r(i_t,"TFDebertaModel"),i_t.forEach(t),Enr=r(v$e," (DeBERTa model)"),v$e.forEach(t),Cnr=i(j),Pv=n(j,"LI",{});var F$e=s(Pv);o1e=n(F$e,"STRONG",{});var d_t=s(o1e);wnr=r(d_t,"deberta-v2"),d_t.forEach(t),Anr=r(F$e," \u2014 "),hz=n(F$e,"A",{href:!0});var c_t=s(hz);ynr=r(c_t,"TFDebertaV2Model"),c_t.forEach(t),Lnr=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),xnr=i(j),Iv=n(j,"LI",{});var T$e=s(Iv);r1e=n(T$e,"STRONG",{});var f_t=s(r1e);$nr=r(f_t,"distilbert"),f_t.forEach(t),knr=r(T$e," \u2014 "),pz=n(T$e,"A",{href:!0});var m_t=s(pz);Snr=r(m_t,"TFDistilBertModel"),m_t.forEach(t),Rnr=r(T$e," (DistilBERT model)"),T$e.forEach(t),Bnr=i(j),qv=n(j,"LI",{});var M$e=s(qv);t1e=n(M$e,"STRONG",{});var g_t=s(t1e);Pnr=r(g_t,"dpr"),g_t.forEach(t),Inr=r(M$e," \u2014 "),uz=n(M$e,"A",{href:!0});var h_t=s(uz);qnr=r(h_t,"TFDPRQuestionEncoder"),h_t.forEach(t),Nnr=r(M$e," (DPR model)"),M$e.forEach(t),jnr=i(j),Nv=n(j,"LI",{});var E$e=s(Nv);a1e=n(E$e,"STRONG",{});var p_t=s(a1e);Dnr=r(p_t,"electra"),p_t.forEach(t),Gnr=r(E$e," \u2014 "),_z=n(E$e,"A",{href:!0});var u_t=s(_z);Onr=r(u_t,"TFElectraModel"),u_t.forEach(t),Vnr=r(E$e," (ELECTRA model)"),E$e.forEach(t),Xnr=i(j),jv=n(j,"LI",{});var C$e=s(jv);n1e=n(C$e,"STRONG",{});var __t=s(n1e);znr=r(__t,"flaubert"),__t.forEach(t),Qnr=r(C$e," \u2014 "),bz=n(C$e,"A",{href:!0});var b_t=s(bz);Wnr=r(b_t,"TFFlaubertModel"),b_t.forEach(t),Hnr=r(C$e," (FlauBERT model)"),C$e.forEach(t),Unr=i(j),Ps=n(j,"LI",{});var p$=s(Ps);s1e=n(p$,"STRONG",{});var v_t=s(s1e);Jnr=r(v_t,"funnel"),v_t.forEach(t),Ynr=r(p$," \u2014 "),vz=n(p$,"A",{href:!0});var F_t=s(vz);Knr=r(F_t,"TFFunnelModel"),F_t.forEach(t),Znr=r(p$," or "),Fz=n(p$,"A",{href:!0});var T_t=s(Fz);esr=r(T_t,"TFFunnelBaseModel"),T_t.forEach(t),osr=r(p$," (Funnel Transformer model)"),p$.forEach(t),rsr=i(j),Dv=n(j,"LI",{});var w$e=s(Dv);l1e=n(w$e,"STRONG",{});var M_t=s(l1e);tsr=r(M_t,"gpt2"),M_t.forEach(t),asr=r(w$e," \u2014 "),Tz=n(w$e,"A",{href:!0});var E_t=s(Tz);nsr=r(E_t,"TFGPT2Model"),E_t.forEach(t),ssr=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),lsr=i(j),Gv=n(j,"LI",{});var A$e=s(Gv);i1e=n(A$e,"STRONG",{});var C_t=s(i1e);isr=r(C_t,"gptj"),C_t.forEach(t),dsr=r(A$e," \u2014 "),Mz=n(A$e,"A",{href:!0});var w_t=s(Mz);csr=r(w_t,"TFGPTJModel"),w_t.forEach(t),fsr=r(A$e," (GPT-J model)"),A$e.forEach(t),msr=i(j),Ov=n(j,"LI",{});var y$e=s(Ov);d1e=n(y$e,"STRONG",{});var A_t=s(d1e);gsr=r(A_t,"hubert"),A_t.forEach(t),hsr=r(y$e," \u2014 "),Ez=n(y$e,"A",{href:!0});var y_t=s(Ez);psr=r(y_t,"TFHubertModel"),y_t.forEach(t),usr=r(y$e," (Hubert model)"),y$e.forEach(t),_sr=i(j),Vv=n(j,"LI",{});var L$e=s(Vv);c1e=n(L$e,"STRONG",{});var L_t=s(c1e);bsr=r(L_t,"layoutlm"),L_t.forEach(t),vsr=r(L$e," \u2014 "),Cz=n(L$e,"A",{href:!0});var x_t=s(Cz);Fsr=r(x_t,"TFLayoutLMModel"),x_t.forEach(t),Tsr=r(L$e," (LayoutLM model)"),L$e.forEach(t),Msr=i(j),Xv=n(j,"LI",{});var x$e=s(Xv);f1e=n(x$e,"STRONG",{});var $_t=s(f1e);Esr=r($_t,"led"),$_t.forEach(t),Csr=r(x$e," \u2014 "),wz=n(x$e,"A",{href:!0});var k_t=s(wz);wsr=r(k_t,"TFLEDModel"),k_t.forEach(t),Asr=r(x$e," (LED model)"),x$e.forEach(t),ysr=i(j),zv=n(j,"LI",{});var $$e=s(zv);m1e=n($$e,"STRONG",{});var S_t=s(m1e);Lsr=r(S_t,"longformer"),S_t.forEach(t),xsr=r($$e," \u2014 "),Az=n($$e,"A",{href:!0});var R_t=s(Az);$sr=r(R_t,"TFLongformerModel"),R_t.forEach(t),ksr=r($$e," (Longformer model)"),$$e.forEach(t),Ssr=i(j),Qv=n(j,"LI",{});var k$e=s(Qv);g1e=n(k$e,"STRONG",{});var B_t=s(g1e);Rsr=r(B_t,"lxmert"),B_t.forEach(t),Bsr=r(k$e," \u2014 "),yz=n(k$e,"A",{href:!0});var P_t=s(yz);Psr=r(P_t,"TFLxmertModel"),P_t.forEach(t),Isr=r(k$e," (LXMERT model)"),k$e.forEach(t),qsr=i(j),Wv=n(j,"LI",{});var S$e=s(Wv);h1e=n(S$e,"STRONG",{});var I_t=s(h1e);Nsr=r(I_t,"marian"),I_t.forEach(t),jsr=r(S$e," \u2014 "),Lz=n(S$e,"A",{href:!0});var q_t=s(Lz);Dsr=r(q_t,"TFMarianModel"),q_t.forEach(t),Gsr=r(S$e," (Marian model)"),S$e.forEach(t),Osr=i(j),Hv=n(j,"LI",{});var R$e=s(Hv);p1e=n(R$e,"STRONG",{});var N_t=s(p1e);Vsr=r(N_t,"mbart"),N_t.forEach(t),Xsr=r(R$e," \u2014 "),xz=n(R$e,"A",{href:!0});var j_t=s(xz);zsr=r(j_t,"TFMBartModel"),j_t.forEach(t),Qsr=r(R$e," (mBART model)"),R$e.forEach(t),Wsr=i(j),Uv=n(j,"LI",{});var B$e=s(Uv);u1e=n(B$e,"STRONG",{});var D_t=s(u1e);Hsr=r(D_t,"mobilebert"),D_t.forEach(t),Usr=r(B$e," \u2014 "),$z=n(B$e,"A",{href:!0});var G_t=s($z);Jsr=r(G_t,"TFMobileBertModel"),G_t.forEach(t),Ysr=r(B$e," (MobileBERT model)"),B$e.forEach(t),Ksr=i(j),Jv=n(j,"LI",{});var P$e=s(Jv);_1e=n(P$e,"STRONG",{});var O_t=s(_1e);Zsr=r(O_t,"mpnet"),O_t.forEach(t),elr=r(P$e," \u2014 "),kz=n(P$e,"A",{href:!0});var V_t=s(kz);olr=r(V_t,"TFMPNetModel"),V_t.forEach(t),rlr=r(P$e," (MPNet model)"),P$e.forEach(t),tlr=i(j),Yv=n(j,"LI",{});var I$e=s(Yv);b1e=n(I$e,"STRONG",{});var X_t=s(b1e);alr=r(X_t,"mt5"),X_t.forEach(t),nlr=r(I$e," \u2014 "),Sz=n(I$e,"A",{href:!0});var z_t=s(Sz);slr=r(z_t,"TFMT5Model"),z_t.forEach(t),llr=r(I$e," (mT5 model)"),I$e.forEach(t),ilr=i(j),Kv=n(j,"LI",{});var q$e=s(Kv);v1e=n(q$e,"STRONG",{});var Q_t=s(v1e);dlr=r(Q_t,"openai-gpt"),Q_t.forEach(t),clr=r(q$e," \u2014 "),Rz=n(q$e,"A",{href:!0});var W_t=s(Rz);flr=r(W_t,"TFOpenAIGPTModel"),W_t.forEach(t),mlr=r(q$e," (OpenAI GPT model)"),q$e.forEach(t),glr=i(j),Zv=n(j,"LI",{});var N$e=s(Zv);F1e=n(N$e,"STRONG",{});var H_t=s(F1e);hlr=r(H_t,"pegasus"),H_t.forEach(t),plr=r(N$e," \u2014 "),Bz=n(N$e,"A",{href:!0});var U_t=s(Bz);ulr=r(U_t,"TFPegasusModel"),U_t.forEach(t),_lr=r(N$e," (Pegasus model)"),N$e.forEach(t),blr=i(j),eF=n(j,"LI",{});var j$e=s(eF);T1e=n(j$e,"STRONG",{});var J_t=s(T1e);vlr=r(J_t,"rembert"),J_t.forEach(t),Flr=r(j$e," \u2014 "),Pz=n(j$e,"A",{href:!0});var Y_t=s(Pz);Tlr=r(Y_t,"TFRemBertModel"),Y_t.forEach(t),Mlr=r(j$e," (RemBERT model)"),j$e.forEach(t),Elr=i(j),oF=n(j,"LI",{});var D$e=s(oF);M1e=n(D$e,"STRONG",{});var K_t=s(M1e);Clr=r(K_t,"roberta"),K_t.forEach(t),wlr=r(D$e," \u2014 "),Iz=n(D$e,"A",{href:!0});var Z_t=s(Iz);Alr=r(Z_t,"TFRobertaModel"),Z_t.forEach(t),ylr=r(D$e," (RoBERTa model)"),D$e.forEach(t),Llr=i(j),rF=n(j,"LI",{});var G$e=s(rF);E1e=n(G$e,"STRONG",{});var e1t=s(E1e);xlr=r(e1t,"roformer"),e1t.forEach(t),$lr=r(G$e," \u2014 "),qz=n(G$e,"A",{href:!0});var o1t=s(qz);klr=r(o1t,"TFRoFormerModel"),o1t.forEach(t),Slr=r(G$e," (RoFormer model)"),G$e.forEach(t),Rlr=i(j),tF=n(j,"LI",{});var O$e=s(tF);C1e=n(O$e,"STRONG",{});var r1t=s(C1e);Blr=r(r1t,"speech_to_text"),r1t.forEach(t),Plr=r(O$e," \u2014 "),Nz=n(O$e,"A",{href:!0});var t1t=s(Nz);Ilr=r(t1t,"TFSpeech2TextModel"),t1t.forEach(t),qlr=r(O$e," (Speech2Text model)"),O$e.forEach(t),Nlr=i(j),aF=n(j,"LI",{});var V$e=s(aF);w1e=n(V$e,"STRONG",{});var a1t=s(w1e);jlr=r(a1t,"swin"),a1t.forEach(t),Dlr=r(V$e," \u2014 "),jz=n(V$e,"A",{href:!0});var n1t=s(jz);Glr=r(n1t,"TFSwinModel"),n1t.forEach(t),Olr=r(V$e," (Swin model)"),V$e.forEach(t),Vlr=i(j),nF=n(j,"LI",{});var X$e=s(nF);A1e=n(X$e,"STRONG",{});var s1t=s(A1e);Xlr=r(s1t,"t5"),s1t.forEach(t),zlr=r(X$e," \u2014 "),Dz=n(X$e,"A",{href:!0});var l1t=s(Dz);Qlr=r(l1t,"TFT5Model"),l1t.forEach(t),Wlr=r(X$e," (T5 model)"),X$e.forEach(t),Hlr=i(j),sF=n(j,"LI",{});var z$e=s(sF);y1e=n(z$e,"STRONG",{});var i1t=s(y1e);Ulr=r(i1t,"tapas"),i1t.forEach(t),Jlr=r(z$e," \u2014 "),Gz=n(z$e,"A",{href:!0});var d1t=s(Gz);Ylr=r(d1t,"TFTapasModel"),d1t.forEach(t),Klr=r(z$e," (TAPAS model)"),z$e.forEach(t),Zlr=i(j),lF=n(j,"LI",{});var Q$e=s(lF);L1e=n(Q$e,"STRONG",{});var c1t=s(L1e);eir=r(c1t,"transfo-xl"),c1t.forEach(t),oir=r(Q$e," \u2014 "),Oz=n(Q$e,"A",{href:!0});var f1t=s(Oz);rir=r(f1t,"TFTransfoXLModel"),f1t.forEach(t),tir=r(Q$e," (Transformer-XL model)"),Q$e.forEach(t),air=i(j),iF=n(j,"LI",{});var W$e=s(iF);x1e=n(W$e,"STRONG",{});var m1t=s(x1e);nir=r(m1t,"vit"),m1t.forEach(t),sir=r(W$e," \u2014 "),Vz=n(W$e,"A",{href:!0});var g1t=s(Vz);lir=r(g1t,"TFViTModel"),g1t.forEach(t),iir=r(W$e," (ViT model)"),W$e.forEach(t),dir=i(j),dF=n(j,"LI",{});var H$e=s(dF);$1e=n(H$e,"STRONG",{});var h1t=s($1e);cir=r(h1t,"vit_mae"),h1t.forEach(t),fir=r(H$e," \u2014 "),Xz=n(H$e,"A",{href:!0});var p1t=s(Xz);mir=r(p1t,"TFViTMAEModel"),p1t.forEach(t),gir=r(H$e," (ViTMAE model)"),H$e.forEach(t),hir=i(j),cF=n(j,"LI",{});var U$e=s(cF);k1e=n(U$e,"STRONG",{});var u1t=s(k1e);pir=r(u1t,"wav2vec2"),u1t.forEach(t),uir=r(U$e," \u2014 "),zz=n(U$e,"A",{href:!0});var _1t=s(zz);_ir=r(_1t,"TFWav2Vec2Model"),_1t.forEach(t),bir=r(U$e," (Wav2Vec2 model)"),U$e.forEach(t),vir=i(j),fF=n(j,"LI",{});var J$e=s(fF);S1e=n(J$e,"STRONG",{});var b1t=s(S1e);Fir=r(b1t,"xglm"),b1t.forEach(t),Tir=r(J$e," \u2014 "),Qz=n(J$e,"A",{href:!0});var v1t=s(Qz);Mir=r(v1t,"TFXGLMModel"),v1t.forEach(t),Eir=r(J$e," (XGLM model)"),J$e.forEach(t),Cir=i(j),mF=n(j,"LI",{});var Y$e=s(mF);R1e=n(Y$e,"STRONG",{});var F1t=s(R1e);wir=r(F1t,"xlm"),F1t.forEach(t),Air=r(Y$e," \u2014 "),Wz=n(Y$e,"A",{href:!0});var T1t=s(Wz);yir=r(T1t,"TFXLMModel"),T1t.forEach(t),Lir=r(Y$e," (XLM model)"),Y$e.forEach(t),xir=i(j),gF=n(j,"LI",{});var K$e=s(gF);B1e=n(K$e,"STRONG",{});var M1t=s(B1e);$ir=r(M1t,"xlm-roberta"),M1t.forEach(t),kir=r(K$e," \u2014 "),Hz=n(K$e,"A",{href:!0});var E1t=s(Hz);Sir=r(E1t,"TFXLMRobertaModel"),E1t.forEach(t),Rir=r(K$e," (XLM-RoBERTa model)"),K$e.forEach(t),Bir=i(j),hF=n(j,"LI",{});var Z$e=s(hF);P1e=n(Z$e,"STRONG",{});var C1t=s(P1e);Pir=r(C1t,"xlnet"),C1t.forEach(t),Iir=r(Z$e," \u2014 "),Uz=n(Z$e,"A",{href:!0});var w1t=s(Uz);qir=r(w1t,"TFXLNetModel"),w1t.forEach(t),Nir=r(Z$e," (XLNet model)"),Z$e.forEach(t),j.forEach(t),jir=i(fl),T(pF.$$.fragment,fl),fl.forEach(t),cl.forEach(t),eqe=i(f),Gd=n(f,"H2",{class:!0});var sje=s(Gd);uF=n(sje,"A",{id:!0,class:!0,href:!0});var A1t=s(uF);I1e=n(A1t,"SPAN",{});var y1t=s(I1e);T(j8.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Dir=i(sje),q1e=n(sje,"SPAN",{});var L1t=s(q1e);Gir=r(L1t,"TFAutoModelForPreTraining"),L1t.forEach(t),sje.forEach(t),oqe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(D8.$$.fragment,ml),Oir=i(ml),Od=n(ml,"P",{});var sZ=s(Od);Vir=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jz=n(sZ,"A",{href:!0});var x1t=s(Jz);Xir=r(x1t,"from_pretrained()"),x1t.forEach(t),zir=r(sZ," class method or the "),Yz=n(sZ,"A",{href:!0});var $1t=s(Yz);Qir=r($1t,"from_config()"),$1t.forEach(t),Wir=r(sZ,` class
method.`),sZ.forEach(t),Hir=i(ml),G8=n(ml,"P",{});var lje=s(G8);Uir=r(lje,"This class cannot be instantiated directly using "),N1e=n(lje,"CODE",{});var k1t=s(N1e);Jir=r(k1t,"__init__()"),k1t.forEach(t),Yir=r(lje," (throws an error)."),lje.forEach(t),Kir=i(ml),At=n(ml,"DIV",{class:!0});var KA=s(At);T(O8.$$.fragment,KA),Zir=i(KA),j1e=n(KA,"P",{});var S1t=s(j1e);edr=r(S1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S1t.forEach(t),odr=i(KA),Vd=n(KA,"P",{});var lZ=s(Vd);rdr=r(lZ,`Note:
Loading a model from its configuration file does `),D1e=n(lZ,"STRONG",{});var R1t=s(D1e);tdr=r(R1t,"not"),R1t.forEach(t),adr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(lZ,"A",{href:!0});var B1t=s(Kz);ndr=r(B1t,"from_pretrained()"),B1t.forEach(t),sdr=r(lZ," to load the model weights."),lZ.forEach(t),ldr=i(KA),T(_F.$$.fragment,KA),KA.forEach(t),idr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(V8.$$.fragment,gl),ddr=i(gl),G1e=n(gl,"P",{});var P1t=s(G1e);cdr=r(P1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P1t.forEach(t),fdr=i(gl),Za=n(gl,"P",{});var ZA=s(Za);mdr=r(ZA,"The model class to instantiate is selected based on the "),O1e=n(ZA,"CODE",{});var I1t=s(O1e);gdr=r(I1t,"model_type"),I1t.forEach(t),hdr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),V1e=n(ZA,"CODE",{});var q1t=s(V1e);pdr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),udr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(ZA,"CODE",{});var N1t=s(X1e);_dr=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),bdr=r(ZA,":"),ZA.forEach(t),vdr=i(gl),se=n(gl,"UL",{});var le=s(se);bF=n(le,"LI",{});var eke=s(bF);z1e=n(eke,"STRONG",{});var j1t=s(z1e);Fdr=r(j1t,"albert"),j1t.forEach(t),Tdr=r(eke," \u2014 "),Zz=n(eke,"A",{href:!0});var D1t=s(Zz);Mdr=r(D1t,"TFAlbertForPreTraining"),D1t.forEach(t),Edr=r(eke," (ALBERT model)"),eke.forEach(t),Cdr=i(le),vF=n(le,"LI",{});var oke=s(vF);Q1e=n(oke,"STRONG",{});var G1t=s(Q1e);wdr=r(G1t,"bart"),G1t.forEach(t),Adr=r(oke," \u2014 "),eQ=n(oke,"A",{href:!0});var O1t=s(eQ);ydr=r(O1t,"TFBartForConditionalGeneration"),O1t.forEach(t),Ldr=r(oke," (BART model)"),oke.forEach(t),xdr=i(le),FF=n(le,"LI",{});var rke=s(FF);W1e=n(rke,"STRONG",{});var V1t=s(W1e);$dr=r(V1t,"bert"),V1t.forEach(t),kdr=r(rke," \u2014 "),oQ=n(rke,"A",{href:!0});var X1t=s(oQ);Sdr=r(X1t,"TFBertForPreTraining"),X1t.forEach(t),Rdr=r(rke," (BERT model)"),rke.forEach(t),Bdr=i(le),TF=n(le,"LI",{});var tke=s(TF);H1e=n(tke,"STRONG",{});var z1t=s(H1e);Pdr=r(z1t,"camembert"),z1t.forEach(t),Idr=r(tke," \u2014 "),rQ=n(tke,"A",{href:!0});var Q1t=s(rQ);qdr=r(Q1t,"TFCamembertForMaskedLM"),Q1t.forEach(t),Ndr=r(tke," (CamemBERT model)"),tke.forEach(t),jdr=i(le),MF=n(le,"LI",{});var ake=s(MF);U1e=n(ake,"STRONG",{});var W1t=s(U1e);Ddr=r(W1t,"ctrl"),W1t.forEach(t),Gdr=r(ake," \u2014 "),tQ=n(ake,"A",{href:!0});var H1t=s(tQ);Odr=r(H1t,"TFCTRLLMHeadModel"),H1t.forEach(t),Vdr=r(ake," (CTRL model)"),ake.forEach(t),Xdr=i(le),EF=n(le,"LI",{});var nke=s(EF);J1e=n(nke,"STRONG",{});var U1t=s(J1e);zdr=r(U1t,"distilbert"),U1t.forEach(t),Qdr=r(nke," \u2014 "),aQ=n(nke,"A",{href:!0});var J1t=s(aQ);Wdr=r(J1t,"TFDistilBertForMaskedLM"),J1t.forEach(t),Hdr=r(nke," (DistilBERT model)"),nke.forEach(t),Udr=i(le),CF=n(le,"LI",{});var ske=s(CF);Y1e=n(ske,"STRONG",{});var Y1t=s(Y1e);Jdr=r(Y1t,"electra"),Y1t.forEach(t),Ydr=r(ske," \u2014 "),nQ=n(ske,"A",{href:!0});var K1t=s(nQ);Kdr=r(K1t,"TFElectraForPreTraining"),K1t.forEach(t),Zdr=r(ske," (ELECTRA model)"),ske.forEach(t),ecr=i(le),wF=n(le,"LI",{});var lke=s(wF);K1e=n(lke,"STRONG",{});var Z1t=s(K1e);ocr=r(Z1t,"flaubert"),Z1t.forEach(t),rcr=r(lke," \u2014 "),sQ=n(lke,"A",{href:!0});var ebt=s(sQ);tcr=r(ebt,"TFFlaubertWithLMHeadModel"),ebt.forEach(t),acr=r(lke," (FlauBERT model)"),lke.forEach(t),ncr=i(le),AF=n(le,"LI",{});var ike=s(AF);Z1e=n(ike,"STRONG",{});var obt=s(Z1e);scr=r(obt,"funnel"),obt.forEach(t),lcr=r(ike," \u2014 "),lQ=n(ike,"A",{href:!0});var rbt=s(lQ);icr=r(rbt,"TFFunnelForPreTraining"),rbt.forEach(t),dcr=r(ike," (Funnel Transformer model)"),ike.forEach(t),ccr=i(le),yF=n(le,"LI",{});var dke=s(yF);ebe=n(dke,"STRONG",{});var tbt=s(ebe);fcr=r(tbt,"gpt2"),tbt.forEach(t),mcr=r(dke," \u2014 "),iQ=n(dke,"A",{href:!0});var abt=s(iQ);gcr=r(abt,"TFGPT2LMHeadModel"),abt.forEach(t),hcr=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),pcr=i(le),LF=n(le,"LI",{});var cke=s(LF);obe=n(cke,"STRONG",{});var nbt=s(obe);ucr=r(nbt,"layoutlm"),nbt.forEach(t),_cr=r(cke," \u2014 "),dQ=n(cke,"A",{href:!0});var sbt=s(dQ);bcr=r(sbt,"TFLayoutLMForMaskedLM"),sbt.forEach(t),vcr=r(cke," (LayoutLM model)"),cke.forEach(t),Fcr=i(le),xF=n(le,"LI",{});var fke=s(xF);rbe=n(fke,"STRONG",{});var lbt=s(rbe);Tcr=r(lbt,"lxmert"),lbt.forEach(t),Mcr=r(fke," \u2014 "),cQ=n(fke,"A",{href:!0});var ibt=s(cQ);Ecr=r(ibt,"TFLxmertForPreTraining"),ibt.forEach(t),Ccr=r(fke," (LXMERT model)"),fke.forEach(t),wcr=i(le),$F=n(le,"LI",{});var mke=s($F);tbe=n(mke,"STRONG",{});var dbt=s(tbe);Acr=r(dbt,"mobilebert"),dbt.forEach(t),ycr=r(mke," \u2014 "),fQ=n(mke,"A",{href:!0});var cbt=s(fQ);Lcr=r(cbt,"TFMobileBertForPreTraining"),cbt.forEach(t),xcr=r(mke," (MobileBERT model)"),mke.forEach(t),$cr=i(le),kF=n(le,"LI",{});var gke=s(kF);abe=n(gke,"STRONG",{});var fbt=s(abe);kcr=r(fbt,"mpnet"),fbt.forEach(t),Scr=r(gke," \u2014 "),mQ=n(gke,"A",{href:!0});var mbt=s(mQ);Rcr=r(mbt,"TFMPNetForMaskedLM"),mbt.forEach(t),Bcr=r(gke," (MPNet model)"),gke.forEach(t),Pcr=i(le),SF=n(le,"LI",{});var hke=s(SF);nbe=n(hke,"STRONG",{});var gbt=s(nbe);Icr=r(gbt,"openai-gpt"),gbt.forEach(t),qcr=r(hke," \u2014 "),gQ=n(hke,"A",{href:!0});var hbt=s(gQ);Ncr=r(hbt,"TFOpenAIGPTLMHeadModel"),hbt.forEach(t),jcr=r(hke," (OpenAI GPT model)"),hke.forEach(t),Dcr=i(le),RF=n(le,"LI",{});var pke=s(RF);sbe=n(pke,"STRONG",{});var pbt=s(sbe);Gcr=r(pbt,"roberta"),pbt.forEach(t),Ocr=r(pke," \u2014 "),hQ=n(pke,"A",{href:!0});var ubt=s(hQ);Vcr=r(ubt,"TFRobertaForMaskedLM"),ubt.forEach(t),Xcr=r(pke," (RoBERTa model)"),pke.forEach(t),zcr=i(le),BF=n(le,"LI",{});var uke=s(BF);lbe=n(uke,"STRONG",{});var _bt=s(lbe);Qcr=r(_bt,"t5"),_bt.forEach(t),Wcr=r(uke," \u2014 "),pQ=n(uke,"A",{href:!0});var bbt=s(pQ);Hcr=r(bbt,"TFT5ForConditionalGeneration"),bbt.forEach(t),Ucr=r(uke," (T5 model)"),uke.forEach(t),Jcr=i(le),PF=n(le,"LI",{});var _ke=s(PF);ibe=n(_ke,"STRONG",{});var vbt=s(ibe);Ycr=r(vbt,"tapas"),vbt.forEach(t),Kcr=r(_ke," \u2014 "),uQ=n(_ke,"A",{href:!0});var Fbt=s(uQ);Zcr=r(Fbt,"TFTapasForMaskedLM"),Fbt.forEach(t),efr=r(_ke," (TAPAS model)"),_ke.forEach(t),ofr=i(le),IF=n(le,"LI",{});var bke=s(IF);dbe=n(bke,"STRONG",{});var Tbt=s(dbe);rfr=r(Tbt,"transfo-xl"),Tbt.forEach(t),tfr=r(bke," \u2014 "),_Q=n(bke,"A",{href:!0});var Mbt=s(_Q);afr=r(Mbt,"TFTransfoXLLMHeadModel"),Mbt.forEach(t),nfr=r(bke," (Transformer-XL model)"),bke.forEach(t),sfr=i(le),qF=n(le,"LI",{});var vke=s(qF);cbe=n(vke,"STRONG",{});var Ebt=s(cbe);lfr=r(Ebt,"vit_mae"),Ebt.forEach(t),ifr=r(vke," \u2014 "),bQ=n(vke,"A",{href:!0});var Cbt=s(bQ);dfr=r(Cbt,"TFViTMAEForPreTraining"),Cbt.forEach(t),cfr=r(vke," (ViTMAE model)"),vke.forEach(t),ffr=i(le),NF=n(le,"LI",{});var Fke=s(NF);fbe=n(Fke,"STRONG",{});var wbt=s(fbe);mfr=r(wbt,"xlm"),wbt.forEach(t),gfr=r(Fke," \u2014 "),vQ=n(Fke,"A",{href:!0});var Abt=s(vQ);hfr=r(Abt,"TFXLMWithLMHeadModel"),Abt.forEach(t),pfr=r(Fke," (XLM model)"),Fke.forEach(t),ufr=i(le),jF=n(le,"LI",{});var Tke=s(jF);mbe=n(Tke,"STRONG",{});var ybt=s(mbe);_fr=r(ybt,"xlm-roberta"),ybt.forEach(t),bfr=r(Tke," \u2014 "),FQ=n(Tke,"A",{href:!0});var Lbt=s(FQ);vfr=r(Lbt,"TFXLMRobertaForMaskedLM"),Lbt.forEach(t),Ffr=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),Tfr=i(le),DF=n(le,"LI",{});var Mke=s(DF);gbe=n(Mke,"STRONG",{});var xbt=s(gbe);Mfr=r(xbt,"xlnet"),xbt.forEach(t),Efr=r(Mke," \u2014 "),TQ=n(Mke,"A",{href:!0});var $bt=s(TQ);Cfr=r($bt,"TFXLNetLMHeadModel"),$bt.forEach(t),wfr=r(Mke," (XLNet model)"),Mke.forEach(t),le.forEach(t),Afr=i(gl),T(GF.$$.fragment,gl),gl.forEach(t),ml.forEach(t),rqe=i(f),Xd=n(f,"H2",{class:!0});var ije=s(Xd);OF=n(ije,"A",{id:!0,class:!0,href:!0});var kbt=s(OF);hbe=n(kbt,"SPAN",{});var Sbt=s(hbe);T(X8.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),yfr=i(ije),pbe=n(ije,"SPAN",{});var Rbt=s(pbe);Lfr=r(Rbt,"TFAutoModelForCausalLM"),Rbt.forEach(t),ije.forEach(t),tqe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(z8.$$.fragment,hl),xfr=i(hl),zd=n(hl,"P",{});var iZ=s(zd);$fr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MQ=n(iZ,"A",{href:!0});var Bbt=s(MQ);kfr=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Sfr=r(iZ," class method or the "),EQ=n(iZ,"A",{href:!0});var Pbt=s(EQ);Rfr=r(Pbt,"from_config()"),Pbt.forEach(t),Bfr=r(iZ,` class
method.`),iZ.forEach(t),Pfr=i(hl),Q8=n(hl,"P",{});var dje=s(Q8);Ifr=r(dje,"This class cannot be instantiated directly using "),ube=n(dje,"CODE",{});var Ibt=s(ube);qfr=r(Ibt,"__init__()"),Ibt.forEach(t),Nfr=r(dje," (throws an error)."),dje.forEach(t),jfr=i(hl),yt=n(hl,"DIV",{class:!0});var e0=s(yt);T(W8.$$.fragment,e0),Dfr=i(e0),_be=n(e0,"P",{});var qbt=s(_be);Gfr=r(qbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qbt.forEach(t),Ofr=i(e0),Qd=n(e0,"P",{});var dZ=s(Qd);Vfr=r(dZ,`Note:
Loading a model from its configuration file does `),bbe=n(dZ,"STRONG",{});var Nbt=s(bbe);Xfr=r(Nbt,"not"),Nbt.forEach(t),zfr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(dZ,"A",{href:!0});var jbt=s(CQ);Qfr=r(jbt,"from_pretrained()"),jbt.forEach(t),Wfr=r(dZ," to load the model weights."),dZ.forEach(t),Hfr=i(e0),T(VF.$$.fragment,e0),e0.forEach(t),Ufr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(H8.$$.fragment,pl),Jfr=i(pl),vbe=n(pl,"P",{});var Dbt=s(vbe);Yfr=r(Dbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dbt.forEach(t),Kfr=i(pl),en=n(pl,"P",{});var o0=s(en);Zfr=r(o0,"The model class to instantiate is selected based on the "),Fbe=n(o0,"CODE",{});var Gbt=s(Fbe);emr=r(Gbt,"model_type"),Gbt.forEach(t),omr=r(o0,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(o0,"CODE",{});var Obt=s(Tbe);rmr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),tmr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(o0,"CODE",{});var Vbt=s(Mbe);amr=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),nmr=r(o0,":"),o0.forEach(t),smr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);XF=n(Ce,"LI",{});var Eke=s(XF);Ebe=n(Eke,"STRONG",{});var Xbt=s(Ebe);lmr=r(Xbt,"bert"),Xbt.forEach(t),imr=r(Eke," \u2014 "),wQ=n(Eke,"A",{href:!0});var zbt=s(wQ);dmr=r(zbt,"TFBertLMHeadModel"),zbt.forEach(t),cmr=r(Eke," (BERT model)"),Eke.forEach(t),fmr=i(Ce),zF=n(Ce,"LI",{});var Cke=s(zF);Cbe=n(Cke,"STRONG",{});var Qbt=s(Cbe);mmr=r(Qbt,"camembert"),Qbt.forEach(t),gmr=r(Cke," \u2014 "),AQ=n(Cke,"A",{href:!0});var Wbt=s(AQ);hmr=r(Wbt,"TFCamembertForCausalLM"),Wbt.forEach(t),pmr=r(Cke," (CamemBERT model)"),Cke.forEach(t),umr=i(Ce),QF=n(Ce,"LI",{});var wke=s(QF);wbe=n(wke,"STRONG",{});var Hbt=s(wbe);_mr=r(Hbt,"ctrl"),Hbt.forEach(t),bmr=r(wke," \u2014 "),yQ=n(wke,"A",{href:!0});var Ubt=s(yQ);vmr=r(Ubt,"TFCTRLLMHeadModel"),Ubt.forEach(t),Fmr=r(wke," (CTRL model)"),wke.forEach(t),Tmr=i(Ce),WF=n(Ce,"LI",{});var Ake=s(WF);Abe=n(Ake,"STRONG",{});var Jbt=s(Abe);Mmr=r(Jbt,"gpt2"),Jbt.forEach(t),Emr=r(Ake," \u2014 "),LQ=n(Ake,"A",{href:!0});var Ybt=s(LQ);Cmr=r(Ybt,"TFGPT2LMHeadModel"),Ybt.forEach(t),wmr=r(Ake," (OpenAI GPT-2 model)"),Ake.forEach(t),Amr=i(Ce),HF=n(Ce,"LI",{});var yke=s(HF);ybe=n(yke,"STRONG",{});var Kbt=s(ybe);ymr=r(Kbt,"gptj"),Kbt.forEach(t),Lmr=r(yke," \u2014 "),xQ=n(yke,"A",{href:!0});var Zbt=s(xQ);xmr=r(Zbt,"TFGPTJForCausalLM"),Zbt.forEach(t),$mr=r(yke," (GPT-J model)"),yke.forEach(t),kmr=i(Ce),UF=n(Ce,"LI",{});var Lke=s(UF);Lbe=n(Lke,"STRONG",{});var e4t=s(Lbe);Smr=r(e4t,"openai-gpt"),e4t.forEach(t),Rmr=r(Lke," \u2014 "),$Q=n(Lke,"A",{href:!0});var o4t=s($Q);Bmr=r(o4t,"TFOpenAIGPTLMHeadModel"),o4t.forEach(t),Pmr=r(Lke," (OpenAI GPT model)"),Lke.forEach(t),Imr=i(Ce),JF=n(Ce,"LI",{});var xke=s(JF);xbe=n(xke,"STRONG",{});var r4t=s(xbe);qmr=r(r4t,"rembert"),r4t.forEach(t),Nmr=r(xke," \u2014 "),kQ=n(xke,"A",{href:!0});var t4t=s(kQ);jmr=r(t4t,"TFRemBertForCausalLM"),t4t.forEach(t),Dmr=r(xke," (RemBERT model)"),xke.forEach(t),Gmr=i(Ce),YF=n(Ce,"LI",{});var $ke=s(YF);$be=n($ke,"STRONG",{});var a4t=s($be);Omr=r(a4t,"roberta"),a4t.forEach(t),Vmr=r($ke," \u2014 "),SQ=n($ke,"A",{href:!0});var n4t=s(SQ);Xmr=r(n4t,"TFRobertaForCausalLM"),n4t.forEach(t),zmr=r($ke," (RoBERTa model)"),$ke.forEach(t),Qmr=i(Ce),KF=n(Ce,"LI",{});var kke=s(KF);kbe=n(kke,"STRONG",{});var s4t=s(kbe);Wmr=r(s4t,"roformer"),s4t.forEach(t),Hmr=r(kke," \u2014 "),RQ=n(kke,"A",{href:!0});var l4t=s(RQ);Umr=r(l4t,"TFRoFormerForCausalLM"),l4t.forEach(t),Jmr=r(kke," (RoFormer model)"),kke.forEach(t),Ymr=i(Ce),ZF=n(Ce,"LI",{});var Ske=s(ZF);Sbe=n(Ske,"STRONG",{});var i4t=s(Sbe);Kmr=r(i4t,"transfo-xl"),i4t.forEach(t),Zmr=r(Ske," \u2014 "),BQ=n(Ske,"A",{href:!0});var d4t=s(BQ);egr=r(d4t,"TFTransfoXLLMHeadModel"),d4t.forEach(t),ogr=r(Ske," (Transformer-XL model)"),Ske.forEach(t),rgr=i(Ce),e6=n(Ce,"LI",{});var Rke=s(e6);Rbe=n(Rke,"STRONG",{});var c4t=s(Rbe);tgr=r(c4t,"xglm"),c4t.forEach(t),agr=r(Rke," \u2014 "),PQ=n(Rke,"A",{href:!0});var f4t=s(PQ);ngr=r(f4t,"TFXGLMForCausalLM"),f4t.forEach(t),sgr=r(Rke," (XGLM model)"),Rke.forEach(t),lgr=i(Ce),o6=n(Ce,"LI",{});var Bke=s(o6);Bbe=n(Bke,"STRONG",{});var m4t=s(Bbe);igr=r(m4t,"xlm"),m4t.forEach(t),dgr=r(Bke," \u2014 "),IQ=n(Bke,"A",{href:!0});var g4t=s(IQ);cgr=r(g4t,"TFXLMWithLMHeadModel"),g4t.forEach(t),fgr=r(Bke," (XLM model)"),Bke.forEach(t),mgr=i(Ce),r6=n(Ce,"LI",{});var Pke=s(r6);Pbe=n(Pke,"STRONG",{});var h4t=s(Pbe);ggr=r(h4t,"xlnet"),h4t.forEach(t),hgr=r(Pke," \u2014 "),qQ=n(Pke,"A",{href:!0});var p4t=s(qQ);pgr=r(p4t,"TFXLNetLMHeadModel"),p4t.forEach(t),ugr=r(Pke," (XLNet model)"),Pke.forEach(t),Ce.forEach(t),_gr=i(pl),T(t6.$$.fragment,pl),pl.forEach(t),hl.forEach(t),aqe=i(f),Wd=n(f,"H2",{class:!0});var cje=s(Wd);a6=n(cje,"A",{id:!0,class:!0,href:!0});var u4t=s(a6);Ibe=n(u4t,"SPAN",{});var _4t=s(Ibe);T(U8.$$.fragment,_4t),_4t.forEach(t),u4t.forEach(t),bgr=i(cje),qbe=n(cje,"SPAN",{});var b4t=s(qbe);vgr=r(b4t,"TFAutoModelForImageClassification"),b4t.forEach(t),cje.forEach(t),nqe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(J8.$$.fragment,ul),Fgr=i(ul),Hd=n(ul,"P",{});var cZ=s(Hd);Tgr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NQ=n(cZ,"A",{href:!0});var v4t=s(NQ);Mgr=r(v4t,"from_pretrained()"),v4t.forEach(t),Egr=r(cZ," class method or the "),jQ=n(cZ,"A",{href:!0});var F4t=s(jQ);Cgr=r(F4t,"from_config()"),F4t.forEach(t),wgr=r(cZ,` class
method.`),cZ.forEach(t),Agr=i(ul),Y8=n(ul,"P",{});var fje=s(Y8);ygr=r(fje,"This class cannot be instantiated directly using "),Nbe=n(fje,"CODE",{});var T4t=s(Nbe);Lgr=r(T4t,"__init__()"),T4t.forEach(t),xgr=r(fje," (throws an error)."),fje.forEach(t),$gr=i(ul),Lt=n(ul,"DIV",{class:!0});var r0=s(Lt);T(K8.$$.fragment,r0),kgr=i(r0),jbe=n(r0,"P",{});var M4t=s(jbe);Sgr=r(M4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),M4t.forEach(t),Rgr=i(r0),Ud=n(r0,"P",{});var fZ=s(Ud);Bgr=r(fZ,`Note:
Loading a model from its configuration file does `),Dbe=n(fZ,"STRONG",{});var E4t=s(Dbe);Pgr=r(E4t,"not"),E4t.forEach(t),Igr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(fZ,"A",{href:!0});var C4t=s(DQ);qgr=r(C4t,"from_pretrained()"),C4t.forEach(t),Ngr=r(fZ," to load the model weights."),fZ.forEach(t),jgr=i(r0),T(n6.$$.fragment,r0),r0.forEach(t),Dgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Z8.$$.fragment,_l),Ggr=i(_l),Gbe=n(_l,"P",{});var w4t=s(Gbe);Ogr=r(w4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w4t.forEach(t),Vgr=i(_l),on=n(_l,"P",{});var t0=s(on);Xgr=r(t0,"The model class to instantiate is selected based on the "),Obe=n(t0,"CODE",{});var A4t=s(Obe);zgr=r(A4t,"model_type"),A4t.forEach(t),Qgr=r(t0,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(t0,"CODE",{});var y4t=s(Vbe);Wgr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),Hgr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(t0,"CODE",{});var L4t=s(Xbe);Ugr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Jgr=r(t0,":"),t0.forEach(t),Ygr=i(_l),rn=n(_l,"UL",{});var a0=s(rn);s6=n(a0,"LI",{});var Ike=s(s6);zbe=n(Ike,"STRONG",{});var x4t=s(zbe);Kgr=r(x4t,"convnext"),x4t.forEach(t),Zgr=r(Ike," \u2014 "),GQ=n(Ike,"A",{href:!0});var $4t=s(GQ);ehr=r($4t,"TFConvNextForImageClassification"),$4t.forEach(t),ohr=r(Ike," (ConvNext model)"),Ike.forEach(t),rhr=i(a0),l6=n(a0,"LI",{});var qke=s(l6);Qbe=n(qke,"STRONG",{});var k4t=s(Qbe);thr=r(k4t,"data2vec-vision"),k4t.forEach(t),ahr=r(qke," \u2014 "),OQ=n(qke,"A",{href:!0});var S4t=s(OQ);nhr=r(S4t,"TFData2VecVisionForImageClassification"),S4t.forEach(t),shr=r(qke," (Data2VecVision model)"),qke.forEach(t),lhr=i(a0),i6=n(a0,"LI",{});var Nke=s(i6);Wbe=n(Nke,"STRONG",{});var R4t=s(Wbe);ihr=r(R4t,"swin"),R4t.forEach(t),dhr=r(Nke," \u2014 "),VQ=n(Nke,"A",{href:!0});var B4t=s(VQ);chr=r(B4t,"TFSwinForImageClassification"),B4t.forEach(t),fhr=r(Nke," (Swin model)"),Nke.forEach(t),mhr=i(a0),d6=n(a0,"LI",{});var jke=s(d6);Hbe=n(jke,"STRONG",{});var P4t=s(Hbe);ghr=r(P4t,"vit"),P4t.forEach(t),hhr=r(jke," \u2014 "),XQ=n(jke,"A",{href:!0});var I4t=s(XQ);phr=r(I4t,"TFViTForImageClassification"),I4t.forEach(t),uhr=r(jke," (ViT model)"),jke.forEach(t),a0.forEach(t),_hr=i(_l),T(c6.$$.fragment,_l),_l.forEach(t),ul.forEach(t),sqe=i(f),Jd=n(f,"H2",{class:!0});var mje=s(Jd);f6=n(mje,"A",{id:!0,class:!0,href:!0});var q4t=s(f6);Ube=n(q4t,"SPAN",{});var N4t=s(Ube);T(ex.$$.fragment,N4t),N4t.forEach(t),q4t.forEach(t),bhr=i(mje),Jbe=n(mje,"SPAN",{});var j4t=s(Jbe);vhr=r(j4t,"TFAutoModelForMaskedLM"),j4t.forEach(t),mje.forEach(t),lqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(ox.$$.fragment,bl),Fhr=i(bl),Yd=n(bl,"P",{});var mZ=s(Yd);Thr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zQ=n(mZ,"A",{href:!0});var D4t=s(zQ);Mhr=r(D4t,"from_pretrained()"),D4t.forEach(t),Ehr=r(mZ," class method or the "),QQ=n(mZ,"A",{href:!0});var G4t=s(QQ);Chr=r(G4t,"from_config()"),G4t.forEach(t),whr=r(mZ,` class
method.`),mZ.forEach(t),Ahr=i(bl),rx=n(bl,"P",{});var gje=s(rx);yhr=r(gje,"This class cannot be instantiated directly using "),Ybe=n(gje,"CODE",{});var O4t=s(Ybe);Lhr=r(O4t,"__init__()"),O4t.forEach(t),xhr=r(gje," (throws an error)."),gje.forEach(t),$hr=i(bl),xt=n(bl,"DIV",{class:!0});var n0=s(xt);T(tx.$$.fragment,n0),khr=i(n0),Kbe=n(n0,"P",{});var V4t=s(Kbe);Shr=r(V4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),V4t.forEach(t),Rhr=i(n0),Kd=n(n0,"P",{});var gZ=s(Kd);Bhr=r(gZ,`Note:
Loading a model from its configuration file does `),Zbe=n(gZ,"STRONG",{});var X4t=s(Zbe);Phr=r(X4t,"not"),X4t.forEach(t),Ihr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(gZ,"A",{href:!0});var z4t=s(WQ);qhr=r(z4t,"from_pretrained()"),z4t.forEach(t),Nhr=r(gZ," to load the model weights."),gZ.forEach(t),jhr=i(n0),T(m6.$$.fragment,n0),n0.forEach(t),Dhr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(ax.$$.fragment,vl),Ghr=i(vl),e4e=n(vl,"P",{});var Q4t=s(e4e);Ohr=r(Q4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q4t.forEach(t),Vhr=i(vl),tn=n(vl,"P",{});var s0=s(tn);Xhr=r(s0,"The model class to instantiate is selected based on the "),o4e=n(s0,"CODE",{});var W4t=s(o4e);zhr=r(W4t,"model_type"),W4t.forEach(t),Qhr=r(s0,` property of the config object (either
passed as an argument or loaded from `),r4e=n(s0,"CODE",{});var H4t=s(r4e);Whr=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),Hhr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(s0,"CODE",{});var U4t=s(t4e);Uhr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),Jhr=r(s0,":"),s0.forEach(t),Yhr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);g6=n(fe,"LI",{});var Dke=s(g6);a4e=n(Dke,"STRONG",{});var J4t=s(a4e);Khr=r(J4t,"albert"),J4t.forEach(t),Zhr=r(Dke," \u2014 "),HQ=n(Dke,"A",{href:!0});var Y4t=s(HQ);epr=r(Y4t,"TFAlbertForMaskedLM"),Y4t.forEach(t),opr=r(Dke," (ALBERT model)"),Dke.forEach(t),rpr=i(fe),h6=n(fe,"LI",{});var Gke=s(h6);n4e=n(Gke,"STRONG",{});var K4t=s(n4e);tpr=r(K4t,"bert"),K4t.forEach(t),apr=r(Gke," \u2014 "),UQ=n(Gke,"A",{href:!0});var Z4t=s(UQ);npr=r(Z4t,"TFBertForMaskedLM"),Z4t.forEach(t),spr=r(Gke," (BERT model)"),Gke.forEach(t),lpr=i(fe),p6=n(fe,"LI",{});var Oke=s(p6);s4e=n(Oke,"STRONG",{});var e2t=s(s4e);ipr=r(e2t,"camembert"),e2t.forEach(t),dpr=r(Oke," \u2014 "),JQ=n(Oke,"A",{href:!0});var o2t=s(JQ);cpr=r(o2t,"TFCamembertForMaskedLM"),o2t.forEach(t),fpr=r(Oke," (CamemBERT model)"),Oke.forEach(t),mpr=i(fe),u6=n(fe,"LI",{});var Vke=s(u6);l4e=n(Vke,"STRONG",{});var r2t=s(l4e);gpr=r(r2t,"convbert"),r2t.forEach(t),hpr=r(Vke," \u2014 "),YQ=n(Vke,"A",{href:!0});var t2t=s(YQ);ppr=r(t2t,"TFConvBertForMaskedLM"),t2t.forEach(t),upr=r(Vke," (ConvBERT model)"),Vke.forEach(t),_pr=i(fe),_6=n(fe,"LI",{});var Xke=s(_6);i4e=n(Xke,"STRONG",{});var a2t=s(i4e);bpr=r(a2t,"deberta"),a2t.forEach(t),vpr=r(Xke," \u2014 "),KQ=n(Xke,"A",{href:!0});var n2t=s(KQ);Fpr=r(n2t,"TFDebertaForMaskedLM"),n2t.forEach(t),Tpr=r(Xke," (DeBERTa model)"),Xke.forEach(t),Mpr=i(fe),b6=n(fe,"LI",{});var zke=s(b6);d4e=n(zke,"STRONG",{});var s2t=s(d4e);Epr=r(s2t,"deberta-v2"),s2t.forEach(t),Cpr=r(zke," \u2014 "),ZQ=n(zke,"A",{href:!0});var l2t=s(ZQ);wpr=r(l2t,"TFDebertaV2ForMaskedLM"),l2t.forEach(t),Apr=r(zke," (DeBERTa-v2 model)"),zke.forEach(t),ypr=i(fe),v6=n(fe,"LI",{});var Qke=s(v6);c4e=n(Qke,"STRONG",{});var i2t=s(c4e);Lpr=r(i2t,"distilbert"),i2t.forEach(t),xpr=r(Qke," \u2014 "),eW=n(Qke,"A",{href:!0});var d2t=s(eW);$pr=r(d2t,"TFDistilBertForMaskedLM"),d2t.forEach(t),kpr=r(Qke," (DistilBERT model)"),Qke.forEach(t),Spr=i(fe),F6=n(fe,"LI",{});var Wke=s(F6);f4e=n(Wke,"STRONG",{});var c2t=s(f4e);Rpr=r(c2t,"electra"),c2t.forEach(t),Bpr=r(Wke," \u2014 "),oW=n(Wke,"A",{href:!0});var f2t=s(oW);Ppr=r(f2t,"TFElectraForMaskedLM"),f2t.forEach(t),Ipr=r(Wke," (ELECTRA model)"),Wke.forEach(t),qpr=i(fe),T6=n(fe,"LI",{});var Hke=s(T6);m4e=n(Hke,"STRONG",{});var m2t=s(m4e);Npr=r(m2t,"flaubert"),m2t.forEach(t),jpr=r(Hke," \u2014 "),rW=n(Hke,"A",{href:!0});var g2t=s(rW);Dpr=r(g2t,"TFFlaubertWithLMHeadModel"),g2t.forEach(t),Gpr=r(Hke," (FlauBERT model)"),Hke.forEach(t),Opr=i(fe),M6=n(fe,"LI",{});var Uke=s(M6);g4e=n(Uke,"STRONG",{});var h2t=s(g4e);Vpr=r(h2t,"funnel"),h2t.forEach(t),Xpr=r(Uke," \u2014 "),tW=n(Uke,"A",{href:!0});var p2t=s(tW);zpr=r(p2t,"TFFunnelForMaskedLM"),p2t.forEach(t),Qpr=r(Uke," (Funnel Transformer model)"),Uke.forEach(t),Wpr=i(fe),E6=n(fe,"LI",{});var Jke=s(E6);h4e=n(Jke,"STRONG",{});var u2t=s(h4e);Hpr=r(u2t,"layoutlm"),u2t.forEach(t),Upr=r(Jke," \u2014 "),aW=n(Jke,"A",{href:!0});var _2t=s(aW);Jpr=r(_2t,"TFLayoutLMForMaskedLM"),_2t.forEach(t),Ypr=r(Jke," (LayoutLM model)"),Jke.forEach(t),Kpr=i(fe),C6=n(fe,"LI",{});var Yke=s(C6);p4e=n(Yke,"STRONG",{});var b2t=s(p4e);Zpr=r(b2t,"longformer"),b2t.forEach(t),eur=r(Yke," \u2014 "),nW=n(Yke,"A",{href:!0});var v2t=s(nW);our=r(v2t,"TFLongformerForMaskedLM"),v2t.forEach(t),rur=r(Yke," (Longformer model)"),Yke.forEach(t),tur=i(fe),w6=n(fe,"LI",{});var Kke=s(w6);u4e=n(Kke,"STRONG",{});var F2t=s(u4e);aur=r(F2t,"mobilebert"),F2t.forEach(t),nur=r(Kke," \u2014 "),sW=n(Kke,"A",{href:!0});var T2t=s(sW);sur=r(T2t,"TFMobileBertForMaskedLM"),T2t.forEach(t),lur=r(Kke," (MobileBERT model)"),Kke.forEach(t),iur=i(fe),A6=n(fe,"LI",{});var Zke=s(A6);_4e=n(Zke,"STRONG",{});var M2t=s(_4e);dur=r(M2t,"mpnet"),M2t.forEach(t),cur=r(Zke," \u2014 "),lW=n(Zke,"A",{href:!0});var E2t=s(lW);fur=r(E2t,"TFMPNetForMaskedLM"),E2t.forEach(t),mur=r(Zke," (MPNet model)"),Zke.forEach(t),gur=i(fe),y6=n(fe,"LI",{});var eSe=s(y6);b4e=n(eSe,"STRONG",{});var C2t=s(b4e);hur=r(C2t,"rembert"),C2t.forEach(t),pur=r(eSe," \u2014 "),iW=n(eSe,"A",{href:!0});var w2t=s(iW);uur=r(w2t,"TFRemBertForMaskedLM"),w2t.forEach(t),_ur=r(eSe," (RemBERT model)"),eSe.forEach(t),bur=i(fe),L6=n(fe,"LI",{});var oSe=s(L6);v4e=n(oSe,"STRONG",{});var A2t=s(v4e);vur=r(A2t,"roberta"),A2t.forEach(t),Fur=r(oSe," \u2014 "),dW=n(oSe,"A",{href:!0});var y2t=s(dW);Tur=r(y2t,"TFRobertaForMaskedLM"),y2t.forEach(t),Mur=r(oSe," (RoBERTa model)"),oSe.forEach(t),Eur=i(fe),x6=n(fe,"LI",{});var rSe=s(x6);F4e=n(rSe,"STRONG",{});var L2t=s(F4e);Cur=r(L2t,"roformer"),L2t.forEach(t),wur=r(rSe," \u2014 "),cW=n(rSe,"A",{href:!0});var x2t=s(cW);Aur=r(x2t,"TFRoFormerForMaskedLM"),x2t.forEach(t),yur=r(rSe," (RoFormer model)"),rSe.forEach(t),Lur=i(fe),$6=n(fe,"LI",{});var tSe=s($6);T4e=n(tSe,"STRONG",{});var $2t=s(T4e);xur=r($2t,"tapas"),$2t.forEach(t),$ur=r(tSe," \u2014 "),fW=n(tSe,"A",{href:!0});var k2t=s(fW);kur=r(k2t,"TFTapasForMaskedLM"),k2t.forEach(t),Sur=r(tSe," (TAPAS model)"),tSe.forEach(t),Rur=i(fe),k6=n(fe,"LI",{});var aSe=s(k6);M4e=n(aSe,"STRONG",{});var S2t=s(M4e);Bur=r(S2t,"xlm"),S2t.forEach(t),Pur=r(aSe," \u2014 "),mW=n(aSe,"A",{href:!0});var R2t=s(mW);Iur=r(R2t,"TFXLMWithLMHeadModel"),R2t.forEach(t),qur=r(aSe," (XLM model)"),aSe.forEach(t),Nur=i(fe),S6=n(fe,"LI",{});var nSe=s(S6);E4e=n(nSe,"STRONG",{});var B2t=s(E4e);jur=r(B2t,"xlm-roberta"),B2t.forEach(t),Dur=r(nSe," \u2014 "),gW=n(nSe,"A",{href:!0});var P2t=s(gW);Gur=r(P2t,"TFXLMRobertaForMaskedLM"),P2t.forEach(t),Our=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),fe.forEach(t),Vur=i(vl),T(R6.$$.fragment,vl),vl.forEach(t),bl.forEach(t),iqe=i(f),Zd=n(f,"H2",{class:!0});var hje=s(Zd);B6=n(hje,"A",{id:!0,class:!0,href:!0});var I2t=s(B6);C4e=n(I2t,"SPAN",{});var q2t=s(C4e);T(nx.$$.fragment,q2t),q2t.forEach(t),I2t.forEach(t),Xur=i(hje),w4e=n(hje,"SPAN",{});var N2t=s(w4e);zur=r(N2t,"TFAutoModelForSeq2SeqLM"),N2t.forEach(t),hje.forEach(t),dqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(sx.$$.fragment,Fl),Qur=i(Fl),ec=n(Fl,"P",{});var hZ=s(ec);Wur=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hW=n(hZ,"A",{href:!0});var j2t=s(hW);Hur=r(j2t,"from_pretrained()"),j2t.forEach(t),Uur=r(hZ," class method or the "),pW=n(hZ,"A",{href:!0});var D2t=s(pW);Jur=r(D2t,"from_config()"),D2t.forEach(t),Yur=r(hZ,` class
method.`),hZ.forEach(t),Kur=i(Fl),lx=n(Fl,"P",{});var pje=s(lx);Zur=r(pje,"This class cannot be instantiated directly using "),A4e=n(pje,"CODE",{});var G2t=s(A4e);e_r=r(G2t,"__init__()"),G2t.forEach(t),o_r=r(pje," (throws an error)."),pje.forEach(t),r_r=i(Fl),$t=n(Fl,"DIV",{class:!0});var l0=s($t);T(ix.$$.fragment,l0),t_r=i(l0),y4e=n(l0,"P",{});var O2t=s(y4e);a_r=r(O2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O2t.forEach(t),n_r=i(l0),oc=n(l0,"P",{});var pZ=s(oc);s_r=r(pZ,`Note:
Loading a model from its configuration file does `),L4e=n(pZ,"STRONG",{});var V2t=s(L4e);l_r=r(V2t,"not"),V2t.forEach(t),i_r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(pZ,"A",{href:!0});var X2t=s(uW);d_r=r(X2t,"from_pretrained()"),X2t.forEach(t),c_r=r(pZ," to load the model weights."),pZ.forEach(t),f_r=i(l0),T(P6.$$.fragment,l0),l0.forEach(t),m_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(dx.$$.fragment,Tl),g_r=i(Tl),x4e=n(Tl,"P",{});var z2t=s(x4e);h_r=r(z2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z2t.forEach(t),p_r=i(Tl),an=n(Tl,"P",{});var i0=s(an);u_r=r(i0,"The model class to instantiate is selected based on the "),$4e=n(i0,"CODE",{});var Q2t=s($4e);__r=r(Q2t,"model_type"),Q2t.forEach(t),b_r=r(i0,` property of the config object (either
passed as an argument or loaded from `),k4e=n(i0,"CODE",{});var W2t=s(k4e);v_r=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),F_r=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(i0,"CODE",{});var H2t=s(S4e);T_r=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),M_r=r(i0,":"),i0.forEach(t),E_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);I6=n(Re,"LI",{});var sSe=s(I6);R4e=n(sSe,"STRONG",{});var U2t=s(R4e);C_r=r(U2t,"bart"),U2t.forEach(t),w_r=r(sSe," \u2014 "),_W=n(sSe,"A",{href:!0});var J2t=s(_W);A_r=r(J2t,"TFBartForConditionalGeneration"),J2t.forEach(t),y_r=r(sSe," (BART model)"),sSe.forEach(t),L_r=i(Re),q6=n(Re,"LI",{});var lSe=s(q6);B4e=n(lSe,"STRONG",{});var Y2t=s(B4e);x_r=r(Y2t,"blenderbot"),Y2t.forEach(t),$_r=r(lSe," \u2014 "),bW=n(lSe,"A",{href:!0});var K2t=s(bW);k_r=r(K2t,"TFBlenderbotForConditionalGeneration"),K2t.forEach(t),S_r=r(lSe," (Blenderbot model)"),lSe.forEach(t),R_r=i(Re),N6=n(Re,"LI",{});var iSe=s(N6);P4e=n(iSe,"STRONG",{});var Z2t=s(P4e);B_r=r(Z2t,"blenderbot-small"),Z2t.forEach(t),P_r=r(iSe," \u2014 "),vW=n(iSe,"A",{href:!0});var e5t=s(vW);I_r=r(e5t,"TFBlenderbotSmallForConditionalGeneration"),e5t.forEach(t),q_r=r(iSe," (BlenderbotSmall model)"),iSe.forEach(t),N_r=i(Re),j6=n(Re,"LI",{});var dSe=s(j6);I4e=n(dSe,"STRONG",{});var o5t=s(I4e);j_r=r(o5t,"encoder-decoder"),o5t.forEach(t),D_r=r(dSe," \u2014 "),FW=n(dSe,"A",{href:!0});var r5t=s(FW);G_r=r(r5t,"TFEncoderDecoderModel"),r5t.forEach(t),O_r=r(dSe," (Encoder decoder model)"),dSe.forEach(t),V_r=i(Re),D6=n(Re,"LI",{});var cSe=s(D6);q4e=n(cSe,"STRONG",{});var t5t=s(q4e);X_r=r(t5t,"led"),t5t.forEach(t),z_r=r(cSe," \u2014 "),TW=n(cSe,"A",{href:!0});var a5t=s(TW);Q_r=r(a5t,"TFLEDForConditionalGeneration"),a5t.forEach(t),W_r=r(cSe," (LED model)"),cSe.forEach(t),H_r=i(Re),G6=n(Re,"LI",{});var fSe=s(G6);N4e=n(fSe,"STRONG",{});var n5t=s(N4e);U_r=r(n5t,"marian"),n5t.forEach(t),J_r=r(fSe," \u2014 "),MW=n(fSe,"A",{href:!0});var s5t=s(MW);Y_r=r(s5t,"TFMarianMTModel"),s5t.forEach(t),K_r=r(fSe," (Marian model)"),fSe.forEach(t),Z_r=i(Re),O6=n(Re,"LI",{});var mSe=s(O6);j4e=n(mSe,"STRONG",{});var l5t=s(j4e);e1r=r(l5t,"mbart"),l5t.forEach(t),o1r=r(mSe," \u2014 "),EW=n(mSe,"A",{href:!0});var i5t=s(EW);r1r=r(i5t,"TFMBartForConditionalGeneration"),i5t.forEach(t),t1r=r(mSe," (mBART model)"),mSe.forEach(t),a1r=i(Re),V6=n(Re,"LI",{});var gSe=s(V6);D4e=n(gSe,"STRONG",{});var d5t=s(D4e);n1r=r(d5t,"mt5"),d5t.forEach(t),s1r=r(gSe," \u2014 "),CW=n(gSe,"A",{href:!0});var c5t=s(CW);l1r=r(c5t,"TFMT5ForConditionalGeneration"),c5t.forEach(t),i1r=r(gSe," (mT5 model)"),gSe.forEach(t),d1r=i(Re),X6=n(Re,"LI",{});var hSe=s(X6);G4e=n(hSe,"STRONG",{});var f5t=s(G4e);c1r=r(f5t,"pegasus"),f5t.forEach(t),f1r=r(hSe," \u2014 "),wW=n(hSe,"A",{href:!0});var m5t=s(wW);m1r=r(m5t,"TFPegasusForConditionalGeneration"),m5t.forEach(t),g1r=r(hSe," (Pegasus model)"),hSe.forEach(t),h1r=i(Re),z6=n(Re,"LI",{});var pSe=s(z6);O4e=n(pSe,"STRONG",{});var g5t=s(O4e);p1r=r(g5t,"t5"),g5t.forEach(t),u1r=r(pSe," \u2014 "),AW=n(pSe,"A",{href:!0});var h5t=s(AW);_1r=r(h5t,"TFT5ForConditionalGeneration"),h5t.forEach(t),b1r=r(pSe," (T5 model)"),pSe.forEach(t),Re.forEach(t),v1r=i(Tl),T(Q6.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),cqe=i(f),rc=n(f,"H2",{class:!0});var uje=s(rc);W6=n(uje,"A",{id:!0,class:!0,href:!0});var p5t=s(W6);V4e=n(p5t,"SPAN",{});var u5t=s(V4e);T(cx.$$.fragment,u5t),u5t.forEach(t),p5t.forEach(t),F1r=i(uje),X4e=n(uje,"SPAN",{});var _5t=s(X4e);T1r=r(_5t,"TFAutoModelForSequenceClassification"),_5t.forEach(t),uje.forEach(t),fqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(fx.$$.fragment,Ml),M1r=i(Ml),tc=n(Ml,"P",{});var uZ=s(tc);E1r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yW=n(uZ,"A",{href:!0});var b5t=s(yW);C1r=r(b5t,"from_pretrained()"),b5t.forEach(t),w1r=r(uZ," class method or the "),LW=n(uZ,"A",{href:!0});var v5t=s(LW);A1r=r(v5t,"from_config()"),v5t.forEach(t),y1r=r(uZ,` class
method.`),uZ.forEach(t),L1r=i(Ml),mx=n(Ml,"P",{});var _je=s(mx);x1r=r(_je,"This class cannot be instantiated directly using "),z4e=n(_je,"CODE",{});var F5t=s(z4e);$1r=r(F5t,"__init__()"),F5t.forEach(t),k1r=r(_je," (throws an error)."),_je.forEach(t),S1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var d0=s(kt);T(gx.$$.fragment,d0),R1r=i(d0),Q4e=n(d0,"P",{});var T5t=s(Q4e);B1r=r(T5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T5t.forEach(t),P1r=i(d0),ac=n(d0,"P",{});var _Z=s(ac);I1r=r(_Z,`Note:
Loading a model from its configuration file does `),W4e=n(_Z,"STRONG",{});var M5t=s(W4e);q1r=r(M5t,"not"),M5t.forEach(t),N1r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(_Z,"A",{href:!0});var E5t=s(xW);j1r=r(E5t,"from_pretrained()"),E5t.forEach(t),D1r=r(_Z," to load the model weights."),_Z.forEach(t),G1r=i(d0),T(H6.$$.fragment,d0),d0.forEach(t),O1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(hx.$$.fragment,El),V1r=i(El),H4e=n(El,"P",{});var C5t=s(H4e);X1r=r(C5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C5t.forEach(t),z1r=i(El),nn=n(El,"P",{});var c0=s(nn);Q1r=r(c0,"The model class to instantiate is selected based on the "),U4e=n(c0,"CODE",{});var w5t=s(U4e);W1r=r(w5t,"model_type"),w5t.forEach(t),H1r=r(c0,` property of the config object (either
passed as an argument or loaded from `),J4e=n(c0,"CODE",{});var A5t=s(J4e);U1r=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),J1r=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(c0,"CODE",{});var y5t=s(Y4e);Y1r=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),K1r=r(c0,":"),c0.forEach(t),Z1r=i(El),Z=n(El,"UL",{});var te=s(Z);U6=n(te,"LI",{});var uSe=s(U6);K4e=n(uSe,"STRONG",{});var L5t=s(K4e);ebr=r(L5t,"albert"),L5t.forEach(t),obr=r(uSe," \u2014 "),$W=n(uSe,"A",{href:!0});var x5t=s($W);rbr=r(x5t,"TFAlbertForSequenceClassification"),x5t.forEach(t),tbr=r(uSe," (ALBERT model)"),uSe.forEach(t),abr=i(te),J6=n(te,"LI",{});var _Se=s(J6);Z4e=n(_Se,"STRONG",{});var $5t=s(Z4e);nbr=r($5t,"bert"),$5t.forEach(t),sbr=r(_Se," \u2014 "),kW=n(_Se,"A",{href:!0});var k5t=s(kW);lbr=r(k5t,"TFBertForSequenceClassification"),k5t.forEach(t),ibr=r(_Se," (BERT model)"),_Se.forEach(t),dbr=i(te),Y6=n(te,"LI",{});var bSe=s(Y6);e2e=n(bSe,"STRONG",{});var S5t=s(e2e);cbr=r(S5t,"camembert"),S5t.forEach(t),fbr=r(bSe," \u2014 "),SW=n(bSe,"A",{href:!0});var R5t=s(SW);mbr=r(R5t,"TFCamembertForSequenceClassification"),R5t.forEach(t),gbr=r(bSe," (CamemBERT model)"),bSe.forEach(t),hbr=i(te),K6=n(te,"LI",{});var vSe=s(K6);o2e=n(vSe,"STRONG",{});var B5t=s(o2e);pbr=r(B5t,"convbert"),B5t.forEach(t),ubr=r(vSe," \u2014 "),RW=n(vSe,"A",{href:!0});var P5t=s(RW);_br=r(P5t,"TFConvBertForSequenceClassification"),P5t.forEach(t),bbr=r(vSe," (ConvBERT model)"),vSe.forEach(t),vbr=i(te),Z6=n(te,"LI",{});var FSe=s(Z6);r2e=n(FSe,"STRONG",{});var I5t=s(r2e);Fbr=r(I5t,"ctrl"),I5t.forEach(t),Tbr=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var q5t=s(BW);Mbr=r(q5t,"TFCTRLForSequenceClassification"),q5t.forEach(t),Ebr=r(FSe," (CTRL model)"),FSe.forEach(t),Cbr=i(te),eT=n(te,"LI",{});var TSe=s(eT);t2e=n(TSe,"STRONG",{});var N5t=s(t2e);wbr=r(N5t,"deberta"),N5t.forEach(t),Abr=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var j5t=s(PW);ybr=r(j5t,"TFDebertaForSequenceClassification"),j5t.forEach(t),Lbr=r(TSe," (DeBERTa model)"),TSe.forEach(t),xbr=i(te),oT=n(te,"LI",{});var MSe=s(oT);a2e=n(MSe,"STRONG",{});var D5t=s(a2e);$br=r(D5t,"deberta-v2"),D5t.forEach(t),kbr=r(MSe," \u2014 "),IW=n(MSe,"A",{href:!0});var G5t=s(IW);Sbr=r(G5t,"TFDebertaV2ForSequenceClassification"),G5t.forEach(t),Rbr=r(MSe," (DeBERTa-v2 model)"),MSe.forEach(t),Bbr=i(te),rT=n(te,"LI",{});var ESe=s(rT);n2e=n(ESe,"STRONG",{});var O5t=s(n2e);Pbr=r(O5t,"distilbert"),O5t.forEach(t),Ibr=r(ESe," \u2014 "),qW=n(ESe,"A",{href:!0});var V5t=s(qW);qbr=r(V5t,"TFDistilBertForSequenceClassification"),V5t.forEach(t),Nbr=r(ESe," (DistilBERT model)"),ESe.forEach(t),jbr=i(te),tT=n(te,"LI",{});var CSe=s(tT);s2e=n(CSe,"STRONG",{});var X5t=s(s2e);Dbr=r(X5t,"electra"),X5t.forEach(t),Gbr=r(CSe," \u2014 "),NW=n(CSe,"A",{href:!0});var z5t=s(NW);Obr=r(z5t,"TFElectraForSequenceClassification"),z5t.forEach(t),Vbr=r(CSe," (ELECTRA model)"),CSe.forEach(t),Xbr=i(te),aT=n(te,"LI",{});var wSe=s(aT);l2e=n(wSe,"STRONG",{});var Q5t=s(l2e);zbr=r(Q5t,"flaubert"),Q5t.forEach(t),Qbr=r(wSe," \u2014 "),jW=n(wSe,"A",{href:!0});var W5t=s(jW);Wbr=r(W5t,"TFFlaubertForSequenceClassification"),W5t.forEach(t),Hbr=r(wSe," (FlauBERT model)"),wSe.forEach(t),Ubr=i(te),nT=n(te,"LI",{});var ASe=s(nT);i2e=n(ASe,"STRONG",{});var H5t=s(i2e);Jbr=r(H5t,"funnel"),H5t.forEach(t),Ybr=r(ASe," \u2014 "),DW=n(ASe,"A",{href:!0});var U5t=s(DW);Kbr=r(U5t,"TFFunnelForSequenceClassification"),U5t.forEach(t),Zbr=r(ASe," (Funnel Transformer model)"),ASe.forEach(t),e4r=i(te),sT=n(te,"LI",{});var ySe=s(sT);d2e=n(ySe,"STRONG",{});var J5t=s(d2e);o4r=r(J5t,"gpt2"),J5t.forEach(t),r4r=r(ySe," \u2014 "),GW=n(ySe,"A",{href:!0});var Y5t=s(GW);t4r=r(Y5t,"TFGPT2ForSequenceClassification"),Y5t.forEach(t),a4r=r(ySe," (OpenAI GPT-2 model)"),ySe.forEach(t),n4r=i(te),lT=n(te,"LI",{});var LSe=s(lT);c2e=n(LSe,"STRONG",{});var K5t=s(c2e);s4r=r(K5t,"gptj"),K5t.forEach(t),l4r=r(LSe," \u2014 "),OW=n(LSe,"A",{href:!0});var Z5t=s(OW);i4r=r(Z5t,"TFGPTJForSequenceClassification"),Z5t.forEach(t),d4r=r(LSe," (GPT-J model)"),LSe.forEach(t),c4r=i(te),iT=n(te,"LI",{});var xSe=s(iT);f2e=n(xSe,"STRONG",{});var e3t=s(f2e);f4r=r(e3t,"layoutlm"),e3t.forEach(t),m4r=r(xSe," \u2014 "),VW=n(xSe,"A",{href:!0});var o3t=s(VW);g4r=r(o3t,"TFLayoutLMForSequenceClassification"),o3t.forEach(t),h4r=r(xSe," (LayoutLM model)"),xSe.forEach(t),p4r=i(te),dT=n(te,"LI",{});var $Se=s(dT);m2e=n($Se,"STRONG",{});var r3t=s(m2e);u4r=r(r3t,"longformer"),r3t.forEach(t),_4r=r($Se," \u2014 "),XW=n($Se,"A",{href:!0});var t3t=s(XW);b4r=r(t3t,"TFLongformerForSequenceClassification"),t3t.forEach(t),v4r=r($Se," (Longformer model)"),$Se.forEach(t),F4r=i(te),cT=n(te,"LI",{});var kSe=s(cT);g2e=n(kSe,"STRONG",{});var a3t=s(g2e);T4r=r(a3t,"mobilebert"),a3t.forEach(t),M4r=r(kSe," \u2014 "),zW=n(kSe,"A",{href:!0});var n3t=s(zW);E4r=r(n3t,"TFMobileBertForSequenceClassification"),n3t.forEach(t),C4r=r(kSe," (MobileBERT model)"),kSe.forEach(t),w4r=i(te),fT=n(te,"LI",{});var SSe=s(fT);h2e=n(SSe,"STRONG",{});var s3t=s(h2e);A4r=r(s3t,"mpnet"),s3t.forEach(t),y4r=r(SSe," \u2014 "),QW=n(SSe,"A",{href:!0});var l3t=s(QW);L4r=r(l3t,"TFMPNetForSequenceClassification"),l3t.forEach(t),x4r=r(SSe," (MPNet model)"),SSe.forEach(t),$4r=i(te),mT=n(te,"LI",{});var RSe=s(mT);p2e=n(RSe,"STRONG",{});var i3t=s(p2e);k4r=r(i3t,"openai-gpt"),i3t.forEach(t),S4r=r(RSe," \u2014 "),WW=n(RSe,"A",{href:!0});var d3t=s(WW);R4r=r(d3t,"TFOpenAIGPTForSequenceClassification"),d3t.forEach(t),B4r=r(RSe," (OpenAI GPT model)"),RSe.forEach(t),P4r=i(te),gT=n(te,"LI",{});var BSe=s(gT);u2e=n(BSe,"STRONG",{});var c3t=s(u2e);I4r=r(c3t,"rembert"),c3t.forEach(t),q4r=r(BSe," \u2014 "),HW=n(BSe,"A",{href:!0});var f3t=s(HW);N4r=r(f3t,"TFRemBertForSequenceClassification"),f3t.forEach(t),j4r=r(BSe," (RemBERT model)"),BSe.forEach(t),D4r=i(te),hT=n(te,"LI",{});var PSe=s(hT);_2e=n(PSe,"STRONG",{});var m3t=s(_2e);G4r=r(m3t,"roberta"),m3t.forEach(t),O4r=r(PSe," \u2014 "),UW=n(PSe,"A",{href:!0});var g3t=s(UW);V4r=r(g3t,"TFRobertaForSequenceClassification"),g3t.forEach(t),X4r=r(PSe," (RoBERTa model)"),PSe.forEach(t),z4r=i(te),pT=n(te,"LI",{});var ISe=s(pT);b2e=n(ISe,"STRONG",{});var h3t=s(b2e);Q4r=r(h3t,"roformer"),h3t.forEach(t),W4r=r(ISe," \u2014 "),JW=n(ISe,"A",{href:!0});var p3t=s(JW);H4r=r(p3t,"TFRoFormerForSequenceClassification"),p3t.forEach(t),U4r=r(ISe," (RoFormer model)"),ISe.forEach(t),J4r=i(te),uT=n(te,"LI",{});var qSe=s(uT);v2e=n(qSe,"STRONG",{});var u3t=s(v2e);Y4r=r(u3t,"tapas"),u3t.forEach(t),K4r=r(qSe," \u2014 "),YW=n(qSe,"A",{href:!0});var _3t=s(YW);Z4r=r(_3t,"TFTapasForSequenceClassification"),_3t.forEach(t),e2r=r(qSe," (TAPAS model)"),qSe.forEach(t),o2r=i(te),_T=n(te,"LI",{});var NSe=s(_T);F2e=n(NSe,"STRONG",{});var b3t=s(F2e);r2r=r(b3t,"transfo-xl"),b3t.forEach(t),t2r=r(NSe," \u2014 "),KW=n(NSe,"A",{href:!0});var v3t=s(KW);a2r=r(v3t,"TFTransfoXLForSequenceClassification"),v3t.forEach(t),n2r=r(NSe," (Transformer-XL model)"),NSe.forEach(t),s2r=i(te),bT=n(te,"LI",{});var jSe=s(bT);T2e=n(jSe,"STRONG",{});var F3t=s(T2e);l2r=r(F3t,"xlm"),F3t.forEach(t),i2r=r(jSe," \u2014 "),ZW=n(jSe,"A",{href:!0});var T3t=s(ZW);d2r=r(T3t,"TFXLMForSequenceClassification"),T3t.forEach(t),c2r=r(jSe," (XLM model)"),jSe.forEach(t),f2r=i(te),vT=n(te,"LI",{});var DSe=s(vT);M2e=n(DSe,"STRONG",{});var M3t=s(M2e);m2r=r(M3t,"xlm-roberta"),M3t.forEach(t),g2r=r(DSe," \u2014 "),eH=n(DSe,"A",{href:!0});var E3t=s(eH);h2r=r(E3t,"TFXLMRobertaForSequenceClassification"),E3t.forEach(t),p2r=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),u2r=i(te),FT=n(te,"LI",{});var GSe=s(FT);E2e=n(GSe,"STRONG",{});var C3t=s(E2e);_2r=r(C3t,"xlnet"),C3t.forEach(t),b2r=r(GSe," \u2014 "),oH=n(GSe,"A",{href:!0});var w3t=s(oH);v2r=r(w3t,"TFXLNetForSequenceClassification"),w3t.forEach(t),F2r=r(GSe," (XLNet model)"),GSe.forEach(t),te.forEach(t),T2r=i(El),T(TT.$$.fragment,El),El.forEach(t),Ml.forEach(t),mqe=i(f),nc=n(f,"H2",{class:!0});var bje=s(nc);MT=n(bje,"A",{id:!0,class:!0,href:!0});var A3t=s(MT);C2e=n(A3t,"SPAN",{});var y3t=s(C2e);T(px.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),M2r=i(bje),w2e=n(bje,"SPAN",{});var L3t=s(w2e);E2r=r(L3t,"TFAutoModelForMultipleChoice"),L3t.forEach(t),bje.forEach(t),gqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(ux.$$.fragment,Cl),C2r=i(Cl),sc=n(Cl,"P",{});var bZ=s(sc);w2r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rH=n(bZ,"A",{href:!0});var x3t=s(rH);A2r=r(x3t,"from_pretrained()"),x3t.forEach(t),y2r=r(bZ," class method or the "),tH=n(bZ,"A",{href:!0});var $3t=s(tH);L2r=r($3t,"from_config()"),$3t.forEach(t),x2r=r(bZ,` class
method.`),bZ.forEach(t),$2r=i(Cl),_x=n(Cl,"P",{});var vje=s(_x);k2r=r(vje,"This class cannot be instantiated directly using "),A2e=n(vje,"CODE",{});var k3t=s(A2e);S2r=r(k3t,"__init__()"),k3t.forEach(t),R2r=r(vje," (throws an error)."),vje.forEach(t),B2r=i(Cl),St=n(Cl,"DIV",{class:!0});var f0=s(St);T(bx.$$.fragment,f0),P2r=i(f0),y2e=n(f0,"P",{});var S3t=s(y2e);I2r=r(S3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S3t.forEach(t),q2r=i(f0),lc=n(f0,"P",{});var vZ=s(lc);N2r=r(vZ,`Note:
Loading a model from its configuration file does `),L2e=n(vZ,"STRONG",{});var R3t=s(L2e);j2r=r(R3t,"not"),R3t.forEach(t),D2r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(vZ,"A",{href:!0});var B3t=s(aH);G2r=r(B3t,"from_pretrained()"),B3t.forEach(t),O2r=r(vZ," to load the model weights."),vZ.forEach(t),V2r=i(f0),T(ET.$$.fragment,f0),f0.forEach(t),X2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(vx.$$.fragment,wl),z2r=i(wl),x2e=n(wl,"P",{});var P3t=s(x2e);Q2r=r(P3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P3t.forEach(t),W2r=i(wl),sn=n(wl,"P",{});var m0=s(sn);H2r=r(m0,"The model class to instantiate is selected based on the "),$2e=n(m0,"CODE",{});var I3t=s($2e);U2r=r(I3t,"model_type"),I3t.forEach(t),J2r=r(m0,` property of the config object (either
passed as an argument or loaded from `),k2e=n(m0,"CODE",{});var q3t=s(k2e);Y2r=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),K2r=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(m0,"CODE",{});var N3t=s(S2e);Z2r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),e5r=r(m0,":"),m0.forEach(t),o5r=i(wl),he=n(wl,"UL",{});var ue=s(he);CT=n(ue,"LI",{});var OSe=s(CT);R2e=n(OSe,"STRONG",{});var j3t=s(R2e);r5r=r(j3t,"albert"),j3t.forEach(t),t5r=r(OSe," \u2014 "),nH=n(OSe,"A",{href:!0});var D3t=s(nH);a5r=r(D3t,"TFAlbertForMultipleChoice"),D3t.forEach(t),n5r=r(OSe," (ALBERT model)"),OSe.forEach(t),s5r=i(ue),wT=n(ue,"LI",{});var VSe=s(wT);B2e=n(VSe,"STRONG",{});var G3t=s(B2e);l5r=r(G3t,"bert"),G3t.forEach(t),i5r=r(VSe," \u2014 "),sH=n(VSe,"A",{href:!0});var O3t=s(sH);d5r=r(O3t,"TFBertForMultipleChoice"),O3t.forEach(t),c5r=r(VSe," (BERT model)"),VSe.forEach(t),f5r=i(ue),AT=n(ue,"LI",{});var XSe=s(AT);P2e=n(XSe,"STRONG",{});var V3t=s(P2e);m5r=r(V3t,"camembert"),V3t.forEach(t),g5r=r(XSe," \u2014 "),lH=n(XSe,"A",{href:!0});var X3t=s(lH);h5r=r(X3t,"TFCamembertForMultipleChoice"),X3t.forEach(t),p5r=r(XSe," (CamemBERT model)"),XSe.forEach(t),u5r=i(ue),yT=n(ue,"LI",{});var zSe=s(yT);I2e=n(zSe,"STRONG",{});var z3t=s(I2e);_5r=r(z3t,"convbert"),z3t.forEach(t),b5r=r(zSe," \u2014 "),iH=n(zSe,"A",{href:!0});var Q3t=s(iH);v5r=r(Q3t,"TFConvBertForMultipleChoice"),Q3t.forEach(t),F5r=r(zSe," (ConvBERT model)"),zSe.forEach(t),T5r=i(ue),LT=n(ue,"LI",{});var QSe=s(LT);q2e=n(QSe,"STRONG",{});var W3t=s(q2e);M5r=r(W3t,"distilbert"),W3t.forEach(t),E5r=r(QSe," \u2014 "),dH=n(QSe,"A",{href:!0});var H3t=s(dH);C5r=r(H3t,"TFDistilBertForMultipleChoice"),H3t.forEach(t),w5r=r(QSe," (DistilBERT model)"),QSe.forEach(t),A5r=i(ue),xT=n(ue,"LI",{});var WSe=s(xT);N2e=n(WSe,"STRONG",{});var U3t=s(N2e);y5r=r(U3t,"electra"),U3t.forEach(t),L5r=r(WSe," \u2014 "),cH=n(WSe,"A",{href:!0});var J3t=s(cH);x5r=r(J3t,"TFElectraForMultipleChoice"),J3t.forEach(t),$5r=r(WSe," (ELECTRA model)"),WSe.forEach(t),k5r=i(ue),$T=n(ue,"LI",{});var HSe=s($T);j2e=n(HSe,"STRONG",{});var Y3t=s(j2e);S5r=r(Y3t,"flaubert"),Y3t.forEach(t),R5r=r(HSe," \u2014 "),fH=n(HSe,"A",{href:!0});var K3t=s(fH);B5r=r(K3t,"TFFlaubertForMultipleChoice"),K3t.forEach(t),P5r=r(HSe," (FlauBERT model)"),HSe.forEach(t),I5r=i(ue),kT=n(ue,"LI",{});var USe=s(kT);D2e=n(USe,"STRONG",{});var Z3t=s(D2e);q5r=r(Z3t,"funnel"),Z3t.forEach(t),N5r=r(USe," \u2014 "),mH=n(USe,"A",{href:!0});var evt=s(mH);j5r=r(evt,"TFFunnelForMultipleChoice"),evt.forEach(t),D5r=r(USe," (Funnel Transformer model)"),USe.forEach(t),G5r=i(ue),ST=n(ue,"LI",{});var JSe=s(ST);G2e=n(JSe,"STRONG",{});var ovt=s(G2e);O5r=r(ovt,"longformer"),ovt.forEach(t),V5r=r(JSe," \u2014 "),gH=n(JSe,"A",{href:!0});var rvt=s(gH);X5r=r(rvt,"TFLongformerForMultipleChoice"),rvt.forEach(t),z5r=r(JSe," (Longformer model)"),JSe.forEach(t),Q5r=i(ue),RT=n(ue,"LI",{});var YSe=s(RT);O2e=n(YSe,"STRONG",{});var tvt=s(O2e);W5r=r(tvt,"mobilebert"),tvt.forEach(t),H5r=r(YSe," \u2014 "),hH=n(YSe,"A",{href:!0});var avt=s(hH);U5r=r(avt,"TFMobileBertForMultipleChoice"),avt.forEach(t),J5r=r(YSe," (MobileBERT model)"),YSe.forEach(t),Y5r=i(ue),BT=n(ue,"LI",{});var KSe=s(BT);V2e=n(KSe,"STRONG",{});var nvt=s(V2e);K5r=r(nvt,"mpnet"),nvt.forEach(t),Z5r=r(KSe," \u2014 "),pH=n(KSe,"A",{href:!0});var svt=s(pH);e3r=r(svt,"TFMPNetForMultipleChoice"),svt.forEach(t),o3r=r(KSe," (MPNet model)"),KSe.forEach(t),r3r=i(ue),PT=n(ue,"LI",{});var ZSe=s(PT);X2e=n(ZSe,"STRONG",{});var lvt=s(X2e);t3r=r(lvt,"rembert"),lvt.forEach(t),a3r=r(ZSe," \u2014 "),uH=n(ZSe,"A",{href:!0});var ivt=s(uH);n3r=r(ivt,"TFRemBertForMultipleChoice"),ivt.forEach(t),s3r=r(ZSe," (RemBERT model)"),ZSe.forEach(t),l3r=i(ue),IT=n(ue,"LI",{});var eRe=s(IT);z2e=n(eRe,"STRONG",{});var dvt=s(z2e);i3r=r(dvt,"roberta"),dvt.forEach(t),d3r=r(eRe," \u2014 "),_H=n(eRe,"A",{href:!0});var cvt=s(_H);c3r=r(cvt,"TFRobertaForMultipleChoice"),cvt.forEach(t),f3r=r(eRe," (RoBERTa model)"),eRe.forEach(t),m3r=i(ue),qT=n(ue,"LI",{});var oRe=s(qT);Q2e=n(oRe,"STRONG",{});var fvt=s(Q2e);g3r=r(fvt,"roformer"),fvt.forEach(t),h3r=r(oRe," \u2014 "),bH=n(oRe,"A",{href:!0});var mvt=s(bH);p3r=r(mvt,"TFRoFormerForMultipleChoice"),mvt.forEach(t),u3r=r(oRe," (RoFormer model)"),oRe.forEach(t),_3r=i(ue),NT=n(ue,"LI",{});var rRe=s(NT);W2e=n(rRe,"STRONG",{});var gvt=s(W2e);b3r=r(gvt,"xlm"),gvt.forEach(t),v3r=r(rRe," \u2014 "),vH=n(rRe,"A",{href:!0});var hvt=s(vH);F3r=r(hvt,"TFXLMForMultipleChoice"),hvt.forEach(t),T3r=r(rRe," (XLM model)"),rRe.forEach(t),M3r=i(ue),jT=n(ue,"LI",{});var tRe=s(jT);H2e=n(tRe,"STRONG",{});var pvt=s(H2e);E3r=r(pvt,"xlm-roberta"),pvt.forEach(t),C3r=r(tRe," \u2014 "),FH=n(tRe,"A",{href:!0});var uvt=s(FH);w3r=r(uvt,"TFXLMRobertaForMultipleChoice"),uvt.forEach(t),A3r=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),y3r=i(ue),DT=n(ue,"LI",{});var aRe=s(DT);U2e=n(aRe,"STRONG",{});var _vt=s(U2e);L3r=r(_vt,"xlnet"),_vt.forEach(t),x3r=r(aRe," \u2014 "),TH=n(aRe,"A",{href:!0});var bvt=s(TH);$3r=r(bvt,"TFXLNetForMultipleChoice"),bvt.forEach(t),k3r=r(aRe," (XLNet model)"),aRe.forEach(t),ue.forEach(t),S3r=i(wl),T(GT.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),hqe=i(f),ic=n(f,"H2",{class:!0});var Fje=s(ic);OT=n(Fje,"A",{id:!0,class:!0,href:!0});var vvt=s(OT);J2e=n(vvt,"SPAN",{});var Fvt=s(J2e);T(Fx.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),R3r=i(Fje),Y2e=n(Fje,"SPAN",{});var Tvt=s(Y2e);B3r=r(Tvt,"TFAutoModelForNextSentencePrediction"),Tvt.forEach(t),Fje.forEach(t),pqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(Tx.$$.fragment,Al),P3r=i(Al),dc=n(Al,"P",{});var FZ=s(dc);I3r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MH=n(FZ,"A",{href:!0});var Mvt=s(MH);q3r=r(Mvt,"from_pretrained()"),Mvt.forEach(t),N3r=r(FZ," class method or the "),EH=n(FZ,"A",{href:!0});var Evt=s(EH);j3r=r(Evt,"from_config()"),Evt.forEach(t),D3r=r(FZ,` class
method.`),FZ.forEach(t),G3r=i(Al),Mx=n(Al,"P",{});var Tje=s(Mx);O3r=r(Tje,"This class cannot be instantiated directly using "),K2e=n(Tje,"CODE",{});var Cvt=s(K2e);V3r=r(Cvt,"__init__()"),Cvt.forEach(t),X3r=r(Tje," (throws an error)."),Tje.forEach(t),z3r=i(Al),Rt=n(Al,"DIV",{class:!0});var g0=s(Rt);T(Ex.$$.fragment,g0),Q3r=i(g0),Z2e=n(g0,"P",{});var wvt=s(Z2e);W3r=r(wvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wvt.forEach(t),H3r=i(g0),cc=n(g0,"P",{});var TZ=s(cc);U3r=r(TZ,`Note:
Loading a model from its configuration file does `),e5e=n(TZ,"STRONG",{});var Avt=s(e5e);J3r=r(Avt,"not"),Avt.forEach(t),Y3r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(TZ,"A",{href:!0});var yvt=s(CH);K3r=r(yvt,"from_pretrained()"),yvt.forEach(t),Z3r=r(TZ," to load the model weights."),TZ.forEach(t),evr=i(g0),T(VT.$$.fragment,g0),g0.forEach(t),ovr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(Cx.$$.fragment,yl),rvr=i(yl),o5e=n(yl,"P",{});var Lvt=s(o5e);tvr=r(Lvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lvt.forEach(t),avr=i(yl),ln=n(yl,"P",{});var h0=s(ln);nvr=r(h0,"The model class to instantiate is selected based on the "),r5e=n(h0,"CODE",{});var xvt=s(r5e);svr=r(xvt,"model_type"),xvt.forEach(t),lvr=r(h0,` property of the config object (either
passed as an argument or loaded from `),t5e=n(h0,"CODE",{});var $vt=s(t5e);ivr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),dvr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a5e=n(h0,"CODE",{});var kvt=s(a5e);cvr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),fvr=r(h0,":"),h0.forEach(t),mvr=i(yl),wx=n(yl,"UL",{});var Mje=s(wx);XT=n(Mje,"LI",{});var nRe=s(XT);n5e=n(nRe,"STRONG",{});var Svt=s(n5e);gvr=r(Svt,"bert"),Svt.forEach(t),hvr=r(nRe," \u2014 "),wH=n(nRe,"A",{href:!0});var Rvt=s(wH);pvr=r(Rvt,"TFBertForNextSentencePrediction"),Rvt.forEach(t),uvr=r(nRe," (BERT model)"),nRe.forEach(t),_vr=i(Mje),zT=n(Mje,"LI",{});var sRe=s(zT);s5e=n(sRe,"STRONG",{});var Bvt=s(s5e);bvr=r(Bvt,"mobilebert"),Bvt.forEach(t),vvr=r(sRe," \u2014 "),AH=n(sRe,"A",{href:!0});var Pvt=s(AH);Fvr=r(Pvt,"TFMobileBertForNextSentencePrediction"),Pvt.forEach(t),Tvr=r(sRe," (MobileBERT model)"),sRe.forEach(t),Mje.forEach(t),Mvr=i(yl),T(QT.$$.fragment,yl),yl.forEach(t),Al.forEach(t),uqe=i(f),fc=n(f,"H2",{class:!0});var Eje=s(fc);WT=n(Eje,"A",{id:!0,class:!0,href:!0});var Ivt=s(WT);l5e=n(Ivt,"SPAN",{});var qvt=s(l5e);T(Ax.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),Evr=i(Eje),i5e=n(Eje,"SPAN",{});var Nvt=s(i5e);Cvr=r(Nvt,"TFAutoModelForTableQuestionAnswering"),Nvt.forEach(t),Eje.forEach(t),_qe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(yx.$$.fragment,Ll),wvr=i(Ll),mc=n(Ll,"P",{});var MZ=s(mc);Avr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yH=n(MZ,"A",{href:!0});var jvt=s(yH);yvr=r(jvt,"from_pretrained()"),jvt.forEach(t),Lvr=r(MZ," class method or the "),LH=n(MZ,"A",{href:!0});var Dvt=s(LH);xvr=r(Dvt,"from_config()"),Dvt.forEach(t),$vr=r(MZ,` class
method.`),MZ.forEach(t),kvr=i(Ll),Lx=n(Ll,"P",{});var Cje=s(Lx);Svr=r(Cje,"This class cannot be instantiated directly using "),d5e=n(Cje,"CODE",{});var Gvt=s(d5e);Rvr=r(Gvt,"__init__()"),Gvt.forEach(t),Bvr=r(Cje," (throws an error)."),Cje.forEach(t),Pvr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var p0=s(Bt);T(xx.$$.fragment,p0),Ivr=i(p0),c5e=n(p0,"P",{});var Ovt=s(c5e);qvr=r(Ovt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ovt.forEach(t),Nvr=i(p0),gc=n(p0,"P",{});var EZ=s(gc);jvr=r(EZ,`Note:
Loading a model from its configuration file does `),f5e=n(EZ,"STRONG",{});var Vvt=s(f5e);Dvr=r(Vvt,"not"),Vvt.forEach(t),Gvr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(EZ,"A",{href:!0});var Xvt=s(xH);Ovr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Vvr=r(EZ," to load the model weights."),EZ.forEach(t),Xvr=i(p0),T(HT.$$.fragment,p0),p0.forEach(t),zvr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T($x.$$.fragment,xl),Qvr=i(xl),m5e=n(xl,"P",{});var zvt=s(m5e);Wvr=r(zvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zvt.forEach(t),Hvr=i(xl),dn=n(xl,"P",{});var u0=s(dn);Uvr=r(u0,"The model class to instantiate is selected based on the "),g5e=n(u0,"CODE",{});var Qvt=s(g5e);Jvr=r(Qvt,"model_type"),Qvt.forEach(t),Yvr=r(u0,` property of the config object (either
passed as an argument or loaded from `),h5e=n(u0,"CODE",{});var Wvt=s(h5e);Kvr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),Zvr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(u0,"CODE",{});var Hvt=s(p5e);eFr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),oFr=r(u0,":"),u0.forEach(t),rFr=i(xl),u5e=n(xl,"UL",{});var Uvt=s(u5e);UT=n(Uvt,"LI",{});var lRe=s(UT);_5e=n(lRe,"STRONG",{});var Jvt=s(_5e);tFr=r(Jvt,"tapas"),Jvt.forEach(t),aFr=r(lRe," \u2014 "),$H=n(lRe,"A",{href:!0});var Yvt=s($H);nFr=r(Yvt,"TFTapasForQuestionAnswering"),Yvt.forEach(t),sFr=r(lRe," (TAPAS model)"),lRe.forEach(t),Uvt.forEach(t),lFr=i(xl),T(JT.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),bqe=i(f),hc=n(f,"H2",{class:!0});var wje=s(hc);YT=n(wje,"A",{id:!0,class:!0,href:!0});var Kvt=s(YT);b5e=n(Kvt,"SPAN",{});var Zvt=s(b5e);T(kx.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),iFr=i(wje),v5e=n(wje,"SPAN",{});var eFt=s(v5e);dFr=r(eFt,"TFAutoModelForTokenClassification"),eFt.forEach(t),wje.forEach(t),vqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(Sx.$$.fragment,$l),cFr=i($l),pc=n($l,"P",{});var CZ=s(pc);fFr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kH=n(CZ,"A",{href:!0});var oFt=s(kH);mFr=r(oFt,"from_pretrained()"),oFt.forEach(t),gFr=r(CZ," class method or the "),SH=n(CZ,"A",{href:!0});var rFt=s(SH);hFr=r(rFt,"from_config()"),rFt.forEach(t),pFr=r(CZ,` class
method.`),CZ.forEach(t),uFr=i($l),Rx=n($l,"P",{});var Aje=s(Rx);_Fr=r(Aje,"This class cannot be instantiated directly using "),F5e=n(Aje,"CODE",{});var tFt=s(F5e);bFr=r(tFt,"__init__()"),tFt.forEach(t),vFr=r(Aje," (throws an error)."),Aje.forEach(t),FFr=i($l),Pt=n($l,"DIV",{class:!0});var _0=s(Pt);T(Bx.$$.fragment,_0),TFr=i(_0),T5e=n(_0,"P",{});var aFt=s(T5e);MFr=r(aFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aFt.forEach(t),EFr=i(_0),uc=n(_0,"P",{});var wZ=s(uc);CFr=r(wZ,`Note:
Loading a model from its configuration file does `),M5e=n(wZ,"STRONG",{});var nFt=s(M5e);wFr=r(nFt,"not"),nFt.forEach(t),AFr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(wZ,"A",{href:!0});var sFt=s(RH);yFr=r(sFt,"from_pretrained()"),sFt.forEach(t),LFr=r(wZ," to load the model weights."),wZ.forEach(t),xFr=i(_0),T(KT.$$.fragment,_0),_0.forEach(t),$Fr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(Px.$$.fragment,kl),kFr=i(kl),E5e=n(kl,"P",{});var lFt=s(E5e);SFr=r(lFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lFt.forEach(t),RFr=i(kl),cn=n(kl,"P",{});var b0=s(cn);BFr=r(b0,"The model class to instantiate is selected based on the "),C5e=n(b0,"CODE",{});var iFt=s(C5e);PFr=r(iFt,"model_type"),iFt.forEach(t),IFr=r(b0,` property of the config object (either
passed as an argument or loaded from `),w5e=n(b0,"CODE",{});var dFt=s(w5e);qFr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),NFr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(b0,"CODE",{});var cFt=s(A5e);jFr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),DFr=r(b0,":"),b0.forEach(t),GFr=i(kl),de=n(kl,"UL",{});var me=s(de);ZT=n(me,"LI",{});var iRe=s(ZT);y5e=n(iRe,"STRONG",{});var fFt=s(y5e);OFr=r(fFt,"albert"),fFt.forEach(t),VFr=r(iRe," \u2014 "),BH=n(iRe,"A",{href:!0});var mFt=s(BH);XFr=r(mFt,"TFAlbertForTokenClassification"),mFt.forEach(t),zFr=r(iRe," (ALBERT model)"),iRe.forEach(t),QFr=i(me),eM=n(me,"LI",{});var dRe=s(eM);L5e=n(dRe,"STRONG",{});var gFt=s(L5e);WFr=r(gFt,"bert"),gFt.forEach(t),HFr=r(dRe," \u2014 "),PH=n(dRe,"A",{href:!0});var hFt=s(PH);UFr=r(hFt,"TFBertForTokenClassification"),hFt.forEach(t),JFr=r(dRe," (BERT model)"),dRe.forEach(t),YFr=i(me),oM=n(me,"LI",{});var cRe=s(oM);x5e=n(cRe,"STRONG",{});var pFt=s(x5e);KFr=r(pFt,"camembert"),pFt.forEach(t),ZFr=r(cRe," \u2014 "),IH=n(cRe,"A",{href:!0});var uFt=s(IH);e6r=r(uFt,"TFCamembertForTokenClassification"),uFt.forEach(t),o6r=r(cRe," (CamemBERT model)"),cRe.forEach(t),r6r=i(me),rM=n(me,"LI",{});var fRe=s(rM);$5e=n(fRe,"STRONG",{});var _Ft=s($5e);t6r=r(_Ft,"convbert"),_Ft.forEach(t),a6r=r(fRe," \u2014 "),qH=n(fRe,"A",{href:!0});var bFt=s(qH);n6r=r(bFt,"TFConvBertForTokenClassification"),bFt.forEach(t),s6r=r(fRe," (ConvBERT model)"),fRe.forEach(t),l6r=i(me),tM=n(me,"LI",{});var mRe=s(tM);k5e=n(mRe,"STRONG",{});var vFt=s(k5e);i6r=r(vFt,"deberta"),vFt.forEach(t),d6r=r(mRe," \u2014 "),NH=n(mRe,"A",{href:!0});var FFt=s(NH);c6r=r(FFt,"TFDebertaForTokenClassification"),FFt.forEach(t),f6r=r(mRe," (DeBERTa model)"),mRe.forEach(t),m6r=i(me),aM=n(me,"LI",{});var gRe=s(aM);S5e=n(gRe,"STRONG",{});var TFt=s(S5e);g6r=r(TFt,"deberta-v2"),TFt.forEach(t),h6r=r(gRe," \u2014 "),jH=n(gRe,"A",{href:!0});var MFt=s(jH);p6r=r(MFt,"TFDebertaV2ForTokenClassification"),MFt.forEach(t),u6r=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),_6r=i(me),nM=n(me,"LI",{});var hRe=s(nM);R5e=n(hRe,"STRONG",{});var EFt=s(R5e);b6r=r(EFt,"distilbert"),EFt.forEach(t),v6r=r(hRe," \u2014 "),DH=n(hRe,"A",{href:!0});var CFt=s(DH);F6r=r(CFt,"TFDistilBertForTokenClassification"),CFt.forEach(t),T6r=r(hRe," (DistilBERT model)"),hRe.forEach(t),M6r=i(me),sM=n(me,"LI",{});var pRe=s(sM);B5e=n(pRe,"STRONG",{});var wFt=s(B5e);E6r=r(wFt,"electra"),wFt.forEach(t),C6r=r(pRe," \u2014 "),GH=n(pRe,"A",{href:!0});var AFt=s(GH);w6r=r(AFt,"TFElectraForTokenClassification"),AFt.forEach(t),A6r=r(pRe," (ELECTRA model)"),pRe.forEach(t),y6r=i(me),lM=n(me,"LI",{});var uRe=s(lM);P5e=n(uRe,"STRONG",{});var yFt=s(P5e);L6r=r(yFt,"flaubert"),yFt.forEach(t),x6r=r(uRe," \u2014 "),OH=n(uRe,"A",{href:!0});var LFt=s(OH);$6r=r(LFt,"TFFlaubertForTokenClassification"),LFt.forEach(t),k6r=r(uRe," (FlauBERT model)"),uRe.forEach(t),S6r=i(me),iM=n(me,"LI",{});var _Re=s(iM);I5e=n(_Re,"STRONG",{});var xFt=s(I5e);R6r=r(xFt,"funnel"),xFt.forEach(t),B6r=r(_Re," \u2014 "),VH=n(_Re,"A",{href:!0});var $Ft=s(VH);P6r=r($Ft,"TFFunnelForTokenClassification"),$Ft.forEach(t),I6r=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),q6r=i(me),dM=n(me,"LI",{});var bRe=s(dM);q5e=n(bRe,"STRONG",{});var kFt=s(q5e);N6r=r(kFt,"layoutlm"),kFt.forEach(t),j6r=r(bRe," \u2014 "),XH=n(bRe,"A",{href:!0});var SFt=s(XH);D6r=r(SFt,"TFLayoutLMForTokenClassification"),SFt.forEach(t),G6r=r(bRe," (LayoutLM model)"),bRe.forEach(t),O6r=i(me),cM=n(me,"LI",{});var vRe=s(cM);N5e=n(vRe,"STRONG",{});var RFt=s(N5e);V6r=r(RFt,"longformer"),RFt.forEach(t),X6r=r(vRe," \u2014 "),zH=n(vRe,"A",{href:!0});var BFt=s(zH);z6r=r(BFt,"TFLongformerForTokenClassification"),BFt.forEach(t),Q6r=r(vRe," (Longformer model)"),vRe.forEach(t),W6r=i(me),fM=n(me,"LI",{});var FRe=s(fM);j5e=n(FRe,"STRONG",{});var PFt=s(j5e);H6r=r(PFt,"mobilebert"),PFt.forEach(t),U6r=r(FRe," \u2014 "),QH=n(FRe,"A",{href:!0});var IFt=s(QH);J6r=r(IFt,"TFMobileBertForTokenClassification"),IFt.forEach(t),Y6r=r(FRe," (MobileBERT model)"),FRe.forEach(t),K6r=i(me),mM=n(me,"LI",{});var TRe=s(mM);D5e=n(TRe,"STRONG",{});var qFt=s(D5e);Z6r=r(qFt,"mpnet"),qFt.forEach(t),eTr=r(TRe," \u2014 "),WH=n(TRe,"A",{href:!0});var NFt=s(WH);oTr=r(NFt,"TFMPNetForTokenClassification"),NFt.forEach(t),rTr=r(TRe," (MPNet model)"),TRe.forEach(t),tTr=i(me),gM=n(me,"LI",{});var MRe=s(gM);G5e=n(MRe,"STRONG",{});var jFt=s(G5e);aTr=r(jFt,"rembert"),jFt.forEach(t),nTr=r(MRe," \u2014 "),HH=n(MRe,"A",{href:!0});var DFt=s(HH);sTr=r(DFt,"TFRemBertForTokenClassification"),DFt.forEach(t),lTr=r(MRe," (RemBERT model)"),MRe.forEach(t),iTr=i(me),hM=n(me,"LI",{});var ERe=s(hM);O5e=n(ERe,"STRONG",{});var GFt=s(O5e);dTr=r(GFt,"roberta"),GFt.forEach(t),cTr=r(ERe," \u2014 "),UH=n(ERe,"A",{href:!0});var OFt=s(UH);fTr=r(OFt,"TFRobertaForTokenClassification"),OFt.forEach(t),mTr=r(ERe," (RoBERTa model)"),ERe.forEach(t),gTr=i(me),pM=n(me,"LI",{});var CRe=s(pM);V5e=n(CRe,"STRONG",{});var VFt=s(V5e);hTr=r(VFt,"roformer"),VFt.forEach(t),pTr=r(CRe," \u2014 "),JH=n(CRe,"A",{href:!0});var XFt=s(JH);uTr=r(XFt,"TFRoFormerForTokenClassification"),XFt.forEach(t),_Tr=r(CRe," (RoFormer model)"),CRe.forEach(t),bTr=i(me),uM=n(me,"LI",{});var wRe=s(uM);X5e=n(wRe,"STRONG",{});var zFt=s(X5e);vTr=r(zFt,"xlm"),zFt.forEach(t),FTr=r(wRe," \u2014 "),YH=n(wRe,"A",{href:!0});var QFt=s(YH);TTr=r(QFt,"TFXLMForTokenClassification"),QFt.forEach(t),MTr=r(wRe," (XLM model)"),wRe.forEach(t),ETr=i(me),_M=n(me,"LI",{});var ARe=s(_M);z5e=n(ARe,"STRONG",{});var WFt=s(z5e);CTr=r(WFt,"xlm-roberta"),WFt.forEach(t),wTr=r(ARe," \u2014 "),KH=n(ARe,"A",{href:!0});var HFt=s(KH);ATr=r(HFt,"TFXLMRobertaForTokenClassification"),HFt.forEach(t),yTr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),LTr=i(me),bM=n(me,"LI",{});var yRe=s(bM);Q5e=n(yRe,"STRONG",{});var UFt=s(Q5e);xTr=r(UFt,"xlnet"),UFt.forEach(t),$Tr=r(yRe," \u2014 "),ZH=n(yRe,"A",{href:!0});var JFt=s(ZH);kTr=r(JFt,"TFXLNetForTokenClassification"),JFt.forEach(t),STr=r(yRe," (XLNet model)"),yRe.forEach(t),me.forEach(t),RTr=i(kl),T(vM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Fqe=i(f),_c=n(f,"H2",{class:!0});var yje=s(_c);FM=n(yje,"A",{id:!0,class:!0,href:!0});var YFt=s(FM);W5e=n(YFt,"SPAN",{});var KFt=s(W5e);T(Ix.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),BTr=i(yje),H5e=n(yje,"SPAN",{});var ZFt=s(H5e);PTr=r(ZFt,"TFAutoModelForQuestionAnswering"),ZFt.forEach(t),yje.forEach(t),Tqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(qx.$$.fragment,Sl),ITr=i(Sl),bc=n(Sl,"P",{});var AZ=s(bc);qTr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eU=n(AZ,"A",{href:!0});var e6t=s(eU);NTr=r(e6t,"from_pretrained()"),e6t.forEach(t),jTr=r(AZ," class method or the "),oU=n(AZ,"A",{href:!0});var o6t=s(oU);DTr=r(o6t,"from_config()"),o6t.forEach(t),GTr=r(AZ,` class
method.`),AZ.forEach(t),OTr=i(Sl),Nx=n(Sl,"P",{});var Lje=s(Nx);VTr=r(Lje,"This class cannot be instantiated directly using "),U5e=n(Lje,"CODE",{});var r6t=s(U5e);XTr=r(r6t,"__init__()"),r6t.forEach(t),zTr=r(Lje," (throws an error)."),Lje.forEach(t),QTr=i(Sl),It=n(Sl,"DIV",{class:!0});var v0=s(It);T(jx.$$.fragment,v0),WTr=i(v0),J5e=n(v0,"P",{});var t6t=s(J5e);HTr=r(t6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t6t.forEach(t),UTr=i(v0),vc=n(v0,"P",{});var yZ=s(vc);JTr=r(yZ,`Note:
Loading a model from its configuration file does `),Y5e=n(yZ,"STRONG",{});var a6t=s(Y5e);YTr=r(a6t,"not"),a6t.forEach(t),KTr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(yZ,"A",{href:!0});var n6t=s(rU);ZTr=r(n6t,"from_pretrained()"),n6t.forEach(t),eMr=r(yZ," to load the model weights."),yZ.forEach(t),oMr=i(v0),T(TM.$$.fragment,v0),v0.forEach(t),rMr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(Dx.$$.fragment,Rl),tMr=i(Rl),K5e=n(Rl,"P",{});var s6t=s(K5e);aMr=r(s6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s6t.forEach(t),nMr=i(Rl),fn=n(Rl,"P",{});var F0=s(fn);sMr=r(F0,"The model class to instantiate is selected based on the "),Z5e=n(F0,"CODE",{});var l6t=s(Z5e);lMr=r(l6t,"model_type"),l6t.forEach(t),iMr=r(F0,` property of the config object (either
passed as an argument or loaded from `),e3e=n(F0,"CODE",{});var i6t=s(e3e);dMr=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),cMr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(F0,"CODE",{});var d6t=s(o3e);fMr=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),mMr=r(F0,":"),F0.forEach(t),gMr=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);MM=n(ge,"LI",{});var LRe=s(MM);r3e=n(LRe,"STRONG",{});var c6t=s(r3e);hMr=r(c6t,"albert"),c6t.forEach(t),pMr=r(LRe," \u2014 "),tU=n(LRe,"A",{href:!0});var f6t=s(tU);uMr=r(f6t,"TFAlbertForQuestionAnswering"),f6t.forEach(t),_Mr=r(LRe," (ALBERT model)"),LRe.forEach(t),bMr=i(ge),EM=n(ge,"LI",{});var xRe=s(EM);t3e=n(xRe,"STRONG",{});var m6t=s(t3e);vMr=r(m6t,"bert"),m6t.forEach(t),FMr=r(xRe," \u2014 "),aU=n(xRe,"A",{href:!0});var g6t=s(aU);TMr=r(g6t,"TFBertForQuestionAnswering"),g6t.forEach(t),MMr=r(xRe," (BERT model)"),xRe.forEach(t),EMr=i(ge),CM=n(ge,"LI",{});var $Re=s(CM);a3e=n($Re,"STRONG",{});var h6t=s(a3e);CMr=r(h6t,"camembert"),h6t.forEach(t),wMr=r($Re," \u2014 "),nU=n($Re,"A",{href:!0});var p6t=s(nU);AMr=r(p6t,"TFCamembertForQuestionAnswering"),p6t.forEach(t),yMr=r($Re," (CamemBERT model)"),$Re.forEach(t),LMr=i(ge),wM=n(ge,"LI",{});var kRe=s(wM);n3e=n(kRe,"STRONG",{});var u6t=s(n3e);xMr=r(u6t,"convbert"),u6t.forEach(t),$Mr=r(kRe," \u2014 "),sU=n(kRe,"A",{href:!0});var _6t=s(sU);kMr=r(_6t,"TFConvBertForQuestionAnswering"),_6t.forEach(t),SMr=r(kRe," (ConvBERT model)"),kRe.forEach(t),RMr=i(ge),AM=n(ge,"LI",{});var SRe=s(AM);s3e=n(SRe,"STRONG",{});var b6t=s(s3e);BMr=r(b6t,"deberta"),b6t.forEach(t),PMr=r(SRe," \u2014 "),lU=n(SRe,"A",{href:!0});var v6t=s(lU);IMr=r(v6t,"TFDebertaForQuestionAnswering"),v6t.forEach(t),qMr=r(SRe," (DeBERTa model)"),SRe.forEach(t),NMr=i(ge),yM=n(ge,"LI",{});var RRe=s(yM);l3e=n(RRe,"STRONG",{});var F6t=s(l3e);jMr=r(F6t,"deberta-v2"),F6t.forEach(t),DMr=r(RRe," \u2014 "),iU=n(RRe,"A",{href:!0});var T6t=s(iU);GMr=r(T6t,"TFDebertaV2ForQuestionAnswering"),T6t.forEach(t),OMr=r(RRe," (DeBERTa-v2 model)"),RRe.forEach(t),VMr=i(ge),LM=n(ge,"LI",{});var BRe=s(LM);i3e=n(BRe,"STRONG",{});var M6t=s(i3e);XMr=r(M6t,"distilbert"),M6t.forEach(t),zMr=r(BRe," \u2014 "),dU=n(BRe,"A",{href:!0});var E6t=s(dU);QMr=r(E6t,"TFDistilBertForQuestionAnswering"),E6t.forEach(t),WMr=r(BRe," (DistilBERT model)"),BRe.forEach(t),HMr=i(ge),xM=n(ge,"LI",{});var PRe=s(xM);d3e=n(PRe,"STRONG",{});var C6t=s(d3e);UMr=r(C6t,"electra"),C6t.forEach(t),JMr=r(PRe," \u2014 "),cU=n(PRe,"A",{href:!0});var w6t=s(cU);YMr=r(w6t,"TFElectraForQuestionAnswering"),w6t.forEach(t),KMr=r(PRe," (ELECTRA model)"),PRe.forEach(t),ZMr=i(ge),$M=n(ge,"LI",{});var IRe=s($M);c3e=n(IRe,"STRONG",{});var A6t=s(c3e);eEr=r(A6t,"flaubert"),A6t.forEach(t),oEr=r(IRe," \u2014 "),fU=n(IRe,"A",{href:!0});var y6t=s(fU);rEr=r(y6t,"TFFlaubertForQuestionAnsweringSimple"),y6t.forEach(t),tEr=r(IRe," (FlauBERT model)"),IRe.forEach(t),aEr=i(ge),kM=n(ge,"LI",{});var qRe=s(kM);f3e=n(qRe,"STRONG",{});var L6t=s(f3e);nEr=r(L6t,"funnel"),L6t.forEach(t),sEr=r(qRe," \u2014 "),mU=n(qRe,"A",{href:!0});var x6t=s(mU);lEr=r(x6t,"TFFunnelForQuestionAnswering"),x6t.forEach(t),iEr=r(qRe," (Funnel Transformer model)"),qRe.forEach(t),dEr=i(ge),SM=n(ge,"LI",{});var NRe=s(SM);m3e=n(NRe,"STRONG",{});var $6t=s(m3e);cEr=r($6t,"gptj"),$6t.forEach(t),fEr=r(NRe," \u2014 "),gU=n(NRe,"A",{href:!0});var k6t=s(gU);mEr=r(k6t,"TFGPTJForQuestionAnswering"),k6t.forEach(t),gEr=r(NRe," (GPT-J model)"),NRe.forEach(t),hEr=i(ge),RM=n(ge,"LI",{});var jRe=s(RM);g3e=n(jRe,"STRONG",{});var S6t=s(g3e);pEr=r(S6t,"longformer"),S6t.forEach(t),uEr=r(jRe," \u2014 "),hU=n(jRe,"A",{href:!0});var R6t=s(hU);_Er=r(R6t,"TFLongformerForQuestionAnswering"),R6t.forEach(t),bEr=r(jRe," (Longformer model)"),jRe.forEach(t),vEr=i(ge),BM=n(ge,"LI",{});var DRe=s(BM);h3e=n(DRe,"STRONG",{});var B6t=s(h3e);FEr=r(B6t,"mobilebert"),B6t.forEach(t),TEr=r(DRe," \u2014 "),pU=n(DRe,"A",{href:!0});var P6t=s(pU);MEr=r(P6t,"TFMobileBertForQuestionAnswering"),P6t.forEach(t),EEr=r(DRe," (MobileBERT model)"),DRe.forEach(t),CEr=i(ge),PM=n(ge,"LI",{});var GRe=s(PM);p3e=n(GRe,"STRONG",{});var I6t=s(p3e);wEr=r(I6t,"mpnet"),I6t.forEach(t),AEr=r(GRe," \u2014 "),uU=n(GRe,"A",{href:!0});var q6t=s(uU);yEr=r(q6t,"TFMPNetForQuestionAnswering"),q6t.forEach(t),LEr=r(GRe," (MPNet model)"),GRe.forEach(t),xEr=i(ge),IM=n(ge,"LI",{});var ORe=s(IM);u3e=n(ORe,"STRONG",{});var N6t=s(u3e);$Er=r(N6t,"rembert"),N6t.forEach(t),kEr=r(ORe," \u2014 "),_U=n(ORe,"A",{href:!0});var j6t=s(_U);SEr=r(j6t,"TFRemBertForQuestionAnswering"),j6t.forEach(t),REr=r(ORe," (RemBERT model)"),ORe.forEach(t),BEr=i(ge),qM=n(ge,"LI",{});var VRe=s(qM);_3e=n(VRe,"STRONG",{});var D6t=s(_3e);PEr=r(D6t,"roberta"),D6t.forEach(t),IEr=r(VRe," \u2014 "),bU=n(VRe,"A",{href:!0});var G6t=s(bU);qEr=r(G6t,"TFRobertaForQuestionAnswering"),G6t.forEach(t),NEr=r(VRe," (RoBERTa model)"),VRe.forEach(t),jEr=i(ge),NM=n(ge,"LI",{});var XRe=s(NM);b3e=n(XRe,"STRONG",{});var O6t=s(b3e);DEr=r(O6t,"roformer"),O6t.forEach(t),GEr=r(XRe," \u2014 "),vU=n(XRe,"A",{href:!0});var V6t=s(vU);OEr=r(V6t,"TFRoFormerForQuestionAnswering"),V6t.forEach(t),VEr=r(XRe," (RoFormer model)"),XRe.forEach(t),XEr=i(ge),jM=n(ge,"LI",{});var zRe=s(jM);v3e=n(zRe,"STRONG",{});var X6t=s(v3e);zEr=r(X6t,"xlm"),X6t.forEach(t),QEr=r(zRe," \u2014 "),FU=n(zRe,"A",{href:!0});var z6t=s(FU);WEr=r(z6t,"TFXLMForQuestionAnsweringSimple"),z6t.forEach(t),HEr=r(zRe," (XLM model)"),zRe.forEach(t),UEr=i(ge),DM=n(ge,"LI",{});var QRe=s(DM);F3e=n(QRe,"STRONG",{});var Q6t=s(F3e);JEr=r(Q6t,"xlm-roberta"),Q6t.forEach(t),YEr=r(QRe," \u2014 "),TU=n(QRe,"A",{href:!0});var W6t=s(TU);KEr=r(W6t,"TFXLMRobertaForQuestionAnswering"),W6t.forEach(t),ZEr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),eCr=i(ge),GM=n(ge,"LI",{});var WRe=s(GM);T3e=n(WRe,"STRONG",{});var H6t=s(T3e);oCr=r(H6t,"xlnet"),H6t.forEach(t),rCr=r(WRe," \u2014 "),MU=n(WRe,"A",{href:!0});var U6t=s(MU);tCr=r(U6t,"TFXLNetForQuestionAnsweringSimple"),U6t.forEach(t),aCr=r(WRe," (XLNet model)"),WRe.forEach(t),ge.forEach(t),nCr=i(Rl),T(OM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Mqe=i(f),Fc=n(f,"H2",{class:!0});var xje=s(Fc);VM=n(xje,"A",{id:!0,class:!0,href:!0});var J6t=s(VM);M3e=n(J6t,"SPAN",{});var Y6t=s(M3e);T(Gx.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),sCr=i(xje),E3e=n(xje,"SPAN",{});var K6t=s(E3e);lCr=r(K6t,"TFAutoModelForVision2Seq"),K6t.forEach(t),xje.forEach(t),Eqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(Ox.$$.fragment,Bl),iCr=i(Bl),Tc=n(Bl,"P",{});var LZ=s(Tc);dCr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EU=n(LZ,"A",{href:!0});var Z6t=s(EU);cCr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),fCr=r(LZ," class method or the "),CU=n(LZ,"A",{href:!0});var eTt=s(CU);mCr=r(eTt,"from_config()"),eTt.forEach(t),gCr=r(LZ,` class
method.`),LZ.forEach(t),hCr=i(Bl),Vx=n(Bl,"P",{});var $je=s(Vx);pCr=r($je,"This class cannot be instantiated directly using "),C3e=n($je,"CODE",{});var oTt=s(C3e);uCr=r(oTt,"__init__()"),oTt.forEach(t),_Cr=r($je," (throws an error)."),$je.forEach(t),bCr=i(Bl),qt=n(Bl,"DIV",{class:!0});var T0=s(qt);T(Xx.$$.fragment,T0),vCr=i(T0),w3e=n(T0,"P",{});var rTt=s(w3e);FCr=r(rTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rTt.forEach(t),TCr=i(T0),Mc=n(T0,"P",{});var xZ=s(Mc);MCr=r(xZ,`Note:
Loading a model from its configuration file does `),A3e=n(xZ,"STRONG",{});var tTt=s(A3e);ECr=r(tTt,"not"),tTt.forEach(t),CCr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(xZ,"A",{href:!0});var aTt=s(wU);wCr=r(aTt,"from_pretrained()"),aTt.forEach(t),ACr=r(xZ," to load the model weights."),xZ.forEach(t),yCr=i(T0),T(XM.$$.fragment,T0),T0.forEach(t),LCr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(zx.$$.fragment,Pl),xCr=i(Pl),y3e=n(Pl,"P",{});var nTt=s(y3e);$Cr=r(nTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nTt.forEach(t),kCr=i(Pl),mn=n(Pl,"P",{});var M0=s(mn);SCr=r(M0,"The model class to instantiate is selected based on the "),L3e=n(M0,"CODE",{});var sTt=s(L3e);RCr=r(sTt,"model_type"),sTt.forEach(t),BCr=r(M0,` property of the config object (either
passed as an argument or loaded from `),x3e=n(M0,"CODE",{});var lTt=s(x3e);PCr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),ICr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(M0,"CODE",{});var iTt=s($3e);qCr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),NCr=r(M0,":"),M0.forEach(t),jCr=i(Pl),k3e=n(Pl,"UL",{});var dTt=s(k3e);zM=n(dTt,"LI",{});var HRe=s(zM);S3e=n(HRe,"STRONG",{});var cTt=s(S3e);DCr=r(cTt,"vision-encoder-decoder"),cTt.forEach(t),GCr=r(HRe," \u2014 "),AU=n(HRe,"A",{href:!0});var fTt=s(AU);OCr=r(fTt,"TFVisionEncoderDecoderModel"),fTt.forEach(t),VCr=r(HRe," (Vision Encoder decoder model)"),HRe.forEach(t),dTt.forEach(t),XCr=i(Pl),T(QM.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),Cqe=i(f),Ec=n(f,"H2",{class:!0});var kje=s(Ec);WM=n(kje,"A",{id:!0,class:!0,href:!0});var mTt=s(WM);R3e=n(mTt,"SPAN",{});var gTt=s(R3e);T(Qx.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),zCr=i(kje),B3e=n(kje,"SPAN",{});var hTt=s(B3e);QCr=r(hTt,"TFAutoModelForSpeechSeq2Seq"),hTt.forEach(t),kje.forEach(t),wqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(Wx.$$.fragment,Il),WCr=i(Il),Cc=n(Il,"P",{});var $Z=s(Cc);HCr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yU=n($Z,"A",{href:!0});var pTt=s(yU);UCr=r(pTt,"from_pretrained()"),pTt.forEach(t),JCr=r($Z," class method or the "),LU=n($Z,"A",{href:!0});var uTt=s(LU);YCr=r(uTt,"from_config()"),uTt.forEach(t),KCr=r($Z,` class
method.`),$Z.forEach(t),ZCr=i(Il),Hx=n(Il,"P",{});var Sje=s(Hx);ewr=r(Sje,"This class cannot be instantiated directly using "),P3e=n(Sje,"CODE",{});var _Tt=s(P3e);owr=r(_Tt,"__init__()"),_Tt.forEach(t),rwr=r(Sje," (throws an error)."),Sje.forEach(t),twr=i(Il),Nt=n(Il,"DIV",{class:!0});var E0=s(Nt);T(Ux.$$.fragment,E0),awr=i(E0),I3e=n(E0,"P",{});var bTt=s(I3e);nwr=r(bTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bTt.forEach(t),swr=i(E0),wc=n(E0,"P",{});var kZ=s(wc);lwr=r(kZ,`Note:
Loading a model from its configuration file does `),q3e=n(kZ,"STRONG",{});var vTt=s(q3e);iwr=r(vTt,"not"),vTt.forEach(t),dwr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(kZ,"A",{href:!0});var FTt=s(xU);cwr=r(FTt,"from_pretrained()"),FTt.forEach(t),fwr=r(kZ," to load the model weights."),kZ.forEach(t),mwr=i(E0),T(HM.$$.fragment,E0),E0.forEach(t),gwr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(Jx.$$.fragment,ql),hwr=i(ql),N3e=n(ql,"P",{});var TTt=s(N3e);pwr=r(TTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TTt.forEach(t),uwr=i(ql),gn=n(ql,"P",{});var C0=s(gn);_wr=r(C0,"The model class to instantiate is selected based on the "),j3e=n(C0,"CODE",{});var MTt=s(j3e);bwr=r(MTt,"model_type"),MTt.forEach(t),vwr=r(C0,` property of the config object (either
passed as an argument or loaded from `),D3e=n(C0,"CODE",{});var ETt=s(D3e);Fwr=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),Twr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(C0,"CODE",{});var CTt=s(G3e);Mwr=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),Ewr=r(C0,":"),C0.forEach(t),Cwr=i(ql),O3e=n(ql,"UL",{});var wTt=s(O3e);UM=n(wTt,"LI",{});var URe=s(UM);V3e=n(URe,"STRONG",{});var ATt=s(V3e);wwr=r(ATt,"speech_to_text"),ATt.forEach(t),Awr=r(URe," \u2014 "),$U=n(URe,"A",{href:!0});var yTt=s($U);ywr=r(yTt,"TFSpeech2TextForConditionalGeneration"),yTt.forEach(t),Lwr=r(URe," (Speech2Text model)"),URe.forEach(t),wTt.forEach(t),xwr=i(ql),T(JM.$$.fragment,ql),ql.forEach(t),Il.forEach(t),Aqe=i(f),Ac=n(f,"H2",{class:!0});var Rje=s(Ac);YM=n(Rje,"A",{id:!0,class:!0,href:!0});var LTt=s(YM);X3e=n(LTt,"SPAN",{});var xTt=s(X3e);T(Yx.$$.fragment,xTt),xTt.forEach(t),LTt.forEach(t),$wr=i(Rje),z3e=n(Rje,"SPAN",{});var $Tt=s(z3e);kwr=r($Tt,"FlaxAutoModel"),$Tt.forEach(t),Rje.forEach(t),yqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(Kx.$$.fragment,Nl),Swr=i(Nl),yc=n(Nl,"P",{});var SZ=s(yc);Rwr=r(SZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kU=n(SZ,"A",{href:!0});var kTt=s(kU);Bwr=r(kTt,"from_pretrained()"),kTt.forEach(t),Pwr=r(SZ," class method or the "),SU=n(SZ,"A",{href:!0});var STt=s(SU);Iwr=r(STt,"from_config()"),STt.forEach(t),qwr=r(SZ,` class
method.`),SZ.forEach(t),Nwr=i(Nl),Zx=n(Nl,"P",{});var Bje=s(Zx);jwr=r(Bje,"This class cannot be instantiated directly using "),Q3e=n(Bje,"CODE",{});var RTt=s(Q3e);Dwr=r(RTt,"__init__()"),RTt.forEach(t),Gwr=r(Bje," (throws an error)."),Bje.forEach(t),Owr=i(Nl),jt=n(Nl,"DIV",{class:!0});var w0=s(jt);T(e7.$$.fragment,w0),Vwr=i(w0),W3e=n(w0,"P",{});var BTt=s(W3e);Xwr=r(BTt,"Instantiates one of the base model classes of the library from a configuration."),BTt.forEach(t),zwr=i(w0),Lc=n(w0,"P",{});var RZ=s(Lc);Qwr=r(RZ,`Note:
Loading a model from its configuration file does `),H3e=n(RZ,"STRONG",{});var PTt=s(H3e);Wwr=r(PTt,"not"),PTt.forEach(t),Hwr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(RZ,"A",{href:!0});var ITt=s(RU);Uwr=r(ITt,"from_pretrained()"),ITt.forEach(t),Jwr=r(RZ," to load the model weights."),RZ.forEach(t),Ywr=i(w0),T(KM.$$.fragment,w0),w0.forEach(t),Kwr=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(o7.$$.fragment,jl),Zwr=i(jl),U3e=n(jl,"P",{});var qTt=s(U3e);eAr=r(qTt,"Instantiate one of the base model classes of the library from a pretrained model."),qTt.forEach(t),oAr=i(jl),hn=n(jl,"P",{});var A0=s(hn);rAr=r(A0,"The model class to instantiate is selected based on the "),J3e=n(A0,"CODE",{});var NTt=s(J3e);tAr=r(NTt,"model_type"),NTt.forEach(t),aAr=r(A0,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(A0,"CODE",{});var jTt=s(Y3e);nAr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),sAr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(A0,"CODE",{});var DTt=s(K3e);lAr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),iAr=r(A0,":"),A0.forEach(t),dAr=i(jl),re=n(jl,"UL",{});var ne=s(re);ZM=n(ne,"LI",{});var JRe=s(ZM);Z3e=n(JRe,"STRONG",{});var GTt=s(Z3e);cAr=r(GTt,"albert"),GTt.forEach(t),fAr=r(JRe," \u2014 "),BU=n(JRe,"A",{href:!0});var OTt=s(BU);mAr=r(OTt,"FlaxAlbertModel"),OTt.forEach(t),gAr=r(JRe," (ALBERT model)"),JRe.forEach(t),hAr=i(ne),eE=n(ne,"LI",{});var YRe=s(eE);eve=n(YRe,"STRONG",{});var VTt=s(eve);pAr=r(VTt,"bart"),VTt.forEach(t),uAr=r(YRe," \u2014 "),PU=n(YRe,"A",{href:!0});var XTt=s(PU);_Ar=r(XTt,"FlaxBartModel"),XTt.forEach(t),bAr=r(YRe," (BART model)"),YRe.forEach(t),vAr=i(ne),oE=n(ne,"LI",{});var KRe=s(oE);ove=n(KRe,"STRONG",{});var zTt=s(ove);FAr=r(zTt,"beit"),zTt.forEach(t),TAr=r(KRe," \u2014 "),IU=n(KRe,"A",{href:!0});var QTt=s(IU);MAr=r(QTt,"FlaxBeitModel"),QTt.forEach(t),EAr=r(KRe," (BEiT model)"),KRe.forEach(t),CAr=i(ne),rE=n(ne,"LI",{});var ZRe=s(rE);rve=n(ZRe,"STRONG",{});var WTt=s(rve);wAr=r(WTt,"bert"),WTt.forEach(t),AAr=r(ZRe," \u2014 "),qU=n(ZRe,"A",{href:!0});var HTt=s(qU);yAr=r(HTt,"FlaxBertModel"),HTt.forEach(t),LAr=r(ZRe," (BERT model)"),ZRe.forEach(t),xAr=i(ne),tE=n(ne,"LI",{});var eBe=s(tE);tve=n(eBe,"STRONG",{});var UTt=s(tve);$Ar=r(UTt,"big_bird"),UTt.forEach(t),kAr=r(eBe," \u2014 "),NU=n(eBe,"A",{href:!0});var JTt=s(NU);SAr=r(JTt,"FlaxBigBirdModel"),JTt.forEach(t),RAr=r(eBe," (BigBird model)"),eBe.forEach(t),BAr=i(ne),aE=n(ne,"LI",{});var oBe=s(aE);ave=n(oBe,"STRONG",{});var YTt=s(ave);PAr=r(YTt,"blenderbot"),YTt.forEach(t),IAr=r(oBe," \u2014 "),jU=n(oBe,"A",{href:!0});var KTt=s(jU);qAr=r(KTt,"FlaxBlenderbotModel"),KTt.forEach(t),NAr=r(oBe," (Blenderbot model)"),oBe.forEach(t),jAr=i(ne),nE=n(ne,"LI",{});var rBe=s(nE);nve=n(rBe,"STRONG",{});var ZTt=s(nve);DAr=r(ZTt,"blenderbot-small"),ZTt.forEach(t),GAr=r(rBe," \u2014 "),DU=n(rBe,"A",{href:!0});var eMt=s(DU);OAr=r(eMt,"FlaxBlenderbotSmallModel"),eMt.forEach(t),VAr=r(rBe," (BlenderbotSmall model)"),rBe.forEach(t),XAr=i(ne),sE=n(ne,"LI",{});var tBe=s(sE);sve=n(tBe,"STRONG",{});var oMt=s(sve);zAr=r(oMt,"clip"),oMt.forEach(t),QAr=r(tBe," \u2014 "),GU=n(tBe,"A",{href:!0});var rMt=s(GU);WAr=r(rMt,"FlaxCLIPModel"),rMt.forEach(t),HAr=r(tBe," (CLIP model)"),tBe.forEach(t),UAr=i(ne),lE=n(ne,"LI",{});var aBe=s(lE);lve=n(aBe,"STRONG",{});var tMt=s(lve);JAr=r(tMt,"distilbert"),tMt.forEach(t),YAr=r(aBe," \u2014 "),OU=n(aBe,"A",{href:!0});var aMt=s(OU);KAr=r(aMt,"FlaxDistilBertModel"),aMt.forEach(t),ZAr=r(aBe," (DistilBERT model)"),aBe.forEach(t),e0r=i(ne),iE=n(ne,"LI",{});var nBe=s(iE);ive=n(nBe,"STRONG",{});var nMt=s(ive);o0r=r(nMt,"electra"),nMt.forEach(t),r0r=r(nBe," \u2014 "),VU=n(nBe,"A",{href:!0});var sMt=s(VU);t0r=r(sMt,"FlaxElectraModel"),sMt.forEach(t),a0r=r(nBe," (ELECTRA model)"),nBe.forEach(t),n0r=i(ne),dE=n(ne,"LI",{});var sBe=s(dE);dve=n(sBe,"STRONG",{});var lMt=s(dve);s0r=r(lMt,"gpt2"),lMt.forEach(t),l0r=r(sBe," \u2014 "),XU=n(sBe,"A",{href:!0});var iMt=s(XU);i0r=r(iMt,"FlaxGPT2Model"),iMt.forEach(t),d0r=r(sBe," (OpenAI GPT-2 model)"),sBe.forEach(t),c0r=i(ne),cE=n(ne,"LI",{});var lBe=s(cE);cve=n(lBe,"STRONG",{});var dMt=s(cve);f0r=r(dMt,"gpt_neo"),dMt.forEach(t),m0r=r(lBe," \u2014 "),zU=n(lBe,"A",{href:!0});var cMt=s(zU);g0r=r(cMt,"FlaxGPTNeoModel"),cMt.forEach(t),h0r=r(lBe," (GPT Neo model)"),lBe.forEach(t),p0r=i(ne),fE=n(ne,"LI",{});var iBe=s(fE);fve=n(iBe,"STRONG",{});var fMt=s(fve);u0r=r(fMt,"gptj"),fMt.forEach(t),_0r=r(iBe," \u2014 "),QU=n(iBe,"A",{href:!0});var mMt=s(QU);b0r=r(mMt,"FlaxGPTJModel"),mMt.forEach(t),v0r=r(iBe," (GPT-J model)"),iBe.forEach(t),F0r=i(ne),mE=n(ne,"LI",{});var dBe=s(mE);mve=n(dBe,"STRONG",{});var gMt=s(mve);T0r=r(gMt,"marian"),gMt.forEach(t),M0r=r(dBe," \u2014 "),WU=n(dBe,"A",{href:!0});var hMt=s(WU);E0r=r(hMt,"FlaxMarianModel"),hMt.forEach(t),C0r=r(dBe," (Marian model)"),dBe.forEach(t),w0r=i(ne),gE=n(ne,"LI",{});var cBe=s(gE);gve=n(cBe,"STRONG",{});var pMt=s(gve);A0r=r(pMt,"mbart"),pMt.forEach(t),y0r=r(cBe," \u2014 "),HU=n(cBe,"A",{href:!0});var uMt=s(HU);L0r=r(uMt,"FlaxMBartModel"),uMt.forEach(t),x0r=r(cBe," (mBART model)"),cBe.forEach(t),$0r=i(ne),hE=n(ne,"LI",{});var fBe=s(hE);hve=n(fBe,"STRONG",{});var _Mt=s(hve);k0r=r(_Mt,"mt5"),_Mt.forEach(t),S0r=r(fBe," \u2014 "),UU=n(fBe,"A",{href:!0});var bMt=s(UU);R0r=r(bMt,"FlaxMT5Model"),bMt.forEach(t),B0r=r(fBe," (mT5 model)"),fBe.forEach(t),P0r=i(ne),pE=n(ne,"LI",{});var mBe=s(pE);pve=n(mBe,"STRONG",{});var vMt=s(pve);I0r=r(vMt,"pegasus"),vMt.forEach(t),q0r=r(mBe," \u2014 "),JU=n(mBe,"A",{href:!0});var FMt=s(JU);N0r=r(FMt,"FlaxPegasusModel"),FMt.forEach(t),j0r=r(mBe," (Pegasus model)"),mBe.forEach(t),D0r=i(ne),uE=n(ne,"LI",{});var gBe=s(uE);uve=n(gBe,"STRONG",{});var TMt=s(uve);G0r=r(TMt,"roberta"),TMt.forEach(t),O0r=r(gBe," \u2014 "),YU=n(gBe,"A",{href:!0});var MMt=s(YU);V0r=r(MMt,"FlaxRobertaModel"),MMt.forEach(t),X0r=r(gBe," (RoBERTa model)"),gBe.forEach(t),z0r=i(ne),_E=n(ne,"LI",{});var hBe=s(_E);_ve=n(hBe,"STRONG",{});var EMt=s(_ve);Q0r=r(EMt,"roformer"),EMt.forEach(t),W0r=r(hBe," \u2014 "),KU=n(hBe,"A",{href:!0});var CMt=s(KU);H0r=r(CMt,"FlaxRoFormerModel"),CMt.forEach(t),U0r=r(hBe," (RoFormer model)"),hBe.forEach(t),J0r=i(ne),bE=n(ne,"LI",{});var pBe=s(bE);bve=n(pBe,"STRONG",{});var wMt=s(bve);Y0r=r(wMt,"t5"),wMt.forEach(t),K0r=r(pBe," \u2014 "),ZU=n(pBe,"A",{href:!0});var AMt=s(ZU);Z0r=r(AMt,"FlaxT5Model"),AMt.forEach(t),eyr=r(pBe," (T5 model)"),pBe.forEach(t),oyr=i(ne),vE=n(ne,"LI",{});var uBe=s(vE);vve=n(uBe,"STRONG",{});var yMt=s(vve);ryr=r(yMt,"vision-text-dual-encoder"),yMt.forEach(t),tyr=r(uBe," \u2014 "),eJ=n(uBe,"A",{href:!0});var LMt=s(eJ);ayr=r(LMt,"FlaxVisionTextDualEncoderModel"),LMt.forEach(t),nyr=r(uBe," (VisionTextDualEncoder model)"),uBe.forEach(t),syr=i(ne),FE=n(ne,"LI",{});var _Be=s(FE);Fve=n(_Be,"STRONG",{});var xMt=s(Fve);lyr=r(xMt,"vit"),xMt.forEach(t),iyr=r(_Be," \u2014 "),oJ=n(_Be,"A",{href:!0});var $Mt=s(oJ);dyr=r($Mt,"FlaxViTModel"),$Mt.forEach(t),cyr=r(_Be," (ViT model)"),_Be.forEach(t),fyr=i(ne),TE=n(ne,"LI",{});var bBe=s(TE);Tve=n(bBe,"STRONG",{});var kMt=s(Tve);myr=r(kMt,"wav2vec2"),kMt.forEach(t),gyr=r(bBe," \u2014 "),rJ=n(bBe,"A",{href:!0});var SMt=s(rJ);hyr=r(SMt,"FlaxWav2Vec2Model"),SMt.forEach(t),pyr=r(bBe," (Wav2Vec2 model)"),bBe.forEach(t),uyr=i(ne),ME=n(ne,"LI",{});var vBe=s(ME);Mve=n(vBe,"STRONG",{});var RMt=s(Mve);_yr=r(RMt,"xglm"),RMt.forEach(t),byr=r(vBe," \u2014 "),tJ=n(vBe,"A",{href:!0});var BMt=s(tJ);vyr=r(BMt,"FlaxXGLMModel"),BMt.forEach(t),Fyr=r(vBe," (XGLM model)"),vBe.forEach(t),Tyr=i(ne),EE=n(ne,"LI",{});var FBe=s(EE);Eve=n(FBe,"STRONG",{});var PMt=s(Eve);Myr=r(PMt,"xlm-roberta"),PMt.forEach(t),Eyr=r(FBe," \u2014 "),aJ=n(FBe,"A",{href:!0});var IMt=s(aJ);Cyr=r(IMt,"FlaxXLMRobertaModel"),IMt.forEach(t),wyr=r(FBe," (XLM-RoBERTa model)"),FBe.forEach(t),ne.forEach(t),Ayr=i(jl),T(CE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Lqe=i(f),xc=n(f,"H2",{class:!0});var Pje=s(xc);wE=n(Pje,"A",{id:!0,class:!0,href:!0});var qMt=s(wE);Cve=n(qMt,"SPAN",{});var NMt=s(Cve);T(r7.$$.fragment,NMt),NMt.forEach(t),qMt.forEach(t),yyr=i(Pje),wve=n(Pje,"SPAN",{});var jMt=s(wve);Lyr=r(jMt,"FlaxAutoModelForCausalLM"),jMt.forEach(t),Pje.forEach(t),xqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(t7.$$.fragment,Dl),xyr=i(Dl),$c=n(Dl,"P",{});var BZ=s($c);$yr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nJ=n(BZ,"A",{href:!0});var DMt=s(nJ);kyr=r(DMt,"from_pretrained()"),DMt.forEach(t),Syr=r(BZ," class method or the "),sJ=n(BZ,"A",{href:!0});var GMt=s(sJ);Ryr=r(GMt,"from_config()"),GMt.forEach(t),Byr=r(BZ,` class
method.`),BZ.forEach(t),Pyr=i(Dl),a7=n(Dl,"P",{});var Ije=s(a7);Iyr=r(Ije,"This class cannot be instantiated directly using "),Ave=n(Ije,"CODE",{});var OMt=s(Ave);qyr=r(OMt,"__init__()"),OMt.forEach(t),Nyr=r(Ije," (throws an error)."),Ije.forEach(t),jyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var y0=s(Dt);T(n7.$$.fragment,y0),Dyr=i(y0),yve=n(y0,"P",{});var VMt=s(yve);Gyr=r(VMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VMt.forEach(t),Oyr=i(y0),kc=n(y0,"P",{});var PZ=s(kc);Vyr=r(PZ,`Note:
Loading a model from its configuration file does `),Lve=n(PZ,"STRONG",{});var XMt=s(Lve);Xyr=r(XMt,"not"),XMt.forEach(t),zyr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(PZ,"A",{href:!0});var zMt=s(lJ);Qyr=r(zMt,"from_pretrained()"),zMt.forEach(t),Wyr=r(PZ," to load the model weights."),PZ.forEach(t),Hyr=i(y0),T(AE.$$.fragment,y0),y0.forEach(t),Uyr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(s7.$$.fragment,Gl),Jyr=i(Gl),xve=n(Gl,"P",{});var QMt=s(xve);Yyr=r(QMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QMt.forEach(t),Kyr=i(Gl),pn=n(Gl,"P",{});var L0=s(pn);Zyr=r(L0,"The model class to instantiate is selected based on the "),$ve=n(L0,"CODE",{});var WMt=s($ve);eLr=r(WMt,"model_type"),WMt.forEach(t),oLr=r(L0,` property of the config object (either
passed as an argument or loaded from `),kve=n(L0,"CODE",{});var HMt=s(kve);rLr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),tLr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(L0,"CODE",{});var UMt=s(Sve);aLr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),nLr=r(L0,":"),L0.forEach(t),sLr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);yE=n(Oe,"LI",{});var TBe=s(yE);Rve=n(TBe,"STRONG",{});var JMt=s(Rve);lLr=r(JMt,"bart"),JMt.forEach(t),iLr=r(TBe," \u2014 "),iJ=n(TBe,"A",{href:!0});var YMt=s(iJ);dLr=r(YMt,"FlaxBartForCausalLM"),YMt.forEach(t),cLr=r(TBe," (BART model)"),TBe.forEach(t),fLr=i(Oe),LE=n(Oe,"LI",{});var MBe=s(LE);Bve=n(MBe,"STRONG",{});var KMt=s(Bve);mLr=r(KMt,"bert"),KMt.forEach(t),gLr=r(MBe," \u2014 "),dJ=n(MBe,"A",{href:!0});var ZMt=s(dJ);hLr=r(ZMt,"FlaxBertForCausalLM"),ZMt.forEach(t),pLr=r(MBe," (BERT model)"),MBe.forEach(t),uLr=i(Oe),xE=n(Oe,"LI",{});var EBe=s(xE);Pve=n(EBe,"STRONG",{});var eEt=s(Pve);_Lr=r(eEt,"big_bird"),eEt.forEach(t),bLr=r(EBe," \u2014 "),cJ=n(EBe,"A",{href:!0});var oEt=s(cJ);vLr=r(oEt,"FlaxBigBirdForCausalLM"),oEt.forEach(t),FLr=r(EBe," (BigBird model)"),EBe.forEach(t),TLr=i(Oe),$E=n(Oe,"LI",{});var CBe=s($E);Ive=n(CBe,"STRONG",{});var rEt=s(Ive);MLr=r(rEt,"electra"),rEt.forEach(t),ELr=r(CBe," \u2014 "),fJ=n(CBe,"A",{href:!0});var tEt=s(fJ);CLr=r(tEt,"FlaxElectraForCausalLM"),tEt.forEach(t),wLr=r(CBe," (ELECTRA model)"),CBe.forEach(t),ALr=i(Oe),kE=n(Oe,"LI",{});var wBe=s(kE);qve=n(wBe,"STRONG",{});var aEt=s(qve);yLr=r(aEt,"gpt2"),aEt.forEach(t),LLr=r(wBe," \u2014 "),mJ=n(wBe,"A",{href:!0});var nEt=s(mJ);xLr=r(nEt,"FlaxGPT2LMHeadModel"),nEt.forEach(t),$Lr=r(wBe," (OpenAI GPT-2 model)"),wBe.forEach(t),kLr=i(Oe),SE=n(Oe,"LI",{});var ABe=s(SE);Nve=n(ABe,"STRONG",{});var sEt=s(Nve);SLr=r(sEt,"gpt_neo"),sEt.forEach(t),RLr=r(ABe," \u2014 "),gJ=n(ABe,"A",{href:!0});var lEt=s(gJ);BLr=r(lEt,"FlaxGPTNeoForCausalLM"),lEt.forEach(t),PLr=r(ABe," (GPT Neo model)"),ABe.forEach(t),ILr=i(Oe),RE=n(Oe,"LI",{});var yBe=s(RE);jve=n(yBe,"STRONG",{});var iEt=s(jve);qLr=r(iEt,"gptj"),iEt.forEach(t),NLr=r(yBe," \u2014 "),hJ=n(yBe,"A",{href:!0});var dEt=s(hJ);jLr=r(dEt,"FlaxGPTJForCausalLM"),dEt.forEach(t),DLr=r(yBe," (GPT-J model)"),yBe.forEach(t),GLr=i(Oe),BE=n(Oe,"LI",{});var LBe=s(BE);Dve=n(LBe,"STRONG",{});var cEt=s(Dve);OLr=r(cEt,"roberta"),cEt.forEach(t),VLr=r(LBe," \u2014 "),pJ=n(LBe,"A",{href:!0});var fEt=s(pJ);XLr=r(fEt,"FlaxRobertaForCausalLM"),fEt.forEach(t),zLr=r(LBe," (RoBERTa model)"),LBe.forEach(t),QLr=i(Oe),PE=n(Oe,"LI",{});var xBe=s(PE);Gve=n(xBe,"STRONG",{});var mEt=s(Gve);WLr=r(mEt,"xglm"),mEt.forEach(t),HLr=r(xBe," \u2014 "),uJ=n(xBe,"A",{href:!0});var gEt=s(uJ);ULr=r(gEt,"FlaxXGLMForCausalLM"),gEt.forEach(t),JLr=r(xBe," (XGLM model)"),xBe.forEach(t),Oe.forEach(t),YLr=i(Gl),T(IE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),$qe=i(f),Sc=n(f,"H2",{class:!0});var qje=s(Sc);qE=n(qje,"A",{id:!0,class:!0,href:!0});var hEt=s(qE);Ove=n(hEt,"SPAN",{});var pEt=s(Ove);T(l7.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),KLr=i(qje),Vve=n(qje,"SPAN",{});var uEt=s(Vve);ZLr=r(uEt,"FlaxAutoModelForPreTraining"),uEt.forEach(t),qje.forEach(t),kqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(i7.$$.fragment,Ol),e8r=i(Ol),Rc=n(Ol,"P",{});var IZ=s(Rc);o8r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_J=n(IZ,"A",{href:!0});var _Et=s(_J);r8r=r(_Et,"from_pretrained()"),_Et.forEach(t),t8r=r(IZ," class method or the "),bJ=n(IZ,"A",{href:!0});var bEt=s(bJ);a8r=r(bEt,"from_config()"),bEt.forEach(t),n8r=r(IZ,` class
method.`),IZ.forEach(t),s8r=i(Ol),d7=n(Ol,"P",{});var Nje=s(d7);l8r=r(Nje,"This class cannot be instantiated directly using "),Xve=n(Nje,"CODE",{});var vEt=s(Xve);i8r=r(vEt,"__init__()"),vEt.forEach(t),d8r=r(Nje," (throws an error)."),Nje.forEach(t),c8r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var x0=s(Gt);T(c7.$$.fragment,x0),f8r=i(x0),zve=n(x0,"P",{});var FEt=s(zve);m8r=r(FEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FEt.forEach(t),g8r=i(x0),Bc=n(x0,"P",{});var qZ=s(Bc);h8r=r(qZ,`Note:
Loading a model from its configuration file does `),Qve=n(qZ,"STRONG",{});var TEt=s(Qve);p8r=r(TEt,"not"),TEt.forEach(t),u8r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(qZ,"A",{href:!0});var MEt=s(vJ);_8r=r(MEt,"from_pretrained()"),MEt.forEach(t),b8r=r(qZ," to load the model weights."),qZ.forEach(t),v8r=i(x0),T(NE.$$.fragment,x0),x0.forEach(t),F8r=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(f7.$$.fragment,Vl),T8r=i(Vl),Wve=n(Vl,"P",{});var EEt=s(Wve);M8r=r(EEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EEt.forEach(t),E8r=i(Vl),un=n(Vl,"P",{});var $0=s(un);C8r=r($0,"The model class to instantiate is selected based on the "),Hve=n($0,"CODE",{});var CEt=s(Hve);w8r=r(CEt,"model_type"),CEt.forEach(t),A8r=r($0,` property of the config object (either
passed as an argument or loaded from `),Uve=n($0,"CODE",{});var wEt=s(Uve);y8r=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),L8r=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n($0,"CODE",{});var AEt=s(Jve);x8r=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),$8r=r($0,":"),$0.forEach(t),k8r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);jE=n(we,"LI",{});var $Be=s(jE);Yve=n($Be,"STRONG",{});var yEt=s(Yve);S8r=r(yEt,"albert"),yEt.forEach(t),R8r=r($Be," \u2014 "),FJ=n($Be,"A",{href:!0});var LEt=s(FJ);B8r=r(LEt,"FlaxAlbertForPreTraining"),LEt.forEach(t),P8r=r($Be," (ALBERT model)"),$Be.forEach(t),I8r=i(we),DE=n(we,"LI",{});var kBe=s(DE);Kve=n(kBe,"STRONG",{});var xEt=s(Kve);q8r=r(xEt,"bart"),xEt.forEach(t),N8r=r(kBe," \u2014 "),TJ=n(kBe,"A",{href:!0});var $Et=s(TJ);j8r=r($Et,"FlaxBartForConditionalGeneration"),$Et.forEach(t),D8r=r(kBe," (BART model)"),kBe.forEach(t),G8r=i(we),GE=n(we,"LI",{});var SBe=s(GE);Zve=n(SBe,"STRONG",{});var kEt=s(Zve);O8r=r(kEt,"bert"),kEt.forEach(t),V8r=r(SBe," \u2014 "),MJ=n(SBe,"A",{href:!0});var SEt=s(MJ);X8r=r(SEt,"FlaxBertForPreTraining"),SEt.forEach(t),z8r=r(SBe," (BERT model)"),SBe.forEach(t),Q8r=i(we),OE=n(we,"LI",{});var RBe=s(OE);eFe=n(RBe,"STRONG",{});var REt=s(eFe);W8r=r(REt,"big_bird"),REt.forEach(t),H8r=r(RBe," \u2014 "),EJ=n(RBe,"A",{href:!0});var BEt=s(EJ);U8r=r(BEt,"FlaxBigBirdForPreTraining"),BEt.forEach(t),J8r=r(RBe," (BigBird model)"),RBe.forEach(t),Y8r=i(we),VE=n(we,"LI",{});var BBe=s(VE);oFe=n(BBe,"STRONG",{});var PEt=s(oFe);K8r=r(PEt,"electra"),PEt.forEach(t),Z8r=r(BBe," \u2014 "),CJ=n(BBe,"A",{href:!0});var IEt=s(CJ);exr=r(IEt,"FlaxElectraForPreTraining"),IEt.forEach(t),oxr=r(BBe," (ELECTRA model)"),BBe.forEach(t),rxr=i(we),XE=n(we,"LI",{});var PBe=s(XE);rFe=n(PBe,"STRONG",{});var qEt=s(rFe);txr=r(qEt,"mbart"),qEt.forEach(t),axr=r(PBe," \u2014 "),wJ=n(PBe,"A",{href:!0});var NEt=s(wJ);nxr=r(NEt,"FlaxMBartForConditionalGeneration"),NEt.forEach(t),sxr=r(PBe," (mBART model)"),PBe.forEach(t),lxr=i(we),zE=n(we,"LI",{});var IBe=s(zE);tFe=n(IBe,"STRONG",{});var jEt=s(tFe);ixr=r(jEt,"mt5"),jEt.forEach(t),dxr=r(IBe," \u2014 "),AJ=n(IBe,"A",{href:!0});var DEt=s(AJ);cxr=r(DEt,"FlaxMT5ForConditionalGeneration"),DEt.forEach(t),fxr=r(IBe," (mT5 model)"),IBe.forEach(t),mxr=i(we),QE=n(we,"LI",{});var qBe=s(QE);aFe=n(qBe,"STRONG",{});var GEt=s(aFe);gxr=r(GEt,"roberta"),GEt.forEach(t),hxr=r(qBe," \u2014 "),yJ=n(qBe,"A",{href:!0});var OEt=s(yJ);pxr=r(OEt,"FlaxRobertaForMaskedLM"),OEt.forEach(t),uxr=r(qBe," (RoBERTa model)"),qBe.forEach(t),_xr=i(we),WE=n(we,"LI",{});var NBe=s(WE);nFe=n(NBe,"STRONG",{});var VEt=s(nFe);bxr=r(VEt,"roformer"),VEt.forEach(t),vxr=r(NBe," \u2014 "),LJ=n(NBe,"A",{href:!0});var XEt=s(LJ);Fxr=r(XEt,"FlaxRoFormerForMaskedLM"),XEt.forEach(t),Txr=r(NBe," (RoFormer model)"),NBe.forEach(t),Mxr=i(we),HE=n(we,"LI",{});var jBe=s(HE);sFe=n(jBe,"STRONG",{});var zEt=s(sFe);Exr=r(zEt,"t5"),zEt.forEach(t),Cxr=r(jBe," \u2014 "),xJ=n(jBe,"A",{href:!0});var QEt=s(xJ);wxr=r(QEt,"FlaxT5ForConditionalGeneration"),QEt.forEach(t),Axr=r(jBe," (T5 model)"),jBe.forEach(t),yxr=i(we),UE=n(we,"LI",{});var DBe=s(UE);lFe=n(DBe,"STRONG",{});var WEt=s(lFe);Lxr=r(WEt,"wav2vec2"),WEt.forEach(t),xxr=r(DBe," \u2014 "),$J=n(DBe,"A",{href:!0});var HEt=s($J);$xr=r(HEt,"FlaxWav2Vec2ForPreTraining"),HEt.forEach(t),kxr=r(DBe," (Wav2Vec2 model)"),DBe.forEach(t),Sxr=i(we),JE=n(we,"LI",{});var GBe=s(JE);iFe=n(GBe,"STRONG",{});var UEt=s(iFe);Rxr=r(UEt,"xlm-roberta"),UEt.forEach(t),Bxr=r(GBe," \u2014 "),kJ=n(GBe,"A",{href:!0});var JEt=s(kJ);Pxr=r(JEt,"FlaxXLMRobertaForMaskedLM"),JEt.forEach(t),Ixr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),we.forEach(t),qxr=i(Vl),T(YE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Sqe=i(f),Pc=n(f,"H2",{class:!0});var jje=s(Pc);KE=n(jje,"A",{id:!0,class:!0,href:!0});var YEt=s(KE);dFe=n(YEt,"SPAN",{});var KEt=s(dFe);T(m7.$$.fragment,KEt),KEt.forEach(t),YEt.forEach(t),Nxr=i(jje),cFe=n(jje,"SPAN",{});var ZEt=s(cFe);jxr=r(ZEt,"FlaxAutoModelForMaskedLM"),ZEt.forEach(t),jje.forEach(t),Rqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(g7.$$.fragment,Xl),Dxr=i(Xl),Ic=n(Xl,"P",{});var NZ=s(Ic);Gxr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SJ=n(NZ,"A",{href:!0});var eCt=s(SJ);Oxr=r(eCt,"from_pretrained()"),eCt.forEach(t),Vxr=r(NZ," class method or the "),RJ=n(NZ,"A",{href:!0});var oCt=s(RJ);Xxr=r(oCt,"from_config()"),oCt.forEach(t),zxr=r(NZ,` class
method.`),NZ.forEach(t),Qxr=i(Xl),h7=n(Xl,"P",{});var Dje=s(h7);Wxr=r(Dje,"This class cannot be instantiated directly using "),fFe=n(Dje,"CODE",{});var rCt=s(fFe);Hxr=r(rCt,"__init__()"),rCt.forEach(t),Uxr=r(Dje," (throws an error)."),Dje.forEach(t),Jxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var k0=s(Ot);T(p7.$$.fragment,k0),Yxr=i(k0),mFe=n(k0,"P",{});var tCt=s(mFe);Kxr=r(tCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tCt.forEach(t),Zxr=i(k0),qc=n(k0,"P",{});var jZ=s(qc);e7r=r(jZ,`Note:
Loading a model from its configuration file does `),gFe=n(jZ,"STRONG",{});var aCt=s(gFe);o7r=r(aCt,"not"),aCt.forEach(t),r7r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(jZ,"A",{href:!0});var nCt=s(BJ);t7r=r(nCt,"from_pretrained()"),nCt.forEach(t),a7r=r(jZ," to load the model weights."),jZ.forEach(t),n7r=i(k0),T(ZE.$$.fragment,k0),k0.forEach(t),s7r=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(u7.$$.fragment,zl),l7r=i(zl),hFe=n(zl,"P",{});var sCt=s(hFe);i7r=r(sCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sCt.forEach(t),d7r=i(zl),_n=n(zl,"P",{});var S0=s(_n);c7r=r(S0,"The model class to instantiate is selected based on the "),pFe=n(S0,"CODE",{});var lCt=s(pFe);f7r=r(lCt,"model_type"),lCt.forEach(t),m7r=r(S0,` property of the config object (either
passed as an argument or loaded from `),uFe=n(S0,"CODE",{});var iCt=s(uFe);g7r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),h7r=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(S0,"CODE",{});var dCt=s(_Fe);p7r=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),u7r=r(S0,":"),S0.forEach(t),_7r=i(zl),Le=n(zl,"UL",{});var Be=s(Le);eC=n(Be,"LI",{});var OBe=s(eC);bFe=n(OBe,"STRONG",{});var cCt=s(bFe);b7r=r(cCt,"albert"),cCt.forEach(t),v7r=r(OBe," \u2014 "),PJ=n(OBe,"A",{href:!0});var fCt=s(PJ);F7r=r(fCt,"FlaxAlbertForMaskedLM"),fCt.forEach(t),T7r=r(OBe," (ALBERT model)"),OBe.forEach(t),M7r=i(Be),oC=n(Be,"LI",{});var VBe=s(oC);vFe=n(VBe,"STRONG",{});var mCt=s(vFe);E7r=r(mCt,"bart"),mCt.forEach(t),C7r=r(VBe," \u2014 "),IJ=n(VBe,"A",{href:!0});var gCt=s(IJ);w7r=r(gCt,"FlaxBartForConditionalGeneration"),gCt.forEach(t),A7r=r(VBe," (BART model)"),VBe.forEach(t),y7r=i(Be),rC=n(Be,"LI",{});var XBe=s(rC);FFe=n(XBe,"STRONG",{});var hCt=s(FFe);L7r=r(hCt,"bert"),hCt.forEach(t),x7r=r(XBe," \u2014 "),qJ=n(XBe,"A",{href:!0});var pCt=s(qJ);$7r=r(pCt,"FlaxBertForMaskedLM"),pCt.forEach(t),k7r=r(XBe," (BERT model)"),XBe.forEach(t),S7r=i(Be),tC=n(Be,"LI",{});var zBe=s(tC);TFe=n(zBe,"STRONG",{});var uCt=s(TFe);R7r=r(uCt,"big_bird"),uCt.forEach(t),B7r=r(zBe," \u2014 "),NJ=n(zBe,"A",{href:!0});var _Ct=s(NJ);P7r=r(_Ct,"FlaxBigBirdForMaskedLM"),_Ct.forEach(t),I7r=r(zBe," (BigBird model)"),zBe.forEach(t),q7r=i(Be),aC=n(Be,"LI",{});var QBe=s(aC);MFe=n(QBe,"STRONG",{});var bCt=s(MFe);N7r=r(bCt,"distilbert"),bCt.forEach(t),j7r=r(QBe," \u2014 "),jJ=n(QBe,"A",{href:!0});var vCt=s(jJ);D7r=r(vCt,"FlaxDistilBertForMaskedLM"),vCt.forEach(t),G7r=r(QBe," (DistilBERT model)"),QBe.forEach(t),O7r=i(Be),nC=n(Be,"LI",{});var WBe=s(nC);EFe=n(WBe,"STRONG",{});var FCt=s(EFe);V7r=r(FCt,"electra"),FCt.forEach(t),X7r=r(WBe," \u2014 "),DJ=n(WBe,"A",{href:!0});var TCt=s(DJ);z7r=r(TCt,"FlaxElectraForMaskedLM"),TCt.forEach(t),Q7r=r(WBe," (ELECTRA model)"),WBe.forEach(t),W7r=i(Be),sC=n(Be,"LI",{});var HBe=s(sC);CFe=n(HBe,"STRONG",{});var MCt=s(CFe);H7r=r(MCt,"mbart"),MCt.forEach(t),U7r=r(HBe," \u2014 "),GJ=n(HBe,"A",{href:!0});var ECt=s(GJ);J7r=r(ECt,"FlaxMBartForConditionalGeneration"),ECt.forEach(t),Y7r=r(HBe," (mBART model)"),HBe.forEach(t),K7r=i(Be),lC=n(Be,"LI",{});var UBe=s(lC);wFe=n(UBe,"STRONG",{});var CCt=s(wFe);Z7r=r(CCt,"roberta"),CCt.forEach(t),e9r=r(UBe," \u2014 "),OJ=n(UBe,"A",{href:!0});var wCt=s(OJ);o9r=r(wCt,"FlaxRobertaForMaskedLM"),wCt.forEach(t),r9r=r(UBe," (RoBERTa model)"),UBe.forEach(t),t9r=i(Be),iC=n(Be,"LI",{});var JBe=s(iC);AFe=n(JBe,"STRONG",{});var ACt=s(AFe);a9r=r(ACt,"roformer"),ACt.forEach(t),n9r=r(JBe," \u2014 "),VJ=n(JBe,"A",{href:!0});var yCt=s(VJ);s9r=r(yCt,"FlaxRoFormerForMaskedLM"),yCt.forEach(t),l9r=r(JBe," (RoFormer model)"),JBe.forEach(t),i9r=i(Be),dC=n(Be,"LI",{});var YBe=s(dC);yFe=n(YBe,"STRONG",{});var LCt=s(yFe);d9r=r(LCt,"xlm-roberta"),LCt.forEach(t),c9r=r(YBe," \u2014 "),XJ=n(YBe,"A",{href:!0});var xCt=s(XJ);f9r=r(xCt,"FlaxXLMRobertaForMaskedLM"),xCt.forEach(t),m9r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Be.forEach(t),g9r=i(zl),T(cC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Bqe=i(f),Nc=n(f,"H2",{class:!0});var Gje=s(Nc);fC=n(Gje,"A",{id:!0,class:!0,href:!0});var $Ct=s(fC);LFe=n($Ct,"SPAN",{});var kCt=s(LFe);T(_7.$$.fragment,kCt),kCt.forEach(t),$Ct.forEach(t),h9r=i(Gje),xFe=n(Gje,"SPAN",{});var SCt=s(xFe);p9r=r(SCt,"FlaxAutoModelForSeq2SeqLM"),SCt.forEach(t),Gje.forEach(t),Pqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(b7.$$.fragment,Ql),u9r=i(Ql),jc=n(Ql,"P",{});var DZ=s(jc);_9r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zJ=n(DZ,"A",{href:!0});var RCt=s(zJ);b9r=r(RCt,"from_pretrained()"),RCt.forEach(t),v9r=r(DZ," class method or the "),QJ=n(DZ,"A",{href:!0});var BCt=s(QJ);F9r=r(BCt,"from_config()"),BCt.forEach(t),T9r=r(DZ,` class
method.`),DZ.forEach(t),M9r=i(Ql),v7=n(Ql,"P",{});var Oje=s(v7);E9r=r(Oje,"This class cannot be instantiated directly using "),$Fe=n(Oje,"CODE",{});var PCt=s($Fe);C9r=r(PCt,"__init__()"),PCt.forEach(t),w9r=r(Oje," (throws an error)."),Oje.forEach(t),A9r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var R0=s(Vt);T(F7.$$.fragment,R0),y9r=i(R0),kFe=n(R0,"P",{});var ICt=s(kFe);L9r=r(ICt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ICt.forEach(t),x9r=i(R0),Dc=n(R0,"P",{});var GZ=s(Dc);$9r=r(GZ,`Note:
Loading a model from its configuration file does `),SFe=n(GZ,"STRONG",{});var qCt=s(SFe);k9r=r(qCt,"not"),qCt.forEach(t),S9r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(GZ,"A",{href:!0});var NCt=s(WJ);R9r=r(NCt,"from_pretrained()"),NCt.forEach(t),B9r=r(GZ," to load the model weights."),GZ.forEach(t),P9r=i(R0),T(mC.$$.fragment,R0),R0.forEach(t),I9r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(T7.$$.fragment,Wl),q9r=i(Wl),RFe=n(Wl,"P",{});var jCt=s(RFe);N9r=r(jCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jCt.forEach(t),j9r=i(Wl),bn=n(Wl,"P",{});var B0=s(bn);D9r=r(B0,"The model class to instantiate is selected based on the "),BFe=n(B0,"CODE",{});var DCt=s(BFe);G9r=r(DCt,"model_type"),DCt.forEach(t),O9r=r(B0,` property of the config object (either
passed as an argument or loaded from `),PFe=n(B0,"CODE",{});var GCt=s(PFe);V9r=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),X9r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(B0,"CODE",{});var OCt=s(IFe);z9r=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),Q9r=r(B0,":"),B0.forEach(t),W9r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);gC=n(Ve,"LI",{});var KBe=s(gC);qFe=n(KBe,"STRONG",{});var VCt=s(qFe);H9r=r(VCt,"bart"),VCt.forEach(t),U9r=r(KBe," \u2014 "),HJ=n(KBe,"A",{href:!0});var XCt=s(HJ);J9r=r(XCt,"FlaxBartForConditionalGeneration"),XCt.forEach(t),Y9r=r(KBe," (BART model)"),KBe.forEach(t),K9r=i(Ve),hC=n(Ve,"LI",{});var ZBe=s(hC);NFe=n(ZBe,"STRONG",{});var zCt=s(NFe);Z9r=r(zCt,"blenderbot"),zCt.forEach(t),e$r=r(ZBe," \u2014 "),UJ=n(ZBe,"A",{href:!0});var QCt=s(UJ);o$r=r(QCt,"FlaxBlenderbotForConditionalGeneration"),QCt.forEach(t),r$r=r(ZBe," (Blenderbot model)"),ZBe.forEach(t),t$r=i(Ve),pC=n(Ve,"LI",{});var ePe=s(pC);jFe=n(ePe,"STRONG",{});var WCt=s(jFe);a$r=r(WCt,"blenderbot-small"),WCt.forEach(t),n$r=r(ePe," \u2014 "),JJ=n(ePe,"A",{href:!0});var HCt=s(JJ);s$r=r(HCt,"FlaxBlenderbotSmallForConditionalGeneration"),HCt.forEach(t),l$r=r(ePe," (BlenderbotSmall model)"),ePe.forEach(t),i$r=i(Ve),uC=n(Ve,"LI",{});var oPe=s(uC);DFe=n(oPe,"STRONG",{});var UCt=s(DFe);d$r=r(UCt,"encoder-decoder"),UCt.forEach(t),c$r=r(oPe," \u2014 "),YJ=n(oPe,"A",{href:!0});var JCt=s(YJ);f$r=r(JCt,"FlaxEncoderDecoderModel"),JCt.forEach(t),m$r=r(oPe," (Encoder decoder model)"),oPe.forEach(t),g$r=i(Ve),_C=n(Ve,"LI",{});var rPe=s(_C);GFe=n(rPe,"STRONG",{});var YCt=s(GFe);h$r=r(YCt,"marian"),YCt.forEach(t),p$r=r(rPe," \u2014 "),KJ=n(rPe,"A",{href:!0});var KCt=s(KJ);u$r=r(KCt,"FlaxMarianMTModel"),KCt.forEach(t),_$r=r(rPe," (Marian model)"),rPe.forEach(t),b$r=i(Ve),bC=n(Ve,"LI",{});var tPe=s(bC);OFe=n(tPe,"STRONG",{});var ZCt=s(OFe);v$r=r(ZCt,"mbart"),ZCt.forEach(t),F$r=r(tPe," \u2014 "),ZJ=n(tPe,"A",{href:!0});var ewt=s(ZJ);T$r=r(ewt,"FlaxMBartForConditionalGeneration"),ewt.forEach(t),M$r=r(tPe," (mBART model)"),tPe.forEach(t),E$r=i(Ve),vC=n(Ve,"LI",{});var aPe=s(vC);VFe=n(aPe,"STRONG",{});var owt=s(VFe);C$r=r(owt,"mt5"),owt.forEach(t),w$r=r(aPe," \u2014 "),eY=n(aPe,"A",{href:!0});var rwt=s(eY);A$r=r(rwt,"FlaxMT5ForConditionalGeneration"),rwt.forEach(t),y$r=r(aPe," (mT5 model)"),aPe.forEach(t),L$r=i(Ve),FC=n(Ve,"LI",{});var nPe=s(FC);XFe=n(nPe,"STRONG",{});var twt=s(XFe);x$r=r(twt,"pegasus"),twt.forEach(t),$$r=r(nPe," \u2014 "),oY=n(nPe,"A",{href:!0});var awt=s(oY);k$r=r(awt,"FlaxPegasusForConditionalGeneration"),awt.forEach(t),S$r=r(nPe," (Pegasus model)"),nPe.forEach(t),R$r=i(Ve),TC=n(Ve,"LI",{});var sPe=s(TC);zFe=n(sPe,"STRONG",{});var nwt=s(zFe);B$r=r(nwt,"t5"),nwt.forEach(t),P$r=r(sPe," \u2014 "),rY=n(sPe,"A",{href:!0});var swt=s(rY);I$r=r(swt,"FlaxT5ForConditionalGeneration"),swt.forEach(t),q$r=r(sPe," (T5 model)"),sPe.forEach(t),Ve.forEach(t),N$r=i(Wl),T(MC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Iqe=i(f),Gc=n(f,"H2",{class:!0});var Vje=s(Gc);EC=n(Vje,"A",{id:!0,class:!0,href:!0});var lwt=s(EC);QFe=n(lwt,"SPAN",{});var iwt=s(QFe);T(M7.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),j$r=i(Vje),WFe=n(Vje,"SPAN",{});var dwt=s(WFe);D$r=r(dwt,"FlaxAutoModelForSequenceClassification"),dwt.forEach(t),Vje.forEach(t),qqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(E7.$$.fragment,Hl),G$r=i(Hl),Oc=n(Hl,"P",{});var OZ=s(Oc);O$r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tY=n(OZ,"A",{href:!0});var cwt=s(tY);V$r=r(cwt,"from_pretrained()"),cwt.forEach(t),X$r=r(OZ," class method or the "),aY=n(OZ,"A",{href:!0});var fwt=s(aY);z$r=r(fwt,"from_config()"),fwt.forEach(t),Q$r=r(OZ,` class
method.`),OZ.forEach(t),W$r=i(Hl),C7=n(Hl,"P",{});var Xje=s(C7);H$r=r(Xje,"This class cannot be instantiated directly using "),HFe=n(Xje,"CODE",{});var mwt=s(HFe);U$r=r(mwt,"__init__()"),mwt.forEach(t),J$r=r(Xje," (throws an error)."),Xje.forEach(t),Y$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var P0=s(Xt);T(w7.$$.fragment,P0),K$r=i(P0),UFe=n(P0,"P",{});var gwt=s(UFe);Z$r=r(gwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gwt.forEach(t),ekr=i(P0),Vc=n(P0,"P",{});var VZ=s(Vc);okr=r(VZ,`Note:
Loading a model from its configuration file does `),JFe=n(VZ,"STRONG",{});var hwt=s(JFe);rkr=r(hwt,"not"),hwt.forEach(t),tkr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(VZ,"A",{href:!0});var pwt=s(nY);akr=r(pwt,"from_pretrained()"),pwt.forEach(t),nkr=r(VZ," to load the model weights."),VZ.forEach(t),skr=i(P0),T(CC.$$.fragment,P0),P0.forEach(t),lkr=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(A7.$$.fragment,Ul),ikr=i(Ul),YFe=n(Ul,"P",{});var uwt=s(YFe);dkr=r(uwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uwt.forEach(t),ckr=i(Ul),vn=n(Ul,"P",{});var I0=s(vn);fkr=r(I0,"The model class to instantiate is selected based on the "),KFe=n(I0,"CODE",{});var _wt=s(KFe);mkr=r(_wt,"model_type"),_wt.forEach(t),gkr=r(I0,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(I0,"CODE",{});var bwt=s(ZFe);hkr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),pkr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(I0,"CODE",{});var vwt=s(e6e);ukr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),_kr=r(I0,":"),I0.forEach(t),bkr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);wC=n(Pe,"LI",{});var lPe=s(wC);o6e=n(lPe,"STRONG",{});var Fwt=s(o6e);vkr=r(Fwt,"albert"),Fwt.forEach(t),Fkr=r(lPe," \u2014 "),sY=n(lPe,"A",{href:!0});var Twt=s(sY);Tkr=r(Twt,"FlaxAlbertForSequenceClassification"),Twt.forEach(t),Mkr=r(lPe," (ALBERT model)"),lPe.forEach(t),Ekr=i(Pe),AC=n(Pe,"LI",{});var iPe=s(AC);r6e=n(iPe,"STRONG",{});var Mwt=s(r6e);Ckr=r(Mwt,"bart"),Mwt.forEach(t),wkr=r(iPe," \u2014 "),lY=n(iPe,"A",{href:!0});var Ewt=s(lY);Akr=r(Ewt,"FlaxBartForSequenceClassification"),Ewt.forEach(t),ykr=r(iPe," (BART model)"),iPe.forEach(t),Lkr=i(Pe),yC=n(Pe,"LI",{});var dPe=s(yC);t6e=n(dPe,"STRONG",{});var Cwt=s(t6e);xkr=r(Cwt,"bert"),Cwt.forEach(t),$kr=r(dPe," \u2014 "),iY=n(dPe,"A",{href:!0});var wwt=s(iY);kkr=r(wwt,"FlaxBertForSequenceClassification"),wwt.forEach(t),Skr=r(dPe," (BERT model)"),dPe.forEach(t),Rkr=i(Pe),LC=n(Pe,"LI",{});var cPe=s(LC);a6e=n(cPe,"STRONG",{});var Awt=s(a6e);Bkr=r(Awt,"big_bird"),Awt.forEach(t),Pkr=r(cPe," \u2014 "),dY=n(cPe,"A",{href:!0});var ywt=s(dY);Ikr=r(ywt,"FlaxBigBirdForSequenceClassification"),ywt.forEach(t),qkr=r(cPe," (BigBird model)"),cPe.forEach(t),Nkr=i(Pe),xC=n(Pe,"LI",{});var fPe=s(xC);n6e=n(fPe,"STRONG",{});var Lwt=s(n6e);jkr=r(Lwt,"distilbert"),Lwt.forEach(t),Dkr=r(fPe," \u2014 "),cY=n(fPe,"A",{href:!0});var xwt=s(cY);Gkr=r(xwt,"FlaxDistilBertForSequenceClassification"),xwt.forEach(t),Okr=r(fPe," (DistilBERT model)"),fPe.forEach(t),Vkr=i(Pe),$C=n(Pe,"LI",{});var mPe=s($C);s6e=n(mPe,"STRONG",{});var $wt=s(s6e);Xkr=r($wt,"electra"),$wt.forEach(t),zkr=r(mPe," \u2014 "),fY=n(mPe,"A",{href:!0});var kwt=s(fY);Qkr=r(kwt,"FlaxElectraForSequenceClassification"),kwt.forEach(t),Wkr=r(mPe," (ELECTRA model)"),mPe.forEach(t),Hkr=i(Pe),kC=n(Pe,"LI",{});var gPe=s(kC);l6e=n(gPe,"STRONG",{});var Swt=s(l6e);Ukr=r(Swt,"mbart"),Swt.forEach(t),Jkr=r(gPe," \u2014 "),mY=n(gPe,"A",{href:!0});var Rwt=s(mY);Ykr=r(Rwt,"FlaxMBartForSequenceClassification"),Rwt.forEach(t),Kkr=r(gPe," (mBART model)"),gPe.forEach(t),Zkr=i(Pe),SC=n(Pe,"LI",{});var hPe=s(SC);i6e=n(hPe,"STRONG",{});var Bwt=s(i6e);eSr=r(Bwt,"roberta"),Bwt.forEach(t),oSr=r(hPe," \u2014 "),gY=n(hPe,"A",{href:!0});var Pwt=s(gY);rSr=r(Pwt,"FlaxRobertaForSequenceClassification"),Pwt.forEach(t),tSr=r(hPe," (RoBERTa model)"),hPe.forEach(t),aSr=i(Pe),RC=n(Pe,"LI",{});var pPe=s(RC);d6e=n(pPe,"STRONG",{});var Iwt=s(d6e);nSr=r(Iwt,"roformer"),Iwt.forEach(t),sSr=r(pPe," \u2014 "),hY=n(pPe,"A",{href:!0});var qwt=s(hY);lSr=r(qwt,"FlaxRoFormerForSequenceClassification"),qwt.forEach(t),iSr=r(pPe," (RoFormer model)"),pPe.forEach(t),dSr=i(Pe),BC=n(Pe,"LI",{});var uPe=s(BC);c6e=n(uPe,"STRONG",{});var Nwt=s(c6e);cSr=r(Nwt,"xlm-roberta"),Nwt.forEach(t),fSr=r(uPe," \u2014 "),pY=n(uPe,"A",{href:!0});var jwt=s(pY);mSr=r(jwt,"FlaxXLMRobertaForSequenceClassification"),jwt.forEach(t),gSr=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),Pe.forEach(t),hSr=i(Ul),T(PC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Nqe=i(f),Xc=n(f,"H2",{class:!0});var zje=s(Xc);IC=n(zje,"A",{id:!0,class:!0,href:!0});var Dwt=s(IC);f6e=n(Dwt,"SPAN",{});var Gwt=s(f6e);T(y7.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),pSr=i(zje),m6e=n(zje,"SPAN",{});var Owt=s(m6e);uSr=r(Owt,"FlaxAutoModelForQuestionAnswering"),Owt.forEach(t),zje.forEach(t),jqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(L7.$$.fragment,Jl),_Sr=i(Jl),zc=n(Jl,"P",{});var XZ=s(zc);bSr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uY=n(XZ,"A",{href:!0});var Vwt=s(uY);vSr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),FSr=r(XZ," class method or the "),_Y=n(XZ,"A",{href:!0});var Xwt=s(_Y);TSr=r(Xwt,"from_config()"),Xwt.forEach(t),MSr=r(XZ,` class
method.`),XZ.forEach(t),ESr=i(Jl),x7=n(Jl,"P",{});var Qje=s(x7);CSr=r(Qje,"This class cannot be instantiated directly using "),g6e=n(Qje,"CODE",{});var zwt=s(g6e);wSr=r(zwt,"__init__()"),zwt.forEach(t),ASr=r(Qje," (throws an error)."),Qje.forEach(t),ySr=i(Jl),zt=n(Jl,"DIV",{class:!0});var q0=s(zt);T($7.$$.fragment,q0),LSr=i(q0),h6e=n(q0,"P",{});var Qwt=s(h6e);xSr=r(Qwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qwt.forEach(t),$Sr=i(q0),Qc=n(q0,"P",{});var zZ=s(Qc);kSr=r(zZ,`Note:
Loading a model from its configuration file does `),p6e=n(zZ,"STRONG",{});var Wwt=s(p6e);SSr=r(Wwt,"not"),Wwt.forEach(t),RSr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(zZ,"A",{href:!0});var Hwt=s(bY);BSr=r(Hwt,"from_pretrained()"),Hwt.forEach(t),PSr=r(zZ," to load the model weights."),zZ.forEach(t),ISr=i(q0),T(qC.$$.fragment,q0),q0.forEach(t),qSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(k7.$$.fragment,Yl),NSr=i(Yl),u6e=n(Yl,"P",{});var Uwt=s(u6e);jSr=r(Uwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uwt.forEach(t),DSr=i(Yl),Fn=n(Yl,"P",{});var N0=s(Fn);GSr=r(N0,"The model class to instantiate is selected based on the "),_6e=n(N0,"CODE",{});var Jwt=s(_6e);OSr=r(Jwt,"model_type"),Jwt.forEach(t),VSr=r(N0,` property of the config object (either
passed as an argument or loaded from `),b6e=n(N0,"CODE",{});var Ywt=s(b6e);XSr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),zSr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(N0,"CODE",{});var Kwt=s(v6e);QSr=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),WSr=r(N0,":"),N0.forEach(t),HSr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);NC=n(Ie,"LI",{});var _Pe=s(NC);F6e=n(_Pe,"STRONG",{});var Zwt=s(F6e);USr=r(Zwt,"albert"),Zwt.forEach(t),JSr=r(_Pe," \u2014 "),vY=n(_Pe,"A",{href:!0});var eAt=s(vY);YSr=r(eAt,"FlaxAlbertForQuestionAnswering"),eAt.forEach(t),KSr=r(_Pe," (ALBERT model)"),_Pe.forEach(t),ZSr=i(Ie),jC=n(Ie,"LI",{});var bPe=s(jC);T6e=n(bPe,"STRONG",{});var oAt=s(T6e);eRr=r(oAt,"bart"),oAt.forEach(t),oRr=r(bPe," \u2014 "),FY=n(bPe,"A",{href:!0});var rAt=s(FY);rRr=r(rAt,"FlaxBartForQuestionAnswering"),rAt.forEach(t),tRr=r(bPe," (BART model)"),bPe.forEach(t),aRr=i(Ie),DC=n(Ie,"LI",{});var vPe=s(DC);M6e=n(vPe,"STRONG",{});var tAt=s(M6e);nRr=r(tAt,"bert"),tAt.forEach(t),sRr=r(vPe," \u2014 "),TY=n(vPe,"A",{href:!0});var aAt=s(TY);lRr=r(aAt,"FlaxBertForQuestionAnswering"),aAt.forEach(t),iRr=r(vPe," (BERT model)"),vPe.forEach(t),dRr=i(Ie),GC=n(Ie,"LI",{});var FPe=s(GC);E6e=n(FPe,"STRONG",{});var nAt=s(E6e);cRr=r(nAt,"big_bird"),nAt.forEach(t),fRr=r(FPe," \u2014 "),MY=n(FPe,"A",{href:!0});var sAt=s(MY);mRr=r(sAt,"FlaxBigBirdForQuestionAnswering"),sAt.forEach(t),gRr=r(FPe," (BigBird model)"),FPe.forEach(t),hRr=i(Ie),OC=n(Ie,"LI",{});var TPe=s(OC);C6e=n(TPe,"STRONG",{});var lAt=s(C6e);pRr=r(lAt,"distilbert"),lAt.forEach(t),uRr=r(TPe," \u2014 "),EY=n(TPe,"A",{href:!0});var iAt=s(EY);_Rr=r(iAt,"FlaxDistilBertForQuestionAnswering"),iAt.forEach(t),bRr=r(TPe," (DistilBERT model)"),TPe.forEach(t),vRr=i(Ie),VC=n(Ie,"LI",{});var MPe=s(VC);w6e=n(MPe,"STRONG",{});var dAt=s(w6e);FRr=r(dAt,"electra"),dAt.forEach(t),TRr=r(MPe," \u2014 "),CY=n(MPe,"A",{href:!0});var cAt=s(CY);MRr=r(cAt,"FlaxElectraForQuestionAnswering"),cAt.forEach(t),ERr=r(MPe," (ELECTRA model)"),MPe.forEach(t),CRr=i(Ie),XC=n(Ie,"LI",{});var EPe=s(XC);A6e=n(EPe,"STRONG",{});var fAt=s(A6e);wRr=r(fAt,"mbart"),fAt.forEach(t),ARr=r(EPe," \u2014 "),wY=n(EPe,"A",{href:!0});var mAt=s(wY);yRr=r(mAt,"FlaxMBartForQuestionAnswering"),mAt.forEach(t),LRr=r(EPe," (mBART model)"),EPe.forEach(t),xRr=i(Ie),zC=n(Ie,"LI",{});var CPe=s(zC);y6e=n(CPe,"STRONG",{});var gAt=s(y6e);$Rr=r(gAt,"roberta"),gAt.forEach(t),kRr=r(CPe," \u2014 "),AY=n(CPe,"A",{href:!0});var hAt=s(AY);SRr=r(hAt,"FlaxRobertaForQuestionAnswering"),hAt.forEach(t),RRr=r(CPe," (RoBERTa model)"),CPe.forEach(t),BRr=i(Ie),QC=n(Ie,"LI",{});var wPe=s(QC);L6e=n(wPe,"STRONG",{});var pAt=s(L6e);PRr=r(pAt,"roformer"),pAt.forEach(t),IRr=r(wPe," \u2014 "),yY=n(wPe,"A",{href:!0});var uAt=s(yY);qRr=r(uAt,"FlaxRoFormerForQuestionAnswering"),uAt.forEach(t),NRr=r(wPe," (RoFormer model)"),wPe.forEach(t),jRr=i(Ie),WC=n(Ie,"LI",{});var APe=s(WC);x6e=n(APe,"STRONG",{});var _At=s(x6e);DRr=r(_At,"xlm-roberta"),_At.forEach(t),GRr=r(APe," \u2014 "),LY=n(APe,"A",{href:!0});var bAt=s(LY);ORr=r(bAt,"FlaxXLMRobertaForQuestionAnswering"),bAt.forEach(t),VRr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),Ie.forEach(t),XRr=i(Yl),T(HC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Dqe=i(f),Wc=n(f,"H2",{class:!0});var Wje=s(Wc);UC=n(Wje,"A",{id:!0,class:!0,href:!0});var vAt=s(UC);$6e=n(vAt,"SPAN",{});var FAt=s($6e);T(S7.$$.fragment,FAt),FAt.forEach(t),vAt.forEach(t),zRr=i(Wje),k6e=n(Wje,"SPAN",{});var TAt=s(k6e);QRr=r(TAt,"FlaxAutoModelForTokenClassification"),TAt.forEach(t),Wje.forEach(t),Gqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(R7.$$.fragment,Kl),WRr=i(Kl),Hc=n(Kl,"P",{});var QZ=s(Hc);HRr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xY=n(QZ,"A",{href:!0});var MAt=s(xY);URr=r(MAt,"from_pretrained()"),MAt.forEach(t),JRr=r(QZ," class method or the "),$Y=n(QZ,"A",{href:!0});var EAt=s($Y);YRr=r(EAt,"from_config()"),EAt.forEach(t),KRr=r(QZ,` class
method.`),QZ.forEach(t),ZRr=i(Kl),B7=n(Kl,"P",{});var Hje=s(B7);eBr=r(Hje,"This class cannot be instantiated directly using "),S6e=n(Hje,"CODE",{});var CAt=s(S6e);oBr=r(CAt,"__init__()"),CAt.forEach(t),rBr=r(Hje," (throws an error)."),Hje.forEach(t),tBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var j0=s(Qt);T(P7.$$.fragment,j0),aBr=i(j0),R6e=n(j0,"P",{});var wAt=s(R6e);nBr=r(wAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wAt.forEach(t),sBr=i(j0),Uc=n(j0,"P",{});var WZ=s(Uc);lBr=r(WZ,`Note:
Loading a model from its configuration file does `),B6e=n(WZ,"STRONG",{});var AAt=s(B6e);iBr=r(AAt,"not"),AAt.forEach(t),dBr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(WZ,"A",{href:!0});var yAt=s(kY);cBr=r(yAt,"from_pretrained()"),yAt.forEach(t),fBr=r(WZ," to load the model weights."),WZ.forEach(t),mBr=i(j0),T(JC.$$.fragment,j0),j0.forEach(t),gBr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(I7.$$.fragment,Zl),hBr=i(Zl),P6e=n(Zl,"P",{});var LAt=s(P6e);pBr=r(LAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LAt.forEach(t),uBr=i(Zl),Tn=n(Zl,"P",{});var D0=s(Tn);_Br=r(D0,"The model class to instantiate is selected based on the "),I6e=n(D0,"CODE",{});var xAt=s(I6e);bBr=r(xAt,"model_type"),xAt.forEach(t),vBr=r(D0,` property of the config object (either
passed as an argument or loaded from `),q6e=n(D0,"CODE",{});var $At=s(q6e);FBr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),TBr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(D0,"CODE",{});var kAt=s(N6e);MBr=r(kAt,"pretrained_model_name_or_path"),kAt.forEach(t),EBr=r(D0,":"),D0.forEach(t),CBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);YC=n(Fo,"LI",{});var yPe=s(YC);j6e=n(yPe,"STRONG",{});var SAt=s(j6e);wBr=r(SAt,"albert"),SAt.forEach(t),ABr=r(yPe," \u2014 "),SY=n(yPe,"A",{href:!0});var RAt=s(SY);yBr=r(RAt,"FlaxAlbertForTokenClassification"),RAt.forEach(t),LBr=r(yPe," (ALBERT model)"),yPe.forEach(t),xBr=i(Fo),KC=n(Fo,"LI",{});var LPe=s(KC);D6e=n(LPe,"STRONG",{});var BAt=s(D6e);$Br=r(BAt,"bert"),BAt.forEach(t),kBr=r(LPe," \u2014 "),RY=n(LPe,"A",{href:!0});var PAt=s(RY);SBr=r(PAt,"FlaxBertForTokenClassification"),PAt.forEach(t),RBr=r(LPe," (BERT model)"),LPe.forEach(t),BBr=i(Fo),ZC=n(Fo,"LI",{});var xPe=s(ZC);G6e=n(xPe,"STRONG",{});var IAt=s(G6e);PBr=r(IAt,"big_bird"),IAt.forEach(t),IBr=r(xPe," \u2014 "),BY=n(xPe,"A",{href:!0});var qAt=s(BY);qBr=r(qAt,"FlaxBigBirdForTokenClassification"),qAt.forEach(t),NBr=r(xPe," (BigBird model)"),xPe.forEach(t),jBr=i(Fo),ew=n(Fo,"LI",{});var $Pe=s(ew);O6e=n($Pe,"STRONG",{});var NAt=s(O6e);DBr=r(NAt,"distilbert"),NAt.forEach(t),GBr=r($Pe," \u2014 "),PY=n($Pe,"A",{href:!0});var jAt=s(PY);OBr=r(jAt,"FlaxDistilBertForTokenClassification"),jAt.forEach(t),VBr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),XBr=i(Fo),ow=n(Fo,"LI",{});var kPe=s(ow);V6e=n(kPe,"STRONG",{});var DAt=s(V6e);zBr=r(DAt,"electra"),DAt.forEach(t),QBr=r(kPe," \u2014 "),IY=n(kPe,"A",{href:!0});var GAt=s(IY);WBr=r(GAt,"FlaxElectraForTokenClassification"),GAt.forEach(t),HBr=r(kPe," (ELECTRA model)"),kPe.forEach(t),UBr=i(Fo),rw=n(Fo,"LI",{});var SPe=s(rw);X6e=n(SPe,"STRONG",{});var OAt=s(X6e);JBr=r(OAt,"roberta"),OAt.forEach(t),YBr=r(SPe," \u2014 "),qY=n(SPe,"A",{href:!0});var VAt=s(qY);KBr=r(VAt,"FlaxRobertaForTokenClassification"),VAt.forEach(t),ZBr=r(SPe," (RoBERTa model)"),SPe.forEach(t),ePr=i(Fo),tw=n(Fo,"LI",{});var RPe=s(tw);z6e=n(RPe,"STRONG",{});var XAt=s(z6e);oPr=r(XAt,"roformer"),XAt.forEach(t),rPr=r(RPe," \u2014 "),NY=n(RPe,"A",{href:!0});var zAt=s(NY);tPr=r(zAt,"FlaxRoFormerForTokenClassification"),zAt.forEach(t),aPr=r(RPe," (RoFormer model)"),RPe.forEach(t),nPr=i(Fo),aw=n(Fo,"LI",{});var BPe=s(aw);Q6e=n(BPe,"STRONG",{});var QAt=s(Q6e);sPr=r(QAt,"xlm-roberta"),QAt.forEach(t),lPr=r(BPe," \u2014 "),jY=n(BPe,"A",{href:!0});var WAt=s(jY);iPr=r(WAt,"FlaxXLMRobertaForTokenClassification"),WAt.forEach(t),dPr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),Fo.forEach(t),cPr=i(Zl),T(nw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Oqe=i(f),Jc=n(f,"H2",{class:!0});var Uje=s(Jc);sw=n(Uje,"A",{id:!0,class:!0,href:!0});var HAt=s(sw);W6e=n(HAt,"SPAN",{});var UAt=s(W6e);T(q7.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),fPr=i(Uje),H6e=n(Uje,"SPAN",{});var JAt=s(H6e);mPr=r(JAt,"FlaxAutoModelForMultipleChoice"),JAt.forEach(t),Uje.forEach(t),Vqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(N7.$$.fragment,ei),gPr=i(ei),Yc=n(ei,"P",{});var HZ=s(Yc);hPr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DY=n(HZ,"A",{href:!0});var YAt=s(DY);pPr=r(YAt,"from_pretrained()"),YAt.forEach(t),uPr=r(HZ," class method or the "),GY=n(HZ,"A",{href:!0});var KAt=s(GY);_Pr=r(KAt,"from_config()"),KAt.forEach(t),bPr=r(HZ,` class
method.`),HZ.forEach(t),vPr=i(ei),j7=n(ei,"P",{});var Jje=s(j7);FPr=r(Jje,"This class cannot be instantiated directly using "),U6e=n(Jje,"CODE",{});var ZAt=s(U6e);TPr=r(ZAt,"__init__()"),ZAt.forEach(t),MPr=r(Jje," (throws an error)."),Jje.forEach(t),EPr=i(ei),Wt=n(ei,"DIV",{class:!0});var G0=s(Wt);T(D7.$$.fragment,G0),CPr=i(G0),J6e=n(G0,"P",{});var e0t=s(J6e);wPr=r(e0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e0t.forEach(t),APr=i(G0),Kc=n(G0,"P",{});var UZ=s(Kc);yPr=r(UZ,`Note:
Loading a model from its configuration file does `),Y6e=n(UZ,"STRONG",{});var o0t=s(Y6e);LPr=r(o0t,"not"),o0t.forEach(t),xPr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(UZ,"A",{href:!0});var r0t=s(OY);$Pr=r(r0t,"from_pretrained()"),r0t.forEach(t),kPr=r(UZ," to load the model weights."),UZ.forEach(t),SPr=i(G0),T(lw.$$.fragment,G0),G0.forEach(t),RPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(G7.$$.fragment,oi),BPr=i(oi),K6e=n(oi,"P",{});var t0t=s(K6e);PPr=r(t0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t0t.forEach(t),IPr=i(oi),Mn=n(oi,"P",{});var O0=s(Mn);qPr=r(O0,"The model class to instantiate is selected based on the "),Z6e=n(O0,"CODE",{});var a0t=s(Z6e);NPr=r(a0t,"model_type"),a0t.forEach(t),jPr=r(O0,` property of the config object (either
passed as an argument or loaded from `),eTe=n(O0,"CODE",{});var n0t=s(eTe);DPr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),GPr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(O0,"CODE",{});var s0t=s(oTe);OPr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),VPr=r(O0,":"),O0.forEach(t),XPr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);iw=n(To,"LI",{});var PPe=s(iw);rTe=n(PPe,"STRONG",{});var l0t=s(rTe);zPr=r(l0t,"albert"),l0t.forEach(t),QPr=r(PPe," \u2014 "),VY=n(PPe,"A",{href:!0});var i0t=s(VY);WPr=r(i0t,"FlaxAlbertForMultipleChoice"),i0t.forEach(t),HPr=r(PPe," (ALBERT model)"),PPe.forEach(t),UPr=i(To),dw=n(To,"LI",{});var IPe=s(dw);tTe=n(IPe,"STRONG",{});var d0t=s(tTe);JPr=r(d0t,"bert"),d0t.forEach(t),YPr=r(IPe," \u2014 "),XY=n(IPe,"A",{href:!0});var c0t=s(XY);KPr=r(c0t,"FlaxBertForMultipleChoice"),c0t.forEach(t),ZPr=r(IPe," (BERT model)"),IPe.forEach(t),eIr=i(To),cw=n(To,"LI",{});var qPe=s(cw);aTe=n(qPe,"STRONG",{});var f0t=s(aTe);oIr=r(f0t,"big_bird"),f0t.forEach(t),rIr=r(qPe," \u2014 "),zY=n(qPe,"A",{href:!0});var m0t=s(zY);tIr=r(m0t,"FlaxBigBirdForMultipleChoice"),m0t.forEach(t),aIr=r(qPe," (BigBird model)"),qPe.forEach(t),nIr=i(To),fw=n(To,"LI",{});var NPe=s(fw);nTe=n(NPe,"STRONG",{});var g0t=s(nTe);sIr=r(g0t,"distilbert"),g0t.forEach(t),lIr=r(NPe," \u2014 "),QY=n(NPe,"A",{href:!0});var h0t=s(QY);iIr=r(h0t,"FlaxDistilBertForMultipleChoice"),h0t.forEach(t),dIr=r(NPe," (DistilBERT model)"),NPe.forEach(t),cIr=i(To),mw=n(To,"LI",{});var jPe=s(mw);sTe=n(jPe,"STRONG",{});var p0t=s(sTe);fIr=r(p0t,"electra"),p0t.forEach(t),mIr=r(jPe," \u2014 "),WY=n(jPe,"A",{href:!0});var u0t=s(WY);gIr=r(u0t,"FlaxElectraForMultipleChoice"),u0t.forEach(t),hIr=r(jPe," (ELECTRA model)"),jPe.forEach(t),pIr=i(To),gw=n(To,"LI",{});var DPe=s(gw);lTe=n(DPe,"STRONG",{});var _0t=s(lTe);uIr=r(_0t,"roberta"),_0t.forEach(t),_Ir=r(DPe," \u2014 "),HY=n(DPe,"A",{href:!0});var b0t=s(HY);bIr=r(b0t,"FlaxRobertaForMultipleChoice"),b0t.forEach(t),vIr=r(DPe," (RoBERTa model)"),DPe.forEach(t),FIr=i(To),hw=n(To,"LI",{});var GPe=s(hw);iTe=n(GPe,"STRONG",{});var v0t=s(iTe);TIr=r(v0t,"roformer"),v0t.forEach(t),MIr=r(GPe," \u2014 "),UY=n(GPe,"A",{href:!0});var F0t=s(UY);EIr=r(F0t,"FlaxRoFormerForMultipleChoice"),F0t.forEach(t),CIr=r(GPe," (RoFormer model)"),GPe.forEach(t),wIr=i(To),pw=n(To,"LI",{});var OPe=s(pw);dTe=n(OPe,"STRONG",{});var T0t=s(dTe);AIr=r(T0t,"xlm-roberta"),T0t.forEach(t),yIr=r(OPe," \u2014 "),JY=n(OPe,"A",{href:!0});var M0t=s(JY);LIr=r(M0t,"FlaxXLMRobertaForMultipleChoice"),M0t.forEach(t),xIr=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),To.forEach(t),$Ir=i(oi),T(uw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Xqe=i(f),Zc=n(f,"H2",{class:!0});var Yje=s(Zc);_w=n(Yje,"A",{id:!0,class:!0,href:!0});var E0t=s(_w);cTe=n(E0t,"SPAN",{});var C0t=s(cTe);T(O7.$$.fragment,C0t),C0t.forEach(t),E0t.forEach(t),kIr=i(Yje),fTe=n(Yje,"SPAN",{});var w0t=s(fTe);SIr=r(w0t,"FlaxAutoModelForNextSentencePrediction"),w0t.forEach(t),Yje.forEach(t),zqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(V7.$$.fragment,ri),RIr=i(ri),ef=n(ri,"P",{});var JZ=s(ef);BIr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=n(JZ,"A",{href:!0});var A0t=s(YY);PIr=r(A0t,"from_pretrained()"),A0t.forEach(t),IIr=r(JZ," class method or the "),KY=n(JZ,"A",{href:!0});var y0t=s(KY);qIr=r(y0t,"from_config()"),y0t.forEach(t),NIr=r(JZ,` class
method.`),JZ.forEach(t),jIr=i(ri),X7=n(ri,"P",{});var Kje=s(X7);DIr=r(Kje,"This class cannot be instantiated directly using "),mTe=n(Kje,"CODE",{});var L0t=s(mTe);GIr=r(L0t,"__init__()"),L0t.forEach(t),OIr=r(Kje," (throws an error)."),Kje.forEach(t),VIr=i(ri),Ht=n(ri,"DIV",{class:!0});var V0=s(Ht);T(z7.$$.fragment,V0),XIr=i(V0),gTe=n(V0,"P",{});var x0t=s(gTe);zIr=r(x0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x0t.forEach(t),QIr=i(V0),of=n(V0,"P",{});var YZ=s(of);WIr=r(YZ,`Note:
Loading a model from its configuration file does `),hTe=n(YZ,"STRONG",{});var $0t=s(hTe);HIr=r($0t,"not"),$0t.forEach(t),UIr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(YZ,"A",{href:!0});var k0t=s(ZY);JIr=r(k0t,"from_pretrained()"),k0t.forEach(t),YIr=r(YZ," to load the model weights."),YZ.forEach(t),KIr=i(V0),T(bw.$$.fragment,V0),V0.forEach(t),ZIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Q7.$$.fragment,ti),eqr=i(ti),pTe=n(ti,"P",{});var S0t=s(pTe);oqr=r(S0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S0t.forEach(t),rqr=i(ti),En=n(ti,"P",{});var X0=s(En);tqr=r(X0,"The model class to instantiate is selected based on the "),uTe=n(X0,"CODE",{});var R0t=s(uTe);aqr=r(R0t,"model_type"),R0t.forEach(t),nqr=r(X0,` property of the config object (either
passed as an argument or loaded from `),_Te=n(X0,"CODE",{});var B0t=s(_Te);sqr=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),lqr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(X0,"CODE",{});var P0t=s(bTe);iqr=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),dqr=r(X0,":"),X0.forEach(t),cqr=i(ti),vTe=n(ti,"UL",{});var I0t=s(vTe);vw=n(I0t,"LI",{});var VPe=s(vw);FTe=n(VPe,"STRONG",{});var q0t=s(FTe);fqr=r(q0t,"bert"),q0t.forEach(t),mqr=r(VPe," \u2014 "),eK=n(VPe,"A",{href:!0});var N0t=s(eK);gqr=r(N0t,"FlaxBertForNextSentencePrediction"),N0t.forEach(t),hqr=r(VPe," (BERT model)"),VPe.forEach(t),I0t.forEach(t),pqr=i(ti),T(Fw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Qqe=i(f),rf=n(f,"H2",{class:!0});var Zje=s(rf);Tw=n(Zje,"A",{id:!0,class:!0,href:!0});var j0t=s(Tw);TTe=n(j0t,"SPAN",{});var D0t=s(TTe);T(W7.$$.fragment,D0t),D0t.forEach(t),j0t.forEach(t),uqr=i(Zje),MTe=n(Zje,"SPAN",{});var G0t=s(MTe);_qr=r(G0t,"FlaxAutoModelForImageClassification"),G0t.forEach(t),Zje.forEach(t),Wqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(H7.$$.fragment,ai),bqr=i(ai),tf=n(ai,"P",{});var KZ=s(tf);vqr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oK=n(KZ,"A",{href:!0});var O0t=s(oK);Fqr=r(O0t,"from_pretrained()"),O0t.forEach(t),Tqr=r(KZ," class method or the "),rK=n(KZ,"A",{href:!0});var V0t=s(rK);Mqr=r(V0t,"from_config()"),V0t.forEach(t),Eqr=r(KZ,` class
method.`),KZ.forEach(t),Cqr=i(ai),U7=n(ai,"P",{});var eDe=s(U7);wqr=r(eDe,"This class cannot be instantiated directly using "),ETe=n(eDe,"CODE",{});var X0t=s(ETe);Aqr=r(X0t,"__init__()"),X0t.forEach(t),yqr=r(eDe," (throws an error)."),eDe.forEach(t),Lqr=i(ai),Ut=n(ai,"DIV",{class:!0});var z0=s(Ut);T(J7.$$.fragment,z0),xqr=i(z0),CTe=n(z0,"P",{});var z0t=s(CTe);$qr=r(z0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z0t.forEach(t),kqr=i(z0),af=n(z0,"P",{});var ZZ=s(af);Sqr=r(ZZ,`Note:
Loading a model from its configuration file does `),wTe=n(ZZ,"STRONG",{});var Q0t=s(wTe);Rqr=r(Q0t,"not"),Q0t.forEach(t),Bqr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(ZZ,"A",{href:!0});var W0t=s(tK);Pqr=r(W0t,"from_pretrained()"),W0t.forEach(t),Iqr=r(ZZ," to load the model weights."),ZZ.forEach(t),qqr=i(z0),T(Mw.$$.fragment,z0),z0.forEach(t),Nqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Y7.$$.fragment,ni),jqr=i(ni),ATe=n(ni,"P",{});var H0t=s(ATe);Dqr=r(H0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),H0t.forEach(t),Gqr=i(ni),Cn=n(ni,"P",{});var Q0=s(Cn);Oqr=r(Q0,"The model class to instantiate is selected based on the "),yTe=n(Q0,"CODE",{});var U0t=s(yTe);Vqr=r(U0t,"model_type"),U0t.forEach(t),Xqr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),LTe=n(Q0,"CODE",{});var J0t=s(LTe);zqr=r(J0t,"pretrained_model_name_or_path"),J0t.forEach(t),Qqr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(Q0,"CODE",{});var Y0t=s(xTe);Wqr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),Hqr=r(Q0,":"),Q0.forEach(t),Uqr=i(ni),K7=n(ni,"UL",{});var oDe=s(K7);Ew=n(oDe,"LI",{});var XPe=s(Ew);$Te=n(XPe,"STRONG",{});var K0t=s($Te);Jqr=r(K0t,"beit"),K0t.forEach(t),Yqr=r(XPe," \u2014 "),aK=n(XPe,"A",{href:!0});var Z0t=s(aK);Kqr=r(Z0t,"FlaxBeitForImageClassification"),Z0t.forEach(t),Zqr=r(XPe," (BEiT model)"),XPe.forEach(t),eNr=i(oDe),Cw=n(oDe,"LI",{});var zPe=s(Cw);kTe=n(zPe,"STRONG",{});var eyt=s(kTe);oNr=r(eyt,"vit"),eyt.forEach(t),rNr=r(zPe," \u2014 "),nK=n(zPe,"A",{href:!0});var oyt=s(nK);tNr=r(oyt,"FlaxViTForImageClassification"),oyt.forEach(t),aNr=r(zPe," (ViT model)"),zPe.forEach(t),oDe.forEach(t),nNr=i(ni),T(ww.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Hqe=i(f),nf=n(f,"H2",{class:!0});var rDe=s(nf);Aw=n(rDe,"A",{id:!0,class:!0,href:!0});var ryt=s(Aw);STe=n(ryt,"SPAN",{});var tyt=s(STe);T(Z7.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),sNr=i(rDe),RTe=n(rDe,"SPAN",{});var ayt=s(RTe);lNr=r(ayt,"FlaxAutoModelForVision2Seq"),ayt.forEach(t),rDe.forEach(t),Uqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(e9.$$.fragment,si),iNr=i(si),sf=n(si,"P",{});var eee=s(sf);dNr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sK=n(eee,"A",{href:!0});var nyt=s(sK);cNr=r(nyt,"from_pretrained()"),nyt.forEach(t),fNr=r(eee," class method or the "),lK=n(eee,"A",{href:!0});var syt=s(lK);mNr=r(syt,"from_config()"),syt.forEach(t),gNr=r(eee,` class
method.`),eee.forEach(t),hNr=i(si),o9=n(si,"P",{});var tDe=s(o9);pNr=r(tDe,"This class cannot be instantiated directly using "),BTe=n(tDe,"CODE",{});var lyt=s(BTe);uNr=r(lyt,"__init__()"),lyt.forEach(t),_Nr=r(tDe," (throws an error)."),tDe.forEach(t),bNr=i(si),Jt=n(si,"DIV",{class:!0});var W0=s(Jt);T(r9.$$.fragment,W0),vNr=i(W0),PTe=n(W0,"P",{});var iyt=s(PTe);FNr=r(iyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iyt.forEach(t),TNr=i(W0),lf=n(W0,"P",{});var oee=s(lf);MNr=r(oee,`Note:
Loading a model from its configuration file does `),ITe=n(oee,"STRONG",{});var dyt=s(ITe);ENr=r(dyt,"not"),dyt.forEach(t),CNr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(oee,"A",{href:!0});var cyt=s(iK);wNr=r(cyt,"from_pretrained()"),cyt.forEach(t),ANr=r(oee," to load the model weights."),oee.forEach(t),yNr=i(W0),T(yw.$$.fragment,W0),W0.forEach(t),LNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(t9.$$.fragment,li),xNr=i(li),qTe=n(li,"P",{});var fyt=s(qTe);$Nr=r(fyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fyt.forEach(t),kNr=i(li),wn=n(li,"P",{});var H0=s(wn);SNr=r(H0,"The model class to instantiate is selected based on the "),NTe=n(H0,"CODE",{});var myt=s(NTe);RNr=r(myt,"model_type"),myt.forEach(t),BNr=r(H0,` property of the config object (either
passed as an argument or loaded from `),jTe=n(H0,"CODE",{});var gyt=s(jTe);PNr=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),INr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(H0,"CODE",{});var hyt=s(DTe);qNr=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),NNr=r(H0,":"),H0.forEach(t),jNr=i(li),GTe=n(li,"UL",{});var pyt=s(GTe);Lw=n(pyt,"LI",{});var QPe=s(Lw);OTe=n(QPe,"STRONG",{});var uyt=s(OTe);DNr=r(uyt,"vision-encoder-decoder"),uyt.forEach(t),GNr=r(QPe," \u2014 "),dK=n(QPe,"A",{href:!0});var _yt=s(dK);ONr=r(_yt,"FlaxVisionEncoderDecoderModel"),_yt.forEach(t),VNr=r(QPe," (Vision Encoder decoder model)"),QPe.forEach(t),pyt.forEach(t),XNr=i(li),T(xw.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(T8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(M$,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(E$,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertConfig"),c(C$,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartConfig"),c(w$,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitConfig"),c(A$,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertConfig"),c(y$,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(L$,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdConfig"),c(x$,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c($$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(k$,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(S$,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertConfig"),c(R$,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineConfig"),c(B$,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPConfig"),c(P$,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertConfig"),c(I$,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextConfig"),c(q$,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLConfig"),c(N$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(j$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(D$,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(G$,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaConfig"),c(O$,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(V$,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(X$,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTConfig"),c(z$,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrConfig"),c(Q$,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertConfig"),c(W$,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRConfig"),c(H$,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTConfig"),c(U$,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraConfig"),c(J$,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Y$,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertConfig"),c(K$,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaConfig"),c(Z$,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetConfig"),c(ek,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTConfig"),c(ok,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelConfig"),c(rk,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNConfig"),c(tk,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Config"),c(ak,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nk,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJConfig"),c(sk,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertConfig"),c(lk,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertConfig"),c(ik,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(dk,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ck,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(fk,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDConfig"),c(mk,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerConfig"),c(gk,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeConfig"),c(hk,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertConfig"),c(pk,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Config"),c(uk,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianConfig"),c(_k,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(bk,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartConfig"),c(vk,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Fk,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Tk,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetConfig"),c(Mk,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Config"),c(Ek,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ck,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wk,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTConfig"),c(Ak,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusConfig"),c(yk,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Lk,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartConfig"),c(xk,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($k,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kk,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Sk,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagConfig"),c(Rk,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmConfig"),c(Bk,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerConfig"),c(Pk,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetConfig"),c(Ik,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertConfig"),c(qk,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetConfig"),c(Nk,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertConfig"),c(jk,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaConfig"),c(Dk,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerConfig"),c(Gk,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerConfig"),c(Ok,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWConfig"),c(Vk,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDConfig"),c(Xk,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zk,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Qk,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Wk,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterConfig"),c(Hk,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Uk,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinConfig"),c(Jk,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Config"),c(Yk,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasConfig"),c(Kk,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Zk,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRConfig"),c(eS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(oS,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(rS,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanConfig"),c(tS,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltConfig"),c(aS,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(nS,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(sS,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(lS,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTConfig"),c(iS,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(dS,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(cS,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMConfig"),c(fS,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMConfig"),c(mS,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMConfig"),c(gS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(hS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(pS,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(uS,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetConfig"),c(_S,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosConfig"),c(bS,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(vS,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(FS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(TS,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MS,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizer"),c(ES,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartTokenizerFast"),c(CS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizer"),c(wS,"href","/docs/transformers/pr_16543/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(AS,"href","/docs/transformers/pr_16543/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(yS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(LS,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(xS,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c($S,"href","/docs/transformers/pr_16543/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(kS,"href","/docs/transformers/pr_16543/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(SS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(RS,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(BS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(PS,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(IS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(qS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(NS,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(jS,"href","/docs/transformers/pr_16543/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(DS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizer"),c(GS,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(OS,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineTokenizer"),c(VS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizer"),c(XS,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(zS,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(QS,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(WS,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizer"),c(HS,"href","/docs/transformers/pr_16543/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(US,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(JS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YS,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ZS,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(eR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(oR,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(rR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(tR,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(aR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(nR,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(sR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizer"),c(lR,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(iR,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(dR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizer"),c(cR,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(fR,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(mR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizer"),c(gR,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(hR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vR,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizer"),c(TR,"href","/docs/transformers/pr_16543/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ER,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CR,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(AR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(yR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(LR,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(xR,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c($R,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(kR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizer"),c(SR,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDTokenizerFast"),c(RR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizer"),c(BR,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(PR,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeTokenizer"),c(IR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(qR,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(jR,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianTokenizer"),c(DR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizer"),c(GR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(OR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(VR,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(XR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(zR,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(QR,"href","/docs/transformers/pr_16543/en/model_doc/mluke#transformers.MLukeTokenizer"),c(WR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HR,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(UR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(JR,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(YR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(KR,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZR,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(eB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rB,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tB,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nB,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sB,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(lB,"href","/docs/transformers/pr_16543/en/model_doc/phobert#transformers.PhobertTokenizer"),c(iB,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartTokenizer"),c(dB,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(cB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(fB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(mB,"href","/docs/transformers/pr_16543/en/model_doc/rag#transformers.RagTokenizer"),c(gB,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizer"),c(hB,"href","/docs/transformers/pr_16543/en/model_doc/realm#transformers.RealmTokenizerFast"),c(pB,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizer"),c(uB,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_B,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bB,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FB,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(CB,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(AB,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(yB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LB,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xB,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($B,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5Tokenizer"),c(SB,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.T5TokenizerFast"),c(RB,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasTokenizer"),c(BB,"href","/docs/transformers/pr_16543/en/model_doc/tapex#transformers.TapexTokenizer"),c(PB,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(IB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizer"),c(qB,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertTokenizerFast"),c(NB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jB,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(DB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizer"),c(GB,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(OB,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMTokenizer"),c(VB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(XB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zB,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WB,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(UB,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(JB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizer"),c(YB,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(KB,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(ZB,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(eP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(oP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tP,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(dP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fP,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(mP,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(gP,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(hP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uP,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(_P,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EP,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(CP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPProcessor"),c(AP,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yP,"href","/docs/transformers/pr_16543/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(kP,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(SP,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRProcessor"),c(RP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltProcessor"),c(IP,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NP,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(jP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GP,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OP,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertModel"),c(VP,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartModel"),c(XP,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitModel"),c(zP,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertModel"),c(QP,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(WP,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdModel"),c(HP,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(UP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(JP,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(YP,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertModel"),c(KP,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineModel"),c(ZP,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.CLIPModel"),c(eI,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertModel"),c(oI,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextModel"),c(rI,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLModel"),c(tI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(aI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(nI,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(sI,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaModel"),c(lI,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(iI,"href","/docs/transformers/pr_16543/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(dI,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTModel"),c(cI,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrModel"),c(fI,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertModel"),c(mI,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(gI,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTModel"),c(hI,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraModel"),c(pI,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertModel"),c(uI,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaModel"),c(_I,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetModel"),c(bI,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTModel"),c(vI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelModel"),c(FI,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelBaseModel"),c(TI,"href","/docs/transformers/pr_16543/en/model_doc/glpn#transformers.GLPNModel"),c(MI,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2Model"),c(EI,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(CI,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJModel"),c(wI,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertModel"),c(AI,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertModel"),c(yI,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(xI,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($I,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDModel"),c(kI,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerModel"),c(SI,"href","/docs/transformers/pr_16543/en/model_doc/luke#transformers.LukeModel"),c(RI,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertModel"),c(BI,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100Model"),c(PI,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianModel"),c(II,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerModel"),c(qI,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartModel"),c(NI,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(jI,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertModel"),c(DI,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetModel"),c(GI,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5Model"),c(OI,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerModel"),c(VI,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(XI,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTModel"),c(zI,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusModel"),c(QI,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverModel"),c(WI,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartModel"),c(HI,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerModel"),c(UI,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(JI,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertModel"),c(YI,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModel"),c(KI,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetModel"),c(ZI,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertModel"),c(eq,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetModel"),c(oq,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(rq,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaModel"),c(tq,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerModel"),c(aq,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerModel"),c(nq,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWModel"),c(sq,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDModel"),c(lq,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(iq,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterModel"),c(dq,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(cq,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinModel"),c(fq,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5Model"),c(mq,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasModel"),c(gq,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(hq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechModel"),c(pq,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(uq,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanModel"),c(_q,"href","/docs/transformers/pr_16543/en/model_doc/vilt#transformers.ViltModel"),c(bq,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(vq,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Fq,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTModel"),c(Tq,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Mq,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Eq,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMModel"),c(Cq,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMModel"),c(wq,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMModel"),c(Aq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(yq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Lq,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(xq,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetModel"),c($q,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosModel"),c(kq,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(Sq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bq,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Iq,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qq,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForPreTraining"),c(Nq,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(jq,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Gq,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Vq,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Qq,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Wq,"href","/docs/transformers/pr_16543/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Hq,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Uq,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jq,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Yq,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Kq,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eN,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oN,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tN,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aN,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sN,"href","/docs/transformers/pr_16543/en/model_doc/retribert#transformers.RetriBertModel"),c(lN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iN,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dN,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cN,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fN,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gN,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hN,"href","/docs/transformers/pr_16543/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pN,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uN,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_N,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vN,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FN,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(TN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EN,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CN,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForCausalLM"),c(wN,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertLMHeadModel"),c(AN,"href","/docs/transformers/pr_16543/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(yN,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LN,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xN,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($N,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kN,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(SN,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(RN,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BN,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForCausalLM"),c(PN,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(IN,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qN,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(NN,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianForCausalLM"),c(jN,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForCausalLM"),c(DN,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(GN,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(ON,"href","/docs/transformers/pr_16543/en/model_doc/opt#transformers.OPTForCausalLM"),c(VN,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(XN,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zN,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(QN,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(WN,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(HN,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(UN,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(JN,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(YN,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(KN,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZN,"href","/docs/transformers/pr_16543/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(ej,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nj,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForMaskedLM"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(sj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ij,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dj,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gj,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hj,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uj,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bj,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Tj,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wj,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xj,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($j,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kj,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(qj,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jj,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Dj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Oj,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSeq2SeqLM"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Vj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qj,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Yj,"href","/docs/transformers/pr_16543/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_16543/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.MarianMTModel"),c(oD,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_16543/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForSequenceClassification"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(iD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($D,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16543/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForMultipleChoice"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(tG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.AutoModelForNextSentencePrediction"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(PG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(GG,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(OG,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o2,"id","transformers.AutoModelForTokenClassification"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(VG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zG,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QG,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WG,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForTokenClassification"),c(HG,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(UG,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(JG,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForTokenClassification"),c(YG,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(KG,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(eO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(oO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(tO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(aO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(nO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(sO,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(lO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(dO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(cO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hO,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pO,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bO,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vO,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FO,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MO,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EO,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CO,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForQuestionAnswering"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(wO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16543/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16543/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OO,"href","/docs/transformers/pr_16543/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16543/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16543/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16543/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16543/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16543/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16543/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16543/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16543/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(dV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(mV,"href","/docs/transformers/pr_16543/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.AutoModelForTableQuestionAnswering"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(gV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.AutoModelForImageClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(_V,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForImageClassification"),c(TV,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(MV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(EV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassification"),c(CV,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(wV,"href","/docs/transformers/pr_16543/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(AV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(yV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(LV,"href","/docs/transformers/pr_16543/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xV,"href","/docs/transformers/pr_16543/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($V,"href","/docs/transformers/pr_16543/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kV,"href","/docs/transformers/pr_16543/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SV,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RV,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForImageClassification"),c(BV,"href","/docs/transformers/pr_16543/en/model_doc/van#transformers.VanForImageClassification"),c(PV,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.AutoModelForVision2Seq"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(IV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.AutoModelForAudioClassification"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(DV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(XV,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(QV,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(WV,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(HV,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(UV,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(JV,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.AutoModelForAudioFrameClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(YV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.AutoModelForCTC"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(aX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(iX,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.HubertForCTC"),c(dX,"href","/docs/transformers/pr_16543/en/model_doc/sew#transformers.SEWForCTC"),c(cX,"href","/docs/transformers/pr_16543/en/model_doc/sew-d#transformers.SEWDForCTC"),c(fX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(mX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(gX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(hX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.AutoModelForSpeechSeq2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(pX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_16543/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(vX,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.AutoModelForAudioXVector"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(FX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(CX,"href","/docs/transformers/pr_16543/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(wX,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(AX,"href","/docs/transformers/pr_16543/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.AutoModelForMaskedImageModeling"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(yX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_16543/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kX,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SX,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.AutoModelForObjectDetection"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(RX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForObjectDetection"),c(qX,"href","/docs/transformers/pr_16543/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForImageSegmentation"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(NX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_16543/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForSemanticSegmentation"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(OX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(QX,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(WX,"href","/docs/transformers/pr_16543/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HX,"href","/docs/transformers/pr_16543/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForInstanceSegmentation"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(UX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_16543/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.TFAutoModel"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertModel"),c(tz,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartModel"),c(az,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertModel"),c(nz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(sz,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(lz,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertModel"),c(iz,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.TFCLIPModel"),c(dz,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertModel"),c(cz,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextModel"),c(fz,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLModel"),c(mz,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(gz,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaModel"),c(hz,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(pz,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(uz,"href","/docs/transformers/pr_16543/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_z,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraModel"),c(bz,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(vz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelModel"),c(Fz,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Tz,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Mz,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJModel"),c(Ez,"href","/docs/transformers/pr_16543/en/model_doc/hubert#transformers.TFHubertModel"),c(Cz,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(wz,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDModel"),c(Az,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerModel"),c(yz,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Lz,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianModel"),c(xz,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartModel"),c($z,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(kz,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Sz,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5Model"),c(Rz,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Bz,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Pz,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertModel"),c(Iz,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaModel"),c(qz,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Nz,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(jz,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinModel"),c(Dz,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5Model"),c(Gz,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasModel"),c(Oz,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Vz,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTModel"),c(Xz,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zz,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Qz,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMModel"),c(Wz,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMModel"),c(Hz,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Uz,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.TFAutoModelForPreTraining"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Jz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(eQ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForPreTraining"),c(rQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(sQ,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(iQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dQ,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16543/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(fQ,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(mQ,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bQ,"href","/docs/transformers/pr_16543/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(vQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.TFAutoModelForCausalLM"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(AQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(yQ,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LQ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xQ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c($Q,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(kQ,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(SQ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(RQ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(BQ,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(PQ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(IQ,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.TFAutoModelForImageClassification"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_16543/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(OQ,"href","/docs/transformers/pr_16543/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(VQ,"href","/docs/transformers/pr_16543/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(XQ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.TFAutoModelForMaskedLM"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(zQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(eW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(oW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(rW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(tW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(aW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(sW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(lW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(dW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(fW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gW,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.TFAutoModelForSeq2SeqLM"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(hW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(TW,"href","/docs/transformers/pr_16543/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.TFMarianMTModel"),c(EW,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W6,"id","transformers.TFAutoModelForSequenceClassification"),c(W6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W6,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(yW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16543/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(jW,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(GW,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(VW,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(XW,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16543/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16543/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.TFAutoModelForMultipleChoice"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(rH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(fH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(gH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(hH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(bH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(vH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(FH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(TH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.TFAutoModelForNextSentencePrediction"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(MH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(AH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(yH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_16543/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.TFAutoModelForTokenClassification"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(kH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(PH,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(IH,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qH,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NH,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jH,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DH,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(GH,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(OH,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(VH,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(XH,"href","/docs/transformers/pr_16543/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zH,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(QH,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(WH,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(HH,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(UH,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(JH,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(YH,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(KH,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZH,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FM,"id","transformers.TFAutoModelForQuestionAnswering"),c(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(eU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_16543/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_16543/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_16543/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_16543/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_16543/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(mU,"href","/docs/transformers/pr_16543/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_16543/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_16543/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16543/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_16543/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_16543/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(TU,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_16543/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForVision2Seq"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(EU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(yU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_16543/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.FlaxAutoModel"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(kU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertModel"),c(PU,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartModel"),c(IU,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitModel"),c(qU,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertModel"),c(NU,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(jU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(DU,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(GU,"href","/docs/transformers/pr_16543/en/model_doc/clip#transformers.FlaxCLIPModel"),c(OU,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(VU,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraModel"),c(XU,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(zU,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(QU,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(WU,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianModel"),c(HU,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UU,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JU,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(YU,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(KU,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(ZU,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5Model"),c(eJ,"href","/docs/transformers/pr_16543/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(oJ,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTModel"),c(rJ,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(tJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(aJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.FlaxAutoModelForCausalLM"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(nJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(dJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(cJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(fJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(mJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(gJ,"href","/docs/transformers/pr_16543/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(hJ,"href","/docs/transformers/pr_16543/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(pJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(uJ,"href","/docs/transformers/pr_16543/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.FlaxAutoModelForPreTraining"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(_J,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(TJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(CJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(wJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xJ,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c($J,"href","/docs/transformers/pr_16543/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(kJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.FlaxAutoModelForMaskedLM"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(NJ,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(jJ,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(DJ,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(GJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VJ,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XJ,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_16543/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_16543/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(KJ,"href","/docs/transformers/pr_16543/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(ZJ,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eY,"href","/docs/transformers/pr_16543/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_16543/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_16543/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(tY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(iY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(cY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(fY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(mY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(gY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(pY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(uY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_16543/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_16543/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForTokenClassification"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(xY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(RY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(BY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(PY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(IY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(qY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(NY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(jY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(DY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16543/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(XY,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zY,"href","/docs/transformers/pr_16543/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(QY,"href","/docs/transformers/pr_16543/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(WY,"href","/docs/transformers/pr_16543/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(HY,"href","/docs/transformers/pr_16543/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(UY,"href","/docs/transformers/pr_16543/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(JY,"href","/docs/transformers/pr_16543/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(YY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_16543/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForImageClassification"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(oK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_16543/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nK,"href","/docs/transformers/pr_16543/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(sK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_16543/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_16543/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,mf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,U0),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,yn),e(yn,J0),e(Xe,Ln),e(Xe,xn),e(xn,Y0),e(Xe,mi),e(Xe,$n),e($n,K0),e(Xe,gi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,u$),e(Ae,hi),e(hi,_$),e(Ae,b$),b(f,Eo,_),b(f,Ea,_),e(Ea,v$),e(Ea,pf),e(pf,F$),e(Ea,aDe),b(f,WPe,_),b(f,pi,_),e(pi,uf),e(uf,ree),M(Z0,ree,null),e(pi,nDe),e(pi,tee),e(tee,sDe),b(f,HPe,_),b(f,kn,_),e(kn,lDe),e(kn,aee),e(aee,iDe),e(kn,dDe),e(kn,nee),e(nee,cDe),e(kn,fDe),b(f,UPe,_),M(ey,f,_),b(f,JPe,_),b(f,T$,_),e(T$,mDe),b(f,YPe,_),M(_f,f,_),b(f,KPe,_),b(f,ui,_),e(ui,bf),e(bf,see),M(oy,see,null),e(ui,gDe),e(ui,lee),e(lee,hDe),b(f,ZPe,_),b(f,Co,_),M(ry,Co,null),e(Co,pDe),e(Co,ty),e(ty,uDe),e(ty,M$),e(M$,_De),e(ty,bDe),e(Co,vDe),e(Co,ay),e(ay,FDe),e(ay,iee),e(iee,TDe),e(ay,MDe),e(Co,EDe),e(Co,Er),M(ny,Er,null),e(Er,CDe),e(Er,dee),e(dee,wDe),e(Er,ADe),e(Er,_i),e(_i,yDe),e(_i,cee),e(cee,LDe),e(_i,xDe),e(_i,fee),e(fee,$De),e(_i,kDe),e(Er,SDe),e(Er,y),e(y,vf),e(vf,mee),e(mee,RDe),e(vf,BDe),e(vf,E$),e(E$,PDe),e(vf,IDe),e(y,qDe),e(y,Ff),e(Ff,gee),e(gee,NDe),e(Ff,jDe),e(Ff,C$),e(C$,DDe),e(Ff,GDe),e(y,ODe),e(y,Tf),e(Tf,hee),e(hee,VDe),e(Tf,XDe),e(Tf,w$),e(w$,zDe),e(Tf,QDe),e(y,WDe),e(y,Mf),e(Mf,pee),e(pee,HDe),e(Mf,UDe),e(Mf,A$),e(A$,JDe),e(Mf,YDe),e(y,KDe),e(y,Ef),e(Ef,uee),e(uee,ZDe),e(Ef,eGe),e(Ef,y$),e(y$,oGe),e(Ef,rGe),e(y,tGe),e(y,Cf),e(Cf,_ee),e(_ee,aGe),e(Cf,nGe),e(Cf,L$),e(L$,sGe),e(Cf,lGe),e(y,iGe),e(y,wf),e(wf,bee),e(bee,dGe),e(wf,cGe),e(wf,x$),e(x$,fGe),e(wf,mGe),e(y,gGe),e(y,Af),e(Af,vee),e(vee,hGe),e(Af,pGe),e(Af,$$),e($$,uGe),e(Af,_Ge),e(y,bGe),e(y,yf),e(yf,Fee),e(Fee,vGe),e(yf,FGe),e(yf,k$),e(k$,TGe),e(yf,MGe),e(y,EGe),e(y,Lf),e(Lf,Tee),e(Tee,CGe),e(Lf,wGe),e(Lf,S$),e(S$,AGe),e(Lf,yGe),e(y,LGe),e(y,xf),e(xf,Mee),e(Mee,xGe),e(xf,$Ge),e(xf,R$),e(R$,kGe),e(xf,SGe),e(y,RGe),e(y,$f),e($f,Eee),e(Eee,BGe),e($f,PGe),e($f,B$),e(B$,IGe),e($f,qGe),e(y,NGe),e(y,kf),e(kf,Cee),e(Cee,jGe),e(kf,DGe),e(kf,P$),e(P$,GGe),e(kf,OGe),e(y,VGe),e(y,Sf),e(Sf,wee),e(wee,XGe),e(Sf,zGe),e(Sf,I$),e(I$,QGe),e(Sf,WGe),e(y,HGe),e(y,Rf),e(Rf,Aee),e(Aee,UGe),e(Rf,JGe),e(Rf,q$),e(q$,YGe),e(Rf,KGe),e(y,ZGe),e(y,Bf),e(Bf,yee),e(yee,eOe),e(Bf,oOe),e(Bf,N$),e(N$,rOe),e(Bf,tOe),e(y,aOe),e(y,Pf),e(Pf,Lee),e(Lee,nOe),e(Pf,sOe),e(Pf,j$),e(j$,lOe),e(Pf,iOe),e(y,dOe),e(y,If),e(If,xee),e(xee,cOe),e(If,fOe),e(If,D$),e(D$,mOe),e(If,gOe),e(y,hOe),e(y,qf),e(qf,$ee),e($ee,pOe),e(qf,uOe),e(qf,G$),e(G$,_Oe),e(qf,bOe),e(y,vOe),e(y,Nf),e(Nf,kee),e(kee,FOe),e(Nf,TOe),e(Nf,O$),e(O$,MOe),e(Nf,EOe),e(y,COe),e(y,jf),e(jf,See),e(See,wOe),e(jf,AOe),e(jf,V$),e(V$,yOe),e(jf,LOe),e(y,xOe),e(y,Df),e(Df,Ree),e(Ree,$Oe),e(Df,kOe),e(Df,X$),e(X$,SOe),e(Df,ROe),e(y,BOe),e(y,Gf),e(Gf,Bee),e(Bee,POe),e(Gf,IOe),e(Gf,z$),e(z$,qOe),e(Gf,NOe),e(y,jOe),e(y,Of),e(Of,Pee),e(Pee,DOe),e(Of,GOe),e(Of,Q$),e(Q$,OOe),e(Of,VOe),e(y,XOe),e(y,Vf),e(Vf,Iee),e(Iee,zOe),e(Vf,QOe),e(Vf,W$),e(W$,WOe),e(Vf,HOe),e(y,UOe),e(y,Xf),e(Xf,qee),e(qee,JOe),e(Xf,YOe),e(Xf,H$),e(H$,KOe),e(Xf,ZOe),e(y,eVe),e(y,zf),e(zf,Nee),e(Nee,oVe),e(zf,rVe),e(zf,U$),e(U$,tVe),e(zf,aVe),e(y,nVe),e(y,Qf),e(Qf,jee),e(jee,sVe),e(Qf,lVe),e(Qf,J$),e(J$,iVe),e(Qf,dVe),e(y,cVe),e(y,Wf),e(Wf,Dee),e(Dee,fVe),e(Wf,mVe),e(Wf,Y$),e(Y$,gVe),e(Wf,hVe),e(y,pVe),e(y,Hf),e(Hf,Gee),e(Gee,uVe),e(Hf,_Ve),e(Hf,K$),e(K$,bVe),e(Hf,vVe),e(y,FVe),e(y,Uf),e(Uf,Oee),e(Oee,TVe),e(Uf,MVe),e(Uf,Z$),e(Z$,EVe),e(Uf,CVe),e(y,wVe),e(y,Jf),e(Jf,Vee),e(Vee,AVe),e(Jf,yVe),e(Jf,ek),e(ek,LVe),e(Jf,xVe),e(y,$Ve),e(y,Yf),e(Yf,Xee),e(Xee,kVe),e(Yf,SVe),e(Yf,ok),e(ok,RVe),e(Yf,BVe),e(y,PVe),e(y,Kf),e(Kf,zee),e(zee,IVe),e(Kf,qVe),e(Kf,rk),e(rk,NVe),e(Kf,jVe),e(y,DVe),e(y,Zf),e(Zf,Qee),e(Qee,GVe),e(Zf,OVe),e(Zf,tk),e(tk,VVe),e(Zf,XVe),e(y,zVe),e(y,em),e(em,Wee),e(Wee,QVe),e(em,WVe),e(em,ak),e(ak,HVe),e(em,UVe),e(y,JVe),e(y,om),e(om,Hee),e(Hee,YVe),e(om,KVe),e(om,nk),e(nk,ZVe),e(om,eXe),e(y,oXe),e(y,rm),e(rm,Uee),e(Uee,rXe),e(rm,tXe),e(rm,sk),e(sk,aXe),e(rm,nXe),e(y,sXe),e(y,tm),e(tm,Jee),e(Jee,lXe),e(tm,iXe),e(tm,lk),e(lk,dXe),e(tm,cXe),e(y,fXe),e(y,am),e(am,Yee),e(Yee,mXe),e(am,gXe),e(am,ik),e(ik,hXe),e(am,pXe),e(y,uXe),e(y,nm),e(nm,Kee),e(Kee,_Xe),e(nm,bXe),e(nm,dk),e(dk,vXe),e(nm,FXe),e(y,TXe),e(y,sm),e(sm,Zee),e(Zee,MXe),e(sm,EXe),e(sm,ck),e(ck,CXe),e(sm,wXe),e(y,AXe),e(y,lm),e(lm,eoe),e(eoe,yXe),e(lm,LXe),e(lm,fk),e(fk,xXe),e(lm,$Xe),e(y,kXe),e(y,im),e(im,ooe),e(ooe,SXe),e(im,RXe),e(im,mk),e(mk,BXe),e(im,PXe),e(y,IXe),e(y,dm),e(dm,roe),e(roe,qXe),e(dm,NXe),e(dm,gk),e(gk,jXe),e(dm,DXe),e(y,GXe),e(y,cm),e(cm,toe),e(toe,OXe),e(cm,VXe),e(cm,hk),e(hk,XXe),e(cm,zXe),e(y,QXe),e(y,fm),e(fm,aoe),e(aoe,WXe),e(fm,HXe),e(fm,pk),e(pk,UXe),e(fm,JXe),e(y,YXe),e(y,mm),e(mm,noe),e(noe,KXe),e(mm,ZXe),e(mm,uk),e(uk,eze),e(mm,oze),e(y,rze),e(y,gm),e(gm,soe),e(soe,tze),e(gm,aze),e(gm,_k),e(_k,nze),e(gm,sze),e(y,lze),e(y,hm),e(hm,loe),e(loe,ize),e(hm,dze),e(hm,bk),e(bk,cze),e(hm,fze),e(y,mze),e(y,pm),e(pm,ioe),e(ioe,gze),e(pm,hze),e(pm,vk),e(vk,pze),e(pm,uze),e(y,_ze),e(y,um),e(um,doe),e(doe,bze),e(um,vze),e(um,Fk),e(Fk,Fze),e(um,Tze),e(y,Mze),e(y,_m),e(_m,coe),e(coe,Eze),e(_m,Cze),e(_m,Tk),e(Tk,wze),e(_m,Aze),e(y,yze),e(y,bm),e(bm,foe),e(foe,Lze),e(bm,xze),e(bm,Mk),e(Mk,$ze),e(bm,kze),e(y,Sze),e(y,vm),e(vm,moe),e(moe,Rze),e(vm,Bze),e(vm,Ek),e(Ek,Pze),e(vm,Ize),e(y,qze),e(y,Fm),e(Fm,goe),e(goe,Nze),e(Fm,jze),e(Fm,Ck),e(Ck,Dze),e(Fm,Gze),e(y,Oze),e(y,Tm),e(Tm,hoe),e(hoe,Vze),e(Tm,Xze),e(Tm,wk),e(wk,zze),e(Tm,Qze),e(y,Wze),e(y,Mm),e(Mm,poe),e(poe,Hze),e(Mm,Uze),e(Mm,Ak),e(Ak,Jze),e(Mm,Yze),e(y,Kze),e(y,Em),e(Em,uoe),e(uoe,Zze),e(Em,eQe),e(Em,yk),e(yk,oQe),e(Em,rQe),e(y,tQe),e(y,Cm),e(Cm,_oe),e(_oe,aQe),e(Cm,nQe),e(Cm,Lk),e(Lk,sQe),e(Cm,lQe),e(y,iQe),e(y,wm),e(wm,boe),e(boe,dQe),e(wm,cQe),e(wm,xk),e(xk,fQe),e(wm,mQe),e(y,gQe),e(y,Am),e(Am,voe),e(voe,hQe),e(Am,pQe),e(Am,$k),e($k,uQe),e(Am,_Qe),e(y,bQe),e(y,ym),e(ym,Foe),e(Foe,vQe),e(ym,FQe),e(ym,kk),e(kk,TQe),e(ym,MQe),e(y,EQe),e(y,Lm),e(Lm,Toe),e(Toe,CQe),e(Lm,wQe),e(Lm,Sk),e(Sk,AQe),e(Lm,yQe),e(y,LQe),e(y,xm),e(xm,Moe),e(Moe,xQe),e(xm,$Qe),e(xm,Rk),e(Rk,kQe),e(xm,SQe),e(y,RQe),e(y,$m),e($m,Eoe),e(Eoe,BQe),e($m,PQe),e($m,Bk),e(Bk,IQe),e($m,qQe),e(y,NQe),e(y,km),e(km,Coe),e(Coe,jQe),e(km,DQe),e(km,Pk),e(Pk,GQe),e(km,OQe),e(y,VQe),e(y,Sm),e(Sm,woe),e(woe,XQe),e(Sm,zQe),e(Sm,Ik),e(Ik,QQe),e(Sm,WQe),e(y,HQe),e(y,Rm),e(Rm,Aoe),e(Aoe,UQe),e(Rm,JQe),e(Rm,qk),e(qk,YQe),e(Rm,KQe),e(y,ZQe),e(y,Bm),e(Bm,yoe),e(yoe,eWe),e(Bm,oWe),e(Bm,Nk),e(Nk,rWe),e(Bm,tWe),e(y,aWe),e(y,Pm),e(Pm,Loe),e(Loe,nWe),e(Pm,sWe),e(Pm,jk),e(jk,lWe),e(Pm,iWe),e(y,dWe),e(y,Im),e(Im,xoe),e(xoe,cWe),e(Im,fWe),e(Im,Dk),e(Dk,mWe),e(Im,gWe),e(y,hWe),e(y,qm),e(qm,$oe),e($oe,pWe),e(qm,uWe),e(qm,Gk),e(Gk,_We),e(qm,bWe),e(y,vWe),e(y,Nm),e(Nm,koe),e(koe,FWe),e(Nm,TWe),e(Nm,Ok),e(Ok,MWe),e(Nm,EWe),e(y,CWe),e(y,jm),e(jm,Soe),e(Soe,wWe),e(jm,AWe),e(jm,Vk),e(Vk,yWe),e(jm,LWe),e(y,xWe),e(y,Dm),e(Dm,Roe),e(Roe,$We),e(Dm,kWe),e(Dm,Xk),e(Xk,SWe),e(Dm,RWe),e(y,BWe),e(y,Gm),e(Gm,Boe),e(Boe,PWe),e(Gm,IWe),e(Gm,zk),e(zk,qWe),e(Gm,NWe),e(y,jWe),e(y,Om),e(Om,Poe),e(Poe,DWe),e(Om,GWe),e(Om,Qk),e(Qk,OWe),e(Om,VWe),e(y,XWe),e(y,Vm),e(Vm,Ioe),e(Ioe,zWe),e(Vm,QWe),e(Vm,Wk),e(Wk,WWe),e(Vm,HWe),e(y,UWe),e(y,Xm),e(Xm,qoe),e(qoe,JWe),e(Xm,YWe),e(Xm,Hk),e(Hk,KWe),e(Xm,ZWe),e(y,eHe),e(y,zm),e(zm,Noe),e(Noe,oHe),e(zm,rHe),e(zm,Uk),e(Uk,tHe),e(zm,aHe),e(y,nHe),e(y,Qm),e(Qm,joe),e(joe,sHe),e(Qm,lHe),e(Qm,Jk),e(Jk,iHe),e(Qm,dHe),e(y,cHe),e(y,Wm),e(Wm,Doe),e(Doe,fHe),e(Wm,mHe),e(Wm,Yk),e(Yk,gHe),e(Wm,hHe),e(y,pHe),e(y,Hm),e(Hm,Goe),e(Goe,uHe),e(Hm,_He),e(Hm,Kk),e(Kk,bHe),e(Hm,vHe),e(y,FHe),e(y,Um),e(Um,Ooe),e(Ooe,THe),e(Um,MHe),e(Um,Zk),e(Zk,EHe),e(Um,CHe),e(y,wHe),e(y,Jm),e(Jm,Voe),e(Voe,AHe),e(Jm,yHe),e(Jm,eS),e(eS,LHe),e(Jm,xHe),e(y,$He),e(y,Ym),e(Ym,Xoe),e(Xoe,kHe),e(Ym,SHe),e(Ym,oS),e(oS,RHe),e(Ym,BHe),e(y,PHe),e(y,Km),e(Km,zoe),e(zoe,IHe),e(Km,qHe),e(Km,rS),e(rS,NHe),e(Km,jHe),e(y,DHe),e(y,Zm),e(Zm,Qoe),e(Qoe,GHe),e(Zm,OHe),e(Zm,tS),e(tS,VHe),e(Zm,XHe),e(y,zHe),e(y,eg),e(eg,Woe),e(Woe,QHe),e(eg,WHe),e(eg,aS),e(aS,HHe),e(eg,UHe),e(y,JHe),e(y,og),e(og,Hoe),e(Hoe,YHe),e(og,KHe),e(og,nS),e(nS,ZHe),e(og,eUe),e(y,oUe),e(y,rg),e(rg,Uoe),e(Uoe,rUe),e(rg,tUe),e(rg,sS),e(sS,aUe),e(rg,nUe),e(y,sUe),e(y,tg),e(tg,Joe),e(Joe,lUe),e(tg,iUe),e(tg,lS),e(lS,dUe),e(tg,cUe),e(y,fUe),e(y,ag),e(ag,Yoe),e(Yoe,mUe),e(ag,gUe),e(ag,iS),e(iS,hUe),e(ag,pUe),e(y,uUe),e(y,ng),e(ng,Koe),e(Koe,_Ue),e(ng,bUe),e(ng,dS),e(dS,vUe),e(ng,FUe),e(y,TUe),e(y,sg),e(sg,Zoe),e(Zoe,MUe),e(sg,EUe),e(sg,cS),e(cS,CUe),e(sg,wUe),e(y,AUe),e(y,lg),e(lg,ere),e(ere,yUe),e(lg,LUe),e(lg,fS),e(fS,xUe),e(lg,$Ue),e(y,kUe),e(y,ig),e(ig,ore),e(ore,SUe),e(ig,RUe),e(ig,mS),e(mS,BUe),e(ig,PUe),e(y,IUe),e(y,dg),e(dg,rre),e(rre,qUe),e(dg,NUe),e(dg,gS),e(gS,jUe),e(dg,DUe),e(y,GUe),e(y,cg),e(cg,tre),e(tre,OUe),e(cg,VUe),e(cg,hS),e(hS,XUe),e(cg,zUe),e(y,QUe),e(y,fg),e(fg,are),e(are,WUe),e(fg,HUe),e(fg,pS),e(pS,UUe),e(fg,JUe),e(y,YUe),e(y,mg),e(mg,nre),e(nre,KUe),e(mg,ZUe),e(mg,uS),e(uS,eJe),e(mg,oJe),e(y,rJe),e(y,gg),e(gg,sre),e(sre,tJe),e(gg,aJe),e(gg,_S),e(_S,nJe),e(gg,sJe),e(y,lJe),e(y,hg),e(hg,lre),e(lre,iJe),e(hg,dJe),e(hg,bS),e(bS,cJe),e(hg,fJe),e(Er,mJe),M(pg,Er,null),e(Co,gJe),e(Co,ug),M(sy,ug,null),e(ug,hJe),e(ug,ire),e(ire,pJe),b(f,eIe,_),b(f,bi,_),e(bi,_g),e(_g,dre),M(ly,dre,null),e(bi,uJe),e(bi,cre),e(cre,_Je),b(f,oIe,_),b(f,wo,_),M(iy,wo,null),e(wo,bJe),e(wo,dy),e(dy,vJe),e(dy,vS),e(vS,FJe),e(dy,TJe),e(wo,MJe),e(wo,cy),e(cy,EJe),e(cy,fre),e(fre,CJe),e(cy,wJe),e(wo,AJe),e(wo,Cr),M(fy,Cr,null),e(Cr,yJe),e(Cr,mre),e(mre,LJe),e(Cr,xJe),e(Cr,Ca),e(Ca,$Je),e(Ca,gre),e(gre,kJe),e(Ca,SJe),e(Ca,hre),e(hre,RJe),e(Ca,BJe),e(Ca,pre),e(pre,PJe),e(Ca,IJe),e(Cr,qJe),e(Cr,k),e(k,Sn),e(Sn,ure),e(ure,NJe),e(Sn,jJe),e(Sn,FS),e(FS,DJe),e(Sn,GJe),e(Sn,TS),e(TS,OJe),e(Sn,VJe),e(k,XJe),e(k,Rn),e(Rn,_re),e(_re,zJe),e(Rn,QJe),e(Rn,MS),e(MS,WJe),e(Rn,HJe),e(Rn,ES),e(ES,UJe),e(Rn,JJe),e(k,YJe),e(k,Bn),e(Bn,bre),e(bre,KJe),e(Bn,ZJe),e(Bn,CS),e(CS,eYe),e(Bn,oYe),e(Bn,wS),e(wS,rYe),e(Bn,tYe),e(k,aYe),e(k,bg),e(bg,vre),e(vre,nYe),e(bg,sYe),e(bg,AS),e(AS,lYe),e(bg,iYe),e(k,dYe),e(k,Pn),e(Pn,Fre),e(Fre,cYe),e(Pn,fYe),e(Pn,yS),e(yS,mYe),e(Pn,gYe),e(Pn,LS),e(LS,hYe),e(Pn,pYe),e(k,uYe),e(k,vg),e(vg,Tre),e(Tre,_Ye),e(vg,bYe),e(vg,xS),e(xS,vYe),e(vg,FYe),e(k,TYe),e(k,Fg),e(Fg,Mre),e(Mre,MYe),e(Fg,EYe),e(Fg,$S),e($S,CYe),e(Fg,wYe),e(k,AYe),e(k,Tg),e(Tg,Ere),e(Ere,yYe),e(Tg,LYe),e(Tg,kS),e(kS,xYe),e(Tg,$Ye),e(k,kYe),e(k,In),e(In,Cre),e(Cre,SYe),e(In,RYe),e(In,SS),e(SS,BYe),e(In,PYe),e(In,RS),e(RS,IYe),e(In,qYe),e(k,NYe),e(k,qn),e(qn,wre),e(wre,jYe),e(qn,DYe),e(qn,BS),e(BS,GYe),e(qn,OYe),e(qn,PS),e(PS,VYe),e(qn,XYe),e(k,zYe),e(k,Nn),e(Nn,Are),e(Are,QYe),e(Nn,WYe),e(Nn,IS),e(IS,HYe),e(Nn,UYe),e(Nn,qS),e(qS,JYe),e(Nn,YYe),e(k,KYe),e(k,Mg),e(Mg,yre),e(yre,ZYe),e(Mg,eKe),e(Mg,NS),e(NS,oKe),e(Mg,rKe),e(k,tKe),e(k,Eg),e(Eg,Lre),e(Lre,aKe),e(Eg,nKe),e(Eg,jS),e(jS,sKe),e(Eg,lKe),e(k,iKe),e(k,jn),e(jn,xre),e(xre,dKe),e(jn,cKe),e(jn,DS),e(DS,fKe),e(jn,mKe),e(jn,GS),e(GS,gKe),e(jn,hKe),e(k,pKe),e(k,Cg),e(Cg,$re),e($re,uKe),e(Cg,_Ke),e(Cg,OS),e(OS,bKe),e(Cg,vKe),e(k,FKe),e(k,Dn),e(Dn,kre),e(kre,TKe),e(Dn,MKe),e(Dn,VS),e(VS,EKe),e(Dn,CKe),e(Dn,XS),e(XS,wKe),e(Dn,AKe),e(k,yKe),e(k,Gn),e(Gn,Sre),e(Sre,LKe),e(Gn,xKe),e(Gn,zS),e(zS,$Ke),e(Gn,kKe),e(Gn,QS),e(QS,SKe),e(Gn,RKe),e(k,BKe),e(k,On),e(On,Rre),e(Rre,PKe),e(On,IKe),e(On,WS),e(WS,qKe),e(On,NKe),e(On,HS),e(HS,jKe),e(On,DKe),e(k,GKe),e(k,wg),e(wg,Bre),e(Bre,OKe),e(wg,VKe),e(wg,US),e(US,XKe),e(wg,zKe),e(k,QKe),e(k,Vn),e(Vn,Pre),e(Pre,WKe),e(Vn,HKe),e(Vn,JS),e(JS,UKe),e(Vn,JKe),e(Vn,YS),e(YS,YKe),e(Vn,KKe),e(k,ZKe),e(k,Xn),e(Xn,Ire),e(Ire,eZe),e(Xn,oZe),e(Xn,KS),e(KS,rZe),e(Xn,tZe),e(Xn,ZS),e(ZS,aZe),e(Xn,nZe),e(k,sZe),e(k,zn),e(zn,qre),e(qre,lZe),e(zn,iZe),e(zn,eR),e(eR,dZe),e(zn,cZe),e(zn,oR),e(oR,fZe),e(zn,mZe),e(k,gZe),e(k,Qn),e(Qn,Nre),e(Nre,hZe),e(Qn,pZe),e(Qn,rR),e(rR,uZe),e(Qn,_Ze),e(Qn,tR),e(tR,bZe),e(Qn,vZe),e(k,FZe),e(k,Wn),e(Wn,jre),e(jre,TZe),e(Wn,MZe),e(Wn,aR),e(aR,EZe),e(Wn,CZe),e(Wn,nR),e(nR,wZe),e(Wn,AZe),e(k,yZe),e(k,Hn),e(Hn,Dre),e(Dre,LZe),e(Hn,xZe),e(Hn,sR),e(sR,$Ze),e(Hn,kZe),e(Hn,lR),e(lR,SZe),e(Hn,RZe),e(k,BZe),e(k,Ag),e(Ag,Gre),e(Gre,PZe),e(Ag,IZe),e(Ag,iR),e(iR,qZe),e(Ag,NZe),e(k,jZe),e(k,Un),e(Un,Ore),e(Ore,DZe),e(Un,GZe),e(Un,dR),e(dR,OZe),e(Un,VZe),e(Un,cR),e(cR,XZe),e(Un,zZe),e(k,QZe),e(k,yg),e(yg,Vre),e(Vre,WZe),e(yg,HZe),e(yg,fR),e(fR,UZe),e(yg,JZe),e(k,YZe),e(k,Jn),e(Jn,Xre),e(Xre,KZe),e(Jn,ZZe),e(Jn,mR),e(mR,eeo),e(Jn,oeo),e(Jn,gR),e(gR,reo),e(Jn,teo),e(k,aeo),e(k,Yn),e(Yn,zre),e(zre,neo),e(Yn,seo),e(Yn,hR),e(hR,leo),e(Yn,ieo),e(Yn,pR),e(pR,deo),e(Yn,ceo),e(k,feo),e(k,Kn),e(Kn,Qre),e(Qre,meo),e(Kn,geo),e(Kn,uR),e(uR,heo),e(Kn,peo),e(Kn,_R),e(_R,ueo),e(Kn,_eo),e(k,beo),e(k,Zn),e(Zn,Wre),e(Wre,veo),e(Zn,Feo),e(Zn,bR),e(bR,Teo),e(Zn,Meo),e(Zn,vR),e(vR,Eeo),e(Zn,Ceo),e(k,weo),e(k,es),e(es,Hre),e(Hre,Aeo),e(es,yeo),e(es,FR),e(FR,Leo),e(es,xeo),e(es,TR),e(TR,$eo),e(es,keo),e(k,Seo),e(k,Lg),e(Lg,Ure),e(Ure,Reo),e(Lg,Beo),e(Lg,MR),e(MR,Peo),e(Lg,Ieo),e(k,qeo),e(k,os),e(os,Jre),e(Jre,Neo),e(os,jeo),e(os,ER),e(ER,Deo),e(os,Geo),e(os,CR),e(CR,Oeo),e(os,Veo),e(k,Xeo),e(k,rs),e(rs,Yre),e(Yre,zeo),e(rs,Qeo),e(rs,wR),e(wR,Weo),e(rs,Heo),e(rs,AR),e(AR,Ueo),e(rs,Jeo),e(k,Yeo),e(k,ts),e(ts,Kre),e(Kre,Keo),e(ts,Zeo),e(ts,yR),e(yR,eoo),e(ts,ooo),e(ts,LR),e(LR,roo),e(ts,too),e(k,aoo),e(k,as),e(as,Zre),e(Zre,noo),e(as,soo),e(as,xR),e(xR,loo),e(as,ioo),e(as,$R),e($R,doo),e(as,coo),e(k,foo),e(k,ns),e(ns,ete),e(ete,moo),e(ns,goo),e(ns,kR),e(kR,hoo),e(ns,poo),e(ns,SR),e(SR,uoo),e(ns,_oo),e(k,boo),e(k,ss),e(ss,ote),e(ote,voo),e(ss,Foo),e(ss,RR),e(RR,Too),e(ss,Moo),e(ss,BR),e(BR,Eoo),e(ss,Coo),e(k,woo),e(k,xg),e(xg,rte),e(rte,Aoo),e(xg,yoo),e(xg,PR),e(PR,Loo),e(xg,xoo),e(k,$oo),e(k,ls),e(ls,tte),e(tte,koo),e(ls,Soo),e(ls,IR),e(IR,Roo),e(ls,Boo),e(ls,qR),e(qR,Poo),e(ls,Ioo),e(k,qoo),e(k,$g),e($g,ate),e(ate,Noo),e($g,joo),e($g,NR),e(NR,Doo),e($g,Goo),e(k,Ooo),e(k,kg),e(kg,nte),e(nte,Voo),e(kg,Xoo),e(kg,jR),e(jR,zoo),e(kg,Qoo),e(k,Woo),e(k,is),e(is,ste),e(ste,Hoo),e(is,Uoo),e(is,DR),e(DR,Joo),e(is,Yoo),e(is,GR),e(GR,Koo),e(is,Zoo),e(k,ero),e(k,ds),e(ds,lte),e(lte,oro),e(ds,rro),e(ds,OR),e(OR,tro),e(ds,aro),e(ds,VR),e(VR,nro),e(ds,sro),e(k,lro),e(k,cs),e(cs,ite),e(ite,iro),e(cs,dro),e(cs,XR),e(XR,cro),e(cs,fro),e(cs,zR),e(zR,mro),e(cs,gro),e(k,hro),e(k,Sg),e(Sg,dte),e(dte,pro),e(Sg,uro),e(Sg,QR),e(QR,_ro),e(Sg,bro),e(k,vro),e(k,fs),e(fs,cte),e(cte,Fro),e(fs,Tro),e(fs,WR),e(WR,Mro),e(fs,Ero),e(fs,HR),e(HR,Cro),e(fs,wro),e(k,Aro),e(k,ms),e(ms,fte),e(fte,yro),e(ms,Lro),e(ms,UR),e(UR,xro),e(ms,$ro),e(ms,JR),e(JR,kro),e(ms,Sro),e(k,Rro),e(k,gs),e(gs,mte),e(mte,Bro),e(gs,Pro),e(gs,YR),e(YR,Iro),e(gs,qro),e(gs,KR),e(KR,Nro),e(gs,jro),e(k,Dro),e(k,hs),e(hs,gte),e(gte,Gro),e(hs,Oro),e(hs,ZR),e(ZR,Vro),e(hs,Xro),e(hs,eB),e(eB,zro),e(hs,Qro),e(k,Wro),e(k,ps),e(ps,hte),e(hte,Hro),e(ps,Uro),e(ps,oB),e(oB,Jro),e(ps,Yro),e(ps,rB),e(rB,Kro),e(ps,Zro),e(k,eto),e(k,Rg),e(Rg,pte),e(pte,oto),e(Rg,rto),e(Rg,tB),e(tB,tto),e(Rg,ato),e(k,nto),e(k,us),e(us,ute),e(ute,sto),e(us,lto),e(us,aB),e(aB,ito),e(us,dto),e(us,nB),e(nB,cto),e(us,fto),e(k,mto),e(k,Bg),e(Bg,_te),e(_te,gto),e(Bg,hto),e(Bg,sB),e(sB,pto),e(Bg,uto),e(k,_to),e(k,Pg),e(Pg,bte),e(bte,bto),e(Pg,vto),e(Pg,lB),e(lB,Fto),e(Pg,Tto),e(k,Mto),e(k,Ig),e(Ig,vte),e(vte,Eto),e(Ig,Cto),e(Ig,iB),e(iB,wto),e(Ig,Ato),e(k,yto),e(k,qg),e(qg,Fte),e(Fte,Lto),e(qg,xto),e(qg,dB),e(dB,$to),e(qg,kto),e(k,Sto),e(k,_s),e(_s,Tte),e(Tte,Rto),e(_s,Bto),e(_s,cB),e(cB,Pto),e(_s,Ito),e(_s,fB),e(fB,qto),e(_s,Nto),e(k,jto),e(k,Ng),e(Ng,Mte),e(Mte,Dto),e(Ng,Gto),e(Ng,mB),e(mB,Oto),e(Ng,Vto),e(k,Xto),e(k,bs),e(bs,Ete),e(Ete,zto),e(bs,Qto),e(bs,gB),e(gB,Wto),e(bs,Hto),e(bs,hB),e(hB,Uto),e(bs,Jto),e(k,Yto),e(k,vs),e(vs,Cte),e(Cte,Kto),e(vs,Zto),e(vs,pB),e(pB,eao),e(vs,oao),e(vs,uB),e(uB,rao),e(vs,tao),e(k,aao),e(k,Fs),e(Fs,wte),e(wte,nao),e(Fs,sao),e(Fs,_B),e(_B,lao),e(Fs,iao),e(Fs,bB),e(bB,dao),e(Fs,cao),e(k,fao),e(k,Ts),e(Ts,Ate),e(Ate,mao),e(Ts,gao),e(Ts,vB),e(vB,hao),e(Ts,pao),e(Ts,FB),e(FB,uao),e(Ts,_ao),e(k,bao),e(k,Ms),e(Ms,yte),e(yte,vao),e(Ms,Fao),e(Ms,TB),e(TB,Tao),e(Ms,Mao),e(Ms,MB),e(MB,Eao),e(Ms,Cao),e(k,wao),e(k,Es),e(Es,Lte),e(Lte,Aao),e(Es,yao),e(Es,EB),e(EB,Lao),e(Es,xao),e(Es,CB),e(CB,$ao),e(Es,kao),e(k,Sao),e(k,jg),e(jg,xte),e(xte,Rao),e(jg,Bao),e(jg,wB),e(wB,Pao),e(jg,Iao),e(k,qao),e(k,Dg),e(Dg,$te),e($te,Nao),e(Dg,jao),e(Dg,AB),e(AB,Dao),e(Dg,Gao),e(k,Oao),e(k,Cs),e(Cs,kte),e(kte,Vao),e(Cs,Xao),e(Cs,yB),e(yB,zao),e(Cs,Qao),e(Cs,LB),e(LB,Wao),e(Cs,Hao),e(k,Uao),e(k,ws),e(ws,Ste),e(Ste,Jao),e(ws,Yao),e(ws,xB),e(xB,Kao),e(ws,Zao),e(ws,$B),e($B,eno),e(ws,ono),e(k,rno),e(k,As),e(As,Rte),e(Rte,tno),e(As,ano),e(As,kB),e(kB,nno),e(As,sno),e(As,SB),e(SB,lno),e(As,ino),e(k,dno),e(k,Gg),e(Gg,Bte),e(Bte,cno),e(Gg,fno),e(Gg,RB),e(RB,mno),e(Gg,gno),e(k,hno),e(k,Og),e(Og,Pte),e(Pte,pno),e(Og,uno),e(Og,BB),e(BB,_no),e(Og,bno),e(k,vno),e(k,Vg),e(Vg,Ite),e(Ite,Fno),e(Vg,Tno),e(Vg,PB),e(PB,Mno),e(Vg,Eno),e(k,Cno),e(k,ys),e(ys,qte),e(qte,wno),e(ys,Ano),e(ys,IB),e(IB,yno),e(ys,Lno),e(ys,qB),e(qB,xno),e(ys,$no),e(k,kno),e(k,Xg),e(Xg,Nte),e(Nte,Sno),e(Xg,Rno),e(Xg,NB),e(NB,Bno),e(Xg,Pno),e(k,Ino),e(k,zg),e(zg,jte),e(jte,qno),e(zg,Nno),e(zg,jB),e(jB,jno),e(zg,Dno),e(k,Gno),e(k,Ls),e(Ls,Dte),e(Dte,Ono),e(Ls,Vno),e(Ls,DB),e(DB,Xno),e(Ls,zno),e(Ls,GB),e(GB,Qno),e(Ls,Wno),e(k,Hno),e(k,Qg),e(Qg,Gte),e(Gte,Uno),e(Qg,Jno),e(Qg,OB),e(OB,Yno),e(Qg,Kno),e(k,Zno),e(k,Wg),e(Wg,Ote),e(Ote,eso),e(Wg,oso),e(Wg,VB),e(VB,rso),e(Wg,tso),e(k,aso),e(k,xs),e(xs,Vte),e(Vte,nso),e(xs,sso),e(xs,XB),e(XB,lso),e(xs,iso),e(xs,zB),e(zB,dso),e(xs,cso),e(k,fso),e(k,$s),e($s,Xte),e(Xte,mso),e($s,gso),e($s,QB),e(QB,hso),e($s,pso),e($s,WB),e(WB,uso),e($s,_so),e(k,bso),e(k,ks),e(ks,zte),e(zte,vso),e(ks,Fso),e(ks,HB),e(HB,Tso),e(ks,Mso),e(ks,UB),e(UB,Eso),e(ks,Cso),e(k,wso),e(k,Ss),e(Ss,Qte),e(Qte,Aso),e(Ss,yso),e(Ss,JB),e(JB,Lso),e(Ss,xso),e(Ss,YB),e(YB,$so),e(Ss,kso),e(Cr,Sso),M(Hg,Cr,null),e(wo,Rso),e(wo,Ug),M(my,Ug,null),e(Ug,Bso),e(Ug,Wte),e(Wte,Pso),b(f,rIe,_),b(f,vi,_),e(vi,Jg),e(Jg,Hte),M(gy,Hte,null),e(vi,Iso),e(vi,Ute),e(Ute,qso),b(f,tIe,_),b(f,Ao,_),M(hy,Ao,null),e(Ao,Nso),e(Ao,py),e(py,jso),e(py,KB),e(KB,Dso),e(py,Gso),e(Ao,Oso),e(Ao,uy),e(uy,Vso),e(uy,Jte),e(Jte,Xso),e(uy,zso),e(Ao,Qso),e(Ao,Qe),M(_y,Qe,null),e(Qe,Wso),e(Qe,Yte),e(Yte,Hso),e(Qe,Uso),e(Qe,wa),e(wa,Jso),e(wa,Kte),e(Kte,Yso),e(wa,Kso),e(wa,Zte),e(Zte,Zso),e(wa,elo),e(wa,eae),e(eae,olo),e(wa,rlo),e(Qe,tlo),e(Qe,oe),e(oe,Yg),e(Yg,oae),e(oae,alo),e(Yg,nlo),e(Yg,ZB),e(ZB,slo),e(Yg,llo),e(oe,ilo),e(oe,Kg),e(Kg,rae),e(rae,dlo),e(Kg,clo),e(Kg,eP),e(eP,flo),e(Kg,mlo),e(oe,glo),e(oe,Zg),e(Zg,tae),e(tae,hlo),e(Zg,plo),e(Zg,oP),e(oP,ulo),e(Zg,_lo),e(oe,blo),e(oe,eh),e(eh,aae),e(aae,vlo),e(eh,Flo),e(eh,rP),e(rP,Tlo),e(eh,Mlo),e(oe,Elo),e(oe,oh),e(oh,nae),e(nae,Clo),e(oh,wlo),e(oh,tP),e(tP,Alo),e(oh,ylo),e(oe,Llo),e(oe,rh),e(rh,sae),e(sae,xlo),e(rh,$lo),e(rh,aP),e(aP,klo),e(rh,Slo),e(oe,Rlo),e(oe,th),e(th,lae),e(lae,Blo),e(th,Plo),e(th,nP),e(nP,Ilo),e(th,qlo),e(oe,Nlo),e(oe,ah),e(ah,iae),e(iae,jlo),e(ah,Dlo),e(ah,sP),e(sP,Glo),e(ah,Olo),e(oe,Vlo),e(oe,nh),e(nh,dae),e(dae,Xlo),e(nh,zlo),e(nh,lP),e(lP,Qlo),e(nh,Wlo),e(oe,Hlo),e(oe,sh),e(sh,cae),e(cae,Ulo),e(sh,Jlo),e(sh,iP),e(iP,Ylo),e(sh,Klo),e(oe,Zlo),e(oe,lh),e(lh,fae),e(fae,eio),e(lh,oio),e(lh,dP),e(dP,rio),e(lh,tio),e(oe,aio),e(oe,ih),e(ih,mae),e(mae,nio),e(ih,sio),e(ih,cP),e(cP,lio),e(ih,iio),e(oe,dio),e(oe,dh),e(dh,gae),e(gae,cio),e(dh,fio),e(dh,fP),e(fP,mio),e(dh,gio),e(oe,hio),e(oe,ch),e(ch,hae),e(hae,pio),e(ch,uio),e(ch,mP),e(mP,_io),e(ch,bio),e(oe,vio),e(oe,fh),e(fh,pae),e(pae,Fio),e(fh,Tio),e(fh,gP),e(gP,Mio),e(fh,Eio),e(oe,Cio),e(oe,mh),e(mh,uae),e(uae,wio),e(mh,Aio),e(mh,hP),e(hP,yio),e(mh,Lio),e(oe,xio),e(oe,gh),e(gh,_ae),e(_ae,$io),e(gh,kio),e(gh,pP),e(pP,Sio),e(gh,Rio),e(oe,Bio),e(oe,hh),e(hh,bae),e(bae,Pio),e(hh,Iio),e(hh,uP),e(uP,qio),e(hh,Nio),e(oe,jio),e(oe,ph),e(ph,vae),e(vae,Dio),e(ph,Gio),e(ph,_P),e(_P,Oio),e(ph,Vio),e(oe,Xio),e(oe,uh),e(uh,Fae),e(Fae,zio),e(uh,Qio),e(uh,bP),e(bP,Wio),e(uh,Hio),e(oe,Uio),e(oe,_h),e(_h,Tae),e(Tae,Jio),e(_h,Yio),e(_h,vP),e(vP,Kio),e(_h,Zio),e(oe,edo),e(oe,bh),e(bh,Mae),e(Mae,odo),e(bh,rdo),e(bh,FP),e(FP,tdo),e(bh,ado),e(oe,ndo),e(oe,vh),e(vh,Eae),e(Eae,sdo),e(vh,ldo),e(vh,TP),e(TP,ido),e(vh,ddo),e(oe,cdo),e(oe,Fh),e(Fh,Cae),e(Cae,fdo),e(Fh,mdo),e(Fh,MP),e(MP,gdo),e(Fh,hdo),e(oe,pdo),e(oe,Th),e(Th,wae),e(wae,udo),e(Th,_do),e(Th,EP),e(EP,bdo),e(Th,vdo),e(Qe,Fdo),M(Mh,Qe,null),e(Qe,Tdo),M(Eh,Qe,null),e(Ao,Mdo),e(Ao,Ch),M(by,Ch,null),e(Ch,Edo),e(Ch,Aae),e(Aae,Cdo),b(f,aIe,_),b(f,Fi,_),e(Fi,wh),e(wh,yae),M(vy,yae,null),e(Fi,wdo),e(Fi,Lae),e(Lae,Ado),b(f,nIe,_),b(f,yo,_),M(Fy,yo,null),e(yo,ydo),e(yo,Ty),e(Ty,Ldo),e(Ty,CP),e(CP,xdo),e(Ty,$do),e(yo,kdo),e(yo,My),e(My,Sdo),e(My,xae),e(xae,Rdo),e(My,Bdo),e(yo,Pdo),e(yo,We),M(Ey,We,null),e(We,Ido),e(We,$ae),e($ae,qdo),e(We,Ndo),e(We,Ti),e(Ti,jdo),e(Ti,kae),e(kae,Ddo),e(Ti,Gdo),e(Ti,Sae),e(Sae,Odo),e(Ti,Vdo),e(We,Xdo),e(We,_e),e(_e,Ah),e(Ah,Rae),e(Rae,zdo),e(Ah,Qdo),e(Ah,wP),e(wP,Wdo),e(Ah,Hdo),e(_e,Udo),e(_e,yh),e(yh,Bae),e(Bae,Jdo),e(yh,Ydo),e(yh,Pae),e(Pae,Kdo),e(yh,Zdo),e(_e,eco),e(_e,Lh),e(Lh,Iae),e(Iae,oco),e(Lh,rco),e(Lh,AP),e(AP,tco),e(Lh,aco),e(_e,nco),e(_e,xh),e(xh,qae),e(qae,sco),e(xh,lco),e(xh,yP),e(yP,ico),e(xh,dco),e(_e,cco),e(_e,$h),e($h,Nae),e(Nae,fco),e($h,mco),e($h,LP),e(LP,gco),e($h,hco),e(_e,pco),e(_e,kh),e(kh,jae),e(jae,uco),e(kh,_co),e(kh,xP),e(xP,bco),e(kh,vco),e(_e,Fco),e(_e,Sh),e(Sh,Dae),e(Dae,Tco),e(Sh,Mco),e(Sh,$P),e($P,Eco),e(Sh,Cco),e(_e,wco),e(_e,Rh),e(Rh,Gae),e(Gae,Aco),e(Rh,yco),e(Rh,kP),e(kP,Lco),e(Rh,xco),e(_e,$co),e(_e,Bh),e(Bh,Oae),e(Oae,kco),e(Bh,Sco),e(Bh,SP),e(SP,Rco),e(Bh,Bco),e(_e,Pco),e(_e,Ph),e(Ph,Vae),e(Vae,Ico),e(Ph,qco),e(Ph,RP),e(RP,Nco),e(Ph,jco),e(_e,Dco),e(_e,Ih),e(Ih,Xae),e(Xae,Gco),e(Ih,Oco),e(Ih,BP),e(BP,Vco),e(Ih,Xco),e(_e,zco),e(_e,qh),e(qh,zae),e(zae,Qco),e(qh,Wco),e(qh,PP),e(PP,Hco),e(qh,Uco),e(_e,Jco),e(_e,Nh),e(Nh,Qae),e(Qae,Yco),e(Nh,Kco),e(Nh,IP),e(IP,Zco),e(Nh,efo),e(_e,ofo),e(_e,jh),e(jh,Wae),e(Wae,rfo),e(jh,tfo),e(jh,qP),e(qP,afo),e(jh,nfo),e(_e,sfo),e(_e,Dh),e(Dh,Hae),e(Hae,lfo),e(Dh,ifo),e(Dh,NP),e(NP,dfo),e(Dh,cfo),e(We,ffo),M(Gh,We,null),e(We,mfo),M(Oh,We,null),e(yo,gfo),e(yo,Vh),M(Cy,Vh,null),e(Vh,hfo),e(Vh,Uae),e(Uae,pfo),b(f,sIe,_),b(f,Mi,_),e(Mi,Xh),e(Xh,Jae),M(wy,Jae,null),e(Mi,ufo),e(Mi,Yae),e(Yae,_fo),b(f,lIe,_),b(f,Lo,_),M(Ay,Lo,null),e(Lo,bfo),e(Lo,Ei),e(Ei,vfo),e(Ei,jP),e(jP,Ffo),e(Ei,Tfo),e(Ei,DP),e(DP,Mfo),e(Ei,Efo),e(Lo,Cfo),e(Lo,yy),e(yy,wfo),e(yy,Kae),e(Kae,Afo),e(yy,yfo),e(Lo,Lfo),e(Lo,ot),M(Ly,ot,null),e(ot,xfo),e(ot,Zae),e(Zae,$fo),e(ot,kfo),e(ot,Ci),e(Ci,Sfo),e(Ci,ene),e(ene,Rfo),e(Ci,Bfo),e(Ci,GP),e(GP,Pfo),e(Ci,Ifo),e(ot,qfo),M(zh,ot,null),e(Lo,Nfo),e(Lo,He),M(xy,He,null),e(He,jfo),e(He,one),e(one,Dfo),e(He,Gfo),e(He,Aa),e(Aa,Ofo),e(Aa,rne),e(rne,Vfo),e(Aa,Xfo),e(Aa,tne),e(tne,zfo),e(Aa,Qfo),e(Aa,ane),e(ane,Wfo),e(Aa,Hfo),e(He,Ufo),e(He,x),e(x,Qh),e(Qh,nne),e(nne,Jfo),e(Qh,Yfo),e(Qh,OP),e(OP,Kfo),e(Qh,Zfo),e(x,emo),e(x,Wh),e(Wh,sne),e(sne,omo),e(Wh,rmo),e(Wh,VP),e(VP,tmo),e(Wh,amo),e(x,nmo),e(x,Hh),e(Hh,lne),e(lne,smo),e(Hh,lmo),e(Hh,XP),e(XP,imo),e(Hh,dmo),e(x,cmo),e(x,Uh),e(Uh,ine),e(ine,fmo),e(Uh,mmo),e(Uh,zP),e(zP,gmo),e(Uh,hmo),e(x,pmo),e(x,Jh),e(Jh,dne),e(dne,umo),e(Jh,_mo),e(Jh,QP),e(QP,bmo),e(Jh,vmo),e(x,Fmo),e(x,Yh),e(Yh,cne),e(cne,Tmo),e(Yh,Mmo),e(Yh,WP),e(WP,Emo),e(Yh,Cmo),e(x,wmo),e(x,Kh),e(Kh,fne),e(fne,Amo),e(Kh,ymo),e(Kh,HP),e(HP,Lmo),e(Kh,xmo),e(x,$mo),e(x,Zh),e(Zh,mne),e(mne,kmo),e(Zh,Smo),e(Zh,UP),e(UP,Rmo),e(Zh,Bmo),e(x,Pmo),e(x,ep),e(ep,gne),e(gne,Imo),e(ep,qmo),e(ep,JP),e(JP,Nmo),e(ep,jmo),e(x,Dmo),e(x,op),e(op,hne),e(hne,Gmo),e(op,Omo),e(op,YP),e(YP,Vmo),e(op,Xmo),e(x,zmo),e(x,rp),e(rp,pne),e(pne,Qmo),e(rp,Wmo),e(rp,KP),e(KP,Hmo),e(rp,Umo),e(x,Jmo),e(x,tp),e(tp,une),e(une,Ymo),e(tp,Kmo),e(tp,ZP),e(ZP,Zmo),e(tp,ego),e(x,ogo),e(x,ap),e(ap,_ne),e(_ne,rgo),e(ap,tgo),e(ap,eI),e(eI,ago),e(ap,ngo),e(x,sgo),e(x,np),e(np,bne),e(bne,lgo),e(np,igo),e(np,oI),e(oI,dgo),e(np,cgo),e(x,fgo),e(x,sp),e(sp,vne),e(vne,mgo),e(sp,ggo),e(sp,rI),e(rI,hgo),e(sp,pgo),e(x,ugo),e(x,lp),e(lp,Fne),e(Fne,_go),e(lp,bgo),e(lp,tI),e(tI,vgo),e(lp,Fgo),e(x,Tgo),e(x,ip),e(ip,Tne),e(Tne,Mgo),e(ip,Ego),e(ip,aI),e(aI,Cgo),e(ip,wgo),e(x,Ago),e(x,dp),e(dp,Mne),e(Mne,ygo),e(dp,Lgo),e(dp,nI),e(nI,xgo),e(dp,$go),e(x,kgo),e(x,cp),e(cp,Ene),e(Ene,Sgo),e(cp,Rgo),e(cp,sI),e(sI,Bgo),e(cp,Pgo),e(x,Igo),e(x,fp),e(fp,Cne),e(Cne,qgo),e(fp,Ngo),e(fp,lI),e(lI,jgo),e(fp,Dgo),e(x,Ggo),e(x,mp),e(mp,wne),e(wne,Ogo),e(mp,Vgo),e(mp,iI),e(iI,Xgo),e(mp,zgo),e(x,Qgo),e(x,gp),e(gp,Ane),e(Ane,Wgo),e(gp,Hgo),e(gp,dI),e(dI,Ugo),e(gp,Jgo),e(x,Ygo),e(x,hp),e(hp,yne),e(yne,Kgo),e(hp,Zgo),e(hp,cI),e(cI,eho),e(hp,oho),e(x,rho),e(x,pp),e(pp,Lne),e(Lne,tho),e(pp,aho),e(pp,fI),e(fI,nho),e(pp,sho),e(x,lho),e(x,up),e(up,xne),e(xne,iho),e(up,dho),e(up,mI),e(mI,cho),e(up,fho),e(x,mho),e(x,_p),e(_p,$ne),e($ne,gho),e(_p,hho),e(_p,gI),e(gI,pho),e(_p,uho),e(x,_ho),e(x,bp),e(bp,kne),e(kne,bho),e(bp,vho),e(bp,hI),e(hI,Fho),e(bp,Tho),e(x,Mho),e(x,vp),e(vp,Sne),e(Sne,Eho),e(vp,Cho),e(vp,pI),e(pI,who),e(vp,Aho),e(x,yho),e(x,Fp),e(Fp,Rne),e(Rne,Lho),e(Fp,xho),e(Fp,uI),e(uI,$ho),e(Fp,kho),e(x,Sho),e(x,Tp),e(Tp,Bne),e(Bne,Rho),e(Tp,Bho),e(Tp,_I),e(_I,Pho),e(Tp,Iho),e(x,qho),e(x,Mp),e(Mp,Pne),e(Pne,Nho),e(Mp,jho),e(Mp,bI),e(bI,Dho),e(Mp,Gho),e(x,Oho),e(x,Rs),e(Rs,Ine),e(Ine,Vho),e(Rs,Xho),e(Rs,vI),e(vI,zho),e(Rs,Qho),e(Rs,FI),e(FI,Who),e(Rs,Hho),e(x,Uho),e(x,Ep),e(Ep,qne),e(qne,Jho),e(Ep,Yho),e(Ep,TI),e(TI,Kho),e(Ep,Zho),e(x,epo),e(x,Cp),e(Cp,Nne),e(Nne,opo),e(Cp,rpo),e(Cp,MI),e(MI,tpo),e(Cp,apo),e(x,npo),e(x,wp),e(wp,jne),e(jne,spo),e(wp,lpo),e(wp,EI),e(EI,ipo),e(wp,dpo),e(x,cpo),e(x,Ap),e(Ap,Dne),e(Dne,fpo),e(Ap,mpo),e(Ap,CI),e(CI,gpo),e(Ap,hpo),e(x,ppo),e(x,yp),e(yp,Gne),e(Gne,upo),e(yp,_po),e(yp,wI),e(wI,bpo),e(yp,vpo),e(x,Fpo),e(x,Lp),e(Lp,One),e(One,Tpo),e(Lp,Mpo),e(Lp,AI),e(AI,Epo),e(Lp,Cpo),e(x,wpo),e(x,xp),e(xp,Vne),e(Vne,Apo),e(xp,ypo),e(xp,yI),e(yI,Lpo),e(xp,xpo),e(x,$po),e(x,$p),e($p,Xne),e(Xne,kpo),e($p,Spo),e($p,LI),e(LI,Rpo),e($p,Bpo),e(x,Ppo),e(x,kp),e(kp,zne),e(zne,Ipo),e(kp,qpo),e(kp,xI),e(xI,Npo),e(kp,jpo),e(x,Dpo),e(x,Sp),e(Sp,Qne),e(Qne,Gpo),e(Sp,Opo),e(Sp,$I),e($I,Vpo),e(Sp,Xpo),e(x,zpo),e(x,Rp),e(Rp,Wne),e(Wne,Qpo),e(Rp,Wpo),e(Rp,kI),e(kI,Hpo),e(Rp,Upo),e(x,Jpo),e(x,Bp),e(Bp,Hne),e(Hne,Ypo),e(Bp,Kpo),e(Bp,SI),e(SI,Zpo),e(Bp,euo),e(x,ouo),e(x,Pp),e(Pp,Une),e(Une,ruo),e(Pp,tuo),e(Pp,RI),e(RI,auo),e(Pp,nuo),e(x,suo),e(x,Ip),e(Ip,Jne),e(Jne,luo),e(Ip,iuo),e(Ip,BI),e(BI,duo),e(Ip,cuo),e(x,fuo),e(x,qp),e(qp,Yne),e(Yne,muo),e(qp,guo),e(qp,PI),e(PI,huo),e(qp,puo),e(x,uuo),e(x,Np),e(Np,Kne),e(Kne,_uo),e(Np,buo),e(Np,II),e(II,vuo),e(Np,Fuo),e(x,Tuo),e(x,jp),e(jp,Zne),e(Zne,Muo),e(jp,Euo),e(jp,qI),e(qI,Cuo),e(jp,wuo),e(x,Auo),e(x,Dp),e(Dp,ese),e(ese,yuo),e(Dp,Luo),e(Dp,NI),e(NI,xuo),e(Dp,$uo),e(x,kuo),e(x,Gp),e(Gp,ose),e(ose,Suo),e(Gp,Ruo),e(Gp,jI),e(jI,Buo),e(Gp,Puo),e(x,Iuo),e(x,Op),e(Op,rse),e(rse,quo),e(Op,Nuo),e(Op,DI),e(DI,juo),e(Op,Duo),e(x,Guo),e(x,Vp),e(Vp,tse),e(tse,Ouo),e(Vp,Vuo),e(Vp,GI),e(GI,Xuo),e(Vp,zuo),e(x,Quo),e(x,Xp),e(Xp,ase),e(ase,Wuo),e(Xp,Huo),e(Xp,OI),e(OI,Uuo),e(Xp,Juo),e(x,Yuo),e(x,zp),e(zp,nse),e(nse,Kuo),e(zp,Zuo),e(zp,VI),e(VI,e_o),e(zp,o_o),e(x,r_o),e(x,Qp),e(Qp,sse),e(sse,t_o),e(Qp,a_o),e(Qp,XI),e(XI,n_o),e(Qp,s_o),e(x,l_o),e(x,Wp),e(Wp,lse),e(lse,i_o),e(Wp,d_o),e(Wp,zI),e(zI,c_o),e(Wp,f_o),e(x,m_o),e(x,Hp),e(Hp,ise),e(ise,g_o),e(Hp,h_o),e(Hp,QI),e(QI,p_o),e(Hp,u_o),e(x,__o),e(x,Up),e(Up,dse),e(dse,b_o),e(Up,v_o),e(Up,WI),e(WI,F_o),e(Up,T_o),e(x,M_o),e(x,Jp),e(Jp,cse),e(cse,E_o),e(Jp,C_o),e(Jp,HI),e(HI,w_o),e(Jp,A_o),e(x,y_o),e(x,Yp),e(Yp,fse),e(fse,L_o),e(Yp,x_o),e(Yp,UI),e(UI,$_o),e(Yp,k_o),e(x,S_o),e(x,Kp),e(Kp,mse),e(mse,R_o),e(Kp,B_o),e(Kp,JI),e(JI,P_o),e(Kp,I_o),e(x,q_o),e(x,Zp),e(Zp,gse),e(gse,N_o),e(Zp,j_o),e(Zp,YI),e(YI,D_o),e(Zp,G_o),e(x,O_o),e(x,eu),e(eu,hse),e(hse,V_o),e(eu,X_o),e(eu,KI),e(KI,z_o),e(eu,Q_o),e(x,W_o),e(x,ou),e(ou,pse),e(pse,H_o),e(ou,U_o),e(ou,ZI),e(ZI,J_o),e(ou,Y_o),e(x,K_o),e(x,ru),e(ru,use),e(use,Z_o),e(ru,e1o),e(ru,eq),e(eq,o1o),e(ru,r1o),e(x,t1o),e(x,tu),e(tu,_se),e(_se,a1o),e(tu,n1o),e(tu,oq),e(oq,s1o),e(tu,l1o),e(x,i1o),e(x,au),e(au,bse),e(bse,d1o),e(au,c1o),e(au,rq),e(rq,f1o),e(au,m1o),e(x,g1o),e(x,nu),e(nu,vse),e(vse,h1o),e(nu,p1o),e(nu,tq),e(tq,u1o),e(nu,_1o),e(x,b1o),e(x,su),e(su,Fse),e(Fse,v1o),e(su,F1o),e(su,aq),e(aq,T1o),e(su,M1o),e(x,E1o),e(x,lu),e(lu,Tse),e(Tse,C1o),e(lu,w1o),e(lu,nq),e(nq,A1o),e(lu,y1o),e(x,L1o),e(x,iu),e(iu,Mse),e(Mse,x1o),e(iu,$1o),e(iu,sq),e(sq,k1o),e(iu,S1o),e(x,R1o),e(x,du),e(du,Ese),e(Ese,B1o),e(du,P1o),e(du,lq),e(lq,I1o),e(du,q1o),e(x,N1o),e(x,cu),e(cu,Cse),e(Cse,j1o),e(cu,D1o),e(cu,iq),e(iq,G1o),e(cu,O1o),e(x,V1o),e(x,fu),e(fu,wse),e(wse,X1o),e(fu,z1o),e(fu,dq),e(dq,Q1o),e(fu,W1o),e(x,H1o),e(x,mu),e(mu,Ase),e(Ase,U1o),e(mu,J1o),e(mu,cq),e(cq,Y1o),e(mu,K1o),e(x,Z1o),e(x,gu),e(gu,yse),e(yse,ebo),e(gu,obo),e(gu,fq),e(fq,rbo),e(gu,tbo),e(x,abo),e(x,hu),e(hu,Lse),e(Lse,nbo),e(hu,sbo),e(hu,mq),e(mq,lbo),e(hu,ibo),e(x,dbo),e(x,pu),e(pu,xse),e(xse,cbo),e(pu,fbo),e(pu,gq),e(gq,mbo),e(pu,gbo),e(x,hbo),e(x,uu),e(uu,$se),e($se,pbo),e(uu,ubo),e(uu,hq),e(hq,_bo),e(uu,bbo),e(x,vbo),e(x,_u),e(_u,kse),e(kse,Fbo),e(_u,Tbo),e(_u,pq),e(pq,Mbo),e(_u,Ebo),e(x,Cbo),e(x,bu),e(bu,Sse),e(Sse,wbo),e(bu,Abo),e(bu,uq),e(uq,ybo),e(bu,Lbo),e(x,xbo),e(x,vu),e(vu,Rse),e(Rse,$bo),e(vu,kbo),e(vu,_q),e(_q,Sbo),e(vu,Rbo),e(x,Bbo),e(x,Fu),e(Fu,Bse),e(Bse,Pbo),e(Fu,Ibo),e(Fu,bq),e(bq,qbo),e(Fu,Nbo),e(x,jbo),e(x,Tu),e(Tu,Pse),e(Pse,Dbo),e(Tu,Gbo),e(Tu,vq),e(vq,Obo),e(Tu,Vbo),e(x,Xbo),e(x,Mu),e(Mu,Ise),e(Ise,zbo),e(Mu,Qbo),e(Mu,Fq),e(Fq,Wbo),e(Mu,Hbo),e(x,Ubo),e(x,Eu),e(Eu,qse),e(qse,Jbo),e(Eu,Ybo),e(Eu,Tq),e(Tq,Kbo),e(Eu,Zbo),e(x,e4o),e(x,Cu),e(Cu,Nse),e(Nse,o4o),e(Cu,r4o),e(Cu,Mq),e(Mq,t4o),e(Cu,a4o),e(x,n4o),e(x,wu),e(wu,jse),e(jse,s4o),e(wu,l4o),e(wu,Eq),e(Eq,i4o),e(wu,d4o),e(x,c4o),e(x,Au),e(Au,Dse),e(Dse,f4o),e(Au,m4o),e(Au,Cq),e(Cq,g4o),e(Au,h4o),e(x,p4o),e(x,yu),e(yu,Gse),e(Gse,u4o),e(yu,_4o),e(yu,wq),e(wq,b4o),e(yu,v4o),e(x,F4o),e(x,Lu),e(Lu,Ose),e(Ose,T4o),e(Lu,M4o),e(Lu,Aq),e(Aq,E4o),e(Lu,C4o),e(x,w4o),e(x,xu),e(xu,Vse),e(Vse,A4o),e(xu,y4o),e(xu,yq),e(yq,L4o),e(xu,x4o),e(x,$4o),e(x,$u),e($u,Xse),e(Xse,k4o),e($u,S4o),e($u,Lq),e(Lq,R4o),e($u,B4o),e(x,P4o),e(x,ku),e(ku,zse),e(zse,I4o),e(ku,q4o),e(ku,xq),e(xq,N4o),e(ku,j4o),e(x,D4o),e(x,Su),e(Su,Qse),e(Qse,G4o),e(Su,O4o),e(Su,$q),e($q,V4o),e(Su,X4o),e(x,z4o),e(x,Ru),e(Ru,Wse),e(Wse,Q4o),e(Ru,W4o),e(Ru,kq),e(kq,H4o),e(Ru,U4o),e(He,J4o),e(He,Bu),e(Bu,Y4o),e(Bu,Hse),e(Hse,K4o),e(Bu,Z4o),e(Bu,Use),e(Use,e2o),e(He,o2o),M(Pu,He,null),b(f,iIe,_),b(f,wi,_),e(wi,Iu),e(Iu,Jse),M($y,Jse,null),e(wi,r2o),e(wi,Yse),e(Yse,t2o),b(f,dIe,_),b(f,xo,_),M(ky,xo,null),e(xo,a2o),e(xo,Ai),e(Ai,n2o),e(Ai,Sq),e(Sq,s2o),e(Ai,l2o),e(Ai,Rq),e(Rq,i2o),e(Ai,d2o),e(xo,c2o),e(xo,Sy),e(Sy,f2o),e(Sy,Kse),e(Kse,m2o),e(Sy,g2o),e(xo,h2o),e(xo,rt),M(Ry,rt,null),e(rt,p2o),e(rt,Zse),e(Zse,u2o),e(rt,_2o),e(rt,yi),e(yi,b2o),e(yi,ele),e(ele,v2o),e(yi,F2o),e(yi,Bq),e(Bq,T2o),e(yi,M2o),e(rt,E2o),M(qu,rt,null),e(xo,C2o),e(xo,Ue),M(By,Ue,null),e(Ue,w2o),e(Ue,ole),e(ole,A2o),e(Ue,y2o),e(Ue,ya),e(ya,L2o),e(ya,rle),e(rle,x2o),e(ya,$2o),e(ya,tle),e(tle,k2o),e(ya,S2o),e(ya,ale),e(ale,R2o),e(ya,B2o),e(Ue,P2o),e(Ue,G),e(G,Nu),e(Nu,nle),e(nle,I2o),e(Nu,q2o),e(Nu,Pq),e(Pq,N2o),e(Nu,j2o),e(G,D2o),e(G,ju),e(ju,sle),e(sle,G2o),e(ju,O2o),e(ju,Iq),e(Iq,V2o),e(ju,X2o),e(G,z2o),e(G,Du),e(Du,lle),e(lle,Q2o),e(Du,W2o),e(Du,qq),e(qq,H2o),e(Du,U2o),e(G,J2o),e(G,Gu),e(Gu,ile),e(ile,Y2o),e(Gu,K2o),e(Gu,Nq),e(Nq,Z2o),e(Gu,e5o),e(G,o5o),e(G,Ou),e(Ou,dle),e(dle,r5o),e(Ou,t5o),e(Ou,jq),e(jq,a5o),e(Ou,n5o),e(G,s5o),e(G,Vu),e(Vu,cle),e(cle,l5o),e(Vu,i5o),e(Vu,Dq),e(Dq,d5o),e(Vu,c5o),e(G,f5o),e(G,Xu),e(Xu,fle),e(fle,m5o),e(Xu,g5o),e(Xu,Gq),e(Gq,h5o),e(Xu,p5o),e(G,u5o),e(G,zu),e(zu,mle),e(mle,_5o),e(zu,b5o),e(zu,Oq),e(Oq,v5o),e(zu,F5o),e(G,T5o),e(G,Qu),e(Qu,gle),e(gle,M5o),e(Qu,E5o),e(Qu,Vq),e(Vq,C5o),e(Qu,w5o),e(G,A5o),e(G,Wu),e(Wu,hle),e(hle,y5o),e(Wu,L5o),e(Wu,Xq),e(Xq,x5o),e(Wu,$5o),e(G,k5o),e(G,Hu),e(Hu,ple),e(ple,S5o),e(Hu,R5o),e(Hu,zq),e(zq,B5o),e(Hu,P5o),e(G,I5o),e(G,Uu),e(Uu,ule),e(ule,q5o),e(Uu,N5o),e(Uu,Qq),e(Qq,j5o),e(Uu,D5o),e(G,G5o),e(G,Ju),e(Ju,_le),e(_le,O5o),e(Ju,V5o),e(Ju,Wq),e(Wq,X5o),e(Ju,z5o),e(G,Q5o),e(G,Yu),e(Yu,ble),e(ble,W5o),e(Yu,H5o),e(Yu,Hq),e(Hq,U5o),e(Yu,J5o),e(G,Y5o),e(G,Ku),e(Ku,vle),e(vle,K5o),e(Ku,Z5o),e(Ku,Uq),e(Uq,e3o),e(Ku,o3o),e(G,r3o),e(G,Zu),e(Zu,Fle),e(Fle,t3o),e(Zu,a3o),e(Zu,Jq),e(Jq,n3o),e(Zu,s3o),e(G,l3o),e(G,e_),e(e_,Tle),e(Tle,i3o),e(e_,d3o),e(e_,Yq),e(Yq,c3o),e(e_,f3o),e(G,m3o),e(G,o_),e(o_,Mle),e(Mle,g3o),e(o_,h3o),e(o_,Kq),e(Kq,p3o),e(o_,u3o),e(G,_3o),e(G,r_),e(r_,Ele),e(Ele,b3o),e(r_,v3o),e(r_,Zq),e(Zq,F3o),e(r_,T3o),e(G,M3o),e(G,t_),e(t_,Cle),e(Cle,E3o),e(t_,C3o),e(t_,eN),e(eN,w3o),e(t_,A3o),e(G,y3o),e(G,a_),e(a_,wle),e(wle,L3o),e(a_,x3o),e(a_,oN),e(oN,$3o),e(a_,k3o),e(G,S3o),e(G,n_),e(n_,Ale),e(Ale,R3o),e(n_,B3o),e(n_,rN),e(rN,P3o),e(n_,I3o),e(G,q3o),e(G,s_),e(s_,yle),e(yle,N3o),e(s_,j3o),e(s_,tN),e(tN,D3o),e(s_,G3o),e(G,O3o),e(G,l_),e(l_,Lle),e(Lle,V3o),e(l_,X3o),e(l_,aN),e(aN,z3o),e(l_,Q3o),e(G,W3o),e(G,i_),e(i_,xle),e(xle,H3o),e(i_,U3o),e(i_,nN),e(nN,J3o),e(i_,Y3o),e(G,K3o),e(G,d_),e(d_,$le),e($le,Z3o),e(d_,evo),e(d_,sN),e(sN,ovo),e(d_,rvo),e(G,tvo),e(G,c_),e(c_,kle),e(kle,avo),e(c_,nvo),e(c_,lN),e(lN,svo),e(c_,lvo),e(G,ivo),e(G,f_),e(f_,Sle),e(Sle,dvo),e(f_,cvo),e(f_,iN),e(iN,fvo),e(f_,mvo),e(G,gvo),e(G,m_),e(m_,Rle),e(Rle,hvo),e(m_,pvo),e(m_,dN),e(dN,uvo),e(m_,_vo),e(G,bvo),e(G,g_),e(g_,Ble),e(Ble,vvo),e(g_,Fvo),e(g_,cN),e(cN,Tvo),e(g_,Mvo),e(G,Evo),e(G,h_),e(h_,Ple),e(Ple,Cvo),e(h_,wvo),e(h_,fN),e(fN,Avo),e(h_,yvo),e(G,Lvo),e(G,p_),e(p_,Ile),e(Ile,xvo),e(p_,$vo),e(p_,mN),e(mN,kvo),e(p_,Svo),e(G,Rvo),e(G,u_),e(u_,qle),e(qle,Bvo),e(u_,Pvo),e(u_,gN),e(gN,Ivo),e(u_,qvo),e(G,Nvo),e(G,__),e(__,Nle),e(Nle,jvo),e(__,Dvo),e(__,hN),e(hN,Gvo),e(__,Ovo),e(G,Vvo),e(G,b_),e(b_,jle),e(jle,Xvo),e(b_,zvo),e(b_,pN),e(pN,Qvo),e(b_,Wvo),e(G,Hvo),e(G,v_),e(v_,Dle),e(Dle,Uvo),e(v_,Jvo),e(v_,uN),e(uN,Yvo),e(v_,Kvo),e(G,Zvo),e(G,F_),e(F_,Gle),e(Gle,eFo),e(F_,oFo),e(F_,_N),e(_N,rFo),e(F_,tFo),e(G,aFo),e(G,T_),e(T_,Ole),e(Ole,nFo),e(T_,sFo),e(T_,bN),e(bN,lFo),e(T_,iFo),e(G,dFo),e(G,M_),e(M_,Vle),e(Vle,cFo),e(M_,fFo),e(M_,vN),e(vN,mFo),e(M_,gFo),e(G,hFo),e(G,E_),e(E_,Xle),e(Xle,pFo),e(E_,uFo),e(E_,FN),e(FN,_Fo),e(E_,bFo),e(Ue,vFo),e(Ue,C_),e(C_,FFo),e(C_,zle),e(zle,TFo),e(C_,MFo),e(C_,Qle),e(Qle,EFo),e(Ue,CFo),M(w_,Ue,null),b(f,cIe,_),b(f,Li,_),e(Li,A_),e(A_,Wle),M(Py,Wle,null),e(Li,wFo),e(Li,Hle),e(Hle,AFo),b(f,fIe,_),b(f,$o,_),M(Iy,$o,null),e($o,yFo),e($o,xi),e(xi,LFo),e(xi,TN),e(TN,xFo),e(xi,$Fo),e(xi,MN),e(MN,kFo),e(xi,SFo),e($o,RFo),e($o,qy),e(qy,BFo),e(qy,Ule),e(Ule,PFo),e(qy,IFo),e($o,qFo),e($o,tt),M(Ny,tt,null),e(tt,NFo),e(tt,Jle),e(Jle,jFo),e(tt,DFo),e(tt,$i),e($i,GFo),e($i,Yle),e(Yle,OFo),e($i,VFo),e($i,EN),e(EN,XFo),e($i,zFo),e(tt,QFo),M(y_,tt,null),e($o,WFo),e($o,Je),M(jy,Je,null),e(Je,HFo),e(Je,Kle),e(Kle,UFo),e(Je,JFo),e(Je,La),e(La,YFo),e(La,Zle),e(Zle,KFo),e(La,ZFo),e(La,eie),e(eie,e6o),e(La,o6o),e(La,oie),e(oie,r6o),e(La,t6o),e(Je,a6o),e(Je,z),e(z,L_),e(L_,rie),e(rie,n6o),e(L_,s6o),e(L_,CN),e(CN,l6o),e(L_,i6o),e(z,d6o),e(z,x_),e(x_,tie),e(tie,c6o),e(x_,f6o),e(x_,wN),e(wN,m6o),e(x_,g6o),e(z,h6o),e(z,$_),e($_,aie),e(aie,p6o),e($_,u6o),e($_,AN),e(AN,_6o),e($_,b6o),e(z,v6o),e(z,k_),e(k_,nie),e(nie,F6o),e(k_,T6o),e(k_,yN),e(yN,M6o),e(k_,E6o),e(z,C6o),e(z,S_),e(S_,sie),e(sie,w6o),e(S_,A6o),e(S_,LN),e(LN,y6o),e(S_,L6o),e(z,x6o),e(z,R_),e(R_,lie),e(lie,$6o),e(R_,k6o),e(R_,xN),e(xN,S6o),e(R_,R6o),e(z,B6o),e(z,B_),e(B_,iie),e(iie,P6o),e(B_,I6o),e(B_,$N),e($N,q6o),e(B_,N6o),e(z,j6o),e(z,P_),e(P_,die),e(die,D6o),e(P_,G6o),e(P_,kN),e(kN,O6o),e(P_,V6o),e(z,X6o),e(z,I_),e(I_,cie),e(cie,z6o),e(I_,Q6o),e(I_,SN),e(SN,W6o),e(I_,H6o),e(z,U6o),e(z,q_),e(q_,fie),e(fie,J6o),e(q_,Y6o),e(q_,RN),e(RN,K6o),e(q_,Z6o),e(z,eTo),e(z,N_),e(N_,mie),e(mie,oTo),e(N_,rTo),e(N_,BN),e(BN,tTo),e(N_,aTo),e(z,nTo),e(z,j_),e(j_,gie),e(gie,sTo),e(j_,lTo),e(j_,PN),e(PN,iTo),e(j_,dTo),e(z,cTo),e(z,D_),e(D_,hie),e(hie,fTo),e(D_,mTo),e(D_,IN),e(IN,gTo),e(D_,hTo),e(z,pTo),e(z,G_),e(G_,pie),e(pie,uTo),e(G_,_To),e(G_,qN),e(qN,bTo),e(G_,vTo),e(z,FTo),e(z,O_),e(O_,uie),e(uie,TTo),e(O_,MTo),e(O_,NN),e(NN,ETo),e(O_,CTo),e(z,wTo),e(z,V_),e(V_,_ie),e(_ie,ATo),e(V_,yTo),e(V_,jN),e(jN,LTo),e(V_,xTo),e(z,$To),e(z,X_),e(X_,bie),e(bie,kTo),e(X_,STo),e(X_,DN),e(DN,RTo),e(X_,BTo),e(z,PTo),e(z,z_),e(z_,vie),e(vie,ITo),e(z_,qTo),e(z_,GN),e(GN,NTo),e(z_,jTo),e(z,DTo),e(z,Q_),e(Q_,Fie),e(Fie,GTo),e(Q_,OTo),e(Q_,ON),e(ON,VTo),e(Q_,XTo),e(z,zTo),e(z,W_),e(W_,Tie),e(Tie,QTo),e(W_,WTo),e(W_,VN),e(VN,HTo),e(W_,UTo),e(z,JTo),e(z,H_),e(H_,Mie),e(Mie,YTo),e(H_,KTo),e(H_,XN),e(XN,ZTo),e(H_,eMo),e(z,oMo),e(z,U_),e(U_,Eie),e(Eie,rMo),e(U_,tMo),e(U_,zN),e(zN,aMo),e(U_,nMo),e(z,sMo),e(z,J_),e(J_,Cie),e(Cie,lMo),e(J_,iMo),e(J_,QN),e(QN,dMo),e(J_,cMo),e(z,fMo),e(z,Y_),e(Y_,wie),e(wie,mMo),e(Y_,gMo),e(Y_,WN),e(WN,hMo),e(Y_,pMo),e(z,uMo),e(z,K_),e(K_,Aie),e(Aie,_Mo),e(K_,bMo),e(K_,HN),e(HN,vMo),e(K_,FMo),e(z,TMo),e(z,Z_),e(Z_,yie),e(yie,MMo),e(Z_,EMo),e(Z_,UN),e(UN,CMo),e(Z_,wMo),e(z,AMo),e(z,e1),e(e1,Lie),e(Lie,yMo),e(e1,LMo),e(e1,JN),e(JN,xMo),e(e1,$Mo),e(z,kMo),e(z,o1),e(o1,xie),e(xie,SMo),e(o1,RMo),e(o1,YN),e(YN,BMo),e(o1,PMo),e(z,IMo),e(z,r1),e(r1,$ie),e($ie,qMo),e(r1,NMo),e(r1,KN),e(KN,jMo),e(r1,DMo),e(z,GMo),e(z,t1),e(t1,kie),e(kie,OMo),e(t1,VMo),e(t1,ZN),e(ZN,XMo),e(t1,zMo),e(z,QMo),e(z,a1),e(a1,Sie),e(Sie,WMo),e(a1,HMo),e(a1,ej),e(ej,UMo),e(a1,JMo),e(z,YMo),e(z,n1),e(n1,Rie),e(Rie,KMo),e(n1,ZMo),e(n1,oj),e(oj,eEo),e(n1,oEo),e(z,rEo),e(z,s1),e(s1,Bie),e(Bie,tEo),e(s1,aEo),e(s1,rj),e(rj,nEo),e(s1,sEo),e(z,lEo),e(z,l1),e(l1,Pie),e(Pie,iEo),e(l1,dEo),e(l1,tj),e(tj,cEo),e(l1,fEo),e(z,mEo),e(z,i1),e(i1,Iie),e(Iie,gEo),e(i1,hEo),e(i1,aj),e(aj,pEo),e(i1,uEo),e(z,_Eo),e(z,d1),e(d1,qie),e(qie,bEo),e(d1,vEo),e(d1,nj),e(nj,FEo),e(d1,TEo),e(Je,MEo),e(Je,c1),e(c1,EEo),e(c1,Nie),e(Nie,CEo),e(c1,wEo),e(c1,jie),e(jie,AEo),e(Je,yEo),M(f1,Je,null),b(f,mIe,_),b(f,ki,_),e(ki,m1),e(m1,Die),M(Dy,Die,null),e(ki,LEo),e(ki,Gie),e(Gie,xEo),b(f,gIe,_),b(f,ko,_),M(Gy,ko,null),e(ko,$Eo),e(ko,Si),e(Si,kEo),e(Si,sj),e(sj,SEo),e(Si,REo),e(Si,lj),e(lj,BEo),e(Si,PEo),e(ko,IEo),e(ko,Oy),e(Oy,qEo),e(Oy,Oie),e(Oie,NEo),e(Oy,jEo),e(ko,DEo),e(ko,at),M(Vy,at,null),e(at,GEo),e(at,Vie),e(Vie,OEo),e(at,VEo),e(at,Ri),e(Ri,XEo),e(Ri,Xie),e(Xie,zEo),e(Ri,QEo),e(Ri,ij),e(ij,WEo),e(Ri,HEo),e(at,UEo),M(g1,at,null),e(ko,JEo),e(ko,Ye),M(Xy,Ye,null),e(Ye,YEo),e(Ye,zie),e(zie,KEo),e(Ye,ZEo),e(Ye,xa),e(xa,eCo),e(xa,Qie),e(Qie,oCo),e(xa,rCo),e(xa,Wie),e(Wie,tCo),e(xa,aCo),e(xa,Hie),e(Hie,nCo),e(xa,sCo),e(Ye,lCo),e(Ye,Q),e(Q,h1),e(h1,Uie),e(Uie,iCo),e(h1,dCo),e(h1,dj),e(dj,cCo),e(h1,fCo),e(Q,mCo),e(Q,p1),e(p1,Jie),e(Jie,gCo),e(p1,hCo),e(p1,cj),e(cj,pCo),e(p1,uCo),e(Q,_Co),e(Q,u1),e(u1,Yie),e(Yie,bCo),e(u1,vCo),e(u1,fj),e(fj,FCo),e(u1,TCo),e(Q,MCo),e(Q,_1),e(_1,Kie),e(Kie,ECo),e(_1,CCo),e(_1,mj),e(mj,wCo),e(_1,ACo),e(Q,yCo),e(Q,b1),e(b1,Zie),e(Zie,LCo),e(b1,xCo),e(b1,gj),e(gj,$Co),e(b1,kCo),e(Q,SCo),e(Q,v1),e(v1,ede),e(ede,RCo),e(v1,BCo),e(v1,hj),e(hj,PCo),e(v1,ICo),e(Q,qCo),e(Q,F1),e(F1,ode),e(ode,NCo),e(F1,jCo),e(F1,pj),e(pj,DCo),e(F1,GCo),e(Q,OCo),e(Q,T1),e(T1,rde),e(rde,VCo),e(T1,XCo),e(T1,uj),e(uj,zCo),e(T1,QCo),e(Q,WCo),e(Q,M1),e(M1,tde),e(tde,HCo),e(M1,UCo),e(M1,_j),e(_j,JCo),e(M1,YCo),e(Q,KCo),e(Q,E1),e(E1,ade),e(ade,ZCo),e(E1,ewo),e(E1,bj),e(bj,owo),e(E1,rwo),e(Q,two),e(Q,C1),e(C1,nde),e(nde,awo),e(C1,nwo),e(C1,vj),e(vj,swo),e(C1,lwo),e(Q,iwo),e(Q,w1),e(w1,sde),e(sde,dwo),e(w1,cwo),e(w1,Fj),e(Fj,fwo),e(w1,mwo),e(Q,gwo),e(Q,A1),e(A1,lde),e(lde,hwo),e(A1,pwo),e(A1,Tj),e(Tj,uwo),e(A1,_wo),e(Q,bwo),e(Q,y1),e(y1,ide),e(ide,vwo),e(y1,Fwo),e(y1,Mj),e(Mj,Two),e(y1,Mwo),e(Q,Ewo),e(Q,L1),e(L1,dde),e(dde,Cwo),e(L1,wwo),e(L1,Ej),e(Ej,Awo),e(L1,ywo),e(Q,Lwo),e(Q,x1),e(x1,cde),e(cde,xwo),e(x1,$wo),e(x1,Cj),e(Cj,kwo),e(x1,Swo),e(Q,Rwo),e(Q,$1),e($1,fde),e(fde,Bwo),e($1,Pwo),e($1,wj),e(wj,Iwo),e($1,qwo),e(Q,Nwo),e(Q,k1),e(k1,mde),e(mde,jwo),e(k1,Dwo),e(k1,Aj),e(Aj,Gwo),e(k1,Owo),e(Q,Vwo),e(Q,S1),e(S1,gde),e(gde,Xwo),e(S1,zwo),e(S1,yj),e(yj,Qwo),e(S1,Wwo),e(Q,Hwo),e(Q,R1),e(R1,hde),e(hde,Uwo),e(R1,Jwo),e(R1,Lj),e(Lj,Ywo),e(R1,Kwo),e(Q,Zwo),e(Q,B1),e(B1,pde),e(pde,eAo),e(B1,oAo),e(B1,xj),e(xj,rAo),e(B1,tAo),e(Q,aAo),e(Q,P1),e(P1,ude),e(ude,nAo),e(P1,sAo),e(P1,$j),e($j,lAo),e(P1,iAo),e(Q,dAo),e(Q,I1),e(I1,_de),e(_de,cAo),e(I1,fAo),e(I1,kj),e(kj,mAo),e(I1,gAo),e(Q,hAo),e(Q,q1),e(q1,bde),e(bde,pAo),e(q1,uAo),e(q1,Sj),e(Sj,_Ao),e(q1,bAo),e(Q,vAo),e(Q,N1),e(N1,vde),e(vde,FAo),e(N1,TAo),e(N1,Rj),e(Rj,MAo),e(N1,EAo),e(Q,CAo),e(Q,j1),e(j1,Fde),e(Fde,wAo),e(j1,AAo),e(j1,Bj),e(Bj,yAo),e(j1,LAo),e(Q,xAo),e(Q,D1),e(D1,Tde),e(Tde,$Ao),e(D1,kAo),e(D1,Pj),e(Pj,SAo),e(D1,RAo),e(Q,BAo),e(Q,G1),e(G1,Mde),e(Mde,PAo),e(G1,IAo),e(G1,Ij),e(Ij,qAo),e(G1,NAo),e(Q,jAo),e(Q,O1),e(O1,Ede),e(Ede,DAo),e(O1,GAo),e(O1,qj),e(qj,OAo),e(O1,VAo),e(Q,XAo),e(Q,V1),e(V1,Cde),e(Cde,zAo),e(V1,QAo),e(V1,Nj),e(Nj,WAo),e(V1,HAo),e(Q,UAo),e(Q,X1),e(X1,wde),e(wde,JAo),e(X1,YAo),e(X1,Ade),e(Ade,KAo),e(X1,ZAo),e(Q,e0o),e(Q,z1),e(z1,yde),e(yde,o0o),e(z1,r0o),e(z1,jj),e(jj,t0o),e(z1,a0o),e(Q,n0o),e(Q,Q1),e(Q1,Lde),e(Lde,s0o),e(Q1,l0o),e(Q1,Dj),e(Dj,i0o),e(Q1,d0o),e(Q,c0o),e(Q,W1),e(W1,xde),e(xde,f0o),e(W1,m0o),e(W1,Gj),e(Gj,g0o),e(W1,h0o),e(Q,p0o),e(Q,H1),e(H1,$de),e($de,u0o),e(H1,_0o),e(H1,Oj),e(Oj,b0o),e(H1,v0o),e(Ye,F0o),e(Ye,U1),e(U1,T0o),e(U1,kde),e(kde,M0o),e(U1,E0o),e(U1,Sde),e(Sde,C0o),e(Ye,w0o),M(J1,Ye,null),b(f,hIe,_),b(f,Bi,_),e(Bi,Y1),e(Y1,Rde),M(zy,Rde,null),e(Bi,A0o),e(Bi,Bde),e(Bde,y0o),b(f,pIe,_),b(f,So,_),M(Qy,So,null),e(So,L0o),e(So,Pi),e(Pi,x0o),e(Pi,Vj),e(Vj,$0o),e(Pi,k0o),e(Pi,Xj),e(Xj,S0o),e(Pi,R0o),e(So,B0o),e(So,Wy),e(Wy,P0o),e(Wy,Pde),e(Pde,I0o),e(Wy,q0o),e(So,N0o),e(So,nt),M(Hy,nt,null),e(nt,j0o),e(nt,Ide),e(Ide,D0o),e(nt,G0o),e(nt,Ii),e(Ii,O0o),e(Ii,qde),e(qde,V0o),e(Ii,X0o),e(Ii,zj),e(zj,z0o),e(Ii,Q0o),e(nt,W0o),M(K1,nt,null),e(So,H0o),e(So,Ke),M(Uy,Ke,null),e(Ke,U0o),e(Ke,Nde),e(Nde,J0o),e(Ke,Y0o),e(Ke,$a),e($a,K0o),e($a,jde),e(jde,Z0o),e($a,eyo),e($a,Dde),e(Dde,oyo),e($a,ryo),e($a,Gde),e(Gde,tyo),e($a,ayo),e(Ke,nyo),e(Ke,pe),e(pe,Z1),e(Z1,Ode),e(Ode,syo),e(Z1,lyo),e(Z1,Qj),e(Qj,iyo),e(Z1,dyo),e(pe,cyo),e(pe,eb),e(eb,Vde),e(Vde,fyo),e(eb,myo),e(eb,Wj),e(Wj,gyo),e(eb,hyo),e(pe,pyo),e(pe,ob),e(ob,Xde),e(Xde,uyo),e(ob,_yo),e(ob,Hj),e(Hj,byo),e(ob,vyo),e(pe,Fyo),e(pe,rb),e(rb,zde),e(zde,Tyo),e(rb,Myo),e(rb,Uj),e(Uj,Eyo),e(rb,Cyo),e(pe,wyo),e(pe,tb),e(tb,Qde),e(Qde,Ayo),e(tb,yyo),e(tb,Jj),e(Jj,Lyo),e(tb,xyo),e(pe,$yo),e(pe,ab),e(ab,Wde),e(Wde,kyo),e(ab,Syo),e(ab,Yj),e(Yj,Ryo),e(ab,Byo),e(pe,Pyo),e(pe,nb),e(nb,Hde),e(Hde,Iyo),e(nb,qyo),e(nb,Kj),e(Kj,Nyo),e(nb,jyo),e(pe,Dyo),e(pe,sb),e(sb,Ude),e(Ude,Gyo),e(sb,Oyo),e(sb,Zj),e(Zj,Vyo),e(sb,Xyo),e(pe,zyo),e(pe,lb),e(lb,Jde),e(Jde,Qyo),e(lb,Wyo),e(lb,eD),e(eD,Hyo),e(lb,Uyo),e(pe,Jyo),e(pe,ib),e(ib,Yde),e(Yde,Yyo),e(ib,Kyo),e(ib,oD),e(oD,Zyo),e(ib,eLo),e(pe,oLo),e(pe,db),e(db,Kde),e(Kde,rLo),e(db,tLo),e(db,rD),e(rD,aLo),e(db,nLo),e(pe,sLo),e(pe,cb),e(cb,Zde),e(Zde,lLo),e(cb,iLo),e(cb,tD),e(tD,dLo),e(cb,cLo),e(pe,fLo),e(pe,fb),e(fb,ece),e(ece,mLo),e(fb,gLo),e(fb,aD),e(aD,hLo),e(fb,pLo),e(pe,uLo),e(pe,mb),e(mb,oce),e(oce,_Lo),e(mb,bLo),e(mb,nD),e(nD,vLo),e(mb,FLo),e(pe,TLo),e(pe,gb),e(gb,rce),e(rce,MLo),e(gb,ELo),e(gb,sD),e(sD,CLo),e(gb,wLo),e(pe,ALo),e(pe,hb),e(hb,tce),e(tce,yLo),e(hb,LLo),e(hb,lD),e(lD,xLo),e(hb,$Lo),e(Ke,kLo),e(Ke,pb),e(pb,SLo),e(pb,ace),e(ace,RLo),e(pb,BLo),e(pb,nce),e(nce,PLo),e(Ke,ILo),M(ub,Ke,null),b(f,uIe,_),b(f,qi,_),e(qi,_b),e(_b,sce),M(Jy,sce,null),e(qi,qLo),e(qi,lce),e(lce,NLo),b(f,_Ie,_),b(f,Ro,_),M(Yy,Ro,null),e(Ro,jLo),e(Ro,Ni),e(Ni,DLo),e(Ni,iD),e(iD,GLo),e(Ni,OLo),e(Ni,dD),e(dD,VLo),e(Ni,XLo),e(Ro,zLo),e(Ro,Ky),e(Ky,QLo),e(Ky,ice),e(ice,WLo),e(Ky,HLo),e(Ro,ULo),e(Ro,st),M(Zy,st,null),e(st,JLo),e(st,dce),e(dce,YLo),e(st,KLo),e(st,ji),e(ji,ZLo),e(ji,cce),e(cce,e8o),e(ji,o8o),e(ji,cD),e(cD,r8o),e(ji,t8o),e(st,a8o),M(bb,st,null),e(Ro,n8o),e(Ro,Ze),M(eL,Ze,null),e(Ze,s8o),e(Ze,fce),e(fce,l8o),e(Ze,i8o),e(Ze,ka),e(ka,d8o),e(ka,mce),e(mce,c8o),e(ka,f8o),e(ka,gce),e(gce,m8o),e(ka,g8o),e(ka,hce),e(hce,h8o),e(ka,p8o),e(Ze,u8o),e(Ze,N),e(N,vb),e(vb,pce),e(pce,_8o),e(vb,b8o),e(vb,fD),e(fD,v8o),e(vb,F8o),e(N,T8o),e(N,Fb),e(Fb,uce),e(uce,M8o),e(Fb,E8o),e(Fb,mD),e(mD,C8o),e(Fb,w8o),e(N,A8o),e(N,Tb),e(Tb,_ce),e(_ce,y8o),e(Tb,L8o),e(Tb,gD),e(gD,x8o),e(Tb,$8o),e(N,k8o),e(N,Mb),e(Mb,bce),e(bce,S8o),e(Mb,R8o),e(Mb,hD),e(hD,B8o),e(Mb,P8o),e(N,I8o),e(N,Eb),e(Eb,vce),e(vce,q8o),e(Eb,N8o),e(Eb,pD),e(pD,j8o),e(Eb,D8o),e(N,G8o),e(N,Cb),e(Cb,Fce),e(Fce,O8o),e(Cb,V8o),e(Cb,uD),e(uD,X8o),e(Cb,z8o),e(N,Q8o),e(N,wb),e(wb,Tce),e(Tce,W8o),e(wb,H8o),e(wb,_D),e(_D,U8o),e(wb,J8o),e(N,Y8o),e(N,Ab),e(Ab,Mce),e(Mce,K8o),e(Ab,Z8o),e(Ab,bD),e(bD,exo),e(Ab,oxo),e(N,rxo),e(N,yb),e(yb,Ece),e(Ece,txo),e(yb,axo),e(yb,vD),e(vD,nxo),e(yb,sxo),e(N,lxo),e(N,Lb),e(Lb,Cce),e(Cce,ixo),e(Lb,dxo),e(Lb,FD),e(FD,cxo),e(Lb,fxo),e(N,mxo),e(N,xb),e(xb,wce),e(wce,gxo),e(xb,hxo),e(xb,TD),e(TD,pxo),e(xb,uxo),e(N,_xo),e(N,$b),e($b,Ace),e(Ace,bxo),e($b,vxo),e($b,MD),e(MD,Fxo),e($b,Txo),e(N,Mxo),e(N,kb),e(kb,yce),e(yce,Exo),e(kb,Cxo),e(kb,ED),e(ED,wxo),e(kb,Axo),e(N,yxo),e(N,Sb),e(Sb,Lce),e(Lce,Lxo),e(Sb,xxo),e(Sb,CD),e(CD,$xo),e(Sb,kxo),e(N,Sxo),e(N,Rb),e(Rb,xce),e(xce,Rxo),e(Rb,Bxo),e(Rb,wD),e(wD,Pxo),e(Rb,Ixo),e(N,qxo),e(N,Bb),e(Bb,$ce),e($ce,Nxo),e(Bb,jxo),e(Bb,AD),e(AD,Dxo),e(Bb,Gxo),e(N,Oxo),e(N,Pb),e(Pb,kce),e(kce,Vxo),e(Pb,Xxo),e(Pb,yD),e(yD,zxo),e(Pb,Qxo),e(N,Wxo),e(N,Ib),e(Ib,Sce),e(Sce,Hxo),e(Ib,Uxo),e(Ib,LD),e(LD,Jxo),e(Ib,Yxo),e(N,Kxo),e(N,qb),e(qb,Rce),e(Rce,Zxo),e(qb,e7o),e(qb,xD),e(xD,o7o),e(qb,r7o),e(N,t7o),e(N,Nb),e(Nb,Bce),e(Bce,a7o),e(Nb,n7o),e(Nb,$D),e($D,s7o),e(Nb,l7o),e(N,i7o),e(N,jb),e(jb,Pce),e(Pce,d7o),e(jb,c7o),e(jb,kD),e(kD,f7o),e(jb,m7o),e(N,g7o),e(N,Db),e(Db,Ice),e(Ice,h7o),e(Db,p7o),e(Db,SD),e(SD,u7o),e(Db,_7o),e(N,b7o),e(N,Gb),e(Gb,qce),e(qce,v7o),e(Gb,F7o),e(Gb,RD),e(RD,T7o),e(Gb,M7o),e(N,E7o),e(N,Ob),e(Ob,Nce),e(Nce,C7o),e(Ob,w7o),e(Ob,BD),e(BD,A7o),e(Ob,y7o),e(N,L7o),e(N,Vb),e(Vb,jce),e(jce,x7o),e(Vb,$7o),e(Vb,PD),e(PD,k7o),e(Vb,S7o),e(N,R7o),e(N,Xb),e(Xb,Dce),e(Dce,B7o),e(Xb,P7o),e(Xb,ID),e(ID,I7o),e(Xb,q7o),e(N,N7o),e(N,zb),e(zb,Gce),e(Gce,j7o),e(zb,D7o),e(zb,qD),e(qD,G7o),e(zb,O7o),e(N,V7o),e(N,Qb),e(Qb,Oce),e(Oce,X7o),e(Qb,z7o),e(Qb,ND),e(ND,Q7o),e(Qb,W7o),e(N,H7o),e(N,Wb),e(Wb,Vce),e(Vce,U7o),e(Wb,J7o),e(Wb,jD),e(jD,Y7o),e(Wb,K7o),e(N,Z7o),e(N,Hb),e(Hb,Xce),e(Xce,e9o),e(Hb,o9o),e(Hb,DD),e(DD,r9o),e(Hb,t9o),e(N,a9o),e(N,Ub),e(Ub,zce),e(zce,n9o),e(Ub,s9o),e(Ub,GD),e(GD,l9o),e(Ub,i9o),e(N,d9o),e(N,Jb),e(Jb,Qce),e(Qce,c9o),e(Jb,f9o),e(Jb,OD),e(OD,m9o),e(Jb,g9o),e(N,h9o),e(N,Yb),e(Yb,Wce),e(Wce,p9o),e(Yb,u9o),e(Yb,VD),e(VD,_9o),e(Yb,b9o),e(N,v9o),e(N,Kb),e(Kb,Hce),e(Hce,F9o),e(Kb,T9o),e(Kb,XD),e(XD,M9o),e(Kb,E9o),e(N,C9o),e(N,Zb),e(Zb,Uce),e(Uce,w9o),e(Zb,A9o),e(Zb,zD),e(zD,y9o),e(Zb,L9o),e(N,x9o),e(N,e4),e(e4,Jce),e(Jce,$9o),e(e4,k9o),e(e4,QD),e(QD,S9o),e(e4,R9o),e(N,B9o),e(N,o4),e(o4,Yce),e(Yce,P9o),e(o4,I9o),e(o4,WD),e(WD,q9o),e(o4,N9o),e(N,j9o),e(N,r4),e(r4,Kce),e(Kce,D9o),e(r4,G9o),e(r4,HD),e(HD,O9o),e(r4,V9o),e(N,X9o),e(N,t4),e(t4,Zce),e(Zce,z9o),e(t4,Q9o),e(t4,UD),e(UD,W9o),e(t4,H9o),e(N,U9o),e(N,a4),e(a4,efe),e(efe,J9o),e(a4,Y9o),e(a4,JD),e(JD,K9o),e(a4,Z9o),e(N,e$o),e(N,n4),e(n4,ofe),e(ofe,o$o),e(n4,r$o),e(n4,YD),e(YD,t$o),e(n4,a$o),e(N,n$o),e(N,s4),e(s4,rfe),e(rfe,s$o),e(s4,l$o),e(s4,KD),e(KD,i$o),e(s4,d$o),e(N,c$o),e(N,l4),e(l4,tfe),e(tfe,f$o),e(l4,m$o),e(l4,ZD),e(ZD,g$o),e(l4,h$o),e(N,p$o),e(N,i4),e(i4,afe),e(afe,u$o),e(i4,_$o),e(i4,eG),e(eG,b$o),e(i4,v$o),e(N,F$o),e(N,d4),e(d4,nfe),e(nfe,T$o),e(d4,M$o),e(d4,oG),e(oG,E$o),e(d4,C$o),e(N,w$o),e(N,c4),e(c4,sfe),e(sfe,A$o),e(c4,y$o),e(c4,rG),e(rG,L$o),e(c4,x$o),e(Ze,$$o),e(Ze,f4),e(f4,k$o),e(f4,lfe),e(lfe,S$o),e(f4,R$o),e(f4,ife),e(ife,B$o),e(Ze,P$o),M(m4,Ze,null),b(f,bIe,_),b(f,Di,_),e(Di,g4),e(g4,dfe),M(oL,dfe,null),e(Di,I$o),e(Di,cfe),e(cfe,q$o),b(f,vIe,_),b(f,Bo,_),M(rL,Bo,null),e(Bo,N$o),e(Bo,Gi),e(Gi,j$o),e(Gi,tG),e(tG,D$o),e(Gi,G$o),e(Gi,aG),e(aG,O$o),e(Gi,V$o),e(Bo,X$o),e(Bo,tL),e(tL,z$o),e(tL,ffe),e(ffe,Q$o),e(tL,W$o),e(Bo,H$o),e(Bo,lt),M(aL,lt,null),e(lt,U$o),e(lt,mfe),e(mfe,J$o),e(lt,Y$o),e(lt,Oi),e(Oi,K$o),e(Oi,gfe),e(gfe,Z$o),e(Oi,eko),e(Oi,nG),e(nG,oko),e(Oi,rko),e(lt,tko),M(h4,lt,null),e(Bo,ako),e(Bo,eo),M(nL,eo,null),e(eo,nko),e(eo,hfe),e(hfe,sko),e(eo,lko),e(eo,Sa),e(Sa,iko),e(Sa,pfe),e(pfe,dko),e(Sa,cko),e(Sa,ufe),e(ufe,fko),e(Sa,mko),e(Sa,_fe),e(_fe,gko),e(Sa,hko),e(eo,pko),e(eo,Y),e(Y,p4),e(p4,bfe),e(bfe,uko),e(p4,_ko),e(p4,sG),e(sG,bko),e(p4,vko),e(Y,Fko),e(Y,u4),e(u4,vfe),e(vfe,Tko),e(u4,Mko),e(u4,lG),e(lG,Eko),e(u4,Cko),e(Y,wko),e(Y,_4),e(_4,Ffe),e(Ffe,Ako),e(_4,yko),e(_4,iG),e(iG,Lko),e(_4,xko),e(Y,$ko),e(Y,b4),e(b4,Tfe),e(Tfe,kko),e(b4,Sko),e(b4,dG),e(dG,Rko),e(b4,Bko),e(Y,Pko),e(Y,v4),e(v4,Mfe),e(Mfe,Iko),e(v4,qko),e(v4,cG),e(cG,Nko),e(v4,jko),e(Y,Dko),e(Y,F4),e(F4,Efe),e(Efe,Gko),e(F4,Oko),e(F4,fG),e(fG,Vko),e(F4,Xko),e(Y,zko),e(Y,T4),e(T4,Cfe),e(Cfe,Qko),e(T4,Wko),e(T4,mG),e(mG,Hko),e(T4,Uko),e(Y,Jko),e(Y,M4),e(M4,wfe),e(wfe,Yko),e(M4,Kko),e(M4,gG),e(gG,Zko),e(M4,eSo),e(Y,oSo),e(Y,E4),e(E4,Afe),e(Afe,rSo),e(E4,tSo),e(E4,hG),e(hG,aSo),e(E4,nSo),e(Y,sSo),e(Y,C4),e(C4,yfe),e(yfe,lSo),e(C4,iSo),e(C4,pG),e(pG,dSo),e(C4,cSo),e(Y,fSo),e(Y,w4),e(w4,Lfe),e(Lfe,mSo),e(w4,gSo),e(w4,uG),e(uG,hSo),e(w4,pSo),e(Y,uSo),e(Y,A4),e(A4,xfe),e(xfe,_So),e(A4,bSo),e(A4,_G),e(_G,vSo),e(A4,FSo),e(Y,TSo),e(Y,y4),e(y4,$fe),e($fe,MSo),e(y4,ESo),e(y4,bG),e(bG,CSo),e(y4,wSo),e(Y,ASo),e(Y,L4),e(L4,kfe),e(kfe,ySo),e(L4,LSo),e(L4,vG),e(vG,xSo),e(L4,$So),e(Y,kSo),e(Y,x4),e(x4,Sfe),e(Sfe,SSo),e(x4,RSo),e(x4,FG),e(FG,BSo),e(x4,PSo),e(Y,ISo),e(Y,$4),e($4,Rfe),e(Rfe,qSo),e($4,NSo),e($4,TG),e(TG,jSo),e($4,DSo),e(Y,GSo),e(Y,k4),e(k4,Bfe),e(Bfe,OSo),e(k4,VSo),e(k4,MG),e(MG,XSo),e(k4,zSo),e(Y,QSo),e(Y,S4),e(S4,Pfe),e(Pfe,WSo),e(S4,HSo),e(S4,EG),e(EG,USo),e(S4,JSo),e(Y,YSo),e(Y,R4),e(R4,Ife),e(Ife,KSo),e(R4,ZSo),e(R4,CG),e(CG,eRo),e(R4,oRo),e(Y,rRo),e(Y,B4),e(B4,qfe),e(qfe,tRo),e(B4,aRo),e(B4,wG),e(wG,nRo),e(B4,sRo),e(Y,lRo),e(Y,P4),e(P4,Nfe),e(Nfe,iRo),e(P4,dRo),e(P4,AG),e(AG,cRo),e(P4,fRo),e(Y,mRo),e(Y,I4),e(I4,jfe),e(jfe,gRo),e(I4,hRo),e(I4,yG),e(yG,pRo),e(I4,uRo),e(Y,_Ro),e(Y,q4),e(q4,Dfe),e(Dfe,bRo),e(q4,vRo),e(q4,LG),e(LG,FRo),e(q4,TRo),e(Y,MRo),e(Y,N4),e(N4,Gfe),e(Gfe,ERo),e(N4,CRo),e(N4,xG),e(xG,wRo),e(N4,ARo),e(Y,yRo),e(Y,j4),e(j4,Ofe),e(Ofe,LRo),e(j4,xRo),e(j4,$G),e($G,$Ro),e(j4,kRo),e(Y,SRo),e(Y,D4),e(D4,Vfe),e(Vfe,RRo),e(D4,BRo),e(D4,kG),e(kG,PRo),e(D4,IRo),e(Y,qRo),e(Y,G4),e(G4,Xfe),e(Xfe,NRo),e(G4,jRo),e(G4,SG),e(SG,DRo),e(G4,GRo),e(Y,ORo),e(Y,O4),e(O4,zfe),e(zfe,VRo),e(O4,XRo),e(O4,RG),e(RG,zRo),e(O4,QRo),e(Y,WRo),e(Y,V4),e(V4,Qfe),e(Qfe,HRo),e(V4,URo),e(V4,BG),e(BG,JRo),e(V4,YRo),e(eo,KRo),e(eo,X4),e(X4,ZRo),e(X4,Wfe),e(Wfe,eBo),e(X4,oBo),e(X4,Hfe),e(Hfe,rBo),e(eo,tBo),M(z4,eo,null),b(f,FIe,_),b(f,Vi,_),e(Vi,Q4),e(Q4,Ufe),M(sL,Ufe,null),e(Vi,aBo),e(Vi,Jfe),e(Jfe,nBo),b(f,TIe,_),b(f,Po,_),M(lL,Po,null),e(Po,sBo),e(Po,Xi),e(Xi,lBo),e(Xi,PG),e(PG,iBo),e(Xi,dBo),e(Xi,IG),e(IG,cBo),e(Xi,fBo),e(Po,mBo),e(Po,iL),e(iL,gBo),e(iL,Yfe),e(Yfe,hBo),e(iL,pBo),e(Po,uBo),e(Po,it),M(dL,it,null),e(it,_Bo),e(it,Kfe),e(Kfe,bBo),e(it,vBo),e(it,zi),e(zi,FBo),e(zi,Zfe),e(Zfe,TBo),e(zi,MBo),e(zi,qG),e(qG,EBo),e(zi,CBo),e(it,wBo),M(W4,it,null),e(Po,ABo),e(Po,oo),M(cL,oo,null),e(oo,yBo),e(oo,eme),e(eme,LBo),e(oo,xBo),e(oo,Ra),e(Ra,$Bo),e(Ra,ome),e(ome,kBo),e(Ra,SBo),e(Ra,rme),e(rme,RBo),e(Ra,BBo),e(Ra,tme),e(tme,PBo),e(Ra,IBo),e(oo,qBo),e(oo,Yr),e(Yr,H4),e(H4,ame),e(ame,NBo),e(H4,jBo),e(H4,NG),e(NG,DBo),e(H4,GBo),e(Yr,OBo),e(Yr,U4),e(U4,nme),e(nme,VBo),e(U4,XBo),e(U4,jG),e(jG,zBo),e(U4,QBo),e(Yr,WBo),e(Yr,J4),e(J4,sme),e(sme,HBo),e(J4,UBo),e(J4,DG),e(DG,JBo),e(J4,YBo),e(Yr,KBo),e(Yr,Y4),e(Y4,lme),e(lme,ZBo),e(Y4,ePo),e(Y4,GG),e(GG,oPo),e(Y4,rPo),e(Yr,tPo),e(Yr,K4),e(K4,ime),e(ime,aPo),e(K4,nPo),e(K4,OG),e(OG,sPo),e(K4,lPo),e(oo,iPo),e(oo,Z4),e(Z4,dPo),e(Z4,dme),e(dme,cPo),e(Z4,fPo),e(Z4,cme),e(cme,mPo),e(oo,gPo),M(e2,oo,null),b(f,MIe,_),b(f,Qi,_),e(Qi,o2),e(o2,fme),M(fL,fme,null),e(Qi,hPo),e(Qi,mme),e(mme,pPo),b(f,EIe,_),b(f,Io,_),M(mL,Io,null),e(Io,uPo),e(Io,Wi),e(Wi,_Po),e(Wi,VG),e(VG,bPo),e(Wi,vPo),e(Wi,XG),e(XG,FPo),e(Wi,TPo),e(Io,MPo),e(Io,gL),e(gL,EPo),e(gL,gme),e(gme,CPo),e(gL,wPo),e(Io,APo),e(Io,dt),M(hL,dt,null),e(dt,yPo),e(dt,hme),e(hme,LPo),e(dt,xPo),e(dt,Hi),e(Hi,$Po),e(Hi,pme),e(pme,kPo),e(Hi,SPo),e(Hi,zG),e(zG,RPo),e(Hi,BPo),e(dt,PPo),M(r2,dt,null),e(Io,IPo),e(Io,ro),M(pL,ro,null),e(ro,qPo),e(ro,ume),e(ume,NPo),e(ro,jPo),e(ro,Ba),e(Ba,DPo),e(Ba,_me),e(_me,GPo),e(Ba,OPo),e(Ba,bme),e(bme,VPo),e(Ba,XPo),e(Ba,vme),e(vme,zPo),e(Ba,QPo),e(ro,WPo),e(ro,U),e(U,t2),e(t2,Fme),e(Fme,HPo),e(t2,UPo),e(t2,QG),e(QG,JPo),e(t2,YPo),e(U,KPo),e(U,a2),e(a2,Tme),e(Tme,ZPo),e(a2,eIo),e(a2,WG),e(WG,oIo),e(a2,rIo),e(U,tIo),e(U,n2),e(n2,Mme),e(Mme,aIo),e(n2,nIo),e(n2,HG),e(HG,sIo),e(n2,lIo),e(U,iIo),e(U,s2),e(s2,Eme),e(Eme,dIo),e(s2,cIo),e(s2,UG),e(UG,fIo),e(s2,mIo),e(U,gIo),e(U,l2),e(l2,Cme),e(Cme,hIo),e(l2,pIo),e(l2,JG),e(JG,uIo),e(l2,_Io),e(U,bIo),e(U,i2),e(i2,wme),e(wme,vIo),e(i2,FIo),e(i2,YG),e(YG,TIo),e(i2,MIo),e(U,EIo),e(U,d2),e(d2,Ame),e(Ame,CIo),e(d2,wIo),e(d2,KG),e(KG,AIo),e(d2,yIo),e(U,LIo),e(U,c2),e(c2,yme),e(yme,xIo),e(c2,$Io),e(c2,ZG),e(ZG,kIo),e(c2,SIo),e(U,RIo),e(U,f2),e(f2,Lme),e(Lme,BIo),e(f2,PIo),e(f2,eO),e(eO,IIo),e(f2,qIo),e(U,NIo),e(U,m2),e(m2,xme),e(xme,jIo),e(m2,DIo),e(m2,oO),e(oO,GIo),e(m2,OIo),e(U,VIo),e(U,g2),e(g2,$me),e($me,XIo),e(g2,zIo),e(g2,rO),e(rO,QIo),e(g2,WIo),e(U,HIo),e(U,h2),e(h2,kme),e(kme,UIo),e(h2,JIo),e(h2,tO),e(tO,YIo),e(h2,KIo),e(U,ZIo),e(U,p2),e(p2,Sme),e(Sme,eqo),e(p2,oqo),e(p2,aO),e(aO,rqo),e(p2,tqo),e(U,aqo),e(U,u2),e(u2,Rme),e(Rme,nqo),e(u2,sqo),e(u2,nO),e(nO,lqo),e(u2,iqo),e(U,dqo),e(U,_2),e(_2,Bme),e(Bme,cqo),e(_2,fqo),e(_2,sO),e(sO,mqo),e(_2,gqo),e(U,hqo),e(U,b2),e(b2,Pme),e(Pme,pqo),e(b2,uqo),e(b2,lO),e(lO,_qo),e(b2,bqo),e(U,vqo),e(U,v2),e(v2,Ime),e(Ime,Fqo),e(v2,Tqo),e(v2,iO),e(iO,Mqo),e(v2,Eqo),e(U,Cqo),e(U,F2),e(F2,qme),e(qme,wqo),e(F2,Aqo),e(F2,dO),e(dO,yqo),e(F2,Lqo),e(U,xqo),e(U,T2),e(T2,Nme),e(Nme,$qo),e(T2,kqo),e(T2,cO),e(cO,Sqo),e(T2,Rqo),e(U,Bqo),e(U,M2),e(M2,jme),e(jme,Pqo),e(M2,Iqo),e(M2,fO),e(fO,qqo),e(M2,Nqo),e(U,jqo),e(U,E2),e(E2,Dme),e(Dme,Dqo),e(E2,Gqo),e(E2,mO),e(mO,Oqo),e(E2,Vqo),e(U,Xqo),e(U,C2),e(C2,Gme),e(Gme,zqo),e(C2,Qqo),e(C2,gO),e(gO,Wqo),e(C2,Hqo),e(U,Uqo),e(U,w2),e(w2,Ome),e(Ome,Jqo),e(w2,Yqo),e(w2,hO),e(hO,Kqo),e(w2,Zqo),e(U,eNo),e(U,A2),e(A2,Vme),e(Vme,oNo),e(A2,rNo),e(A2,pO),e(pO,tNo),e(A2,aNo),e(U,nNo),e(U,y2),e(y2,Xme),e(Xme,sNo),e(y2,lNo),e(y2,uO),e(uO,iNo),e(y2,dNo),e(U,cNo),e(U,L2),e(L2,zme),e(zme,fNo),e(L2,mNo),e(L2,_O),e(_O,gNo),e(L2,hNo),e(U,pNo),e(U,x2),e(x2,Qme),e(Qme,uNo),e(x2,_No),e(x2,bO),e(bO,bNo),e(x2,vNo),e(U,FNo),e(U,$2),e($2,Wme),e(Wme,TNo),e($2,MNo),e($2,vO),e(vO,ENo),e($2,CNo),e(U,wNo),e(U,k2),e(k2,Hme),e(Hme,ANo),e(k2,yNo),e(k2,FO),e(FO,LNo),e(k2,xNo),e(U,$No),e(U,S2),e(S2,Ume),e(Ume,kNo),e(S2,SNo),e(S2,TO),e(TO,RNo),e(S2,BNo),e(U,PNo),e(U,R2),e(R2,Jme),e(Jme,INo),e(R2,qNo),e(R2,MO),e(MO,NNo),e(R2,jNo),e(U,DNo),e(U,B2),e(B2,Yme),e(Yme,GNo),e(B2,ONo),e(B2,EO),e(EO,VNo),e(B2,XNo),e(U,zNo),e(U,P2),e(P2,Kme),e(Kme,QNo),e(P2,WNo),e(P2,CO),e(CO,HNo),e(P2,UNo),e(ro,JNo),e(ro,I2),e(I2,YNo),e(I2,Zme),e(Zme,KNo),e(I2,ZNo),e(I2,ege),e(ege,ejo),e(ro,ojo),M(q2,ro,null),b(f,CIe,_),b(f,Ui,_),e(Ui,N2),e(N2,oge),M(uL,oge,null),e(Ui,rjo),e(Ui,rge),e(rge,tjo),b(f,wIe,_),b(f,qo,_),M(_L,qo,null),e(qo,ajo),e(qo,Ji),e(Ji,njo),e(Ji,wO),e(wO,sjo),e(Ji,ljo),e(Ji,AO),e(AO,ijo),e(Ji,djo),e(qo,cjo),e(qo,bL),e(bL,fjo),e(bL,tge),e(tge,mjo),e(bL,gjo),e(qo,hjo),e(qo,ct),M(vL,ct,null),e(ct,pjo),e(ct,age),e(age,ujo),e(ct,_jo),e(ct,Yi),e(Yi,bjo),e(Yi,nge),e(nge,vjo),e(Yi,Fjo),e(Yi,yO),e(yO,Tjo),e(Yi,Mjo),e(ct,Ejo),M(j2,ct,null),e(qo,Cjo),e(qo,to),M(FL,to,null),e(to,wjo),e(to,sge),e(sge,Ajo),e(to,yjo),e(to,Pa),e(Pa,Ljo),e(Pa,lge),e(lge,xjo),e(Pa,$jo),e(Pa,ige),e(ige,kjo),e(Pa,Sjo),e(Pa,dge),e(dge,Rjo),e(Pa,Bjo),e(to,Pjo),e(to,O),e(O,D2),e(D2,cge),e(cge,Ijo),e(D2,qjo),e(D2,LO),e(LO,Njo),e(D2,jjo),e(O,Djo),e(O,G2),e(G2,fge),e(fge,Gjo),e(G2,Ojo),e(G2,xO),e(xO,Vjo),e(G2,Xjo),e(O,zjo),e(O,O2),e(O2,mge),e(mge,Qjo),e(O2,Wjo),e(O2,$O),e($O,Hjo),e(O2,Ujo),e(O,Jjo),e(O,V2),e(V2,gge),e(gge,Yjo),e(V2,Kjo),e(V2,kO),e(kO,Zjo),e(V2,eDo),e(O,oDo),e(O,X2),e(X2,hge),e(hge,rDo),e(X2,tDo),e(X2,SO),e(SO,aDo),e(X2,nDo),e(O,sDo),e(O,z2),e(z2,pge),e(pge,lDo),e(z2,iDo),e(z2,RO),e(RO,dDo),e(z2,cDo),e(O,fDo),e(O,Q2),e(Q2,uge),e(uge,mDo),e(Q2,gDo),e(Q2,BO),e(BO,hDo),e(Q2,pDo),e(O,uDo),e(O,W2),e(W2,_ge),e(_ge,_Do),e(W2,bDo),e(W2,PO),e(PO,vDo),e(W2,FDo),e(O,TDo),e(O,H2),e(H2,bge),e(bge,MDo),e(H2,EDo),e(H2,IO),e(IO,CDo),e(H2,wDo),e(O,ADo),e(O,U2),e(U2,vge),e(vge,yDo),e(U2,LDo),e(U2,qO),e(qO,xDo),e(U2,$Do),e(O,kDo),e(O,J2),e(J2,Fge),e(Fge,SDo),e(J2,RDo),e(J2,NO),e(NO,BDo),e(J2,PDo),e(O,IDo),e(O,Y2),e(Y2,Tge),e(Tge,qDo),e(Y2,NDo),e(Y2,jO),e(jO,jDo),e(Y2,DDo),e(O,GDo),e(O,K2),e(K2,Mge),e(Mge,ODo),e(K2,VDo),e(K2,DO),e(DO,XDo),e(K2,zDo),e(O,QDo),e(O,Z2),e(Z2,Ege),e(Ege,WDo),e(Z2,HDo),e(Z2,GO),e(GO,UDo),e(Z2,JDo),e(O,YDo),e(O,e5),e(e5,Cge),e(Cge,KDo),e(e5,ZDo),e(e5,OO),e(OO,eGo),e(e5,oGo),e(O,rGo),e(O,o5),e(o5,wge),e(wge,tGo),e(o5,aGo),e(o5,VO),e(VO,nGo),e(o5,sGo),e(O,lGo),e(O,r5),e(r5,Age),e(Age,iGo),e(r5,dGo),e(r5,XO),e(XO,cGo),e(r5,fGo),e(O,mGo),e(O,t5),e(t5,yge),e(yge,gGo),e(t5,hGo),e(t5,zO),e(zO,pGo),e(t5,uGo),e(O,_Go),e(O,a5),e(a5,Lge),e(Lge,bGo),e(a5,vGo),e(a5,QO),e(QO,FGo),e(a5,TGo),e(O,MGo),e(O,n5),e(n5,xge),e(xge,EGo),e(n5,CGo),e(n5,WO),e(WO,wGo),e(n5,AGo),e(O,yGo),e(O,s5),e(s5,$ge),e($ge,LGo),e(s5,xGo),e(s5,HO),e(HO,$Go),e(s5,kGo),e(O,SGo),e(O,l5),e(l5,kge),e(kge,RGo),e(l5,BGo),e(l5,UO),e(UO,PGo),e(l5,IGo),e(O,qGo),e(O,i5),e(i5,Sge),e(Sge,NGo),e(i5,jGo),e(i5,JO),e(JO,DGo),e(i5,GGo),e(O,OGo),e(O,d5),e(d5,Rge),e(Rge,VGo),e(d5,XGo),e(d5,YO),e(YO,zGo),e(d5,QGo),e(O,WGo),e(O,c5),e(c5,Bge),e(Bge,HGo),e(c5,UGo),e(c5,KO),e(KO,JGo),e(c5,YGo),e(O,KGo),e(O,f5),e(f5,Pge),e(Pge,ZGo),e(f5,eOo),e(f5,ZO),e(ZO,oOo),e(f5,rOo),e(O,tOo),e(O,m5),e(m5,Ige),e(Ige,aOo),e(m5,nOo),e(m5,eV),e(eV,sOo),e(m5,lOo),e(O,iOo),e(O,g5),e(g5,qge),e(qge,dOo),e(g5,cOo),e(g5,oV),e(oV,fOo),e(g5,mOo),e(O,gOo),e(O,h5),e(h5,Nge),e(Nge,hOo),e(h5,pOo),e(h5,rV),e(rV,uOo),e(h5,_Oo),e(O,bOo),e(O,p5),e(p5,jge),e(jge,vOo),e(p5,FOo),e(p5,tV),e(tV,TOo),e(p5,MOo),e(O,EOo),e(O,u5),e(u5,Dge),e(Dge,COo),e(u5,wOo),e(u5,aV),e(aV,AOo),e(u5,yOo),e(O,LOo),e(O,_5),e(_5,Gge),e(Gge,xOo),e(_5,$Oo),e(_5,nV),e(nV,kOo),e(_5,SOo),e(O,ROo),e(O,b5),e(b5,Oge),e(Oge,BOo),e(b5,POo),e(b5,sV),e(sV,IOo),e(b5,qOo),e(O,NOo),e(O,v5),e(v5,Vge),e(Vge,jOo),e(v5,DOo),e(v5,lV),e(lV,GOo),e(v5,OOo),e(O,VOo),e(O,F5),e(F5,Xge),e(Xge,XOo),e(F5,zOo),e(F5,iV),e(iV,QOo),e(F5,WOo),e(O,HOo),e(O,T5),e(T5,zge),e(zge,UOo),e(T5,JOo),e(T5,dV),e(dV,YOo),e(T5,KOo),e(O,ZOo),e(O,M5),e(M5,Qge),e(Qge,eVo),e(M5,oVo),e(M5,cV),e(cV,rVo),e(M5,tVo),e(O,aVo),e(O,E5),e(E5,Wge),e(Wge,nVo),e(E5,sVo),e(E5,fV),e(fV,lVo),e(E5,iVo),e(O,dVo),e(O,C5),e(C5,Hge),e(Hge,cVo),e(C5,fVo),e(C5,mV),e(mV,mVo),e(C5,gVo),e(to,hVo),e(to,w5),e(w5,pVo),e(w5,Uge),e(Uge,uVo),e(w5,_Vo),e(w5,Jge),e(Jge,bVo),e(to,vVo),M(A5,to,null),b(f,AIe,_),b(f,Ki,_),e(Ki,y5),e(y5,Yge),M(TL,Yge,null),e(Ki,FVo),e(Ki,Kge),e(Kge,TVo),b(f,yIe,_),b(f,No,_),M(ML,No,null),e(No,MVo),e(No,Zi),e(Zi,EVo),e(Zi,gV),e(gV,CVo),e(Zi,wVo),e(Zi,hV),e(hV,AVo),e(Zi,yVo),e(No,LVo),e(No,EL),e(EL,xVo),e(EL,Zge),e(Zge,$Vo),e(EL,kVo),e(No,SVo),e(No,ft),M(CL,ft,null),e(ft,RVo),e(ft,ehe),e(ehe,BVo),e(ft,PVo),e(ft,ed),e(ed,IVo),e(ed,ohe),e(ohe,qVo),e(ed,NVo),e(ed,pV),e(pV,jVo),e(ed,DVo),e(ft,GVo),M(L5,ft,null),e(No,OVo),e(No,ao),M(wL,ao,null),e(ao,VVo),e(ao,rhe),e(rhe,XVo),e(ao,zVo),e(ao,Ia),e(Ia,QVo),e(Ia,the),e(the,WVo),e(Ia,HVo),e(Ia,ahe),e(ahe,UVo),e(Ia,JVo),e(Ia,nhe),e(nhe,YVo),e(Ia,KVo),e(ao,ZVo),e(ao,she),e(she,x5),e(x5,lhe),e(lhe,eXo),e(x5,oXo),e(x5,uV),e(uV,rXo),e(x5,tXo),e(ao,aXo),e(ao,$5),e($5,nXo),e($5,ihe),e(ihe,sXo),e($5,lXo),e($5,dhe),e(dhe,iXo),e(ao,dXo),M(k5,ao,null),b(f,LIe,_),b(f,od,_),e(od,S5),e(S5,che),M(AL,che,null),e(od,cXo),e(od,fhe),e(fhe,fXo),b(f,xIe,_),b(f,jo,_),M(yL,jo,null),e(jo,mXo),e(jo,rd),e(rd,gXo),e(rd,_V),e(_V,hXo),e(rd,pXo),e(rd,bV),e(bV,uXo),e(rd,_Xo),e(jo,bXo),e(jo,LL),e(LL,vXo),e(LL,mhe),e(mhe,FXo),e(LL,TXo),e(jo,MXo),e(jo,mt),M(xL,mt,null),e(mt,EXo),e(mt,ghe),e(ghe,CXo),e(mt,wXo),e(mt,td),e(td,AXo),e(td,hhe),e(hhe,yXo),e(td,LXo),e(td,vV),e(vV,xXo),e(td,$Xo),e(mt,kXo),M(R5,mt,null),e(jo,SXo),e(jo,no),M($L,no,null),e(no,RXo),e(no,phe),e(phe,BXo),e(no,PXo),e(no,qa),e(qa,IXo),e(qa,uhe),e(uhe,qXo),e(qa,NXo),e(qa,_he),e(_he,jXo),e(qa,DXo),e(qa,bhe),e(bhe,GXo),e(qa,OXo),e(no,VXo),e(no,Fe),e(Fe,B5),e(B5,vhe),e(vhe,XXo),e(B5,zXo),e(B5,FV),e(FV,QXo),e(B5,WXo),e(Fe,HXo),e(Fe,P5),e(P5,Fhe),e(Fhe,UXo),e(P5,JXo),e(P5,TV),e(TV,YXo),e(P5,KXo),e(Fe,ZXo),e(Fe,I5),e(I5,The),e(The,ezo),e(I5,ozo),e(I5,MV),e(MV,rzo),e(I5,tzo),e(Fe,azo),e(Fe,Bs),e(Bs,Mhe),e(Mhe,nzo),e(Bs,szo),e(Bs,EV),e(EV,lzo),e(Bs,izo),e(Bs,CV),e(CV,dzo),e(Bs,czo),e(Fe,fzo),e(Fe,q5),e(q5,Ehe),e(Ehe,mzo),e(q5,gzo),e(q5,wV),e(wV,hzo),e(q5,pzo),e(Fe,uzo),e(Fe,gt),e(gt,Che),e(Che,_zo),e(gt,bzo),e(gt,AV),e(AV,vzo),e(gt,Fzo),e(gt,yV),e(yV,Tzo),e(gt,Mzo),e(gt,LV),e(LV,Ezo),e(gt,Czo),e(Fe,wzo),e(Fe,N5),e(N5,whe),e(whe,Azo),e(N5,yzo),e(N5,xV),e(xV,Lzo),e(N5,xzo),e(Fe,$zo),e(Fe,j5),e(j5,Ahe),e(Ahe,kzo),e(j5,Szo),e(j5,$V),e($V,Rzo),e(j5,Bzo),e(Fe,Pzo),e(Fe,D5),e(D5,yhe),e(yhe,Izo),e(D5,qzo),e(D5,kV),e(kV,Nzo),e(D5,jzo),e(Fe,Dzo),e(Fe,G5),e(G5,Lhe),e(Lhe,Gzo),e(G5,Ozo),e(G5,SV),e(SV,Vzo),e(G5,Xzo),e(Fe,zzo),e(Fe,O5),e(O5,xhe),e(xhe,Qzo),e(O5,Wzo),e(O5,RV),e(RV,Hzo),e(O5,Uzo),e(Fe,Jzo),e(Fe,V5),e(V5,$he),e($he,Yzo),e(V5,Kzo),e(V5,BV),e(BV,Zzo),e(V5,eQo),e(Fe,oQo),e(Fe,X5),e(X5,khe),e(khe,rQo),e(X5,tQo),e(X5,PV),e(PV,aQo),e(X5,nQo),e(no,sQo),e(no,z5),e(z5,lQo),e(z5,She),e(She,iQo),e(z5,dQo),e(z5,Rhe),e(Rhe,cQo),e(no,fQo),M(Q5,no,null),b(f,$Ie,_),b(f,ad,_),e(ad,W5),e(W5,Bhe),M(kL,Bhe,null),e(ad,mQo),e(ad,Phe),e(Phe,gQo),b(f,kIe,_),b(f,Do,_),M(SL,Do,null),e(Do,hQo),e(Do,nd),e(nd,pQo),e(nd,IV),e(IV,uQo),e(nd,_Qo),e(nd,qV),e(qV,bQo),e(nd,vQo),e(Do,FQo),e(Do,RL),e(RL,TQo),e(RL,Ihe),e(Ihe,MQo),e(RL,EQo),e(Do,CQo),e(Do,ht),M(BL,ht,null),e(ht,wQo),e(ht,qhe),e(qhe,AQo),e(ht,yQo),e(ht,sd),e(sd,LQo),e(sd,Nhe),e(Nhe,xQo),e(sd,$Qo),e(sd,NV),e(NV,kQo),e(sd,SQo),e(ht,RQo),M(H5,ht,null),e(Do,BQo),e(Do,so),M(PL,so,null),e(so,PQo),e(so,jhe),e(jhe,IQo),e(so,qQo),e(so,Na),e(Na,NQo),e(Na,Dhe),e(Dhe,jQo),e(Na,DQo),e(Na,Ghe),e(Ghe,GQo),e(Na,OQo),e(Na,Ohe),e(Ohe,VQo),e(Na,XQo),e(so,zQo),e(so,Vhe),e(Vhe,U5),e(U5,Xhe),e(Xhe,QQo),e(U5,WQo),e(U5,jV),e(jV,HQo),e(U5,UQo),e(so,JQo),e(so,J5),e(J5,YQo),e(J5,zhe),e(zhe,KQo),e(J5,ZQo),e(J5,Qhe),e(Qhe,eWo),e(so,oWo),M(Y5,so,null),b(f,SIe,_),b(f,ld,_),e(ld,K5),e(K5,Whe),M(IL,Whe,null),e(ld,rWo),e(ld,Hhe),e(Hhe,tWo),b(f,RIe,_),b(f,Go,_),M(qL,Go,null),e(Go,aWo),e(Go,id),e(id,nWo),e(id,DV),e(DV,sWo),e(id,lWo),e(id,GV),e(GV,iWo),e(id,dWo),e(Go,cWo),e(Go,NL),e(NL,fWo),e(NL,Uhe),e(Uhe,mWo),e(NL,gWo),e(Go,hWo),e(Go,pt),M(jL,pt,null),e(pt,pWo),e(pt,Jhe),e(Jhe,uWo),e(pt,_Wo),e(pt,dd),e(dd,bWo),e(dd,Yhe),e(Yhe,vWo),e(dd,FWo),e(dd,OV),e(OV,TWo),e(dd,MWo),e(pt,EWo),M(Z5,pt,null),e(Go,CWo),e(Go,lo),M(DL,lo,null),e(lo,wWo),e(lo,Khe),e(Khe,AWo),e(lo,yWo),e(lo,ja),e(ja,LWo),e(ja,Zhe),e(Zhe,xWo),e(ja,$Wo),e(ja,epe),e(epe,kWo),e(ja,SWo),e(ja,ope),e(ope,RWo),e(ja,BWo),e(lo,PWo),e(lo,Ne),e(Ne,e3),e(e3,rpe),e(rpe,IWo),e(e3,qWo),e(e3,VV),e(VV,NWo),e(e3,jWo),e(Ne,DWo),e(Ne,o3),e(o3,tpe),e(tpe,GWo),e(o3,OWo),e(o3,XV),e(XV,VWo),e(o3,XWo),e(Ne,zWo),e(Ne,r3),e(r3,ape),e(ape,QWo),e(r3,WWo),e(r3,zV),e(zV,HWo),e(r3,UWo),e(Ne,JWo),e(Ne,t3),e(t3,npe),e(npe,YWo),e(t3,KWo),e(t3,QV),e(QV,ZWo),e(t3,eHo),e(Ne,oHo),e(Ne,a3),e(a3,spe),e(spe,rHo),e(a3,tHo),e(a3,WV),e(WV,aHo),e(a3,nHo),e(Ne,sHo),e(Ne,n3),e(n3,lpe),e(lpe,lHo),e(n3,iHo),e(n3,HV),e(HV,dHo),e(n3,cHo),e(Ne,fHo),e(Ne,s3),e(s3,ipe),e(ipe,mHo),e(s3,gHo),e(s3,UV),e(UV,hHo),e(s3,pHo),e(Ne,uHo),e(Ne,l3),e(l3,dpe),e(dpe,_Ho),e(l3,bHo),e(l3,JV),e(JV,vHo),e(l3,FHo),e(lo,THo),e(lo,i3),e(i3,MHo),e(i3,cpe),e(cpe,EHo),e(i3,CHo),e(i3,fpe),e(fpe,wHo),e(lo,AHo),M(d3,lo,null),b(f,BIe,_),b(f,cd,_),e(cd,c3),e(c3,mpe),M(GL,mpe,null),e(cd,yHo),e(cd,gpe),e(gpe,LHo),b(f,PIe,_),b(f,Oo,_),M(OL,Oo,null),e(Oo,xHo),e(Oo,fd),e(fd,$Ho),e(fd,YV),e(YV,kHo),e(fd,SHo),e(fd,KV),e(KV,RHo),e(fd,BHo),e(Oo,PHo),e(Oo,VL),e(VL,IHo),e(VL,hpe),e(hpe,qHo),e(VL,NHo),e(Oo,jHo),e(Oo,ut),M(XL,ut,null),e(ut,DHo),e(ut,ppe),e(ppe,GHo),e(ut,OHo),e(ut,md),e(md,VHo),e(md,upe),e(upe,XHo),e(md,zHo),e(md,ZV),e(ZV,QHo),e(md,WHo),e(ut,HHo),M(f3,ut,null),e(Oo,UHo),e(Oo,io),M(zL,io,null),e(io,JHo),e(io,_pe),e(_pe,YHo),e(io,KHo),e(io,Da),e(Da,ZHo),e(Da,bpe),e(bpe,eUo),e(Da,oUo),e(Da,vpe),e(vpe,rUo),e(Da,tUo),e(Da,Fpe),e(Fpe,aUo),e(Da,nUo),e(io,sUo),e(io,Ga),e(Ga,m3),e(m3,Tpe),e(Tpe,lUo),e(m3,iUo),e(m3,eX),e(eX,dUo),e(m3,cUo),e(Ga,fUo),e(Ga,g3),e(g3,Mpe),e(Mpe,mUo),e(g3,gUo),e(g3,oX),e(oX,hUo),e(g3,pUo),e(Ga,uUo),e(Ga,h3),e(h3,Epe),e(Epe,_Uo),e(h3,bUo),e(h3,rX),e(rX,vUo),e(h3,FUo),e(Ga,TUo),e(Ga,p3),e(p3,Cpe),e(Cpe,MUo),e(p3,EUo),e(p3,tX),e(tX,CUo),e(p3,wUo),e(io,AUo),e(io,u3),e(u3,yUo),e(u3,wpe),e(wpe,LUo),e(u3,xUo),e(u3,Ape),e(Ape,$Uo),e(io,kUo),M(_3,io,null),b(f,IIe,_),b(f,gd,_),e(gd,b3),e(b3,ype),M(QL,ype,null),e(gd,SUo),e(gd,Lpe),e(Lpe,RUo),b(f,qIe,_),b(f,Vo,_),M(WL,Vo,null),e(Vo,BUo),e(Vo,hd),e(hd,PUo),e(hd,aX),e(aX,IUo),e(hd,qUo),e(hd,nX),e(nX,NUo),e(hd,jUo),e(Vo,DUo),e(Vo,HL),e(HL,GUo),e(HL,xpe),e(xpe,OUo),e(HL,VUo),e(Vo,XUo),e(Vo,_t),M(UL,_t,null),e(_t,zUo),e(_t,$pe),e($pe,QUo),e(_t,WUo),e(_t,pd),e(pd,HUo),e(pd,kpe),e(kpe,UUo),e(pd,JUo),e(pd,sX),e(sX,YUo),e(pd,KUo),e(_t,ZUo),M(v3,_t,null),e(Vo,eJo),e(Vo,co),M(JL,co,null),e(co,oJo),e(co,Spe),e(Spe,rJo),e(co,tJo),e(co,Oa),e(Oa,aJo),e(Oa,Rpe),e(Rpe,nJo),e(Oa,sJo),e(Oa,Bpe),e(Bpe,lJo),e(Oa,iJo),e(Oa,Ppe),e(Ppe,dJo),e(Oa,cJo),e(co,fJo),e(co,je),e(je,F3),e(F3,Ipe),e(Ipe,mJo),e(F3,gJo),e(F3,lX),e(lX,hJo),e(F3,pJo),e(je,uJo),e(je,T3),e(T3,qpe),e(qpe,_Jo),e(T3,bJo),e(T3,iX),e(iX,vJo),e(T3,FJo),e(je,TJo),e(je,M3),e(M3,Npe),e(Npe,MJo),e(M3,EJo),e(M3,dX),e(dX,CJo),e(M3,wJo),e(je,AJo),e(je,E3),e(E3,jpe),e(jpe,yJo),e(E3,LJo),e(E3,cX),e(cX,xJo),e(E3,$Jo),e(je,kJo),e(je,C3),e(C3,Dpe),e(Dpe,SJo),e(C3,RJo),e(C3,fX),e(fX,BJo),e(C3,PJo),e(je,IJo),e(je,w3),e(w3,Gpe),e(Gpe,qJo),e(w3,NJo),e(w3,mX),e(mX,jJo),e(w3,DJo),e(je,GJo),e(je,A3),e(A3,Ope),e(Ope,OJo),e(A3,VJo),e(A3,gX),e(gX,XJo),e(A3,zJo),e(je,QJo),e(je,y3),e(y3,Vpe),e(Vpe,WJo),e(y3,HJo),e(y3,hX),e(hX,UJo),e(y3,JJo),e(co,YJo),e(co,L3),e(L3,KJo),e(L3,Xpe),e(Xpe,ZJo),e(L3,eYo),e(L3,zpe),e(zpe,oYo),e(co,rYo),M(x3,co,null),b(f,NIe,_),b(f,ud,_),e(ud,$3),e($3,Qpe),M(YL,Qpe,null),e(ud,tYo),e(ud,Wpe),e(Wpe,aYo),b(f,jIe,_),b(f,Xo,_),M(KL,Xo,null),e(Xo,nYo),e(Xo,_d),e(_d,sYo),e(_d,pX),e(pX,lYo),e(_d,iYo),e(_d,uX),e(uX,dYo),e(_d,cYo),e(Xo,fYo),e(Xo,ZL),e(ZL,mYo),e(ZL,Hpe),e(Hpe,gYo),e(ZL,hYo),e(Xo,pYo),e(Xo,bt),M(e8,bt,null),e(bt,uYo),e(bt,Upe),e(Upe,_Yo),e(bt,bYo),e(bt,bd),e(bd,vYo),e(bd,Jpe),e(Jpe,FYo),e(bd,TYo),e(bd,_X),e(_X,MYo),e(bd,EYo),e(bt,CYo),M(k3,bt,null),e(Xo,wYo),e(Xo,fo),M(o8,fo,null),e(fo,AYo),e(fo,Ype),e(Ype,yYo),e(fo,LYo),e(fo,Va),e(Va,xYo),e(Va,Kpe),e(Kpe,$Yo),e(Va,kYo),e(Va,Zpe),e(Zpe,SYo),e(Va,RYo),e(Va,eue),e(eue,BYo),e(Va,PYo),e(fo,IYo),e(fo,r8),e(r8,S3),e(S3,oue),e(oue,qYo),e(S3,NYo),e(S3,bX),e(bX,jYo),e(S3,DYo),e(r8,GYo),e(r8,R3),e(R3,rue),e(rue,OYo),e(R3,VYo),e(R3,vX),e(vX,XYo),e(R3,zYo),e(fo,QYo),e(fo,B3),e(B3,WYo),e(B3,tue),e(tue,HYo),e(B3,UYo),e(B3,aue),e(aue,JYo),e(fo,YYo),M(P3,fo,null),b(f,DIe,_),b(f,vd,_),e(vd,I3),e(I3,nue),M(t8,nue,null),e(vd,KYo),e(vd,sue),e(sue,ZYo),b(f,GIe,_),b(f,zo,_),M(a8,zo,null),e(zo,eKo),e(zo,Fd),e(Fd,oKo),e(Fd,FX),e(FX,rKo),e(Fd,tKo),e(Fd,TX),e(TX,aKo),e(Fd,nKo),e(zo,sKo),e(zo,n8),e(n8,lKo),e(n8,lue),e(lue,iKo),e(n8,dKo),e(zo,cKo),e(zo,vt),M(s8,vt,null),e(vt,fKo),e(vt,iue),e(iue,mKo),e(vt,gKo),e(vt,Td),e(Td,hKo),e(Td,due),e(due,pKo),e(Td,uKo),e(Td,MX),e(MX,_Ko),e(Td,bKo),e(vt,vKo),M(q3,vt,null),e(zo,FKo),e(zo,mo),M(l8,mo,null),e(mo,TKo),e(mo,cue),e(cue,MKo),e(mo,EKo),e(mo,Xa),e(Xa,CKo),e(Xa,fue),e(fue,wKo),e(Xa,AKo),e(Xa,mue),e(mue,yKo),e(Xa,LKo),e(Xa,gue),e(gue,xKo),e(Xa,$Ko),e(mo,kKo),e(mo,za),e(za,N3),e(N3,hue),e(hue,SKo),e(N3,RKo),e(N3,EX),e(EX,BKo),e(N3,PKo),e(za,IKo),e(za,j3),e(j3,pue),e(pue,qKo),e(j3,NKo),e(j3,CX),e(CX,jKo),e(j3,DKo),e(za,GKo),e(za,D3),e(D3,uue),e(uue,OKo),e(D3,VKo),e(D3,wX),e(wX,XKo),e(D3,zKo),e(za,QKo),e(za,G3),e(G3,_ue),e(_ue,WKo),e(G3,HKo),e(G3,AX),e(AX,UKo),e(G3,JKo),e(mo,YKo),e(mo,O3),e(O3,KKo),e(O3,bue),e(bue,ZKo),e(O3,eZo),e(O3,vue),e(vue,oZo),e(mo,rZo),M(V3,mo,null),b(f,OIe,_),b(f,Md,_),e(Md,X3),e(X3,Fue),M(i8,Fue,null),e(Md,tZo),e(Md,Tue),e(Tue,aZo),b(f,VIe,_),b(f,Qo,_),M(d8,Qo,null),e(Qo,nZo),e(Qo,Ed),e(Ed,sZo),e(Ed,yX),e(yX,lZo),e(Ed,iZo),e(Ed,LX),e(LX,dZo),e(Ed,cZo),e(Qo,fZo),e(Qo,c8),e(c8,mZo),e(c8,Mue),e(Mue,gZo),e(c8,hZo),e(Qo,pZo),e(Qo,Ft),M(f8,Ft,null),e(Ft,uZo),e(Ft,Eue),e(Eue,_Zo),e(Ft,bZo),e(Ft,Cd),e(Cd,vZo),e(Cd,Cue),e(Cue,FZo),e(Cd,TZo),e(Cd,xX),e(xX,MZo),e(Cd,EZo),e(Ft,CZo),M(z3,Ft,null),e(Qo,wZo),e(Qo,go),M(m8,go,null),e(go,AZo),e(go,wue),e(wue,yZo),e(go,LZo),e(go,Qa),e(Qa,xZo),e(Qa,Aue),e(Aue,$Zo),e(Qa,kZo),e(Qa,yue),e(yue,SZo),e(Qa,RZo),e(Qa,Lue),e(Lue,BZo),e(Qa,PZo),e(go,IZo),e(go,wd),e(wd,Q3),e(Q3,xue),e(xue,qZo),e(Q3,NZo),e(Q3,$X),e($X,jZo),e(Q3,DZo),e(wd,GZo),e(wd,W3),e(W3,$ue),e($ue,OZo),e(W3,VZo),e(W3,kX),e(kX,XZo),e(W3,zZo),e(wd,QZo),e(wd,H3),e(H3,kue),e(kue,WZo),e(H3,HZo),e(H3,SX),e(SX,UZo),e(H3,JZo),e(go,YZo),e(go,U3),e(U3,KZo),e(U3,Sue),e(Sue,ZZo),e(U3,eer),e(U3,Rue),e(Rue,oer),e(go,rer),M(J3,go,null),b(f,XIe,_),b(f,Ad,_),e(Ad,Y3),e(Y3,Bue),M(g8,Bue,null),e(Ad,ter),e(Ad,Pue),e(Pue,aer),b(f,zIe,_),b(f,Wo,_),M(h8,Wo,null),e(Wo,ner),e(Wo,yd),e(yd,ser),e(yd,RX),e(RX,ler),e(yd,ier),e(yd,BX),e(BX,der),e(yd,cer),e(Wo,fer),e(Wo,p8),e(p8,mer),e(p8,Iue),e(Iue,ger),e(p8,her),e(Wo,per),e(Wo,Tt),M(u8,Tt,null),e(Tt,uer),e(Tt,que),e(que,_er),e(Tt,ber),e(Tt,Ld),e(Ld,ver),e(Ld,Nue),e(Nue,Fer),e(Ld,Ter),e(Ld,PX),e(PX,Mer),e(Ld,Eer),e(Tt,Cer),M(K3,Tt,null),e(Wo,wer),e(Wo,ho),M(_8,ho,null),e(ho,Aer),e(ho,jue),e(jue,yer),e(ho,Ler),e(ho,Wa),e(Wa,xer),e(Wa,Due),e(Due,$er),e(Wa,ker),e(Wa,Gue),e(Gue,Ser),e(Wa,Rer),e(Wa,Oue),e(Oue,Ber),e(Wa,Per),e(ho,Ier),e(ho,b8),e(b8,Z3),e(Z3,Vue),e(Vue,qer),e(Z3,Ner),e(Z3,IX),e(IX,jer),e(Z3,Der),e(b8,Ger),e(b8,ev),e(ev,Xue),e(Xue,Oer),e(ev,Ver),e(ev,qX),e(qX,Xer),e(ev,zer),e(ho,Qer),e(ho,ov),e(ov,Wer),e(ov,zue),e(zue,Her),e(ov,Uer),e(ov,Que),e(Que,Jer),e(ho,Yer),M(rv,ho,null),b(f,QIe,_),b(f,xd,_),e(xd,tv),e(tv,Wue),M(v8,Wue,null),e(xd,Ker),e(xd,Hue),e(Hue,Zer),b(f,WIe,_),b(f,Ho,_),M(F8,Ho,null),e(Ho,eor),e(Ho,$d),e($d,oor),e($d,NX),e(NX,ror),e($d,tor),e($d,jX),e(jX,aor),e($d,nor),e(Ho,sor),e(Ho,T8),e(T8,lor),e(T8,Uue),e(Uue,ior),e(T8,dor),e(Ho,cor),e(Ho,Mt),M(M8,Mt,null),e(Mt,mor),e(Mt,Jue),e(Jue,gor),e(Mt,hor),e(Mt,kd),e(kd,por),e(kd,Yue),e(Yue,uor),e(kd,_or),e(kd,DX),e(DX,bor),e(kd,vor),e(Mt,For),M(av,Mt,null),e(Ho,Tor),e(Ho,po),M(E8,po,null),e(po,Mor),e(po,Kue),e(Kue,Eor),e(po,Cor),e(po,Ha),e(Ha,wor),e(Ha,Zue),e(Zue,Aor),e(Ha,yor),e(Ha,e_e),e(e_e,Lor),e(Ha,xor),e(Ha,o_e),e(o_e,$or),e(Ha,kor),e(po,Sor),e(po,r_e),e(r_e,nv),e(nv,t_e),e(t_e,Ror),e(nv,Bor),e(nv,GX),e(GX,Por),e(nv,Ior),e(po,qor),e(po,sv),e(sv,Nor),e(sv,a_e),e(a_e,jor),e(sv,Dor),e(sv,n_e),e(n_e,Gor),e(po,Oor),M(lv,po,null),b(f,HIe,_),b(f,Sd,_),e(Sd,iv),e(iv,s_e),M(C8,s_e,null),e(Sd,Vor),e(Sd,l_e),e(l_e,Xor),b(f,UIe,_),b(f,Uo,_),M(w8,Uo,null),e(Uo,zor),e(Uo,Rd),e(Rd,Qor),e(Rd,OX),e(OX,Wor),e(Rd,Hor),e(Rd,VX),e(VX,Uor),e(Rd,Jor),e(Uo,Yor),e(Uo,A8),e(A8,Kor),e(A8,i_e),e(i_e,Zor),e(A8,err),e(Uo,orr),e(Uo,Et),M(y8,Et,null),e(Et,rrr),e(Et,d_e),e(d_e,trr),e(Et,arr),e(Et,Bd),e(Bd,nrr),e(Bd,c_e),e(c_e,srr),e(Bd,lrr),e(Bd,XX),e(XX,irr),e(Bd,drr),e(Et,crr),M(dv,Et,null),e(Uo,frr),e(Uo,uo),M(L8,uo,null),e(uo,mrr),e(uo,f_e),e(f_e,grr),e(uo,hrr),e(uo,Ua),e(Ua,prr),e(Ua,m_e),e(m_e,urr),e(Ua,_rr),e(Ua,g_e),e(g_e,brr),e(Ua,vrr),e(Ua,h_e),e(h_e,Frr),e(Ua,Trr),e(uo,Mrr),e(uo,Ja),e(Ja,cv),e(cv,p_e),e(p_e,Err),e(cv,Crr),e(cv,zX),e(zX,wrr),e(cv,Arr),e(Ja,yrr),e(Ja,fv),e(fv,u_e),e(u_e,Lrr),e(fv,xrr),e(fv,QX),e(QX,$rr),e(fv,krr),e(Ja,Srr),e(Ja,mv),e(mv,__e),e(__e,Rrr),e(mv,Brr),e(mv,WX),e(WX,Prr),e(mv,Irr),e(Ja,qrr),e(Ja,gv),e(gv,b_e),e(b_e,Nrr),e(gv,jrr),e(gv,HX),e(HX,Drr),e(gv,Grr),e(uo,Orr),e(uo,hv),e(hv,Vrr),e(hv,v_e),e(v_e,Xrr),e(hv,zrr),e(hv,F_e),e(F_e,Qrr),e(uo,Wrr),M(pv,uo,null),b(f,JIe,_),b(f,Pd,_),e(Pd,uv),e(uv,T_e),M(x8,T_e,null),e(Pd,Hrr),e(Pd,M_e),e(M_e,Urr),b(f,YIe,_),b(f,Jo,_),M($8,Jo,null),e(Jo,Jrr),e(Jo,Id),e(Id,Yrr),e(Id,UX),e(UX,Krr),e(Id,Zrr),e(Id,JX),e(JX,etr),e(Id,otr),e(Jo,rtr),e(Jo,k8),e(k8,ttr),e(k8,E_e),e(E_e,atr),e(k8,ntr),e(Jo,str),e(Jo,Ct),M(S8,Ct,null),e(Ct,ltr),e(Ct,C_e),e(C_e,itr),e(Ct,dtr),e(Ct,qd),e(qd,ctr),e(qd,w_e),e(w_e,ftr),e(qd,mtr),e(qd,YX),e(YX,gtr),e(qd,htr),e(Ct,ptr),M(_v,Ct,null),e(Jo,utr),e(Jo,_o),M(R8,_o,null),e(_o,_tr),e(_o,A_e),e(A_e,btr),e(_o,vtr),e(_o,Ya),e(Ya,Ftr),e(Ya,y_e),e(y_e,Ttr),e(Ya,Mtr),e(Ya,L_e),e(L_e,Etr),e(Ya,Ctr),e(Ya,x_e),e(x_e,wtr),e(Ya,Atr),e(_o,ytr),e(_o,$_e),e($_e,bv),e(bv,k_e),e(k_e,Ltr),e(bv,xtr),e(bv,KX),e(KX,$tr),e(bv,ktr),e(_o,Str),e(_o,vv),e(vv,Rtr),e(vv,S_e),e(S_e,Btr),e(vv,Ptr),e(vv,R_e),e(R_e,Itr),e(_o,qtr),M(Fv,_o,null),b(f,KIe,_),b(f,Nd,_),e(Nd,Tv),e(Tv,B_e),M(B8,B_e,null),e(Nd,Ntr),e(Nd,P_e),e(P_e,jtr),b(f,ZIe,_),b(f,Yo,_),M(P8,Yo,null),e(Yo,Dtr),e(Yo,jd),e(jd,Gtr),e(jd,ZX),e(ZX,Otr),e(jd,Vtr),e(jd,ez),e(ez,Xtr),e(jd,ztr),e(Yo,Qtr),e(Yo,I8),e(I8,Wtr),e(I8,I_e),e(I_e,Htr),e(I8,Utr),e(Yo,Jtr),e(Yo,wt),M(q8,wt,null),e(wt,Ytr),e(wt,q_e),e(q_e,Ktr),e(wt,Ztr),e(wt,Dd),e(Dd,ear),e(Dd,N_e),e(N_e,oar),e(Dd,rar),e(Dd,oz),e(oz,tar),e(Dd,aar),e(wt,nar),M(Mv,wt,null),e(Yo,sar),e(Yo,wr),M(N8,wr,null),e(wr,lar),e(wr,j_e),e(j_e,iar),e(wr,dar),e(wr,Ka),e(Ka,car),e(Ka,D_e),e(D_e,far),e(Ka,mar),e(Ka,G_e),e(G_e,gar),e(Ka,har),e(Ka,O_e),e(O_e,par),e(Ka,uar),e(wr,_ar),e(wr,q),e(q,Ev),e(Ev,V_e),e(V_e,bar),e(Ev,Far),e(Ev,rz),e(rz,Tar),e(Ev,Mar),e(q,Ear),e(q,Cv),e(Cv,X_e),e(X_e,Car),e(Cv,war),e(Cv,tz),e(tz,Aar),e(Cv,yar),e(q,Lar),e(q,wv),e(wv,z_e),e(z_e,xar),e(wv,$ar),e(wv,az),e(az,kar),e(wv,Sar),e(q,Rar),e(q,Av),e(Av,Q_e),e(Q_e,Bar),e(Av,Par),e(Av,nz),e(nz,Iar),e(Av,qar),e(q,Nar),e(q,yv),e(yv,W_e),e(W_e,jar),e(yv,Dar),e(yv,sz),e(sz,Gar),e(yv,Oar),e(q,Var),e(q,Lv),e(Lv,H_e),e(H_e,Xar),e(Lv,zar),e(Lv,lz),e(lz,Qar),e(Lv,War),e(q,Har),e(q,xv),e(xv,U_e),e(U_e,Uar),e(xv,Jar),e(xv,iz),e(iz,Yar),e(xv,Kar),e(q,Zar),e(q,$v),e($v,J_e),e(J_e,enr),e($v,onr),e($v,dz),e(dz,rnr),e($v,tnr),e(q,anr),e(q,kv),e(kv,Y_e),e(Y_e,nnr),e(kv,snr),e(kv,cz),e(cz,lnr),e(kv,inr),e(q,dnr),e(q,Sv),e(Sv,K_e),e(K_e,cnr),e(Sv,fnr),e(Sv,fz),e(fz,mnr),e(Sv,gnr),e(q,hnr),e(q,Rv),e(Rv,Z_e),e(Z_e,pnr),e(Rv,unr),e(Rv,mz),e(mz,_nr),e(Rv,bnr),e(q,vnr),e(q,Bv),e(Bv,e1e),e(e1e,Fnr),e(Bv,Tnr),e(Bv,gz),e(gz,Mnr),e(Bv,Enr),e(q,Cnr),e(q,Pv),e(Pv,o1e),e(o1e,wnr),e(Pv,Anr),e(Pv,hz),e(hz,ynr),e(Pv,Lnr),e(q,xnr),e(q,Iv),e(Iv,r1e),e(r1e,$nr),e(Iv,knr),e(Iv,pz),e(pz,Snr),e(Iv,Rnr),e(q,Bnr),e(q,qv),e(qv,t1e),e(t1e,Pnr),e(qv,Inr),e(qv,uz),e(uz,qnr),e(qv,Nnr),e(q,jnr),e(q,Nv),e(Nv,a1e),e(a1e,Dnr),e(Nv,Gnr),e(Nv,_z),e(_z,Onr),e(Nv,Vnr),e(q,Xnr),e(q,jv),e(jv,n1e),e(n1e,znr),e(jv,Qnr),e(jv,bz),e(bz,Wnr),e(jv,Hnr),e(q,Unr),e(q,Ps),e(Ps,s1e),e(s1e,Jnr),e(Ps,Ynr),e(Ps,vz),e(vz,Knr),e(Ps,Znr),e(Ps,Fz),e(Fz,esr),e(Ps,osr),e(q,rsr),e(q,Dv),e(Dv,l1e),e(l1e,tsr),e(Dv,asr),e(Dv,Tz),e(Tz,nsr),e(Dv,ssr),e(q,lsr),e(q,Gv),e(Gv,i1e),e(i1e,isr),e(Gv,dsr),e(Gv,Mz),e(Mz,csr),e(Gv,fsr),e(q,msr),e(q,Ov),e(Ov,d1e),e(d1e,gsr),e(Ov,hsr),e(Ov,Ez),e(Ez,psr),e(Ov,usr),e(q,_sr),e(q,Vv),e(Vv,c1e),e(c1e,bsr),e(Vv,vsr),e(Vv,Cz),e(Cz,Fsr),e(Vv,Tsr),e(q,Msr),e(q,Xv),e(Xv,f1e),e(f1e,Esr),e(Xv,Csr),e(Xv,wz),e(wz,wsr),e(Xv,Asr),e(q,ysr),e(q,zv),e(zv,m1e),e(m1e,Lsr),e(zv,xsr),e(zv,Az),e(Az,$sr),e(zv,ksr),e(q,Ssr),e(q,Qv),e(Qv,g1e),e(g1e,Rsr),e(Qv,Bsr),e(Qv,yz),e(yz,Psr),e(Qv,Isr),e(q,qsr),e(q,Wv),e(Wv,h1e),e(h1e,Nsr),e(Wv,jsr),e(Wv,Lz),e(Lz,Dsr),e(Wv,Gsr),e(q,Osr),e(q,Hv),e(Hv,p1e),e(p1e,Vsr),e(Hv,Xsr),e(Hv,xz),e(xz,zsr),e(Hv,Qsr),e(q,Wsr),e(q,Uv),e(Uv,u1e),e(u1e,Hsr),e(Uv,Usr),e(Uv,$z),e($z,Jsr),e(Uv,Ysr),e(q,Ksr),e(q,Jv),e(Jv,_1e),e(_1e,Zsr),e(Jv,elr),e(Jv,kz),e(kz,olr),e(Jv,rlr),e(q,tlr),e(q,Yv),e(Yv,b1e),e(b1e,alr),e(Yv,nlr),e(Yv,Sz),e(Sz,slr),e(Yv,llr),e(q,ilr),e(q,Kv),e(Kv,v1e),e(v1e,dlr),e(Kv,clr),e(Kv,Rz),e(Rz,flr),e(Kv,mlr),e(q,glr),e(q,Zv),e(Zv,F1e),e(F1e,hlr),e(Zv,plr),e(Zv,Bz),e(Bz,ulr),e(Zv,_lr),e(q,blr),e(q,eF),e(eF,T1e),e(T1e,vlr),e(eF,Flr),e(eF,Pz),e(Pz,Tlr),e(eF,Mlr),e(q,Elr),e(q,oF),e(oF,M1e),e(M1e,Clr),e(oF,wlr),e(oF,Iz),e(Iz,Alr),e(oF,ylr),e(q,Llr),e(q,rF),e(rF,E1e),e(E1e,xlr),e(rF,$lr),e(rF,qz),e(qz,klr),e(rF,Slr),e(q,Rlr),e(q,tF),e(tF,C1e),e(C1e,Blr),e(tF,Plr),e(tF,Nz),e(Nz,Ilr),e(tF,qlr),e(q,Nlr),e(q,aF),e(aF,w1e),e(w1e,jlr),e(aF,Dlr),e(aF,jz),e(jz,Glr),e(aF,Olr),e(q,Vlr),e(q,nF),e(nF,A1e),e(A1e,Xlr),e(nF,zlr),e(nF,Dz),e(Dz,Qlr),e(nF,Wlr),e(q,Hlr),e(q,sF),e(sF,y1e),e(y1e,Ulr),e(sF,Jlr),e(sF,Gz),e(Gz,Ylr),e(sF,Klr),e(q,Zlr),e(q,lF),e(lF,L1e),e(L1e,eir),e(lF,oir),e(lF,Oz),e(Oz,rir),e(lF,tir),e(q,air),e(q,iF),e(iF,x1e),e(x1e,nir),e(iF,sir),e(iF,Vz),e(Vz,lir),e(iF,iir),e(q,dir),e(q,dF),e(dF,$1e),e($1e,cir),e(dF,fir),e(dF,Xz),e(Xz,mir),e(dF,gir),e(q,hir),e(q,cF),e(cF,k1e),e(k1e,pir),e(cF,uir),e(cF,zz),e(zz,_ir),e(cF,bir),e(q,vir),e(q,fF),e(fF,S1e),e(S1e,Fir),e(fF,Tir),e(fF,Qz),e(Qz,Mir),e(fF,Eir),e(q,Cir),e(q,mF),e(mF,R1e),e(R1e,wir),e(mF,Air),e(mF,Wz),e(Wz,yir),e(mF,Lir),e(q,xir),e(q,gF),e(gF,B1e),e(B1e,$ir),e(gF,kir),e(gF,Hz),e(Hz,Sir),e(gF,Rir),e(q,Bir),e(q,hF),e(hF,P1e),e(P1e,Pir),e(hF,Iir),e(hF,Uz),e(Uz,qir),e(hF,Nir),e(wr,jir),M(pF,wr,null),b(f,eqe,_),b(f,Gd,_),e(Gd,uF),e(uF,I1e),M(j8,I1e,null),e(Gd,Dir),e(Gd,q1e),e(q1e,Gir),b(f,oqe,_),b(f,Ko,_),M(D8,Ko,null),e(Ko,Oir),e(Ko,Od),e(Od,Vir),e(Od,Jz),e(Jz,Xir),e(Od,zir),e(Od,Yz),e(Yz,Qir),e(Od,Wir),e(Ko,Hir),e(Ko,G8),e(G8,Uir),e(G8,N1e),e(N1e,Jir),e(G8,Yir),e(Ko,Kir),e(Ko,At),M(O8,At,null),e(At,Zir),e(At,j1e),e(j1e,edr),e(At,odr),e(At,Vd),e(Vd,rdr),e(Vd,D1e),e(D1e,tdr),e(Vd,adr),e(Vd,Kz),e(Kz,ndr),e(Vd,sdr),e(At,ldr),M(_F,At,null),e(Ko,idr),e(Ko,Ar),M(V8,Ar,null),e(Ar,ddr),e(Ar,G1e),e(G1e,cdr),e(Ar,fdr),e(Ar,Za),e(Za,mdr),e(Za,O1e),e(O1e,gdr),e(Za,hdr),e(Za,V1e),e(V1e,pdr),e(Za,udr),e(Za,X1e),e(X1e,_dr),e(Za,bdr),e(Ar,vdr),e(Ar,se),e(se,bF),e(bF,z1e),e(z1e,Fdr),e(bF,Tdr),e(bF,Zz),e(Zz,Mdr),e(bF,Edr),e(se,Cdr),e(se,vF),e(vF,Q1e),e(Q1e,wdr),e(vF,Adr),e(vF,eQ),e(eQ,ydr),e(vF,Ldr),e(se,xdr),e(se,FF),e(FF,W1e),e(W1e,$dr),e(FF,kdr),e(FF,oQ),e(oQ,Sdr),e(FF,Rdr),e(se,Bdr),e(se,TF),e(TF,H1e),e(H1e,Pdr),e(TF,Idr),e(TF,rQ),e(rQ,qdr),e(TF,Ndr),e(se,jdr),e(se,MF),e(MF,U1e),e(U1e,Ddr),e(MF,Gdr),e(MF,tQ),e(tQ,Odr),e(MF,Vdr),e(se,Xdr),e(se,EF),e(EF,J1e),e(J1e,zdr),e(EF,Qdr),e(EF,aQ),e(aQ,Wdr),e(EF,Hdr),e(se,Udr),e(se,CF),e(CF,Y1e),e(Y1e,Jdr),e(CF,Ydr),e(CF,nQ),e(nQ,Kdr),e(CF,Zdr),e(se,ecr),e(se,wF),e(wF,K1e),e(K1e,ocr),e(wF,rcr),e(wF,sQ),e(sQ,tcr),e(wF,acr),e(se,ncr),e(se,AF),e(AF,Z1e),e(Z1e,scr),e(AF,lcr),e(AF,lQ),e(lQ,icr),e(AF,dcr),e(se,ccr),e(se,yF),e(yF,ebe),e(ebe,fcr),e(yF,mcr),e(yF,iQ),e(iQ,gcr),e(yF,hcr),e(se,pcr),e(se,LF),e(LF,obe),e(obe,ucr),e(LF,_cr),e(LF,dQ),e(dQ,bcr),e(LF,vcr),e(se,Fcr),e(se,xF),e(xF,rbe),e(rbe,Tcr),e(xF,Mcr),e(xF,cQ),e(cQ,Ecr),e(xF,Ccr),e(se,wcr),e(se,$F),e($F,tbe),e(tbe,Acr),e($F,ycr),e($F,fQ),e(fQ,Lcr),e($F,xcr),e(se,$cr),e(se,kF),e(kF,abe),e(abe,kcr),e(kF,Scr),e(kF,mQ),e(mQ,Rcr),e(kF,Bcr),e(se,Pcr),e(se,SF),e(SF,nbe),e(nbe,Icr),e(SF,qcr),e(SF,gQ),e(gQ,Ncr),e(SF,jcr),e(se,Dcr),e(se,RF),e(RF,sbe),e(sbe,Gcr),e(RF,Ocr),e(RF,hQ),e(hQ,Vcr),e(RF,Xcr),e(se,zcr),e(se,BF),e(BF,lbe),e(lbe,Qcr),e(BF,Wcr),e(BF,pQ),e(pQ,Hcr),e(BF,Ucr),e(se,Jcr),e(se,PF),e(PF,ibe),e(ibe,Ycr),e(PF,Kcr),e(PF,uQ),e(uQ,Zcr),e(PF,efr),e(se,ofr),e(se,IF),e(IF,dbe),e(dbe,rfr),e(IF,tfr),e(IF,_Q),e(_Q,afr),e(IF,nfr),e(se,sfr),e(se,qF),e(qF,cbe),e(cbe,lfr),e(qF,ifr),e(qF,bQ),e(bQ,dfr),e(qF,cfr),e(se,ffr),e(se,NF),e(NF,fbe),e(fbe,mfr),e(NF,gfr),e(NF,vQ),e(vQ,hfr),e(NF,pfr),e(se,ufr),e(se,jF),e(jF,mbe),e(mbe,_fr),e(jF,bfr),e(jF,FQ),e(FQ,vfr),e(jF,Ffr),e(se,Tfr),e(se,DF),e(DF,gbe),e(gbe,Mfr),e(DF,Efr),e(DF,TQ),e(TQ,Cfr),e(DF,wfr),e(Ar,Afr),M(GF,Ar,null),b(f,rqe,_),b(f,Xd,_),e(Xd,OF),e(OF,hbe),M(X8,hbe,null),e(Xd,yfr),e(Xd,pbe),e(pbe,Lfr),b(f,tqe,_),b(f,Zo,_),M(z8,Zo,null),e(Zo,xfr),e(Zo,zd),e(zd,$fr),e(zd,MQ),e(MQ,kfr),e(zd,Sfr),e(zd,EQ),e(EQ,Rfr),e(zd,Bfr),e(Zo,Pfr),e(Zo,Q8),e(Q8,Ifr),e(Q8,ube),e(ube,qfr),e(Q8,Nfr),e(Zo,jfr),e(Zo,yt),M(W8,yt,null),e(yt,Dfr),e(yt,_be),e(_be,Gfr),e(yt,Ofr),e(yt,Qd),e(Qd,Vfr),e(Qd,bbe),e(bbe,Xfr),e(Qd,zfr),e(Qd,CQ),e(CQ,Qfr),e(Qd,Wfr),e(yt,Hfr),M(VF,yt,null),e(Zo,Ufr),e(Zo,yr),M(H8,yr,null),e(yr,Jfr),e(yr,vbe),e(vbe,Yfr),e(yr,Kfr),e(yr,en),e(en,Zfr),e(en,Fbe),e(Fbe,emr),e(en,omr),e(en,Tbe),e(Tbe,rmr),e(en,tmr),e(en,Mbe),e(Mbe,amr),e(en,nmr),e(yr,smr),e(yr,Te),e(Te,XF),e(XF,Ebe),e(Ebe,lmr),e(XF,imr),e(XF,wQ),e(wQ,dmr),e(XF,cmr),e(Te,fmr),e(Te,zF),e(zF,Cbe),e(Cbe,mmr),e(zF,gmr),e(zF,AQ),e(AQ,hmr),e(zF,pmr),e(Te,umr),e(Te,QF),e(QF,wbe),e(wbe,_mr),e(QF,bmr),e(QF,yQ),e(yQ,vmr),e(QF,Fmr),e(Te,Tmr),e(Te,WF),e(WF,Abe),e(Abe,Mmr),e(WF,Emr),e(WF,LQ),e(LQ,Cmr),e(WF,wmr),e(Te,Amr),e(Te,HF),e(HF,ybe),e(ybe,ymr),e(HF,Lmr),e(HF,xQ),e(xQ,xmr),e(HF,$mr),e(Te,kmr),e(Te,UF),e(UF,Lbe),e(Lbe,Smr),e(UF,Rmr),e(UF,$Q),e($Q,Bmr),e(UF,Pmr),e(Te,Imr),e(Te,JF),e(JF,xbe),e(xbe,qmr),e(JF,Nmr),e(JF,kQ),e(kQ,jmr),e(JF,Dmr),e(Te,Gmr),e(Te,YF),e(YF,$be),e($be,Omr),e(YF,Vmr),e(YF,SQ),e(SQ,Xmr),e(YF,zmr),e(Te,Qmr),e(Te,KF),e(KF,kbe),e(kbe,Wmr),e(KF,Hmr),e(KF,RQ),e(RQ,Umr),e(KF,Jmr),e(Te,Ymr),e(Te,ZF),e(ZF,Sbe),e(Sbe,Kmr),e(ZF,Zmr),e(ZF,BQ),e(BQ,egr),e(ZF,ogr),e(Te,rgr),e(Te,e6),e(e6,Rbe),e(Rbe,tgr),e(e6,agr),e(e6,PQ),e(PQ,ngr),e(e6,sgr),e(Te,lgr),e(Te,o6),e(o6,Bbe),e(Bbe,igr),e(o6,dgr),e(o6,IQ),e(IQ,cgr),e(o6,fgr),e(Te,mgr),e(Te,r6),e(r6,Pbe),e(Pbe,ggr),e(r6,hgr),e(r6,qQ),e(qQ,pgr),e(r6,ugr),e(yr,_gr),M(t6,yr,null),b(f,aqe,_),b(f,Wd,_),e(Wd,a6),e(a6,Ibe),M(U8,Ibe,null),e(Wd,bgr),e(Wd,qbe),e(qbe,vgr),b(f,nqe,_),b(f,er,_),M(J8,er,null),e(er,Fgr),e(er,Hd),e(Hd,Tgr),e(Hd,NQ),e(NQ,Mgr),e(Hd,Egr),e(Hd,jQ),e(jQ,Cgr),e(Hd,wgr),e(er,Agr),e(er,Y8),e(Y8,ygr),e(Y8,Nbe),e(Nbe,Lgr),e(Y8,xgr),e(er,$gr),e(er,Lt),M(K8,Lt,null),e(Lt,kgr),e(Lt,jbe),e(jbe,Sgr),e(Lt,Rgr),e(Lt,Ud),e(Ud,Bgr),e(Ud,Dbe),e(Dbe,Pgr),e(Ud,Igr),e(Ud,DQ),e(DQ,qgr),e(Ud,Ngr),e(Lt,jgr),M(n6,Lt,null),e(er,Dgr),e(er,Lr),M(Z8,Lr,null),e(Lr,Ggr),e(Lr,Gbe),e(Gbe,Ogr),e(Lr,Vgr),e(Lr,on),e(on,Xgr),e(on,Obe),e(Obe,zgr),e(on,Qgr),e(on,Vbe),e(Vbe,Wgr),e(on,Hgr),e(on,Xbe),e(Xbe,Ugr),e(on,Jgr),e(Lr,Ygr),e(Lr,rn),e(rn,s6),e(s6,zbe),e(zbe,Kgr),e(s6,Zgr),e(s6,GQ),e(GQ,ehr),e(s6,ohr),e(rn,rhr),e(rn,l6),e(l6,Qbe),e(Qbe,thr),e(l6,ahr),e(l6,OQ),e(OQ,nhr),e(l6,shr),e(rn,lhr),e(rn,i6),e(i6,Wbe),e(Wbe,ihr),e(i6,dhr),e(i6,VQ),e(VQ,chr),e(i6,fhr),e(rn,mhr),e(rn,d6),e(d6,Hbe),e(Hbe,ghr),e(d6,hhr),e(d6,XQ),e(XQ,phr),e(d6,uhr),e(Lr,_hr),M(c6,Lr,null),b(f,sqe,_),b(f,Jd,_),e(Jd,f6),e(f6,Ube),M(ex,Ube,null),e(Jd,bhr),e(Jd,Jbe),e(Jbe,vhr),b(f,lqe,_),b(f,or,_),M(ox,or,null),e(or,Fhr),e(or,Yd),e(Yd,Thr),e(Yd,zQ),e(zQ,Mhr),e(Yd,Ehr),e(Yd,QQ),e(QQ,Chr),e(Yd,whr),e(or,Ahr),e(or,rx),e(rx,yhr),e(rx,Ybe),e(Ybe,Lhr),e(rx,xhr),e(or,$hr),e(or,xt),M(tx,xt,null),e(xt,khr),e(xt,Kbe),e(Kbe,Shr),e(xt,Rhr),e(xt,Kd),e(Kd,Bhr),e(Kd,Zbe),e(Zbe,Phr),e(Kd,Ihr),e(Kd,WQ),e(WQ,qhr),e(Kd,Nhr),e(xt,jhr),M(m6,xt,null),e(or,Dhr),e(or,xr),M(ax,xr,null),e(xr,Ghr),e(xr,e4e),e(e4e,Ohr),e(xr,Vhr),e(xr,tn),e(tn,Xhr),e(tn,o4e),e(o4e,zhr),e(tn,Qhr),e(tn,r4e),e(r4e,Whr),e(tn,Hhr),e(tn,t4e),e(t4e,Uhr),e(tn,Jhr),e(xr,Yhr),e(xr,ie),e(ie,g6),e(g6,a4e),e(a4e,Khr),e(g6,Zhr),e(g6,HQ),e(HQ,epr),e(g6,opr),e(ie,rpr),e(ie,h6),e(h6,n4e),e(n4e,tpr),e(h6,apr),e(h6,UQ),e(UQ,npr),e(h6,spr),e(ie,lpr),e(ie,p6),e(p6,s4e),e(s4e,ipr),e(p6,dpr),e(p6,JQ),e(JQ,cpr),e(p6,fpr),e(ie,mpr),e(ie,u6),e(u6,l4e),e(l4e,gpr),e(u6,hpr),e(u6,YQ),e(YQ,ppr),e(u6,upr),e(ie,_pr),e(ie,_6),e(_6,i4e),e(i4e,bpr),e(_6,vpr),e(_6,KQ),e(KQ,Fpr),e(_6,Tpr),e(ie,Mpr),e(ie,b6),e(b6,d4e),e(d4e,Epr),e(b6,Cpr),e(b6,ZQ),e(ZQ,wpr),e(b6,Apr),e(ie,ypr),e(ie,v6),e(v6,c4e),e(c4e,Lpr),e(v6,xpr),e(v6,eW),e(eW,$pr),e(v6,kpr),e(ie,Spr),e(ie,F6),e(F6,f4e),e(f4e,Rpr),e(F6,Bpr),e(F6,oW),e(oW,Ppr),e(F6,Ipr),e(ie,qpr),e(ie,T6),e(T6,m4e),e(m4e,Npr),e(T6,jpr),e(T6,rW),e(rW,Dpr),e(T6,Gpr),e(ie,Opr),e(ie,M6),e(M6,g4e),e(g4e,Vpr),e(M6,Xpr),e(M6,tW),e(tW,zpr),e(M6,Qpr),e(ie,Wpr),e(ie,E6),e(E6,h4e),e(h4e,Hpr),e(E6,Upr),e(E6,aW),e(aW,Jpr),e(E6,Ypr),e(ie,Kpr),e(ie,C6),e(C6,p4e),e(p4e,Zpr),e(C6,eur),e(C6,nW),e(nW,our),e(C6,rur),e(ie,tur),e(ie,w6),e(w6,u4e),e(u4e,aur),e(w6,nur),e(w6,sW),e(sW,sur),e(w6,lur),e(ie,iur),e(ie,A6),e(A6,_4e),e(_4e,dur),e(A6,cur),e(A6,lW),e(lW,fur),e(A6,mur),e(ie,gur),e(ie,y6),e(y6,b4e),e(b4e,hur),e(y6,pur),e(y6,iW),e(iW,uur),e(y6,_ur),e(ie,bur),e(ie,L6),e(L6,v4e),e(v4e,vur),e(L6,Fur),e(L6,dW),e(dW,Tur),e(L6,Mur),e(ie,Eur),e(ie,x6),e(x6,F4e),e(F4e,Cur),e(x6,wur),e(x6,cW),e(cW,Aur),e(x6,yur),e(ie,Lur),e(ie,$6),e($6,T4e),e(T4e,xur),e($6,$ur),e($6,fW),e(fW,kur),e($6,Sur),e(ie,Rur),e(ie,k6),e(k6,M4e),e(M4e,Bur),e(k6,Pur),e(k6,mW),e(mW,Iur),e(k6,qur),e(ie,Nur),e(ie,S6),e(S6,E4e),e(E4e,jur),e(S6,Dur),e(S6,gW),e(gW,Gur),e(S6,Our),e(xr,Vur),M(R6,xr,null),b(f,iqe,_),b(f,Zd,_),e(Zd,B6),e(B6,C4e),M(nx,C4e,null),e(Zd,Xur),e(Zd,w4e),e(w4e,zur),b(f,dqe,_),b(f,rr,_),M(sx,rr,null),e(rr,Qur),e(rr,ec),e(ec,Wur),e(ec,hW),e(hW,Hur),e(ec,Uur),e(ec,pW),e(pW,Jur),e(ec,Yur),e(rr,Kur),e(rr,lx),e(lx,Zur),e(lx,A4e),e(A4e,e_r),e(lx,o_r),e(rr,r_r),e(rr,$t),M(ix,$t,null),e($t,t_r),e($t,y4e),e(y4e,a_r),e($t,n_r),e($t,oc),e(oc,s_r),e(oc,L4e),e(L4e,l_r),e(oc,i_r),e(oc,uW),e(uW,d_r),e(oc,c_r),e($t,f_r),M(P6,$t,null),e(rr,m_r),e(rr,$r),M(dx,$r,null),e($r,g_r),e($r,x4e),e(x4e,h_r),e($r,p_r),e($r,an),e(an,u_r),e(an,$4e),e($4e,__r),e(an,b_r),e(an,k4e),e(k4e,v_r),e(an,F_r),e(an,S4e),e(S4e,T_r),e(an,M_r),e($r,E_r),e($r,ye),e(ye,I6),e(I6,R4e),e(R4e,C_r),e(I6,w_r),e(I6,_W),e(_W,A_r),e(I6,y_r),e(ye,L_r),e(ye,q6),e(q6,B4e),e(B4e,x_r),e(q6,$_r),e(q6,bW),e(bW,k_r),e(q6,S_r),e(ye,R_r),e(ye,N6),e(N6,P4e),e(P4e,B_r),e(N6,P_r),e(N6,vW),e(vW,I_r),e(N6,q_r),e(ye,N_r),e(ye,j6),e(j6,I4e),e(I4e,j_r),e(j6,D_r),e(j6,FW),e(FW,G_r),e(j6,O_r),e(ye,V_r),e(ye,D6),e(D6,q4e),e(q4e,X_r),e(D6,z_r),e(D6,TW),e(TW,Q_r),e(D6,W_r),e(ye,H_r),e(ye,G6),e(G6,N4e),e(N4e,U_r),e(G6,J_r),e(G6,MW),e(MW,Y_r),e(G6,K_r),e(ye,Z_r),e(ye,O6),e(O6,j4e),e(j4e,e1r),e(O6,o1r),e(O6,EW),e(EW,r1r),e(O6,t1r),e(ye,a1r),e(ye,V6),e(V6,D4e),e(D4e,n1r),e(V6,s1r),e(V6,CW),e(CW,l1r),e(V6,i1r),e(ye,d1r),e(ye,X6),e(X6,G4e),e(G4e,c1r),e(X6,f1r),e(X6,wW),e(wW,m1r),e(X6,g1r),e(ye,h1r),e(ye,z6),e(z6,O4e),e(O4e,p1r),e(z6,u1r),e(z6,AW),e(AW,_1r),e(z6,b1r),e($r,v1r),M(Q6,$r,null),b(f,cqe,_),b(f,rc,_),e(rc,W6),e(W6,V4e),M(cx,V4e,null),e(rc,F1r),e(rc,X4e),e(X4e,T1r),b(f,fqe,_),b(f,tr,_),M(fx,tr,null),e(tr,M1r),e(tr,tc),e(tc,E1r),e(tc,yW),e(yW,C1r),e(tc,w1r),e(tc,LW),e(LW,A1r),e(tc,y1r),e(tr,L1r),e(tr,mx),e(mx,x1r),e(mx,z4e),e(z4e,$1r),e(mx,k1r),e(tr,S1r),e(tr,kt),M(gx,kt,null),e(kt,R1r),e(kt,Q4e),e(Q4e,B1r),e(kt,P1r),e(kt,ac),e(ac,I1r),e(ac,W4e),e(W4e,q1r),e(ac,N1r),e(ac,xW),e(xW,j1r),e(ac,D1r),e(kt,G1r),M(H6,kt,null),e(tr,O1r),e(tr,kr),M(hx,kr,null),e(kr,V1r),e(kr,H4e),e(H4e,X1r),e(kr,z1r),e(kr,nn),e(nn,Q1r),e(nn,U4e),e(U4e,W1r),e(nn,H1r),e(nn,J4e),e(J4e,U1r),e(nn,J1r),e(nn,Y4e),e(Y4e,Y1r),e(nn,K1r),e(kr,Z1r),e(kr,Z),e(Z,U6),e(U6,K4e),e(K4e,ebr),e(U6,obr),e(U6,$W),e($W,rbr),e(U6,tbr),e(Z,abr),e(Z,J6),e(J6,Z4e),e(Z4e,nbr),e(J6,sbr),e(J6,kW),e(kW,lbr),e(J6,ibr),e(Z,dbr),e(Z,Y6),e(Y6,e2e),e(e2e,cbr),e(Y6,fbr),e(Y6,SW),e(SW,mbr),e(Y6,gbr),e(Z,hbr),e(Z,K6),e(K6,o2e),e(o2e,pbr),e(K6,ubr),e(K6,RW),e(RW,_br),e(K6,bbr),e(Z,vbr),e(Z,Z6),e(Z6,r2e),e(r2e,Fbr),e(Z6,Tbr),e(Z6,BW),e(BW,Mbr),e(Z6,Ebr),e(Z,Cbr),e(Z,eT),e(eT,t2e),e(t2e,wbr),e(eT,Abr),e(eT,PW),e(PW,ybr),e(eT,Lbr),e(Z,xbr),e(Z,oT),e(oT,a2e),e(a2e,$br),e(oT,kbr),e(oT,IW),e(IW,Sbr),e(oT,Rbr),e(Z,Bbr),e(Z,rT),e(rT,n2e),e(n2e,Pbr),e(rT,Ibr),e(rT,qW),e(qW,qbr),e(rT,Nbr),e(Z,jbr),e(Z,tT),e(tT,s2e),e(s2e,Dbr),e(tT,Gbr),e(tT,NW),e(NW,Obr),e(tT,Vbr),e(Z,Xbr),e(Z,aT),e(aT,l2e),e(l2e,zbr),e(aT,Qbr),e(aT,jW),e(jW,Wbr),e(aT,Hbr),e(Z,Ubr),e(Z,nT),e(nT,i2e),e(i2e,Jbr),e(nT,Ybr),e(nT,DW),e(DW,Kbr),e(nT,Zbr),e(Z,e4r),e(Z,sT),e(sT,d2e),e(d2e,o4r),e(sT,r4r),e(sT,GW),e(GW,t4r),e(sT,a4r),e(Z,n4r),e(Z,lT),e(lT,c2e),e(c2e,s4r),e(lT,l4r),e(lT,OW),e(OW,i4r),e(lT,d4r),e(Z,c4r),e(Z,iT),e(iT,f2e),e(f2e,f4r),e(iT,m4r),e(iT,VW),e(VW,g4r),e(iT,h4r),e(Z,p4r),e(Z,dT),e(dT,m2e),e(m2e,u4r),e(dT,_4r),e(dT,XW),e(XW,b4r),e(dT,v4r),e(Z,F4r),e(Z,cT),e(cT,g2e),e(g2e,T4r),e(cT,M4r),e(cT,zW),e(zW,E4r),e(cT,C4r),e(Z,w4r),e(Z,fT),e(fT,h2e),e(h2e,A4r),e(fT,y4r),e(fT,QW),e(QW,L4r),e(fT,x4r),e(Z,$4r),e(Z,mT),e(mT,p2e),e(p2e,k4r),e(mT,S4r),e(mT,WW),e(WW,R4r),e(mT,B4r),e(Z,P4r),e(Z,gT),e(gT,u2e),e(u2e,I4r),e(gT,q4r),e(gT,HW),e(HW,N4r),e(gT,j4r),e(Z,D4r),e(Z,hT),e(hT,_2e),e(_2e,G4r),e(hT,O4r),e(hT,UW),e(UW,V4r),e(hT,X4r),e(Z,z4r),e(Z,pT),e(pT,b2e),e(b2e,Q4r),e(pT,W4r),e(pT,JW),e(JW,H4r),e(pT,U4r),e(Z,J4r),e(Z,uT),e(uT,v2e),e(v2e,Y4r),e(uT,K4r),e(uT,YW),e(YW,Z4r),e(uT,e2r),e(Z,o2r),e(Z,_T),e(_T,F2e),e(F2e,r2r),e(_T,t2r),e(_T,KW),e(KW,a2r),e(_T,n2r),e(Z,s2r),e(Z,bT),e(bT,T2e),e(T2e,l2r),e(bT,i2r),e(bT,ZW),e(ZW,d2r),e(bT,c2r),e(Z,f2r),e(Z,vT),e(vT,M2e),e(M2e,m2r),e(vT,g2r),e(vT,eH),e(eH,h2r),e(vT,p2r),e(Z,u2r),e(Z,FT),e(FT,E2e),e(E2e,_2r),e(FT,b2r),e(FT,oH),e(oH,v2r),e(FT,F2r),e(kr,T2r),M(TT,kr,null),b(f,mqe,_),b(f,nc,_),e(nc,MT),e(MT,C2e),M(px,C2e,null),e(nc,M2r),e(nc,w2e),e(w2e,E2r),b(f,gqe,_),b(f,ar,_),M(ux,ar,null),e(ar,C2r),e(ar,sc),e(sc,w2r),e(sc,rH),e(rH,A2r),e(sc,y2r),e(sc,tH),e(tH,L2r),e(sc,x2r),e(ar,$2r),e(ar,_x),e(_x,k2r),e(_x,A2e),e(A2e,S2r),e(_x,R2r),e(ar,B2r),e(ar,St),M(bx,St,null),e(St,P2r),e(St,y2e),e(y2e,I2r),e(St,q2r),e(St,lc),e(lc,N2r),e(lc,L2e),e(L2e,j2r),e(lc,D2r),e(lc,aH),e(aH,G2r),e(lc,O2r),e(St,V2r),M(ET,St,null),e(ar,X2r),e(ar,Sr),M(vx,Sr,null),e(Sr,z2r),e(Sr,x2e),e(x2e,Q2r),e(Sr,W2r),e(Sr,sn),e(sn,H2r),e(sn,$2e),e($2e,U2r),e(sn,J2r),e(sn,k2e),e(k2e,Y2r),e(sn,K2r),e(sn,S2e),e(S2e,Z2r),e(sn,e5r),e(Sr,o5r),e(Sr,he),e(he,CT),e(CT,R2e),e(R2e,r5r),e(CT,t5r),e(CT,nH),e(nH,a5r),e(CT,n5r),e(he,s5r),e(he,wT),e(wT,B2e),e(B2e,l5r),e(wT,i5r),e(wT,sH),e(sH,d5r),e(wT,c5r),e(he,f5r),e(he,AT),e(AT,P2e),e(P2e,m5r),e(AT,g5r),e(AT,lH),e(lH,h5r),e(AT,p5r),e(he,u5r),e(he,yT),e(yT,I2e),e(I2e,_5r),e(yT,b5r),e(yT,iH),e(iH,v5r),e(yT,F5r),e(he,T5r),e(he,LT),e(LT,q2e),e(q2e,M5r),e(LT,E5r),e(LT,dH),e(dH,C5r),e(LT,w5r),e(he,A5r),e(he,xT),e(xT,N2e),e(N2e,y5r),e(xT,L5r),e(xT,cH),e(cH,x5r),e(xT,$5r),e(he,k5r),e(he,$T),e($T,j2e),e(j2e,S5r),e($T,R5r),e($T,fH),e(fH,B5r),e($T,P5r),e(he,I5r),e(he,kT),e(kT,D2e),e(D2e,q5r),e(kT,N5r),e(kT,mH),e(mH,j5r),e(kT,D5r),e(he,G5r),e(he,ST),e(ST,G2e),e(G2e,O5r),e(ST,V5r),e(ST,gH),e(gH,X5r),e(ST,z5r),e(he,Q5r),e(he,RT),e(RT,O2e),e(O2e,W5r),e(RT,H5r),e(RT,hH),e(hH,U5r),e(RT,J5r),e(he,Y5r),e(he,BT),e(BT,V2e),e(V2e,K5r),e(BT,Z5r),e(BT,pH),e(pH,e3r),e(BT,o3r),e(he,r3r),e(he,PT),e(PT,X2e),e(X2e,t3r),e(PT,a3r),e(PT,uH),e(uH,n3r),e(PT,s3r),e(he,l3r),e(he,IT),e(IT,z2e),e(z2e,i3r),e(IT,d3r),e(IT,_H),e(_H,c3r),e(IT,f3r),e(he,m3r),e(he,qT),e(qT,Q2e),e(Q2e,g3r),e(qT,h3r),e(qT,bH),e(bH,p3r),e(qT,u3r),e(he,_3r),e(he,NT),e(NT,W2e),e(W2e,b3r),e(NT,v3r),e(NT,vH),e(vH,F3r),e(NT,T3r),e(he,M3r),e(he,jT),e(jT,H2e),e(H2e,E3r),e(jT,C3r),e(jT,FH),e(FH,w3r),e(jT,A3r),e(he,y3r),e(he,DT),e(DT,U2e),e(U2e,L3r),e(DT,x3r),e(DT,TH),e(TH,$3r),e(DT,k3r),e(Sr,S3r),M(GT,Sr,null),b(f,hqe,_),b(f,ic,_),e(ic,OT),e(OT,J2e),M(Fx,J2e,null),e(ic,R3r),e(ic,Y2e),e(Y2e,B3r),b(f,pqe,_),b(f,nr,_),M(Tx,nr,null),e(nr,P3r),e(nr,dc),e(dc,I3r),e(dc,MH),e(MH,q3r),e(dc,N3r),e(dc,EH),e(EH,j3r),e(dc,D3r),e(nr,G3r),e(nr,Mx),e(Mx,O3r),e(Mx,K2e),e(K2e,V3r),e(Mx,X3r),e(nr,z3r),e(nr,Rt),M(Ex,Rt,null),e(Rt,Q3r),e(Rt,Z2e),e(Z2e,W3r),e(Rt,H3r),e(Rt,cc),e(cc,U3r),e(cc,e5e),e(e5e,J3r),e(cc,Y3r),e(cc,CH),e(CH,K3r),e(cc,Z3r),e(Rt,evr),M(VT,Rt,null),e(nr,ovr),e(nr,Rr),M(Cx,Rr,null),e(Rr,rvr),e(Rr,o5e),e(o5e,tvr),e(Rr,avr),e(Rr,ln),e(ln,nvr),e(ln,r5e),e(r5e,svr),e(ln,lvr),e(ln,t5e),e(t5e,ivr),e(ln,dvr),e(ln,a5e),e(a5e,cvr),e(ln,fvr),e(Rr,mvr),e(Rr,wx),e(wx,XT),e(XT,n5e),e(n5e,gvr),e(XT,hvr),e(XT,wH),e(wH,pvr),e(XT,uvr),e(wx,_vr),e(wx,zT),e(zT,s5e),e(s5e,bvr),e(zT,vvr),e(zT,AH),e(AH,Fvr),e(zT,Tvr),e(Rr,Mvr),M(QT,Rr,null),b(f,uqe,_),b(f,fc,_),e(fc,WT),e(WT,l5e),M(Ax,l5e,null),e(fc,Evr),e(fc,i5e),e(i5e,Cvr),b(f,_qe,_),b(f,sr,_),M(yx,sr,null),e(sr,wvr),e(sr,mc),e(mc,Avr),e(mc,yH),e(yH,yvr),e(mc,Lvr),e(mc,LH),e(LH,xvr),e(mc,$vr),e(sr,kvr),e(sr,Lx),e(Lx,Svr),e(Lx,d5e),e(d5e,Rvr),e(Lx,Bvr),e(sr,Pvr),e(sr,Bt),M(xx,Bt,null),e(Bt,Ivr),e(Bt,c5e),e(c5e,qvr),e(Bt,Nvr),e(Bt,gc),e(gc,jvr),e(gc,f5e),e(f5e,Dvr),e(gc,Gvr),e(gc,xH),e(xH,Ovr),e(gc,Vvr),e(Bt,Xvr),M(HT,Bt,null),e(sr,zvr),e(sr,Br),M($x,Br,null),e(Br,Qvr),e(Br,m5e),e(m5e,Wvr),e(Br,Hvr),e(Br,dn),e(dn,Uvr),e(dn,g5e),e(g5e,Jvr),e(dn,Yvr),e(dn,h5e),e(h5e,Kvr),e(dn,Zvr),e(dn,p5e),e(p5e,eFr),e(dn,oFr),e(Br,rFr),e(Br,u5e),e(u5e,UT),e(UT,_5e),e(_5e,tFr),e(UT,aFr),e(UT,$H),e($H,nFr),e(UT,sFr),e(Br,lFr),M(JT,Br,null),b(f,bqe,_),b(f,hc,_),e(hc,YT),e(YT,b5e),M(kx,b5e,null),e(hc,iFr),e(hc,v5e),e(v5e,dFr),b(f,vqe,_),b(f,lr,_),M(Sx,lr,null),e(lr,cFr),e(lr,pc),e(pc,fFr),e(pc,kH),e(kH,mFr),e(pc,gFr),e(pc,SH),e(SH,hFr),e(pc,pFr),e(lr,uFr),e(lr,Rx),e(Rx,_Fr),e(Rx,F5e),e(F5e,bFr),e(Rx,vFr),e(lr,FFr),e(lr,Pt),M(Bx,Pt,null),e(Pt,TFr),e(Pt,T5e),e(T5e,MFr),e(Pt,EFr),e(Pt,uc),e(uc,CFr),e(uc,M5e),e(M5e,wFr),e(uc,AFr),e(uc,RH),e(RH,yFr),e(uc,LFr),e(Pt,xFr),M(KT,Pt,null),e(lr,$Fr),e(lr,Pr),M(Px,Pr,null),e(Pr,kFr),e(Pr,E5e),e(E5e,SFr),e(Pr,RFr),e(Pr,cn),e(cn,BFr),e(cn,C5e),e(C5e,PFr),e(cn,IFr),e(cn,w5e),e(w5e,qFr),e(cn,NFr),e(cn,A5e),e(A5e,jFr),e(cn,DFr),e(Pr,GFr),e(Pr,de),e(de,ZT),e(ZT,y5e),e(y5e,OFr),e(ZT,VFr),e(ZT,BH),e(BH,XFr),e(ZT,zFr),e(de,QFr),e(de,eM),e(eM,L5e),e(L5e,WFr),e(eM,HFr),e(eM,PH),e(PH,UFr),e(eM,JFr),e(de,YFr),e(de,oM),e(oM,x5e),e(x5e,KFr),e(oM,ZFr),e(oM,IH),e(IH,e6r),e(oM,o6r),e(de,r6r),e(de,rM),e(rM,$5e),e($5e,t6r),e(rM,a6r),e(rM,qH),e(qH,n6r),e(rM,s6r),e(de,l6r),e(de,tM),e(tM,k5e),e(k5e,i6r),e(tM,d6r),e(tM,NH),e(NH,c6r),e(tM,f6r),e(de,m6r),e(de,aM),e(aM,S5e),e(S5e,g6r),e(aM,h6r),e(aM,jH),e(jH,p6r),e(aM,u6r),e(de,_6r),e(de,nM),e(nM,R5e),e(R5e,b6r),e(nM,v6r),e(nM,DH),e(DH,F6r),e(nM,T6r),e(de,M6r),e(de,sM),e(sM,B5e),e(B5e,E6r),e(sM,C6r),e(sM,GH),e(GH,w6r),e(sM,A6r),e(de,y6r),e(de,lM),e(lM,P5e),e(P5e,L6r),e(lM,x6r),e(lM,OH),e(OH,$6r),e(lM,k6r),e(de,S6r),e(de,iM),e(iM,I5e),e(I5e,R6r),e(iM,B6r),e(iM,VH),e(VH,P6r),e(iM,I6r),e(de,q6r),e(de,dM),e(dM,q5e),e(q5e,N6r),e(dM,j6r),e(dM,XH),e(XH,D6r),e(dM,G6r),e(de,O6r),e(de,cM),e(cM,N5e),e(N5e,V6r),e(cM,X6r),e(cM,zH),e(zH,z6r),e(cM,Q6r),e(de,W6r),e(de,fM),e(fM,j5e),e(j5e,H6r),e(fM,U6r),e(fM,QH),e(QH,J6r),e(fM,Y6r),e(de,K6r),e(de,mM),e(mM,D5e),e(D5e,Z6r),e(mM,eTr),e(mM,WH),e(WH,oTr),e(mM,rTr),e(de,tTr),e(de,gM),e(gM,G5e),e(G5e,aTr),e(gM,nTr),e(gM,HH),e(HH,sTr),e(gM,lTr),e(de,iTr),e(de,hM),e(hM,O5e),e(O5e,dTr),e(hM,cTr),e(hM,UH),e(UH,fTr),e(hM,mTr),e(de,gTr),e(de,pM),e(pM,V5e),e(V5e,hTr),e(pM,pTr),e(pM,JH),e(JH,uTr),e(pM,_Tr),e(de,bTr),e(de,uM),e(uM,X5e),e(X5e,vTr),e(uM,FTr),e(uM,YH),e(YH,TTr),e(uM,MTr),e(de,ETr),e(de,_M),e(_M,z5e),e(z5e,CTr),e(_M,wTr),e(_M,KH),e(KH,ATr),e(_M,yTr),e(de,LTr),e(de,bM),e(bM,Q5e),e(Q5e,xTr),e(bM,$Tr),e(bM,ZH),e(ZH,kTr),e(bM,STr),e(Pr,RTr),M(vM,Pr,null),b(f,Fqe,_),b(f,_c,_),e(_c,FM),e(FM,W5e),M(Ix,W5e,null),e(_c,BTr),e(_c,H5e),e(H5e,PTr),b(f,Tqe,_),b(f,ir,_),M(qx,ir,null),e(ir,ITr),e(ir,bc),e(bc,qTr),e(bc,eU),e(eU,NTr),e(bc,jTr),e(bc,oU),e(oU,DTr),e(bc,GTr),e(ir,OTr),e(ir,Nx),e(Nx,VTr),e(Nx,U5e),e(U5e,XTr),e(Nx,zTr),e(ir,QTr),e(ir,It),M(jx,It,null),e(It,WTr),e(It,J5e),e(J5e,HTr),e(It,UTr),e(It,vc),e(vc,JTr),e(vc,Y5e),e(Y5e,YTr),e(vc,KTr),e(vc,rU),e(rU,ZTr),e(vc,eMr),e(It,oMr),M(TM,It,null),e(ir,rMr),e(ir,Ir),M(Dx,Ir,null),e(Ir,tMr),e(Ir,K5e),e(K5e,aMr),e(Ir,nMr),e(Ir,fn),e(fn,sMr),e(fn,Z5e),e(Z5e,lMr),e(fn,iMr),e(fn,e3e),e(e3e,dMr),e(fn,cMr),e(fn,o3e),e(o3e,fMr),e(fn,mMr),e(Ir,gMr),e(Ir,ce),e(ce,MM),e(MM,r3e),e(r3e,hMr),e(MM,pMr),e(MM,tU),e(tU,uMr),e(MM,_Mr),e(ce,bMr),e(ce,EM),e(EM,t3e),e(t3e,vMr),e(EM,FMr),e(EM,aU),e(aU,TMr),e(EM,MMr),e(ce,EMr),e(ce,CM),e(CM,a3e),e(a3e,CMr),e(CM,wMr),e(CM,nU),e(nU,AMr),e(CM,yMr),e(ce,LMr),e(ce,wM),e(wM,n3e),e(n3e,xMr),e(wM,$Mr),e(wM,sU),e(sU,kMr),e(wM,SMr),e(ce,RMr),e(ce,AM),e(AM,s3e),e(s3e,BMr),e(AM,PMr),e(AM,lU),e(lU,IMr),e(AM,qMr),e(ce,NMr),e(ce,yM),e(yM,l3e),e(l3e,jMr),e(yM,DMr),e(yM,iU),e(iU,GMr),e(yM,OMr),e(ce,VMr),e(ce,LM),e(LM,i3e),e(i3e,XMr),e(LM,zMr),e(LM,dU),e(dU,QMr),e(LM,WMr),e(ce,HMr),e(ce,xM),e(xM,d3e),e(d3e,UMr),e(xM,JMr),e(xM,cU),e(cU,YMr),e(xM,KMr),e(ce,ZMr),e(ce,$M),e($M,c3e),e(c3e,eEr),e($M,oEr),e($M,fU),e(fU,rEr),e($M,tEr),e(ce,aEr),e(ce,kM),e(kM,f3e),e(f3e,nEr),e(kM,sEr),e(kM,mU),e(mU,lEr),e(kM,iEr),e(ce,dEr),e(ce,SM),e(SM,m3e),e(m3e,cEr),e(SM,fEr),e(SM,gU),e(gU,mEr),e(SM,gEr),e(ce,hEr),e(ce,RM),e(RM,g3e),e(g3e,pEr),e(RM,uEr),e(RM,hU),e(hU,_Er),e(RM,bEr),e(ce,vEr),e(ce,BM),e(BM,h3e),e(h3e,FEr),e(BM,TEr),e(BM,pU),e(pU,MEr),e(BM,EEr),e(ce,CEr),e(ce,PM),e(PM,p3e),e(p3e,wEr),e(PM,AEr),e(PM,uU),e(uU,yEr),e(PM,LEr),e(ce,xEr),e(ce,IM),e(IM,u3e),e(u3e,$Er),e(IM,kEr),e(IM,_U),e(_U,SEr),e(IM,REr),e(ce,BEr),e(ce,qM),e(qM,_3e),e(_3e,PEr),e(qM,IEr),e(qM,bU),e(bU,qEr),e(qM,NEr),e(ce,jEr),e(ce,NM),e(NM,b3e),e(b3e,DEr),e(NM,GEr),e(NM,vU),e(vU,OEr),e(NM,VEr),e(ce,XEr),e(ce,jM),e(jM,v3e),e(v3e,zEr),e(jM,QEr),e(jM,FU),e(FU,WEr),e(jM,HEr),e(ce,UEr),e(ce,DM),e(DM,F3e),e(F3e,JEr),e(DM,YEr),e(DM,TU),e(TU,KEr),e(DM,ZEr),e(ce,eCr),e(ce,GM),e(GM,T3e),e(T3e,oCr),e(GM,rCr),e(GM,MU),e(MU,tCr),e(GM,aCr),e(Ir,nCr),M(OM,Ir,null),b(f,Mqe,_),b(f,Fc,_),e(Fc,VM),e(VM,M3e),M(Gx,M3e,null),e(Fc,sCr),e(Fc,E3e),e(E3e,lCr),b(f,Eqe,_),b(f,dr,_),M(Ox,dr,null),e(dr,iCr),e(dr,Tc),e(Tc,dCr),e(Tc,EU),e(EU,cCr),e(Tc,fCr),e(Tc,CU),e(CU,mCr),e(Tc,gCr),e(dr,hCr),e(dr,Vx),e(Vx,pCr),e(Vx,C3e),e(C3e,uCr),e(Vx,_Cr),e(dr,bCr),e(dr,qt),M(Xx,qt,null),e(qt,vCr),e(qt,w3e),e(w3e,FCr),e(qt,TCr),e(qt,Mc),e(Mc,MCr),e(Mc,A3e),e(A3e,ECr),e(Mc,CCr),e(Mc,wU),e(wU,wCr),e(Mc,ACr),e(qt,yCr),M(XM,qt,null),e(dr,LCr),e(dr,qr),M(zx,qr,null),e(qr,xCr),e(qr,y3e),e(y3e,$Cr),e(qr,kCr),e(qr,mn),e(mn,SCr),e(mn,L3e),e(L3e,RCr),e(mn,BCr),e(mn,x3e),e(x3e,PCr),e(mn,ICr),e(mn,$3e),e($3e,qCr),e(mn,NCr),e(qr,jCr),e(qr,k3e),e(k3e,zM),e(zM,S3e),e(S3e,DCr),e(zM,GCr),e(zM,AU),e(AU,OCr),e(zM,VCr),e(qr,XCr),M(QM,qr,null),b(f,Cqe,_),b(f,Ec,_),e(Ec,WM),e(WM,R3e),M(Qx,R3e,null),e(Ec,zCr),e(Ec,B3e),e(B3e,QCr),b(f,wqe,_),b(f,cr,_),M(Wx,cr,null),e(cr,WCr),e(cr,Cc),e(Cc,HCr),e(Cc,yU),e(yU,UCr),e(Cc,JCr),e(Cc,LU),e(LU,YCr),e(Cc,KCr),e(cr,ZCr),e(cr,Hx),e(Hx,ewr),e(Hx,P3e),e(P3e,owr),e(Hx,rwr),e(cr,twr),e(cr,Nt),M(Ux,Nt,null),e(Nt,awr),e(Nt,I3e),e(I3e,nwr),e(Nt,swr),e(Nt,wc),e(wc,lwr),e(wc,q3e),e(q3e,iwr),e(wc,dwr),e(wc,xU),e(xU,cwr),e(wc,fwr),e(Nt,mwr),M(HM,Nt,null),e(cr,gwr),e(cr,Nr),M(Jx,Nr,null),e(Nr,hwr),e(Nr,N3e),e(N3e,pwr),e(Nr,uwr),e(Nr,gn),e(gn,_wr),e(gn,j3e),e(j3e,bwr),e(gn,vwr),e(gn,D3e),e(D3e,Fwr),e(gn,Twr),e(gn,G3e),e(G3e,Mwr),e(gn,Ewr),e(Nr,Cwr),e(Nr,O3e),e(O3e,UM),e(UM,V3e),e(V3e,wwr),e(UM,Awr),e(UM,$U),e($U,ywr),e(UM,Lwr),e(Nr,xwr),M(JM,Nr,null),b(f,Aqe,_),b(f,Ac,_),e(Ac,YM),e(YM,X3e),M(Yx,X3e,null),e(Ac,$wr),e(Ac,z3e),e(z3e,kwr),b(f,yqe,_),b(f,fr,_),M(Kx,fr,null),e(fr,Swr),e(fr,yc),e(yc,Rwr),e(yc,kU),e(kU,Bwr),e(yc,Pwr),e(yc,SU),e(SU,Iwr),e(yc,qwr),e(fr,Nwr),e(fr,Zx),e(Zx,jwr),e(Zx,Q3e),e(Q3e,Dwr),e(Zx,Gwr),e(fr,Owr),e(fr,jt),M(e7,jt,null),e(jt,Vwr),e(jt,W3e),e(W3e,Xwr),e(jt,zwr),e(jt,Lc),e(Lc,Qwr),e(Lc,H3e),e(H3e,Wwr),e(Lc,Hwr),e(Lc,RU),e(RU,Uwr),e(Lc,Jwr),e(jt,Ywr),M(KM,jt,null),e(fr,Kwr),e(fr,jr),M(o7,jr,null),e(jr,Zwr),e(jr,U3e),e(U3e,eAr),e(jr,oAr),e(jr,hn),e(hn,rAr),e(hn,J3e),e(J3e,tAr),e(hn,aAr),e(hn,Y3e),e(Y3e,nAr),e(hn,sAr),e(hn,K3e),e(K3e,lAr),e(hn,iAr),e(jr,dAr),e(jr,re),e(re,ZM),e(ZM,Z3e),e(Z3e,cAr),e(ZM,fAr),e(ZM,BU),e(BU,mAr),e(ZM,gAr),e(re,hAr),e(re,eE),e(eE,eve),e(eve,pAr),e(eE,uAr),e(eE,PU),e(PU,_Ar),e(eE,bAr),e(re,vAr),e(re,oE),e(oE,ove),e(ove,FAr),e(oE,TAr),e(oE,IU),e(IU,MAr),e(oE,EAr),e(re,CAr),e(re,rE),e(rE,rve),e(rve,wAr),e(rE,AAr),e(rE,qU),e(qU,yAr),e(rE,LAr),e(re,xAr),e(re,tE),e(tE,tve),e(tve,$Ar),e(tE,kAr),e(tE,NU),e(NU,SAr),e(tE,RAr),e(re,BAr),e(re,aE),e(aE,ave),e(ave,PAr),e(aE,IAr),e(aE,jU),e(jU,qAr),e(aE,NAr),e(re,jAr),e(re,nE),e(nE,nve),e(nve,DAr),e(nE,GAr),e(nE,DU),e(DU,OAr),e(nE,VAr),e(re,XAr),e(re,sE),e(sE,sve),e(sve,zAr),e(sE,QAr),e(sE,GU),e(GU,WAr),e(sE,HAr),e(re,UAr),e(re,lE),e(lE,lve),e(lve,JAr),e(lE,YAr),e(lE,OU),e(OU,KAr),e(lE,ZAr),e(re,e0r),e(re,iE),e(iE,ive),e(ive,o0r),e(iE,r0r),e(iE,VU),e(VU,t0r),e(iE,a0r),e(re,n0r),e(re,dE),e(dE,dve),e(dve,s0r),e(dE,l0r),e(dE,XU),e(XU,i0r),e(dE,d0r),e(re,c0r),e(re,cE),e(cE,cve),e(cve,f0r),e(cE,m0r),e(cE,zU),e(zU,g0r),e(cE,h0r),e(re,p0r),e(re,fE),e(fE,fve),e(fve,u0r),e(fE,_0r),e(fE,QU),e(QU,b0r),e(fE,v0r),e(re,F0r),e(re,mE),e(mE,mve),e(mve,T0r),e(mE,M0r),e(mE,WU),e(WU,E0r),e(mE,C0r),e(re,w0r),e(re,gE),e(gE,gve),e(gve,A0r),e(gE,y0r),e(gE,HU),e(HU,L0r),e(gE,x0r),e(re,$0r),e(re,hE),e(hE,hve),e(hve,k0r),e(hE,S0r),e(hE,UU),e(UU,R0r),e(hE,B0r),e(re,P0r),e(re,pE),e(pE,pve),e(pve,I0r),e(pE,q0r),e(pE,JU),e(JU,N0r),e(pE,j0r),e(re,D0r),e(re,uE),e(uE,uve),e(uve,G0r),e(uE,O0r),e(uE,YU),e(YU,V0r),e(uE,X0r),e(re,z0r),e(re,_E),e(_E,_ve),e(_ve,Q0r),e(_E,W0r),e(_E,KU),e(KU,H0r),e(_E,U0r),e(re,J0r),e(re,bE),e(bE,bve),e(bve,Y0r),e(bE,K0r),e(bE,ZU),e(ZU,Z0r),e(bE,eyr),e(re,oyr),e(re,vE),e(vE,vve),e(vve,ryr),e(vE,tyr),e(vE,eJ),e(eJ,ayr),e(vE,nyr),e(re,syr),e(re,FE),e(FE,Fve),e(Fve,lyr),e(FE,iyr),e(FE,oJ),e(oJ,dyr),e(FE,cyr),e(re,fyr),e(re,TE),e(TE,Tve),e(Tve,myr),e(TE,gyr),e(TE,rJ),e(rJ,hyr),e(TE,pyr),e(re,uyr),e(re,ME),e(ME,Mve),e(Mve,_yr),e(ME,byr),e(ME,tJ),e(tJ,vyr),e(ME,Fyr),e(re,Tyr),e(re,EE),e(EE,Eve),e(Eve,Myr),e(EE,Eyr),e(EE,aJ),e(aJ,Cyr),e(EE,wyr),e(jr,Ayr),M(CE,jr,null),b(f,Lqe,_),b(f,xc,_),e(xc,wE),e(wE,Cve),M(r7,Cve,null),e(xc,yyr),e(xc,wve),e(wve,Lyr),b(f,xqe,_),b(f,mr,_),M(t7,mr,null),e(mr,xyr),e(mr,$c),e($c,$yr),e($c,nJ),e(nJ,kyr),e($c,Syr),e($c,sJ),e(sJ,Ryr),e($c,Byr),e(mr,Pyr),e(mr,a7),e(a7,Iyr),e(a7,Ave),e(Ave,qyr),e(a7,Nyr),e(mr,jyr),e(mr,Dt),M(n7,Dt,null),e(Dt,Dyr),e(Dt,yve),e(yve,Gyr),e(Dt,Oyr),e(Dt,kc),e(kc,Vyr),e(kc,Lve),e(Lve,Xyr),e(kc,zyr),e(kc,lJ),e(lJ,Qyr),e(kc,Wyr),e(Dt,Hyr),M(AE,Dt,null),e(mr,Uyr),e(mr,Dr),M(s7,Dr,null),e(Dr,Jyr),e(Dr,xve),e(xve,Yyr),e(Dr,Kyr),e(Dr,pn),e(pn,Zyr),e(pn,$ve),e($ve,eLr),e(pn,oLr),e(pn,kve),e(kve,rLr),e(pn,tLr),e(pn,Sve),e(Sve,aLr),e(pn,nLr),e(Dr,sLr),e(Dr,ke),e(ke,yE),e(yE,Rve),e(Rve,lLr),e(yE,iLr),e(yE,iJ),e(iJ,dLr),e(yE,cLr),e(ke,fLr),e(ke,LE),e(LE,Bve),e(Bve,mLr),e(LE,gLr),e(LE,dJ),e(dJ,hLr),e(LE,pLr),e(ke,uLr),e(ke,xE),e(xE,Pve),e(Pve,_Lr),e(xE,bLr),e(xE,cJ),e(cJ,vLr),e(xE,FLr),e(ke,TLr),e(ke,$E),e($E,Ive),e(Ive,MLr),e($E,ELr),e($E,fJ),e(fJ,CLr),e($E,wLr),e(ke,ALr),e(ke,kE),e(kE,qve),e(qve,yLr),e(kE,LLr),e(kE,mJ),e(mJ,xLr),e(kE,$Lr),e(ke,kLr),e(ke,SE),e(SE,Nve),e(Nve,SLr),e(SE,RLr),e(SE,gJ),e(gJ,BLr),e(SE,PLr),e(ke,ILr),e(ke,RE),e(RE,jve),e(jve,qLr),e(RE,NLr),e(RE,hJ),e(hJ,jLr),e(RE,DLr),e(ke,GLr),e(ke,BE),e(BE,Dve),e(Dve,OLr),e(BE,VLr),e(BE,pJ),e(pJ,XLr),e(BE,zLr),e(ke,QLr),e(ke,PE),e(PE,Gve),e(Gve,WLr),e(PE,HLr),e(PE,uJ),e(uJ,ULr),e(PE,JLr),e(Dr,YLr),M(IE,Dr,null),b(f,$qe,_),b(f,Sc,_),e(Sc,qE),e(qE,Ove),M(l7,Ove,null),e(Sc,KLr),e(Sc,Vve),e(Vve,ZLr),b(f,kqe,_),b(f,gr,_),M(i7,gr,null),e(gr,e8r),e(gr,Rc),e(Rc,o8r),e(Rc,_J),e(_J,r8r),e(Rc,t8r),e(Rc,bJ),e(bJ,a8r),e(Rc,n8r),e(gr,s8r),e(gr,d7),e(d7,l8r),e(d7,Xve),e(Xve,i8r),e(d7,d8r),e(gr,c8r),e(gr,Gt),M(c7,Gt,null),e(Gt,f8r),e(Gt,zve),e(zve,m8r),e(Gt,g8r),e(Gt,Bc),e(Bc,h8r),e(Bc,Qve),e(Qve,p8r),e(Bc,u8r),e(Bc,vJ),e(vJ,_8r),e(Bc,b8r),e(Gt,v8r),M(NE,Gt,null),e(gr,F8r),e(gr,Gr),M(f7,Gr,null),e(Gr,T8r),e(Gr,Wve),e(Wve,M8r),e(Gr,E8r),e(Gr,un),e(un,C8r),e(un,Hve),e(Hve,w8r),e(un,A8r),e(un,Uve),e(Uve,y8r),e(un,L8r),e(un,Jve),e(Jve,x8r),e(un,$8r),e(Gr,k8r),e(Gr,Me),e(Me,jE),e(jE,Yve),e(Yve,S8r),e(jE,R8r),e(jE,FJ),e(FJ,B8r),e(jE,P8r),e(Me,I8r),e(Me,DE),e(DE,Kve),e(Kve,q8r),e(DE,N8r),e(DE,TJ),e(TJ,j8r),e(DE,D8r),e(Me,G8r),e(Me,GE),e(GE,Zve),e(Zve,O8r),e(GE,V8r),e(GE,MJ),e(MJ,X8r),e(GE,z8r),e(Me,Q8r),e(Me,OE),e(OE,eFe),e(eFe,W8r),e(OE,H8r),e(OE,EJ),e(EJ,U8r),e(OE,J8r),e(Me,Y8r),e(Me,VE),e(VE,oFe),e(oFe,K8r),e(VE,Z8r),e(VE,CJ),e(CJ,exr),e(VE,oxr),e(Me,rxr),e(Me,XE),e(XE,rFe),e(rFe,txr),e(XE,axr),e(XE,wJ),e(wJ,nxr),e(XE,sxr),e(Me,lxr),e(Me,zE),e(zE,tFe),e(tFe,ixr),e(zE,dxr),e(zE,AJ),e(AJ,cxr),e(zE,fxr),e(Me,mxr),e(Me,QE),e(QE,aFe),e(aFe,gxr),e(QE,hxr),e(QE,yJ),e(yJ,pxr),e(QE,uxr),e(Me,_xr),e(Me,WE),e(WE,nFe),e(nFe,bxr),e(WE,vxr),e(WE,LJ),e(LJ,Fxr),e(WE,Txr),e(Me,Mxr),e(Me,HE),e(HE,sFe),e(sFe,Exr),e(HE,Cxr),e(HE,xJ),e(xJ,wxr),e(HE,Axr),e(Me,yxr),e(Me,UE),e(UE,lFe),e(lFe,Lxr),e(UE,xxr),e(UE,$J),e($J,$xr),e(UE,kxr),e(Me,Sxr),e(Me,JE),e(JE,iFe),e(iFe,Rxr),e(JE,Bxr),e(JE,kJ),e(kJ,Pxr),e(JE,Ixr),e(Gr,qxr),M(YE,Gr,null),b(f,Sqe,_),b(f,Pc,_),e(Pc,KE),e(KE,dFe),M(m7,dFe,null),e(Pc,Nxr),e(Pc,cFe),e(cFe,jxr),b(f,Rqe,_),b(f,hr,_),M(g7,hr,null),e(hr,Dxr),e(hr,Ic),e(Ic,Gxr),e(Ic,SJ),e(SJ,Oxr),e(Ic,Vxr),e(Ic,RJ),e(RJ,Xxr),e(Ic,zxr),e(hr,Qxr),e(hr,h7),e(h7,Wxr),e(h7,fFe),e(fFe,Hxr),e(h7,Uxr),e(hr,Jxr),e(hr,Ot),M(p7,Ot,null),e(Ot,Yxr),e(Ot,mFe),e(mFe,Kxr),e(Ot,Zxr),e(Ot,qc),e(qc,e7r),e(qc,gFe),e(gFe,o7r),e(qc,r7r),e(qc,BJ),e(BJ,t7r),e(qc,a7r),e(Ot,n7r),M(ZE,Ot,null),e(hr,s7r),e(hr,Or),M(u7,Or,null),e(Or,l7r),e(Or,hFe),e(hFe,i7r),e(Or,d7r),e(Or,_n),e(_n,c7r),e(_n,pFe),e(pFe,f7r),e(_n,m7r),e(_n,uFe),e(uFe,g7r),e(_n,h7r),e(_n,_Fe),e(_Fe,p7r),e(_n,u7r),e(Or,_7r),e(Or,Le),e(Le,eC),e(eC,bFe),e(bFe,b7r),e(eC,v7r),e(eC,PJ),e(PJ,F7r),e(eC,T7r),e(Le,M7r),e(Le,oC),e(oC,vFe),e(vFe,E7r),e(oC,C7r),e(oC,IJ),e(IJ,w7r),e(oC,A7r),e(Le,y7r),e(Le,rC),e(rC,FFe),e(FFe,L7r),e(rC,x7r),e(rC,qJ),e(qJ,$7r),e(rC,k7r),e(Le,S7r),e(Le,tC),e(tC,TFe),e(TFe,R7r),e(tC,B7r),e(tC,NJ),e(NJ,P7r),e(tC,I7r),e(Le,q7r),e(Le,aC),e(aC,MFe),e(MFe,N7r),e(aC,j7r),e(aC,jJ),e(jJ,D7r),e(aC,G7r),e(Le,O7r),e(Le,nC),e(nC,EFe),e(EFe,V7r),e(nC,X7r),e(nC,DJ),e(DJ,z7r),e(nC,Q7r),e(Le,W7r),e(Le,sC),e(sC,CFe),e(CFe,H7r),e(sC,U7r),e(sC,GJ),e(GJ,J7r),e(sC,Y7r),e(Le,K7r),e(Le,lC),e(lC,wFe),e(wFe,Z7r),e(lC,e9r),e(lC,OJ),e(OJ,o9r),e(lC,r9r),e(Le,t9r),e(Le,iC),e(iC,AFe),e(AFe,a9r),e(iC,n9r),e(iC,VJ),e(VJ,s9r),e(iC,l9r),e(Le,i9r),e(Le,dC),e(dC,yFe),e(yFe,d9r),e(dC,c9r),e(dC,XJ),e(XJ,f9r),e(dC,m9r),e(Or,g9r),M(cC,Or,null),b(f,Bqe,_),b(f,Nc,_),e(Nc,fC),e(fC,LFe),M(_7,LFe,null),e(Nc,h9r),e(Nc,xFe),e(xFe,p9r),b(f,Pqe,_),b(f,pr,_),M(b7,pr,null),e(pr,u9r),e(pr,jc),e(jc,_9r),e(jc,zJ),e(zJ,b9r),e(jc,v9r),e(jc,QJ),e(QJ,F9r),e(jc,T9r),e(pr,M9r),e(pr,v7),e(v7,E9r),e(v7,$Fe),e($Fe,C9r),e(v7,w9r),e(pr,A9r),e(pr,Vt),M(F7,Vt,null),e(Vt,y9r),e(Vt,kFe),e(kFe,L9r),e(Vt,x9r),e(Vt,Dc),e(Dc,$9r),e(Dc,SFe),e(SFe,k9r),e(Dc,S9r),e(Dc,WJ),e(WJ,R9r),e(Dc,B9r),e(Vt,P9r),M(mC,Vt,null),e(pr,I9r),e(pr,Vr),M(T7,Vr,null),e(Vr,q9r),e(Vr,RFe),e(RFe,N9r),e(Vr,j9r),e(Vr,bn),e(bn,D9r),e(bn,BFe),e(BFe,G9r),e(bn,O9r),e(bn,PFe),e(PFe,V9r),e(bn,X9r),e(bn,IFe),e(IFe,z9r),e(bn,Q9r),e(Vr,W9r),e(Vr,Se),e(Se,gC),e(gC,qFe),e(qFe,H9r),e(gC,U9r),e(gC,HJ),e(HJ,J9r),e(gC,Y9r),e(Se,K9r),e(Se,hC),e(hC,NFe),e(NFe,Z9r),e(hC,e$r),e(hC,UJ),e(UJ,o$r),e(hC,r$r),e(Se,t$r),e(Se,pC),e(pC,jFe),e(jFe,a$r),e(pC,n$r),e(pC,JJ),e(JJ,s$r),e(pC,l$r),e(Se,i$r),e(Se,uC),e(uC,DFe),e(DFe,d$r),e(uC,c$r),e(uC,YJ),e(YJ,f$r),e(uC,m$r),e(Se,g$r),e(Se,_C),e(_C,GFe),e(GFe,h$r),e(_C,p$r),e(_C,KJ),e(KJ,u$r),e(_C,_$r),e(Se,b$r),e(Se,bC),e(bC,OFe),e(OFe,v$r),e(bC,F$r),e(bC,ZJ),e(ZJ,T$r),e(bC,M$r),e(Se,E$r),e(Se,vC),e(vC,VFe),e(VFe,C$r),e(vC,w$r),e(vC,eY),e(eY,A$r),e(vC,y$r),e(Se,L$r),e(Se,FC),e(FC,XFe),e(XFe,x$r),e(FC,$$r),e(FC,oY),e(oY,k$r),e(FC,S$r),e(Se,R$r),e(Se,TC),e(TC,zFe),e(zFe,B$r),e(TC,P$r),e(TC,rY),e(rY,I$r),e(TC,q$r),e(Vr,N$r),M(MC,Vr,null),b(f,Iqe,_),b(f,Gc,_),e(Gc,EC),e(EC,QFe),M(M7,QFe,null),e(Gc,j$r),e(Gc,WFe),e(WFe,D$r),b(f,qqe,_),b(f,ur,_),M(E7,ur,null),e(ur,G$r),e(ur,Oc),e(Oc,O$r),e(Oc,tY),e(tY,V$r),e(Oc,X$r),e(Oc,aY),e(aY,z$r),e(Oc,Q$r),e(ur,W$r),e(ur,C7),e(C7,H$r),e(C7,HFe),e(HFe,U$r),e(C7,J$r),e(ur,Y$r),e(ur,Xt),M(w7,Xt,null),e(Xt,K$r),e(Xt,UFe),e(UFe,Z$r),e(Xt,ekr),e(Xt,Vc),e(Vc,okr),e(Vc,JFe),e(JFe,rkr),e(Vc,tkr),e(Vc,nY),e(nY,akr),e(Vc,nkr),e(Xt,skr),M(CC,Xt,null),e(ur,lkr),e(ur,Xr),M(A7,Xr,null),e(Xr,ikr),e(Xr,YFe),e(YFe,dkr),e(Xr,ckr),e(Xr,vn),e(vn,fkr),e(vn,KFe),e(KFe,mkr),e(vn,gkr),e(vn,ZFe),e(ZFe,hkr),e(vn,pkr),e(vn,e6e),e(e6e,ukr),e(vn,_kr),e(Xr,bkr),e(Xr,xe),e(xe,wC),e(wC,o6e),e(o6e,vkr),e(wC,Fkr),e(wC,sY),e(sY,Tkr),e(wC,Mkr),e(xe,Ekr),e(xe,AC),e(AC,r6e),e(r6e,Ckr),e(AC,wkr),e(AC,lY),e(lY,Akr),e(AC,ykr),e(xe,Lkr),e(xe,yC),e(yC,t6e),e(t6e,xkr),e(yC,$kr),e(yC,iY),e(iY,kkr),e(yC,Skr),e(xe,Rkr),e(xe,LC),e(LC,a6e),e(a6e,Bkr),e(LC,Pkr),e(LC,dY),e(dY,Ikr),e(LC,qkr),e(xe,Nkr),e(xe,xC),e(xC,n6e),e(n6e,jkr),e(xC,Dkr),e(xC,cY),e(cY,Gkr),e(xC,Okr),e(xe,Vkr),e(xe,$C),e($C,s6e),e(s6e,Xkr),e($C,zkr),e($C,fY),e(fY,Qkr),e($C,Wkr),e(xe,Hkr),e(xe,kC),e(kC,l6e),e(l6e,Ukr),e(kC,Jkr),e(kC,mY),e(mY,Ykr),e(kC,Kkr),e(xe,Zkr),e(xe,SC),e(SC,i6e),e(i6e,eSr),e(SC,oSr),e(SC,gY),e(gY,rSr),e(SC,tSr),e(xe,aSr),e(xe,RC),e(RC,d6e),e(d6e,nSr),e(RC,sSr),e(RC,hY),e(hY,lSr),e(RC,iSr),e(xe,dSr),e(xe,BC),e(BC,c6e),e(c6e,cSr),e(BC,fSr),e(BC,pY),e(pY,mSr),e(BC,gSr),e(Xr,hSr),M(PC,Xr,null),b(f,Nqe,_),b(f,Xc,_),e(Xc,IC),e(IC,f6e),M(y7,f6e,null),e(Xc,pSr),e(Xc,m6e),e(m6e,uSr),b(f,jqe,_),b(f,_r,_),M(L7,_r,null),e(_r,_Sr),e(_r,zc),e(zc,bSr),e(zc,uY),e(uY,vSr),e(zc,FSr),e(zc,_Y),e(_Y,TSr),e(zc,MSr),e(_r,ESr),e(_r,x7),e(x7,CSr),e(x7,g6e),e(g6e,wSr),e(x7,ASr),e(_r,ySr),e(_r,zt),M($7,zt,null),e(zt,LSr),e(zt,h6e),e(h6e,xSr),e(zt,$Sr),e(zt,Qc),e(Qc,kSr),e(Qc,p6e),e(p6e,SSr),e(Qc,RSr),e(Qc,bY),e(bY,BSr),e(Qc,PSr),e(zt,ISr),M(qC,zt,null),e(_r,qSr),e(_r,zr),M(k7,zr,null),e(zr,NSr),e(zr,u6e),e(u6e,jSr),e(zr,DSr),e(zr,Fn),e(Fn,GSr),e(Fn,_6e),e(_6e,OSr),e(Fn,VSr),e(Fn,b6e),e(b6e,XSr),e(Fn,zSr),e(Fn,v6e),e(v6e,QSr),e(Fn,WSr),e(zr,HSr),e(zr,$e),e($e,NC),e(NC,F6e),e(F6e,USr),e(NC,JSr),e(NC,vY),e(vY,YSr),e(NC,KSr),e($e,ZSr),e($e,jC),e(jC,T6e),e(T6e,eRr),e(jC,oRr),e(jC,FY),e(FY,rRr),e(jC,tRr),e($e,aRr),e($e,DC),e(DC,M6e),e(M6e,nRr),e(DC,sRr),e(DC,TY),e(TY,lRr),e(DC,iRr),e($e,dRr),e($e,GC),e(GC,E6e),e(E6e,cRr),e(GC,fRr),e(GC,MY),e(MY,mRr),e(GC,gRr),e($e,hRr),e($e,OC),e(OC,C6e),e(C6e,pRr),e(OC,uRr),e(OC,EY),e(EY,_Rr),e(OC,bRr),e($e,vRr),e($e,VC),e(VC,w6e),e(w6e,FRr),e(VC,TRr),e(VC,CY),e(CY,MRr),e(VC,ERr),e($e,CRr),e($e,XC),e(XC,A6e),e(A6e,wRr),e(XC,ARr),e(XC,wY),e(wY,yRr),e(XC,LRr),e($e,xRr),e($e,zC),e(zC,y6e),e(y6e,$Rr),e(zC,kRr),e(zC,AY),e(AY,SRr),e(zC,RRr),e($e,BRr),e($e,QC),e(QC,L6e),e(L6e,PRr),e(QC,IRr),e(QC,yY),e(yY,qRr),e(QC,NRr),e($e,jRr),e($e,WC),e(WC,x6e),e(x6e,DRr),e(WC,GRr),e(WC,LY),e(LY,ORr),e(WC,VRr),e(zr,XRr),M(HC,zr,null),b(f,Dqe,_),b(f,Wc,_),e(Wc,UC),e(UC,$6e),M(S7,$6e,null),e(Wc,zRr),e(Wc,k6e),e(k6e,QRr),b(f,Gqe,_),b(f,br,_),M(R7,br,null),e(br,WRr),e(br,Hc),e(Hc,HRr),e(Hc,xY),e(xY,URr),e(Hc,JRr),e(Hc,$Y),e($Y,YRr),e(Hc,KRr),e(br,ZRr),e(br,B7),e(B7,eBr),e(B7,S6e),e(S6e,oBr),e(B7,rBr),e(br,tBr),e(br,Qt),M(P7,Qt,null),e(Qt,aBr),e(Qt,R6e),e(R6e,nBr),e(Qt,sBr),e(Qt,Uc),e(Uc,lBr),e(Uc,B6e),e(B6e,iBr),e(Uc,dBr),e(Uc,kY),e(kY,cBr),e(Uc,fBr),e(Qt,mBr),M(JC,Qt,null),e(br,gBr),e(br,Qr),M(I7,Qr,null),e(Qr,hBr),e(Qr,P6e),e(P6e,pBr),e(Qr,uBr),e(Qr,Tn),e(Tn,_Br),e(Tn,I6e),e(I6e,bBr),e(Tn,vBr),e(Tn,q6e),e(q6e,FBr),e(Tn,TBr),e(Tn,N6e),e(N6e,MBr),e(Tn,EBr),e(Qr,CBr),e(Qr,De),e(De,YC),e(YC,j6e),e(j6e,wBr),e(YC,ABr),e(YC,SY),e(SY,yBr),e(YC,LBr),e(De,xBr),e(De,KC),e(KC,D6e),e(D6e,$Br),e(KC,kBr),e(KC,RY),e(RY,SBr),e(KC,RBr),e(De,BBr),e(De,ZC),e(ZC,G6e),e(G6e,PBr),e(ZC,IBr),e(ZC,BY),e(BY,qBr),e(ZC,NBr),e(De,jBr),e(De,ew),e(ew,O6e),e(O6e,DBr),e(ew,GBr),e(ew,PY),e(PY,OBr),e(ew,VBr),e(De,XBr),e(De,ow),e(ow,V6e),e(V6e,zBr),e(ow,QBr),e(ow,IY),e(IY,WBr),e(ow,HBr),e(De,UBr),e(De,rw),e(rw,X6e),e(X6e,JBr),e(rw,YBr),e(rw,qY),e(qY,KBr),e(rw,ZBr),e(De,ePr),e(De,tw),e(tw,z6e),e(z6e,oPr),e(tw,rPr),e(tw,NY),e(NY,tPr),e(tw,aPr),e(De,nPr),e(De,aw),e(aw,Q6e),e(Q6e,sPr),e(aw,lPr),e(aw,jY),e(jY,iPr),e(aw,dPr),e(Qr,cPr),M(nw,Qr,null),b(f,Oqe,_),b(f,Jc,_),e(Jc,sw),e(sw,W6e),M(q7,W6e,null),e(Jc,fPr),e(Jc,H6e),e(H6e,mPr),b(f,Vqe,_),b(f,vr,_),M(N7,vr,null),e(vr,gPr),e(vr,Yc),e(Yc,hPr),e(Yc,DY),e(DY,pPr),e(Yc,uPr),e(Yc,GY),e(GY,_Pr),e(Yc,bPr),e(vr,vPr),e(vr,j7),e(j7,FPr),e(j7,U6e),e(U6e,TPr),e(j7,MPr),e(vr,EPr),e(vr,Wt),M(D7,Wt,null),e(Wt,CPr),e(Wt,J6e),e(J6e,wPr),e(Wt,APr),e(Wt,Kc),e(Kc,yPr),e(Kc,Y6e),e(Y6e,LPr),e(Kc,xPr),e(Kc,OY),e(OY,$Pr),e(Kc,kPr),e(Wt,SPr),M(lw,Wt,null),e(vr,RPr),e(vr,Wr),M(G7,Wr,null),e(Wr,BPr),e(Wr,K6e),e(K6e,PPr),e(Wr,IPr),e(Wr,Mn),e(Mn,qPr),e(Mn,Z6e),e(Z6e,NPr),e(Mn,jPr),e(Mn,eTe),e(eTe,DPr),e(Mn,GPr),e(Mn,oTe),e(oTe,OPr),e(Mn,VPr),e(Wr,XPr),e(Wr,Ge),e(Ge,iw),e(iw,rTe),e(rTe,zPr),e(iw,QPr),e(iw,VY),e(VY,WPr),e(iw,HPr),e(Ge,UPr),e(Ge,dw),e(dw,tTe),e(tTe,JPr),e(dw,YPr),e(dw,XY),e(XY,KPr),e(dw,ZPr),e(Ge,eIr),e(Ge,cw),e(cw,aTe),e(aTe,oIr),e(cw,rIr),e(cw,zY),e(zY,tIr),e(cw,aIr),e(Ge,nIr),e(Ge,fw),e(fw,nTe),e(nTe,sIr),e(fw,lIr),e(fw,QY),e(QY,iIr),e(fw,dIr),e(Ge,cIr),e(Ge,mw),e(mw,sTe),e(sTe,fIr),e(mw,mIr),e(mw,WY),e(WY,gIr),e(mw,hIr),e(Ge,pIr),e(Ge,gw),e(gw,lTe),e(lTe,uIr),e(gw,_Ir),e(gw,HY),e(HY,bIr),e(gw,vIr),e(Ge,FIr),e(Ge,hw),e(hw,iTe),e(iTe,TIr),e(hw,MIr),e(hw,UY),e(UY,EIr),e(hw,CIr),e(Ge,wIr),e(Ge,pw),e(pw,dTe),e(dTe,AIr),e(pw,yIr),e(pw,JY),e(JY,LIr),e(pw,xIr),e(Wr,$Ir),M(uw,Wr,null),b(f,Xqe,_),b(f,Zc,_),e(Zc,_w),e(_w,cTe),M(O7,cTe,null),e(Zc,kIr),e(Zc,fTe),e(fTe,SIr),b(f,zqe,_),b(f,Fr,_),M(V7,Fr,null),e(Fr,RIr),e(Fr,ef),e(ef,BIr),e(ef,YY),e(YY,PIr),e(ef,IIr),e(ef,KY),e(KY,qIr),e(ef,NIr),e(Fr,jIr),e(Fr,X7),e(X7,DIr),e(X7,mTe),e(mTe,GIr),e(X7,OIr),e(Fr,VIr),e(Fr,Ht),M(z7,Ht,null),e(Ht,XIr),e(Ht,gTe),e(gTe,zIr),e(Ht,QIr),e(Ht,of),e(of,WIr),e(of,hTe),e(hTe,HIr),e(of,UIr),e(of,ZY),e(ZY,JIr),e(of,YIr),e(Ht,KIr),M(bw,Ht,null),e(Fr,ZIr),e(Fr,Hr),M(Q7,Hr,null),e(Hr,eqr),e(Hr,pTe),e(pTe,oqr),e(Hr,rqr),e(Hr,En),e(En,tqr),e(En,uTe),e(uTe,aqr),e(En,nqr),e(En,_Te),e(_Te,sqr),e(En,lqr),e(En,bTe),e(bTe,iqr),e(En,dqr),e(Hr,cqr),e(Hr,vTe),e(vTe,vw),e(vw,FTe),e(FTe,fqr),e(vw,mqr),e(vw,eK),e(eK,gqr),e(vw,hqr),e(Hr,pqr),M(Fw,Hr,null),b(f,Qqe,_),b(f,rf,_),e(rf,Tw),e(Tw,TTe),M(W7,TTe,null),e(rf,uqr),e(rf,MTe),e(MTe,_qr),b(f,Wqe,_),b(f,Tr,_),M(H7,Tr,null),e(Tr,bqr),e(Tr,tf),e(tf,vqr),e(tf,oK),e(oK,Fqr),e(tf,Tqr),e(tf,rK),e(rK,Mqr),e(tf,Eqr),e(Tr,Cqr),e(Tr,U7),e(U7,wqr),e(U7,ETe),e(ETe,Aqr),e(U7,yqr),e(Tr,Lqr),e(Tr,Ut),M(J7,Ut,null),e(Ut,xqr),e(Ut,CTe),e(CTe,$qr),e(Ut,kqr),e(Ut,af),e(af,Sqr),e(af,wTe),e(wTe,Rqr),e(af,Bqr),e(af,tK),e(tK,Pqr),e(af,Iqr),e(Ut,qqr),M(Mw,Ut,null),e(Tr,Nqr),e(Tr,Ur),M(Y7,Ur,null),e(Ur,jqr),e(Ur,ATe),e(ATe,Dqr),e(Ur,Gqr),e(Ur,Cn),e(Cn,Oqr),e(Cn,yTe),e(yTe,Vqr),e(Cn,Xqr),e(Cn,LTe),e(LTe,zqr),e(Cn,Qqr),e(Cn,xTe),e(xTe,Wqr),e(Cn,Hqr),e(Ur,Uqr),e(Ur,K7),e(K7,Ew),e(Ew,$Te),e($Te,Jqr),e(Ew,Yqr),e(Ew,aK),e(aK,Kqr),e(Ew,Zqr),e(K7,eNr),e(K7,Cw),e(Cw,kTe),e(kTe,oNr),e(Cw,rNr),e(Cw,nK),e(nK,tNr),e(Cw,aNr),e(Ur,nNr),M(ww,Ur,null),b(f,Hqe,_),b(f,nf,_),e(nf,Aw),e(Aw,STe),M(Z7,STe,null),e(nf,sNr),e(nf,RTe),e(RTe,lNr),b(f,Uqe,_),b(f,Mr,_),M(e9,Mr,null),e(Mr,iNr),e(Mr,sf),e(sf,dNr),e(sf,sK),e(sK,cNr),e(sf,fNr),e(sf,lK),e(lK,mNr),e(sf,gNr),e(Mr,hNr),e(Mr,o9),e(o9,pNr),e(o9,BTe),e(BTe,uNr),e(o9,_Nr),e(Mr,bNr),e(Mr,Jt),M(r9,Jt,null),e(Jt,vNr),e(Jt,PTe),e(PTe,FNr),e(Jt,TNr),e(Jt,lf),e(lf,MNr),e(lf,ITe),e(ITe,ENr),e(lf,CNr),e(lf,iK),e(iK,wNr),e(lf,ANr),e(Jt,yNr),M(yw,Jt,null),e(Mr,LNr),e(Mr,Jr),M(t9,Jr,null),e(Jr,xNr),e(Jr,qTe),e(qTe,$Nr),e(Jr,kNr),e(Jr,wn),e(wn,SNr),e(wn,NTe),e(NTe,RNr),e(wn,BNr),e(wn,jTe),e(jTe,PNr),e(wn,INr),e(wn,DTe),e(DTe,qNr),e(wn,NNr),e(Jr,jNr),e(Jr,GTe),e(GTe,Lw),e(Lw,OTe),e(OTe,DNr),e(Lw,GNr),e(Lw,dK),e(dK,ONr),e(Lw,VNr),e(Jr,XNr),M(xw,Jr,null),Jqe=!0},p(f,[_]){const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),_f.$set(a9);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),pg.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),Hg.$set(XTe);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),Mh.$set(zTe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),Eh.$set(n9);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),Gh.$set(QTe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Oh.$set(An);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),zh.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),Pu.$set(HTe);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),qu.$set(UTe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),w_.$set(s9);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),y_.$set(JTe);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),f1.$set(l9);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),g1.$set(YTe);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),J1.$set(i9);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),K1.$set(KTe);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),ub.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),bb.$set(eMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),m4.$set(df);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),h4.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),z4.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),W4.$set(tMe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),e2.$set(d9);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),r2.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),q2.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),j2.$set(sMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),A5.$set(Kr);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),L5.$set(c9);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),k5.$set(lMe);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),R5.$set(f9);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),Q5.$set(iMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),H5.$set(Zr);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),Y5.$set(dMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Z5.$set(cf);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),d3.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),f3.$set(fMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),_3.$set(L);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),v3.$set($w);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),x3.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),k3.$set(gMe);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),P3.$set(kw);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),q3.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),V3.$set(pMe);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),z3.$set(Sw);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),J3.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),K3.$set(_Me);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),rv.$set(Rw);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),av.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),lv.$set(vMe);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),dv.$set(Bw);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),pv.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),_v.$set(TMe);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),Fv.$set(Pw);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),Mv.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),pF.$set(EMe);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),_F.$set(Iw);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),GF.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),VF.$set(wMe);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),t6.$set(qw);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),n6.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),c6.$set(yMe);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),m6.$set(Nw);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),R6.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),P6.$set(xMe);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),Q6.$set(jw);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),H6.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),TT.$set(kMe);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),ET.$set(Dw);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),GT.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),VT.$set(RMe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),QT.$set(Gw);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),HT.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),JT.$set(PMe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),KT.$set(Ow);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),vM.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),TM.$set(qMe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),OM.$set(Vw);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),XM.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),QM.$set(jMe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),HM.$set(Xw);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),JM.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),KM.$set(GMe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),CE.$set(zw);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),AE.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),IE.$set(VMe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),NE.$set(Qw);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),YE.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),ZE.$set(zMe);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),cC.$set(Ww);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),mC.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),MC.$set(WMe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),CC.$set(Hw);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),PC.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),qC.$set(UMe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),HC.$set(Uw);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),JC.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),nw.$set(YMe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),lw.$set(Jw);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),uw.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),bw.$set(ZMe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),Fw.$set(Yw);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),Mw.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),ww.$set(oEe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),yw.$set(Kw);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),xw.$set(rEe)},i(f){Jqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(_f.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ny.$$.fragment,f),E(pg.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(fy.$$.fragment,f),E(Hg.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ey.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(zh.$$.fragment,f),E(xy.$$.fragment,f),E(Pu.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(qu.$$.fragment,f),E(By.$$.fragment,f),E(w_.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(y_.$$.fragment,f),E(jy.$$.fragment,f),E(f1.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(g1.$$.fragment,f),E(Xy.$$.fragment,f),E(J1.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(K1.$$.fragment,f),E(Uy.$$.fragment,f),E(ub.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(bb.$$.fragment,f),E(eL.$$.fragment,f),E(m4.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(h4.$$.fragment,f),E(nL.$$.fragment,f),E(z4.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(W4.$$.fragment,f),E(cL.$$.fragment,f),E(e2.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(r2.$$.fragment,f),E(pL.$$.fragment,f),E(q2.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(j2.$$.fragment,f),E(FL.$$.fragment,f),E(A5.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(L5.$$.fragment,f),E(wL.$$.fragment,f),E(k5.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(R5.$$.fragment,f),E($L.$$.fragment,f),E(Q5.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(H5.$$.fragment,f),E(PL.$$.fragment,f),E(Y5.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(Z5.$$.fragment,f),E(DL.$$.fragment,f),E(d3.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(f3.$$.fragment,f),E(zL.$$.fragment,f),E(_3.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(v3.$$.fragment,f),E(JL.$$.fragment,f),E(x3.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(k3.$$.fragment,f),E(o8.$$.fragment,f),E(P3.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(q3.$$.fragment,f),E(l8.$$.fragment,f),E(V3.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(z3.$$.fragment,f),E(m8.$$.fragment,f),E(J3.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(K3.$$.fragment,f),E(_8.$$.fragment,f),E(rv.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(av.$$.fragment,f),E(E8.$$.fragment,f),E(lv.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(dv.$$.fragment,f),E(L8.$$.fragment,f),E(pv.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(_v.$$.fragment,f),E(R8.$$.fragment,f),E(Fv.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(Mv.$$.fragment,f),E(N8.$$.fragment,f),E(pF.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(_F.$$.fragment,f),E(V8.$$.fragment,f),E(GF.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(VF.$$.fragment,f),E(H8.$$.fragment,f),E(t6.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(n6.$$.fragment,f),E(Z8.$$.fragment,f),E(c6.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(m6.$$.fragment,f),E(ax.$$.fragment,f),E(R6.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(P6.$$.fragment,f),E(dx.$$.fragment,f),E(Q6.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(H6.$$.fragment,f),E(hx.$$.fragment,f),E(TT.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(ET.$$.fragment,f),E(vx.$$.fragment,f),E(GT.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(VT.$$.fragment,f),E(Cx.$$.fragment,f),E(QT.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(HT.$$.fragment,f),E($x.$$.fragment,f),E(JT.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Bx.$$.fragment,f),E(KT.$$.fragment,f),E(Px.$$.fragment,f),E(vM.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(TM.$$.fragment,f),E(Dx.$$.fragment,f),E(OM.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(XM.$$.fragment,f),E(zx.$$.fragment,f),E(QM.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(HM.$$.fragment,f),E(Jx.$$.fragment,f),E(JM.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e7.$$.fragment,f),E(KM.$$.fragment,f),E(o7.$$.fragment,f),E(CE.$$.fragment,f),E(r7.$$.fragment,f),E(t7.$$.fragment,f),E(n7.$$.fragment,f),E(AE.$$.fragment,f),E(s7.$$.fragment,f),E(IE.$$.fragment,f),E(l7.$$.fragment,f),E(i7.$$.fragment,f),E(c7.$$.fragment,f),E(NE.$$.fragment,f),E(f7.$$.fragment,f),E(YE.$$.fragment,f),E(m7.$$.fragment,f),E(g7.$$.fragment,f),E(p7.$$.fragment,f),E(ZE.$$.fragment,f),E(u7.$$.fragment,f),E(cC.$$.fragment,f),E(_7.$$.fragment,f),E(b7.$$.fragment,f),E(F7.$$.fragment,f),E(mC.$$.fragment,f),E(T7.$$.fragment,f),E(MC.$$.fragment,f),E(M7.$$.fragment,f),E(E7.$$.fragment,f),E(w7.$$.fragment,f),E(CC.$$.fragment,f),E(A7.$$.fragment,f),E(PC.$$.fragment,f),E(y7.$$.fragment,f),E(L7.$$.fragment,f),E($7.$$.fragment,f),E(qC.$$.fragment,f),E(k7.$$.fragment,f),E(HC.$$.fragment,f),E(S7.$$.fragment,f),E(R7.$$.fragment,f),E(P7.$$.fragment,f),E(JC.$$.fragment,f),E(I7.$$.fragment,f),E(nw.$$.fragment,f),E(q7.$$.fragment,f),E(N7.$$.fragment,f),E(D7.$$.fragment,f),E(lw.$$.fragment,f),E(G7.$$.fragment,f),E(uw.$$.fragment,f),E(O7.$$.fragment,f),E(V7.$$.fragment,f),E(z7.$$.fragment,f),E(bw.$$.fragment,f),E(Q7.$$.fragment,f),E(Fw.$$.fragment,f),E(W7.$$.fragment,f),E(H7.$$.fragment,f),E(J7.$$.fragment,f),E(Mw.$$.fragment,f),E(Y7.$$.fragment,f),E(ww.$$.fragment,f),E(Z7.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(yw.$$.fragment,f),E(t9.$$.fragment,f),E(xw.$$.fragment,f),Jqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(_f.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ny.$$.fragment,f),C(pg.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(fy.$$.fragment,f),C(Hg.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ey.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(zh.$$.fragment,f),C(xy.$$.fragment,f),C(Pu.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(qu.$$.fragment,f),C(By.$$.fragment,f),C(w_.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(y_.$$.fragment,f),C(jy.$$.fragment,f),C(f1.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(g1.$$.fragment,f),C(Xy.$$.fragment,f),C(J1.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(K1.$$.fragment,f),C(Uy.$$.fragment,f),C(ub.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(bb.$$.fragment,f),C(eL.$$.fragment,f),C(m4.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(h4.$$.fragment,f),C(nL.$$.fragment,f),C(z4.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(W4.$$.fragment,f),C(cL.$$.fragment,f),C(e2.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(r2.$$.fragment,f),C(pL.$$.fragment,f),C(q2.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(j2.$$.fragment,f),C(FL.$$.fragment,f),C(A5.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(L5.$$.fragment,f),C(wL.$$.fragment,f),C(k5.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(R5.$$.fragment,f),C($L.$$.fragment,f),C(Q5.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(H5.$$.fragment,f),C(PL.$$.fragment,f),C(Y5.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(Z5.$$.fragment,f),C(DL.$$.fragment,f),C(d3.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(f3.$$.fragment,f),C(zL.$$.fragment,f),C(_3.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(v3.$$.fragment,f),C(JL.$$.fragment,f),C(x3.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(k3.$$.fragment,f),C(o8.$$.fragment,f),C(P3.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(q3.$$.fragment,f),C(l8.$$.fragment,f),C(V3.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(z3.$$.fragment,f),C(m8.$$.fragment,f),C(J3.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(K3.$$.fragment,f),C(_8.$$.fragment,f),C(rv.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(av.$$.fragment,f),C(E8.$$.fragment,f),C(lv.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(dv.$$.fragment,f),C(L8.$$.fragment,f),C(pv.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(_v.$$.fragment,f),C(R8.$$.fragment,f),C(Fv.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(Mv.$$.fragment,f),C(N8.$$.fragment,f),C(pF.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(_F.$$.fragment,f),C(V8.$$.fragment,f),C(GF.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(VF.$$.fragment,f),C(H8.$$.fragment,f),C(t6.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(n6.$$.fragment,f),C(Z8.$$.fragment,f),C(c6.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(m6.$$.fragment,f),C(ax.$$.fragment,f),C(R6.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(P6.$$.fragment,f),C(dx.$$.fragment,f),C(Q6.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(H6.$$.fragment,f),C(hx.$$.fragment,f),C(TT.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(ET.$$.fragment,f),C(vx.$$.fragment,f),C(GT.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(VT.$$.fragment,f),C(Cx.$$.fragment,f),C(QT.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(HT.$$.fragment,f),C($x.$$.fragment,f),C(JT.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Bx.$$.fragment,f),C(KT.$$.fragment,f),C(Px.$$.fragment,f),C(vM.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(TM.$$.fragment,f),C(Dx.$$.fragment,f),C(OM.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(XM.$$.fragment,f),C(zx.$$.fragment,f),C(QM.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(HM.$$.fragment,f),C(Jx.$$.fragment,f),C(JM.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e7.$$.fragment,f),C(KM.$$.fragment,f),C(o7.$$.fragment,f),C(CE.$$.fragment,f),C(r7.$$.fragment,f),C(t7.$$.fragment,f),C(n7.$$.fragment,f),C(AE.$$.fragment,f),C(s7.$$.fragment,f),C(IE.$$.fragment,f),C(l7.$$.fragment,f),C(i7.$$.fragment,f),C(c7.$$.fragment,f),C(NE.$$.fragment,f),C(f7.$$.fragment,f),C(YE.$$.fragment,f),C(m7.$$.fragment,f),C(g7.$$.fragment,f),C(p7.$$.fragment,f),C(ZE.$$.fragment,f),C(u7.$$.fragment,f),C(cC.$$.fragment,f),C(_7.$$.fragment,f),C(b7.$$.fragment,f),C(F7.$$.fragment,f),C(mC.$$.fragment,f),C(T7.$$.fragment,f),C(MC.$$.fragment,f),C(M7.$$.fragment,f),C(E7.$$.fragment,f),C(w7.$$.fragment,f),C(CC.$$.fragment,f),C(A7.$$.fragment,f),C(PC.$$.fragment,f),C(y7.$$.fragment,f),C(L7.$$.fragment,f),C($7.$$.fragment,f),C(qC.$$.fragment,f),C(k7.$$.fragment,f),C(HC.$$.fragment,f),C(S7.$$.fragment,f),C(R7.$$.fragment,f),C(P7.$$.fragment,f),C(JC.$$.fragment,f),C(I7.$$.fragment,f),C(nw.$$.fragment,f),C(q7.$$.fragment,f),C(N7.$$.fragment,f),C(D7.$$.fragment,f),C(lw.$$.fragment,f),C(G7.$$.fragment,f),C(uw.$$.fragment,f),C(O7.$$.fragment,f),C(V7.$$.fragment,f),C(z7.$$.fragment,f),C(bw.$$.fragment,f),C(Q7.$$.fragment,f),C(Fw.$$.fragment,f),C(W7.$$.fragment,f),C(H7.$$.fragment,f),C(J7.$$.fragment,f),C(Mw.$$.fragment,f),C(Y7.$$.fragment,f),C(ww.$$.fragment,f),C(Z7.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(yw.$$.fragment,f),C(t9.$$.fragment,f),C(xw.$$.fragment,f),Jqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(WPe),f&&t(pi),w(Z0),f&&t(HPe),f&&t(kn),f&&t(UPe),w(ey,f),f&&t(JPe),f&&t(T$),f&&t(YPe),w(_f,f),f&&t(KPe),f&&t(ui),w(oy),f&&t(ZPe),f&&t(Co),w(ry),w(ny),w(pg),w(sy),f&&t(eIe),f&&t(bi),w(ly),f&&t(oIe),f&&t(wo),w(iy),w(fy),w(Hg),w(my),f&&t(rIe),f&&t(vi),w(gy),f&&t(tIe),f&&t(Ao),w(hy),w(_y),w(Mh),w(Eh),w(by),f&&t(aIe),f&&t(Fi),w(vy),f&&t(nIe),f&&t(yo),w(Fy),w(Ey),w(Gh),w(Oh),w(Cy),f&&t(sIe),f&&t(Mi),w(wy),f&&t(lIe),f&&t(Lo),w(Ay),w(Ly),w(zh),w(xy),w(Pu),f&&t(iIe),f&&t(wi),w($y),f&&t(dIe),f&&t(xo),w(ky),w(Ry),w(qu),w(By),w(w_),f&&t(cIe),f&&t(Li),w(Py),f&&t(fIe),f&&t($o),w(Iy),w(Ny),w(y_),w(jy),w(f1),f&&t(mIe),f&&t(ki),w(Dy),f&&t(gIe),f&&t(ko),w(Gy),w(Vy),w(g1),w(Xy),w(J1),f&&t(hIe),f&&t(Bi),w(zy),f&&t(pIe),f&&t(So),w(Qy),w(Hy),w(K1),w(Uy),w(ub),f&&t(uIe),f&&t(qi),w(Jy),f&&t(_Ie),f&&t(Ro),w(Yy),w(Zy),w(bb),w(eL),w(m4),f&&t(bIe),f&&t(Di),w(oL),f&&t(vIe),f&&t(Bo),w(rL),w(aL),w(h4),w(nL),w(z4),f&&t(FIe),f&&t(Vi),w(sL),f&&t(TIe),f&&t(Po),w(lL),w(dL),w(W4),w(cL),w(e2),f&&t(MIe),f&&t(Qi),w(fL),f&&t(EIe),f&&t(Io),w(mL),w(hL),w(r2),w(pL),w(q2),f&&t(CIe),f&&t(Ui),w(uL),f&&t(wIe),f&&t(qo),w(_L),w(vL),w(j2),w(FL),w(A5),f&&t(AIe),f&&t(Ki),w(TL),f&&t(yIe),f&&t(No),w(ML),w(CL),w(L5),w(wL),w(k5),f&&t(LIe),f&&t(od),w(AL),f&&t(xIe),f&&t(jo),w(yL),w(xL),w(R5),w($L),w(Q5),f&&t($Ie),f&&t(ad),w(kL),f&&t(kIe),f&&t(Do),w(SL),w(BL),w(H5),w(PL),w(Y5),f&&t(SIe),f&&t(ld),w(IL),f&&t(RIe),f&&t(Go),w(qL),w(jL),w(Z5),w(DL),w(d3),f&&t(BIe),f&&t(cd),w(GL),f&&t(PIe),f&&t(Oo),w(OL),w(XL),w(f3),w(zL),w(_3),f&&t(IIe),f&&t(gd),w(QL),f&&t(qIe),f&&t(Vo),w(WL),w(UL),w(v3),w(JL),w(x3),f&&t(NIe),f&&t(ud),w(YL),f&&t(jIe),f&&t(Xo),w(KL),w(e8),w(k3),w(o8),w(P3),f&&t(DIe),f&&t(vd),w(t8),f&&t(GIe),f&&t(zo),w(a8),w(s8),w(q3),w(l8),w(V3),f&&t(OIe),f&&t(Md),w(i8),f&&t(VIe),f&&t(Qo),w(d8),w(f8),w(z3),w(m8),w(J3),f&&t(XIe),f&&t(Ad),w(g8),f&&t(zIe),f&&t(Wo),w(h8),w(u8),w(K3),w(_8),w(rv),f&&t(QIe),f&&t(xd),w(v8),f&&t(WIe),f&&t(Ho),w(F8),w(M8),w(av),w(E8),w(lv),f&&t(HIe),f&&t(Sd),w(C8),f&&t(UIe),f&&t(Uo),w(w8),w(y8),w(dv),w(L8),w(pv),f&&t(JIe),f&&t(Pd),w(x8),f&&t(YIe),f&&t(Jo),w($8),w(S8),w(_v),w(R8),w(Fv),f&&t(KIe),f&&t(Nd),w(B8),f&&t(ZIe),f&&t(Yo),w(P8),w(q8),w(Mv),w(N8),w(pF),f&&t(eqe),f&&t(Gd),w(j8),f&&t(oqe),f&&t(Ko),w(D8),w(O8),w(_F),w(V8),w(GF),f&&t(rqe),f&&t(Xd),w(X8),f&&t(tqe),f&&t(Zo),w(z8),w(W8),w(VF),w(H8),w(t6),f&&t(aqe),f&&t(Wd),w(U8),f&&t(nqe),f&&t(er),w(J8),w(K8),w(n6),w(Z8),w(c6),f&&t(sqe),f&&t(Jd),w(ex),f&&t(lqe),f&&t(or),w(ox),w(tx),w(m6),w(ax),w(R6),f&&t(iqe),f&&t(Zd),w(nx),f&&t(dqe),f&&t(rr),w(sx),w(ix),w(P6),w(dx),w(Q6),f&&t(cqe),f&&t(rc),w(cx),f&&t(fqe),f&&t(tr),w(fx),w(gx),w(H6),w(hx),w(TT),f&&t(mqe),f&&t(nc),w(px),f&&t(gqe),f&&t(ar),w(ux),w(bx),w(ET),w(vx),w(GT),f&&t(hqe),f&&t(ic),w(Fx),f&&t(pqe),f&&t(nr),w(Tx),w(Ex),w(VT),w(Cx),w(QT),f&&t(uqe),f&&t(fc),w(Ax),f&&t(_qe),f&&t(sr),w(yx),w(xx),w(HT),w($x),w(JT),f&&t(bqe),f&&t(hc),w(kx),f&&t(vqe),f&&t(lr),w(Sx),w(Bx),w(KT),w(Px),w(vM),f&&t(Fqe),f&&t(_c),w(Ix),f&&t(Tqe),f&&t(ir),w(qx),w(jx),w(TM),w(Dx),w(OM),f&&t(Mqe),f&&t(Fc),w(Gx),f&&t(Eqe),f&&t(dr),w(Ox),w(Xx),w(XM),w(zx),w(QM),f&&t(Cqe),f&&t(Ec),w(Qx),f&&t(wqe),f&&t(cr),w(Wx),w(Ux),w(HM),w(Jx),w(JM),f&&t(Aqe),f&&t(Ac),w(Yx),f&&t(yqe),f&&t(fr),w(Kx),w(e7),w(KM),w(o7),w(CE),f&&t(Lqe),f&&t(xc),w(r7),f&&t(xqe),f&&t(mr),w(t7),w(n7),w(AE),w(s7),w(IE),f&&t($qe),f&&t(Sc),w(l7),f&&t(kqe),f&&t(gr),w(i7),w(c7),w(NE),w(f7),w(YE),f&&t(Sqe),f&&t(Pc),w(m7),f&&t(Rqe),f&&t(hr),w(g7),w(p7),w(ZE),w(u7),w(cC),f&&t(Bqe),f&&t(Nc),w(_7),f&&t(Pqe),f&&t(pr),w(b7),w(F7),w(mC),w(T7),w(MC),f&&t(Iqe),f&&t(Gc),w(M7),f&&t(qqe),f&&t(ur),w(E7),w(w7),w(CC),w(A7),w(PC),f&&t(Nqe),f&&t(Xc),w(y7),f&&t(jqe),f&&t(_r),w(L7),w($7),w(qC),w(k7),w(HC),f&&t(Dqe),f&&t(Wc),w(S7),f&&t(Gqe),f&&t(br),w(R7),w(P7),w(JC),w(I7),w(nw),f&&t(Oqe),f&&t(Jc),w(q7),f&&t(Vqe),f&&t(vr),w(N7),w(D7),w(lw),w(G7),w(uw),f&&t(Xqe),f&&t(Zc),w(O7),f&&t(zqe),f&&t(Fr),w(V7),w(z7),w(bw),w(Q7),w(Fw),f&&t(Qqe),f&&t(rf),w(W7),f&&t(Wqe),f&&t(Tr),w(H7),w(J7),w(Mw),w(Y7),w(ww),f&&t(Hqe),f&&t(nf),w(Z7),f&&t(Uqe),f&&t(Mr),w(e9),w(r9),w(yw),w(t9),w(xw)}}}const T8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function M8t(A){return Myt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class x8t extends byt{constructor(g){super();vyt(this,g,M8t,F8t,Fyt,{})}}export{x8t as default,T8t as metadata};
