import{S as NQt,i as qQt,s as jQt,e as a,k as l,w as F,t as o,M as DQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as GQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as itt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function OQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,oL,Pf,Oe,Qe,xi,Pn,rL,Bn,In,tL,$i,Nn,aL,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),oL=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),rL=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),tL=o(`, make sure its
`),$i=a("code"),Nn=o("config_class"),aL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var BS=s(p);m=r(BS,"NewModelConfig"),BS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var IS=s(Ai);Rf=r(IS,"model_type"),IS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var NS=s(Li);yi=r(NS,'"new-model"'),NS.forEach(t),oL=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),rL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var qS=s(Bn);In=r(qS,"PreTrainedModel"),qS.forEach(t),tL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var If=s($i);Nn=r(If,"config_class"),If.forEach(t),aL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var jS=s(ki);Bf=r(jS,"NewModelConfig"),jS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,oL),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,rL),e(Oe,Bn),e(Bn,In),e(Oe,tL),e(Oe,$i),e($i,Nn),e(Oe,aL),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,oL,Pf,Oe,Qe,xi,Pn,rL,Bn,In,tL,$i,Nn,aL,ki,Bf,Sa,We,Ae,BS,Si,IS,NS,Co,Ra,qS,If,jS,pHe,eXe,Ri,Nf,Mae,nL,_He,Eae,uHe,oXe,qn,bHe,Cae,vHe,FHe,wae,THe,MHe,rXe,sL,tXe,DS,EHe,aXe,qf,nXe,Pi,jf,Aae,lL,CHe,Lae,wHe,sXe,wo,iL,AHe,dL,LHe,GS,yHe,xHe,$He,cL,kHe,yae,SHe,RHe,PHe,Lr,fL,BHe,xae,IHe,NHe,Bi,qHe,$ae,jHe,DHe,kae,GHe,OHe,VHe,A,Df,Sae,XHe,zHe,OS,QHe,WHe,HHe,Gf,Rae,UHe,JHe,VS,YHe,KHe,ZHe,Of,Pae,eUe,oUe,XS,rUe,tUe,aUe,Vf,Bae,nUe,sUe,zS,lUe,iUe,dUe,Xf,Iae,cUe,fUe,QS,mUe,gUe,hUe,zf,Nae,pUe,_Ue,WS,uUe,bUe,vUe,Qf,qae,FUe,TUe,HS,MUe,EUe,CUe,Wf,jae,wUe,AUe,US,LUe,yUe,xUe,Hf,Dae,$Ue,kUe,JS,SUe,RUe,PUe,Uf,Gae,BUe,IUe,YS,NUe,qUe,jUe,Jf,Oae,DUe,GUe,KS,OUe,VUe,XUe,Yf,Vae,zUe,QUe,ZS,WUe,HUe,UUe,Kf,Xae,JUe,YUe,eR,KUe,ZUe,eJe,Zf,zae,oJe,rJe,oR,tJe,aJe,nJe,em,Qae,sJe,lJe,rR,iJe,dJe,cJe,om,Wae,fJe,mJe,tR,gJe,hJe,pJe,rm,Hae,_Je,uJe,aR,bJe,vJe,FJe,tm,Uae,TJe,MJe,nR,EJe,CJe,wJe,am,Jae,AJe,LJe,sR,yJe,xJe,$Je,nm,Yae,kJe,SJe,lR,RJe,PJe,BJe,sm,Kae,IJe,NJe,iR,qJe,jJe,DJe,lm,Zae,GJe,OJe,dR,VJe,XJe,zJe,im,ene,QJe,WJe,cR,HJe,UJe,JJe,dm,one,YJe,KJe,fR,ZJe,eYe,oYe,cm,rne,rYe,tYe,mR,aYe,nYe,sYe,fm,tne,lYe,iYe,gR,dYe,cYe,fYe,mm,ane,mYe,gYe,hR,hYe,pYe,_Ye,gm,nne,uYe,bYe,pR,vYe,FYe,TYe,hm,sne,MYe,EYe,_R,CYe,wYe,AYe,pm,lne,LYe,yYe,uR,xYe,$Ye,kYe,_m,ine,SYe,RYe,bR,PYe,BYe,IYe,um,dne,NYe,qYe,vR,jYe,DYe,GYe,bm,cne,OYe,VYe,FR,XYe,zYe,QYe,vm,fne,WYe,HYe,TR,UYe,JYe,YYe,Fm,mne,KYe,ZYe,MR,eKe,oKe,rKe,Tm,gne,tKe,aKe,ER,nKe,sKe,lKe,Mm,hne,iKe,dKe,CR,cKe,fKe,mKe,Em,pne,gKe,hKe,wR,pKe,_Ke,uKe,Cm,_ne,bKe,vKe,AR,FKe,TKe,MKe,wm,une,EKe,CKe,LR,wKe,AKe,LKe,Am,bne,yKe,xKe,yR,$Ke,kKe,SKe,Lm,vne,RKe,PKe,xR,BKe,IKe,NKe,ym,Fne,qKe,jKe,$R,DKe,GKe,OKe,xm,Tne,VKe,XKe,kR,zKe,QKe,WKe,$m,Mne,HKe,UKe,SR,JKe,YKe,KKe,km,Ene,ZKe,eZe,RR,oZe,rZe,tZe,Sm,Cne,aZe,nZe,PR,sZe,lZe,iZe,Rm,wne,dZe,cZe,BR,fZe,mZe,gZe,Pm,Ane,hZe,pZe,IR,_Ze,uZe,bZe,Bm,Lne,vZe,FZe,NR,TZe,MZe,EZe,Im,yne,CZe,wZe,qR,AZe,LZe,yZe,Nm,xne,xZe,$Ze,jR,kZe,SZe,RZe,qm,$ne,PZe,BZe,DR,IZe,NZe,qZe,jm,kne,jZe,DZe,GR,GZe,OZe,VZe,Dm,Sne,XZe,zZe,OR,QZe,WZe,HZe,Gm,Rne,UZe,JZe,VR,YZe,KZe,ZZe,Om,Pne,eeo,oeo,XR,reo,teo,aeo,Vm,Bne,neo,seo,zR,leo,ieo,deo,Xm,Ine,ceo,feo,QR,meo,geo,heo,zm,Nne,peo,_eo,WR,ueo,beo,veo,Qm,qne,Feo,Teo,HR,Meo,Eeo,Ceo,Wm,jne,weo,Aeo,UR,Leo,yeo,xeo,Hm,Dne,$eo,keo,JR,Seo,Reo,Peo,Um,Gne,Beo,Ieo,YR,Neo,qeo,jeo,Jm,One,Deo,Geo,KR,Oeo,Veo,Xeo,Ym,Vne,zeo,Qeo,ZR,Weo,Heo,Ueo,Km,Xne,Jeo,Yeo,eP,Keo,Zeo,eoo,Zm,zne,ooo,roo,oP,too,aoo,noo,eg,Qne,soo,loo,rP,ioo,doo,coo,og,Wne,foo,moo,tP,goo,hoo,poo,rg,Hne,_oo,uoo,aP,boo,voo,Foo,tg,Une,Too,Moo,nP,Eoo,Coo,woo,ag,Jne,Aoo,Loo,sP,yoo,xoo,$oo,ng,Yne,koo,Soo,lP,Roo,Poo,Boo,sg,Kne,Ioo,Noo,iP,qoo,joo,Doo,lg,Zne,Goo,Ooo,dP,Voo,Xoo,zoo,ig,ese,Qoo,Woo,cP,Hoo,Uoo,Joo,dg,ose,Yoo,Koo,fP,Zoo,ero,oro,cg,rse,rro,tro,mP,aro,nro,sro,fg,tse,lro,iro,gP,dro,cro,fro,mg,ase,mro,gro,hP,hro,pro,_ro,gg,nse,uro,bro,pP,vro,Fro,Tro,hg,sse,Mro,Ero,_P,Cro,wro,Aro,pg,lse,Lro,yro,uP,xro,$ro,kro,_g,ise,Sro,Rro,bP,Pro,Bro,Iro,ug,dse,Nro,qro,vP,jro,Dro,Gro,bg,cse,Oro,Vro,FP,Xro,zro,Qro,vg,fse,Wro,Hro,TP,Uro,Jro,Yro,Fg,mse,Kro,Zro,MP,eto,oto,rto,Tg,gse,tto,ato,EP,nto,sto,lto,Mg,hse,ito,dto,CP,cto,fto,mto,Eg,pse,gto,hto,wP,pto,_to,uto,Cg,_se,bto,vto,AP,Fto,Tto,Mto,wg,use,Eto,Cto,LP,wto,Ato,Lto,Ag,bse,yto,xto,yP,$to,kto,Sto,Lg,vse,Rto,Pto,xP,Bto,Ito,Nto,yg,Fse,qto,jto,$P,Dto,Gto,Oto,xg,Tse,Vto,Xto,kP,zto,Qto,Wto,$g,Mse,Hto,Uto,SP,Jto,Yto,Kto,kg,Ese,Zto,eao,RP,oao,rao,tao,Sg,Cse,aao,nao,PP,sao,lao,iao,Rg,wse,dao,cao,BP,fao,mao,gao,Pg,Ase,hao,pao,IP,_ao,uao,bao,Bg,Lse,vao,Fao,NP,Tao,Mao,Eao,Ig,yse,Cao,wao,qP,Aao,Lao,yao,Ng,xse,xao,$ao,jP,kao,Sao,Rao,qg,$se,Pao,Bao,DP,Iao,Nao,qao,jg,kse,jao,Dao,GP,Gao,Oao,Vao,Dg,Sse,Xao,zao,OP,Qao,Wao,Hao,Gg,Rse,Uao,Jao,VP,Yao,Kao,Zao,Og,Pse,eno,ono,XP,rno,tno,ano,Vg,Bse,nno,sno,zP,lno,ino,dno,Xg,Ise,cno,fno,QP,mno,gno,hno,zg,Nse,pno,_no,WP,uno,bno,vno,Qg,qse,Fno,Tno,HP,Mno,Eno,Cno,Wg,jse,wno,Ano,UP,Lno,yno,xno,Hg,Dse,$no,kno,JP,Sno,Rno,Pno,Ug,Gse,Bno,Ino,YP,Nno,qno,jno,Jg,Ose,Dno,Gno,KP,Ono,Vno,Xno,Yg,zno,Kg,mL,Qno,Vse,Wno,lXe,Ii,Zg,Xse,gL,Hno,zse,Uno,iXe,Ao,hL,Jno,pL,Yno,ZP,Kno,Zno,eso,_L,oso,Qse,rso,tso,aso,yr,uL,nso,Wse,sso,lso,Pa,iso,Hse,dso,cso,Use,fso,mso,Jse,gso,hso,pso,k,jn,Yse,_so,uso,eB,bso,vso,oB,Fso,Tso,Mso,Dn,Kse,Eso,Cso,rB,wso,Aso,tB,Lso,yso,xso,Gn,Zse,$so,kso,aB,Sso,Rso,nB,Pso,Bso,Iso,eh,ele,Nso,qso,sB,jso,Dso,Gso,On,ole,Oso,Vso,lB,Xso,zso,iB,Qso,Wso,Hso,oh,rle,Uso,Jso,dB,Yso,Kso,Zso,rh,tle,elo,olo,cB,rlo,tlo,alo,th,ale,nlo,slo,fB,llo,ilo,dlo,Vn,nle,clo,flo,mB,mlo,glo,gB,hlo,plo,_lo,Xn,sle,ulo,blo,hB,vlo,Flo,pB,Tlo,Mlo,Elo,zn,lle,Clo,wlo,_B,Alo,Llo,uB,ylo,xlo,$lo,ah,ile,klo,Slo,bB,Rlo,Plo,Blo,nh,dle,Ilo,Nlo,vB,qlo,jlo,Dlo,sh,cle,Glo,Olo,FB,Vlo,Xlo,zlo,Qn,fle,Qlo,Wlo,TB,Hlo,Ulo,MB,Jlo,Ylo,Klo,lh,mle,Zlo,eio,EB,oio,rio,tio,Wn,gle,aio,nio,CB,sio,lio,wB,iio,dio,cio,Hn,hle,fio,mio,AB,gio,hio,LB,pio,_io,uio,Un,ple,bio,vio,yB,Fio,Tio,xB,Mio,Eio,Cio,Jn,_le,wio,Aio,$B,Lio,yio,kB,xio,$io,kio,ih,ule,Sio,Rio,SB,Pio,Bio,Iio,Yn,ble,Nio,qio,RB,jio,Dio,PB,Gio,Oio,Vio,Kn,vle,Xio,zio,BB,Qio,Wio,IB,Hio,Uio,Jio,Zn,Fle,Yio,Kio,NB,Zio,edo,qB,odo,rdo,tdo,es,Tle,ado,ndo,jB,sdo,ldo,DB,ido,ddo,cdo,os,Mle,fdo,mdo,GB,gdo,hdo,OB,pdo,_do,udo,rs,Ele,bdo,vdo,VB,Fdo,Tdo,XB,Mdo,Edo,Cdo,dh,Cle,wdo,Ado,zB,Ldo,ydo,xdo,ts,wle,$do,kdo,QB,Sdo,Rdo,WB,Pdo,Bdo,Ido,ch,Ale,Ndo,qdo,HB,jdo,Ddo,Gdo,as,Lle,Odo,Vdo,UB,Xdo,zdo,JB,Qdo,Wdo,Hdo,ns,yle,Udo,Jdo,YB,Ydo,Kdo,KB,Zdo,eco,oco,ss,xle,rco,tco,ZB,aco,nco,eI,sco,lco,ico,fh,$le,dco,cco,oI,fco,mco,gco,ls,kle,hco,pco,rI,_co,uco,tI,bco,vco,Fco,is,Sle,Tco,Mco,aI,Eco,Cco,nI,wco,Aco,Lco,ds,Rle,yco,xco,sI,$co,kco,lI,Sco,Rco,Pco,mh,Ple,Bco,Ico,iI,Nco,qco,jco,cs,Ble,Dco,Gco,dI,Oco,Vco,cI,Xco,zco,Qco,gh,Ile,Wco,Hco,Nle,Uco,Jco,Yco,fs,qle,Kco,Zco,fI,efo,ofo,mI,rfo,tfo,afo,ms,jle,nfo,sfo,gI,lfo,ifo,hI,dfo,cfo,ffo,gs,Dle,mfo,gfo,pI,hfo,pfo,_I,_fo,ufo,bfo,hs,Gle,vfo,Ffo,uI,Tfo,Mfo,bI,Efo,Cfo,wfo,ps,Ole,Afo,Lfo,vI,yfo,xfo,FI,$fo,kfo,Sfo,_s,Vle,Rfo,Pfo,TI,Bfo,Ifo,MI,Nfo,qfo,jfo,us,Xle,Dfo,Gfo,EI,Ofo,Vfo,CI,Xfo,zfo,Qfo,hh,zle,Wfo,Hfo,wI,Ufo,Jfo,Yfo,bs,Qle,Kfo,Zfo,AI,emo,omo,LI,rmo,tmo,amo,ph,Wle,nmo,smo,yI,lmo,imo,dmo,_h,Hle,cmo,fmo,xI,mmo,gmo,hmo,vs,Ule,pmo,_mo,$I,umo,bmo,kI,vmo,Fmo,Tmo,Fs,Jle,Mmo,Emo,SI,Cmo,wmo,RI,Amo,Lmo,ymo,Ts,Yle,xmo,$mo,PI,kmo,Smo,BI,Rmo,Pmo,Bmo,uh,Kle,Imo,Nmo,II,qmo,jmo,Dmo,Ms,Zle,Gmo,Omo,NI,Vmo,Xmo,qI,zmo,Qmo,Wmo,Es,eie,Hmo,Umo,jI,Jmo,Ymo,DI,Kmo,Zmo,ego,Cs,oie,ogo,rgo,GI,tgo,ago,OI,ngo,sgo,lgo,ws,rie,igo,dgo,VI,cgo,fgo,XI,mgo,ggo,hgo,As,tie,pgo,_go,zI,ugo,bgo,QI,vgo,Fgo,Tgo,Ls,aie,Mgo,Ego,WI,Cgo,wgo,HI,Ago,Lgo,ygo,ys,nie,xgo,$go,UI,kgo,Sgo,JI,Rgo,Pgo,Bgo,bh,sie,Igo,Ngo,YI,qgo,jgo,Dgo,xs,lie,Ggo,Ogo,KI,Vgo,Xgo,ZI,zgo,Qgo,Wgo,vh,iie,Hgo,Ugo,eN,Jgo,Ygo,Kgo,Fh,die,Zgo,eho,oN,oho,rho,tho,Th,cie,aho,nho,rN,sho,lho,iho,Mh,fie,dho,cho,tN,fho,mho,gho,$s,mie,hho,pho,aN,_ho,uho,nN,bho,vho,Fho,Eh,gie,Tho,Mho,sN,Eho,Cho,who,ks,hie,Aho,Lho,lN,yho,xho,iN,$ho,kho,Sho,Ss,pie,Rho,Pho,dN,Bho,Iho,cN,Nho,qho,jho,Rs,_ie,Dho,Gho,fN,Oho,Vho,mN,Xho,zho,Qho,Ps,uie,Who,Hho,gN,Uho,Jho,hN,Yho,Kho,Zho,Bs,bie,epo,opo,pN,rpo,tpo,_N,apo,npo,spo,Is,vie,lpo,ipo,uN,dpo,cpo,bN,fpo,mpo,gpo,Ch,Fie,hpo,ppo,vN,_po,upo,bpo,wh,Tie,vpo,Fpo,FN,Tpo,Mpo,Epo,Ns,Mie,Cpo,wpo,TN,Apo,Lpo,MN,ypo,xpo,$po,qs,Eie,kpo,Spo,EN,Rpo,Ppo,CN,Bpo,Ipo,Npo,js,Cie,qpo,jpo,wN,Dpo,Gpo,AN,Opo,Vpo,Xpo,Ah,wie,zpo,Qpo,LN,Wpo,Hpo,Upo,Lh,Aie,Jpo,Ypo,yN,Kpo,Zpo,e_o,yh,Lie,o_o,r_o,xN,t_o,a_o,n_o,Ds,yie,s_o,l_o,$N,i_o,d_o,kN,c_o,f_o,m_o,Gs,xie,g_o,h_o,SN,p_o,__o,RN,u_o,b_o,v_o,xh,$ie,F_o,T_o,PN,M_o,E_o,C_o,$h,kie,w_o,A_o,BN,L_o,y_o,x_o,kh,Sie,$_o,k_o,IN,S_o,R_o,P_o,Os,Rie,B_o,I_o,NN,N_o,q_o,qN,j_o,D_o,G_o,Sh,Pie,O_o,V_o,jN,X_o,z_o,Q_o,Rh,Bie,W_o,H_o,DN,U_o,J_o,Y_o,Vs,Iie,K_o,Z_o,GN,euo,ouo,ON,ruo,tuo,auo,Xs,Nie,nuo,suo,VN,luo,iuo,XN,duo,cuo,fuo,zs,qie,muo,guo,zN,huo,puo,QN,_uo,uuo,buo,Qs,jie,vuo,Fuo,WN,Tuo,Muo,HN,Euo,Cuo,wuo,Ph,Auo,Bh,bL,Luo,Die,yuo,dXe,Ni,Ih,Gie,vL,xuo,Oie,$uo,cXe,Lo,FL,kuo,TL,Suo,UN,Ruo,Puo,Buo,ML,Iuo,Vie,Nuo,quo,juo,He,EL,Duo,Xie,Guo,Ouo,Ba,Vuo,zie,Xuo,zuo,Qie,Quo,Wuo,Wie,Huo,Uuo,Juo,Y,Nh,Hie,Yuo,Kuo,JN,Zuo,e2o,o2o,qh,Uie,r2o,t2o,YN,a2o,n2o,s2o,jh,Jie,l2o,i2o,KN,d2o,c2o,f2o,Dh,Yie,m2o,g2o,ZN,h2o,p2o,_2o,Gh,Kie,u2o,b2o,eq,v2o,F2o,T2o,Oh,Zie,M2o,E2o,oq,C2o,w2o,A2o,Vh,ede,L2o,y2o,rq,x2o,$2o,k2o,Xh,ode,S2o,R2o,tq,P2o,B2o,I2o,zh,rde,N2o,q2o,aq,j2o,D2o,G2o,Qh,tde,O2o,V2o,nq,X2o,z2o,Q2o,Wh,ade,W2o,H2o,sq,U2o,J2o,Y2o,Hh,nde,K2o,Z2o,lq,e1o,o1o,r1o,Uh,sde,t1o,a1o,iq,n1o,s1o,l1o,Jh,lde,i1o,d1o,dq,c1o,f1o,m1o,Yh,ide,g1o,h1o,cq,p1o,_1o,u1o,Kh,dde,b1o,v1o,fq,F1o,T1o,M1o,Zh,cde,E1o,C1o,mq,w1o,A1o,L1o,ep,fde,y1o,x1o,gq,$1o,k1o,S1o,op,mde,R1o,P1o,hq,B1o,I1o,N1o,rp,gde,q1o,j1o,pq,D1o,G1o,O1o,tp,hde,V1o,X1o,_q,z1o,Q1o,W1o,ap,pde,H1o,U1o,uq,J1o,Y1o,K1o,np,_de,Z1o,ebo,bq,obo,rbo,tbo,sp,ude,abo,nbo,vq,sbo,lbo,ibo,lp,bde,dbo,cbo,Fq,fbo,mbo,gbo,ip,vde,hbo,pbo,Tq,_bo,ubo,bbo,dp,Fde,vbo,Fbo,Mq,Tbo,Mbo,Ebo,cp,Tde,Cbo,wbo,Eq,Abo,Lbo,ybo,fp,Mde,xbo,$bo,Cq,kbo,Sbo,Rbo,mp,Ede,Pbo,Bbo,wq,Ibo,Nbo,qbo,gp,Cde,jbo,Dbo,Aq,Gbo,Obo,Vbo,hp,wde,Xbo,zbo,Lq,Qbo,Wbo,Hbo,pp,Ade,Ubo,Jbo,yq,Ybo,Kbo,Zbo,_p,Lde,evo,ovo,xq,rvo,tvo,avo,up,nvo,bp,svo,vp,CL,lvo,yde,ivo,fXe,qi,Fp,xde,wL,dvo,$de,cvo,mXe,yo,AL,fvo,LL,mvo,$q,gvo,hvo,pvo,yL,_vo,kde,uvo,bvo,vvo,Ue,xL,Fvo,Sde,Tvo,Mvo,ji,Evo,Rde,Cvo,wvo,Pde,Avo,Lvo,yvo,he,Tp,Bde,xvo,$vo,kq,kvo,Svo,Rvo,Mp,Ide,Pvo,Bvo,Nde,Ivo,Nvo,qvo,Ep,qde,jvo,Dvo,Sq,Gvo,Ovo,Vvo,Cp,jde,Xvo,zvo,Rq,Qvo,Wvo,Hvo,wp,Dde,Uvo,Jvo,Pq,Yvo,Kvo,Zvo,Ap,Gde,eFo,oFo,Bq,rFo,tFo,aFo,Lp,Ode,nFo,sFo,Iq,lFo,iFo,dFo,yp,Vde,cFo,fFo,Nq,mFo,gFo,hFo,xp,Xde,pFo,_Fo,qq,uFo,bFo,vFo,$p,zde,FFo,TFo,jq,MFo,EFo,CFo,kp,Qde,wFo,AFo,Dq,LFo,yFo,xFo,Sp,Wde,$Fo,kFo,Gq,SFo,RFo,PFo,Rp,Hde,BFo,IFo,Oq,NFo,qFo,jFo,Pp,Ude,DFo,GFo,Vq,OFo,VFo,XFo,Bp,Jde,zFo,QFo,Xq,WFo,HFo,UFo,Ip,Yde,JFo,YFo,zq,KFo,ZFo,e6o,Np,Kde,o6o,r6o,Qq,t6o,a6o,n6o,qp,Zde,s6o,l6o,Wq,i6o,d6o,c6o,jp,f6o,Dp,m6o,Gp,$L,g6o,ece,h6o,gXe,Di,Op,oce,kL,p6o,rce,_6o,hXe,xo,SL,u6o,Gi,b6o,Hq,v6o,F6o,Uq,T6o,M6o,E6o,RL,C6o,tce,w6o,A6o,L6o,lt,PL,y6o,ace,x6o,$6o,Oi,k6o,nce,S6o,R6o,Jq,P6o,B6o,I6o,Vp,N6o,Je,BL,q6o,sce,j6o,D6o,Ia,G6o,lce,O6o,V6o,ice,X6o,z6o,dce,Q6o,W6o,H6o,y,Xp,cce,U6o,J6o,Yq,Y6o,K6o,Z6o,zp,fce,eTo,oTo,Kq,rTo,tTo,aTo,Qp,mce,nTo,sTo,Zq,lTo,iTo,dTo,Wp,gce,cTo,fTo,ej,mTo,gTo,hTo,Hp,hce,pTo,_To,oj,uTo,bTo,vTo,Up,pce,FTo,TTo,rj,MTo,ETo,CTo,Jp,_ce,wTo,ATo,tj,LTo,yTo,xTo,Yp,uce,$To,kTo,aj,STo,RTo,PTo,Kp,bce,BTo,ITo,nj,NTo,qTo,jTo,Zp,vce,DTo,GTo,sj,OTo,VTo,XTo,e_,Fce,zTo,QTo,lj,WTo,HTo,UTo,o_,Tce,JTo,YTo,ij,KTo,ZTo,e7o,r_,Mce,o7o,r7o,dj,t7o,a7o,n7o,t_,Ece,s7o,l7o,cj,i7o,d7o,c7o,a_,Cce,f7o,m7o,fj,g7o,h7o,p7o,n_,wce,_7o,u7o,mj,b7o,v7o,F7o,s_,Ace,T7o,M7o,gj,E7o,C7o,w7o,l_,Lce,A7o,L7o,hj,y7o,x7o,$7o,i_,yce,k7o,S7o,pj,R7o,P7o,B7o,d_,xce,I7o,N7o,_j,q7o,j7o,D7o,c_,$ce,G7o,O7o,uj,V7o,X7o,z7o,f_,kce,Q7o,W7o,bj,H7o,U7o,J7o,m_,Sce,Y7o,K7o,vj,Z7o,e8o,o8o,g_,Rce,r8o,t8o,Fj,a8o,n8o,s8o,h_,Pce,l8o,i8o,Tj,d8o,c8o,f8o,p_,Bce,m8o,g8o,Mj,h8o,p8o,_8o,__,Ice,u8o,b8o,Ej,v8o,F8o,T8o,u_,Nce,M8o,E8o,Cj,C8o,w8o,A8o,b_,qce,L8o,y8o,wj,x8o,$8o,k8o,v_,jce,S8o,R8o,Aj,P8o,B8o,I8o,F_,Dce,N8o,q8o,Lj,j8o,D8o,G8o,T_,Gce,O8o,V8o,yj,X8o,z8o,Q8o,M_,Oce,W8o,H8o,xj,U8o,J8o,Y8o,E_,Vce,K8o,Z8o,$j,eMo,oMo,rMo,Ws,Xce,tMo,aMo,kj,nMo,sMo,Sj,lMo,iMo,dMo,C_,zce,cMo,fMo,Rj,mMo,gMo,hMo,w_,Qce,pMo,_Mo,Pj,uMo,bMo,vMo,A_,Wce,FMo,TMo,Bj,MMo,EMo,CMo,L_,Hce,wMo,AMo,Ij,LMo,yMo,xMo,y_,Uce,$Mo,kMo,Nj,SMo,RMo,PMo,x_,Jce,BMo,IMo,qj,NMo,qMo,jMo,$_,Yce,DMo,GMo,jj,OMo,VMo,XMo,k_,Kce,zMo,QMo,Dj,WMo,HMo,UMo,S_,Zce,JMo,YMo,Gj,KMo,ZMo,e4o,R_,efe,o4o,r4o,ofe,t4o,a4o,n4o,P_,rfe,s4o,l4o,Oj,i4o,d4o,c4o,B_,tfe,f4o,m4o,Vj,g4o,h4o,p4o,I_,afe,_4o,u4o,Xj,b4o,v4o,F4o,N_,nfe,T4o,M4o,zj,E4o,C4o,w4o,q_,sfe,A4o,L4o,Qj,y4o,x4o,$4o,j_,lfe,k4o,S4o,Wj,R4o,P4o,B4o,D_,ife,I4o,N4o,Hj,q4o,j4o,D4o,G_,dfe,G4o,O4o,Uj,V4o,X4o,z4o,O_,cfe,Q4o,W4o,Jj,H4o,U4o,J4o,V_,ffe,Y4o,K4o,Yj,Z4o,eEo,oEo,X_,mfe,rEo,tEo,Kj,aEo,nEo,sEo,z_,gfe,lEo,iEo,Zj,dEo,cEo,fEo,Q_,hfe,mEo,gEo,eD,hEo,pEo,_Eo,W_,pfe,uEo,bEo,oD,vEo,FEo,TEo,H_,_fe,MEo,EEo,rD,CEo,wEo,AEo,U_,ufe,LEo,yEo,tD,xEo,$Eo,kEo,J_,bfe,SEo,REo,aD,PEo,BEo,IEo,Y_,vfe,NEo,qEo,nD,jEo,DEo,GEo,K_,Ffe,OEo,VEo,sD,XEo,zEo,QEo,Z_,Tfe,WEo,HEo,lD,UEo,JEo,YEo,eu,Mfe,KEo,ZEo,iD,eCo,oCo,rCo,ou,Efe,tCo,aCo,dD,nCo,sCo,lCo,ru,Cfe,iCo,dCo,cD,cCo,fCo,mCo,tu,wfe,gCo,hCo,fD,pCo,_Co,uCo,au,Afe,bCo,vCo,mD,FCo,TCo,MCo,nu,Lfe,ECo,CCo,gD,wCo,ACo,LCo,su,yfe,yCo,xCo,hD,$Co,kCo,SCo,lu,xfe,RCo,PCo,pD,BCo,ICo,NCo,iu,$fe,qCo,jCo,_D,DCo,GCo,OCo,du,kfe,VCo,XCo,uD,zCo,QCo,WCo,cu,Sfe,HCo,UCo,bD,JCo,YCo,KCo,fu,Rfe,ZCo,e3o,vD,o3o,r3o,t3o,mu,Pfe,a3o,n3o,FD,s3o,l3o,i3o,gu,Bfe,d3o,c3o,TD,f3o,m3o,g3o,hu,Ife,h3o,p3o,MD,_3o,u3o,b3o,pu,Nfe,v3o,F3o,ED,T3o,M3o,E3o,_u,qfe,C3o,w3o,CD,A3o,L3o,y3o,uu,jfe,x3o,$3o,wD,k3o,S3o,R3o,bu,Dfe,P3o,B3o,AD,I3o,N3o,q3o,vu,Gfe,j3o,D3o,LD,G3o,O3o,V3o,Fu,Ofe,X3o,z3o,yD,Q3o,W3o,H3o,Tu,Vfe,U3o,J3o,xD,Y3o,K3o,Z3o,Mu,Xfe,e5o,o5o,$D,r5o,t5o,a5o,Eu,zfe,n5o,s5o,kD,l5o,i5o,d5o,Cu,Qfe,c5o,f5o,SD,m5o,g5o,h5o,wu,Wfe,p5o,_5o,RD,u5o,b5o,v5o,Au,Hfe,F5o,T5o,PD,M5o,E5o,C5o,Lu,Ufe,w5o,A5o,BD,L5o,y5o,x5o,yu,Jfe,$5o,k5o,ID,S5o,R5o,P5o,xu,Yfe,B5o,I5o,ND,N5o,q5o,j5o,$u,Kfe,D5o,G5o,qD,O5o,V5o,X5o,ku,Zfe,z5o,Q5o,jD,W5o,H5o,U5o,Su,eme,J5o,Y5o,DD,K5o,Z5o,e0o,Ru,ome,o0o,r0o,GD,t0o,a0o,n0o,Pu,rme,s0o,l0o,OD,i0o,d0o,c0o,Bu,tme,f0o,m0o,VD,g0o,h0o,p0o,Iu,ame,_0o,u0o,XD,b0o,v0o,F0o,Nu,nme,T0o,M0o,zD,E0o,C0o,w0o,qu,sme,A0o,L0o,QD,y0o,x0o,$0o,ju,lme,k0o,S0o,WD,R0o,P0o,B0o,Du,ime,I0o,N0o,HD,q0o,j0o,D0o,Gu,dme,G0o,O0o,UD,V0o,X0o,z0o,Ou,cme,Q0o,W0o,JD,H0o,U0o,J0o,Vu,fme,Y0o,K0o,YD,Z0o,ewo,owo,Xu,mme,rwo,two,KD,awo,nwo,swo,zu,gme,lwo,iwo,ZD,dwo,cwo,fwo,Qu,hme,mwo,gwo,eG,hwo,pwo,_wo,Wu,uwo,pme,bwo,vwo,_me,Fwo,Two,Hu,pXe,Vi,Uu,ume,IL,Mwo,bme,Ewo,_Xe,$o,NL,Cwo,Xi,wwo,oG,Awo,Lwo,rG,ywo,xwo,$wo,qL,kwo,vme,Swo,Rwo,Pwo,it,jL,Bwo,Fme,Iwo,Nwo,zi,qwo,Tme,jwo,Dwo,tG,Gwo,Owo,Vwo,Ju,Xwo,Ye,DL,zwo,Mme,Qwo,Wwo,Na,Hwo,Eme,Uwo,Jwo,Cme,Ywo,Kwo,wme,Zwo,eAo,oAo,G,Yu,Ame,rAo,tAo,aG,aAo,nAo,sAo,Ku,Lme,lAo,iAo,nG,dAo,cAo,fAo,Zu,yme,mAo,gAo,sG,hAo,pAo,_Ao,e2,xme,uAo,bAo,lG,vAo,FAo,TAo,o2,$me,MAo,EAo,iG,CAo,wAo,AAo,r2,kme,LAo,yAo,dG,xAo,$Ao,kAo,t2,Sme,SAo,RAo,cG,PAo,BAo,IAo,a2,Rme,NAo,qAo,fG,jAo,DAo,GAo,n2,Pme,OAo,VAo,mG,XAo,zAo,QAo,s2,Bme,WAo,HAo,gG,UAo,JAo,YAo,l2,Ime,KAo,ZAo,hG,eLo,oLo,rLo,i2,Nme,tLo,aLo,pG,nLo,sLo,lLo,d2,qme,iLo,dLo,_G,cLo,fLo,mLo,c2,jme,gLo,hLo,uG,pLo,_Lo,uLo,f2,Dme,bLo,vLo,bG,FLo,TLo,MLo,m2,Gme,ELo,CLo,vG,wLo,ALo,LLo,g2,Ome,yLo,xLo,FG,$Lo,kLo,SLo,h2,Vme,RLo,PLo,TG,BLo,ILo,NLo,p2,Xme,qLo,jLo,MG,DLo,GLo,OLo,_2,zme,VLo,XLo,EG,zLo,QLo,WLo,u2,Qme,HLo,ULo,CG,JLo,YLo,KLo,b2,Wme,ZLo,eyo,wG,oyo,ryo,tyo,v2,Hme,ayo,nyo,AG,syo,lyo,iyo,F2,Ume,dyo,cyo,LG,fyo,myo,gyo,T2,Jme,hyo,pyo,yG,_yo,uyo,byo,M2,Yme,vyo,Fyo,xG,Tyo,Myo,Eyo,E2,Kme,Cyo,wyo,$G,Ayo,Lyo,yyo,C2,Zme,xyo,$yo,kG,kyo,Syo,Ryo,w2,ege,Pyo,Byo,SG,Iyo,Nyo,qyo,A2,oge,jyo,Dyo,RG,Gyo,Oyo,Vyo,L2,rge,Xyo,zyo,PG,Qyo,Wyo,Hyo,y2,tge,Uyo,Jyo,BG,Yyo,Kyo,Zyo,x2,age,e9o,o9o,IG,r9o,t9o,a9o,$2,nge,n9o,s9o,NG,l9o,i9o,d9o,k2,sge,c9o,f9o,qG,m9o,g9o,h9o,S2,lge,p9o,_9o,jG,u9o,b9o,v9o,R2,ige,F9o,T9o,DG,M9o,E9o,C9o,P2,dge,w9o,A9o,GG,L9o,y9o,x9o,B2,cge,$9o,k9o,OG,S9o,R9o,P9o,I2,fge,B9o,I9o,VG,N9o,q9o,j9o,N2,mge,D9o,G9o,XG,O9o,V9o,X9o,q2,gge,z9o,Q9o,zG,W9o,H9o,U9o,j2,hge,J9o,Y9o,QG,K9o,Z9o,exo,D2,pge,oxo,rxo,WG,txo,axo,nxo,G2,_ge,sxo,lxo,HG,ixo,dxo,cxo,O2,fxo,uge,mxo,gxo,bge,hxo,pxo,V2,uXe,Qi,X2,vge,GL,_xo,Fge,uxo,bXe,ko,OL,bxo,Wi,vxo,UG,Fxo,Txo,JG,Mxo,Exo,Cxo,VL,wxo,Tge,Axo,Lxo,yxo,dt,XL,xxo,Mge,$xo,kxo,Hi,Sxo,Ege,Rxo,Pxo,YG,Bxo,Ixo,Nxo,z2,qxo,Ke,zL,jxo,Cge,Dxo,Gxo,qa,Oxo,wge,Vxo,Xxo,Age,zxo,Qxo,Lge,Wxo,Hxo,Uxo,z,Q2,yge,Jxo,Yxo,KG,Kxo,Zxo,e$o,W2,xge,o$o,r$o,ZG,t$o,a$o,n$o,H2,$ge,s$o,l$o,eO,i$o,d$o,c$o,U2,kge,f$o,m$o,oO,g$o,h$o,p$o,J2,Sge,_$o,u$o,rO,b$o,v$o,F$o,Y2,Rge,T$o,M$o,tO,E$o,C$o,w$o,K2,Pge,A$o,L$o,aO,y$o,x$o,$$o,Z2,Bge,k$o,S$o,nO,R$o,P$o,B$o,e1,Ige,I$o,N$o,sO,q$o,j$o,D$o,o1,Nge,G$o,O$o,lO,V$o,X$o,z$o,r1,qge,Q$o,W$o,iO,H$o,U$o,J$o,t1,jge,Y$o,K$o,dO,Z$o,eko,oko,a1,Dge,rko,tko,cO,ako,nko,sko,n1,Gge,lko,iko,fO,dko,cko,fko,s1,Oge,mko,gko,mO,hko,pko,_ko,l1,Vge,uko,bko,gO,vko,Fko,Tko,i1,Xge,Mko,Eko,hO,Cko,wko,Ako,d1,zge,Lko,yko,pO,xko,$ko,kko,c1,Qge,Sko,Rko,_O,Pko,Bko,Iko,f1,Wge,Nko,qko,uO,jko,Dko,Gko,m1,Hge,Oko,Vko,bO,Xko,zko,Qko,g1,Uge,Wko,Hko,vO,Uko,Jko,Yko,h1,Jge,Kko,Zko,FO,eSo,oSo,rSo,p1,Yge,tSo,aSo,TO,nSo,sSo,lSo,_1,Kge,iSo,dSo,MO,cSo,fSo,mSo,u1,Zge,gSo,hSo,EO,pSo,_So,uSo,b1,ehe,bSo,vSo,CO,FSo,TSo,MSo,v1,ohe,ESo,CSo,wO,wSo,ASo,LSo,F1,rhe,ySo,xSo,AO,$So,kSo,SSo,T1,the,RSo,PSo,LO,BSo,ISo,NSo,M1,ahe,qSo,jSo,yO,DSo,GSo,OSo,E1,nhe,VSo,XSo,xO,zSo,QSo,WSo,C1,she,HSo,USo,$O,JSo,YSo,KSo,w1,lhe,ZSo,eRo,kO,oRo,rRo,tRo,A1,ihe,aRo,nRo,SO,sRo,lRo,iRo,L1,dhe,dRo,cRo,RO,fRo,mRo,gRo,y1,che,hRo,pRo,PO,_Ro,uRo,bRo,x1,fhe,vRo,FRo,BO,TRo,MRo,ERo,$1,mhe,CRo,wRo,IO,ARo,LRo,yRo,k1,ghe,xRo,$Ro,NO,kRo,SRo,RRo,S1,PRo,hhe,BRo,IRo,phe,NRo,qRo,R1,vXe,Ui,P1,_he,QL,jRo,uhe,DRo,FXe,So,WL,GRo,Ji,ORo,qO,VRo,XRo,jO,zRo,QRo,WRo,HL,HRo,bhe,URo,JRo,YRo,ct,UL,KRo,vhe,ZRo,ePo,Yi,oPo,Fhe,rPo,tPo,DO,aPo,nPo,sPo,B1,lPo,Ze,JL,iPo,The,dPo,cPo,ja,fPo,Mhe,mPo,gPo,Ehe,hPo,pPo,Che,_Po,uPo,bPo,W,I1,whe,vPo,FPo,GO,TPo,MPo,EPo,N1,Ahe,CPo,wPo,OO,APo,LPo,yPo,q1,Lhe,xPo,$Po,VO,kPo,SPo,RPo,j1,yhe,PPo,BPo,XO,IPo,NPo,qPo,D1,xhe,jPo,DPo,zO,GPo,OPo,VPo,G1,$he,XPo,zPo,QO,QPo,WPo,HPo,O1,khe,UPo,JPo,WO,YPo,KPo,ZPo,V1,She,eBo,oBo,HO,rBo,tBo,aBo,X1,Rhe,nBo,sBo,UO,lBo,iBo,dBo,z1,Phe,cBo,fBo,JO,mBo,gBo,hBo,Q1,Bhe,pBo,_Bo,YO,uBo,bBo,vBo,W1,Ihe,FBo,TBo,KO,MBo,EBo,CBo,H1,Nhe,wBo,ABo,ZO,LBo,yBo,xBo,U1,qhe,$Bo,kBo,eV,SBo,RBo,PBo,J1,jhe,BBo,IBo,oV,NBo,qBo,jBo,Y1,Dhe,DBo,GBo,rV,OBo,VBo,XBo,K1,Ghe,zBo,QBo,tV,WBo,HBo,UBo,Z1,Ohe,JBo,YBo,aV,KBo,ZBo,eIo,eb,Vhe,oIo,rIo,nV,tIo,aIo,nIo,ob,Xhe,sIo,lIo,sV,iIo,dIo,cIo,rb,zhe,fIo,mIo,lV,gIo,hIo,pIo,tb,Qhe,_Io,uIo,iV,bIo,vIo,FIo,ab,Whe,TIo,MIo,dV,EIo,CIo,wIo,nb,Hhe,AIo,LIo,cV,yIo,xIo,$Io,sb,Uhe,kIo,SIo,fV,RIo,PIo,BIo,lb,Jhe,IIo,NIo,mV,qIo,jIo,DIo,ib,Yhe,GIo,OIo,gV,VIo,XIo,zIo,db,Khe,QIo,WIo,hV,HIo,UIo,JIo,cb,Zhe,YIo,KIo,pV,ZIo,eNo,oNo,fb,epe,rNo,tNo,_V,aNo,nNo,sNo,mb,ope,lNo,iNo,uV,dNo,cNo,fNo,gb,rpe,mNo,gNo,bV,hNo,pNo,_No,hb,tpe,uNo,bNo,vV,vNo,FNo,TNo,pb,ape,MNo,ENo,npe,CNo,wNo,ANo,_b,spe,LNo,yNo,FV,xNo,$No,kNo,ub,lpe,SNo,RNo,TV,PNo,BNo,INo,bb,ipe,NNo,qNo,MV,jNo,DNo,GNo,vb,dpe,ONo,VNo,EV,XNo,zNo,QNo,Fb,WNo,cpe,HNo,UNo,fpe,JNo,YNo,Tb,TXe,Ki,Mb,mpe,YL,KNo,gpe,ZNo,MXe,Ro,KL,eqo,Zi,oqo,CV,rqo,tqo,wV,aqo,nqo,sqo,ZL,lqo,hpe,iqo,dqo,cqo,ft,ey,fqo,ppe,mqo,gqo,ed,hqo,_pe,pqo,_qo,AV,uqo,bqo,vqo,Eb,Fqo,eo,oy,Tqo,upe,Mqo,Eqo,Da,Cqo,bpe,wqo,Aqo,vpe,Lqo,yqo,Fpe,xqo,$qo,kqo,pe,Cb,Tpe,Sqo,Rqo,LV,Pqo,Bqo,Iqo,wb,Mpe,Nqo,qqo,yV,jqo,Dqo,Gqo,Ab,Epe,Oqo,Vqo,xV,Xqo,zqo,Qqo,Lb,Cpe,Wqo,Hqo,$V,Uqo,Jqo,Yqo,yb,wpe,Kqo,Zqo,kV,ejo,ojo,rjo,xb,Ape,tjo,ajo,SV,njo,sjo,ljo,$b,Lpe,ijo,djo,RV,cjo,fjo,mjo,kb,ype,gjo,hjo,PV,pjo,_jo,ujo,Sb,xpe,bjo,vjo,BV,Fjo,Tjo,Mjo,Rb,$pe,Ejo,Cjo,IV,wjo,Ajo,Ljo,Pb,kpe,yjo,xjo,NV,$jo,kjo,Sjo,Bb,Spe,Rjo,Pjo,qV,Bjo,Ijo,Njo,Ib,Rpe,qjo,jjo,jV,Djo,Gjo,Ojo,Nb,Ppe,Vjo,Xjo,DV,zjo,Qjo,Wjo,qb,Bpe,Hjo,Ujo,GV,Jjo,Yjo,Kjo,jb,Ipe,Zjo,eDo,OV,oDo,rDo,tDo,Db,Npe,aDo,nDo,VV,sDo,lDo,iDo,Gb,qpe,dDo,cDo,XV,fDo,mDo,gDo,Ob,hDo,jpe,pDo,_Do,Dpe,uDo,bDo,Vb,EXe,od,Xb,Gpe,ry,vDo,Ope,FDo,CXe,Po,ty,TDo,rd,MDo,zV,EDo,CDo,QV,wDo,ADo,LDo,ay,yDo,Vpe,xDo,$Do,kDo,mt,ny,SDo,Xpe,RDo,PDo,td,BDo,zpe,IDo,NDo,WV,qDo,jDo,DDo,zb,GDo,oo,sy,ODo,Qpe,VDo,XDo,Ga,zDo,Wpe,QDo,WDo,Hpe,HDo,UDo,Upe,JDo,YDo,KDo,N,Qb,Jpe,ZDo,eGo,HV,oGo,rGo,tGo,Wb,Ype,aGo,nGo,UV,sGo,lGo,iGo,Hb,Kpe,dGo,cGo,JV,fGo,mGo,gGo,Ub,Zpe,hGo,pGo,YV,_Go,uGo,bGo,Jb,e_e,vGo,FGo,KV,TGo,MGo,EGo,Yb,o_e,CGo,wGo,ZV,AGo,LGo,yGo,Kb,r_e,xGo,$Go,eX,kGo,SGo,RGo,Zb,t_e,PGo,BGo,oX,IGo,NGo,qGo,ev,a_e,jGo,DGo,rX,GGo,OGo,VGo,ov,n_e,XGo,zGo,tX,QGo,WGo,HGo,rv,s_e,UGo,JGo,aX,YGo,KGo,ZGo,tv,l_e,eOo,oOo,nX,rOo,tOo,aOo,av,i_e,nOo,sOo,sX,lOo,iOo,dOo,nv,d_e,cOo,fOo,lX,mOo,gOo,hOo,sv,c_e,pOo,_Oo,iX,uOo,bOo,vOo,lv,f_e,FOo,TOo,dX,MOo,EOo,COo,iv,m_e,wOo,AOo,cX,LOo,yOo,xOo,dv,g_e,$Oo,kOo,fX,SOo,ROo,POo,cv,h_e,BOo,IOo,mX,NOo,qOo,jOo,fv,p_e,DOo,GOo,gX,OOo,VOo,XOo,mv,__e,zOo,QOo,hX,WOo,HOo,UOo,gv,u_e,JOo,YOo,pX,KOo,ZOo,eVo,hv,b_e,oVo,rVo,_X,tVo,aVo,nVo,pv,v_e,sVo,lVo,uX,iVo,dVo,cVo,_v,F_e,fVo,mVo,bX,gVo,hVo,pVo,uv,T_e,_Vo,uVo,vX,bVo,vVo,FVo,bv,M_e,TVo,MVo,FX,EVo,CVo,wVo,vv,E_e,AVo,LVo,TX,yVo,xVo,$Vo,Fv,C_e,kVo,SVo,MX,RVo,PVo,BVo,Tv,w_e,IVo,NVo,EX,qVo,jVo,DVo,Mv,A_e,GVo,OVo,CX,VVo,XVo,zVo,Ev,L_e,QVo,WVo,wX,HVo,UVo,JVo,Cv,y_e,YVo,KVo,AX,ZVo,eXo,oXo,wv,x_e,rXo,tXo,LX,aXo,nXo,sXo,Av,$_e,lXo,iXo,yX,dXo,cXo,fXo,Lv,k_e,mXo,gXo,xX,hXo,pXo,_Xo,yv,S_e,uXo,bXo,$X,vXo,FXo,TXo,xv,R_e,MXo,EXo,kX,CXo,wXo,AXo,$v,P_e,LXo,yXo,SX,xXo,$Xo,kXo,kv,B_e,SXo,RXo,RX,PXo,BXo,IXo,Sv,I_e,NXo,qXo,PX,jXo,DXo,GXo,Rv,N_e,OXo,VXo,BX,XXo,zXo,QXo,Pv,q_e,WXo,HXo,IX,UXo,JXo,YXo,Bv,j_e,KXo,ZXo,NX,ezo,ozo,rzo,Iv,D_e,tzo,azo,qX,nzo,szo,lzo,Nv,G_e,izo,dzo,jX,czo,fzo,mzo,qv,O_e,gzo,hzo,DX,pzo,_zo,uzo,jv,V_e,bzo,vzo,GX,Fzo,Tzo,Mzo,Dv,X_e,Ezo,Czo,OX,wzo,Azo,Lzo,Gv,z_e,yzo,xzo,VX,$zo,kzo,Szo,Ov,Rzo,Q_e,Pzo,Bzo,W_e,Izo,Nzo,Vv,wXe,ad,Xv,H_e,ly,qzo,U_e,jzo,AXe,Bo,iy,Dzo,nd,Gzo,XX,Ozo,Vzo,zX,Xzo,zzo,Qzo,dy,Wzo,J_e,Hzo,Uzo,Jzo,gt,cy,Yzo,Y_e,Kzo,Zzo,sd,eQo,K_e,oQo,rQo,QX,tQo,aQo,nQo,zv,sQo,ro,fy,lQo,Z_e,iQo,dQo,Oa,cQo,eue,fQo,mQo,oue,gQo,hQo,rue,pQo,_Qo,uQo,Z,Qv,tue,bQo,vQo,WX,FQo,TQo,MQo,Wv,aue,EQo,CQo,HX,wQo,AQo,LQo,Hv,nue,yQo,xQo,UX,$Qo,kQo,SQo,Uv,sue,RQo,PQo,JX,BQo,IQo,NQo,Jv,lue,qQo,jQo,YX,DQo,GQo,OQo,Yv,iue,VQo,XQo,KX,zQo,QQo,WQo,Kv,due,HQo,UQo,ZX,JQo,YQo,KQo,Zv,cue,ZQo,eWo,ez,oWo,rWo,tWo,eF,fue,aWo,nWo,oz,sWo,lWo,iWo,oF,mue,dWo,cWo,rz,fWo,mWo,gWo,rF,gue,hWo,pWo,tz,_Wo,uWo,bWo,tF,hue,vWo,FWo,az,TWo,MWo,EWo,aF,pue,CWo,wWo,nz,AWo,LWo,yWo,nF,_ue,xWo,$Wo,sz,kWo,SWo,RWo,sF,uue,PWo,BWo,lz,IWo,NWo,qWo,lF,bue,jWo,DWo,iz,GWo,OWo,VWo,iF,vue,XWo,zWo,dz,QWo,WWo,HWo,dF,Fue,UWo,JWo,cz,YWo,KWo,ZWo,cF,Tue,eHo,oHo,fz,rHo,tHo,aHo,fF,Mue,nHo,sHo,mz,lHo,iHo,dHo,mF,Eue,cHo,fHo,gz,mHo,gHo,hHo,gF,Cue,pHo,_Ho,hz,uHo,bHo,vHo,hF,wue,FHo,THo,pz,MHo,EHo,CHo,pF,Aue,wHo,AHo,_z,LHo,yHo,xHo,_F,Lue,$Ho,kHo,uz,SHo,RHo,PHo,uF,yue,BHo,IHo,bz,NHo,qHo,jHo,bF,xue,DHo,GHo,vz,OHo,VHo,XHo,vF,$ue,zHo,QHo,Fz,WHo,HHo,UHo,FF,kue,JHo,YHo,Tz,KHo,ZHo,eUo,TF,Sue,oUo,rUo,Mz,tUo,aUo,nUo,MF,sUo,Rue,lUo,iUo,Pue,dUo,cUo,EF,LXe,ld,CF,Bue,my,fUo,Iue,mUo,yXe,Io,gy,gUo,id,hUo,Ez,pUo,_Uo,Cz,uUo,bUo,vUo,hy,FUo,Nue,TUo,MUo,EUo,ht,py,CUo,que,wUo,AUo,dd,LUo,jue,yUo,xUo,wz,$Uo,kUo,SUo,wF,RUo,to,_y,PUo,Due,BUo,IUo,Va,NUo,Gue,qUo,jUo,Oue,DUo,GUo,Vue,OUo,VUo,XUo,No,AF,Xue,zUo,QUo,Az,WUo,HUo,UUo,LF,zue,JUo,YUo,Lz,KUo,ZUo,eJo,yF,Que,oJo,rJo,yz,tJo,aJo,nJo,xF,Wue,sJo,lJo,xz,iJo,dJo,cJo,$F,Hue,fJo,mJo,$z,gJo,hJo,pJo,kF,Uue,_Jo,uJo,kz,bJo,vJo,FJo,SF,TJo,Jue,MJo,EJo,Yue,CJo,wJo,RF,xXe,cd,PF,Kue,uy,AJo,Zue,LJo,$Xe,qo,by,yJo,fd,xJo,Sz,$Jo,kJo,Rz,SJo,RJo,PJo,vy,BJo,e2e,IJo,NJo,qJo,pt,Fy,jJo,o2e,DJo,GJo,md,OJo,r2e,VJo,XJo,Pz,zJo,QJo,WJo,BF,HJo,ao,Ty,UJo,t2e,JJo,YJo,Xa,KJo,a2e,ZJo,eYo,n2e,oYo,rYo,s2e,tYo,aYo,nYo,U,IF,l2e,sYo,lYo,Bz,iYo,dYo,cYo,NF,i2e,fYo,mYo,Iz,gYo,hYo,pYo,qF,d2e,_Yo,uYo,Nz,bYo,vYo,FYo,jF,c2e,TYo,MYo,qz,EYo,CYo,wYo,DF,f2e,AYo,LYo,jz,yYo,xYo,$Yo,GF,m2e,kYo,SYo,Dz,RYo,PYo,BYo,OF,g2e,IYo,NYo,Gz,qYo,jYo,DYo,VF,h2e,GYo,OYo,Oz,VYo,XYo,zYo,XF,p2e,QYo,WYo,Vz,HYo,UYo,JYo,zF,_2e,YYo,KYo,Xz,ZYo,eKo,oKo,QF,u2e,rKo,tKo,zz,aKo,nKo,sKo,WF,b2e,lKo,iKo,Qz,dKo,cKo,fKo,HF,v2e,mKo,gKo,Wz,hKo,pKo,_Ko,UF,F2e,uKo,bKo,Hz,vKo,FKo,TKo,JF,T2e,MKo,EKo,Uz,CKo,wKo,AKo,YF,M2e,LKo,yKo,Jz,xKo,$Ko,kKo,KF,E2e,SKo,RKo,Yz,PKo,BKo,IKo,ZF,C2e,NKo,qKo,Kz,jKo,DKo,GKo,e6,w2e,OKo,VKo,Zz,XKo,zKo,QKo,o6,A2e,WKo,HKo,eQ,UKo,JKo,YKo,r6,L2e,KKo,ZKo,oQ,eZo,oZo,rZo,t6,y2e,tZo,aZo,rQ,nZo,sZo,lZo,a6,x2e,iZo,dZo,tQ,cZo,fZo,mZo,n6,$2e,gZo,hZo,aQ,pZo,_Zo,uZo,s6,k2e,bZo,vZo,nQ,FZo,TZo,MZo,l6,S2e,EZo,CZo,sQ,wZo,AZo,LZo,i6,R2e,yZo,xZo,lQ,$Zo,kZo,SZo,d6,P2e,RZo,PZo,iQ,BZo,IZo,NZo,c6,B2e,qZo,jZo,dQ,DZo,GZo,OZo,f6,I2e,VZo,XZo,cQ,zZo,QZo,WZo,m6,N2e,HZo,UZo,fQ,JZo,YZo,KZo,g6,q2e,ZZo,eer,mQ,oer,rer,ter,h6,j2e,aer,ner,gQ,ser,ler,ier,p6,D2e,der,cer,hQ,fer,mer,ger,_6,G2e,her,per,pQ,_er,uer,ber,u6,O2e,ver,Fer,_Q,Ter,Mer,Eer,b6,Cer,V2e,wer,Aer,X2e,Ler,yer,v6,kXe,gd,F6,z2e,My,xer,Q2e,$er,SXe,jo,Ey,ker,hd,Ser,uQ,Rer,Per,bQ,Ber,Ier,Ner,Cy,qer,W2e,jer,Der,Ger,_t,wy,Oer,H2e,Ver,Xer,pd,zer,U2e,Qer,Wer,vQ,Her,Uer,Jer,T6,Yer,no,Ay,Ker,J2e,Zer,eor,za,oor,Y2e,ror,tor,K2e,aor,nor,Z2e,sor,lor,ior,V,M6,e1e,dor,cor,FQ,mor,gor,hor,E6,o1e,por,_or,TQ,uor,bor,vor,C6,r1e,For,Tor,MQ,Mor,Eor,Cor,w6,t1e,wor,Aor,EQ,Lor,yor,xor,A6,a1e,$or,kor,CQ,Sor,Ror,Por,L6,n1e,Bor,Ior,wQ,Nor,qor,jor,y6,s1e,Dor,Gor,AQ,Oor,Vor,Xor,x6,l1e,zor,Qor,LQ,Wor,Hor,Uor,$6,i1e,Jor,Yor,yQ,Kor,Zor,err,k6,d1e,orr,rrr,xQ,trr,arr,nrr,S6,c1e,srr,lrr,$Q,irr,drr,crr,R6,f1e,frr,mrr,kQ,grr,hrr,prr,P6,m1e,_rr,urr,SQ,brr,vrr,Frr,B6,g1e,Trr,Mrr,RQ,Err,Crr,wrr,I6,h1e,Arr,Lrr,PQ,yrr,xrr,$rr,N6,p1e,krr,Srr,BQ,Rrr,Prr,Brr,q6,_1e,Irr,Nrr,IQ,qrr,jrr,Drr,j6,u1e,Grr,Orr,NQ,Vrr,Xrr,zrr,D6,b1e,Qrr,Wrr,qQ,Hrr,Urr,Jrr,G6,v1e,Yrr,Krr,jQ,Zrr,etr,otr,O6,F1e,rtr,ttr,DQ,atr,ntr,str,V6,T1e,ltr,itr,GQ,dtr,ctr,ftr,X6,M1e,mtr,gtr,OQ,htr,ptr,_tr,z6,E1e,utr,btr,VQ,vtr,Ftr,Ttr,Q6,C1e,Mtr,Etr,XQ,Ctr,wtr,Atr,W6,w1e,Ltr,ytr,zQ,xtr,$tr,ktr,H6,A1e,Str,Rtr,QQ,Ptr,Btr,Itr,U6,L1e,Ntr,qtr,WQ,jtr,Dtr,Gtr,J6,y1e,Otr,Vtr,HQ,Xtr,ztr,Qtr,Y6,x1e,Wtr,Htr,UQ,Utr,Jtr,Ytr,K6,$1e,Ktr,Ztr,JQ,ear,oar,rar,Z6,k1e,tar,aar,YQ,nar,sar,lar,eT,S1e,iar,dar,KQ,car,far,mar,oT,R1e,gar,har,ZQ,par,_ar,uar,rT,P1e,bar,Far,eW,Tar,Mar,Ear,tT,B1e,Car,war,oW,Aar,Lar,yar,aT,I1e,xar,$ar,rW,kar,Sar,Rar,nT,N1e,Par,Bar,tW,Iar,Nar,qar,sT,q1e,jar,Dar,aW,Gar,Oar,Var,lT,j1e,Xar,zar,nW,Qar,War,Har,iT,D1e,Uar,Jar,sW,Yar,Kar,Zar,dT,G1e,enr,onr,lW,rnr,tnr,anr,cT,nnr,O1e,snr,lnr,V1e,inr,dnr,fT,RXe,_d,mT,X1e,Ly,cnr,z1e,fnr,PXe,Do,yy,mnr,ud,gnr,iW,hnr,pnr,dW,_nr,unr,bnr,xy,vnr,Q1e,Fnr,Tnr,Mnr,ut,$y,Enr,W1e,Cnr,wnr,bd,Anr,H1e,Lnr,ynr,cW,xnr,$nr,knr,gT,Snr,so,ky,Rnr,U1e,Pnr,Bnr,Qa,Inr,J1e,Nnr,qnr,Y1e,jnr,Dnr,K1e,Gnr,Onr,Vnr,Z1e,hT,ebe,Xnr,znr,fW,Qnr,Wnr,Hnr,pT,Unr,obe,Jnr,Ynr,rbe,Knr,Znr,_T,BXe,vd,uT,tbe,Sy,esr,abe,osr,IXe,Go,Ry,rsr,Fd,tsr,mW,asr,nsr,gW,ssr,lsr,isr,Py,dsr,nbe,csr,fsr,msr,bt,By,gsr,sbe,hsr,psr,Td,_sr,lbe,usr,bsr,hW,vsr,Fsr,Tsr,bT,Msr,lo,Iy,Esr,ibe,Csr,wsr,Wa,Asr,dbe,Lsr,ysr,cbe,xsr,$sr,fbe,ksr,Ssr,Rsr,ve,vT,mbe,Psr,Bsr,pW,Isr,Nsr,qsr,FT,gbe,jsr,Dsr,_W,Gsr,Osr,Vsr,TT,hbe,Xsr,zsr,uW,Qsr,Wsr,Hsr,MT,pbe,Usr,Jsr,bW,Ysr,Ksr,Zsr,Hs,_be,elr,olr,vW,rlr,tlr,FW,alr,nlr,slr,ET,ube,llr,ilr,TW,dlr,clr,flr,Us,bbe,mlr,glr,MW,hlr,plr,EW,_lr,ulr,blr,CT,vbe,vlr,Flr,CW,Tlr,Mlr,Elr,vt,Fbe,Clr,wlr,wW,Alr,Llr,AW,ylr,xlr,LW,$lr,klr,Slr,wT,Tbe,Rlr,Plr,yW,Blr,Ilr,Nlr,AT,Mbe,qlr,jlr,xW,Dlr,Glr,Olr,LT,Ebe,Vlr,Xlr,$W,zlr,Qlr,Wlr,yT,Cbe,Hlr,Ulr,kW,Jlr,Ylr,Klr,xT,wbe,Zlr,eir,SW,oir,rir,tir,$T,Abe,air,nir,RW,sir,lir,iir,kT,Lbe,dir,cir,PW,fir,mir,gir,ST,hir,ybe,pir,_ir,xbe,uir,bir,RT,NXe,Md,PT,$be,Ny,vir,kbe,Fir,qXe,Oo,qy,Tir,Ed,Mir,BW,Eir,Cir,IW,wir,Air,Lir,jy,yir,Sbe,xir,$ir,kir,Ft,Dy,Sir,Rbe,Rir,Pir,Cd,Bir,Pbe,Iir,Nir,NW,qir,jir,Dir,BT,Gir,io,Gy,Oir,Bbe,Vir,Xir,Ha,zir,Ibe,Qir,Wir,Nbe,Hir,Uir,qbe,Jir,Yir,Kir,jbe,IT,Dbe,Zir,edr,qW,odr,rdr,tdr,NT,adr,Gbe,ndr,sdr,Obe,ldr,idr,qT,jXe,wd,jT,Vbe,Oy,ddr,Xbe,cdr,DXe,Vo,Vy,fdr,Ad,mdr,jW,gdr,hdr,DW,pdr,_dr,udr,Xy,bdr,zbe,vdr,Fdr,Tdr,Tt,zy,Mdr,Qbe,Edr,Cdr,Ld,wdr,Wbe,Adr,Ldr,GW,ydr,xdr,$dr,DT,kdr,co,Qy,Sdr,Hbe,Rdr,Pdr,Ua,Bdr,Ube,Idr,Ndr,Jbe,qdr,jdr,Ybe,Ddr,Gdr,Odr,Kbe,GT,Zbe,Vdr,Xdr,OW,zdr,Qdr,Wdr,OT,Hdr,eve,Udr,Jdr,ove,Ydr,Kdr,VT,GXe,yd,XT,rve,Wy,Zdr,tve,ecr,OXe,Xo,Hy,ocr,xd,rcr,VW,tcr,acr,XW,ncr,scr,lcr,Uy,icr,ave,dcr,ccr,fcr,Mt,Jy,mcr,nve,gcr,hcr,$d,pcr,sve,_cr,ucr,zW,bcr,vcr,Fcr,zT,Tcr,fo,Yy,Mcr,lve,Ecr,Ccr,Ja,wcr,ive,Acr,Lcr,dve,ycr,xcr,cve,$cr,kcr,Scr,Pe,QT,fve,Rcr,Pcr,QW,Bcr,Icr,Ncr,WT,mve,qcr,jcr,WW,Dcr,Gcr,Ocr,HT,gve,Vcr,Xcr,HW,zcr,Qcr,Wcr,UT,hve,Hcr,Ucr,UW,Jcr,Ycr,Kcr,JT,pve,Zcr,efr,JW,ofr,rfr,tfr,YT,_ve,afr,nfr,YW,sfr,lfr,ifr,KT,uve,dfr,cfr,KW,ffr,mfr,gfr,ZT,bve,hfr,pfr,ZW,_fr,ufr,bfr,e7,vve,vfr,Ffr,eH,Tfr,Mfr,Efr,o7,Cfr,Fve,wfr,Afr,Tve,Lfr,yfr,r7,VXe,kd,t7,Mve,Ky,xfr,Eve,$fr,XXe,zo,Zy,kfr,Sd,Sfr,oH,Rfr,Pfr,rH,Bfr,Ifr,Nfr,e9,qfr,Cve,jfr,Dfr,Gfr,Et,o9,Ofr,wve,Vfr,Xfr,Rd,zfr,Ave,Qfr,Wfr,tH,Hfr,Ufr,Jfr,a7,Yfr,mo,r9,Kfr,Lve,Zfr,emr,Ya,omr,yve,rmr,tmr,xve,amr,nmr,$ve,smr,lmr,imr,ot,n7,kve,dmr,cmr,aH,fmr,mmr,gmr,s7,Sve,hmr,pmr,nH,_mr,umr,bmr,l7,Rve,vmr,Fmr,sH,Tmr,Mmr,Emr,i7,Pve,Cmr,wmr,lH,Amr,Lmr,ymr,d7,Bve,xmr,$mr,iH,kmr,Smr,Rmr,c7,Pmr,Ive,Bmr,Imr,Nve,Nmr,qmr,f7,zXe,Pd,m7,qve,t9,jmr,jve,Dmr,QXe,Qo,a9,Gmr,Bd,Omr,dH,Vmr,Xmr,cH,zmr,Qmr,Wmr,n9,Hmr,Dve,Umr,Jmr,Ymr,Ct,s9,Kmr,Gve,Zmr,egr,Id,ogr,Ove,rgr,tgr,fH,agr,ngr,sgr,g7,lgr,go,l9,igr,Vve,dgr,cgr,Ka,fgr,Xve,mgr,ggr,zve,hgr,pgr,Qve,_gr,ugr,bgr,Le,h7,Wve,vgr,Fgr,mH,Tgr,Mgr,Egr,p7,Hve,Cgr,wgr,gH,Agr,Lgr,ygr,_7,Uve,xgr,$gr,hH,kgr,Sgr,Rgr,u7,Jve,Pgr,Bgr,pH,Igr,Ngr,qgr,b7,Yve,jgr,Dgr,_H,Ggr,Ogr,Vgr,v7,Kve,Xgr,zgr,uH,Qgr,Wgr,Hgr,F7,Zve,Ugr,Jgr,bH,Ygr,Kgr,Zgr,T7,eFe,ehr,ohr,vH,rhr,thr,ahr,M7,oFe,nhr,shr,FH,lhr,ihr,dhr,E7,rFe,chr,fhr,TH,mhr,ghr,hhr,C7,phr,tFe,_hr,uhr,aFe,bhr,vhr,w7,WXe,Nd,A7,nFe,i9,Fhr,sFe,Thr,HXe,Wo,d9,Mhr,qd,Ehr,MH,Chr,whr,EH,Ahr,Lhr,yhr,c9,xhr,lFe,$hr,khr,Shr,wt,f9,Rhr,iFe,Phr,Bhr,jd,Ihr,dFe,Nhr,qhr,CH,jhr,Dhr,Ghr,L7,Ohr,ho,m9,Vhr,cFe,Xhr,zhr,Za,Qhr,fFe,Whr,Hhr,mFe,Uhr,Jhr,gFe,Yhr,Khr,Zhr,g9,y7,hFe,epr,opr,wH,rpr,tpr,apr,x7,pFe,npr,spr,AH,lpr,ipr,dpr,$7,cpr,_Fe,fpr,mpr,uFe,gpr,hpr,k7,UXe,Dd,S7,bFe,h9,ppr,vFe,_pr,JXe,Ho,p9,upr,Gd,bpr,LH,vpr,Fpr,yH,Tpr,Mpr,Epr,_9,Cpr,FFe,wpr,Apr,Lpr,At,u9,ypr,TFe,xpr,$pr,Od,kpr,MFe,Spr,Rpr,xH,Ppr,Bpr,Ipr,R7,Npr,po,b9,qpr,EFe,jpr,Dpr,en,Gpr,CFe,Opr,Vpr,wFe,Xpr,zpr,AFe,Qpr,Wpr,Hpr,rt,P7,LFe,Upr,Jpr,$H,Ypr,Kpr,Zpr,B7,yFe,e_r,o_r,kH,r_r,t_r,a_r,I7,xFe,n_r,s_r,SH,l_r,i_r,d_r,N7,$Fe,c_r,f_r,RH,m_r,g_r,h_r,q7,kFe,p_r,__r,PH,u_r,b_r,v_r,j7,F_r,SFe,T_r,M_r,RFe,E_r,C_r,D7,YXe,Vd,G7,PFe,v9,w_r,BFe,A_r,KXe,Uo,F9,L_r,Xd,y_r,BH,x_r,$_r,IH,k_r,S_r,R_r,T9,P_r,IFe,B_r,I_r,N_r,Lt,M9,q_r,NFe,j_r,D_r,zd,G_r,qFe,O_r,V_r,NH,X_r,z_r,Q_r,O7,W_r,_o,E9,H_r,jFe,U_r,J_r,on,Y_r,DFe,K_r,Z_r,GFe,eur,our,OFe,rur,tur,aur,Qd,V7,VFe,nur,sur,qH,lur,iur,dur,X7,XFe,cur,fur,jH,mur,gur,hur,z7,zFe,pur,_ur,DH,uur,bur,vur,Q7,Fur,QFe,Tur,Mur,WFe,Eur,Cur,W7,ZXe,Wd,H7,HFe,C9,wur,UFe,Aur,eze,Jo,w9,Lur,Hd,yur,GH,xur,$ur,OH,kur,Sur,Rur,A9,Pur,JFe,Bur,Iur,Nur,yt,L9,qur,YFe,jur,Dur,Ud,Gur,KFe,Our,Vur,VH,Xur,zur,Qur,U7,Wur,uo,y9,Hur,ZFe,Uur,Jur,rn,Yur,e6e,Kur,Zur,o6e,e2r,o2r,r6e,r2r,t2r,a2r,x9,J7,t6e,n2r,s2r,XH,l2r,i2r,d2r,Y7,a6e,c2r,f2r,zH,m2r,g2r,h2r,K7,p2r,n6e,_2r,u2r,s6e,b2r,v2r,Z7,oze,Jd,e8,l6e,$9,F2r,i6e,T2r,rze,Yo,k9,M2r,Yd,E2r,QH,C2r,w2r,WH,A2r,L2r,y2r,S9,x2r,d6e,$2r,k2r,S2r,xt,R9,R2r,c6e,P2r,B2r,Kd,I2r,f6e,N2r,q2r,HH,j2r,D2r,G2r,o8,O2r,bo,P9,V2r,m6e,X2r,z2r,tn,Q2r,g6e,W2r,H2r,h6e,U2r,J2r,p6e,Y2r,K2r,Z2r,_6e,r8,u6e,e1r,o1r,UH,r1r,t1r,a1r,t8,n1r,b6e,s1r,l1r,v6e,i1r,d1r,a8,tze,Zd,n8,F6e,B9,c1r,T6e,f1r,aze,Ko,I9,m1r,ec,g1r,JH,h1r,p1r,YH,_1r,u1r,b1r,N9,v1r,M6e,F1r,T1r,M1r,$t,q9,E1r,E6e,C1r,w1r,oc,A1r,C6e,L1r,y1r,KH,x1r,$1r,k1r,s8,S1r,vo,j9,R1r,w6e,P1r,B1r,an,I1r,A6e,N1r,q1r,L6e,j1r,D1r,y6e,G1r,O1r,V1r,tt,l8,x6e,X1r,z1r,ZH,Q1r,W1r,H1r,i8,$6e,U1r,J1r,eU,Y1r,K1r,Z1r,d8,k6e,ebr,obr,oU,rbr,tbr,abr,c8,S6e,nbr,sbr,rU,lbr,ibr,dbr,f8,R6e,cbr,fbr,tU,mbr,gbr,hbr,m8,pbr,P6e,_br,ubr,B6e,bbr,vbr,g8,nze,rc,h8,I6e,D9,Fbr,N6e,Tbr,sze,Zo,G9,Mbr,tc,Ebr,aU,Cbr,wbr,nU,Abr,Lbr,ybr,O9,xbr,q6e,$br,kbr,Sbr,kt,V9,Rbr,j6e,Pbr,Bbr,ac,Ibr,D6e,Nbr,qbr,sU,jbr,Dbr,Gbr,p8,Obr,Fo,X9,Vbr,G6e,Xbr,zbr,nn,Qbr,O6e,Wbr,Hbr,V6e,Ubr,Jbr,X6e,Ybr,Kbr,Zbr,z6e,_8,Q6e,evr,ovr,lU,rvr,tvr,avr,u8,nvr,W6e,svr,lvr,H6e,ivr,dvr,b8,lze,nc,v8,U6e,z9,cvr,J6e,fvr,ize,er,Q9,mvr,sc,gvr,iU,hvr,pvr,dU,_vr,uvr,bvr,W9,vvr,Y6e,Fvr,Tvr,Mvr,St,H9,Evr,K6e,Cvr,wvr,lc,Avr,Z6e,Lvr,yvr,cU,xvr,$vr,kvr,F8,Svr,xr,U9,Rvr,eTe,Pvr,Bvr,sn,Ivr,oTe,Nvr,qvr,rTe,jvr,Dvr,tTe,Gvr,Ovr,Vvr,q,T8,aTe,Xvr,zvr,fU,Qvr,Wvr,Hvr,M8,nTe,Uvr,Jvr,mU,Yvr,Kvr,Zvr,E8,sTe,eFr,oFr,gU,rFr,tFr,aFr,C8,lTe,nFr,sFr,hU,lFr,iFr,dFr,w8,iTe,cFr,fFr,pU,mFr,gFr,hFr,A8,dTe,pFr,_Fr,_U,uFr,bFr,vFr,L8,cTe,FFr,TFr,uU,MFr,EFr,CFr,y8,fTe,wFr,AFr,bU,LFr,yFr,xFr,x8,mTe,$Fr,kFr,vU,SFr,RFr,PFr,$8,gTe,BFr,IFr,FU,NFr,qFr,jFr,k8,hTe,DFr,GFr,TU,OFr,VFr,XFr,S8,pTe,zFr,QFr,MU,WFr,HFr,UFr,R8,_Te,JFr,YFr,EU,KFr,ZFr,e6r,P8,uTe,o6r,r6r,CU,t6r,a6r,n6r,B8,bTe,s6r,l6r,wU,i6r,d6r,c6r,I8,vTe,f6r,m6r,AU,g6r,h6r,p6r,N8,FTe,_6r,u6r,LU,b6r,v6r,F6r,Js,TTe,T6r,M6r,yU,E6r,C6r,xU,w6r,A6r,L6r,q8,MTe,y6r,x6r,$U,$6r,k6r,S6r,j8,ETe,R6r,P6r,kU,B6r,I6r,N6r,D8,CTe,q6r,j6r,SU,D6r,G6r,O6r,G8,wTe,V6r,X6r,RU,z6r,Q6r,W6r,O8,ATe,H6r,U6r,PU,J6r,Y6r,K6r,V8,LTe,Z6r,eTr,BU,oTr,rTr,tTr,X8,yTe,aTr,nTr,IU,sTr,lTr,iTr,z8,xTe,dTr,cTr,NU,fTr,mTr,gTr,Q8,$Te,hTr,pTr,qU,_Tr,uTr,bTr,W8,kTe,vTr,FTr,jU,TTr,MTr,ETr,H8,STe,CTr,wTr,DU,ATr,LTr,yTr,U8,RTe,xTr,$Tr,GU,kTr,STr,RTr,J8,PTe,PTr,BTr,OU,ITr,NTr,qTr,Y8,BTe,jTr,DTr,VU,GTr,OTr,VTr,K8,ITe,XTr,zTr,XU,QTr,WTr,HTr,Z8,NTe,UTr,JTr,zU,YTr,KTr,ZTr,eM,qTe,e7r,o7r,QU,r7r,t7r,a7r,oM,jTe,n7r,s7r,WU,l7r,i7r,d7r,rM,DTe,c7r,f7r,HU,m7r,g7r,h7r,tM,GTe,p7r,_7r,UU,u7r,b7r,v7r,aM,OTe,F7r,T7r,JU,M7r,E7r,C7r,nM,VTe,w7r,A7r,YU,L7r,y7r,x7r,sM,XTe,$7r,k7r,KU,S7r,R7r,P7r,lM,zTe,B7r,I7r,ZU,N7r,q7r,j7r,iM,QTe,D7r,G7r,eJ,O7r,V7r,X7r,dM,WTe,z7r,Q7r,oJ,W7r,H7r,U7r,cM,HTe,J7r,Y7r,rJ,K7r,Z7r,e8r,fM,UTe,o8r,r8r,tJ,t8r,a8r,n8r,mM,JTe,s8r,l8r,aJ,i8r,d8r,c8r,gM,YTe,f8r,m8r,nJ,g8r,h8r,p8r,hM,KTe,_8r,u8r,sJ,b8r,v8r,F8r,pM,dze,ic,_M,ZTe,J9,T8r,e7e,M8r,cze,or,Y9,E8r,dc,C8r,lJ,w8r,A8r,iJ,L8r,y8r,x8r,K9,$8r,o7e,k8r,S8r,R8r,Rt,Z9,P8r,r7e,B8r,I8r,cc,N8r,t7e,q8r,j8r,dJ,D8r,G8r,O8r,uM,V8r,$r,ex,X8r,a7e,z8r,Q8r,ln,W8r,n7e,H8r,U8r,s7e,J8r,Y8r,l7e,K8r,Z8r,eMr,se,bM,i7e,oMr,rMr,cJ,tMr,aMr,nMr,vM,d7e,sMr,lMr,fJ,iMr,dMr,cMr,FM,c7e,fMr,mMr,mJ,gMr,hMr,pMr,TM,f7e,_Mr,uMr,gJ,bMr,vMr,FMr,MM,m7e,TMr,MMr,hJ,EMr,CMr,wMr,EM,g7e,AMr,LMr,pJ,yMr,xMr,$Mr,CM,h7e,kMr,SMr,_J,RMr,PMr,BMr,wM,p7e,IMr,NMr,uJ,qMr,jMr,DMr,AM,_7e,GMr,OMr,bJ,VMr,XMr,zMr,LM,u7e,QMr,WMr,vJ,HMr,UMr,JMr,yM,b7e,YMr,KMr,FJ,ZMr,e4r,o4r,xM,v7e,r4r,t4r,TJ,a4r,n4r,s4r,$M,F7e,l4r,i4r,MJ,d4r,c4r,f4r,kM,T7e,m4r,g4r,EJ,h4r,p4r,_4r,SM,M7e,u4r,b4r,CJ,v4r,F4r,T4r,RM,E7e,M4r,E4r,wJ,C4r,w4r,A4r,PM,C7e,L4r,y4r,AJ,x4r,$4r,k4r,BM,w7e,S4r,R4r,LJ,P4r,B4r,I4r,IM,A7e,N4r,q4r,yJ,j4r,D4r,G4r,NM,L7e,O4r,V4r,xJ,X4r,z4r,Q4r,qM,y7e,W4r,H4r,$J,U4r,J4r,Y4r,jM,x7e,K4r,Z4r,kJ,eEr,oEr,rEr,DM,$7e,tEr,aEr,SJ,nEr,sEr,lEr,GM,fze,fc,OM,k7e,ox,iEr,S7e,dEr,mze,rr,rx,cEr,mc,fEr,RJ,mEr,gEr,PJ,hEr,pEr,_Er,tx,uEr,R7e,bEr,vEr,FEr,Pt,ax,TEr,P7e,MEr,EEr,gc,CEr,B7e,wEr,AEr,BJ,LEr,yEr,xEr,VM,$Er,kr,nx,kEr,I7e,SEr,REr,dn,PEr,N7e,BEr,IEr,q7e,NEr,qEr,j7e,jEr,DEr,GEr,Me,XM,D7e,OEr,VEr,IJ,XEr,zEr,QEr,zM,G7e,WEr,HEr,NJ,UEr,JEr,YEr,QM,O7e,KEr,ZEr,qJ,eCr,oCr,rCr,WM,V7e,tCr,aCr,jJ,nCr,sCr,lCr,HM,X7e,iCr,dCr,DJ,cCr,fCr,mCr,UM,z7e,gCr,hCr,GJ,pCr,_Cr,uCr,JM,Q7e,bCr,vCr,OJ,FCr,TCr,MCr,YM,W7e,ECr,CCr,VJ,wCr,ACr,LCr,KM,H7e,yCr,xCr,XJ,$Cr,kCr,SCr,ZM,U7e,RCr,PCr,zJ,BCr,ICr,NCr,e4,J7e,qCr,jCr,QJ,DCr,GCr,OCr,o4,Y7e,VCr,XCr,WJ,zCr,QCr,WCr,r4,K7e,HCr,UCr,HJ,JCr,YCr,KCr,t4,gze,hc,a4,Z7e,sx,ZCr,e8e,e3r,hze,tr,lx,o3r,pc,r3r,UJ,t3r,a3r,JJ,n3r,s3r,l3r,ix,i3r,o8e,d3r,c3r,f3r,Bt,dx,m3r,r8e,g3r,h3r,_c,p3r,t8e,_3r,u3r,YJ,b3r,v3r,F3r,n4,T3r,Sr,cx,M3r,a8e,E3r,C3r,cn,w3r,n8e,A3r,L3r,s8e,y3r,x3r,l8e,$3r,k3r,S3r,ar,s4,i8e,R3r,P3r,KJ,B3r,I3r,N3r,l4,d8e,q3r,j3r,ZJ,D3r,G3r,O3r,i4,c8e,V3r,X3r,eY,z3r,Q3r,W3r,d4,f8e,H3r,U3r,oY,J3r,Y3r,K3r,c4,m8e,Z3r,e5r,rY,o5r,r5r,t5r,f4,g8e,a5r,n5r,tY,s5r,l5r,i5r,m4,pze,uc,g4,h8e,fx,d5r,p8e,c5r,_ze,nr,mx,f5r,bc,m5r,aY,g5r,h5r,nY,p5r,_5r,u5r,gx,b5r,_8e,v5r,F5r,T5r,It,hx,M5r,u8e,E5r,C5r,vc,w5r,b8e,A5r,L5r,sY,y5r,x5r,$5r,h4,k5r,Rr,px,S5r,v8e,R5r,P5r,fn,B5r,F8e,I5r,N5r,T8e,q5r,j5r,M8e,D5r,G5r,O5r,ie,p4,E8e,V5r,X5r,lY,z5r,Q5r,W5r,_4,C8e,H5r,U5r,iY,J5r,Y5r,K5r,u4,w8e,Z5r,e0r,dY,o0r,r0r,t0r,b4,A8e,a0r,n0r,cY,s0r,l0r,i0r,v4,L8e,d0r,c0r,fY,f0r,m0r,g0r,F4,y8e,h0r,p0r,mY,_0r,u0r,b0r,T4,x8e,v0r,F0r,gY,T0r,M0r,E0r,M4,$8e,C0r,w0r,hY,A0r,L0r,y0r,E4,k8e,x0r,$0r,pY,k0r,S0r,R0r,C4,S8e,P0r,B0r,_Y,I0r,N0r,q0r,w4,R8e,j0r,D0r,uY,G0r,O0r,V0r,A4,P8e,X0r,z0r,bY,Q0r,W0r,H0r,L4,B8e,U0r,J0r,vY,Y0r,K0r,Z0r,y4,I8e,ewr,owr,FY,rwr,twr,awr,x4,N8e,nwr,swr,TY,lwr,iwr,dwr,$4,q8e,cwr,fwr,MY,mwr,gwr,hwr,k4,j8e,pwr,_wr,EY,uwr,bwr,vwr,S4,D8e,Fwr,Twr,CY,Mwr,Ewr,Cwr,R4,G8e,wwr,Awr,wY,Lwr,ywr,xwr,P4,O8e,$wr,kwr,AY,Swr,Rwr,Pwr,B4,uze,Fc,I4,V8e,_x,Bwr,X8e,Iwr,bze,sr,ux,Nwr,Tc,qwr,LY,jwr,Dwr,yY,Gwr,Owr,Vwr,bx,Xwr,z8e,zwr,Qwr,Wwr,Nt,vx,Hwr,Q8e,Uwr,Jwr,Mc,Ywr,W8e,Kwr,Zwr,xY,eAr,oAr,rAr,N4,tAr,Pr,Fx,aAr,H8e,nAr,sAr,mn,lAr,U8e,iAr,dAr,J8e,cAr,fAr,Y8e,mAr,gAr,hAr,ye,q4,K8e,pAr,_Ar,$Y,uAr,bAr,vAr,j4,Z8e,FAr,TAr,kY,MAr,EAr,CAr,D4,eMe,wAr,AAr,SY,LAr,yAr,xAr,G4,oMe,$Ar,kAr,RY,SAr,RAr,PAr,O4,rMe,BAr,IAr,PY,NAr,qAr,jAr,V4,tMe,DAr,GAr,BY,OAr,VAr,XAr,X4,aMe,zAr,QAr,IY,WAr,HAr,UAr,z4,nMe,JAr,YAr,NY,KAr,ZAr,eLr,Q4,sMe,oLr,rLr,qY,tLr,aLr,nLr,W4,lMe,sLr,lLr,jY,iLr,dLr,cLr,H4,vze,Ec,U4,iMe,Tx,fLr,dMe,mLr,Fze,lr,Mx,gLr,Cc,hLr,DY,pLr,_Lr,GY,uLr,bLr,vLr,Ex,FLr,cMe,TLr,MLr,ELr,qt,Cx,CLr,fMe,wLr,ALr,wc,LLr,mMe,yLr,xLr,OY,$Lr,kLr,SLr,J4,RLr,Br,wx,PLr,gMe,BLr,ILr,gn,NLr,hMe,qLr,jLr,pMe,DLr,GLr,_Me,OLr,VLr,XLr,te,Y4,uMe,zLr,QLr,VY,WLr,HLr,ULr,K4,bMe,JLr,YLr,XY,KLr,ZLr,eyr,Z4,vMe,oyr,ryr,zY,tyr,ayr,nyr,eE,FMe,syr,lyr,QY,iyr,dyr,cyr,oE,TMe,fyr,myr,WY,gyr,hyr,pyr,rE,MMe,_yr,uyr,HY,byr,vyr,Fyr,tE,EMe,Tyr,Myr,UY,Eyr,Cyr,wyr,aE,CMe,Ayr,Lyr,JY,yyr,xyr,$yr,nE,wMe,kyr,Syr,YY,Ryr,Pyr,Byr,sE,AMe,Iyr,Nyr,KY,qyr,jyr,Dyr,lE,LMe,Gyr,Oyr,ZY,Vyr,Xyr,zyr,iE,yMe,Qyr,Wyr,eK,Hyr,Uyr,Jyr,dE,xMe,Yyr,Kyr,oK,Zyr,e9r,o9r,cE,$Me,r9r,t9r,rK,a9r,n9r,s9r,fE,kMe,l9r,i9r,tK,d9r,c9r,f9r,mE,SMe,m9r,g9r,aK,h9r,p9r,_9r,gE,RMe,u9r,b9r,nK,v9r,F9r,T9r,hE,PMe,M9r,E9r,sK,C9r,w9r,A9r,pE,BMe,L9r,y9r,lK,x9r,$9r,k9r,_E,IMe,S9r,R9r,iK,P9r,B9r,I9r,uE,NMe,N9r,q9r,dK,j9r,D9r,G9r,bE,qMe,O9r,V9r,cK,X9r,z9r,Q9r,vE,jMe,W9r,H9r,fK,U9r,J9r,Y9r,FE,DMe,K9r,Z9r,mK,exr,oxr,rxr,TE,GMe,txr,axr,gK,nxr,sxr,lxr,ME,OMe,ixr,dxr,hK,cxr,fxr,mxr,EE,Tze,Ac,CE,VMe,Ax,gxr,XMe,hxr,Mze,ir,Lx,pxr,Lc,_xr,pK,uxr,bxr,_K,vxr,Fxr,Txr,yx,Mxr,zMe,Exr,Cxr,wxr,jt,xx,Axr,QMe,Lxr,yxr,yc,xxr,WMe,$xr,kxr,uK,Sxr,Rxr,Pxr,wE,Bxr,Ir,$x,Ixr,HMe,Nxr,qxr,hn,jxr,UMe,Dxr,Gxr,JMe,Oxr,Vxr,YMe,Xxr,zxr,Qxr,_e,AE,KMe,Wxr,Hxr,bK,Uxr,Jxr,Yxr,LE,ZMe,Kxr,Zxr,vK,e$r,o$r,r$r,yE,e4e,t$r,a$r,FK,n$r,s$r,l$r,xE,o4e,i$r,d$r,TK,c$r,f$r,m$r,$E,r4e,g$r,h$r,MK,p$r,_$r,u$r,kE,t4e,b$r,v$r,EK,F$r,T$r,M$r,SE,a4e,E$r,C$r,CK,w$r,A$r,L$r,RE,n4e,y$r,x$r,wK,$$r,k$r,S$r,PE,s4e,R$r,P$r,AK,B$r,I$r,N$r,BE,l4e,q$r,j$r,LK,D$r,G$r,O$r,IE,i4e,V$r,X$r,yK,z$r,Q$r,W$r,NE,d4e,H$r,U$r,xK,J$r,Y$r,K$r,qE,c4e,Z$r,ekr,$K,okr,rkr,tkr,jE,f4e,akr,nkr,kK,skr,lkr,ikr,DE,m4e,dkr,ckr,SK,fkr,mkr,gkr,GE,g4e,hkr,pkr,RK,_kr,ukr,bkr,OE,h4e,vkr,Fkr,PK,Tkr,Mkr,Ekr,VE,Eze,xc,XE,p4e,kx,Ckr,_4e,wkr,Cze,dr,Sx,Akr,$c,Lkr,BK,ykr,xkr,IK,$kr,kkr,Skr,Rx,Rkr,u4e,Pkr,Bkr,Ikr,Dt,Px,Nkr,b4e,qkr,jkr,kc,Dkr,v4e,Gkr,Okr,NK,Vkr,Xkr,zkr,zE,Qkr,Nr,Bx,Wkr,F4e,Hkr,Ukr,pn,Jkr,T4e,Ykr,Kkr,M4e,Zkr,eSr,E4e,oSr,rSr,tSr,Ix,QE,C4e,aSr,nSr,qK,sSr,lSr,iSr,WE,w4e,dSr,cSr,jK,fSr,mSr,gSr,HE,wze,Sc,UE,A4e,Nx,hSr,L4e,pSr,Aze,cr,qx,_Sr,Rc,uSr,DK,bSr,vSr,GK,FSr,TSr,MSr,jx,ESr,y4e,CSr,wSr,ASr,Gt,Dx,LSr,x4e,ySr,xSr,Pc,$Sr,$4e,kSr,SSr,OK,RSr,PSr,BSr,JE,ISr,qr,Gx,NSr,k4e,qSr,jSr,_n,DSr,S4e,GSr,OSr,R4e,VSr,XSr,P4e,zSr,QSr,WSr,B4e,YE,I4e,HSr,USr,VK,JSr,YSr,KSr,KE,Lze,Bc,ZE,N4e,Ox,ZSr,q4e,eRr,yze,fr,Vx,oRr,Ic,rRr,XK,tRr,aRr,zK,nRr,sRr,lRr,Xx,iRr,j4e,dRr,cRr,fRr,Ot,zx,mRr,D4e,gRr,hRr,Nc,pRr,G4e,_Rr,uRr,QK,bRr,vRr,FRr,eC,TRr,jr,Qx,MRr,O4e,ERr,CRr,un,wRr,V4e,ARr,LRr,X4e,yRr,xRr,z4e,$Rr,kRr,SRr,de,oC,Q4e,RRr,PRr,WK,BRr,IRr,NRr,rC,W4e,qRr,jRr,HK,DRr,GRr,ORr,tC,H4e,VRr,XRr,UK,zRr,QRr,WRr,aC,U4e,HRr,URr,JK,JRr,YRr,KRr,nC,J4e,ZRr,ePr,YK,oPr,rPr,tPr,sC,Y4e,aPr,nPr,KK,sPr,lPr,iPr,lC,K4e,dPr,cPr,ZK,fPr,mPr,gPr,iC,Z4e,hPr,pPr,eZ,_Pr,uPr,bPr,dC,eEe,vPr,FPr,oZ,TPr,MPr,EPr,cC,oEe,CPr,wPr,rZ,APr,LPr,yPr,fC,rEe,xPr,$Pr,tZ,kPr,SPr,RPr,mC,tEe,PPr,BPr,aZ,IPr,NPr,qPr,gC,aEe,jPr,DPr,nZ,GPr,OPr,VPr,hC,nEe,XPr,zPr,sZ,QPr,WPr,HPr,pC,sEe,UPr,JPr,lZ,YPr,KPr,ZPr,_C,lEe,eBr,oBr,iZ,rBr,tBr,aBr,uC,iEe,nBr,sBr,dZ,lBr,iBr,dBr,bC,dEe,cBr,fBr,cZ,mBr,gBr,hBr,vC,cEe,pBr,_Br,fZ,uBr,bBr,vBr,FC,fEe,FBr,TBr,mZ,MBr,EBr,CBr,TC,xze,qc,MC,mEe,Wx,wBr,gEe,ABr,$ze,mr,Hx,LBr,jc,yBr,gZ,xBr,$Br,hZ,kBr,SBr,RBr,Ux,PBr,hEe,BBr,IBr,NBr,Vt,Jx,qBr,pEe,jBr,DBr,Dc,GBr,_Ee,OBr,VBr,pZ,XBr,zBr,QBr,EC,WBr,Dr,Yx,HBr,uEe,UBr,JBr,bn,YBr,bEe,KBr,ZBr,vEe,eIr,oIr,FEe,rIr,tIr,aIr,ce,CC,TEe,nIr,sIr,_Z,lIr,iIr,dIr,wC,MEe,cIr,fIr,uZ,mIr,gIr,hIr,AC,EEe,pIr,_Ir,bZ,uIr,bIr,vIr,LC,CEe,FIr,TIr,vZ,MIr,EIr,CIr,yC,wEe,wIr,AIr,FZ,LIr,yIr,xIr,xC,AEe,$Ir,kIr,TZ,SIr,RIr,PIr,$C,LEe,BIr,IIr,MZ,NIr,qIr,jIr,kC,yEe,DIr,GIr,EZ,OIr,VIr,XIr,SC,xEe,zIr,QIr,CZ,WIr,HIr,UIr,RC,$Ee,JIr,YIr,wZ,KIr,ZIr,eNr,PC,kEe,oNr,rNr,AZ,tNr,aNr,nNr,BC,SEe,sNr,lNr,LZ,iNr,dNr,cNr,IC,REe,fNr,mNr,yZ,gNr,hNr,pNr,NC,PEe,_Nr,uNr,xZ,bNr,vNr,FNr,qC,BEe,TNr,MNr,$Z,ENr,CNr,wNr,jC,IEe,ANr,LNr,kZ,yNr,xNr,$Nr,DC,NEe,kNr,SNr,SZ,RNr,PNr,BNr,GC,qEe,INr,NNr,RZ,qNr,jNr,DNr,OC,jEe,GNr,ONr,PZ,VNr,XNr,zNr,VC,DEe,QNr,WNr,BZ,HNr,UNr,JNr,XC,kze,Gc,zC,GEe,Kx,YNr,OEe,KNr,Sze,gr,Zx,ZNr,Oc,eqr,IZ,oqr,rqr,NZ,tqr,aqr,nqr,e$,sqr,VEe,lqr,iqr,dqr,Xt,o$,cqr,XEe,fqr,mqr,Vc,gqr,zEe,hqr,pqr,qZ,_qr,uqr,bqr,QC,vqr,Gr,r$,Fqr,QEe,Tqr,Mqr,vn,Eqr,WEe,Cqr,wqr,HEe,Aqr,Lqr,UEe,yqr,xqr,$qr,JEe,WC,YEe,kqr,Sqr,jZ,Rqr,Pqr,Bqr,HC,Rze,Xc,UC,KEe,t$,Iqr,ZEe,Nqr,Pze,hr,a$,qqr,zc,jqr,DZ,Dqr,Gqr,GZ,Oqr,Vqr,Xqr,n$,zqr,eCe,Qqr,Wqr,Hqr,zt,s$,Uqr,oCe,Jqr,Yqr,Qc,Kqr,rCe,Zqr,ejr,OZ,ojr,rjr,tjr,JC,ajr,Or,l$,njr,tCe,sjr,ljr,Fn,ijr,aCe,djr,cjr,nCe,fjr,mjr,sCe,gjr,hjr,pjr,lCe,YC,iCe,_jr,ujr,VZ,bjr,vjr,Fjr,KC,Bze,Wc,ZC,dCe,i$,Tjr,cCe,Mjr,Ize,pr,d$,Ejr,Hc,Cjr,XZ,wjr,Ajr,zZ,Ljr,yjr,xjr,c$,$jr,fCe,kjr,Sjr,Rjr,Qt,f$,Pjr,mCe,Bjr,Ijr,Uc,Njr,gCe,qjr,jjr,QZ,Djr,Gjr,Ojr,e3,Vjr,Vr,m$,Xjr,hCe,zjr,Qjr,Tn,Wjr,pCe,Hjr,Ujr,_Ce,Jjr,Yjr,uCe,Kjr,Zjr,eDr,oe,o3,bCe,oDr,rDr,WZ,tDr,aDr,nDr,r3,vCe,sDr,lDr,HZ,iDr,dDr,cDr,t3,FCe,fDr,mDr,UZ,gDr,hDr,pDr,a3,TCe,_Dr,uDr,JZ,bDr,vDr,FDr,n3,MCe,TDr,MDr,YZ,EDr,CDr,wDr,s3,ECe,ADr,LDr,KZ,yDr,xDr,$Dr,l3,CCe,kDr,SDr,ZZ,RDr,PDr,BDr,i3,wCe,IDr,NDr,eee,qDr,jDr,DDr,d3,ACe,GDr,ODr,oee,VDr,XDr,zDr,c3,LCe,QDr,WDr,ree,HDr,UDr,JDr,f3,yCe,YDr,KDr,tee,ZDr,eGr,oGr,m3,xCe,rGr,tGr,aee,aGr,nGr,sGr,g3,$Ce,lGr,iGr,nee,dGr,cGr,fGr,h3,kCe,mGr,gGr,see,hGr,pGr,_Gr,p3,SCe,uGr,bGr,lee,vGr,FGr,TGr,_3,RCe,MGr,EGr,iee,CGr,wGr,AGr,u3,PCe,LGr,yGr,dee,xGr,$Gr,kGr,b3,BCe,SGr,RGr,cee,PGr,BGr,IGr,v3,ICe,NGr,qGr,fee,jGr,DGr,GGr,F3,NCe,OGr,VGr,mee,XGr,zGr,QGr,T3,qCe,WGr,HGr,gee,UGr,JGr,YGr,M3,jCe,KGr,ZGr,hee,eOr,oOr,rOr,E3,DCe,tOr,aOr,pee,nOr,sOr,lOr,C3,GCe,iOr,dOr,_ee,cOr,fOr,mOr,w3,OCe,gOr,hOr,uee,pOr,_Or,uOr,A3,VCe,bOr,vOr,bee,FOr,TOr,MOr,L3,XCe,EOr,COr,vee,wOr,AOr,LOr,y3,Nze,Jc,x3,zCe,g$,yOr,QCe,xOr,qze,_r,h$,$Or,Yc,kOr,Fee,SOr,ROr,Tee,POr,BOr,IOr,p$,NOr,WCe,qOr,jOr,DOr,Wt,_$,GOr,HCe,OOr,VOr,Kc,XOr,UCe,zOr,QOr,Mee,WOr,HOr,UOr,$3,JOr,Xr,u$,YOr,JCe,KOr,ZOr,Mn,eVr,YCe,oVr,rVr,KCe,tVr,aVr,ZCe,nVr,sVr,lVr,xe,k3,e3e,iVr,dVr,Eee,cVr,fVr,mVr,S3,o3e,gVr,hVr,Cee,pVr,_Vr,uVr,R3,r3e,bVr,vVr,wee,FVr,TVr,MVr,P3,t3e,EVr,CVr,Aee,wVr,AVr,LVr,B3,a3e,yVr,xVr,Lee,$Vr,kVr,SVr,I3,n3e,RVr,PVr,yee,BVr,IVr,NVr,N3,s3e,qVr,jVr,xee,DVr,GVr,OVr,q3,l3e,VVr,XVr,$ee,zVr,QVr,WVr,j3,i3e,HVr,UVr,kee,JVr,YVr,KVr,D3,d3e,ZVr,eXr,See,oXr,rXr,tXr,G3,jze,Zc,O3,c3e,b$,aXr,f3e,nXr,Dze,ur,v$,sXr,ef,lXr,Ree,iXr,dXr,Pee,cXr,fXr,mXr,F$,gXr,m3e,hXr,pXr,_Xr,Ht,T$,uXr,g3e,bXr,vXr,of,FXr,h3e,TXr,MXr,Bee,EXr,CXr,wXr,V3,AXr,zr,M$,LXr,p3e,yXr,xXr,En,$Xr,_3e,kXr,SXr,u3e,RXr,PXr,b3e,BXr,IXr,NXr,Ee,X3,v3e,qXr,jXr,Iee,DXr,GXr,OXr,z3,F3e,VXr,XXr,Nee,zXr,QXr,WXr,Q3,T3e,HXr,UXr,qee,JXr,YXr,KXr,W3,M3e,ZXr,ezr,jee,ozr,rzr,tzr,H3,E3e,azr,nzr,Dee,szr,lzr,izr,U3,C3e,dzr,czr,Gee,fzr,mzr,gzr,J3,w3e,hzr,pzr,Oee,_zr,uzr,bzr,Y3,A3e,vzr,Fzr,Vee,Tzr,Mzr,Ezr,K3,L3e,Czr,wzr,Xee,Azr,Lzr,yzr,Z3,y3e,xzr,$zr,zee,kzr,Szr,Rzr,e5,x3e,Pzr,Bzr,Qee,Izr,Nzr,qzr,o5,$3e,jzr,Dzr,Wee,Gzr,Ozr,Vzr,r5,k3e,Xzr,zzr,Hee,Qzr,Wzr,Hzr,t5,Gze,rf,a5,S3e,E$,Uzr,R3e,Jzr,Oze,br,C$,Yzr,tf,Kzr,Uee,Zzr,eQr,Jee,oQr,rQr,tQr,w$,aQr,P3e,nQr,sQr,lQr,Ut,A$,iQr,B3e,dQr,cQr,af,fQr,I3e,mQr,gQr,Yee,hQr,pQr,_Qr,n5,uQr,Qr,L$,bQr,N3e,vQr,FQr,Cn,TQr,q3e,MQr,EQr,j3e,CQr,wQr,D3e,AQr,LQr,yQr,$e,s5,G3e,xQr,$Qr,Kee,kQr,SQr,RQr,l5,O3e,PQr,BQr,Zee,IQr,NQr,qQr,i5,V3e,jQr,DQr,eoe,GQr,OQr,VQr,d5,X3e,XQr,zQr,ooe,QQr,WQr,HQr,c5,z3e,UQr,JQr,roe,YQr,KQr,ZQr,f5,Q3e,eWr,oWr,toe,rWr,tWr,aWr,m5,W3e,nWr,sWr,aoe,lWr,iWr,dWr,g5,H3e,cWr,fWr,noe,mWr,gWr,hWr,h5,U3e,pWr,_Wr,soe,uWr,bWr,vWr,p5,J3e,FWr,TWr,loe,MWr,EWr,CWr,_5,Vze,nf,u5,Y3e,y$,wWr,K3e,AWr,Xze,vr,x$,LWr,sf,yWr,ioe,xWr,$Wr,doe,kWr,SWr,RWr,$$,PWr,Z3e,BWr,IWr,NWr,Jt,k$,qWr,e5e,jWr,DWr,lf,GWr,o5e,OWr,VWr,coe,XWr,zWr,QWr,b5,WWr,Wr,S$,HWr,r5e,UWr,JWr,wn,YWr,t5e,KWr,ZWr,a5e,eHr,oHr,n5e,rHr,tHr,aHr,ke,v5,s5e,nHr,sHr,foe,lHr,iHr,dHr,F5,l5e,cHr,fHr,moe,mHr,gHr,hHr,T5,i5e,pHr,_Hr,goe,uHr,bHr,vHr,M5,d5e,FHr,THr,hoe,MHr,EHr,CHr,E5,c5e,wHr,AHr,poe,LHr,yHr,xHr,C5,f5e,$Hr,kHr,_oe,SHr,RHr,PHr,w5,m5e,BHr,IHr,uoe,NHr,qHr,jHr,A5,g5e,DHr,GHr,boe,OHr,VHr,XHr,L5,h5e,zHr,QHr,voe,WHr,HHr,UHr,y5,p5e,JHr,YHr,Foe,KHr,ZHr,eUr,x5,zze,df,$5,_5e,R$,oUr,u5e,rUr,Qze,Fr,P$,tUr,cf,aUr,Toe,nUr,sUr,Moe,lUr,iUr,dUr,B$,cUr,b5e,fUr,mUr,gUr,Yt,I$,hUr,v5e,pUr,_Ur,ff,uUr,F5e,bUr,vUr,Eoe,FUr,TUr,MUr,k5,EUr,Hr,N$,CUr,T5e,wUr,AUr,An,LUr,M5e,yUr,xUr,E5e,$Ur,kUr,C5e,SUr,RUr,PUr,Se,S5,w5e,BUr,IUr,Coe,NUr,qUr,jUr,R5,A5e,DUr,GUr,woe,OUr,VUr,XUr,P5,L5e,zUr,QUr,Aoe,WUr,HUr,UUr,B5,y5e,JUr,YUr,Loe,KUr,ZUr,eJr,I5,x5e,oJr,rJr,yoe,tJr,aJr,nJr,N5,$5e,sJr,lJr,xoe,iJr,dJr,cJr,q5,k5e,fJr,mJr,$oe,gJr,hJr,pJr,j5,S5e,_Jr,uJr,koe,bJr,vJr,FJr,D5,R5e,TJr,MJr,Soe,EJr,CJr,wJr,G5,P5e,AJr,LJr,Roe,yJr,xJr,$Jr,O5,Wze,mf,V5,B5e,q$,kJr,I5e,SJr,Hze,Tr,j$,RJr,gf,PJr,Poe,BJr,IJr,Boe,NJr,qJr,jJr,D$,DJr,N5e,GJr,OJr,VJr,Kt,G$,XJr,q5e,zJr,QJr,hf,WJr,j5e,HJr,UJr,Ioe,JJr,YJr,KJr,X5,ZJr,Ur,O$,eYr,D5e,oYr,rYr,Ln,tYr,G5e,aYr,nYr,O5e,sYr,lYr,V5e,iYr,dYr,cYr,Re,z5,X5e,fYr,mYr,Noe,gYr,hYr,pYr,Q5,z5e,_Yr,uYr,qoe,bYr,vYr,FYr,W5,Q5e,TYr,MYr,joe,EYr,CYr,wYr,H5,W5e,AYr,LYr,Doe,yYr,xYr,$Yr,U5,H5e,kYr,SYr,Goe,RYr,PYr,BYr,J5,U5e,IYr,NYr,Ooe,qYr,jYr,DYr,Y5,J5e,GYr,OYr,Voe,VYr,XYr,zYr,K5,Y5e,QYr,WYr,Xoe,HYr,UYr,JYr,Z5,K5e,YYr,KYr,zoe,ZYr,eKr,oKr,e0,Z5e,rKr,tKr,Qoe,aKr,nKr,sKr,o0,Uze,pf,r0,e0e,V$,lKr,o0e,iKr,Jze,Mr,X$,dKr,_f,cKr,Woe,fKr,mKr,Hoe,gKr,hKr,pKr,z$,_Kr,r0e,uKr,bKr,vKr,Zt,Q$,FKr,t0e,TKr,MKr,uf,EKr,a0e,CKr,wKr,Uoe,AKr,LKr,yKr,t0,xKr,Jr,W$,$Kr,n0e,kKr,SKr,yn,RKr,s0e,PKr,BKr,l0e,IKr,NKr,i0e,qKr,jKr,DKr,Ve,a0,d0e,GKr,OKr,Joe,VKr,XKr,zKr,n0,c0e,QKr,WKr,Yoe,HKr,UKr,JKr,s0,f0e,YKr,KKr,Koe,ZKr,eZr,oZr,l0,m0e,rZr,tZr,Zoe,aZr,nZr,sZr,i0,g0e,lZr,iZr,ere,dZr,cZr,fZr,d0,h0e,mZr,gZr,ore,hZr,pZr,_Zr,c0,p0e,uZr,bZr,rre,vZr,FZr,TZr,f0,_0e,MZr,EZr,tre,CZr,wZr,AZr,m0,Yze,bf,g0,u0e,H$,LZr,b0e,yZr,Kze,Er,U$,xZr,vf,$Zr,are,kZr,SZr,nre,RZr,PZr,BZr,J$,IZr,v0e,NZr,qZr,jZr,ea,Y$,DZr,F0e,GZr,OZr,Ff,VZr,T0e,XZr,zZr,sre,QZr,WZr,HZr,h0,UZr,Yr,K$,JZr,M0e,YZr,KZr,xn,ZZr,E0e,eet,oet,C0e,ret,tet,w0e,aet,net,set,Xe,p0,A0e,iet,det,lre,cet,fet,met,_0,L0e,get,het,ire,pet,_et,uet,u0,y0e,bet,vet,dre,Fet,Tet,Met,b0,x0e,Eet,Cet,cre,wet,Aet,Let,v0,$0e,yet,xet,fre,$et,ket,Set,F0,k0e,Ret,Pet,mre,Bet,Iet,Net,T0,S0e,qet,jet,gre,Det,Get,Oet,M0,R0e,Vet,Xet,hre,zet,Qet,Wet,E0,Zze,Tf,C0,P0e,Z$,Het,B0e,Uet,eQe,Cr,ek,Jet,Mf,Yet,pre,Ket,Zet,_re,eot,oot,rot,ok,tot,I0e,aot,not,sot,oa,rk,lot,N0e,iot,dot,Ef,cot,q0e,fot,mot,ure,got,hot,pot,w0,_ot,Kr,tk,uot,j0e,bot,vot,$n,Fot,D0e,Tot,Mot,G0e,Eot,Cot,O0e,wot,Aot,Lot,V0e,A0,X0e,yot,xot,bre,$ot,kot,Sot,L0,oQe,Cf,y0,z0e,ak,Rot,Q0e,Pot,rQe,wr,nk,Bot,wf,Iot,vre,Not,qot,Fre,jot,Dot,Got,sk,Oot,W0e,Vot,Xot,zot,ra,lk,Qot,H0e,Wot,Hot,Af,Uot,U0e,Jot,Yot,Tre,Kot,Zot,ert,x0,ort,Zr,ik,rrt,J0e,trt,art,kn,nrt,Y0e,srt,lrt,K0e,irt,drt,Z0e,crt,frt,mrt,dk,$0,ewe,grt,hrt,Mre,prt,_rt,urt,k0,owe,brt,vrt,Ere,Frt,Trt,Mrt,S0,tQe,Lf,R0,rwe,ck,Ert,twe,Crt,aQe,Ar,fk,wrt,yf,Art,Cre,Lrt,yrt,wre,xrt,$rt,krt,mk,Srt,awe,Rrt,Prt,Brt,ta,gk,Irt,nwe,Nrt,qrt,xf,jrt,swe,Drt,Grt,Are,Ort,Vrt,Xrt,P0,zrt,et,hk,Qrt,lwe,Wrt,Hrt,Sn,Urt,iwe,Jrt,Yrt,dwe,Krt,Zrt,cwe,ett,ott,rtt,fwe,B0,mwe,ttt,att,Lre,ntt,stt,ltt,I0,nQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nL=new re({}),sL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new itt({props:{warning:!0,$$slots:{default:[OQt]},$$scope:{ctx:$}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L613"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L636"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/configuration_auto.py#L759"}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L404"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17826/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L418"}}),Ph=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/tokenization_auto.py#L617"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17826/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),up=new itt({props:{$$slots:{default:[zQt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L89"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new itt({props:{$$slots:{default:[WQt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/processing_auto.py#L256"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L783"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig">JukeboxConfig</a> configuration class: <code>JukeboxModel</code> (Jukebox model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L790"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L805"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L812"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L819"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L828"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L873"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L880"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L866"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L837"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L844"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L889"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L928"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L855"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L935"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L958"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L942"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L949"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L967"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L974"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L921"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),Z7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L896"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L903"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_auto.py#L912"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),m4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),B4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17826/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17826/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17826/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),oL=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),rL=o("AutoConfig"),Bn=o(", "),In=a("a"),tL=o("AutoModel"),$i=o(`, and
`),Nn=a("a"),aL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),BS=o("will create a model that is an instance of "),Si=a("a"),IS=o("BertModel"),NS=o("."),Co=l(),Ra=a("p"),qS=o("There is one class of "),If=a("code"),jS=o("AutoModel"),pHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eXe=l(),Ri=a("h2"),Nf=a("a"),Mae=a("span"),F(nL.$$.fragment),_He=l(),Eae=a("span"),uHe=o("Extending the Auto Classes"),oXe=l(),qn=a("p"),bHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cae=a("code"),vHe=o("NewModel"),FHe=o(", make sure you have a "),wae=a("code"),THe=o("NewModelConfig"),MHe=o(` then you can add those to the auto
classes like this:`),rXe=l(),F(sL.$$.fragment),tXe=l(),DS=a("p"),EHe=o("You will then be able to use the auto classes like you would usually do!"),aXe=l(),F(qf.$$.fragment),nXe=l(),Pi=a("h2"),jf=a("a"),Aae=a("span"),F(lL.$$.fragment),CHe=l(),Lae=a("span"),wHe=o("AutoConfig"),sXe=l(),wo=a("div"),F(iL.$$.fragment),AHe=l(),dL=a("p"),LHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=a("a"),yHe=o("from_pretrained()"),xHe=o(" class method."),$He=l(),cL=a("p"),kHe=o("This class cannot be instantiated directly using "),yae=a("code"),SHe=o("__init__()"),RHe=o(" (throws an error)."),PHe=l(),Lr=a("div"),F(fL.$$.fragment),BHe=l(),xae=a("p"),IHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),NHe=l(),Bi=a("p"),qHe=o("The configuration class to instantiate is selected based on the "),$ae=a("code"),jHe=o("model_type"),DHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kae=a("code"),GHe=o("pretrained_model_name_or_path"),OHe=o(":"),VHe=l(),A=a("ul"),Df=a("li"),Sae=a("strong"),XHe=o("albert"),zHe=o(" \u2014 "),OS=a("a"),QHe=o("AlbertConfig"),WHe=o(" (ALBERT model)"),HHe=l(),Gf=a("li"),Rae=a("strong"),UHe=o("bart"),JHe=o(" \u2014 "),VS=a("a"),YHe=o("BartConfig"),KHe=o(" (BART model)"),ZHe=l(),Of=a("li"),Pae=a("strong"),eUe=o("beit"),oUe=o(" \u2014 "),XS=a("a"),rUe=o("BeitConfig"),tUe=o(" (BEiT model)"),aUe=l(),Vf=a("li"),Bae=a("strong"),nUe=o("bert"),sUe=o(" \u2014 "),zS=a("a"),lUe=o("BertConfig"),iUe=o(" (BERT model)"),dUe=l(),Xf=a("li"),Iae=a("strong"),cUe=o("bert-generation"),fUe=o(" \u2014 "),QS=a("a"),mUe=o("BertGenerationConfig"),gUe=o(" (Bert Generation model)"),hUe=l(),zf=a("li"),Nae=a("strong"),pUe=o("big_bird"),_Ue=o(" \u2014 "),WS=a("a"),uUe=o("BigBirdConfig"),bUe=o(" (BigBird model)"),vUe=l(),Qf=a("li"),qae=a("strong"),FUe=o("bigbird_pegasus"),TUe=o(" \u2014 "),HS=a("a"),MUe=o("BigBirdPegasusConfig"),EUe=o(" (BigBird-Pegasus model)"),CUe=l(),Wf=a("li"),jae=a("strong"),wUe=o("blenderbot"),AUe=o(" \u2014 "),US=a("a"),LUe=o("BlenderbotConfig"),yUe=o(" (Blenderbot model)"),xUe=l(),Hf=a("li"),Dae=a("strong"),$Ue=o("blenderbot-small"),kUe=o(" \u2014 "),JS=a("a"),SUe=o("BlenderbotSmallConfig"),RUe=o(" (BlenderbotSmall model)"),PUe=l(),Uf=a("li"),Gae=a("strong"),BUe=o("bloom"),IUe=o(" \u2014 "),YS=a("a"),NUe=o("BloomConfig"),qUe=o(" (BLOOM model)"),jUe=l(),Jf=a("li"),Oae=a("strong"),DUe=o("camembert"),GUe=o(" \u2014 "),KS=a("a"),OUe=o("CamembertConfig"),VUe=o(" (CamemBERT model)"),XUe=l(),Yf=a("li"),Vae=a("strong"),zUe=o("canine"),QUe=o(" \u2014 "),ZS=a("a"),WUe=o("CanineConfig"),HUe=o(" (CANINE model)"),UUe=l(),Kf=a("li"),Xae=a("strong"),JUe=o("clip"),YUe=o(" \u2014 "),eR=a("a"),KUe=o("CLIPConfig"),ZUe=o(" (CLIP model)"),eJe=l(),Zf=a("li"),zae=a("strong"),oJe=o("codegen"),rJe=o(" \u2014 "),oR=a("a"),tJe=o("CodeGenConfig"),aJe=o(" (CodeGen model)"),nJe=l(),em=a("li"),Qae=a("strong"),sJe=o("convbert"),lJe=o(" \u2014 "),rR=a("a"),iJe=o("ConvBertConfig"),dJe=o(" (ConvBERT model)"),cJe=l(),om=a("li"),Wae=a("strong"),fJe=o("convnext"),mJe=o(" \u2014 "),tR=a("a"),gJe=o("ConvNextConfig"),hJe=o(" (ConvNeXT model)"),pJe=l(),rm=a("li"),Hae=a("strong"),_Je=o("ctrl"),uJe=o(" \u2014 "),aR=a("a"),bJe=o("CTRLConfig"),vJe=o(" (CTRL model)"),FJe=l(),tm=a("li"),Uae=a("strong"),TJe=o("cvt"),MJe=o(" \u2014 "),nR=a("a"),EJe=o("CvtConfig"),CJe=o(" (CvT model)"),wJe=l(),am=a("li"),Jae=a("strong"),AJe=o("data2vec-audio"),LJe=o(" \u2014 "),sR=a("a"),yJe=o("Data2VecAudioConfig"),xJe=o(" (Data2VecAudio model)"),$Je=l(),nm=a("li"),Yae=a("strong"),kJe=o("data2vec-text"),SJe=o(" \u2014 "),lR=a("a"),RJe=o("Data2VecTextConfig"),PJe=o(" (Data2VecText model)"),BJe=l(),sm=a("li"),Kae=a("strong"),IJe=o("data2vec-vision"),NJe=o(" \u2014 "),iR=a("a"),qJe=o("Data2VecVisionConfig"),jJe=o(" (Data2VecVision model)"),DJe=l(),lm=a("li"),Zae=a("strong"),GJe=o("deberta"),OJe=o(" \u2014 "),dR=a("a"),VJe=o("DebertaConfig"),XJe=o(" (DeBERTa model)"),zJe=l(),im=a("li"),ene=a("strong"),QJe=o("deberta-v2"),WJe=o(" \u2014 "),cR=a("a"),HJe=o("DebertaV2Config"),UJe=o(" (DeBERTa-v2 model)"),JJe=l(),dm=a("li"),one=a("strong"),YJe=o("decision_transformer"),KJe=o(" \u2014 "),fR=a("a"),ZJe=o("DecisionTransformerConfig"),eYe=o(" (Decision Transformer model)"),oYe=l(),cm=a("li"),rne=a("strong"),rYe=o("deit"),tYe=o(" \u2014 "),mR=a("a"),aYe=o("DeiTConfig"),nYe=o(" (DeiT model)"),sYe=l(),fm=a("li"),tne=a("strong"),lYe=o("detr"),iYe=o(" \u2014 "),gR=a("a"),dYe=o("DetrConfig"),cYe=o(" (DETR model)"),fYe=l(),mm=a("li"),ane=a("strong"),mYe=o("distilbert"),gYe=o(" \u2014 "),hR=a("a"),hYe=o("DistilBertConfig"),pYe=o(" (DistilBERT model)"),_Ye=l(),gm=a("li"),nne=a("strong"),uYe=o("dpr"),bYe=o(" \u2014 "),pR=a("a"),vYe=o("DPRConfig"),FYe=o(" (DPR model)"),TYe=l(),hm=a("li"),sne=a("strong"),MYe=o("dpt"),EYe=o(" \u2014 "),_R=a("a"),CYe=o("DPTConfig"),wYe=o(" (DPT model)"),AYe=l(),pm=a("li"),lne=a("strong"),LYe=o("electra"),yYe=o(" \u2014 "),uR=a("a"),xYe=o("ElectraConfig"),$Ye=o(" (ELECTRA model)"),kYe=l(),_m=a("li"),ine=a("strong"),SYe=o("encoder-decoder"),RYe=o(" \u2014 "),bR=a("a"),PYe=o("EncoderDecoderConfig"),BYe=o(" (Encoder decoder model)"),IYe=l(),um=a("li"),dne=a("strong"),NYe=o("flaubert"),qYe=o(" \u2014 "),vR=a("a"),jYe=o("FlaubertConfig"),DYe=o(" (FlauBERT model)"),GYe=l(),bm=a("li"),cne=a("strong"),OYe=o("flava"),VYe=o(" \u2014 "),FR=a("a"),XYe=o("FlavaConfig"),zYe=o(" (FLAVA model)"),QYe=l(),vm=a("li"),fne=a("strong"),WYe=o("fnet"),HYe=o(" \u2014 "),TR=a("a"),UYe=o("FNetConfig"),JYe=o(" (FNet model)"),YYe=l(),Fm=a("li"),mne=a("strong"),KYe=o("fsmt"),ZYe=o(" \u2014 "),MR=a("a"),eKe=o("FSMTConfig"),oKe=o(" (FairSeq Machine-Translation model)"),rKe=l(),Tm=a("li"),gne=a("strong"),tKe=o("funnel"),aKe=o(" \u2014 "),ER=a("a"),nKe=o("FunnelConfig"),sKe=o(" (Funnel Transformer model)"),lKe=l(),Mm=a("li"),hne=a("strong"),iKe=o("glpn"),dKe=o(" \u2014 "),CR=a("a"),cKe=o("GLPNConfig"),fKe=o(" (GLPN model)"),mKe=l(),Em=a("li"),pne=a("strong"),gKe=o("gpt2"),hKe=o(" \u2014 "),wR=a("a"),pKe=o("GPT2Config"),_Ke=o(" (OpenAI GPT-2 model)"),uKe=l(),Cm=a("li"),_ne=a("strong"),bKe=o("gpt_neo"),vKe=o(" \u2014 "),AR=a("a"),FKe=o("GPTNeoConfig"),TKe=o(" (GPT Neo model)"),MKe=l(),wm=a("li"),une=a("strong"),EKe=o("gpt_neox"),CKe=o(" \u2014 "),LR=a("a"),wKe=o("GPTNeoXConfig"),AKe=o(" (GPT NeoX model)"),LKe=l(),Am=a("li"),bne=a("strong"),yKe=o("gptj"),xKe=o(" \u2014 "),yR=a("a"),$Ke=o("GPTJConfig"),kKe=o(" (GPT-J model)"),SKe=l(),Lm=a("li"),vne=a("strong"),RKe=o("groupvit"),PKe=o(" \u2014 "),xR=a("a"),BKe=o("GroupViTConfig"),IKe=o(" (GroupViT model)"),NKe=l(),ym=a("li"),Fne=a("strong"),qKe=o("hubert"),jKe=o(" \u2014 "),$R=a("a"),DKe=o("HubertConfig"),GKe=o(" (Hubert model)"),OKe=l(),xm=a("li"),Tne=a("strong"),VKe=o("ibert"),XKe=o(" \u2014 "),kR=a("a"),zKe=o("IBertConfig"),QKe=o(" (I-BERT model)"),WKe=l(),$m=a("li"),Mne=a("strong"),HKe=o("imagegpt"),UKe=o(" \u2014 "),SR=a("a"),JKe=o("ImageGPTConfig"),YKe=o(" (ImageGPT model)"),KKe=l(),km=a("li"),Ene=a("strong"),ZKe=o("jukebox"),eZe=o(" \u2014 "),RR=a("a"),oZe=o("JukeboxConfig"),rZe=o(" (Jukebox model)"),tZe=l(),Sm=a("li"),Cne=a("strong"),aZe=o("layoutlm"),nZe=o(" \u2014 "),PR=a("a"),sZe=o("LayoutLMConfig"),lZe=o(" (LayoutLM model)"),iZe=l(),Rm=a("li"),wne=a("strong"),dZe=o("layoutlmv2"),cZe=o(" \u2014 "),BR=a("a"),fZe=o("LayoutLMv2Config"),mZe=o(" (LayoutLMv2 model)"),gZe=l(),Pm=a("li"),Ane=a("strong"),hZe=o("layoutlmv3"),pZe=o(" \u2014 "),IR=a("a"),_Ze=o("LayoutLMv3Config"),uZe=o(" (LayoutLMv3 model)"),bZe=l(),Bm=a("li"),Lne=a("strong"),vZe=o("led"),FZe=o(" \u2014 "),NR=a("a"),TZe=o("LEDConfig"),MZe=o(" (LED model)"),EZe=l(),Im=a("li"),yne=a("strong"),CZe=o("levit"),wZe=o(" \u2014 "),qR=a("a"),AZe=o("LevitConfig"),LZe=o(" (LeViT model)"),yZe=l(),Nm=a("li"),xne=a("strong"),xZe=o("longformer"),$Ze=o(" \u2014 "),jR=a("a"),kZe=o("LongformerConfig"),SZe=o(" (Longformer model)"),RZe=l(),qm=a("li"),$ne=a("strong"),PZe=o("longt5"),BZe=o(" \u2014 "),DR=a("a"),IZe=o("LongT5Config"),NZe=o(" (LongT5 model)"),qZe=l(),jm=a("li"),kne=a("strong"),jZe=o("luke"),DZe=o(" \u2014 "),GR=a("a"),GZe=o("LukeConfig"),OZe=o(" (LUKE model)"),VZe=l(),Dm=a("li"),Sne=a("strong"),XZe=o("lxmert"),zZe=o(" \u2014 "),OR=a("a"),QZe=o("LxmertConfig"),WZe=o(" (LXMERT model)"),HZe=l(),Gm=a("li"),Rne=a("strong"),UZe=o("m2m_100"),JZe=o(" \u2014 "),VR=a("a"),YZe=o("M2M100Config"),KZe=o(" (M2M100 model)"),ZZe=l(),Om=a("li"),Pne=a("strong"),eeo=o("marian"),oeo=o(" \u2014 "),XR=a("a"),reo=o("MarianConfig"),teo=o(" (Marian model)"),aeo=l(),Vm=a("li"),Bne=a("strong"),neo=o("maskformer"),seo=o(" \u2014 "),zR=a("a"),leo=o("MaskFormerConfig"),ieo=o(" (MaskFormer model)"),deo=l(),Xm=a("li"),Ine=a("strong"),ceo=o("mbart"),feo=o(" \u2014 "),QR=a("a"),meo=o("MBartConfig"),geo=o(" (mBART model)"),heo=l(),zm=a("li"),Nne=a("strong"),peo=o("mctct"),_eo=o(" \u2014 "),WR=a("a"),ueo=o("MCTCTConfig"),beo=o(" (M-CTC-T model)"),veo=l(),Qm=a("li"),qne=a("strong"),Feo=o("megatron-bert"),Teo=o(" \u2014 "),HR=a("a"),Meo=o("MegatronBertConfig"),Eeo=o(" (Megatron-BERT model)"),Ceo=l(),Wm=a("li"),jne=a("strong"),weo=o("mobilebert"),Aeo=o(" \u2014 "),UR=a("a"),Leo=o("MobileBertConfig"),yeo=o(" (MobileBERT model)"),xeo=l(),Hm=a("li"),Dne=a("strong"),$eo=o("mobilevit"),keo=o(" \u2014 "),JR=a("a"),Seo=o("MobileViTConfig"),Reo=o(" (MobileViT model)"),Peo=l(),Um=a("li"),Gne=a("strong"),Beo=o("mpnet"),Ieo=o(" \u2014 "),YR=a("a"),Neo=o("MPNetConfig"),qeo=o(" (MPNet model)"),jeo=l(),Jm=a("li"),One=a("strong"),Deo=o("mt5"),Geo=o(" \u2014 "),KR=a("a"),Oeo=o("MT5Config"),Veo=o(" (MT5 model)"),Xeo=l(),Ym=a("li"),Vne=a("strong"),zeo=o("mvp"),Qeo=o(" \u2014 "),ZR=a("a"),Weo=o("MvpConfig"),Heo=o(" (MVP model)"),Ueo=l(),Km=a("li"),Xne=a("strong"),Jeo=o("nezha"),Yeo=o(" \u2014 "),eP=a("a"),Keo=o("NezhaConfig"),Zeo=o(" (Nezha model)"),eoo=l(),Zm=a("li"),zne=a("strong"),ooo=o("nystromformer"),roo=o(" \u2014 "),oP=a("a"),too=o("NystromformerConfig"),aoo=o(" (Nystr\xF6mformer model)"),noo=l(),eg=a("li"),Qne=a("strong"),soo=o("openai-gpt"),loo=o(" \u2014 "),rP=a("a"),ioo=o("OpenAIGPTConfig"),doo=o(" (OpenAI GPT model)"),coo=l(),og=a("li"),Wne=a("strong"),foo=o("opt"),moo=o(" \u2014 "),tP=a("a"),goo=o("OPTConfig"),hoo=o(" (OPT model)"),poo=l(),rg=a("li"),Hne=a("strong"),_oo=o("pegasus"),uoo=o(" \u2014 "),aP=a("a"),boo=o("PegasusConfig"),voo=o(" (Pegasus model)"),Foo=l(),tg=a("li"),Une=a("strong"),Too=o("perceiver"),Moo=o(" \u2014 "),nP=a("a"),Eoo=o("PerceiverConfig"),Coo=o(" (Perceiver model)"),woo=l(),ag=a("li"),Jne=a("strong"),Aoo=o("plbart"),Loo=o(" \u2014 "),sP=a("a"),yoo=o("PLBartConfig"),xoo=o(" (PLBart model)"),$oo=l(),ng=a("li"),Yne=a("strong"),koo=o("poolformer"),Soo=o(" \u2014 "),lP=a("a"),Roo=o("PoolFormerConfig"),Poo=o(" (PoolFormer model)"),Boo=l(),sg=a("li"),Kne=a("strong"),Ioo=o("prophetnet"),Noo=o(" \u2014 "),iP=a("a"),qoo=o("ProphetNetConfig"),joo=o(" (ProphetNet model)"),Doo=l(),lg=a("li"),Zne=a("strong"),Goo=o("qdqbert"),Ooo=o(" \u2014 "),dP=a("a"),Voo=o("QDQBertConfig"),Xoo=o(" (QDQBert model)"),zoo=l(),ig=a("li"),ese=a("strong"),Qoo=o("rag"),Woo=o(" \u2014 "),cP=a("a"),Hoo=o("RagConfig"),Uoo=o(" (RAG model)"),Joo=l(),dg=a("li"),ose=a("strong"),Yoo=o("realm"),Koo=o(" \u2014 "),fP=a("a"),Zoo=o("RealmConfig"),ero=o(" (REALM model)"),oro=l(),cg=a("li"),rse=a("strong"),rro=o("reformer"),tro=o(" \u2014 "),mP=a("a"),aro=o("ReformerConfig"),nro=o(" (Reformer model)"),sro=l(),fg=a("li"),tse=a("strong"),lro=o("regnet"),iro=o(" \u2014 "),gP=a("a"),dro=o("RegNetConfig"),cro=o(" (RegNet model)"),fro=l(),mg=a("li"),ase=a("strong"),mro=o("rembert"),gro=o(" \u2014 "),hP=a("a"),hro=o("RemBertConfig"),pro=o(" (RemBERT model)"),_ro=l(),gg=a("li"),nse=a("strong"),uro=o("resnet"),bro=o(" \u2014 "),pP=a("a"),vro=o("ResNetConfig"),Fro=o(" (ResNet model)"),Tro=l(),hg=a("li"),sse=a("strong"),Mro=o("retribert"),Ero=o(" \u2014 "),_P=a("a"),Cro=o("RetriBertConfig"),wro=o(" (RetriBERT model)"),Aro=l(),pg=a("li"),lse=a("strong"),Lro=o("roberta"),yro=o(" \u2014 "),uP=a("a"),xro=o("RobertaConfig"),$ro=o(" (RoBERTa model)"),kro=l(),_g=a("li"),ise=a("strong"),Sro=o("roformer"),Rro=o(" \u2014 "),bP=a("a"),Pro=o("RoFormerConfig"),Bro=o(" (RoFormer model)"),Iro=l(),ug=a("li"),dse=a("strong"),Nro=o("segformer"),qro=o(" \u2014 "),vP=a("a"),jro=o("SegformerConfig"),Dro=o(" (SegFormer model)"),Gro=l(),bg=a("li"),cse=a("strong"),Oro=o("sew"),Vro=o(" \u2014 "),FP=a("a"),Xro=o("SEWConfig"),zro=o(" (SEW model)"),Qro=l(),vg=a("li"),fse=a("strong"),Wro=o("sew-d"),Hro=o(" \u2014 "),TP=a("a"),Uro=o("SEWDConfig"),Jro=o(" (SEW-D model)"),Yro=l(),Fg=a("li"),mse=a("strong"),Kro=o("speech-encoder-decoder"),Zro=o(" \u2014 "),MP=a("a"),eto=o("SpeechEncoderDecoderConfig"),oto=o(" (Speech Encoder decoder model)"),rto=l(),Tg=a("li"),gse=a("strong"),tto=o("speech_to_text"),ato=o(" \u2014 "),EP=a("a"),nto=o("Speech2TextConfig"),sto=o(" (Speech2Text model)"),lto=l(),Mg=a("li"),hse=a("strong"),ito=o("speech_to_text_2"),dto=o(" \u2014 "),CP=a("a"),cto=o("Speech2Text2Config"),fto=o(" (Speech2Text2 model)"),mto=l(),Eg=a("li"),pse=a("strong"),gto=o("splinter"),hto=o(" \u2014 "),wP=a("a"),pto=o("SplinterConfig"),_to=o(" (Splinter model)"),uto=l(),Cg=a("li"),_se=a("strong"),bto=o("squeezebert"),vto=o(" \u2014 "),AP=a("a"),Fto=o("SqueezeBertConfig"),Tto=o(" (SqueezeBERT model)"),Mto=l(),wg=a("li"),use=a("strong"),Eto=o("swin"),Cto=o(" \u2014 "),LP=a("a"),wto=o("SwinConfig"),Ato=o(" (Swin Transformer model)"),Lto=l(),Ag=a("li"),bse=a("strong"),yto=o("t5"),xto=o(" \u2014 "),yP=a("a"),$to=o("T5Config"),kto=o(" (T5 model)"),Sto=l(),Lg=a("li"),vse=a("strong"),Rto=o("tapas"),Pto=o(" \u2014 "),xP=a("a"),Bto=o("TapasConfig"),Ito=o(" (TAPAS model)"),Nto=l(),yg=a("li"),Fse=a("strong"),qto=o("trajectory_transformer"),jto=o(" \u2014 "),$P=a("a"),Dto=o("TrajectoryTransformerConfig"),Gto=o(" (Trajectory Transformer model)"),Oto=l(),xg=a("li"),Tse=a("strong"),Vto=o("transfo-xl"),Xto=o(" \u2014 "),kP=a("a"),zto=o("TransfoXLConfig"),Qto=o(" (Transformer-XL model)"),Wto=l(),$g=a("li"),Mse=a("strong"),Hto=o("trocr"),Uto=o(" \u2014 "),SP=a("a"),Jto=o("TrOCRConfig"),Yto=o(" (TrOCR model)"),Kto=l(),kg=a("li"),Ese=a("strong"),Zto=o("unispeech"),eao=o(" \u2014 "),RP=a("a"),oao=o("UniSpeechConfig"),rao=o(" (UniSpeech model)"),tao=l(),Sg=a("li"),Cse=a("strong"),aao=o("unispeech-sat"),nao=o(" \u2014 "),PP=a("a"),sao=o("UniSpeechSatConfig"),lao=o(" (UniSpeechSat model)"),iao=l(),Rg=a("li"),wse=a("strong"),dao=o("van"),cao=o(" \u2014 "),BP=a("a"),fao=o("VanConfig"),mao=o(" (VAN model)"),gao=l(),Pg=a("li"),Ase=a("strong"),hao=o("vilt"),pao=o(" \u2014 "),IP=a("a"),_ao=o("ViltConfig"),uao=o(" (ViLT model)"),bao=l(),Bg=a("li"),Lse=a("strong"),vao=o("vision-encoder-decoder"),Fao=o(" \u2014 "),NP=a("a"),Tao=o("VisionEncoderDecoderConfig"),Mao=o(" (Vision Encoder decoder model)"),Eao=l(),Ig=a("li"),yse=a("strong"),Cao=o("vision-text-dual-encoder"),wao=o(" \u2014 "),qP=a("a"),Aao=o("VisionTextDualEncoderConfig"),Lao=o(" (VisionTextDualEncoder model)"),yao=l(),Ng=a("li"),xse=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),jP=a("a"),kao=o("VisualBertConfig"),Sao=o(" (VisualBERT model)"),Rao=l(),qg=a("li"),$se=a("strong"),Pao=o("vit"),Bao=o(" \u2014 "),DP=a("a"),Iao=o("ViTConfig"),Nao=o(" (ViT model)"),qao=l(),jg=a("li"),kse=a("strong"),jao=o("vit_mae"),Dao=o(" \u2014 "),GP=a("a"),Gao=o("ViTMAEConfig"),Oao=o(" (ViTMAE model)"),Vao=l(),Dg=a("li"),Sse=a("strong"),Xao=o("wav2vec2"),zao=o(" \u2014 "),OP=a("a"),Qao=o("Wav2Vec2Config"),Wao=o(" (Wav2Vec2 model)"),Hao=l(),Gg=a("li"),Rse=a("strong"),Uao=o("wav2vec2-conformer"),Jao=o(" \u2014 "),VP=a("a"),Yao=o("Wav2Vec2ConformerConfig"),Kao=o(" (Wav2Vec2-Conformer model)"),Zao=l(),Og=a("li"),Pse=a("strong"),eno=o("wavlm"),ono=o(" \u2014 "),XP=a("a"),rno=o("WavLMConfig"),tno=o(" (WavLM model)"),ano=l(),Vg=a("li"),Bse=a("strong"),nno=o("xglm"),sno=o(" \u2014 "),zP=a("a"),lno=o("XGLMConfig"),ino=o(" (XGLM model)"),dno=l(),Xg=a("li"),Ise=a("strong"),cno=o("xlm"),fno=o(" \u2014 "),QP=a("a"),mno=o("XLMConfig"),gno=o(" (XLM model)"),hno=l(),zg=a("li"),Nse=a("strong"),pno=o("xlm-prophetnet"),_no=o(" \u2014 "),WP=a("a"),uno=o("XLMProphetNetConfig"),bno=o(" (XLM-ProphetNet model)"),vno=l(),Qg=a("li"),qse=a("strong"),Fno=o("xlm-roberta"),Tno=o(" \u2014 "),HP=a("a"),Mno=o("XLMRobertaConfig"),Eno=o(" (XLM-RoBERTa model)"),Cno=l(),Wg=a("li"),jse=a("strong"),wno=o("xlm-roberta-xl"),Ano=o(" \u2014 "),UP=a("a"),Lno=o("XLMRobertaXLConfig"),yno=o(" (XLM-RoBERTa-XL model)"),xno=l(),Hg=a("li"),Dse=a("strong"),$no=o("xlnet"),kno=o(" \u2014 "),JP=a("a"),Sno=o("XLNetConfig"),Rno=o(" (XLNet model)"),Pno=l(),Ug=a("li"),Gse=a("strong"),Bno=o("yolos"),Ino=o(" \u2014 "),YP=a("a"),Nno=o("YolosConfig"),qno=o(" (YOLOS model)"),jno=l(),Jg=a("li"),Ose=a("strong"),Dno=o("yoso"),Gno=o(" \u2014 "),KP=a("a"),Ono=o("YosoConfig"),Vno=o(" (YOSO model)"),Xno=l(),F(Yg.$$.fragment),zno=l(),Kg=a("div"),F(mL.$$.fragment),Qno=l(),Vse=a("p"),Wno=o("Register a new configuration for this class."),lXe=l(),Ii=a("h2"),Zg=a("a"),Xse=a("span"),F(gL.$$.fragment),Hno=l(),zse=a("span"),Uno=o("AutoTokenizer"),iXe=l(),Ao=a("div"),F(hL.$$.fragment),Jno=l(),pL=a("p"),Yno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=a("a"),Kno=o("AutoTokenizer.from_pretrained()"),Zno=o(" class method."),eso=l(),_L=a("p"),oso=o("This class cannot be instantiated directly using "),Qse=a("code"),rso=o("__init__()"),tso=o(" (throws an error)."),aso=l(),yr=a("div"),F(uL.$$.fragment),nso=l(),Wse=a("p"),sso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lso=l(),Pa=a("p"),iso=o("The tokenizer class to instantiate is selected based on the "),Hse=a("code"),dso=o("model_type"),cso=o(` property of the config object (either
passed as an argument or loaded from `),Use=a("code"),fso=o("pretrained_model_name_or_path"),mso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=a("code"),gso=o("pretrained_model_name_or_path"),hso=o(":"),pso=l(),k=a("ul"),jn=a("li"),Yse=a("strong"),_so=o("albert"),uso=o(" \u2014 "),eB=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),oB=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (ALBERT model)"),Mso=l(),Dn=a("li"),Kse=a("strong"),Eso=o("bart"),Cso=o(" \u2014 "),rB=a("a"),wso=o("BartTokenizer"),Aso=o(" or "),tB=a("a"),Lso=o("BartTokenizerFast"),yso=o(" (BART model)"),xso=l(),Gn=a("li"),Zse=a("strong"),$so=o("barthez"),kso=o(" \u2014 "),aB=a("a"),Sso=o("BarthezTokenizer"),Rso=o(" or "),nB=a("a"),Pso=o("BarthezTokenizerFast"),Bso=o(" (BARThez model)"),Iso=l(),eh=a("li"),ele=a("strong"),Nso=o("bartpho"),qso=o(" \u2014 "),sB=a("a"),jso=o("BartphoTokenizer"),Dso=o(" (BARTpho model)"),Gso=l(),On=a("li"),ole=a("strong"),Oso=o("bert"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("BertTokenizer"),zso=o(" or "),iB=a("a"),Qso=o("BertTokenizerFast"),Wso=o(" (BERT model)"),Hso=l(),oh=a("li"),rle=a("strong"),Uso=o("bert-generation"),Jso=o(" \u2014 "),dB=a("a"),Yso=o("BertGenerationTokenizer"),Kso=o(" (Bert Generation model)"),Zso=l(),rh=a("li"),tle=a("strong"),elo=o("bert-japanese"),olo=o(" \u2014 "),cB=a("a"),rlo=o("BertJapaneseTokenizer"),tlo=o(" (BertJapanese model)"),alo=l(),th=a("li"),ale=a("strong"),nlo=o("bertweet"),slo=o(" \u2014 "),fB=a("a"),llo=o("BertweetTokenizer"),ilo=o(" (BERTweet model)"),dlo=l(),Vn=a("li"),nle=a("strong"),clo=o("big_bird"),flo=o(" \u2014 "),mB=a("a"),mlo=o("BigBirdTokenizer"),glo=o(" or "),gB=a("a"),hlo=o("BigBirdTokenizerFast"),plo=o(" (BigBird model)"),_lo=l(),Xn=a("li"),sle=a("strong"),ulo=o("bigbird_pegasus"),blo=o(" \u2014 "),hB=a("a"),vlo=o("PegasusTokenizer"),Flo=o(" or "),pB=a("a"),Tlo=o("PegasusTokenizerFast"),Mlo=o(" (BigBird-Pegasus model)"),Elo=l(),zn=a("li"),lle=a("strong"),Clo=o("blenderbot"),wlo=o(" \u2014 "),_B=a("a"),Alo=o("BlenderbotTokenizer"),Llo=o(" or "),uB=a("a"),ylo=o("BlenderbotTokenizerFast"),xlo=o(" (Blenderbot model)"),$lo=l(),ah=a("li"),ile=a("strong"),klo=o("blenderbot-small"),Slo=o(" \u2014 "),bB=a("a"),Rlo=o("BlenderbotSmallTokenizer"),Plo=o(" (BlenderbotSmall model)"),Blo=l(),nh=a("li"),dle=a("strong"),Ilo=o("bloom"),Nlo=o(" \u2014 "),vB=a("a"),qlo=o("BloomTokenizerFast"),jlo=o(" (BLOOM model)"),Dlo=l(),sh=a("li"),cle=a("strong"),Glo=o("byt5"),Olo=o(" \u2014 "),FB=a("a"),Vlo=o("ByT5Tokenizer"),Xlo=o(" (ByT5 model)"),zlo=l(),Qn=a("li"),fle=a("strong"),Qlo=o("camembert"),Wlo=o(" \u2014 "),TB=a("a"),Hlo=o("CamembertTokenizer"),Ulo=o(" or "),MB=a("a"),Jlo=o("CamembertTokenizerFast"),Ylo=o(" (CamemBERT model)"),Klo=l(),lh=a("li"),mle=a("strong"),Zlo=o("canine"),eio=o(" \u2014 "),EB=a("a"),oio=o("CanineTokenizer"),rio=o(" (CANINE model)"),tio=l(),Wn=a("li"),gle=a("strong"),aio=o("clip"),nio=o(" \u2014 "),CB=a("a"),sio=o("CLIPTokenizer"),lio=o(" or "),wB=a("a"),iio=o("CLIPTokenizerFast"),dio=o(" (CLIP model)"),cio=l(),Hn=a("li"),hle=a("strong"),fio=o("codegen"),mio=o(" \u2014 "),AB=a("a"),gio=o("CodeGenTokenizer"),hio=o(" or "),LB=a("a"),pio=o("CodeGenTokenizerFast"),_io=o(" (CodeGen model)"),uio=l(),Un=a("li"),ple=a("strong"),bio=o("convbert"),vio=o(" \u2014 "),yB=a("a"),Fio=o("ConvBertTokenizer"),Tio=o(" or "),xB=a("a"),Mio=o("ConvBertTokenizerFast"),Eio=o(" (ConvBERT model)"),Cio=l(),Jn=a("li"),_le=a("strong"),wio=o("cpm"),Aio=o(" \u2014 "),$B=a("a"),Lio=o("CpmTokenizer"),yio=o(" or "),kB=a("a"),xio=o("CpmTokenizerFast"),$io=o(" (CPM model)"),kio=l(),ih=a("li"),ule=a("strong"),Sio=o("ctrl"),Rio=o(" \u2014 "),SB=a("a"),Pio=o("CTRLTokenizer"),Bio=o(" (CTRL model)"),Iio=l(),Yn=a("li"),ble=a("strong"),Nio=o("data2vec-text"),qio=o(" \u2014 "),RB=a("a"),jio=o("RobertaTokenizer"),Dio=o(" or "),PB=a("a"),Gio=o("RobertaTokenizerFast"),Oio=o(" (Data2VecText model)"),Vio=l(),Kn=a("li"),vle=a("strong"),Xio=o("deberta"),zio=o(" \u2014 "),BB=a("a"),Qio=o("DebertaTokenizer"),Wio=o(" or "),IB=a("a"),Hio=o("DebertaTokenizerFast"),Uio=o(" (DeBERTa model)"),Jio=l(),Zn=a("li"),Fle=a("strong"),Yio=o("deberta-v2"),Kio=o(" \u2014 "),NB=a("a"),Zio=o("DebertaV2Tokenizer"),edo=o(" or "),qB=a("a"),odo=o("DebertaV2TokenizerFast"),rdo=o(" (DeBERTa-v2 model)"),tdo=l(),es=a("li"),Tle=a("strong"),ado=o("distilbert"),ndo=o(" \u2014 "),jB=a("a"),sdo=o("DistilBertTokenizer"),ldo=o(" or "),DB=a("a"),ido=o("DistilBertTokenizerFast"),ddo=o(" (DistilBERT model)"),cdo=l(),os=a("li"),Mle=a("strong"),fdo=o("dpr"),mdo=o(" \u2014 "),GB=a("a"),gdo=o("DPRQuestionEncoderTokenizer"),hdo=o(" or "),OB=a("a"),pdo=o("DPRQuestionEncoderTokenizerFast"),_do=o(" (DPR model)"),udo=l(),rs=a("li"),Ele=a("strong"),bdo=o("electra"),vdo=o(" \u2014 "),VB=a("a"),Fdo=o("ElectraTokenizer"),Tdo=o(" or "),XB=a("a"),Mdo=o("ElectraTokenizerFast"),Edo=o(" (ELECTRA model)"),Cdo=l(),dh=a("li"),Cle=a("strong"),wdo=o("flaubert"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("FlaubertTokenizer"),ydo=o(" (FlauBERT model)"),xdo=l(),ts=a("li"),wle=a("strong"),$do=o("fnet"),kdo=o(" \u2014 "),QB=a("a"),Sdo=o("FNetTokenizer"),Rdo=o(" or "),WB=a("a"),Pdo=o("FNetTokenizerFast"),Bdo=o(" (FNet model)"),Ido=l(),ch=a("li"),Ale=a("strong"),Ndo=o("fsmt"),qdo=o(" \u2014 "),HB=a("a"),jdo=o("FSMTTokenizer"),Ddo=o(" (FairSeq Machine-Translation model)"),Gdo=l(),as=a("li"),Lle=a("strong"),Odo=o("funnel"),Vdo=o(" \u2014 "),UB=a("a"),Xdo=o("FunnelTokenizer"),zdo=o(" or "),JB=a("a"),Qdo=o("FunnelTokenizerFast"),Wdo=o(" (Funnel Transformer model)"),Hdo=l(),ns=a("li"),yle=a("strong"),Udo=o("gpt2"),Jdo=o(" \u2014 "),YB=a("a"),Ydo=o("GPT2Tokenizer"),Kdo=o(" or "),KB=a("a"),Zdo=o("GPT2TokenizerFast"),eco=o(" (OpenAI GPT-2 model)"),oco=l(),ss=a("li"),xle=a("strong"),rco=o("gpt_neo"),tco=o(" \u2014 "),ZB=a("a"),aco=o("GPT2Tokenizer"),nco=o(" or "),eI=a("a"),sco=o("GPT2TokenizerFast"),lco=o(" (GPT Neo model)"),ico=l(),fh=a("li"),$le=a("strong"),dco=o("gpt_neox"),cco=o(" \u2014 "),oI=a("a"),fco=o("GPTNeoXTokenizerFast"),mco=o(" (GPT NeoX model)"),gco=l(),ls=a("li"),kle=a("strong"),hco=o("gptj"),pco=o(" \u2014 "),rI=a("a"),_co=o("GPT2Tokenizer"),uco=o(" or "),tI=a("a"),bco=o("GPT2TokenizerFast"),vco=o(" (GPT-J model)"),Fco=l(),is=a("li"),Sle=a("strong"),Tco=o("groupvit"),Mco=o(" \u2014 "),aI=a("a"),Eco=o("CLIPTokenizer"),Cco=o(" or "),nI=a("a"),wco=o("CLIPTokenizerFast"),Aco=o(" (GroupViT model)"),Lco=l(),ds=a("li"),Rle=a("strong"),yco=o("herbert"),xco=o(" \u2014 "),sI=a("a"),$co=o("HerbertTokenizer"),kco=o(" or "),lI=a("a"),Sco=o("HerbertTokenizerFast"),Rco=o(" (HerBERT model)"),Pco=l(),mh=a("li"),Ple=a("strong"),Bco=o("hubert"),Ico=o(" \u2014 "),iI=a("a"),Nco=o("Wav2Vec2CTCTokenizer"),qco=o(" (Hubert model)"),jco=l(),cs=a("li"),Ble=a("strong"),Dco=o("ibert"),Gco=o(" \u2014 "),dI=a("a"),Oco=o("RobertaTokenizer"),Vco=o(" or "),cI=a("a"),Xco=o("RobertaTokenizerFast"),zco=o(" (I-BERT model)"),Qco=l(),gh=a("li"),Ile=a("strong"),Wco=o("jukebox"),Hco=o(" \u2014 "),Nle=a("code"),Uco=o("JukeboxTokenizer"),Jco=o(" (Jukebox model)"),Yco=l(),fs=a("li"),qle=a("strong"),Kco=o("layoutlm"),Zco=o(" \u2014 "),fI=a("a"),efo=o("LayoutLMTokenizer"),ofo=o(" or "),mI=a("a"),rfo=o("LayoutLMTokenizerFast"),tfo=o(" (LayoutLM model)"),afo=l(),ms=a("li"),jle=a("strong"),nfo=o("layoutlmv2"),sfo=o(" \u2014 "),gI=a("a"),lfo=o("LayoutLMv2Tokenizer"),ifo=o(" or "),hI=a("a"),dfo=o("LayoutLMv2TokenizerFast"),cfo=o(" (LayoutLMv2 model)"),ffo=l(),gs=a("li"),Dle=a("strong"),mfo=o("layoutlmv3"),gfo=o(" \u2014 "),pI=a("a"),hfo=o("LayoutLMv3Tokenizer"),pfo=o(" or "),_I=a("a"),_fo=o("LayoutLMv3TokenizerFast"),ufo=o(" (LayoutLMv3 model)"),bfo=l(),hs=a("li"),Gle=a("strong"),vfo=o("layoutxlm"),Ffo=o(" \u2014 "),uI=a("a"),Tfo=o("LayoutXLMTokenizer"),Mfo=o(" or "),bI=a("a"),Efo=o("LayoutXLMTokenizerFast"),Cfo=o(" (LayoutXLM model)"),wfo=l(),ps=a("li"),Ole=a("strong"),Afo=o("led"),Lfo=o(" \u2014 "),vI=a("a"),yfo=o("LEDTokenizer"),xfo=o(" or "),FI=a("a"),$fo=o("LEDTokenizerFast"),kfo=o(" (LED model)"),Sfo=l(),_s=a("li"),Vle=a("strong"),Rfo=o("longformer"),Pfo=o(" \u2014 "),TI=a("a"),Bfo=o("LongformerTokenizer"),Ifo=o(" or "),MI=a("a"),Nfo=o("LongformerTokenizerFast"),qfo=o(" (Longformer model)"),jfo=l(),us=a("li"),Xle=a("strong"),Dfo=o("longt5"),Gfo=o(" \u2014 "),EI=a("a"),Ofo=o("T5Tokenizer"),Vfo=o(" or "),CI=a("a"),Xfo=o("T5TokenizerFast"),zfo=o(" (LongT5 model)"),Qfo=l(),hh=a("li"),zle=a("strong"),Wfo=o("luke"),Hfo=o(" \u2014 "),wI=a("a"),Ufo=o("LukeTokenizer"),Jfo=o(" (LUKE model)"),Yfo=l(),bs=a("li"),Qle=a("strong"),Kfo=o("lxmert"),Zfo=o(" \u2014 "),AI=a("a"),emo=o("LxmertTokenizer"),omo=o(" or "),LI=a("a"),rmo=o("LxmertTokenizerFast"),tmo=o(" (LXMERT model)"),amo=l(),ph=a("li"),Wle=a("strong"),nmo=o("m2m_100"),smo=o(" \u2014 "),yI=a("a"),lmo=o("M2M100Tokenizer"),imo=o(" (M2M100 model)"),dmo=l(),_h=a("li"),Hle=a("strong"),cmo=o("marian"),fmo=o(" \u2014 "),xI=a("a"),mmo=o("MarianTokenizer"),gmo=o(" (Marian model)"),hmo=l(),vs=a("li"),Ule=a("strong"),pmo=o("mbart"),_mo=o(" \u2014 "),$I=a("a"),umo=o("MBartTokenizer"),bmo=o(" or "),kI=a("a"),vmo=o("MBartTokenizerFast"),Fmo=o(" (mBART model)"),Tmo=l(),Fs=a("li"),Jle=a("strong"),Mmo=o("mbart50"),Emo=o(" \u2014 "),SI=a("a"),Cmo=o("MBart50Tokenizer"),wmo=o(" or "),RI=a("a"),Amo=o("MBart50TokenizerFast"),Lmo=o(" (mBART-50 model)"),ymo=l(),Ts=a("li"),Yle=a("strong"),xmo=o("megatron-bert"),$mo=o(" \u2014 "),PI=a("a"),kmo=o("BertTokenizer"),Smo=o(" or "),BI=a("a"),Rmo=o("BertTokenizerFast"),Pmo=o(" (Megatron-BERT model)"),Bmo=l(),uh=a("li"),Kle=a("strong"),Imo=o("mluke"),Nmo=o(" \u2014 "),II=a("a"),qmo=o("MLukeTokenizer"),jmo=o(" (mLUKE model)"),Dmo=l(),Ms=a("li"),Zle=a("strong"),Gmo=o("mobilebert"),Omo=o(" \u2014 "),NI=a("a"),Vmo=o("MobileBertTokenizer"),Xmo=o(" or "),qI=a("a"),zmo=o("MobileBertTokenizerFast"),Qmo=o(" (MobileBERT model)"),Wmo=l(),Es=a("li"),eie=a("strong"),Hmo=o("mpnet"),Umo=o(" \u2014 "),jI=a("a"),Jmo=o("MPNetTokenizer"),Ymo=o(" or "),DI=a("a"),Kmo=o("MPNetTokenizerFast"),Zmo=o(" (MPNet model)"),ego=l(),Cs=a("li"),oie=a("strong"),ogo=o("mt5"),rgo=o(" \u2014 "),GI=a("a"),tgo=o("MT5Tokenizer"),ago=o(" or "),OI=a("a"),ngo=o("MT5TokenizerFast"),sgo=o(" (MT5 model)"),lgo=l(),ws=a("li"),rie=a("strong"),igo=o("mvp"),dgo=o(" \u2014 "),VI=a("a"),cgo=o("MvpTokenizer"),fgo=o(" or "),XI=a("a"),mgo=o("MvpTokenizerFast"),ggo=o(" (MVP model)"),hgo=l(),As=a("li"),tie=a("strong"),pgo=o("nezha"),_go=o(" \u2014 "),zI=a("a"),ugo=o("BertTokenizer"),bgo=o(" or "),QI=a("a"),vgo=o("BertTokenizerFast"),Fgo=o(" (Nezha model)"),Tgo=l(),Ls=a("li"),aie=a("strong"),Mgo=o("nystromformer"),Ego=o(" \u2014 "),WI=a("a"),Cgo=o("AlbertTokenizer"),wgo=o(" or "),HI=a("a"),Ago=o("AlbertTokenizerFast"),Lgo=o(" (Nystr\xF6mformer model)"),ygo=l(),ys=a("li"),nie=a("strong"),xgo=o("openai-gpt"),$go=o(" \u2014 "),UI=a("a"),kgo=o("OpenAIGPTTokenizer"),Sgo=o(" or "),JI=a("a"),Rgo=o("OpenAIGPTTokenizerFast"),Pgo=o(" (OpenAI GPT model)"),Bgo=l(),bh=a("li"),sie=a("strong"),Igo=o("opt"),Ngo=o(" \u2014 "),YI=a("a"),qgo=o("GPT2Tokenizer"),jgo=o(" (OPT model)"),Dgo=l(),xs=a("li"),lie=a("strong"),Ggo=o("pegasus"),Ogo=o(" \u2014 "),KI=a("a"),Vgo=o("PegasusTokenizer"),Xgo=o(" or "),ZI=a("a"),zgo=o("PegasusTokenizerFast"),Qgo=o(" (Pegasus model)"),Wgo=l(),vh=a("li"),iie=a("strong"),Hgo=o("perceiver"),Ugo=o(" \u2014 "),eN=a("a"),Jgo=o("PerceiverTokenizer"),Ygo=o(" (Perceiver model)"),Kgo=l(),Fh=a("li"),die=a("strong"),Zgo=o("phobert"),eho=o(" \u2014 "),oN=a("a"),oho=o("PhobertTokenizer"),rho=o(" (PhoBERT model)"),tho=l(),Th=a("li"),cie=a("strong"),aho=o("plbart"),nho=o(" \u2014 "),rN=a("a"),sho=o("PLBartTokenizer"),lho=o(" (PLBart model)"),iho=l(),Mh=a("li"),fie=a("strong"),dho=o("prophetnet"),cho=o(" \u2014 "),tN=a("a"),fho=o("ProphetNetTokenizer"),mho=o(" (ProphetNet model)"),gho=l(),$s=a("li"),mie=a("strong"),hho=o("qdqbert"),pho=o(" \u2014 "),aN=a("a"),_ho=o("BertTokenizer"),uho=o(" or "),nN=a("a"),bho=o("BertTokenizerFast"),vho=o(" (QDQBert model)"),Fho=l(),Eh=a("li"),gie=a("strong"),Tho=o("rag"),Mho=o(" \u2014 "),sN=a("a"),Eho=o("RagTokenizer"),Cho=o(" (RAG model)"),who=l(),ks=a("li"),hie=a("strong"),Aho=o("realm"),Lho=o(" \u2014 "),lN=a("a"),yho=o("RealmTokenizer"),xho=o(" or "),iN=a("a"),$ho=o("RealmTokenizerFast"),kho=o(" (REALM model)"),Sho=l(),Ss=a("li"),pie=a("strong"),Rho=o("reformer"),Pho=o(" \u2014 "),dN=a("a"),Bho=o("ReformerTokenizer"),Iho=o(" or "),cN=a("a"),Nho=o("ReformerTokenizerFast"),qho=o(" (Reformer model)"),jho=l(),Rs=a("li"),_ie=a("strong"),Dho=o("rembert"),Gho=o(" \u2014 "),fN=a("a"),Oho=o("RemBertTokenizer"),Vho=o(" or "),mN=a("a"),Xho=o("RemBertTokenizerFast"),zho=o(" (RemBERT model)"),Qho=l(),Ps=a("li"),uie=a("strong"),Who=o("retribert"),Hho=o(" \u2014 "),gN=a("a"),Uho=o("RetriBertTokenizer"),Jho=o(" or "),hN=a("a"),Yho=o("RetriBertTokenizerFast"),Kho=o(" (RetriBERT model)"),Zho=l(),Bs=a("li"),bie=a("strong"),epo=o("roberta"),opo=o(" \u2014 "),pN=a("a"),rpo=o("RobertaTokenizer"),tpo=o(" or "),_N=a("a"),apo=o("RobertaTokenizerFast"),npo=o(" (RoBERTa model)"),spo=l(),Is=a("li"),vie=a("strong"),lpo=o("roformer"),ipo=o(" \u2014 "),uN=a("a"),dpo=o("RoFormerTokenizer"),cpo=o(" or "),bN=a("a"),fpo=o("RoFormerTokenizerFast"),mpo=o(" (RoFormer model)"),gpo=l(),Ch=a("li"),Fie=a("strong"),hpo=o("speech_to_text"),ppo=o(" \u2014 "),vN=a("a"),_po=o("Speech2TextTokenizer"),upo=o(" (Speech2Text model)"),bpo=l(),wh=a("li"),Tie=a("strong"),vpo=o("speech_to_text_2"),Fpo=o(" \u2014 "),FN=a("a"),Tpo=o("Speech2Text2Tokenizer"),Mpo=o(" (Speech2Text2 model)"),Epo=l(),Ns=a("li"),Mie=a("strong"),Cpo=o("splinter"),wpo=o(" \u2014 "),TN=a("a"),Apo=o("SplinterTokenizer"),Lpo=o(" or "),MN=a("a"),ypo=o("SplinterTokenizerFast"),xpo=o(" (Splinter model)"),$po=l(),qs=a("li"),Eie=a("strong"),kpo=o("squeezebert"),Spo=o(" \u2014 "),EN=a("a"),Rpo=o("SqueezeBertTokenizer"),Ppo=o(" or "),CN=a("a"),Bpo=o("SqueezeBertTokenizerFast"),Ipo=o(" (SqueezeBERT model)"),Npo=l(),js=a("li"),Cie=a("strong"),qpo=o("t5"),jpo=o(" \u2014 "),wN=a("a"),Dpo=o("T5Tokenizer"),Gpo=o(" or "),AN=a("a"),Opo=o("T5TokenizerFast"),Vpo=o(" (T5 model)"),Xpo=l(),Ah=a("li"),wie=a("strong"),zpo=o("tapas"),Qpo=o(" \u2014 "),LN=a("a"),Wpo=o("TapasTokenizer"),Hpo=o(" (TAPAS model)"),Upo=l(),Lh=a("li"),Aie=a("strong"),Jpo=o("tapex"),Ypo=o(" \u2014 "),yN=a("a"),Kpo=o("TapexTokenizer"),Zpo=o(" (TAPEX model)"),e_o=l(),yh=a("li"),Lie=a("strong"),o_o=o("transfo-xl"),r_o=o(" \u2014 "),xN=a("a"),t_o=o("TransfoXLTokenizer"),a_o=o(" (Transformer-XL model)"),n_o=l(),Ds=a("li"),yie=a("strong"),s_o=o("vilt"),l_o=o(" \u2014 "),$N=a("a"),i_o=o("BertTokenizer"),d_o=o(" or "),kN=a("a"),c_o=o("BertTokenizerFast"),f_o=o(" (ViLT model)"),m_o=l(),Gs=a("li"),xie=a("strong"),g_o=o("visual_bert"),h_o=o(" \u2014 "),SN=a("a"),p_o=o("BertTokenizer"),__o=o(" or "),RN=a("a"),u_o=o("BertTokenizerFast"),b_o=o(" (VisualBERT model)"),v_o=l(),xh=a("li"),$ie=a("strong"),F_o=o("wav2vec2"),T_o=o(" \u2014 "),PN=a("a"),M_o=o("Wav2Vec2CTCTokenizer"),E_o=o(" (Wav2Vec2 model)"),C_o=l(),$h=a("li"),kie=a("strong"),w_o=o("wav2vec2-conformer"),A_o=o(" \u2014 "),BN=a("a"),L_o=o("Wav2Vec2CTCTokenizer"),y_o=o(" (Wav2Vec2-Conformer model)"),x_o=l(),kh=a("li"),Sie=a("strong"),$_o=o("wav2vec2_phoneme"),k_o=o(" \u2014 "),IN=a("a"),S_o=o("Wav2Vec2PhonemeCTCTokenizer"),R_o=o(" (Wav2Vec2Phoneme model)"),P_o=l(),Os=a("li"),Rie=a("strong"),B_o=o("xglm"),I_o=o(" \u2014 "),NN=a("a"),N_o=o("XGLMTokenizer"),q_o=o(" or "),qN=a("a"),j_o=o("XGLMTokenizerFast"),D_o=o(" (XGLM model)"),G_o=l(),Sh=a("li"),Pie=a("strong"),O_o=o("xlm"),V_o=o(" \u2014 "),jN=a("a"),X_o=o("XLMTokenizer"),z_o=o(" (XLM model)"),Q_o=l(),Rh=a("li"),Bie=a("strong"),W_o=o("xlm-prophetnet"),H_o=o(" \u2014 "),DN=a("a"),U_o=o("XLMProphetNetTokenizer"),J_o=o(" (XLM-ProphetNet model)"),Y_o=l(),Vs=a("li"),Iie=a("strong"),K_o=o("xlm-roberta"),Z_o=o(" \u2014 "),GN=a("a"),euo=o("XLMRobertaTokenizer"),ouo=o(" or "),ON=a("a"),ruo=o("XLMRobertaTokenizerFast"),tuo=o(" (XLM-RoBERTa model)"),auo=l(),Xs=a("li"),Nie=a("strong"),nuo=o("xlm-roberta-xl"),suo=o(" \u2014 "),VN=a("a"),luo=o("RobertaTokenizer"),iuo=o(" or "),XN=a("a"),duo=o("RobertaTokenizerFast"),cuo=o(" (XLM-RoBERTa-XL model)"),fuo=l(),zs=a("li"),qie=a("strong"),muo=o("xlnet"),guo=o(" \u2014 "),zN=a("a"),huo=o("XLNetTokenizer"),puo=o(" or "),QN=a("a"),_uo=o("XLNetTokenizerFast"),uuo=o(" (XLNet model)"),buo=l(),Qs=a("li"),jie=a("strong"),vuo=o("yoso"),Fuo=o(" \u2014 "),WN=a("a"),Tuo=o("AlbertTokenizer"),Muo=o(" or "),HN=a("a"),Euo=o("AlbertTokenizerFast"),Cuo=o(" (YOSO model)"),wuo=l(),F(Ph.$$.fragment),Auo=l(),Bh=a("div"),F(bL.$$.fragment),Luo=l(),Die=a("p"),yuo=o("Register a new tokenizer in this mapping."),dXe=l(),Ni=a("h2"),Ih=a("a"),Gie=a("span"),F(vL.$$.fragment),xuo=l(),Oie=a("span"),$uo=o("AutoFeatureExtractor"),cXe=l(),Lo=a("div"),F(FL.$$.fragment),kuo=l(),TL=a("p"),Suo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UN=a("a"),Ruo=o("AutoFeatureExtractor.from_pretrained()"),Puo=o(" class method."),Buo=l(),ML=a("p"),Iuo=o("This class cannot be instantiated directly using "),Vie=a("code"),Nuo=o("__init__()"),quo=o(" (throws an error)."),juo=l(),He=a("div"),F(EL.$$.fragment),Duo=l(),Xie=a("p"),Guo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ouo=l(),Ba=a("p"),Vuo=o("The feature extractor class to instantiate is selected based on the "),zie=a("code"),Xuo=o("model_type"),zuo=o(` property of the config object
(either passed as an argument or loaded from `),Qie=a("code"),Quo=o("pretrained_model_name_or_path"),Wuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wie=a("code"),Huo=o("pretrained_model_name_or_path"),Uuo=o(":"),Juo=l(),Y=a("ul"),Nh=a("li"),Hie=a("strong"),Yuo=o("beit"),Kuo=o(" \u2014 "),JN=a("a"),Zuo=o("BeitFeatureExtractor"),e2o=o(" (BEiT model)"),o2o=l(),qh=a("li"),Uie=a("strong"),r2o=o("clip"),t2o=o(" \u2014 "),YN=a("a"),a2o=o("CLIPFeatureExtractor"),n2o=o(" (CLIP model)"),s2o=l(),jh=a("li"),Jie=a("strong"),l2o=o("convnext"),i2o=o(" \u2014 "),KN=a("a"),d2o=o("ConvNextFeatureExtractor"),c2o=o(" (ConvNeXT model)"),f2o=l(),Dh=a("li"),Yie=a("strong"),m2o=o("cvt"),g2o=o(" \u2014 "),ZN=a("a"),h2o=o("ConvNextFeatureExtractor"),p2o=o(" (CvT model)"),_2o=l(),Gh=a("li"),Kie=a("strong"),u2o=o("data2vec-audio"),b2o=o(" \u2014 "),eq=a("a"),v2o=o("Wav2Vec2FeatureExtractor"),F2o=o(" (Data2VecAudio model)"),T2o=l(),Oh=a("li"),Zie=a("strong"),M2o=o("data2vec-vision"),E2o=o(" \u2014 "),oq=a("a"),C2o=o("BeitFeatureExtractor"),w2o=o(" (Data2VecVision model)"),A2o=l(),Vh=a("li"),ede=a("strong"),L2o=o("deit"),y2o=o(" \u2014 "),rq=a("a"),x2o=o("DeiTFeatureExtractor"),$2o=o(" (DeiT model)"),k2o=l(),Xh=a("li"),ode=a("strong"),S2o=o("detr"),R2o=o(" \u2014 "),tq=a("a"),P2o=o("DetrFeatureExtractor"),B2o=o(" (DETR model)"),I2o=l(),zh=a("li"),rde=a("strong"),N2o=o("dpt"),q2o=o(" \u2014 "),aq=a("a"),j2o=o("DPTFeatureExtractor"),D2o=o(" (DPT model)"),G2o=l(),Qh=a("li"),tde=a("strong"),O2o=o("flava"),V2o=o(" \u2014 "),nq=a("a"),X2o=o("FlavaFeatureExtractor"),z2o=o(" (FLAVA model)"),Q2o=l(),Wh=a("li"),ade=a("strong"),W2o=o("glpn"),H2o=o(" \u2014 "),sq=a("a"),U2o=o("GLPNFeatureExtractor"),J2o=o(" (GLPN model)"),Y2o=l(),Hh=a("li"),nde=a("strong"),K2o=o("groupvit"),Z2o=o(" \u2014 "),lq=a("a"),e1o=o("CLIPFeatureExtractor"),o1o=o(" (GroupViT model)"),r1o=l(),Uh=a("li"),sde=a("strong"),t1o=o("hubert"),a1o=o(" \u2014 "),iq=a("a"),n1o=o("Wav2Vec2FeatureExtractor"),s1o=o(" (Hubert model)"),l1o=l(),Jh=a("li"),lde=a("strong"),i1o=o("imagegpt"),d1o=o(" \u2014 "),dq=a("a"),c1o=o("ImageGPTFeatureExtractor"),f1o=o(" (ImageGPT model)"),m1o=l(),Yh=a("li"),ide=a("strong"),g1o=o("layoutlmv2"),h1o=o(" \u2014 "),cq=a("a"),p1o=o("LayoutLMv2FeatureExtractor"),_1o=o(" (LayoutLMv2 model)"),u1o=l(),Kh=a("li"),dde=a("strong"),b1o=o("layoutlmv3"),v1o=o(" \u2014 "),fq=a("a"),F1o=o("LayoutLMv3FeatureExtractor"),T1o=o(" (LayoutLMv3 model)"),M1o=l(),Zh=a("li"),cde=a("strong"),E1o=o("levit"),C1o=o(" \u2014 "),mq=a("a"),w1o=o("LevitFeatureExtractor"),A1o=o(" (LeViT model)"),L1o=l(),ep=a("li"),fde=a("strong"),y1o=o("maskformer"),x1o=o(" \u2014 "),gq=a("a"),$1o=o("MaskFormerFeatureExtractor"),k1o=o(" (MaskFormer model)"),S1o=l(),op=a("li"),mde=a("strong"),R1o=o("mctct"),P1o=o(" \u2014 "),hq=a("a"),B1o=o("MCTCTFeatureExtractor"),I1o=o(" (M-CTC-T model)"),N1o=l(),rp=a("li"),gde=a("strong"),q1o=o("mobilevit"),j1o=o(" \u2014 "),pq=a("a"),D1o=o("MobileViTFeatureExtractor"),G1o=o(" (MobileViT model)"),O1o=l(),tp=a("li"),hde=a("strong"),V1o=o("perceiver"),X1o=o(" \u2014 "),_q=a("a"),z1o=o("PerceiverFeatureExtractor"),Q1o=o(" (Perceiver model)"),W1o=l(),ap=a("li"),pde=a("strong"),H1o=o("poolformer"),U1o=o(" \u2014 "),uq=a("a"),J1o=o("PoolFormerFeatureExtractor"),Y1o=o(" (PoolFormer model)"),K1o=l(),np=a("li"),_de=a("strong"),Z1o=o("regnet"),ebo=o(" \u2014 "),bq=a("a"),obo=o("ConvNextFeatureExtractor"),rbo=o(" (RegNet model)"),tbo=l(),sp=a("li"),ude=a("strong"),abo=o("resnet"),nbo=o(" \u2014 "),vq=a("a"),sbo=o("ConvNextFeatureExtractor"),lbo=o(" (ResNet model)"),ibo=l(),lp=a("li"),bde=a("strong"),dbo=o("segformer"),cbo=o(" \u2014 "),Fq=a("a"),fbo=o("SegformerFeatureExtractor"),mbo=o(" (SegFormer model)"),gbo=l(),ip=a("li"),vde=a("strong"),hbo=o("speech_to_text"),pbo=o(" \u2014 "),Tq=a("a"),_bo=o("Speech2TextFeatureExtractor"),ubo=o(" (Speech2Text model)"),bbo=l(),dp=a("li"),Fde=a("strong"),vbo=o("swin"),Fbo=o(" \u2014 "),Mq=a("a"),Tbo=o("ViTFeatureExtractor"),Mbo=o(" (Swin Transformer model)"),Ebo=l(),cp=a("li"),Tde=a("strong"),Cbo=o("van"),wbo=o(" \u2014 "),Eq=a("a"),Abo=o("ConvNextFeatureExtractor"),Lbo=o(" (VAN model)"),ybo=l(),fp=a("li"),Mde=a("strong"),xbo=o("vilt"),$bo=o(" \u2014 "),Cq=a("a"),kbo=o("ViltFeatureExtractor"),Sbo=o(" (ViLT model)"),Rbo=l(),mp=a("li"),Ede=a("strong"),Pbo=o("vit"),Bbo=o(" \u2014 "),wq=a("a"),Ibo=o("ViTFeatureExtractor"),Nbo=o(" (ViT model)"),qbo=l(),gp=a("li"),Cde=a("strong"),jbo=o("vit_mae"),Dbo=o(" \u2014 "),Aq=a("a"),Gbo=o("ViTFeatureExtractor"),Obo=o(" (ViTMAE model)"),Vbo=l(),hp=a("li"),wde=a("strong"),Xbo=o("wav2vec2"),zbo=o(" \u2014 "),Lq=a("a"),Qbo=o("Wav2Vec2FeatureExtractor"),Wbo=o(" (Wav2Vec2 model)"),Hbo=l(),pp=a("li"),Ade=a("strong"),Ubo=o("wav2vec2-conformer"),Jbo=o(" \u2014 "),yq=a("a"),Ybo=o("Wav2Vec2FeatureExtractor"),Kbo=o(" (Wav2Vec2-Conformer model)"),Zbo=l(),_p=a("li"),Lde=a("strong"),evo=o("yolos"),ovo=o(" \u2014 "),xq=a("a"),rvo=o("YolosFeatureExtractor"),tvo=o(" (YOLOS model)"),avo=l(),F(up.$$.fragment),nvo=l(),F(bp.$$.fragment),svo=l(),vp=a("div"),F(CL.$$.fragment),lvo=l(),yde=a("p"),ivo=o("Register a new feature extractor for this class."),fXe=l(),qi=a("h2"),Fp=a("a"),xde=a("span"),F(wL.$$.fragment),dvo=l(),$de=a("span"),cvo=o("AutoProcessor"),mXe=l(),yo=a("div"),F(AL.$$.fragment),fvo=l(),LL=a("p"),mvo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=a("a"),gvo=o("AutoProcessor.from_pretrained()"),hvo=o(" class method."),pvo=l(),yL=a("p"),_vo=o("This class cannot be instantiated directly using "),kde=a("code"),uvo=o("__init__()"),bvo=o(" (throws an error)."),vvo=l(),Ue=a("div"),F(xL.$$.fragment),Fvo=l(),Sde=a("p"),Tvo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mvo=l(),ji=a("p"),Evo=o("The processor class to instantiate is selected based on the "),Rde=a("code"),Cvo=o("model_type"),wvo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),Avo=o("pretrained_model_name_or_path"),Lvo=o(" if possible):"),yvo=l(),he=a("ul"),Tp=a("li"),Bde=a("strong"),xvo=o("clip"),$vo=o(" \u2014 "),kq=a("a"),kvo=o("CLIPProcessor"),Svo=o(" (CLIP model)"),Rvo=l(),Mp=a("li"),Ide=a("strong"),Pvo=o("flava"),Bvo=o(" \u2014 "),Nde=a("code"),Ivo=o("FLAVAProcessor"),Nvo=o(" (FLAVA model)"),qvo=l(),Ep=a("li"),qde=a("strong"),jvo=o("groupvit"),Dvo=o(" \u2014 "),Sq=a("a"),Gvo=o("CLIPProcessor"),Ovo=o(" (GroupViT model)"),Vvo=l(),Cp=a("li"),jde=a("strong"),Xvo=o("layoutlmv2"),zvo=o(" \u2014 "),Rq=a("a"),Qvo=o("LayoutLMv2Processor"),Wvo=o(" (LayoutLMv2 model)"),Hvo=l(),wp=a("li"),Dde=a("strong"),Uvo=o("layoutlmv3"),Jvo=o(" \u2014 "),Pq=a("a"),Yvo=o("LayoutLMv3Processor"),Kvo=o(" (LayoutLMv3 model)"),Zvo=l(),Ap=a("li"),Gde=a("strong"),eFo=o("layoutxlm"),oFo=o(" \u2014 "),Bq=a("a"),rFo=o("LayoutXLMProcessor"),tFo=o(" (LayoutXLM model)"),aFo=l(),Lp=a("li"),Ode=a("strong"),nFo=o("sew"),sFo=o(" \u2014 "),Iq=a("a"),lFo=o("Wav2Vec2Processor"),iFo=o(" (SEW model)"),dFo=l(),yp=a("li"),Vde=a("strong"),cFo=o("sew-d"),fFo=o(" \u2014 "),Nq=a("a"),mFo=o("Wav2Vec2Processor"),gFo=o(" (SEW-D model)"),hFo=l(),xp=a("li"),Xde=a("strong"),pFo=o("speech_to_text"),_Fo=o(" \u2014 "),qq=a("a"),uFo=o("Speech2TextProcessor"),bFo=o(" (Speech2Text model)"),vFo=l(),$p=a("li"),zde=a("strong"),FFo=o("speech_to_text_2"),TFo=o(" \u2014 "),jq=a("a"),MFo=o("Speech2Text2Processor"),EFo=o(" (Speech2Text2 model)"),CFo=l(),kp=a("li"),Qde=a("strong"),wFo=o("trocr"),AFo=o(" \u2014 "),Dq=a("a"),LFo=o("TrOCRProcessor"),yFo=o(" (TrOCR model)"),xFo=l(),Sp=a("li"),Wde=a("strong"),$Fo=o("unispeech"),kFo=o(" \u2014 "),Gq=a("a"),SFo=o("Wav2Vec2Processor"),RFo=o(" (UniSpeech model)"),PFo=l(),Rp=a("li"),Hde=a("strong"),BFo=o("unispeech-sat"),IFo=o(" \u2014 "),Oq=a("a"),NFo=o("Wav2Vec2Processor"),qFo=o(" (UniSpeechSat model)"),jFo=l(),Pp=a("li"),Ude=a("strong"),DFo=o("vilt"),GFo=o(" \u2014 "),Vq=a("a"),OFo=o("ViltProcessor"),VFo=o(" (ViLT model)"),XFo=l(),Bp=a("li"),Jde=a("strong"),zFo=o("vision-text-dual-encoder"),QFo=o(" \u2014 "),Xq=a("a"),WFo=o("VisionTextDualEncoderProcessor"),HFo=o(" (VisionTextDualEncoder model)"),UFo=l(),Ip=a("li"),Yde=a("strong"),JFo=o("wav2vec2"),YFo=o(" \u2014 "),zq=a("a"),KFo=o("Wav2Vec2Processor"),ZFo=o(" (Wav2Vec2 model)"),e6o=l(),Np=a("li"),Kde=a("strong"),o6o=o("wav2vec2-conformer"),r6o=o(" \u2014 "),Qq=a("a"),t6o=o("Wav2Vec2Processor"),a6o=o(" (Wav2Vec2-Conformer model)"),n6o=l(),qp=a("li"),Zde=a("strong"),s6o=o("wavlm"),l6o=o(" \u2014 "),Wq=a("a"),i6o=o("Wav2Vec2Processor"),d6o=o(" (WavLM model)"),c6o=l(),F(jp.$$.fragment),f6o=l(),F(Dp.$$.fragment),m6o=l(),Gp=a("div"),F($L.$$.fragment),g6o=l(),ece=a("p"),h6o=o("Register a new processor for this class."),gXe=l(),Di=a("h2"),Op=a("a"),oce=a("span"),F(kL.$$.fragment),p6o=l(),rce=a("span"),_6o=o("AutoModel"),hXe=l(),xo=a("div"),F(SL.$$.fragment),u6o=l(),Gi=a("p"),b6o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=a("a"),v6o=o("from_pretrained()"),F6o=o(" class method or the "),Uq=a("a"),T6o=o("from_config()"),M6o=o(` class
method.`),E6o=l(),RL=a("p"),C6o=o("This class cannot be instantiated directly using "),tce=a("code"),w6o=o("__init__()"),A6o=o(" (throws an error)."),L6o=l(),lt=a("div"),F(PL.$$.fragment),y6o=l(),ace=a("p"),x6o=o("Instantiates one of the base model classes of the library from a configuration."),$6o=l(),Oi=a("p"),k6o=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),S6o=o("not"),R6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),P6o=o("from_pretrained()"),B6o=o(" to load the model weights."),I6o=l(),F(Vp.$$.fragment),N6o=l(),Je=a("div"),F(BL.$$.fragment),q6o=l(),sce=a("p"),j6o=o("Instantiate one of the base model classes of the library from a pretrained model."),D6o=l(),Ia=a("p"),G6o=o("The model class to instantiate is selected based on the "),lce=a("code"),O6o=o("model_type"),V6o=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),X6o=o("pretrained_model_name_or_path"),z6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),Q6o=o("pretrained_model_name_or_path"),W6o=o(":"),H6o=l(),y=a("ul"),Xp=a("li"),cce=a("strong"),U6o=o("albert"),J6o=o(" \u2014 "),Yq=a("a"),Y6o=o("AlbertModel"),K6o=o(" (ALBERT model)"),Z6o=l(),zp=a("li"),fce=a("strong"),eTo=o("bart"),oTo=o(" \u2014 "),Kq=a("a"),rTo=o("BartModel"),tTo=o(" (BART model)"),aTo=l(),Qp=a("li"),mce=a("strong"),nTo=o("beit"),sTo=o(" \u2014 "),Zq=a("a"),lTo=o("BeitModel"),iTo=o(" (BEiT model)"),dTo=l(),Wp=a("li"),gce=a("strong"),cTo=o("bert"),fTo=o(" \u2014 "),ej=a("a"),mTo=o("BertModel"),gTo=o(" (BERT model)"),hTo=l(),Hp=a("li"),hce=a("strong"),pTo=o("bert-generation"),_To=o(" \u2014 "),oj=a("a"),uTo=o("BertGenerationEncoder"),bTo=o(" (Bert Generation model)"),vTo=l(),Up=a("li"),pce=a("strong"),FTo=o("big_bird"),TTo=o(" \u2014 "),rj=a("a"),MTo=o("BigBirdModel"),ETo=o(" (BigBird model)"),CTo=l(),Jp=a("li"),_ce=a("strong"),wTo=o("bigbird_pegasus"),ATo=o(" \u2014 "),tj=a("a"),LTo=o("BigBirdPegasusModel"),yTo=o(" (BigBird-Pegasus model)"),xTo=l(),Yp=a("li"),uce=a("strong"),$To=o("blenderbot"),kTo=o(" \u2014 "),aj=a("a"),STo=o("BlenderbotModel"),RTo=o(" (Blenderbot model)"),PTo=l(),Kp=a("li"),bce=a("strong"),BTo=o("blenderbot-small"),ITo=o(" \u2014 "),nj=a("a"),NTo=o("BlenderbotSmallModel"),qTo=o(" (BlenderbotSmall model)"),jTo=l(),Zp=a("li"),vce=a("strong"),DTo=o("bloom"),GTo=o(" \u2014 "),sj=a("a"),OTo=o("BloomModel"),VTo=o(" (BLOOM model)"),XTo=l(),e_=a("li"),Fce=a("strong"),zTo=o("camembert"),QTo=o(" \u2014 "),lj=a("a"),WTo=o("CamembertModel"),HTo=o(" (CamemBERT model)"),UTo=l(),o_=a("li"),Tce=a("strong"),JTo=o("canine"),YTo=o(" \u2014 "),ij=a("a"),KTo=o("CanineModel"),ZTo=o(" (CANINE model)"),e7o=l(),r_=a("li"),Mce=a("strong"),o7o=o("clip"),r7o=o(" \u2014 "),dj=a("a"),t7o=o("CLIPModel"),a7o=o(" (CLIP model)"),n7o=l(),t_=a("li"),Ece=a("strong"),s7o=o("codegen"),l7o=o(" \u2014 "),cj=a("a"),i7o=o("CodeGenModel"),d7o=o(" (CodeGen model)"),c7o=l(),a_=a("li"),Cce=a("strong"),f7o=o("convbert"),m7o=o(" \u2014 "),fj=a("a"),g7o=o("ConvBertModel"),h7o=o(" (ConvBERT model)"),p7o=l(),n_=a("li"),wce=a("strong"),_7o=o("convnext"),u7o=o(" \u2014 "),mj=a("a"),b7o=o("ConvNextModel"),v7o=o(" (ConvNeXT model)"),F7o=l(),s_=a("li"),Ace=a("strong"),T7o=o("ctrl"),M7o=o(" \u2014 "),gj=a("a"),E7o=o("CTRLModel"),C7o=o(" (CTRL model)"),w7o=l(),l_=a("li"),Lce=a("strong"),A7o=o("cvt"),L7o=o(" \u2014 "),hj=a("a"),y7o=o("CvtModel"),x7o=o(" (CvT model)"),$7o=l(),i_=a("li"),yce=a("strong"),k7o=o("data2vec-audio"),S7o=o(" \u2014 "),pj=a("a"),R7o=o("Data2VecAudioModel"),P7o=o(" (Data2VecAudio model)"),B7o=l(),d_=a("li"),xce=a("strong"),I7o=o("data2vec-text"),N7o=o(" \u2014 "),_j=a("a"),q7o=o("Data2VecTextModel"),j7o=o(" (Data2VecText model)"),D7o=l(),c_=a("li"),$ce=a("strong"),G7o=o("data2vec-vision"),O7o=o(" \u2014 "),uj=a("a"),V7o=o("Data2VecVisionModel"),X7o=o(" (Data2VecVision model)"),z7o=l(),f_=a("li"),kce=a("strong"),Q7o=o("deberta"),W7o=o(" \u2014 "),bj=a("a"),H7o=o("DebertaModel"),U7o=o(" (DeBERTa model)"),J7o=l(),m_=a("li"),Sce=a("strong"),Y7o=o("deberta-v2"),K7o=o(" \u2014 "),vj=a("a"),Z7o=o("DebertaV2Model"),e8o=o(" (DeBERTa-v2 model)"),o8o=l(),g_=a("li"),Rce=a("strong"),r8o=o("decision_transformer"),t8o=o(" \u2014 "),Fj=a("a"),a8o=o("DecisionTransformerModel"),n8o=o(" (Decision Transformer model)"),s8o=l(),h_=a("li"),Pce=a("strong"),l8o=o("deit"),i8o=o(" \u2014 "),Tj=a("a"),d8o=o("DeiTModel"),c8o=o(" (DeiT model)"),f8o=l(),p_=a("li"),Bce=a("strong"),m8o=o("detr"),g8o=o(" \u2014 "),Mj=a("a"),h8o=o("DetrModel"),p8o=o(" (DETR model)"),_8o=l(),__=a("li"),Ice=a("strong"),u8o=o("distilbert"),b8o=o(" \u2014 "),Ej=a("a"),v8o=o("DistilBertModel"),F8o=o(" (DistilBERT model)"),T8o=l(),u_=a("li"),Nce=a("strong"),M8o=o("dpr"),E8o=o(" \u2014 "),Cj=a("a"),C8o=o("DPRQuestionEncoder"),w8o=o(" (DPR model)"),A8o=l(),b_=a("li"),qce=a("strong"),L8o=o("dpt"),y8o=o(" \u2014 "),wj=a("a"),x8o=o("DPTModel"),$8o=o(" (DPT model)"),k8o=l(),v_=a("li"),jce=a("strong"),S8o=o("electra"),R8o=o(" \u2014 "),Aj=a("a"),P8o=o("ElectraModel"),B8o=o(" (ELECTRA model)"),I8o=l(),F_=a("li"),Dce=a("strong"),N8o=o("flaubert"),q8o=o(" \u2014 "),Lj=a("a"),j8o=o("FlaubertModel"),D8o=o(" (FlauBERT model)"),G8o=l(),T_=a("li"),Gce=a("strong"),O8o=o("flava"),V8o=o(" \u2014 "),yj=a("a"),X8o=o("FlavaModel"),z8o=o(" (FLAVA model)"),Q8o=l(),M_=a("li"),Oce=a("strong"),W8o=o("fnet"),H8o=o(" \u2014 "),xj=a("a"),U8o=o("FNetModel"),J8o=o(" (FNet model)"),Y8o=l(),E_=a("li"),Vce=a("strong"),K8o=o("fsmt"),Z8o=o(" \u2014 "),$j=a("a"),eMo=o("FSMTModel"),oMo=o(" (FairSeq Machine-Translation model)"),rMo=l(),Ws=a("li"),Xce=a("strong"),tMo=o("funnel"),aMo=o(" \u2014 "),kj=a("a"),nMo=o("FunnelModel"),sMo=o(" or "),Sj=a("a"),lMo=o("FunnelBaseModel"),iMo=o(" (Funnel Transformer model)"),dMo=l(),C_=a("li"),zce=a("strong"),cMo=o("glpn"),fMo=o(" \u2014 "),Rj=a("a"),mMo=o("GLPNModel"),gMo=o(" (GLPN model)"),hMo=l(),w_=a("li"),Qce=a("strong"),pMo=o("gpt2"),_Mo=o(" \u2014 "),Pj=a("a"),uMo=o("GPT2Model"),bMo=o(" (OpenAI GPT-2 model)"),vMo=l(),A_=a("li"),Wce=a("strong"),FMo=o("gpt_neo"),TMo=o(" \u2014 "),Bj=a("a"),MMo=o("GPTNeoModel"),EMo=o(" (GPT Neo model)"),CMo=l(),L_=a("li"),Hce=a("strong"),wMo=o("gpt_neox"),AMo=o(" \u2014 "),Ij=a("a"),LMo=o("GPTNeoXModel"),yMo=o(" (GPT NeoX model)"),xMo=l(),y_=a("li"),Uce=a("strong"),$Mo=o("gptj"),kMo=o(" \u2014 "),Nj=a("a"),SMo=o("GPTJModel"),RMo=o(" (GPT-J model)"),PMo=l(),x_=a("li"),Jce=a("strong"),BMo=o("groupvit"),IMo=o(" \u2014 "),qj=a("a"),NMo=o("GroupViTModel"),qMo=o(" (GroupViT model)"),jMo=l(),$_=a("li"),Yce=a("strong"),DMo=o("hubert"),GMo=o(" \u2014 "),jj=a("a"),OMo=o("HubertModel"),VMo=o(" (Hubert model)"),XMo=l(),k_=a("li"),Kce=a("strong"),zMo=o("ibert"),QMo=o(" \u2014 "),Dj=a("a"),WMo=o("IBertModel"),HMo=o(" (I-BERT model)"),UMo=l(),S_=a("li"),Zce=a("strong"),JMo=o("imagegpt"),YMo=o(" \u2014 "),Gj=a("a"),KMo=o("ImageGPTModel"),ZMo=o(" (ImageGPT model)"),e4o=l(),R_=a("li"),efe=a("strong"),o4o=o("jukebox"),r4o=o(" \u2014 "),ofe=a("code"),t4o=o("JukeboxModel"),a4o=o(" (Jukebox model)"),n4o=l(),P_=a("li"),rfe=a("strong"),s4o=o("layoutlm"),l4o=o(" \u2014 "),Oj=a("a"),i4o=o("LayoutLMModel"),d4o=o(" (LayoutLM model)"),c4o=l(),B_=a("li"),tfe=a("strong"),f4o=o("layoutlmv2"),m4o=o(" \u2014 "),Vj=a("a"),g4o=o("LayoutLMv2Model"),h4o=o(" (LayoutLMv2 model)"),p4o=l(),I_=a("li"),afe=a("strong"),_4o=o("layoutlmv3"),u4o=o(" \u2014 "),Xj=a("a"),b4o=o("LayoutLMv3Model"),v4o=o(" (LayoutLMv3 model)"),F4o=l(),N_=a("li"),nfe=a("strong"),T4o=o("led"),M4o=o(" \u2014 "),zj=a("a"),E4o=o("LEDModel"),C4o=o(" (LED model)"),w4o=l(),q_=a("li"),sfe=a("strong"),A4o=o("levit"),L4o=o(" \u2014 "),Qj=a("a"),y4o=o("LevitModel"),x4o=o(" (LeViT model)"),$4o=l(),j_=a("li"),lfe=a("strong"),k4o=o("longformer"),S4o=o(" \u2014 "),Wj=a("a"),R4o=o("LongformerModel"),P4o=o(" (Longformer model)"),B4o=l(),D_=a("li"),ife=a("strong"),I4o=o("longt5"),N4o=o(" \u2014 "),Hj=a("a"),q4o=o("LongT5Model"),j4o=o(" (LongT5 model)"),D4o=l(),G_=a("li"),dfe=a("strong"),G4o=o("luke"),O4o=o(" \u2014 "),Uj=a("a"),V4o=o("LukeModel"),X4o=o(" (LUKE model)"),z4o=l(),O_=a("li"),cfe=a("strong"),Q4o=o("lxmert"),W4o=o(" \u2014 "),Jj=a("a"),H4o=o("LxmertModel"),U4o=o(" (LXMERT model)"),J4o=l(),V_=a("li"),ffe=a("strong"),Y4o=o("m2m_100"),K4o=o(" \u2014 "),Yj=a("a"),Z4o=o("M2M100Model"),eEo=o(" (M2M100 model)"),oEo=l(),X_=a("li"),mfe=a("strong"),rEo=o("marian"),tEo=o(" \u2014 "),Kj=a("a"),aEo=o("MarianModel"),nEo=o(" (Marian model)"),sEo=l(),z_=a("li"),gfe=a("strong"),lEo=o("maskformer"),iEo=o(" \u2014 "),Zj=a("a"),dEo=o("MaskFormerModel"),cEo=o(" (MaskFormer model)"),fEo=l(),Q_=a("li"),hfe=a("strong"),mEo=o("mbart"),gEo=o(" \u2014 "),eD=a("a"),hEo=o("MBartModel"),pEo=o(" (mBART model)"),_Eo=l(),W_=a("li"),pfe=a("strong"),uEo=o("mctct"),bEo=o(" \u2014 "),oD=a("a"),vEo=o("MCTCTModel"),FEo=o(" (M-CTC-T model)"),TEo=l(),H_=a("li"),_fe=a("strong"),MEo=o("megatron-bert"),EEo=o(" \u2014 "),rD=a("a"),CEo=o("MegatronBertModel"),wEo=o(" (Megatron-BERT model)"),AEo=l(),U_=a("li"),ufe=a("strong"),LEo=o("mobilebert"),yEo=o(" \u2014 "),tD=a("a"),xEo=o("MobileBertModel"),$Eo=o(" (MobileBERT model)"),kEo=l(),J_=a("li"),bfe=a("strong"),SEo=o("mobilevit"),REo=o(" \u2014 "),aD=a("a"),PEo=o("MobileViTModel"),BEo=o(" (MobileViT model)"),IEo=l(),Y_=a("li"),vfe=a("strong"),NEo=o("mpnet"),qEo=o(" \u2014 "),nD=a("a"),jEo=o("MPNetModel"),DEo=o(" (MPNet model)"),GEo=l(),K_=a("li"),Ffe=a("strong"),OEo=o("mt5"),VEo=o(" \u2014 "),sD=a("a"),XEo=o("MT5Model"),zEo=o(" (MT5 model)"),QEo=l(),Z_=a("li"),Tfe=a("strong"),WEo=o("mvp"),HEo=o(" \u2014 "),lD=a("a"),UEo=o("MvpModel"),JEo=o(" (MVP model)"),YEo=l(),eu=a("li"),Mfe=a("strong"),KEo=o("nezha"),ZEo=o(" \u2014 "),iD=a("a"),eCo=o("NezhaModel"),oCo=o(" (Nezha model)"),rCo=l(),ou=a("li"),Efe=a("strong"),tCo=o("nystromformer"),aCo=o(" \u2014 "),dD=a("a"),nCo=o("NystromformerModel"),sCo=o(" (Nystr\xF6mformer model)"),lCo=l(),ru=a("li"),Cfe=a("strong"),iCo=o("openai-gpt"),dCo=o(" \u2014 "),cD=a("a"),cCo=o("OpenAIGPTModel"),fCo=o(" (OpenAI GPT model)"),mCo=l(),tu=a("li"),wfe=a("strong"),gCo=o("opt"),hCo=o(" \u2014 "),fD=a("a"),pCo=o("OPTModel"),_Co=o(" (OPT model)"),uCo=l(),au=a("li"),Afe=a("strong"),bCo=o("pegasus"),vCo=o(" \u2014 "),mD=a("a"),FCo=o("PegasusModel"),TCo=o(" (Pegasus model)"),MCo=l(),nu=a("li"),Lfe=a("strong"),ECo=o("perceiver"),CCo=o(" \u2014 "),gD=a("a"),wCo=o("PerceiverModel"),ACo=o(" (Perceiver model)"),LCo=l(),su=a("li"),yfe=a("strong"),yCo=o("plbart"),xCo=o(" \u2014 "),hD=a("a"),$Co=o("PLBartModel"),kCo=o(" (PLBart model)"),SCo=l(),lu=a("li"),xfe=a("strong"),RCo=o("poolformer"),PCo=o(" \u2014 "),pD=a("a"),BCo=o("PoolFormerModel"),ICo=o(" (PoolFormer model)"),NCo=l(),iu=a("li"),$fe=a("strong"),qCo=o("prophetnet"),jCo=o(" \u2014 "),_D=a("a"),DCo=o("ProphetNetModel"),GCo=o(" (ProphetNet model)"),OCo=l(),du=a("li"),kfe=a("strong"),VCo=o("qdqbert"),XCo=o(" \u2014 "),uD=a("a"),zCo=o("QDQBertModel"),QCo=o(" (QDQBert model)"),WCo=l(),cu=a("li"),Sfe=a("strong"),HCo=o("reformer"),UCo=o(" \u2014 "),bD=a("a"),JCo=o("ReformerModel"),YCo=o(" (Reformer model)"),KCo=l(),fu=a("li"),Rfe=a("strong"),ZCo=o("regnet"),e3o=o(" \u2014 "),vD=a("a"),o3o=o("RegNetModel"),r3o=o(" (RegNet model)"),t3o=l(),mu=a("li"),Pfe=a("strong"),a3o=o("rembert"),n3o=o(" \u2014 "),FD=a("a"),s3o=o("RemBertModel"),l3o=o(" (RemBERT model)"),i3o=l(),gu=a("li"),Bfe=a("strong"),d3o=o("resnet"),c3o=o(" \u2014 "),TD=a("a"),f3o=o("ResNetModel"),m3o=o(" (ResNet model)"),g3o=l(),hu=a("li"),Ife=a("strong"),h3o=o("retribert"),p3o=o(" \u2014 "),MD=a("a"),_3o=o("RetriBertModel"),u3o=o(" (RetriBERT model)"),b3o=l(),pu=a("li"),Nfe=a("strong"),v3o=o("roberta"),F3o=o(" \u2014 "),ED=a("a"),T3o=o("RobertaModel"),M3o=o(" (RoBERTa model)"),E3o=l(),_u=a("li"),qfe=a("strong"),C3o=o("roformer"),w3o=o(" \u2014 "),CD=a("a"),A3o=o("RoFormerModel"),L3o=o(" (RoFormer model)"),y3o=l(),uu=a("li"),jfe=a("strong"),x3o=o("segformer"),$3o=o(" \u2014 "),wD=a("a"),k3o=o("SegformerModel"),S3o=o(" (SegFormer model)"),R3o=l(),bu=a("li"),Dfe=a("strong"),P3o=o("sew"),B3o=o(" \u2014 "),AD=a("a"),I3o=o("SEWModel"),N3o=o(" (SEW model)"),q3o=l(),vu=a("li"),Gfe=a("strong"),j3o=o("sew-d"),D3o=o(" \u2014 "),LD=a("a"),G3o=o("SEWDModel"),O3o=o(" (SEW-D model)"),V3o=l(),Fu=a("li"),Ofe=a("strong"),X3o=o("speech_to_text"),z3o=o(" \u2014 "),yD=a("a"),Q3o=o("Speech2TextModel"),W3o=o(" (Speech2Text model)"),H3o=l(),Tu=a("li"),Vfe=a("strong"),U3o=o("splinter"),J3o=o(" \u2014 "),xD=a("a"),Y3o=o("SplinterModel"),K3o=o(" (Splinter model)"),Z3o=l(),Mu=a("li"),Xfe=a("strong"),e5o=o("squeezebert"),o5o=o(" \u2014 "),$D=a("a"),r5o=o("SqueezeBertModel"),t5o=o(" (SqueezeBERT model)"),a5o=l(),Eu=a("li"),zfe=a("strong"),n5o=o("swin"),s5o=o(" \u2014 "),kD=a("a"),l5o=o("SwinModel"),i5o=o(" (Swin Transformer model)"),d5o=l(),Cu=a("li"),Qfe=a("strong"),c5o=o("t5"),f5o=o(" \u2014 "),SD=a("a"),m5o=o("T5Model"),g5o=o(" (T5 model)"),h5o=l(),wu=a("li"),Wfe=a("strong"),p5o=o("tapas"),_5o=o(" \u2014 "),RD=a("a"),u5o=o("TapasModel"),b5o=o(" (TAPAS model)"),v5o=l(),Au=a("li"),Hfe=a("strong"),F5o=o("trajectory_transformer"),T5o=o(" \u2014 "),PD=a("a"),M5o=o("TrajectoryTransformerModel"),E5o=o(" (Trajectory Transformer model)"),C5o=l(),Lu=a("li"),Ufe=a("strong"),w5o=o("transfo-xl"),A5o=o(" \u2014 "),BD=a("a"),L5o=o("TransfoXLModel"),y5o=o(" (Transformer-XL model)"),x5o=l(),yu=a("li"),Jfe=a("strong"),$5o=o("unispeech"),k5o=o(" \u2014 "),ID=a("a"),S5o=o("UniSpeechModel"),R5o=o(" (UniSpeech model)"),P5o=l(),xu=a("li"),Yfe=a("strong"),B5o=o("unispeech-sat"),I5o=o(" \u2014 "),ND=a("a"),N5o=o("UniSpeechSatModel"),q5o=o(" (UniSpeechSat model)"),j5o=l(),$u=a("li"),Kfe=a("strong"),D5o=o("van"),G5o=o(" \u2014 "),qD=a("a"),O5o=o("VanModel"),V5o=o(" (VAN model)"),X5o=l(),ku=a("li"),Zfe=a("strong"),z5o=o("vilt"),Q5o=o(" \u2014 "),jD=a("a"),W5o=o("ViltModel"),H5o=o(" (ViLT model)"),U5o=l(),Su=a("li"),eme=a("strong"),J5o=o("vision-text-dual-encoder"),Y5o=o(" \u2014 "),DD=a("a"),K5o=o("VisionTextDualEncoderModel"),Z5o=o(" (VisionTextDualEncoder model)"),e0o=l(),Ru=a("li"),ome=a("strong"),o0o=o("visual_bert"),r0o=o(" \u2014 "),GD=a("a"),t0o=o("VisualBertModel"),a0o=o(" (VisualBERT model)"),n0o=l(),Pu=a("li"),rme=a("strong"),s0o=o("vit"),l0o=o(" \u2014 "),OD=a("a"),i0o=o("ViTModel"),d0o=o(" (ViT model)"),c0o=l(),Bu=a("li"),tme=a("strong"),f0o=o("vit_mae"),m0o=o(" \u2014 "),VD=a("a"),g0o=o("ViTMAEModel"),h0o=o(" (ViTMAE model)"),p0o=l(),Iu=a("li"),ame=a("strong"),_0o=o("wav2vec2"),u0o=o(" \u2014 "),XD=a("a"),b0o=o("Wav2Vec2Model"),v0o=o(" (Wav2Vec2 model)"),F0o=l(),Nu=a("li"),nme=a("strong"),T0o=o("wav2vec2-conformer"),M0o=o(" \u2014 "),zD=a("a"),E0o=o("Wav2Vec2ConformerModel"),C0o=o(" (Wav2Vec2-Conformer model)"),w0o=l(),qu=a("li"),sme=a("strong"),A0o=o("wavlm"),L0o=o(" \u2014 "),QD=a("a"),y0o=o("WavLMModel"),x0o=o(" (WavLM model)"),$0o=l(),ju=a("li"),lme=a("strong"),k0o=o("xglm"),S0o=o(" \u2014 "),WD=a("a"),R0o=o("XGLMModel"),P0o=o(" (XGLM model)"),B0o=l(),Du=a("li"),ime=a("strong"),I0o=o("xlm"),N0o=o(" \u2014 "),HD=a("a"),q0o=o("XLMModel"),j0o=o(" (XLM model)"),D0o=l(),Gu=a("li"),dme=a("strong"),G0o=o("xlm-prophetnet"),O0o=o(" \u2014 "),UD=a("a"),V0o=o("XLMProphetNetModel"),X0o=o(" (XLM-ProphetNet model)"),z0o=l(),Ou=a("li"),cme=a("strong"),Q0o=o("xlm-roberta"),W0o=o(" \u2014 "),JD=a("a"),H0o=o("XLMRobertaModel"),U0o=o(" (XLM-RoBERTa model)"),J0o=l(),Vu=a("li"),fme=a("strong"),Y0o=o("xlm-roberta-xl"),K0o=o(" \u2014 "),YD=a("a"),Z0o=o("XLMRobertaXLModel"),ewo=o(" (XLM-RoBERTa-XL model)"),owo=l(),Xu=a("li"),mme=a("strong"),rwo=o("xlnet"),two=o(" \u2014 "),KD=a("a"),awo=o("XLNetModel"),nwo=o(" (XLNet model)"),swo=l(),zu=a("li"),gme=a("strong"),lwo=o("yolos"),iwo=o(" \u2014 "),ZD=a("a"),dwo=o("YolosModel"),cwo=o(" (YOLOS model)"),fwo=l(),Qu=a("li"),hme=a("strong"),mwo=o("yoso"),gwo=o(" \u2014 "),eG=a("a"),hwo=o("YosoModel"),pwo=o(" (YOSO model)"),_wo=l(),Wu=a("p"),uwo=o("The model is set in evaluation mode by default using "),pme=a("code"),bwo=o("model.eval()"),vwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),Fwo=o("model.train()"),Two=l(),F(Hu.$$.fragment),pXe=l(),Vi=a("h2"),Uu=a("a"),ume=a("span"),F(IL.$$.fragment),Mwo=l(),bme=a("span"),Ewo=o("AutoModelForPreTraining"),_Xe=l(),$o=a("div"),F(NL.$$.fragment),Cwo=l(),Xi=a("p"),wwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oG=a("a"),Awo=o("from_pretrained()"),Lwo=o(" class method or the "),rG=a("a"),ywo=o("from_config()"),xwo=o(` class
method.`),$wo=l(),qL=a("p"),kwo=o("This class cannot be instantiated directly using "),vme=a("code"),Swo=o("__init__()"),Rwo=o(" (throws an error)."),Pwo=l(),it=a("div"),F(jL.$$.fragment),Bwo=l(),Fme=a("p"),Iwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nwo=l(),zi=a("p"),qwo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),jwo=o("not"),Dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),Gwo=o("from_pretrained()"),Owo=o(" to load the model weights."),Vwo=l(),F(Ju.$$.fragment),Xwo=l(),Ye=a("div"),F(DL.$$.fragment),zwo=l(),Mme=a("p"),Qwo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wwo=l(),Na=a("p"),Hwo=o("The model class to instantiate is selected based on the "),Eme=a("code"),Uwo=o("model_type"),Jwo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),Ywo=o("pretrained_model_name_or_path"),Kwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),Zwo=o("pretrained_model_name_or_path"),eAo=o(":"),oAo=l(),G=a("ul"),Yu=a("li"),Ame=a("strong"),rAo=o("albert"),tAo=o(" \u2014 "),aG=a("a"),aAo=o("AlbertForPreTraining"),nAo=o(" (ALBERT model)"),sAo=l(),Ku=a("li"),Lme=a("strong"),lAo=o("bart"),iAo=o(" \u2014 "),nG=a("a"),dAo=o("BartForConditionalGeneration"),cAo=o(" (BART model)"),fAo=l(),Zu=a("li"),yme=a("strong"),mAo=o("bert"),gAo=o(" \u2014 "),sG=a("a"),hAo=o("BertForPreTraining"),pAo=o(" (BERT model)"),_Ao=l(),e2=a("li"),xme=a("strong"),uAo=o("big_bird"),bAo=o(" \u2014 "),lG=a("a"),vAo=o("BigBirdForPreTraining"),FAo=o(" (BigBird model)"),TAo=l(),o2=a("li"),$me=a("strong"),MAo=o("bloom"),EAo=o(" \u2014 "),iG=a("a"),CAo=o("BloomForCausalLM"),wAo=o(" (BLOOM model)"),AAo=l(),r2=a("li"),kme=a("strong"),LAo=o("camembert"),yAo=o(" \u2014 "),dG=a("a"),xAo=o("CamembertForMaskedLM"),$Ao=o(" (CamemBERT model)"),kAo=l(),t2=a("li"),Sme=a("strong"),SAo=o("ctrl"),RAo=o(" \u2014 "),cG=a("a"),PAo=o("CTRLLMHeadModel"),BAo=o(" (CTRL model)"),IAo=l(),a2=a("li"),Rme=a("strong"),NAo=o("data2vec-text"),qAo=o(" \u2014 "),fG=a("a"),jAo=o("Data2VecTextForMaskedLM"),DAo=o(" (Data2VecText model)"),GAo=l(),n2=a("li"),Pme=a("strong"),OAo=o("deberta"),VAo=o(" \u2014 "),mG=a("a"),XAo=o("DebertaForMaskedLM"),zAo=o(" (DeBERTa model)"),QAo=l(),s2=a("li"),Bme=a("strong"),WAo=o("deberta-v2"),HAo=o(" \u2014 "),gG=a("a"),UAo=o("DebertaV2ForMaskedLM"),JAo=o(" (DeBERTa-v2 model)"),YAo=l(),l2=a("li"),Ime=a("strong"),KAo=o("distilbert"),ZAo=o(" \u2014 "),hG=a("a"),eLo=o("DistilBertForMaskedLM"),oLo=o(" (DistilBERT model)"),rLo=l(),i2=a("li"),Nme=a("strong"),tLo=o("electra"),aLo=o(" \u2014 "),pG=a("a"),nLo=o("ElectraForPreTraining"),sLo=o(" (ELECTRA model)"),lLo=l(),d2=a("li"),qme=a("strong"),iLo=o("flaubert"),dLo=o(" \u2014 "),_G=a("a"),cLo=o("FlaubertWithLMHeadModel"),fLo=o(" (FlauBERT model)"),mLo=l(),c2=a("li"),jme=a("strong"),gLo=o("flava"),hLo=o(" \u2014 "),uG=a("a"),pLo=o("FlavaForPreTraining"),_Lo=o(" (FLAVA model)"),uLo=l(),f2=a("li"),Dme=a("strong"),bLo=o("fnet"),vLo=o(" \u2014 "),bG=a("a"),FLo=o("FNetForPreTraining"),TLo=o(" (FNet model)"),MLo=l(),m2=a("li"),Gme=a("strong"),ELo=o("fsmt"),CLo=o(" \u2014 "),vG=a("a"),wLo=o("FSMTForConditionalGeneration"),ALo=o(" (FairSeq Machine-Translation model)"),LLo=l(),g2=a("li"),Ome=a("strong"),yLo=o("funnel"),xLo=o(" \u2014 "),FG=a("a"),$Lo=o("FunnelForPreTraining"),kLo=o(" (Funnel Transformer model)"),SLo=l(),h2=a("li"),Vme=a("strong"),RLo=o("gpt2"),PLo=o(" \u2014 "),TG=a("a"),BLo=o("GPT2LMHeadModel"),ILo=o(" (OpenAI GPT-2 model)"),NLo=l(),p2=a("li"),Xme=a("strong"),qLo=o("ibert"),jLo=o(" \u2014 "),MG=a("a"),DLo=o("IBertForMaskedLM"),GLo=o(" (I-BERT model)"),OLo=l(),_2=a("li"),zme=a("strong"),VLo=o("layoutlm"),XLo=o(" \u2014 "),EG=a("a"),zLo=o("LayoutLMForMaskedLM"),QLo=o(" (LayoutLM model)"),WLo=l(),u2=a("li"),Qme=a("strong"),HLo=o("longformer"),ULo=o(" \u2014 "),CG=a("a"),JLo=o("LongformerForMaskedLM"),YLo=o(" (Longformer model)"),KLo=l(),b2=a("li"),Wme=a("strong"),ZLo=o("lxmert"),eyo=o(" \u2014 "),wG=a("a"),oyo=o("LxmertForPreTraining"),ryo=o(" (LXMERT model)"),tyo=l(),v2=a("li"),Hme=a("strong"),ayo=o("megatron-bert"),nyo=o(" \u2014 "),AG=a("a"),syo=o("MegatronBertForPreTraining"),lyo=o(" (Megatron-BERT model)"),iyo=l(),F2=a("li"),Ume=a("strong"),dyo=o("mobilebert"),cyo=o(" \u2014 "),LG=a("a"),fyo=o("MobileBertForPreTraining"),myo=o(" (MobileBERT model)"),gyo=l(),T2=a("li"),Jme=a("strong"),hyo=o("mpnet"),pyo=o(" \u2014 "),yG=a("a"),_yo=o("MPNetForMaskedLM"),uyo=o(" (MPNet model)"),byo=l(),M2=a("li"),Yme=a("strong"),vyo=o("mvp"),Fyo=o(" \u2014 "),xG=a("a"),Tyo=o("MvpForConditionalGeneration"),Myo=o(" (MVP model)"),Eyo=l(),E2=a("li"),Kme=a("strong"),Cyo=o("nezha"),wyo=o(" \u2014 "),$G=a("a"),Ayo=o("NezhaForPreTraining"),Lyo=o(" (Nezha model)"),yyo=l(),C2=a("li"),Zme=a("strong"),xyo=o("openai-gpt"),$yo=o(" \u2014 "),kG=a("a"),kyo=o("OpenAIGPTLMHeadModel"),Syo=o(" (OpenAI GPT model)"),Ryo=l(),w2=a("li"),ege=a("strong"),Pyo=o("retribert"),Byo=o(" \u2014 "),SG=a("a"),Iyo=o("RetriBertModel"),Nyo=o(" (RetriBERT model)"),qyo=l(),A2=a("li"),oge=a("strong"),jyo=o("roberta"),Dyo=o(" \u2014 "),RG=a("a"),Gyo=o("RobertaForMaskedLM"),Oyo=o(" (RoBERTa model)"),Vyo=l(),L2=a("li"),rge=a("strong"),Xyo=o("splinter"),zyo=o(" \u2014 "),PG=a("a"),Qyo=o("SplinterForPreTraining"),Wyo=o(" (Splinter model)"),Hyo=l(),y2=a("li"),tge=a("strong"),Uyo=o("squeezebert"),Jyo=o(" \u2014 "),BG=a("a"),Yyo=o("SqueezeBertForMaskedLM"),Kyo=o(" (SqueezeBERT model)"),Zyo=l(),x2=a("li"),age=a("strong"),e9o=o("t5"),o9o=o(" \u2014 "),IG=a("a"),r9o=o("T5ForConditionalGeneration"),t9o=o(" (T5 model)"),a9o=l(),$2=a("li"),nge=a("strong"),n9o=o("tapas"),s9o=o(" \u2014 "),NG=a("a"),l9o=o("TapasForMaskedLM"),i9o=o(" (TAPAS model)"),d9o=l(),k2=a("li"),sge=a("strong"),c9o=o("transfo-xl"),f9o=o(" \u2014 "),qG=a("a"),m9o=o("TransfoXLLMHeadModel"),g9o=o(" (Transformer-XL model)"),h9o=l(),S2=a("li"),lge=a("strong"),p9o=o("unispeech"),_9o=o(" \u2014 "),jG=a("a"),u9o=o("UniSpeechForPreTraining"),b9o=o(" (UniSpeech model)"),v9o=l(),R2=a("li"),ige=a("strong"),F9o=o("unispeech-sat"),T9o=o(" \u2014 "),DG=a("a"),M9o=o("UniSpeechSatForPreTraining"),E9o=o(" (UniSpeechSat model)"),C9o=l(),P2=a("li"),dge=a("strong"),w9o=o("visual_bert"),A9o=o(" \u2014 "),GG=a("a"),L9o=o("VisualBertForPreTraining"),y9o=o(" (VisualBERT model)"),x9o=l(),B2=a("li"),cge=a("strong"),$9o=o("vit_mae"),k9o=o(" \u2014 "),OG=a("a"),S9o=o("ViTMAEForPreTraining"),R9o=o(" (ViTMAE model)"),P9o=l(),I2=a("li"),fge=a("strong"),B9o=o("wav2vec2"),I9o=o(" \u2014 "),VG=a("a"),N9o=o("Wav2Vec2ForPreTraining"),q9o=o(" (Wav2Vec2 model)"),j9o=l(),N2=a("li"),mge=a("strong"),D9o=o("wav2vec2-conformer"),G9o=o(" \u2014 "),XG=a("a"),O9o=o("Wav2Vec2ConformerForPreTraining"),V9o=o(" (Wav2Vec2-Conformer model)"),X9o=l(),q2=a("li"),gge=a("strong"),z9o=o("xlm"),Q9o=o(" \u2014 "),zG=a("a"),W9o=o("XLMWithLMHeadModel"),H9o=o(" (XLM model)"),U9o=l(),j2=a("li"),hge=a("strong"),J9o=o("xlm-roberta"),Y9o=o(" \u2014 "),QG=a("a"),K9o=o("XLMRobertaForMaskedLM"),Z9o=o(" (XLM-RoBERTa model)"),exo=l(),D2=a("li"),pge=a("strong"),oxo=o("xlm-roberta-xl"),rxo=o(" \u2014 "),WG=a("a"),txo=o("XLMRobertaXLForMaskedLM"),axo=o(" (XLM-RoBERTa-XL model)"),nxo=l(),G2=a("li"),_ge=a("strong"),sxo=o("xlnet"),lxo=o(" \u2014 "),HG=a("a"),ixo=o("XLNetLMHeadModel"),dxo=o(" (XLNet model)"),cxo=l(),O2=a("p"),fxo=o("The model is set in evaluation mode by default using "),uge=a("code"),mxo=o("model.eval()"),gxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),hxo=o("model.train()"),pxo=l(),F(V2.$$.fragment),uXe=l(),Qi=a("h2"),X2=a("a"),vge=a("span"),F(GL.$$.fragment),_xo=l(),Fge=a("span"),uxo=o("AutoModelForCausalLM"),bXe=l(),ko=a("div"),F(OL.$$.fragment),bxo=l(),Wi=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UG=a("a"),Fxo=o("from_pretrained()"),Txo=o(" class method or the "),JG=a("a"),Mxo=o("from_config()"),Exo=o(` class
method.`),Cxo=l(),VL=a("p"),wxo=o("This class cannot be instantiated directly using "),Tge=a("code"),Axo=o("__init__()"),Lxo=o(" (throws an error)."),yxo=l(),dt=a("div"),F(XL.$$.fragment),xxo=l(),Mge=a("p"),$xo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kxo=l(),Hi=a("p"),Sxo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),Rxo=o("not"),Pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),Bxo=o("from_pretrained()"),Ixo=o(" to load the model weights."),Nxo=l(),F(z2.$$.fragment),qxo=l(),Ke=a("div"),F(zL.$$.fragment),jxo=l(),Cge=a("p"),Dxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gxo=l(),qa=a("p"),Oxo=o("The model class to instantiate is selected based on the "),wge=a("code"),Vxo=o("model_type"),Xxo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),Wxo=o("pretrained_model_name_or_path"),Hxo=o(":"),Uxo=l(),z=a("ul"),Q2=a("li"),yge=a("strong"),Jxo=o("bart"),Yxo=o(" \u2014 "),KG=a("a"),Kxo=o("BartForCausalLM"),Zxo=o(" (BART model)"),e$o=l(),W2=a("li"),xge=a("strong"),o$o=o("bert"),r$o=o(" \u2014 "),ZG=a("a"),t$o=o("BertLMHeadModel"),a$o=o(" (BERT model)"),n$o=l(),H2=a("li"),$ge=a("strong"),s$o=o("bert-generation"),l$o=o(" \u2014 "),eO=a("a"),i$o=o("BertGenerationDecoder"),d$o=o(" (Bert Generation model)"),c$o=l(),U2=a("li"),kge=a("strong"),f$o=o("big_bird"),m$o=o(" \u2014 "),oO=a("a"),g$o=o("BigBirdForCausalLM"),h$o=o(" (BigBird model)"),p$o=l(),J2=a("li"),Sge=a("strong"),_$o=o("bigbird_pegasus"),u$o=o(" \u2014 "),rO=a("a"),b$o=o("BigBirdPegasusForCausalLM"),v$o=o(" (BigBird-Pegasus model)"),F$o=l(),Y2=a("li"),Rge=a("strong"),T$o=o("blenderbot"),M$o=o(" \u2014 "),tO=a("a"),E$o=o("BlenderbotForCausalLM"),C$o=o(" (Blenderbot model)"),w$o=l(),K2=a("li"),Pge=a("strong"),A$o=o("blenderbot-small"),L$o=o(" \u2014 "),aO=a("a"),y$o=o("BlenderbotSmallForCausalLM"),x$o=o(" (BlenderbotSmall model)"),$$o=l(),Z2=a("li"),Bge=a("strong"),k$o=o("bloom"),S$o=o(" \u2014 "),nO=a("a"),R$o=o("BloomForCausalLM"),P$o=o(" (BLOOM model)"),B$o=l(),e1=a("li"),Ige=a("strong"),I$o=o("camembert"),N$o=o(" \u2014 "),sO=a("a"),q$o=o("CamembertForCausalLM"),j$o=o(" (CamemBERT model)"),D$o=l(),o1=a("li"),Nge=a("strong"),G$o=o("codegen"),O$o=o(" \u2014 "),lO=a("a"),V$o=o("CodeGenForCausalLM"),X$o=o(" (CodeGen model)"),z$o=l(),r1=a("li"),qge=a("strong"),Q$o=o("ctrl"),W$o=o(" \u2014 "),iO=a("a"),H$o=o("CTRLLMHeadModel"),U$o=o(" (CTRL model)"),J$o=l(),t1=a("li"),jge=a("strong"),Y$o=o("data2vec-text"),K$o=o(" \u2014 "),dO=a("a"),Z$o=o("Data2VecTextForCausalLM"),eko=o(" (Data2VecText model)"),oko=l(),a1=a("li"),Dge=a("strong"),rko=o("electra"),tko=o(" \u2014 "),cO=a("a"),ako=o("ElectraForCausalLM"),nko=o(" (ELECTRA model)"),sko=l(),n1=a("li"),Gge=a("strong"),lko=o("gpt2"),iko=o(" \u2014 "),fO=a("a"),dko=o("GPT2LMHeadModel"),cko=o(" (OpenAI GPT-2 model)"),fko=l(),s1=a("li"),Oge=a("strong"),mko=o("gpt_neo"),gko=o(" \u2014 "),mO=a("a"),hko=o("GPTNeoForCausalLM"),pko=o(" (GPT Neo model)"),_ko=l(),l1=a("li"),Vge=a("strong"),uko=o("gpt_neox"),bko=o(" \u2014 "),gO=a("a"),vko=o("GPTNeoXForCausalLM"),Fko=o(" (GPT NeoX model)"),Tko=l(),i1=a("li"),Xge=a("strong"),Mko=o("gptj"),Eko=o(" \u2014 "),hO=a("a"),Cko=o("GPTJForCausalLM"),wko=o(" (GPT-J model)"),Ako=l(),d1=a("li"),zge=a("strong"),Lko=o("marian"),yko=o(" \u2014 "),pO=a("a"),xko=o("MarianForCausalLM"),$ko=o(" (Marian model)"),kko=l(),c1=a("li"),Qge=a("strong"),Sko=o("mbart"),Rko=o(" \u2014 "),_O=a("a"),Pko=o("MBartForCausalLM"),Bko=o(" (mBART model)"),Iko=l(),f1=a("li"),Wge=a("strong"),Nko=o("megatron-bert"),qko=o(" \u2014 "),uO=a("a"),jko=o("MegatronBertForCausalLM"),Dko=o(" (Megatron-BERT model)"),Gko=l(),m1=a("li"),Hge=a("strong"),Oko=o("mvp"),Vko=o(" \u2014 "),bO=a("a"),Xko=o("MvpForCausalLM"),zko=o(" (MVP model)"),Qko=l(),g1=a("li"),Uge=a("strong"),Wko=o("openai-gpt"),Hko=o(" \u2014 "),vO=a("a"),Uko=o("OpenAIGPTLMHeadModel"),Jko=o(" (OpenAI GPT model)"),Yko=l(),h1=a("li"),Jge=a("strong"),Kko=o("opt"),Zko=o(" \u2014 "),FO=a("a"),eSo=o("OPTForCausalLM"),oSo=o(" (OPT model)"),rSo=l(),p1=a("li"),Yge=a("strong"),tSo=o("pegasus"),aSo=o(" \u2014 "),TO=a("a"),nSo=o("PegasusForCausalLM"),sSo=o(" (Pegasus model)"),lSo=l(),_1=a("li"),Kge=a("strong"),iSo=o("plbart"),dSo=o(" \u2014 "),MO=a("a"),cSo=o("PLBartForCausalLM"),fSo=o(" (PLBart model)"),mSo=l(),u1=a("li"),Zge=a("strong"),gSo=o("prophetnet"),hSo=o(" \u2014 "),EO=a("a"),pSo=o("ProphetNetForCausalLM"),_So=o(" (ProphetNet model)"),uSo=l(),b1=a("li"),ehe=a("strong"),bSo=o("qdqbert"),vSo=o(" \u2014 "),CO=a("a"),FSo=o("QDQBertLMHeadModel"),TSo=o(" (QDQBert model)"),MSo=l(),v1=a("li"),ohe=a("strong"),ESo=o("reformer"),CSo=o(" \u2014 "),wO=a("a"),wSo=o("ReformerModelWithLMHead"),ASo=o(" (Reformer model)"),LSo=l(),F1=a("li"),rhe=a("strong"),ySo=o("rembert"),xSo=o(" \u2014 "),AO=a("a"),$So=o("RemBertForCausalLM"),kSo=o(" (RemBERT model)"),SSo=l(),T1=a("li"),the=a("strong"),RSo=o("roberta"),PSo=o(" \u2014 "),LO=a("a"),BSo=o("RobertaForCausalLM"),ISo=o(" (RoBERTa model)"),NSo=l(),M1=a("li"),ahe=a("strong"),qSo=o("roformer"),jSo=o(" \u2014 "),yO=a("a"),DSo=o("RoFormerForCausalLM"),GSo=o(" (RoFormer model)"),OSo=l(),E1=a("li"),nhe=a("strong"),VSo=o("speech_to_text_2"),XSo=o(" \u2014 "),xO=a("a"),zSo=o("Speech2Text2ForCausalLM"),QSo=o(" (Speech2Text2 model)"),WSo=l(),C1=a("li"),she=a("strong"),HSo=o("transfo-xl"),USo=o(" \u2014 "),$O=a("a"),JSo=o("TransfoXLLMHeadModel"),YSo=o(" (Transformer-XL model)"),KSo=l(),w1=a("li"),lhe=a("strong"),ZSo=o("trocr"),eRo=o(" \u2014 "),kO=a("a"),oRo=o("TrOCRForCausalLM"),rRo=o(" (TrOCR model)"),tRo=l(),A1=a("li"),ihe=a("strong"),aRo=o("xglm"),nRo=o(" \u2014 "),SO=a("a"),sRo=o("XGLMForCausalLM"),lRo=o(" (XGLM model)"),iRo=l(),L1=a("li"),dhe=a("strong"),dRo=o("xlm"),cRo=o(" \u2014 "),RO=a("a"),fRo=o("XLMWithLMHeadModel"),mRo=o(" (XLM model)"),gRo=l(),y1=a("li"),che=a("strong"),hRo=o("xlm-prophetnet"),pRo=o(" \u2014 "),PO=a("a"),_Ro=o("XLMProphetNetForCausalLM"),uRo=o(" (XLM-ProphetNet model)"),bRo=l(),x1=a("li"),fhe=a("strong"),vRo=o("xlm-roberta"),FRo=o(" \u2014 "),BO=a("a"),TRo=o("XLMRobertaForCausalLM"),MRo=o(" (XLM-RoBERTa model)"),ERo=l(),$1=a("li"),mhe=a("strong"),CRo=o("xlm-roberta-xl"),wRo=o(" \u2014 "),IO=a("a"),ARo=o("XLMRobertaXLForCausalLM"),LRo=o(" (XLM-RoBERTa-XL model)"),yRo=l(),k1=a("li"),ghe=a("strong"),xRo=o("xlnet"),$Ro=o(" \u2014 "),NO=a("a"),kRo=o("XLNetLMHeadModel"),SRo=o(" (XLNet model)"),RRo=l(),S1=a("p"),PRo=o("The model is set in evaluation mode by default using "),hhe=a("code"),BRo=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),NRo=o("model.train()"),qRo=l(),F(R1.$$.fragment),vXe=l(),Ui=a("h2"),P1=a("a"),_he=a("span"),F(QL.$$.fragment),jRo=l(),uhe=a("span"),DRo=o("AutoModelForMaskedLM"),FXe=l(),So=a("div"),F(WL.$$.fragment),GRo=l(),Ji=a("p"),ORo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qO=a("a"),VRo=o("from_pretrained()"),XRo=o(" class method or the "),jO=a("a"),zRo=o("from_config()"),QRo=o(` class
method.`),WRo=l(),HL=a("p"),HRo=o("This class cannot be instantiated directly using "),bhe=a("code"),URo=o("__init__()"),JRo=o(" (throws an error)."),YRo=l(),ct=a("div"),F(UL.$$.fragment),KRo=l(),vhe=a("p"),ZRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ePo=l(),Yi=a("p"),oPo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),rPo=o("not"),tPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),aPo=o("from_pretrained()"),nPo=o(" to load the model weights."),sPo=l(),F(B1.$$.fragment),lPo=l(),Ze=a("div"),F(JL.$$.fragment),iPo=l(),The=a("p"),dPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPo=l(),ja=a("p"),fPo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),mPo=o("model_type"),gPo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),_Po=o("pretrained_model_name_or_path"),uPo=o(":"),bPo=l(),W=a("ul"),I1=a("li"),whe=a("strong"),vPo=o("albert"),FPo=o(" \u2014 "),GO=a("a"),TPo=o("AlbertForMaskedLM"),MPo=o(" (ALBERT model)"),EPo=l(),N1=a("li"),Ahe=a("strong"),CPo=o("bart"),wPo=o(" \u2014 "),OO=a("a"),APo=o("BartForConditionalGeneration"),LPo=o(" (BART model)"),yPo=l(),q1=a("li"),Lhe=a("strong"),xPo=o("bert"),$Po=o(" \u2014 "),VO=a("a"),kPo=o("BertForMaskedLM"),SPo=o(" (BERT model)"),RPo=l(),j1=a("li"),yhe=a("strong"),PPo=o("big_bird"),BPo=o(" \u2014 "),XO=a("a"),IPo=o("BigBirdForMaskedLM"),NPo=o(" (BigBird model)"),qPo=l(),D1=a("li"),xhe=a("strong"),jPo=o("camembert"),DPo=o(" \u2014 "),zO=a("a"),GPo=o("CamembertForMaskedLM"),OPo=o(" (CamemBERT model)"),VPo=l(),G1=a("li"),$he=a("strong"),XPo=o("convbert"),zPo=o(" \u2014 "),QO=a("a"),QPo=o("ConvBertForMaskedLM"),WPo=o(" (ConvBERT model)"),HPo=l(),O1=a("li"),khe=a("strong"),UPo=o("data2vec-text"),JPo=o(" \u2014 "),WO=a("a"),YPo=o("Data2VecTextForMaskedLM"),KPo=o(" (Data2VecText model)"),ZPo=l(),V1=a("li"),She=a("strong"),eBo=o("deberta"),oBo=o(" \u2014 "),HO=a("a"),rBo=o("DebertaForMaskedLM"),tBo=o(" (DeBERTa model)"),aBo=l(),X1=a("li"),Rhe=a("strong"),nBo=o("deberta-v2"),sBo=o(" \u2014 "),UO=a("a"),lBo=o("DebertaV2ForMaskedLM"),iBo=o(" (DeBERTa-v2 model)"),dBo=l(),z1=a("li"),Phe=a("strong"),cBo=o("distilbert"),fBo=o(" \u2014 "),JO=a("a"),mBo=o("DistilBertForMaskedLM"),gBo=o(" (DistilBERT model)"),hBo=l(),Q1=a("li"),Bhe=a("strong"),pBo=o("electra"),_Bo=o(" \u2014 "),YO=a("a"),uBo=o("ElectraForMaskedLM"),bBo=o(" (ELECTRA model)"),vBo=l(),W1=a("li"),Ihe=a("strong"),FBo=o("flaubert"),TBo=o(" \u2014 "),KO=a("a"),MBo=o("FlaubertWithLMHeadModel"),EBo=o(" (FlauBERT model)"),CBo=l(),H1=a("li"),Nhe=a("strong"),wBo=o("fnet"),ABo=o(" \u2014 "),ZO=a("a"),LBo=o("FNetForMaskedLM"),yBo=o(" (FNet model)"),xBo=l(),U1=a("li"),qhe=a("strong"),$Bo=o("funnel"),kBo=o(" \u2014 "),eV=a("a"),SBo=o("FunnelForMaskedLM"),RBo=o(" (Funnel Transformer model)"),PBo=l(),J1=a("li"),jhe=a("strong"),BBo=o("ibert"),IBo=o(" \u2014 "),oV=a("a"),NBo=o("IBertForMaskedLM"),qBo=o(" (I-BERT model)"),jBo=l(),Y1=a("li"),Dhe=a("strong"),DBo=o("layoutlm"),GBo=o(" \u2014 "),rV=a("a"),OBo=o("LayoutLMForMaskedLM"),VBo=o(" (LayoutLM model)"),XBo=l(),K1=a("li"),Ghe=a("strong"),zBo=o("longformer"),QBo=o(" \u2014 "),tV=a("a"),WBo=o("LongformerForMaskedLM"),HBo=o(" (Longformer model)"),UBo=l(),Z1=a("li"),Ohe=a("strong"),JBo=o("luke"),YBo=o(" \u2014 "),aV=a("a"),KBo=o("LukeForMaskedLM"),ZBo=o(" (LUKE model)"),eIo=l(),eb=a("li"),Vhe=a("strong"),oIo=o("mbart"),rIo=o(" \u2014 "),nV=a("a"),tIo=o("MBartForConditionalGeneration"),aIo=o(" (mBART model)"),nIo=l(),ob=a("li"),Xhe=a("strong"),sIo=o("megatron-bert"),lIo=o(" \u2014 "),sV=a("a"),iIo=o("MegatronBertForMaskedLM"),dIo=o(" (Megatron-BERT model)"),cIo=l(),rb=a("li"),zhe=a("strong"),fIo=o("mobilebert"),mIo=o(" \u2014 "),lV=a("a"),gIo=o("MobileBertForMaskedLM"),hIo=o(" (MobileBERT model)"),pIo=l(),tb=a("li"),Qhe=a("strong"),_Io=o("mpnet"),uIo=o(" \u2014 "),iV=a("a"),bIo=o("MPNetForMaskedLM"),vIo=o(" (MPNet model)"),FIo=l(),ab=a("li"),Whe=a("strong"),TIo=o("mvp"),MIo=o(" \u2014 "),dV=a("a"),EIo=o("MvpForConditionalGeneration"),CIo=o(" (MVP model)"),wIo=l(),nb=a("li"),Hhe=a("strong"),AIo=o("nezha"),LIo=o(" \u2014 "),cV=a("a"),yIo=o("NezhaForMaskedLM"),xIo=o(" (Nezha model)"),$Io=l(),sb=a("li"),Uhe=a("strong"),kIo=o("nystromformer"),SIo=o(" \u2014 "),fV=a("a"),RIo=o("NystromformerForMaskedLM"),PIo=o(" (Nystr\xF6mformer model)"),BIo=l(),lb=a("li"),Jhe=a("strong"),IIo=o("perceiver"),NIo=o(" \u2014 "),mV=a("a"),qIo=o("PerceiverForMaskedLM"),jIo=o(" (Perceiver model)"),DIo=l(),ib=a("li"),Yhe=a("strong"),GIo=o("qdqbert"),OIo=o(" \u2014 "),gV=a("a"),VIo=o("QDQBertForMaskedLM"),XIo=o(" (QDQBert model)"),zIo=l(),db=a("li"),Khe=a("strong"),QIo=o("reformer"),WIo=o(" \u2014 "),hV=a("a"),HIo=o("ReformerForMaskedLM"),UIo=o(" (Reformer model)"),JIo=l(),cb=a("li"),Zhe=a("strong"),YIo=o("rembert"),KIo=o(" \u2014 "),pV=a("a"),ZIo=o("RemBertForMaskedLM"),eNo=o(" (RemBERT model)"),oNo=l(),fb=a("li"),epe=a("strong"),rNo=o("roberta"),tNo=o(" \u2014 "),_V=a("a"),aNo=o("RobertaForMaskedLM"),nNo=o(" (RoBERTa model)"),sNo=l(),mb=a("li"),ope=a("strong"),lNo=o("roformer"),iNo=o(" \u2014 "),uV=a("a"),dNo=o("RoFormerForMaskedLM"),cNo=o(" (RoFormer model)"),fNo=l(),gb=a("li"),rpe=a("strong"),mNo=o("squeezebert"),gNo=o(" \u2014 "),bV=a("a"),hNo=o("SqueezeBertForMaskedLM"),pNo=o(" (SqueezeBERT model)"),_No=l(),hb=a("li"),tpe=a("strong"),uNo=o("tapas"),bNo=o(" \u2014 "),vV=a("a"),vNo=o("TapasForMaskedLM"),FNo=o(" (TAPAS model)"),TNo=l(),pb=a("li"),ape=a("strong"),MNo=o("wav2vec2"),ENo=o(" \u2014 "),npe=a("code"),CNo=o("Wav2Vec2ForMaskedLM"),wNo=o(" (Wav2Vec2 model)"),ANo=l(),_b=a("li"),spe=a("strong"),LNo=o("xlm"),yNo=o(" \u2014 "),FV=a("a"),xNo=o("XLMWithLMHeadModel"),$No=o(" (XLM model)"),kNo=l(),ub=a("li"),lpe=a("strong"),SNo=o("xlm-roberta"),RNo=o(" \u2014 "),TV=a("a"),PNo=o("XLMRobertaForMaskedLM"),BNo=o(" (XLM-RoBERTa model)"),INo=l(),bb=a("li"),ipe=a("strong"),NNo=o("xlm-roberta-xl"),qNo=o(" \u2014 "),MV=a("a"),jNo=o("XLMRobertaXLForMaskedLM"),DNo=o(" (XLM-RoBERTa-XL model)"),GNo=l(),vb=a("li"),dpe=a("strong"),ONo=o("yoso"),VNo=o(" \u2014 "),EV=a("a"),XNo=o("YosoForMaskedLM"),zNo=o(" (YOSO model)"),QNo=l(),Fb=a("p"),WNo=o("The model is set in evaluation mode by default using "),cpe=a("code"),HNo=o("model.eval()"),UNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),JNo=o("model.train()"),YNo=l(),F(Tb.$$.fragment),TXe=l(),Ki=a("h2"),Mb=a("a"),mpe=a("span"),F(YL.$$.fragment),KNo=l(),gpe=a("span"),ZNo=o("AutoModelForSeq2SeqLM"),MXe=l(),Ro=a("div"),F(KL.$$.fragment),eqo=l(),Zi=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CV=a("a"),rqo=o("from_pretrained()"),tqo=o(" class method or the "),wV=a("a"),aqo=o("from_config()"),nqo=o(` class
method.`),sqo=l(),ZL=a("p"),lqo=o("This class cannot be instantiated directly using "),hpe=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),ft=a("div"),F(ey.$$.fragment),fqo=l(),ppe=a("p"),mqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gqo=l(),ed=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),pqo=o("not"),_qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),uqo=o("from_pretrained()"),bqo=o(" to load the model weights."),vqo=l(),F(Eb.$$.fragment),Fqo=l(),eo=a("div"),F(oy.$$.fragment),Tqo=l(),upe=a("p"),Mqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Eqo=l(),Da=a("p"),Cqo=o("The model class to instantiate is selected based on the "),bpe=a("code"),wqo=o("model_type"),Aqo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Lqo=o("pretrained_model_name_or_path"),yqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),xqo=o("pretrained_model_name_or_path"),$qo=o(":"),kqo=l(),pe=a("ul"),Cb=a("li"),Tpe=a("strong"),Sqo=o("bart"),Rqo=o(" \u2014 "),LV=a("a"),Pqo=o("BartForConditionalGeneration"),Bqo=o(" (BART model)"),Iqo=l(),wb=a("li"),Mpe=a("strong"),Nqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),yV=a("a"),jqo=o("BigBirdPegasusForConditionalGeneration"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),Ab=a("li"),Epe=a("strong"),Oqo=o("blenderbot"),Vqo=o(" \u2014 "),xV=a("a"),Xqo=o("BlenderbotForConditionalGeneration"),zqo=o(" (Blenderbot model)"),Qqo=l(),Lb=a("li"),Cpe=a("strong"),Wqo=o("blenderbot-small"),Hqo=o(" \u2014 "),$V=a("a"),Uqo=o("BlenderbotSmallForConditionalGeneration"),Jqo=o(" (BlenderbotSmall model)"),Yqo=l(),yb=a("li"),wpe=a("strong"),Kqo=o("encoder-decoder"),Zqo=o(" \u2014 "),kV=a("a"),ejo=o("EncoderDecoderModel"),ojo=o(" (Encoder decoder model)"),rjo=l(),xb=a("li"),Ape=a("strong"),tjo=o("fsmt"),ajo=o(" \u2014 "),SV=a("a"),njo=o("FSMTForConditionalGeneration"),sjo=o(" (FairSeq Machine-Translation model)"),ljo=l(),$b=a("li"),Lpe=a("strong"),ijo=o("led"),djo=o(" \u2014 "),RV=a("a"),cjo=o("LEDForConditionalGeneration"),fjo=o(" (LED model)"),mjo=l(),kb=a("li"),ype=a("strong"),gjo=o("longt5"),hjo=o(" \u2014 "),PV=a("a"),pjo=o("LongT5ForConditionalGeneration"),_jo=o(" (LongT5 model)"),ujo=l(),Sb=a("li"),xpe=a("strong"),bjo=o("m2m_100"),vjo=o(" \u2014 "),BV=a("a"),Fjo=o("M2M100ForConditionalGeneration"),Tjo=o(" (M2M100 model)"),Mjo=l(),Rb=a("li"),$pe=a("strong"),Ejo=o("marian"),Cjo=o(" \u2014 "),IV=a("a"),wjo=o("MarianMTModel"),Ajo=o(" (Marian model)"),Ljo=l(),Pb=a("li"),kpe=a("strong"),yjo=o("mbart"),xjo=o(" \u2014 "),NV=a("a"),$jo=o("MBartForConditionalGeneration"),kjo=o(" (mBART model)"),Sjo=l(),Bb=a("li"),Spe=a("strong"),Rjo=o("mt5"),Pjo=o(" \u2014 "),qV=a("a"),Bjo=o("MT5ForConditionalGeneration"),Ijo=o(" (MT5 model)"),Njo=l(),Ib=a("li"),Rpe=a("strong"),qjo=o("mvp"),jjo=o(" \u2014 "),jV=a("a"),Djo=o("MvpForConditionalGeneration"),Gjo=o(" (MVP model)"),Ojo=l(),Nb=a("li"),Ppe=a("strong"),Vjo=o("pegasus"),Xjo=o(" \u2014 "),DV=a("a"),zjo=o("PegasusForConditionalGeneration"),Qjo=o(" (Pegasus model)"),Wjo=l(),qb=a("li"),Bpe=a("strong"),Hjo=o("plbart"),Ujo=o(" \u2014 "),GV=a("a"),Jjo=o("PLBartForConditionalGeneration"),Yjo=o(" (PLBart model)"),Kjo=l(),jb=a("li"),Ipe=a("strong"),Zjo=o("prophetnet"),eDo=o(" \u2014 "),OV=a("a"),oDo=o("ProphetNetForConditionalGeneration"),rDo=o(" (ProphetNet model)"),tDo=l(),Db=a("li"),Npe=a("strong"),aDo=o("t5"),nDo=o(" \u2014 "),VV=a("a"),sDo=o("T5ForConditionalGeneration"),lDo=o(" (T5 model)"),iDo=l(),Gb=a("li"),qpe=a("strong"),dDo=o("xlm-prophetnet"),cDo=o(" \u2014 "),XV=a("a"),fDo=o("XLMProphetNetForConditionalGeneration"),mDo=o(" (XLM-ProphetNet model)"),gDo=l(),Ob=a("p"),hDo=o("The model is set in evaluation mode by default using "),jpe=a("code"),pDo=o("model.eval()"),_Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),uDo=o("model.train()"),bDo=l(),F(Vb.$$.fragment),EXe=l(),od=a("h2"),Xb=a("a"),Gpe=a("span"),F(ry.$$.fragment),vDo=l(),Ope=a("span"),FDo=o("AutoModelForSequenceClassification"),CXe=l(),Po=a("div"),F(ty.$$.fragment),TDo=l(),rd=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zV=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),QV=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),LDo=l(),ay=a("p"),yDo=o("This class cannot be instantiated directly using "),Vpe=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),mt=a("div"),F(ny.$$.fragment),SDo=l(),Xpe=a("p"),RDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PDo=l(),td=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),IDo=o("not"),NDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),qDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(zb.$$.fragment),GDo=l(),oo=a("div"),F(sy.$$.fragment),ODo=l(),Qpe=a("p"),VDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XDo=l(),Ga=a("p"),zDo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),QDo=o("model_type"),WDo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),N=a("ul"),Qb=a("li"),Jpe=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),HV=a("a"),oGo=o("AlbertForSequenceClassification"),rGo=o(" (ALBERT model)"),tGo=l(),Wb=a("li"),Ype=a("strong"),aGo=o("bart"),nGo=o(" \u2014 "),UV=a("a"),sGo=o("BartForSequenceClassification"),lGo=o(" (BART model)"),iGo=l(),Hb=a("li"),Kpe=a("strong"),dGo=o("bert"),cGo=o(" \u2014 "),JV=a("a"),fGo=o("BertForSequenceClassification"),mGo=o(" (BERT model)"),gGo=l(),Ub=a("li"),Zpe=a("strong"),hGo=o("big_bird"),pGo=o(" \u2014 "),YV=a("a"),_Go=o("BigBirdForSequenceClassification"),uGo=o(" (BigBird model)"),bGo=l(),Jb=a("li"),e_e=a("strong"),vGo=o("bigbird_pegasus"),FGo=o(" \u2014 "),KV=a("a"),TGo=o("BigBirdPegasusForSequenceClassification"),MGo=o(" (BigBird-Pegasus model)"),EGo=l(),Yb=a("li"),o_e=a("strong"),CGo=o("bloom"),wGo=o(" \u2014 "),ZV=a("a"),AGo=o("BloomForSequenceClassification"),LGo=o(" (BLOOM model)"),yGo=l(),Kb=a("li"),r_e=a("strong"),xGo=o("camembert"),$Go=o(" \u2014 "),eX=a("a"),kGo=o("CamembertForSequenceClassification"),SGo=o(" (CamemBERT model)"),RGo=l(),Zb=a("li"),t_e=a("strong"),PGo=o("canine"),BGo=o(" \u2014 "),oX=a("a"),IGo=o("CanineForSequenceClassification"),NGo=o(" (CANINE model)"),qGo=l(),ev=a("li"),a_e=a("strong"),jGo=o("convbert"),DGo=o(" \u2014 "),rX=a("a"),GGo=o("ConvBertForSequenceClassification"),OGo=o(" (ConvBERT model)"),VGo=l(),ov=a("li"),n_e=a("strong"),XGo=o("ctrl"),zGo=o(" \u2014 "),tX=a("a"),QGo=o("CTRLForSequenceClassification"),WGo=o(" (CTRL model)"),HGo=l(),rv=a("li"),s_e=a("strong"),UGo=o("data2vec-text"),JGo=o(" \u2014 "),aX=a("a"),YGo=o("Data2VecTextForSequenceClassification"),KGo=o(" (Data2VecText model)"),ZGo=l(),tv=a("li"),l_e=a("strong"),eOo=o("deberta"),oOo=o(" \u2014 "),nX=a("a"),rOo=o("DebertaForSequenceClassification"),tOo=o(" (DeBERTa model)"),aOo=l(),av=a("li"),i_e=a("strong"),nOo=o("deberta-v2"),sOo=o(" \u2014 "),sX=a("a"),lOo=o("DebertaV2ForSequenceClassification"),iOo=o(" (DeBERTa-v2 model)"),dOo=l(),nv=a("li"),d_e=a("strong"),cOo=o("distilbert"),fOo=o(" \u2014 "),lX=a("a"),mOo=o("DistilBertForSequenceClassification"),gOo=o(" (DistilBERT model)"),hOo=l(),sv=a("li"),c_e=a("strong"),pOo=o("electra"),_Oo=o(" \u2014 "),iX=a("a"),uOo=o("ElectraForSequenceClassification"),bOo=o(" (ELECTRA model)"),vOo=l(),lv=a("li"),f_e=a("strong"),FOo=o("flaubert"),TOo=o(" \u2014 "),dX=a("a"),MOo=o("FlaubertForSequenceClassification"),EOo=o(" (FlauBERT model)"),COo=l(),iv=a("li"),m_e=a("strong"),wOo=o("fnet"),AOo=o(" \u2014 "),cX=a("a"),LOo=o("FNetForSequenceClassification"),yOo=o(" (FNet model)"),xOo=l(),dv=a("li"),g_e=a("strong"),$Oo=o("funnel"),kOo=o(" \u2014 "),fX=a("a"),SOo=o("FunnelForSequenceClassification"),ROo=o(" (Funnel Transformer model)"),POo=l(),cv=a("li"),h_e=a("strong"),BOo=o("gpt2"),IOo=o(" \u2014 "),mX=a("a"),NOo=o("GPT2ForSequenceClassification"),qOo=o(" (OpenAI GPT-2 model)"),jOo=l(),fv=a("li"),p_e=a("strong"),DOo=o("gpt_neo"),GOo=o(" \u2014 "),gX=a("a"),OOo=o("GPTNeoForSequenceClassification"),VOo=o(" (GPT Neo model)"),XOo=l(),mv=a("li"),__e=a("strong"),zOo=o("gptj"),QOo=o(" \u2014 "),hX=a("a"),WOo=o("GPTJForSequenceClassification"),HOo=o(" (GPT-J model)"),UOo=l(),gv=a("li"),u_e=a("strong"),JOo=o("ibert"),YOo=o(" \u2014 "),pX=a("a"),KOo=o("IBertForSequenceClassification"),ZOo=o(" (I-BERT model)"),eVo=l(),hv=a("li"),b_e=a("strong"),oVo=o("layoutlm"),rVo=o(" \u2014 "),_X=a("a"),tVo=o("LayoutLMForSequenceClassification"),aVo=o(" (LayoutLM model)"),nVo=l(),pv=a("li"),v_e=a("strong"),sVo=o("layoutlmv2"),lVo=o(" \u2014 "),uX=a("a"),iVo=o("LayoutLMv2ForSequenceClassification"),dVo=o(" (LayoutLMv2 model)"),cVo=l(),_v=a("li"),F_e=a("strong"),fVo=o("layoutlmv3"),mVo=o(" \u2014 "),bX=a("a"),gVo=o("LayoutLMv3ForSequenceClassification"),hVo=o(" (LayoutLMv3 model)"),pVo=l(),uv=a("li"),T_e=a("strong"),_Vo=o("led"),uVo=o(" \u2014 "),vX=a("a"),bVo=o("LEDForSequenceClassification"),vVo=o(" (LED model)"),FVo=l(),bv=a("li"),M_e=a("strong"),TVo=o("longformer"),MVo=o(" \u2014 "),FX=a("a"),EVo=o("LongformerForSequenceClassification"),CVo=o(" (Longformer model)"),wVo=l(),vv=a("li"),E_e=a("strong"),AVo=o("mbart"),LVo=o(" \u2014 "),TX=a("a"),yVo=o("MBartForSequenceClassification"),xVo=o(" (mBART model)"),$Vo=l(),Fv=a("li"),C_e=a("strong"),kVo=o("megatron-bert"),SVo=o(" \u2014 "),MX=a("a"),RVo=o("MegatronBertForSequenceClassification"),PVo=o(" (Megatron-BERT model)"),BVo=l(),Tv=a("li"),w_e=a("strong"),IVo=o("mobilebert"),NVo=o(" \u2014 "),EX=a("a"),qVo=o("MobileBertForSequenceClassification"),jVo=o(" (MobileBERT model)"),DVo=l(),Mv=a("li"),A_e=a("strong"),GVo=o("mpnet"),OVo=o(" \u2014 "),CX=a("a"),VVo=o("MPNetForSequenceClassification"),XVo=o(" (MPNet model)"),zVo=l(),Ev=a("li"),L_e=a("strong"),QVo=o("mvp"),WVo=o(" \u2014 "),wX=a("a"),HVo=o("MvpForSequenceClassification"),UVo=o(" (MVP model)"),JVo=l(),Cv=a("li"),y_e=a("strong"),YVo=o("nezha"),KVo=o(" \u2014 "),AX=a("a"),ZVo=o("NezhaForSequenceClassification"),eXo=o(" (Nezha model)"),oXo=l(),wv=a("li"),x_e=a("strong"),rXo=o("nystromformer"),tXo=o(" \u2014 "),LX=a("a"),aXo=o("NystromformerForSequenceClassification"),nXo=o(" (Nystr\xF6mformer model)"),sXo=l(),Av=a("li"),$_e=a("strong"),lXo=o("openai-gpt"),iXo=o(" \u2014 "),yX=a("a"),dXo=o("OpenAIGPTForSequenceClassification"),cXo=o(" (OpenAI GPT model)"),fXo=l(),Lv=a("li"),k_e=a("strong"),mXo=o("perceiver"),gXo=o(" \u2014 "),xX=a("a"),hXo=o("PerceiverForSequenceClassification"),pXo=o(" (Perceiver model)"),_Xo=l(),yv=a("li"),S_e=a("strong"),uXo=o("plbart"),bXo=o(" \u2014 "),$X=a("a"),vXo=o("PLBartForSequenceClassification"),FXo=o(" (PLBart model)"),TXo=l(),xv=a("li"),R_e=a("strong"),MXo=o("qdqbert"),EXo=o(" \u2014 "),kX=a("a"),CXo=o("QDQBertForSequenceClassification"),wXo=o(" (QDQBert model)"),AXo=l(),$v=a("li"),P_e=a("strong"),LXo=o("reformer"),yXo=o(" \u2014 "),SX=a("a"),xXo=o("ReformerForSequenceClassification"),$Xo=o(" (Reformer model)"),kXo=l(),kv=a("li"),B_e=a("strong"),SXo=o("rembert"),RXo=o(" \u2014 "),RX=a("a"),PXo=o("RemBertForSequenceClassification"),BXo=o(" (RemBERT model)"),IXo=l(),Sv=a("li"),I_e=a("strong"),NXo=o("roberta"),qXo=o(" \u2014 "),PX=a("a"),jXo=o("RobertaForSequenceClassification"),DXo=o(" (RoBERTa model)"),GXo=l(),Rv=a("li"),N_e=a("strong"),OXo=o("roformer"),VXo=o(" \u2014 "),BX=a("a"),XXo=o("RoFormerForSequenceClassification"),zXo=o(" (RoFormer model)"),QXo=l(),Pv=a("li"),q_e=a("strong"),WXo=o("squeezebert"),HXo=o(" \u2014 "),IX=a("a"),UXo=o("SqueezeBertForSequenceClassification"),JXo=o(" (SqueezeBERT model)"),YXo=l(),Bv=a("li"),j_e=a("strong"),KXo=o("tapas"),ZXo=o(" \u2014 "),NX=a("a"),ezo=o("TapasForSequenceClassification"),ozo=o(" (TAPAS model)"),rzo=l(),Iv=a("li"),D_e=a("strong"),tzo=o("transfo-xl"),azo=o(" \u2014 "),qX=a("a"),nzo=o("TransfoXLForSequenceClassification"),szo=o(" (Transformer-XL model)"),lzo=l(),Nv=a("li"),G_e=a("strong"),izo=o("xlm"),dzo=o(" \u2014 "),jX=a("a"),czo=o("XLMForSequenceClassification"),fzo=o(" (XLM model)"),mzo=l(),qv=a("li"),O_e=a("strong"),gzo=o("xlm-roberta"),hzo=o(" \u2014 "),DX=a("a"),pzo=o("XLMRobertaForSequenceClassification"),_zo=o(" (XLM-RoBERTa model)"),uzo=l(),jv=a("li"),V_e=a("strong"),bzo=o("xlm-roberta-xl"),vzo=o(" \u2014 "),GX=a("a"),Fzo=o("XLMRobertaXLForSequenceClassification"),Tzo=o(" (XLM-RoBERTa-XL model)"),Mzo=l(),Dv=a("li"),X_e=a("strong"),Ezo=o("xlnet"),Czo=o(" \u2014 "),OX=a("a"),wzo=o("XLNetForSequenceClassification"),Azo=o(" (XLNet model)"),Lzo=l(),Gv=a("li"),z_e=a("strong"),yzo=o("yoso"),xzo=o(" \u2014 "),VX=a("a"),$zo=o("YosoForSequenceClassification"),kzo=o(" (YOSO model)"),Szo=l(),Ov=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),Pzo=o("model.eval()"),Bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Izo=o("model.train()"),Nzo=l(),F(Vv.$$.fragment),wXe=l(),ad=a("h2"),Xv=a("a"),H_e=a("span"),F(ly.$$.fragment),qzo=l(),U_e=a("span"),jzo=o("AutoModelForMultipleChoice"),AXe=l(),Bo=a("div"),F(iy.$$.fragment),Dzo=l(),nd=a("p"),Gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XX=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" class method or the "),zX=a("a"),Xzo=o("from_config()"),zzo=o(` class
method.`),Qzo=l(),dy=a("p"),Wzo=o("This class cannot be instantiated directly using "),J_e=a("code"),Hzo=o("__init__()"),Uzo=o(" (throws an error)."),Jzo=l(),gt=a("div"),F(cy.$$.fragment),Yzo=l(),Y_e=a("p"),Kzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zzo=l(),sd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(zv.$$.fragment),sQo=l(),ro=a("div"),F(fy.$$.fragment),lQo=l(),Z_e=a("p"),iQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dQo=l(),Oa=a("p"),cQo=o("The model class to instantiate is selected based on the "),eue=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),pQo=o("pretrained_model_name_or_path"),_Qo=o(":"),uQo=l(),Z=a("ul"),Qv=a("li"),tue=a("strong"),bQo=o("albert"),vQo=o(" \u2014 "),WX=a("a"),FQo=o("AlbertForMultipleChoice"),TQo=o(" (ALBERT model)"),MQo=l(),Wv=a("li"),aue=a("strong"),EQo=o("bert"),CQo=o(" \u2014 "),HX=a("a"),wQo=o("BertForMultipleChoice"),AQo=o(" (BERT model)"),LQo=l(),Hv=a("li"),nue=a("strong"),yQo=o("big_bird"),xQo=o(" \u2014 "),UX=a("a"),$Qo=o("BigBirdForMultipleChoice"),kQo=o(" (BigBird model)"),SQo=l(),Uv=a("li"),sue=a("strong"),RQo=o("camembert"),PQo=o(" \u2014 "),JX=a("a"),BQo=o("CamembertForMultipleChoice"),IQo=o(" (CamemBERT model)"),NQo=l(),Jv=a("li"),lue=a("strong"),qQo=o("canine"),jQo=o(" \u2014 "),YX=a("a"),DQo=o("CanineForMultipleChoice"),GQo=o(" (CANINE model)"),OQo=l(),Yv=a("li"),iue=a("strong"),VQo=o("convbert"),XQo=o(" \u2014 "),KX=a("a"),zQo=o("ConvBertForMultipleChoice"),QQo=o(" (ConvBERT model)"),WQo=l(),Kv=a("li"),due=a("strong"),HQo=o("data2vec-text"),UQo=o(" \u2014 "),ZX=a("a"),JQo=o("Data2VecTextForMultipleChoice"),YQo=o(" (Data2VecText model)"),KQo=l(),Zv=a("li"),cue=a("strong"),ZQo=o("deberta-v2"),eWo=o(" \u2014 "),ez=a("a"),oWo=o("DebertaV2ForMultipleChoice"),rWo=o(" (DeBERTa-v2 model)"),tWo=l(),eF=a("li"),fue=a("strong"),aWo=o("distilbert"),nWo=o(" \u2014 "),oz=a("a"),sWo=o("DistilBertForMultipleChoice"),lWo=o(" (DistilBERT model)"),iWo=l(),oF=a("li"),mue=a("strong"),dWo=o("electra"),cWo=o(" \u2014 "),rz=a("a"),fWo=o("ElectraForMultipleChoice"),mWo=o(" (ELECTRA model)"),gWo=l(),rF=a("li"),gue=a("strong"),hWo=o("flaubert"),pWo=o(" \u2014 "),tz=a("a"),_Wo=o("FlaubertForMultipleChoice"),uWo=o(" (FlauBERT model)"),bWo=l(),tF=a("li"),hue=a("strong"),vWo=o("fnet"),FWo=o(" \u2014 "),az=a("a"),TWo=o("FNetForMultipleChoice"),MWo=o(" (FNet model)"),EWo=l(),aF=a("li"),pue=a("strong"),CWo=o("funnel"),wWo=o(" \u2014 "),nz=a("a"),AWo=o("FunnelForMultipleChoice"),LWo=o(" (Funnel Transformer model)"),yWo=l(),nF=a("li"),_ue=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),sz=a("a"),kWo=o("IBertForMultipleChoice"),SWo=o(" (I-BERT model)"),RWo=l(),sF=a("li"),uue=a("strong"),PWo=o("longformer"),BWo=o(" \u2014 "),lz=a("a"),IWo=o("LongformerForMultipleChoice"),NWo=o(" (Longformer model)"),qWo=l(),lF=a("li"),bue=a("strong"),jWo=o("megatron-bert"),DWo=o(" \u2014 "),iz=a("a"),GWo=o("MegatronBertForMultipleChoice"),OWo=o(" (Megatron-BERT model)"),VWo=l(),iF=a("li"),vue=a("strong"),XWo=o("mobilebert"),zWo=o(" \u2014 "),dz=a("a"),QWo=o("MobileBertForMultipleChoice"),WWo=o(" (MobileBERT model)"),HWo=l(),dF=a("li"),Fue=a("strong"),UWo=o("mpnet"),JWo=o(" \u2014 "),cz=a("a"),YWo=o("MPNetForMultipleChoice"),KWo=o(" (MPNet model)"),ZWo=l(),cF=a("li"),Tue=a("strong"),eHo=o("nezha"),oHo=o(" \u2014 "),fz=a("a"),rHo=o("NezhaForMultipleChoice"),tHo=o(" (Nezha model)"),aHo=l(),fF=a("li"),Mue=a("strong"),nHo=o("nystromformer"),sHo=o(" \u2014 "),mz=a("a"),lHo=o("NystromformerForMultipleChoice"),iHo=o(" (Nystr\xF6mformer model)"),dHo=l(),mF=a("li"),Eue=a("strong"),cHo=o("qdqbert"),fHo=o(" \u2014 "),gz=a("a"),mHo=o("QDQBertForMultipleChoice"),gHo=o(" (QDQBert model)"),hHo=l(),gF=a("li"),Cue=a("strong"),pHo=o("rembert"),_Ho=o(" \u2014 "),hz=a("a"),uHo=o("RemBertForMultipleChoice"),bHo=o(" (RemBERT model)"),vHo=l(),hF=a("li"),wue=a("strong"),FHo=o("roberta"),THo=o(" \u2014 "),pz=a("a"),MHo=o("RobertaForMultipleChoice"),EHo=o(" (RoBERTa model)"),CHo=l(),pF=a("li"),Aue=a("strong"),wHo=o("roformer"),AHo=o(" \u2014 "),_z=a("a"),LHo=o("RoFormerForMultipleChoice"),yHo=o(" (RoFormer model)"),xHo=l(),_F=a("li"),Lue=a("strong"),$Ho=o("squeezebert"),kHo=o(" \u2014 "),uz=a("a"),SHo=o("SqueezeBertForMultipleChoice"),RHo=o(" (SqueezeBERT model)"),PHo=l(),uF=a("li"),yue=a("strong"),BHo=o("xlm"),IHo=o(" \u2014 "),bz=a("a"),NHo=o("XLMForMultipleChoice"),qHo=o(" (XLM model)"),jHo=l(),bF=a("li"),xue=a("strong"),DHo=o("xlm-roberta"),GHo=o(" \u2014 "),vz=a("a"),OHo=o("XLMRobertaForMultipleChoice"),VHo=o(" (XLM-RoBERTa model)"),XHo=l(),vF=a("li"),$ue=a("strong"),zHo=o("xlm-roberta-xl"),QHo=o(" \u2014 "),Fz=a("a"),WHo=o("XLMRobertaXLForMultipleChoice"),HHo=o(" (XLM-RoBERTa-XL model)"),UHo=l(),FF=a("li"),kue=a("strong"),JHo=o("xlnet"),YHo=o(" \u2014 "),Tz=a("a"),KHo=o("XLNetForMultipleChoice"),ZHo=o(" (XLNet model)"),eUo=l(),TF=a("li"),Sue=a("strong"),oUo=o("yoso"),rUo=o(" \u2014 "),Mz=a("a"),tUo=o("YosoForMultipleChoice"),aUo=o(" (YOSO model)"),nUo=l(),MF=a("p"),sUo=o("The model is set in evaluation mode by default using "),Rue=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),dUo=o("model.train()"),cUo=l(),F(EF.$$.fragment),LXe=l(),ld=a("h2"),CF=a("a"),Bue=a("span"),F(my.$$.fragment),fUo=l(),Iue=a("span"),mUo=o("AutoModelForNextSentencePrediction"),yXe=l(),Io=a("div"),F(gy.$$.fragment),gUo=l(),id=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ez=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),Cz=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),vUo=l(),hy=a("p"),FUo=o("This class cannot be instantiated directly using "),Nue=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ht=a("div"),F(py.$$.fragment),CUo=l(),que=a("p"),wUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AUo=l(),dd=a("p"),LUo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),yUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),$Uo=o("from_pretrained()"),kUo=o(" to load the model weights."),SUo=l(),F(wF.$$.fragment),RUo=l(),to=a("div"),F(_y.$$.fragment),PUo=l(),Due=a("p"),BUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IUo=l(),Va=a("p"),NUo=o("The model class to instantiate is selected based on the "),Gue=a("code"),qUo=o("model_type"),jUo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(":"),XUo=l(),No=a("ul"),AF=a("li"),Xue=a("strong"),zUo=o("bert"),QUo=o(" \u2014 "),Az=a("a"),WUo=o("BertForNextSentencePrediction"),HUo=o(" (BERT model)"),UUo=l(),LF=a("li"),zue=a("strong"),JUo=o("fnet"),YUo=o(" \u2014 "),Lz=a("a"),KUo=o("FNetForNextSentencePrediction"),ZUo=o(" (FNet model)"),eJo=l(),yF=a("li"),Que=a("strong"),oJo=o("megatron-bert"),rJo=o(" \u2014 "),yz=a("a"),tJo=o("MegatronBertForNextSentencePrediction"),aJo=o(" (Megatron-BERT model)"),nJo=l(),xF=a("li"),Wue=a("strong"),sJo=o("mobilebert"),lJo=o(" \u2014 "),xz=a("a"),iJo=o("MobileBertForNextSentencePrediction"),dJo=o(" (MobileBERT model)"),cJo=l(),$F=a("li"),Hue=a("strong"),fJo=o("nezha"),mJo=o(" \u2014 "),$z=a("a"),gJo=o("NezhaForNextSentencePrediction"),hJo=o(" (Nezha model)"),pJo=l(),kF=a("li"),Uue=a("strong"),_Jo=o("qdqbert"),uJo=o(" \u2014 "),kz=a("a"),bJo=o("QDQBertForNextSentencePrediction"),vJo=o(" (QDQBert model)"),FJo=l(),SF=a("p"),TJo=o("The model is set in evaluation mode by default using "),Jue=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),CJo=o("model.train()"),wJo=l(),F(RF.$$.fragment),xXe=l(),cd=a("h2"),PF=a("a"),Kue=a("span"),F(uy.$$.fragment),AJo=l(),Zue=a("span"),LJo=o("AutoModelForTokenClassification"),$Xe=l(),qo=a("div"),F(by.$$.fragment),yJo=l(),fd=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Sz=a("a"),$Jo=o("from_pretrained()"),kJo=o(" class method or the "),Rz=a("a"),SJo=o("from_config()"),RJo=o(` class
method.`),PJo=l(),vy=a("p"),BJo=o("This class cannot be instantiated directly using "),e2e=a("code"),IJo=o("__init__()"),NJo=o(" (throws an error)."),qJo=l(),pt=a("div"),F(Fy.$$.fragment),jJo=l(),o2e=a("p"),DJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GJo=l(),md=a("p"),OJo=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),VJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),zJo=o("from_pretrained()"),QJo=o(" to load the model weights."),WJo=l(),F(BF.$$.fragment),HJo=l(),ao=a("div"),F(Ty.$$.fragment),UJo=l(),t2e=a("p"),JJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YJo=l(),Xa=a("p"),KJo=o("The model class to instantiate is selected based on the "),a2e=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),U=a("ul"),IF=a("li"),l2e=a("strong"),sYo=o("albert"),lYo=o(" \u2014 "),Bz=a("a"),iYo=o("AlbertForTokenClassification"),dYo=o(" (ALBERT model)"),cYo=l(),NF=a("li"),i2e=a("strong"),fYo=o("bert"),mYo=o(" \u2014 "),Iz=a("a"),gYo=o("BertForTokenClassification"),hYo=o(" (BERT model)"),pYo=l(),qF=a("li"),d2e=a("strong"),_Yo=o("big_bird"),uYo=o(" \u2014 "),Nz=a("a"),bYo=o("BigBirdForTokenClassification"),vYo=o(" (BigBird model)"),FYo=l(),jF=a("li"),c2e=a("strong"),TYo=o("bloom"),MYo=o(" \u2014 "),qz=a("a"),EYo=o("BloomForTokenClassification"),CYo=o(" (BLOOM model)"),wYo=l(),DF=a("li"),f2e=a("strong"),AYo=o("camembert"),LYo=o(" \u2014 "),jz=a("a"),yYo=o("CamembertForTokenClassification"),xYo=o(" (CamemBERT model)"),$Yo=l(),GF=a("li"),m2e=a("strong"),kYo=o("canine"),SYo=o(" \u2014 "),Dz=a("a"),RYo=o("CanineForTokenClassification"),PYo=o(" (CANINE model)"),BYo=l(),OF=a("li"),g2e=a("strong"),IYo=o("convbert"),NYo=o(" \u2014 "),Gz=a("a"),qYo=o("ConvBertForTokenClassification"),jYo=o(" (ConvBERT model)"),DYo=l(),VF=a("li"),h2e=a("strong"),GYo=o("data2vec-text"),OYo=o(" \u2014 "),Oz=a("a"),VYo=o("Data2VecTextForTokenClassification"),XYo=o(" (Data2VecText model)"),zYo=l(),XF=a("li"),p2e=a("strong"),QYo=o("deberta"),WYo=o(" \u2014 "),Vz=a("a"),HYo=o("DebertaForTokenClassification"),UYo=o(" (DeBERTa model)"),JYo=l(),zF=a("li"),_2e=a("strong"),YYo=o("deberta-v2"),KYo=o(" \u2014 "),Xz=a("a"),ZYo=o("DebertaV2ForTokenClassification"),eKo=o(" (DeBERTa-v2 model)"),oKo=l(),QF=a("li"),u2e=a("strong"),rKo=o("distilbert"),tKo=o(" \u2014 "),zz=a("a"),aKo=o("DistilBertForTokenClassification"),nKo=o(" (DistilBERT model)"),sKo=l(),WF=a("li"),b2e=a("strong"),lKo=o("electra"),iKo=o(" \u2014 "),Qz=a("a"),dKo=o("ElectraForTokenClassification"),cKo=o(" (ELECTRA model)"),fKo=l(),HF=a("li"),v2e=a("strong"),mKo=o("flaubert"),gKo=o(" \u2014 "),Wz=a("a"),hKo=o("FlaubertForTokenClassification"),pKo=o(" (FlauBERT model)"),_Ko=l(),UF=a("li"),F2e=a("strong"),uKo=o("fnet"),bKo=o(" \u2014 "),Hz=a("a"),vKo=o("FNetForTokenClassification"),FKo=o(" (FNet model)"),TKo=l(),JF=a("li"),T2e=a("strong"),MKo=o("funnel"),EKo=o(" \u2014 "),Uz=a("a"),CKo=o("FunnelForTokenClassification"),wKo=o(" (Funnel Transformer model)"),AKo=l(),YF=a("li"),M2e=a("strong"),LKo=o("gpt2"),yKo=o(" \u2014 "),Jz=a("a"),xKo=o("GPT2ForTokenClassification"),$Ko=o(" (OpenAI GPT-2 model)"),kKo=l(),KF=a("li"),E2e=a("strong"),SKo=o("ibert"),RKo=o(" \u2014 "),Yz=a("a"),PKo=o("IBertForTokenClassification"),BKo=o(" (I-BERT model)"),IKo=l(),ZF=a("li"),C2e=a("strong"),NKo=o("layoutlm"),qKo=o(" \u2014 "),Kz=a("a"),jKo=o("LayoutLMForTokenClassification"),DKo=o(" (LayoutLM model)"),GKo=l(),e6=a("li"),w2e=a("strong"),OKo=o("layoutlmv2"),VKo=o(" \u2014 "),Zz=a("a"),XKo=o("LayoutLMv2ForTokenClassification"),zKo=o(" (LayoutLMv2 model)"),QKo=l(),o6=a("li"),A2e=a("strong"),WKo=o("layoutlmv3"),HKo=o(" \u2014 "),eQ=a("a"),UKo=o("LayoutLMv3ForTokenClassification"),JKo=o(" (LayoutLMv3 model)"),YKo=l(),r6=a("li"),L2e=a("strong"),KKo=o("longformer"),ZKo=o(" \u2014 "),oQ=a("a"),eZo=o("LongformerForTokenClassification"),oZo=o(" (Longformer model)"),rZo=l(),t6=a("li"),y2e=a("strong"),tZo=o("megatron-bert"),aZo=o(" \u2014 "),rQ=a("a"),nZo=o("MegatronBertForTokenClassification"),sZo=o(" (Megatron-BERT model)"),lZo=l(),a6=a("li"),x2e=a("strong"),iZo=o("mobilebert"),dZo=o(" \u2014 "),tQ=a("a"),cZo=o("MobileBertForTokenClassification"),fZo=o(" (MobileBERT model)"),mZo=l(),n6=a("li"),$2e=a("strong"),gZo=o("mpnet"),hZo=o(" \u2014 "),aQ=a("a"),pZo=o("MPNetForTokenClassification"),_Zo=o(" (MPNet model)"),uZo=l(),s6=a("li"),k2e=a("strong"),bZo=o("nezha"),vZo=o(" \u2014 "),nQ=a("a"),FZo=o("NezhaForTokenClassification"),TZo=o(" (Nezha model)"),MZo=l(),l6=a("li"),S2e=a("strong"),EZo=o("nystromformer"),CZo=o(" \u2014 "),sQ=a("a"),wZo=o("NystromformerForTokenClassification"),AZo=o(" (Nystr\xF6mformer model)"),LZo=l(),i6=a("li"),R2e=a("strong"),yZo=o("qdqbert"),xZo=o(" \u2014 "),lQ=a("a"),$Zo=o("QDQBertForTokenClassification"),kZo=o(" (QDQBert model)"),SZo=l(),d6=a("li"),P2e=a("strong"),RZo=o("rembert"),PZo=o(" \u2014 "),iQ=a("a"),BZo=o("RemBertForTokenClassification"),IZo=o(" (RemBERT model)"),NZo=l(),c6=a("li"),B2e=a("strong"),qZo=o("roberta"),jZo=o(" \u2014 "),dQ=a("a"),DZo=o("RobertaForTokenClassification"),GZo=o(" (RoBERTa model)"),OZo=l(),f6=a("li"),I2e=a("strong"),VZo=o("roformer"),XZo=o(" \u2014 "),cQ=a("a"),zZo=o("RoFormerForTokenClassification"),QZo=o(" (RoFormer model)"),WZo=l(),m6=a("li"),N2e=a("strong"),HZo=o("squeezebert"),UZo=o(" \u2014 "),fQ=a("a"),JZo=o("SqueezeBertForTokenClassification"),YZo=o(" (SqueezeBERT model)"),KZo=l(),g6=a("li"),q2e=a("strong"),ZZo=o("xlm"),eer=o(" \u2014 "),mQ=a("a"),oer=o("XLMForTokenClassification"),rer=o(" (XLM model)"),ter=l(),h6=a("li"),j2e=a("strong"),aer=o("xlm-roberta"),ner=o(" \u2014 "),gQ=a("a"),ser=o("XLMRobertaForTokenClassification"),ler=o(" (XLM-RoBERTa model)"),ier=l(),p6=a("li"),D2e=a("strong"),der=o("xlm-roberta-xl"),cer=o(" \u2014 "),hQ=a("a"),fer=o("XLMRobertaXLForTokenClassification"),mer=o(" (XLM-RoBERTa-XL model)"),ger=l(),_6=a("li"),G2e=a("strong"),her=o("xlnet"),per=o(" \u2014 "),pQ=a("a"),_er=o("XLNetForTokenClassification"),uer=o(" (XLNet model)"),ber=l(),u6=a("li"),O2e=a("strong"),ver=o("yoso"),Fer=o(" \u2014 "),_Q=a("a"),Ter=o("YosoForTokenClassification"),Mer=o(" (YOSO model)"),Eer=l(),b6=a("p"),Cer=o("The model is set in evaluation mode by default using "),V2e=a("code"),wer=o("model.eval()"),Aer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=a("code"),Ler=o("model.train()"),yer=l(),F(v6.$$.fragment),kXe=l(),gd=a("h2"),F6=a("a"),z2e=a("span"),F(My.$$.fragment),xer=l(),Q2e=a("span"),$er=o("AutoModelForQuestionAnswering"),SXe=l(),jo=a("div"),F(Ey.$$.fragment),ker=l(),hd=a("p"),Ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=a("a"),Rer=o("from_pretrained()"),Per=o(" class method or the "),bQ=a("a"),Ber=o("from_config()"),Ier=o(` class
method.`),Ner=l(),Cy=a("p"),qer=o("This class cannot be instantiated directly using "),W2e=a("code"),jer=o("__init__()"),Der=o(" (throws an error)."),Ger=l(),_t=a("div"),F(wy.$$.fragment),Oer=l(),H2e=a("p"),Ver=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xer=l(),pd=a("p"),zer=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),Qer=o("not"),Wer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),Her=o("from_pretrained()"),Uer=o(" to load the model weights."),Jer=l(),F(T6.$$.fragment),Yer=l(),no=a("div"),F(Ay.$$.fragment),Ker=l(),J2e=a("p"),Zer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eor=l(),za=a("p"),oor=o("The model class to instantiate is selected based on the "),Y2e=a("code"),ror=o("model_type"),tor=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(":"),ior=l(),V=a("ul"),M6=a("li"),e1e=a("strong"),dor=o("albert"),cor=o(" \u2014 "),FQ=a("a"),mor=o("AlbertForQuestionAnswering"),gor=o(" (ALBERT model)"),hor=l(),E6=a("li"),o1e=a("strong"),por=o("bart"),_or=o(" \u2014 "),TQ=a("a"),uor=o("BartForQuestionAnswering"),bor=o(" (BART model)"),vor=l(),C6=a("li"),r1e=a("strong"),For=o("bert"),Tor=o(" \u2014 "),MQ=a("a"),Mor=o("BertForQuestionAnswering"),Eor=o(" (BERT model)"),Cor=l(),w6=a("li"),t1e=a("strong"),wor=o("big_bird"),Aor=o(" \u2014 "),EQ=a("a"),Lor=o("BigBirdForQuestionAnswering"),yor=o(" (BigBird model)"),xor=l(),A6=a("li"),a1e=a("strong"),$or=o("bigbird_pegasus"),kor=o(" \u2014 "),CQ=a("a"),Sor=o("BigBirdPegasusForQuestionAnswering"),Ror=o(" (BigBird-Pegasus model)"),Por=l(),L6=a("li"),n1e=a("strong"),Bor=o("camembert"),Ior=o(" \u2014 "),wQ=a("a"),Nor=o("CamembertForQuestionAnswering"),qor=o(" (CamemBERT model)"),jor=l(),y6=a("li"),s1e=a("strong"),Dor=o("canine"),Gor=o(" \u2014 "),AQ=a("a"),Oor=o("CanineForQuestionAnswering"),Vor=o(" (CANINE model)"),Xor=l(),x6=a("li"),l1e=a("strong"),zor=o("convbert"),Qor=o(" \u2014 "),LQ=a("a"),Wor=o("ConvBertForQuestionAnswering"),Hor=o(" (ConvBERT model)"),Uor=l(),$6=a("li"),i1e=a("strong"),Jor=o("data2vec-text"),Yor=o(" \u2014 "),yQ=a("a"),Kor=o("Data2VecTextForQuestionAnswering"),Zor=o(" (Data2VecText model)"),err=l(),k6=a("li"),d1e=a("strong"),orr=o("deberta"),rrr=o(" \u2014 "),xQ=a("a"),trr=o("DebertaForQuestionAnswering"),arr=o(" (DeBERTa model)"),nrr=l(),S6=a("li"),c1e=a("strong"),srr=o("deberta-v2"),lrr=o(" \u2014 "),$Q=a("a"),irr=o("DebertaV2ForQuestionAnswering"),drr=o(" (DeBERTa-v2 model)"),crr=l(),R6=a("li"),f1e=a("strong"),frr=o("distilbert"),mrr=o(" \u2014 "),kQ=a("a"),grr=o("DistilBertForQuestionAnswering"),hrr=o(" (DistilBERT model)"),prr=l(),P6=a("li"),m1e=a("strong"),_rr=o("electra"),urr=o(" \u2014 "),SQ=a("a"),brr=o("ElectraForQuestionAnswering"),vrr=o(" (ELECTRA model)"),Frr=l(),B6=a("li"),g1e=a("strong"),Trr=o("flaubert"),Mrr=o(" \u2014 "),RQ=a("a"),Err=o("FlaubertForQuestionAnsweringSimple"),Crr=o(" (FlauBERT model)"),wrr=l(),I6=a("li"),h1e=a("strong"),Arr=o("fnet"),Lrr=o(" \u2014 "),PQ=a("a"),yrr=o("FNetForQuestionAnswering"),xrr=o(" (FNet model)"),$rr=l(),N6=a("li"),p1e=a("strong"),krr=o("funnel"),Srr=o(" \u2014 "),BQ=a("a"),Rrr=o("FunnelForQuestionAnswering"),Prr=o(" (Funnel Transformer model)"),Brr=l(),q6=a("li"),_1e=a("strong"),Irr=o("gptj"),Nrr=o(" \u2014 "),IQ=a("a"),qrr=o("GPTJForQuestionAnswering"),jrr=o(" (GPT-J model)"),Drr=l(),j6=a("li"),u1e=a("strong"),Grr=o("ibert"),Orr=o(" \u2014 "),NQ=a("a"),Vrr=o("IBertForQuestionAnswering"),Xrr=o(" (I-BERT model)"),zrr=l(),D6=a("li"),b1e=a("strong"),Qrr=o("layoutlmv2"),Wrr=o(" \u2014 "),qQ=a("a"),Hrr=o("LayoutLMv2ForQuestionAnswering"),Urr=o(" (LayoutLMv2 model)"),Jrr=l(),G6=a("li"),v1e=a("strong"),Yrr=o("layoutlmv3"),Krr=o(" \u2014 "),jQ=a("a"),Zrr=o("LayoutLMv3ForQuestionAnswering"),etr=o(" (LayoutLMv3 model)"),otr=l(),O6=a("li"),F1e=a("strong"),rtr=o("led"),ttr=o(" \u2014 "),DQ=a("a"),atr=o("LEDForQuestionAnswering"),ntr=o(" (LED model)"),str=l(),V6=a("li"),T1e=a("strong"),ltr=o("longformer"),itr=o(" \u2014 "),GQ=a("a"),dtr=o("LongformerForQuestionAnswering"),ctr=o(" (Longformer model)"),ftr=l(),X6=a("li"),M1e=a("strong"),mtr=o("lxmert"),gtr=o(" \u2014 "),OQ=a("a"),htr=o("LxmertForQuestionAnswering"),ptr=o(" (LXMERT model)"),_tr=l(),z6=a("li"),E1e=a("strong"),utr=o("mbart"),btr=o(" \u2014 "),VQ=a("a"),vtr=o("MBartForQuestionAnswering"),Ftr=o(" (mBART model)"),Ttr=l(),Q6=a("li"),C1e=a("strong"),Mtr=o("megatron-bert"),Etr=o(" \u2014 "),XQ=a("a"),Ctr=o("MegatronBertForQuestionAnswering"),wtr=o(" (Megatron-BERT model)"),Atr=l(),W6=a("li"),w1e=a("strong"),Ltr=o("mobilebert"),ytr=o(" \u2014 "),zQ=a("a"),xtr=o("MobileBertForQuestionAnswering"),$tr=o(" (MobileBERT model)"),ktr=l(),H6=a("li"),A1e=a("strong"),Str=o("mpnet"),Rtr=o(" \u2014 "),QQ=a("a"),Ptr=o("MPNetForQuestionAnswering"),Btr=o(" (MPNet model)"),Itr=l(),U6=a("li"),L1e=a("strong"),Ntr=o("mvp"),qtr=o(" \u2014 "),WQ=a("a"),jtr=o("MvpForQuestionAnswering"),Dtr=o(" (MVP model)"),Gtr=l(),J6=a("li"),y1e=a("strong"),Otr=o("nezha"),Vtr=o(" \u2014 "),HQ=a("a"),Xtr=o("NezhaForQuestionAnswering"),ztr=o(" (Nezha model)"),Qtr=l(),Y6=a("li"),x1e=a("strong"),Wtr=o("nystromformer"),Htr=o(" \u2014 "),UQ=a("a"),Utr=o("NystromformerForQuestionAnswering"),Jtr=o(" (Nystr\xF6mformer model)"),Ytr=l(),K6=a("li"),$1e=a("strong"),Ktr=o("qdqbert"),Ztr=o(" \u2014 "),JQ=a("a"),ear=o("QDQBertForQuestionAnswering"),oar=o(" (QDQBert model)"),rar=l(),Z6=a("li"),k1e=a("strong"),tar=o("reformer"),aar=o(" \u2014 "),YQ=a("a"),nar=o("ReformerForQuestionAnswering"),sar=o(" (Reformer model)"),lar=l(),eT=a("li"),S1e=a("strong"),iar=o("rembert"),dar=o(" \u2014 "),KQ=a("a"),car=o("RemBertForQuestionAnswering"),far=o(" (RemBERT model)"),mar=l(),oT=a("li"),R1e=a("strong"),gar=o("roberta"),har=o(" \u2014 "),ZQ=a("a"),par=o("RobertaForQuestionAnswering"),_ar=o(" (RoBERTa model)"),uar=l(),rT=a("li"),P1e=a("strong"),bar=o("roformer"),Far=o(" \u2014 "),eW=a("a"),Tar=o("RoFormerForQuestionAnswering"),Mar=o(" (RoFormer model)"),Ear=l(),tT=a("li"),B1e=a("strong"),Car=o("splinter"),war=o(" \u2014 "),oW=a("a"),Aar=o("SplinterForQuestionAnswering"),Lar=o(" (Splinter model)"),yar=l(),aT=a("li"),I1e=a("strong"),xar=o("squeezebert"),$ar=o(" \u2014 "),rW=a("a"),kar=o("SqueezeBertForQuestionAnswering"),Sar=o(" (SqueezeBERT model)"),Rar=l(),nT=a("li"),N1e=a("strong"),Par=o("xlm"),Bar=o(" \u2014 "),tW=a("a"),Iar=o("XLMForQuestionAnsweringSimple"),Nar=o(" (XLM model)"),qar=l(),sT=a("li"),q1e=a("strong"),jar=o("xlm-roberta"),Dar=o(" \u2014 "),aW=a("a"),Gar=o("XLMRobertaForQuestionAnswering"),Oar=o(" (XLM-RoBERTa model)"),Var=l(),lT=a("li"),j1e=a("strong"),Xar=o("xlm-roberta-xl"),zar=o(" \u2014 "),nW=a("a"),Qar=o("XLMRobertaXLForQuestionAnswering"),War=o(" (XLM-RoBERTa-XL model)"),Har=l(),iT=a("li"),D1e=a("strong"),Uar=o("xlnet"),Jar=o(" \u2014 "),sW=a("a"),Yar=o("XLNetForQuestionAnsweringSimple"),Kar=o(" (XLNet model)"),Zar=l(),dT=a("li"),G1e=a("strong"),enr=o("yoso"),onr=o(" \u2014 "),lW=a("a"),rnr=o("YosoForQuestionAnswering"),tnr=o(" (YOSO model)"),anr=l(),cT=a("p"),nnr=o("The model is set in evaluation mode by default using "),O1e=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=a("code"),inr=o("model.train()"),dnr=l(),F(fT.$$.fragment),RXe=l(),_d=a("h2"),mT=a("a"),X1e=a("span"),F(Ly.$$.fragment),cnr=l(),z1e=a("span"),fnr=o("AutoModelForTableQuestionAnswering"),PXe=l(),Do=a("div"),F(yy.$$.fragment),mnr=l(),ud=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iW=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),dW=a("a"),_nr=o("from_config()"),unr=o(` class
method.`),bnr=l(),xy=a("p"),vnr=o("This class cannot be instantiated directly using "),Q1e=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),ut=a("div"),F($y.$$.fragment),Enr=l(),W1e=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wnr=l(),bd=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),Lnr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(gT.$$.fragment),Snr=l(),so=a("div"),F(ky.$$.fragment),Rnr=l(),U1e=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bnr=l(),Qa=a("p"),Inr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),Z1e=a("ul"),hT=a("li"),ebe=a("strong"),Xnr=o("tapas"),znr=o(" \u2014 "),fW=a("a"),Qnr=o("TapasForQuestionAnswering"),Wnr=o(" (TAPAS model)"),Hnr=l(),pT=a("p"),Unr=o("The model is set in evaluation mode by default using "),obe=a("code"),Jnr=o("model.eval()"),Ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),Knr=o("model.train()"),Znr=l(),F(_T.$$.fragment),BXe=l(),vd=a("h2"),uT=a("a"),tbe=a("span"),F(Sy.$$.fragment),esr=l(),abe=a("span"),osr=o("AutoModelForImageClassification"),IXe=l(),Go=a("div"),F(Ry.$$.fragment),rsr=l(),Fd=a("p"),tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mW=a("a"),asr=o("from_pretrained()"),nsr=o(" class method or the "),gW=a("a"),ssr=o("from_config()"),lsr=o(` class
method.`),isr=l(),Py=a("p"),dsr=o("This class cannot be instantiated directly using "),nbe=a("code"),csr=o("__init__()"),fsr=o(" (throws an error)."),msr=l(),bt=a("div"),F(By.$$.fragment),gsr=l(),sbe=a("p"),hsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),psr=l(),Td=a("p"),_sr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),usr=o("not"),bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),vsr=o("from_pretrained()"),Fsr=o(" to load the model weights."),Tsr=l(),F(bT.$$.fragment),Msr=l(),lo=a("div"),F(Iy.$$.fragment),Esr=l(),ibe=a("p"),Csr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wsr=l(),Wa=a("p"),Asr=o("The model class to instantiate is selected based on the "),dbe=a("code"),Lsr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(":"),Rsr=l(),ve=a("ul"),vT=a("li"),mbe=a("strong"),Psr=o("beit"),Bsr=o(" \u2014 "),pW=a("a"),Isr=o("BeitForImageClassification"),Nsr=o(" (BEiT model)"),qsr=l(),FT=a("li"),gbe=a("strong"),jsr=o("convnext"),Dsr=o(" \u2014 "),_W=a("a"),Gsr=o("ConvNextForImageClassification"),Osr=o(" (ConvNeXT model)"),Vsr=l(),TT=a("li"),hbe=a("strong"),Xsr=o("cvt"),zsr=o(" \u2014 "),uW=a("a"),Qsr=o("CvtForImageClassification"),Wsr=o(" (CvT model)"),Hsr=l(),MT=a("li"),pbe=a("strong"),Usr=o("data2vec-vision"),Jsr=o(" \u2014 "),bW=a("a"),Ysr=o("Data2VecVisionForImageClassification"),Ksr=o(" (Data2VecVision model)"),Zsr=l(),Hs=a("li"),_be=a("strong"),elr=o("deit"),olr=o(" \u2014 "),vW=a("a"),rlr=o("DeiTForImageClassification"),tlr=o(" or "),FW=a("a"),alr=o("DeiTForImageClassificationWithTeacher"),nlr=o(" (DeiT model)"),slr=l(),ET=a("li"),ube=a("strong"),llr=o("imagegpt"),ilr=o(" \u2014 "),TW=a("a"),dlr=o("ImageGPTForImageClassification"),clr=o(" (ImageGPT model)"),flr=l(),Us=a("li"),bbe=a("strong"),mlr=o("levit"),glr=o(" \u2014 "),MW=a("a"),hlr=o("LevitForImageClassification"),plr=o(" or "),EW=a("a"),_lr=o("LevitForImageClassificationWithTeacher"),ulr=o(" (LeViT model)"),blr=l(),CT=a("li"),vbe=a("strong"),vlr=o("mobilevit"),Flr=o(" \u2014 "),CW=a("a"),Tlr=o("MobileViTForImageClassification"),Mlr=o(" (MobileViT model)"),Elr=l(),vt=a("li"),Fbe=a("strong"),Clr=o("perceiver"),wlr=o(" \u2014 "),wW=a("a"),Alr=o("PerceiverForImageClassificationLearned"),Llr=o(" or "),AW=a("a"),ylr=o("PerceiverForImageClassificationFourier"),xlr=o(" or "),LW=a("a"),$lr=o("PerceiverForImageClassificationConvProcessing"),klr=o(" (Perceiver model)"),Slr=l(),wT=a("li"),Tbe=a("strong"),Rlr=o("poolformer"),Plr=o(" \u2014 "),yW=a("a"),Blr=o("PoolFormerForImageClassification"),Ilr=o(" (PoolFormer model)"),Nlr=l(),AT=a("li"),Mbe=a("strong"),qlr=o("regnet"),jlr=o(" \u2014 "),xW=a("a"),Dlr=o("RegNetForImageClassification"),Glr=o(" (RegNet model)"),Olr=l(),LT=a("li"),Ebe=a("strong"),Vlr=o("resnet"),Xlr=o(" \u2014 "),$W=a("a"),zlr=o("ResNetForImageClassification"),Qlr=o(" (ResNet model)"),Wlr=l(),yT=a("li"),Cbe=a("strong"),Hlr=o("segformer"),Ulr=o(" \u2014 "),kW=a("a"),Jlr=o("SegformerForImageClassification"),Ylr=o(" (SegFormer model)"),Klr=l(),xT=a("li"),wbe=a("strong"),Zlr=o("swin"),eir=o(" \u2014 "),SW=a("a"),oir=o("SwinForImageClassification"),rir=o(" (Swin Transformer model)"),tir=l(),$T=a("li"),Abe=a("strong"),air=o("van"),nir=o(" \u2014 "),RW=a("a"),sir=o("VanForImageClassification"),lir=o(" (VAN model)"),iir=l(),kT=a("li"),Lbe=a("strong"),dir=o("vit"),cir=o(" \u2014 "),PW=a("a"),fir=o("ViTForImageClassification"),mir=o(" (ViT model)"),gir=l(),ST=a("p"),hir=o("The model is set in evaluation mode by default using "),ybe=a("code"),pir=o("model.eval()"),_ir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=a("code"),uir=o("model.train()"),bir=l(),F(RT.$$.fragment),NXe=l(),Md=a("h2"),PT=a("a"),$be=a("span"),F(Ny.$$.fragment),vir=l(),kbe=a("span"),Fir=o("AutoModelForVision2Seq"),qXe=l(),Oo=a("div"),F(qy.$$.fragment),Tir=l(),Ed=a("p"),Mir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BW=a("a"),Eir=o("from_pretrained()"),Cir=o(" class method or the "),IW=a("a"),wir=o("from_config()"),Air=o(` class
method.`),Lir=l(),jy=a("p"),yir=o("This class cannot be instantiated directly using "),Sbe=a("code"),xir=o("__init__()"),$ir=o(" (throws an error)."),kir=l(),Ft=a("div"),F(Dy.$$.fragment),Sir=l(),Rbe=a("p"),Rir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pir=l(),Cd=a("p"),Bir=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),Iir=o("not"),Nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),qir=o("from_pretrained()"),jir=o(" to load the model weights."),Dir=l(),F(BT.$$.fragment),Gir=l(),io=a("div"),F(Gy.$$.fragment),Oir=l(),Bbe=a("p"),Vir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xir=l(),Ha=a("p"),zir=o("The model class to instantiate is selected based on the "),Ibe=a("code"),Qir=o("model_type"),Wir=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Hir=o("pretrained_model_name_or_path"),Uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),Jir=o("pretrained_model_name_or_path"),Yir=o(":"),Kir=l(),jbe=a("ul"),IT=a("li"),Dbe=a("strong"),Zir=o("vision-encoder-decoder"),edr=o(" \u2014 "),qW=a("a"),odr=o("VisionEncoderDecoderModel"),rdr=o(" (Vision Encoder decoder model)"),tdr=l(),NT=a("p"),adr=o("The model is set in evaluation mode by default using "),Gbe=a("code"),ndr=o("model.eval()"),sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=a("code"),ldr=o("model.train()"),idr=l(),F(qT.$$.fragment),jXe=l(),wd=a("h2"),jT=a("a"),Vbe=a("span"),F(Oy.$$.fragment),ddr=l(),Xbe=a("span"),cdr=o("AutoModelForVisualQuestionAnswering"),DXe=l(),Vo=a("div"),F(Vy.$$.fragment),fdr=l(),Ad=a("p"),mdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jW=a("a"),gdr=o("from_pretrained()"),hdr=o(" class method or the "),DW=a("a"),pdr=o("from_config()"),_dr=o(` class
method.`),udr=l(),Xy=a("p"),bdr=o("This class cannot be instantiated directly using "),zbe=a("code"),vdr=o("__init__()"),Fdr=o(" (throws an error)."),Tdr=l(),Tt=a("div"),F(zy.$$.fragment),Mdr=l(),Qbe=a("p"),Edr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Cdr=l(),Ld=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Adr=o("not"),Ldr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),ydr=o("from_pretrained()"),xdr=o(" to load the model weights."),$dr=l(),F(DT.$$.fragment),kdr=l(),co=a("div"),F(Qy.$$.fragment),Sdr=l(),Hbe=a("p"),Rdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Pdr=l(),Ua=a("p"),Bdr=o("The model class to instantiate is selected based on the "),Ube=a("code"),Idr=o("model_type"),Ndr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),qdr=o("pretrained_model_name_or_path"),jdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(":"),Odr=l(),Kbe=a("ul"),GT=a("li"),Zbe=a("strong"),Vdr=o("vilt"),Xdr=o(" \u2014 "),OW=a("a"),zdr=o("ViltForQuestionAnswering"),Qdr=o(" (ViLT model)"),Wdr=l(),OT=a("p"),Hdr=o("The model is set in evaluation mode by default using "),eve=a("code"),Udr=o("model.eval()"),Jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ove=a("code"),Ydr=o("model.train()"),Kdr=l(),F(VT.$$.fragment),GXe=l(),yd=a("h2"),XT=a("a"),rve=a("span"),F(Wy.$$.fragment),Zdr=l(),tve=a("span"),ecr=o("AutoModelForAudioClassification"),OXe=l(),Xo=a("div"),F(Hy.$$.fragment),ocr=l(),xd=a("p"),rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VW=a("a"),tcr=o("from_pretrained()"),acr=o(" class method or the "),XW=a("a"),ncr=o("from_config()"),scr=o(` class
method.`),lcr=l(),Uy=a("p"),icr=o("This class cannot be instantiated directly using "),ave=a("code"),dcr=o("__init__()"),ccr=o(" (throws an error)."),fcr=l(),Mt=a("div"),F(Jy.$$.fragment),mcr=l(),nve=a("p"),gcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hcr=l(),$d=a("p"),pcr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),_cr=o("not"),ucr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),bcr=o("from_pretrained()"),vcr=o(" to load the model weights."),Fcr=l(),F(zT.$$.fragment),Tcr=l(),fo=a("div"),F(Yy.$$.fragment),Mcr=l(),lve=a("p"),Ecr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ccr=l(),Ja=a("p"),wcr=o("The model class to instantiate is selected based on the "),ive=a("code"),Acr=o("model_type"),Lcr=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),ycr=o("pretrained_model_name_or_path"),xcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(":"),Scr=l(),Pe=a("ul"),QT=a("li"),fve=a("strong"),Rcr=o("data2vec-audio"),Pcr=o(" \u2014 "),QW=a("a"),Bcr=o("Data2VecAudioForSequenceClassification"),Icr=o(" (Data2VecAudio model)"),Ncr=l(),WT=a("li"),mve=a("strong"),qcr=o("hubert"),jcr=o(" \u2014 "),WW=a("a"),Dcr=o("HubertForSequenceClassification"),Gcr=o(" (Hubert model)"),Ocr=l(),HT=a("li"),gve=a("strong"),Vcr=o("sew"),Xcr=o(" \u2014 "),HW=a("a"),zcr=o("SEWForSequenceClassification"),Qcr=o(" (SEW model)"),Wcr=l(),UT=a("li"),hve=a("strong"),Hcr=o("sew-d"),Ucr=o(" \u2014 "),UW=a("a"),Jcr=o("SEWDForSequenceClassification"),Ycr=o(" (SEW-D model)"),Kcr=l(),JT=a("li"),pve=a("strong"),Zcr=o("unispeech"),efr=o(" \u2014 "),JW=a("a"),ofr=o("UniSpeechForSequenceClassification"),rfr=o(" (UniSpeech model)"),tfr=l(),YT=a("li"),_ve=a("strong"),afr=o("unispeech-sat"),nfr=o(" \u2014 "),YW=a("a"),sfr=o("UniSpeechSatForSequenceClassification"),lfr=o(" (UniSpeechSat model)"),ifr=l(),KT=a("li"),uve=a("strong"),dfr=o("wav2vec2"),cfr=o(" \u2014 "),KW=a("a"),ffr=o("Wav2Vec2ForSequenceClassification"),mfr=o(" (Wav2Vec2 model)"),gfr=l(),ZT=a("li"),bve=a("strong"),hfr=o("wav2vec2-conformer"),pfr=o(" \u2014 "),ZW=a("a"),_fr=o("Wav2Vec2ConformerForSequenceClassification"),ufr=o(" (Wav2Vec2-Conformer model)"),bfr=l(),e7=a("li"),vve=a("strong"),vfr=o("wavlm"),Ffr=o(" \u2014 "),eH=a("a"),Tfr=o("WavLMForSequenceClassification"),Mfr=o(" (WavLM model)"),Efr=l(),o7=a("p"),Cfr=o("The model is set in evaluation mode by default using "),Fve=a("code"),wfr=o("model.eval()"),Afr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=a("code"),Lfr=o("model.train()"),yfr=l(),F(r7.$$.fragment),VXe=l(),kd=a("h2"),t7=a("a"),Mve=a("span"),F(Ky.$$.fragment),xfr=l(),Eve=a("span"),$fr=o("AutoModelForAudioFrameClassification"),XXe=l(),zo=a("div"),F(Zy.$$.fragment),kfr=l(),Sd=a("p"),Sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oH=a("a"),Rfr=o("from_pretrained()"),Pfr=o(" class method or the "),rH=a("a"),Bfr=o("from_config()"),Ifr=o(` class
method.`),Nfr=l(),e9=a("p"),qfr=o("This class cannot be instantiated directly using "),Cve=a("code"),jfr=o("__init__()"),Dfr=o(" (throws an error)."),Gfr=l(),Et=a("div"),F(o9.$$.fragment),Ofr=l(),wve=a("p"),Vfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xfr=l(),Rd=a("p"),zfr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),Qfr=o("not"),Wfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),Hfr=o("from_pretrained()"),Ufr=o(" to load the model weights."),Jfr=l(),F(a7.$$.fragment),Yfr=l(),mo=a("div"),F(r9.$$.fragment),Kfr=l(),Lve=a("p"),Zfr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),emr=l(),Ya=a("p"),omr=o("The model class to instantiate is selected based on the "),yve=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),ot=a("ul"),n7=a("li"),kve=a("strong"),dmr=o("data2vec-audio"),cmr=o(" \u2014 "),aH=a("a"),fmr=o("Data2VecAudioForAudioFrameClassification"),mmr=o(" (Data2VecAudio model)"),gmr=l(),s7=a("li"),Sve=a("strong"),hmr=o("unispeech-sat"),pmr=o(" \u2014 "),nH=a("a"),_mr=o("UniSpeechSatForAudioFrameClassification"),umr=o(" (UniSpeechSat model)"),bmr=l(),l7=a("li"),Rve=a("strong"),vmr=o("wav2vec2"),Fmr=o(" \u2014 "),sH=a("a"),Tmr=o("Wav2Vec2ForAudioFrameClassification"),Mmr=o(" (Wav2Vec2 model)"),Emr=l(),i7=a("li"),Pve=a("strong"),Cmr=o("wav2vec2-conformer"),wmr=o(" \u2014 "),lH=a("a"),Amr=o("Wav2Vec2ConformerForAudioFrameClassification"),Lmr=o(" (Wav2Vec2-Conformer model)"),ymr=l(),d7=a("li"),Bve=a("strong"),xmr=o("wavlm"),$mr=o(" \u2014 "),iH=a("a"),kmr=o("WavLMForAudioFrameClassification"),Smr=o(" (WavLM model)"),Rmr=l(),c7=a("p"),Pmr=o("The model is set in evaluation mode by default using "),Ive=a("code"),Bmr=o("model.eval()"),Imr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=a("code"),Nmr=o("model.train()"),qmr=l(),F(f7.$$.fragment),zXe=l(),Pd=a("h2"),m7=a("a"),qve=a("span"),F(t9.$$.fragment),jmr=l(),jve=a("span"),Dmr=o("AutoModelForCTC"),QXe=l(),Qo=a("div"),F(a9.$$.fragment),Gmr=l(),Bd=a("p"),Omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dH=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" class method or the "),cH=a("a"),zmr=o("from_config()"),Qmr=o(` class
method.`),Wmr=l(),n9=a("p"),Hmr=o("This class cannot be instantiated directly using "),Dve=a("code"),Umr=o("__init__()"),Jmr=o(" (throws an error)."),Ymr=l(),Ct=a("div"),F(s9.$$.fragment),Kmr=l(),Gve=a("p"),Zmr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),egr=l(),Id=a("p"),ogr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),rgr=o("not"),tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),agr=o("from_pretrained()"),ngr=o(" to load the model weights."),sgr=l(),F(g7.$$.fragment),lgr=l(),go=a("div"),F(l9.$$.fragment),igr=l(),Vve=a("p"),dgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cgr=l(),Ka=a("p"),fgr=o("The model class to instantiate is selected based on the "),Xve=a("code"),mgr=o("model_type"),ggr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),_gr=o("pretrained_model_name_or_path"),ugr=o(":"),bgr=l(),Le=a("ul"),h7=a("li"),Wve=a("strong"),vgr=o("data2vec-audio"),Fgr=o(" \u2014 "),mH=a("a"),Tgr=o("Data2VecAudioForCTC"),Mgr=o(" (Data2VecAudio model)"),Egr=l(),p7=a("li"),Hve=a("strong"),Cgr=o("hubert"),wgr=o(" \u2014 "),gH=a("a"),Agr=o("HubertForCTC"),Lgr=o(" (Hubert model)"),ygr=l(),_7=a("li"),Uve=a("strong"),xgr=o("mctct"),$gr=o(" \u2014 "),hH=a("a"),kgr=o("MCTCTForCTC"),Sgr=o(" (M-CTC-T model)"),Rgr=l(),u7=a("li"),Jve=a("strong"),Pgr=o("sew"),Bgr=o(" \u2014 "),pH=a("a"),Igr=o("SEWForCTC"),Ngr=o(" (SEW model)"),qgr=l(),b7=a("li"),Yve=a("strong"),jgr=o("sew-d"),Dgr=o(" \u2014 "),_H=a("a"),Ggr=o("SEWDForCTC"),Ogr=o(" (SEW-D model)"),Vgr=l(),v7=a("li"),Kve=a("strong"),Xgr=o("unispeech"),zgr=o(" \u2014 "),uH=a("a"),Qgr=o("UniSpeechForCTC"),Wgr=o(" (UniSpeech model)"),Hgr=l(),F7=a("li"),Zve=a("strong"),Ugr=o("unispeech-sat"),Jgr=o(" \u2014 "),bH=a("a"),Ygr=o("UniSpeechSatForCTC"),Kgr=o(" (UniSpeechSat model)"),Zgr=l(),T7=a("li"),eFe=a("strong"),ehr=o("wav2vec2"),ohr=o(" \u2014 "),vH=a("a"),rhr=o("Wav2Vec2ForCTC"),thr=o(" (Wav2Vec2 model)"),ahr=l(),M7=a("li"),oFe=a("strong"),nhr=o("wav2vec2-conformer"),shr=o(" \u2014 "),FH=a("a"),lhr=o("Wav2Vec2ConformerForCTC"),ihr=o(" (Wav2Vec2-Conformer model)"),dhr=l(),E7=a("li"),rFe=a("strong"),chr=o("wavlm"),fhr=o(" \u2014 "),TH=a("a"),mhr=o("WavLMForCTC"),ghr=o(" (WavLM model)"),hhr=l(),C7=a("p"),phr=o("The model is set in evaluation mode by default using "),tFe=a("code"),_hr=o("model.eval()"),uhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),bhr=o("model.train()"),vhr=l(),F(w7.$$.fragment),WXe=l(),Nd=a("h2"),A7=a("a"),nFe=a("span"),F(i9.$$.fragment),Fhr=l(),sFe=a("span"),Thr=o("AutoModelForSpeechSeq2Seq"),HXe=l(),Wo=a("div"),F(d9.$$.fragment),Mhr=l(),qd=a("p"),Ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MH=a("a"),Chr=o("from_pretrained()"),whr=o(" class method or the "),EH=a("a"),Ahr=o("from_config()"),Lhr=o(` class
method.`),yhr=l(),c9=a("p"),xhr=o("This class cannot be instantiated directly using "),lFe=a("code"),$hr=o("__init__()"),khr=o(" (throws an error)."),Shr=l(),wt=a("div"),F(f9.$$.fragment),Rhr=l(),iFe=a("p"),Phr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bhr=l(),jd=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),Nhr=o("not"),qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),jhr=o("from_pretrained()"),Dhr=o(" to load the model weights."),Ghr=l(),F(L7.$$.fragment),Ohr=l(),ho=a("div"),F(m9.$$.fragment),Vhr=l(),cFe=a("p"),Xhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zhr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),fFe=a("code"),Whr=o("model_type"),Hhr=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(":"),Zhr=l(),g9=a("ul"),y7=a("li"),hFe=a("strong"),epr=o("speech-encoder-decoder"),opr=o(" \u2014 "),wH=a("a"),rpr=o("SpeechEncoderDecoderModel"),tpr=o(" (Speech Encoder decoder model)"),apr=l(),x7=a("li"),pFe=a("strong"),npr=o("speech_to_text"),spr=o(" \u2014 "),AH=a("a"),lpr=o("Speech2TextForConditionalGeneration"),ipr=o(" (Speech2Text model)"),dpr=l(),$7=a("p"),cpr=o("The model is set in evaluation mode by default using "),_Fe=a("code"),fpr=o("model.eval()"),mpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),gpr=o("model.train()"),hpr=l(),F(k7.$$.fragment),UXe=l(),Dd=a("h2"),S7=a("a"),bFe=a("span"),F(h9.$$.fragment),ppr=l(),vFe=a("span"),_pr=o("AutoModelForAudioXVector"),JXe=l(),Ho=a("div"),F(p9.$$.fragment),upr=l(),Gd=a("p"),bpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LH=a("a"),vpr=o("from_pretrained()"),Fpr=o(" class method or the "),yH=a("a"),Tpr=o("from_config()"),Mpr=o(` class
method.`),Epr=l(),_9=a("p"),Cpr=o("This class cannot be instantiated directly using "),FFe=a("code"),wpr=o("__init__()"),Apr=o(" (throws an error)."),Lpr=l(),At=a("div"),F(u9.$$.fragment),ypr=l(),TFe=a("p"),xpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$pr=l(),Od=a("p"),kpr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),Spr=o("not"),Rpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),Ppr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ipr=l(),F(R7.$$.fragment),Npr=l(),po=a("div"),F(b9.$$.fragment),qpr=l(),EFe=a("p"),jpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Dpr=l(),en=a("p"),Gpr=o("The model class to instantiate is selected based on the "),CFe=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(":"),Hpr=l(),rt=a("ul"),P7=a("li"),LFe=a("strong"),Upr=o("data2vec-audio"),Jpr=o(" \u2014 "),$H=a("a"),Ypr=o("Data2VecAudioForXVector"),Kpr=o(" (Data2VecAudio model)"),Zpr=l(),B7=a("li"),yFe=a("strong"),e_r=o("unispeech-sat"),o_r=o(" \u2014 "),kH=a("a"),r_r=o("UniSpeechSatForXVector"),t_r=o(" (UniSpeechSat model)"),a_r=l(),I7=a("li"),xFe=a("strong"),n_r=o("wav2vec2"),s_r=o(" \u2014 "),SH=a("a"),l_r=o("Wav2Vec2ForXVector"),i_r=o(" (Wav2Vec2 model)"),d_r=l(),N7=a("li"),$Fe=a("strong"),c_r=o("wav2vec2-conformer"),f_r=o(" \u2014 "),RH=a("a"),m_r=o("Wav2Vec2ConformerForXVector"),g_r=o(" (Wav2Vec2-Conformer model)"),h_r=l(),q7=a("li"),kFe=a("strong"),p_r=o("wavlm"),__r=o(" \u2014 "),PH=a("a"),u_r=o("WavLMForXVector"),b_r=o(" (WavLM model)"),v_r=l(),j7=a("p"),F_r=o("The model is set in evaluation mode by default using "),SFe=a("code"),T_r=o("model.eval()"),M_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=a("code"),E_r=o("model.train()"),C_r=l(),F(D7.$$.fragment),YXe=l(),Vd=a("h2"),G7=a("a"),PFe=a("span"),F(v9.$$.fragment),w_r=l(),BFe=a("span"),A_r=o("AutoModelForMaskedImageModeling"),KXe=l(),Uo=a("div"),F(F9.$$.fragment),L_r=l(),Xd=a("p"),y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BH=a("a"),x_r=o("from_pretrained()"),$_r=o(" class method or the "),IH=a("a"),k_r=o("from_config()"),S_r=o(` class
method.`),R_r=l(),T9=a("p"),P_r=o("This class cannot be instantiated directly using "),IFe=a("code"),B_r=o("__init__()"),I_r=o(" (throws an error)."),N_r=l(),Lt=a("div"),F(M9.$$.fragment),q_r=l(),NFe=a("p"),j_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),D_r=l(),zd=a("p"),G_r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),O_r=o("not"),V_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),X_r=o("from_pretrained()"),z_r=o(" to load the model weights."),Q_r=l(),F(O7.$$.fragment),W_r=l(),_o=a("div"),F(E9.$$.fragment),H_r=l(),jFe=a("p"),U_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),J_r=l(),on=a("p"),Y_r=o("The model class to instantiate is selected based on the "),DFe=a("code"),K_r=o("model_type"),Z_r=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),eur=o("pretrained_model_name_or_path"),our=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(":"),aur=l(),Qd=a("ul"),V7=a("li"),VFe=a("strong"),nur=o("deit"),sur=o(" \u2014 "),qH=a("a"),lur=o("DeiTForMaskedImageModeling"),iur=o(" (DeiT model)"),dur=l(),X7=a("li"),XFe=a("strong"),cur=o("swin"),fur=o(" \u2014 "),jH=a("a"),mur=o("SwinForMaskedImageModeling"),gur=o(" (Swin Transformer model)"),hur=l(),z7=a("li"),zFe=a("strong"),pur=o("vit"),_ur=o(" \u2014 "),DH=a("a"),uur=o("ViTForMaskedImageModeling"),bur=o(" (ViT model)"),vur=l(),Q7=a("p"),Fur=o("The model is set in evaluation mode by default using "),QFe=a("code"),Tur=o("model.eval()"),Mur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=a("code"),Eur=o("model.train()"),Cur=l(),F(W7.$$.fragment),ZXe=l(),Wd=a("h2"),H7=a("a"),HFe=a("span"),F(C9.$$.fragment),wur=l(),UFe=a("span"),Aur=o("AutoModelForObjectDetection"),eze=l(),Jo=a("div"),F(w9.$$.fragment),Lur=l(),Hd=a("p"),yur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),GH=a("a"),xur=o("from_pretrained()"),$ur=o(" class method or the "),OH=a("a"),kur=o("from_config()"),Sur=o(` class
method.`),Rur=l(),A9=a("p"),Pur=o("This class cannot be instantiated directly using "),JFe=a("code"),Bur=o("__init__()"),Iur=o(" (throws an error)."),Nur=l(),yt=a("div"),F(L9.$$.fragment),qur=l(),YFe=a("p"),jur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Dur=l(),Ud=a("p"),Gur=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),Our=o("not"),Vur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),Xur=o("from_pretrained()"),zur=o(" to load the model weights."),Qur=l(),F(U7.$$.fragment),Wur=l(),uo=a("div"),F(y9.$$.fragment),Hur=l(),ZFe=a("p"),Uur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jur=l(),rn=a("p"),Yur=o("The model class to instantiate is selected based on the "),e6e=a("code"),Kur=o("model_type"),Zur=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),r2r=o("pretrained_model_name_or_path"),t2r=o(":"),a2r=l(),x9=a("ul"),J7=a("li"),t6e=a("strong"),n2r=o("detr"),s2r=o(" \u2014 "),XH=a("a"),l2r=o("DetrForObjectDetection"),i2r=o(" (DETR model)"),d2r=l(),Y7=a("li"),a6e=a("strong"),c2r=o("yolos"),f2r=o(" \u2014 "),zH=a("a"),m2r=o("YolosForObjectDetection"),g2r=o(" (YOLOS model)"),h2r=l(),K7=a("p"),p2r=o("The model is set in evaluation mode by default using "),n6e=a("code"),_2r=o("model.eval()"),u2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s6e=a("code"),b2r=o("model.train()"),v2r=l(),F(Z7.$$.fragment),oze=l(),Jd=a("h2"),e8=a("a"),l6e=a("span"),F($9.$$.fragment),F2r=l(),i6e=a("span"),T2r=o("AutoModelForImageSegmentation"),rze=l(),Yo=a("div"),F(k9.$$.fragment),M2r=l(),Yd=a("p"),E2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QH=a("a"),C2r=o("from_pretrained()"),w2r=o(" class method or the "),WH=a("a"),A2r=o("from_config()"),L2r=o(` class
method.`),y2r=l(),S9=a("p"),x2r=o("This class cannot be instantiated directly using "),d6e=a("code"),$2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),xt=a("div"),F(R9.$$.fragment),R2r=l(),c6e=a("p"),P2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),B2r=l(),Kd=a("p"),I2r=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),N2r=o("not"),q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),j2r=o("from_pretrained()"),D2r=o(" to load the model weights."),G2r=l(),F(o8.$$.fragment),O2r=l(),bo=a("div"),F(P9.$$.fragment),V2r=l(),m6e=a("p"),X2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),z2r=l(),tn=a("p"),Q2r=o("The model class to instantiate is selected based on the "),g6e=a("code"),W2r=o("model_type"),H2r=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(":"),Z2r=l(),_6e=a("ul"),r8=a("li"),u6e=a("strong"),e1r=o("detr"),o1r=o(" \u2014 "),UH=a("a"),r1r=o("DetrForSegmentation"),t1r=o(" (DETR model)"),a1r=l(),t8=a("p"),n1r=o("The model is set in evaluation mode by default using "),b6e=a("code"),s1r=o("model.eval()"),l1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v6e=a("code"),i1r=o("model.train()"),d1r=l(),F(a8.$$.fragment),tze=l(),Zd=a("h2"),n8=a("a"),F6e=a("span"),F(B9.$$.fragment),c1r=l(),T6e=a("span"),f1r=o("AutoModelForSemanticSegmentation"),aze=l(),Ko=a("div"),F(I9.$$.fragment),m1r=l(),ec=a("p"),g1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),JH=a("a"),h1r=o("from_pretrained()"),p1r=o(" class method or the "),YH=a("a"),_1r=o("from_config()"),u1r=o(` class
method.`),b1r=l(),N9=a("p"),v1r=o("This class cannot be instantiated directly using "),M6e=a("code"),F1r=o("__init__()"),T1r=o(" (throws an error)."),M1r=l(),$t=a("div"),F(q9.$$.fragment),E1r=l(),E6e=a("p"),C1r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),w1r=l(),oc=a("p"),A1r=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),L1r=o("not"),y1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),x1r=o("from_pretrained()"),$1r=o(" to load the model weights."),k1r=l(),F(s8.$$.fragment),S1r=l(),vo=a("div"),F(j9.$$.fragment),R1r=l(),w6e=a("p"),P1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),B1r=l(),an=a("p"),I1r=o("The model class to instantiate is selected based on the "),A6e=a("code"),N1r=o("model_type"),q1r=o(` property of the config object (either
passed as an argument or loaded from `),L6e=a("code"),j1r=o("pretrained_model_name_or_path"),D1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(":"),V1r=l(),tt=a("ul"),l8=a("li"),x6e=a("strong"),X1r=o("beit"),z1r=o(" \u2014 "),ZH=a("a"),Q1r=o("BeitForSemanticSegmentation"),W1r=o(" (BEiT model)"),H1r=l(),i8=a("li"),$6e=a("strong"),U1r=o("data2vec-vision"),J1r=o(" \u2014 "),eU=a("a"),Y1r=o("Data2VecVisionForSemanticSegmentation"),K1r=o(" (Data2VecVision model)"),Z1r=l(),d8=a("li"),k6e=a("strong"),ebr=o("dpt"),obr=o(" \u2014 "),oU=a("a"),rbr=o("DPTForSemanticSegmentation"),tbr=o(" (DPT model)"),abr=l(),c8=a("li"),S6e=a("strong"),nbr=o("mobilevit"),sbr=o(" \u2014 "),rU=a("a"),lbr=o("MobileViTForSemanticSegmentation"),ibr=o(" (MobileViT model)"),dbr=l(),f8=a("li"),R6e=a("strong"),cbr=o("segformer"),fbr=o(" \u2014 "),tU=a("a"),mbr=o("SegformerForSemanticSegmentation"),gbr=o(" (SegFormer model)"),hbr=l(),m8=a("p"),pbr=o("The model is set in evaluation mode by default using "),P6e=a("code"),_br=o("model.eval()"),ubr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=a("code"),bbr=o("model.train()"),vbr=l(),F(g8.$$.fragment),nze=l(),rc=a("h2"),h8=a("a"),I6e=a("span"),F(D9.$$.fragment),Fbr=l(),N6e=a("span"),Tbr=o("AutoModelForInstanceSegmentation"),sze=l(),Zo=a("div"),F(G9.$$.fragment),Mbr=l(),tc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),aU=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),nU=a("a"),Abr=o("from_config()"),Lbr=o(` class
method.`),ybr=l(),O9=a("p"),xbr=o("This class cannot be instantiated directly using "),q6e=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),kt=a("div"),F(V9.$$.fragment),Rbr=l(),j6e=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Bbr=l(),ac=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Nbr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(p8.$$.fragment),Obr=l(),Fo=a("div"),F(X9.$$.fragment),Vbr=l(),G6e=a("p"),Xbr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zbr=l(),nn=a("p"),Qbr=o("The model class to instantiate is selected based on the "),O6e=a("code"),Wbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),z6e=a("ul"),_8=a("li"),Q6e=a("strong"),evr=o("maskformer"),ovr=o(" \u2014 "),lU=a("a"),rvr=o("MaskFormerForInstanceSegmentation"),tvr=o(" (MaskFormer model)"),avr=l(),u8=a("p"),nvr=o("The model is set in evaluation mode by default using "),W6e=a("code"),svr=o("model.eval()"),lvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H6e=a("code"),ivr=o("model.train()"),dvr=l(),F(b8.$$.fragment),lze=l(),nc=a("h2"),v8=a("a"),U6e=a("span"),F(z9.$$.fragment),cvr=l(),J6e=a("span"),fvr=o("TFAutoModel"),ize=l(),er=a("div"),F(Q9.$$.fragment),mvr=l(),sc=a("p"),gvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iU=a("a"),hvr=o("from_pretrained()"),pvr=o(" class method or the "),dU=a("a"),_vr=o("from_config()"),uvr=o(` class
method.`),bvr=l(),W9=a("p"),vvr=o("This class cannot be instantiated directly using "),Y6e=a("code"),Fvr=o("__init__()"),Tvr=o(" (throws an error)."),Mvr=l(),St=a("div"),F(H9.$$.fragment),Evr=l(),K6e=a("p"),Cvr=o("Instantiates one of the base model classes of the library from a configuration."),wvr=l(),lc=a("p"),Avr=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),Lvr=o("not"),yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),xvr=o("from_pretrained()"),$vr=o(" to load the model weights."),kvr=l(),F(F8.$$.fragment),Svr=l(),xr=a("div"),F(U9.$$.fragment),Rvr=l(),eTe=a("p"),Pvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Bvr=l(),sn=a("p"),Ivr=o("The model class to instantiate is selected based on the "),oTe=a("code"),Nvr=o("model_type"),qvr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),q=a("ul"),T8=a("li"),aTe=a("strong"),Xvr=o("albert"),zvr=o(" \u2014 "),fU=a("a"),Qvr=o("TFAlbertModel"),Wvr=o(" (ALBERT model)"),Hvr=l(),M8=a("li"),nTe=a("strong"),Uvr=o("bart"),Jvr=o(" \u2014 "),mU=a("a"),Yvr=o("TFBartModel"),Kvr=o(" (BART model)"),Zvr=l(),E8=a("li"),sTe=a("strong"),eFr=o("bert"),oFr=o(" \u2014 "),gU=a("a"),rFr=o("TFBertModel"),tFr=o(" (BERT model)"),aFr=l(),C8=a("li"),lTe=a("strong"),nFr=o("blenderbot"),sFr=o(" \u2014 "),hU=a("a"),lFr=o("TFBlenderbotModel"),iFr=o(" (Blenderbot model)"),dFr=l(),w8=a("li"),iTe=a("strong"),cFr=o("blenderbot-small"),fFr=o(" \u2014 "),pU=a("a"),mFr=o("TFBlenderbotSmallModel"),gFr=o(" (BlenderbotSmall model)"),hFr=l(),A8=a("li"),dTe=a("strong"),pFr=o("camembert"),_Fr=o(" \u2014 "),_U=a("a"),uFr=o("TFCamembertModel"),bFr=o(" (CamemBERT model)"),vFr=l(),L8=a("li"),cTe=a("strong"),FFr=o("clip"),TFr=o(" \u2014 "),uU=a("a"),MFr=o("TFCLIPModel"),EFr=o(" (CLIP model)"),CFr=l(),y8=a("li"),fTe=a("strong"),wFr=o("convbert"),AFr=o(" \u2014 "),bU=a("a"),LFr=o("TFConvBertModel"),yFr=o(" (ConvBERT model)"),xFr=l(),x8=a("li"),mTe=a("strong"),$Fr=o("convnext"),kFr=o(" \u2014 "),vU=a("a"),SFr=o("TFConvNextModel"),RFr=o(" (ConvNeXT model)"),PFr=l(),$8=a("li"),gTe=a("strong"),BFr=o("ctrl"),IFr=o(" \u2014 "),FU=a("a"),NFr=o("TFCTRLModel"),qFr=o(" (CTRL model)"),jFr=l(),k8=a("li"),hTe=a("strong"),DFr=o("data2vec-vision"),GFr=o(" \u2014 "),TU=a("a"),OFr=o("TFData2VecVisionModel"),VFr=o(" (Data2VecVision model)"),XFr=l(),S8=a("li"),pTe=a("strong"),zFr=o("deberta"),QFr=o(" \u2014 "),MU=a("a"),WFr=o("TFDebertaModel"),HFr=o(" (DeBERTa model)"),UFr=l(),R8=a("li"),_Te=a("strong"),JFr=o("deberta-v2"),YFr=o(" \u2014 "),EU=a("a"),KFr=o("TFDebertaV2Model"),ZFr=o(" (DeBERTa-v2 model)"),e6r=l(),P8=a("li"),uTe=a("strong"),o6r=o("distilbert"),r6r=o(" \u2014 "),CU=a("a"),t6r=o("TFDistilBertModel"),a6r=o(" (DistilBERT model)"),n6r=l(),B8=a("li"),bTe=a("strong"),s6r=o("dpr"),l6r=o(" \u2014 "),wU=a("a"),i6r=o("TFDPRQuestionEncoder"),d6r=o(" (DPR model)"),c6r=l(),I8=a("li"),vTe=a("strong"),f6r=o("electra"),m6r=o(" \u2014 "),AU=a("a"),g6r=o("TFElectraModel"),h6r=o(" (ELECTRA model)"),p6r=l(),N8=a("li"),FTe=a("strong"),_6r=o("flaubert"),u6r=o(" \u2014 "),LU=a("a"),b6r=o("TFFlaubertModel"),v6r=o(" (FlauBERT model)"),F6r=l(),Js=a("li"),TTe=a("strong"),T6r=o("funnel"),M6r=o(" \u2014 "),yU=a("a"),E6r=o("TFFunnelModel"),C6r=o(" or "),xU=a("a"),w6r=o("TFFunnelBaseModel"),A6r=o(" (Funnel Transformer model)"),L6r=l(),q8=a("li"),MTe=a("strong"),y6r=o("gpt2"),x6r=o(" \u2014 "),$U=a("a"),$6r=o("TFGPT2Model"),k6r=o(" (OpenAI GPT-2 model)"),S6r=l(),j8=a("li"),ETe=a("strong"),R6r=o("gptj"),P6r=o(" \u2014 "),kU=a("a"),B6r=o("TFGPTJModel"),I6r=o(" (GPT-J model)"),N6r=l(),D8=a("li"),CTe=a("strong"),q6r=o("hubert"),j6r=o(" \u2014 "),SU=a("a"),D6r=o("TFHubertModel"),G6r=o(" (Hubert model)"),O6r=l(),G8=a("li"),wTe=a("strong"),V6r=o("layoutlm"),X6r=o(" \u2014 "),RU=a("a"),z6r=o("TFLayoutLMModel"),Q6r=o(" (LayoutLM model)"),W6r=l(),O8=a("li"),ATe=a("strong"),H6r=o("led"),U6r=o(" \u2014 "),PU=a("a"),J6r=o("TFLEDModel"),Y6r=o(" (LED model)"),K6r=l(),V8=a("li"),LTe=a("strong"),Z6r=o("longformer"),eTr=o(" \u2014 "),BU=a("a"),oTr=o("TFLongformerModel"),rTr=o(" (Longformer model)"),tTr=l(),X8=a("li"),yTe=a("strong"),aTr=o("lxmert"),nTr=o(" \u2014 "),IU=a("a"),sTr=o("TFLxmertModel"),lTr=o(" (LXMERT model)"),iTr=l(),z8=a("li"),xTe=a("strong"),dTr=o("marian"),cTr=o(" \u2014 "),NU=a("a"),fTr=o("TFMarianModel"),mTr=o(" (Marian model)"),gTr=l(),Q8=a("li"),$Te=a("strong"),hTr=o("mbart"),pTr=o(" \u2014 "),qU=a("a"),_Tr=o("TFMBartModel"),uTr=o(" (mBART model)"),bTr=l(),W8=a("li"),kTe=a("strong"),vTr=o("mobilebert"),FTr=o(" \u2014 "),jU=a("a"),TTr=o("TFMobileBertModel"),MTr=o(" (MobileBERT model)"),ETr=l(),H8=a("li"),STe=a("strong"),CTr=o("mpnet"),wTr=o(" \u2014 "),DU=a("a"),ATr=o("TFMPNetModel"),LTr=o(" (MPNet model)"),yTr=l(),U8=a("li"),RTe=a("strong"),xTr=o("mt5"),$Tr=o(" \u2014 "),GU=a("a"),kTr=o("TFMT5Model"),STr=o(" (MT5 model)"),RTr=l(),J8=a("li"),PTe=a("strong"),PTr=o("openai-gpt"),BTr=o(" \u2014 "),OU=a("a"),ITr=o("TFOpenAIGPTModel"),NTr=o(" (OpenAI GPT model)"),qTr=l(),Y8=a("li"),BTe=a("strong"),jTr=o("opt"),DTr=o(" \u2014 "),VU=a("a"),GTr=o("TFOPTModel"),OTr=o(" (OPT model)"),VTr=l(),K8=a("li"),ITe=a("strong"),XTr=o("pegasus"),zTr=o(" \u2014 "),XU=a("a"),QTr=o("TFPegasusModel"),WTr=o(" (Pegasus model)"),HTr=l(),Z8=a("li"),NTe=a("strong"),UTr=o("regnet"),JTr=o(" \u2014 "),zU=a("a"),YTr=o("TFRegNetModel"),KTr=o(" (RegNet model)"),ZTr=l(),eM=a("li"),qTe=a("strong"),e7r=o("rembert"),o7r=o(" \u2014 "),QU=a("a"),r7r=o("TFRemBertModel"),t7r=o(" (RemBERT model)"),a7r=l(),oM=a("li"),jTe=a("strong"),n7r=o("resnet"),s7r=o(" \u2014 "),WU=a("a"),l7r=o("TFResNetModel"),i7r=o(" (ResNet model)"),d7r=l(),rM=a("li"),DTe=a("strong"),c7r=o("roberta"),f7r=o(" \u2014 "),HU=a("a"),m7r=o("TFRobertaModel"),g7r=o(" (RoBERTa model)"),h7r=l(),tM=a("li"),GTe=a("strong"),p7r=o("roformer"),_7r=o(" \u2014 "),UU=a("a"),u7r=o("TFRoFormerModel"),b7r=o(" (RoFormer model)"),v7r=l(),aM=a("li"),OTe=a("strong"),F7r=o("speech_to_text"),T7r=o(" \u2014 "),JU=a("a"),M7r=o("TFSpeech2TextModel"),E7r=o(" (Speech2Text model)"),C7r=l(),nM=a("li"),VTe=a("strong"),w7r=o("swin"),A7r=o(" \u2014 "),YU=a("a"),L7r=o("TFSwinModel"),y7r=o(" (Swin Transformer model)"),x7r=l(),sM=a("li"),XTe=a("strong"),$7r=o("t5"),k7r=o(" \u2014 "),KU=a("a"),S7r=o("TFT5Model"),R7r=o(" (T5 model)"),P7r=l(),lM=a("li"),zTe=a("strong"),B7r=o("tapas"),I7r=o(" \u2014 "),ZU=a("a"),N7r=o("TFTapasModel"),q7r=o(" (TAPAS model)"),j7r=l(),iM=a("li"),QTe=a("strong"),D7r=o("transfo-xl"),G7r=o(" \u2014 "),eJ=a("a"),O7r=o("TFTransfoXLModel"),V7r=o(" (Transformer-XL model)"),X7r=l(),dM=a("li"),WTe=a("strong"),z7r=o("vit"),Q7r=o(" \u2014 "),oJ=a("a"),W7r=o("TFViTModel"),H7r=o(" (ViT model)"),U7r=l(),cM=a("li"),HTe=a("strong"),J7r=o("vit_mae"),Y7r=o(" \u2014 "),rJ=a("a"),K7r=o("TFViTMAEModel"),Z7r=o(" (ViTMAE model)"),e8r=l(),fM=a("li"),UTe=a("strong"),o8r=o("wav2vec2"),r8r=o(" \u2014 "),tJ=a("a"),t8r=o("TFWav2Vec2Model"),a8r=o(" (Wav2Vec2 model)"),n8r=l(),mM=a("li"),JTe=a("strong"),s8r=o("xlm"),l8r=o(" \u2014 "),aJ=a("a"),i8r=o("TFXLMModel"),d8r=o(" (XLM model)"),c8r=l(),gM=a("li"),YTe=a("strong"),f8r=o("xlm-roberta"),m8r=o(" \u2014 "),nJ=a("a"),g8r=o("TFXLMRobertaModel"),h8r=o(" (XLM-RoBERTa model)"),p8r=l(),hM=a("li"),KTe=a("strong"),_8r=o("xlnet"),u8r=o(" \u2014 "),sJ=a("a"),b8r=o("TFXLNetModel"),v8r=o(" (XLNet model)"),F8r=l(),F(pM.$$.fragment),dze=l(),ic=a("h2"),_M=a("a"),ZTe=a("span"),F(J9.$$.fragment),T8r=l(),e7e=a("span"),M8r=o("TFAutoModelForPreTraining"),cze=l(),or=a("div"),F(Y9.$$.fragment),E8r=l(),dc=a("p"),C8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" class method or the "),iJ=a("a"),L8r=o("from_config()"),y8r=o(` class
method.`),x8r=l(),K9=a("p"),$8r=o("This class cannot be instantiated directly using "),o7e=a("code"),k8r=o("__init__()"),S8r=o(" (throws an error)."),R8r=l(),Rt=a("div"),F(Z9.$$.fragment),P8r=l(),r7e=a("p"),B8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),I8r=l(),cc=a("p"),N8r=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),q8r=o("not"),j8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),D8r=o("from_pretrained()"),G8r=o(" to load the model weights."),O8r=l(),F(uM.$$.fragment),V8r=l(),$r=a("div"),F(ex.$$.fragment),X8r=l(),a7e=a("p"),z8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q8r=l(),ln=a("p"),W8r=o("The model class to instantiate is selected based on the "),n7e=a("code"),H8r=o("model_type"),U8r=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),J8r=o("pretrained_model_name_or_path"),Y8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(":"),eMr=l(),se=a("ul"),bM=a("li"),i7e=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),cJ=a("a"),tMr=o("TFAlbertForPreTraining"),aMr=o(" (ALBERT model)"),nMr=l(),vM=a("li"),d7e=a("strong"),sMr=o("bart"),lMr=o(" \u2014 "),fJ=a("a"),iMr=o("TFBartForConditionalGeneration"),dMr=o(" (BART model)"),cMr=l(),FM=a("li"),c7e=a("strong"),fMr=o("bert"),mMr=o(" \u2014 "),mJ=a("a"),gMr=o("TFBertForPreTraining"),hMr=o(" (BERT model)"),pMr=l(),TM=a("li"),f7e=a("strong"),_Mr=o("camembert"),uMr=o(" \u2014 "),gJ=a("a"),bMr=o("TFCamembertForMaskedLM"),vMr=o(" (CamemBERT model)"),FMr=l(),MM=a("li"),m7e=a("strong"),TMr=o("ctrl"),MMr=o(" \u2014 "),hJ=a("a"),EMr=o("TFCTRLLMHeadModel"),CMr=o(" (CTRL model)"),wMr=l(),EM=a("li"),g7e=a("strong"),AMr=o("distilbert"),LMr=o(" \u2014 "),pJ=a("a"),yMr=o("TFDistilBertForMaskedLM"),xMr=o(" (DistilBERT model)"),$Mr=l(),CM=a("li"),h7e=a("strong"),kMr=o("electra"),SMr=o(" \u2014 "),_J=a("a"),RMr=o("TFElectraForPreTraining"),PMr=o(" (ELECTRA model)"),BMr=l(),wM=a("li"),p7e=a("strong"),IMr=o("flaubert"),NMr=o(" \u2014 "),uJ=a("a"),qMr=o("TFFlaubertWithLMHeadModel"),jMr=o(" (FlauBERT model)"),DMr=l(),AM=a("li"),_7e=a("strong"),GMr=o("funnel"),OMr=o(" \u2014 "),bJ=a("a"),VMr=o("TFFunnelForPreTraining"),XMr=o(" (Funnel Transformer model)"),zMr=l(),LM=a("li"),u7e=a("strong"),QMr=o("gpt2"),WMr=o(" \u2014 "),vJ=a("a"),HMr=o("TFGPT2LMHeadModel"),UMr=o(" (OpenAI GPT-2 model)"),JMr=l(),yM=a("li"),b7e=a("strong"),YMr=o("layoutlm"),KMr=o(" \u2014 "),FJ=a("a"),ZMr=o("TFLayoutLMForMaskedLM"),e4r=o(" (LayoutLM model)"),o4r=l(),xM=a("li"),v7e=a("strong"),r4r=o("lxmert"),t4r=o(" \u2014 "),TJ=a("a"),a4r=o("TFLxmertForPreTraining"),n4r=o(" (LXMERT model)"),s4r=l(),$M=a("li"),F7e=a("strong"),l4r=o("mobilebert"),i4r=o(" \u2014 "),MJ=a("a"),d4r=o("TFMobileBertForPreTraining"),c4r=o(" (MobileBERT model)"),f4r=l(),kM=a("li"),T7e=a("strong"),m4r=o("mpnet"),g4r=o(" \u2014 "),EJ=a("a"),h4r=o("TFMPNetForMaskedLM"),p4r=o(" (MPNet model)"),_4r=l(),SM=a("li"),M7e=a("strong"),u4r=o("openai-gpt"),b4r=o(" \u2014 "),CJ=a("a"),v4r=o("TFOpenAIGPTLMHeadModel"),F4r=o(" (OpenAI GPT model)"),T4r=l(),RM=a("li"),E7e=a("strong"),M4r=o("roberta"),E4r=o(" \u2014 "),wJ=a("a"),C4r=o("TFRobertaForMaskedLM"),w4r=o(" (RoBERTa model)"),A4r=l(),PM=a("li"),C7e=a("strong"),L4r=o("t5"),y4r=o(" \u2014 "),AJ=a("a"),x4r=o("TFT5ForConditionalGeneration"),$4r=o(" (T5 model)"),k4r=l(),BM=a("li"),w7e=a("strong"),S4r=o("tapas"),R4r=o(" \u2014 "),LJ=a("a"),P4r=o("TFTapasForMaskedLM"),B4r=o(" (TAPAS model)"),I4r=l(),IM=a("li"),A7e=a("strong"),N4r=o("transfo-xl"),q4r=o(" \u2014 "),yJ=a("a"),j4r=o("TFTransfoXLLMHeadModel"),D4r=o(" (Transformer-XL model)"),G4r=l(),NM=a("li"),L7e=a("strong"),O4r=o("vit_mae"),V4r=o(" \u2014 "),xJ=a("a"),X4r=o("TFViTMAEForPreTraining"),z4r=o(" (ViTMAE model)"),Q4r=l(),qM=a("li"),y7e=a("strong"),W4r=o("xlm"),H4r=o(" \u2014 "),$J=a("a"),U4r=o("TFXLMWithLMHeadModel"),J4r=o(" (XLM model)"),Y4r=l(),jM=a("li"),x7e=a("strong"),K4r=o("xlm-roberta"),Z4r=o(" \u2014 "),kJ=a("a"),eEr=o("TFXLMRobertaForMaskedLM"),oEr=o(" (XLM-RoBERTa model)"),rEr=l(),DM=a("li"),$7e=a("strong"),tEr=o("xlnet"),aEr=o(" \u2014 "),SJ=a("a"),nEr=o("TFXLNetLMHeadModel"),sEr=o(" (XLNet model)"),lEr=l(),F(GM.$$.fragment),fze=l(),fc=a("h2"),OM=a("a"),k7e=a("span"),F(ox.$$.fragment),iEr=l(),S7e=a("span"),dEr=o("TFAutoModelForCausalLM"),mze=l(),rr=a("div"),F(rx.$$.fragment),cEr=l(),mc=a("p"),fEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=a("a"),mEr=o("from_pretrained()"),gEr=o(" class method or the "),PJ=a("a"),hEr=o("from_config()"),pEr=o(` class
method.`),_Er=l(),tx=a("p"),uEr=o("This class cannot be instantiated directly using "),R7e=a("code"),bEr=o("__init__()"),vEr=o(" (throws an error)."),FEr=l(),Pt=a("div"),F(ax.$$.fragment),TEr=l(),P7e=a("p"),MEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EEr=l(),gc=a("p"),CEr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),wEr=o("not"),AEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),LEr=o("from_pretrained()"),yEr=o(" to load the model weights."),xEr=l(),F(VM.$$.fragment),$Er=l(),kr=a("div"),F(nx.$$.fragment),kEr=l(),I7e=a("p"),SEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),REr=l(),dn=a("p"),PEr=o("The model class to instantiate is selected based on the "),N7e=a("code"),BEr=o("model_type"),IEr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),NEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(":"),GEr=l(),Me=a("ul"),XM=a("li"),D7e=a("strong"),OEr=o("bert"),VEr=o(" \u2014 "),IJ=a("a"),XEr=o("TFBertLMHeadModel"),zEr=o(" (BERT model)"),QEr=l(),zM=a("li"),G7e=a("strong"),WEr=o("camembert"),HEr=o(" \u2014 "),NJ=a("a"),UEr=o("TFCamembertForCausalLM"),JEr=o(" (CamemBERT model)"),YEr=l(),QM=a("li"),O7e=a("strong"),KEr=o("ctrl"),ZEr=o(" \u2014 "),qJ=a("a"),eCr=o("TFCTRLLMHeadModel"),oCr=o(" (CTRL model)"),rCr=l(),WM=a("li"),V7e=a("strong"),tCr=o("gpt2"),aCr=o(" \u2014 "),jJ=a("a"),nCr=o("TFGPT2LMHeadModel"),sCr=o(" (OpenAI GPT-2 model)"),lCr=l(),HM=a("li"),X7e=a("strong"),iCr=o("gptj"),dCr=o(" \u2014 "),DJ=a("a"),cCr=o("TFGPTJForCausalLM"),fCr=o(" (GPT-J model)"),mCr=l(),UM=a("li"),z7e=a("strong"),gCr=o("openai-gpt"),hCr=o(" \u2014 "),GJ=a("a"),pCr=o("TFOpenAIGPTLMHeadModel"),_Cr=o(" (OpenAI GPT model)"),uCr=l(),JM=a("li"),Q7e=a("strong"),bCr=o("opt"),vCr=o(" \u2014 "),OJ=a("a"),FCr=o("TFOPTForCausalLM"),TCr=o(" (OPT model)"),MCr=l(),YM=a("li"),W7e=a("strong"),ECr=o("rembert"),CCr=o(" \u2014 "),VJ=a("a"),wCr=o("TFRemBertForCausalLM"),ACr=o(" (RemBERT model)"),LCr=l(),KM=a("li"),H7e=a("strong"),yCr=o("roberta"),xCr=o(" \u2014 "),XJ=a("a"),$Cr=o("TFRobertaForCausalLM"),kCr=o(" (RoBERTa model)"),SCr=l(),ZM=a("li"),U7e=a("strong"),RCr=o("roformer"),PCr=o(" \u2014 "),zJ=a("a"),BCr=o("TFRoFormerForCausalLM"),ICr=o(" (RoFormer model)"),NCr=l(),e4=a("li"),J7e=a("strong"),qCr=o("transfo-xl"),jCr=o(" \u2014 "),QJ=a("a"),DCr=o("TFTransfoXLLMHeadModel"),GCr=o(" (Transformer-XL model)"),OCr=l(),o4=a("li"),Y7e=a("strong"),VCr=o("xlm"),XCr=o(" \u2014 "),WJ=a("a"),zCr=o("TFXLMWithLMHeadModel"),QCr=o(" (XLM model)"),WCr=l(),r4=a("li"),K7e=a("strong"),HCr=o("xlnet"),UCr=o(" \u2014 "),HJ=a("a"),JCr=o("TFXLNetLMHeadModel"),YCr=o(" (XLNet model)"),KCr=l(),F(t4.$$.fragment),gze=l(),hc=a("h2"),a4=a("a"),Z7e=a("span"),F(sx.$$.fragment),ZCr=l(),e8e=a("span"),e3r=o("TFAutoModelForImageClassification"),hze=l(),tr=a("div"),F(lx.$$.fragment),o3r=l(),pc=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=a("a"),t3r=o("from_pretrained()"),a3r=o(" class method or the "),JJ=a("a"),n3r=o("from_config()"),s3r=o(` class
method.`),l3r=l(),ix=a("p"),i3r=o("This class cannot be instantiated directly using "),o8e=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),f3r=l(),Bt=a("div"),F(dx.$$.fragment),m3r=l(),r8e=a("p"),g3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h3r=l(),_c=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),t8e=a("strong"),_3r=o("not"),u3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),b3r=o("from_pretrained()"),v3r=o(" to load the model weights."),F3r=l(),F(n4.$$.fragment),T3r=l(),Sr=a("div"),F(cx.$$.fragment),M3r=l(),a8e=a("p"),E3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),C3r=l(),cn=a("p"),w3r=o("The model class to instantiate is selected based on the "),n8e=a("code"),A3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),s8e=a("code"),y3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l8e=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(":"),S3r=l(),ar=a("ul"),s4=a("li"),i8e=a("strong"),R3r=o("convnext"),P3r=o(" \u2014 "),KJ=a("a"),B3r=o("TFConvNextForImageClassification"),I3r=o(" (ConvNeXT model)"),N3r=l(),l4=a("li"),d8e=a("strong"),q3r=o("data2vec-vision"),j3r=o(" \u2014 "),ZJ=a("a"),D3r=o("TFData2VecVisionForImageClassification"),G3r=o(" (Data2VecVision model)"),O3r=l(),i4=a("li"),c8e=a("strong"),V3r=o("regnet"),X3r=o(" \u2014 "),eY=a("a"),z3r=o("TFRegNetForImageClassification"),Q3r=o(" (RegNet model)"),W3r=l(),d4=a("li"),f8e=a("strong"),H3r=o("resnet"),U3r=o(" \u2014 "),oY=a("a"),J3r=o("TFResNetForImageClassification"),Y3r=o(" (ResNet model)"),K3r=l(),c4=a("li"),m8e=a("strong"),Z3r=o("swin"),e5r=o(" \u2014 "),rY=a("a"),o5r=o("TFSwinForImageClassification"),r5r=o(" (Swin Transformer model)"),t5r=l(),f4=a("li"),g8e=a("strong"),a5r=o("vit"),n5r=o(" \u2014 "),tY=a("a"),s5r=o("TFViTForImageClassification"),l5r=o(" (ViT model)"),i5r=l(),F(m4.$$.fragment),pze=l(),uc=a("h2"),g4=a("a"),h8e=a("span"),F(fx.$$.fragment),d5r=l(),p8e=a("span"),c5r=o("TFAutoModelForMaskedLM"),_ze=l(),nr=a("div"),F(mx.$$.fragment),f5r=l(),bc=a("p"),m5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=a("a"),g5r=o("from_pretrained()"),h5r=o(" class method or the "),nY=a("a"),p5r=o("from_config()"),_5r=o(` class
method.`),u5r=l(),gx=a("p"),b5r=o("This class cannot be instantiated directly using "),_8e=a("code"),v5r=o("__init__()"),F5r=o(" (throws an error)."),T5r=l(),It=a("div"),F(hx.$$.fragment),M5r=l(),u8e=a("p"),E5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C5r=l(),vc=a("p"),w5r=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),A5r=o("not"),L5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),y5r=o("from_pretrained()"),x5r=o(" to load the model weights."),$5r=l(),F(h4.$$.fragment),k5r=l(),Rr=a("div"),F(px.$$.fragment),S5r=l(),v8e=a("p"),R5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P5r=l(),fn=a("p"),B5r=o("The model class to instantiate is selected based on the "),F8e=a("code"),I5r=o("model_type"),N5r=o(` property of the config object (either
passed as an argument or loaded from `),T8e=a("code"),q5r=o("pretrained_model_name_or_path"),j5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(":"),O5r=l(),ie=a("ul"),p4=a("li"),E8e=a("strong"),V5r=o("albert"),X5r=o(" \u2014 "),lY=a("a"),z5r=o("TFAlbertForMaskedLM"),Q5r=o(" (ALBERT model)"),W5r=l(),_4=a("li"),C8e=a("strong"),H5r=o("bert"),U5r=o(" \u2014 "),iY=a("a"),J5r=o("TFBertForMaskedLM"),Y5r=o(" (BERT model)"),K5r=l(),u4=a("li"),w8e=a("strong"),Z5r=o("camembert"),e0r=o(" \u2014 "),dY=a("a"),o0r=o("TFCamembertForMaskedLM"),r0r=o(" (CamemBERT model)"),t0r=l(),b4=a("li"),A8e=a("strong"),a0r=o("convbert"),n0r=o(" \u2014 "),cY=a("a"),s0r=o("TFConvBertForMaskedLM"),l0r=o(" (ConvBERT model)"),i0r=l(),v4=a("li"),L8e=a("strong"),d0r=o("deberta"),c0r=o(" \u2014 "),fY=a("a"),f0r=o("TFDebertaForMaskedLM"),m0r=o(" (DeBERTa model)"),g0r=l(),F4=a("li"),y8e=a("strong"),h0r=o("deberta-v2"),p0r=o(" \u2014 "),mY=a("a"),_0r=o("TFDebertaV2ForMaskedLM"),u0r=o(" (DeBERTa-v2 model)"),b0r=l(),T4=a("li"),x8e=a("strong"),v0r=o("distilbert"),F0r=o(" \u2014 "),gY=a("a"),T0r=o("TFDistilBertForMaskedLM"),M0r=o(" (DistilBERT model)"),E0r=l(),M4=a("li"),$8e=a("strong"),C0r=o("electra"),w0r=o(" \u2014 "),hY=a("a"),A0r=o("TFElectraForMaskedLM"),L0r=o(" (ELECTRA model)"),y0r=l(),E4=a("li"),k8e=a("strong"),x0r=o("flaubert"),$0r=o(" \u2014 "),pY=a("a"),k0r=o("TFFlaubertWithLMHeadModel"),S0r=o(" (FlauBERT model)"),R0r=l(),C4=a("li"),S8e=a("strong"),P0r=o("funnel"),B0r=o(" \u2014 "),_Y=a("a"),I0r=o("TFFunnelForMaskedLM"),N0r=o(" (Funnel Transformer model)"),q0r=l(),w4=a("li"),R8e=a("strong"),j0r=o("layoutlm"),D0r=o(" \u2014 "),uY=a("a"),G0r=o("TFLayoutLMForMaskedLM"),O0r=o(" (LayoutLM model)"),V0r=l(),A4=a("li"),P8e=a("strong"),X0r=o("longformer"),z0r=o(" \u2014 "),bY=a("a"),Q0r=o("TFLongformerForMaskedLM"),W0r=o(" (Longformer model)"),H0r=l(),L4=a("li"),B8e=a("strong"),U0r=o("mobilebert"),J0r=o(" \u2014 "),vY=a("a"),Y0r=o("TFMobileBertForMaskedLM"),K0r=o(" (MobileBERT model)"),Z0r=l(),y4=a("li"),I8e=a("strong"),ewr=o("mpnet"),owr=o(" \u2014 "),FY=a("a"),rwr=o("TFMPNetForMaskedLM"),twr=o(" (MPNet model)"),awr=l(),x4=a("li"),N8e=a("strong"),nwr=o("rembert"),swr=o(" \u2014 "),TY=a("a"),lwr=o("TFRemBertForMaskedLM"),iwr=o(" (RemBERT model)"),dwr=l(),$4=a("li"),q8e=a("strong"),cwr=o("roberta"),fwr=o(" \u2014 "),MY=a("a"),mwr=o("TFRobertaForMaskedLM"),gwr=o(" (RoBERTa model)"),hwr=l(),k4=a("li"),j8e=a("strong"),pwr=o("roformer"),_wr=o(" \u2014 "),EY=a("a"),uwr=o("TFRoFormerForMaskedLM"),bwr=o(" (RoFormer model)"),vwr=l(),S4=a("li"),D8e=a("strong"),Fwr=o("tapas"),Twr=o(" \u2014 "),CY=a("a"),Mwr=o("TFTapasForMaskedLM"),Ewr=o(" (TAPAS model)"),Cwr=l(),R4=a("li"),G8e=a("strong"),wwr=o("xlm"),Awr=o(" \u2014 "),wY=a("a"),Lwr=o("TFXLMWithLMHeadModel"),ywr=o(" (XLM model)"),xwr=l(),P4=a("li"),O8e=a("strong"),$wr=o("xlm-roberta"),kwr=o(" \u2014 "),AY=a("a"),Swr=o("TFXLMRobertaForMaskedLM"),Rwr=o(" (XLM-RoBERTa model)"),Pwr=l(),F(B4.$$.fragment),uze=l(),Fc=a("h2"),I4=a("a"),V8e=a("span"),F(_x.$$.fragment),Bwr=l(),X8e=a("span"),Iwr=o("TFAutoModelForSeq2SeqLM"),bze=l(),sr=a("div"),F(ux.$$.fragment),Nwr=l(),Tc=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=a("a"),jwr=o("from_pretrained()"),Dwr=o(" class method or the "),yY=a("a"),Gwr=o("from_config()"),Owr=o(` class
method.`),Vwr=l(),bx=a("p"),Xwr=o("This class cannot be instantiated directly using "),z8e=a("code"),zwr=o("__init__()"),Qwr=o(" (throws an error)."),Wwr=l(),Nt=a("div"),F(vx.$$.fragment),Hwr=l(),Q8e=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jwr=l(),Mc=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),eAr=o("from_pretrained()"),oAr=o(" to load the model weights."),rAr=l(),F(N4.$$.fragment),tAr=l(),Pr=a("div"),F(Fx.$$.fragment),aAr=l(),H8e=a("p"),nAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sAr=l(),mn=a("p"),lAr=o("The model class to instantiate is selected based on the "),U8e=a("code"),iAr=o("model_type"),dAr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),cAr=o("pretrained_model_name_or_path"),fAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(":"),hAr=l(),ye=a("ul"),q4=a("li"),K8e=a("strong"),pAr=o("bart"),_Ar=o(" \u2014 "),$Y=a("a"),uAr=o("TFBartForConditionalGeneration"),bAr=o(" (BART model)"),vAr=l(),j4=a("li"),Z8e=a("strong"),FAr=o("blenderbot"),TAr=o(" \u2014 "),kY=a("a"),MAr=o("TFBlenderbotForConditionalGeneration"),EAr=o(" (Blenderbot model)"),CAr=l(),D4=a("li"),eMe=a("strong"),wAr=o("blenderbot-small"),AAr=o(" \u2014 "),SY=a("a"),LAr=o("TFBlenderbotSmallForConditionalGeneration"),yAr=o(" (BlenderbotSmall model)"),xAr=l(),G4=a("li"),oMe=a("strong"),$Ar=o("encoder-decoder"),kAr=o(" \u2014 "),RY=a("a"),SAr=o("TFEncoderDecoderModel"),RAr=o(" (Encoder decoder model)"),PAr=l(),O4=a("li"),rMe=a("strong"),BAr=o("led"),IAr=o(" \u2014 "),PY=a("a"),NAr=o("TFLEDForConditionalGeneration"),qAr=o(" (LED model)"),jAr=l(),V4=a("li"),tMe=a("strong"),DAr=o("marian"),GAr=o(" \u2014 "),BY=a("a"),OAr=o("TFMarianMTModel"),VAr=o(" (Marian model)"),XAr=l(),X4=a("li"),aMe=a("strong"),zAr=o("mbart"),QAr=o(" \u2014 "),IY=a("a"),WAr=o("TFMBartForConditionalGeneration"),HAr=o(" (mBART model)"),UAr=l(),z4=a("li"),nMe=a("strong"),JAr=o("mt5"),YAr=o(" \u2014 "),NY=a("a"),KAr=o("TFMT5ForConditionalGeneration"),ZAr=o(" (MT5 model)"),eLr=l(),Q4=a("li"),sMe=a("strong"),oLr=o("pegasus"),rLr=o(" \u2014 "),qY=a("a"),tLr=o("TFPegasusForConditionalGeneration"),aLr=o(" (Pegasus model)"),nLr=l(),W4=a("li"),lMe=a("strong"),sLr=o("t5"),lLr=o(" \u2014 "),jY=a("a"),iLr=o("TFT5ForConditionalGeneration"),dLr=o(" (T5 model)"),cLr=l(),F(H4.$$.fragment),vze=l(),Ec=a("h2"),U4=a("a"),iMe=a("span"),F(Tx.$$.fragment),fLr=l(),dMe=a("span"),mLr=o("TFAutoModelForSequenceClassification"),Fze=l(),lr=a("div"),F(Mx.$$.fragment),gLr=l(),Cc=a("p"),hLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=a("a"),pLr=o("from_pretrained()"),_Lr=o(" class method or the "),GY=a("a"),uLr=o("from_config()"),bLr=o(` class
method.`),vLr=l(),Ex=a("p"),FLr=o("This class cannot be instantiated directly using "),cMe=a("code"),TLr=o("__init__()"),MLr=o(" (throws an error)."),ELr=l(),qt=a("div"),F(Cx.$$.fragment),CLr=l(),fMe=a("p"),wLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ALr=l(),wc=a("p"),LLr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),yLr=o("not"),xLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),$Lr=o("from_pretrained()"),kLr=o(" to load the model weights."),SLr=l(),F(J4.$$.fragment),RLr=l(),Br=a("div"),F(wx.$$.fragment),PLr=l(),gMe=a("p"),BLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ILr=l(),gn=a("p"),NLr=o("The model class to instantiate is selected based on the "),hMe=a("code"),qLr=o("model_type"),jLr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),OLr=o("pretrained_model_name_or_path"),VLr=o(":"),XLr=l(),te=a("ul"),Y4=a("li"),uMe=a("strong"),zLr=o("albert"),QLr=o(" \u2014 "),VY=a("a"),WLr=o("TFAlbertForSequenceClassification"),HLr=o(" (ALBERT model)"),ULr=l(),K4=a("li"),bMe=a("strong"),JLr=o("bert"),YLr=o(" \u2014 "),XY=a("a"),KLr=o("TFBertForSequenceClassification"),ZLr=o(" (BERT model)"),eyr=l(),Z4=a("li"),vMe=a("strong"),oyr=o("camembert"),ryr=o(" \u2014 "),zY=a("a"),tyr=o("TFCamembertForSequenceClassification"),ayr=o(" (CamemBERT model)"),nyr=l(),eE=a("li"),FMe=a("strong"),syr=o("convbert"),lyr=o(" \u2014 "),QY=a("a"),iyr=o("TFConvBertForSequenceClassification"),dyr=o(" (ConvBERT model)"),cyr=l(),oE=a("li"),TMe=a("strong"),fyr=o("ctrl"),myr=o(" \u2014 "),WY=a("a"),gyr=o("TFCTRLForSequenceClassification"),hyr=o(" (CTRL model)"),pyr=l(),rE=a("li"),MMe=a("strong"),_yr=o("deberta"),uyr=o(" \u2014 "),HY=a("a"),byr=o("TFDebertaForSequenceClassification"),vyr=o(" (DeBERTa model)"),Fyr=l(),tE=a("li"),EMe=a("strong"),Tyr=o("deberta-v2"),Myr=o(" \u2014 "),UY=a("a"),Eyr=o("TFDebertaV2ForSequenceClassification"),Cyr=o(" (DeBERTa-v2 model)"),wyr=l(),aE=a("li"),CMe=a("strong"),Ayr=o("distilbert"),Lyr=o(" \u2014 "),JY=a("a"),yyr=o("TFDistilBertForSequenceClassification"),xyr=o(" (DistilBERT model)"),$yr=l(),nE=a("li"),wMe=a("strong"),kyr=o("electra"),Syr=o(" \u2014 "),YY=a("a"),Ryr=o("TFElectraForSequenceClassification"),Pyr=o(" (ELECTRA model)"),Byr=l(),sE=a("li"),AMe=a("strong"),Iyr=o("flaubert"),Nyr=o(" \u2014 "),KY=a("a"),qyr=o("TFFlaubertForSequenceClassification"),jyr=o(" (FlauBERT model)"),Dyr=l(),lE=a("li"),LMe=a("strong"),Gyr=o("funnel"),Oyr=o(" \u2014 "),ZY=a("a"),Vyr=o("TFFunnelForSequenceClassification"),Xyr=o(" (Funnel Transformer model)"),zyr=l(),iE=a("li"),yMe=a("strong"),Qyr=o("gpt2"),Wyr=o(" \u2014 "),eK=a("a"),Hyr=o("TFGPT2ForSequenceClassification"),Uyr=o(" (OpenAI GPT-2 model)"),Jyr=l(),dE=a("li"),xMe=a("strong"),Yyr=o("gptj"),Kyr=o(" \u2014 "),oK=a("a"),Zyr=o("TFGPTJForSequenceClassification"),e9r=o(" (GPT-J model)"),o9r=l(),cE=a("li"),$Me=a("strong"),r9r=o("layoutlm"),t9r=o(" \u2014 "),rK=a("a"),a9r=o("TFLayoutLMForSequenceClassification"),n9r=o(" (LayoutLM model)"),s9r=l(),fE=a("li"),kMe=a("strong"),l9r=o("longformer"),i9r=o(" \u2014 "),tK=a("a"),d9r=o("TFLongformerForSequenceClassification"),c9r=o(" (Longformer model)"),f9r=l(),mE=a("li"),SMe=a("strong"),m9r=o("mobilebert"),g9r=o(" \u2014 "),aK=a("a"),h9r=o("TFMobileBertForSequenceClassification"),p9r=o(" (MobileBERT model)"),_9r=l(),gE=a("li"),RMe=a("strong"),u9r=o("mpnet"),b9r=o(" \u2014 "),nK=a("a"),v9r=o("TFMPNetForSequenceClassification"),F9r=o(" (MPNet model)"),T9r=l(),hE=a("li"),PMe=a("strong"),M9r=o("openai-gpt"),E9r=o(" \u2014 "),sK=a("a"),C9r=o("TFOpenAIGPTForSequenceClassification"),w9r=o(" (OpenAI GPT model)"),A9r=l(),pE=a("li"),BMe=a("strong"),L9r=o("rembert"),y9r=o(" \u2014 "),lK=a("a"),x9r=o("TFRemBertForSequenceClassification"),$9r=o(" (RemBERT model)"),k9r=l(),_E=a("li"),IMe=a("strong"),S9r=o("roberta"),R9r=o(" \u2014 "),iK=a("a"),P9r=o("TFRobertaForSequenceClassification"),B9r=o(" (RoBERTa model)"),I9r=l(),uE=a("li"),NMe=a("strong"),N9r=o("roformer"),q9r=o(" \u2014 "),dK=a("a"),j9r=o("TFRoFormerForSequenceClassification"),D9r=o(" (RoFormer model)"),G9r=l(),bE=a("li"),qMe=a("strong"),O9r=o("tapas"),V9r=o(" \u2014 "),cK=a("a"),X9r=o("TFTapasForSequenceClassification"),z9r=o(" (TAPAS model)"),Q9r=l(),vE=a("li"),jMe=a("strong"),W9r=o("transfo-xl"),H9r=o(" \u2014 "),fK=a("a"),U9r=o("TFTransfoXLForSequenceClassification"),J9r=o(" (Transformer-XL model)"),Y9r=l(),FE=a("li"),DMe=a("strong"),K9r=o("xlm"),Z9r=o(" \u2014 "),mK=a("a"),exr=o("TFXLMForSequenceClassification"),oxr=o(" (XLM model)"),rxr=l(),TE=a("li"),GMe=a("strong"),txr=o("xlm-roberta"),axr=o(" \u2014 "),gK=a("a"),nxr=o("TFXLMRobertaForSequenceClassification"),sxr=o(" (XLM-RoBERTa model)"),lxr=l(),ME=a("li"),OMe=a("strong"),ixr=o("xlnet"),dxr=o(" \u2014 "),hK=a("a"),cxr=o("TFXLNetForSequenceClassification"),fxr=o(" (XLNet model)"),mxr=l(),F(EE.$$.fragment),Tze=l(),Ac=a("h2"),CE=a("a"),VMe=a("span"),F(Ax.$$.fragment),gxr=l(),XMe=a("span"),hxr=o("TFAutoModelForMultipleChoice"),Mze=l(),ir=a("div"),F(Lx.$$.fragment),pxr=l(),Lc=a("p"),_xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=a("a"),uxr=o("from_pretrained()"),bxr=o(" class method or the "),_K=a("a"),vxr=o("from_config()"),Fxr=o(` class
method.`),Txr=l(),yx=a("p"),Mxr=o("This class cannot be instantiated directly using "),zMe=a("code"),Exr=o("__init__()"),Cxr=o(" (throws an error)."),wxr=l(),jt=a("div"),F(xx.$$.fragment),Axr=l(),QMe=a("p"),Lxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yxr=l(),yc=a("p"),xxr=o(`Note:
Loading a model from its configuration file does `),WMe=a("strong"),$xr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Pxr=l(),F(wE.$$.fragment),Bxr=l(),Ir=a("div"),F($x.$$.fragment),Ixr=l(),HMe=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qxr=l(),hn=a("p"),jxr=o("The model class to instantiate is selected based on the "),UMe=a("code"),Dxr=o("model_type"),Gxr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(":"),Qxr=l(),_e=a("ul"),AE=a("li"),KMe=a("strong"),Wxr=o("albert"),Hxr=o(" \u2014 "),bK=a("a"),Uxr=o("TFAlbertForMultipleChoice"),Jxr=o(" (ALBERT model)"),Yxr=l(),LE=a("li"),ZMe=a("strong"),Kxr=o("bert"),Zxr=o(" \u2014 "),vK=a("a"),e$r=o("TFBertForMultipleChoice"),o$r=o(" (BERT model)"),r$r=l(),yE=a("li"),e4e=a("strong"),t$r=o("camembert"),a$r=o(" \u2014 "),FK=a("a"),n$r=o("TFCamembertForMultipleChoice"),s$r=o(" (CamemBERT model)"),l$r=l(),xE=a("li"),o4e=a("strong"),i$r=o("convbert"),d$r=o(" \u2014 "),TK=a("a"),c$r=o("TFConvBertForMultipleChoice"),f$r=o(" (ConvBERT model)"),m$r=l(),$E=a("li"),r4e=a("strong"),g$r=o("distilbert"),h$r=o(" \u2014 "),MK=a("a"),p$r=o("TFDistilBertForMultipleChoice"),_$r=o(" (DistilBERT model)"),u$r=l(),kE=a("li"),t4e=a("strong"),b$r=o("electra"),v$r=o(" \u2014 "),EK=a("a"),F$r=o("TFElectraForMultipleChoice"),T$r=o(" (ELECTRA model)"),M$r=l(),SE=a("li"),a4e=a("strong"),E$r=o("flaubert"),C$r=o(" \u2014 "),CK=a("a"),w$r=o("TFFlaubertForMultipleChoice"),A$r=o(" (FlauBERT model)"),L$r=l(),RE=a("li"),n4e=a("strong"),y$r=o("funnel"),x$r=o(" \u2014 "),wK=a("a"),$$r=o("TFFunnelForMultipleChoice"),k$r=o(" (Funnel Transformer model)"),S$r=l(),PE=a("li"),s4e=a("strong"),R$r=o("longformer"),P$r=o(" \u2014 "),AK=a("a"),B$r=o("TFLongformerForMultipleChoice"),I$r=o(" (Longformer model)"),N$r=l(),BE=a("li"),l4e=a("strong"),q$r=o("mobilebert"),j$r=o(" \u2014 "),LK=a("a"),D$r=o("TFMobileBertForMultipleChoice"),G$r=o(" (MobileBERT model)"),O$r=l(),IE=a("li"),i4e=a("strong"),V$r=o("mpnet"),X$r=o(" \u2014 "),yK=a("a"),z$r=o("TFMPNetForMultipleChoice"),Q$r=o(" (MPNet model)"),W$r=l(),NE=a("li"),d4e=a("strong"),H$r=o("rembert"),U$r=o(" \u2014 "),xK=a("a"),J$r=o("TFRemBertForMultipleChoice"),Y$r=o(" (RemBERT model)"),K$r=l(),qE=a("li"),c4e=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),$K=a("a"),okr=o("TFRobertaForMultipleChoice"),rkr=o(" (RoBERTa model)"),tkr=l(),jE=a("li"),f4e=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),kK=a("a"),skr=o("TFRoFormerForMultipleChoice"),lkr=o(" (RoFormer model)"),ikr=l(),DE=a("li"),m4e=a("strong"),dkr=o("xlm"),ckr=o(" \u2014 "),SK=a("a"),fkr=o("TFXLMForMultipleChoice"),mkr=o(" (XLM model)"),gkr=l(),GE=a("li"),g4e=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),RK=a("a"),_kr=o("TFXLMRobertaForMultipleChoice"),ukr=o(" (XLM-RoBERTa model)"),bkr=l(),OE=a("li"),h4e=a("strong"),vkr=o("xlnet"),Fkr=o(" \u2014 "),PK=a("a"),Tkr=o("TFXLNetForMultipleChoice"),Mkr=o(" (XLNet model)"),Ekr=l(),F(VE.$$.fragment),Eze=l(),xc=a("h2"),XE=a("a"),p4e=a("span"),F(kx.$$.fragment),Ckr=l(),_4e=a("span"),wkr=o("TFAutoModelForNextSentencePrediction"),Cze=l(),dr=a("div"),F(Sx.$$.fragment),Akr=l(),$c=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=a("a"),ykr=o("from_pretrained()"),xkr=o(" class method or the "),IK=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),Rx=a("p"),Rkr=o("This class cannot be instantiated directly using "),u4e=a("code"),Pkr=o("__init__()"),Bkr=o(" (throws an error)."),Ikr=l(),Dt=a("div"),F(Px.$$.fragment),Nkr=l(),b4e=a("p"),qkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jkr=l(),kc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(zE.$$.fragment),Qkr=l(),Nr=a("div"),F(Bx.$$.fragment),Wkr=l(),F4e=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ukr=l(),pn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),T4e=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),Ix=a("ul"),QE=a("li"),C4e=a("strong"),aSr=o("bert"),nSr=o(" \u2014 "),qK=a("a"),sSr=o("TFBertForNextSentencePrediction"),lSr=o(" (BERT model)"),iSr=l(),WE=a("li"),w4e=a("strong"),dSr=o("mobilebert"),cSr=o(" \u2014 "),jK=a("a"),fSr=o("TFMobileBertForNextSentencePrediction"),mSr=o(" (MobileBERT model)"),gSr=l(),F(HE.$$.fragment),wze=l(),Sc=a("h2"),UE=a("a"),A4e=a("span"),F(Nx.$$.fragment),hSr=l(),L4e=a("span"),pSr=o("TFAutoModelForTableQuestionAnswering"),Aze=l(),cr=a("div"),F(qx.$$.fragment),_Sr=l(),Rc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=a("a"),bSr=o("from_pretrained()"),vSr=o(" class method or the "),GK=a("a"),FSr=o("from_config()"),TSr=o(` class
method.`),MSr=l(),jx=a("p"),ESr=o("This class cannot be instantiated directly using "),y4e=a("code"),CSr=o("__init__()"),wSr=o(" (throws an error)."),ASr=l(),Gt=a("div"),F(Dx.$$.fragment),LSr=l(),x4e=a("p"),ySr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xSr=l(),Pc=a("p"),$Sr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),kSr=o("not"),SSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),RSr=o("from_pretrained()"),PSr=o(" to load the model weights."),BSr=l(),F(JE.$$.fragment),ISr=l(),qr=a("div"),F(Gx.$$.fragment),NSr=l(),k4e=a("p"),qSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jSr=l(),_n=a("p"),DSr=o("The model class to instantiate is selected based on the "),S4e=a("code"),GSr=o("model_type"),OSr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),zSr=o("pretrained_model_name_or_path"),QSr=o(":"),WSr=l(),B4e=a("ul"),YE=a("li"),I4e=a("strong"),HSr=o("tapas"),USr=o(" \u2014 "),VK=a("a"),JSr=o("TFTapasForQuestionAnswering"),YSr=o(" (TAPAS model)"),KSr=l(),F(KE.$$.fragment),Lze=l(),Bc=a("h2"),ZE=a("a"),N4e=a("span"),F(Ox.$$.fragment),ZSr=l(),q4e=a("span"),eRr=o("TFAutoModelForTokenClassification"),yze=l(),fr=a("div"),F(Vx.$$.fragment),oRr=l(),Ic=a("p"),rRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=a("a"),tRr=o("from_pretrained()"),aRr=o(" class method or the "),zK=a("a"),nRr=o("from_config()"),sRr=o(` class
method.`),lRr=l(),Xx=a("p"),iRr=o("This class cannot be instantiated directly using "),j4e=a("code"),dRr=o("__init__()"),cRr=o(" (throws an error)."),fRr=l(),Ot=a("div"),F(zx.$$.fragment),mRr=l(),D4e=a("p"),gRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hRr=l(),Nc=a("p"),pRr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),_Rr=o("not"),uRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),bRr=o("from_pretrained()"),vRr=o(" to load the model weights."),FRr=l(),F(eC.$$.fragment),TRr=l(),jr=a("div"),F(Qx.$$.fragment),MRr=l(),O4e=a("p"),ERr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CRr=l(),un=a("p"),wRr=o("The model class to instantiate is selected based on the "),V4e=a("code"),ARr=o("model_type"),LRr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),yRr=o("pretrained_model_name_or_path"),xRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),$Rr=o("pretrained_model_name_or_path"),kRr=o(":"),SRr=l(),de=a("ul"),oC=a("li"),Q4e=a("strong"),RRr=o("albert"),PRr=o(" \u2014 "),WK=a("a"),BRr=o("TFAlbertForTokenClassification"),IRr=o(" (ALBERT model)"),NRr=l(),rC=a("li"),W4e=a("strong"),qRr=o("bert"),jRr=o(" \u2014 "),HK=a("a"),DRr=o("TFBertForTokenClassification"),GRr=o(" (BERT model)"),ORr=l(),tC=a("li"),H4e=a("strong"),VRr=o("camembert"),XRr=o(" \u2014 "),UK=a("a"),zRr=o("TFCamembertForTokenClassification"),QRr=o(" (CamemBERT model)"),WRr=l(),aC=a("li"),U4e=a("strong"),HRr=o("convbert"),URr=o(" \u2014 "),JK=a("a"),JRr=o("TFConvBertForTokenClassification"),YRr=o(" (ConvBERT model)"),KRr=l(),nC=a("li"),J4e=a("strong"),ZRr=o("deberta"),ePr=o(" \u2014 "),YK=a("a"),oPr=o("TFDebertaForTokenClassification"),rPr=o(" (DeBERTa model)"),tPr=l(),sC=a("li"),Y4e=a("strong"),aPr=o("deberta-v2"),nPr=o(" \u2014 "),KK=a("a"),sPr=o("TFDebertaV2ForTokenClassification"),lPr=o(" (DeBERTa-v2 model)"),iPr=l(),lC=a("li"),K4e=a("strong"),dPr=o("distilbert"),cPr=o(" \u2014 "),ZK=a("a"),fPr=o("TFDistilBertForTokenClassification"),mPr=o(" (DistilBERT model)"),gPr=l(),iC=a("li"),Z4e=a("strong"),hPr=o("electra"),pPr=o(" \u2014 "),eZ=a("a"),_Pr=o("TFElectraForTokenClassification"),uPr=o(" (ELECTRA model)"),bPr=l(),dC=a("li"),eEe=a("strong"),vPr=o("flaubert"),FPr=o(" \u2014 "),oZ=a("a"),TPr=o("TFFlaubertForTokenClassification"),MPr=o(" (FlauBERT model)"),EPr=l(),cC=a("li"),oEe=a("strong"),CPr=o("funnel"),wPr=o(" \u2014 "),rZ=a("a"),APr=o("TFFunnelForTokenClassification"),LPr=o(" (Funnel Transformer model)"),yPr=l(),fC=a("li"),rEe=a("strong"),xPr=o("layoutlm"),$Pr=o(" \u2014 "),tZ=a("a"),kPr=o("TFLayoutLMForTokenClassification"),SPr=o(" (LayoutLM model)"),RPr=l(),mC=a("li"),tEe=a("strong"),PPr=o("longformer"),BPr=o(" \u2014 "),aZ=a("a"),IPr=o("TFLongformerForTokenClassification"),NPr=o(" (Longformer model)"),qPr=l(),gC=a("li"),aEe=a("strong"),jPr=o("mobilebert"),DPr=o(" \u2014 "),nZ=a("a"),GPr=o("TFMobileBertForTokenClassification"),OPr=o(" (MobileBERT model)"),VPr=l(),hC=a("li"),nEe=a("strong"),XPr=o("mpnet"),zPr=o(" \u2014 "),sZ=a("a"),QPr=o("TFMPNetForTokenClassification"),WPr=o(" (MPNet model)"),HPr=l(),pC=a("li"),sEe=a("strong"),UPr=o("rembert"),JPr=o(" \u2014 "),lZ=a("a"),YPr=o("TFRemBertForTokenClassification"),KPr=o(" (RemBERT model)"),ZPr=l(),_C=a("li"),lEe=a("strong"),eBr=o("roberta"),oBr=o(" \u2014 "),iZ=a("a"),rBr=o("TFRobertaForTokenClassification"),tBr=o(" (RoBERTa model)"),aBr=l(),uC=a("li"),iEe=a("strong"),nBr=o("roformer"),sBr=o(" \u2014 "),dZ=a("a"),lBr=o("TFRoFormerForTokenClassification"),iBr=o(" (RoFormer model)"),dBr=l(),bC=a("li"),dEe=a("strong"),cBr=o("xlm"),fBr=o(" \u2014 "),cZ=a("a"),mBr=o("TFXLMForTokenClassification"),gBr=o(" (XLM model)"),hBr=l(),vC=a("li"),cEe=a("strong"),pBr=o("xlm-roberta"),_Br=o(" \u2014 "),fZ=a("a"),uBr=o("TFXLMRobertaForTokenClassification"),bBr=o(" (XLM-RoBERTa model)"),vBr=l(),FC=a("li"),fEe=a("strong"),FBr=o("xlnet"),TBr=o(" \u2014 "),mZ=a("a"),MBr=o("TFXLNetForTokenClassification"),EBr=o(" (XLNet model)"),CBr=l(),F(TC.$$.fragment),xze=l(),qc=a("h2"),MC=a("a"),mEe=a("span"),F(Wx.$$.fragment),wBr=l(),gEe=a("span"),ABr=o("TFAutoModelForQuestionAnswering"),$ze=l(),mr=a("div"),F(Hx.$$.fragment),LBr=l(),jc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=a("a"),xBr=o("from_pretrained()"),$Br=o(" class method or the "),hZ=a("a"),kBr=o("from_config()"),SBr=o(` class
method.`),RBr=l(),Ux=a("p"),PBr=o("This class cannot be instantiated directly using "),hEe=a("code"),BBr=o("__init__()"),IBr=o(" (throws an error)."),NBr=l(),Vt=a("div"),F(Jx.$$.fragment),qBr=l(),pEe=a("p"),jBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DBr=l(),Dc=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),OBr=o("not"),VBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),XBr=o("from_pretrained()"),zBr=o(" to load the model weights."),QBr=l(),F(EC.$$.fragment),WBr=l(),Dr=a("div"),F(Yx.$$.fragment),HBr=l(),uEe=a("p"),UBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JBr=l(),bn=a("p"),YBr=o("The model class to instantiate is selected based on the "),bEe=a("code"),KBr=o("model_type"),ZBr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),eIr=o("pretrained_model_name_or_path"),oIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(":"),aIr=l(),ce=a("ul"),CC=a("li"),TEe=a("strong"),nIr=o("albert"),sIr=o(" \u2014 "),_Z=a("a"),lIr=o("TFAlbertForQuestionAnswering"),iIr=o(" (ALBERT model)"),dIr=l(),wC=a("li"),MEe=a("strong"),cIr=o("bert"),fIr=o(" \u2014 "),uZ=a("a"),mIr=o("TFBertForQuestionAnswering"),gIr=o(" (BERT model)"),hIr=l(),AC=a("li"),EEe=a("strong"),pIr=o("camembert"),_Ir=o(" \u2014 "),bZ=a("a"),uIr=o("TFCamembertForQuestionAnswering"),bIr=o(" (CamemBERT model)"),vIr=l(),LC=a("li"),CEe=a("strong"),FIr=o("convbert"),TIr=o(" \u2014 "),vZ=a("a"),MIr=o("TFConvBertForQuestionAnswering"),EIr=o(" (ConvBERT model)"),CIr=l(),yC=a("li"),wEe=a("strong"),wIr=o("deberta"),AIr=o(" \u2014 "),FZ=a("a"),LIr=o("TFDebertaForQuestionAnswering"),yIr=o(" (DeBERTa model)"),xIr=l(),xC=a("li"),AEe=a("strong"),$Ir=o("deberta-v2"),kIr=o(" \u2014 "),TZ=a("a"),SIr=o("TFDebertaV2ForQuestionAnswering"),RIr=o(" (DeBERTa-v2 model)"),PIr=l(),$C=a("li"),LEe=a("strong"),BIr=o("distilbert"),IIr=o(" \u2014 "),MZ=a("a"),NIr=o("TFDistilBertForQuestionAnswering"),qIr=o(" (DistilBERT model)"),jIr=l(),kC=a("li"),yEe=a("strong"),DIr=o("electra"),GIr=o(" \u2014 "),EZ=a("a"),OIr=o("TFElectraForQuestionAnswering"),VIr=o(" (ELECTRA model)"),XIr=l(),SC=a("li"),xEe=a("strong"),zIr=o("flaubert"),QIr=o(" \u2014 "),CZ=a("a"),WIr=o("TFFlaubertForQuestionAnsweringSimple"),HIr=o(" (FlauBERT model)"),UIr=l(),RC=a("li"),$Ee=a("strong"),JIr=o("funnel"),YIr=o(" \u2014 "),wZ=a("a"),KIr=o("TFFunnelForQuestionAnswering"),ZIr=o(" (Funnel Transformer model)"),eNr=l(),PC=a("li"),kEe=a("strong"),oNr=o("gptj"),rNr=o(" \u2014 "),AZ=a("a"),tNr=o("TFGPTJForQuestionAnswering"),aNr=o(" (GPT-J model)"),nNr=l(),BC=a("li"),SEe=a("strong"),sNr=o("longformer"),lNr=o(" \u2014 "),LZ=a("a"),iNr=o("TFLongformerForQuestionAnswering"),dNr=o(" (Longformer model)"),cNr=l(),IC=a("li"),REe=a("strong"),fNr=o("mobilebert"),mNr=o(" \u2014 "),yZ=a("a"),gNr=o("TFMobileBertForQuestionAnswering"),hNr=o(" (MobileBERT model)"),pNr=l(),NC=a("li"),PEe=a("strong"),_Nr=o("mpnet"),uNr=o(" \u2014 "),xZ=a("a"),bNr=o("TFMPNetForQuestionAnswering"),vNr=o(" (MPNet model)"),FNr=l(),qC=a("li"),BEe=a("strong"),TNr=o("rembert"),MNr=o(" \u2014 "),$Z=a("a"),ENr=o("TFRemBertForQuestionAnswering"),CNr=o(" (RemBERT model)"),wNr=l(),jC=a("li"),IEe=a("strong"),ANr=o("roberta"),LNr=o(" \u2014 "),kZ=a("a"),yNr=o("TFRobertaForQuestionAnswering"),xNr=o(" (RoBERTa model)"),$Nr=l(),DC=a("li"),NEe=a("strong"),kNr=o("roformer"),SNr=o(" \u2014 "),SZ=a("a"),RNr=o("TFRoFormerForQuestionAnswering"),PNr=o(" (RoFormer model)"),BNr=l(),GC=a("li"),qEe=a("strong"),INr=o("xlm"),NNr=o(" \u2014 "),RZ=a("a"),qNr=o("TFXLMForQuestionAnsweringSimple"),jNr=o(" (XLM model)"),DNr=l(),OC=a("li"),jEe=a("strong"),GNr=o("xlm-roberta"),ONr=o(" \u2014 "),PZ=a("a"),VNr=o("TFXLMRobertaForQuestionAnswering"),XNr=o(" (XLM-RoBERTa model)"),zNr=l(),VC=a("li"),DEe=a("strong"),QNr=o("xlnet"),WNr=o(" \u2014 "),BZ=a("a"),HNr=o("TFXLNetForQuestionAnsweringSimple"),UNr=o(" (XLNet model)"),JNr=l(),F(XC.$$.fragment),kze=l(),Gc=a("h2"),zC=a("a"),GEe=a("span"),F(Kx.$$.fragment),YNr=l(),OEe=a("span"),KNr=o("TFAutoModelForVision2Seq"),Sze=l(),gr=a("div"),F(Zx.$$.fragment),ZNr=l(),Oc=a("p"),eqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IZ=a("a"),oqr=o("from_pretrained()"),rqr=o(" class method or the "),NZ=a("a"),tqr=o("from_config()"),aqr=o(` class
method.`),nqr=l(),e$=a("p"),sqr=o("This class cannot be instantiated directly using "),VEe=a("code"),lqr=o("__init__()"),iqr=o(" (throws an error)."),dqr=l(),Xt=a("div"),F(o$.$$.fragment),cqr=l(),XEe=a("p"),fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mqr=l(),Vc=a("p"),gqr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),hqr=o("not"),pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),_qr=o("from_pretrained()"),uqr=o(" to load the model weights."),bqr=l(),F(QC.$$.fragment),vqr=l(),Gr=a("div"),F(r$.$$.fragment),Fqr=l(),QEe=a("p"),Tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mqr=l(),vn=a("p"),Eqr=o("The model class to instantiate is selected based on the "),WEe=a("code"),Cqr=o("model_type"),wqr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),Aqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),yqr=o("pretrained_model_name_or_path"),xqr=o(":"),$qr=l(),JEe=a("ul"),WC=a("li"),YEe=a("strong"),kqr=o("vision-encoder-decoder"),Sqr=o(" \u2014 "),jZ=a("a"),Rqr=o("TFVisionEncoderDecoderModel"),Pqr=o(" (Vision Encoder decoder model)"),Bqr=l(),F(HC.$$.fragment),Rze=l(),Xc=a("h2"),UC=a("a"),KEe=a("span"),F(t$.$$.fragment),Iqr=l(),ZEe=a("span"),Nqr=o("TFAutoModelForSpeechSeq2Seq"),Pze=l(),hr=a("div"),F(a$.$$.fragment),qqr=l(),zc=a("p"),jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" class method or the "),GZ=a("a"),Oqr=o("from_config()"),Vqr=o(` class
method.`),Xqr=l(),n$=a("p"),zqr=o("This class cannot be instantiated directly using "),eCe=a("code"),Qqr=o("__init__()"),Wqr=o(" (throws an error)."),Hqr=l(),zt=a("div"),F(s$.$$.fragment),Uqr=l(),oCe=a("p"),Jqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yqr=l(),Qc=a("p"),Kqr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),Zqr=o("not"),ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),ojr=o("from_pretrained()"),rjr=o(" to load the model weights."),tjr=l(),F(JC.$$.fragment),ajr=l(),Or=a("div"),F(l$.$$.fragment),njr=l(),tCe=a("p"),sjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ljr=l(),Fn=a("p"),ijr=o("The model class to instantiate is selected based on the "),aCe=a("code"),djr=o("model_type"),cjr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),gjr=o("pretrained_model_name_or_path"),hjr=o(":"),pjr=l(),lCe=a("ul"),YC=a("li"),iCe=a("strong"),_jr=o("speech_to_text"),ujr=o(" \u2014 "),VZ=a("a"),bjr=o("TFSpeech2TextForConditionalGeneration"),vjr=o(" (Speech2Text model)"),Fjr=l(),F(KC.$$.fragment),Bze=l(),Wc=a("h2"),ZC=a("a"),dCe=a("span"),F(i$.$$.fragment),Tjr=l(),cCe=a("span"),Mjr=o("FlaxAutoModel"),Ize=l(),pr=a("div"),F(d$.$$.fragment),Ejr=l(),Hc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),zZ=a("a"),Ljr=o("from_config()"),yjr=o(` class
method.`),xjr=l(),c$=a("p"),$jr=o("This class cannot be instantiated directly using "),fCe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Qt=a("div"),F(f$.$$.fragment),Pjr=l(),mCe=a("p"),Bjr=o("Instantiates one of the base model classes of the library from a configuration."),Ijr=l(),Uc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(e3.$$.fragment),Vjr=l(),Vr=a("div"),F(m$.$$.fragment),Xjr=l(),hCe=a("p"),zjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qjr=l(),Tn=a("p"),Wjr=o("The model class to instantiate is selected based on the "),pCe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),oe=a("ul"),o3=a("li"),bCe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WZ=a("a"),tDr=o("FlaxAlbertModel"),aDr=o(" (ALBERT model)"),nDr=l(),r3=a("li"),vCe=a("strong"),sDr=o("bart"),lDr=o(" \u2014 "),HZ=a("a"),iDr=o("FlaxBartModel"),dDr=o(" (BART model)"),cDr=l(),t3=a("li"),FCe=a("strong"),fDr=o("beit"),mDr=o(" \u2014 "),UZ=a("a"),gDr=o("FlaxBeitModel"),hDr=o(" (BEiT model)"),pDr=l(),a3=a("li"),TCe=a("strong"),_Dr=o("bert"),uDr=o(" \u2014 "),JZ=a("a"),bDr=o("FlaxBertModel"),vDr=o(" (BERT model)"),FDr=l(),n3=a("li"),MCe=a("strong"),TDr=o("big_bird"),MDr=o(" \u2014 "),YZ=a("a"),EDr=o("FlaxBigBirdModel"),CDr=o(" (BigBird model)"),wDr=l(),s3=a("li"),ECe=a("strong"),ADr=o("blenderbot"),LDr=o(" \u2014 "),KZ=a("a"),yDr=o("FlaxBlenderbotModel"),xDr=o(" (Blenderbot model)"),$Dr=l(),l3=a("li"),CCe=a("strong"),kDr=o("blenderbot-small"),SDr=o(" \u2014 "),ZZ=a("a"),RDr=o("FlaxBlenderbotSmallModel"),PDr=o(" (BlenderbotSmall model)"),BDr=l(),i3=a("li"),wCe=a("strong"),IDr=o("clip"),NDr=o(" \u2014 "),eee=a("a"),qDr=o("FlaxCLIPModel"),jDr=o(" (CLIP model)"),DDr=l(),d3=a("li"),ACe=a("strong"),GDr=o("distilbert"),ODr=o(" \u2014 "),oee=a("a"),VDr=o("FlaxDistilBertModel"),XDr=o(" (DistilBERT model)"),zDr=l(),c3=a("li"),LCe=a("strong"),QDr=o("electra"),WDr=o(" \u2014 "),ree=a("a"),HDr=o("FlaxElectraModel"),UDr=o(" (ELECTRA model)"),JDr=l(),f3=a("li"),yCe=a("strong"),YDr=o("gpt2"),KDr=o(" \u2014 "),tee=a("a"),ZDr=o("FlaxGPT2Model"),eGr=o(" (OpenAI GPT-2 model)"),oGr=l(),m3=a("li"),xCe=a("strong"),rGr=o("gpt_neo"),tGr=o(" \u2014 "),aee=a("a"),aGr=o("FlaxGPTNeoModel"),nGr=o(" (GPT Neo model)"),sGr=l(),g3=a("li"),$Ce=a("strong"),lGr=o("gptj"),iGr=o(" \u2014 "),nee=a("a"),dGr=o("FlaxGPTJModel"),cGr=o(" (GPT-J model)"),fGr=l(),h3=a("li"),kCe=a("strong"),mGr=o("longt5"),gGr=o(" \u2014 "),see=a("a"),hGr=o("FlaxLongT5Model"),pGr=o(" (LongT5 model)"),_Gr=l(),p3=a("li"),SCe=a("strong"),uGr=o("marian"),bGr=o(" \u2014 "),lee=a("a"),vGr=o("FlaxMarianModel"),FGr=o(" (Marian model)"),TGr=l(),_3=a("li"),RCe=a("strong"),MGr=o("mbart"),EGr=o(" \u2014 "),iee=a("a"),CGr=o("FlaxMBartModel"),wGr=o(" (mBART model)"),AGr=l(),u3=a("li"),PCe=a("strong"),LGr=o("mt5"),yGr=o(" \u2014 "),dee=a("a"),xGr=o("FlaxMT5Model"),$Gr=o(" (MT5 model)"),kGr=l(),b3=a("li"),BCe=a("strong"),SGr=o("opt"),RGr=o(" \u2014 "),cee=a("a"),PGr=o("FlaxOPTModel"),BGr=o(" (OPT model)"),IGr=l(),v3=a("li"),ICe=a("strong"),NGr=o("pegasus"),qGr=o(" \u2014 "),fee=a("a"),jGr=o("FlaxPegasusModel"),DGr=o(" (Pegasus model)"),GGr=l(),F3=a("li"),NCe=a("strong"),OGr=o("roberta"),VGr=o(" \u2014 "),mee=a("a"),XGr=o("FlaxRobertaModel"),zGr=o(" (RoBERTa model)"),QGr=l(),T3=a("li"),qCe=a("strong"),WGr=o("roformer"),HGr=o(" \u2014 "),gee=a("a"),UGr=o("FlaxRoFormerModel"),JGr=o(" (RoFormer model)"),YGr=l(),M3=a("li"),jCe=a("strong"),KGr=o("t5"),ZGr=o(" \u2014 "),hee=a("a"),eOr=o("FlaxT5Model"),oOr=o(" (T5 model)"),rOr=l(),E3=a("li"),DCe=a("strong"),tOr=o("vision-text-dual-encoder"),aOr=o(" \u2014 "),pee=a("a"),nOr=o("FlaxVisionTextDualEncoderModel"),sOr=o(" (VisionTextDualEncoder model)"),lOr=l(),C3=a("li"),GCe=a("strong"),iOr=o("vit"),dOr=o(" \u2014 "),_ee=a("a"),cOr=o("FlaxViTModel"),fOr=o(" (ViT model)"),mOr=l(),w3=a("li"),OCe=a("strong"),gOr=o("wav2vec2"),hOr=o(" \u2014 "),uee=a("a"),pOr=o("FlaxWav2Vec2Model"),_Or=o(" (Wav2Vec2 model)"),uOr=l(),A3=a("li"),VCe=a("strong"),bOr=o("xglm"),vOr=o(" \u2014 "),bee=a("a"),FOr=o("FlaxXGLMModel"),TOr=o(" (XGLM model)"),MOr=l(),L3=a("li"),XCe=a("strong"),EOr=o("xlm-roberta"),COr=o(" \u2014 "),vee=a("a"),wOr=o("FlaxXLMRobertaModel"),AOr=o(" (XLM-RoBERTa model)"),LOr=l(),F(y3.$$.fragment),Nze=l(),Jc=a("h2"),x3=a("a"),zCe=a("span"),F(g$.$$.fragment),yOr=l(),QCe=a("span"),xOr=o("FlaxAutoModelForCausalLM"),qze=l(),_r=a("div"),F(h$.$$.fragment),$Or=l(),Yc=a("p"),kOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=a("a"),SOr=o("from_pretrained()"),ROr=o(" class method or the "),Tee=a("a"),POr=o("from_config()"),BOr=o(` class
method.`),IOr=l(),p$=a("p"),NOr=o("This class cannot be instantiated directly using "),WCe=a("code"),qOr=o("__init__()"),jOr=o(" (throws an error)."),DOr=l(),Wt=a("div"),F(_$.$$.fragment),GOr=l(),HCe=a("p"),OOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VOr=l(),Kc=a("p"),XOr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),zOr=o("not"),QOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),WOr=o("from_pretrained()"),HOr=o(" to load the model weights."),UOr=l(),F($3.$$.fragment),JOr=l(),Xr=a("div"),F(u$.$$.fragment),YOr=l(),JCe=a("p"),KOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZOr=l(),Mn=a("p"),eVr=o("The model class to instantiate is selected based on the "),YCe=a("code"),oVr=o("model_type"),rVr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),tVr=o("pretrained_model_name_or_path"),aVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),nVr=o("pretrained_model_name_or_path"),sVr=o(":"),lVr=l(),xe=a("ul"),k3=a("li"),e3e=a("strong"),iVr=o("bart"),dVr=o(" \u2014 "),Eee=a("a"),cVr=o("FlaxBartForCausalLM"),fVr=o(" (BART model)"),mVr=l(),S3=a("li"),o3e=a("strong"),gVr=o("bert"),hVr=o(" \u2014 "),Cee=a("a"),pVr=o("FlaxBertForCausalLM"),_Vr=o(" (BERT model)"),uVr=l(),R3=a("li"),r3e=a("strong"),bVr=o("big_bird"),vVr=o(" \u2014 "),wee=a("a"),FVr=o("FlaxBigBirdForCausalLM"),TVr=o(" (BigBird model)"),MVr=l(),P3=a("li"),t3e=a("strong"),EVr=o("electra"),CVr=o(" \u2014 "),Aee=a("a"),wVr=o("FlaxElectraForCausalLM"),AVr=o(" (ELECTRA model)"),LVr=l(),B3=a("li"),a3e=a("strong"),yVr=o("gpt2"),xVr=o(" \u2014 "),Lee=a("a"),$Vr=o("FlaxGPT2LMHeadModel"),kVr=o(" (OpenAI GPT-2 model)"),SVr=l(),I3=a("li"),n3e=a("strong"),RVr=o("gpt_neo"),PVr=o(" \u2014 "),yee=a("a"),BVr=o("FlaxGPTNeoForCausalLM"),IVr=o(" (GPT Neo model)"),NVr=l(),N3=a("li"),s3e=a("strong"),qVr=o("gptj"),jVr=o(" \u2014 "),xee=a("a"),DVr=o("FlaxGPTJForCausalLM"),GVr=o(" (GPT-J model)"),OVr=l(),q3=a("li"),l3e=a("strong"),VVr=o("opt"),XVr=o(" \u2014 "),$ee=a("a"),zVr=o("FlaxOPTForCausalLM"),QVr=o(" (OPT model)"),WVr=l(),j3=a("li"),i3e=a("strong"),HVr=o("roberta"),UVr=o(" \u2014 "),kee=a("a"),JVr=o("FlaxRobertaForCausalLM"),YVr=o(" (RoBERTa model)"),KVr=l(),D3=a("li"),d3e=a("strong"),ZVr=o("xglm"),eXr=o(" \u2014 "),See=a("a"),oXr=o("FlaxXGLMForCausalLM"),rXr=o(" (XGLM model)"),tXr=l(),F(G3.$$.fragment),jze=l(),Zc=a("h2"),O3=a("a"),c3e=a("span"),F(b$.$$.fragment),aXr=l(),f3e=a("span"),nXr=o("FlaxAutoModelForPreTraining"),Dze=l(),ur=a("div"),F(v$.$$.fragment),sXr=l(),ef=a("p"),lXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=a("a"),iXr=o("from_pretrained()"),dXr=o(" class method or the "),Pee=a("a"),cXr=o("from_config()"),fXr=o(` class
method.`),mXr=l(),F$=a("p"),gXr=o("This class cannot be instantiated directly using "),m3e=a("code"),hXr=o("__init__()"),pXr=o(" (throws an error)."),_Xr=l(),Ht=a("div"),F(T$.$$.fragment),uXr=l(),g3e=a("p"),bXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vXr=l(),of=a("p"),FXr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),TXr=o("not"),MXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),EXr=o("from_pretrained()"),CXr=o(" to load the model weights."),wXr=l(),F(V3.$$.fragment),AXr=l(),zr=a("div"),F(M$.$$.fragment),LXr=l(),p3e=a("p"),yXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xXr=l(),En=a("p"),$Xr=o("The model class to instantiate is selected based on the "),_3e=a("code"),kXr=o("model_type"),SXr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),BXr=o("pretrained_model_name_or_path"),IXr=o(":"),NXr=l(),Ee=a("ul"),X3=a("li"),v3e=a("strong"),qXr=o("albert"),jXr=o(" \u2014 "),Iee=a("a"),DXr=o("FlaxAlbertForPreTraining"),GXr=o(" (ALBERT model)"),OXr=l(),z3=a("li"),F3e=a("strong"),VXr=o("bart"),XXr=o(" \u2014 "),Nee=a("a"),zXr=o("FlaxBartForConditionalGeneration"),QXr=o(" (BART model)"),WXr=l(),Q3=a("li"),T3e=a("strong"),HXr=o("bert"),UXr=o(" \u2014 "),qee=a("a"),JXr=o("FlaxBertForPreTraining"),YXr=o(" (BERT model)"),KXr=l(),W3=a("li"),M3e=a("strong"),ZXr=o("big_bird"),ezr=o(" \u2014 "),jee=a("a"),ozr=o("FlaxBigBirdForPreTraining"),rzr=o(" (BigBird model)"),tzr=l(),H3=a("li"),E3e=a("strong"),azr=o("electra"),nzr=o(" \u2014 "),Dee=a("a"),szr=o("FlaxElectraForPreTraining"),lzr=o(" (ELECTRA model)"),izr=l(),U3=a("li"),C3e=a("strong"),dzr=o("longt5"),czr=o(" \u2014 "),Gee=a("a"),fzr=o("FlaxLongT5ForConditionalGeneration"),mzr=o(" (LongT5 model)"),gzr=l(),J3=a("li"),w3e=a("strong"),hzr=o("mbart"),pzr=o(" \u2014 "),Oee=a("a"),_zr=o("FlaxMBartForConditionalGeneration"),uzr=o(" (mBART model)"),bzr=l(),Y3=a("li"),A3e=a("strong"),vzr=o("mt5"),Fzr=o(" \u2014 "),Vee=a("a"),Tzr=o("FlaxMT5ForConditionalGeneration"),Mzr=o(" (MT5 model)"),Ezr=l(),K3=a("li"),L3e=a("strong"),Czr=o("roberta"),wzr=o(" \u2014 "),Xee=a("a"),Azr=o("FlaxRobertaForMaskedLM"),Lzr=o(" (RoBERTa model)"),yzr=l(),Z3=a("li"),y3e=a("strong"),xzr=o("roformer"),$zr=o(" \u2014 "),zee=a("a"),kzr=o("FlaxRoFormerForMaskedLM"),Szr=o(" (RoFormer model)"),Rzr=l(),e5=a("li"),x3e=a("strong"),Pzr=o("t5"),Bzr=o(" \u2014 "),Qee=a("a"),Izr=o("FlaxT5ForConditionalGeneration"),Nzr=o(" (T5 model)"),qzr=l(),o5=a("li"),$3e=a("strong"),jzr=o("wav2vec2"),Dzr=o(" \u2014 "),Wee=a("a"),Gzr=o("FlaxWav2Vec2ForPreTraining"),Ozr=o(" (Wav2Vec2 model)"),Vzr=l(),r5=a("li"),k3e=a("strong"),Xzr=o("xlm-roberta"),zzr=o(" \u2014 "),Hee=a("a"),Qzr=o("FlaxXLMRobertaForMaskedLM"),Wzr=o(" (XLM-RoBERTa model)"),Hzr=l(),F(t5.$$.fragment),Gze=l(),rf=a("h2"),a5=a("a"),S3e=a("span"),F(E$.$$.fragment),Uzr=l(),R3e=a("span"),Jzr=o("FlaxAutoModelForMaskedLM"),Oze=l(),br=a("div"),F(C$.$$.fragment),Yzr=l(),tf=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=a("a"),Zzr=o("from_pretrained()"),eQr=o(" class method or the "),Jee=a("a"),oQr=o("from_config()"),rQr=o(` class
method.`),tQr=l(),w$=a("p"),aQr=o("This class cannot be instantiated directly using "),P3e=a("code"),nQr=o("__init__()"),sQr=o(" (throws an error)."),lQr=l(),Ut=a("div"),F(A$.$$.fragment),iQr=l(),B3e=a("p"),dQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cQr=l(),af=a("p"),fQr=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),mQr=o("not"),gQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),hQr=o("from_pretrained()"),pQr=o(" to load the model weights."),_Qr=l(),F(n5.$$.fragment),uQr=l(),Qr=a("div"),F(L$.$$.fragment),bQr=l(),N3e=a("p"),vQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FQr=l(),Cn=a("p"),TQr=o("The model class to instantiate is selected based on the "),q3e=a("code"),MQr=o("model_type"),EQr=o(` property of the config object (either
passed as an argument or loaded from `),j3e=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(":"),yQr=l(),$e=a("ul"),s5=a("li"),G3e=a("strong"),xQr=o("albert"),$Qr=o(" \u2014 "),Kee=a("a"),kQr=o("FlaxAlbertForMaskedLM"),SQr=o(" (ALBERT model)"),RQr=l(),l5=a("li"),O3e=a("strong"),PQr=o("bart"),BQr=o(" \u2014 "),Zee=a("a"),IQr=o("FlaxBartForConditionalGeneration"),NQr=o(" (BART model)"),qQr=l(),i5=a("li"),V3e=a("strong"),jQr=o("bert"),DQr=o(" \u2014 "),eoe=a("a"),GQr=o("FlaxBertForMaskedLM"),OQr=o(" (BERT model)"),VQr=l(),d5=a("li"),X3e=a("strong"),XQr=o("big_bird"),zQr=o(" \u2014 "),ooe=a("a"),QQr=o("FlaxBigBirdForMaskedLM"),WQr=o(" (BigBird model)"),HQr=l(),c5=a("li"),z3e=a("strong"),UQr=o("distilbert"),JQr=o(" \u2014 "),roe=a("a"),YQr=o("FlaxDistilBertForMaskedLM"),KQr=o(" (DistilBERT model)"),ZQr=l(),f5=a("li"),Q3e=a("strong"),eWr=o("electra"),oWr=o(" \u2014 "),toe=a("a"),rWr=o("FlaxElectraForMaskedLM"),tWr=o(" (ELECTRA model)"),aWr=l(),m5=a("li"),W3e=a("strong"),nWr=o("mbart"),sWr=o(" \u2014 "),aoe=a("a"),lWr=o("FlaxMBartForConditionalGeneration"),iWr=o(" (mBART model)"),dWr=l(),g5=a("li"),H3e=a("strong"),cWr=o("roberta"),fWr=o(" \u2014 "),noe=a("a"),mWr=o("FlaxRobertaForMaskedLM"),gWr=o(" (RoBERTa model)"),hWr=l(),h5=a("li"),U3e=a("strong"),pWr=o("roformer"),_Wr=o(" \u2014 "),soe=a("a"),uWr=o("FlaxRoFormerForMaskedLM"),bWr=o(" (RoFormer model)"),vWr=l(),p5=a("li"),J3e=a("strong"),FWr=o("xlm-roberta"),TWr=o(" \u2014 "),loe=a("a"),MWr=o("FlaxXLMRobertaForMaskedLM"),EWr=o(" (XLM-RoBERTa model)"),CWr=l(),F(_5.$$.fragment),Vze=l(),nf=a("h2"),u5=a("a"),Y3e=a("span"),F(y$.$$.fragment),wWr=l(),K3e=a("span"),AWr=o("FlaxAutoModelForSeq2SeqLM"),Xze=l(),vr=a("div"),F(x$.$$.fragment),LWr=l(),sf=a("p"),yWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=a("a"),xWr=o("from_pretrained()"),$Wr=o(" class method or the "),doe=a("a"),kWr=o("from_config()"),SWr=o(` class
method.`),RWr=l(),$$=a("p"),PWr=o("This class cannot be instantiated directly using "),Z3e=a("code"),BWr=o("__init__()"),IWr=o(" (throws an error)."),NWr=l(),Jt=a("div"),F(k$.$$.fragment),qWr=l(),e5e=a("p"),jWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DWr=l(),lf=a("p"),GWr=o(`Note:
Loading a model from its configuration file does `),o5e=a("strong"),OWr=o("not"),VWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),XWr=o("from_pretrained()"),zWr=o(" to load the model weights."),QWr=l(),F(b5.$$.fragment),WWr=l(),Wr=a("div"),F(S$.$$.fragment),HWr=l(),r5e=a("p"),UWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JWr=l(),wn=a("p"),YWr=o("The model class to instantiate is selected based on the "),t5e=a("code"),KWr=o("model_type"),ZWr=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),eHr=o("pretrained_model_name_or_path"),oHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),rHr=o("pretrained_model_name_or_path"),tHr=o(":"),aHr=l(),ke=a("ul"),v5=a("li"),s5e=a("strong"),nHr=o("bart"),sHr=o(" \u2014 "),foe=a("a"),lHr=o("FlaxBartForConditionalGeneration"),iHr=o(" (BART model)"),dHr=l(),F5=a("li"),l5e=a("strong"),cHr=o("blenderbot"),fHr=o(" \u2014 "),moe=a("a"),mHr=o("FlaxBlenderbotForConditionalGeneration"),gHr=o(" (Blenderbot model)"),hHr=l(),T5=a("li"),i5e=a("strong"),pHr=o("blenderbot-small"),_Hr=o(" \u2014 "),goe=a("a"),uHr=o("FlaxBlenderbotSmallForConditionalGeneration"),bHr=o(" (BlenderbotSmall model)"),vHr=l(),M5=a("li"),d5e=a("strong"),FHr=o("encoder-decoder"),THr=o(" \u2014 "),hoe=a("a"),MHr=o("FlaxEncoderDecoderModel"),EHr=o(" (Encoder decoder model)"),CHr=l(),E5=a("li"),c5e=a("strong"),wHr=o("longt5"),AHr=o(" \u2014 "),poe=a("a"),LHr=o("FlaxLongT5ForConditionalGeneration"),yHr=o(" (LongT5 model)"),xHr=l(),C5=a("li"),f5e=a("strong"),$Hr=o("marian"),kHr=o(" \u2014 "),_oe=a("a"),SHr=o("FlaxMarianMTModel"),RHr=o(" (Marian model)"),PHr=l(),w5=a("li"),m5e=a("strong"),BHr=o("mbart"),IHr=o(" \u2014 "),uoe=a("a"),NHr=o("FlaxMBartForConditionalGeneration"),qHr=o(" (mBART model)"),jHr=l(),A5=a("li"),g5e=a("strong"),DHr=o("mt5"),GHr=o(" \u2014 "),boe=a("a"),OHr=o("FlaxMT5ForConditionalGeneration"),VHr=o(" (MT5 model)"),XHr=l(),L5=a("li"),h5e=a("strong"),zHr=o("pegasus"),QHr=o(" \u2014 "),voe=a("a"),WHr=o("FlaxPegasusForConditionalGeneration"),HHr=o(" (Pegasus model)"),UHr=l(),y5=a("li"),p5e=a("strong"),JHr=o("t5"),YHr=o(" \u2014 "),Foe=a("a"),KHr=o("FlaxT5ForConditionalGeneration"),ZHr=o(" (T5 model)"),eUr=l(),F(x5.$$.fragment),zze=l(),df=a("h2"),$5=a("a"),_5e=a("span"),F(R$.$$.fragment),oUr=l(),u5e=a("span"),rUr=o("FlaxAutoModelForSequenceClassification"),Qze=l(),Fr=a("div"),F(P$.$$.fragment),tUr=l(),cf=a("p"),aUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=a("a"),nUr=o("from_pretrained()"),sUr=o(" class method or the "),Moe=a("a"),lUr=o("from_config()"),iUr=o(` class
method.`),dUr=l(),B$=a("p"),cUr=o("This class cannot be instantiated directly using "),b5e=a("code"),fUr=o("__init__()"),mUr=o(" (throws an error)."),gUr=l(),Yt=a("div"),F(I$.$$.fragment),hUr=l(),v5e=a("p"),pUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Ur=l(),ff=a("p"),uUr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),bUr=o("not"),vUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),FUr=o("from_pretrained()"),TUr=o(" to load the model weights."),MUr=l(),F(k5.$$.fragment),EUr=l(),Hr=a("div"),F(N$.$$.fragment),CUr=l(),T5e=a("p"),wUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AUr=l(),An=a("p"),LUr=o("The model class to instantiate is selected based on the "),M5e=a("code"),yUr=o("model_type"),xUr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),$Ur=o("pretrained_model_name_or_path"),kUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(":"),PUr=l(),Se=a("ul"),S5=a("li"),w5e=a("strong"),BUr=o("albert"),IUr=o(" \u2014 "),Coe=a("a"),NUr=o("FlaxAlbertForSequenceClassification"),qUr=o(" (ALBERT model)"),jUr=l(),R5=a("li"),A5e=a("strong"),DUr=o("bart"),GUr=o(" \u2014 "),woe=a("a"),OUr=o("FlaxBartForSequenceClassification"),VUr=o(" (BART model)"),XUr=l(),P5=a("li"),L5e=a("strong"),zUr=o("bert"),QUr=o(" \u2014 "),Aoe=a("a"),WUr=o("FlaxBertForSequenceClassification"),HUr=o(" (BERT model)"),UUr=l(),B5=a("li"),y5e=a("strong"),JUr=o("big_bird"),YUr=o(" \u2014 "),Loe=a("a"),KUr=o("FlaxBigBirdForSequenceClassification"),ZUr=o(" (BigBird model)"),eJr=l(),I5=a("li"),x5e=a("strong"),oJr=o("distilbert"),rJr=o(" \u2014 "),yoe=a("a"),tJr=o("FlaxDistilBertForSequenceClassification"),aJr=o(" (DistilBERT model)"),nJr=l(),N5=a("li"),$5e=a("strong"),sJr=o("electra"),lJr=o(" \u2014 "),xoe=a("a"),iJr=o("FlaxElectraForSequenceClassification"),dJr=o(" (ELECTRA model)"),cJr=l(),q5=a("li"),k5e=a("strong"),fJr=o("mbart"),mJr=o(" \u2014 "),$oe=a("a"),gJr=o("FlaxMBartForSequenceClassification"),hJr=o(" (mBART model)"),pJr=l(),j5=a("li"),S5e=a("strong"),_Jr=o("roberta"),uJr=o(" \u2014 "),koe=a("a"),bJr=o("FlaxRobertaForSequenceClassification"),vJr=o(" (RoBERTa model)"),FJr=l(),D5=a("li"),R5e=a("strong"),TJr=o("roformer"),MJr=o(" \u2014 "),Soe=a("a"),EJr=o("FlaxRoFormerForSequenceClassification"),CJr=o(" (RoFormer model)"),wJr=l(),G5=a("li"),P5e=a("strong"),AJr=o("xlm-roberta"),LJr=o(" \u2014 "),Roe=a("a"),yJr=o("FlaxXLMRobertaForSequenceClassification"),xJr=o(" (XLM-RoBERTa model)"),$Jr=l(),F(O5.$$.fragment),Wze=l(),mf=a("h2"),V5=a("a"),B5e=a("span"),F(q$.$$.fragment),kJr=l(),I5e=a("span"),SJr=o("FlaxAutoModelForQuestionAnswering"),Hze=l(),Tr=a("div"),F(j$.$$.fragment),RJr=l(),gf=a("p"),PJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=a("a"),BJr=o("from_pretrained()"),IJr=o(" class method or the "),Boe=a("a"),NJr=o("from_config()"),qJr=o(` class
method.`),jJr=l(),D$=a("p"),DJr=o("This class cannot be instantiated directly using "),N5e=a("code"),GJr=o("__init__()"),OJr=o(" (throws an error)."),VJr=l(),Kt=a("div"),F(G$.$$.fragment),XJr=l(),q5e=a("p"),zJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QJr=l(),hf=a("p"),WJr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),HJr=o("not"),UJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),JJr=o("from_pretrained()"),YJr=o(" to load the model weights."),KJr=l(),F(X5.$$.fragment),ZJr=l(),Ur=a("div"),F(O$.$$.fragment),eYr=l(),D5e=a("p"),oYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rYr=l(),Ln=a("p"),tYr=o("The model class to instantiate is selected based on the "),G5e=a("code"),aYr=o("model_type"),nYr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),sYr=o("pretrained_model_name_or_path"),lYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),iYr=o("pretrained_model_name_or_path"),dYr=o(":"),cYr=l(),Re=a("ul"),z5=a("li"),X5e=a("strong"),fYr=o("albert"),mYr=o(" \u2014 "),Noe=a("a"),gYr=o("FlaxAlbertForQuestionAnswering"),hYr=o(" (ALBERT model)"),pYr=l(),Q5=a("li"),z5e=a("strong"),_Yr=o("bart"),uYr=o(" \u2014 "),qoe=a("a"),bYr=o("FlaxBartForQuestionAnswering"),vYr=o(" (BART model)"),FYr=l(),W5=a("li"),Q5e=a("strong"),TYr=o("bert"),MYr=o(" \u2014 "),joe=a("a"),EYr=o("FlaxBertForQuestionAnswering"),CYr=o(" (BERT model)"),wYr=l(),H5=a("li"),W5e=a("strong"),AYr=o("big_bird"),LYr=o(" \u2014 "),Doe=a("a"),yYr=o("FlaxBigBirdForQuestionAnswering"),xYr=o(" (BigBird model)"),$Yr=l(),U5=a("li"),H5e=a("strong"),kYr=o("distilbert"),SYr=o(" \u2014 "),Goe=a("a"),RYr=o("FlaxDistilBertForQuestionAnswering"),PYr=o(" (DistilBERT model)"),BYr=l(),J5=a("li"),U5e=a("strong"),IYr=o("electra"),NYr=o(" \u2014 "),Ooe=a("a"),qYr=o("FlaxElectraForQuestionAnswering"),jYr=o(" (ELECTRA model)"),DYr=l(),Y5=a("li"),J5e=a("strong"),GYr=o("mbart"),OYr=o(" \u2014 "),Voe=a("a"),VYr=o("FlaxMBartForQuestionAnswering"),XYr=o(" (mBART model)"),zYr=l(),K5=a("li"),Y5e=a("strong"),QYr=o("roberta"),WYr=o(" \u2014 "),Xoe=a("a"),HYr=o("FlaxRobertaForQuestionAnswering"),UYr=o(" (RoBERTa model)"),JYr=l(),Z5=a("li"),K5e=a("strong"),YYr=o("roformer"),KYr=o(" \u2014 "),zoe=a("a"),ZYr=o("FlaxRoFormerForQuestionAnswering"),eKr=o(" (RoFormer model)"),oKr=l(),e0=a("li"),Z5e=a("strong"),rKr=o("xlm-roberta"),tKr=o(" \u2014 "),Qoe=a("a"),aKr=o("FlaxXLMRobertaForQuestionAnswering"),nKr=o(" (XLM-RoBERTa model)"),sKr=l(),F(o0.$$.fragment),Uze=l(),pf=a("h2"),r0=a("a"),e0e=a("span"),F(V$.$$.fragment),lKr=l(),o0e=a("span"),iKr=o("FlaxAutoModelForTokenClassification"),Jze=l(),Mr=a("div"),F(X$.$$.fragment),dKr=l(),_f=a("p"),cKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=a("a"),fKr=o("from_pretrained()"),mKr=o(" class method or the "),Hoe=a("a"),gKr=o("from_config()"),hKr=o(` class
method.`),pKr=l(),z$=a("p"),_Kr=o("This class cannot be instantiated directly using "),r0e=a("code"),uKr=o("__init__()"),bKr=o(" (throws an error)."),vKr=l(),Zt=a("div"),F(Q$.$$.fragment),FKr=l(),t0e=a("p"),TKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MKr=l(),uf=a("p"),EKr=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),CKr=o("not"),wKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=a("a"),AKr=o("from_pretrained()"),LKr=o(" to load the model weights."),yKr=l(),F(t0.$$.fragment),xKr=l(),Jr=a("div"),F(W$.$$.fragment),$Kr=l(),n0e=a("p"),kKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SKr=l(),yn=a("p"),RKr=o("The model class to instantiate is selected based on the "),s0e=a("code"),PKr=o("model_type"),BKr=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),IKr=o("pretrained_model_name_or_path"),NKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),qKr=o("pretrained_model_name_or_path"),jKr=o(":"),DKr=l(),Ve=a("ul"),a0=a("li"),d0e=a("strong"),GKr=o("albert"),OKr=o(" \u2014 "),Joe=a("a"),VKr=o("FlaxAlbertForTokenClassification"),XKr=o(" (ALBERT model)"),zKr=l(),n0=a("li"),c0e=a("strong"),QKr=o("bert"),WKr=o(" \u2014 "),Yoe=a("a"),HKr=o("FlaxBertForTokenClassification"),UKr=o(" (BERT model)"),JKr=l(),s0=a("li"),f0e=a("strong"),YKr=o("big_bird"),KKr=o(" \u2014 "),Koe=a("a"),ZKr=o("FlaxBigBirdForTokenClassification"),eZr=o(" (BigBird model)"),oZr=l(),l0=a("li"),m0e=a("strong"),rZr=o("distilbert"),tZr=o(" \u2014 "),Zoe=a("a"),aZr=o("FlaxDistilBertForTokenClassification"),nZr=o(" (DistilBERT model)"),sZr=l(),i0=a("li"),g0e=a("strong"),lZr=o("electra"),iZr=o(" \u2014 "),ere=a("a"),dZr=o("FlaxElectraForTokenClassification"),cZr=o(" (ELECTRA model)"),fZr=l(),d0=a("li"),h0e=a("strong"),mZr=o("roberta"),gZr=o(" \u2014 "),ore=a("a"),hZr=o("FlaxRobertaForTokenClassification"),pZr=o(" (RoBERTa model)"),_Zr=l(),c0=a("li"),p0e=a("strong"),uZr=o("roformer"),bZr=o(" \u2014 "),rre=a("a"),vZr=o("FlaxRoFormerForTokenClassification"),FZr=o(" (RoFormer model)"),TZr=l(),f0=a("li"),_0e=a("strong"),MZr=o("xlm-roberta"),EZr=o(" \u2014 "),tre=a("a"),CZr=o("FlaxXLMRobertaForTokenClassification"),wZr=o(" (XLM-RoBERTa model)"),AZr=l(),F(m0.$$.fragment),Yze=l(),bf=a("h2"),g0=a("a"),u0e=a("span"),F(H$.$$.fragment),LZr=l(),b0e=a("span"),yZr=o("FlaxAutoModelForMultipleChoice"),Kze=l(),Er=a("div"),F(U$.$$.fragment),xZr=l(),vf=a("p"),$Zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=a("a"),kZr=o("from_pretrained()"),SZr=o(" class method or the "),nre=a("a"),RZr=o("from_config()"),PZr=o(` class
method.`),BZr=l(),J$=a("p"),IZr=o("This class cannot be instantiated directly using "),v0e=a("code"),NZr=o("__init__()"),qZr=o(" (throws an error)."),jZr=l(),ea=a("div"),F(Y$.$$.fragment),DZr=l(),F0e=a("p"),GZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OZr=l(),Ff=a("p"),VZr=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),XZr=o("not"),zZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),QZr=o("from_pretrained()"),WZr=o(" to load the model weights."),HZr=l(),F(h0.$$.fragment),UZr=l(),Yr=a("div"),F(K$.$$.fragment),JZr=l(),M0e=a("p"),YZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KZr=l(),xn=a("p"),ZZr=o("The model class to instantiate is selected based on the "),E0e=a("code"),eet=o("model_type"),oet=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),ret=o("pretrained_model_name_or_path"),tet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),aet=o("pretrained_model_name_or_path"),net=o(":"),set=l(),Xe=a("ul"),p0=a("li"),A0e=a("strong"),iet=o("albert"),det=o(" \u2014 "),lre=a("a"),cet=o("FlaxAlbertForMultipleChoice"),fet=o(" (ALBERT model)"),met=l(),_0=a("li"),L0e=a("strong"),get=o("bert"),het=o(" \u2014 "),ire=a("a"),pet=o("FlaxBertForMultipleChoice"),_et=o(" (BERT model)"),uet=l(),u0=a("li"),y0e=a("strong"),bet=o("big_bird"),vet=o(" \u2014 "),dre=a("a"),Fet=o("FlaxBigBirdForMultipleChoice"),Tet=o(" (BigBird model)"),Met=l(),b0=a("li"),x0e=a("strong"),Eet=o("distilbert"),Cet=o(" \u2014 "),cre=a("a"),wet=o("FlaxDistilBertForMultipleChoice"),Aet=o(" (DistilBERT model)"),Let=l(),v0=a("li"),$0e=a("strong"),yet=o("electra"),xet=o(" \u2014 "),fre=a("a"),$et=o("FlaxElectraForMultipleChoice"),ket=o(" (ELECTRA model)"),Set=l(),F0=a("li"),k0e=a("strong"),Ret=o("roberta"),Pet=o(" \u2014 "),mre=a("a"),Bet=o("FlaxRobertaForMultipleChoice"),Iet=o(" (RoBERTa model)"),Net=l(),T0=a("li"),S0e=a("strong"),qet=o("roformer"),jet=o(" \u2014 "),gre=a("a"),Det=o("FlaxRoFormerForMultipleChoice"),Get=o(" (RoFormer model)"),Oet=l(),M0=a("li"),R0e=a("strong"),Vet=o("xlm-roberta"),Xet=o(" \u2014 "),hre=a("a"),zet=o("FlaxXLMRobertaForMultipleChoice"),Qet=o(" (XLM-RoBERTa model)"),Wet=l(),F(E0.$$.fragment),Zze=l(),Tf=a("h2"),C0=a("a"),P0e=a("span"),F(Z$.$$.fragment),Het=l(),B0e=a("span"),Uet=o("FlaxAutoModelForNextSentencePrediction"),eQe=l(),Cr=a("div"),F(ek.$$.fragment),Jet=l(),Mf=a("p"),Yet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=a("a"),Ket=o("from_pretrained()"),Zet=o(" class method or the "),_re=a("a"),eot=o("from_config()"),oot=o(` class
method.`),rot=l(),ok=a("p"),tot=o("This class cannot be instantiated directly using "),I0e=a("code"),aot=o("__init__()"),not=o(" (throws an error)."),sot=l(),oa=a("div"),F(rk.$$.fragment),lot=l(),N0e=a("p"),iot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dot=l(),Ef=a("p"),cot=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),fot=o("not"),mot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),got=o("from_pretrained()"),hot=o(" to load the model weights."),pot=l(),F(w0.$$.fragment),_ot=l(),Kr=a("div"),F(tk.$$.fragment),uot=l(),j0e=a("p"),bot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vot=l(),$n=a("p"),Fot=o("The model class to instantiate is selected based on the "),D0e=a("code"),Tot=o("model_type"),Mot=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),Eot=o("pretrained_model_name_or_path"),Cot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),wot=o("pretrained_model_name_or_path"),Aot=o(":"),Lot=l(),V0e=a("ul"),A0=a("li"),X0e=a("strong"),yot=o("bert"),xot=o(" \u2014 "),bre=a("a"),$ot=o("FlaxBertForNextSentencePrediction"),kot=o(" (BERT model)"),Sot=l(),F(L0.$$.fragment),oQe=l(),Cf=a("h2"),y0=a("a"),z0e=a("span"),F(ak.$$.fragment),Rot=l(),Q0e=a("span"),Pot=o("FlaxAutoModelForImageClassification"),rQe=l(),wr=a("div"),F(nk.$$.fragment),Bot=l(),wf=a("p"),Iot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=a("a"),Not=o("from_pretrained()"),qot=o(" class method or the "),Fre=a("a"),jot=o("from_config()"),Dot=o(` class
method.`),Got=l(),sk=a("p"),Oot=o("This class cannot be instantiated directly using "),W0e=a("code"),Vot=o("__init__()"),Xot=o(" (throws an error)."),zot=l(),ra=a("div"),F(lk.$$.fragment),Qot=l(),H0e=a("p"),Wot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hot=l(),Af=a("p"),Uot=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),Jot=o("not"),Yot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=a("a"),Kot=o("from_pretrained()"),Zot=o(" to load the model weights."),ert=l(),F(x0.$$.fragment),ort=l(),Zr=a("div"),F(ik.$$.fragment),rrt=l(),J0e=a("p"),trt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),art=l(),kn=a("p"),nrt=o("The model class to instantiate is selected based on the "),Y0e=a("code"),srt=o("model_type"),lrt=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),irt=o("pretrained_model_name_or_path"),drt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),crt=o("pretrained_model_name_or_path"),frt=o(":"),mrt=l(),dk=a("ul"),$0=a("li"),ewe=a("strong"),grt=o("beit"),hrt=o(" \u2014 "),Mre=a("a"),prt=o("FlaxBeitForImageClassification"),_rt=o(" (BEiT model)"),urt=l(),k0=a("li"),owe=a("strong"),brt=o("vit"),vrt=o(" \u2014 "),Ere=a("a"),Frt=o("FlaxViTForImageClassification"),Trt=o(" (ViT model)"),Mrt=l(),F(S0.$$.fragment),tQe=l(),Lf=a("h2"),R0=a("a"),rwe=a("span"),F(ck.$$.fragment),Ert=l(),twe=a("span"),Crt=o("FlaxAutoModelForVision2Seq"),aQe=l(),Ar=a("div"),F(fk.$$.fragment),wrt=l(),yf=a("p"),Art=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=a("a"),Lrt=o("from_pretrained()"),yrt=o(" class method or the "),wre=a("a"),xrt=o("from_config()"),$rt=o(` class
method.`),krt=l(),mk=a("p"),Srt=o("This class cannot be instantiated directly using "),awe=a("code"),Rrt=o("__init__()"),Prt=o(" (throws an error)."),Brt=l(),ta=a("div"),F(gk.$$.fragment),Irt=l(),nwe=a("p"),Nrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qrt=l(),xf=a("p"),jrt=o(`Note:
Loading a model from its configuration file does `),swe=a("strong"),Drt=o("not"),Grt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),Ort=o("from_pretrained()"),Vrt=o(" to load the model weights."),Xrt=l(),F(P0.$$.fragment),zrt=l(),et=a("div"),F(hk.$$.fragment),Qrt=l(),lwe=a("p"),Wrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hrt=l(),Sn=a("p"),Urt=o("The model class to instantiate is selected based on the "),iwe=a("code"),Jrt=o("model_type"),Yrt=o(` property of the config object (either
passed as an argument or loaded from `),dwe=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=a("code"),ett=o("pretrained_model_name_or_path"),ott=o(":"),rtt=l(),fwe=a("ul"),B0=a("li"),mwe=a("strong"),ttt=o("vision-encoder-decoder"),att=o(" \u2014 "),Lre=a("a"),ntt=o("FlaxVisionEncoderDecoderModel"),stt=o(" (Vision Encoder decoder model)"),ltt=l(),F(I0.$$.fragment),this.h()},l(f){const u=DQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var pk=s(p);m=n(pk,"A",{id:!0,class:!0,href:!0});var gwe=s(m);_=n(gwe,"SPAN",{});var hwe=s(_);T(d.$$.fragment,hwe),hwe.forEach(t),gwe.forEach(t),h=i(pk),Eo=n(pk,"SPAN",{});var pwe=s(Eo);Ai=r(pwe,"Auto Classes"),pwe.forEach(t),pk.forEach(t),Rf=i(f),st=n(f,"P",{});var _k=s(st);Li=r(_k,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(_k,"CODE",{});var _we=s(yi);oL=r(_we,"from_pretrained()"),_we.forEach(t),Pf=r(_k,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_k.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var uwe=s(Pn);rL=r(uwe,"AutoConfig"),uwe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var bwe=s(In);tL=r(bwe,"AutoModel"),bwe.forEach(t),$i=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var vwe=s(Nn);aL=r(vwe,"AutoTokenizer"),vwe.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var uk=s(Ae);BS=r(uk,"will create a model that is an instance of "),Si=n(uk,"A",{href:!0});var Fwe=s(Si);IS=r(Fwe,"BertModel"),Fwe.forEach(t),NS=r(uk,"."),uk.forEach(t),Co=i(f),Ra=n(f,"P",{});var bk=s(Ra);qS=r(bk,"There is one class of "),If=n(bk,"CODE",{});var Twe=s(If);jS=r(Twe,"AutoModel"),Twe.forEach(t),pHe=r(bk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bk.forEach(t),eXe=i(f),Ri=n(f,"H2",{class:!0});var vk=s(Ri);Nf=n(vk,"A",{id:!0,class:!0,href:!0});var Mwe=s(Nf);Mae=n(Mwe,"SPAN",{});var Ewe=s(Mae);T(nL.$$.fragment,Ewe),Ewe.forEach(t),Mwe.forEach(t),_He=i(vk),Eae=n(vk,"SPAN",{});var Cwe=s(Eae);uHe=r(Cwe,"Extending the Auto Classes"),Cwe.forEach(t),vk.forEach(t),oXe=i(f),qn=n(f,"P",{});var $f=s(qn);bHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cae=n($f,"CODE",{});var wwe=s(Cae);vHe=r(wwe,"NewModel"),wwe.forEach(t),FHe=r($f,", make sure you have a "),wae=n($f,"CODE",{});var Awe=s(wae);THe=r(Awe,"NewModelConfig"),Awe.forEach(t),MHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),rXe=i(f),T(sL.$$.fragment,f),tXe=i(f),DS=n(f,"P",{});var Lwe=s(DS);EHe=r(Lwe,"You will then be able to use the auto classes like you would usually do!"),Lwe.forEach(t),aXe=i(f),T(qf.$$.fragment,f),nXe=i(f),Pi=n(f,"H2",{class:!0});var Fk=s(Pi);jf=n(Fk,"A",{id:!0,class:!0,href:!0});var ywe=s(jf);Aae=n(ywe,"SPAN",{});var xwe=s(Aae);T(lL.$$.fragment,xwe),xwe.forEach(t),ywe.forEach(t),CHe=i(Fk),Lae=n(Fk,"SPAN",{});var $we=s(Lae);wHe=r($we,"AutoConfig"),$we.forEach(t),Fk.forEach(t),sXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(iL.$$.fragment,at),AHe=i(at),dL=n(at,"P",{});var Tk=s(dL);LHe=r(Tk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=n(Tk,"A",{href:!0});var kwe=s(GS);yHe=r(kwe,"from_pretrained()"),kwe.forEach(t),xHe=r(Tk," class method."),Tk.forEach(t),$He=i(at),cL=n(at,"P",{});var Mk=s(cL);kHe=r(Mk,"This class cannot be instantiated directly using "),yae=n(Mk,"CODE",{});var Swe=s(yae);SHe=r(Swe,"__init__()"),Swe.forEach(t),RHe=r(Mk," (throws an error)."),Mk.forEach(t),PHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(fL.$$.fragment,nt),BHe=i(nt),xae=n(nt,"P",{});var Rwe=s(xae);IHe=r(Rwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Rwe.forEach(t),NHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);qHe=r(kf,"The configuration class to instantiate is selected based on the "),$ae=n(kf,"CODE",{});var Pwe=s($ae);jHe=r(Pwe,"model_type"),Pwe.forEach(t),DHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kae=n(kf,"CODE",{});var Bwe=s(kae);GHe=r(Bwe,"pretrained_model_name_or_path"),Bwe.forEach(t),OHe=r(kf,":"),kf.forEach(t),VHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var N0=s(Df);Sae=n(N0,"STRONG",{});var Iwe=s(Sae);XHe=r(Iwe,"albert"),Iwe.forEach(t),zHe=r(N0," \u2014 "),OS=n(N0,"A",{href:!0});var Nwe=s(OS);QHe=r(Nwe,"AlbertConfig"),Nwe.forEach(t),WHe=r(N0," (ALBERT model)"),N0.forEach(t),HHe=i(L),Gf=n(L,"LI",{});var q0=s(Gf);Rae=n(q0,"STRONG",{});var qwe=s(Rae);UHe=r(qwe,"bart"),qwe.forEach(t),JHe=r(q0," \u2014 "),VS=n(q0,"A",{href:!0});var jwe=s(VS);YHe=r(jwe,"BartConfig"),jwe.forEach(t),KHe=r(q0," (BART model)"),q0.forEach(t),ZHe=i(L),Of=n(L,"LI",{});var j0=s(Of);Pae=n(j0,"STRONG",{});var Dwe=s(Pae);eUe=r(Dwe,"beit"),Dwe.forEach(t),oUe=r(j0," \u2014 "),XS=n(j0,"A",{href:!0});var Gwe=s(XS);rUe=r(Gwe,"BeitConfig"),Gwe.forEach(t),tUe=r(j0," (BEiT model)"),j0.forEach(t),aUe=i(L),Vf=n(L,"LI",{});var D0=s(Vf);Bae=n(D0,"STRONG",{});var Owe=s(Bae);nUe=r(Owe,"bert"),Owe.forEach(t),sUe=r(D0," \u2014 "),zS=n(D0,"A",{href:!0});var Vwe=s(zS);lUe=r(Vwe,"BertConfig"),Vwe.forEach(t),iUe=r(D0," (BERT model)"),D0.forEach(t),dUe=i(L),Xf=n(L,"LI",{});var G0=s(Xf);Iae=n(G0,"STRONG",{});var Xwe=s(Iae);cUe=r(Xwe,"bert-generation"),Xwe.forEach(t),fUe=r(G0," \u2014 "),QS=n(G0,"A",{href:!0});var zwe=s(QS);mUe=r(zwe,"BertGenerationConfig"),zwe.forEach(t),gUe=r(G0," (Bert Generation model)"),G0.forEach(t),hUe=i(L),zf=n(L,"LI",{});var O0=s(zf);Nae=n(O0,"STRONG",{});var Qwe=s(Nae);pUe=r(Qwe,"big_bird"),Qwe.forEach(t),_Ue=r(O0," \u2014 "),WS=n(O0,"A",{href:!0});var Wwe=s(WS);uUe=r(Wwe,"BigBirdConfig"),Wwe.forEach(t),bUe=r(O0," (BigBird model)"),O0.forEach(t),vUe=i(L),Qf=n(L,"LI",{});var V0=s(Qf);qae=n(V0,"STRONG",{});var Hwe=s(qae);FUe=r(Hwe,"bigbird_pegasus"),Hwe.forEach(t),TUe=r(V0," \u2014 "),HS=n(V0,"A",{href:!0});var Uwe=s(HS);MUe=r(Uwe,"BigBirdPegasusConfig"),Uwe.forEach(t),EUe=r(V0," (BigBird-Pegasus model)"),V0.forEach(t),CUe=i(L),Wf=n(L,"LI",{});var X0=s(Wf);jae=n(X0,"STRONG",{});var Jwe=s(jae);wUe=r(Jwe,"blenderbot"),Jwe.forEach(t),AUe=r(X0," \u2014 "),US=n(X0,"A",{href:!0});var Ywe=s(US);LUe=r(Ywe,"BlenderbotConfig"),Ywe.forEach(t),yUe=r(X0," (Blenderbot model)"),X0.forEach(t),xUe=i(L),Hf=n(L,"LI",{});var z0=s(Hf);Dae=n(z0,"STRONG",{});var Kwe=s(Dae);$Ue=r(Kwe,"blenderbot-small"),Kwe.forEach(t),kUe=r(z0," \u2014 "),JS=n(z0,"A",{href:!0});var Zwe=s(JS);SUe=r(Zwe,"BlenderbotSmallConfig"),Zwe.forEach(t),RUe=r(z0," (BlenderbotSmall model)"),z0.forEach(t),PUe=i(L),Uf=n(L,"LI",{});var Q0=s(Uf);Gae=n(Q0,"STRONG",{});var eAe=s(Gae);BUe=r(eAe,"bloom"),eAe.forEach(t),IUe=r(Q0," \u2014 "),YS=n(Q0,"A",{href:!0});var oAe=s(YS);NUe=r(oAe,"BloomConfig"),oAe.forEach(t),qUe=r(Q0," (BLOOM model)"),Q0.forEach(t),jUe=i(L),Jf=n(L,"LI",{});var W0=s(Jf);Oae=n(W0,"STRONG",{});var rAe=s(Oae);DUe=r(rAe,"camembert"),rAe.forEach(t),GUe=r(W0," \u2014 "),KS=n(W0,"A",{href:!0});var tAe=s(KS);OUe=r(tAe,"CamembertConfig"),tAe.forEach(t),VUe=r(W0," (CamemBERT model)"),W0.forEach(t),XUe=i(L),Yf=n(L,"LI",{});var H0=s(Yf);Vae=n(H0,"STRONG",{});var aAe=s(Vae);zUe=r(aAe,"canine"),aAe.forEach(t),QUe=r(H0," \u2014 "),ZS=n(H0,"A",{href:!0});var nAe=s(ZS);WUe=r(nAe,"CanineConfig"),nAe.forEach(t),HUe=r(H0," (CANINE model)"),H0.forEach(t),UUe=i(L),Kf=n(L,"LI",{});var U0=s(Kf);Xae=n(U0,"STRONG",{});var sAe=s(Xae);JUe=r(sAe,"clip"),sAe.forEach(t),YUe=r(U0," \u2014 "),eR=n(U0,"A",{href:!0});var lAe=s(eR);KUe=r(lAe,"CLIPConfig"),lAe.forEach(t),ZUe=r(U0," (CLIP model)"),U0.forEach(t),eJe=i(L),Zf=n(L,"LI",{});var J0=s(Zf);zae=n(J0,"STRONG",{});var iAe=s(zae);oJe=r(iAe,"codegen"),iAe.forEach(t),rJe=r(J0," \u2014 "),oR=n(J0,"A",{href:!0});var dAe=s(oR);tJe=r(dAe,"CodeGenConfig"),dAe.forEach(t),aJe=r(J0," (CodeGen model)"),J0.forEach(t),nJe=i(L),em=n(L,"LI",{});var Y0=s(em);Qae=n(Y0,"STRONG",{});var cAe=s(Qae);sJe=r(cAe,"convbert"),cAe.forEach(t),lJe=r(Y0," \u2014 "),rR=n(Y0,"A",{href:!0});var fAe=s(rR);iJe=r(fAe,"ConvBertConfig"),fAe.forEach(t),dJe=r(Y0," (ConvBERT model)"),Y0.forEach(t),cJe=i(L),om=n(L,"LI",{});var K0=s(om);Wae=n(K0,"STRONG",{});var mAe=s(Wae);fJe=r(mAe,"convnext"),mAe.forEach(t),mJe=r(K0," \u2014 "),tR=n(K0,"A",{href:!0});var gAe=s(tR);gJe=r(gAe,"ConvNextConfig"),gAe.forEach(t),hJe=r(K0," (ConvNeXT model)"),K0.forEach(t),pJe=i(L),rm=n(L,"LI",{});var Z0=s(rm);Hae=n(Z0,"STRONG",{});var hAe=s(Hae);_Je=r(hAe,"ctrl"),hAe.forEach(t),uJe=r(Z0," \u2014 "),aR=n(Z0,"A",{href:!0});var pAe=s(aR);bJe=r(pAe,"CTRLConfig"),pAe.forEach(t),vJe=r(Z0," (CTRL model)"),Z0.forEach(t),FJe=i(L),tm=n(L,"LI",{});var ew=s(tm);Uae=n(ew,"STRONG",{});var _Ae=s(Uae);TJe=r(_Ae,"cvt"),_Ae.forEach(t),MJe=r(ew," \u2014 "),nR=n(ew,"A",{href:!0});var uAe=s(nR);EJe=r(uAe,"CvtConfig"),uAe.forEach(t),CJe=r(ew," (CvT model)"),ew.forEach(t),wJe=i(L),am=n(L,"LI",{});var ow=s(am);Jae=n(ow,"STRONG",{});var bAe=s(Jae);AJe=r(bAe,"data2vec-audio"),bAe.forEach(t),LJe=r(ow," \u2014 "),sR=n(ow,"A",{href:!0});var vAe=s(sR);yJe=r(vAe,"Data2VecAudioConfig"),vAe.forEach(t),xJe=r(ow," (Data2VecAudio model)"),ow.forEach(t),$Je=i(L),nm=n(L,"LI",{});var rw=s(nm);Yae=n(rw,"STRONG",{});var FAe=s(Yae);kJe=r(FAe,"data2vec-text"),FAe.forEach(t),SJe=r(rw," \u2014 "),lR=n(rw,"A",{href:!0});var TAe=s(lR);RJe=r(TAe,"Data2VecTextConfig"),TAe.forEach(t),PJe=r(rw," (Data2VecText model)"),rw.forEach(t),BJe=i(L),sm=n(L,"LI",{});var tw=s(sm);Kae=n(tw,"STRONG",{});var MAe=s(Kae);IJe=r(MAe,"data2vec-vision"),MAe.forEach(t),NJe=r(tw," \u2014 "),iR=n(tw,"A",{href:!0});var EAe=s(iR);qJe=r(EAe,"Data2VecVisionConfig"),EAe.forEach(t),jJe=r(tw," (Data2VecVision model)"),tw.forEach(t),DJe=i(L),lm=n(L,"LI",{});var aw=s(lm);Zae=n(aw,"STRONG",{});var CAe=s(Zae);GJe=r(CAe,"deberta"),CAe.forEach(t),OJe=r(aw," \u2014 "),dR=n(aw,"A",{href:!0});var wAe=s(dR);VJe=r(wAe,"DebertaConfig"),wAe.forEach(t),XJe=r(aw," (DeBERTa model)"),aw.forEach(t),zJe=i(L),im=n(L,"LI",{});var nw=s(im);ene=n(nw,"STRONG",{});var AAe=s(ene);QJe=r(AAe,"deberta-v2"),AAe.forEach(t),WJe=r(nw," \u2014 "),cR=n(nw,"A",{href:!0});var LAe=s(cR);HJe=r(LAe,"DebertaV2Config"),LAe.forEach(t),UJe=r(nw," (DeBERTa-v2 model)"),nw.forEach(t),JJe=i(L),dm=n(L,"LI",{});var sw=s(dm);one=n(sw,"STRONG",{});var dtt=s(one);YJe=r(dtt,"decision_transformer"),dtt.forEach(t),KJe=r(sw," \u2014 "),fR=n(sw,"A",{href:!0});var ctt=s(fR);ZJe=r(ctt,"DecisionTransformerConfig"),ctt.forEach(t),eYe=r(sw," (Decision Transformer model)"),sw.forEach(t),oYe=i(L),cm=n(L,"LI",{});var yAe=s(cm);rne=n(yAe,"STRONG",{});var ftt=s(rne);rYe=r(ftt,"deit"),ftt.forEach(t),tYe=r(yAe," \u2014 "),mR=n(yAe,"A",{href:!0});var mtt=s(mR);aYe=r(mtt,"DeiTConfig"),mtt.forEach(t),nYe=r(yAe," (DeiT model)"),yAe.forEach(t),sYe=i(L),fm=n(L,"LI",{});var xAe=s(fm);tne=n(xAe,"STRONG",{});var gtt=s(tne);lYe=r(gtt,"detr"),gtt.forEach(t),iYe=r(xAe," \u2014 "),gR=n(xAe,"A",{href:!0});var htt=s(gR);dYe=r(htt,"DetrConfig"),htt.forEach(t),cYe=r(xAe," (DETR model)"),xAe.forEach(t),fYe=i(L),mm=n(L,"LI",{});var $Ae=s(mm);ane=n($Ae,"STRONG",{});var ptt=s(ane);mYe=r(ptt,"distilbert"),ptt.forEach(t),gYe=r($Ae," \u2014 "),hR=n($Ae,"A",{href:!0});var _tt=s(hR);hYe=r(_tt,"DistilBertConfig"),_tt.forEach(t),pYe=r($Ae," (DistilBERT model)"),$Ae.forEach(t),_Ye=i(L),gm=n(L,"LI",{});var kAe=s(gm);nne=n(kAe,"STRONG",{});var utt=s(nne);uYe=r(utt,"dpr"),utt.forEach(t),bYe=r(kAe," \u2014 "),pR=n(kAe,"A",{href:!0});var btt=s(pR);vYe=r(btt,"DPRConfig"),btt.forEach(t),FYe=r(kAe," (DPR model)"),kAe.forEach(t),TYe=i(L),hm=n(L,"LI",{});var SAe=s(hm);sne=n(SAe,"STRONG",{});var vtt=s(sne);MYe=r(vtt,"dpt"),vtt.forEach(t),EYe=r(SAe," \u2014 "),_R=n(SAe,"A",{href:!0});var Ftt=s(_R);CYe=r(Ftt,"DPTConfig"),Ftt.forEach(t),wYe=r(SAe," (DPT model)"),SAe.forEach(t),AYe=i(L),pm=n(L,"LI",{});var RAe=s(pm);lne=n(RAe,"STRONG",{});var Ttt=s(lne);LYe=r(Ttt,"electra"),Ttt.forEach(t),yYe=r(RAe," \u2014 "),uR=n(RAe,"A",{href:!0});var Mtt=s(uR);xYe=r(Mtt,"ElectraConfig"),Mtt.forEach(t),$Ye=r(RAe," (ELECTRA model)"),RAe.forEach(t),kYe=i(L),_m=n(L,"LI",{});var PAe=s(_m);ine=n(PAe,"STRONG",{});var Ett=s(ine);SYe=r(Ett,"encoder-decoder"),Ett.forEach(t),RYe=r(PAe," \u2014 "),bR=n(PAe,"A",{href:!0});var Ctt=s(bR);PYe=r(Ctt,"EncoderDecoderConfig"),Ctt.forEach(t),BYe=r(PAe," (Encoder decoder model)"),PAe.forEach(t),IYe=i(L),um=n(L,"LI",{});var BAe=s(um);dne=n(BAe,"STRONG",{});var wtt=s(dne);NYe=r(wtt,"flaubert"),wtt.forEach(t),qYe=r(BAe," \u2014 "),vR=n(BAe,"A",{href:!0});var Att=s(vR);jYe=r(Att,"FlaubertConfig"),Att.forEach(t),DYe=r(BAe," (FlauBERT model)"),BAe.forEach(t),GYe=i(L),bm=n(L,"LI",{});var IAe=s(bm);cne=n(IAe,"STRONG",{});var Ltt=s(cne);OYe=r(Ltt,"flava"),Ltt.forEach(t),VYe=r(IAe," \u2014 "),FR=n(IAe,"A",{href:!0});var ytt=s(FR);XYe=r(ytt,"FlavaConfig"),ytt.forEach(t),zYe=r(IAe," (FLAVA model)"),IAe.forEach(t),QYe=i(L),vm=n(L,"LI",{});var NAe=s(vm);fne=n(NAe,"STRONG",{});var xtt=s(fne);WYe=r(xtt,"fnet"),xtt.forEach(t),HYe=r(NAe," \u2014 "),TR=n(NAe,"A",{href:!0});var $tt=s(TR);UYe=r($tt,"FNetConfig"),$tt.forEach(t),JYe=r(NAe," (FNet model)"),NAe.forEach(t),YYe=i(L),Fm=n(L,"LI",{});var qAe=s(Fm);mne=n(qAe,"STRONG",{});var ktt=s(mne);KYe=r(ktt,"fsmt"),ktt.forEach(t),ZYe=r(qAe," \u2014 "),MR=n(qAe,"A",{href:!0});var Stt=s(MR);eKe=r(Stt,"FSMTConfig"),Stt.forEach(t),oKe=r(qAe," (FairSeq Machine-Translation model)"),qAe.forEach(t),rKe=i(L),Tm=n(L,"LI",{});var jAe=s(Tm);gne=n(jAe,"STRONG",{});var Rtt=s(gne);tKe=r(Rtt,"funnel"),Rtt.forEach(t),aKe=r(jAe," \u2014 "),ER=n(jAe,"A",{href:!0});var Ptt=s(ER);nKe=r(Ptt,"FunnelConfig"),Ptt.forEach(t),sKe=r(jAe," (Funnel Transformer model)"),jAe.forEach(t),lKe=i(L),Mm=n(L,"LI",{});var DAe=s(Mm);hne=n(DAe,"STRONG",{});var Btt=s(hne);iKe=r(Btt,"glpn"),Btt.forEach(t),dKe=r(DAe," \u2014 "),CR=n(DAe,"A",{href:!0});var Itt=s(CR);cKe=r(Itt,"GLPNConfig"),Itt.forEach(t),fKe=r(DAe," (GLPN model)"),DAe.forEach(t),mKe=i(L),Em=n(L,"LI",{});var GAe=s(Em);pne=n(GAe,"STRONG",{});var Ntt=s(pne);gKe=r(Ntt,"gpt2"),Ntt.forEach(t),hKe=r(GAe," \u2014 "),wR=n(GAe,"A",{href:!0});var qtt=s(wR);pKe=r(qtt,"GPT2Config"),qtt.forEach(t),_Ke=r(GAe," (OpenAI GPT-2 model)"),GAe.forEach(t),uKe=i(L),Cm=n(L,"LI",{});var OAe=s(Cm);_ne=n(OAe,"STRONG",{});var jtt=s(_ne);bKe=r(jtt,"gpt_neo"),jtt.forEach(t),vKe=r(OAe," \u2014 "),AR=n(OAe,"A",{href:!0});var Dtt=s(AR);FKe=r(Dtt,"GPTNeoConfig"),Dtt.forEach(t),TKe=r(OAe," (GPT Neo model)"),OAe.forEach(t),MKe=i(L),wm=n(L,"LI",{});var VAe=s(wm);une=n(VAe,"STRONG",{});var Gtt=s(une);EKe=r(Gtt,"gpt_neox"),Gtt.forEach(t),CKe=r(VAe," \u2014 "),LR=n(VAe,"A",{href:!0});var Ott=s(LR);wKe=r(Ott,"GPTNeoXConfig"),Ott.forEach(t),AKe=r(VAe," (GPT NeoX model)"),VAe.forEach(t),LKe=i(L),Am=n(L,"LI",{});var XAe=s(Am);bne=n(XAe,"STRONG",{});var Vtt=s(bne);yKe=r(Vtt,"gptj"),Vtt.forEach(t),xKe=r(XAe," \u2014 "),yR=n(XAe,"A",{href:!0});var Xtt=s(yR);$Ke=r(Xtt,"GPTJConfig"),Xtt.forEach(t),kKe=r(XAe," (GPT-J model)"),XAe.forEach(t),SKe=i(L),Lm=n(L,"LI",{});var zAe=s(Lm);vne=n(zAe,"STRONG",{});var ztt=s(vne);RKe=r(ztt,"groupvit"),ztt.forEach(t),PKe=r(zAe," \u2014 "),xR=n(zAe,"A",{href:!0});var Qtt=s(xR);BKe=r(Qtt,"GroupViTConfig"),Qtt.forEach(t),IKe=r(zAe," (GroupViT model)"),zAe.forEach(t),NKe=i(L),ym=n(L,"LI",{});var QAe=s(ym);Fne=n(QAe,"STRONG",{});var Wtt=s(Fne);qKe=r(Wtt,"hubert"),Wtt.forEach(t),jKe=r(QAe," \u2014 "),$R=n(QAe,"A",{href:!0});var Htt=s($R);DKe=r(Htt,"HubertConfig"),Htt.forEach(t),GKe=r(QAe," (Hubert model)"),QAe.forEach(t),OKe=i(L),xm=n(L,"LI",{});var WAe=s(xm);Tne=n(WAe,"STRONG",{});var Utt=s(Tne);VKe=r(Utt,"ibert"),Utt.forEach(t),XKe=r(WAe," \u2014 "),kR=n(WAe,"A",{href:!0});var Jtt=s(kR);zKe=r(Jtt,"IBertConfig"),Jtt.forEach(t),QKe=r(WAe," (I-BERT model)"),WAe.forEach(t),WKe=i(L),$m=n(L,"LI",{});var HAe=s($m);Mne=n(HAe,"STRONG",{});var Ytt=s(Mne);HKe=r(Ytt,"imagegpt"),Ytt.forEach(t),UKe=r(HAe," \u2014 "),SR=n(HAe,"A",{href:!0});var Ktt=s(SR);JKe=r(Ktt,"ImageGPTConfig"),Ktt.forEach(t),YKe=r(HAe," (ImageGPT model)"),HAe.forEach(t),KKe=i(L),km=n(L,"LI",{});var UAe=s(km);Ene=n(UAe,"STRONG",{});var Ztt=s(Ene);ZKe=r(Ztt,"jukebox"),Ztt.forEach(t),eZe=r(UAe," \u2014 "),RR=n(UAe,"A",{href:!0});var eat=s(RR);oZe=r(eat,"JukeboxConfig"),eat.forEach(t),rZe=r(UAe," (Jukebox model)"),UAe.forEach(t),tZe=i(L),Sm=n(L,"LI",{});var JAe=s(Sm);Cne=n(JAe,"STRONG",{});var oat=s(Cne);aZe=r(oat,"layoutlm"),oat.forEach(t),nZe=r(JAe," \u2014 "),PR=n(JAe,"A",{href:!0});var rat=s(PR);sZe=r(rat,"LayoutLMConfig"),rat.forEach(t),lZe=r(JAe," (LayoutLM model)"),JAe.forEach(t),iZe=i(L),Rm=n(L,"LI",{});var YAe=s(Rm);wne=n(YAe,"STRONG",{});var tat=s(wne);dZe=r(tat,"layoutlmv2"),tat.forEach(t),cZe=r(YAe," \u2014 "),BR=n(YAe,"A",{href:!0});var aat=s(BR);fZe=r(aat,"LayoutLMv2Config"),aat.forEach(t),mZe=r(YAe," (LayoutLMv2 model)"),YAe.forEach(t),gZe=i(L),Pm=n(L,"LI",{});var KAe=s(Pm);Ane=n(KAe,"STRONG",{});var nat=s(Ane);hZe=r(nat,"layoutlmv3"),nat.forEach(t),pZe=r(KAe," \u2014 "),IR=n(KAe,"A",{href:!0});var sat=s(IR);_Ze=r(sat,"LayoutLMv3Config"),sat.forEach(t),uZe=r(KAe," (LayoutLMv3 model)"),KAe.forEach(t),bZe=i(L),Bm=n(L,"LI",{});var ZAe=s(Bm);Lne=n(ZAe,"STRONG",{});var lat=s(Lne);vZe=r(lat,"led"),lat.forEach(t),FZe=r(ZAe," \u2014 "),NR=n(ZAe,"A",{href:!0});var iat=s(NR);TZe=r(iat,"LEDConfig"),iat.forEach(t),MZe=r(ZAe," (LED model)"),ZAe.forEach(t),EZe=i(L),Im=n(L,"LI",{});var eLe=s(Im);yne=n(eLe,"STRONG",{});var dat=s(yne);CZe=r(dat,"levit"),dat.forEach(t),wZe=r(eLe," \u2014 "),qR=n(eLe,"A",{href:!0});var cat=s(qR);AZe=r(cat,"LevitConfig"),cat.forEach(t),LZe=r(eLe," (LeViT model)"),eLe.forEach(t),yZe=i(L),Nm=n(L,"LI",{});var oLe=s(Nm);xne=n(oLe,"STRONG",{});var fat=s(xne);xZe=r(fat,"longformer"),fat.forEach(t),$Ze=r(oLe," \u2014 "),jR=n(oLe,"A",{href:!0});var mat=s(jR);kZe=r(mat,"LongformerConfig"),mat.forEach(t),SZe=r(oLe," (Longformer model)"),oLe.forEach(t),RZe=i(L),qm=n(L,"LI",{});var rLe=s(qm);$ne=n(rLe,"STRONG",{});var gat=s($ne);PZe=r(gat,"longt5"),gat.forEach(t),BZe=r(rLe," \u2014 "),DR=n(rLe,"A",{href:!0});var hat=s(DR);IZe=r(hat,"LongT5Config"),hat.forEach(t),NZe=r(rLe," (LongT5 model)"),rLe.forEach(t),qZe=i(L),jm=n(L,"LI",{});var tLe=s(jm);kne=n(tLe,"STRONG",{});var pat=s(kne);jZe=r(pat,"luke"),pat.forEach(t),DZe=r(tLe," \u2014 "),GR=n(tLe,"A",{href:!0});var _at=s(GR);GZe=r(_at,"LukeConfig"),_at.forEach(t),OZe=r(tLe," (LUKE model)"),tLe.forEach(t),VZe=i(L),Dm=n(L,"LI",{});var aLe=s(Dm);Sne=n(aLe,"STRONG",{});var uat=s(Sne);XZe=r(uat,"lxmert"),uat.forEach(t),zZe=r(aLe," \u2014 "),OR=n(aLe,"A",{href:!0});var bat=s(OR);QZe=r(bat,"LxmertConfig"),bat.forEach(t),WZe=r(aLe," (LXMERT model)"),aLe.forEach(t),HZe=i(L),Gm=n(L,"LI",{});var nLe=s(Gm);Rne=n(nLe,"STRONG",{});var vat=s(Rne);UZe=r(vat,"m2m_100"),vat.forEach(t),JZe=r(nLe," \u2014 "),VR=n(nLe,"A",{href:!0});var Fat=s(VR);YZe=r(Fat,"M2M100Config"),Fat.forEach(t),KZe=r(nLe," (M2M100 model)"),nLe.forEach(t),ZZe=i(L),Om=n(L,"LI",{});var sLe=s(Om);Pne=n(sLe,"STRONG",{});var Tat=s(Pne);eeo=r(Tat,"marian"),Tat.forEach(t),oeo=r(sLe," \u2014 "),XR=n(sLe,"A",{href:!0});var Mat=s(XR);reo=r(Mat,"MarianConfig"),Mat.forEach(t),teo=r(sLe," (Marian model)"),sLe.forEach(t),aeo=i(L),Vm=n(L,"LI",{});var lLe=s(Vm);Bne=n(lLe,"STRONG",{});var Eat=s(Bne);neo=r(Eat,"maskformer"),Eat.forEach(t),seo=r(lLe," \u2014 "),zR=n(lLe,"A",{href:!0});var Cat=s(zR);leo=r(Cat,"MaskFormerConfig"),Cat.forEach(t),ieo=r(lLe," (MaskFormer model)"),lLe.forEach(t),deo=i(L),Xm=n(L,"LI",{});var iLe=s(Xm);Ine=n(iLe,"STRONG",{});var wat=s(Ine);ceo=r(wat,"mbart"),wat.forEach(t),feo=r(iLe," \u2014 "),QR=n(iLe,"A",{href:!0});var Aat=s(QR);meo=r(Aat,"MBartConfig"),Aat.forEach(t),geo=r(iLe," (mBART model)"),iLe.forEach(t),heo=i(L),zm=n(L,"LI",{});var dLe=s(zm);Nne=n(dLe,"STRONG",{});var Lat=s(Nne);peo=r(Lat,"mctct"),Lat.forEach(t),_eo=r(dLe," \u2014 "),WR=n(dLe,"A",{href:!0});var yat=s(WR);ueo=r(yat,"MCTCTConfig"),yat.forEach(t),beo=r(dLe," (M-CTC-T model)"),dLe.forEach(t),veo=i(L),Qm=n(L,"LI",{});var cLe=s(Qm);qne=n(cLe,"STRONG",{});var xat=s(qne);Feo=r(xat,"megatron-bert"),xat.forEach(t),Teo=r(cLe," \u2014 "),HR=n(cLe,"A",{href:!0});var $at=s(HR);Meo=r($at,"MegatronBertConfig"),$at.forEach(t),Eeo=r(cLe," (Megatron-BERT model)"),cLe.forEach(t),Ceo=i(L),Wm=n(L,"LI",{});var fLe=s(Wm);jne=n(fLe,"STRONG",{});var kat=s(jne);weo=r(kat,"mobilebert"),kat.forEach(t),Aeo=r(fLe," \u2014 "),UR=n(fLe,"A",{href:!0});var Sat=s(UR);Leo=r(Sat,"MobileBertConfig"),Sat.forEach(t),yeo=r(fLe," (MobileBERT model)"),fLe.forEach(t),xeo=i(L),Hm=n(L,"LI",{});var mLe=s(Hm);Dne=n(mLe,"STRONG",{});var Rat=s(Dne);$eo=r(Rat,"mobilevit"),Rat.forEach(t),keo=r(mLe," \u2014 "),JR=n(mLe,"A",{href:!0});var Pat=s(JR);Seo=r(Pat,"MobileViTConfig"),Pat.forEach(t),Reo=r(mLe," (MobileViT model)"),mLe.forEach(t),Peo=i(L),Um=n(L,"LI",{});var gLe=s(Um);Gne=n(gLe,"STRONG",{});var Bat=s(Gne);Beo=r(Bat,"mpnet"),Bat.forEach(t),Ieo=r(gLe," \u2014 "),YR=n(gLe,"A",{href:!0});var Iat=s(YR);Neo=r(Iat,"MPNetConfig"),Iat.forEach(t),qeo=r(gLe," (MPNet model)"),gLe.forEach(t),jeo=i(L),Jm=n(L,"LI",{});var hLe=s(Jm);One=n(hLe,"STRONG",{});var Nat=s(One);Deo=r(Nat,"mt5"),Nat.forEach(t),Geo=r(hLe," \u2014 "),KR=n(hLe,"A",{href:!0});var qat=s(KR);Oeo=r(qat,"MT5Config"),qat.forEach(t),Veo=r(hLe," (MT5 model)"),hLe.forEach(t),Xeo=i(L),Ym=n(L,"LI",{});var pLe=s(Ym);Vne=n(pLe,"STRONG",{});var jat=s(Vne);zeo=r(jat,"mvp"),jat.forEach(t),Qeo=r(pLe," \u2014 "),ZR=n(pLe,"A",{href:!0});var Dat=s(ZR);Weo=r(Dat,"MvpConfig"),Dat.forEach(t),Heo=r(pLe," (MVP model)"),pLe.forEach(t),Ueo=i(L),Km=n(L,"LI",{});var _Le=s(Km);Xne=n(_Le,"STRONG",{});var Gat=s(Xne);Jeo=r(Gat,"nezha"),Gat.forEach(t),Yeo=r(_Le," \u2014 "),eP=n(_Le,"A",{href:!0});var Oat=s(eP);Keo=r(Oat,"NezhaConfig"),Oat.forEach(t),Zeo=r(_Le," (Nezha model)"),_Le.forEach(t),eoo=i(L),Zm=n(L,"LI",{});var uLe=s(Zm);zne=n(uLe,"STRONG",{});var Vat=s(zne);ooo=r(Vat,"nystromformer"),Vat.forEach(t),roo=r(uLe," \u2014 "),oP=n(uLe,"A",{href:!0});var Xat=s(oP);too=r(Xat,"NystromformerConfig"),Xat.forEach(t),aoo=r(uLe," (Nystr\xF6mformer model)"),uLe.forEach(t),noo=i(L),eg=n(L,"LI",{});var bLe=s(eg);Qne=n(bLe,"STRONG",{});var zat=s(Qne);soo=r(zat,"openai-gpt"),zat.forEach(t),loo=r(bLe," \u2014 "),rP=n(bLe,"A",{href:!0});var Qat=s(rP);ioo=r(Qat,"OpenAIGPTConfig"),Qat.forEach(t),doo=r(bLe," (OpenAI GPT model)"),bLe.forEach(t),coo=i(L),og=n(L,"LI",{});var vLe=s(og);Wne=n(vLe,"STRONG",{});var Wat=s(Wne);foo=r(Wat,"opt"),Wat.forEach(t),moo=r(vLe," \u2014 "),tP=n(vLe,"A",{href:!0});var Hat=s(tP);goo=r(Hat,"OPTConfig"),Hat.forEach(t),hoo=r(vLe," (OPT model)"),vLe.forEach(t),poo=i(L),rg=n(L,"LI",{});var FLe=s(rg);Hne=n(FLe,"STRONG",{});var Uat=s(Hne);_oo=r(Uat,"pegasus"),Uat.forEach(t),uoo=r(FLe," \u2014 "),aP=n(FLe,"A",{href:!0});var Jat=s(aP);boo=r(Jat,"PegasusConfig"),Jat.forEach(t),voo=r(FLe," (Pegasus model)"),FLe.forEach(t),Foo=i(L),tg=n(L,"LI",{});var TLe=s(tg);Une=n(TLe,"STRONG",{});var Yat=s(Une);Too=r(Yat,"perceiver"),Yat.forEach(t),Moo=r(TLe," \u2014 "),nP=n(TLe,"A",{href:!0});var Kat=s(nP);Eoo=r(Kat,"PerceiverConfig"),Kat.forEach(t),Coo=r(TLe," (Perceiver model)"),TLe.forEach(t),woo=i(L),ag=n(L,"LI",{});var MLe=s(ag);Jne=n(MLe,"STRONG",{});var Zat=s(Jne);Aoo=r(Zat,"plbart"),Zat.forEach(t),Loo=r(MLe," \u2014 "),sP=n(MLe,"A",{href:!0});var ent=s(sP);yoo=r(ent,"PLBartConfig"),ent.forEach(t),xoo=r(MLe," (PLBart model)"),MLe.forEach(t),$oo=i(L),ng=n(L,"LI",{});var ELe=s(ng);Yne=n(ELe,"STRONG",{});var ont=s(Yne);koo=r(ont,"poolformer"),ont.forEach(t),Soo=r(ELe," \u2014 "),lP=n(ELe,"A",{href:!0});var rnt=s(lP);Roo=r(rnt,"PoolFormerConfig"),rnt.forEach(t),Poo=r(ELe," (PoolFormer model)"),ELe.forEach(t),Boo=i(L),sg=n(L,"LI",{});var CLe=s(sg);Kne=n(CLe,"STRONG",{});var tnt=s(Kne);Ioo=r(tnt,"prophetnet"),tnt.forEach(t),Noo=r(CLe," \u2014 "),iP=n(CLe,"A",{href:!0});var ant=s(iP);qoo=r(ant,"ProphetNetConfig"),ant.forEach(t),joo=r(CLe," (ProphetNet model)"),CLe.forEach(t),Doo=i(L),lg=n(L,"LI",{});var wLe=s(lg);Zne=n(wLe,"STRONG",{});var nnt=s(Zne);Goo=r(nnt,"qdqbert"),nnt.forEach(t),Ooo=r(wLe," \u2014 "),dP=n(wLe,"A",{href:!0});var snt=s(dP);Voo=r(snt,"QDQBertConfig"),snt.forEach(t),Xoo=r(wLe," (QDQBert model)"),wLe.forEach(t),zoo=i(L),ig=n(L,"LI",{});var ALe=s(ig);ese=n(ALe,"STRONG",{});var lnt=s(ese);Qoo=r(lnt,"rag"),lnt.forEach(t),Woo=r(ALe," \u2014 "),cP=n(ALe,"A",{href:!0});var int=s(cP);Hoo=r(int,"RagConfig"),int.forEach(t),Uoo=r(ALe," (RAG model)"),ALe.forEach(t),Joo=i(L),dg=n(L,"LI",{});var LLe=s(dg);ose=n(LLe,"STRONG",{});var dnt=s(ose);Yoo=r(dnt,"realm"),dnt.forEach(t),Koo=r(LLe," \u2014 "),fP=n(LLe,"A",{href:!0});var cnt=s(fP);Zoo=r(cnt,"RealmConfig"),cnt.forEach(t),ero=r(LLe," (REALM model)"),LLe.forEach(t),oro=i(L),cg=n(L,"LI",{});var yLe=s(cg);rse=n(yLe,"STRONG",{});var fnt=s(rse);rro=r(fnt,"reformer"),fnt.forEach(t),tro=r(yLe," \u2014 "),mP=n(yLe,"A",{href:!0});var mnt=s(mP);aro=r(mnt,"ReformerConfig"),mnt.forEach(t),nro=r(yLe," (Reformer model)"),yLe.forEach(t),sro=i(L),fg=n(L,"LI",{});var xLe=s(fg);tse=n(xLe,"STRONG",{});var gnt=s(tse);lro=r(gnt,"regnet"),gnt.forEach(t),iro=r(xLe," \u2014 "),gP=n(xLe,"A",{href:!0});var hnt=s(gP);dro=r(hnt,"RegNetConfig"),hnt.forEach(t),cro=r(xLe," (RegNet model)"),xLe.forEach(t),fro=i(L),mg=n(L,"LI",{});var $Le=s(mg);ase=n($Le,"STRONG",{});var pnt=s(ase);mro=r(pnt,"rembert"),pnt.forEach(t),gro=r($Le," \u2014 "),hP=n($Le,"A",{href:!0});var _nt=s(hP);hro=r(_nt,"RemBertConfig"),_nt.forEach(t),pro=r($Le," (RemBERT model)"),$Le.forEach(t),_ro=i(L),gg=n(L,"LI",{});var kLe=s(gg);nse=n(kLe,"STRONG",{});var unt=s(nse);uro=r(unt,"resnet"),unt.forEach(t),bro=r(kLe," \u2014 "),pP=n(kLe,"A",{href:!0});var bnt=s(pP);vro=r(bnt,"ResNetConfig"),bnt.forEach(t),Fro=r(kLe," (ResNet model)"),kLe.forEach(t),Tro=i(L),hg=n(L,"LI",{});var SLe=s(hg);sse=n(SLe,"STRONG",{});var vnt=s(sse);Mro=r(vnt,"retribert"),vnt.forEach(t),Ero=r(SLe," \u2014 "),_P=n(SLe,"A",{href:!0});var Fnt=s(_P);Cro=r(Fnt,"RetriBertConfig"),Fnt.forEach(t),wro=r(SLe," (RetriBERT model)"),SLe.forEach(t),Aro=i(L),pg=n(L,"LI",{});var RLe=s(pg);lse=n(RLe,"STRONG",{});var Tnt=s(lse);Lro=r(Tnt,"roberta"),Tnt.forEach(t),yro=r(RLe," \u2014 "),uP=n(RLe,"A",{href:!0});var Mnt=s(uP);xro=r(Mnt,"RobertaConfig"),Mnt.forEach(t),$ro=r(RLe," (RoBERTa model)"),RLe.forEach(t),kro=i(L),_g=n(L,"LI",{});var PLe=s(_g);ise=n(PLe,"STRONG",{});var Ent=s(ise);Sro=r(Ent,"roformer"),Ent.forEach(t),Rro=r(PLe," \u2014 "),bP=n(PLe,"A",{href:!0});var Cnt=s(bP);Pro=r(Cnt,"RoFormerConfig"),Cnt.forEach(t),Bro=r(PLe," (RoFormer model)"),PLe.forEach(t),Iro=i(L),ug=n(L,"LI",{});var BLe=s(ug);dse=n(BLe,"STRONG",{});var wnt=s(dse);Nro=r(wnt,"segformer"),wnt.forEach(t),qro=r(BLe," \u2014 "),vP=n(BLe,"A",{href:!0});var Ant=s(vP);jro=r(Ant,"SegformerConfig"),Ant.forEach(t),Dro=r(BLe," (SegFormer model)"),BLe.forEach(t),Gro=i(L),bg=n(L,"LI",{});var ILe=s(bg);cse=n(ILe,"STRONG",{});var Lnt=s(cse);Oro=r(Lnt,"sew"),Lnt.forEach(t),Vro=r(ILe," \u2014 "),FP=n(ILe,"A",{href:!0});var ynt=s(FP);Xro=r(ynt,"SEWConfig"),ynt.forEach(t),zro=r(ILe," (SEW model)"),ILe.forEach(t),Qro=i(L),vg=n(L,"LI",{});var NLe=s(vg);fse=n(NLe,"STRONG",{});var xnt=s(fse);Wro=r(xnt,"sew-d"),xnt.forEach(t),Hro=r(NLe," \u2014 "),TP=n(NLe,"A",{href:!0});var $nt=s(TP);Uro=r($nt,"SEWDConfig"),$nt.forEach(t),Jro=r(NLe," (SEW-D model)"),NLe.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var qLe=s(Fg);mse=n(qLe,"STRONG",{});var knt=s(mse);Kro=r(knt,"speech-encoder-decoder"),knt.forEach(t),Zro=r(qLe," \u2014 "),MP=n(qLe,"A",{href:!0});var Snt=s(MP);eto=r(Snt,"SpeechEncoderDecoderConfig"),Snt.forEach(t),oto=r(qLe," (Speech Encoder decoder model)"),qLe.forEach(t),rto=i(L),Tg=n(L,"LI",{});var jLe=s(Tg);gse=n(jLe,"STRONG",{});var Rnt=s(gse);tto=r(Rnt,"speech_to_text"),Rnt.forEach(t),ato=r(jLe," \u2014 "),EP=n(jLe,"A",{href:!0});var Pnt=s(EP);nto=r(Pnt,"Speech2TextConfig"),Pnt.forEach(t),sto=r(jLe," (Speech2Text model)"),jLe.forEach(t),lto=i(L),Mg=n(L,"LI",{});var DLe=s(Mg);hse=n(DLe,"STRONG",{});var Bnt=s(hse);ito=r(Bnt,"speech_to_text_2"),Bnt.forEach(t),dto=r(DLe," \u2014 "),CP=n(DLe,"A",{href:!0});var Int=s(CP);cto=r(Int,"Speech2Text2Config"),Int.forEach(t),fto=r(DLe," (Speech2Text2 model)"),DLe.forEach(t),mto=i(L),Eg=n(L,"LI",{});var GLe=s(Eg);pse=n(GLe,"STRONG",{});var Nnt=s(pse);gto=r(Nnt,"splinter"),Nnt.forEach(t),hto=r(GLe," \u2014 "),wP=n(GLe,"A",{href:!0});var qnt=s(wP);pto=r(qnt,"SplinterConfig"),qnt.forEach(t),_to=r(GLe," (Splinter model)"),GLe.forEach(t),uto=i(L),Cg=n(L,"LI",{});var OLe=s(Cg);_se=n(OLe,"STRONG",{});var jnt=s(_se);bto=r(jnt,"squeezebert"),jnt.forEach(t),vto=r(OLe," \u2014 "),AP=n(OLe,"A",{href:!0});var Dnt=s(AP);Fto=r(Dnt,"SqueezeBertConfig"),Dnt.forEach(t),Tto=r(OLe," (SqueezeBERT model)"),OLe.forEach(t),Mto=i(L),wg=n(L,"LI",{});var VLe=s(wg);use=n(VLe,"STRONG",{});var Gnt=s(use);Eto=r(Gnt,"swin"),Gnt.forEach(t),Cto=r(VLe," \u2014 "),LP=n(VLe,"A",{href:!0});var Ont=s(LP);wto=r(Ont,"SwinConfig"),Ont.forEach(t),Ato=r(VLe," (Swin Transformer model)"),VLe.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var XLe=s(Ag);bse=n(XLe,"STRONG",{});var Vnt=s(bse);yto=r(Vnt,"t5"),Vnt.forEach(t),xto=r(XLe," \u2014 "),yP=n(XLe,"A",{href:!0});var Xnt=s(yP);$to=r(Xnt,"T5Config"),Xnt.forEach(t),kto=r(XLe," (T5 model)"),XLe.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var zLe=s(Lg);vse=n(zLe,"STRONG",{});var znt=s(vse);Rto=r(znt,"tapas"),znt.forEach(t),Pto=r(zLe," \u2014 "),xP=n(zLe,"A",{href:!0});var Qnt=s(xP);Bto=r(Qnt,"TapasConfig"),Qnt.forEach(t),Ito=r(zLe," (TAPAS model)"),zLe.forEach(t),Nto=i(L),yg=n(L,"LI",{});var QLe=s(yg);Fse=n(QLe,"STRONG",{});var Wnt=s(Fse);qto=r(Wnt,"trajectory_transformer"),Wnt.forEach(t),jto=r(QLe," \u2014 "),$P=n(QLe,"A",{href:!0});var Hnt=s($P);Dto=r(Hnt,"TrajectoryTransformerConfig"),Hnt.forEach(t),Gto=r(QLe," (Trajectory Transformer model)"),QLe.forEach(t),Oto=i(L),xg=n(L,"LI",{});var WLe=s(xg);Tse=n(WLe,"STRONG",{});var Unt=s(Tse);Vto=r(Unt,"transfo-xl"),Unt.forEach(t),Xto=r(WLe," \u2014 "),kP=n(WLe,"A",{href:!0});var Jnt=s(kP);zto=r(Jnt,"TransfoXLConfig"),Jnt.forEach(t),Qto=r(WLe," (Transformer-XL model)"),WLe.forEach(t),Wto=i(L),$g=n(L,"LI",{});var HLe=s($g);Mse=n(HLe,"STRONG",{});var Ynt=s(Mse);Hto=r(Ynt,"trocr"),Ynt.forEach(t),Uto=r(HLe," \u2014 "),SP=n(HLe,"A",{href:!0});var Knt=s(SP);Jto=r(Knt,"TrOCRConfig"),Knt.forEach(t),Yto=r(HLe," (TrOCR model)"),HLe.forEach(t),Kto=i(L),kg=n(L,"LI",{});var ULe=s(kg);Ese=n(ULe,"STRONG",{});var Znt=s(Ese);Zto=r(Znt,"unispeech"),Znt.forEach(t),eao=r(ULe," \u2014 "),RP=n(ULe,"A",{href:!0});var est=s(RP);oao=r(est,"UniSpeechConfig"),est.forEach(t),rao=r(ULe," (UniSpeech model)"),ULe.forEach(t),tao=i(L),Sg=n(L,"LI",{});var JLe=s(Sg);Cse=n(JLe,"STRONG",{});var ost=s(Cse);aao=r(ost,"unispeech-sat"),ost.forEach(t),nao=r(JLe," \u2014 "),PP=n(JLe,"A",{href:!0});var rst=s(PP);sao=r(rst,"UniSpeechSatConfig"),rst.forEach(t),lao=r(JLe," (UniSpeechSat model)"),JLe.forEach(t),iao=i(L),Rg=n(L,"LI",{});var YLe=s(Rg);wse=n(YLe,"STRONG",{});var tst=s(wse);dao=r(tst,"van"),tst.forEach(t),cao=r(YLe," \u2014 "),BP=n(YLe,"A",{href:!0});var ast=s(BP);fao=r(ast,"VanConfig"),ast.forEach(t),mao=r(YLe," (VAN model)"),YLe.forEach(t),gao=i(L),Pg=n(L,"LI",{});var KLe=s(Pg);Ase=n(KLe,"STRONG",{});var nst=s(Ase);hao=r(nst,"vilt"),nst.forEach(t),pao=r(KLe," \u2014 "),IP=n(KLe,"A",{href:!0});var sst=s(IP);_ao=r(sst,"ViltConfig"),sst.forEach(t),uao=r(KLe," (ViLT model)"),KLe.forEach(t),bao=i(L),Bg=n(L,"LI",{});var ZLe=s(Bg);Lse=n(ZLe,"STRONG",{});var lst=s(Lse);vao=r(lst,"vision-encoder-decoder"),lst.forEach(t),Fao=r(ZLe," \u2014 "),NP=n(ZLe,"A",{href:!0});var ist=s(NP);Tao=r(ist,"VisionEncoderDecoderConfig"),ist.forEach(t),Mao=r(ZLe," (Vision Encoder decoder model)"),ZLe.forEach(t),Eao=i(L),Ig=n(L,"LI",{});var eye=s(Ig);yse=n(eye,"STRONG",{});var dst=s(yse);Cao=r(dst,"vision-text-dual-encoder"),dst.forEach(t),wao=r(eye," \u2014 "),qP=n(eye,"A",{href:!0});var cst=s(qP);Aao=r(cst,"VisionTextDualEncoderConfig"),cst.forEach(t),Lao=r(eye," (VisionTextDualEncoder model)"),eye.forEach(t),yao=i(L),Ng=n(L,"LI",{});var oye=s(Ng);xse=n(oye,"STRONG",{});var fst=s(xse);xao=r(fst,"visual_bert"),fst.forEach(t),$ao=r(oye," \u2014 "),jP=n(oye,"A",{href:!0});var mst=s(jP);kao=r(mst,"VisualBertConfig"),mst.forEach(t),Sao=r(oye," (VisualBERT model)"),oye.forEach(t),Rao=i(L),qg=n(L,"LI",{});var rye=s(qg);$se=n(rye,"STRONG",{});var gst=s($se);Pao=r(gst,"vit"),gst.forEach(t),Bao=r(rye," \u2014 "),DP=n(rye,"A",{href:!0});var hst=s(DP);Iao=r(hst,"ViTConfig"),hst.forEach(t),Nao=r(rye," (ViT model)"),rye.forEach(t),qao=i(L),jg=n(L,"LI",{});var tye=s(jg);kse=n(tye,"STRONG",{});var pst=s(kse);jao=r(pst,"vit_mae"),pst.forEach(t),Dao=r(tye," \u2014 "),GP=n(tye,"A",{href:!0});var _st=s(GP);Gao=r(_st,"ViTMAEConfig"),_st.forEach(t),Oao=r(tye," (ViTMAE model)"),tye.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var aye=s(Dg);Sse=n(aye,"STRONG",{});var ust=s(Sse);Xao=r(ust,"wav2vec2"),ust.forEach(t),zao=r(aye," \u2014 "),OP=n(aye,"A",{href:!0});var bst=s(OP);Qao=r(bst,"Wav2Vec2Config"),bst.forEach(t),Wao=r(aye," (Wav2Vec2 model)"),aye.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var nye=s(Gg);Rse=n(nye,"STRONG",{});var vst=s(Rse);Uao=r(vst,"wav2vec2-conformer"),vst.forEach(t),Jao=r(nye," \u2014 "),VP=n(nye,"A",{href:!0});var Fst=s(VP);Yao=r(Fst,"Wav2Vec2ConformerConfig"),Fst.forEach(t),Kao=r(nye," (Wav2Vec2-Conformer model)"),nye.forEach(t),Zao=i(L),Og=n(L,"LI",{});var sye=s(Og);Pse=n(sye,"STRONG",{});var Tst=s(Pse);eno=r(Tst,"wavlm"),Tst.forEach(t),ono=r(sye," \u2014 "),XP=n(sye,"A",{href:!0});var Mst=s(XP);rno=r(Mst,"WavLMConfig"),Mst.forEach(t),tno=r(sye," (WavLM model)"),sye.forEach(t),ano=i(L),Vg=n(L,"LI",{});var lye=s(Vg);Bse=n(lye,"STRONG",{});var Est=s(Bse);nno=r(Est,"xglm"),Est.forEach(t),sno=r(lye," \u2014 "),zP=n(lye,"A",{href:!0});var Cst=s(zP);lno=r(Cst,"XGLMConfig"),Cst.forEach(t),ino=r(lye," (XGLM model)"),lye.forEach(t),dno=i(L),Xg=n(L,"LI",{});var iye=s(Xg);Ise=n(iye,"STRONG",{});var wst=s(Ise);cno=r(wst,"xlm"),wst.forEach(t),fno=r(iye," \u2014 "),QP=n(iye,"A",{href:!0});var Ast=s(QP);mno=r(Ast,"XLMConfig"),Ast.forEach(t),gno=r(iye," (XLM model)"),iye.forEach(t),hno=i(L),zg=n(L,"LI",{});var dye=s(zg);Nse=n(dye,"STRONG",{});var Lst=s(Nse);pno=r(Lst,"xlm-prophetnet"),Lst.forEach(t),_no=r(dye," \u2014 "),WP=n(dye,"A",{href:!0});var yst=s(WP);uno=r(yst,"XLMProphetNetConfig"),yst.forEach(t),bno=r(dye," (XLM-ProphetNet model)"),dye.forEach(t),vno=i(L),Qg=n(L,"LI",{});var cye=s(Qg);qse=n(cye,"STRONG",{});var xst=s(qse);Fno=r(xst,"xlm-roberta"),xst.forEach(t),Tno=r(cye," \u2014 "),HP=n(cye,"A",{href:!0});var $st=s(HP);Mno=r($st,"XLMRobertaConfig"),$st.forEach(t),Eno=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var fye=s(Wg);jse=n(fye,"STRONG",{});var kst=s(jse);wno=r(kst,"xlm-roberta-xl"),kst.forEach(t),Ano=r(fye," \u2014 "),UP=n(fye,"A",{href:!0});var Sst=s(UP);Lno=r(Sst,"XLMRobertaXLConfig"),Sst.forEach(t),yno=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),xno=i(L),Hg=n(L,"LI",{});var mye=s(Hg);Dse=n(mye,"STRONG",{});var Rst=s(Dse);$no=r(Rst,"xlnet"),Rst.forEach(t),kno=r(mye," \u2014 "),JP=n(mye,"A",{href:!0});var Pst=s(JP);Sno=r(Pst,"XLNetConfig"),Pst.forEach(t),Rno=r(mye," (XLNet model)"),mye.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var gye=s(Ug);Gse=n(gye,"STRONG",{});var Bst=s(Gse);Bno=r(Bst,"yolos"),Bst.forEach(t),Ino=r(gye," \u2014 "),YP=n(gye,"A",{href:!0});var Ist=s(YP);Nno=r(Ist,"YolosConfig"),Ist.forEach(t),qno=r(gye," (YOLOS model)"),gye.forEach(t),jno=i(L),Jg=n(L,"LI",{});var hye=s(Jg);Ose=n(hye,"STRONG",{});var Nst=s(Ose);Dno=r(Nst,"yoso"),Nst.forEach(t),Gno=r(hye," \u2014 "),KP=n(hye,"A",{href:!0});var qst=s(KP);Ono=r(qst,"YosoConfig"),qst.forEach(t),Vno=r(hye," (YOSO model)"),hye.forEach(t),L.forEach(t),Xno=i(nt),T(Yg.$$.fragment,nt),nt.forEach(t),zno=i(at),Kg=n(at,"DIV",{class:!0});var sQe=s(Kg);T(mL.$$.fragment,sQe),Qno=i(sQe),Vse=n(sQe,"P",{});var jst=s(Vse);Wno=r(jst,"Register a new configuration for this class."),jst.forEach(t),sQe.forEach(t),at.forEach(t),lXe=i(f),Ii=n(f,"H2",{class:!0});var lQe=s(Ii);Zg=n(lQe,"A",{id:!0,class:!0,href:!0});var Dst=s(Zg);Xse=n(Dst,"SPAN",{});var Gst=s(Xse);T(gL.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),Hno=i(lQe),zse=n(lQe,"SPAN",{});var Ost=s(zse);Uno=r(Ost,"AutoTokenizer"),Ost.forEach(t),lQe.forEach(t),iXe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(hL.$$.fragment,Ys),Jno=i(Ys),pL=n(Ys,"P",{});var iQe=s(pL);Yno=r(iQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=n(iQe,"A",{href:!0});var Vst=s(ZP);Kno=r(Vst,"AutoTokenizer.from_pretrained()"),Vst.forEach(t),Zno=r(iQe," class method."),iQe.forEach(t),eso=i(Ys),_L=n(Ys,"P",{});var dQe=s(_L);oso=r(dQe,"This class cannot be instantiated directly using "),Qse=n(dQe,"CODE",{});var Xst=s(Qse);rso=r(Xst,"__init__()"),Xst.forEach(t),tso=r(dQe," (throws an error)."),dQe.forEach(t),aso=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(uL.$$.fragment,Ks),nso=i(Ks),Wse=n(Ks,"P",{});var zst=s(Wse);sso=r(zst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zst.forEach(t),lso=i(Ks),Pa=n(Ks,"P",{});var lw=s(Pa);iso=r(lw,"The tokenizer class to instantiate is selected based on the "),Hse=n(lw,"CODE",{});var Qst=s(Hse);dso=r(Qst,"model_type"),Qst.forEach(t),cso=r(lw,` property of the config object (either
passed as an argument or loaded from `),Use=n(lw,"CODE",{});var Wst=s(Use);fso=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),mso=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jse=n(lw,"CODE",{});var Hst=s(Jse);gso=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),hso=r(lw,":"),lw.forEach(t),pso=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ek=s(jn);Yse=n(Ek,"STRONG",{});var Ust=s(Yse);_so=r(Ust,"albert"),Ust.forEach(t),uso=r(Ek," \u2014 "),eB=n(Ek,"A",{href:!0});var Jst=s(eB);bso=r(Jst,"AlbertTokenizer"),Jst.forEach(t),vso=r(Ek," or "),oB=n(Ek,"A",{href:!0});var Yst=s(oB);Fso=r(Yst,"AlbertTokenizerFast"),Yst.forEach(t),Tso=r(Ek," (ALBERT model)"),Ek.forEach(t),Mso=i(S),Dn=n(S,"LI",{});var Ck=s(Dn);Kse=n(Ck,"STRONG",{});var Kst=s(Kse);Eso=r(Kst,"bart"),Kst.forEach(t),Cso=r(Ck," \u2014 "),rB=n(Ck,"A",{href:!0});var Zst=s(rB);wso=r(Zst,"BartTokenizer"),Zst.forEach(t),Aso=r(Ck," or "),tB=n(Ck,"A",{href:!0});var elt=s(tB);Lso=r(elt,"BartTokenizerFast"),elt.forEach(t),yso=r(Ck," (BART model)"),Ck.forEach(t),xso=i(S),Gn=n(S,"LI",{});var wk=s(Gn);Zse=n(wk,"STRONG",{});var olt=s(Zse);$so=r(olt,"barthez"),olt.forEach(t),kso=r(wk," \u2014 "),aB=n(wk,"A",{href:!0});var rlt=s(aB);Sso=r(rlt,"BarthezTokenizer"),rlt.forEach(t),Rso=r(wk," or "),nB=n(wk,"A",{href:!0});var tlt=s(nB);Pso=r(tlt,"BarthezTokenizerFast"),tlt.forEach(t),Bso=r(wk," (BARThez model)"),wk.forEach(t),Iso=i(S),eh=n(S,"LI",{});var pye=s(eh);ele=n(pye,"STRONG",{});var alt=s(ele);Nso=r(alt,"bartpho"),alt.forEach(t),qso=r(pye," \u2014 "),sB=n(pye,"A",{href:!0});var nlt=s(sB);jso=r(nlt,"BartphoTokenizer"),nlt.forEach(t),Dso=r(pye," (BARTpho model)"),pye.forEach(t),Gso=i(S),On=n(S,"LI",{});var Ak=s(On);ole=n(Ak,"STRONG",{});var slt=s(ole);Oso=r(slt,"bert"),slt.forEach(t),Vso=r(Ak," \u2014 "),lB=n(Ak,"A",{href:!0});var llt=s(lB);Xso=r(llt,"BertTokenizer"),llt.forEach(t),zso=r(Ak," or "),iB=n(Ak,"A",{href:!0});var ilt=s(iB);Qso=r(ilt,"BertTokenizerFast"),ilt.forEach(t),Wso=r(Ak," (BERT model)"),Ak.forEach(t),Hso=i(S),oh=n(S,"LI",{});var _ye=s(oh);rle=n(_ye,"STRONG",{});var dlt=s(rle);Uso=r(dlt,"bert-generation"),dlt.forEach(t),Jso=r(_ye," \u2014 "),dB=n(_ye,"A",{href:!0});var clt=s(dB);Yso=r(clt,"BertGenerationTokenizer"),clt.forEach(t),Kso=r(_ye," (Bert Generation model)"),_ye.forEach(t),Zso=i(S),rh=n(S,"LI",{});var uye=s(rh);tle=n(uye,"STRONG",{});var flt=s(tle);elo=r(flt,"bert-japanese"),flt.forEach(t),olo=r(uye," \u2014 "),cB=n(uye,"A",{href:!0});var mlt=s(cB);rlo=r(mlt,"BertJapaneseTokenizer"),mlt.forEach(t),tlo=r(uye," (BertJapanese model)"),uye.forEach(t),alo=i(S),th=n(S,"LI",{});var bye=s(th);ale=n(bye,"STRONG",{});var glt=s(ale);nlo=r(glt,"bertweet"),glt.forEach(t),slo=r(bye," \u2014 "),fB=n(bye,"A",{href:!0});var hlt=s(fB);llo=r(hlt,"BertweetTokenizer"),hlt.forEach(t),ilo=r(bye," (BERTweet model)"),bye.forEach(t),dlo=i(S),Vn=n(S,"LI",{});var Lk=s(Vn);nle=n(Lk,"STRONG",{});var plt=s(nle);clo=r(plt,"big_bird"),plt.forEach(t),flo=r(Lk," \u2014 "),mB=n(Lk,"A",{href:!0});var _lt=s(mB);mlo=r(_lt,"BigBirdTokenizer"),_lt.forEach(t),glo=r(Lk," or "),gB=n(Lk,"A",{href:!0});var ult=s(gB);hlo=r(ult,"BigBirdTokenizerFast"),ult.forEach(t),plo=r(Lk," (BigBird model)"),Lk.forEach(t),_lo=i(S),Xn=n(S,"LI",{});var yk=s(Xn);sle=n(yk,"STRONG",{});var blt=s(sle);ulo=r(blt,"bigbird_pegasus"),blt.forEach(t),blo=r(yk," \u2014 "),hB=n(yk,"A",{href:!0});var vlt=s(hB);vlo=r(vlt,"PegasusTokenizer"),vlt.forEach(t),Flo=r(yk," or "),pB=n(yk,"A",{href:!0});var Flt=s(pB);Tlo=r(Flt,"PegasusTokenizerFast"),Flt.forEach(t),Mlo=r(yk," (BigBird-Pegasus model)"),yk.forEach(t),Elo=i(S),zn=n(S,"LI",{});var xk=s(zn);lle=n(xk,"STRONG",{});var Tlt=s(lle);Clo=r(Tlt,"blenderbot"),Tlt.forEach(t),wlo=r(xk," \u2014 "),_B=n(xk,"A",{href:!0});var Mlt=s(_B);Alo=r(Mlt,"BlenderbotTokenizer"),Mlt.forEach(t),Llo=r(xk," or "),uB=n(xk,"A",{href:!0});var Elt=s(uB);ylo=r(Elt,"BlenderbotTokenizerFast"),Elt.forEach(t),xlo=r(xk," (Blenderbot model)"),xk.forEach(t),$lo=i(S),ah=n(S,"LI",{});var vye=s(ah);ile=n(vye,"STRONG",{});var Clt=s(ile);klo=r(Clt,"blenderbot-small"),Clt.forEach(t),Slo=r(vye," \u2014 "),bB=n(vye,"A",{href:!0});var wlt=s(bB);Rlo=r(wlt,"BlenderbotSmallTokenizer"),wlt.forEach(t),Plo=r(vye," (BlenderbotSmall model)"),vye.forEach(t),Blo=i(S),nh=n(S,"LI",{});var Fye=s(nh);dle=n(Fye,"STRONG",{});var Alt=s(dle);Ilo=r(Alt,"bloom"),Alt.forEach(t),Nlo=r(Fye," \u2014 "),vB=n(Fye,"A",{href:!0});var Llt=s(vB);qlo=r(Llt,"BloomTokenizerFast"),Llt.forEach(t),jlo=r(Fye," (BLOOM model)"),Fye.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var Tye=s(sh);cle=n(Tye,"STRONG",{});var ylt=s(cle);Glo=r(ylt,"byt5"),ylt.forEach(t),Olo=r(Tye," \u2014 "),FB=n(Tye,"A",{href:!0});var xlt=s(FB);Vlo=r(xlt,"ByT5Tokenizer"),xlt.forEach(t),Xlo=r(Tye," (ByT5 model)"),Tye.forEach(t),zlo=i(S),Qn=n(S,"LI",{});var $k=s(Qn);fle=n($k,"STRONG",{});var $lt=s(fle);Qlo=r($lt,"camembert"),$lt.forEach(t),Wlo=r($k," \u2014 "),TB=n($k,"A",{href:!0});var klt=s(TB);Hlo=r(klt,"CamembertTokenizer"),klt.forEach(t),Ulo=r($k," or "),MB=n($k,"A",{href:!0});var Slt=s(MB);Jlo=r(Slt,"CamembertTokenizerFast"),Slt.forEach(t),Ylo=r($k," (CamemBERT model)"),$k.forEach(t),Klo=i(S),lh=n(S,"LI",{});var Mye=s(lh);mle=n(Mye,"STRONG",{});var Rlt=s(mle);Zlo=r(Rlt,"canine"),Rlt.forEach(t),eio=r(Mye," \u2014 "),EB=n(Mye,"A",{href:!0});var Plt=s(EB);oio=r(Plt,"CanineTokenizer"),Plt.forEach(t),rio=r(Mye," (CANINE model)"),Mye.forEach(t),tio=i(S),Wn=n(S,"LI",{});var kk=s(Wn);gle=n(kk,"STRONG",{});var Blt=s(gle);aio=r(Blt,"clip"),Blt.forEach(t),nio=r(kk," \u2014 "),CB=n(kk,"A",{href:!0});var Ilt=s(CB);sio=r(Ilt,"CLIPTokenizer"),Ilt.forEach(t),lio=r(kk," or "),wB=n(kk,"A",{href:!0});var Nlt=s(wB);iio=r(Nlt,"CLIPTokenizerFast"),Nlt.forEach(t),dio=r(kk," (CLIP model)"),kk.forEach(t),cio=i(S),Hn=n(S,"LI",{});var Sk=s(Hn);hle=n(Sk,"STRONG",{});var qlt=s(hle);fio=r(qlt,"codegen"),qlt.forEach(t),mio=r(Sk," \u2014 "),AB=n(Sk,"A",{href:!0});var jlt=s(AB);gio=r(jlt,"CodeGenTokenizer"),jlt.forEach(t),hio=r(Sk," or "),LB=n(Sk,"A",{href:!0});var Dlt=s(LB);pio=r(Dlt,"CodeGenTokenizerFast"),Dlt.forEach(t),_io=r(Sk," (CodeGen model)"),Sk.forEach(t),uio=i(S),Un=n(S,"LI",{});var Rk=s(Un);ple=n(Rk,"STRONG",{});var Glt=s(ple);bio=r(Glt,"convbert"),Glt.forEach(t),vio=r(Rk," \u2014 "),yB=n(Rk,"A",{href:!0});var Olt=s(yB);Fio=r(Olt,"ConvBertTokenizer"),Olt.forEach(t),Tio=r(Rk," or "),xB=n(Rk,"A",{href:!0});var Vlt=s(xB);Mio=r(Vlt,"ConvBertTokenizerFast"),Vlt.forEach(t),Eio=r(Rk," (ConvBERT model)"),Rk.forEach(t),Cio=i(S),Jn=n(S,"LI",{});var Pk=s(Jn);_le=n(Pk,"STRONG",{});var Xlt=s(_le);wio=r(Xlt,"cpm"),Xlt.forEach(t),Aio=r(Pk," \u2014 "),$B=n(Pk,"A",{href:!0});var zlt=s($B);Lio=r(zlt,"CpmTokenizer"),zlt.forEach(t),yio=r(Pk," or "),kB=n(Pk,"A",{href:!0});var Qlt=s(kB);xio=r(Qlt,"CpmTokenizerFast"),Qlt.forEach(t),$io=r(Pk," (CPM model)"),Pk.forEach(t),kio=i(S),ih=n(S,"LI",{});var Eye=s(ih);ule=n(Eye,"STRONG",{});var Wlt=s(ule);Sio=r(Wlt,"ctrl"),Wlt.forEach(t),Rio=r(Eye," \u2014 "),SB=n(Eye,"A",{href:!0});var Hlt=s(SB);Pio=r(Hlt,"CTRLTokenizer"),Hlt.forEach(t),Bio=r(Eye," (CTRL model)"),Eye.forEach(t),Iio=i(S),Yn=n(S,"LI",{});var Bk=s(Yn);ble=n(Bk,"STRONG",{});var Ult=s(ble);Nio=r(Ult,"data2vec-text"),Ult.forEach(t),qio=r(Bk," \u2014 "),RB=n(Bk,"A",{href:!0});var Jlt=s(RB);jio=r(Jlt,"RobertaTokenizer"),Jlt.forEach(t),Dio=r(Bk," or "),PB=n(Bk,"A",{href:!0});var Ylt=s(PB);Gio=r(Ylt,"RobertaTokenizerFast"),Ylt.forEach(t),Oio=r(Bk," (Data2VecText model)"),Bk.forEach(t),Vio=i(S),Kn=n(S,"LI",{});var Ik=s(Kn);vle=n(Ik,"STRONG",{});var Klt=s(vle);Xio=r(Klt,"deberta"),Klt.forEach(t),zio=r(Ik," \u2014 "),BB=n(Ik,"A",{href:!0});var Zlt=s(BB);Qio=r(Zlt,"DebertaTokenizer"),Zlt.forEach(t),Wio=r(Ik," or "),IB=n(Ik,"A",{href:!0});var eit=s(IB);Hio=r(eit,"DebertaTokenizerFast"),eit.forEach(t),Uio=r(Ik," (DeBERTa model)"),Ik.forEach(t),Jio=i(S),Zn=n(S,"LI",{});var Nk=s(Zn);Fle=n(Nk,"STRONG",{});var oit=s(Fle);Yio=r(oit,"deberta-v2"),oit.forEach(t),Kio=r(Nk," \u2014 "),NB=n(Nk,"A",{href:!0});var rit=s(NB);Zio=r(rit,"DebertaV2Tokenizer"),rit.forEach(t),edo=r(Nk," or "),qB=n(Nk,"A",{href:!0});var tit=s(qB);odo=r(tit,"DebertaV2TokenizerFast"),tit.forEach(t),rdo=r(Nk," (DeBERTa-v2 model)"),Nk.forEach(t),tdo=i(S),es=n(S,"LI",{});var qk=s(es);Tle=n(qk,"STRONG",{});var ait=s(Tle);ado=r(ait,"distilbert"),ait.forEach(t),ndo=r(qk," \u2014 "),jB=n(qk,"A",{href:!0});var nit=s(jB);sdo=r(nit,"DistilBertTokenizer"),nit.forEach(t),ldo=r(qk," or "),DB=n(qk,"A",{href:!0});var sit=s(DB);ido=r(sit,"DistilBertTokenizerFast"),sit.forEach(t),ddo=r(qk," (DistilBERT model)"),qk.forEach(t),cdo=i(S),os=n(S,"LI",{});var jk=s(os);Mle=n(jk,"STRONG",{});var lit=s(Mle);fdo=r(lit,"dpr"),lit.forEach(t),mdo=r(jk," \u2014 "),GB=n(jk,"A",{href:!0});var iit=s(GB);gdo=r(iit,"DPRQuestionEncoderTokenizer"),iit.forEach(t),hdo=r(jk," or "),OB=n(jk,"A",{href:!0});var dit=s(OB);pdo=r(dit,"DPRQuestionEncoderTokenizerFast"),dit.forEach(t),_do=r(jk," (DPR model)"),jk.forEach(t),udo=i(S),rs=n(S,"LI",{});var Dk=s(rs);Ele=n(Dk,"STRONG",{});var cit=s(Ele);bdo=r(cit,"electra"),cit.forEach(t),vdo=r(Dk," \u2014 "),VB=n(Dk,"A",{href:!0});var fit=s(VB);Fdo=r(fit,"ElectraTokenizer"),fit.forEach(t),Tdo=r(Dk," or "),XB=n(Dk,"A",{href:!0});var mit=s(XB);Mdo=r(mit,"ElectraTokenizerFast"),mit.forEach(t),Edo=r(Dk," (ELECTRA model)"),Dk.forEach(t),Cdo=i(S),dh=n(S,"LI",{});var Cye=s(dh);Cle=n(Cye,"STRONG",{});var git=s(Cle);wdo=r(git,"flaubert"),git.forEach(t),Ado=r(Cye," \u2014 "),zB=n(Cye,"A",{href:!0});var hit=s(zB);Ldo=r(hit,"FlaubertTokenizer"),hit.forEach(t),ydo=r(Cye," (FlauBERT model)"),Cye.forEach(t),xdo=i(S),ts=n(S,"LI",{});var Gk=s(ts);wle=n(Gk,"STRONG",{});var pit=s(wle);$do=r(pit,"fnet"),pit.forEach(t),kdo=r(Gk," \u2014 "),QB=n(Gk,"A",{href:!0});var _it=s(QB);Sdo=r(_it,"FNetTokenizer"),_it.forEach(t),Rdo=r(Gk," or "),WB=n(Gk,"A",{href:!0});var uit=s(WB);Pdo=r(uit,"FNetTokenizerFast"),uit.forEach(t),Bdo=r(Gk," (FNet model)"),Gk.forEach(t),Ido=i(S),ch=n(S,"LI",{});var wye=s(ch);Ale=n(wye,"STRONG",{});var bit=s(Ale);Ndo=r(bit,"fsmt"),bit.forEach(t),qdo=r(wye," \u2014 "),HB=n(wye,"A",{href:!0});var vit=s(HB);jdo=r(vit,"FSMTTokenizer"),vit.forEach(t),Ddo=r(wye," (FairSeq Machine-Translation model)"),wye.forEach(t),Gdo=i(S),as=n(S,"LI",{});var Ok=s(as);Lle=n(Ok,"STRONG",{});var Fit=s(Lle);Odo=r(Fit,"funnel"),Fit.forEach(t),Vdo=r(Ok," \u2014 "),UB=n(Ok,"A",{href:!0});var Tit=s(UB);Xdo=r(Tit,"FunnelTokenizer"),Tit.forEach(t),zdo=r(Ok," or "),JB=n(Ok,"A",{href:!0});var Mit=s(JB);Qdo=r(Mit,"FunnelTokenizerFast"),Mit.forEach(t),Wdo=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Hdo=i(S),ns=n(S,"LI",{});var Vk=s(ns);yle=n(Vk,"STRONG",{});var Eit=s(yle);Udo=r(Eit,"gpt2"),Eit.forEach(t),Jdo=r(Vk," \u2014 "),YB=n(Vk,"A",{href:!0});var Cit=s(YB);Ydo=r(Cit,"GPT2Tokenizer"),Cit.forEach(t),Kdo=r(Vk," or "),KB=n(Vk,"A",{href:!0});var wit=s(KB);Zdo=r(wit,"GPT2TokenizerFast"),wit.forEach(t),eco=r(Vk," (OpenAI GPT-2 model)"),Vk.forEach(t),oco=i(S),ss=n(S,"LI",{});var Xk=s(ss);xle=n(Xk,"STRONG",{});var Ait=s(xle);rco=r(Ait,"gpt_neo"),Ait.forEach(t),tco=r(Xk," \u2014 "),ZB=n(Xk,"A",{href:!0});var Lit=s(ZB);aco=r(Lit,"GPT2Tokenizer"),Lit.forEach(t),nco=r(Xk," or "),eI=n(Xk,"A",{href:!0});var yit=s(eI);sco=r(yit,"GPT2TokenizerFast"),yit.forEach(t),lco=r(Xk," (GPT Neo model)"),Xk.forEach(t),ico=i(S),fh=n(S,"LI",{});var Aye=s(fh);$le=n(Aye,"STRONG",{});var xit=s($le);dco=r(xit,"gpt_neox"),xit.forEach(t),cco=r(Aye," \u2014 "),oI=n(Aye,"A",{href:!0});var $it=s(oI);fco=r($it,"GPTNeoXTokenizerFast"),$it.forEach(t),mco=r(Aye," (GPT NeoX model)"),Aye.forEach(t),gco=i(S),ls=n(S,"LI",{});var zk=s(ls);kle=n(zk,"STRONG",{});var kit=s(kle);hco=r(kit,"gptj"),kit.forEach(t),pco=r(zk," \u2014 "),rI=n(zk,"A",{href:!0});var Sit=s(rI);_co=r(Sit,"GPT2Tokenizer"),Sit.forEach(t),uco=r(zk," or "),tI=n(zk,"A",{href:!0});var Rit=s(tI);bco=r(Rit,"GPT2TokenizerFast"),Rit.forEach(t),vco=r(zk," (GPT-J model)"),zk.forEach(t),Fco=i(S),is=n(S,"LI",{});var Qk=s(is);Sle=n(Qk,"STRONG",{});var Pit=s(Sle);Tco=r(Pit,"groupvit"),Pit.forEach(t),Mco=r(Qk," \u2014 "),aI=n(Qk,"A",{href:!0});var Bit=s(aI);Eco=r(Bit,"CLIPTokenizer"),Bit.forEach(t),Cco=r(Qk," or "),nI=n(Qk,"A",{href:!0});var Iit=s(nI);wco=r(Iit,"CLIPTokenizerFast"),Iit.forEach(t),Aco=r(Qk," (GroupViT model)"),Qk.forEach(t),Lco=i(S),ds=n(S,"LI",{});var Wk=s(ds);Rle=n(Wk,"STRONG",{});var Nit=s(Rle);yco=r(Nit,"herbert"),Nit.forEach(t),xco=r(Wk," \u2014 "),sI=n(Wk,"A",{href:!0});var qit=s(sI);$co=r(qit,"HerbertTokenizer"),qit.forEach(t),kco=r(Wk," or "),lI=n(Wk,"A",{href:!0});var jit=s(lI);Sco=r(jit,"HerbertTokenizerFast"),jit.forEach(t),Rco=r(Wk," (HerBERT model)"),Wk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var Lye=s(mh);Ple=n(Lye,"STRONG",{});var Dit=s(Ple);Bco=r(Dit,"hubert"),Dit.forEach(t),Ico=r(Lye," \u2014 "),iI=n(Lye,"A",{href:!0});var Git=s(iI);Nco=r(Git,"Wav2Vec2CTCTokenizer"),Git.forEach(t),qco=r(Lye," (Hubert model)"),Lye.forEach(t),jco=i(S),cs=n(S,"LI",{});var Hk=s(cs);Ble=n(Hk,"STRONG",{});var Oit=s(Ble);Dco=r(Oit,"ibert"),Oit.forEach(t),Gco=r(Hk," \u2014 "),dI=n(Hk,"A",{href:!0});var Vit=s(dI);Oco=r(Vit,"RobertaTokenizer"),Vit.forEach(t),Vco=r(Hk," or "),cI=n(Hk,"A",{href:!0});var Xit=s(cI);Xco=r(Xit,"RobertaTokenizerFast"),Xit.forEach(t),zco=r(Hk," (I-BERT model)"),Hk.forEach(t),Qco=i(S),gh=n(S,"LI",{});var yye=s(gh);Ile=n(yye,"STRONG",{});var zit=s(Ile);Wco=r(zit,"jukebox"),zit.forEach(t),Hco=r(yye," \u2014 "),Nle=n(yye,"CODE",{});var Qit=s(Nle);Uco=r(Qit,"JukeboxTokenizer"),Qit.forEach(t),Jco=r(yye," (Jukebox model)"),yye.forEach(t),Yco=i(S),fs=n(S,"LI",{});var Uk=s(fs);qle=n(Uk,"STRONG",{});var Wit=s(qle);Kco=r(Wit,"layoutlm"),Wit.forEach(t),Zco=r(Uk," \u2014 "),fI=n(Uk,"A",{href:!0});var Hit=s(fI);efo=r(Hit,"LayoutLMTokenizer"),Hit.forEach(t),ofo=r(Uk," or "),mI=n(Uk,"A",{href:!0});var Uit=s(mI);rfo=r(Uit,"LayoutLMTokenizerFast"),Uit.forEach(t),tfo=r(Uk," (LayoutLM model)"),Uk.forEach(t),afo=i(S),ms=n(S,"LI",{});var Jk=s(ms);jle=n(Jk,"STRONG",{});var Jit=s(jle);nfo=r(Jit,"layoutlmv2"),Jit.forEach(t),sfo=r(Jk," \u2014 "),gI=n(Jk,"A",{href:!0});var Yit=s(gI);lfo=r(Yit,"LayoutLMv2Tokenizer"),Yit.forEach(t),ifo=r(Jk," or "),hI=n(Jk,"A",{href:!0});var Kit=s(hI);dfo=r(Kit,"LayoutLMv2TokenizerFast"),Kit.forEach(t),cfo=r(Jk," (LayoutLMv2 model)"),Jk.forEach(t),ffo=i(S),gs=n(S,"LI",{});var Yk=s(gs);Dle=n(Yk,"STRONG",{});var Zit=s(Dle);mfo=r(Zit,"layoutlmv3"),Zit.forEach(t),gfo=r(Yk," \u2014 "),pI=n(Yk,"A",{href:!0});var edt=s(pI);hfo=r(edt,"LayoutLMv3Tokenizer"),edt.forEach(t),pfo=r(Yk," or "),_I=n(Yk,"A",{href:!0});var odt=s(_I);_fo=r(odt,"LayoutLMv3TokenizerFast"),odt.forEach(t),ufo=r(Yk," (LayoutLMv3 model)"),Yk.forEach(t),bfo=i(S),hs=n(S,"LI",{});var Kk=s(hs);Gle=n(Kk,"STRONG",{});var rdt=s(Gle);vfo=r(rdt,"layoutxlm"),rdt.forEach(t),Ffo=r(Kk," \u2014 "),uI=n(Kk,"A",{href:!0});var tdt=s(uI);Tfo=r(tdt,"LayoutXLMTokenizer"),tdt.forEach(t),Mfo=r(Kk," or "),bI=n(Kk,"A",{href:!0});var adt=s(bI);Efo=r(adt,"LayoutXLMTokenizerFast"),adt.forEach(t),Cfo=r(Kk," (LayoutXLM model)"),Kk.forEach(t),wfo=i(S),ps=n(S,"LI",{});var Zk=s(ps);Ole=n(Zk,"STRONG",{});var ndt=s(Ole);Afo=r(ndt,"led"),ndt.forEach(t),Lfo=r(Zk," \u2014 "),vI=n(Zk,"A",{href:!0});var sdt=s(vI);yfo=r(sdt,"LEDTokenizer"),sdt.forEach(t),xfo=r(Zk," or "),FI=n(Zk,"A",{href:!0});var ldt=s(FI);$fo=r(ldt,"LEDTokenizerFast"),ldt.forEach(t),kfo=r(Zk," (LED model)"),Zk.forEach(t),Sfo=i(S),_s=n(S,"LI",{});var eS=s(_s);Vle=n(eS,"STRONG",{});var idt=s(Vle);Rfo=r(idt,"longformer"),idt.forEach(t),Pfo=r(eS," \u2014 "),TI=n(eS,"A",{href:!0});var ddt=s(TI);Bfo=r(ddt,"LongformerTokenizer"),ddt.forEach(t),Ifo=r(eS," or "),MI=n(eS,"A",{href:!0});var cdt=s(MI);Nfo=r(cdt,"LongformerTokenizerFast"),cdt.forEach(t),qfo=r(eS," (Longformer model)"),eS.forEach(t),jfo=i(S),us=n(S,"LI",{});var oS=s(us);Xle=n(oS,"STRONG",{});var fdt=s(Xle);Dfo=r(fdt,"longt5"),fdt.forEach(t),Gfo=r(oS," \u2014 "),EI=n(oS,"A",{href:!0});var mdt=s(EI);Ofo=r(mdt,"T5Tokenizer"),mdt.forEach(t),Vfo=r(oS," or "),CI=n(oS,"A",{href:!0});var gdt=s(CI);Xfo=r(gdt,"T5TokenizerFast"),gdt.forEach(t),zfo=r(oS," (LongT5 model)"),oS.forEach(t),Qfo=i(S),hh=n(S,"LI",{});var xye=s(hh);zle=n(xye,"STRONG",{});var hdt=s(zle);Wfo=r(hdt,"luke"),hdt.forEach(t),Hfo=r(xye," \u2014 "),wI=n(xye,"A",{href:!0});var pdt=s(wI);Ufo=r(pdt,"LukeTokenizer"),pdt.forEach(t),Jfo=r(xye," (LUKE model)"),xye.forEach(t),Yfo=i(S),bs=n(S,"LI",{});var rS=s(bs);Qle=n(rS,"STRONG",{});var _dt=s(Qle);Kfo=r(_dt,"lxmert"),_dt.forEach(t),Zfo=r(rS," \u2014 "),AI=n(rS,"A",{href:!0});var udt=s(AI);emo=r(udt,"LxmertTokenizer"),udt.forEach(t),omo=r(rS," or "),LI=n(rS,"A",{href:!0});var bdt=s(LI);rmo=r(bdt,"LxmertTokenizerFast"),bdt.forEach(t),tmo=r(rS," (LXMERT model)"),rS.forEach(t),amo=i(S),ph=n(S,"LI",{});var $ye=s(ph);Wle=n($ye,"STRONG",{});var vdt=s(Wle);nmo=r(vdt,"m2m_100"),vdt.forEach(t),smo=r($ye," \u2014 "),yI=n($ye,"A",{href:!0});var Fdt=s(yI);lmo=r(Fdt,"M2M100Tokenizer"),Fdt.forEach(t),imo=r($ye," (M2M100 model)"),$ye.forEach(t),dmo=i(S),_h=n(S,"LI",{});var kye=s(_h);Hle=n(kye,"STRONG",{});var Tdt=s(Hle);cmo=r(Tdt,"marian"),Tdt.forEach(t),fmo=r(kye," \u2014 "),xI=n(kye,"A",{href:!0});var Mdt=s(xI);mmo=r(Mdt,"MarianTokenizer"),Mdt.forEach(t),gmo=r(kye," (Marian model)"),kye.forEach(t),hmo=i(S),vs=n(S,"LI",{});var tS=s(vs);Ule=n(tS,"STRONG",{});var Edt=s(Ule);pmo=r(Edt,"mbart"),Edt.forEach(t),_mo=r(tS," \u2014 "),$I=n(tS,"A",{href:!0});var Cdt=s($I);umo=r(Cdt,"MBartTokenizer"),Cdt.forEach(t),bmo=r(tS," or "),kI=n(tS,"A",{href:!0});var wdt=s(kI);vmo=r(wdt,"MBartTokenizerFast"),wdt.forEach(t),Fmo=r(tS," (mBART model)"),tS.forEach(t),Tmo=i(S),Fs=n(S,"LI",{});var aS=s(Fs);Jle=n(aS,"STRONG",{});var Adt=s(Jle);Mmo=r(Adt,"mbart50"),Adt.forEach(t),Emo=r(aS," \u2014 "),SI=n(aS,"A",{href:!0});var Ldt=s(SI);Cmo=r(Ldt,"MBart50Tokenizer"),Ldt.forEach(t),wmo=r(aS," or "),RI=n(aS,"A",{href:!0});var ydt=s(RI);Amo=r(ydt,"MBart50TokenizerFast"),ydt.forEach(t),Lmo=r(aS," (mBART-50 model)"),aS.forEach(t),ymo=i(S),Ts=n(S,"LI",{});var nS=s(Ts);Yle=n(nS,"STRONG",{});var xdt=s(Yle);xmo=r(xdt,"megatron-bert"),xdt.forEach(t),$mo=r(nS," \u2014 "),PI=n(nS,"A",{href:!0});var $dt=s(PI);kmo=r($dt,"BertTokenizer"),$dt.forEach(t),Smo=r(nS," or "),BI=n(nS,"A",{href:!0});var kdt=s(BI);Rmo=r(kdt,"BertTokenizerFast"),kdt.forEach(t),Pmo=r(nS," (Megatron-BERT model)"),nS.forEach(t),Bmo=i(S),uh=n(S,"LI",{});var Sye=s(uh);Kle=n(Sye,"STRONG",{});var Sdt=s(Kle);Imo=r(Sdt,"mluke"),Sdt.forEach(t),Nmo=r(Sye," \u2014 "),II=n(Sye,"A",{href:!0});var Rdt=s(II);qmo=r(Rdt,"MLukeTokenizer"),Rdt.forEach(t),jmo=r(Sye," (mLUKE model)"),Sye.forEach(t),Dmo=i(S),Ms=n(S,"LI",{});var sS=s(Ms);Zle=n(sS,"STRONG",{});var Pdt=s(Zle);Gmo=r(Pdt,"mobilebert"),Pdt.forEach(t),Omo=r(sS," \u2014 "),NI=n(sS,"A",{href:!0});var Bdt=s(NI);Vmo=r(Bdt,"MobileBertTokenizer"),Bdt.forEach(t),Xmo=r(sS," or "),qI=n(sS,"A",{href:!0});var Idt=s(qI);zmo=r(Idt,"MobileBertTokenizerFast"),Idt.forEach(t),Qmo=r(sS," (MobileBERT model)"),sS.forEach(t),Wmo=i(S),Es=n(S,"LI",{});var lS=s(Es);eie=n(lS,"STRONG",{});var Ndt=s(eie);Hmo=r(Ndt,"mpnet"),Ndt.forEach(t),Umo=r(lS," \u2014 "),jI=n(lS,"A",{href:!0});var qdt=s(jI);Jmo=r(qdt,"MPNetTokenizer"),qdt.forEach(t),Ymo=r(lS," or "),DI=n(lS,"A",{href:!0});var jdt=s(DI);Kmo=r(jdt,"MPNetTokenizerFast"),jdt.forEach(t),Zmo=r(lS," (MPNet model)"),lS.forEach(t),ego=i(S),Cs=n(S,"LI",{});var iS=s(Cs);oie=n(iS,"STRONG",{});var Ddt=s(oie);ogo=r(Ddt,"mt5"),Ddt.forEach(t),rgo=r(iS," \u2014 "),GI=n(iS,"A",{href:!0});var Gdt=s(GI);tgo=r(Gdt,"MT5Tokenizer"),Gdt.forEach(t),ago=r(iS," or "),OI=n(iS,"A",{href:!0});var Odt=s(OI);ngo=r(Odt,"MT5TokenizerFast"),Odt.forEach(t),sgo=r(iS," (MT5 model)"),iS.forEach(t),lgo=i(S),ws=n(S,"LI",{});var dS=s(ws);rie=n(dS,"STRONG",{});var Vdt=s(rie);igo=r(Vdt,"mvp"),Vdt.forEach(t),dgo=r(dS," \u2014 "),VI=n(dS,"A",{href:!0});var Xdt=s(VI);cgo=r(Xdt,"MvpTokenizer"),Xdt.forEach(t),fgo=r(dS," or "),XI=n(dS,"A",{href:!0});var zdt=s(XI);mgo=r(zdt,"MvpTokenizerFast"),zdt.forEach(t),ggo=r(dS," (MVP model)"),dS.forEach(t),hgo=i(S),As=n(S,"LI",{});var cS=s(As);tie=n(cS,"STRONG",{});var Qdt=s(tie);pgo=r(Qdt,"nezha"),Qdt.forEach(t),_go=r(cS," \u2014 "),zI=n(cS,"A",{href:!0});var Wdt=s(zI);ugo=r(Wdt,"BertTokenizer"),Wdt.forEach(t),bgo=r(cS," or "),QI=n(cS,"A",{href:!0});var Hdt=s(QI);vgo=r(Hdt,"BertTokenizerFast"),Hdt.forEach(t),Fgo=r(cS," (Nezha model)"),cS.forEach(t),Tgo=i(S),Ls=n(S,"LI",{});var fS=s(Ls);aie=n(fS,"STRONG",{});var Udt=s(aie);Mgo=r(Udt,"nystromformer"),Udt.forEach(t),Ego=r(fS," \u2014 "),WI=n(fS,"A",{href:!0});var Jdt=s(WI);Cgo=r(Jdt,"AlbertTokenizer"),Jdt.forEach(t),wgo=r(fS," or "),HI=n(fS,"A",{href:!0});var Ydt=s(HI);Ago=r(Ydt,"AlbertTokenizerFast"),Ydt.forEach(t),Lgo=r(fS," (Nystr\xF6mformer model)"),fS.forEach(t),ygo=i(S),ys=n(S,"LI",{});var mS=s(ys);nie=n(mS,"STRONG",{});var Kdt=s(nie);xgo=r(Kdt,"openai-gpt"),Kdt.forEach(t),$go=r(mS," \u2014 "),UI=n(mS,"A",{href:!0});var Zdt=s(UI);kgo=r(Zdt,"OpenAIGPTTokenizer"),Zdt.forEach(t),Sgo=r(mS," or "),JI=n(mS,"A",{href:!0});var ect=s(JI);Rgo=r(ect,"OpenAIGPTTokenizerFast"),ect.forEach(t),Pgo=r(mS," (OpenAI GPT model)"),mS.forEach(t),Bgo=i(S),bh=n(S,"LI",{});var Rye=s(bh);sie=n(Rye,"STRONG",{});var oct=s(sie);Igo=r(oct,"opt"),oct.forEach(t),Ngo=r(Rye," \u2014 "),YI=n(Rye,"A",{href:!0});var rct=s(YI);qgo=r(rct,"GPT2Tokenizer"),rct.forEach(t),jgo=r(Rye," (OPT model)"),Rye.forEach(t),Dgo=i(S),xs=n(S,"LI",{});var gS=s(xs);lie=n(gS,"STRONG",{});var tct=s(lie);Ggo=r(tct,"pegasus"),tct.forEach(t),Ogo=r(gS," \u2014 "),KI=n(gS,"A",{href:!0});var act=s(KI);Vgo=r(act,"PegasusTokenizer"),act.forEach(t),Xgo=r(gS," or "),ZI=n(gS,"A",{href:!0});var nct=s(ZI);zgo=r(nct,"PegasusTokenizerFast"),nct.forEach(t),Qgo=r(gS," (Pegasus model)"),gS.forEach(t),Wgo=i(S),vh=n(S,"LI",{});var Pye=s(vh);iie=n(Pye,"STRONG",{});var sct=s(iie);Hgo=r(sct,"perceiver"),sct.forEach(t),Ugo=r(Pye," \u2014 "),eN=n(Pye,"A",{href:!0});var lct=s(eN);Jgo=r(lct,"PerceiverTokenizer"),lct.forEach(t),Ygo=r(Pye," (Perceiver model)"),Pye.forEach(t),Kgo=i(S),Fh=n(S,"LI",{});var Bye=s(Fh);die=n(Bye,"STRONG",{});var ict=s(die);Zgo=r(ict,"phobert"),ict.forEach(t),eho=r(Bye," \u2014 "),oN=n(Bye,"A",{href:!0});var dct=s(oN);oho=r(dct,"PhobertTokenizer"),dct.forEach(t),rho=r(Bye," (PhoBERT model)"),Bye.forEach(t),tho=i(S),Th=n(S,"LI",{});var Iye=s(Th);cie=n(Iye,"STRONG",{});var cct=s(cie);aho=r(cct,"plbart"),cct.forEach(t),nho=r(Iye," \u2014 "),rN=n(Iye,"A",{href:!0});var fct=s(rN);sho=r(fct,"PLBartTokenizer"),fct.forEach(t),lho=r(Iye," (PLBart model)"),Iye.forEach(t),iho=i(S),Mh=n(S,"LI",{});var Nye=s(Mh);fie=n(Nye,"STRONG",{});var mct=s(fie);dho=r(mct,"prophetnet"),mct.forEach(t),cho=r(Nye," \u2014 "),tN=n(Nye,"A",{href:!0});var gct=s(tN);fho=r(gct,"ProphetNetTokenizer"),gct.forEach(t),mho=r(Nye," (ProphetNet model)"),Nye.forEach(t),gho=i(S),$s=n(S,"LI",{});var hS=s($s);mie=n(hS,"STRONG",{});var hct=s(mie);hho=r(hct,"qdqbert"),hct.forEach(t),pho=r(hS," \u2014 "),aN=n(hS,"A",{href:!0});var pct=s(aN);_ho=r(pct,"BertTokenizer"),pct.forEach(t),uho=r(hS," or "),nN=n(hS,"A",{href:!0});var _ct=s(nN);bho=r(_ct,"BertTokenizerFast"),_ct.forEach(t),vho=r(hS," (QDQBert model)"),hS.forEach(t),Fho=i(S),Eh=n(S,"LI",{});var qye=s(Eh);gie=n(qye,"STRONG",{});var uct=s(gie);Tho=r(uct,"rag"),uct.forEach(t),Mho=r(qye," \u2014 "),sN=n(qye,"A",{href:!0});var bct=s(sN);Eho=r(bct,"RagTokenizer"),bct.forEach(t),Cho=r(qye," (RAG model)"),qye.forEach(t),who=i(S),ks=n(S,"LI",{});var pS=s(ks);hie=n(pS,"STRONG",{});var vct=s(hie);Aho=r(vct,"realm"),vct.forEach(t),Lho=r(pS," \u2014 "),lN=n(pS,"A",{href:!0});var Fct=s(lN);yho=r(Fct,"RealmTokenizer"),Fct.forEach(t),xho=r(pS," or "),iN=n(pS,"A",{href:!0});var Tct=s(iN);$ho=r(Tct,"RealmTokenizerFast"),Tct.forEach(t),kho=r(pS," (REALM model)"),pS.forEach(t),Sho=i(S),Ss=n(S,"LI",{});var _S=s(Ss);pie=n(_S,"STRONG",{});var Mct=s(pie);Rho=r(Mct,"reformer"),Mct.forEach(t),Pho=r(_S," \u2014 "),dN=n(_S,"A",{href:!0});var Ect=s(dN);Bho=r(Ect,"ReformerTokenizer"),Ect.forEach(t),Iho=r(_S," or "),cN=n(_S,"A",{href:!0});var Cct=s(cN);Nho=r(Cct,"ReformerTokenizerFast"),Cct.forEach(t),qho=r(_S," (Reformer model)"),_S.forEach(t),jho=i(S),Rs=n(S,"LI",{});var uS=s(Rs);_ie=n(uS,"STRONG",{});var wct=s(_ie);Dho=r(wct,"rembert"),wct.forEach(t),Gho=r(uS," \u2014 "),fN=n(uS,"A",{href:!0});var Act=s(fN);Oho=r(Act,"RemBertTokenizer"),Act.forEach(t),Vho=r(uS," or "),mN=n(uS,"A",{href:!0});var Lct=s(mN);Xho=r(Lct,"RemBertTokenizerFast"),Lct.forEach(t),zho=r(uS," (RemBERT model)"),uS.forEach(t),Qho=i(S),Ps=n(S,"LI",{});var bS=s(Ps);uie=n(bS,"STRONG",{});var yct=s(uie);Who=r(yct,"retribert"),yct.forEach(t),Hho=r(bS," \u2014 "),gN=n(bS,"A",{href:!0});var xct=s(gN);Uho=r(xct,"RetriBertTokenizer"),xct.forEach(t),Jho=r(bS," or "),hN=n(bS,"A",{href:!0});var $ct=s(hN);Yho=r($ct,"RetriBertTokenizerFast"),$ct.forEach(t),Kho=r(bS," (RetriBERT model)"),bS.forEach(t),Zho=i(S),Bs=n(S,"LI",{});var vS=s(Bs);bie=n(vS,"STRONG",{});var kct=s(bie);epo=r(kct,"roberta"),kct.forEach(t),opo=r(vS," \u2014 "),pN=n(vS,"A",{href:!0});var Sct=s(pN);rpo=r(Sct,"RobertaTokenizer"),Sct.forEach(t),tpo=r(vS," or "),_N=n(vS,"A",{href:!0});var Rct=s(_N);apo=r(Rct,"RobertaTokenizerFast"),Rct.forEach(t),npo=r(vS," (RoBERTa model)"),vS.forEach(t),spo=i(S),Is=n(S,"LI",{});var FS=s(Is);vie=n(FS,"STRONG",{});var Pct=s(vie);lpo=r(Pct,"roformer"),Pct.forEach(t),ipo=r(FS," \u2014 "),uN=n(FS,"A",{href:!0});var Bct=s(uN);dpo=r(Bct,"RoFormerTokenizer"),Bct.forEach(t),cpo=r(FS," or "),bN=n(FS,"A",{href:!0});var Ict=s(bN);fpo=r(Ict,"RoFormerTokenizerFast"),Ict.forEach(t),mpo=r(FS," (RoFormer model)"),FS.forEach(t),gpo=i(S),Ch=n(S,"LI",{});var jye=s(Ch);Fie=n(jye,"STRONG",{});var Nct=s(Fie);hpo=r(Nct,"speech_to_text"),Nct.forEach(t),ppo=r(jye," \u2014 "),vN=n(jye,"A",{href:!0});var qct=s(vN);_po=r(qct,"Speech2TextTokenizer"),qct.forEach(t),upo=r(jye," (Speech2Text model)"),jye.forEach(t),bpo=i(S),wh=n(S,"LI",{});var Dye=s(wh);Tie=n(Dye,"STRONG",{});var jct=s(Tie);vpo=r(jct,"speech_to_text_2"),jct.forEach(t),Fpo=r(Dye," \u2014 "),FN=n(Dye,"A",{href:!0});var Dct=s(FN);Tpo=r(Dct,"Speech2Text2Tokenizer"),Dct.forEach(t),Mpo=r(Dye," (Speech2Text2 model)"),Dye.forEach(t),Epo=i(S),Ns=n(S,"LI",{});var TS=s(Ns);Mie=n(TS,"STRONG",{});var Gct=s(Mie);Cpo=r(Gct,"splinter"),Gct.forEach(t),wpo=r(TS," \u2014 "),TN=n(TS,"A",{href:!0});var Oct=s(TN);Apo=r(Oct,"SplinterTokenizer"),Oct.forEach(t),Lpo=r(TS," or "),MN=n(TS,"A",{href:!0});var Vct=s(MN);ypo=r(Vct,"SplinterTokenizerFast"),Vct.forEach(t),xpo=r(TS," (Splinter model)"),TS.forEach(t),$po=i(S),qs=n(S,"LI",{});var MS=s(qs);Eie=n(MS,"STRONG",{});var Xct=s(Eie);kpo=r(Xct,"squeezebert"),Xct.forEach(t),Spo=r(MS," \u2014 "),EN=n(MS,"A",{href:!0});var zct=s(EN);Rpo=r(zct,"SqueezeBertTokenizer"),zct.forEach(t),Ppo=r(MS," or "),CN=n(MS,"A",{href:!0});var Qct=s(CN);Bpo=r(Qct,"SqueezeBertTokenizerFast"),Qct.forEach(t),Ipo=r(MS," (SqueezeBERT model)"),MS.forEach(t),Npo=i(S),js=n(S,"LI",{});var ES=s(js);Cie=n(ES,"STRONG",{});var Wct=s(Cie);qpo=r(Wct,"t5"),Wct.forEach(t),jpo=r(ES," \u2014 "),wN=n(ES,"A",{href:!0});var Hct=s(wN);Dpo=r(Hct,"T5Tokenizer"),Hct.forEach(t),Gpo=r(ES," or "),AN=n(ES,"A",{href:!0});var Uct=s(AN);Opo=r(Uct,"T5TokenizerFast"),Uct.forEach(t),Vpo=r(ES," (T5 model)"),ES.forEach(t),Xpo=i(S),Ah=n(S,"LI",{});var Gye=s(Ah);wie=n(Gye,"STRONG",{});var Jct=s(wie);zpo=r(Jct,"tapas"),Jct.forEach(t),Qpo=r(Gye," \u2014 "),LN=n(Gye,"A",{href:!0});var Yct=s(LN);Wpo=r(Yct,"TapasTokenizer"),Yct.forEach(t),Hpo=r(Gye," (TAPAS model)"),Gye.forEach(t),Upo=i(S),Lh=n(S,"LI",{});var Oye=s(Lh);Aie=n(Oye,"STRONG",{});var Kct=s(Aie);Jpo=r(Kct,"tapex"),Kct.forEach(t),Ypo=r(Oye," \u2014 "),yN=n(Oye,"A",{href:!0});var Zct=s(yN);Kpo=r(Zct,"TapexTokenizer"),Zct.forEach(t),Zpo=r(Oye," (TAPEX model)"),Oye.forEach(t),e_o=i(S),yh=n(S,"LI",{});var Vye=s(yh);Lie=n(Vye,"STRONG",{});var eft=s(Lie);o_o=r(eft,"transfo-xl"),eft.forEach(t),r_o=r(Vye," \u2014 "),xN=n(Vye,"A",{href:!0});var oft=s(xN);t_o=r(oft,"TransfoXLTokenizer"),oft.forEach(t),a_o=r(Vye," (Transformer-XL model)"),Vye.forEach(t),n_o=i(S),Ds=n(S,"LI",{});var CS=s(Ds);yie=n(CS,"STRONG",{});var rft=s(yie);s_o=r(rft,"vilt"),rft.forEach(t),l_o=r(CS," \u2014 "),$N=n(CS,"A",{href:!0});var tft=s($N);i_o=r(tft,"BertTokenizer"),tft.forEach(t),d_o=r(CS," or "),kN=n(CS,"A",{href:!0});var aft=s(kN);c_o=r(aft,"BertTokenizerFast"),aft.forEach(t),f_o=r(CS," (ViLT model)"),CS.forEach(t),m_o=i(S),Gs=n(S,"LI",{});var wS=s(Gs);xie=n(wS,"STRONG",{});var nft=s(xie);g_o=r(nft,"visual_bert"),nft.forEach(t),h_o=r(wS," \u2014 "),SN=n(wS,"A",{href:!0});var sft=s(SN);p_o=r(sft,"BertTokenizer"),sft.forEach(t),__o=r(wS," or "),RN=n(wS,"A",{href:!0});var lft=s(RN);u_o=r(lft,"BertTokenizerFast"),lft.forEach(t),b_o=r(wS," (VisualBERT model)"),wS.forEach(t),v_o=i(S),xh=n(S,"LI",{});var Xye=s(xh);$ie=n(Xye,"STRONG",{});var ift=s($ie);F_o=r(ift,"wav2vec2"),ift.forEach(t),T_o=r(Xye," \u2014 "),PN=n(Xye,"A",{href:!0});var dft=s(PN);M_o=r(dft,"Wav2Vec2CTCTokenizer"),dft.forEach(t),E_o=r(Xye," (Wav2Vec2 model)"),Xye.forEach(t),C_o=i(S),$h=n(S,"LI",{});var zye=s($h);kie=n(zye,"STRONG",{});var cft=s(kie);w_o=r(cft,"wav2vec2-conformer"),cft.forEach(t),A_o=r(zye," \u2014 "),BN=n(zye,"A",{href:!0});var fft=s(BN);L_o=r(fft,"Wav2Vec2CTCTokenizer"),fft.forEach(t),y_o=r(zye," (Wav2Vec2-Conformer model)"),zye.forEach(t),x_o=i(S),kh=n(S,"LI",{});var Qye=s(kh);Sie=n(Qye,"STRONG",{});var mft=s(Sie);$_o=r(mft,"wav2vec2_phoneme"),mft.forEach(t),k_o=r(Qye," \u2014 "),IN=n(Qye,"A",{href:!0});var gft=s(IN);S_o=r(gft,"Wav2Vec2PhonemeCTCTokenizer"),gft.forEach(t),R_o=r(Qye," (Wav2Vec2Phoneme model)"),Qye.forEach(t),P_o=i(S),Os=n(S,"LI",{});var AS=s(Os);Rie=n(AS,"STRONG",{});var hft=s(Rie);B_o=r(hft,"xglm"),hft.forEach(t),I_o=r(AS," \u2014 "),NN=n(AS,"A",{href:!0});var pft=s(NN);N_o=r(pft,"XGLMTokenizer"),pft.forEach(t),q_o=r(AS," or "),qN=n(AS,"A",{href:!0});var _ft=s(qN);j_o=r(_ft,"XGLMTokenizerFast"),_ft.forEach(t),D_o=r(AS," (XGLM model)"),AS.forEach(t),G_o=i(S),Sh=n(S,"LI",{});var Wye=s(Sh);Pie=n(Wye,"STRONG",{});var uft=s(Pie);O_o=r(uft,"xlm"),uft.forEach(t),V_o=r(Wye," \u2014 "),jN=n(Wye,"A",{href:!0});var bft=s(jN);X_o=r(bft,"XLMTokenizer"),bft.forEach(t),z_o=r(Wye," (XLM model)"),Wye.forEach(t),Q_o=i(S),Rh=n(S,"LI",{});var Hye=s(Rh);Bie=n(Hye,"STRONG",{});var vft=s(Bie);W_o=r(vft,"xlm-prophetnet"),vft.forEach(t),H_o=r(Hye," \u2014 "),DN=n(Hye,"A",{href:!0});var Fft=s(DN);U_o=r(Fft,"XLMProphetNetTokenizer"),Fft.forEach(t),J_o=r(Hye," (XLM-ProphetNet model)"),Hye.forEach(t),Y_o=i(S),Vs=n(S,"LI",{});var LS=s(Vs);Iie=n(LS,"STRONG",{});var Tft=s(Iie);K_o=r(Tft,"xlm-roberta"),Tft.forEach(t),Z_o=r(LS," \u2014 "),GN=n(LS,"A",{href:!0});var Mft=s(GN);euo=r(Mft,"XLMRobertaTokenizer"),Mft.forEach(t),ouo=r(LS," or "),ON=n(LS,"A",{href:!0});var Eft=s(ON);ruo=r(Eft,"XLMRobertaTokenizerFast"),Eft.forEach(t),tuo=r(LS," (XLM-RoBERTa model)"),LS.forEach(t),auo=i(S),Xs=n(S,"LI",{});var yS=s(Xs);Nie=n(yS,"STRONG",{});var Cft=s(Nie);nuo=r(Cft,"xlm-roberta-xl"),Cft.forEach(t),suo=r(yS," \u2014 "),VN=n(yS,"A",{href:!0});var wft=s(VN);luo=r(wft,"RobertaTokenizer"),wft.forEach(t),iuo=r(yS," or "),XN=n(yS,"A",{href:!0});var Aft=s(XN);duo=r(Aft,"RobertaTokenizerFast"),Aft.forEach(t),cuo=r(yS," (XLM-RoBERTa-XL model)"),yS.forEach(t),fuo=i(S),zs=n(S,"LI",{});var xS=s(zs);qie=n(xS,"STRONG",{});var Lft=s(qie);muo=r(Lft,"xlnet"),Lft.forEach(t),guo=r(xS," \u2014 "),zN=n(xS,"A",{href:!0});var yft=s(zN);huo=r(yft,"XLNetTokenizer"),yft.forEach(t),puo=r(xS," or "),QN=n(xS,"A",{href:!0});var xft=s(QN);_uo=r(xft,"XLNetTokenizerFast"),xft.forEach(t),uuo=r(xS," (XLNet model)"),xS.forEach(t),buo=i(S),Qs=n(S,"LI",{});var $S=s(Qs);jie=n($S,"STRONG",{});var $ft=s(jie);vuo=r($ft,"yoso"),$ft.forEach(t),Fuo=r($S," \u2014 "),WN=n($S,"A",{href:!0});var kft=s(WN);Tuo=r(kft,"AlbertTokenizer"),kft.forEach(t),Muo=r($S," or "),HN=n($S,"A",{href:!0});var Sft=s(HN);Euo=r(Sft,"AlbertTokenizerFast"),Sft.forEach(t),Cuo=r($S," (YOSO model)"),$S.forEach(t),S.forEach(t),wuo=i(Ks),T(Ph.$$.fragment,Ks),Ks.forEach(t),Auo=i(Ys),Bh=n(Ys,"DIV",{class:!0});var cQe=s(Bh);T(bL.$$.fragment,cQe),Luo=i(cQe),Die=n(cQe,"P",{});var Rft=s(Die);yuo=r(Rft,"Register a new tokenizer in this mapping."),Rft.forEach(t),cQe.forEach(t),Ys.forEach(t),dXe=i(f),Ni=n(f,"H2",{class:!0});var fQe=s(Ni);Ih=n(fQe,"A",{id:!0,class:!0,href:!0});var Pft=s(Ih);Gie=n(Pft,"SPAN",{});var Bft=s(Gie);T(vL.$$.fragment,Bft),Bft.forEach(t),Pft.forEach(t),xuo=i(fQe),Oie=n(fQe,"SPAN",{});var Ift=s(Oie);$uo=r(Ift,"AutoFeatureExtractor"),Ift.forEach(t),fQe.forEach(t),cXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(FL.$$.fragment,Zs),kuo=i(Zs),TL=n(Zs,"P",{});var mQe=s(TL);Suo=r(mQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UN=n(mQe,"A",{href:!0});var Nft=s(UN);Ruo=r(Nft,"AutoFeatureExtractor.from_pretrained()"),Nft.forEach(t),Puo=r(mQe," class method."),mQe.forEach(t),Buo=i(Zs),ML=n(Zs,"P",{});var gQe=s(ML);Iuo=r(gQe,"This class cannot be instantiated directly using "),Vie=n(gQe,"CODE",{});var qft=s(Vie);Nuo=r(qft,"__init__()"),qft.forEach(t),quo=r(gQe," (throws an error)."),gQe.forEach(t),juo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(EL.$$.fragment,aa),Duo=i(aa),Xie=n(aa,"P",{});var jft=s(Xie);Guo=r(jft,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),jft.forEach(t),Ouo=i(aa),Ba=n(aa,"P",{});var iw=s(Ba);Vuo=r(iw,"The feature extractor class to instantiate is selected based on the "),zie=n(iw,"CODE",{});var Dft=s(zie);Xuo=r(Dft,"model_type"),Dft.forEach(t),zuo=r(iw,` property of the config object
(either passed as an argument or loaded from `),Qie=n(iw,"CODE",{});var Gft=s(Qie);Quo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),Wuo=r(iw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wie=n(iw,"CODE",{});var Oft=s(Wie);Huo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),Uuo=r(iw,":"),iw.forEach(t),Juo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Nh=n(K,"LI",{});var Uye=s(Nh);Hie=n(Uye,"STRONG",{});var Vft=s(Hie);Yuo=r(Vft,"beit"),Vft.forEach(t),Kuo=r(Uye," \u2014 "),JN=n(Uye,"A",{href:!0});var Xft=s(JN);Zuo=r(Xft,"BeitFeatureExtractor"),Xft.forEach(t),e2o=r(Uye," (BEiT model)"),Uye.forEach(t),o2o=i(K),qh=n(K,"LI",{});var Jye=s(qh);Uie=n(Jye,"STRONG",{});var zft=s(Uie);r2o=r(zft,"clip"),zft.forEach(t),t2o=r(Jye," \u2014 "),YN=n(Jye,"A",{href:!0});var Qft=s(YN);a2o=r(Qft,"CLIPFeatureExtractor"),Qft.forEach(t),n2o=r(Jye," (CLIP model)"),Jye.forEach(t),s2o=i(K),jh=n(K,"LI",{});var Yye=s(jh);Jie=n(Yye,"STRONG",{});var Wft=s(Jie);l2o=r(Wft,"convnext"),Wft.forEach(t),i2o=r(Yye," \u2014 "),KN=n(Yye,"A",{href:!0});var Hft=s(KN);d2o=r(Hft,"ConvNextFeatureExtractor"),Hft.forEach(t),c2o=r(Yye," (ConvNeXT model)"),Yye.forEach(t),f2o=i(K),Dh=n(K,"LI",{});var Kye=s(Dh);Yie=n(Kye,"STRONG",{});var Uft=s(Yie);m2o=r(Uft,"cvt"),Uft.forEach(t),g2o=r(Kye," \u2014 "),ZN=n(Kye,"A",{href:!0});var Jft=s(ZN);h2o=r(Jft,"ConvNextFeatureExtractor"),Jft.forEach(t),p2o=r(Kye," (CvT model)"),Kye.forEach(t),_2o=i(K),Gh=n(K,"LI",{});var Zye=s(Gh);Kie=n(Zye,"STRONG",{});var Yft=s(Kie);u2o=r(Yft,"data2vec-audio"),Yft.forEach(t),b2o=r(Zye," \u2014 "),eq=n(Zye,"A",{href:!0});var Kft=s(eq);v2o=r(Kft,"Wav2Vec2FeatureExtractor"),Kft.forEach(t),F2o=r(Zye," (Data2VecAudio model)"),Zye.forEach(t),T2o=i(K),Oh=n(K,"LI",{});var e9e=s(Oh);Zie=n(e9e,"STRONG",{});var Zft=s(Zie);M2o=r(Zft,"data2vec-vision"),Zft.forEach(t),E2o=r(e9e," \u2014 "),oq=n(e9e,"A",{href:!0});var emt=s(oq);C2o=r(emt,"BeitFeatureExtractor"),emt.forEach(t),w2o=r(e9e," (Data2VecVision model)"),e9e.forEach(t),A2o=i(K),Vh=n(K,"LI",{});var o9e=s(Vh);ede=n(o9e,"STRONG",{});var omt=s(ede);L2o=r(omt,"deit"),omt.forEach(t),y2o=r(o9e," \u2014 "),rq=n(o9e,"A",{href:!0});var rmt=s(rq);x2o=r(rmt,"DeiTFeatureExtractor"),rmt.forEach(t),$2o=r(o9e," (DeiT model)"),o9e.forEach(t),k2o=i(K),Xh=n(K,"LI",{});var r9e=s(Xh);ode=n(r9e,"STRONG",{});var tmt=s(ode);S2o=r(tmt,"detr"),tmt.forEach(t),R2o=r(r9e," \u2014 "),tq=n(r9e,"A",{href:!0});var amt=s(tq);P2o=r(amt,"DetrFeatureExtractor"),amt.forEach(t),B2o=r(r9e," (DETR model)"),r9e.forEach(t),I2o=i(K),zh=n(K,"LI",{});var t9e=s(zh);rde=n(t9e,"STRONG",{});var nmt=s(rde);N2o=r(nmt,"dpt"),nmt.forEach(t),q2o=r(t9e," \u2014 "),aq=n(t9e,"A",{href:!0});var smt=s(aq);j2o=r(smt,"DPTFeatureExtractor"),smt.forEach(t),D2o=r(t9e," (DPT model)"),t9e.forEach(t),G2o=i(K),Qh=n(K,"LI",{});var a9e=s(Qh);tde=n(a9e,"STRONG",{});var lmt=s(tde);O2o=r(lmt,"flava"),lmt.forEach(t),V2o=r(a9e," \u2014 "),nq=n(a9e,"A",{href:!0});var imt=s(nq);X2o=r(imt,"FlavaFeatureExtractor"),imt.forEach(t),z2o=r(a9e," (FLAVA model)"),a9e.forEach(t),Q2o=i(K),Wh=n(K,"LI",{});var n9e=s(Wh);ade=n(n9e,"STRONG",{});var dmt=s(ade);W2o=r(dmt,"glpn"),dmt.forEach(t),H2o=r(n9e," \u2014 "),sq=n(n9e,"A",{href:!0});var cmt=s(sq);U2o=r(cmt,"GLPNFeatureExtractor"),cmt.forEach(t),J2o=r(n9e," (GLPN model)"),n9e.forEach(t),Y2o=i(K),Hh=n(K,"LI",{});var s9e=s(Hh);nde=n(s9e,"STRONG",{});var fmt=s(nde);K2o=r(fmt,"groupvit"),fmt.forEach(t),Z2o=r(s9e," \u2014 "),lq=n(s9e,"A",{href:!0});var mmt=s(lq);e1o=r(mmt,"CLIPFeatureExtractor"),mmt.forEach(t),o1o=r(s9e," (GroupViT model)"),s9e.forEach(t),r1o=i(K),Uh=n(K,"LI",{});var l9e=s(Uh);sde=n(l9e,"STRONG",{});var gmt=s(sde);t1o=r(gmt,"hubert"),gmt.forEach(t),a1o=r(l9e," \u2014 "),iq=n(l9e,"A",{href:!0});var hmt=s(iq);n1o=r(hmt,"Wav2Vec2FeatureExtractor"),hmt.forEach(t),s1o=r(l9e," (Hubert model)"),l9e.forEach(t),l1o=i(K),Jh=n(K,"LI",{});var i9e=s(Jh);lde=n(i9e,"STRONG",{});var pmt=s(lde);i1o=r(pmt,"imagegpt"),pmt.forEach(t),d1o=r(i9e," \u2014 "),dq=n(i9e,"A",{href:!0});var _mt=s(dq);c1o=r(_mt,"ImageGPTFeatureExtractor"),_mt.forEach(t),f1o=r(i9e," (ImageGPT model)"),i9e.forEach(t),m1o=i(K),Yh=n(K,"LI",{});var d9e=s(Yh);ide=n(d9e,"STRONG",{});var umt=s(ide);g1o=r(umt,"layoutlmv2"),umt.forEach(t),h1o=r(d9e," \u2014 "),cq=n(d9e,"A",{href:!0});var bmt=s(cq);p1o=r(bmt,"LayoutLMv2FeatureExtractor"),bmt.forEach(t),_1o=r(d9e," (LayoutLMv2 model)"),d9e.forEach(t),u1o=i(K),Kh=n(K,"LI",{});var c9e=s(Kh);dde=n(c9e,"STRONG",{});var vmt=s(dde);b1o=r(vmt,"layoutlmv3"),vmt.forEach(t),v1o=r(c9e," \u2014 "),fq=n(c9e,"A",{href:!0});var Fmt=s(fq);F1o=r(Fmt,"LayoutLMv3FeatureExtractor"),Fmt.forEach(t),T1o=r(c9e," (LayoutLMv3 model)"),c9e.forEach(t),M1o=i(K),Zh=n(K,"LI",{});var f9e=s(Zh);cde=n(f9e,"STRONG",{});var Tmt=s(cde);E1o=r(Tmt,"levit"),Tmt.forEach(t),C1o=r(f9e," \u2014 "),mq=n(f9e,"A",{href:!0});var Mmt=s(mq);w1o=r(Mmt,"LevitFeatureExtractor"),Mmt.forEach(t),A1o=r(f9e," (LeViT model)"),f9e.forEach(t),L1o=i(K),ep=n(K,"LI",{});var m9e=s(ep);fde=n(m9e,"STRONG",{});var Emt=s(fde);y1o=r(Emt,"maskformer"),Emt.forEach(t),x1o=r(m9e," \u2014 "),gq=n(m9e,"A",{href:!0});var Cmt=s(gq);$1o=r(Cmt,"MaskFormerFeatureExtractor"),Cmt.forEach(t),k1o=r(m9e," (MaskFormer model)"),m9e.forEach(t),S1o=i(K),op=n(K,"LI",{});var g9e=s(op);mde=n(g9e,"STRONG",{});var wmt=s(mde);R1o=r(wmt,"mctct"),wmt.forEach(t),P1o=r(g9e," \u2014 "),hq=n(g9e,"A",{href:!0});var Amt=s(hq);B1o=r(Amt,"MCTCTFeatureExtractor"),Amt.forEach(t),I1o=r(g9e," (M-CTC-T model)"),g9e.forEach(t),N1o=i(K),rp=n(K,"LI",{});var h9e=s(rp);gde=n(h9e,"STRONG",{});var Lmt=s(gde);q1o=r(Lmt,"mobilevit"),Lmt.forEach(t),j1o=r(h9e," \u2014 "),pq=n(h9e,"A",{href:!0});var ymt=s(pq);D1o=r(ymt,"MobileViTFeatureExtractor"),ymt.forEach(t),G1o=r(h9e," (MobileViT model)"),h9e.forEach(t),O1o=i(K),tp=n(K,"LI",{});var p9e=s(tp);hde=n(p9e,"STRONG",{});var xmt=s(hde);V1o=r(xmt,"perceiver"),xmt.forEach(t),X1o=r(p9e," \u2014 "),_q=n(p9e,"A",{href:!0});var $mt=s(_q);z1o=r($mt,"PerceiverFeatureExtractor"),$mt.forEach(t),Q1o=r(p9e," (Perceiver model)"),p9e.forEach(t),W1o=i(K),ap=n(K,"LI",{});var _9e=s(ap);pde=n(_9e,"STRONG",{});var kmt=s(pde);H1o=r(kmt,"poolformer"),kmt.forEach(t),U1o=r(_9e," \u2014 "),uq=n(_9e,"A",{href:!0});var Smt=s(uq);J1o=r(Smt,"PoolFormerFeatureExtractor"),Smt.forEach(t),Y1o=r(_9e," (PoolFormer model)"),_9e.forEach(t),K1o=i(K),np=n(K,"LI",{});var u9e=s(np);_de=n(u9e,"STRONG",{});var Rmt=s(_de);Z1o=r(Rmt,"regnet"),Rmt.forEach(t),ebo=r(u9e," \u2014 "),bq=n(u9e,"A",{href:!0});var Pmt=s(bq);obo=r(Pmt,"ConvNextFeatureExtractor"),Pmt.forEach(t),rbo=r(u9e," (RegNet model)"),u9e.forEach(t),tbo=i(K),sp=n(K,"LI",{});var b9e=s(sp);ude=n(b9e,"STRONG",{});var Bmt=s(ude);abo=r(Bmt,"resnet"),Bmt.forEach(t),nbo=r(b9e," \u2014 "),vq=n(b9e,"A",{href:!0});var Imt=s(vq);sbo=r(Imt,"ConvNextFeatureExtractor"),Imt.forEach(t),lbo=r(b9e," (ResNet model)"),b9e.forEach(t),ibo=i(K),lp=n(K,"LI",{});var v9e=s(lp);bde=n(v9e,"STRONG",{});var Nmt=s(bde);dbo=r(Nmt,"segformer"),Nmt.forEach(t),cbo=r(v9e," \u2014 "),Fq=n(v9e,"A",{href:!0});var qmt=s(Fq);fbo=r(qmt,"SegformerFeatureExtractor"),qmt.forEach(t),mbo=r(v9e," (SegFormer model)"),v9e.forEach(t),gbo=i(K),ip=n(K,"LI",{});var F9e=s(ip);vde=n(F9e,"STRONG",{});var jmt=s(vde);hbo=r(jmt,"speech_to_text"),jmt.forEach(t),pbo=r(F9e," \u2014 "),Tq=n(F9e,"A",{href:!0});var Dmt=s(Tq);_bo=r(Dmt,"Speech2TextFeatureExtractor"),Dmt.forEach(t),ubo=r(F9e," (Speech2Text model)"),F9e.forEach(t),bbo=i(K),dp=n(K,"LI",{});var T9e=s(dp);Fde=n(T9e,"STRONG",{});var Gmt=s(Fde);vbo=r(Gmt,"swin"),Gmt.forEach(t),Fbo=r(T9e," \u2014 "),Mq=n(T9e,"A",{href:!0});var Omt=s(Mq);Tbo=r(Omt,"ViTFeatureExtractor"),Omt.forEach(t),Mbo=r(T9e," (Swin Transformer model)"),T9e.forEach(t),Ebo=i(K),cp=n(K,"LI",{});var M9e=s(cp);Tde=n(M9e,"STRONG",{});var Vmt=s(Tde);Cbo=r(Vmt,"van"),Vmt.forEach(t),wbo=r(M9e," \u2014 "),Eq=n(M9e,"A",{href:!0});var Xmt=s(Eq);Abo=r(Xmt,"ConvNextFeatureExtractor"),Xmt.forEach(t),Lbo=r(M9e," (VAN model)"),M9e.forEach(t),ybo=i(K),fp=n(K,"LI",{});var E9e=s(fp);Mde=n(E9e,"STRONG",{});var zmt=s(Mde);xbo=r(zmt,"vilt"),zmt.forEach(t),$bo=r(E9e," \u2014 "),Cq=n(E9e,"A",{href:!0});var Qmt=s(Cq);kbo=r(Qmt,"ViltFeatureExtractor"),Qmt.forEach(t),Sbo=r(E9e," (ViLT model)"),E9e.forEach(t),Rbo=i(K),mp=n(K,"LI",{});var C9e=s(mp);Ede=n(C9e,"STRONG",{});var Wmt=s(Ede);Pbo=r(Wmt,"vit"),Wmt.forEach(t),Bbo=r(C9e," \u2014 "),wq=n(C9e,"A",{href:!0});var Hmt=s(wq);Ibo=r(Hmt,"ViTFeatureExtractor"),Hmt.forEach(t),Nbo=r(C9e," (ViT model)"),C9e.forEach(t),qbo=i(K),gp=n(K,"LI",{});var w9e=s(gp);Cde=n(w9e,"STRONG",{});var Umt=s(Cde);jbo=r(Umt,"vit_mae"),Umt.forEach(t),Dbo=r(w9e," \u2014 "),Aq=n(w9e,"A",{href:!0});var Jmt=s(Aq);Gbo=r(Jmt,"ViTFeatureExtractor"),Jmt.forEach(t),Obo=r(w9e," (ViTMAE model)"),w9e.forEach(t),Vbo=i(K),hp=n(K,"LI",{});var A9e=s(hp);wde=n(A9e,"STRONG",{});var Ymt=s(wde);Xbo=r(Ymt,"wav2vec2"),Ymt.forEach(t),zbo=r(A9e," \u2014 "),Lq=n(A9e,"A",{href:!0});var Kmt=s(Lq);Qbo=r(Kmt,"Wav2Vec2FeatureExtractor"),Kmt.forEach(t),Wbo=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),Hbo=i(K),pp=n(K,"LI",{});var L9e=s(pp);Ade=n(L9e,"STRONG",{});var Zmt=s(Ade);Ubo=r(Zmt,"wav2vec2-conformer"),Zmt.forEach(t),Jbo=r(L9e," \u2014 "),yq=n(L9e,"A",{href:!0});var egt=s(yq);Ybo=r(egt,"Wav2Vec2FeatureExtractor"),egt.forEach(t),Kbo=r(L9e," (Wav2Vec2-Conformer model)"),L9e.forEach(t),Zbo=i(K),_p=n(K,"LI",{});var y9e=s(_p);Lde=n(y9e,"STRONG",{});var ogt=s(Lde);evo=r(ogt,"yolos"),ogt.forEach(t),ovo=r(y9e," \u2014 "),xq=n(y9e,"A",{href:!0});var rgt=s(xq);rvo=r(rgt,"YolosFeatureExtractor"),rgt.forEach(t),tvo=r(y9e," (YOLOS model)"),y9e.forEach(t),K.forEach(t),avo=i(aa),T(up.$$.fragment,aa),nvo=i(aa),T(bp.$$.fragment,aa),aa.forEach(t),svo=i(Zs),vp=n(Zs,"DIV",{class:!0});var hQe=s(vp);T(CL.$$.fragment,hQe),lvo=i(hQe),yde=n(hQe,"P",{});var tgt=s(yde);ivo=r(tgt,"Register a new feature extractor for this class."),tgt.forEach(t),hQe.forEach(t),Zs.forEach(t),fXe=i(f),qi=n(f,"H2",{class:!0});var pQe=s(qi);Fp=n(pQe,"A",{id:!0,class:!0,href:!0});var agt=s(Fp);xde=n(agt,"SPAN",{});var ngt=s(xde);T(wL.$$.fragment,ngt),ngt.forEach(t),agt.forEach(t),dvo=i(pQe),$de=n(pQe,"SPAN",{});var sgt=s($de);cvo=r(sgt,"AutoProcessor"),sgt.forEach(t),pQe.forEach(t),mXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(AL.$$.fragment,el),fvo=i(el),LL=n(el,"P",{});var _Qe=s(LL);mvo=r(_Qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$q=n(_Qe,"A",{href:!0});var lgt=s($q);gvo=r(lgt,"AutoProcessor.from_pretrained()"),lgt.forEach(t),hvo=r(_Qe," class method."),_Qe.forEach(t),pvo=i(el),yL=n(el,"P",{});var uQe=s(yL);_vo=r(uQe,"This class cannot be instantiated directly using "),kde=n(uQe,"CODE",{});var igt=s(kde);uvo=r(igt,"__init__()"),igt.forEach(t),bvo=r(uQe," (throws an error)."),uQe.forEach(t),vvo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(xL.$$.fragment,na),Fvo=i(na),Sde=n(na,"P",{});var dgt=s(Sde);Tvo=r(dgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dgt.forEach(t),Mvo=i(na),ji=n(na,"P",{});var yre=s(ji);Evo=r(yre,"The processor class to instantiate is selected based on the "),Rde=n(yre,"CODE",{});var cgt=s(Rde);Cvo=r(cgt,"model_type"),cgt.forEach(t),wvo=r(yre,` property of the config object (either
passed as an argument or loaded from `),Pde=n(yre,"CODE",{});var fgt=s(Pde);Avo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Lvo=r(yre," if possible):"),yre.forEach(t),yvo=i(na),he=n(na,"UL",{});var ue=s(he);Tp=n(ue,"LI",{});var x9e=s(Tp);Bde=n(x9e,"STRONG",{});var mgt=s(Bde);xvo=r(mgt,"clip"),mgt.forEach(t),$vo=r(x9e," \u2014 "),kq=n(x9e,"A",{href:!0});var ggt=s(kq);kvo=r(ggt,"CLIPProcessor"),ggt.forEach(t),Svo=r(x9e," (CLIP model)"),x9e.forEach(t),Rvo=i(ue),Mp=n(ue,"LI",{});var $9e=s(Mp);Ide=n($9e,"STRONG",{});var hgt=s(Ide);Pvo=r(hgt,"flava"),hgt.forEach(t),Bvo=r($9e," \u2014 "),Nde=n($9e,"CODE",{});var pgt=s(Nde);Ivo=r(pgt,"FLAVAProcessor"),pgt.forEach(t),Nvo=r($9e," (FLAVA model)"),$9e.forEach(t),qvo=i(ue),Ep=n(ue,"LI",{});var k9e=s(Ep);qde=n(k9e,"STRONG",{});var _gt=s(qde);jvo=r(_gt,"groupvit"),_gt.forEach(t),Dvo=r(k9e," \u2014 "),Sq=n(k9e,"A",{href:!0});var ugt=s(Sq);Gvo=r(ugt,"CLIPProcessor"),ugt.forEach(t),Ovo=r(k9e," (GroupViT model)"),k9e.forEach(t),Vvo=i(ue),Cp=n(ue,"LI",{});var S9e=s(Cp);jde=n(S9e,"STRONG",{});var bgt=s(jde);Xvo=r(bgt,"layoutlmv2"),bgt.forEach(t),zvo=r(S9e," \u2014 "),Rq=n(S9e,"A",{href:!0});var vgt=s(Rq);Qvo=r(vgt,"LayoutLMv2Processor"),vgt.forEach(t),Wvo=r(S9e," (LayoutLMv2 model)"),S9e.forEach(t),Hvo=i(ue),wp=n(ue,"LI",{});var R9e=s(wp);Dde=n(R9e,"STRONG",{});var Fgt=s(Dde);Uvo=r(Fgt,"layoutlmv3"),Fgt.forEach(t),Jvo=r(R9e," \u2014 "),Pq=n(R9e,"A",{href:!0});var Tgt=s(Pq);Yvo=r(Tgt,"LayoutLMv3Processor"),Tgt.forEach(t),Kvo=r(R9e," (LayoutLMv3 model)"),R9e.forEach(t),Zvo=i(ue),Ap=n(ue,"LI",{});var P9e=s(Ap);Gde=n(P9e,"STRONG",{});var Mgt=s(Gde);eFo=r(Mgt,"layoutxlm"),Mgt.forEach(t),oFo=r(P9e," \u2014 "),Bq=n(P9e,"A",{href:!0});var Egt=s(Bq);rFo=r(Egt,"LayoutXLMProcessor"),Egt.forEach(t),tFo=r(P9e," (LayoutXLM model)"),P9e.forEach(t),aFo=i(ue),Lp=n(ue,"LI",{});var B9e=s(Lp);Ode=n(B9e,"STRONG",{});var Cgt=s(Ode);nFo=r(Cgt,"sew"),Cgt.forEach(t),sFo=r(B9e," \u2014 "),Iq=n(B9e,"A",{href:!0});var wgt=s(Iq);lFo=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),iFo=r(B9e," (SEW model)"),B9e.forEach(t),dFo=i(ue),yp=n(ue,"LI",{});var I9e=s(yp);Vde=n(I9e,"STRONG",{});var Agt=s(Vde);cFo=r(Agt,"sew-d"),Agt.forEach(t),fFo=r(I9e," \u2014 "),Nq=n(I9e,"A",{href:!0});var Lgt=s(Nq);mFo=r(Lgt,"Wav2Vec2Processor"),Lgt.forEach(t),gFo=r(I9e," (SEW-D model)"),I9e.forEach(t),hFo=i(ue),xp=n(ue,"LI",{});var N9e=s(xp);Xde=n(N9e,"STRONG",{});var ygt=s(Xde);pFo=r(ygt,"speech_to_text"),ygt.forEach(t),_Fo=r(N9e," \u2014 "),qq=n(N9e,"A",{href:!0});var xgt=s(qq);uFo=r(xgt,"Speech2TextProcessor"),xgt.forEach(t),bFo=r(N9e," (Speech2Text model)"),N9e.forEach(t),vFo=i(ue),$p=n(ue,"LI",{});var q9e=s($p);zde=n(q9e,"STRONG",{});var $gt=s(zde);FFo=r($gt,"speech_to_text_2"),$gt.forEach(t),TFo=r(q9e," \u2014 "),jq=n(q9e,"A",{href:!0});var kgt=s(jq);MFo=r(kgt,"Speech2Text2Processor"),kgt.forEach(t),EFo=r(q9e," (Speech2Text2 model)"),q9e.forEach(t),CFo=i(ue),kp=n(ue,"LI",{});var j9e=s(kp);Qde=n(j9e,"STRONG",{});var Sgt=s(Qde);wFo=r(Sgt,"trocr"),Sgt.forEach(t),AFo=r(j9e," \u2014 "),Dq=n(j9e,"A",{href:!0});var Rgt=s(Dq);LFo=r(Rgt,"TrOCRProcessor"),Rgt.forEach(t),yFo=r(j9e," (TrOCR model)"),j9e.forEach(t),xFo=i(ue),Sp=n(ue,"LI",{});var D9e=s(Sp);Wde=n(D9e,"STRONG",{});var Pgt=s(Wde);$Fo=r(Pgt,"unispeech"),Pgt.forEach(t),kFo=r(D9e," \u2014 "),Gq=n(D9e,"A",{href:!0});var Bgt=s(Gq);SFo=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),RFo=r(D9e," (UniSpeech model)"),D9e.forEach(t),PFo=i(ue),Rp=n(ue,"LI",{});var G9e=s(Rp);Hde=n(G9e,"STRONG",{});var Igt=s(Hde);BFo=r(Igt,"unispeech-sat"),Igt.forEach(t),IFo=r(G9e," \u2014 "),Oq=n(G9e,"A",{href:!0});var Ngt=s(Oq);NFo=r(Ngt,"Wav2Vec2Processor"),Ngt.forEach(t),qFo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),jFo=i(ue),Pp=n(ue,"LI",{});var O9e=s(Pp);Ude=n(O9e,"STRONG",{});var qgt=s(Ude);DFo=r(qgt,"vilt"),qgt.forEach(t),GFo=r(O9e," \u2014 "),Vq=n(O9e,"A",{href:!0});var jgt=s(Vq);OFo=r(jgt,"ViltProcessor"),jgt.forEach(t),VFo=r(O9e," (ViLT model)"),O9e.forEach(t),XFo=i(ue),Bp=n(ue,"LI",{});var V9e=s(Bp);Jde=n(V9e,"STRONG",{});var Dgt=s(Jde);zFo=r(Dgt,"vision-text-dual-encoder"),Dgt.forEach(t),QFo=r(V9e," \u2014 "),Xq=n(V9e,"A",{href:!0});var Ggt=s(Xq);WFo=r(Ggt,"VisionTextDualEncoderProcessor"),Ggt.forEach(t),HFo=r(V9e," (VisionTextDualEncoder model)"),V9e.forEach(t),UFo=i(ue),Ip=n(ue,"LI",{});var X9e=s(Ip);Yde=n(X9e,"STRONG",{});var Ogt=s(Yde);JFo=r(Ogt,"wav2vec2"),Ogt.forEach(t),YFo=r(X9e," \u2014 "),zq=n(X9e,"A",{href:!0});var Vgt=s(zq);KFo=r(Vgt,"Wav2Vec2Processor"),Vgt.forEach(t),ZFo=r(X9e," (Wav2Vec2 model)"),X9e.forEach(t),e6o=i(ue),Np=n(ue,"LI",{});var z9e=s(Np);Kde=n(z9e,"STRONG",{});var Xgt=s(Kde);o6o=r(Xgt,"wav2vec2-conformer"),Xgt.forEach(t),r6o=r(z9e," \u2014 "),Qq=n(z9e,"A",{href:!0});var zgt=s(Qq);t6o=r(zgt,"Wav2Vec2Processor"),zgt.forEach(t),a6o=r(z9e," (Wav2Vec2-Conformer model)"),z9e.forEach(t),n6o=i(ue),qp=n(ue,"LI",{});var Q9e=s(qp);Zde=n(Q9e,"STRONG",{});var Qgt=s(Zde);s6o=r(Qgt,"wavlm"),Qgt.forEach(t),l6o=r(Q9e," \u2014 "),Wq=n(Q9e,"A",{href:!0});var Wgt=s(Wq);i6o=r(Wgt,"Wav2Vec2Processor"),Wgt.forEach(t),d6o=r(Q9e," (WavLM model)"),Q9e.forEach(t),ue.forEach(t),c6o=i(na),T(jp.$$.fragment,na),f6o=i(na),T(Dp.$$.fragment,na),na.forEach(t),m6o=i(el),Gp=n(el,"DIV",{class:!0});var bQe=s(Gp);T($L.$$.fragment,bQe),g6o=i(bQe),ece=n(bQe,"P",{});var Hgt=s(ece);h6o=r(Hgt,"Register a new processor for this class."),Hgt.forEach(t),bQe.forEach(t),el.forEach(t),gXe=i(f),Di=n(f,"H2",{class:!0});var vQe=s(Di);Op=n(vQe,"A",{id:!0,class:!0,href:!0});var Ugt=s(Op);oce=n(Ugt,"SPAN",{});var Jgt=s(oce);T(kL.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),p6o=i(vQe),rce=n(vQe,"SPAN",{});var Ygt=s(rce);_6o=r(Ygt,"AutoModel"),Ygt.forEach(t),vQe.forEach(t),hXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(SL.$$.fragment,ol),u6o=i(ol),Gi=n(ol,"P",{});var xre=s(Gi);b6o=r(xre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Hq=n(xre,"A",{href:!0});var Kgt=s(Hq);v6o=r(Kgt,"from_pretrained()"),Kgt.forEach(t),F6o=r(xre," class method or the "),Uq=n(xre,"A",{href:!0});var Zgt=s(Uq);T6o=r(Zgt,"from_config()"),Zgt.forEach(t),M6o=r(xre,` class
method.`),xre.forEach(t),E6o=i(ol),RL=n(ol,"P",{});var FQe=s(RL);C6o=r(FQe,"This class cannot be instantiated directly using "),tce=n(FQe,"CODE",{});var eht=s(tce);w6o=r(eht,"__init__()"),eht.forEach(t),A6o=r(FQe," (throws an error)."),FQe.forEach(t),L6o=i(ol),lt=n(ol,"DIV",{class:!0});var dw=s(lt);T(PL.$$.fragment,dw),y6o=i(dw),ace=n(dw,"P",{});var oht=s(ace);x6o=r(oht,"Instantiates one of the base model classes of the library from a configuration."),oht.forEach(t),$6o=i(dw),Oi=n(dw,"P",{});var $re=s(Oi);k6o=r($re,`Note:
Loading a model from its configuration file does `),nce=n($re,"STRONG",{});var rht=s(nce);S6o=r(rht,"not"),rht.forEach(t),R6o=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n($re,"A",{href:!0});var tht=s(Jq);P6o=r(tht,"from_pretrained()"),tht.forEach(t),B6o=r($re," to load the model weights."),$re.forEach(t),I6o=i(dw),T(Vp.$$.fragment,dw),dw.forEach(t),N6o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(BL.$$.fragment,sa),q6o=i(sa),sce=n(sa,"P",{});var aht=s(sce);j6o=r(aht,"Instantiate one of the base model classes of the library from a pretrained model."),aht.forEach(t),D6o=i(sa),Ia=n(sa,"P",{});var cw=s(Ia);G6o=r(cw,"The model class to instantiate is selected based on the "),lce=n(cw,"CODE",{});var nht=s(lce);O6o=r(nht,"model_type"),nht.forEach(t),V6o=r(cw,` property of the config object (either
passed as an argument or loaded from `),ice=n(cw,"CODE",{});var sht=s(ice);X6o=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),z6o=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(cw,"CODE",{});var lht=s(dce);Q6o=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),W6o=r(cw,":"),cw.forEach(t),H6o=i(sa),y=n(sa,"UL",{});var x=s(y);Xp=n(x,"LI",{});var W9e=s(Xp);cce=n(W9e,"STRONG",{});var iht=s(cce);U6o=r(iht,"albert"),iht.forEach(t),J6o=r(W9e," \u2014 "),Yq=n(W9e,"A",{href:!0});var dht=s(Yq);Y6o=r(dht,"AlbertModel"),dht.forEach(t),K6o=r(W9e," (ALBERT model)"),W9e.forEach(t),Z6o=i(x),zp=n(x,"LI",{});var H9e=s(zp);fce=n(H9e,"STRONG",{});var cht=s(fce);eTo=r(cht,"bart"),cht.forEach(t),oTo=r(H9e," \u2014 "),Kq=n(H9e,"A",{href:!0});var fht=s(Kq);rTo=r(fht,"BartModel"),fht.forEach(t),tTo=r(H9e," (BART model)"),H9e.forEach(t),aTo=i(x),Qp=n(x,"LI",{});var U9e=s(Qp);mce=n(U9e,"STRONG",{});var mht=s(mce);nTo=r(mht,"beit"),mht.forEach(t),sTo=r(U9e," \u2014 "),Zq=n(U9e,"A",{href:!0});var ght=s(Zq);lTo=r(ght,"BeitModel"),ght.forEach(t),iTo=r(U9e," (BEiT model)"),U9e.forEach(t),dTo=i(x),Wp=n(x,"LI",{});var J9e=s(Wp);gce=n(J9e,"STRONG",{});var hht=s(gce);cTo=r(hht,"bert"),hht.forEach(t),fTo=r(J9e," \u2014 "),ej=n(J9e,"A",{href:!0});var pht=s(ej);mTo=r(pht,"BertModel"),pht.forEach(t),gTo=r(J9e," (BERT model)"),J9e.forEach(t),hTo=i(x),Hp=n(x,"LI",{});var Y9e=s(Hp);hce=n(Y9e,"STRONG",{});var _ht=s(hce);pTo=r(_ht,"bert-generation"),_ht.forEach(t),_To=r(Y9e," \u2014 "),oj=n(Y9e,"A",{href:!0});var uht=s(oj);uTo=r(uht,"BertGenerationEncoder"),uht.forEach(t),bTo=r(Y9e," (Bert Generation model)"),Y9e.forEach(t),vTo=i(x),Up=n(x,"LI",{});var K9e=s(Up);pce=n(K9e,"STRONG",{});var bht=s(pce);FTo=r(bht,"big_bird"),bht.forEach(t),TTo=r(K9e," \u2014 "),rj=n(K9e,"A",{href:!0});var vht=s(rj);MTo=r(vht,"BigBirdModel"),vht.forEach(t),ETo=r(K9e," (BigBird model)"),K9e.forEach(t),CTo=i(x),Jp=n(x,"LI",{});var Z9e=s(Jp);_ce=n(Z9e,"STRONG",{});var Fht=s(_ce);wTo=r(Fht,"bigbird_pegasus"),Fht.forEach(t),ATo=r(Z9e," \u2014 "),tj=n(Z9e,"A",{href:!0});var Tht=s(tj);LTo=r(Tht,"BigBirdPegasusModel"),Tht.forEach(t),yTo=r(Z9e," (BigBird-Pegasus model)"),Z9e.forEach(t),xTo=i(x),Yp=n(x,"LI",{});var exe=s(Yp);uce=n(exe,"STRONG",{});var Mht=s(uce);$To=r(Mht,"blenderbot"),Mht.forEach(t),kTo=r(exe," \u2014 "),aj=n(exe,"A",{href:!0});var Eht=s(aj);STo=r(Eht,"BlenderbotModel"),Eht.forEach(t),RTo=r(exe," (Blenderbot model)"),exe.forEach(t),PTo=i(x),Kp=n(x,"LI",{});var oxe=s(Kp);bce=n(oxe,"STRONG",{});var Cht=s(bce);BTo=r(Cht,"blenderbot-small"),Cht.forEach(t),ITo=r(oxe," \u2014 "),nj=n(oxe,"A",{href:!0});var wht=s(nj);NTo=r(wht,"BlenderbotSmallModel"),wht.forEach(t),qTo=r(oxe," (BlenderbotSmall model)"),oxe.forEach(t),jTo=i(x),Zp=n(x,"LI",{});var rxe=s(Zp);vce=n(rxe,"STRONG",{});var Aht=s(vce);DTo=r(Aht,"bloom"),Aht.forEach(t),GTo=r(rxe," \u2014 "),sj=n(rxe,"A",{href:!0});var Lht=s(sj);OTo=r(Lht,"BloomModel"),Lht.forEach(t),VTo=r(rxe," (BLOOM model)"),rxe.forEach(t),XTo=i(x),e_=n(x,"LI",{});var txe=s(e_);Fce=n(txe,"STRONG",{});var yht=s(Fce);zTo=r(yht,"camembert"),yht.forEach(t),QTo=r(txe," \u2014 "),lj=n(txe,"A",{href:!0});var xht=s(lj);WTo=r(xht,"CamembertModel"),xht.forEach(t),HTo=r(txe," (CamemBERT model)"),txe.forEach(t),UTo=i(x),o_=n(x,"LI",{});var axe=s(o_);Tce=n(axe,"STRONG",{});var $ht=s(Tce);JTo=r($ht,"canine"),$ht.forEach(t),YTo=r(axe," \u2014 "),ij=n(axe,"A",{href:!0});var kht=s(ij);KTo=r(kht,"CanineModel"),kht.forEach(t),ZTo=r(axe," (CANINE model)"),axe.forEach(t),e7o=i(x),r_=n(x,"LI",{});var nxe=s(r_);Mce=n(nxe,"STRONG",{});var Sht=s(Mce);o7o=r(Sht,"clip"),Sht.forEach(t),r7o=r(nxe," \u2014 "),dj=n(nxe,"A",{href:!0});var Rht=s(dj);t7o=r(Rht,"CLIPModel"),Rht.forEach(t),a7o=r(nxe," (CLIP model)"),nxe.forEach(t),n7o=i(x),t_=n(x,"LI",{});var sxe=s(t_);Ece=n(sxe,"STRONG",{});var Pht=s(Ece);s7o=r(Pht,"codegen"),Pht.forEach(t),l7o=r(sxe," \u2014 "),cj=n(sxe,"A",{href:!0});var Bht=s(cj);i7o=r(Bht,"CodeGenModel"),Bht.forEach(t),d7o=r(sxe," (CodeGen model)"),sxe.forEach(t),c7o=i(x),a_=n(x,"LI",{});var lxe=s(a_);Cce=n(lxe,"STRONG",{});var Iht=s(Cce);f7o=r(Iht,"convbert"),Iht.forEach(t),m7o=r(lxe," \u2014 "),fj=n(lxe,"A",{href:!0});var Nht=s(fj);g7o=r(Nht,"ConvBertModel"),Nht.forEach(t),h7o=r(lxe," (ConvBERT model)"),lxe.forEach(t),p7o=i(x),n_=n(x,"LI",{});var ixe=s(n_);wce=n(ixe,"STRONG",{});var qht=s(wce);_7o=r(qht,"convnext"),qht.forEach(t),u7o=r(ixe," \u2014 "),mj=n(ixe,"A",{href:!0});var jht=s(mj);b7o=r(jht,"ConvNextModel"),jht.forEach(t),v7o=r(ixe," (ConvNeXT model)"),ixe.forEach(t),F7o=i(x),s_=n(x,"LI",{});var dxe=s(s_);Ace=n(dxe,"STRONG",{});var Dht=s(Ace);T7o=r(Dht,"ctrl"),Dht.forEach(t),M7o=r(dxe," \u2014 "),gj=n(dxe,"A",{href:!0});var Ght=s(gj);E7o=r(Ght,"CTRLModel"),Ght.forEach(t),C7o=r(dxe," (CTRL model)"),dxe.forEach(t),w7o=i(x),l_=n(x,"LI",{});var cxe=s(l_);Lce=n(cxe,"STRONG",{});var Oht=s(Lce);A7o=r(Oht,"cvt"),Oht.forEach(t),L7o=r(cxe," \u2014 "),hj=n(cxe,"A",{href:!0});var Vht=s(hj);y7o=r(Vht,"CvtModel"),Vht.forEach(t),x7o=r(cxe," (CvT model)"),cxe.forEach(t),$7o=i(x),i_=n(x,"LI",{});var fxe=s(i_);yce=n(fxe,"STRONG",{});var Xht=s(yce);k7o=r(Xht,"data2vec-audio"),Xht.forEach(t),S7o=r(fxe," \u2014 "),pj=n(fxe,"A",{href:!0});var zht=s(pj);R7o=r(zht,"Data2VecAudioModel"),zht.forEach(t),P7o=r(fxe," (Data2VecAudio model)"),fxe.forEach(t),B7o=i(x),d_=n(x,"LI",{});var mxe=s(d_);xce=n(mxe,"STRONG",{});var Qht=s(xce);I7o=r(Qht,"data2vec-text"),Qht.forEach(t),N7o=r(mxe," \u2014 "),_j=n(mxe,"A",{href:!0});var Wht=s(_j);q7o=r(Wht,"Data2VecTextModel"),Wht.forEach(t),j7o=r(mxe," (Data2VecText model)"),mxe.forEach(t),D7o=i(x),c_=n(x,"LI",{});var gxe=s(c_);$ce=n(gxe,"STRONG",{});var Hht=s($ce);G7o=r(Hht,"data2vec-vision"),Hht.forEach(t),O7o=r(gxe," \u2014 "),uj=n(gxe,"A",{href:!0});var Uht=s(uj);V7o=r(Uht,"Data2VecVisionModel"),Uht.forEach(t),X7o=r(gxe," (Data2VecVision model)"),gxe.forEach(t),z7o=i(x),f_=n(x,"LI",{});var hxe=s(f_);kce=n(hxe,"STRONG",{});var Jht=s(kce);Q7o=r(Jht,"deberta"),Jht.forEach(t),W7o=r(hxe," \u2014 "),bj=n(hxe,"A",{href:!0});var Yht=s(bj);H7o=r(Yht,"DebertaModel"),Yht.forEach(t),U7o=r(hxe," (DeBERTa model)"),hxe.forEach(t),J7o=i(x),m_=n(x,"LI",{});var pxe=s(m_);Sce=n(pxe,"STRONG",{});var Kht=s(Sce);Y7o=r(Kht,"deberta-v2"),Kht.forEach(t),K7o=r(pxe," \u2014 "),vj=n(pxe,"A",{href:!0});var Zht=s(vj);Z7o=r(Zht,"DebertaV2Model"),Zht.forEach(t),e8o=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),o8o=i(x),g_=n(x,"LI",{});var _xe=s(g_);Rce=n(_xe,"STRONG",{});var ept=s(Rce);r8o=r(ept,"decision_transformer"),ept.forEach(t),t8o=r(_xe," \u2014 "),Fj=n(_xe,"A",{href:!0});var opt=s(Fj);a8o=r(opt,"DecisionTransformerModel"),opt.forEach(t),n8o=r(_xe," (Decision Transformer model)"),_xe.forEach(t),s8o=i(x),h_=n(x,"LI",{});var uxe=s(h_);Pce=n(uxe,"STRONG",{});var rpt=s(Pce);l8o=r(rpt,"deit"),rpt.forEach(t),i8o=r(uxe," \u2014 "),Tj=n(uxe,"A",{href:!0});var tpt=s(Tj);d8o=r(tpt,"DeiTModel"),tpt.forEach(t),c8o=r(uxe," (DeiT model)"),uxe.forEach(t),f8o=i(x),p_=n(x,"LI",{});var bxe=s(p_);Bce=n(bxe,"STRONG",{});var apt=s(Bce);m8o=r(apt,"detr"),apt.forEach(t),g8o=r(bxe," \u2014 "),Mj=n(bxe,"A",{href:!0});var npt=s(Mj);h8o=r(npt,"DetrModel"),npt.forEach(t),p8o=r(bxe," (DETR model)"),bxe.forEach(t),_8o=i(x),__=n(x,"LI",{});var vxe=s(__);Ice=n(vxe,"STRONG",{});var spt=s(Ice);u8o=r(spt,"distilbert"),spt.forEach(t),b8o=r(vxe," \u2014 "),Ej=n(vxe,"A",{href:!0});var lpt=s(Ej);v8o=r(lpt,"DistilBertModel"),lpt.forEach(t),F8o=r(vxe," (DistilBERT model)"),vxe.forEach(t),T8o=i(x),u_=n(x,"LI",{});var Fxe=s(u_);Nce=n(Fxe,"STRONG",{});var ipt=s(Nce);M8o=r(ipt,"dpr"),ipt.forEach(t),E8o=r(Fxe," \u2014 "),Cj=n(Fxe,"A",{href:!0});var dpt=s(Cj);C8o=r(dpt,"DPRQuestionEncoder"),dpt.forEach(t),w8o=r(Fxe," (DPR model)"),Fxe.forEach(t),A8o=i(x),b_=n(x,"LI",{});var Txe=s(b_);qce=n(Txe,"STRONG",{});var cpt=s(qce);L8o=r(cpt,"dpt"),cpt.forEach(t),y8o=r(Txe," \u2014 "),wj=n(Txe,"A",{href:!0});var fpt=s(wj);x8o=r(fpt,"DPTModel"),fpt.forEach(t),$8o=r(Txe," (DPT model)"),Txe.forEach(t),k8o=i(x),v_=n(x,"LI",{});var Mxe=s(v_);jce=n(Mxe,"STRONG",{});var mpt=s(jce);S8o=r(mpt,"electra"),mpt.forEach(t),R8o=r(Mxe," \u2014 "),Aj=n(Mxe,"A",{href:!0});var gpt=s(Aj);P8o=r(gpt,"ElectraModel"),gpt.forEach(t),B8o=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),I8o=i(x),F_=n(x,"LI",{});var Exe=s(F_);Dce=n(Exe,"STRONG",{});var hpt=s(Dce);N8o=r(hpt,"flaubert"),hpt.forEach(t),q8o=r(Exe," \u2014 "),Lj=n(Exe,"A",{href:!0});var ppt=s(Lj);j8o=r(ppt,"FlaubertModel"),ppt.forEach(t),D8o=r(Exe," (FlauBERT model)"),Exe.forEach(t),G8o=i(x),T_=n(x,"LI",{});var Cxe=s(T_);Gce=n(Cxe,"STRONG",{});var _pt=s(Gce);O8o=r(_pt,"flava"),_pt.forEach(t),V8o=r(Cxe," \u2014 "),yj=n(Cxe,"A",{href:!0});var upt=s(yj);X8o=r(upt,"FlavaModel"),upt.forEach(t),z8o=r(Cxe," (FLAVA model)"),Cxe.forEach(t),Q8o=i(x),M_=n(x,"LI",{});var wxe=s(M_);Oce=n(wxe,"STRONG",{});var bpt=s(Oce);W8o=r(bpt,"fnet"),bpt.forEach(t),H8o=r(wxe," \u2014 "),xj=n(wxe,"A",{href:!0});var vpt=s(xj);U8o=r(vpt,"FNetModel"),vpt.forEach(t),J8o=r(wxe," (FNet model)"),wxe.forEach(t),Y8o=i(x),E_=n(x,"LI",{});var Axe=s(E_);Vce=n(Axe,"STRONG",{});var Fpt=s(Vce);K8o=r(Fpt,"fsmt"),Fpt.forEach(t),Z8o=r(Axe," \u2014 "),$j=n(Axe,"A",{href:!0});var Tpt=s($j);eMo=r(Tpt,"FSMTModel"),Tpt.forEach(t),oMo=r(Axe," (FairSeq Machine-Translation model)"),Axe.forEach(t),rMo=i(x),Ws=n(x,"LI",{});var kS=s(Ws);Xce=n(kS,"STRONG",{});var Mpt=s(Xce);tMo=r(Mpt,"funnel"),Mpt.forEach(t),aMo=r(kS," \u2014 "),kj=n(kS,"A",{href:!0});var Ept=s(kj);nMo=r(Ept,"FunnelModel"),Ept.forEach(t),sMo=r(kS," or "),Sj=n(kS,"A",{href:!0});var Cpt=s(Sj);lMo=r(Cpt,"FunnelBaseModel"),Cpt.forEach(t),iMo=r(kS," (Funnel Transformer model)"),kS.forEach(t),dMo=i(x),C_=n(x,"LI",{});var Lxe=s(C_);zce=n(Lxe,"STRONG",{});var wpt=s(zce);cMo=r(wpt,"glpn"),wpt.forEach(t),fMo=r(Lxe," \u2014 "),Rj=n(Lxe,"A",{href:!0});var Apt=s(Rj);mMo=r(Apt,"GLPNModel"),Apt.forEach(t),gMo=r(Lxe," (GLPN model)"),Lxe.forEach(t),hMo=i(x),w_=n(x,"LI",{});var yxe=s(w_);Qce=n(yxe,"STRONG",{});var Lpt=s(Qce);pMo=r(Lpt,"gpt2"),Lpt.forEach(t),_Mo=r(yxe," \u2014 "),Pj=n(yxe,"A",{href:!0});var ypt=s(Pj);uMo=r(ypt,"GPT2Model"),ypt.forEach(t),bMo=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),vMo=i(x),A_=n(x,"LI",{});var xxe=s(A_);Wce=n(xxe,"STRONG",{});var xpt=s(Wce);FMo=r(xpt,"gpt_neo"),xpt.forEach(t),TMo=r(xxe," \u2014 "),Bj=n(xxe,"A",{href:!0});var $pt=s(Bj);MMo=r($pt,"GPTNeoModel"),$pt.forEach(t),EMo=r(xxe," (GPT Neo model)"),xxe.forEach(t),CMo=i(x),L_=n(x,"LI",{});var $xe=s(L_);Hce=n($xe,"STRONG",{});var kpt=s(Hce);wMo=r(kpt,"gpt_neox"),kpt.forEach(t),AMo=r($xe," \u2014 "),Ij=n($xe,"A",{href:!0});var Spt=s(Ij);LMo=r(Spt,"GPTNeoXModel"),Spt.forEach(t),yMo=r($xe," (GPT NeoX model)"),$xe.forEach(t),xMo=i(x),y_=n(x,"LI",{});var kxe=s(y_);Uce=n(kxe,"STRONG",{});var Rpt=s(Uce);$Mo=r(Rpt,"gptj"),Rpt.forEach(t),kMo=r(kxe," \u2014 "),Nj=n(kxe,"A",{href:!0});var Ppt=s(Nj);SMo=r(Ppt,"GPTJModel"),Ppt.forEach(t),RMo=r(kxe," (GPT-J model)"),kxe.forEach(t),PMo=i(x),x_=n(x,"LI",{});var Sxe=s(x_);Jce=n(Sxe,"STRONG",{});var Bpt=s(Jce);BMo=r(Bpt,"groupvit"),Bpt.forEach(t),IMo=r(Sxe," \u2014 "),qj=n(Sxe,"A",{href:!0});var Ipt=s(qj);NMo=r(Ipt,"GroupViTModel"),Ipt.forEach(t),qMo=r(Sxe," (GroupViT model)"),Sxe.forEach(t),jMo=i(x),$_=n(x,"LI",{});var Rxe=s($_);Yce=n(Rxe,"STRONG",{});var Npt=s(Yce);DMo=r(Npt,"hubert"),Npt.forEach(t),GMo=r(Rxe," \u2014 "),jj=n(Rxe,"A",{href:!0});var qpt=s(jj);OMo=r(qpt,"HubertModel"),qpt.forEach(t),VMo=r(Rxe," (Hubert model)"),Rxe.forEach(t),XMo=i(x),k_=n(x,"LI",{});var Pxe=s(k_);Kce=n(Pxe,"STRONG",{});var jpt=s(Kce);zMo=r(jpt,"ibert"),jpt.forEach(t),QMo=r(Pxe," \u2014 "),Dj=n(Pxe,"A",{href:!0});var Dpt=s(Dj);WMo=r(Dpt,"IBertModel"),Dpt.forEach(t),HMo=r(Pxe," (I-BERT model)"),Pxe.forEach(t),UMo=i(x),S_=n(x,"LI",{});var Bxe=s(S_);Zce=n(Bxe,"STRONG",{});var Gpt=s(Zce);JMo=r(Gpt,"imagegpt"),Gpt.forEach(t),YMo=r(Bxe," \u2014 "),Gj=n(Bxe,"A",{href:!0});var Opt=s(Gj);KMo=r(Opt,"ImageGPTModel"),Opt.forEach(t),ZMo=r(Bxe," (ImageGPT model)"),Bxe.forEach(t),e4o=i(x),R_=n(x,"LI",{});var Ixe=s(R_);efe=n(Ixe,"STRONG",{});var Vpt=s(efe);o4o=r(Vpt,"jukebox"),Vpt.forEach(t),r4o=r(Ixe," \u2014 "),ofe=n(Ixe,"CODE",{});var Xpt=s(ofe);t4o=r(Xpt,"JukeboxModel"),Xpt.forEach(t),a4o=r(Ixe," (Jukebox model)"),Ixe.forEach(t),n4o=i(x),P_=n(x,"LI",{});var Nxe=s(P_);rfe=n(Nxe,"STRONG",{});var zpt=s(rfe);s4o=r(zpt,"layoutlm"),zpt.forEach(t),l4o=r(Nxe," \u2014 "),Oj=n(Nxe,"A",{href:!0});var Qpt=s(Oj);i4o=r(Qpt,"LayoutLMModel"),Qpt.forEach(t),d4o=r(Nxe," (LayoutLM model)"),Nxe.forEach(t),c4o=i(x),B_=n(x,"LI",{});var qxe=s(B_);tfe=n(qxe,"STRONG",{});var Wpt=s(tfe);f4o=r(Wpt,"layoutlmv2"),Wpt.forEach(t),m4o=r(qxe," \u2014 "),Vj=n(qxe,"A",{href:!0});var Hpt=s(Vj);g4o=r(Hpt,"LayoutLMv2Model"),Hpt.forEach(t),h4o=r(qxe," (LayoutLMv2 model)"),qxe.forEach(t),p4o=i(x),I_=n(x,"LI",{});var jxe=s(I_);afe=n(jxe,"STRONG",{});var Upt=s(afe);_4o=r(Upt,"layoutlmv3"),Upt.forEach(t),u4o=r(jxe," \u2014 "),Xj=n(jxe,"A",{href:!0});var Jpt=s(Xj);b4o=r(Jpt,"LayoutLMv3Model"),Jpt.forEach(t),v4o=r(jxe," (LayoutLMv3 model)"),jxe.forEach(t),F4o=i(x),N_=n(x,"LI",{});var Dxe=s(N_);nfe=n(Dxe,"STRONG",{});var Ypt=s(nfe);T4o=r(Ypt,"led"),Ypt.forEach(t),M4o=r(Dxe," \u2014 "),zj=n(Dxe,"A",{href:!0});var Kpt=s(zj);E4o=r(Kpt,"LEDModel"),Kpt.forEach(t),C4o=r(Dxe," (LED model)"),Dxe.forEach(t),w4o=i(x),q_=n(x,"LI",{});var Gxe=s(q_);sfe=n(Gxe,"STRONG",{});var Zpt=s(sfe);A4o=r(Zpt,"levit"),Zpt.forEach(t),L4o=r(Gxe," \u2014 "),Qj=n(Gxe,"A",{href:!0});var e_t=s(Qj);y4o=r(e_t,"LevitModel"),e_t.forEach(t),x4o=r(Gxe," (LeViT model)"),Gxe.forEach(t),$4o=i(x),j_=n(x,"LI",{});var Oxe=s(j_);lfe=n(Oxe,"STRONG",{});var o_t=s(lfe);k4o=r(o_t,"longformer"),o_t.forEach(t),S4o=r(Oxe," \u2014 "),Wj=n(Oxe,"A",{href:!0});var r_t=s(Wj);R4o=r(r_t,"LongformerModel"),r_t.forEach(t),P4o=r(Oxe," (Longformer model)"),Oxe.forEach(t),B4o=i(x),D_=n(x,"LI",{});var Vxe=s(D_);ife=n(Vxe,"STRONG",{});var t_t=s(ife);I4o=r(t_t,"longt5"),t_t.forEach(t),N4o=r(Vxe," \u2014 "),Hj=n(Vxe,"A",{href:!0});var a_t=s(Hj);q4o=r(a_t,"LongT5Model"),a_t.forEach(t),j4o=r(Vxe," (LongT5 model)"),Vxe.forEach(t),D4o=i(x),G_=n(x,"LI",{});var Xxe=s(G_);dfe=n(Xxe,"STRONG",{});var n_t=s(dfe);G4o=r(n_t,"luke"),n_t.forEach(t),O4o=r(Xxe," \u2014 "),Uj=n(Xxe,"A",{href:!0});var s_t=s(Uj);V4o=r(s_t,"LukeModel"),s_t.forEach(t),X4o=r(Xxe," (LUKE model)"),Xxe.forEach(t),z4o=i(x),O_=n(x,"LI",{});var zxe=s(O_);cfe=n(zxe,"STRONG",{});var l_t=s(cfe);Q4o=r(l_t,"lxmert"),l_t.forEach(t),W4o=r(zxe," \u2014 "),Jj=n(zxe,"A",{href:!0});var i_t=s(Jj);H4o=r(i_t,"LxmertModel"),i_t.forEach(t),U4o=r(zxe," (LXMERT model)"),zxe.forEach(t),J4o=i(x),V_=n(x,"LI",{});var Qxe=s(V_);ffe=n(Qxe,"STRONG",{});var d_t=s(ffe);Y4o=r(d_t,"m2m_100"),d_t.forEach(t),K4o=r(Qxe," \u2014 "),Yj=n(Qxe,"A",{href:!0});var c_t=s(Yj);Z4o=r(c_t,"M2M100Model"),c_t.forEach(t),eEo=r(Qxe," (M2M100 model)"),Qxe.forEach(t),oEo=i(x),X_=n(x,"LI",{});var Wxe=s(X_);mfe=n(Wxe,"STRONG",{});var f_t=s(mfe);rEo=r(f_t,"marian"),f_t.forEach(t),tEo=r(Wxe," \u2014 "),Kj=n(Wxe,"A",{href:!0});var m_t=s(Kj);aEo=r(m_t,"MarianModel"),m_t.forEach(t),nEo=r(Wxe," (Marian model)"),Wxe.forEach(t),sEo=i(x),z_=n(x,"LI",{});var Hxe=s(z_);gfe=n(Hxe,"STRONG",{});var g_t=s(gfe);lEo=r(g_t,"maskformer"),g_t.forEach(t),iEo=r(Hxe," \u2014 "),Zj=n(Hxe,"A",{href:!0});var h_t=s(Zj);dEo=r(h_t,"MaskFormerModel"),h_t.forEach(t),cEo=r(Hxe," (MaskFormer model)"),Hxe.forEach(t),fEo=i(x),Q_=n(x,"LI",{});var Uxe=s(Q_);hfe=n(Uxe,"STRONG",{});var p_t=s(hfe);mEo=r(p_t,"mbart"),p_t.forEach(t),gEo=r(Uxe," \u2014 "),eD=n(Uxe,"A",{href:!0});var __t=s(eD);hEo=r(__t,"MBartModel"),__t.forEach(t),pEo=r(Uxe," (mBART model)"),Uxe.forEach(t),_Eo=i(x),W_=n(x,"LI",{});var Jxe=s(W_);pfe=n(Jxe,"STRONG",{});var u_t=s(pfe);uEo=r(u_t,"mctct"),u_t.forEach(t),bEo=r(Jxe," \u2014 "),oD=n(Jxe,"A",{href:!0});var b_t=s(oD);vEo=r(b_t,"MCTCTModel"),b_t.forEach(t),FEo=r(Jxe," (M-CTC-T model)"),Jxe.forEach(t),TEo=i(x),H_=n(x,"LI",{});var Yxe=s(H_);_fe=n(Yxe,"STRONG",{});var v_t=s(_fe);MEo=r(v_t,"megatron-bert"),v_t.forEach(t),EEo=r(Yxe," \u2014 "),rD=n(Yxe,"A",{href:!0});var F_t=s(rD);CEo=r(F_t,"MegatronBertModel"),F_t.forEach(t),wEo=r(Yxe," (Megatron-BERT model)"),Yxe.forEach(t),AEo=i(x),U_=n(x,"LI",{});var Kxe=s(U_);ufe=n(Kxe,"STRONG",{});var T_t=s(ufe);LEo=r(T_t,"mobilebert"),T_t.forEach(t),yEo=r(Kxe," \u2014 "),tD=n(Kxe,"A",{href:!0});var M_t=s(tD);xEo=r(M_t,"MobileBertModel"),M_t.forEach(t),$Eo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),kEo=i(x),J_=n(x,"LI",{});var Zxe=s(J_);bfe=n(Zxe,"STRONG",{});var E_t=s(bfe);SEo=r(E_t,"mobilevit"),E_t.forEach(t),REo=r(Zxe," \u2014 "),aD=n(Zxe,"A",{href:!0});var C_t=s(aD);PEo=r(C_t,"MobileViTModel"),C_t.forEach(t),BEo=r(Zxe," (MobileViT model)"),Zxe.forEach(t),IEo=i(x),Y_=n(x,"LI",{});var e$e=s(Y_);vfe=n(e$e,"STRONG",{});var w_t=s(vfe);NEo=r(w_t,"mpnet"),w_t.forEach(t),qEo=r(e$e," \u2014 "),nD=n(e$e,"A",{href:!0});var A_t=s(nD);jEo=r(A_t,"MPNetModel"),A_t.forEach(t),DEo=r(e$e," (MPNet model)"),e$e.forEach(t),GEo=i(x),K_=n(x,"LI",{});var o$e=s(K_);Ffe=n(o$e,"STRONG",{});var L_t=s(Ffe);OEo=r(L_t,"mt5"),L_t.forEach(t),VEo=r(o$e," \u2014 "),sD=n(o$e,"A",{href:!0});var y_t=s(sD);XEo=r(y_t,"MT5Model"),y_t.forEach(t),zEo=r(o$e," (MT5 model)"),o$e.forEach(t),QEo=i(x),Z_=n(x,"LI",{});var r$e=s(Z_);Tfe=n(r$e,"STRONG",{});var x_t=s(Tfe);WEo=r(x_t,"mvp"),x_t.forEach(t),HEo=r(r$e," \u2014 "),lD=n(r$e,"A",{href:!0});var $_t=s(lD);UEo=r($_t,"MvpModel"),$_t.forEach(t),JEo=r(r$e," (MVP model)"),r$e.forEach(t),YEo=i(x),eu=n(x,"LI",{});var t$e=s(eu);Mfe=n(t$e,"STRONG",{});var k_t=s(Mfe);KEo=r(k_t,"nezha"),k_t.forEach(t),ZEo=r(t$e," \u2014 "),iD=n(t$e,"A",{href:!0});var S_t=s(iD);eCo=r(S_t,"NezhaModel"),S_t.forEach(t),oCo=r(t$e," (Nezha model)"),t$e.forEach(t),rCo=i(x),ou=n(x,"LI",{});var a$e=s(ou);Efe=n(a$e,"STRONG",{});var R_t=s(Efe);tCo=r(R_t,"nystromformer"),R_t.forEach(t),aCo=r(a$e," \u2014 "),dD=n(a$e,"A",{href:!0});var P_t=s(dD);nCo=r(P_t,"NystromformerModel"),P_t.forEach(t),sCo=r(a$e," (Nystr\xF6mformer model)"),a$e.forEach(t),lCo=i(x),ru=n(x,"LI",{});var n$e=s(ru);Cfe=n(n$e,"STRONG",{});var B_t=s(Cfe);iCo=r(B_t,"openai-gpt"),B_t.forEach(t),dCo=r(n$e," \u2014 "),cD=n(n$e,"A",{href:!0});var I_t=s(cD);cCo=r(I_t,"OpenAIGPTModel"),I_t.forEach(t),fCo=r(n$e," (OpenAI GPT model)"),n$e.forEach(t),mCo=i(x),tu=n(x,"LI",{});var s$e=s(tu);wfe=n(s$e,"STRONG",{});var N_t=s(wfe);gCo=r(N_t,"opt"),N_t.forEach(t),hCo=r(s$e," \u2014 "),fD=n(s$e,"A",{href:!0});var q_t=s(fD);pCo=r(q_t,"OPTModel"),q_t.forEach(t),_Co=r(s$e," (OPT model)"),s$e.forEach(t),uCo=i(x),au=n(x,"LI",{});var l$e=s(au);Afe=n(l$e,"STRONG",{});var j_t=s(Afe);bCo=r(j_t,"pegasus"),j_t.forEach(t),vCo=r(l$e," \u2014 "),mD=n(l$e,"A",{href:!0});var D_t=s(mD);FCo=r(D_t,"PegasusModel"),D_t.forEach(t),TCo=r(l$e," (Pegasus model)"),l$e.forEach(t),MCo=i(x),nu=n(x,"LI",{});var i$e=s(nu);Lfe=n(i$e,"STRONG",{});var G_t=s(Lfe);ECo=r(G_t,"perceiver"),G_t.forEach(t),CCo=r(i$e," \u2014 "),gD=n(i$e,"A",{href:!0});var O_t=s(gD);wCo=r(O_t,"PerceiverModel"),O_t.forEach(t),ACo=r(i$e," (Perceiver model)"),i$e.forEach(t),LCo=i(x),su=n(x,"LI",{});var d$e=s(su);yfe=n(d$e,"STRONG",{});var V_t=s(yfe);yCo=r(V_t,"plbart"),V_t.forEach(t),xCo=r(d$e," \u2014 "),hD=n(d$e,"A",{href:!0});var X_t=s(hD);$Co=r(X_t,"PLBartModel"),X_t.forEach(t),kCo=r(d$e," (PLBart model)"),d$e.forEach(t),SCo=i(x),lu=n(x,"LI",{});var c$e=s(lu);xfe=n(c$e,"STRONG",{});var z_t=s(xfe);RCo=r(z_t,"poolformer"),z_t.forEach(t),PCo=r(c$e," \u2014 "),pD=n(c$e,"A",{href:!0});var Q_t=s(pD);BCo=r(Q_t,"PoolFormerModel"),Q_t.forEach(t),ICo=r(c$e," (PoolFormer model)"),c$e.forEach(t),NCo=i(x),iu=n(x,"LI",{});var f$e=s(iu);$fe=n(f$e,"STRONG",{});var W_t=s($fe);qCo=r(W_t,"prophetnet"),W_t.forEach(t),jCo=r(f$e," \u2014 "),_D=n(f$e,"A",{href:!0});var H_t=s(_D);DCo=r(H_t,"ProphetNetModel"),H_t.forEach(t),GCo=r(f$e," (ProphetNet model)"),f$e.forEach(t),OCo=i(x),du=n(x,"LI",{});var m$e=s(du);kfe=n(m$e,"STRONG",{});var U_t=s(kfe);VCo=r(U_t,"qdqbert"),U_t.forEach(t),XCo=r(m$e," \u2014 "),uD=n(m$e,"A",{href:!0});var J_t=s(uD);zCo=r(J_t,"QDQBertModel"),J_t.forEach(t),QCo=r(m$e," (QDQBert model)"),m$e.forEach(t),WCo=i(x),cu=n(x,"LI",{});var g$e=s(cu);Sfe=n(g$e,"STRONG",{});var Y_t=s(Sfe);HCo=r(Y_t,"reformer"),Y_t.forEach(t),UCo=r(g$e," \u2014 "),bD=n(g$e,"A",{href:!0});var K_t=s(bD);JCo=r(K_t,"ReformerModel"),K_t.forEach(t),YCo=r(g$e," (Reformer model)"),g$e.forEach(t),KCo=i(x),fu=n(x,"LI",{});var h$e=s(fu);Rfe=n(h$e,"STRONG",{});var Z_t=s(Rfe);ZCo=r(Z_t,"regnet"),Z_t.forEach(t),e3o=r(h$e," \u2014 "),vD=n(h$e,"A",{href:!0});var eut=s(vD);o3o=r(eut,"RegNetModel"),eut.forEach(t),r3o=r(h$e," (RegNet model)"),h$e.forEach(t),t3o=i(x),mu=n(x,"LI",{});var p$e=s(mu);Pfe=n(p$e,"STRONG",{});var out=s(Pfe);a3o=r(out,"rembert"),out.forEach(t),n3o=r(p$e," \u2014 "),FD=n(p$e,"A",{href:!0});var rut=s(FD);s3o=r(rut,"RemBertModel"),rut.forEach(t),l3o=r(p$e," (RemBERT model)"),p$e.forEach(t),i3o=i(x),gu=n(x,"LI",{});var _$e=s(gu);Bfe=n(_$e,"STRONG",{});var tut=s(Bfe);d3o=r(tut,"resnet"),tut.forEach(t),c3o=r(_$e," \u2014 "),TD=n(_$e,"A",{href:!0});var aut=s(TD);f3o=r(aut,"ResNetModel"),aut.forEach(t),m3o=r(_$e," (ResNet model)"),_$e.forEach(t),g3o=i(x),hu=n(x,"LI",{});var u$e=s(hu);Ife=n(u$e,"STRONG",{});var nut=s(Ife);h3o=r(nut,"retribert"),nut.forEach(t),p3o=r(u$e," \u2014 "),MD=n(u$e,"A",{href:!0});var sut=s(MD);_3o=r(sut,"RetriBertModel"),sut.forEach(t),u3o=r(u$e," (RetriBERT model)"),u$e.forEach(t),b3o=i(x),pu=n(x,"LI",{});var b$e=s(pu);Nfe=n(b$e,"STRONG",{});var lut=s(Nfe);v3o=r(lut,"roberta"),lut.forEach(t),F3o=r(b$e," \u2014 "),ED=n(b$e,"A",{href:!0});var iut=s(ED);T3o=r(iut,"RobertaModel"),iut.forEach(t),M3o=r(b$e," (RoBERTa model)"),b$e.forEach(t),E3o=i(x),_u=n(x,"LI",{});var v$e=s(_u);qfe=n(v$e,"STRONG",{});var dut=s(qfe);C3o=r(dut,"roformer"),dut.forEach(t),w3o=r(v$e," \u2014 "),CD=n(v$e,"A",{href:!0});var cut=s(CD);A3o=r(cut,"RoFormerModel"),cut.forEach(t),L3o=r(v$e," (RoFormer model)"),v$e.forEach(t),y3o=i(x),uu=n(x,"LI",{});var F$e=s(uu);jfe=n(F$e,"STRONG",{});var fut=s(jfe);x3o=r(fut,"segformer"),fut.forEach(t),$3o=r(F$e," \u2014 "),wD=n(F$e,"A",{href:!0});var mut=s(wD);k3o=r(mut,"SegformerModel"),mut.forEach(t),S3o=r(F$e," (SegFormer model)"),F$e.forEach(t),R3o=i(x),bu=n(x,"LI",{});var T$e=s(bu);Dfe=n(T$e,"STRONG",{});var gut=s(Dfe);P3o=r(gut,"sew"),gut.forEach(t),B3o=r(T$e," \u2014 "),AD=n(T$e,"A",{href:!0});var hut=s(AD);I3o=r(hut,"SEWModel"),hut.forEach(t),N3o=r(T$e," (SEW model)"),T$e.forEach(t),q3o=i(x),vu=n(x,"LI",{});var M$e=s(vu);Gfe=n(M$e,"STRONG",{});var put=s(Gfe);j3o=r(put,"sew-d"),put.forEach(t),D3o=r(M$e," \u2014 "),LD=n(M$e,"A",{href:!0});var _ut=s(LD);G3o=r(_ut,"SEWDModel"),_ut.forEach(t),O3o=r(M$e," (SEW-D model)"),M$e.forEach(t),V3o=i(x),Fu=n(x,"LI",{});var E$e=s(Fu);Ofe=n(E$e,"STRONG",{});var uut=s(Ofe);X3o=r(uut,"speech_to_text"),uut.forEach(t),z3o=r(E$e," \u2014 "),yD=n(E$e,"A",{href:!0});var but=s(yD);Q3o=r(but,"Speech2TextModel"),but.forEach(t),W3o=r(E$e," (Speech2Text model)"),E$e.forEach(t),H3o=i(x),Tu=n(x,"LI",{});var C$e=s(Tu);Vfe=n(C$e,"STRONG",{});var vut=s(Vfe);U3o=r(vut,"splinter"),vut.forEach(t),J3o=r(C$e," \u2014 "),xD=n(C$e,"A",{href:!0});var Fut=s(xD);Y3o=r(Fut,"SplinterModel"),Fut.forEach(t),K3o=r(C$e," (Splinter model)"),C$e.forEach(t),Z3o=i(x),Mu=n(x,"LI",{});var w$e=s(Mu);Xfe=n(w$e,"STRONG",{});var Tut=s(Xfe);e5o=r(Tut,"squeezebert"),Tut.forEach(t),o5o=r(w$e," \u2014 "),$D=n(w$e,"A",{href:!0});var Mut=s($D);r5o=r(Mut,"SqueezeBertModel"),Mut.forEach(t),t5o=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),a5o=i(x),Eu=n(x,"LI",{});var A$e=s(Eu);zfe=n(A$e,"STRONG",{});var Eut=s(zfe);n5o=r(Eut,"swin"),Eut.forEach(t),s5o=r(A$e," \u2014 "),kD=n(A$e,"A",{href:!0});var Cut=s(kD);l5o=r(Cut,"SwinModel"),Cut.forEach(t),i5o=r(A$e," (Swin Transformer model)"),A$e.forEach(t),d5o=i(x),Cu=n(x,"LI",{});var L$e=s(Cu);Qfe=n(L$e,"STRONG",{});var wut=s(Qfe);c5o=r(wut,"t5"),wut.forEach(t),f5o=r(L$e," \u2014 "),SD=n(L$e,"A",{href:!0});var Aut=s(SD);m5o=r(Aut,"T5Model"),Aut.forEach(t),g5o=r(L$e," (T5 model)"),L$e.forEach(t),h5o=i(x),wu=n(x,"LI",{});var y$e=s(wu);Wfe=n(y$e,"STRONG",{});var Lut=s(Wfe);p5o=r(Lut,"tapas"),Lut.forEach(t),_5o=r(y$e," \u2014 "),RD=n(y$e,"A",{href:!0});var yut=s(RD);u5o=r(yut,"TapasModel"),yut.forEach(t),b5o=r(y$e," (TAPAS model)"),y$e.forEach(t),v5o=i(x),Au=n(x,"LI",{});var x$e=s(Au);Hfe=n(x$e,"STRONG",{});var xut=s(Hfe);F5o=r(xut,"trajectory_transformer"),xut.forEach(t),T5o=r(x$e," \u2014 "),PD=n(x$e,"A",{href:!0});var $ut=s(PD);M5o=r($ut,"TrajectoryTransformerModel"),$ut.forEach(t),E5o=r(x$e," (Trajectory Transformer model)"),x$e.forEach(t),C5o=i(x),Lu=n(x,"LI",{});var $$e=s(Lu);Ufe=n($$e,"STRONG",{});var kut=s(Ufe);w5o=r(kut,"transfo-xl"),kut.forEach(t),A5o=r($$e," \u2014 "),BD=n($$e,"A",{href:!0});var Sut=s(BD);L5o=r(Sut,"TransfoXLModel"),Sut.forEach(t),y5o=r($$e," (Transformer-XL model)"),$$e.forEach(t),x5o=i(x),yu=n(x,"LI",{});var k$e=s(yu);Jfe=n(k$e,"STRONG",{});var Rut=s(Jfe);$5o=r(Rut,"unispeech"),Rut.forEach(t),k5o=r(k$e," \u2014 "),ID=n(k$e,"A",{href:!0});var Put=s(ID);S5o=r(Put,"UniSpeechModel"),Put.forEach(t),R5o=r(k$e," (UniSpeech model)"),k$e.forEach(t),P5o=i(x),xu=n(x,"LI",{});var S$e=s(xu);Yfe=n(S$e,"STRONG",{});var But=s(Yfe);B5o=r(But,"unispeech-sat"),But.forEach(t),I5o=r(S$e," \u2014 "),ND=n(S$e,"A",{href:!0});var Iut=s(ND);N5o=r(Iut,"UniSpeechSatModel"),Iut.forEach(t),q5o=r(S$e," (UniSpeechSat model)"),S$e.forEach(t),j5o=i(x),$u=n(x,"LI",{});var R$e=s($u);Kfe=n(R$e,"STRONG",{});var Nut=s(Kfe);D5o=r(Nut,"van"),Nut.forEach(t),G5o=r(R$e," \u2014 "),qD=n(R$e,"A",{href:!0});var qut=s(qD);O5o=r(qut,"VanModel"),qut.forEach(t),V5o=r(R$e," (VAN model)"),R$e.forEach(t),X5o=i(x),ku=n(x,"LI",{});var P$e=s(ku);Zfe=n(P$e,"STRONG",{});var jut=s(Zfe);z5o=r(jut,"vilt"),jut.forEach(t),Q5o=r(P$e," \u2014 "),jD=n(P$e,"A",{href:!0});var Dut=s(jD);W5o=r(Dut,"ViltModel"),Dut.forEach(t),H5o=r(P$e," (ViLT model)"),P$e.forEach(t),U5o=i(x),Su=n(x,"LI",{});var B$e=s(Su);eme=n(B$e,"STRONG",{});var Gut=s(eme);J5o=r(Gut,"vision-text-dual-encoder"),Gut.forEach(t),Y5o=r(B$e," \u2014 "),DD=n(B$e,"A",{href:!0});var Out=s(DD);K5o=r(Out,"VisionTextDualEncoderModel"),Out.forEach(t),Z5o=r(B$e," (VisionTextDualEncoder model)"),B$e.forEach(t),e0o=i(x),Ru=n(x,"LI",{});var I$e=s(Ru);ome=n(I$e,"STRONG",{});var Vut=s(ome);o0o=r(Vut,"visual_bert"),Vut.forEach(t),r0o=r(I$e," \u2014 "),GD=n(I$e,"A",{href:!0});var Xut=s(GD);t0o=r(Xut,"VisualBertModel"),Xut.forEach(t),a0o=r(I$e," (VisualBERT model)"),I$e.forEach(t),n0o=i(x),Pu=n(x,"LI",{});var N$e=s(Pu);rme=n(N$e,"STRONG",{});var zut=s(rme);s0o=r(zut,"vit"),zut.forEach(t),l0o=r(N$e," \u2014 "),OD=n(N$e,"A",{href:!0});var Qut=s(OD);i0o=r(Qut,"ViTModel"),Qut.forEach(t),d0o=r(N$e," (ViT model)"),N$e.forEach(t),c0o=i(x),Bu=n(x,"LI",{});var q$e=s(Bu);tme=n(q$e,"STRONG",{});var Wut=s(tme);f0o=r(Wut,"vit_mae"),Wut.forEach(t),m0o=r(q$e," \u2014 "),VD=n(q$e,"A",{href:!0});var Hut=s(VD);g0o=r(Hut,"ViTMAEModel"),Hut.forEach(t),h0o=r(q$e," (ViTMAE model)"),q$e.forEach(t),p0o=i(x),Iu=n(x,"LI",{});var j$e=s(Iu);ame=n(j$e,"STRONG",{});var Uut=s(ame);_0o=r(Uut,"wav2vec2"),Uut.forEach(t),u0o=r(j$e," \u2014 "),XD=n(j$e,"A",{href:!0});var Jut=s(XD);b0o=r(Jut,"Wav2Vec2Model"),Jut.forEach(t),v0o=r(j$e," (Wav2Vec2 model)"),j$e.forEach(t),F0o=i(x),Nu=n(x,"LI",{});var D$e=s(Nu);nme=n(D$e,"STRONG",{});var Yut=s(nme);T0o=r(Yut,"wav2vec2-conformer"),Yut.forEach(t),M0o=r(D$e," \u2014 "),zD=n(D$e,"A",{href:!0});var Kut=s(zD);E0o=r(Kut,"Wav2Vec2ConformerModel"),Kut.forEach(t),C0o=r(D$e," (Wav2Vec2-Conformer model)"),D$e.forEach(t),w0o=i(x),qu=n(x,"LI",{});var G$e=s(qu);sme=n(G$e,"STRONG",{});var Zut=s(sme);A0o=r(Zut,"wavlm"),Zut.forEach(t),L0o=r(G$e," \u2014 "),QD=n(G$e,"A",{href:!0});var e2t=s(QD);y0o=r(e2t,"WavLMModel"),e2t.forEach(t),x0o=r(G$e," (WavLM model)"),G$e.forEach(t),$0o=i(x),ju=n(x,"LI",{});var O$e=s(ju);lme=n(O$e,"STRONG",{});var o2t=s(lme);k0o=r(o2t,"xglm"),o2t.forEach(t),S0o=r(O$e," \u2014 "),WD=n(O$e,"A",{href:!0});var r2t=s(WD);R0o=r(r2t,"XGLMModel"),r2t.forEach(t),P0o=r(O$e," (XGLM model)"),O$e.forEach(t),B0o=i(x),Du=n(x,"LI",{});var V$e=s(Du);ime=n(V$e,"STRONG",{});var t2t=s(ime);I0o=r(t2t,"xlm"),t2t.forEach(t),N0o=r(V$e," \u2014 "),HD=n(V$e,"A",{href:!0});var a2t=s(HD);q0o=r(a2t,"XLMModel"),a2t.forEach(t),j0o=r(V$e," (XLM model)"),V$e.forEach(t),D0o=i(x),Gu=n(x,"LI",{});var X$e=s(Gu);dme=n(X$e,"STRONG",{});var n2t=s(dme);G0o=r(n2t,"xlm-prophetnet"),n2t.forEach(t),O0o=r(X$e," \u2014 "),UD=n(X$e,"A",{href:!0});var s2t=s(UD);V0o=r(s2t,"XLMProphetNetModel"),s2t.forEach(t),X0o=r(X$e," (XLM-ProphetNet model)"),X$e.forEach(t),z0o=i(x),Ou=n(x,"LI",{});var z$e=s(Ou);cme=n(z$e,"STRONG",{});var l2t=s(cme);Q0o=r(l2t,"xlm-roberta"),l2t.forEach(t),W0o=r(z$e," \u2014 "),JD=n(z$e,"A",{href:!0});var i2t=s(JD);H0o=r(i2t,"XLMRobertaModel"),i2t.forEach(t),U0o=r(z$e," (XLM-RoBERTa model)"),z$e.forEach(t),J0o=i(x),Vu=n(x,"LI",{});var Q$e=s(Vu);fme=n(Q$e,"STRONG",{});var d2t=s(fme);Y0o=r(d2t,"xlm-roberta-xl"),d2t.forEach(t),K0o=r(Q$e," \u2014 "),YD=n(Q$e,"A",{href:!0});var c2t=s(YD);Z0o=r(c2t,"XLMRobertaXLModel"),c2t.forEach(t),ewo=r(Q$e," (XLM-RoBERTa-XL model)"),Q$e.forEach(t),owo=i(x),Xu=n(x,"LI",{});var W$e=s(Xu);mme=n(W$e,"STRONG",{});var f2t=s(mme);rwo=r(f2t,"xlnet"),f2t.forEach(t),two=r(W$e," \u2014 "),KD=n(W$e,"A",{href:!0});var m2t=s(KD);awo=r(m2t,"XLNetModel"),m2t.forEach(t),nwo=r(W$e," (XLNet model)"),W$e.forEach(t),swo=i(x),zu=n(x,"LI",{});var H$e=s(zu);gme=n(H$e,"STRONG",{});var g2t=s(gme);lwo=r(g2t,"yolos"),g2t.forEach(t),iwo=r(H$e," \u2014 "),ZD=n(H$e,"A",{href:!0});var h2t=s(ZD);dwo=r(h2t,"YolosModel"),h2t.forEach(t),cwo=r(H$e," (YOLOS model)"),H$e.forEach(t),fwo=i(x),Qu=n(x,"LI",{});var U$e=s(Qu);hme=n(U$e,"STRONG",{});var p2t=s(hme);mwo=r(p2t,"yoso"),p2t.forEach(t),gwo=r(U$e," \u2014 "),eG=n(U$e,"A",{href:!0});var _2t=s(eG);hwo=r(_2t,"YosoModel"),_2t.forEach(t),pwo=r(U$e," (YOSO model)"),U$e.forEach(t),x.forEach(t),_wo=i(sa),Wu=n(sa,"P",{});var J$e=s(Wu);uwo=r(J$e,"The model is set in evaluation mode by default using "),pme=n(J$e,"CODE",{});var u2t=s(pme);bwo=r(u2t,"model.eval()"),u2t.forEach(t),vwo=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(J$e,"CODE",{});var b2t=s(_me);Fwo=r(b2t,"model.train()"),b2t.forEach(t),J$e.forEach(t),Two=i(sa),T(Hu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),pXe=i(f),Vi=n(f,"H2",{class:!0});var TQe=s(Vi);Uu=n(TQe,"A",{id:!0,class:!0,href:!0});var v2t=s(Uu);ume=n(v2t,"SPAN",{});var F2t=s(ume);T(IL.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),Mwo=i(TQe),bme=n(TQe,"SPAN",{});var T2t=s(bme);Ewo=r(T2t,"AutoModelForPreTraining"),T2t.forEach(t),TQe.forEach(t),_Xe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(NL.$$.fragment,rl),Cwo=i(rl),Xi=n(rl,"P",{});var kre=s(Xi);wwo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oG=n(kre,"A",{href:!0});var M2t=s(oG);Awo=r(M2t,"from_pretrained()"),M2t.forEach(t),Lwo=r(kre," class method or the "),rG=n(kre,"A",{href:!0});var E2t=s(rG);ywo=r(E2t,"from_config()"),E2t.forEach(t),xwo=r(kre,` class
method.`),kre.forEach(t),$wo=i(rl),qL=n(rl,"P",{});var MQe=s(qL);kwo=r(MQe,"This class cannot be instantiated directly using "),vme=n(MQe,"CODE",{});var C2t=s(vme);Swo=r(C2t,"__init__()"),C2t.forEach(t),Rwo=r(MQe," (throws an error)."),MQe.forEach(t),Pwo=i(rl),it=n(rl,"DIV",{class:!0});var fw=s(it);T(jL.$$.fragment,fw),Bwo=i(fw),Fme=n(fw,"P",{});var w2t=s(Fme);Iwo=r(w2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w2t.forEach(t),Nwo=i(fw),zi=n(fw,"P",{});var Sre=s(zi);qwo=r(Sre,`Note:
Loading a model from its configuration file does `),Tme=n(Sre,"STRONG",{});var A2t=s(Tme);jwo=r(A2t,"not"),A2t.forEach(t),Dwo=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(Sre,"A",{href:!0});var L2t=s(tG);Gwo=r(L2t,"from_pretrained()"),L2t.forEach(t),Owo=r(Sre," to load the model weights."),Sre.forEach(t),Vwo=i(fw),T(Ju.$$.fragment,fw),fw.forEach(t),Xwo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),zwo=i(la),Mme=n(la,"P",{});var y2t=s(Mme);Qwo=r(y2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y2t.forEach(t),Wwo=i(la),Na=n(la,"P",{});var mw=s(Na);Hwo=r(mw,"The model class to instantiate is selected based on the "),Eme=n(mw,"CODE",{});var x2t=s(Eme);Uwo=r(x2t,"model_type"),x2t.forEach(t),Jwo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Cme=n(mw,"CODE",{});var $2t=s(Cme);Ywo=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),Kwo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(mw,"CODE",{});var k2t=s(wme);Zwo=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),eAo=r(mw,":"),mw.forEach(t),oAo=i(la),G=n(la,"UL",{});var O=s(G);Yu=n(O,"LI",{});var Y$e=s(Yu);Ame=n(Y$e,"STRONG",{});var S2t=s(Ame);rAo=r(S2t,"albert"),S2t.forEach(t),tAo=r(Y$e," \u2014 "),aG=n(Y$e,"A",{href:!0});var R2t=s(aG);aAo=r(R2t,"AlbertForPreTraining"),R2t.forEach(t),nAo=r(Y$e," (ALBERT model)"),Y$e.forEach(t),sAo=i(O),Ku=n(O,"LI",{});var K$e=s(Ku);Lme=n(K$e,"STRONG",{});var P2t=s(Lme);lAo=r(P2t,"bart"),P2t.forEach(t),iAo=r(K$e," \u2014 "),nG=n(K$e,"A",{href:!0});var B2t=s(nG);dAo=r(B2t,"BartForConditionalGeneration"),B2t.forEach(t),cAo=r(K$e," (BART model)"),K$e.forEach(t),fAo=i(O),Zu=n(O,"LI",{});var Z$e=s(Zu);yme=n(Z$e,"STRONG",{});var I2t=s(yme);mAo=r(I2t,"bert"),I2t.forEach(t),gAo=r(Z$e," \u2014 "),sG=n(Z$e,"A",{href:!0});var N2t=s(sG);hAo=r(N2t,"BertForPreTraining"),N2t.forEach(t),pAo=r(Z$e," (BERT model)"),Z$e.forEach(t),_Ao=i(O),e2=n(O,"LI",{});var eke=s(e2);xme=n(eke,"STRONG",{});var q2t=s(xme);uAo=r(q2t,"big_bird"),q2t.forEach(t),bAo=r(eke," \u2014 "),lG=n(eke,"A",{href:!0});var j2t=s(lG);vAo=r(j2t,"BigBirdForPreTraining"),j2t.forEach(t),FAo=r(eke," (BigBird model)"),eke.forEach(t),TAo=i(O),o2=n(O,"LI",{});var oke=s(o2);$me=n(oke,"STRONG",{});var D2t=s($me);MAo=r(D2t,"bloom"),D2t.forEach(t),EAo=r(oke," \u2014 "),iG=n(oke,"A",{href:!0});var G2t=s(iG);CAo=r(G2t,"BloomForCausalLM"),G2t.forEach(t),wAo=r(oke," (BLOOM model)"),oke.forEach(t),AAo=i(O),r2=n(O,"LI",{});var rke=s(r2);kme=n(rke,"STRONG",{});var O2t=s(kme);LAo=r(O2t,"camembert"),O2t.forEach(t),yAo=r(rke," \u2014 "),dG=n(rke,"A",{href:!0});var V2t=s(dG);xAo=r(V2t,"CamembertForMaskedLM"),V2t.forEach(t),$Ao=r(rke," (CamemBERT model)"),rke.forEach(t),kAo=i(O),t2=n(O,"LI",{});var tke=s(t2);Sme=n(tke,"STRONG",{});var X2t=s(Sme);SAo=r(X2t,"ctrl"),X2t.forEach(t),RAo=r(tke," \u2014 "),cG=n(tke,"A",{href:!0});var z2t=s(cG);PAo=r(z2t,"CTRLLMHeadModel"),z2t.forEach(t),BAo=r(tke," (CTRL model)"),tke.forEach(t),IAo=i(O),a2=n(O,"LI",{});var ake=s(a2);Rme=n(ake,"STRONG",{});var Q2t=s(Rme);NAo=r(Q2t,"data2vec-text"),Q2t.forEach(t),qAo=r(ake," \u2014 "),fG=n(ake,"A",{href:!0});var W2t=s(fG);jAo=r(W2t,"Data2VecTextForMaskedLM"),W2t.forEach(t),DAo=r(ake," (Data2VecText model)"),ake.forEach(t),GAo=i(O),n2=n(O,"LI",{});var nke=s(n2);Pme=n(nke,"STRONG",{});var H2t=s(Pme);OAo=r(H2t,"deberta"),H2t.forEach(t),VAo=r(nke," \u2014 "),mG=n(nke,"A",{href:!0});var U2t=s(mG);XAo=r(U2t,"DebertaForMaskedLM"),U2t.forEach(t),zAo=r(nke," (DeBERTa model)"),nke.forEach(t),QAo=i(O),s2=n(O,"LI",{});var ske=s(s2);Bme=n(ske,"STRONG",{});var J2t=s(Bme);WAo=r(J2t,"deberta-v2"),J2t.forEach(t),HAo=r(ske," \u2014 "),gG=n(ske,"A",{href:!0});var Y2t=s(gG);UAo=r(Y2t,"DebertaV2ForMaskedLM"),Y2t.forEach(t),JAo=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),YAo=i(O),l2=n(O,"LI",{});var lke=s(l2);Ime=n(lke,"STRONG",{});var K2t=s(Ime);KAo=r(K2t,"distilbert"),K2t.forEach(t),ZAo=r(lke," \u2014 "),hG=n(lke,"A",{href:!0});var Z2t=s(hG);eLo=r(Z2t,"DistilBertForMaskedLM"),Z2t.forEach(t),oLo=r(lke," (DistilBERT model)"),lke.forEach(t),rLo=i(O),i2=n(O,"LI",{});var ike=s(i2);Nme=n(ike,"STRONG",{});var e1t=s(Nme);tLo=r(e1t,"electra"),e1t.forEach(t),aLo=r(ike," \u2014 "),pG=n(ike,"A",{href:!0});var o1t=s(pG);nLo=r(o1t,"ElectraForPreTraining"),o1t.forEach(t),sLo=r(ike," (ELECTRA model)"),ike.forEach(t),lLo=i(O),d2=n(O,"LI",{});var dke=s(d2);qme=n(dke,"STRONG",{});var r1t=s(qme);iLo=r(r1t,"flaubert"),r1t.forEach(t),dLo=r(dke," \u2014 "),_G=n(dke,"A",{href:!0});var t1t=s(_G);cLo=r(t1t,"FlaubertWithLMHeadModel"),t1t.forEach(t),fLo=r(dke," (FlauBERT model)"),dke.forEach(t),mLo=i(O),c2=n(O,"LI",{});var cke=s(c2);jme=n(cke,"STRONG",{});var a1t=s(jme);gLo=r(a1t,"flava"),a1t.forEach(t),hLo=r(cke," \u2014 "),uG=n(cke,"A",{href:!0});var n1t=s(uG);pLo=r(n1t,"FlavaForPreTraining"),n1t.forEach(t),_Lo=r(cke," (FLAVA model)"),cke.forEach(t),uLo=i(O),f2=n(O,"LI",{});var fke=s(f2);Dme=n(fke,"STRONG",{});var s1t=s(Dme);bLo=r(s1t,"fnet"),s1t.forEach(t),vLo=r(fke," \u2014 "),bG=n(fke,"A",{href:!0});var l1t=s(bG);FLo=r(l1t,"FNetForPreTraining"),l1t.forEach(t),TLo=r(fke," (FNet model)"),fke.forEach(t),MLo=i(O),m2=n(O,"LI",{});var mke=s(m2);Gme=n(mke,"STRONG",{});var i1t=s(Gme);ELo=r(i1t,"fsmt"),i1t.forEach(t),CLo=r(mke," \u2014 "),vG=n(mke,"A",{href:!0});var d1t=s(vG);wLo=r(d1t,"FSMTForConditionalGeneration"),d1t.forEach(t),ALo=r(mke," (FairSeq Machine-Translation model)"),mke.forEach(t),LLo=i(O),g2=n(O,"LI",{});var gke=s(g2);Ome=n(gke,"STRONG",{});var c1t=s(Ome);yLo=r(c1t,"funnel"),c1t.forEach(t),xLo=r(gke," \u2014 "),FG=n(gke,"A",{href:!0});var f1t=s(FG);$Lo=r(f1t,"FunnelForPreTraining"),f1t.forEach(t),kLo=r(gke," (Funnel Transformer model)"),gke.forEach(t),SLo=i(O),h2=n(O,"LI",{});var hke=s(h2);Vme=n(hke,"STRONG",{});var m1t=s(Vme);RLo=r(m1t,"gpt2"),m1t.forEach(t),PLo=r(hke," \u2014 "),TG=n(hke,"A",{href:!0});var g1t=s(TG);BLo=r(g1t,"GPT2LMHeadModel"),g1t.forEach(t),ILo=r(hke," (OpenAI GPT-2 model)"),hke.forEach(t),NLo=i(O),p2=n(O,"LI",{});var pke=s(p2);Xme=n(pke,"STRONG",{});var h1t=s(Xme);qLo=r(h1t,"ibert"),h1t.forEach(t),jLo=r(pke," \u2014 "),MG=n(pke,"A",{href:!0});var p1t=s(MG);DLo=r(p1t,"IBertForMaskedLM"),p1t.forEach(t),GLo=r(pke," (I-BERT model)"),pke.forEach(t),OLo=i(O),_2=n(O,"LI",{});var _ke=s(_2);zme=n(_ke,"STRONG",{});var _1t=s(zme);VLo=r(_1t,"layoutlm"),_1t.forEach(t),XLo=r(_ke," \u2014 "),EG=n(_ke,"A",{href:!0});var u1t=s(EG);zLo=r(u1t,"LayoutLMForMaskedLM"),u1t.forEach(t),QLo=r(_ke," (LayoutLM model)"),_ke.forEach(t),WLo=i(O),u2=n(O,"LI",{});var uke=s(u2);Qme=n(uke,"STRONG",{});var b1t=s(Qme);HLo=r(b1t,"longformer"),b1t.forEach(t),ULo=r(uke," \u2014 "),CG=n(uke,"A",{href:!0});var v1t=s(CG);JLo=r(v1t,"LongformerForMaskedLM"),v1t.forEach(t),YLo=r(uke," (Longformer model)"),uke.forEach(t),KLo=i(O),b2=n(O,"LI",{});var bke=s(b2);Wme=n(bke,"STRONG",{});var F1t=s(Wme);ZLo=r(F1t,"lxmert"),F1t.forEach(t),eyo=r(bke," \u2014 "),wG=n(bke,"A",{href:!0});var T1t=s(wG);oyo=r(T1t,"LxmertForPreTraining"),T1t.forEach(t),ryo=r(bke," (LXMERT model)"),bke.forEach(t),tyo=i(O),v2=n(O,"LI",{});var vke=s(v2);Hme=n(vke,"STRONG",{});var M1t=s(Hme);ayo=r(M1t,"megatron-bert"),M1t.forEach(t),nyo=r(vke," \u2014 "),AG=n(vke,"A",{href:!0});var E1t=s(AG);syo=r(E1t,"MegatronBertForPreTraining"),E1t.forEach(t),lyo=r(vke," (Megatron-BERT model)"),vke.forEach(t),iyo=i(O),F2=n(O,"LI",{});var Fke=s(F2);Ume=n(Fke,"STRONG",{});var C1t=s(Ume);dyo=r(C1t,"mobilebert"),C1t.forEach(t),cyo=r(Fke," \u2014 "),LG=n(Fke,"A",{href:!0});var w1t=s(LG);fyo=r(w1t,"MobileBertForPreTraining"),w1t.forEach(t),myo=r(Fke," (MobileBERT model)"),Fke.forEach(t),gyo=i(O),T2=n(O,"LI",{});var Tke=s(T2);Jme=n(Tke,"STRONG",{});var A1t=s(Jme);hyo=r(A1t,"mpnet"),A1t.forEach(t),pyo=r(Tke," \u2014 "),yG=n(Tke,"A",{href:!0});var L1t=s(yG);_yo=r(L1t,"MPNetForMaskedLM"),L1t.forEach(t),uyo=r(Tke," (MPNet model)"),Tke.forEach(t),byo=i(O),M2=n(O,"LI",{});var Mke=s(M2);Yme=n(Mke,"STRONG",{});var y1t=s(Yme);vyo=r(y1t,"mvp"),y1t.forEach(t),Fyo=r(Mke," \u2014 "),xG=n(Mke,"A",{href:!0});var x1t=s(xG);Tyo=r(x1t,"MvpForConditionalGeneration"),x1t.forEach(t),Myo=r(Mke," (MVP model)"),Mke.forEach(t),Eyo=i(O),E2=n(O,"LI",{});var Eke=s(E2);Kme=n(Eke,"STRONG",{});var $1t=s(Kme);Cyo=r($1t,"nezha"),$1t.forEach(t),wyo=r(Eke," \u2014 "),$G=n(Eke,"A",{href:!0});var k1t=s($G);Ayo=r(k1t,"NezhaForPreTraining"),k1t.forEach(t),Lyo=r(Eke," (Nezha model)"),Eke.forEach(t),yyo=i(O),C2=n(O,"LI",{});var Cke=s(C2);Zme=n(Cke,"STRONG",{});var S1t=s(Zme);xyo=r(S1t,"openai-gpt"),S1t.forEach(t),$yo=r(Cke," \u2014 "),kG=n(Cke,"A",{href:!0});var R1t=s(kG);kyo=r(R1t,"OpenAIGPTLMHeadModel"),R1t.forEach(t),Syo=r(Cke," (OpenAI GPT model)"),Cke.forEach(t),Ryo=i(O),w2=n(O,"LI",{});var wke=s(w2);ege=n(wke,"STRONG",{});var P1t=s(ege);Pyo=r(P1t,"retribert"),P1t.forEach(t),Byo=r(wke," \u2014 "),SG=n(wke,"A",{href:!0});var B1t=s(SG);Iyo=r(B1t,"RetriBertModel"),B1t.forEach(t),Nyo=r(wke," (RetriBERT model)"),wke.forEach(t),qyo=i(O),A2=n(O,"LI",{});var Ake=s(A2);oge=n(Ake,"STRONG",{});var I1t=s(oge);jyo=r(I1t,"roberta"),I1t.forEach(t),Dyo=r(Ake," \u2014 "),RG=n(Ake,"A",{href:!0});var N1t=s(RG);Gyo=r(N1t,"RobertaForMaskedLM"),N1t.forEach(t),Oyo=r(Ake," (RoBERTa model)"),Ake.forEach(t),Vyo=i(O),L2=n(O,"LI",{});var Lke=s(L2);rge=n(Lke,"STRONG",{});var q1t=s(rge);Xyo=r(q1t,"splinter"),q1t.forEach(t),zyo=r(Lke," \u2014 "),PG=n(Lke,"A",{href:!0});var j1t=s(PG);Qyo=r(j1t,"SplinterForPreTraining"),j1t.forEach(t),Wyo=r(Lke," (Splinter model)"),Lke.forEach(t),Hyo=i(O),y2=n(O,"LI",{});var yke=s(y2);tge=n(yke,"STRONG",{});var D1t=s(tge);Uyo=r(D1t,"squeezebert"),D1t.forEach(t),Jyo=r(yke," \u2014 "),BG=n(yke,"A",{href:!0});var G1t=s(BG);Yyo=r(G1t,"SqueezeBertForMaskedLM"),G1t.forEach(t),Kyo=r(yke," (SqueezeBERT model)"),yke.forEach(t),Zyo=i(O),x2=n(O,"LI",{});var xke=s(x2);age=n(xke,"STRONG",{});var O1t=s(age);e9o=r(O1t,"t5"),O1t.forEach(t),o9o=r(xke," \u2014 "),IG=n(xke,"A",{href:!0});var V1t=s(IG);r9o=r(V1t,"T5ForConditionalGeneration"),V1t.forEach(t),t9o=r(xke," (T5 model)"),xke.forEach(t),a9o=i(O),$2=n(O,"LI",{});var $ke=s($2);nge=n($ke,"STRONG",{});var X1t=s(nge);n9o=r(X1t,"tapas"),X1t.forEach(t),s9o=r($ke," \u2014 "),NG=n($ke,"A",{href:!0});var z1t=s(NG);l9o=r(z1t,"TapasForMaskedLM"),z1t.forEach(t),i9o=r($ke," (TAPAS model)"),$ke.forEach(t),d9o=i(O),k2=n(O,"LI",{});var kke=s(k2);sge=n(kke,"STRONG",{});var Q1t=s(sge);c9o=r(Q1t,"transfo-xl"),Q1t.forEach(t),f9o=r(kke," \u2014 "),qG=n(kke,"A",{href:!0});var W1t=s(qG);m9o=r(W1t,"TransfoXLLMHeadModel"),W1t.forEach(t),g9o=r(kke," (Transformer-XL model)"),kke.forEach(t),h9o=i(O),S2=n(O,"LI",{});var Ske=s(S2);lge=n(Ske,"STRONG",{});var H1t=s(lge);p9o=r(H1t,"unispeech"),H1t.forEach(t),_9o=r(Ske," \u2014 "),jG=n(Ske,"A",{href:!0});var U1t=s(jG);u9o=r(U1t,"UniSpeechForPreTraining"),U1t.forEach(t),b9o=r(Ske," (UniSpeech model)"),Ske.forEach(t),v9o=i(O),R2=n(O,"LI",{});var Rke=s(R2);ige=n(Rke,"STRONG",{});var J1t=s(ige);F9o=r(J1t,"unispeech-sat"),J1t.forEach(t),T9o=r(Rke," \u2014 "),DG=n(Rke,"A",{href:!0});var Y1t=s(DG);M9o=r(Y1t,"UniSpeechSatForPreTraining"),Y1t.forEach(t),E9o=r(Rke," (UniSpeechSat model)"),Rke.forEach(t),C9o=i(O),P2=n(O,"LI",{});var Pke=s(P2);dge=n(Pke,"STRONG",{});var K1t=s(dge);w9o=r(K1t,"visual_bert"),K1t.forEach(t),A9o=r(Pke," \u2014 "),GG=n(Pke,"A",{href:!0});var Z1t=s(GG);L9o=r(Z1t,"VisualBertForPreTraining"),Z1t.forEach(t),y9o=r(Pke," (VisualBERT model)"),Pke.forEach(t),x9o=i(O),B2=n(O,"LI",{});var Bke=s(B2);cge=n(Bke,"STRONG",{});var ebt=s(cge);$9o=r(ebt,"vit_mae"),ebt.forEach(t),k9o=r(Bke," \u2014 "),OG=n(Bke,"A",{href:!0});var obt=s(OG);S9o=r(obt,"ViTMAEForPreTraining"),obt.forEach(t),R9o=r(Bke," (ViTMAE model)"),Bke.forEach(t),P9o=i(O),I2=n(O,"LI",{});var Ike=s(I2);fge=n(Ike,"STRONG",{});var rbt=s(fge);B9o=r(rbt,"wav2vec2"),rbt.forEach(t),I9o=r(Ike," \u2014 "),VG=n(Ike,"A",{href:!0});var tbt=s(VG);N9o=r(tbt,"Wav2Vec2ForPreTraining"),tbt.forEach(t),q9o=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),j9o=i(O),N2=n(O,"LI",{});var Nke=s(N2);mge=n(Nke,"STRONG",{});var abt=s(mge);D9o=r(abt,"wav2vec2-conformer"),abt.forEach(t),G9o=r(Nke," \u2014 "),XG=n(Nke,"A",{href:!0});var nbt=s(XG);O9o=r(nbt,"Wav2Vec2ConformerForPreTraining"),nbt.forEach(t),V9o=r(Nke," (Wav2Vec2-Conformer model)"),Nke.forEach(t),X9o=i(O),q2=n(O,"LI",{});var qke=s(q2);gge=n(qke,"STRONG",{});var sbt=s(gge);z9o=r(sbt,"xlm"),sbt.forEach(t),Q9o=r(qke," \u2014 "),zG=n(qke,"A",{href:!0});var lbt=s(zG);W9o=r(lbt,"XLMWithLMHeadModel"),lbt.forEach(t),H9o=r(qke," (XLM model)"),qke.forEach(t),U9o=i(O),j2=n(O,"LI",{});var jke=s(j2);hge=n(jke,"STRONG",{});var ibt=s(hge);J9o=r(ibt,"xlm-roberta"),ibt.forEach(t),Y9o=r(jke," \u2014 "),QG=n(jke,"A",{href:!0});var dbt=s(QG);K9o=r(dbt,"XLMRobertaForMaskedLM"),dbt.forEach(t),Z9o=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),exo=i(O),D2=n(O,"LI",{});var Dke=s(D2);pge=n(Dke,"STRONG",{});var cbt=s(pge);oxo=r(cbt,"xlm-roberta-xl"),cbt.forEach(t),rxo=r(Dke," \u2014 "),WG=n(Dke,"A",{href:!0});var fbt=s(WG);txo=r(fbt,"XLMRobertaXLForMaskedLM"),fbt.forEach(t),axo=r(Dke," (XLM-RoBERTa-XL model)"),Dke.forEach(t),nxo=i(O),G2=n(O,"LI",{});var Gke=s(G2);_ge=n(Gke,"STRONG",{});var mbt=s(_ge);sxo=r(mbt,"xlnet"),mbt.forEach(t),lxo=r(Gke," \u2014 "),HG=n(Gke,"A",{href:!0});var gbt=s(HG);ixo=r(gbt,"XLNetLMHeadModel"),gbt.forEach(t),dxo=r(Gke," (XLNet model)"),Gke.forEach(t),O.forEach(t),cxo=i(la),O2=n(la,"P",{});var Oke=s(O2);fxo=r(Oke,"The model is set in evaluation mode by default using "),uge=n(Oke,"CODE",{});var hbt=s(uge);mxo=r(hbt,"model.eval()"),hbt.forEach(t),gxo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Oke,"CODE",{});var pbt=s(bge);hxo=r(pbt,"model.train()"),pbt.forEach(t),Oke.forEach(t),pxo=i(la),T(V2.$$.fragment,la),la.forEach(t),rl.forEach(t),uXe=i(f),Qi=n(f,"H2",{class:!0});var EQe=s(Qi);X2=n(EQe,"A",{id:!0,class:!0,href:!0});var _bt=s(X2);vge=n(_bt,"SPAN",{});var ubt=s(vge);T(GL.$$.fragment,ubt),ubt.forEach(t),_bt.forEach(t),_xo=i(EQe),Fge=n(EQe,"SPAN",{});var bbt=s(Fge);uxo=r(bbt,"AutoModelForCausalLM"),bbt.forEach(t),EQe.forEach(t),bXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(OL.$$.fragment,tl),bxo=i(tl),Wi=n(tl,"P",{});var Rre=s(Wi);vxo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UG=n(Rre,"A",{href:!0});var vbt=s(UG);Fxo=r(vbt,"from_pretrained()"),vbt.forEach(t),Txo=r(Rre," class method or the "),JG=n(Rre,"A",{href:!0});var Fbt=s(JG);Mxo=r(Fbt,"from_config()"),Fbt.forEach(t),Exo=r(Rre,` class
method.`),Rre.forEach(t),Cxo=i(tl),VL=n(tl,"P",{});var CQe=s(VL);wxo=r(CQe,"This class cannot be instantiated directly using "),Tge=n(CQe,"CODE",{});var Tbt=s(Tge);Axo=r(Tbt,"__init__()"),Tbt.forEach(t),Lxo=r(CQe," (throws an error)."),CQe.forEach(t),yxo=i(tl),dt=n(tl,"DIV",{class:!0});var gw=s(dt);T(XL.$$.fragment,gw),xxo=i(gw),Mge=n(gw,"P",{});var Mbt=s(Mge);$xo=r(Mbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mbt.forEach(t),kxo=i(gw),Hi=n(gw,"P",{});var Pre=s(Hi);Sxo=r(Pre,`Note:
Loading a model from its configuration file does `),Ege=n(Pre,"STRONG",{});var Ebt=s(Ege);Rxo=r(Ebt,"not"),Ebt.forEach(t),Pxo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(Pre,"A",{href:!0});var Cbt=s(YG);Bxo=r(Cbt,"from_pretrained()"),Cbt.forEach(t),Ixo=r(Pre," to load the model weights."),Pre.forEach(t),Nxo=i(gw),T(z2.$$.fragment,gw),gw.forEach(t),qxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),jxo=i(ia),Cge=n(ia,"P",{});var wbt=s(Cge);Dxo=r(wbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wbt.forEach(t),Gxo=i(ia),qa=n(ia,"P",{});var hw=s(qa);Oxo=r(hw,"The model class to instantiate is selected based on the "),wge=n(hw,"CODE",{});var Abt=s(wge);Vxo=r(Abt,"model_type"),Abt.forEach(t),Xxo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Age=n(hw,"CODE",{});var Lbt=s(Age);zxo=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),Qxo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(hw,"CODE",{});var ybt=s(Lge);Wxo=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),Hxo=r(hw,":"),hw.forEach(t),Uxo=i(ia),z=n(ia,"UL",{});var Q=s(z);Q2=n(Q,"LI",{});var Vke=s(Q2);yge=n(Vke,"STRONG",{});var xbt=s(yge);Jxo=r(xbt,"bart"),xbt.forEach(t),Yxo=r(Vke," \u2014 "),KG=n(Vke,"A",{href:!0});var $bt=s(KG);Kxo=r($bt,"BartForCausalLM"),$bt.forEach(t),Zxo=r(Vke," (BART model)"),Vke.forEach(t),e$o=i(Q),W2=n(Q,"LI",{});var Xke=s(W2);xge=n(Xke,"STRONG",{});var kbt=s(xge);o$o=r(kbt,"bert"),kbt.forEach(t),r$o=r(Xke," \u2014 "),ZG=n(Xke,"A",{href:!0});var Sbt=s(ZG);t$o=r(Sbt,"BertLMHeadModel"),Sbt.forEach(t),a$o=r(Xke," (BERT model)"),Xke.forEach(t),n$o=i(Q),H2=n(Q,"LI",{});var zke=s(H2);$ge=n(zke,"STRONG",{});var Rbt=s($ge);s$o=r(Rbt,"bert-generation"),Rbt.forEach(t),l$o=r(zke," \u2014 "),eO=n(zke,"A",{href:!0});var Pbt=s(eO);i$o=r(Pbt,"BertGenerationDecoder"),Pbt.forEach(t),d$o=r(zke," (Bert Generation model)"),zke.forEach(t),c$o=i(Q),U2=n(Q,"LI",{});var Qke=s(U2);kge=n(Qke,"STRONG",{});var Bbt=s(kge);f$o=r(Bbt,"big_bird"),Bbt.forEach(t),m$o=r(Qke," \u2014 "),oO=n(Qke,"A",{href:!0});var Ibt=s(oO);g$o=r(Ibt,"BigBirdForCausalLM"),Ibt.forEach(t),h$o=r(Qke," (BigBird model)"),Qke.forEach(t),p$o=i(Q),J2=n(Q,"LI",{});var Wke=s(J2);Sge=n(Wke,"STRONG",{});var Nbt=s(Sge);_$o=r(Nbt,"bigbird_pegasus"),Nbt.forEach(t),u$o=r(Wke," \u2014 "),rO=n(Wke,"A",{href:!0});var qbt=s(rO);b$o=r(qbt,"BigBirdPegasusForCausalLM"),qbt.forEach(t),v$o=r(Wke," (BigBird-Pegasus model)"),Wke.forEach(t),F$o=i(Q),Y2=n(Q,"LI",{});var Hke=s(Y2);Rge=n(Hke,"STRONG",{});var jbt=s(Rge);T$o=r(jbt,"blenderbot"),jbt.forEach(t),M$o=r(Hke," \u2014 "),tO=n(Hke,"A",{href:!0});var Dbt=s(tO);E$o=r(Dbt,"BlenderbotForCausalLM"),Dbt.forEach(t),C$o=r(Hke," (Blenderbot model)"),Hke.forEach(t),w$o=i(Q),K2=n(Q,"LI",{});var Uke=s(K2);Pge=n(Uke,"STRONG",{});var Gbt=s(Pge);A$o=r(Gbt,"blenderbot-small"),Gbt.forEach(t),L$o=r(Uke," \u2014 "),aO=n(Uke,"A",{href:!0});var Obt=s(aO);y$o=r(Obt,"BlenderbotSmallForCausalLM"),Obt.forEach(t),x$o=r(Uke," (BlenderbotSmall model)"),Uke.forEach(t),$$o=i(Q),Z2=n(Q,"LI",{});var Jke=s(Z2);Bge=n(Jke,"STRONG",{});var Vbt=s(Bge);k$o=r(Vbt,"bloom"),Vbt.forEach(t),S$o=r(Jke," \u2014 "),nO=n(Jke,"A",{href:!0});var Xbt=s(nO);R$o=r(Xbt,"BloomForCausalLM"),Xbt.forEach(t),P$o=r(Jke," (BLOOM model)"),Jke.forEach(t),B$o=i(Q),e1=n(Q,"LI",{});var Yke=s(e1);Ige=n(Yke,"STRONG",{});var zbt=s(Ige);I$o=r(zbt,"camembert"),zbt.forEach(t),N$o=r(Yke," \u2014 "),sO=n(Yke,"A",{href:!0});var Qbt=s(sO);q$o=r(Qbt,"CamembertForCausalLM"),Qbt.forEach(t),j$o=r(Yke," (CamemBERT model)"),Yke.forEach(t),D$o=i(Q),o1=n(Q,"LI",{});var Kke=s(o1);Nge=n(Kke,"STRONG",{});var Wbt=s(Nge);G$o=r(Wbt,"codegen"),Wbt.forEach(t),O$o=r(Kke," \u2014 "),lO=n(Kke,"A",{href:!0});var Hbt=s(lO);V$o=r(Hbt,"CodeGenForCausalLM"),Hbt.forEach(t),X$o=r(Kke," (CodeGen model)"),Kke.forEach(t),z$o=i(Q),r1=n(Q,"LI",{});var Zke=s(r1);qge=n(Zke,"STRONG",{});var Ubt=s(qge);Q$o=r(Ubt,"ctrl"),Ubt.forEach(t),W$o=r(Zke," \u2014 "),iO=n(Zke,"A",{href:!0});var Jbt=s(iO);H$o=r(Jbt,"CTRLLMHeadModel"),Jbt.forEach(t),U$o=r(Zke," (CTRL model)"),Zke.forEach(t),J$o=i(Q),t1=n(Q,"LI",{});var eSe=s(t1);jge=n(eSe,"STRONG",{});var Ybt=s(jge);Y$o=r(Ybt,"data2vec-text"),Ybt.forEach(t),K$o=r(eSe," \u2014 "),dO=n(eSe,"A",{href:!0});var Kbt=s(dO);Z$o=r(Kbt,"Data2VecTextForCausalLM"),Kbt.forEach(t),eko=r(eSe," (Data2VecText model)"),eSe.forEach(t),oko=i(Q),a1=n(Q,"LI",{});var oSe=s(a1);Dge=n(oSe,"STRONG",{});var Zbt=s(Dge);rko=r(Zbt,"electra"),Zbt.forEach(t),tko=r(oSe," \u2014 "),cO=n(oSe,"A",{href:!0});var evt=s(cO);ako=r(evt,"ElectraForCausalLM"),evt.forEach(t),nko=r(oSe," (ELECTRA model)"),oSe.forEach(t),sko=i(Q),n1=n(Q,"LI",{});var rSe=s(n1);Gge=n(rSe,"STRONG",{});var ovt=s(Gge);lko=r(ovt,"gpt2"),ovt.forEach(t),iko=r(rSe," \u2014 "),fO=n(rSe,"A",{href:!0});var rvt=s(fO);dko=r(rvt,"GPT2LMHeadModel"),rvt.forEach(t),cko=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),fko=i(Q),s1=n(Q,"LI",{});var tSe=s(s1);Oge=n(tSe,"STRONG",{});var tvt=s(Oge);mko=r(tvt,"gpt_neo"),tvt.forEach(t),gko=r(tSe," \u2014 "),mO=n(tSe,"A",{href:!0});var avt=s(mO);hko=r(avt,"GPTNeoForCausalLM"),avt.forEach(t),pko=r(tSe," (GPT Neo model)"),tSe.forEach(t),_ko=i(Q),l1=n(Q,"LI",{});var aSe=s(l1);Vge=n(aSe,"STRONG",{});var nvt=s(Vge);uko=r(nvt,"gpt_neox"),nvt.forEach(t),bko=r(aSe," \u2014 "),gO=n(aSe,"A",{href:!0});var svt=s(gO);vko=r(svt,"GPTNeoXForCausalLM"),svt.forEach(t),Fko=r(aSe," (GPT NeoX model)"),aSe.forEach(t),Tko=i(Q),i1=n(Q,"LI",{});var nSe=s(i1);Xge=n(nSe,"STRONG",{});var lvt=s(Xge);Mko=r(lvt,"gptj"),lvt.forEach(t),Eko=r(nSe," \u2014 "),hO=n(nSe,"A",{href:!0});var ivt=s(hO);Cko=r(ivt,"GPTJForCausalLM"),ivt.forEach(t),wko=r(nSe," (GPT-J model)"),nSe.forEach(t),Ako=i(Q),d1=n(Q,"LI",{});var sSe=s(d1);zge=n(sSe,"STRONG",{});var dvt=s(zge);Lko=r(dvt,"marian"),dvt.forEach(t),yko=r(sSe," \u2014 "),pO=n(sSe,"A",{href:!0});var cvt=s(pO);xko=r(cvt,"MarianForCausalLM"),cvt.forEach(t),$ko=r(sSe," (Marian model)"),sSe.forEach(t),kko=i(Q),c1=n(Q,"LI",{});var lSe=s(c1);Qge=n(lSe,"STRONG",{});var fvt=s(Qge);Sko=r(fvt,"mbart"),fvt.forEach(t),Rko=r(lSe," \u2014 "),_O=n(lSe,"A",{href:!0});var mvt=s(_O);Pko=r(mvt,"MBartForCausalLM"),mvt.forEach(t),Bko=r(lSe," (mBART model)"),lSe.forEach(t),Iko=i(Q),f1=n(Q,"LI",{});var iSe=s(f1);Wge=n(iSe,"STRONG",{});var gvt=s(Wge);Nko=r(gvt,"megatron-bert"),gvt.forEach(t),qko=r(iSe," \u2014 "),uO=n(iSe,"A",{href:!0});var hvt=s(uO);jko=r(hvt,"MegatronBertForCausalLM"),hvt.forEach(t),Dko=r(iSe," (Megatron-BERT model)"),iSe.forEach(t),Gko=i(Q),m1=n(Q,"LI",{});var dSe=s(m1);Hge=n(dSe,"STRONG",{});var pvt=s(Hge);Oko=r(pvt,"mvp"),pvt.forEach(t),Vko=r(dSe," \u2014 "),bO=n(dSe,"A",{href:!0});var _vt=s(bO);Xko=r(_vt,"MvpForCausalLM"),_vt.forEach(t),zko=r(dSe," (MVP model)"),dSe.forEach(t),Qko=i(Q),g1=n(Q,"LI",{});var cSe=s(g1);Uge=n(cSe,"STRONG",{});var uvt=s(Uge);Wko=r(uvt,"openai-gpt"),uvt.forEach(t),Hko=r(cSe," \u2014 "),vO=n(cSe,"A",{href:!0});var bvt=s(vO);Uko=r(bvt,"OpenAIGPTLMHeadModel"),bvt.forEach(t),Jko=r(cSe," (OpenAI GPT model)"),cSe.forEach(t),Yko=i(Q),h1=n(Q,"LI",{});var fSe=s(h1);Jge=n(fSe,"STRONG",{});var vvt=s(Jge);Kko=r(vvt,"opt"),vvt.forEach(t),Zko=r(fSe," \u2014 "),FO=n(fSe,"A",{href:!0});var Fvt=s(FO);eSo=r(Fvt,"OPTForCausalLM"),Fvt.forEach(t),oSo=r(fSe," (OPT model)"),fSe.forEach(t),rSo=i(Q),p1=n(Q,"LI",{});var mSe=s(p1);Yge=n(mSe,"STRONG",{});var Tvt=s(Yge);tSo=r(Tvt,"pegasus"),Tvt.forEach(t),aSo=r(mSe," \u2014 "),TO=n(mSe,"A",{href:!0});var Mvt=s(TO);nSo=r(Mvt,"PegasusForCausalLM"),Mvt.forEach(t),sSo=r(mSe," (Pegasus model)"),mSe.forEach(t),lSo=i(Q),_1=n(Q,"LI",{});var gSe=s(_1);Kge=n(gSe,"STRONG",{});var Evt=s(Kge);iSo=r(Evt,"plbart"),Evt.forEach(t),dSo=r(gSe," \u2014 "),MO=n(gSe,"A",{href:!0});var Cvt=s(MO);cSo=r(Cvt,"PLBartForCausalLM"),Cvt.forEach(t),fSo=r(gSe," (PLBart model)"),gSe.forEach(t),mSo=i(Q),u1=n(Q,"LI",{});var hSe=s(u1);Zge=n(hSe,"STRONG",{});var wvt=s(Zge);gSo=r(wvt,"prophetnet"),wvt.forEach(t),hSo=r(hSe," \u2014 "),EO=n(hSe,"A",{href:!0});var Avt=s(EO);pSo=r(Avt,"ProphetNetForCausalLM"),Avt.forEach(t),_So=r(hSe," (ProphetNet model)"),hSe.forEach(t),uSo=i(Q),b1=n(Q,"LI",{});var pSe=s(b1);ehe=n(pSe,"STRONG",{});var Lvt=s(ehe);bSo=r(Lvt,"qdqbert"),Lvt.forEach(t),vSo=r(pSe," \u2014 "),CO=n(pSe,"A",{href:!0});var yvt=s(CO);FSo=r(yvt,"QDQBertLMHeadModel"),yvt.forEach(t),TSo=r(pSe," (QDQBert model)"),pSe.forEach(t),MSo=i(Q),v1=n(Q,"LI",{});var _Se=s(v1);ohe=n(_Se,"STRONG",{});var xvt=s(ohe);ESo=r(xvt,"reformer"),xvt.forEach(t),CSo=r(_Se," \u2014 "),wO=n(_Se,"A",{href:!0});var $vt=s(wO);wSo=r($vt,"ReformerModelWithLMHead"),$vt.forEach(t),ASo=r(_Se," (Reformer model)"),_Se.forEach(t),LSo=i(Q),F1=n(Q,"LI",{});var uSe=s(F1);rhe=n(uSe,"STRONG",{});var kvt=s(rhe);ySo=r(kvt,"rembert"),kvt.forEach(t),xSo=r(uSe," \u2014 "),AO=n(uSe,"A",{href:!0});var Svt=s(AO);$So=r(Svt,"RemBertForCausalLM"),Svt.forEach(t),kSo=r(uSe," (RemBERT model)"),uSe.forEach(t),SSo=i(Q),T1=n(Q,"LI",{});var bSe=s(T1);the=n(bSe,"STRONG",{});var Rvt=s(the);RSo=r(Rvt,"roberta"),Rvt.forEach(t),PSo=r(bSe," \u2014 "),LO=n(bSe,"A",{href:!0});var Pvt=s(LO);BSo=r(Pvt,"RobertaForCausalLM"),Pvt.forEach(t),ISo=r(bSe," (RoBERTa model)"),bSe.forEach(t),NSo=i(Q),M1=n(Q,"LI",{});var vSe=s(M1);ahe=n(vSe,"STRONG",{});var Bvt=s(ahe);qSo=r(Bvt,"roformer"),Bvt.forEach(t),jSo=r(vSe," \u2014 "),yO=n(vSe,"A",{href:!0});var Ivt=s(yO);DSo=r(Ivt,"RoFormerForCausalLM"),Ivt.forEach(t),GSo=r(vSe," (RoFormer model)"),vSe.forEach(t),OSo=i(Q),E1=n(Q,"LI",{});var FSe=s(E1);nhe=n(FSe,"STRONG",{});var Nvt=s(nhe);VSo=r(Nvt,"speech_to_text_2"),Nvt.forEach(t),XSo=r(FSe," \u2014 "),xO=n(FSe,"A",{href:!0});var qvt=s(xO);zSo=r(qvt,"Speech2Text2ForCausalLM"),qvt.forEach(t),QSo=r(FSe," (Speech2Text2 model)"),FSe.forEach(t),WSo=i(Q),C1=n(Q,"LI",{});var TSe=s(C1);she=n(TSe,"STRONG",{});var jvt=s(she);HSo=r(jvt,"transfo-xl"),jvt.forEach(t),USo=r(TSe," \u2014 "),$O=n(TSe,"A",{href:!0});var Dvt=s($O);JSo=r(Dvt,"TransfoXLLMHeadModel"),Dvt.forEach(t),YSo=r(TSe," (Transformer-XL model)"),TSe.forEach(t),KSo=i(Q),w1=n(Q,"LI",{});var MSe=s(w1);lhe=n(MSe,"STRONG",{});var Gvt=s(lhe);ZSo=r(Gvt,"trocr"),Gvt.forEach(t),eRo=r(MSe," \u2014 "),kO=n(MSe,"A",{href:!0});var Ovt=s(kO);oRo=r(Ovt,"TrOCRForCausalLM"),Ovt.forEach(t),rRo=r(MSe," (TrOCR model)"),MSe.forEach(t),tRo=i(Q),A1=n(Q,"LI",{});var ESe=s(A1);ihe=n(ESe,"STRONG",{});var Vvt=s(ihe);aRo=r(Vvt,"xglm"),Vvt.forEach(t),nRo=r(ESe," \u2014 "),SO=n(ESe,"A",{href:!0});var Xvt=s(SO);sRo=r(Xvt,"XGLMForCausalLM"),Xvt.forEach(t),lRo=r(ESe," (XGLM model)"),ESe.forEach(t),iRo=i(Q),L1=n(Q,"LI",{});var CSe=s(L1);dhe=n(CSe,"STRONG",{});var zvt=s(dhe);dRo=r(zvt,"xlm"),zvt.forEach(t),cRo=r(CSe," \u2014 "),RO=n(CSe,"A",{href:!0});var Qvt=s(RO);fRo=r(Qvt,"XLMWithLMHeadModel"),Qvt.forEach(t),mRo=r(CSe," (XLM model)"),CSe.forEach(t),gRo=i(Q),y1=n(Q,"LI",{});var wSe=s(y1);che=n(wSe,"STRONG",{});var Wvt=s(che);hRo=r(Wvt,"xlm-prophetnet"),Wvt.forEach(t),pRo=r(wSe," \u2014 "),PO=n(wSe,"A",{href:!0});var Hvt=s(PO);_Ro=r(Hvt,"XLMProphetNetForCausalLM"),Hvt.forEach(t),uRo=r(wSe," (XLM-ProphetNet model)"),wSe.forEach(t),bRo=i(Q),x1=n(Q,"LI",{});var ASe=s(x1);fhe=n(ASe,"STRONG",{});var Uvt=s(fhe);vRo=r(Uvt,"xlm-roberta"),Uvt.forEach(t),FRo=r(ASe," \u2014 "),BO=n(ASe,"A",{href:!0});var Jvt=s(BO);TRo=r(Jvt,"XLMRobertaForCausalLM"),Jvt.forEach(t),MRo=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),ERo=i(Q),$1=n(Q,"LI",{});var LSe=s($1);mhe=n(LSe,"STRONG",{});var Yvt=s(mhe);CRo=r(Yvt,"xlm-roberta-xl"),Yvt.forEach(t),wRo=r(LSe," \u2014 "),IO=n(LSe,"A",{href:!0});var Kvt=s(IO);ARo=r(Kvt,"XLMRobertaXLForCausalLM"),Kvt.forEach(t),LRo=r(LSe," (XLM-RoBERTa-XL model)"),LSe.forEach(t),yRo=i(Q),k1=n(Q,"LI",{});var ySe=s(k1);ghe=n(ySe,"STRONG",{});var Zvt=s(ghe);xRo=r(Zvt,"xlnet"),Zvt.forEach(t),$Ro=r(ySe," \u2014 "),NO=n(ySe,"A",{href:!0});var eFt=s(NO);kRo=r(eFt,"XLNetLMHeadModel"),eFt.forEach(t),SRo=r(ySe," (XLNet model)"),ySe.forEach(t),Q.forEach(t),RRo=i(ia),S1=n(ia,"P",{});var xSe=s(S1);PRo=r(xSe,"The model is set in evaluation mode by default using "),hhe=n(xSe,"CODE",{});var oFt=s(hhe);BRo=r(oFt,"model.eval()"),oFt.forEach(t),IRo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(xSe,"CODE",{});var rFt=s(phe);NRo=r(rFt,"model.train()"),rFt.forEach(t),xSe.forEach(t),qRo=i(ia),T(R1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),vXe=i(f),Ui=n(f,"H2",{class:!0});var wQe=s(Ui);P1=n(wQe,"A",{id:!0,class:!0,href:!0});var tFt=s(P1);_he=n(tFt,"SPAN",{});var aFt=s(_he);T(QL.$$.fragment,aFt),aFt.forEach(t),tFt.forEach(t),jRo=i(wQe),uhe=n(wQe,"SPAN",{});var nFt=s(uhe);DRo=r(nFt,"AutoModelForMaskedLM"),nFt.forEach(t),wQe.forEach(t),FXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(WL.$$.fragment,al),GRo=i(al),Ji=n(al,"P",{});var Bre=s(Ji);ORo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qO=n(Bre,"A",{href:!0});var sFt=s(qO);VRo=r(sFt,"from_pretrained()"),sFt.forEach(t),XRo=r(Bre," class method or the "),jO=n(Bre,"A",{href:!0});var lFt=s(jO);zRo=r(lFt,"from_config()"),lFt.forEach(t),QRo=r(Bre,` class
method.`),Bre.forEach(t),WRo=i(al),HL=n(al,"P",{});var AQe=s(HL);HRo=r(AQe,"This class cannot be instantiated directly using "),bhe=n(AQe,"CODE",{});var iFt=s(bhe);URo=r(iFt,"__init__()"),iFt.forEach(t),JRo=r(AQe," (throws an error)."),AQe.forEach(t),YRo=i(al),ct=n(al,"DIV",{class:!0});var pw=s(ct);T(UL.$$.fragment,pw),KRo=i(pw),vhe=n(pw,"P",{});var dFt=s(vhe);ZRo=r(dFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dFt.forEach(t),ePo=i(pw),Yi=n(pw,"P",{});var Ire=s(Yi);oPo=r(Ire,`Note:
Loading a model from its configuration file does `),Fhe=n(Ire,"STRONG",{});var cFt=s(Fhe);rPo=r(cFt,"not"),cFt.forEach(t),tPo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(Ire,"A",{href:!0});var fFt=s(DO);aPo=r(fFt,"from_pretrained()"),fFt.forEach(t),nPo=r(Ire," to load the model weights."),Ire.forEach(t),sPo=i(pw),T(B1.$$.fragment,pw),pw.forEach(t),lPo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),iPo=i(da),The=n(da,"P",{});var mFt=s(The);dPo=r(mFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mFt.forEach(t),cPo=i(da),ja=n(da,"P",{});var _w=s(ja);fPo=r(_w,"The model class to instantiate is selected based on the "),Mhe=n(_w,"CODE",{});var gFt=s(Mhe);mPo=r(gFt,"model_type"),gFt.forEach(t),gPo=r(_w,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(_w,"CODE",{});var hFt=s(Ehe);hPo=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),pPo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(_w,"CODE",{});var pFt=s(Che);_Po=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),uPo=r(_w,":"),_w.forEach(t),bPo=i(da),W=n(da,"UL",{});var H=s(W);I1=n(H,"LI",{});var $Se=s(I1);whe=n($Se,"STRONG",{});var _Ft=s(whe);vPo=r(_Ft,"albert"),_Ft.forEach(t),FPo=r($Se," \u2014 "),GO=n($Se,"A",{href:!0});var uFt=s(GO);TPo=r(uFt,"AlbertForMaskedLM"),uFt.forEach(t),MPo=r($Se," (ALBERT model)"),$Se.forEach(t),EPo=i(H),N1=n(H,"LI",{});var kSe=s(N1);Ahe=n(kSe,"STRONG",{});var bFt=s(Ahe);CPo=r(bFt,"bart"),bFt.forEach(t),wPo=r(kSe," \u2014 "),OO=n(kSe,"A",{href:!0});var vFt=s(OO);APo=r(vFt,"BartForConditionalGeneration"),vFt.forEach(t),LPo=r(kSe," (BART model)"),kSe.forEach(t),yPo=i(H),q1=n(H,"LI",{});var SSe=s(q1);Lhe=n(SSe,"STRONG",{});var FFt=s(Lhe);xPo=r(FFt,"bert"),FFt.forEach(t),$Po=r(SSe," \u2014 "),VO=n(SSe,"A",{href:!0});var TFt=s(VO);kPo=r(TFt,"BertForMaskedLM"),TFt.forEach(t),SPo=r(SSe," (BERT model)"),SSe.forEach(t),RPo=i(H),j1=n(H,"LI",{});var RSe=s(j1);yhe=n(RSe,"STRONG",{});var MFt=s(yhe);PPo=r(MFt,"big_bird"),MFt.forEach(t),BPo=r(RSe," \u2014 "),XO=n(RSe,"A",{href:!0});var EFt=s(XO);IPo=r(EFt,"BigBirdForMaskedLM"),EFt.forEach(t),NPo=r(RSe," (BigBird model)"),RSe.forEach(t),qPo=i(H),D1=n(H,"LI",{});var PSe=s(D1);xhe=n(PSe,"STRONG",{});var CFt=s(xhe);jPo=r(CFt,"camembert"),CFt.forEach(t),DPo=r(PSe," \u2014 "),zO=n(PSe,"A",{href:!0});var wFt=s(zO);GPo=r(wFt,"CamembertForMaskedLM"),wFt.forEach(t),OPo=r(PSe," (CamemBERT model)"),PSe.forEach(t),VPo=i(H),G1=n(H,"LI",{});var BSe=s(G1);$he=n(BSe,"STRONG",{});var AFt=s($he);XPo=r(AFt,"convbert"),AFt.forEach(t),zPo=r(BSe," \u2014 "),QO=n(BSe,"A",{href:!0});var LFt=s(QO);QPo=r(LFt,"ConvBertForMaskedLM"),LFt.forEach(t),WPo=r(BSe," (ConvBERT model)"),BSe.forEach(t),HPo=i(H),O1=n(H,"LI",{});var ISe=s(O1);khe=n(ISe,"STRONG",{});var yFt=s(khe);UPo=r(yFt,"data2vec-text"),yFt.forEach(t),JPo=r(ISe," \u2014 "),WO=n(ISe,"A",{href:!0});var xFt=s(WO);YPo=r(xFt,"Data2VecTextForMaskedLM"),xFt.forEach(t),KPo=r(ISe," (Data2VecText model)"),ISe.forEach(t),ZPo=i(H),V1=n(H,"LI",{});var NSe=s(V1);She=n(NSe,"STRONG",{});var $Ft=s(She);eBo=r($Ft,"deberta"),$Ft.forEach(t),oBo=r(NSe," \u2014 "),HO=n(NSe,"A",{href:!0});var kFt=s(HO);rBo=r(kFt,"DebertaForMaskedLM"),kFt.forEach(t),tBo=r(NSe," (DeBERTa model)"),NSe.forEach(t),aBo=i(H),X1=n(H,"LI",{});var qSe=s(X1);Rhe=n(qSe,"STRONG",{});var SFt=s(Rhe);nBo=r(SFt,"deberta-v2"),SFt.forEach(t),sBo=r(qSe," \u2014 "),UO=n(qSe,"A",{href:!0});var RFt=s(UO);lBo=r(RFt,"DebertaV2ForMaskedLM"),RFt.forEach(t),iBo=r(qSe," (DeBERTa-v2 model)"),qSe.forEach(t),dBo=i(H),z1=n(H,"LI",{});var jSe=s(z1);Phe=n(jSe,"STRONG",{});var PFt=s(Phe);cBo=r(PFt,"distilbert"),PFt.forEach(t),fBo=r(jSe," \u2014 "),JO=n(jSe,"A",{href:!0});var BFt=s(JO);mBo=r(BFt,"DistilBertForMaskedLM"),BFt.forEach(t),gBo=r(jSe," (DistilBERT model)"),jSe.forEach(t),hBo=i(H),Q1=n(H,"LI",{});var DSe=s(Q1);Bhe=n(DSe,"STRONG",{});var IFt=s(Bhe);pBo=r(IFt,"electra"),IFt.forEach(t),_Bo=r(DSe," \u2014 "),YO=n(DSe,"A",{href:!0});var NFt=s(YO);uBo=r(NFt,"ElectraForMaskedLM"),NFt.forEach(t),bBo=r(DSe," (ELECTRA model)"),DSe.forEach(t),vBo=i(H),W1=n(H,"LI",{});var GSe=s(W1);Ihe=n(GSe,"STRONG",{});var qFt=s(Ihe);FBo=r(qFt,"flaubert"),qFt.forEach(t),TBo=r(GSe," \u2014 "),KO=n(GSe,"A",{href:!0});var jFt=s(KO);MBo=r(jFt,"FlaubertWithLMHeadModel"),jFt.forEach(t),EBo=r(GSe," (FlauBERT model)"),GSe.forEach(t),CBo=i(H),H1=n(H,"LI",{});var OSe=s(H1);Nhe=n(OSe,"STRONG",{});var DFt=s(Nhe);wBo=r(DFt,"fnet"),DFt.forEach(t),ABo=r(OSe," \u2014 "),ZO=n(OSe,"A",{href:!0});var GFt=s(ZO);LBo=r(GFt,"FNetForMaskedLM"),GFt.forEach(t),yBo=r(OSe," (FNet model)"),OSe.forEach(t),xBo=i(H),U1=n(H,"LI",{});var VSe=s(U1);qhe=n(VSe,"STRONG",{});var OFt=s(qhe);$Bo=r(OFt,"funnel"),OFt.forEach(t),kBo=r(VSe," \u2014 "),eV=n(VSe,"A",{href:!0});var VFt=s(eV);SBo=r(VFt,"FunnelForMaskedLM"),VFt.forEach(t),RBo=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),PBo=i(H),J1=n(H,"LI",{});var XSe=s(J1);jhe=n(XSe,"STRONG",{});var XFt=s(jhe);BBo=r(XFt,"ibert"),XFt.forEach(t),IBo=r(XSe," \u2014 "),oV=n(XSe,"A",{href:!0});var zFt=s(oV);NBo=r(zFt,"IBertForMaskedLM"),zFt.forEach(t),qBo=r(XSe," (I-BERT model)"),XSe.forEach(t),jBo=i(H),Y1=n(H,"LI",{});var zSe=s(Y1);Dhe=n(zSe,"STRONG",{});var QFt=s(Dhe);DBo=r(QFt,"layoutlm"),QFt.forEach(t),GBo=r(zSe," \u2014 "),rV=n(zSe,"A",{href:!0});var WFt=s(rV);OBo=r(WFt,"LayoutLMForMaskedLM"),WFt.forEach(t),VBo=r(zSe," (LayoutLM model)"),zSe.forEach(t),XBo=i(H),K1=n(H,"LI",{});var QSe=s(K1);Ghe=n(QSe,"STRONG",{});var HFt=s(Ghe);zBo=r(HFt,"longformer"),HFt.forEach(t),QBo=r(QSe," \u2014 "),tV=n(QSe,"A",{href:!0});var UFt=s(tV);WBo=r(UFt,"LongformerForMaskedLM"),UFt.forEach(t),HBo=r(QSe," (Longformer model)"),QSe.forEach(t),UBo=i(H),Z1=n(H,"LI",{});var WSe=s(Z1);Ohe=n(WSe,"STRONG",{});var JFt=s(Ohe);JBo=r(JFt,"luke"),JFt.forEach(t),YBo=r(WSe," \u2014 "),aV=n(WSe,"A",{href:!0});var YFt=s(aV);KBo=r(YFt,"LukeForMaskedLM"),YFt.forEach(t),ZBo=r(WSe," (LUKE model)"),WSe.forEach(t),eIo=i(H),eb=n(H,"LI",{});var HSe=s(eb);Vhe=n(HSe,"STRONG",{});var KFt=s(Vhe);oIo=r(KFt,"mbart"),KFt.forEach(t),rIo=r(HSe," \u2014 "),nV=n(HSe,"A",{href:!0});var ZFt=s(nV);tIo=r(ZFt,"MBartForConditionalGeneration"),ZFt.forEach(t),aIo=r(HSe," (mBART model)"),HSe.forEach(t),nIo=i(H),ob=n(H,"LI",{});var USe=s(ob);Xhe=n(USe,"STRONG",{});var e6t=s(Xhe);sIo=r(e6t,"megatron-bert"),e6t.forEach(t),lIo=r(USe," \u2014 "),sV=n(USe,"A",{href:!0});var o6t=s(sV);iIo=r(o6t,"MegatronBertForMaskedLM"),o6t.forEach(t),dIo=r(USe," (Megatron-BERT model)"),USe.forEach(t),cIo=i(H),rb=n(H,"LI",{});var JSe=s(rb);zhe=n(JSe,"STRONG",{});var r6t=s(zhe);fIo=r(r6t,"mobilebert"),r6t.forEach(t),mIo=r(JSe," \u2014 "),lV=n(JSe,"A",{href:!0});var t6t=s(lV);gIo=r(t6t,"MobileBertForMaskedLM"),t6t.forEach(t),hIo=r(JSe," (MobileBERT model)"),JSe.forEach(t),pIo=i(H),tb=n(H,"LI",{});var YSe=s(tb);Qhe=n(YSe,"STRONG",{});var a6t=s(Qhe);_Io=r(a6t,"mpnet"),a6t.forEach(t),uIo=r(YSe," \u2014 "),iV=n(YSe,"A",{href:!0});var n6t=s(iV);bIo=r(n6t,"MPNetForMaskedLM"),n6t.forEach(t),vIo=r(YSe," (MPNet model)"),YSe.forEach(t),FIo=i(H),ab=n(H,"LI",{});var KSe=s(ab);Whe=n(KSe,"STRONG",{});var s6t=s(Whe);TIo=r(s6t,"mvp"),s6t.forEach(t),MIo=r(KSe," \u2014 "),dV=n(KSe,"A",{href:!0});var l6t=s(dV);EIo=r(l6t,"MvpForConditionalGeneration"),l6t.forEach(t),CIo=r(KSe," (MVP model)"),KSe.forEach(t),wIo=i(H),nb=n(H,"LI",{});var ZSe=s(nb);Hhe=n(ZSe,"STRONG",{});var i6t=s(Hhe);AIo=r(i6t,"nezha"),i6t.forEach(t),LIo=r(ZSe," \u2014 "),cV=n(ZSe,"A",{href:!0});var d6t=s(cV);yIo=r(d6t,"NezhaForMaskedLM"),d6t.forEach(t),xIo=r(ZSe," (Nezha model)"),ZSe.forEach(t),$Io=i(H),sb=n(H,"LI",{});var eRe=s(sb);Uhe=n(eRe,"STRONG",{});var c6t=s(Uhe);kIo=r(c6t,"nystromformer"),c6t.forEach(t),SIo=r(eRe," \u2014 "),fV=n(eRe,"A",{href:!0});var f6t=s(fV);RIo=r(f6t,"NystromformerForMaskedLM"),f6t.forEach(t),PIo=r(eRe," (Nystr\xF6mformer model)"),eRe.forEach(t),BIo=i(H),lb=n(H,"LI",{});var oRe=s(lb);Jhe=n(oRe,"STRONG",{});var m6t=s(Jhe);IIo=r(m6t,"perceiver"),m6t.forEach(t),NIo=r(oRe," \u2014 "),mV=n(oRe,"A",{href:!0});var g6t=s(mV);qIo=r(g6t,"PerceiverForMaskedLM"),g6t.forEach(t),jIo=r(oRe," (Perceiver model)"),oRe.forEach(t),DIo=i(H),ib=n(H,"LI",{});var rRe=s(ib);Yhe=n(rRe,"STRONG",{});var h6t=s(Yhe);GIo=r(h6t,"qdqbert"),h6t.forEach(t),OIo=r(rRe," \u2014 "),gV=n(rRe,"A",{href:!0});var p6t=s(gV);VIo=r(p6t,"QDQBertForMaskedLM"),p6t.forEach(t),XIo=r(rRe," (QDQBert model)"),rRe.forEach(t),zIo=i(H),db=n(H,"LI",{});var tRe=s(db);Khe=n(tRe,"STRONG",{});var _6t=s(Khe);QIo=r(_6t,"reformer"),_6t.forEach(t),WIo=r(tRe," \u2014 "),hV=n(tRe,"A",{href:!0});var u6t=s(hV);HIo=r(u6t,"ReformerForMaskedLM"),u6t.forEach(t),UIo=r(tRe," (Reformer model)"),tRe.forEach(t),JIo=i(H),cb=n(H,"LI",{});var aRe=s(cb);Zhe=n(aRe,"STRONG",{});var b6t=s(Zhe);YIo=r(b6t,"rembert"),b6t.forEach(t),KIo=r(aRe," \u2014 "),pV=n(aRe,"A",{href:!0});var v6t=s(pV);ZIo=r(v6t,"RemBertForMaskedLM"),v6t.forEach(t),eNo=r(aRe," (RemBERT model)"),aRe.forEach(t),oNo=i(H),fb=n(H,"LI",{});var nRe=s(fb);epe=n(nRe,"STRONG",{});var F6t=s(epe);rNo=r(F6t,"roberta"),F6t.forEach(t),tNo=r(nRe," \u2014 "),_V=n(nRe,"A",{href:!0});var T6t=s(_V);aNo=r(T6t,"RobertaForMaskedLM"),T6t.forEach(t),nNo=r(nRe," (RoBERTa model)"),nRe.forEach(t),sNo=i(H),mb=n(H,"LI",{});var sRe=s(mb);ope=n(sRe,"STRONG",{});var M6t=s(ope);lNo=r(M6t,"roformer"),M6t.forEach(t),iNo=r(sRe," \u2014 "),uV=n(sRe,"A",{href:!0});var E6t=s(uV);dNo=r(E6t,"RoFormerForMaskedLM"),E6t.forEach(t),cNo=r(sRe," (RoFormer model)"),sRe.forEach(t),fNo=i(H),gb=n(H,"LI",{});var lRe=s(gb);rpe=n(lRe,"STRONG",{});var C6t=s(rpe);mNo=r(C6t,"squeezebert"),C6t.forEach(t),gNo=r(lRe," \u2014 "),bV=n(lRe,"A",{href:!0});var w6t=s(bV);hNo=r(w6t,"SqueezeBertForMaskedLM"),w6t.forEach(t),pNo=r(lRe," (SqueezeBERT model)"),lRe.forEach(t),_No=i(H),hb=n(H,"LI",{});var iRe=s(hb);tpe=n(iRe,"STRONG",{});var A6t=s(tpe);uNo=r(A6t,"tapas"),A6t.forEach(t),bNo=r(iRe," \u2014 "),vV=n(iRe,"A",{href:!0});var L6t=s(vV);vNo=r(L6t,"TapasForMaskedLM"),L6t.forEach(t),FNo=r(iRe," (TAPAS model)"),iRe.forEach(t),TNo=i(H),pb=n(H,"LI",{});var dRe=s(pb);ape=n(dRe,"STRONG",{});var y6t=s(ape);MNo=r(y6t,"wav2vec2"),y6t.forEach(t),ENo=r(dRe," \u2014 "),npe=n(dRe,"CODE",{});var x6t=s(npe);CNo=r(x6t,"Wav2Vec2ForMaskedLM"),x6t.forEach(t),wNo=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),ANo=i(H),_b=n(H,"LI",{});var cRe=s(_b);spe=n(cRe,"STRONG",{});var $6t=s(spe);LNo=r($6t,"xlm"),$6t.forEach(t),yNo=r(cRe," \u2014 "),FV=n(cRe,"A",{href:!0});var k6t=s(FV);xNo=r(k6t,"XLMWithLMHeadModel"),k6t.forEach(t),$No=r(cRe," (XLM model)"),cRe.forEach(t),kNo=i(H),ub=n(H,"LI",{});var fRe=s(ub);lpe=n(fRe,"STRONG",{});var S6t=s(lpe);SNo=r(S6t,"xlm-roberta"),S6t.forEach(t),RNo=r(fRe," \u2014 "),TV=n(fRe,"A",{href:!0});var R6t=s(TV);PNo=r(R6t,"XLMRobertaForMaskedLM"),R6t.forEach(t),BNo=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),INo=i(H),bb=n(H,"LI",{});var mRe=s(bb);ipe=n(mRe,"STRONG",{});var P6t=s(ipe);NNo=r(P6t,"xlm-roberta-xl"),P6t.forEach(t),qNo=r(mRe," \u2014 "),MV=n(mRe,"A",{href:!0});var B6t=s(MV);jNo=r(B6t,"XLMRobertaXLForMaskedLM"),B6t.forEach(t),DNo=r(mRe," (XLM-RoBERTa-XL model)"),mRe.forEach(t),GNo=i(H),vb=n(H,"LI",{});var gRe=s(vb);dpe=n(gRe,"STRONG",{});var I6t=s(dpe);ONo=r(I6t,"yoso"),I6t.forEach(t),VNo=r(gRe," \u2014 "),EV=n(gRe,"A",{href:!0});var N6t=s(EV);XNo=r(N6t,"YosoForMaskedLM"),N6t.forEach(t),zNo=r(gRe," (YOSO model)"),gRe.forEach(t),H.forEach(t),QNo=i(da),Fb=n(da,"P",{});var hRe=s(Fb);WNo=r(hRe,"The model is set in evaluation mode by default using "),cpe=n(hRe,"CODE",{});var q6t=s(cpe);HNo=r(q6t,"model.eval()"),q6t.forEach(t),UNo=r(hRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(hRe,"CODE",{});var j6t=s(fpe);JNo=r(j6t,"model.train()"),j6t.forEach(t),hRe.forEach(t),YNo=i(da),T(Tb.$$.fragment,da),da.forEach(t),al.forEach(t),TXe=i(f),Ki=n(f,"H2",{class:!0});var LQe=s(Ki);Mb=n(LQe,"A",{id:!0,class:!0,href:!0});var D6t=s(Mb);mpe=n(D6t,"SPAN",{});var G6t=s(mpe);T(YL.$$.fragment,G6t),G6t.forEach(t),D6t.forEach(t),KNo=i(LQe),gpe=n(LQe,"SPAN",{});var O6t=s(gpe);ZNo=r(O6t,"AutoModelForSeq2SeqLM"),O6t.forEach(t),LQe.forEach(t),MXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(KL.$$.fragment,nl),eqo=i(nl),Zi=n(nl,"P",{});var Nre=s(Zi);oqo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CV=n(Nre,"A",{href:!0});var V6t=s(CV);rqo=r(V6t,"from_pretrained()"),V6t.forEach(t),tqo=r(Nre," class method or the "),wV=n(Nre,"A",{href:!0});var X6t=s(wV);aqo=r(X6t,"from_config()"),X6t.forEach(t),nqo=r(Nre,` class
method.`),Nre.forEach(t),sqo=i(nl),ZL=n(nl,"P",{});var yQe=s(ZL);lqo=r(yQe,"This class cannot be instantiated directly using "),hpe=n(yQe,"CODE",{});var z6t=s(hpe);iqo=r(z6t,"__init__()"),z6t.forEach(t),dqo=r(yQe," (throws an error)."),yQe.forEach(t),cqo=i(nl),ft=n(nl,"DIV",{class:!0});var uw=s(ft);T(ey.$$.fragment,uw),fqo=i(uw),ppe=n(uw,"P",{});var Q6t=s(ppe);mqo=r(Q6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q6t.forEach(t),gqo=i(uw),ed=n(uw,"P",{});var qre=s(ed);hqo=r(qre,`Note:
Loading a model from its configuration file does `),_pe=n(qre,"STRONG",{});var W6t=s(_pe);pqo=r(W6t,"not"),W6t.forEach(t),_qo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(qre,"A",{href:!0});var H6t=s(AV);uqo=r(H6t,"from_pretrained()"),H6t.forEach(t),bqo=r(qre," to load the model weights."),qre.forEach(t),vqo=i(uw),T(Eb.$$.fragment,uw),uw.forEach(t),Fqo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),Tqo=i(ca),upe=n(ca,"P",{});var U6t=s(upe);Mqo=r(U6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U6t.forEach(t),Eqo=i(ca),Da=n(ca,"P",{});var bw=s(Da);Cqo=r(bw,"The model class to instantiate is selected based on the "),bpe=n(bw,"CODE",{});var J6t=s(bpe);wqo=r(J6t,"model_type"),J6t.forEach(t),Aqo=r(bw,` property of the config object (either
passed as an argument or loaded from `),vpe=n(bw,"CODE",{});var Y6t=s(vpe);Lqo=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),yqo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(bw,"CODE",{});var K6t=s(Fpe);xqo=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),$qo=r(bw,":"),bw.forEach(t),kqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);Cb=n(be,"LI",{});var pRe=s(Cb);Tpe=n(pRe,"STRONG",{});var Z6t=s(Tpe);Sqo=r(Z6t,"bart"),Z6t.forEach(t),Rqo=r(pRe," \u2014 "),LV=n(pRe,"A",{href:!0});var eTt=s(LV);Pqo=r(eTt,"BartForConditionalGeneration"),eTt.forEach(t),Bqo=r(pRe," (BART model)"),pRe.forEach(t),Iqo=i(be),wb=n(be,"LI",{});var _Re=s(wb);Mpe=n(_Re,"STRONG",{});var oTt=s(Mpe);Nqo=r(oTt,"bigbird_pegasus"),oTt.forEach(t),qqo=r(_Re," \u2014 "),yV=n(_Re,"A",{href:!0});var rTt=s(yV);jqo=r(rTt,"BigBirdPegasusForConditionalGeneration"),rTt.forEach(t),Dqo=r(_Re," (BigBird-Pegasus model)"),_Re.forEach(t),Gqo=i(be),Ab=n(be,"LI",{});var uRe=s(Ab);Epe=n(uRe,"STRONG",{});var tTt=s(Epe);Oqo=r(tTt,"blenderbot"),tTt.forEach(t),Vqo=r(uRe," \u2014 "),xV=n(uRe,"A",{href:!0});var aTt=s(xV);Xqo=r(aTt,"BlenderbotForConditionalGeneration"),aTt.forEach(t),zqo=r(uRe," (Blenderbot model)"),uRe.forEach(t),Qqo=i(be),Lb=n(be,"LI",{});var bRe=s(Lb);Cpe=n(bRe,"STRONG",{});var nTt=s(Cpe);Wqo=r(nTt,"blenderbot-small"),nTt.forEach(t),Hqo=r(bRe," \u2014 "),$V=n(bRe,"A",{href:!0});var sTt=s($V);Uqo=r(sTt,"BlenderbotSmallForConditionalGeneration"),sTt.forEach(t),Jqo=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),Yqo=i(be),yb=n(be,"LI",{});var vRe=s(yb);wpe=n(vRe,"STRONG",{});var lTt=s(wpe);Kqo=r(lTt,"encoder-decoder"),lTt.forEach(t),Zqo=r(vRe," \u2014 "),kV=n(vRe,"A",{href:!0});var iTt=s(kV);ejo=r(iTt,"EncoderDecoderModel"),iTt.forEach(t),ojo=r(vRe," (Encoder decoder model)"),vRe.forEach(t),rjo=i(be),xb=n(be,"LI",{});var FRe=s(xb);Ape=n(FRe,"STRONG",{});var dTt=s(Ape);tjo=r(dTt,"fsmt"),dTt.forEach(t),ajo=r(FRe," \u2014 "),SV=n(FRe,"A",{href:!0});var cTt=s(SV);njo=r(cTt,"FSMTForConditionalGeneration"),cTt.forEach(t),sjo=r(FRe," (FairSeq Machine-Translation model)"),FRe.forEach(t),ljo=i(be),$b=n(be,"LI",{});var TRe=s($b);Lpe=n(TRe,"STRONG",{});var fTt=s(Lpe);ijo=r(fTt,"led"),fTt.forEach(t),djo=r(TRe," \u2014 "),RV=n(TRe,"A",{href:!0});var mTt=s(RV);cjo=r(mTt,"LEDForConditionalGeneration"),mTt.forEach(t),fjo=r(TRe," (LED model)"),TRe.forEach(t),mjo=i(be),kb=n(be,"LI",{});var MRe=s(kb);ype=n(MRe,"STRONG",{});var gTt=s(ype);gjo=r(gTt,"longt5"),gTt.forEach(t),hjo=r(MRe," \u2014 "),PV=n(MRe,"A",{href:!0});var hTt=s(PV);pjo=r(hTt,"LongT5ForConditionalGeneration"),hTt.forEach(t),_jo=r(MRe," (LongT5 model)"),MRe.forEach(t),ujo=i(be),Sb=n(be,"LI",{});var ERe=s(Sb);xpe=n(ERe,"STRONG",{});var pTt=s(xpe);bjo=r(pTt,"m2m_100"),pTt.forEach(t),vjo=r(ERe," \u2014 "),BV=n(ERe,"A",{href:!0});var _Tt=s(BV);Fjo=r(_Tt,"M2M100ForConditionalGeneration"),_Tt.forEach(t),Tjo=r(ERe," (M2M100 model)"),ERe.forEach(t),Mjo=i(be),Rb=n(be,"LI",{});var CRe=s(Rb);$pe=n(CRe,"STRONG",{});var uTt=s($pe);Ejo=r(uTt,"marian"),uTt.forEach(t),Cjo=r(CRe," \u2014 "),IV=n(CRe,"A",{href:!0});var bTt=s(IV);wjo=r(bTt,"MarianMTModel"),bTt.forEach(t),Ajo=r(CRe," (Marian model)"),CRe.forEach(t),Ljo=i(be),Pb=n(be,"LI",{});var wRe=s(Pb);kpe=n(wRe,"STRONG",{});var vTt=s(kpe);yjo=r(vTt,"mbart"),vTt.forEach(t),xjo=r(wRe," \u2014 "),NV=n(wRe,"A",{href:!0});var FTt=s(NV);$jo=r(FTt,"MBartForConditionalGeneration"),FTt.forEach(t),kjo=r(wRe," (mBART model)"),wRe.forEach(t),Sjo=i(be),Bb=n(be,"LI",{});var ARe=s(Bb);Spe=n(ARe,"STRONG",{});var TTt=s(Spe);Rjo=r(TTt,"mt5"),TTt.forEach(t),Pjo=r(ARe," \u2014 "),qV=n(ARe,"A",{href:!0});var MTt=s(qV);Bjo=r(MTt,"MT5ForConditionalGeneration"),MTt.forEach(t),Ijo=r(ARe," (MT5 model)"),ARe.forEach(t),Njo=i(be),Ib=n(be,"LI",{});var LRe=s(Ib);Rpe=n(LRe,"STRONG",{});var ETt=s(Rpe);qjo=r(ETt,"mvp"),ETt.forEach(t),jjo=r(LRe," \u2014 "),jV=n(LRe,"A",{href:!0});var CTt=s(jV);Djo=r(CTt,"MvpForConditionalGeneration"),CTt.forEach(t),Gjo=r(LRe," (MVP model)"),LRe.forEach(t),Ojo=i(be),Nb=n(be,"LI",{});var yRe=s(Nb);Ppe=n(yRe,"STRONG",{});var wTt=s(Ppe);Vjo=r(wTt,"pegasus"),wTt.forEach(t),Xjo=r(yRe," \u2014 "),DV=n(yRe,"A",{href:!0});var ATt=s(DV);zjo=r(ATt,"PegasusForConditionalGeneration"),ATt.forEach(t),Qjo=r(yRe," (Pegasus model)"),yRe.forEach(t),Wjo=i(be),qb=n(be,"LI",{});var xRe=s(qb);Bpe=n(xRe,"STRONG",{});var LTt=s(Bpe);Hjo=r(LTt,"plbart"),LTt.forEach(t),Ujo=r(xRe," \u2014 "),GV=n(xRe,"A",{href:!0});var yTt=s(GV);Jjo=r(yTt,"PLBartForConditionalGeneration"),yTt.forEach(t),Yjo=r(xRe," (PLBart model)"),xRe.forEach(t),Kjo=i(be),jb=n(be,"LI",{});var $Re=s(jb);Ipe=n($Re,"STRONG",{});var xTt=s(Ipe);Zjo=r(xTt,"prophetnet"),xTt.forEach(t),eDo=r($Re," \u2014 "),OV=n($Re,"A",{href:!0});var $Tt=s(OV);oDo=r($Tt,"ProphetNetForConditionalGeneration"),$Tt.forEach(t),rDo=r($Re," (ProphetNet model)"),$Re.forEach(t),tDo=i(be),Db=n(be,"LI",{});var kRe=s(Db);Npe=n(kRe,"STRONG",{});var kTt=s(Npe);aDo=r(kTt,"t5"),kTt.forEach(t),nDo=r(kRe," \u2014 "),VV=n(kRe,"A",{href:!0});var STt=s(VV);sDo=r(STt,"T5ForConditionalGeneration"),STt.forEach(t),lDo=r(kRe," (T5 model)"),kRe.forEach(t),iDo=i(be),Gb=n(be,"LI",{});var SRe=s(Gb);qpe=n(SRe,"STRONG",{});var RTt=s(qpe);dDo=r(RTt,"xlm-prophetnet"),RTt.forEach(t),cDo=r(SRe," \u2014 "),XV=n(SRe,"A",{href:!0});var PTt=s(XV);fDo=r(PTt,"XLMProphetNetForConditionalGeneration"),PTt.forEach(t),mDo=r(SRe," (XLM-ProphetNet model)"),SRe.forEach(t),be.forEach(t),gDo=i(ca),Ob=n(ca,"P",{});var RRe=s(Ob);hDo=r(RRe,"The model is set in evaluation mode by default using "),jpe=n(RRe,"CODE",{});var BTt=s(jpe);pDo=r(BTt,"model.eval()"),BTt.forEach(t),_Do=r(RRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(RRe,"CODE",{});var ITt=s(Dpe);uDo=r(ITt,"model.train()"),ITt.forEach(t),RRe.forEach(t),bDo=i(ca),T(Vb.$$.fragment,ca),ca.forEach(t),nl.forEach(t),EXe=i(f),od=n(f,"H2",{class:!0});var xQe=s(od);Xb=n(xQe,"A",{id:!0,class:!0,href:!0});var NTt=s(Xb);Gpe=n(NTt,"SPAN",{});var qTt=s(Gpe);T(ry.$$.fragment,qTt),qTt.forEach(t),NTt.forEach(t),vDo=i(xQe),Ope=n(xQe,"SPAN",{});var jTt=s(Ope);FDo=r(jTt,"AutoModelForSequenceClassification"),jTt.forEach(t),xQe.forEach(t),CXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ty.$$.fragment,sl),TDo=i(sl),rd=n(sl,"P",{});var jre=s(rd);MDo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zV=n(jre,"A",{href:!0});var DTt=s(zV);EDo=r(DTt,"from_pretrained()"),DTt.forEach(t),CDo=r(jre," class method or the "),QV=n(jre,"A",{href:!0});var GTt=s(QV);wDo=r(GTt,"from_config()"),GTt.forEach(t),ADo=r(jre,` class
method.`),jre.forEach(t),LDo=i(sl),ay=n(sl,"P",{});var $Qe=s(ay);yDo=r($Qe,"This class cannot be instantiated directly using "),Vpe=n($Qe,"CODE",{});var OTt=s(Vpe);xDo=r(OTt,"__init__()"),OTt.forEach(t),$Do=r($Qe," (throws an error)."),$Qe.forEach(t),kDo=i(sl),mt=n(sl,"DIV",{class:!0});var vw=s(mt);T(ny.$$.fragment,vw),SDo=i(vw),Xpe=n(vw,"P",{});var VTt=s(Xpe);RDo=r(VTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VTt.forEach(t),PDo=i(vw),td=n(vw,"P",{});var Dre=s(td);BDo=r(Dre,`Note:
Loading a model from its configuration file does `),zpe=n(Dre,"STRONG",{});var XTt=s(zpe);IDo=r(XTt,"not"),XTt.forEach(t),NDo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(Dre,"A",{href:!0});var zTt=s(WV);qDo=r(zTt,"from_pretrained()"),zTt.forEach(t),jDo=r(Dre," to load the model weights."),Dre.forEach(t),DDo=i(vw),T(zb.$$.fragment,vw),vw.forEach(t),GDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),ODo=i(fa),Qpe=n(fa,"P",{});var QTt=s(Qpe);VDo=r(QTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QTt.forEach(t),XDo=i(fa),Ga=n(fa,"P",{});var Fw=s(Ga);zDo=r(Fw,"The model class to instantiate is selected based on the "),Wpe=n(Fw,"CODE",{});var WTt=s(Wpe);QDo=r(WTt,"model_type"),WTt.forEach(t),WDo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(Fw,"CODE",{});var HTt=s(Hpe);HDo=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),UDo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(Fw,"CODE",{});var UTt=s(Upe);JDo=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),YDo=r(Fw,":"),Fw.forEach(t),KDo=i(fa),N=n(fa,"UL",{});var j=s(N);Qb=n(j,"LI",{});var PRe=s(Qb);Jpe=n(PRe,"STRONG",{});var JTt=s(Jpe);ZDo=r(JTt,"albert"),JTt.forEach(t),eGo=r(PRe," \u2014 "),HV=n(PRe,"A",{href:!0});var YTt=s(HV);oGo=r(YTt,"AlbertForSequenceClassification"),YTt.forEach(t),rGo=r(PRe," (ALBERT model)"),PRe.forEach(t),tGo=i(j),Wb=n(j,"LI",{});var BRe=s(Wb);Ype=n(BRe,"STRONG",{});var KTt=s(Ype);aGo=r(KTt,"bart"),KTt.forEach(t),nGo=r(BRe," \u2014 "),UV=n(BRe,"A",{href:!0});var ZTt=s(UV);sGo=r(ZTt,"BartForSequenceClassification"),ZTt.forEach(t),lGo=r(BRe," (BART model)"),BRe.forEach(t),iGo=i(j),Hb=n(j,"LI",{});var IRe=s(Hb);Kpe=n(IRe,"STRONG",{});var e7t=s(Kpe);dGo=r(e7t,"bert"),e7t.forEach(t),cGo=r(IRe," \u2014 "),JV=n(IRe,"A",{href:!0});var o7t=s(JV);fGo=r(o7t,"BertForSequenceClassification"),o7t.forEach(t),mGo=r(IRe," (BERT model)"),IRe.forEach(t),gGo=i(j),Ub=n(j,"LI",{});var NRe=s(Ub);Zpe=n(NRe,"STRONG",{});var r7t=s(Zpe);hGo=r(r7t,"big_bird"),r7t.forEach(t),pGo=r(NRe," \u2014 "),YV=n(NRe,"A",{href:!0});var t7t=s(YV);_Go=r(t7t,"BigBirdForSequenceClassification"),t7t.forEach(t),uGo=r(NRe," (BigBird model)"),NRe.forEach(t),bGo=i(j),Jb=n(j,"LI",{});var qRe=s(Jb);e_e=n(qRe,"STRONG",{});var a7t=s(e_e);vGo=r(a7t,"bigbird_pegasus"),a7t.forEach(t),FGo=r(qRe," \u2014 "),KV=n(qRe,"A",{href:!0});var n7t=s(KV);TGo=r(n7t,"BigBirdPegasusForSequenceClassification"),n7t.forEach(t),MGo=r(qRe," (BigBird-Pegasus model)"),qRe.forEach(t),EGo=i(j),Yb=n(j,"LI",{});var jRe=s(Yb);o_e=n(jRe,"STRONG",{});var s7t=s(o_e);CGo=r(s7t,"bloom"),s7t.forEach(t),wGo=r(jRe," \u2014 "),ZV=n(jRe,"A",{href:!0});var l7t=s(ZV);AGo=r(l7t,"BloomForSequenceClassification"),l7t.forEach(t),LGo=r(jRe," (BLOOM model)"),jRe.forEach(t),yGo=i(j),Kb=n(j,"LI",{});var DRe=s(Kb);r_e=n(DRe,"STRONG",{});var i7t=s(r_e);xGo=r(i7t,"camembert"),i7t.forEach(t),$Go=r(DRe," \u2014 "),eX=n(DRe,"A",{href:!0});var d7t=s(eX);kGo=r(d7t,"CamembertForSequenceClassification"),d7t.forEach(t),SGo=r(DRe," (CamemBERT model)"),DRe.forEach(t),RGo=i(j),Zb=n(j,"LI",{});var GRe=s(Zb);t_e=n(GRe,"STRONG",{});var c7t=s(t_e);PGo=r(c7t,"canine"),c7t.forEach(t),BGo=r(GRe," \u2014 "),oX=n(GRe,"A",{href:!0});var f7t=s(oX);IGo=r(f7t,"CanineForSequenceClassification"),f7t.forEach(t),NGo=r(GRe," (CANINE model)"),GRe.forEach(t),qGo=i(j),ev=n(j,"LI",{});var ORe=s(ev);a_e=n(ORe,"STRONG",{});var m7t=s(a_e);jGo=r(m7t,"convbert"),m7t.forEach(t),DGo=r(ORe," \u2014 "),rX=n(ORe,"A",{href:!0});var g7t=s(rX);GGo=r(g7t,"ConvBertForSequenceClassification"),g7t.forEach(t),OGo=r(ORe," (ConvBERT model)"),ORe.forEach(t),VGo=i(j),ov=n(j,"LI",{});var VRe=s(ov);n_e=n(VRe,"STRONG",{});var h7t=s(n_e);XGo=r(h7t,"ctrl"),h7t.forEach(t),zGo=r(VRe," \u2014 "),tX=n(VRe,"A",{href:!0});var p7t=s(tX);QGo=r(p7t,"CTRLForSequenceClassification"),p7t.forEach(t),WGo=r(VRe," (CTRL model)"),VRe.forEach(t),HGo=i(j),rv=n(j,"LI",{});var XRe=s(rv);s_e=n(XRe,"STRONG",{});var _7t=s(s_e);UGo=r(_7t,"data2vec-text"),_7t.forEach(t),JGo=r(XRe," \u2014 "),aX=n(XRe,"A",{href:!0});var u7t=s(aX);YGo=r(u7t,"Data2VecTextForSequenceClassification"),u7t.forEach(t),KGo=r(XRe," (Data2VecText model)"),XRe.forEach(t),ZGo=i(j),tv=n(j,"LI",{});var zRe=s(tv);l_e=n(zRe,"STRONG",{});var b7t=s(l_e);eOo=r(b7t,"deberta"),b7t.forEach(t),oOo=r(zRe," \u2014 "),nX=n(zRe,"A",{href:!0});var v7t=s(nX);rOo=r(v7t,"DebertaForSequenceClassification"),v7t.forEach(t),tOo=r(zRe," (DeBERTa model)"),zRe.forEach(t),aOo=i(j),av=n(j,"LI",{});var QRe=s(av);i_e=n(QRe,"STRONG",{});var F7t=s(i_e);nOo=r(F7t,"deberta-v2"),F7t.forEach(t),sOo=r(QRe," \u2014 "),sX=n(QRe,"A",{href:!0});var T7t=s(sX);lOo=r(T7t,"DebertaV2ForSequenceClassification"),T7t.forEach(t),iOo=r(QRe," (DeBERTa-v2 model)"),QRe.forEach(t),dOo=i(j),nv=n(j,"LI",{});var WRe=s(nv);d_e=n(WRe,"STRONG",{});var M7t=s(d_e);cOo=r(M7t,"distilbert"),M7t.forEach(t),fOo=r(WRe," \u2014 "),lX=n(WRe,"A",{href:!0});var E7t=s(lX);mOo=r(E7t,"DistilBertForSequenceClassification"),E7t.forEach(t),gOo=r(WRe," (DistilBERT model)"),WRe.forEach(t),hOo=i(j),sv=n(j,"LI",{});var HRe=s(sv);c_e=n(HRe,"STRONG",{});var C7t=s(c_e);pOo=r(C7t,"electra"),C7t.forEach(t),_Oo=r(HRe," \u2014 "),iX=n(HRe,"A",{href:!0});var w7t=s(iX);uOo=r(w7t,"ElectraForSequenceClassification"),w7t.forEach(t),bOo=r(HRe," (ELECTRA model)"),HRe.forEach(t),vOo=i(j),lv=n(j,"LI",{});var URe=s(lv);f_e=n(URe,"STRONG",{});var A7t=s(f_e);FOo=r(A7t,"flaubert"),A7t.forEach(t),TOo=r(URe," \u2014 "),dX=n(URe,"A",{href:!0});var L7t=s(dX);MOo=r(L7t,"FlaubertForSequenceClassification"),L7t.forEach(t),EOo=r(URe," (FlauBERT model)"),URe.forEach(t),COo=i(j),iv=n(j,"LI",{});var JRe=s(iv);m_e=n(JRe,"STRONG",{});var y7t=s(m_e);wOo=r(y7t,"fnet"),y7t.forEach(t),AOo=r(JRe," \u2014 "),cX=n(JRe,"A",{href:!0});var x7t=s(cX);LOo=r(x7t,"FNetForSequenceClassification"),x7t.forEach(t),yOo=r(JRe," (FNet model)"),JRe.forEach(t),xOo=i(j),dv=n(j,"LI",{});var YRe=s(dv);g_e=n(YRe,"STRONG",{});var $7t=s(g_e);$Oo=r($7t,"funnel"),$7t.forEach(t),kOo=r(YRe," \u2014 "),fX=n(YRe,"A",{href:!0});var k7t=s(fX);SOo=r(k7t,"FunnelForSequenceClassification"),k7t.forEach(t),ROo=r(YRe," (Funnel Transformer model)"),YRe.forEach(t),POo=i(j),cv=n(j,"LI",{});var KRe=s(cv);h_e=n(KRe,"STRONG",{});var S7t=s(h_e);BOo=r(S7t,"gpt2"),S7t.forEach(t),IOo=r(KRe," \u2014 "),mX=n(KRe,"A",{href:!0});var R7t=s(mX);NOo=r(R7t,"GPT2ForSequenceClassification"),R7t.forEach(t),qOo=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),jOo=i(j),fv=n(j,"LI",{});var ZRe=s(fv);p_e=n(ZRe,"STRONG",{});var P7t=s(p_e);DOo=r(P7t,"gpt_neo"),P7t.forEach(t),GOo=r(ZRe," \u2014 "),gX=n(ZRe,"A",{href:!0});var B7t=s(gX);OOo=r(B7t,"GPTNeoForSequenceClassification"),B7t.forEach(t),VOo=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),XOo=i(j),mv=n(j,"LI",{});var ePe=s(mv);__e=n(ePe,"STRONG",{});var I7t=s(__e);zOo=r(I7t,"gptj"),I7t.forEach(t),QOo=r(ePe," \u2014 "),hX=n(ePe,"A",{href:!0});var N7t=s(hX);WOo=r(N7t,"GPTJForSequenceClassification"),N7t.forEach(t),HOo=r(ePe," (GPT-J model)"),ePe.forEach(t),UOo=i(j),gv=n(j,"LI",{});var oPe=s(gv);u_e=n(oPe,"STRONG",{});var q7t=s(u_e);JOo=r(q7t,"ibert"),q7t.forEach(t),YOo=r(oPe," \u2014 "),pX=n(oPe,"A",{href:!0});var j7t=s(pX);KOo=r(j7t,"IBertForSequenceClassification"),j7t.forEach(t),ZOo=r(oPe," (I-BERT model)"),oPe.forEach(t),eVo=i(j),hv=n(j,"LI",{});var rPe=s(hv);b_e=n(rPe,"STRONG",{});var D7t=s(b_e);oVo=r(D7t,"layoutlm"),D7t.forEach(t),rVo=r(rPe," \u2014 "),_X=n(rPe,"A",{href:!0});var G7t=s(_X);tVo=r(G7t,"LayoutLMForSequenceClassification"),G7t.forEach(t),aVo=r(rPe," (LayoutLM model)"),rPe.forEach(t),nVo=i(j),pv=n(j,"LI",{});var tPe=s(pv);v_e=n(tPe,"STRONG",{});var O7t=s(v_e);sVo=r(O7t,"layoutlmv2"),O7t.forEach(t),lVo=r(tPe," \u2014 "),uX=n(tPe,"A",{href:!0});var V7t=s(uX);iVo=r(V7t,"LayoutLMv2ForSequenceClassification"),V7t.forEach(t),dVo=r(tPe," (LayoutLMv2 model)"),tPe.forEach(t),cVo=i(j),_v=n(j,"LI",{});var aPe=s(_v);F_e=n(aPe,"STRONG",{});var X7t=s(F_e);fVo=r(X7t,"layoutlmv3"),X7t.forEach(t),mVo=r(aPe," \u2014 "),bX=n(aPe,"A",{href:!0});var z7t=s(bX);gVo=r(z7t,"LayoutLMv3ForSequenceClassification"),z7t.forEach(t),hVo=r(aPe," (LayoutLMv3 model)"),aPe.forEach(t),pVo=i(j),uv=n(j,"LI",{});var nPe=s(uv);T_e=n(nPe,"STRONG",{});var Q7t=s(T_e);_Vo=r(Q7t,"led"),Q7t.forEach(t),uVo=r(nPe," \u2014 "),vX=n(nPe,"A",{href:!0});var W7t=s(vX);bVo=r(W7t,"LEDForSequenceClassification"),W7t.forEach(t),vVo=r(nPe," (LED model)"),nPe.forEach(t),FVo=i(j),bv=n(j,"LI",{});var sPe=s(bv);M_e=n(sPe,"STRONG",{});var H7t=s(M_e);TVo=r(H7t,"longformer"),H7t.forEach(t),MVo=r(sPe," \u2014 "),FX=n(sPe,"A",{href:!0});var U7t=s(FX);EVo=r(U7t,"LongformerForSequenceClassification"),U7t.forEach(t),CVo=r(sPe," (Longformer model)"),sPe.forEach(t),wVo=i(j),vv=n(j,"LI",{});var lPe=s(vv);E_e=n(lPe,"STRONG",{});var J7t=s(E_e);AVo=r(J7t,"mbart"),J7t.forEach(t),LVo=r(lPe," \u2014 "),TX=n(lPe,"A",{href:!0});var Y7t=s(TX);yVo=r(Y7t,"MBartForSequenceClassification"),Y7t.forEach(t),xVo=r(lPe," (mBART model)"),lPe.forEach(t),$Vo=i(j),Fv=n(j,"LI",{});var iPe=s(Fv);C_e=n(iPe,"STRONG",{});var K7t=s(C_e);kVo=r(K7t,"megatron-bert"),K7t.forEach(t),SVo=r(iPe," \u2014 "),MX=n(iPe,"A",{href:!0});var Z7t=s(MX);RVo=r(Z7t,"MegatronBertForSequenceClassification"),Z7t.forEach(t),PVo=r(iPe," (Megatron-BERT model)"),iPe.forEach(t),BVo=i(j),Tv=n(j,"LI",{});var dPe=s(Tv);w_e=n(dPe,"STRONG",{});var e8t=s(w_e);IVo=r(e8t,"mobilebert"),e8t.forEach(t),NVo=r(dPe," \u2014 "),EX=n(dPe,"A",{href:!0});var o8t=s(EX);qVo=r(o8t,"MobileBertForSequenceClassification"),o8t.forEach(t),jVo=r(dPe," (MobileBERT model)"),dPe.forEach(t),DVo=i(j),Mv=n(j,"LI",{});var cPe=s(Mv);A_e=n(cPe,"STRONG",{});var r8t=s(A_e);GVo=r(r8t,"mpnet"),r8t.forEach(t),OVo=r(cPe," \u2014 "),CX=n(cPe,"A",{href:!0});var t8t=s(CX);VVo=r(t8t,"MPNetForSequenceClassification"),t8t.forEach(t),XVo=r(cPe," (MPNet model)"),cPe.forEach(t),zVo=i(j),Ev=n(j,"LI",{});var fPe=s(Ev);L_e=n(fPe,"STRONG",{});var a8t=s(L_e);QVo=r(a8t,"mvp"),a8t.forEach(t),WVo=r(fPe," \u2014 "),wX=n(fPe,"A",{href:!0});var n8t=s(wX);HVo=r(n8t,"MvpForSequenceClassification"),n8t.forEach(t),UVo=r(fPe," (MVP model)"),fPe.forEach(t),JVo=i(j),Cv=n(j,"LI",{});var mPe=s(Cv);y_e=n(mPe,"STRONG",{});var s8t=s(y_e);YVo=r(s8t,"nezha"),s8t.forEach(t),KVo=r(mPe," \u2014 "),AX=n(mPe,"A",{href:!0});var l8t=s(AX);ZVo=r(l8t,"NezhaForSequenceClassification"),l8t.forEach(t),eXo=r(mPe," (Nezha model)"),mPe.forEach(t),oXo=i(j),wv=n(j,"LI",{});var gPe=s(wv);x_e=n(gPe,"STRONG",{});var i8t=s(x_e);rXo=r(i8t,"nystromformer"),i8t.forEach(t),tXo=r(gPe," \u2014 "),LX=n(gPe,"A",{href:!0});var d8t=s(LX);aXo=r(d8t,"NystromformerForSequenceClassification"),d8t.forEach(t),nXo=r(gPe," (Nystr\xF6mformer model)"),gPe.forEach(t),sXo=i(j),Av=n(j,"LI",{});var hPe=s(Av);$_e=n(hPe,"STRONG",{});var c8t=s($_e);lXo=r(c8t,"openai-gpt"),c8t.forEach(t),iXo=r(hPe," \u2014 "),yX=n(hPe,"A",{href:!0});var f8t=s(yX);dXo=r(f8t,"OpenAIGPTForSequenceClassification"),f8t.forEach(t),cXo=r(hPe," (OpenAI GPT model)"),hPe.forEach(t),fXo=i(j),Lv=n(j,"LI",{});var pPe=s(Lv);k_e=n(pPe,"STRONG",{});var m8t=s(k_e);mXo=r(m8t,"perceiver"),m8t.forEach(t),gXo=r(pPe," \u2014 "),xX=n(pPe,"A",{href:!0});var g8t=s(xX);hXo=r(g8t,"PerceiverForSequenceClassification"),g8t.forEach(t),pXo=r(pPe," (Perceiver model)"),pPe.forEach(t),_Xo=i(j),yv=n(j,"LI",{});var _Pe=s(yv);S_e=n(_Pe,"STRONG",{});var h8t=s(S_e);uXo=r(h8t,"plbart"),h8t.forEach(t),bXo=r(_Pe," \u2014 "),$X=n(_Pe,"A",{href:!0});var p8t=s($X);vXo=r(p8t,"PLBartForSequenceClassification"),p8t.forEach(t),FXo=r(_Pe," (PLBart model)"),_Pe.forEach(t),TXo=i(j),xv=n(j,"LI",{});var uPe=s(xv);R_e=n(uPe,"STRONG",{});var _8t=s(R_e);MXo=r(_8t,"qdqbert"),_8t.forEach(t),EXo=r(uPe," \u2014 "),kX=n(uPe,"A",{href:!0});var u8t=s(kX);CXo=r(u8t,"QDQBertForSequenceClassification"),u8t.forEach(t),wXo=r(uPe," (QDQBert model)"),uPe.forEach(t),AXo=i(j),$v=n(j,"LI",{});var bPe=s($v);P_e=n(bPe,"STRONG",{});var b8t=s(P_e);LXo=r(b8t,"reformer"),b8t.forEach(t),yXo=r(bPe," \u2014 "),SX=n(bPe,"A",{href:!0});var v8t=s(SX);xXo=r(v8t,"ReformerForSequenceClassification"),v8t.forEach(t),$Xo=r(bPe," (Reformer model)"),bPe.forEach(t),kXo=i(j),kv=n(j,"LI",{});var vPe=s(kv);B_e=n(vPe,"STRONG",{});var F8t=s(B_e);SXo=r(F8t,"rembert"),F8t.forEach(t),RXo=r(vPe," \u2014 "),RX=n(vPe,"A",{href:!0});var T8t=s(RX);PXo=r(T8t,"RemBertForSequenceClassification"),T8t.forEach(t),BXo=r(vPe," (RemBERT model)"),vPe.forEach(t),IXo=i(j),Sv=n(j,"LI",{});var FPe=s(Sv);I_e=n(FPe,"STRONG",{});var M8t=s(I_e);NXo=r(M8t,"roberta"),M8t.forEach(t),qXo=r(FPe," \u2014 "),PX=n(FPe,"A",{href:!0});var E8t=s(PX);jXo=r(E8t,"RobertaForSequenceClassification"),E8t.forEach(t),DXo=r(FPe," (RoBERTa model)"),FPe.forEach(t),GXo=i(j),Rv=n(j,"LI",{});var TPe=s(Rv);N_e=n(TPe,"STRONG",{});var C8t=s(N_e);OXo=r(C8t,"roformer"),C8t.forEach(t),VXo=r(TPe," \u2014 "),BX=n(TPe,"A",{href:!0});var w8t=s(BX);XXo=r(w8t,"RoFormerForSequenceClassification"),w8t.forEach(t),zXo=r(TPe," (RoFormer model)"),TPe.forEach(t),QXo=i(j),Pv=n(j,"LI",{});var MPe=s(Pv);q_e=n(MPe,"STRONG",{});var A8t=s(q_e);WXo=r(A8t,"squeezebert"),A8t.forEach(t),HXo=r(MPe," \u2014 "),IX=n(MPe,"A",{href:!0});var L8t=s(IX);UXo=r(L8t,"SqueezeBertForSequenceClassification"),L8t.forEach(t),JXo=r(MPe," (SqueezeBERT model)"),MPe.forEach(t),YXo=i(j),Bv=n(j,"LI",{});var EPe=s(Bv);j_e=n(EPe,"STRONG",{});var y8t=s(j_e);KXo=r(y8t,"tapas"),y8t.forEach(t),ZXo=r(EPe," \u2014 "),NX=n(EPe,"A",{href:!0});var x8t=s(NX);ezo=r(x8t,"TapasForSequenceClassification"),x8t.forEach(t),ozo=r(EPe," (TAPAS model)"),EPe.forEach(t),rzo=i(j),Iv=n(j,"LI",{});var CPe=s(Iv);D_e=n(CPe,"STRONG",{});var $8t=s(D_e);tzo=r($8t,"transfo-xl"),$8t.forEach(t),azo=r(CPe," \u2014 "),qX=n(CPe,"A",{href:!0});var k8t=s(qX);nzo=r(k8t,"TransfoXLForSequenceClassification"),k8t.forEach(t),szo=r(CPe," (Transformer-XL model)"),CPe.forEach(t),lzo=i(j),Nv=n(j,"LI",{});var wPe=s(Nv);G_e=n(wPe,"STRONG",{});var S8t=s(G_e);izo=r(S8t,"xlm"),S8t.forEach(t),dzo=r(wPe," \u2014 "),jX=n(wPe,"A",{href:!0});var R8t=s(jX);czo=r(R8t,"XLMForSequenceClassification"),R8t.forEach(t),fzo=r(wPe," (XLM model)"),wPe.forEach(t),mzo=i(j),qv=n(j,"LI",{});var APe=s(qv);O_e=n(APe,"STRONG",{});var P8t=s(O_e);gzo=r(P8t,"xlm-roberta"),P8t.forEach(t),hzo=r(APe," \u2014 "),DX=n(APe,"A",{href:!0});var B8t=s(DX);pzo=r(B8t,"XLMRobertaForSequenceClassification"),B8t.forEach(t),_zo=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),uzo=i(j),jv=n(j,"LI",{});var LPe=s(jv);V_e=n(LPe,"STRONG",{});var I8t=s(V_e);bzo=r(I8t,"xlm-roberta-xl"),I8t.forEach(t),vzo=r(LPe," \u2014 "),GX=n(LPe,"A",{href:!0});var N8t=s(GX);Fzo=r(N8t,"XLMRobertaXLForSequenceClassification"),N8t.forEach(t),Tzo=r(LPe," (XLM-RoBERTa-XL model)"),LPe.forEach(t),Mzo=i(j),Dv=n(j,"LI",{});var yPe=s(Dv);X_e=n(yPe,"STRONG",{});var q8t=s(X_e);Ezo=r(q8t,"xlnet"),q8t.forEach(t),Czo=r(yPe," \u2014 "),OX=n(yPe,"A",{href:!0});var j8t=s(OX);wzo=r(j8t,"XLNetForSequenceClassification"),j8t.forEach(t),Azo=r(yPe," (XLNet model)"),yPe.forEach(t),Lzo=i(j),Gv=n(j,"LI",{});var xPe=s(Gv);z_e=n(xPe,"STRONG",{});var D8t=s(z_e);yzo=r(D8t,"yoso"),D8t.forEach(t),xzo=r(xPe," \u2014 "),VX=n(xPe,"A",{href:!0});var G8t=s(VX);$zo=r(G8t,"YosoForSequenceClassification"),G8t.forEach(t),kzo=r(xPe," (YOSO model)"),xPe.forEach(t),j.forEach(t),Szo=i(fa),Ov=n(fa,"P",{});var $Pe=s(Ov);Rzo=r($Pe,"The model is set in evaluation mode by default using "),Q_e=n($Pe,"CODE",{});var O8t=s(Q_e);Pzo=r(O8t,"model.eval()"),O8t.forEach(t),Bzo=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n($Pe,"CODE",{});var V8t=s(W_e);Izo=r(V8t,"model.train()"),V8t.forEach(t),$Pe.forEach(t),Nzo=i(fa),T(Vv.$$.fragment,fa),fa.forEach(t),sl.forEach(t),wXe=i(f),ad=n(f,"H2",{class:!0});var kQe=s(ad);Xv=n(kQe,"A",{id:!0,class:!0,href:!0});var X8t=s(Xv);H_e=n(X8t,"SPAN",{});var z8t=s(H_e);T(ly.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),qzo=i(kQe),U_e=n(kQe,"SPAN",{});var Q8t=s(U_e);jzo=r(Q8t,"AutoModelForMultipleChoice"),Q8t.forEach(t),kQe.forEach(t),AXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(iy.$$.fragment,ll),Dzo=i(ll),nd=n(ll,"P",{});var Gre=s(nd);Gzo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XX=n(Gre,"A",{href:!0});var W8t=s(XX);Ozo=r(W8t,"from_pretrained()"),W8t.forEach(t),Vzo=r(Gre," class method or the "),zX=n(Gre,"A",{href:!0});var H8t=s(zX);Xzo=r(H8t,"from_config()"),H8t.forEach(t),zzo=r(Gre,` class
method.`),Gre.forEach(t),Qzo=i(ll),dy=n(ll,"P",{});var SQe=s(dy);Wzo=r(SQe,"This class cannot be instantiated directly using "),J_e=n(SQe,"CODE",{});var U8t=s(J_e);Hzo=r(U8t,"__init__()"),U8t.forEach(t),Uzo=r(SQe," (throws an error)."),SQe.forEach(t),Jzo=i(ll),gt=n(ll,"DIV",{class:!0});var Tw=s(gt);T(cy.$$.fragment,Tw),Yzo=i(Tw),Y_e=n(Tw,"P",{});var J8t=s(Y_e);Kzo=r(J8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J8t.forEach(t),Zzo=i(Tw),sd=n(Tw,"P",{});var Ore=s(sd);eQo=r(Ore,`Note:
Loading a model from its configuration file does `),K_e=n(Ore,"STRONG",{});var Y8t=s(K_e);oQo=r(Y8t,"not"),Y8t.forEach(t),rQo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(Ore,"A",{href:!0});var K8t=s(QX);tQo=r(K8t,"from_pretrained()"),K8t.forEach(t),aQo=r(Ore," to load the model weights."),Ore.forEach(t),nQo=i(Tw),T(zv.$$.fragment,Tw),Tw.forEach(t),sQo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),lQo=i(ma),Z_e=n(ma,"P",{});var Z8t=s(Z_e);iQo=r(Z8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z8t.forEach(t),dQo=i(ma),Oa=n(ma,"P",{});var Mw=s(Oa);cQo=r(Mw,"The model class to instantiate is selected based on the "),eue=n(Mw,"CODE",{});var eMt=s(eue);fQo=r(eMt,"model_type"),eMt.forEach(t),mQo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),oue=n(Mw,"CODE",{});var oMt=s(oue);gQo=r(oMt,"pretrained_model_name_or_path"),oMt.forEach(t),hQo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(Mw,"CODE",{});var rMt=s(rue);pQo=r(rMt,"pretrained_model_name_or_path"),rMt.forEach(t),_Qo=r(Mw,":"),Mw.forEach(t),uQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Qv=n(ee,"LI",{});var kPe=s(Qv);tue=n(kPe,"STRONG",{});var tMt=s(tue);bQo=r(tMt,"albert"),tMt.forEach(t),vQo=r(kPe," \u2014 "),WX=n(kPe,"A",{href:!0});var aMt=s(WX);FQo=r(aMt,"AlbertForMultipleChoice"),aMt.forEach(t),TQo=r(kPe," (ALBERT model)"),kPe.forEach(t),MQo=i(ee),Wv=n(ee,"LI",{});var SPe=s(Wv);aue=n(SPe,"STRONG",{});var nMt=s(aue);EQo=r(nMt,"bert"),nMt.forEach(t),CQo=r(SPe," \u2014 "),HX=n(SPe,"A",{href:!0});var sMt=s(HX);wQo=r(sMt,"BertForMultipleChoice"),sMt.forEach(t),AQo=r(SPe," (BERT model)"),SPe.forEach(t),LQo=i(ee),Hv=n(ee,"LI",{});var RPe=s(Hv);nue=n(RPe,"STRONG",{});var lMt=s(nue);yQo=r(lMt,"big_bird"),lMt.forEach(t),xQo=r(RPe," \u2014 "),UX=n(RPe,"A",{href:!0});var iMt=s(UX);$Qo=r(iMt,"BigBirdForMultipleChoice"),iMt.forEach(t),kQo=r(RPe," (BigBird model)"),RPe.forEach(t),SQo=i(ee),Uv=n(ee,"LI",{});var PPe=s(Uv);sue=n(PPe,"STRONG",{});var dMt=s(sue);RQo=r(dMt,"camembert"),dMt.forEach(t),PQo=r(PPe," \u2014 "),JX=n(PPe,"A",{href:!0});var cMt=s(JX);BQo=r(cMt,"CamembertForMultipleChoice"),cMt.forEach(t),IQo=r(PPe," (CamemBERT model)"),PPe.forEach(t),NQo=i(ee),Jv=n(ee,"LI",{});var BPe=s(Jv);lue=n(BPe,"STRONG",{});var fMt=s(lue);qQo=r(fMt,"canine"),fMt.forEach(t),jQo=r(BPe," \u2014 "),YX=n(BPe,"A",{href:!0});var mMt=s(YX);DQo=r(mMt,"CanineForMultipleChoice"),mMt.forEach(t),GQo=r(BPe," (CANINE model)"),BPe.forEach(t),OQo=i(ee),Yv=n(ee,"LI",{});var IPe=s(Yv);iue=n(IPe,"STRONG",{});var gMt=s(iue);VQo=r(gMt,"convbert"),gMt.forEach(t),XQo=r(IPe," \u2014 "),KX=n(IPe,"A",{href:!0});var hMt=s(KX);zQo=r(hMt,"ConvBertForMultipleChoice"),hMt.forEach(t),QQo=r(IPe," (ConvBERT model)"),IPe.forEach(t),WQo=i(ee),Kv=n(ee,"LI",{});var NPe=s(Kv);due=n(NPe,"STRONG",{});var pMt=s(due);HQo=r(pMt,"data2vec-text"),pMt.forEach(t),UQo=r(NPe," \u2014 "),ZX=n(NPe,"A",{href:!0});var _Mt=s(ZX);JQo=r(_Mt,"Data2VecTextForMultipleChoice"),_Mt.forEach(t),YQo=r(NPe," (Data2VecText model)"),NPe.forEach(t),KQo=i(ee),Zv=n(ee,"LI",{});var qPe=s(Zv);cue=n(qPe,"STRONG",{});var uMt=s(cue);ZQo=r(uMt,"deberta-v2"),uMt.forEach(t),eWo=r(qPe," \u2014 "),ez=n(qPe,"A",{href:!0});var bMt=s(ez);oWo=r(bMt,"DebertaV2ForMultipleChoice"),bMt.forEach(t),rWo=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),tWo=i(ee),eF=n(ee,"LI",{});var jPe=s(eF);fue=n(jPe,"STRONG",{});var vMt=s(fue);aWo=r(vMt,"distilbert"),vMt.forEach(t),nWo=r(jPe," \u2014 "),oz=n(jPe,"A",{href:!0});var FMt=s(oz);sWo=r(FMt,"DistilBertForMultipleChoice"),FMt.forEach(t),lWo=r(jPe," (DistilBERT model)"),jPe.forEach(t),iWo=i(ee),oF=n(ee,"LI",{});var DPe=s(oF);mue=n(DPe,"STRONG",{});var TMt=s(mue);dWo=r(TMt,"electra"),TMt.forEach(t),cWo=r(DPe," \u2014 "),rz=n(DPe,"A",{href:!0});var MMt=s(rz);fWo=r(MMt,"ElectraForMultipleChoice"),MMt.forEach(t),mWo=r(DPe," (ELECTRA model)"),DPe.forEach(t),gWo=i(ee),rF=n(ee,"LI",{});var GPe=s(rF);gue=n(GPe,"STRONG",{});var EMt=s(gue);hWo=r(EMt,"flaubert"),EMt.forEach(t),pWo=r(GPe," \u2014 "),tz=n(GPe,"A",{href:!0});var CMt=s(tz);_Wo=r(CMt,"FlaubertForMultipleChoice"),CMt.forEach(t),uWo=r(GPe," (FlauBERT model)"),GPe.forEach(t),bWo=i(ee),tF=n(ee,"LI",{});var OPe=s(tF);hue=n(OPe,"STRONG",{});var wMt=s(hue);vWo=r(wMt,"fnet"),wMt.forEach(t),FWo=r(OPe," \u2014 "),az=n(OPe,"A",{href:!0});var AMt=s(az);TWo=r(AMt,"FNetForMultipleChoice"),AMt.forEach(t),MWo=r(OPe," (FNet model)"),OPe.forEach(t),EWo=i(ee),aF=n(ee,"LI",{});var VPe=s(aF);pue=n(VPe,"STRONG",{});var LMt=s(pue);CWo=r(LMt,"funnel"),LMt.forEach(t),wWo=r(VPe," \u2014 "),nz=n(VPe,"A",{href:!0});var yMt=s(nz);AWo=r(yMt,"FunnelForMultipleChoice"),yMt.forEach(t),LWo=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),yWo=i(ee),nF=n(ee,"LI",{});var XPe=s(nF);_ue=n(XPe,"STRONG",{});var xMt=s(_ue);xWo=r(xMt,"ibert"),xMt.forEach(t),$Wo=r(XPe," \u2014 "),sz=n(XPe,"A",{href:!0});var $Mt=s(sz);kWo=r($Mt,"IBertForMultipleChoice"),$Mt.forEach(t),SWo=r(XPe," (I-BERT model)"),XPe.forEach(t),RWo=i(ee),sF=n(ee,"LI",{});var zPe=s(sF);uue=n(zPe,"STRONG",{});var kMt=s(uue);PWo=r(kMt,"longformer"),kMt.forEach(t),BWo=r(zPe," \u2014 "),lz=n(zPe,"A",{href:!0});var SMt=s(lz);IWo=r(SMt,"LongformerForMultipleChoice"),SMt.forEach(t),NWo=r(zPe," (Longformer model)"),zPe.forEach(t),qWo=i(ee),lF=n(ee,"LI",{});var QPe=s(lF);bue=n(QPe,"STRONG",{});var RMt=s(bue);jWo=r(RMt,"megatron-bert"),RMt.forEach(t),DWo=r(QPe," \u2014 "),iz=n(QPe,"A",{href:!0});var PMt=s(iz);GWo=r(PMt,"MegatronBertForMultipleChoice"),PMt.forEach(t),OWo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),VWo=i(ee),iF=n(ee,"LI",{});var WPe=s(iF);vue=n(WPe,"STRONG",{});var BMt=s(vue);XWo=r(BMt,"mobilebert"),BMt.forEach(t),zWo=r(WPe," \u2014 "),dz=n(WPe,"A",{href:!0});var IMt=s(dz);QWo=r(IMt,"MobileBertForMultipleChoice"),IMt.forEach(t),WWo=r(WPe," (MobileBERT model)"),WPe.forEach(t),HWo=i(ee),dF=n(ee,"LI",{});var HPe=s(dF);Fue=n(HPe,"STRONG",{});var NMt=s(Fue);UWo=r(NMt,"mpnet"),NMt.forEach(t),JWo=r(HPe," \u2014 "),cz=n(HPe,"A",{href:!0});var qMt=s(cz);YWo=r(qMt,"MPNetForMultipleChoice"),qMt.forEach(t),KWo=r(HPe," (MPNet model)"),HPe.forEach(t),ZWo=i(ee),cF=n(ee,"LI",{});var UPe=s(cF);Tue=n(UPe,"STRONG",{});var jMt=s(Tue);eHo=r(jMt,"nezha"),jMt.forEach(t),oHo=r(UPe," \u2014 "),fz=n(UPe,"A",{href:!0});var DMt=s(fz);rHo=r(DMt,"NezhaForMultipleChoice"),DMt.forEach(t),tHo=r(UPe," (Nezha model)"),UPe.forEach(t),aHo=i(ee),fF=n(ee,"LI",{});var JPe=s(fF);Mue=n(JPe,"STRONG",{});var GMt=s(Mue);nHo=r(GMt,"nystromformer"),GMt.forEach(t),sHo=r(JPe," \u2014 "),mz=n(JPe,"A",{href:!0});var OMt=s(mz);lHo=r(OMt,"NystromformerForMultipleChoice"),OMt.forEach(t),iHo=r(JPe," (Nystr\xF6mformer model)"),JPe.forEach(t),dHo=i(ee),mF=n(ee,"LI",{});var YPe=s(mF);Eue=n(YPe,"STRONG",{});var VMt=s(Eue);cHo=r(VMt,"qdqbert"),VMt.forEach(t),fHo=r(YPe," \u2014 "),gz=n(YPe,"A",{href:!0});var XMt=s(gz);mHo=r(XMt,"QDQBertForMultipleChoice"),XMt.forEach(t),gHo=r(YPe," (QDQBert model)"),YPe.forEach(t),hHo=i(ee),gF=n(ee,"LI",{});var KPe=s(gF);Cue=n(KPe,"STRONG",{});var zMt=s(Cue);pHo=r(zMt,"rembert"),zMt.forEach(t),_Ho=r(KPe," \u2014 "),hz=n(KPe,"A",{href:!0});var QMt=s(hz);uHo=r(QMt,"RemBertForMultipleChoice"),QMt.forEach(t),bHo=r(KPe," (RemBERT model)"),KPe.forEach(t),vHo=i(ee),hF=n(ee,"LI",{});var ZPe=s(hF);wue=n(ZPe,"STRONG",{});var WMt=s(wue);FHo=r(WMt,"roberta"),WMt.forEach(t),THo=r(ZPe," \u2014 "),pz=n(ZPe,"A",{href:!0});var HMt=s(pz);MHo=r(HMt,"RobertaForMultipleChoice"),HMt.forEach(t),EHo=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),CHo=i(ee),pF=n(ee,"LI",{});var eBe=s(pF);Aue=n(eBe,"STRONG",{});var UMt=s(Aue);wHo=r(UMt,"roformer"),UMt.forEach(t),AHo=r(eBe," \u2014 "),_z=n(eBe,"A",{href:!0});var JMt=s(_z);LHo=r(JMt,"RoFormerForMultipleChoice"),JMt.forEach(t),yHo=r(eBe," (RoFormer model)"),eBe.forEach(t),xHo=i(ee),_F=n(ee,"LI",{});var oBe=s(_F);Lue=n(oBe,"STRONG",{});var YMt=s(Lue);$Ho=r(YMt,"squeezebert"),YMt.forEach(t),kHo=r(oBe," \u2014 "),uz=n(oBe,"A",{href:!0});var KMt=s(uz);SHo=r(KMt,"SqueezeBertForMultipleChoice"),KMt.forEach(t),RHo=r(oBe," (SqueezeBERT model)"),oBe.forEach(t),PHo=i(ee),uF=n(ee,"LI",{});var rBe=s(uF);yue=n(rBe,"STRONG",{});var ZMt=s(yue);BHo=r(ZMt,"xlm"),ZMt.forEach(t),IHo=r(rBe," \u2014 "),bz=n(rBe,"A",{href:!0});var e4t=s(bz);NHo=r(e4t,"XLMForMultipleChoice"),e4t.forEach(t),qHo=r(rBe," (XLM model)"),rBe.forEach(t),jHo=i(ee),bF=n(ee,"LI",{});var tBe=s(bF);xue=n(tBe,"STRONG",{});var o4t=s(xue);DHo=r(o4t,"xlm-roberta"),o4t.forEach(t),GHo=r(tBe," \u2014 "),vz=n(tBe,"A",{href:!0});var r4t=s(vz);OHo=r(r4t,"XLMRobertaForMultipleChoice"),r4t.forEach(t),VHo=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),XHo=i(ee),vF=n(ee,"LI",{});var aBe=s(vF);$ue=n(aBe,"STRONG",{});var t4t=s($ue);zHo=r(t4t,"xlm-roberta-xl"),t4t.forEach(t),QHo=r(aBe," \u2014 "),Fz=n(aBe,"A",{href:!0});var a4t=s(Fz);WHo=r(a4t,"XLMRobertaXLForMultipleChoice"),a4t.forEach(t),HHo=r(aBe," (XLM-RoBERTa-XL model)"),aBe.forEach(t),UHo=i(ee),FF=n(ee,"LI",{});var nBe=s(FF);kue=n(nBe,"STRONG",{});var n4t=s(kue);JHo=r(n4t,"xlnet"),n4t.forEach(t),YHo=r(nBe," \u2014 "),Tz=n(nBe,"A",{href:!0});var s4t=s(Tz);KHo=r(s4t,"XLNetForMultipleChoice"),s4t.forEach(t),ZHo=r(nBe," (XLNet model)"),nBe.forEach(t),eUo=i(ee),TF=n(ee,"LI",{});var sBe=s(TF);Sue=n(sBe,"STRONG",{});var l4t=s(Sue);oUo=r(l4t,"yoso"),l4t.forEach(t),rUo=r(sBe," \u2014 "),Mz=n(sBe,"A",{href:!0});var i4t=s(Mz);tUo=r(i4t,"YosoForMultipleChoice"),i4t.forEach(t),aUo=r(sBe," (YOSO model)"),sBe.forEach(t),ee.forEach(t),nUo=i(ma),MF=n(ma,"P",{});var lBe=s(MF);sUo=r(lBe,"The model is set in evaluation mode by default using "),Rue=n(lBe,"CODE",{});var d4t=s(Rue);lUo=r(d4t,"model.eval()"),d4t.forEach(t),iUo=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(lBe,"CODE",{});var c4t=s(Pue);dUo=r(c4t,"model.train()"),c4t.forEach(t),lBe.forEach(t),cUo=i(ma),T(EF.$$.fragment,ma),ma.forEach(t),ll.forEach(t),LXe=i(f),ld=n(f,"H2",{class:!0});var RQe=s(ld);CF=n(RQe,"A",{id:!0,class:!0,href:!0});var f4t=s(CF);Bue=n(f4t,"SPAN",{});var m4t=s(Bue);T(my.$$.fragment,m4t),m4t.forEach(t),f4t.forEach(t),fUo=i(RQe),Iue=n(RQe,"SPAN",{});var g4t=s(Iue);mUo=r(g4t,"AutoModelForNextSentencePrediction"),g4t.forEach(t),RQe.forEach(t),yXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(gy.$$.fragment,il),gUo=i(il),id=n(il,"P",{});var Vre=s(id);hUo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ez=n(Vre,"A",{href:!0});var h4t=s(Ez);pUo=r(h4t,"from_pretrained()"),h4t.forEach(t),_Uo=r(Vre," class method or the "),Cz=n(Vre,"A",{href:!0});var p4t=s(Cz);uUo=r(p4t,"from_config()"),p4t.forEach(t),bUo=r(Vre,` class
method.`),Vre.forEach(t),vUo=i(il),hy=n(il,"P",{});var PQe=s(hy);FUo=r(PQe,"This class cannot be instantiated directly using "),Nue=n(PQe,"CODE",{});var _4t=s(Nue);TUo=r(_4t,"__init__()"),_4t.forEach(t),MUo=r(PQe," (throws an error)."),PQe.forEach(t),EUo=i(il),ht=n(il,"DIV",{class:!0});var Ew=s(ht);T(py.$$.fragment,Ew),CUo=i(Ew),que=n(Ew,"P",{});var u4t=s(que);wUo=r(u4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u4t.forEach(t),AUo=i(Ew),dd=n(Ew,"P",{});var Xre=s(dd);LUo=r(Xre,`Note:
Loading a model from its configuration file does `),jue=n(Xre,"STRONG",{});var b4t=s(jue);yUo=r(b4t,"not"),b4t.forEach(t),xUo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(Xre,"A",{href:!0});var v4t=s(wz);$Uo=r(v4t,"from_pretrained()"),v4t.forEach(t),kUo=r(Xre," to load the model weights."),Xre.forEach(t),SUo=i(Ew),T(wF.$$.fragment,Ew),Ew.forEach(t),RUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),PUo=i(ga),Due=n(ga,"P",{});var F4t=s(Due);BUo=r(F4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F4t.forEach(t),IUo=i(ga),Va=n(ga,"P",{});var Cw=s(Va);NUo=r(Cw,"The model class to instantiate is selected based on the "),Gue=n(Cw,"CODE",{});var T4t=s(Gue);qUo=r(T4t,"model_type"),T4t.forEach(t),jUo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Oue=n(Cw,"CODE",{});var M4t=s(Oue);DUo=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),GUo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(Cw,"CODE",{});var E4t=s(Vue);OUo=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),VUo=r(Cw,":"),Cw.forEach(t),XUo=i(ga),No=n(ga,"UL",{});var ha=s(No);AF=n(ha,"LI",{});var iBe=s(AF);Xue=n(iBe,"STRONG",{});var C4t=s(Xue);zUo=r(C4t,"bert"),C4t.forEach(t),QUo=r(iBe," \u2014 "),Az=n(iBe,"A",{href:!0});var w4t=s(Az);WUo=r(w4t,"BertForNextSentencePrediction"),w4t.forEach(t),HUo=r(iBe," (BERT model)"),iBe.forEach(t),UUo=i(ha),LF=n(ha,"LI",{});var dBe=s(LF);zue=n(dBe,"STRONG",{});var A4t=s(zue);JUo=r(A4t,"fnet"),A4t.forEach(t),YUo=r(dBe," \u2014 "),Lz=n(dBe,"A",{href:!0});var L4t=s(Lz);KUo=r(L4t,"FNetForNextSentencePrediction"),L4t.forEach(t),ZUo=r(dBe," (FNet model)"),dBe.forEach(t),eJo=i(ha),yF=n(ha,"LI",{});var cBe=s(yF);Que=n(cBe,"STRONG",{});var y4t=s(Que);oJo=r(y4t,"megatron-bert"),y4t.forEach(t),rJo=r(cBe," \u2014 "),yz=n(cBe,"A",{href:!0});var x4t=s(yz);tJo=r(x4t,"MegatronBertForNextSentencePrediction"),x4t.forEach(t),aJo=r(cBe," (Megatron-BERT model)"),cBe.forEach(t),nJo=i(ha),xF=n(ha,"LI",{});var fBe=s(xF);Wue=n(fBe,"STRONG",{});var $4t=s(Wue);sJo=r($4t,"mobilebert"),$4t.forEach(t),lJo=r(fBe," \u2014 "),xz=n(fBe,"A",{href:!0});var k4t=s(xz);iJo=r(k4t,"MobileBertForNextSentencePrediction"),k4t.forEach(t),dJo=r(fBe," (MobileBERT model)"),fBe.forEach(t),cJo=i(ha),$F=n(ha,"LI",{});var mBe=s($F);Hue=n(mBe,"STRONG",{});var S4t=s(Hue);fJo=r(S4t,"nezha"),S4t.forEach(t),mJo=r(mBe," \u2014 "),$z=n(mBe,"A",{href:!0});var R4t=s($z);gJo=r(R4t,"NezhaForNextSentencePrediction"),R4t.forEach(t),hJo=r(mBe," (Nezha model)"),mBe.forEach(t),pJo=i(ha),kF=n(ha,"LI",{});var gBe=s(kF);Uue=n(gBe,"STRONG",{});var P4t=s(Uue);_Jo=r(P4t,"qdqbert"),P4t.forEach(t),uJo=r(gBe," \u2014 "),kz=n(gBe,"A",{href:!0});var B4t=s(kz);bJo=r(B4t,"QDQBertForNextSentencePrediction"),B4t.forEach(t),vJo=r(gBe," (QDQBert model)"),gBe.forEach(t),ha.forEach(t),FJo=i(ga),SF=n(ga,"P",{});var hBe=s(SF);TJo=r(hBe,"The model is set in evaluation mode by default using "),Jue=n(hBe,"CODE",{});var I4t=s(Jue);MJo=r(I4t,"model.eval()"),I4t.forEach(t),EJo=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(hBe,"CODE",{});var N4t=s(Yue);CJo=r(N4t,"model.train()"),N4t.forEach(t),hBe.forEach(t),wJo=i(ga),T(RF.$$.fragment,ga),ga.forEach(t),il.forEach(t),xXe=i(f),cd=n(f,"H2",{class:!0});var BQe=s(cd);PF=n(BQe,"A",{id:!0,class:!0,href:!0});var q4t=s(PF);Kue=n(q4t,"SPAN",{});var j4t=s(Kue);T(uy.$$.fragment,j4t),j4t.forEach(t),q4t.forEach(t),AJo=i(BQe),Zue=n(BQe,"SPAN",{});var D4t=s(Zue);LJo=r(D4t,"AutoModelForTokenClassification"),D4t.forEach(t),BQe.forEach(t),$Xe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(by.$$.fragment,dl),yJo=i(dl),fd=n(dl,"P",{});var zre=s(fd);xJo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Sz=n(zre,"A",{href:!0});var G4t=s(Sz);$Jo=r(G4t,"from_pretrained()"),G4t.forEach(t),kJo=r(zre," class method or the "),Rz=n(zre,"A",{href:!0});var O4t=s(Rz);SJo=r(O4t,"from_config()"),O4t.forEach(t),RJo=r(zre,` class
method.`),zre.forEach(t),PJo=i(dl),vy=n(dl,"P",{});var IQe=s(vy);BJo=r(IQe,"This class cannot be instantiated directly using "),e2e=n(IQe,"CODE",{});var V4t=s(e2e);IJo=r(V4t,"__init__()"),V4t.forEach(t),NJo=r(IQe," (throws an error)."),IQe.forEach(t),qJo=i(dl),pt=n(dl,"DIV",{class:!0});var ww=s(pt);T(Fy.$$.fragment,ww),jJo=i(ww),o2e=n(ww,"P",{});var X4t=s(o2e);DJo=r(X4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X4t.forEach(t),GJo=i(ww),md=n(ww,"P",{});var Qre=s(md);OJo=r(Qre,`Note:
Loading a model from its configuration file does `),r2e=n(Qre,"STRONG",{});var z4t=s(r2e);VJo=r(z4t,"not"),z4t.forEach(t),XJo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(Qre,"A",{href:!0});var Q4t=s(Pz);zJo=r(Q4t,"from_pretrained()"),Q4t.forEach(t),QJo=r(Qre," to load the model weights."),Qre.forEach(t),WJo=i(ww),T(BF.$$.fragment,ww),ww.forEach(t),HJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(Ty.$$.fragment,pa),UJo=i(pa),t2e=n(pa,"P",{});var W4t=s(t2e);JJo=r(W4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W4t.forEach(t),YJo=i(pa),Xa=n(pa,"P",{});var Aw=s(Xa);KJo=r(Aw,"The model class to instantiate is selected based on the "),a2e=n(Aw,"CODE",{});var H4t=s(a2e);ZJo=r(H4t,"model_type"),H4t.forEach(t),eYo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),n2e=n(Aw,"CODE",{});var U4t=s(n2e);oYo=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),rYo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(Aw,"CODE",{});var J4t=s(s2e);tYo=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),aYo=r(Aw,":"),Aw.forEach(t),nYo=i(pa),U=n(pa,"UL",{});var J=s(U);IF=n(J,"LI",{});var pBe=s(IF);l2e=n(pBe,"STRONG",{});var Y4t=s(l2e);sYo=r(Y4t,"albert"),Y4t.forEach(t),lYo=r(pBe," \u2014 "),Bz=n(pBe,"A",{href:!0});var K4t=s(Bz);iYo=r(K4t,"AlbertForTokenClassification"),K4t.forEach(t),dYo=r(pBe," (ALBERT model)"),pBe.forEach(t),cYo=i(J),NF=n(J,"LI",{});var _Be=s(NF);i2e=n(_Be,"STRONG",{});var Z4t=s(i2e);fYo=r(Z4t,"bert"),Z4t.forEach(t),mYo=r(_Be," \u2014 "),Iz=n(_Be,"A",{href:!0});var eEt=s(Iz);gYo=r(eEt,"BertForTokenClassification"),eEt.forEach(t),hYo=r(_Be," (BERT model)"),_Be.forEach(t),pYo=i(J),qF=n(J,"LI",{});var uBe=s(qF);d2e=n(uBe,"STRONG",{});var oEt=s(d2e);_Yo=r(oEt,"big_bird"),oEt.forEach(t),uYo=r(uBe," \u2014 "),Nz=n(uBe,"A",{href:!0});var rEt=s(Nz);bYo=r(rEt,"BigBirdForTokenClassification"),rEt.forEach(t),vYo=r(uBe," (BigBird model)"),uBe.forEach(t),FYo=i(J),jF=n(J,"LI",{});var bBe=s(jF);c2e=n(bBe,"STRONG",{});var tEt=s(c2e);TYo=r(tEt,"bloom"),tEt.forEach(t),MYo=r(bBe," \u2014 "),qz=n(bBe,"A",{href:!0});var aEt=s(qz);EYo=r(aEt,"BloomForTokenClassification"),aEt.forEach(t),CYo=r(bBe," (BLOOM model)"),bBe.forEach(t),wYo=i(J),DF=n(J,"LI",{});var vBe=s(DF);f2e=n(vBe,"STRONG",{});var nEt=s(f2e);AYo=r(nEt,"camembert"),nEt.forEach(t),LYo=r(vBe," \u2014 "),jz=n(vBe,"A",{href:!0});var sEt=s(jz);yYo=r(sEt,"CamembertForTokenClassification"),sEt.forEach(t),xYo=r(vBe," (CamemBERT model)"),vBe.forEach(t),$Yo=i(J),GF=n(J,"LI",{});var FBe=s(GF);m2e=n(FBe,"STRONG",{});var lEt=s(m2e);kYo=r(lEt,"canine"),lEt.forEach(t),SYo=r(FBe," \u2014 "),Dz=n(FBe,"A",{href:!0});var iEt=s(Dz);RYo=r(iEt,"CanineForTokenClassification"),iEt.forEach(t),PYo=r(FBe," (CANINE model)"),FBe.forEach(t),BYo=i(J),OF=n(J,"LI",{});var TBe=s(OF);g2e=n(TBe,"STRONG",{});var dEt=s(g2e);IYo=r(dEt,"convbert"),dEt.forEach(t),NYo=r(TBe," \u2014 "),Gz=n(TBe,"A",{href:!0});var cEt=s(Gz);qYo=r(cEt,"ConvBertForTokenClassification"),cEt.forEach(t),jYo=r(TBe," (ConvBERT model)"),TBe.forEach(t),DYo=i(J),VF=n(J,"LI",{});var MBe=s(VF);h2e=n(MBe,"STRONG",{});var fEt=s(h2e);GYo=r(fEt,"data2vec-text"),fEt.forEach(t),OYo=r(MBe," \u2014 "),Oz=n(MBe,"A",{href:!0});var mEt=s(Oz);VYo=r(mEt,"Data2VecTextForTokenClassification"),mEt.forEach(t),XYo=r(MBe," (Data2VecText model)"),MBe.forEach(t),zYo=i(J),XF=n(J,"LI",{});var EBe=s(XF);p2e=n(EBe,"STRONG",{});var gEt=s(p2e);QYo=r(gEt,"deberta"),gEt.forEach(t),WYo=r(EBe," \u2014 "),Vz=n(EBe,"A",{href:!0});var hEt=s(Vz);HYo=r(hEt,"DebertaForTokenClassification"),hEt.forEach(t),UYo=r(EBe," (DeBERTa model)"),EBe.forEach(t),JYo=i(J),zF=n(J,"LI",{});var CBe=s(zF);_2e=n(CBe,"STRONG",{});var pEt=s(_2e);YYo=r(pEt,"deberta-v2"),pEt.forEach(t),KYo=r(CBe," \u2014 "),Xz=n(CBe,"A",{href:!0});var _Et=s(Xz);ZYo=r(_Et,"DebertaV2ForTokenClassification"),_Et.forEach(t),eKo=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),oKo=i(J),QF=n(J,"LI",{});var wBe=s(QF);u2e=n(wBe,"STRONG",{});var uEt=s(u2e);rKo=r(uEt,"distilbert"),uEt.forEach(t),tKo=r(wBe," \u2014 "),zz=n(wBe,"A",{href:!0});var bEt=s(zz);aKo=r(bEt,"DistilBertForTokenClassification"),bEt.forEach(t),nKo=r(wBe," (DistilBERT model)"),wBe.forEach(t),sKo=i(J),WF=n(J,"LI",{});var ABe=s(WF);b2e=n(ABe,"STRONG",{});var vEt=s(b2e);lKo=r(vEt,"electra"),vEt.forEach(t),iKo=r(ABe," \u2014 "),Qz=n(ABe,"A",{href:!0});var FEt=s(Qz);dKo=r(FEt,"ElectraForTokenClassification"),FEt.forEach(t),cKo=r(ABe," (ELECTRA model)"),ABe.forEach(t),fKo=i(J),HF=n(J,"LI",{});var LBe=s(HF);v2e=n(LBe,"STRONG",{});var TEt=s(v2e);mKo=r(TEt,"flaubert"),TEt.forEach(t),gKo=r(LBe," \u2014 "),Wz=n(LBe,"A",{href:!0});var MEt=s(Wz);hKo=r(MEt,"FlaubertForTokenClassification"),MEt.forEach(t),pKo=r(LBe," (FlauBERT model)"),LBe.forEach(t),_Ko=i(J),UF=n(J,"LI",{});var yBe=s(UF);F2e=n(yBe,"STRONG",{});var EEt=s(F2e);uKo=r(EEt,"fnet"),EEt.forEach(t),bKo=r(yBe," \u2014 "),Hz=n(yBe,"A",{href:!0});var CEt=s(Hz);vKo=r(CEt,"FNetForTokenClassification"),CEt.forEach(t),FKo=r(yBe," (FNet model)"),yBe.forEach(t),TKo=i(J),JF=n(J,"LI",{});var xBe=s(JF);T2e=n(xBe,"STRONG",{});var wEt=s(T2e);MKo=r(wEt,"funnel"),wEt.forEach(t),EKo=r(xBe," \u2014 "),Uz=n(xBe,"A",{href:!0});var AEt=s(Uz);CKo=r(AEt,"FunnelForTokenClassification"),AEt.forEach(t),wKo=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),AKo=i(J),YF=n(J,"LI",{});var $Be=s(YF);M2e=n($Be,"STRONG",{});var LEt=s(M2e);LKo=r(LEt,"gpt2"),LEt.forEach(t),yKo=r($Be," \u2014 "),Jz=n($Be,"A",{href:!0});var yEt=s(Jz);xKo=r(yEt,"GPT2ForTokenClassification"),yEt.forEach(t),$Ko=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),kKo=i(J),KF=n(J,"LI",{});var kBe=s(KF);E2e=n(kBe,"STRONG",{});var xEt=s(E2e);SKo=r(xEt,"ibert"),xEt.forEach(t),RKo=r(kBe," \u2014 "),Yz=n(kBe,"A",{href:!0});var $Et=s(Yz);PKo=r($Et,"IBertForTokenClassification"),$Et.forEach(t),BKo=r(kBe," (I-BERT model)"),kBe.forEach(t),IKo=i(J),ZF=n(J,"LI",{});var SBe=s(ZF);C2e=n(SBe,"STRONG",{});var kEt=s(C2e);NKo=r(kEt,"layoutlm"),kEt.forEach(t),qKo=r(SBe," \u2014 "),Kz=n(SBe,"A",{href:!0});var SEt=s(Kz);jKo=r(SEt,"LayoutLMForTokenClassification"),SEt.forEach(t),DKo=r(SBe," (LayoutLM model)"),SBe.forEach(t),GKo=i(J),e6=n(J,"LI",{});var RBe=s(e6);w2e=n(RBe,"STRONG",{});var REt=s(w2e);OKo=r(REt,"layoutlmv2"),REt.forEach(t),VKo=r(RBe," \u2014 "),Zz=n(RBe,"A",{href:!0});var PEt=s(Zz);XKo=r(PEt,"LayoutLMv2ForTokenClassification"),PEt.forEach(t),zKo=r(RBe," (LayoutLMv2 model)"),RBe.forEach(t),QKo=i(J),o6=n(J,"LI",{});var PBe=s(o6);A2e=n(PBe,"STRONG",{});var BEt=s(A2e);WKo=r(BEt,"layoutlmv3"),BEt.forEach(t),HKo=r(PBe," \u2014 "),eQ=n(PBe,"A",{href:!0});var IEt=s(eQ);UKo=r(IEt,"LayoutLMv3ForTokenClassification"),IEt.forEach(t),JKo=r(PBe," (LayoutLMv3 model)"),PBe.forEach(t),YKo=i(J),r6=n(J,"LI",{});var BBe=s(r6);L2e=n(BBe,"STRONG",{});var NEt=s(L2e);KKo=r(NEt,"longformer"),NEt.forEach(t),ZKo=r(BBe," \u2014 "),oQ=n(BBe,"A",{href:!0});var qEt=s(oQ);eZo=r(qEt,"LongformerForTokenClassification"),qEt.forEach(t),oZo=r(BBe," (Longformer model)"),BBe.forEach(t),rZo=i(J),t6=n(J,"LI",{});var IBe=s(t6);y2e=n(IBe,"STRONG",{});var jEt=s(y2e);tZo=r(jEt,"megatron-bert"),jEt.forEach(t),aZo=r(IBe," \u2014 "),rQ=n(IBe,"A",{href:!0});var DEt=s(rQ);nZo=r(DEt,"MegatronBertForTokenClassification"),DEt.forEach(t),sZo=r(IBe," (Megatron-BERT model)"),IBe.forEach(t),lZo=i(J),a6=n(J,"LI",{});var NBe=s(a6);x2e=n(NBe,"STRONG",{});var GEt=s(x2e);iZo=r(GEt,"mobilebert"),GEt.forEach(t),dZo=r(NBe," \u2014 "),tQ=n(NBe,"A",{href:!0});var OEt=s(tQ);cZo=r(OEt,"MobileBertForTokenClassification"),OEt.forEach(t),fZo=r(NBe," (MobileBERT model)"),NBe.forEach(t),mZo=i(J),n6=n(J,"LI",{});var qBe=s(n6);$2e=n(qBe,"STRONG",{});var VEt=s($2e);gZo=r(VEt,"mpnet"),VEt.forEach(t),hZo=r(qBe," \u2014 "),aQ=n(qBe,"A",{href:!0});var XEt=s(aQ);pZo=r(XEt,"MPNetForTokenClassification"),XEt.forEach(t),_Zo=r(qBe," (MPNet model)"),qBe.forEach(t),uZo=i(J),s6=n(J,"LI",{});var jBe=s(s6);k2e=n(jBe,"STRONG",{});var zEt=s(k2e);bZo=r(zEt,"nezha"),zEt.forEach(t),vZo=r(jBe," \u2014 "),nQ=n(jBe,"A",{href:!0});var QEt=s(nQ);FZo=r(QEt,"NezhaForTokenClassification"),QEt.forEach(t),TZo=r(jBe," (Nezha model)"),jBe.forEach(t),MZo=i(J),l6=n(J,"LI",{});var DBe=s(l6);S2e=n(DBe,"STRONG",{});var WEt=s(S2e);EZo=r(WEt,"nystromformer"),WEt.forEach(t),CZo=r(DBe," \u2014 "),sQ=n(DBe,"A",{href:!0});var HEt=s(sQ);wZo=r(HEt,"NystromformerForTokenClassification"),HEt.forEach(t),AZo=r(DBe," (Nystr\xF6mformer model)"),DBe.forEach(t),LZo=i(J),i6=n(J,"LI",{});var GBe=s(i6);R2e=n(GBe,"STRONG",{});var UEt=s(R2e);yZo=r(UEt,"qdqbert"),UEt.forEach(t),xZo=r(GBe," \u2014 "),lQ=n(GBe,"A",{href:!0});var JEt=s(lQ);$Zo=r(JEt,"QDQBertForTokenClassification"),JEt.forEach(t),kZo=r(GBe," (QDQBert model)"),GBe.forEach(t),SZo=i(J),d6=n(J,"LI",{});var OBe=s(d6);P2e=n(OBe,"STRONG",{});var YEt=s(P2e);RZo=r(YEt,"rembert"),YEt.forEach(t),PZo=r(OBe," \u2014 "),iQ=n(OBe,"A",{href:!0});var KEt=s(iQ);BZo=r(KEt,"RemBertForTokenClassification"),KEt.forEach(t),IZo=r(OBe," (RemBERT model)"),OBe.forEach(t),NZo=i(J),c6=n(J,"LI",{});var VBe=s(c6);B2e=n(VBe,"STRONG",{});var ZEt=s(B2e);qZo=r(ZEt,"roberta"),ZEt.forEach(t),jZo=r(VBe," \u2014 "),dQ=n(VBe,"A",{href:!0});var eCt=s(dQ);DZo=r(eCt,"RobertaForTokenClassification"),eCt.forEach(t),GZo=r(VBe," (RoBERTa model)"),VBe.forEach(t),OZo=i(J),f6=n(J,"LI",{});var XBe=s(f6);I2e=n(XBe,"STRONG",{});var oCt=s(I2e);VZo=r(oCt,"roformer"),oCt.forEach(t),XZo=r(XBe," \u2014 "),cQ=n(XBe,"A",{href:!0});var rCt=s(cQ);zZo=r(rCt,"RoFormerForTokenClassification"),rCt.forEach(t),QZo=r(XBe," (RoFormer model)"),XBe.forEach(t),WZo=i(J),m6=n(J,"LI",{});var zBe=s(m6);N2e=n(zBe,"STRONG",{});var tCt=s(N2e);HZo=r(tCt,"squeezebert"),tCt.forEach(t),UZo=r(zBe," \u2014 "),fQ=n(zBe,"A",{href:!0});var aCt=s(fQ);JZo=r(aCt,"SqueezeBertForTokenClassification"),aCt.forEach(t),YZo=r(zBe," (SqueezeBERT model)"),zBe.forEach(t),KZo=i(J),g6=n(J,"LI",{});var QBe=s(g6);q2e=n(QBe,"STRONG",{});var nCt=s(q2e);ZZo=r(nCt,"xlm"),nCt.forEach(t),eer=r(QBe," \u2014 "),mQ=n(QBe,"A",{href:!0});var sCt=s(mQ);oer=r(sCt,"XLMForTokenClassification"),sCt.forEach(t),rer=r(QBe," (XLM model)"),QBe.forEach(t),ter=i(J),h6=n(J,"LI",{});var WBe=s(h6);j2e=n(WBe,"STRONG",{});var lCt=s(j2e);aer=r(lCt,"xlm-roberta"),lCt.forEach(t),ner=r(WBe," \u2014 "),gQ=n(WBe,"A",{href:!0});var iCt=s(gQ);ser=r(iCt,"XLMRobertaForTokenClassification"),iCt.forEach(t),ler=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),ier=i(J),p6=n(J,"LI",{});var HBe=s(p6);D2e=n(HBe,"STRONG",{});var dCt=s(D2e);der=r(dCt,"xlm-roberta-xl"),dCt.forEach(t),cer=r(HBe," \u2014 "),hQ=n(HBe,"A",{href:!0});var cCt=s(hQ);fer=r(cCt,"XLMRobertaXLForTokenClassification"),cCt.forEach(t),mer=r(HBe," (XLM-RoBERTa-XL model)"),HBe.forEach(t),ger=i(J),_6=n(J,"LI",{});var UBe=s(_6);G2e=n(UBe,"STRONG",{});var fCt=s(G2e);her=r(fCt,"xlnet"),fCt.forEach(t),per=r(UBe," \u2014 "),pQ=n(UBe,"A",{href:!0});var mCt=s(pQ);_er=r(mCt,"XLNetForTokenClassification"),mCt.forEach(t),uer=r(UBe," (XLNet model)"),UBe.forEach(t),ber=i(J),u6=n(J,"LI",{});var JBe=s(u6);O2e=n(JBe,"STRONG",{});var gCt=s(O2e);ver=r(gCt,"yoso"),gCt.forEach(t),Fer=r(JBe," \u2014 "),_Q=n(JBe,"A",{href:!0});var hCt=s(_Q);Ter=r(hCt,"YosoForTokenClassification"),hCt.forEach(t),Mer=r(JBe," (YOSO model)"),JBe.forEach(t),J.forEach(t),Eer=i(pa),b6=n(pa,"P",{});var YBe=s(b6);Cer=r(YBe,"The model is set in evaluation mode by default using "),V2e=n(YBe,"CODE",{});var pCt=s(V2e);wer=r(pCt,"model.eval()"),pCt.forEach(t),Aer=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X2e=n(YBe,"CODE",{});var _Ct=s(X2e);Ler=r(_Ct,"model.train()"),_Ct.forEach(t),YBe.forEach(t),yer=i(pa),T(v6.$$.fragment,pa),pa.forEach(t),dl.forEach(t),kXe=i(f),gd=n(f,"H2",{class:!0});var NQe=s(gd);F6=n(NQe,"A",{id:!0,class:!0,href:!0});var uCt=s(F6);z2e=n(uCt,"SPAN",{});var bCt=s(z2e);T(My.$$.fragment,bCt),bCt.forEach(t),uCt.forEach(t),xer=i(NQe),Q2e=n(NQe,"SPAN",{});var vCt=s(Q2e);$er=r(vCt,"AutoModelForQuestionAnswering"),vCt.forEach(t),NQe.forEach(t),SXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(Ey.$$.fragment,cl),ker=i(cl),hd=n(cl,"P",{});var Wre=s(hd);Ser=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=n(Wre,"A",{href:!0});var FCt=s(uQ);Rer=r(FCt,"from_pretrained()"),FCt.forEach(t),Per=r(Wre," class method or the "),bQ=n(Wre,"A",{href:!0});var TCt=s(bQ);Ber=r(TCt,"from_config()"),TCt.forEach(t),Ier=r(Wre,` class
method.`),Wre.forEach(t),Ner=i(cl),Cy=n(cl,"P",{});var qQe=s(Cy);qer=r(qQe,"This class cannot be instantiated directly using "),W2e=n(qQe,"CODE",{});var MCt=s(W2e);jer=r(MCt,"__init__()"),MCt.forEach(t),Der=r(qQe," (throws an error)."),qQe.forEach(t),Ger=i(cl),_t=n(cl,"DIV",{class:!0});var Lw=s(_t);T(wy.$$.fragment,Lw),Oer=i(Lw),H2e=n(Lw,"P",{});var ECt=s(H2e);Ver=r(ECt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ECt.forEach(t),Xer=i(Lw),pd=n(Lw,"P",{});var Hre=s(pd);zer=r(Hre,`Note:
Loading a model from its configuration file does `),U2e=n(Hre,"STRONG",{});var CCt=s(U2e);Qer=r(CCt,"not"),CCt.forEach(t),Wer=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(Hre,"A",{href:!0});var wCt=s(vQ);Her=r(wCt,"from_pretrained()"),wCt.forEach(t),Uer=r(Hre," to load the model weights."),Hre.forEach(t),Jer=i(Lw),T(T6.$$.fragment,Lw),Lw.forEach(t),Yer=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),Ker=i(_a),J2e=n(_a,"P",{});var ACt=s(J2e);Zer=r(ACt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ACt.forEach(t),eor=i(_a),za=n(_a,"P",{});var yw=s(za);oor=r(yw,"The model class to instantiate is selected based on the "),Y2e=n(yw,"CODE",{});var LCt=s(Y2e);ror=r(LCt,"model_type"),LCt.forEach(t),tor=r(yw,` property of the config object (either
passed as an argument or loaded from `),K2e=n(yw,"CODE",{});var yCt=s(K2e);aor=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),nor=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(yw,"CODE",{});var xCt=s(Z2e);sor=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),lor=r(yw,":"),yw.forEach(t),ior=i(_a),V=n(_a,"UL",{});var X=s(V);M6=n(X,"LI",{});var KBe=s(M6);e1e=n(KBe,"STRONG",{});var $Ct=s(e1e);dor=r($Ct,"albert"),$Ct.forEach(t),cor=r(KBe," \u2014 "),FQ=n(KBe,"A",{href:!0});var kCt=s(FQ);mor=r(kCt,"AlbertForQuestionAnswering"),kCt.forEach(t),gor=r(KBe," (ALBERT model)"),KBe.forEach(t),hor=i(X),E6=n(X,"LI",{});var ZBe=s(E6);o1e=n(ZBe,"STRONG",{});var SCt=s(o1e);por=r(SCt,"bart"),SCt.forEach(t),_or=r(ZBe," \u2014 "),TQ=n(ZBe,"A",{href:!0});var RCt=s(TQ);uor=r(RCt,"BartForQuestionAnswering"),RCt.forEach(t),bor=r(ZBe," (BART model)"),ZBe.forEach(t),vor=i(X),C6=n(X,"LI",{});var eIe=s(C6);r1e=n(eIe,"STRONG",{});var PCt=s(r1e);For=r(PCt,"bert"),PCt.forEach(t),Tor=r(eIe," \u2014 "),MQ=n(eIe,"A",{href:!0});var BCt=s(MQ);Mor=r(BCt,"BertForQuestionAnswering"),BCt.forEach(t),Eor=r(eIe," (BERT model)"),eIe.forEach(t),Cor=i(X),w6=n(X,"LI",{});var oIe=s(w6);t1e=n(oIe,"STRONG",{});var ICt=s(t1e);wor=r(ICt,"big_bird"),ICt.forEach(t),Aor=r(oIe," \u2014 "),EQ=n(oIe,"A",{href:!0});var NCt=s(EQ);Lor=r(NCt,"BigBirdForQuestionAnswering"),NCt.forEach(t),yor=r(oIe," (BigBird model)"),oIe.forEach(t),xor=i(X),A6=n(X,"LI",{});var rIe=s(A6);a1e=n(rIe,"STRONG",{});var qCt=s(a1e);$or=r(qCt,"bigbird_pegasus"),qCt.forEach(t),kor=r(rIe," \u2014 "),CQ=n(rIe,"A",{href:!0});var jCt=s(CQ);Sor=r(jCt,"BigBirdPegasusForQuestionAnswering"),jCt.forEach(t),Ror=r(rIe," (BigBird-Pegasus model)"),rIe.forEach(t),Por=i(X),L6=n(X,"LI",{});var tIe=s(L6);n1e=n(tIe,"STRONG",{});var DCt=s(n1e);Bor=r(DCt,"camembert"),DCt.forEach(t),Ior=r(tIe," \u2014 "),wQ=n(tIe,"A",{href:!0});var GCt=s(wQ);Nor=r(GCt,"CamembertForQuestionAnswering"),GCt.forEach(t),qor=r(tIe," (CamemBERT model)"),tIe.forEach(t),jor=i(X),y6=n(X,"LI",{});var aIe=s(y6);s1e=n(aIe,"STRONG",{});var OCt=s(s1e);Dor=r(OCt,"canine"),OCt.forEach(t),Gor=r(aIe," \u2014 "),AQ=n(aIe,"A",{href:!0});var VCt=s(AQ);Oor=r(VCt,"CanineForQuestionAnswering"),VCt.forEach(t),Vor=r(aIe," (CANINE model)"),aIe.forEach(t),Xor=i(X),x6=n(X,"LI",{});var nIe=s(x6);l1e=n(nIe,"STRONG",{});var XCt=s(l1e);zor=r(XCt,"convbert"),XCt.forEach(t),Qor=r(nIe," \u2014 "),LQ=n(nIe,"A",{href:!0});var zCt=s(LQ);Wor=r(zCt,"ConvBertForQuestionAnswering"),zCt.forEach(t),Hor=r(nIe," (ConvBERT model)"),nIe.forEach(t),Uor=i(X),$6=n(X,"LI",{});var sIe=s($6);i1e=n(sIe,"STRONG",{});var QCt=s(i1e);Jor=r(QCt,"data2vec-text"),QCt.forEach(t),Yor=r(sIe," \u2014 "),yQ=n(sIe,"A",{href:!0});var WCt=s(yQ);Kor=r(WCt,"Data2VecTextForQuestionAnswering"),WCt.forEach(t),Zor=r(sIe," (Data2VecText model)"),sIe.forEach(t),err=i(X),k6=n(X,"LI",{});var lIe=s(k6);d1e=n(lIe,"STRONG",{});var HCt=s(d1e);orr=r(HCt,"deberta"),HCt.forEach(t),rrr=r(lIe," \u2014 "),xQ=n(lIe,"A",{href:!0});var UCt=s(xQ);trr=r(UCt,"DebertaForQuestionAnswering"),UCt.forEach(t),arr=r(lIe," (DeBERTa model)"),lIe.forEach(t),nrr=i(X),S6=n(X,"LI",{});var iIe=s(S6);c1e=n(iIe,"STRONG",{});var JCt=s(c1e);srr=r(JCt,"deberta-v2"),JCt.forEach(t),lrr=r(iIe," \u2014 "),$Q=n(iIe,"A",{href:!0});var YCt=s($Q);irr=r(YCt,"DebertaV2ForQuestionAnswering"),YCt.forEach(t),drr=r(iIe," (DeBERTa-v2 model)"),iIe.forEach(t),crr=i(X),R6=n(X,"LI",{});var dIe=s(R6);f1e=n(dIe,"STRONG",{});var KCt=s(f1e);frr=r(KCt,"distilbert"),KCt.forEach(t),mrr=r(dIe," \u2014 "),kQ=n(dIe,"A",{href:!0});var ZCt=s(kQ);grr=r(ZCt,"DistilBertForQuestionAnswering"),ZCt.forEach(t),hrr=r(dIe," (DistilBERT model)"),dIe.forEach(t),prr=i(X),P6=n(X,"LI",{});var cIe=s(P6);m1e=n(cIe,"STRONG",{});var e3t=s(m1e);_rr=r(e3t,"electra"),e3t.forEach(t),urr=r(cIe," \u2014 "),SQ=n(cIe,"A",{href:!0});var o3t=s(SQ);brr=r(o3t,"ElectraForQuestionAnswering"),o3t.forEach(t),vrr=r(cIe," (ELECTRA model)"),cIe.forEach(t),Frr=i(X),B6=n(X,"LI",{});var fIe=s(B6);g1e=n(fIe,"STRONG",{});var r3t=s(g1e);Trr=r(r3t,"flaubert"),r3t.forEach(t),Mrr=r(fIe," \u2014 "),RQ=n(fIe,"A",{href:!0});var t3t=s(RQ);Err=r(t3t,"FlaubertForQuestionAnsweringSimple"),t3t.forEach(t),Crr=r(fIe," (FlauBERT model)"),fIe.forEach(t),wrr=i(X),I6=n(X,"LI",{});var mIe=s(I6);h1e=n(mIe,"STRONG",{});var a3t=s(h1e);Arr=r(a3t,"fnet"),a3t.forEach(t),Lrr=r(mIe," \u2014 "),PQ=n(mIe,"A",{href:!0});var n3t=s(PQ);yrr=r(n3t,"FNetForQuestionAnswering"),n3t.forEach(t),xrr=r(mIe," (FNet model)"),mIe.forEach(t),$rr=i(X),N6=n(X,"LI",{});var gIe=s(N6);p1e=n(gIe,"STRONG",{});var s3t=s(p1e);krr=r(s3t,"funnel"),s3t.forEach(t),Srr=r(gIe," \u2014 "),BQ=n(gIe,"A",{href:!0});var l3t=s(BQ);Rrr=r(l3t,"FunnelForQuestionAnswering"),l3t.forEach(t),Prr=r(gIe," (Funnel Transformer model)"),gIe.forEach(t),Brr=i(X),q6=n(X,"LI",{});var hIe=s(q6);_1e=n(hIe,"STRONG",{});var i3t=s(_1e);Irr=r(i3t,"gptj"),i3t.forEach(t),Nrr=r(hIe," \u2014 "),IQ=n(hIe,"A",{href:!0});var d3t=s(IQ);qrr=r(d3t,"GPTJForQuestionAnswering"),d3t.forEach(t),jrr=r(hIe," (GPT-J model)"),hIe.forEach(t),Drr=i(X),j6=n(X,"LI",{});var pIe=s(j6);u1e=n(pIe,"STRONG",{});var c3t=s(u1e);Grr=r(c3t,"ibert"),c3t.forEach(t),Orr=r(pIe," \u2014 "),NQ=n(pIe,"A",{href:!0});var f3t=s(NQ);Vrr=r(f3t,"IBertForQuestionAnswering"),f3t.forEach(t),Xrr=r(pIe," (I-BERT model)"),pIe.forEach(t),zrr=i(X),D6=n(X,"LI",{});var _Ie=s(D6);b1e=n(_Ie,"STRONG",{});var m3t=s(b1e);Qrr=r(m3t,"layoutlmv2"),m3t.forEach(t),Wrr=r(_Ie," \u2014 "),qQ=n(_Ie,"A",{href:!0});var g3t=s(qQ);Hrr=r(g3t,"LayoutLMv2ForQuestionAnswering"),g3t.forEach(t),Urr=r(_Ie," (LayoutLMv2 model)"),_Ie.forEach(t),Jrr=i(X),G6=n(X,"LI",{});var uIe=s(G6);v1e=n(uIe,"STRONG",{});var h3t=s(v1e);Yrr=r(h3t,"layoutlmv3"),h3t.forEach(t),Krr=r(uIe," \u2014 "),jQ=n(uIe,"A",{href:!0});var p3t=s(jQ);Zrr=r(p3t,"LayoutLMv3ForQuestionAnswering"),p3t.forEach(t),etr=r(uIe," (LayoutLMv3 model)"),uIe.forEach(t),otr=i(X),O6=n(X,"LI",{});var bIe=s(O6);F1e=n(bIe,"STRONG",{});var _3t=s(F1e);rtr=r(_3t,"led"),_3t.forEach(t),ttr=r(bIe," \u2014 "),DQ=n(bIe,"A",{href:!0});var u3t=s(DQ);atr=r(u3t,"LEDForQuestionAnswering"),u3t.forEach(t),ntr=r(bIe," (LED model)"),bIe.forEach(t),str=i(X),V6=n(X,"LI",{});var vIe=s(V6);T1e=n(vIe,"STRONG",{});var b3t=s(T1e);ltr=r(b3t,"longformer"),b3t.forEach(t),itr=r(vIe," \u2014 "),GQ=n(vIe,"A",{href:!0});var v3t=s(GQ);dtr=r(v3t,"LongformerForQuestionAnswering"),v3t.forEach(t),ctr=r(vIe," (Longformer model)"),vIe.forEach(t),ftr=i(X),X6=n(X,"LI",{});var FIe=s(X6);M1e=n(FIe,"STRONG",{});var F3t=s(M1e);mtr=r(F3t,"lxmert"),F3t.forEach(t),gtr=r(FIe," \u2014 "),OQ=n(FIe,"A",{href:!0});var T3t=s(OQ);htr=r(T3t,"LxmertForQuestionAnswering"),T3t.forEach(t),ptr=r(FIe," (LXMERT model)"),FIe.forEach(t),_tr=i(X),z6=n(X,"LI",{});var TIe=s(z6);E1e=n(TIe,"STRONG",{});var M3t=s(E1e);utr=r(M3t,"mbart"),M3t.forEach(t),btr=r(TIe," \u2014 "),VQ=n(TIe,"A",{href:!0});var E3t=s(VQ);vtr=r(E3t,"MBartForQuestionAnswering"),E3t.forEach(t),Ftr=r(TIe," (mBART model)"),TIe.forEach(t),Ttr=i(X),Q6=n(X,"LI",{});var MIe=s(Q6);C1e=n(MIe,"STRONG",{});var C3t=s(C1e);Mtr=r(C3t,"megatron-bert"),C3t.forEach(t),Etr=r(MIe," \u2014 "),XQ=n(MIe,"A",{href:!0});var w3t=s(XQ);Ctr=r(w3t,"MegatronBertForQuestionAnswering"),w3t.forEach(t),wtr=r(MIe," (Megatron-BERT model)"),MIe.forEach(t),Atr=i(X),W6=n(X,"LI",{});var EIe=s(W6);w1e=n(EIe,"STRONG",{});var A3t=s(w1e);Ltr=r(A3t,"mobilebert"),A3t.forEach(t),ytr=r(EIe," \u2014 "),zQ=n(EIe,"A",{href:!0});var L3t=s(zQ);xtr=r(L3t,"MobileBertForQuestionAnswering"),L3t.forEach(t),$tr=r(EIe," (MobileBERT model)"),EIe.forEach(t),ktr=i(X),H6=n(X,"LI",{});var CIe=s(H6);A1e=n(CIe,"STRONG",{});var y3t=s(A1e);Str=r(y3t,"mpnet"),y3t.forEach(t),Rtr=r(CIe," \u2014 "),QQ=n(CIe,"A",{href:!0});var x3t=s(QQ);Ptr=r(x3t,"MPNetForQuestionAnswering"),x3t.forEach(t),Btr=r(CIe," (MPNet model)"),CIe.forEach(t),Itr=i(X),U6=n(X,"LI",{});var wIe=s(U6);L1e=n(wIe,"STRONG",{});var $3t=s(L1e);Ntr=r($3t,"mvp"),$3t.forEach(t),qtr=r(wIe," \u2014 "),WQ=n(wIe,"A",{href:!0});var k3t=s(WQ);jtr=r(k3t,"MvpForQuestionAnswering"),k3t.forEach(t),Dtr=r(wIe," (MVP model)"),wIe.forEach(t),Gtr=i(X),J6=n(X,"LI",{});var AIe=s(J6);y1e=n(AIe,"STRONG",{});var S3t=s(y1e);Otr=r(S3t,"nezha"),S3t.forEach(t),Vtr=r(AIe," \u2014 "),HQ=n(AIe,"A",{href:!0});var R3t=s(HQ);Xtr=r(R3t,"NezhaForQuestionAnswering"),R3t.forEach(t),ztr=r(AIe," (Nezha model)"),AIe.forEach(t),Qtr=i(X),Y6=n(X,"LI",{});var LIe=s(Y6);x1e=n(LIe,"STRONG",{});var P3t=s(x1e);Wtr=r(P3t,"nystromformer"),P3t.forEach(t),Htr=r(LIe," \u2014 "),UQ=n(LIe,"A",{href:!0});var B3t=s(UQ);Utr=r(B3t,"NystromformerForQuestionAnswering"),B3t.forEach(t),Jtr=r(LIe," (Nystr\xF6mformer model)"),LIe.forEach(t),Ytr=i(X),K6=n(X,"LI",{});var yIe=s(K6);$1e=n(yIe,"STRONG",{});var I3t=s($1e);Ktr=r(I3t,"qdqbert"),I3t.forEach(t),Ztr=r(yIe," \u2014 "),JQ=n(yIe,"A",{href:!0});var N3t=s(JQ);ear=r(N3t,"QDQBertForQuestionAnswering"),N3t.forEach(t),oar=r(yIe," (QDQBert model)"),yIe.forEach(t),rar=i(X),Z6=n(X,"LI",{});var xIe=s(Z6);k1e=n(xIe,"STRONG",{});var q3t=s(k1e);tar=r(q3t,"reformer"),q3t.forEach(t),aar=r(xIe," \u2014 "),YQ=n(xIe,"A",{href:!0});var j3t=s(YQ);nar=r(j3t,"ReformerForQuestionAnswering"),j3t.forEach(t),sar=r(xIe," (Reformer model)"),xIe.forEach(t),lar=i(X),eT=n(X,"LI",{});var $Ie=s(eT);S1e=n($Ie,"STRONG",{});var D3t=s(S1e);iar=r(D3t,"rembert"),D3t.forEach(t),dar=r($Ie," \u2014 "),KQ=n($Ie,"A",{href:!0});var G3t=s(KQ);car=r(G3t,"RemBertForQuestionAnswering"),G3t.forEach(t),far=r($Ie," (RemBERT model)"),$Ie.forEach(t),mar=i(X),oT=n(X,"LI",{});var kIe=s(oT);R1e=n(kIe,"STRONG",{});var O3t=s(R1e);gar=r(O3t,"roberta"),O3t.forEach(t),har=r(kIe," \u2014 "),ZQ=n(kIe,"A",{href:!0});var V3t=s(ZQ);par=r(V3t,"RobertaForQuestionAnswering"),V3t.forEach(t),_ar=r(kIe," (RoBERTa model)"),kIe.forEach(t),uar=i(X),rT=n(X,"LI",{});var SIe=s(rT);P1e=n(SIe,"STRONG",{});var X3t=s(P1e);bar=r(X3t,"roformer"),X3t.forEach(t),Far=r(SIe," \u2014 "),eW=n(SIe,"A",{href:!0});var z3t=s(eW);Tar=r(z3t,"RoFormerForQuestionAnswering"),z3t.forEach(t),Mar=r(SIe," (RoFormer model)"),SIe.forEach(t),Ear=i(X),tT=n(X,"LI",{});var RIe=s(tT);B1e=n(RIe,"STRONG",{});var Q3t=s(B1e);Car=r(Q3t,"splinter"),Q3t.forEach(t),war=r(RIe," \u2014 "),oW=n(RIe,"A",{href:!0});var W3t=s(oW);Aar=r(W3t,"SplinterForQuestionAnswering"),W3t.forEach(t),Lar=r(RIe," (Splinter model)"),RIe.forEach(t),yar=i(X),aT=n(X,"LI",{});var PIe=s(aT);I1e=n(PIe,"STRONG",{});var H3t=s(I1e);xar=r(H3t,"squeezebert"),H3t.forEach(t),$ar=r(PIe," \u2014 "),rW=n(PIe,"A",{href:!0});var U3t=s(rW);kar=r(U3t,"SqueezeBertForQuestionAnswering"),U3t.forEach(t),Sar=r(PIe," (SqueezeBERT model)"),PIe.forEach(t),Rar=i(X),nT=n(X,"LI",{});var BIe=s(nT);N1e=n(BIe,"STRONG",{});var J3t=s(N1e);Par=r(J3t,"xlm"),J3t.forEach(t),Bar=r(BIe," \u2014 "),tW=n(BIe,"A",{href:!0});var Y3t=s(tW);Iar=r(Y3t,"XLMForQuestionAnsweringSimple"),Y3t.forEach(t),Nar=r(BIe," (XLM model)"),BIe.forEach(t),qar=i(X),sT=n(X,"LI",{});var IIe=s(sT);q1e=n(IIe,"STRONG",{});var K3t=s(q1e);jar=r(K3t,"xlm-roberta"),K3t.forEach(t),Dar=r(IIe," \u2014 "),aW=n(IIe,"A",{href:!0});var Z3t=s(aW);Gar=r(Z3t,"XLMRobertaForQuestionAnswering"),Z3t.forEach(t),Oar=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Var=i(X),lT=n(X,"LI",{});var NIe=s(lT);j1e=n(NIe,"STRONG",{});var e5t=s(j1e);Xar=r(e5t,"xlm-roberta-xl"),e5t.forEach(t),zar=r(NIe," \u2014 "),nW=n(NIe,"A",{href:!0});var o5t=s(nW);Qar=r(o5t,"XLMRobertaXLForQuestionAnswering"),o5t.forEach(t),War=r(NIe," (XLM-RoBERTa-XL model)"),NIe.forEach(t),Har=i(X),iT=n(X,"LI",{});var qIe=s(iT);D1e=n(qIe,"STRONG",{});var r5t=s(D1e);Uar=r(r5t,"xlnet"),r5t.forEach(t),Jar=r(qIe," \u2014 "),sW=n(qIe,"A",{href:!0});var t5t=s(sW);Yar=r(t5t,"XLNetForQuestionAnsweringSimple"),t5t.forEach(t),Kar=r(qIe," (XLNet model)"),qIe.forEach(t),Zar=i(X),dT=n(X,"LI",{});var jIe=s(dT);G1e=n(jIe,"STRONG",{});var a5t=s(G1e);enr=r(a5t,"yoso"),a5t.forEach(t),onr=r(jIe," \u2014 "),lW=n(jIe,"A",{href:!0});var n5t=s(lW);rnr=r(n5t,"YosoForQuestionAnswering"),n5t.forEach(t),tnr=r(jIe," (YOSO model)"),jIe.forEach(t),X.forEach(t),anr=i(_a),cT=n(_a,"P",{});var DIe=s(cT);nnr=r(DIe,"The model is set in evaluation mode by default using "),O1e=n(DIe,"CODE",{});var s5t=s(O1e);snr=r(s5t,"model.eval()"),s5t.forEach(t),lnr=r(DIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V1e=n(DIe,"CODE",{});var l5t=s(V1e);inr=r(l5t,"model.train()"),l5t.forEach(t),DIe.forEach(t),dnr=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),RXe=i(f),_d=n(f,"H2",{class:!0});var jQe=s(_d);mT=n(jQe,"A",{id:!0,class:!0,href:!0});var i5t=s(mT);X1e=n(i5t,"SPAN",{});var d5t=s(X1e);T(Ly.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),cnr=i(jQe),z1e=n(jQe,"SPAN",{});var c5t=s(z1e);fnr=r(c5t,"AutoModelForTableQuestionAnswering"),c5t.forEach(t),jQe.forEach(t),PXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(yy.$$.fragment,fl),mnr=i(fl),ud=n(fl,"P",{});var Ure=s(ud);gnr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iW=n(Ure,"A",{href:!0});var f5t=s(iW);hnr=r(f5t,"from_pretrained()"),f5t.forEach(t),pnr=r(Ure," class method or the "),dW=n(Ure,"A",{href:!0});var m5t=s(dW);_nr=r(m5t,"from_config()"),m5t.forEach(t),unr=r(Ure,` class
method.`),Ure.forEach(t),bnr=i(fl),xy=n(fl,"P",{});var DQe=s(xy);vnr=r(DQe,"This class cannot be instantiated directly using "),Q1e=n(DQe,"CODE",{});var g5t=s(Q1e);Fnr=r(g5t,"__init__()"),g5t.forEach(t),Tnr=r(DQe," (throws an error)."),DQe.forEach(t),Mnr=i(fl),ut=n(fl,"DIV",{class:!0});var xw=s(ut);T($y.$$.fragment,xw),Enr=i(xw),W1e=n(xw,"P",{});var h5t=s(W1e);Cnr=r(h5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h5t.forEach(t),wnr=i(xw),bd=n(xw,"P",{});var Jre=s(bd);Anr=r(Jre,`Note:
Loading a model from its configuration file does `),H1e=n(Jre,"STRONG",{});var p5t=s(H1e);Lnr=r(p5t,"not"),p5t.forEach(t),ynr=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Jre,"A",{href:!0});var _5t=s(cW);xnr=r(_5t,"from_pretrained()"),_5t.forEach(t),$nr=r(Jre," to load the model weights."),Jre.forEach(t),knr=i(xw),T(gT.$$.fragment,xw),xw.forEach(t),Snr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),Rnr=i(ua),U1e=n(ua,"P",{});var u5t=s(U1e);Pnr=r(u5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u5t.forEach(t),Bnr=i(ua),Qa=n(ua,"P",{});var $w=s(Qa);Inr=r($w,"The model class to instantiate is selected based on the "),J1e=n($w,"CODE",{});var b5t=s(J1e);Nnr=r(b5t,"model_type"),b5t.forEach(t),qnr=r($w,` property of the config object (either
passed as an argument or loaded from `),Y1e=n($w,"CODE",{});var v5t=s(Y1e);jnr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Dnr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n($w,"CODE",{});var F5t=s(K1e);Gnr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),Onr=r($w,":"),$w.forEach(t),Vnr=i(ua),Z1e=n(ua,"UL",{});var T5t=s(Z1e);hT=n(T5t,"LI",{});var GIe=s(hT);ebe=n(GIe,"STRONG",{});var M5t=s(ebe);Xnr=r(M5t,"tapas"),M5t.forEach(t),znr=r(GIe," \u2014 "),fW=n(GIe,"A",{href:!0});var E5t=s(fW);Qnr=r(E5t,"TapasForQuestionAnswering"),E5t.forEach(t),Wnr=r(GIe," (TAPAS model)"),GIe.forEach(t),T5t.forEach(t),Hnr=i(ua),pT=n(ua,"P",{});var OIe=s(pT);Unr=r(OIe,"The model is set in evaluation mode by default using "),obe=n(OIe,"CODE",{});var C5t=s(obe);Jnr=r(C5t,"model.eval()"),C5t.forEach(t),Ynr=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(OIe,"CODE",{});var w5t=s(rbe);Knr=r(w5t,"model.train()"),w5t.forEach(t),OIe.forEach(t),Znr=i(ua),T(_T.$$.fragment,ua),ua.forEach(t),fl.forEach(t),BXe=i(f),vd=n(f,"H2",{class:!0});var GQe=s(vd);uT=n(GQe,"A",{id:!0,class:!0,href:!0});var A5t=s(uT);tbe=n(A5t,"SPAN",{});var L5t=s(tbe);T(Sy.$$.fragment,L5t),L5t.forEach(t),A5t.forEach(t),esr=i(GQe),abe=n(GQe,"SPAN",{});var y5t=s(abe);osr=r(y5t,"AutoModelForImageClassification"),y5t.forEach(t),GQe.forEach(t),IXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(Ry.$$.fragment,ml),rsr=i(ml),Fd=n(ml,"P",{});var Yre=s(Fd);tsr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mW=n(Yre,"A",{href:!0});var x5t=s(mW);asr=r(x5t,"from_pretrained()"),x5t.forEach(t),nsr=r(Yre," class method or the "),gW=n(Yre,"A",{href:!0});var $5t=s(gW);ssr=r($5t,"from_config()"),$5t.forEach(t),lsr=r(Yre,` class
method.`),Yre.forEach(t),isr=i(ml),Py=n(ml,"P",{});var OQe=s(Py);dsr=r(OQe,"This class cannot be instantiated directly using "),nbe=n(OQe,"CODE",{});var k5t=s(nbe);csr=r(k5t,"__init__()"),k5t.forEach(t),fsr=r(OQe," (throws an error)."),OQe.forEach(t),msr=i(ml),bt=n(ml,"DIV",{class:!0});var kw=s(bt);T(By.$$.fragment,kw),gsr=i(kw),sbe=n(kw,"P",{});var S5t=s(sbe);hsr=r(S5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S5t.forEach(t),psr=i(kw),Td=n(kw,"P",{});var Kre=s(Td);_sr=r(Kre,`Note:
Loading a model from its configuration file does `),lbe=n(Kre,"STRONG",{});var R5t=s(lbe);usr=r(R5t,"not"),R5t.forEach(t),bsr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Kre,"A",{href:!0});var P5t=s(hW);vsr=r(P5t,"from_pretrained()"),P5t.forEach(t),Fsr=r(Kre," to load the model weights."),Kre.forEach(t),Tsr=i(kw),T(bT.$$.fragment,kw),kw.forEach(t),Msr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Iy.$$.fragment,ba),Esr=i(ba),ibe=n(ba,"P",{});var B5t=s(ibe);Csr=r(B5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B5t.forEach(t),wsr=i(ba),Wa=n(ba,"P",{});var Sw=s(Wa);Asr=r(Sw,"The model class to instantiate is selected based on the "),dbe=n(Sw,"CODE",{});var I5t=s(dbe);Lsr=r(I5t,"model_type"),I5t.forEach(t),ysr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),cbe=n(Sw,"CODE",{});var N5t=s(cbe);xsr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),$sr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(Sw,"CODE",{});var q5t=s(fbe);ksr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Ssr=r(Sw,":"),Sw.forEach(t),Rsr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);vT=n(Te,"LI",{});var VIe=s(vT);mbe=n(VIe,"STRONG",{});var j5t=s(mbe);Psr=r(j5t,"beit"),j5t.forEach(t),Bsr=r(VIe," \u2014 "),pW=n(VIe,"A",{href:!0});var D5t=s(pW);Isr=r(D5t,"BeitForImageClassification"),D5t.forEach(t),Nsr=r(VIe," (BEiT model)"),VIe.forEach(t),qsr=i(Te),FT=n(Te,"LI",{});var XIe=s(FT);gbe=n(XIe,"STRONG",{});var G5t=s(gbe);jsr=r(G5t,"convnext"),G5t.forEach(t),Dsr=r(XIe," \u2014 "),_W=n(XIe,"A",{href:!0});var O5t=s(_W);Gsr=r(O5t,"ConvNextForImageClassification"),O5t.forEach(t),Osr=r(XIe," (ConvNeXT model)"),XIe.forEach(t),Vsr=i(Te),TT=n(Te,"LI",{});var zIe=s(TT);hbe=n(zIe,"STRONG",{});var V5t=s(hbe);Xsr=r(V5t,"cvt"),V5t.forEach(t),zsr=r(zIe," \u2014 "),uW=n(zIe,"A",{href:!0});var X5t=s(uW);Qsr=r(X5t,"CvtForImageClassification"),X5t.forEach(t),Wsr=r(zIe," (CvT model)"),zIe.forEach(t),Hsr=i(Te),MT=n(Te,"LI",{});var QIe=s(MT);pbe=n(QIe,"STRONG",{});var z5t=s(pbe);Usr=r(z5t,"data2vec-vision"),z5t.forEach(t),Jsr=r(QIe," \u2014 "),bW=n(QIe,"A",{href:!0});var Q5t=s(bW);Ysr=r(Q5t,"Data2VecVisionForImageClassification"),Q5t.forEach(t),Ksr=r(QIe," (Data2VecVision model)"),QIe.forEach(t),Zsr=i(Te),Hs=n(Te,"LI",{});var SS=s(Hs);_be=n(SS,"STRONG",{});var W5t=s(_be);elr=r(W5t,"deit"),W5t.forEach(t),olr=r(SS," \u2014 "),vW=n(SS,"A",{href:!0});var H5t=s(vW);rlr=r(H5t,"DeiTForImageClassification"),H5t.forEach(t),tlr=r(SS," or "),FW=n(SS,"A",{href:!0});var U5t=s(FW);alr=r(U5t,"DeiTForImageClassificationWithTeacher"),U5t.forEach(t),nlr=r(SS," (DeiT model)"),SS.forEach(t),slr=i(Te),ET=n(Te,"LI",{});var WIe=s(ET);ube=n(WIe,"STRONG",{});var J5t=s(ube);llr=r(J5t,"imagegpt"),J5t.forEach(t),ilr=r(WIe," \u2014 "),TW=n(WIe,"A",{href:!0});var Y5t=s(TW);dlr=r(Y5t,"ImageGPTForImageClassification"),Y5t.forEach(t),clr=r(WIe," (ImageGPT model)"),WIe.forEach(t),flr=i(Te),Us=n(Te,"LI",{});var RS=s(Us);bbe=n(RS,"STRONG",{});var K5t=s(bbe);mlr=r(K5t,"levit"),K5t.forEach(t),glr=r(RS," \u2014 "),MW=n(RS,"A",{href:!0});var Z5t=s(MW);hlr=r(Z5t,"LevitForImageClassification"),Z5t.forEach(t),plr=r(RS," or "),EW=n(RS,"A",{href:!0});var e0t=s(EW);_lr=r(e0t,"LevitForImageClassificationWithTeacher"),e0t.forEach(t),ulr=r(RS," (LeViT model)"),RS.forEach(t),blr=i(Te),CT=n(Te,"LI",{});var HIe=s(CT);vbe=n(HIe,"STRONG",{});var o0t=s(vbe);vlr=r(o0t,"mobilevit"),o0t.forEach(t),Flr=r(HIe," \u2014 "),CW=n(HIe,"A",{href:!0});var r0t=s(CW);Tlr=r(r0t,"MobileViTForImageClassification"),r0t.forEach(t),Mlr=r(HIe," (MobileViT model)"),HIe.forEach(t),Elr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);Fbe=n(Sf,"STRONG",{});var t0t=s(Fbe);Clr=r(t0t,"perceiver"),t0t.forEach(t),wlr=r(Sf," \u2014 "),wW=n(Sf,"A",{href:!0});var a0t=s(wW);Alr=r(a0t,"PerceiverForImageClassificationLearned"),a0t.forEach(t),Llr=r(Sf," or "),AW=n(Sf,"A",{href:!0});var n0t=s(AW);ylr=r(n0t,"PerceiverForImageClassificationFourier"),n0t.forEach(t),xlr=r(Sf," or "),LW=n(Sf,"A",{href:!0});var s0t=s(LW);$lr=r(s0t,"PerceiverForImageClassificationConvProcessing"),s0t.forEach(t),klr=r(Sf," (Perceiver model)"),Sf.forEach(t),Slr=i(Te),wT=n(Te,"LI",{});var UIe=s(wT);Tbe=n(UIe,"STRONG",{});var l0t=s(Tbe);Rlr=r(l0t,"poolformer"),l0t.forEach(t),Plr=r(UIe," \u2014 "),yW=n(UIe,"A",{href:!0});var i0t=s(yW);Blr=r(i0t,"PoolFormerForImageClassification"),i0t.forEach(t),Ilr=r(UIe," (PoolFormer model)"),UIe.forEach(t),Nlr=i(Te),AT=n(Te,"LI",{});var JIe=s(AT);Mbe=n(JIe,"STRONG",{});var d0t=s(Mbe);qlr=r(d0t,"regnet"),d0t.forEach(t),jlr=r(JIe," \u2014 "),xW=n(JIe,"A",{href:!0});var c0t=s(xW);Dlr=r(c0t,"RegNetForImageClassification"),c0t.forEach(t),Glr=r(JIe," (RegNet model)"),JIe.forEach(t),Olr=i(Te),LT=n(Te,"LI",{});var YIe=s(LT);Ebe=n(YIe,"STRONG",{});var f0t=s(Ebe);Vlr=r(f0t,"resnet"),f0t.forEach(t),Xlr=r(YIe," \u2014 "),$W=n(YIe,"A",{href:!0});var m0t=s($W);zlr=r(m0t,"ResNetForImageClassification"),m0t.forEach(t),Qlr=r(YIe," (ResNet model)"),YIe.forEach(t),Wlr=i(Te),yT=n(Te,"LI",{});var KIe=s(yT);Cbe=n(KIe,"STRONG",{});var g0t=s(Cbe);Hlr=r(g0t,"segformer"),g0t.forEach(t),Ulr=r(KIe," \u2014 "),kW=n(KIe,"A",{href:!0});var h0t=s(kW);Jlr=r(h0t,"SegformerForImageClassification"),h0t.forEach(t),Ylr=r(KIe," (SegFormer model)"),KIe.forEach(t),Klr=i(Te),xT=n(Te,"LI",{});var ZIe=s(xT);wbe=n(ZIe,"STRONG",{});var p0t=s(wbe);Zlr=r(p0t,"swin"),p0t.forEach(t),eir=r(ZIe," \u2014 "),SW=n(ZIe,"A",{href:!0});var _0t=s(SW);oir=r(_0t,"SwinForImageClassification"),_0t.forEach(t),rir=r(ZIe," (Swin Transformer model)"),ZIe.forEach(t),tir=i(Te),$T=n(Te,"LI",{});var eNe=s($T);Abe=n(eNe,"STRONG",{});var u0t=s(Abe);air=r(u0t,"van"),u0t.forEach(t),nir=r(eNe," \u2014 "),RW=n(eNe,"A",{href:!0});var b0t=s(RW);sir=r(b0t,"VanForImageClassification"),b0t.forEach(t),lir=r(eNe," (VAN model)"),eNe.forEach(t),iir=i(Te),kT=n(Te,"LI",{});var oNe=s(kT);Lbe=n(oNe,"STRONG",{});var v0t=s(Lbe);dir=r(v0t,"vit"),v0t.forEach(t),cir=r(oNe," \u2014 "),PW=n(oNe,"A",{href:!0});var F0t=s(PW);fir=r(F0t,"ViTForImageClassification"),F0t.forEach(t),mir=r(oNe," (ViT model)"),oNe.forEach(t),Te.forEach(t),gir=i(ba),ST=n(ba,"P",{});var rNe=s(ST);hir=r(rNe,"The model is set in evaluation mode by default using "),ybe=n(rNe,"CODE",{});var T0t=s(ybe);pir=r(T0t,"model.eval()"),T0t.forEach(t),_ir=r(rNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xbe=n(rNe,"CODE",{});var M0t=s(xbe);uir=r(M0t,"model.train()"),M0t.forEach(t),rNe.forEach(t),bir=i(ba),T(RT.$$.fragment,ba),ba.forEach(t),ml.forEach(t),NXe=i(f),Md=n(f,"H2",{class:!0});var VQe=s(Md);PT=n(VQe,"A",{id:!0,class:!0,href:!0});var E0t=s(PT);$be=n(E0t,"SPAN",{});var C0t=s($be);T(Ny.$$.fragment,C0t),C0t.forEach(t),E0t.forEach(t),vir=i(VQe),kbe=n(VQe,"SPAN",{});var w0t=s(kbe);Fir=r(w0t,"AutoModelForVision2Seq"),w0t.forEach(t),VQe.forEach(t),qXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(qy.$$.fragment,gl),Tir=i(gl),Ed=n(gl,"P",{});var Zre=s(Ed);Mir=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BW=n(Zre,"A",{href:!0});var A0t=s(BW);Eir=r(A0t,"from_pretrained()"),A0t.forEach(t),Cir=r(Zre," class method or the "),IW=n(Zre,"A",{href:!0});var L0t=s(IW);wir=r(L0t,"from_config()"),L0t.forEach(t),Air=r(Zre,` class
method.`),Zre.forEach(t),Lir=i(gl),jy=n(gl,"P",{});var XQe=s(jy);yir=r(XQe,"This class cannot be instantiated directly using "),Sbe=n(XQe,"CODE",{});var y0t=s(Sbe);xir=r(y0t,"__init__()"),y0t.forEach(t),$ir=r(XQe," (throws an error)."),XQe.forEach(t),kir=i(gl),Ft=n(gl,"DIV",{class:!0});var Rw=s(Ft);T(Dy.$$.fragment,Rw),Sir=i(Rw),Rbe=n(Rw,"P",{});var x0t=s(Rbe);Rir=r(x0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x0t.forEach(t),Pir=i(Rw),Cd=n(Rw,"P",{});var ete=s(Cd);Bir=r(ete,`Note:
Loading a model from its configuration file does `),Pbe=n(ete,"STRONG",{});var $0t=s(Pbe);Iir=r($0t,"not"),$0t.forEach(t),Nir=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(ete,"A",{href:!0});var k0t=s(NW);qir=r(k0t,"from_pretrained()"),k0t.forEach(t),jir=r(ete," to load the model weights."),ete.forEach(t),Dir=i(Rw),T(BT.$$.fragment,Rw),Rw.forEach(t),Gir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),Oir=i(va),Bbe=n(va,"P",{});var S0t=s(Bbe);Vir=r(S0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S0t.forEach(t),Xir=i(va),Ha=n(va,"P",{});var Pw=s(Ha);zir=r(Pw,"The model class to instantiate is selected based on the "),Ibe=n(Pw,"CODE",{});var R0t=s(Ibe);Qir=r(R0t,"model_type"),R0t.forEach(t),Wir=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(Pw,"CODE",{});var P0t=s(Nbe);Hir=r(P0t,"pretrained_model_name_or_path"),P0t.forEach(t),Uir=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(Pw,"CODE",{});var B0t=s(qbe);Jir=r(B0t,"pretrained_model_name_or_path"),B0t.forEach(t),Yir=r(Pw,":"),Pw.forEach(t),Kir=i(va),jbe=n(va,"UL",{});var I0t=s(jbe);IT=n(I0t,"LI",{});var tNe=s(IT);Dbe=n(tNe,"STRONG",{});var N0t=s(Dbe);Zir=r(N0t,"vision-encoder-decoder"),N0t.forEach(t),edr=r(tNe," \u2014 "),qW=n(tNe,"A",{href:!0});var q0t=s(qW);odr=r(q0t,"VisionEncoderDecoderModel"),q0t.forEach(t),rdr=r(tNe," (Vision Encoder decoder model)"),tNe.forEach(t),I0t.forEach(t),tdr=i(va),NT=n(va,"P",{});var aNe=s(NT);adr=r(aNe,"The model is set in evaluation mode by default using "),Gbe=n(aNe,"CODE",{});var j0t=s(Gbe);ndr=r(j0t,"model.eval()"),j0t.forEach(t),sdr=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Obe=n(aNe,"CODE",{});var D0t=s(Obe);ldr=r(D0t,"model.train()"),D0t.forEach(t),aNe.forEach(t),idr=i(va),T(qT.$$.fragment,va),va.forEach(t),gl.forEach(t),jXe=i(f),wd=n(f,"H2",{class:!0});var zQe=s(wd);jT=n(zQe,"A",{id:!0,class:!0,href:!0});var G0t=s(jT);Vbe=n(G0t,"SPAN",{});var O0t=s(Vbe);T(Oy.$$.fragment,O0t),O0t.forEach(t),G0t.forEach(t),ddr=i(zQe),Xbe=n(zQe,"SPAN",{});var V0t=s(Xbe);cdr=r(V0t,"AutoModelForVisualQuestionAnswering"),V0t.forEach(t),zQe.forEach(t),DXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(Vy.$$.fragment,hl),fdr=i(hl),Ad=n(hl,"P",{});var ote=s(Ad);mdr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),jW=n(ote,"A",{href:!0});var X0t=s(jW);gdr=r(X0t,"from_pretrained()"),X0t.forEach(t),hdr=r(ote," class method or the "),DW=n(ote,"A",{href:!0});var z0t=s(DW);pdr=r(z0t,"from_config()"),z0t.forEach(t),_dr=r(ote,` class
method.`),ote.forEach(t),udr=i(hl),Xy=n(hl,"P",{});var QQe=s(Xy);bdr=r(QQe,"This class cannot be instantiated directly using "),zbe=n(QQe,"CODE",{});var Q0t=s(zbe);vdr=r(Q0t,"__init__()"),Q0t.forEach(t),Fdr=r(QQe," (throws an error)."),QQe.forEach(t),Tdr=i(hl),Tt=n(hl,"DIV",{class:!0});var Bw=s(Tt);T(zy.$$.fragment,Bw),Mdr=i(Bw),Qbe=n(Bw,"P",{});var W0t=s(Qbe);Edr=r(W0t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),W0t.forEach(t),Cdr=i(Bw),Ld=n(Bw,"P",{});var rte=s(Ld);wdr=r(rte,`Note:
Loading a model from its configuration file does `),Wbe=n(rte,"STRONG",{});var H0t=s(Wbe);Adr=r(H0t,"not"),H0t.forEach(t),Ldr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(rte,"A",{href:!0});var U0t=s(GW);ydr=r(U0t,"from_pretrained()"),U0t.forEach(t),xdr=r(rte," to load the model weights."),rte.forEach(t),$dr=i(Bw),T(DT.$$.fragment,Bw),Bw.forEach(t),kdr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),Sdr=i(Fa),Hbe=n(Fa,"P",{});var J0t=s(Hbe);Rdr=r(J0t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),J0t.forEach(t),Pdr=i(Fa),Ua=n(Fa,"P",{});var Iw=s(Ua);Bdr=r(Iw,"The model class to instantiate is selected based on the "),Ube=n(Iw,"CODE",{});var Y0t=s(Ube);Idr=r(Y0t,"model_type"),Y0t.forEach(t),Ndr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(Iw,"CODE",{});var K0t=s(Jbe);qdr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),jdr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(Iw,"CODE",{});var Z0t=s(Ybe);Ddr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),Gdr=r(Iw,":"),Iw.forEach(t),Odr=i(Fa),Kbe=n(Fa,"UL",{});var ewt=s(Kbe);GT=n(ewt,"LI",{});var nNe=s(GT);Zbe=n(nNe,"STRONG",{});var owt=s(Zbe);Vdr=r(owt,"vilt"),owt.forEach(t),Xdr=r(nNe," \u2014 "),OW=n(nNe,"A",{href:!0});var rwt=s(OW);zdr=r(rwt,"ViltForQuestionAnswering"),rwt.forEach(t),Qdr=r(nNe," (ViLT model)"),nNe.forEach(t),ewt.forEach(t),Wdr=i(Fa),OT=n(Fa,"P",{});var sNe=s(OT);Hdr=r(sNe,"The model is set in evaluation mode by default using "),eve=n(sNe,"CODE",{});var twt=s(eve);Udr=r(twt,"model.eval()"),twt.forEach(t),Jdr=r(sNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ove=n(sNe,"CODE",{});var awt=s(ove);Ydr=r(awt,"model.train()"),awt.forEach(t),sNe.forEach(t),Kdr=i(Fa),T(VT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),GXe=i(f),yd=n(f,"H2",{class:!0});var WQe=s(yd);XT=n(WQe,"A",{id:!0,class:!0,href:!0});var nwt=s(XT);rve=n(nwt,"SPAN",{});var swt=s(rve);T(Wy.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),Zdr=i(WQe),tve=n(WQe,"SPAN",{});var lwt=s(tve);ecr=r(lwt,"AutoModelForAudioClassification"),lwt.forEach(t),WQe.forEach(t),OXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Hy.$$.fragment,pl),ocr=i(pl),xd=n(pl,"P",{});var tte=s(xd);rcr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),VW=n(tte,"A",{href:!0});var iwt=s(VW);tcr=r(iwt,"from_pretrained()"),iwt.forEach(t),acr=r(tte," class method or the "),XW=n(tte,"A",{href:!0});var dwt=s(XW);ncr=r(dwt,"from_config()"),dwt.forEach(t),scr=r(tte,` class
method.`),tte.forEach(t),lcr=i(pl),Uy=n(pl,"P",{});var HQe=s(Uy);icr=r(HQe,"This class cannot be instantiated directly using "),ave=n(HQe,"CODE",{});var cwt=s(ave);dcr=r(cwt,"__init__()"),cwt.forEach(t),ccr=r(HQe," (throws an error)."),HQe.forEach(t),fcr=i(pl),Mt=n(pl,"DIV",{class:!0});var Nw=s(Mt);T(Jy.$$.fragment,Nw),mcr=i(Nw),nve=n(Nw,"P",{});var fwt=s(nve);gcr=r(fwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fwt.forEach(t),hcr=i(Nw),$d=n(Nw,"P",{});var ate=s($d);pcr=r(ate,`Note:
Loading a model from its configuration file does `),sve=n(ate,"STRONG",{});var mwt=s(sve);_cr=r(mwt,"not"),mwt.forEach(t),ucr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(ate,"A",{href:!0});var gwt=s(zW);bcr=r(gwt,"from_pretrained()"),gwt.forEach(t),vcr=r(ate," to load the model weights."),ate.forEach(t),Fcr=i(Nw),T(zT.$$.fragment,Nw),Nw.forEach(t),Tcr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),Mcr=i(Ta),lve=n(Ta,"P",{});var hwt=s(lve);Ecr=r(hwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hwt.forEach(t),Ccr=i(Ta),Ja=n(Ta,"P",{});var qw=s(Ja);wcr=r(qw,"The model class to instantiate is selected based on the "),ive=n(qw,"CODE",{});var pwt=s(ive);Acr=r(pwt,"model_type"),pwt.forEach(t),Lcr=r(qw,` property of the config object (either
passed as an argument or loaded from `),dve=n(qw,"CODE",{});var _wt=s(dve);ycr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),xcr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(qw,"CODE",{});var uwt=s(cve);$cr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),kcr=r(qw,":"),qw.forEach(t),Scr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);QT=n(ze,"LI",{});var lNe=s(QT);fve=n(lNe,"STRONG",{});var bwt=s(fve);Rcr=r(bwt,"data2vec-audio"),bwt.forEach(t),Pcr=r(lNe," \u2014 "),QW=n(lNe,"A",{href:!0});var vwt=s(QW);Bcr=r(vwt,"Data2VecAudioForSequenceClassification"),vwt.forEach(t),Icr=r(lNe," (Data2VecAudio model)"),lNe.forEach(t),Ncr=i(ze),WT=n(ze,"LI",{});var iNe=s(WT);mve=n(iNe,"STRONG",{});var Fwt=s(mve);qcr=r(Fwt,"hubert"),Fwt.forEach(t),jcr=r(iNe," \u2014 "),WW=n(iNe,"A",{href:!0});var Twt=s(WW);Dcr=r(Twt,"HubertForSequenceClassification"),Twt.forEach(t),Gcr=r(iNe," (Hubert model)"),iNe.forEach(t),Ocr=i(ze),HT=n(ze,"LI",{});var dNe=s(HT);gve=n(dNe,"STRONG",{});var Mwt=s(gve);Vcr=r(Mwt,"sew"),Mwt.forEach(t),Xcr=r(dNe," \u2014 "),HW=n(dNe,"A",{href:!0});var Ewt=s(HW);zcr=r(Ewt,"SEWForSequenceClassification"),Ewt.forEach(t),Qcr=r(dNe," (SEW model)"),dNe.forEach(t),Wcr=i(ze),UT=n(ze,"LI",{});var cNe=s(UT);hve=n(cNe,"STRONG",{});var Cwt=s(hve);Hcr=r(Cwt,"sew-d"),Cwt.forEach(t),Ucr=r(cNe," \u2014 "),UW=n(cNe,"A",{href:!0});var wwt=s(UW);Jcr=r(wwt,"SEWDForSequenceClassification"),wwt.forEach(t),Ycr=r(cNe," (SEW-D model)"),cNe.forEach(t),Kcr=i(ze),JT=n(ze,"LI",{});var fNe=s(JT);pve=n(fNe,"STRONG",{});var Awt=s(pve);Zcr=r(Awt,"unispeech"),Awt.forEach(t),efr=r(fNe," \u2014 "),JW=n(fNe,"A",{href:!0});var Lwt=s(JW);ofr=r(Lwt,"UniSpeechForSequenceClassification"),Lwt.forEach(t),rfr=r(fNe," (UniSpeech model)"),fNe.forEach(t),tfr=i(ze),YT=n(ze,"LI",{});var mNe=s(YT);_ve=n(mNe,"STRONG",{});var ywt=s(_ve);afr=r(ywt,"unispeech-sat"),ywt.forEach(t),nfr=r(mNe," \u2014 "),YW=n(mNe,"A",{href:!0});var xwt=s(YW);sfr=r(xwt,"UniSpeechSatForSequenceClassification"),xwt.forEach(t),lfr=r(mNe," (UniSpeechSat model)"),mNe.forEach(t),ifr=i(ze),KT=n(ze,"LI",{});var gNe=s(KT);uve=n(gNe,"STRONG",{});var $wt=s(uve);dfr=r($wt,"wav2vec2"),$wt.forEach(t),cfr=r(gNe," \u2014 "),KW=n(gNe,"A",{href:!0});var kwt=s(KW);ffr=r(kwt,"Wav2Vec2ForSequenceClassification"),kwt.forEach(t),mfr=r(gNe," (Wav2Vec2 model)"),gNe.forEach(t),gfr=i(ze),ZT=n(ze,"LI",{});var hNe=s(ZT);bve=n(hNe,"STRONG",{});var Swt=s(bve);hfr=r(Swt,"wav2vec2-conformer"),Swt.forEach(t),pfr=r(hNe," \u2014 "),ZW=n(hNe,"A",{href:!0});var Rwt=s(ZW);_fr=r(Rwt,"Wav2Vec2ConformerForSequenceClassification"),Rwt.forEach(t),ufr=r(hNe," (Wav2Vec2-Conformer model)"),hNe.forEach(t),bfr=i(ze),e7=n(ze,"LI",{});var pNe=s(e7);vve=n(pNe,"STRONG",{});var Pwt=s(vve);vfr=r(Pwt,"wavlm"),Pwt.forEach(t),Ffr=r(pNe," \u2014 "),eH=n(pNe,"A",{href:!0});var Bwt=s(eH);Tfr=r(Bwt,"WavLMForSequenceClassification"),Bwt.forEach(t),Mfr=r(pNe," (WavLM model)"),pNe.forEach(t),ze.forEach(t),Efr=i(Ta),o7=n(Ta,"P",{});var _Ne=s(o7);Cfr=r(_Ne,"The model is set in evaluation mode by default using "),Fve=n(_Ne,"CODE",{});var Iwt=s(Fve);wfr=r(Iwt,"model.eval()"),Iwt.forEach(t),Afr=r(_Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=n(_Ne,"CODE",{});var Nwt=s(Tve);Lfr=r(Nwt,"model.train()"),Nwt.forEach(t),_Ne.forEach(t),yfr=i(Ta),T(r7.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),VXe=i(f),kd=n(f,"H2",{class:!0});var UQe=s(kd);t7=n(UQe,"A",{id:!0,class:!0,href:!0});var qwt=s(t7);Mve=n(qwt,"SPAN",{});var jwt=s(Mve);T(Ky.$$.fragment,jwt),jwt.forEach(t),qwt.forEach(t),xfr=i(UQe),Eve=n(UQe,"SPAN",{});var Dwt=s(Eve);$fr=r(Dwt,"AutoModelForAudioFrameClassification"),Dwt.forEach(t),UQe.forEach(t),XXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Zy.$$.fragment,_l),kfr=i(_l),Sd=n(_l,"P",{});var nte=s(Sd);Sfr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oH=n(nte,"A",{href:!0});var Gwt=s(oH);Rfr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),Pfr=r(nte," class method or the "),rH=n(nte,"A",{href:!0});var Owt=s(rH);Bfr=r(Owt,"from_config()"),Owt.forEach(t),Ifr=r(nte,` class
method.`),nte.forEach(t),Nfr=i(_l),e9=n(_l,"P",{});var JQe=s(e9);qfr=r(JQe,"This class cannot be instantiated directly using "),Cve=n(JQe,"CODE",{});var Vwt=s(Cve);jfr=r(Vwt,"__init__()"),Vwt.forEach(t),Dfr=r(JQe," (throws an error)."),JQe.forEach(t),Gfr=i(_l),Et=n(_l,"DIV",{class:!0});var jw=s(Et);T(o9.$$.fragment,jw),Ofr=i(jw),wve=n(jw,"P",{});var Xwt=s(wve);Vfr=r(Xwt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xwt.forEach(t),Xfr=i(jw),Rd=n(jw,"P",{});var ste=s(Rd);zfr=r(ste,`Note:
Loading a model from its configuration file does `),Ave=n(ste,"STRONG",{});var zwt=s(Ave);Qfr=r(zwt,"not"),zwt.forEach(t),Wfr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(ste,"A",{href:!0});var Qwt=s(tH);Hfr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),Ufr=r(ste," to load the model weights."),ste.forEach(t),Jfr=i(jw),T(a7.$$.fragment,jw),jw.forEach(t),Yfr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(r9.$$.fragment,Ma),Kfr=i(Ma),Lve=n(Ma,"P",{});var Wwt=s(Lve);Zfr=r(Wwt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wwt.forEach(t),emr=i(Ma),Ya=n(Ma,"P",{});var Dw=s(Ya);omr=r(Dw,"The model class to instantiate is selected based on the "),yve=n(Dw,"CODE",{});var Hwt=s(yve);rmr=r(Hwt,"model_type"),Hwt.forEach(t),tmr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),xve=n(Dw,"CODE",{});var Uwt=s(xve);amr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),nmr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(Dw,"CODE",{});var Jwt=s($ve);smr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),lmr=r(Dw,":"),Dw.forEach(t),imr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);n7=n(ul,"LI",{});var uNe=s(n7);kve=n(uNe,"STRONG",{});var Ywt=s(kve);dmr=r(Ywt,"data2vec-audio"),Ywt.forEach(t),cmr=r(uNe," \u2014 "),aH=n(uNe,"A",{href:!0});var Kwt=s(aH);fmr=r(Kwt,"Data2VecAudioForAudioFrameClassification"),Kwt.forEach(t),mmr=r(uNe," (Data2VecAudio model)"),uNe.forEach(t),gmr=i(ul),s7=n(ul,"LI",{});var bNe=s(s7);Sve=n(bNe,"STRONG",{});var Zwt=s(Sve);hmr=r(Zwt,"unispeech-sat"),Zwt.forEach(t),pmr=r(bNe," \u2014 "),nH=n(bNe,"A",{href:!0});var eAt=s(nH);_mr=r(eAt,"UniSpeechSatForAudioFrameClassification"),eAt.forEach(t),umr=r(bNe," (UniSpeechSat model)"),bNe.forEach(t),bmr=i(ul),l7=n(ul,"LI",{});var vNe=s(l7);Rve=n(vNe,"STRONG",{});var oAt=s(Rve);vmr=r(oAt,"wav2vec2"),oAt.forEach(t),Fmr=r(vNe," \u2014 "),sH=n(vNe,"A",{href:!0});var rAt=s(sH);Tmr=r(rAt,"Wav2Vec2ForAudioFrameClassification"),rAt.forEach(t),Mmr=r(vNe," (Wav2Vec2 model)"),vNe.forEach(t),Emr=i(ul),i7=n(ul,"LI",{});var FNe=s(i7);Pve=n(FNe,"STRONG",{});var tAt=s(Pve);Cmr=r(tAt,"wav2vec2-conformer"),tAt.forEach(t),wmr=r(FNe," \u2014 "),lH=n(FNe,"A",{href:!0});var aAt=s(lH);Amr=r(aAt,"Wav2Vec2ConformerForAudioFrameClassification"),aAt.forEach(t),Lmr=r(FNe," (Wav2Vec2-Conformer model)"),FNe.forEach(t),ymr=i(ul),d7=n(ul,"LI",{});var TNe=s(d7);Bve=n(TNe,"STRONG",{});var nAt=s(Bve);xmr=r(nAt,"wavlm"),nAt.forEach(t),$mr=r(TNe," \u2014 "),iH=n(TNe,"A",{href:!0});var sAt=s(iH);kmr=r(sAt,"WavLMForAudioFrameClassification"),sAt.forEach(t),Smr=r(TNe," (WavLM model)"),TNe.forEach(t),ul.forEach(t),Rmr=i(Ma),c7=n(Ma,"P",{});var MNe=s(c7);Pmr=r(MNe,"The model is set in evaluation mode by default using "),Ive=n(MNe,"CODE",{});var lAt=s(Ive);Bmr=r(lAt,"model.eval()"),lAt.forEach(t),Imr=r(MNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nve=n(MNe,"CODE",{});var iAt=s(Nve);Nmr=r(iAt,"model.train()"),iAt.forEach(t),MNe.forEach(t),qmr=i(Ma),T(f7.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),zXe=i(f),Pd=n(f,"H2",{class:!0});var YQe=s(Pd);m7=n(YQe,"A",{id:!0,class:!0,href:!0});var dAt=s(m7);qve=n(dAt,"SPAN",{});var cAt=s(qve);T(t9.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),jmr=i(YQe),jve=n(YQe,"SPAN",{});var fAt=s(jve);Dmr=r(fAt,"AutoModelForCTC"),fAt.forEach(t),YQe.forEach(t),QXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(a9.$$.fragment,bl),Gmr=i(bl),Bd=n(bl,"P",{});var lte=s(Bd);Omr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dH=n(lte,"A",{href:!0});var mAt=s(dH);Vmr=r(mAt,"from_pretrained()"),mAt.forEach(t),Xmr=r(lte," class method or the "),cH=n(lte,"A",{href:!0});var gAt=s(cH);zmr=r(gAt,"from_config()"),gAt.forEach(t),Qmr=r(lte,` class
method.`),lte.forEach(t),Wmr=i(bl),n9=n(bl,"P",{});var KQe=s(n9);Hmr=r(KQe,"This class cannot be instantiated directly using "),Dve=n(KQe,"CODE",{});var hAt=s(Dve);Umr=r(hAt,"__init__()"),hAt.forEach(t),Jmr=r(KQe," (throws an error)."),KQe.forEach(t),Ymr=i(bl),Ct=n(bl,"DIV",{class:!0});var Gw=s(Ct);T(s9.$$.fragment,Gw),Kmr=i(Gw),Gve=n(Gw,"P",{});var pAt=s(Gve);Zmr=r(pAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pAt.forEach(t),egr=i(Gw),Id=n(Gw,"P",{});var ite=s(Id);ogr=r(ite,`Note:
Loading a model from its configuration file does `),Ove=n(ite,"STRONG",{});var _At=s(Ove);rgr=r(_At,"not"),_At.forEach(t),tgr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(ite,"A",{href:!0});var uAt=s(fH);agr=r(uAt,"from_pretrained()"),uAt.forEach(t),ngr=r(ite," to load the model weights."),ite.forEach(t),sgr=i(Gw),T(g7.$$.fragment,Gw),Gw.forEach(t),lgr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),igr=i(Ea),Vve=n(Ea,"P",{});var bAt=s(Vve);dgr=r(bAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bAt.forEach(t),cgr=i(Ea),Ka=n(Ea,"P",{});var Ow=s(Ka);fgr=r(Ow,"The model class to instantiate is selected based on the "),Xve=n(Ow,"CODE",{});var vAt=s(Xve);mgr=r(vAt,"model_type"),vAt.forEach(t),ggr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),zve=n(Ow,"CODE",{});var FAt=s(zve);hgr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),pgr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(Ow,"CODE",{});var TAt=s(Qve);_gr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),ugr=r(Ow,":"),Ow.forEach(t),bgr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);h7=n(Be,"LI",{});var ENe=s(h7);Wve=n(ENe,"STRONG",{});var MAt=s(Wve);vgr=r(MAt,"data2vec-audio"),MAt.forEach(t),Fgr=r(ENe," \u2014 "),mH=n(ENe,"A",{href:!0});var EAt=s(mH);Tgr=r(EAt,"Data2VecAudioForCTC"),EAt.forEach(t),Mgr=r(ENe," (Data2VecAudio model)"),ENe.forEach(t),Egr=i(Be),p7=n(Be,"LI",{});var CNe=s(p7);Hve=n(CNe,"STRONG",{});var CAt=s(Hve);Cgr=r(CAt,"hubert"),CAt.forEach(t),wgr=r(CNe," \u2014 "),gH=n(CNe,"A",{href:!0});var wAt=s(gH);Agr=r(wAt,"HubertForCTC"),wAt.forEach(t),Lgr=r(CNe," (Hubert model)"),CNe.forEach(t),ygr=i(Be),_7=n(Be,"LI",{});var wNe=s(_7);Uve=n(wNe,"STRONG",{});var AAt=s(Uve);xgr=r(AAt,"mctct"),AAt.forEach(t),$gr=r(wNe," \u2014 "),hH=n(wNe,"A",{href:!0});var LAt=s(hH);kgr=r(LAt,"MCTCTForCTC"),LAt.forEach(t),Sgr=r(wNe," (M-CTC-T model)"),wNe.forEach(t),Rgr=i(Be),u7=n(Be,"LI",{});var ANe=s(u7);Jve=n(ANe,"STRONG",{});var yAt=s(Jve);Pgr=r(yAt,"sew"),yAt.forEach(t),Bgr=r(ANe," \u2014 "),pH=n(ANe,"A",{href:!0});var xAt=s(pH);Igr=r(xAt,"SEWForCTC"),xAt.forEach(t),Ngr=r(ANe," (SEW model)"),ANe.forEach(t),qgr=i(Be),b7=n(Be,"LI",{});var LNe=s(b7);Yve=n(LNe,"STRONG",{});var $At=s(Yve);jgr=r($At,"sew-d"),$At.forEach(t),Dgr=r(LNe," \u2014 "),_H=n(LNe,"A",{href:!0});var kAt=s(_H);Ggr=r(kAt,"SEWDForCTC"),kAt.forEach(t),Ogr=r(LNe," (SEW-D model)"),LNe.forEach(t),Vgr=i(Be),v7=n(Be,"LI",{});var yNe=s(v7);Kve=n(yNe,"STRONG",{});var SAt=s(Kve);Xgr=r(SAt,"unispeech"),SAt.forEach(t),zgr=r(yNe," \u2014 "),uH=n(yNe,"A",{href:!0});var RAt=s(uH);Qgr=r(RAt,"UniSpeechForCTC"),RAt.forEach(t),Wgr=r(yNe," (UniSpeech model)"),yNe.forEach(t),Hgr=i(Be),F7=n(Be,"LI",{});var xNe=s(F7);Zve=n(xNe,"STRONG",{});var PAt=s(Zve);Ugr=r(PAt,"unispeech-sat"),PAt.forEach(t),Jgr=r(xNe," \u2014 "),bH=n(xNe,"A",{href:!0});var BAt=s(bH);Ygr=r(BAt,"UniSpeechSatForCTC"),BAt.forEach(t),Kgr=r(xNe," (UniSpeechSat model)"),xNe.forEach(t),Zgr=i(Be),T7=n(Be,"LI",{});var $Ne=s(T7);eFe=n($Ne,"STRONG",{});var IAt=s(eFe);ehr=r(IAt,"wav2vec2"),IAt.forEach(t),ohr=r($Ne," \u2014 "),vH=n($Ne,"A",{href:!0});var NAt=s(vH);rhr=r(NAt,"Wav2Vec2ForCTC"),NAt.forEach(t),thr=r($Ne," (Wav2Vec2 model)"),$Ne.forEach(t),ahr=i(Be),M7=n(Be,"LI",{});var kNe=s(M7);oFe=n(kNe,"STRONG",{});var qAt=s(oFe);nhr=r(qAt,"wav2vec2-conformer"),qAt.forEach(t),shr=r(kNe," \u2014 "),FH=n(kNe,"A",{href:!0});var jAt=s(FH);lhr=r(jAt,"Wav2Vec2ConformerForCTC"),jAt.forEach(t),ihr=r(kNe," (Wav2Vec2-Conformer model)"),kNe.forEach(t),dhr=i(Be),E7=n(Be,"LI",{});var SNe=s(E7);rFe=n(SNe,"STRONG",{});var DAt=s(rFe);chr=r(DAt,"wavlm"),DAt.forEach(t),fhr=r(SNe," \u2014 "),TH=n(SNe,"A",{href:!0});var GAt=s(TH);mhr=r(GAt,"WavLMForCTC"),GAt.forEach(t),ghr=r(SNe," (WavLM model)"),SNe.forEach(t),Be.forEach(t),hhr=i(Ea),C7=n(Ea,"P",{});var RNe=s(C7);phr=r(RNe,"The model is set in evaluation mode by default using "),tFe=n(RNe,"CODE",{});var OAt=s(tFe);_hr=r(OAt,"model.eval()"),OAt.forEach(t),uhr=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(RNe,"CODE",{});var VAt=s(aFe);bhr=r(VAt,"model.train()"),VAt.forEach(t),RNe.forEach(t),vhr=i(Ea),T(w7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),WXe=i(f),Nd=n(f,"H2",{class:!0});var ZQe=s(Nd);A7=n(ZQe,"A",{id:!0,class:!0,href:!0});var XAt=s(A7);nFe=n(XAt,"SPAN",{});var zAt=s(nFe);T(i9.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),Fhr=i(ZQe),sFe=n(ZQe,"SPAN",{});var QAt=s(sFe);Thr=r(QAt,"AutoModelForSpeechSeq2Seq"),QAt.forEach(t),ZQe.forEach(t),HXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(d9.$$.fragment,vl),Mhr=i(vl),qd=n(vl,"P",{});var dte=s(qd);Ehr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MH=n(dte,"A",{href:!0});var WAt=s(MH);Chr=r(WAt,"from_pretrained()"),WAt.forEach(t),whr=r(dte," class method or the "),EH=n(dte,"A",{href:!0});var HAt=s(EH);Ahr=r(HAt,"from_config()"),HAt.forEach(t),Lhr=r(dte,` class
method.`),dte.forEach(t),yhr=i(vl),c9=n(vl,"P",{});var eWe=s(c9);xhr=r(eWe,"This class cannot be instantiated directly using "),lFe=n(eWe,"CODE",{});var UAt=s(lFe);$hr=r(UAt,"__init__()"),UAt.forEach(t),khr=r(eWe," (throws an error)."),eWe.forEach(t),Shr=i(vl),wt=n(vl,"DIV",{class:!0});var Vw=s(wt);T(f9.$$.fragment,Vw),Rhr=i(Vw),iFe=n(Vw,"P",{});var JAt=s(iFe);Phr=r(JAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JAt.forEach(t),Bhr=i(Vw),jd=n(Vw,"P",{});var cte=s(jd);Ihr=r(cte,`Note:
Loading a model from its configuration file does `),dFe=n(cte,"STRONG",{});var YAt=s(dFe);Nhr=r(YAt,"not"),YAt.forEach(t),qhr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(cte,"A",{href:!0});var KAt=s(CH);jhr=r(KAt,"from_pretrained()"),KAt.forEach(t),Dhr=r(cte," to load the model weights."),cte.forEach(t),Ghr=i(Vw),T(L7.$$.fragment,Vw),Vw.forEach(t),Ohr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(m9.$$.fragment,Ca),Vhr=i(Ca),cFe=n(Ca,"P",{});var ZAt=s(cFe);Xhr=r(ZAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZAt.forEach(t),zhr=i(Ca),Za=n(Ca,"P",{});var Xw=s(Za);Qhr=r(Xw,"The model class to instantiate is selected based on the "),fFe=n(Xw,"CODE",{});var eLt=s(fFe);Whr=r(eLt,"model_type"),eLt.forEach(t),Hhr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),mFe=n(Xw,"CODE",{});var oLt=s(mFe);Uhr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),Jhr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(Xw,"CODE",{});var rLt=s(gFe);Yhr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),Khr=r(Xw,":"),Xw.forEach(t),Zhr=i(Ca),g9=n(Ca,"UL",{});var oWe=s(g9);y7=n(oWe,"LI",{});var PNe=s(y7);hFe=n(PNe,"STRONG",{});var tLt=s(hFe);epr=r(tLt,"speech-encoder-decoder"),tLt.forEach(t),opr=r(PNe," \u2014 "),wH=n(PNe,"A",{href:!0});var aLt=s(wH);rpr=r(aLt,"SpeechEncoderDecoderModel"),aLt.forEach(t),tpr=r(PNe," (Speech Encoder decoder model)"),PNe.forEach(t),apr=i(oWe),x7=n(oWe,"LI",{});var BNe=s(x7);pFe=n(BNe,"STRONG",{});var nLt=s(pFe);npr=r(nLt,"speech_to_text"),nLt.forEach(t),spr=r(BNe," \u2014 "),AH=n(BNe,"A",{href:!0});var sLt=s(AH);lpr=r(sLt,"Speech2TextForConditionalGeneration"),sLt.forEach(t),ipr=r(BNe," (Speech2Text model)"),BNe.forEach(t),oWe.forEach(t),dpr=i(Ca),$7=n(Ca,"P",{});var INe=s($7);cpr=r(INe,"The model is set in evaluation mode by default using "),_Fe=n(INe,"CODE",{});var lLt=s(_Fe);fpr=r(lLt,"model.eval()"),lLt.forEach(t),mpr=r(INe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(INe,"CODE",{});var iLt=s(uFe);gpr=r(iLt,"model.train()"),iLt.forEach(t),INe.forEach(t),hpr=i(Ca),T(k7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),UXe=i(f),Dd=n(f,"H2",{class:!0});var rWe=s(Dd);S7=n(rWe,"A",{id:!0,class:!0,href:!0});var dLt=s(S7);bFe=n(dLt,"SPAN",{});var cLt=s(bFe);T(h9.$$.fragment,cLt),cLt.forEach(t),dLt.forEach(t),ppr=i(rWe),vFe=n(rWe,"SPAN",{});var fLt=s(vFe);_pr=r(fLt,"AutoModelForAudioXVector"),fLt.forEach(t),rWe.forEach(t),JXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(p9.$$.fragment,Fl),upr=i(Fl),Gd=n(Fl,"P",{});var fte=s(Gd);bpr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),LH=n(fte,"A",{href:!0});var mLt=s(LH);vpr=r(mLt,"from_pretrained()"),mLt.forEach(t),Fpr=r(fte," class method or the "),yH=n(fte,"A",{href:!0});var gLt=s(yH);Tpr=r(gLt,"from_config()"),gLt.forEach(t),Mpr=r(fte,` class
method.`),fte.forEach(t),Epr=i(Fl),_9=n(Fl,"P",{});var tWe=s(_9);Cpr=r(tWe,"This class cannot be instantiated directly using "),FFe=n(tWe,"CODE",{});var hLt=s(FFe);wpr=r(hLt,"__init__()"),hLt.forEach(t),Apr=r(tWe," (throws an error)."),tWe.forEach(t),Lpr=i(Fl),At=n(Fl,"DIV",{class:!0});var zw=s(At);T(u9.$$.fragment,zw),ypr=i(zw),TFe=n(zw,"P",{});var pLt=s(TFe);xpr=r(pLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pLt.forEach(t),$pr=i(zw),Od=n(zw,"P",{});var mte=s(Od);kpr=r(mte,`Note:
Loading a model from its configuration file does `),MFe=n(mte,"STRONG",{});var _Lt=s(MFe);Spr=r(_Lt,"not"),_Lt.forEach(t),Rpr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(mte,"A",{href:!0});var uLt=s(xH);Ppr=r(uLt,"from_pretrained()"),uLt.forEach(t),Bpr=r(mte," to load the model weights."),mte.forEach(t),Ipr=i(zw),T(R7.$$.fragment,zw),zw.forEach(t),Npr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(b9.$$.fragment,wa),qpr=i(wa),EFe=n(wa,"P",{});var bLt=s(EFe);jpr=r(bLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bLt.forEach(t),Dpr=i(wa),en=n(wa,"P",{});var Qw=s(en);Gpr=r(Qw,"The model class to instantiate is selected based on the "),CFe=n(Qw,"CODE",{});var vLt=s(CFe);Opr=r(vLt,"model_type"),vLt.forEach(t),Vpr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),wFe=n(Qw,"CODE",{});var FLt=s(wFe);Xpr=r(FLt,"pretrained_model_name_or_path"),FLt.forEach(t),zpr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(Qw,"CODE",{});var TLt=s(AFe);Qpr=r(TLt,"pretrained_model_name_or_path"),TLt.forEach(t),Wpr=r(Qw,":"),Qw.forEach(t),Hpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);P7=n(Tl,"LI",{});var NNe=s(P7);LFe=n(NNe,"STRONG",{});var MLt=s(LFe);Upr=r(MLt,"data2vec-audio"),MLt.forEach(t),Jpr=r(NNe," \u2014 "),$H=n(NNe,"A",{href:!0});var ELt=s($H);Ypr=r(ELt,"Data2VecAudioForXVector"),ELt.forEach(t),Kpr=r(NNe," (Data2VecAudio model)"),NNe.forEach(t),Zpr=i(Tl),B7=n(Tl,"LI",{});var qNe=s(B7);yFe=n(qNe,"STRONG",{});var CLt=s(yFe);e_r=r(CLt,"unispeech-sat"),CLt.forEach(t),o_r=r(qNe," \u2014 "),kH=n(qNe,"A",{href:!0});var wLt=s(kH);r_r=r(wLt,"UniSpeechSatForXVector"),wLt.forEach(t),t_r=r(qNe," (UniSpeechSat model)"),qNe.forEach(t),a_r=i(Tl),I7=n(Tl,"LI",{});var jNe=s(I7);xFe=n(jNe,"STRONG",{});var ALt=s(xFe);n_r=r(ALt,"wav2vec2"),ALt.forEach(t),s_r=r(jNe," \u2014 "),SH=n(jNe,"A",{href:!0});var LLt=s(SH);l_r=r(LLt,"Wav2Vec2ForXVector"),LLt.forEach(t),i_r=r(jNe," (Wav2Vec2 model)"),jNe.forEach(t),d_r=i(Tl),N7=n(Tl,"LI",{});var DNe=s(N7);$Fe=n(DNe,"STRONG",{});var yLt=s($Fe);c_r=r(yLt,"wav2vec2-conformer"),yLt.forEach(t),f_r=r(DNe," \u2014 "),RH=n(DNe,"A",{href:!0});var xLt=s(RH);m_r=r(xLt,"Wav2Vec2ConformerForXVector"),xLt.forEach(t),g_r=r(DNe," (Wav2Vec2-Conformer model)"),DNe.forEach(t),h_r=i(Tl),q7=n(Tl,"LI",{});var GNe=s(q7);kFe=n(GNe,"STRONG",{});var $Lt=s(kFe);p_r=r($Lt,"wavlm"),$Lt.forEach(t),__r=r(GNe," \u2014 "),PH=n(GNe,"A",{href:!0});var kLt=s(PH);u_r=r(kLt,"WavLMForXVector"),kLt.forEach(t),b_r=r(GNe," (WavLM model)"),GNe.forEach(t),Tl.forEach(t),v_r=i(wa),j7=n(wa,"P",{});var ONe=s(j7);F_r=r(ONe,"The model is set in evaluation mode by default using "),SFe=n(ONe,"CODE",{});var SLt=s(SFe);T_r=r(SLt,"model.eval()"),SLt.forEach(t),M_r=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),RFe=n(ONe,"CODE",{});var RLt=s(RFe);E_r=r(RLt,"model.train()"),RLt.forEach(t),ONe.forEach(t),C_r=i(wa),T(D7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),YXe=i(f),Vd=n(f,"H2",{class:!0});var aWe=s(Vd);G7=n(aWe,"A",{id:!0,class:!0,href:!0});var PLt=s(G7);PFe=n(PLt,"SPAN",{});var BLt=s(PFe);T(v9.$$.fragment,BLt),BLt.forEach(t),PLt.forEach(t),w_r=i(aWe),BFe=n(aWe,"SPAN",{});var ILt=s(BFe);A_r=r(ILt,"AutoModelForMaskedImageModeling"),ILt.forEach(t),aWe.forEach(t),KXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(F9.$$.fragment,Ml),L_r=i(Ml),Xd=n(Ml,"P",{});var gte=s(Xd);y_r=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BH=n(gte,"A",{href:!0});var NLt=s(BH);x_r=r(NLt,"from_pretrained()"),NLt.forEach(t),$_r=r(gte," class method or the "),IH=n(gte,"A",{href:!0});var qLt=s(IH);k_r=r(qLt,"from_config()"),qLt.forEach(t),S_r=r(gte,` class
method.`),gte.forEach(t),R_r=i(Ml),T9=n(Ml,"P",{});var nWe=s(T9);P_r=r(nWe,"This class cannot be instantiated directly using "),IFe=n(nWe,"CODE",{});var jLt=s(IFe);B_r=r(jLt,"__init__()"),jLt.forEach(t),I_r=r(nWe," (throws an error)."),nWe.forEach(t),N_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var Ww=s(Lt);T(M9.$$.fragment,Ww),q_r=i(Ww),NFe=n(Ww,"P",{});var DLt=s(NFe);j_r=r(DLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),DLt.forEach(t),D_r=i(Ww),zd=n(Ww,"P",{});var hte=s(zd);G_r=r(hte,`Note:
Loading a model from its configuration file does `),qFe=n(hte,"STRONG",{});var GLt=s(qFe);O_r=r(GLt,"not"),GLt.forEach(t),V_r=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(hte,"A",{href:!0});var OLt=s(NH);X_r=r(OLt,"from_pretrained()"),OLt.forEach(t),z_r=r(hte," to load the model weights."),hte.forEach(t),Q_r=i(Ww),T(O7.$$.fragment,Ww),Ww.forEach(t),W_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(E9.$$.fragment,Aa),H_r=i(Aa),jFe=n(Aa,"P",{});var VLt=s(jFe);U_r=r(VLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),VLt.forEach(t),J_r=i(Aa),on=n(Aa,"P",{});var Hw=s(on);Y_r=r(Hw,"The model class to instantiate is selected based on the "),DFe=n(Hw,"CODE",{});var XLt=s(DFe);K_r=r(XLt,"model_type"),XLt.forEach(t),Z_r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),GFe=n(Hw,"CODE",{});var zLt=s(GFe);eur=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),our=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(Hw,"CODE",{});var QLt=s(OFe);rur=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),tur=r(Hw,":"),Hw.forEach(t),aur=i(Aa),Qd=n(Aa,"UL",{});var pte=s(Qd);V7=n(pte,"LI",{});var VNe=s(V7);VFe=n(VNe,"STRONG",{});var WLt=s(VFe);nur=r(WLt,"deit"),WLt.forEach(t),sur=r(VNe," \u2014 "),qH=n(VNe,"A",{href:!0});var HLt=s(qH);lur=r(HLt,"DeiTForMaskedImageModeling"),HLt.forEach(t),iur=r(VNe," (DeiT model)"),VNe.forEach(t),dur=i(pte),X7=n(pte,"LI",{});var XNe=s(X7);XFe=n(XNe,"STRONG",{});var ULt=s(XFe);cur=r(ULt,"swin"),ULt.forEach(t),fur=r(XNe," \u2014 "),jH=n(XNe,"A",{href:!0});var JLt=s(jH);mur=r(JLt,"SwinForMaskedImageModeling"),JLt.forEach(t),gur=r(XNe," (Swin Transformer model)"),XNe.forEach(t),hur=i(pte),z7=n(pte,"LI",{});var zNe=s(z7);zFe=n(zNe,"STRONG",{});var YLt=s(zFe);pur=r(YLt,"vit"),YLt.forEach(t),_ur=r(zNe," \u2014 "),DH=n(zNe,"A",{href:!0});var KLt=s(DH);uur=r(KLt,"ViTForMaskedImageModeling"),KLt.forEach(t),bur=r(zNe," (ViT model)"),zNe.forEach(t),pte.forEach(t),vur=i(Aa),Q7=n(Aa,"P",{});var QNe=s(Q7);Fur=r(QNe,"The model is set in evaluation mode by default using "),QFe=n(QNe,"CODE",{});var ZLt=s(QFe);Tur=r(ZLt,"model.eval()"),ZLt.forEach(t),Mur=r(QNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),WFe=n(QNe,"CODE",{});var eyt=s(WFe);Eur=r(eyt,"model.train()"),eyt.forEach(t),QNe.forEach(t),Cur=i(Aa),T(W7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),ZXe=i(f),Wd=n(f,"H2",{class:!0});var sWe=s(Wd);H7=n(sWe,"A",{id:!0,class:!0,href:!0});var oyt=s(H7);HFe=n(oyt,"SPAN",{});var ryt=s(HFe);T(C9.$$.fragment,ryt),ryt.forEach(t),oyt.forEach(t),wur=i(sWe),UFe=n(sWe,"SPAN",{});var tyt=s(UFe);Aur=r(tyt,"AutoModelForObjectDetection"),tyt.forEach(t),sWe.forEach(t),eze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(w9.$$.fragment,El),Lur=i(El),Hd=n(El,"P",{});var _te=s(Hd);yur=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),GH=n(_te,"A",{href:!0});var ayt=s(GH);xur=r(ayt,"from_pretrained()"),ayt.forEach(t),$ur=r(_te," class method or the "),OH=n(_te,"A",{href:!0});var nyt=s(OH);kur=r(nyt,"from_config()"),nyt.forEach(t),Sur=r(_te,` class
method.`),_te.forEach(t),Rur=i(El),A9=n(El,"P",{});var lWe=s(A9);Pur=r(lWe,"This class cannot be instantiated directly using "),JFe=n(lWe,"CODE",{});var syt=s(JFe);Bur=r(syt,"__init__()"),syt.forEach(t),Iur=r(lWe," (throws an error)."),lWe.forEach(t),Nur=i(El),yt=n(El,"DIV",{class:!0});var Uw=s(yt);T(L9.$$.fragment,Uw),qur=i(Uw),YFe=n(Uw,"P",{});var lyt=s(YFe);jur=r(lyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lyt.forEach(t),Dur=i(Uw),Ud=n(Uw,"P",{});var ute=s(Ud);Gur=r(ute,`Note:
Loading a model from its configuration file does `),KFe=n(ute,"STRONG",{});var iyt=s(KFe);Our=r(iyt,"not"),iyt.forEach(t),Vur=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(ute,"A",{href:!0});var dyt=s(VH);Xur=r(dyt,"from_pretrained()"),dyt.forEach(t),zur=r(ute," to load the model weights."),ute.forEach(t),Qur=i(Uw),T(U7.$$.fragment,Uw),Uw.forEach(t),Wur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(y9.$$.fragment,La),Hur=i(La),ZFe=n(La,"P",{});var cyt=s(ZFe);Uur=r(cyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),cyt.forEach(t),Jur=i(La),rn=n(La,"P",{});var Jw=s(rn);Yur=r(Jw,"The model class to instantiate is selected based on the "),e6e=n(Jw,"CODE",{});var fyt=s(e6e);Kur=r(fyt,"model_type"),fyt.forEach(t),Zur=r(Jw,` property of the config object (either
passed as an argument or loaded from `),o6e=n(Jw,"CODE",{});var myt=s(o6e);e2r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),o2r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(Jw,"CODE",{});var gyt=s(r6e);r2r=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),t2r=r(Jw,":"),Jw.forEach(t),a2r=i(La),x9=n(La,"UL",{});var iWe=s(x9);J7=n(iWe,"LI",{});var WNe=s(J7);t6e=n(WNe,"STRONG",{});var hyt=s(t6e);n2r=r(hyt,"detr"),hyt.forEach(t),s2r=r(WNe," \u2014 "),XH=n(WNe,"A",{href:!0});var pyt=s(XH);l2r=r(pyt,"DetrForObjectDetection"),pyt.forEach(t),i2r=r(WNe," (DETR model)"),WNe.forEach(t),d2r=i(iWe),Y7=n(iWe,"LI",{});var HNe=s(Y7);a6e=n(HNe,"STRONG",{});var _yt=s(a6e);c2r=r(_yt,"yolos"),_yt.forEach(t),f2r=r(HNe," \u2014 "),zH=n(HNe,"A",{href:!0});var uyt=s(zH);m2r=r(uyt,"YolosForObjectDetection"),uyt.forEach(t),g2r=r(HNe," (YOLOS model)"),HNe.forEach(t),iWe.forEach(t),h2r=i(La),K7=n(La,"P",{});var UNe=s(K7);p2r=r(UNe,"The model is set in evaluation mode by default using "),n6e=n(UNe,"CODE",{});var byt=s(n6e);_2r=r(byt,"model.eval()"),byt.forEach(t),u2r=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s6e=n(UNe,"CODE",{});var vyt=s(s6e);b2r=r(vyt,"model.train()"),vyt.forEach(t),UNe.forEach(t),v2r=i(La),T(Z7.$$.fragment,La),La.forEach(t),El.forEach(t),oze=i(f),Jd=n(f,"H2",{class:!0});var dWe=s(Jd);e8=n(dWe,"A",{id:!0,class:!0,href:!0});var Fyt=s(e8);l6e=n(Fyt,"SPAN",{});var Tyt=s(l6e);T($9.$$.fragment,Tyt),Tyt.forEach(t),Fyt.forEach(t),F2r=i(dWe),i6e=n(dWe,"SPAN",{});var Myt=s(i6e);T2r=r(Myt,"AutoModelForImageSegmentation"),Myt.forEach(t),dWe.forEach(t),rze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(k9.$$.fragment,Cl),M2r=i(Cl),Yd=n(Cl,"P",{});var bte=s(Yd);E2r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),QH=n(bte,"A",{href:!0});var Eyt=s(QH);C2r=r(Eyt,"from_pretrained()"),Eyt.forEach(t),w2r=r(bte," class method or the "),WH=n(bte,"A",{href:!0});var Cyt=s(WH);A2r=r(Cyt,"from_config()"),Cyt.forEach(t),L2r=r(bte,` class
method.`),bte.forEach(t),y2r=i(Cl),S9=n(Cl,"P",{});var cWe=s(S9);x2r=r(cWe,"This class cannot be instantiated directly using "),d6e=n(cWe,"CODE",{});var wyt=s(d6e);$2r=r(wyt,"__init__()"),wyt.forEach(t),k2r=r(cWe," (throws an error)."),cWe.forEach(t),S2r=i(Cl),xt=n(Cl,"DIV",{class:!0});var Yw=s(xt);T(R9.$$.fragment,Yw),R2r=i(Yw),c6e=n(Yw,"P",{});var Ayt=s(c6e);P2r=r(Ayt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ayt.forEach(t),B2r=i(Yw),Kd=n(Yw,"P",{});var vte=s(Kd);I2r=r(vte,`Note:
Loading a model from its configuration file does `),f6e=n(vte,"STRONG",{});var Lyt=s(f6e);N2r=r(Lyt,"not"),Lyt.forEach(t),q2r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(vte,"A",{href:!0});var yyt=s(HH);j2r=r(yyt,"from_pretrained()"),yyt.forEach(t),D2r=r(vte," to load the model weights."),vte.forEach(t),G2r=i(Yw),T(o8.$$.fragment,Yw),Yw.forEach(t),O2r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(P9.$$.fragment,ya),V2r=i(ya),m6e=n(ya,"P",{});var xyt=s(m6e);X2r=r(xyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xyt.forEach(t),z2r=i(ya),tn=n(ya,"P",{});var Kw=s(tn);Q2r=r(Kw,"The model class to instantiate is selected based on the "),g6e=n(Kw,"CODE",{});var $yt=s(g6e);W2r=r($yt,"model_type"),$yt.forEach(t),H2r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),h6e=n(Kw,"CODE",{});var kyt=s(h6e);U2r=r(kyt,"pretrained_model_name_or_path"),kyt.forEach(t),J2r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(Kw,"CODE",{});var Syt=s(p6e);Y2r=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),K2r=r(Kw,":"),Kw.forEach(t),Z2r=i(ya),_6e=n(ya,"UL",{});var Ryt=s(_6e);r8=n(Ryt,"LI",{});var JNe=s(r8);u6e=n(JNe,"STRONG",{});var Pyt=s(u6e);e1r=r(Pyt,"detr"),Pyt.forEach(t),o1r=r(JNe," \u2014 "),UH=n(JNe,"A",{href:!0});var Byt=s(UH);r1r=r(Byt,"DetrForSegmentation"),Byt.forEach(t),t1r=r(JNe," (DETR model)"),JNe.forEach(t),Ryt.forEach(t),a1r=i(ya),t8=n(ya,"P",{});var YNe=s(t8);n1r=r(YNe,"The model is set in evaluation mode by default using "),b6e=n(YNe,"CODE",{});var Iyt=s(b6e);s1r=r(Iyt,"model.eval()"),Iyt.forEach(t),l1r=r(YNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v6e=n(YNe,"CODE",{});var Nyt=s(v6e);i1r=r(Nyt,"model.train()"),Nyt.forEach(t),YNe.forEach(t),d1r=i(ya),T(a8.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),tze=i(f),Zd=n(f,"H2",{class:!0});var fWe=s(Zd);n8=n(fWe,"A",{id:!0,class:!0,href:!0});var qyt=s(n8);F6e=n(qyt,"SPAN",{});var jyt=s(F6e);T(B9.$$.fragment,jyt),jyt.forEach(t),qyt.forEach(t),c1r=i(fWe),T6e=n(fWe,"SPAN",{});var Dyt=s(T6e);f1r=r(Dyt,"AutoModelForSemanticSegmentation"),Dyt.forEach(t),fWe.forEach(t),aze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(I9.$$.fragment,wl),m1r=i(wl),ec=n(wl,"P",{});var Fte=s(ec);g1r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),JH=n(Fte,"A",{href:!0});var Gyt=s(JH);h1r=r(Gyt,"from_pretrained()"),Gyt.forEach(t),p1r=r(Fte," class method or the "),YH=n(Fte,"A",{href:!0});var Oyt=s(YH);_1r=r(Oyt,"from_config()"),Oyt.forEach(t),u1r=r(Fte,` class
method.`),Fte.forEach(t),b1r=i(wl),N9=n(wl,"P",{});var mWe=s(N9);v1r=r(mWe,"This class cannot be instantiated directly using "),M6e=n(mWe,"CODE",{});var Vyt=s(M6e);F1r=r(Vyt,"__init__()"),Vyt.forEach(t),T1r=r(mWe," (throws an error)."),mWe.forEach(t),M1r=i(wl),$t=n(wl,"DIV",{class:!0});var Zw=s($t);T(q9.$$.fragment,Zw),E1r=i(Zw),E6e=n(Zw,"P",{});var Xyt=s(E6e);C1r=r(Xyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xyt.forEach(t),w1r=i(Zw),oc=n(Zw,"P",{});var Tte=s(oc);A1r=r(Tte,`Note:
Loading a model from its configuration file does `),C6e=n(Tte,"STRONG",{});var zyt=s(C6e);L1r=r(zyt,"not"),zyt.forEach(t),y1r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Tte,"A",{href:!0});var Qyt=s(KH);x1r=r(Qyt,"from_pretrained()"),Qyt.forEach(t),$1r=r(Tte," to load the model weights."),Tte.forEach(t),k1r=i(Zw),T(s8.$$.fragment,Zw),Zw.forEach(t),S1r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(j9.$$.fragment,xa),R1r=i(xa),w6e=n(xa,"P",{});var Wyt=s(w6e);P1r=r(Wyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wyt.forEach(t),B1r=i(xa),an=n(xa,"P",{});var eA=s(an);I1r=r(eA,"The model class to instantiate is selected based on the "),A6e=n(eA,"CODE",{});var Hyt=s(A6e);N1r=r(Hyt,"model_type"),Hyt.forEach(t),q1r=r(eA,` property of the config object (either
passed as an argument or loaded from `),L6e=n(eA,"CODE",{});var Uyt=s(L6e);j1r=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),D1r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y6e=n(eA,"CODE",{});var Jyt=s(y6e);G1r=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),O1r=r(eA,":"),eA.forEach(t),V1r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);l8=n(Al,"LI",{});var KNe=s(l8);x6e=n(KNe,"STRONG",{});var Yyt=s(x6e);X1r=r(Yyt,"beit"),Yyt.forEach(t),z1r=r(KNe," \u2014 "),ZH=n(KNe,"A",{href:!0});var Kyt=s(ZH);Q1r=r(Kyt,"BeitForSemanticSegmentation"),Kyt.forEach(t),W1r=r(KNe," (BEiT model)"),KNe.forEach(t),H1r=i(Al),i8=n(Al,"LI",{});var ZNe=s(i8);$6e=n(ZNe,"STRONG",{});var Zyt=s($6e);U1r=r(Zyt,"data2vec-vision"),Zyt.forEach(t),J1r=r(ZNe," \u2014 "),eU=n(ZNe,"A",{href:!0});var e9t=s(eU);Y1r=r(e9t,"Data2VecVisionForSemanticSegmentation"),e9t.forEach(t),K1r=r(ZNe," (Data2VecVision model)"),ZNe.forEach(t),Z1r=i(Al),d8=n(Al,"LI",{});var eqe=s(d8);k6e=n(eqe,"STRONG",{});var o9t=s(k6e);ebr=r(o9t,"dpt"),o9t.forEach(t),obr=r(eqe," \u2014 "),oU=n(eqe,"A",{href:!0});var r9t=s(oU);rbr=r(r9t,"DPTForSemanticSegmentation"),r9t.forEach(t),tbr=r(eqe," (DPT model)"),eqe.forEach(t),abr=i(Al),c8=n(Al,"LI",{});var oqe=s(c8);S6e=n(oqe,"STRONG",{});var t9t=s(S6e);nbr=r(t9t,"mobilevit"),t9t.forEach(t),sbr=r(oqe," \u2014 "),rU=n(oqe,"A",{href:!0});var a9t=s(rU);lbr=r(a9t,"MobileViTForSemanticSegmentation"),a9t.forEach(t),ibr=r(oqe," (MobileViT model)"),oqe.forEach(t),dbr=i(Al),f8=n(Al,"LI",{});var rqe=s(f8);R6e=n(rqe,"STRONG",{});var n9t=s(R6e);cbr=r(n9t,"segformer"),n9t.forEach(t),fbr=r(rqe," \u2014 "),tU=n(rqe,"A",{href:!0});var s9t=s(tU);mbr=r(s9t,"SegformerForSemanticSegmentation"),s9t.forEach(t),gbr=r(rqe," (SegFormer model)"),rqe.forEach(t),Al.forEach(t),hbr=i(xa),m8=n(xa,"P",{});var tqe=s(m8);pbr=r(tqe,"The model is set in evaluation mode by default using "),P6e=n(tqe,"CODE",{});var l9t=s(P6e);_br=r(l9t,"model.eval()"),l9t.forEach(t),ubr=r(tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B6e=n(tqe,"CODE",{});var i9t=s(B6e);bbr=r(i9t,"model.train()"),i9t.forEach(t),tqe.forEach(t),vbr=i(xa),T(g8.$$.fragment,xa),xa.forEach(t),wl.forEach(t),nze=i(f),rc=n(f,"H2",{class:!0});var gWe=s(rc);h8=n(gWe,"A",{id:!0,class:!0,href:!0});var d9t=s(h8);I6e=n(d9t,"SPAN",{});var c9t=s(I6e);T(D9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),Fbr=i(gWe),N6e=n(gWe,"SPAN",{});var f9t=s(N6e);Tbr=r(f9t,"AutoModelForInstanceSegmentation"),f9t.forEach(t),gWe.forEach(t),sze=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(G9.$$.fragment,Ll),Mbr=i(Ll),tc=n(Ll,"P",{});var Mte=s(tc);Ebr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),aU=n(Mte,"A",{href:!0});var m9t=s(aU);Cbr=r(m9t,"from_pretrained()"),m9t.forEach(t),wbr=r(Mte," class method or the "),nU=n(Mte,"A",{href:!0});var g9t=s(nU);Abr=r(g9t,"from_config()"),g9t.forEach(t),Lbr=r(Mte,` class
method.`),Mte.forEach(t),ybr=i(Ll),O9=n(Ll,"P",{});var hWe=s(O9);xbr=r(hWe,"This class cannot be instantiated directly using "),q6e=n(hWe,"CODE",{});var h9t=s(q6e);$br=r(h9t,"__init__()"),h9t.forEach(t),kbr=r(hWe," (throws an error)."),hWe.forEach(t),Sbr=i(Ll),kt=n(Ll,"DIV",{class:!0});var oA=s(kt);T(V9.$$.fragment,oA),Rbr=i(oA),j6e=n(oA,"P",{});var p9t=s(j6e);Pbr=r(p9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),p9t.forEach(t),Bbr=i(oA),ac=n(oA,"P",{});var Ete=s(ac);Ibr=r(Ete,`Note:
Loading a model from its configuration file does `),D6e=n(Ete,"STRONG",{});var _9t=s(D6e);Nbr=r(_9t,"not"),_9t.forEach(t),qbr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Ete,"A",{href:!0});var u9t=s(sU);jbr=r(u9t,"from_pretrained()"),u9t.forEach(t),Dbr=r(Ete," to load the model weights."),Ete.forEach(t),Gbr=i(oA),T(p8.$$.fragment,oA),oA.forEach(t),Obr=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(X9.$$.fragment,$a),Vbr=i($a),G6e=n($a,"P",{});var b9t=s(G6e);Xbr=r(b9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),b9t.forEach(t),zbr=i($a),nn=n($a,"P",{});var rA=s(nn);Qbr=r(rA,"The model class to instantiate is selected based on the "),O6e=n(rA,"CODE",{});var v9t=s(O6e);Wbr=r(v9t,"model_type"),v9t.forEach(t),Hbr=r(rA,` property of the config object (either
passed as an argument or loaded from `),V6e=n(rA,"CODE",{});var F9t=s(V6e);Ubr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),Jbr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(rA,"CODE",{});var T9t=s(X6e);Ybr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),Kbr=r(rA,":"),rA.forEach(t),Zbr=i($a),z6e=n($a,"UL",{});var M9t=s(z6e);_8=n(M9t,"LI",{});var aqe=s(_8);Q6e=n(aqe,"STRONG",{});var E9t=s(Q6e);evr=r(E9t,"maskformer"),E9t.forEach(t),ovr=r(aqe," \u2014 "),lU=n(aqe,"A",{href:!0});var C9t=s(lU);rvr=r(C9t,"MaskFormerForInstanceSegmentation"),C9t.forEach(t),tvr=r(aqe," (MaskFormer model)"),aqe.forEach(t),M9t.forEach(t),avr=i($a),u8=n($a,"P",{});var nqe=s(u8);nvr=r(nqe,"The model is set in evaluation mode by default using "),W6e=n(nqe,"CODE",{});var w9t=s(W6e);svr=r(w9t,"model.eval()"),w9t.forEach(t),lvr=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H6e=n(nqe,"CODE",{});var A9t=s(H6e);ivr=r(A9t,"model.train()"),A9t.forEach(t),nqe.forEach(t),dvr=i($a),T(b8.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),lze=i(f),nc=n(f,"H2",{class:!0});var pWe=s(nc);v8=n(pWe,"A",{id:!0,class:!0,href:!0});var L9t=s(v8);U6e=n(L9t,"SPAN",{});var y9t=s(U6e);T(z9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),cvr=i(pWe),J6e=n(pWe,"SPAN",{});var x9t=s(J6e);fvr=r(x9t,"TFAutoModel"),x9t.forEach(t),pWe.forEach(t),ize=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(Q9.$$.fragment,yl),mvr=i(yl),sc=n(yl,"P",{});var Cte=s(sc);gvr=r(Cte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iU=n(Cte,"A",{href:!0});var $9t=s(iU);hvr=r($9t,"from_pretrained()"),$9t.forEach(t),pvr=r(Cte," class method or the "),dU=n(Cte,"A",{href:!0});var k9t=s(dU);_vr=r(k9t,"from_config()"),k9t.forEach(t),uvr=r(Cte,` class
method.`),Cte.forEach(t),bvr=i(yl),W9=n(yl,"P",{});var _We=s(W9);vvr=r(_We,"This class cannot be instantiated directly using "),Y6e=n(_We,"CODE",{});var S9t=s(Y6e);Fvr=r(S9t,"__init__()"),S9t.forEach(t),Tvr=r(_We," (throws an error)."),_We.forEach(t),Mvr=i(yl),St=n(yl,"DIV",{class:!0});var tA=s(St);T(H9.$$.fragment,tA),Evr=i(tA),K6e=n(tA,"P",{});var R9t=s(K6e);Cvr=r(R9t,"Instantiates one of the base model classes of the library from a configuration."),R9t.forEach(t),wvr=i(tA),lc=n(tA,"P",{});var wte=s(lc);Avr=r(wte,`Note:
Loading a model from its configuration file does `),Z6e=n(wte,"STRONG",{});var P9t=s(Z6e);Lvr=r(P9t,"not"),P9t.forEach(t),yvr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(wte,"A",{href:!0});var B9t=s(cU);xvr=r(B9t,"from_pretrained()"),B9t.forEach(t),$vr=r(wte," to load the model weights."),wte.forEach(t),kvr=i(tA),T(F8.$$.fragment,tA),tA.forEach(t),Svr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(U9.$$.fragment,xl),Rvr=i(xl),eTe=n(xl,"P",{});var I9t=s(eTe);Pvr=r(I9t,"Instantiate one of the base model classes of the library from a pretrained model."),I9t.forEach(t),Bvr=i(xl),sn=n(xl,"P",{});var aA=s(sn);Ivr=r(aA,"The model class to instantiate is selected based on the "),oTe=n(aA,"CODE",{});var N9t=s(oTe);Nvr=r(N9t,"model_type"),N9t.forEach(t),qvr=r(aA,` property of the config object (either
passed as an argument or loaded from `),rTe=n(aA,"CODE",{});var q9t=s(rTe);jvr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),Dvr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(aA,"CODE",{});var j9t=s(tTe);Gvr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),Ovr=r(aA,":"),aA.forEach(t),Vvr=i(xl),q=n(xl,"UL",{});var D=s(q);T8=n(D,"LI",{});var sqe=s(T8);aTe=n(sqe,"STRONG",{});var D9t=s(aTe);Xvr=r(D9t,"albert"),D9t.forEach(t),zvr=r(sqe," \u2014 "),fU=n(sqe,"A",{href:!0});var G9t=s(fU);Qvr=r(G9t,"TFAlbertModel"),G9t.forEach(t),Wvr=r(sqe," (ALBERT model)"),sqe.forEach(t),Hvr=i(D),M8=n(D,"LI",{});var lqe=s(M8);nTe=n(lqe,"STRONG",{});var O9t=s(nTe);Uvr=r(O9t,"bart"),O9t.forEach(t),Jvr=r(lqe," \u2014 "),mU=n(lqe,"A",{href:!0});var V9t=s(mU);Yvr=r(V9t,"TFBartModel"),V9t.forEach(t),Kvr=r(lqe," (BART model)"),lqe.forEach(t),Zvr=i(D),E8=n(D,"LI",{});var iqe=s(E8);sTe=n(iqe,"STRONG",{});var X9t=s(sTe);eFr=r(X9t,"bert"),X9t.forEach(t),oFr=r(iqe," \u2014 "),gU=n(iqe,"A",{href:!0});var z9t=s(gU);rFr=r(z9t,"TFBertModel"),z9t.forEach(t),tFr=r(iqe," (BERT model)"),iqe.forEach(t),aFr=i(D),C8=n(D,"LI",{});var dqe=s(C8);lTe=n(dqe,"STRONG",{});var Q9t=s(lTe);nFr=r(Q9t,"blenderbot"),Q9t.forEach(t),sFr=r(dqe," \u2014 "),hU=n(dqe,"A",{href:!0});var W9t=s(hU);lFr=r(W9t,"TFBlenderbotModel"),W9t.forEach(t),iFr=r(dqe," (Blenderbot model)"),dqe.forEach(t),dFr=i(D),w8=n(D,"LI",{});var cqe=s(w8);iTe=n(cqe,"STRONG",{});var H9t=s(iTe);cFr=r(H9t,"blenderbot-small"),H9t.forEach(t),fFr=r(cqe," \u2014 "),pU=n(cqe,"A",{href:!0});var U9t=s(pU);mFr=r(U9t,"TFBlenderbotSmallModel"),U9t.forEach(t),gFr=r(cqe," (BlenderbotSmall model)"),cqe.forEach(t),hFr=i(D),A8=n(D,"LI",{});var fqe=s(A8);dTe=n(fqe,"STRONG",{});var J9t=s(dTe);pFr=r(J9t,"camembert"),J9t.forEach(t),_Fr=r(fqe," \u2014 "),_U=n(fqe,"A",{href:!0});var Y9t=s(_U);uFr=r(Y9t,"TFCamembertModel"),Y9t.forEach(t),bFr=r(fqe," (CamemBERT model)"),fqe.forEach(t),vFr=i(D),L8=n(D,"LI",{});var mqe=s(L8);cTe=n(mqe,"STRONG",{});var K9t=s(cTe);FFr=r(K9t,"clip"),K9t.forEach(t),TFr=r(mqe," \u2014 "),uU=n(mqe,"A",{href:!0});var Z9t=s(uU);MFr=r(Z9t,"TFCLIPModel"),Z9t.forEach(t),EFr=r(mqe," (CLIP model)"),mqe.forEach(t),CFr=i(D),y8=n(D,"LI",{});var gqe=s(y8);fTe=n(gqe,"STRONG",{});var ext=s(fTe);wFr=r(ext,"convbert"),ext.forEach(t),AFr=r(gqe," \u2014 "),bU=n(gqe,"A",{href:!0});var oxt=s(bU);LFr=r(oxt,"TFConvBertModel"),oxt.forEach(t),yFr=r(gqe," (ConvBERT model)"),gqe.forEach(t),xFr=i(D),x8=n(D,"LI",{});var hqe=s(x8);mTe=n(hqe,"STRONG",{});var rxt=s(mTe);$Fr=r(rxt,"convnext"),rxt.forEach(t),kFr=r(hqe," \u2014 "),vU=n(hqe,"A",{href:!0});var txt=s(vU);SFr=r(txt,"TFConvNextModel"),txt.forEach(t),RFr=r(hqe," (ConvNeXT model)"),hqe.forEach(t),PFr=i(D),$8=n(D,"LI",{});var pqe=s($8);gTe=n(pqe,"STRONG",{});var axt=s(gTe);BFr=r(axt,"ctrl"),axt.forEach(t),IFr=r(pqe," \u2014 "),FU=n(pqe,"A",{href:!0});var nxt=s(FU);NFr=r(nxt,"TFCTRLModel"),nxt.forEach(t),qFr=r(pqe," (CTRL model)"),pqe.forEach(t),jFr=i(D),k8=n(D,"LI",{});var _qe=s(k8);hTe=n(_qe,"STRONG",{});var sxt=s(hTe);DFr=r(sxt,"data2vec-vision"),sxt.forEach(t),GFr=r(_qe," \u2014 "),TU=n(_qe,"A",{href:!0});var lxt=s(TU);OFr=r(lxt,"TFData2VecVisionModel"),lxt.forEach(t),VFr=r(_qe," (Data2VecVision model)"),_qe.forEach(t),XFr=i(D),S8=n(D,"LI",{});var uqe=s(S8);pTe=n(uqe,"STRONG",{});var ixt=s(pTe);zFr=r(ixt,"deberta"),ixt.forEach(t),QFr=r(uqe," \u2014 "),MU=n(uqe,"A",{href:!0});var dxt=s(MU);WFr=r(dxt,"TFDebertaModel"),dxt.forEach(t),HFr=r(uqe," (DeBERTa model)"),uqe.forEach(t),UFr=i(D),R8=n(D,"LI",{});var bqe=s(R8);_Te=n(bqe,"STRONG",{});var cxt=s(_Te);JFr=r(cxt,"deberta-v2"),cxt.forEach(t),YFr=r(bqe," \u2014 "),EU=n(bqe,"A",{href:!0});var fxt=s(EU);KFr=r(fxt,"TFDebertaV2Model"),fxt.forEach(t),ZFr=r(bqe," (DeBERTa-v2 model)"),bqe.forEach(t),e6r=i(D),P8=n(D,"LI",{});var vqe=s(P8);uTe=n(vqe,"STRONG",{});var mxt=s(uTe);o6r=r(mxt,"distilbert"),mxt.forEach(t),r6r=r(vqe," \u2014 "),CU=n(vqe,"A",{href:!0});var gxt=s(CU);t6r=r(gxt,"TFDistilBertModel"),gxt.forEach(t),a6r=r(vqe," (DistilBERT model)"),vqe.forEach(t),n6r=i(D),B8=n(D,"LI",{});var Fqe=s(B8);bTe=n(Fqe,"STRONG",{});var hxt=s(bTe);s6r=r(hxt,"dpr"),hxt.forEach(t),l6r=r(Fqe," \u2014 "),wU=n(Fqe,"A",{href:!0});var pxt=s(wU);i6r=r(pxt,"TFDPRQuestionEncoder"),pxt.forEach(t),d6r=r(Fqe," (DPR model)"),Fqe.forEach(t),c6r=i(D),I8=n(D,"LI",{});var Tqe=s(I8);vTe=n(Tqe,"STRONG",{});var _xt=s(vTe);f6r=r(_xt,"electra"),_xt.forEach(t),m6r=r(Tqe," \u2014 "),AU=n(Tqe,"A",{href:!0});var uxt=s(AU);g6r=r(uxt,"TFElectraModel"),uxt.forEach(t),h6r=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),p6r=i(D),N8=n(D,"LI",{});var Mqe=s(N8);FTe=n(Mqe,"STRONG",{});var bxt=s(FTe);_6r=r(bxt,"flaubert"),bxt.forEach(t),u6r=r(Mqe," \u2014 "),LU=n(Mqe,"A",{href:!0});var vxt=s(LU);b6r=r(vxt,"TFFlaubertModel"),vxt.forEach(t),v6r=r(Mqe," (FlauBERT model)"),Mqe.forEach(t),F6r=i(D),Js=n(D,"LI",{});var PS=s(Js);TTe=n(PS,"STRONG",{});var Fxt=s(TTe);T6r=r(Fxt,"funnel"),Fxt.forEach(t),M6r=r(PS," \u2014 "),yU=n(PS,"A",{href:!0});var Txt=s(yU);E6r=r(Txt,"TFFunnelModel"),Txt.forEach(t),C6r=r(PS," or "),xU=n(PS,"A",{href:!0});var Mxt=s(xU);w6r=r(Mxt,"TFFunnelBaseModel"),Mxt.forEach(t),A6r=r(PS," (Funnel Transformer model)"),PS.forEach(t),L6r=i(D),q8=n(D,"LI",{});var Eqe=s(q8);MTe=n(Eqe,"STRONG",{});var Ext=s(MTe);y6r=r(Ext,"gpt2"),Ext.forEach(t),x6r=r(Eqe," \u2014 "),$U=n(Eqe,"A",{href:!0});var Cxt=s($U);$6r=r(Cxt,"TFGPT2Model"),Cxt.forEach(t),k6r=r(Eqe," (OpenAI GPT-2 model)"),Eqe.forEach(t),S6r=i(D),j8=n(D,"LI",{});var Cqe=s(j8);ETe=n(Cqe,"STRONG",{});var wxt=s(ETe);R6r=r(wxt,"gptj"),wxt.forEach(t),P6r=r(Cqe," \u2014 "),kU=n(Cqe,"A",{href:!0});var Axt=s(kU);B6r=r(Axt,"TFGPTJModel"),Axt.forEach(t),I6r=r(Cqe," (GPT-J model)"),Cqe.forEach(t),N6r=i(D),D8=n(D,"LI",{});var wqe=s(D8);CTe=n(wqe,"STRONG",{});var Lxt=s(CTe);q6r=r(Lxt,"hubert"),Lxt.forEach(t),j6r=r(wqe," \u2014 "),SU=n(wqe,"A",{href:!0});var yxt=s(SU);D6r=r(yxt,"TFHubertModel"),yxt.forEach(t),G6r=r(wqe," (Hubert model)"),wqe.forEach(t),O6r=i(D),G8=n(D,"LI",{});var Aqe=s(G8);wTe=n(Aqe,"STRONG",{});var xxt=s(wTe);V6r=r(xxt,"layoutlm"),xxt.forEach(t),X6r=r(Aqe," \u2014 "),RU=n(Aqe,"A",{href:!0});var $xt=s(RU);z6r=r($xt,"TFLayoutLMModel"),$xt.forEach(t),Q6r=r(Aqe," (LayoutLM model)"),Aqe.forEach(t),W6r=i(D),O8=n(D,"LI",{});var Lqe=s(O8);ATe=n(Lqe,"STRONG",{});var kxt=s(ATe);H6r=r(kxt,"led"),kxt.forEach(t),U6r=r(Lqe," \u2014 "),PU=n(Lqe,"A",{href:!0});var Sxt=s(PU);J6r=r(Sxt,"TFLEDModel"),Sxt.forEach(t),Y6r=r(Lqe," (LED model)"),Lqe.forEach(t),K6r=i(D),V8=n(D,"LI",{});var yqe=s(V8);LTe=n(yqe,"STRONG",{});var Rxt=s(LTe);Z6r=r(Rxt,"longformer"),Rxt.forEach(t),eTr=r(yqe," \u2014 "),BU=n(yqe,"A",{href:!0});var Pxt=s(BU);oTr=r(Pxt,"TFLongformerModel"),Pxt.forEach(t),rTr=r(yqe," (Longformer model)"),yqe.forEach(t),tTr=i(D),X8=n(D,"LI",{});var xqe=s(X8);yTe=n(xqe,"STRONG",{});var Bxt=s(yTe);aTr=r(Bxt,"lxmert"),Bxt.forEach(t),nTr=r(xqe," \u2014 "),IU=n(xqe,"A",{href:!0});var Ixt=s(IU);sTr=r(Ixt,"TFLxmertModel"),Ixt.forEach(t),lTr=r(xqe," (LXMERT model)"),xqe.forEach(t),iTr=i(D),z8=n(D,"LI",{});var $qe=s(z8);xTe=n($qe,"STRONG",{});var Nxt=s(xTe);dTr=r(Nxt,"marian"),Nxt.forEach(t),cTr=r($qe," \u2014 "),NU=n($qe,"A",{href:!0});var qxt=s(NU);fTr=r(qxt,"TFMarianModel"),qxt.forEach(t),mTr=r($qe," (Marian model)"),$qe.forEach(t),gTr=i(D),Q8=n(D,"LI",{});var kqe=s(Q8);$Te=n(kqe,"STRONG",{});var jxt=s($Te);hTr=r(jxt,"mbart"),jxt.forEach(t),pTr=r(kqe," \u2014 "),qU=n(kqe,"A",{href:!0});var Dxt=s(qU);_Tr=r(Dxt,"TFMBartModel"),Dxt.forEach(t),uTr=r(kqe," (mBART model)"),kqe.forEach(t),bTr=i(D),W8=n(D,"LI",{});var Sqe=s(W8);kTe=n(Sqe,"STRONG",{});var Gxt=s(kTe);vTr=r(Gxt,"mobilebert"),Gxt.forEach(t),FTr=r(Sqe," \u2014 "),jU=n(Sqe,"A",{href:!0});var Oxt=s(jU);TTr=r(Oxt,"TFMobileBertModel"),Oxt.forEach(t),MTr=r(Sqe," (MobileBERT model)"),Sqe.forEach(t),ETr=i(D),H8=n(D,"LI",{});var Rqe=s(H8);STe=n(Rqe,"STRONG",{});var Vxt=s(STe);CTr=r(Vxt,"mpnet"),Vxt.forEach(t),wTr=r(Rqe," \u2014 "),DU=n(Rqe,"A",{href:!0});var Xxt=s(DU);ATr=r(Xxt,"TFMPNetModel"),Xxt.forEach(t),LTr=r(Rqe," (MPNet model)"),Rqe.forEach(t),yTr=i(D),U8=n(D,"LI",{});var Pqe=s(U8);RTe=n(Pqe,"STRONG",{});var zxt=s(RTe);xTr=r(zxt,"mt5"),zxt.forEach(t),$Tr=r(Pqe," \u2014 "),GU=n(Pqe,"A",{href:!0});var Qxt=s(GU);kTr=r(Qxt,"TFMT5Model"),Qxt.forEach(t),STr=r(Pqe," (MT5 model)"),Pqe.forEach(t),RTr=i(D),J8=n(D,"LI",{});var Bqe=s(J8);PTe=n(Bqe,"STRONG",{});var Wxt=s(PTe);PTr=r(Wxt,"openai-gpt"),Wxt.forEach(t),BTr=r(Bqe," \u2014 "),OU=n(Bqe,"A",{href:!0});var Hxt=s(OU);ITr=r(Hxt,"TFOpenAIGPTModel"),Hxt.forEach(t),NTr=r(Bqe," (OpenAI GPT model)"),Bqe.forEach(t),qTr=i(D),Y8=n(D,"LI",{});var Iqe=s(Y8);BTe=n(Iqe,"STRONG",{});var Uxt=s(BTe);jTr=r(Uxt,"opt"),Uxt.forEach(t),DTr=r(Iqe," \u2014 "),VU=n(Iqe,"A",{href:!0});var Jxt=s(VU);GTr=r(Jxt,"TFOPTModel"),Jxt.forEach(t),OTr=r(Iqe," (OPT model)"),Iqe.forEach(t),VTr=i(D),K8=n(D,"LI",{});var Nqe=s(K8);ITe=n(Nqe,"STRONG",{});var Yxt=s(ITe);XTr=r(Yxt,"pegasus"),Yxt.forEach(t),zTr=r(Nqe," \u2014 "),XU=n(Nqe,"A",{href:!0});var Kxt=s(XU);QTr=r(Kxt,"TFPegasusModel"),Kxt.forEach(t),WTr=r(Nqe," (Pegasus model)"),Nqe.forEach(t),HTr=i(D),Z8=n(D,"LI",{});var qqe=s(Z8);NTe=n(qqe,"STRONG",{});var Zxt=s(NTe);UTr=r(Zxt,"regnet"),Zxt.forEach(t),JTr=r(qqe," \u2014 "),zU=n(qqe,"A",{href:!0});var e$t=s(zU);YTr=r(e$t,"TFRegNetModel"),e$t.forEach(t),KTr=r(qqe," (RegNet model)"),qqe.forEach(t),ZTr=i(D),eM=n(D,"LI",{});var jqe=s(eM);qTe=n(jqe,"STRONG",{});var o$t=s(qTe);e7r=r(o$t,"rembert"),o$t.forEach(t),o7r=r(jqe," \u2014 "),QU=n(jqe,"A",{href:!0});var r$t=s(QU);r7r=r(r$t,"TFRemBertModel"),r$t.forEach(t),t7r=r(jqe," (RemBERT model)"),jqe.forEach(t),a7r=i(D),oM=n(D,"LI",{});var Dqe=s(oM);jTe=n(Dqe,"STRONG",{});var t$t=s(jTe);n7r=r(t$t,"resnet"),t$t.forEach(t),s7r=r(Dqe," \u2014 "),WU=n(Dqe,"A",{href:!0});var a$t=s(WU);l7r=r(a$t,"TFResNetModel"),a$t.forEach(t),i7r=r(Dqe," (ResNet model)"),Dqe.forEach(t),d7r=i(D),rM=n(D,"LI",{});var Gqe=s(rM);DTe=n(Gqe,"STRONG",{});var n$t=s(DTe);c7r=r(n$t,"roberta"),n$t.forEach(t),f7r=r(Gqe," \u2014 "),HU=n(Gqe,"A",{href:!0});var s$t=s(HU);m7r=r(s$t,"TFRobertaModel"),s$t.forEach(t),g7r=r(Gqe," (RoBERTa model)"),Gqe.forEach(t),h7r=i(D),tM=n(D,"LI",{});var Oqe=s(tM);GTe=n(Oqe,"STRONG",{});var l$t=s(GTe);p7r=r(l$t,"roformer"),l$t.forEach(t),_7r=r(Oqe," \u2014 "),UU=n(Oqe,"A",{href:!0});var i$t=s(UU);u7r=r(i$t,"TFRoFormerModel"),i$t.forEach(t),b7r=r(Oqe," (RoFormer model)"),Oqe.forEach(t),v7r=i(D),aM=n(D,"LI",{});var Vqe=s(aM);OTe=n(Vqe,"STRONG",{});var d$t=s(OTe);F7r=r(d$t,"speech_to_text"),d$t.forEach(t),T7r=r(Vqe," \u2014 "),JU=n(Vqe,"A",{href:!0});var c$t=s(JU);M7r=r(c$t,"TFSpeech2TextModel"),c$t.forEach(t),E7r=r(Vqe," (Speech2Text model)"),Vqe.forEach(t),C7r=i(D),nM=n(D,"LI",{});var Xqe=s(nM);VTe=n(Xqe,"STRONG",{});var f$t=s(VTe);w7r=r(f$t,"swin"),f$t.forEach(t),A7r=r(Xqe," \u2014 "),YU=n(Xqe,"A",{href:!0});var m$t=s(YU);L7r=r(m$t,"TFSwinModel"),m$t.forEach(t),y7r=r(Xqe," (Swin Transformer model)"),Xqe.forEach(t),x7r=i(D),sM=n(D,"LI",{});var zqe=s(sM);XTe=n(zqe,"STRONG",{});var g$t=s(XTe);$7r=r(g$t,"t5"),g$t.forEach(t),k7r=r(zqe," \u2014 "),KU=n(zqe,"A",{href:!0});var h$t=s(KU);S7r=r(h$t,"TFT5Model"),h$t.forEach(t),R7r=r(zqe," (T5 model)"),zqe.forEach(t),P7r=i(D),lM=n(D,"LI",{});var Qqe=s(lM);zTe=n(Qqe,"STRONG",{});var p$t=s(zTe);B7r=r(p$t,"tapas"),p$t.forEach(t),I7r=r(Qqe," \u2014 "),ZU=n(Qqe,"A",{href:!0});var _$t=s(ZU);N7r=r(_$t,"TFTapasModel"),_$t.forEach(t),q7r=r(Qqe," (TAPAS model)"),Qqe.forEach(t),j7r=i(D),iM=n(D,"LI",{});var Wqe=s(iM);QTe=n(Wqe,"STRONG",{});var u$t=s(QTe);D7r=r(u$t,"transfo-xl"),u$t.forEach(t),G7r=r(Wqe," \u2014 "),eJ=n(Wqe,"A",{href:!0});var b$t=s(eJ);O7r=r(b$t,"TFTransfoXLModel"),b$t.forEach(t),V7r=r(Wqe," (Transformer-XL model)"),Wqe.forEach(t),X7r=i(D),dM=n(D,"LI",{});var Hqe=s(dM);WTe=n(Hqe,"STRONG",{});var v$t=s(WTe);z7r=r(v$t,"vit"),v$t.forEach(t),Q7r=r(Hqe," \u2014 "),oJ=n(Hqe,"A",{href:!0});var F$t=s(oJ);W7r=r(F$t,"TFViTModel"),F$t.forEach(t),H7r=r(Hqe," (ViT model)"),Hqe.forEach(t),U7r=i(D),cM=n(D,"LI",{});var Uqe=s(cM);HTe=n(Uqe,"STRONG",{});var T$t=s(HTe);J7r=r(T$t,"vit_mae"),T$t.forEach(t),Y7r=r(Uqe," \u2014 "),rJ=n(Uqe,"A",{href:!0});var M$t=s(rJ);K7r=r(M$t,"TFViTMAEModel"),M$t.forEach(t),Z7r=r(Uqe," (ViTMAE model)"),Uqe.forEach(t),e8r=i(D),fM=n(D,"LI",{});var Jqe=s(fM);UTe=n(Jqe,"STRONG",{});var E$t=s(UTe);o8r=r(E$t,"wav2vec2"),E$t.forEach(t),r8r=r(Jqe," \u2014 "),tJ=n(Jqe,"A",{href:!0});var C$t=s(tJ);t8r=r(C$t,"TFWav2Vec2Model"),C$t.forEach(t),a8r=r(Jqe," (Wav2Vec2 model)"),Jqe.forEach(t),n8r=i(D),mM=n(D,"LI",{});var Yqe=s(mM);JTe=n(Yqe,"STRONG",{});var w$t=s(JTe);s8r=r(w$t,"xlm"),w$t.forEach(t),l8r=r(Yqe," \u2014 "),aJ=n(Yqe,"A",{href:!0});var A$t=s(aJ);i8r=r(A$t,"TFXLMModel"),A$t.forEach(t),d8r=r(Yqe," (XLM model)"),Yqe.forEach(t),c8r=i(D),gM=n(D,"LI",{});var Kqe=s(gM);YTe=n(Kqe,"STRONG",{});var L$t=s(YTe);f8r=r(L$t,"xlm-roberta"),L$t.forEach(t),m8r=r(Kqe," \u2014 "),nJ=n(Kqe,"A",{href:!0});var y$t=s(nJ);g8r=r(y$t,"TFXLMRobertaModel"),y$t.forEach(t),h8r=r(Kqe," (XLM-RoBERTa model)"),Kqe.forEach(t),p8r=i(D),hM=n(D,"LI",{});var Zqe=s(hM);KTe=n(Zqe,"STRONG",{});var x$t=s(KTe);_8r=r(x$t,"xlnet"),x$t.forEach(t),u8r=r(Zqe," \u2014 "),sJ=n(Zqe,"A",{href:!0});var $$t=s(sJ);b8r=r($$t,"TFXLNetModel"),$$t.forEach(t),v8r=r(Zqe," (XLNet model)"),Zqe.forEach(t),D.forEach(t),F8r=i(xl),T(pM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),dze=i(f),ic=n(f,"H2",{class:!0});var uWe=s(ic);_M=n(uWe,"A",{id:!0,class:!0,href:!0});var k$t=s(_M);ZTe=n(k$t,"SPAN",{});var S$t=s(ZTe);T(J9.$$.fragment,S$t),S$t.forEach(t),k$t.forEach(t),T8r=i(uWe),e7e=n(uWe,"SPAN",{});var R$t=s(e7e);M8r=r(R$t,"TFAutoModelForPreTraining"),R$t.forEach(t),uWe.forEach(t),cze=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(Y9.$$.fragment,$l),E8r=i($l),dc=n($l,"P",{});var Ate=s(dc);C8r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lJ=n(Ate,"A",{href:!0});var P$t=s(lJ);w8r=r(P$t,"from_pretrained()"),P$t.forEach(t),A8r=r(Ate," class method or the "),iJ=n(Ate,"A",{href:!0});var B$t=s(iJ);L8r=r(B$t,"from_config()"),B$t.forEach(t),y8r=r(Ate,` class
method.`),Ate.forEach(t),x8r=i($l),K9=n($l,"P",{});var bWe=s(K9);$8r=r(bWe,"This class cannot be instantiated directly using "),o7e=n(bWe,"CODE",{});var I$t=s(o7e);k8r=r(I$t,"__init__()"),I$t.forEach(t),S8r=r(bWe," (throws an error)."),bWe.forEach(t),R8r=i($l),Rt=n($l,"DIV",{class:!0});var nA=s(Rt);T(Z9.$$.fragment,nA),P8r=i(nA),r7e=n(nA,"P",{});var N$t=s(r7e);B8r=r(N$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N$t.forEach(t),I8r=i(nA),cc=n(nA,"P",{});var Lte=s(cc);N8r=r(Lte,`Note:
Loading a model from its configuration file does `),t7e=n(Lte,"STRONG",{});var q$t=s(t7e);q8r=r(q$t,"not"),q$t.forEach(t),j8r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(Lte,"A",{href:!0});var j$t=s(dJ);D8r=r(j$t,"from_pretrained()"),j$t.forEach(t),G8r=r(Lte," to load the model weights."),Lte.forEach(t),O8r=i(nA),T(uM.$$.fragment,nA),nA.forEach(t),V8r=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(ex.$$.fragment,kl),X8r=i(kl),a7e=n(kl,"P",{});var D$t=s(a7e);z8r=r(D$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D$t.forEach(t),Q8r=i(kl),ln=n(kl,"P",{});var sA=s(ln);W8r=r(sA,"The model class to instantiate is selected based on the "),n7e=n(sA,"CODE",{});var G$t=s(n7e);H8r=r(G$t,"model_type"),G$t.forEach(t),U8r=r(sA,` property of the config object (either
passed as an argument or loaded from `),s7e=n(sA,"CODE",{});var O$t=s(s7e);J8r=r(O$t,"pretrained_model_name_or_path"),O$t.forEach(t),Y8r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(sA,"CODE",{});var V$t=s(l7e);K8r=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),Z8r=r(sA,":"),sA.forEach(t),eMr=i(kl),se=n(kl,"UL",{});var le=s(se);bM=n(le,"LI",{});var eje=s(bM);i7e=n(eje,"STRONG",{});var X$t=s(i7e);oMr=r(X$t,"albert"),X$t.forEach(t),rMr=r(eje," \u2014 "),cJ=n(eje,"A",{href:!0});var z$t=s(cJ);tMr=r(z$t,"TFAlbertForPreTraining"),z$t.forEach(t),aMr=r(eje," (ALBERT model)"),eje.forEach(t),nMr=i(le),vM=n(le,"LI",{});var oje=s(vM);d7e=n(oje,"STRONG",{});var Q$t=s(d7e);sMr=r(Q$t,"bart"),Q$t.forEach(t),lMr=r(oje," \u2014 "),fJ=n(oje,"A",{href:!0});var W$t=s(fJ);iMr=r(W$t,"TFBartForConditionalGeneration"),W$t.forEach(t),dMr=r(oje," (BART model)"),oje.forEach(t),cMr=i(le),FM=n(le,"LI",{});var rje=s(FM);c7e=n(rje,"STRONG",{});var H$t=s(c7e);fMr=r(H$t,"bert"),H$t.forEach(t),mMr=r(rje," \u2014 "),mJ=n(rje,"A",{href:!0});var U$t=s(mJ);gMr=r(U$t,"TFBertForPreTraining"),U$t.forEach(t),hMr=r(rje," (BERT model)"),rje.forEach(t),pMr=i(le),TM=n(le,"LI",{});var tje=s(TM);f7e=n(tje,"STRONG",{});var J$t=s(f7e);_Mr=r(J$t,"camembert"),J$t.forEach(t),uMr=r(tje," \u2014 "),gJ=n(tje,"A",{href:!0});var Y$t=s(gJ);bMr=r(Y$t,"TFCamembertForMaskedLM"),Y$t.forEach(t),vMr=r(tje," (CamemBERT model)"),tje.forEach(t),FMr=i(le),MM=n(le,"LI",{});var aje=s(MM);m7e=n(aje,"STRONG",{});var K$t=s(m7e);TMr=r(K$t,"ctrl"),K$t.forEach(t),MMr=r(aje," \u2014 "),hJ=n(aje,"A",{href:!0});var Z$t=s(hJ);EMr=r(Z$t,"TFCTRLLMHeadModel"),Z$t.forEach(t),CMr=r(aje," (CTRL model)"),aje.forEach(t),wMr=i(le),EM=n(le,"LI",{});var nje=s(EM);g7e=n(nje,"STRONG",{});var ekt=s(g7e);AMr=r(ekt,"distilbert"),ekt.forEach(t),LMr=r(nje," \u2014 "),pJ=n(nje,"A",{href:!0});var okt=s(pJ);yMr=r(okt,"TFDistilBertForMaskedLM"),okt.forEach(t),xMr=r(nje," (DistilBERT model)"),nje.forEach(t),$Mr=i(le),CM=n(le,"LI",{});var sje=s(CM);h7e=n(sje,"STRONG",{});var rkt=s(h7e);kMr=r(rkt,"electra"),rkt.forEach(t),SMr=r(sje," \u2014 "),_J=n(sje,"A",{href:!0});var tkt=s(_J);RMr=r(tkt,"TFElectraForPreTraining"),tkt.forEach(t),PMr=r(sje," (ELECTRA model)"),sje.forEach(t),BMr=i(le),wM=n(le,"LI",{});var lje=s(wM);p7e=n(lje,"STRONG",{});var akt=s(p7e);IMr=r(akt,"flaubert"),akt.forEach(t),NMr=r(lje," \u2014 "),uJ=n(lje,"A",{href:!0});var nkt=s(uJ);qMr=r(nkt,"TFFlaubertWithLMHeadModel"),nkt.forEach(t),jMr=r(lje," (FlauBERT model)"),lje.forEach(t),DMr=i(le),AM=n(le,"LI",{});var ije=s(AM);_7e=n(ije,"STRONG",{});var skt=s(_7e);GMr=r(skt,"funnel"),skt.forEach(t),OMr=r(ije," \u2014 "),bJ=n(ije,"A",{href:!0});var lkt=s(bJ);VMr=r(lkt,"TFFunnelForPreTraining"),lkt.forEach(t),XMr=r(ije," (Funnel Transformer model)"),ije.forEach(t),zMr=i(le),LM=n(le,"LI",{});var dje=s(LM);u7e=n(dje,"STRONG",{});var ikt=s(u7e);QMr=r(ikt,"gpt2"),ikt.forEach(t),WMr=r(dje," \u2014 "),vJ=n(dje,"A",{href:!0});var dkt=s(vJ);HMr=r(dkt,"TFGPT2LMHeadModel"),dkt.forEach(t),UMr=r(dje," (OpenAI GPT-2 model)"),dje.forEach(t),JMr=i(le),yM=n(le,"LI",{});var cje=s(yM);b7e=n(cje,"STRONG",{});var ckt=s(b7e);YMr=r(ckt,"layoutlm"),ckt.forEach(t),KMr=r(cje," \u2014 "),FJ=n(cje,"A",{href:!0});var fkt=s(FJ);ZMr=r(fkt,"TFLayoutLMForMaskedLM"),fkt.forEach(t),e4r=r(cje," (LayoutLM model)"),cje.forEach(t),o4r=i(le),xM=n(le,"LI",{});var fje=s(xM);v7e=n(fje,"STRONG",{});var mkt=s(v7e);r4r=r(mkt,"lxmert"),mkt.forEach(t),t4r=r(fje," \u2014 "),TJ=n(fje,"A",{href:!0});var gkt=s(TJ);a4r=r(gkt,"TFLxmertForPreTraining"),gkt.forEach(t),n4r=r(fje," (LXMERT model)"),fje.forEach(t),s4r=i(le),$M=n(le,"LI",{});var mje=s($M);F7e=n(mje,"STRONG",{});var hkt=s(F7e);l4r=r(hkt,"mobilebert"),hkt.forEach(t),i4r=r(mje," \u2014 "),MJ=n(mje,"A",{href:!0});var pkt=s(MJ);d4r=r(pkt,"TFMobileBertForPreTraining"),pkt.forEach(t),c4r=r(mje," (MobileBERT model)"),mje.forEach(t),f4r=i(le),kM=n(le,"LI",{});var gje=s(kM);T7e=n(gje,"STRONG",{});var _kt=s(T7e);m4r=r(_kt,"mpnet"),_kt.forEach(t),g4r=r(gje," \u2014 "),EJ=n(gje,"A",{href:!0});var ukt=s(EJ);h4r=r(ukt,"TFMPNetForMaskedLM"),ukt.forEach(t),p4r=r(gje," (MPNet model)"),gje.forEach(t),_4r=i(le),SM=n(le,"LI",{});var hje=s(SM);M7e=n(hje,"STRONG",{});var bkt=s(M7e);u4r=r(bkt,"openai-gpt"),bkt.forEach(t),b4r=r(hje," \u2014 "),CJ=n(hje,"A",{href:!0});var vkt=s(CJ);v4r=r(vkt,"TFOpenAIGPTLMHeadModel"),vkt.forEach(t),F4r=r(hje," (OpenAI GPT model)"),hje.forEach(t),T4r=i(le),RM=n(le,"LI",{});var pje=s(RM);E7e=n(pje,"STRONG",{});var Fkt=s(E7e);M4r=r(Fkt,"roberta"),Fkt.forEach(t),E4r=r(pje," \u2014 "),wJ=n(pje,"A",{href:!0});var Tkt=s(wJ);C4r=r(Tkt,"TFRobertaForMaskedLM"),Tkt.forEach(t),w4r=r(pje," (RoBERTa model)"),pje.forEach(t),A4r=i(le),PM=n(le,"LI",{});var _je=s(PM);C7e=n(_je,"STRONG",{});var Mkt=s(C7e);L4r=r(Mkt,"t5"),Mkt.forEach(t),y4r=r(_je," \u2014 "),AJ=n(_je,"A",{href:!0});var Ekt=s(AJ);x4r=r(Ekt,"TFT5ForConditionalGeneration"),Ekt.forEach(t),$4r=r(_je," (T5 model)"),_je.forEach(t),k4r=i(le),BM=n(le,"LI",{});var uje=s(BM);w7e=n(uje,"STRONG",{});var Ckt=s(w7e);S4r=r(Ckt,"tapas"),Ckt.forEach(t),R4r=r(uje," \u2014 "),LJ=n(uje,"A",{href:!0});var wkt=s(LJ);P4r=r(wkt,"TFTapasForMaskedLM"),wkt.forEach(t),B4r=r(uje," (TAPAS model)"),uje.forEach(t),I4r=i(le),IM=n(le,"LI",{});var bje=s(IM);A7e=n(bje,"STRONG",{});var Akt=s(A7e);N4r=r(Akt,"transfo-xl"),Akt.forEach(t),q4r=r(bje," \u2014 "),yJ=n(bje,"A",{href:!0});var Lkt=s(yJ);j4r=r(Lkt,"TFTransfoXLLMHeadModel"),Lkt.forEach(t),D4r=r(bje," (Transformer-XL model)"),bje.forEach(t),G4r=i(le),NM=n(le,"LI",{});var vje=s(NM);L7e=n(vje,"STRONG",{});var ykt=s(L7e);O4r=r(ykt,"vit_mae"),ykt.forEach(t),V4r=r(vje," \u2014 "),xJ=n(vje,"A",{href:!0});var xkt=s(xJ);X4r=r(xkt,"TFViTMAEForPreTraining"),xkt.forEach(t),z4r=r(vje," (ViTMAE model)"),vje.forEach(t),Q4r=i(le),qM=n(le,"LI",{});var Fje=s(qM);y7e=n(Fje,"STRONG",{});var $kt=s(y7e);W4r=r($kt,"xlm"),$kt.forEach(t),H4r=r(Fje," \u2014 "),$J=n(Fje,"A",{href:!0});var kkt=s($J);U4r=r(kkt,"TFXLMWithLMHeadModel"),kkt.forEach(t),J4r=r(Fje," (XLM model)"),Fje.forEach(t),Y4r=i(le),jM=n(le,"LI",{});var Tje=s(jM);x7e=n(Tje,"STRONG",{});var Skt=s(x7e);K4r=r(Skt,"xlm-roberta"),Skt.forEach(t),Z4r=r(Tje," \u2014 "),kJ=n(Tje,"A",{href:!0});var Rkt=s(kJ);eEr=r(Rkt,"TFXLMRobertaForMaskedLM"),Rkt.forEach(t),oEr=r(Tje," (XLM-RoBERTa model)"),Tje.forEach(t),rEr=i(le),DM=n(le,"LI",{});var Mje=s(DM);$7e=n(Mje,"STRONG",{});var Pkt=s($7e);tEr=r(Pkt,"xlnet"),Pkt.forEach(t),aEr=r(Mje," \u2014 "),SJ=n(Mje,"A",{href:!0});var Bkt=s(SJ);nEr=r(Bkt,"TFXLNetLMHeadModel"),Bkt.forEach(t),sEr=r(Mje," (XLNet model)"),Mje.forEach(t),le.forEach(t),lEr=i(kl),T(GM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),fze=i(f),fc=n(f,"H2",{class:!0});var vWe=s(fc);OM=n(vWe,"A",{id:!0,class:!0,href:!0});var Ikt=s(OM);k7e=n(Ikt,"SPAN",{});var Nkt=s(k7e);T(ox.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),iEr=i(vWe),S7e=n(vWe,"SPAN",{});var qkt=s(S7e);dEr=r(qkt,"TFAutoModelForCausalLM"),qkt.forEach(t),vWe.forEach(t),mze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(rx.$$.fragment,Sl),cEr=i(Sl),mc=n(Sl,"P",{});var yte=s(mc);fEr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RJ=n(yte,"A",{href:!0});var jkt=s(RJ);mEr=r(jkt,"from_pretrained()"),jkt.forEach(t),gEr=r(yte," class method or the "),PJ=n(yte,"A",{href:!0});var Dkt=s(PJ);hEr=r(Dkt,"from_config()"),Dkt.forEach(t),pEr=r(yte,` class
method.`),yte.forEach(t),_Er=i(Sl),tx=n(Sl,"P",{});var FWe=s(tx);uEr=r(FWe,"This class cannot be instantiated directly using "),R7e=n(FWe,"CODE",{});var Gkt=s(R7e);bEr=r(Gkt,"__init__()"),Gkt.forEach(t),vEr=r(FWe," (throws an error)."),FWe.forEach(t),FEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var lA=s(Pt);T(ax.$$.fragment,lA),TEr=i(lA),P7e=n(lA,"P",{});var Okt=s(P7e);MEr=r(Okt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Okt.forEach(t),EEr=i(lA),gc=n(lA,"P",{});var xte=s(gc);CEr=r(xte,`Note:
Loading a model from its configuration file does `),B7e=n(xte,"STRONG",{});var Vkt=s(B7e);wEr=r(Vkt,"not"),Vkt.forEach(t),AEr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(xte,"A",{href:!0});var Xkt=s(BJ);LEr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),yEr=r(xte," to load the model weights."),xte.forEach(t),xEr=i(lA),T(VM.$$.fragment,lA),lA.forEach(t),$Er=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(nx.$$.fragment,Rl),kEr=i(Rl),I7e=n(Rl,"P",{});var zkt=s(I7e);SEr=r(zkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zkt.forEach(t),REr=i(Rl),dn=n(Rl,"P",{});var iA=s(dn);PEr=r(iA,"The model class to instantiate is selected based on the "),N7e=n(iA,"CODE",{});var Qkt=s(N7e);BEr=r(Qkt,"model_type"),Qkt.forEach(t),IEr=r(iA,` property of the config object (either
passed as an argument or loaded from `),q7e=n(iA,"CODE",{});var Wkt=s(q7e);NEr=r(Wkt,"pretrained_model_name_or_path"),Wkt.forEach(t),qEr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(iA,"CODE",{});var Hkt=s(j7e);jEr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),DEr=r(iA,":"),iA.forEach(t),GEr=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);XM=n(Ce,"LI",{});var Eje=s(XM);D7e=n(Eje,"STRONG",{});var Ukt=s(D7e);OEr=r(Ukt,"bert"),Ukt.forEach(t),VEr=r(Eje," \u2014 "),IJ=n(Eje,"A",{href:!0});var Jkt=s(IJ);XEr=r(Jkt,"TFBertLMHeadModel"),Jkt.forEach(t),zEr=r(Eje," (BERT model)"),Eje.forEach(t),QEr=i(Ce),zM=n(Ce,"LI",{});var Cje=s(zM);G7e=n(Cje,"STRONG",{});var Ykt=s(G7e);WEr=r(Ykt,"camembert"),Ykt.forEach(t),HEr=r(Cje," \u2014 "),NJ=n(Cje,"A",{href:!0});var Kkt=s(NJ);UEr=r(Kkt,"TFCamembertForCausalLM"),Kkt.forEach(t),JEr=r(Cje," (CamemBERT model)"),Cje.forEach(t),YEr=i(Ce),QM=n(Ce,"LI",{});var wje=s(QM);O7e=n(wje,"STRONG",{});var Zkt=s(O7e);KEr=r(Zkt,"ctrl"),Zkt.forEach(t),ZEr=r(wje," \u2014 "),qJ=n(wje,"A",{href:!0});var eSt=s(qJ);eCr=r(eSt,"TFCTRLLMHeadModel"),eSt.forEach(t),oCr=r(wje," (CTRL model)"),wje.forEach(t),rCr=i(Ce),WM=n(Ce,"LI",{});var Aje=s(WM);V7e=n(Aje,"STRONG",{});var oSt=s(V7e);tCr=r(oSt,"gpt2"),oSt.forEach(t),aCr=r(Aje," \u2014 "),jJ=n(Aje,"A",{href:!0});var rSt=s(jJ);nCr=r(rSt,"TFGPT2LMHeadModel"),rSt.forEach(t),sCr=r(Aje," (OpenAI GPT-2 model)"),Aje.forEach(t),lCr=i(Ce),HM=n(Ce,"LI",{});var Lje=s(HM);X7e=n(Lje,"STRONG",{});var tSt=s(X7e);iCr=r(tSt,"gptj"),tSt.forEach(t),dCr=r(Lje," \u2014 "),DJ=n(Lje,"A",{href:!0});var aSt=s(DJ);cCr=r(aSt,"TFGPTJForCausalLM"),aSt.forEach(t),fCr=r(Lje," (GPT-J model)"),Lje.forEach(t),mCr=i(Ce),UM=n(Ce,"LI",{});var yje=s(UM);z7e=n(yje,"STRONG",{});var nSt=s(z7e);gCr=r(nSt,"openai-gpt"),nSt.forEach(t),hCr=r(yje," \u2014 "),GJ=n(yje,"A",{href:!0});var sSt=s(GJ);pCr=r(sSt,"TFOpenAIGPTLMHeadModel"),sSt.forEach(t),_Cr=r(yje," (OpenAI GPT model)"),yje.forEach(t),uCr=i(Ce),JM=n(Ce,"LI",{});var xje=s(JM);Q7e=n(xje,"STRONG",{});var lSt=s(Q7e);bCr=r(lSt,"opt"),lSt.forEach(t),vCr=r(xje," \u2014 "),OJ=n(xje,"A",{href:!0});var iSt=s(OJ);FCr=r(iSt,"TFOPTForCausalLM"),iSt.forEach(t),TCr=r(xje," (OPT model)"),xje.forEach(t),MCr=i(Ce),YM=n(Ce,"LI",{});var $je=s(YM);W7e=n($je,"STRONG",{});var dSt=s(W7e);ECr=r(dSt,"rembert"),dSt.forEach(t),CCr=r($je," \u2014 "),VJ=n($je,"A",{href:!0});var cSt=s(VJ);wCr=r(cSt,"TFRemBertForCausalLM"),cSt.forEach(t),ACr=r($je," (RemBERT model)"),$je.forEach(t),LCr=i(Ce),KM=n(Ce,"LI",{});var kje=s(KM);H7e=n(kje,"STRONG",{});var fSt=s(H7e);yCr=r(fSt,"roberta"),fSt.forEach(t),xCr=r(kje," \u2014 "),XJ=n(kje,"A",{href:!0});var mSt=s(XJ);$Cr=r(mSt,"TFRobertaForCausalLM"),mSt.forEach(t),kCr=r(kje," (RoBERTa model)"),kje.forEach(t),SCr=i(Ce),ZM=n(Ce,"LI",{});var Sje=s(ZM);U7e=n(Sje,"STRONG",{});var gSt=s(U7e);RCr=r(gSt,"roformer"),gSt.forEach(t),PCr=r(Sje," \u2014 "),zJ=n(Sje,"A",{href:!0});var hSt=s(zJ);BCr=r(hSt,"TFRoFormerForCausalLM"),hSt.forEach(t),ICr=r(Sje," (RoFormer model)"),Sje.forEach(t),NCr=i(Ce),e4=n(Ce,"LI",{});var Rje=s(e4);J7e=n(Rje,"STRONG",{});var pSt=s(J7e);qCr=r(pSt,"transfo-xl"),pSt.forEach(t),jCr=r(Rje," \u2014 "),QJ=n(Rje,"A",{href:!0});var _St=s(QJ);DCr=r(_St,"TFTransfoXLLMHeadModel"),_St.forEach(t),GCr=r(Rje," (Transformer-XL model)"),Rje.forEach(t),OCr=i(Ce),o4=n(Ce,"LI",{});var Pje=s(o4);Y7e=n(Pje,"STRONG",{});var uSt=s(Y7e);VCr=r(uSt,"xlm"),uSt.forEach(t),XCr=r(Pje," \u2014 "),WJ=n(Pje,"A",{href:!0});var bSt=s(WJ);zCr=r(bSt,"TFXLMWithLMHeadModel"),bSt.forEach(t),QCr=r(Pje," (XLM model)"),Pje.forEach(t),WCr=i(Ce),r4=n(Ce,"LI",{});var Bje=s(r4);K7e=n(Bje,"STRONG",{});var vSt=s(K7e);HCr=r(vSt,"xlnet"),vSt.forEach(t),UCr=r(Bje," \u2014 "),HJ=n(Bje,"A",{href:!0});var FSt=s(HJ);JCr=r(FSt,"TFXLNetLMHeadModel"),FSt.forEach(t),YCr=r(Bje," (XLNet model)"),Bje.forEach(t),Ce.forEach(t),KCr=i(Rl),T(t4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),gze=i(f),hc=n(f,"H2",{class:!0});var TWe=s(hc);a4=n(TWe,"A",{id:!0,class:!0,href:!0});var TSt=s(a4);Z7e=n(TSt,"SPAN",{});var MSt=s(Z7e);T(sx.$$.fragment,MSt),MSt.forEach(t),TSt.forEach(t),ZCr=i(TWe),e8e=n(TWe,"SPAN",{});var ESt=s(e8e);e3r=r(ESt,"TFAutoModelForImageClassification"),ESt.forEach(t),TWe.forEach(t),hze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(lx.$$.fragment,Pl),o3r=i(Pl),pc=n(Pl,"P",{});var $te=s(pc);r3r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UJ=n($te,"A",{href:!0});var CSt=s(UJ);t3r=r(CSt,"from_pretrained()"),CSt.forEach(t),a3r=r($te," class method or the "),JJ=n($te,"A",{href:!0});var wSt=s(JJ);n3r=r(wSt,"from_config()"),wSt.forEach(t),s3r=r($te,` class
method.`),$te.forEach(t),l3r=i(Pl),ix=n(Pl,"P",{});var MWe=s(ix);i3r=r(MWe,"This class cannot be instantiated directly using "),o8e=n(MWe,"CODE",{});var ASt=s(o8e);d3r=r(ASt,"__init__()"),ASt.forEach(t),c3r=r(MWe," (throws an error)."),MWe.forEach(t),f3r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var dA=s(Bt);T(dx.$$.fragment,dA),m3r=i(dA),r8e=n(dA,"P",{});var LSt=s(r8e);g3r=r(LSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LSt.forEach(t),h3r=i(dA),_c=n(dA,"P",{});var kte=s(_c);p3r=r(kte,`Note:
Loading a model from its configuration file does `),t8e=n(kte,"STRONG",{});var ySt=s(t8e);_3r=r(ySt,"not"),ySt.forEach(t),u3r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(kte,"A",{href:!0});var xSt=s(YJ);b3r=r(xSt,"from_pretrained()"),xSt.forEach(t),v3r=r(kte," to load the model weights."),kte.forEach(t),F3r=i(dA),T(n4.$$.fragment,dA),dA.forEach(t),T3r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(cx.$$.fragment,Bl),M3r=i(Bl),a8e=n(Bl,"P",{});var $St=s(a8e);E3r=r($St,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$St.forEach(t),C3r=i(Bl),cn=n(Bl,"P",{});var cA=s(cn);w3r=r(cA,"The model class to instantiate is selected based on the "),n8e=n(cA,"CODE",{});var kSt=s(n8e);A3r=r(kSt,"model_type"),kSt.forEach(t),L3r=r(cA,` property of the config object (either
passed as an argument or loaded from `),s8e=n(cA,"CODE",{});var SSt=s(s8e);y3r=r(SSt,"pretrained_model_name_or_path"),SSt.forEach(t),x3r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l8e=n(cA,"CODE",{});var RSt=s(l8e);$3r=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),k3r=r(cA,":"),cA.forEach(t),S3r=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);s4=n(ka,"LI",{});var Ije=s(s4);i8e=n(Ije,"STRONG",{});var PSt=s(i8e);R3r=r(PSt,"convnext"),PSt.forEach(t),P3r=r(Ije," \u2014 "),KJ=n(Ije,"A",{href:!0});var BSt=s(KJ);B3r=r(BSt,"TFConvNextForImageClassification"),BSt.forEach(t),I3r=r(Ije," (ConvNeXT model)"),Ije.forEach(t),N3r=i(ka),l4=n(ka,"LI",{});var Nje=s(l4);d8e=n(Nje,"STRONG",{});var ISt=s(d8e);q3r=r(ISt,"data2vec-vision"),ISt.forEach(t),j3r=r(Nje," \u2014 "),ZJ=n(Nje,"A",{href:!0});var NSt=s(ZJ);D3r=r(NSt,"TFData2VecVisionForImageClassification"),NSt.forEach(t),G3r=r(Nje," (Data2VecVision model)"),Nje.forEach(t),O3r=i(ka),i4=n(ka,"LI",{});var qje=s(i4);c8e=n(qje,"STRONG",{});var qSt=s(c8e);V3r=r(qSt,"regnet"),qSt.forEach(t),X3r=r(qje," \u2014 "),eY=n(qje,"A",{href:!0});var jSt=s(eY);z3r=r(jSt,"TFRegNetForImageClassification"),jSt.forEach(t),Q3r=r(qje," (RegNet model)"),qje.forEach(t),W3r=i(ka),d4=n(ka,"LI",{});var jje=s(d4);f8e=n(jje,"STRONG",{});var DSt=s(f8e);H3r=r(DSt,"resnet"),DSt.forEach(t),U3r=r(jje," \u2014 "),oY=n(jje,"A",{href:!0});var GSt=s(oY);J3r=r(GSt,"TFResNetForImageClassification"),GSt.forEach(t),Y3r=r(jje," (ResNet model)"),jje.forEach(t),K3r=i(ka),c4=n(ka,"LI",{});var Dje=s(c4);m8e=n(Dje,"STRONG",{});var OSt=s(m8e);Z3r=r(OSt,"swin"),OSt.forEach(t),e5r=r(Dje," \u2014 "),rY=n(Dje,"A",{href:!0});var VSt=s(rY);o5r=r(VSt,"TFSwinForImageClassification"),VSt.forEach(t),r5r=r(Dje," (Swin Transformer model)"),Dje.forEach(t),t5r=i(ka),f4=n(ka,"LI",{});var Gje=s(f4);g8e=n(Gje,"STRONG",{});var XSt=s(g8e);a5r=r(XSt,"vit"),XSt.forEach(t),n5r=r(Gje," \u2014 "),tY=n(Gje,"A",{href:!0});var zSt=s(tY);s5r=r(zSt,"TFViTForImageClassification"),zSt.forEach(t),l5r=r(Gje," (ViT model)"),Gje.forEach(t),ka.forEach(t),i5r=i(Bl),T(m4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),pze=i(f),uc=n(f,"H2",{class:!0});var EWe=s(uc);g4=n(EWe,"A",{id:!0,class:!0,href:!0});var QSt=s(g4);h8e=n(QSt,"SPAN",{});var WSt=s(h8e);T(fx.$$.fragment,WSt),WSt.forEach(t),QSt.forEach(t),d5r=i(EWe),p8e=n(EWe,"SPAN",{});var HSt=s(p8e);c5r=r(HSt,"TFAutoModelForMaskedLM"),HSt.forEach(t),EWe.forEach(t),_ze=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(mx.$$.fragment,Il),f5r=i(Il),bc=n(Il,"P",{});var Ste=s(bc);m5r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=n(Ste,"A",{href:!0});var USt=s(aY);g5r=r(USt,"from_pretrained()"),USt.forEach(t),h5r=r(Ste," class method or the "),nY=n(Ste,"A",{href:!0});var JSt=s(nY);p5r=r(JSt,"from_config()"),JSt.forEach(t),_5r=r(Ste,` class
method.`),Ste.forEach(t),u5r=i(Il),gx=n(Il,"P",{});var CWe=s(gx);b5r=r(CWe,"This class cannot be instantiated directly using "),_8e=n(CWe,"CODE",{});var YSt=s(_8e);v5r=r(YSt,"__init__()"),YSt.forEach(t),F5r=r(CWe," (throws an error)."),CWe.forEach(t),T5r=i(Il),It=n(Il,"DIV",{class:!0});var fA=s(It);T(hx.$$.fragment,fA),M5r=i(fA),u8e=n(fA,"P",{});var KSt=s(u8e);E5r=r(KSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KSt.forEach(t),C5r=i(fA),vc=n(fA,"P",{});var Rte=s(vc);w5r=r(Rte,`Note:
Loading a model from its configuration file does `),b8e=n(Rte,"STRONG",{});var ZSt=s(b8e);A5r=r(ZSt,"not"),ZSt.forEach(t),L5r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(Rte,"A",{href:!0});var eRt=s(sY);y5r=r(eRt,"from_pretrained()"),eRt.forEach(t),x5r=r(Rte," to load the model weights."),Rte.forEach(t),$5r=i(fA),T(h4.$$.fragment,fA),fA.forEach(t),k5r=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(px.$$.fragment,Nl),S5r=i(Nl),v8e=n(Nl,"P",{});var oRt=s(v8e);R5r=r(oRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oRt.forEach(t),P5r=i(Nl),fn=n(Nl,"P",{});var mA=s(fn);B5r=r(mA,"The model class to instantiate is selected based on the "),F8e=n(mA,"CODE",{});var rRt=s(F8e);I5r=r(rRt,"model_type"),rRt.forEach(t),N5r=r(mA,` property of the config object (either
passed as an argument or loaded from `),T8e=n(mA,"CODE",{});var tRt=s(T8e);q5r=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),j5r=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M8e=n(mA,"CODE",{});var aRt=s(M8e);D5r=r(aRt,"pretrained_model_name_or_path"),aRt.forEach(t),G5r=r(mA,":"),mA.forEach(t),O5r=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);p4=n(fe,"LI",{});var Oje=s(p4);E8e=n(Oje,"STRONG",{});var nRt=s(E8e);V5r=r(nRt,"albert"),nRt.forEach(t),X5r=r(Oje," \u2014 "),lY=n(Oje,"A",{href:!0});var sRt=s(lY);z5r=r(sRt,"TFAlbertForMaskedLM"),sRt.forEach(t),Q5r=r(Oje," (ALBERT model)"),Oje.forEach(t),W5r=i(fe),_4=n(fe,"LI",{});var Vje=s(_4);C8e=n(Vje,"STRONG",{});var lRt=s(C8e);H5r=r(lRt,"bert"),lRt.forEach(t),U5r=r(Vje," \u2014 "),iY=n(Vje,"A",{href:!0});var iRt=s(iY);J5r=r(iRt,"TFBertForMaskedLM"),iRt.forEach(t),Y5r=r(Vje," (BERT model)"),Vje.forEach(t),K5r=i(fe),u4=n(fe,"LI",{});var Xje=s(u4);w8e=n(Xje,"STRONG",{});var dRt=s(w8e);Z5r=r(dRt,"camembert"),dRt.forEach(t),e0r=r(Xje," \u2014 "),dY=n(Xje,"A",{href:!0});var cRt=s(dY);o0r=r(cRt,"TFCamembertForMaskedLM"),cRt.forEach(t),r0r=r(Xje," (CamemBERT model)"),Xje.forEach(t),t0r=i(fe),b4=n(fe,"LI",{});var zje=s(b4);A8e=n(zje,"STRONG",{});var fRt=s(A8e);a0r=r(fRt,"convbert"),fRt.forEach(t),n0r=r(zje," \u2014 "),cY=n(zje,"A",{href:!0});var mRt=s(cY);s0r=r(mRt,"TFConvBertForMaskedLM"),mRt.forEach(t),l0r=r(zje," (ConvBERT model)"),zje.forEach(t),i0r=i(fe),v4=n(fe,"LI",{});var Qje=s(v4);L8e=n(Qje,"STRONG",{});var gRt=s(L8e);d0r=r(gRt,"deberta"),gRt.forEach(t),c0r=r(Qje," \u2014 "),fY=n(Qje,"A",{href:!0});var hRt=s(fY);f0r=r(hRt,"TFDebertaForMaskedLM"),hRt.forEach(t),m0r=r(Qje," (DeBERTa model)"),Qje.forEach(t),g0r=i(fe),F4=n(fe,"LI",{});var Wje=s(F4);y8e=n(Wje,"STRONG",{});var pRt=s(y8e);h0r=r(pRt,"deberta-v2"),pRt.forEach(t),p0r=r(Wje," \u2014 "),mY=n(Wje,"A",{href:!0});var _Rt=s(mY);_0r=r(_Rt,"TFDebertaV2ForMaskedLM"),_Rt.forEach(t),u0r=r(Wje," (DeBERTa-v2 model)"),Wje.forEach(t),b0r=i(fe),T4=n(fe,"LI",{});var Hje=s(T4);x8e=n(Hje,"STRONG",{});var uRt=s(x8e);v0r=r(uRt,"distilbert"),uRt.forEach(t),F0r=r(Hje," \u2014 "),gY=n(Hje,"A",{href:!0});var bRt=s(gY);T0r=r(bRt,"TFDistilBertForMaskedLM"),bRt.forEach(t),M0r=r(Hje," (DistilBERT model)"),Hje.forEach(t),E0r=i(fe),M4=n(fe,"LI",{});var Uje=s(M4);$8e=n(Uje,"STRONG",{});var vRt=s($8e);C0r=r(vRt,"electra"),vRt.forEach(t),w0r=r(Uje," \u2014 "),hY=n(Uje,"A",{href:!0});var FRt=s(hY);A0r=r(FRt,"TFElectraForMaskedLM"),FRt.forEach(t),L0r=r(Uje," (ELECTRA model)"),Uje.forEach(t),y0r=i(fe),E4=n(fe,"LI",{});var Jje=s(E4);k8e=n(Jje,"STRONG",{});var TRt=s(k8e);x0r=r(TRt,"flaubert"),TRt.forEach(t),$0r=r(Jje," \u2014 "),pY=n(Jje,"A",{href:!0});var MRt=s(pY);k0r=r(MRt,"TFFlaubertWithLMHeadModel"),MRt.forEach(t),S0r=r(Jje," (FlauBERT model)"),Jje.forEach(t),R0r=i(fe),C4=n(fe,"LI",{});var Yje=s(C4);S8e=n(Yje,"STRONG",{});var ERt=s(S8e);P0r=r(ERt,"funnel"),ERt.forEach(t),B0r=r(Yje," \u2014 "),_Y=n(Yje,"A",{href:!0});var CRt=s(_Y);I0r=r(CRt,"TFFunnelForMaskedLM"),CRt.forEach(t),N0r=r(Yje," (Funnel Transformer model)"),Yje.forEach(t),q0r=i(fe),w4=n(fe,"LI",{});var Kje=s(w4);R8e=n(Kje,"STRONG",{});var wRt=s(R8e);j0r=r(wRt,"layoutlm"),wRt.forEach(t),D0r=r(Kje," \u2014 "),uY=n(Kje,"A",{href:!0});var ARt=s(uY);G0r=r(ARt,"TFLayoutLMForMaskedLM"),ARt.forEach(t),O0r=r(Kje," (LayoutLM model)"),Kje.forEach(t),V0r=i(fe),A4=n(fe,"LI",{});var Zje=s(A4);P8e=n(Zje,"STRONG",{});var LRt=s(P8e);X0r=r(LRt,"longformer"),LRt.forEach(t),z0r=r(Zje," \u2014 "),bY=n(Zje,"A",{href:!0});var yRt=s(bY);Q0r=r(yRt,"TFLongformerForMaskedLM"),yRt.forEach(t),W0r=r(Zje," (Longformer model)"),Zje.forEach(t),H0r=i(fe),L4=n(fe,"LI",{});var eDe=s(L4);B8e=n(eDe,"STRONG",{});var xRt=s(B8e);U0r=r(xRt,"mobilebert"),xRt.forEach(t),J0r=r(eDe," \u2014 "),vY=n(eDe,"A",{href:!0});var $Rt=s(vY);Y0r=r($Rt,"TFMobileBertForMaskedLM"),$Rt.forEach(t),K0r=r(eDe," (MobileBERT model)"),eDe.forEach(t),Z0r=i(fe),y4=n(fe,"LI",{});var oDe=s(y4);I8e=n(oDe,"STRONG",{});var kRt=s(I8e);ewr=r(kRt,"mpnet"),kRt.forEach(t),owr=r(oDe," \u2014 "),FY=n(oDe,"A",{href:!0});var SRt=s(FY);rwr=r(SRt,"TFMPNetForMaskedLM"),SRt.forEach(t),twr=r(oDe," (MPNet model)"),oDe.forEach(t),awr=i(fe),x4=n(fe,"LI",{});var rDe=s(x4);N8e=n(rDe,"STRONG",{});var RRt=s(N8e);nwr=r(RRt,"rembert"),RRt.forEach(t),swr=r(rDe," \u2014 "),TY=n(rDe,"A",{href:!0});var PRt=s(TY);lwr=r(PRt,"TFRemBertForMaskedLM"),PRt.forEach(t),iwr=r(rDe," (RemBERT model)"),rDe.forEach(t),dwr=i(fe),$4=n(fe,"LI",{});var tDe=s($4);q8e=n(tDe,"STRONG",{});var BRt=s(q8e);cwr=r(BRt,"roberta"),BRt.forEach(t),fwr=r(tDe," \u2014 "),MY=n(tDe,"A",{href:!0});var IRt=s(MY);mwr=r(IRt,"TFRobertaForMaskedLM"),IRt.forEach(t),gwr=r(tDe," (RoBERTa model)"),tDe.forEach(t),hwr=i(fe),k4=n(fe,"LI",{});var aDe=s(k4);j8e=n(aDe,"STRONG",{});var NRt=s(j8e);pwr=r(NRt,"roformer"),NRt.forEach(t),_wr=r(aDe," \u2014 "),EY=n(aDe,"A",{href:!0});var qRt=s(EY);uwr=r(qRt,"TFRoFormerForMaskedLM"),qRt.forEach(t),bwr=r(aDe," (RoFormer model)"),aDe.forEach(t),vwr=i(fe),S4=n(fe,"LI",{});var nDe=s(S4);D8e=n(nDe,"STRONG",{});var jRt=s(D8e);Fwr=r(jRt,"tapas"),jRt.forEach(t),Twr=r(nDe," \u2014 "),CY=n(nDe,"A",{href:!0});var DRt=s(CY);Mwr=r(DRt,"TFTapasForMaskedLM"),DRt.forEach(t),Ewr=r(nDe," (TAPAS model)"),nDe.forEach(t),Cwr=i(fe),R4=n(fe,"LI",{});var sDe=s(R4);G8e=n(sDe,"STRONG",{});var GRt=s(G8e);wwr=r(GRt,"xlm"),GRt.forEach(t),Awr=r(sDe," \u2014 "),wY=n(sDe,"A",{href:!0});var ORt=s(wY);Lwr=r(ORt,"TFXLMWithLMHeadModel"),ORt.forEach(t),ywr=r(sDe," (XLM model)"),sDe.forEach(t),xwr=i(fe),P4=n(fe,"LI",{});var lDe=s(P4);O8e=n(lDe,"STRONG",{});var VRt=s(O8e);$wr=r(VRt,"xlm-roberta"),VRt.forEach(t),kwr=r(lDe," \u2014 "),AY=n(lDe,"A",{href:!0});var XRt=s(AY);Swr=r(XRt,"TFXLMRobertaForMaskedLM"),XRt.forEach(t),Rwr=r(lDe," (XLM-RoBERTa model)"),lDe.forEach(t),fe.forEach(t),Pwr=i(Nl),T(B4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),uze=i(f),Fc=n(f,"H2",{class:!0});var wWe=s(Fc);I4=n(wWe,"A",{id:!0,class:!0,href:!0});var zRt=s(I4);V8e=n(zRt,"SPAN",{});var QRt=s(V8e);T(_x.$$.fragment,QRt),QRt.forEach(t),zRt.forEach(t),Bwr=i(wWe),X8e=n(wWe,"SPAN",{});var WRt=s(X8e);Iwr=r(WRt,"TFAutoModelForSeq2SeqLM"),WRt.forEach(t),wWe.forEach(t),bze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(ux.$$.fragment,ql),Nwr=i(ql),Tc=n(ql,"P",{});var Pte=s(Tc);qwr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=n(Pte,"A",{href:!0});var HRt=s(LY);jwr=r(HRt,"from_pretrained()"),HRt.forEach(t),Dwr=r(Pte," class method or the "),yY=n(Pte,"A",{href:!0});var URt=s(yY);Gwr=r(URt,"from_config()"),URt.forEach(t),Owr=r(Pte,` class
method.`),Pte.forEach(t),Vwr=i(ql),bx=n(ql,"P",{});var AWe=s(bx);Xwr=r(AWe,"This class cannot be instantiated directly using "),z8e=n(AWe,"CODE",{});var JRt=s(z8e);zwr=r(JRt,"__init__()"),JRt.forEach(t),Qwr=r(AWe," (throws an error)."),AWe.forEach(t),Wwr=i(ql),Nt=n(ql,"DIV",{class:!0});var gA=s(Nt);T(vx.$$.fragment,gA),Hwr=i(gA),Q8e=n(gA,"P",{});var YRt=s(Q8e);Uwr=r(YRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YRt.forEach(t),Jwr=i(gA),Mc=n(gA,"P",{});var Bte=s(Mc);Ywr=r(Bte,`Note:
Loading a model from its configuration file does `),W8e=n(Bte,"STRONG",{});var KRt=s(W8e);Kwr=r(KRt,"not"),KRt.forEach(t),Zwr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Bte,"A",{href:!0});var ZRt=s(xY);eAr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),oAr=r(Bte," to load the model weights."),Bte.forEach(t),rAr=i(gA),T(N4.$$.fragment,gA),gA.forEach(t),tAr=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(Fx.$$.fragment,jl),aAr=i(jl),H8e=n(jl,"P",{});var ePt=s(H8e);nAr=r(ePt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ePt.forEach(t),sAr=i(jl),mn=n(jl,"P",{});var hA=s(mn);lAr=r(hA,"The model class to instantiate is selected based on the "),U8e=n(hA,"CODE",{});var oPt=s(U8e);iAr=r(oPt,"model_type"),oPt.forEach(t),dAr=r(hA,` property of the config object (either
passed as an argument or loaded from `),J8e=n(hA,"CODE",{});var rPt=s(J8e);cAr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),fAr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(hA,"CODE",{});var tPt=s(Y8e);mAr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),gAr=r(hA,":"),hA.forEach(t),hAr=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);q4=n(Ie,"LI",{});var iDe=s(q4);K8e=n(iDe,"STRONG",{});var aPt=s(K8e);pAr=r(aPt,"bart"),aPt.forEach(t),_Ar=r(iDe," \u2014 "),$Y=n(iDe,"A",{href:!0});var nPt=s($Y);uAr=r(nPt,"TFBartForConditionalGeneration"),nPt.forEach(t),bAr=r(iDe," (BART model)"),iDe.forEach(t),vAr=i(Ie),j4=n(Ie,"LI",{});var dDe=s(j4);Z8e=n(dDe,"STRONG",{});var sPt=s(Z8e);FAr=r(sPt,"blenderbot"),sPt.forEach(t),TAr=r(dDe," \u2014 "),kY=n(dDe,"A",{href:!0});var lPt=s(kY);MAr=r(lPt,"TFBlenderbotForConditionalGeneration"),lPt.forEach(t),EAr=r(dDe," (Blenderbot model)"),dDe.forEach(t),CAr=i(Ie),D4=n(Ie,"LI",{});var cDe=s(D4);eMe=n(cDe,"STRONG",{});var iPt=s(eMe);wAr=r(iPt,"blenderbot-small"),iPt.forEach(t),AAr=r(cDe," \u2014 "),SY=n(cDe,"A",{href:!0});var dPt=s(SY);LAr=r(dPt,"TFBlenderbotSmallForConditionalGeneration"),dPt.forEach(t),yAr=r(cDe," (BlenderbotSmall model)"),cDe.forEach(t),xAr=i(Ie),G4=n(Ie,"LI",{});var fDe=s(G4);oMe=n(fDe,"STRONG",{});var cPt=s(oMe);$Ar=r(cPt,"encoder-decoder"),cPt.forEach(t),kAr=r(fDe," \u2014 "),RY=n(fDe,"A",{href:!0});var fPt=s(RY);SAr=r(fPt,"TFEncoderDecoderModel"),fPt.forEach(t),RAr=r(fDe," (Encoder decoder model)"),fDe.forEach(t),PAr=i(Ie),O4=n(Ie,"LI",{});var mDe=s(O4);rMe=n(mDe,"STRONG",{});var mPt=s(rMe);BAr=r(mPt,"led"),mPt.forEach(t),IAr=r(mDe," \u2014 "),PY=n(mDe,"A",{href:!0});var gPt=s(PY);NAr=r(gPt,"TFLEDForConditionalGeneration"),gPt.forEach(t),qAr=r(mDe," (LED model)"),mDe.forEach(t),jAr=i(Ie),V4=n(Ie,"LI",{});var gDe=s(V4);tMe=n(gDe,"STRONG",{});var hPt=s(tMe);DAr=r(hPt,"marian"),hPt.forEach(t),GAr=r(gDe," \u2014 "),BY=n(gDe,"A",{href:!0});var pPt=s(BY);OAr=r(pPt,"TFMarianMTModel"),pPt.forEach(t),VAr=r(gDe," (Marian model)"),gDe.forEach(t),XAr=i(Ie),X4=n(Ie,"LI",{});var hDe=s(X4);aMe=n(hDe,"STRONG",{});var _Pt=s(aMe);zAr=r(_Pt,"mbart"),_Pt.forEach(t),QAr=r(hDe," \u2014 "),IY=n(hDe,"A",{href:!0});var uPt=s(IY);WAr=r(uPt,"TFMBartForConditionalGeneration"),uPt.forEach(t),HAr=r(hDe," (mBART model)"),hDe.forEach(t),UAr=i(Ie),z4=n(Ie,"LI",{});var pDe=s(z4);nMe=n(pDe,"STRONG",{});var bPt=s(nMe);JAr=r(bPt,"mt5"),bPt.forEach(t),YAr=r(pDe," \u2014 "),NY=n(pDe,"A",{href:!0});var vPt=s(NY);KAr=r(vPt,"TFMT5ForConditionalGeneration"),vPt.forEach(t),ZAr=r(pDe," (MT5 model)"),pDe.forEach(t),eLr=i(Ie),Q4=n(Ie,"LI",{});var _De=s(Q4);sMe=n(_De,"STRONG",{});var FPt=s(sMe);oLr=r(FPt,"pegasus"),FPt.forEach(t),rLr=r(_De," \u2014 "),qY=n(_De,"A",{href:!0});var TPt=s(qY);tLr=r(TPt,"TFPegasusForConditionalGeneration"),TPt.forEach(t),aLr=r(_De," (Pegasus model)"),_De.forEach(t),nLr=i(Ie),W4=n(Ie,"LI",{});var uDe=s(W4);lMe=n(uDe,"STRONG",{});var MPt=s(lMe);sLr=r(MPt,"t5"),MPt.forEach(t),lLr=r(uDe," \u2014 "),jY=n(uDe,"A",{href:!0});var EPt=s(jY);iLr=r(EPt,"TFT5ForConditionalGeneration"),EPt.forEach(t),dLr=r(uDe," (T5 model)"),uDe.forEach(t),Ie.forEach(t),cLr=i(jl),T(H4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),vze=i(f),Ec=n(f,"H2",{class:!0});var LWe=s(Ec);U4=n(LWe,"A",{id:!0,class:!0,href:!0});var CPt=s(U4);iMe=n(CPt,"SPAN",{});var wPt=s(iMe);T(Tx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),fLr=i(LWe),dMe=n(LWe,"SPAN",{});var APt=s(dMe);mLr=r(APt,"TFAutoModelForSequenceClassification"),APt.forEach(t),LWe.forEach(t),Fze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Mx.$$.fragment,Dl),gLr=i(Dl),Cc=n(Dl,"P",{});var Ite=s(Cc);hLr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=n(Ite,"A",{href:!0});var LPt=s(DY);pLr=r(LPt,"from_pretrained()"),LPt.forEach(t),_Lr=r(Ite," class method or the "),GY=n(Ite,"A",{href:!0});var yPt=s(GY);uLr=r(yPt,"from_config()"),yPt.forEach(t),bLr=r(Ite,` class
method.`),Ite.forEach(t),vLr=i(Dl),Ex=n(Dl,"P",{});var yWe=s(Ex);FLr=r(yWe,"This class cannot be instantiated directly using "),cMe=n(yWe,"CODE",{});var xPt=s(cMe);TLr=r(xPt,"__init__()"),xPt.forEach(t),MLr=r(yWe," (throws an error)."),yWe.forEach(t),ELr=i(Dl),qt=n(Dl,"DIV",{class:!0});var pA=s(qt);T(Cx.$$.fragment,pA),CLr=i(pA),fMe=n(pA,"P",{});var $Pt=s(fMe);wLr=r($Pt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Pt.forEach(t),ALr=i(pA),wc=n(pA,"P",{});var Nte=s(wc);LLr=r(Nte,`Note:
Loading a model from its configuration file does `),mMe=n(Nte,"STRONG",{});var kPt=s(mMe);yLr=r(kPt,"not"),kPt.forEach(t),xLr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Nte,"A",{href:!0});var SPt=s(OY);$Lr=r(SPt,"from_pretrained()"),SPt.forEach(t),kLr=r(Nte," to load the model weights."),Nte.forEach(t),SLr=i(pA),T(J4.$$.fragment,pA),pA.forEach(t),RLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(wx.$$.fragment,Gl),PLr=i(Gl),gMe=n(Gl,"P",{});var RPt=s(gMe);BLr=r(RPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RPt.forEach(t),ILr=i(Gl),gn=n(Gl,"P",{});var _A=s(gn);NLr=r(_A,"The model class to instantiate is selected based on the "),hMe=n(_A,"CODE",{});var PPt=s(hMe);qLr=r(PPt,"model_type"),PPt.forEach(t),jLr=r(_A,` property of the config object (either
passed as an argument or loaded from `),pMe=n(_A,"CODE",{});var BPt=s(pMe);DLr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),GLr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(_A,"CODE",{});var IPt=s(_Me);OLr=r(IPt,"pretrained_model_name_or_path"),IPt.forEach(t),VLr=r(_A,":"),_A.forEach(t),XLr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);Y4=n(ne,"LI",{});var bDe=s(Y4);uMe=n(bDe,"STRONG",{});var NPt=s(uMe);zLr=r(NPt,"albert"),NPt.forEach(t),QLr=r(bDe," \u2014 "),VY=n(bDe,"A",{href:!0});var qPt=s(VY);WLr=r(qPt,"TFAlbertForSequenceClassification"),qPt.forEach(t),HLr=r(bDe," (ALBERT model)"),bDe.forEach(t),ULr=i(ne),K4=n(ne,"LI",{});var vDe=s(K4);bMe=n(vDe,"STRONG",{});var jPt=s(bMe);JLr=r(jPt,"bert"),jPt.forEach(t),YLr=r(vDe," \u2014 "),XY=n(vDe,"A",{href:!0});var DPt=s(XY);KLr=r(DPt,"TFBertForSequenceClassification"),DPt.forEach(t),ZLr=r(vDe," (BERT model)"),vDe.forEach(t),eyr=i(ne),Z4=n(ne,"LI",{});var FDe=s(Z4);vMe=n(FDe,"STRONG",{});var GPt=s(vMe);oyr=r(GPt,"camembert"),GPt.forEach(t),ryr=r(FDe," \u2014 "),zY=n(FDe,"A",{href:!0});var OPt=s(zY);tyr=r(OPt,"TFCamembertForSequenceClassification"),OPt.forEach(t),ayr=r(FDe," (CamemBERT model)"),FDe.forEach(t),nyr=i(ne),eE=n(ne,"LI",{});var TDe=s(eE);FMe=n(TDe,"STRONG",{});var VPt=s(FMe);syr=r(VPt,"convbert"),VPt.forEach(t),lyr=r(TDe," \u2014 "),QY=n(TDe,"A",{href:!0});var XPt=s(QY);iyr=r(XPt,"TFConvBertForSequenceClassification"),XPt.forEach(t),dyr=r(TDe," (ConvBERT model)"),TDe.forEach(t),cyr=i(ne),oE=n(ne,"LI",{});var MDe=s(oE);TMe=n(MDe,"STRONG",{});var zPt=s(TMe);fyr=r(zPt,"ctrl"),zPt.forEach(t),myr=r(MDe," \u2014 "),WY=n(MDe,"A",{href:!0});var QPt=s(WY);gyr=r(QPt,"TFCTRLForSequenceClassification"),QPt.forEach(t),hyr=r(MDe," (CTRL model)"),MDe.forEach(t),pyr=i(ne),rE=n(ne,"LI",{});var EDe=s(rE);MMe=n(EDe,"STRONG",{});var WPt=s(MMe);_yr=r(WPt,"deberta"),WPt.forEach(t),uyr=r(EDe," \u2014 "),HY=n(EDe,"A",{href:!0});var HPt=s(HY);byr=r(HPt,"TFDebertaForSequenceClassification"),HPt.forEach(t),vyr=r(EDe," (DeBERTa model)"),EDe.forEach(t),Fyr=i(ne),tE=n(ne,"LI",{});var CDe=s(tE);EMe=n(CDe,"STRONG",{});var UPt=s(EMe);Tyr=r(UPt,"deberta-v2"),UPt.forEach(t),Myr=r(CDe," \u2014 "),UY=n(CDe,"A",{href:!0});var JPt=s(UY);Eyr=r(JPt,"TFDebertaV2ForSequenceClassification"),JPt.forEach(t),Cyr=r(CDe," (DeBERTa-v2 model)"),CDe.forEach(t),wyr=i(ne),aE=n(ne,"LI",{});var wDe=s(aE);CMe=n(wDe,"STRONG",{});var YPt=s(CMe);Ayr=r(YPt,"distilbert"),YPt.forEach(t),Lyr=r(wDe," \u2014 "),JY=n(wDe,"A",{href:!0});var KPt=s(JY);yyr=r(KPt,"TFDistilBertForSequenceClassification"),KPt.forEach(t),xyr=r(wDe," (DistilBERT model)"),wDe.forEach(t),$yr=i(ne),nE=n(ne,"LI",{});var ADe=s(nE);wMe=n(ADe,"STRONG",{});var ZPt=s(wMe);kyr=r(ZPt,"electra"),ZPt.forEach(t),Syr=r(ADe," \u2014 "),YY=n(ADe,"A",{href:!0});var eBt=s(YY);Ryr=r(eBt,"TFElectraForSequenceClassification"),eBt.forEach(t),Pyr=r(ADe," (ELECTRA model)"),ADe.forEach(t),Byr=i(ne),sE=n(ne,"LI",{});var LDe=s(sE);AMe=n(LDe,"STRONG",{});var oBt=s(AMe);Iyr=r(oBt,"flaubert"),oBt.forEach(t),Nyr=r(LDe," \u2014 "),KY=n(LDe,"A",{href:!0});var rBt=s(KY);qyr=r(rBt,"TFFlaubertForSequenceClassification"),rBt.forEach(t),jyr=r(LDe," (FlauBERT model)"),LDe.forEach(t),Dyr=i(ne),lE=n(ne,"LI",{});var yDe=s(lE);LMe=n(yDe,"STRONG",{});var tBt=s(LMe);Gyr=r(tBt,"funnel"),tBt.forEach(t),Oyr=r(yDe," \u2014 "),ZY=n(yDe,"A",{href:!0});var aBt=s(ZY);Vyr=r(aBt,"TFFunnelForSequenceClassification"),aBt.forEach(t),Xyr=r(yDe," (Funnel Transformer model)"),yDe.forEach(t),zyr=i(ne),iE=n(ne,"LI",{});var xDe=s(iE);yMe=n(xDe,"STRONG",{});var nBt=s(yMe);Qyr=r(nBt,"gpt2"),nBt.forEach(t),Wyr=r(xDe," \u2014 "),eK=n(xDe,"A",{href:!0});var sBt=s(eK);Hyr=r(sBt,"TFGPT2ForSequenceClassification"),sBt.forEach(t),Uyr=r(xDe," (OpenAI GPT-2 model)"),xDe.forEach(t),Jyr=i(ne),dE=n(ne,"LI",{});var $De=s(dE);xMe=n($De,"STRONG",{});var lBt=s(xMe);Yyr=r(lBt,"gptj"),lBt.forEach(t),Kyr=r($De," \u2014 "),oK=n($De,"A",{href:!0});var iBt=s(oK);Zyr=r(iBt,"TFGPTJForSequenceClassification"),iBt.forEach(t),e9r=r($De," (GPT-J model)"),$De.forEach(t),o9r=i(ne),cE=n(ne,"LI",{});var kDe=s(cE);$Me=n(kDe,"STRONG",{});var dBt=s($Me);r9r=r(dBt,"layoutlm"),dBt.forEach(t),t9r=r(kDe," \u2014 "),rK=n(kDe,"A",{href:!0});var cBt=s(rK);a9r=r(cBt,"TFLayoutLMForSequenceClassification"),cBt.forEach(t),n9r=r(kDe," (LayoutLM model)"),kDe.forEach(t),s9r=i(ne),fE=n(ne,"LI",{});var SDe=s(fE);kMe=n(SDe,"STRONG",{});var fBt=s(kMe);l9r=r(fBt,"longformer"),fBt.forEach(t),i9r=r(SDe," \u2014 "),tK=n(SDe,"A",{href:!0});var mBt=s(tK);d9r=r(mBt,"TFLongformerForSequenceClassification"),mBt.forEach(t),c9r=r(SDe," (Longformer model)"),SDe.forEach(t),f9r=i(ne),mE=n(ne,"LI",{});var RDe=s(mE);SMe=n(RDe,"STRONG",{});var gBt=s(SMe);m9r=r(gBt,"mobilebert"),gBt.forEach(t),g9r=r(RDe," \u2014 "),aK=n(RDe,"A",{href:!0});var hBt=s(aK);h9r=r(hBt,"TFMobileBertForSequenceClassification"),hBt.forEach(t),p9r=r(RDe," (MobileBERT model)"),RDe.forEach(t),_9r=i(ne),gE=n(ne,"LI",{});var PDe=s(gE);RMe=n(PDe,"STRONG",{});var pBt=s(RMe);u9r=r(pBt,"mpnet"),pBt.forEach(t),b9r=r(PDe," \u2014 "),nK=n(PDe,"A",{href:!0});var _Bt=s(nK);v9r=r(_Bt,"TFMPNetForSequenceClassification"),_Bt.forEach(t),F9r=r(PDe," (MPNet model)"),PDe.forEach(t),T9r=i(ne),hE=n(ne,"LI",{});var BDe=s(hE);PMe=n(BDe,"STRONG",{});var uBt=s(PMe);M9r=r(uBt,"openai-gpt"),uBt.forEach(t),E9r=r(BDe," \u2014 "),sK=n(BDe,"A",{href:!0});var bBt=s(sK);C9r=r(bBt,"TFOpenAIGPTForSequenceClassification"),bBt.forEach(t),w9r=r(BDe," (OpenAI GPT model)"),BDe.forEach(t),A9r=i(ne),pE=n(ne,"LI",{});var IDe=s(pE);BMe=n(IDe,"STRONG",{});var vBt=s(BMe);L9r=r(vBt,"rembert"),vBt.forEach(t),y9r=r(IDe," \u2014 "),lK=n(IDe,"A",{href:!0});var FBt=s(lK);x9r=r(FBt,"TFRemBertForSequenceClassification"),FBt.forEach(t),$9r=r(IDe," (RemBERT model)"),IDe.forEach(t),k9r=i(ne),_E=n(ne,"LI",{});var NDe=s(_E);IMe=n(NDe,"STRONG",{});var TBt=s(IMe);S9r=r(TBt,"roberta"),TBt.forEach(t),R9r=r(NDe," \u2014 "),iK=n(NDe,"A",{href:!0});var MBt=s(iK);P9r=r(MBt,"TFRobertaForSequenceClassification"),MBt.forEach(t),B9r=r(NDe," (RoBERTa model)"),NDe.forEach(t),I9r=i(ne),uE=n(ne,"LI",{});var qDe=s(uE);NMe=n(qDe,"STRONG",{});var EBt=s(NMe);N9r=r(EBt,"roformer"),EBt.forEach(t),q9r=r(qDe," \u2014 "),dK=n(qDe,"A",{href:!0});var CBt=s(dK);j9r=r(CBt,"TFRoFormerForSequenceClassification"),CBt.forEach(t),D9r=r(qDe," (RoFormer model)"),qDe.forEach(t),G9r=i(ne),bE=n(ne,"LI",{});var jDe=s(bE);qMe=n(jDe,"STRONG",{});var wBt=s(qMe);O9r=r(wBt,"tapas"),wBt.forEach(t),V9r=r(jDe," \u2014 "),cK=n(jDe,"A",{href:!0});var ABt=s(cK);X9r=r(ABt,"TFTapasForSequenceClassification"),ABt.forEach(t),z9r=r(jDe," (TAPAS model)"),jDe.forEach(t),Q9r=i(ne),vE=n(ne,"LI",{});var DDe=s(vE);jMe=n(DDe,"STRONG",{});var LBt=s(jMe);W9r=r(LBt,"transfo-xl"),LBt.forEach(t),H9r=r(DDe," \u2014 "),fK=n(DDe,"A",{href:!0});var yBt=s(fK);U9r=r(yBt,"TFTransfoXLForSequenceClassification"),yBt.forEach(t),J9r=r(DDe," (Transformer-XL model)"),DDe.forEach(t),Y9r=i(ne),FE=n(ne,"LI",{});var GDe=s(FE);DMe=n(GDe,"STRONG",{});var xBt=s(DMe);K9r=r(xBt,"xlm"),xBt.forEach(t),Z9r=r(GDe," \u2014 "),mK=n(GDe,"A",{href:!0});var $Bt=s(mK);exr=r($Bt,"TFXLMForSequenceClassification"),$Bt.forEach(t),oxr=r(GDe," (XLM model)"),GDe.forEach(t),rxr=i(ne),TE=n(ne,"LI",{});var ODe=s(TE);GMe=n(ODe,"STRONG",{});var kBt=s(GMe);txr=r(kBt,"xlm-roberta"),kBt.forEach(t),axr=r(ODe," \u2014 "),gK=n(ODe,"A",{href:!0});var SBt=s(gK);nxr=r(SBt,"TFXLMRobertaForSequenceClassification"),SBt.forEach(t),sxr=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),lxr=i(ne),ME=n(ne,"LI",{});var VDe=s(ME);OMe=n(VDe,"STRONG",{});var RBt=s(OMe);ixr=r(RBt,"xlnet"),RBt.forEach(t),dxr=r(VDe," \u2014 "),hK=n(VDe,"A",{href:!0});var PBt=s(hK);cxr=r(PBt,"TFXLNetForSequenceClassification"),PBt.forEach(t),fxr=r(VDe," (XLNet model)"),VDe.forEach(t),ne.forEach(t),mxr=i(Gl),T(EE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Tze=i(f),Ac=n(f,"H2",{class:!0});var xWe=s(Ac);CE=n(xWe,"A",{id:!0,class:!0,href:!0});var BBt=s(CE);VMe=n(BBt,"SPAN",{});var IBt=s(VMe);T(Ax.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),gxr=i(xWe),XMe=n(xWe,"SPAN",{});var NBt=s(XMe);hxr=r(NBt,"TFAutoModelForMultipleChoice"),NBt.forEach(t),xWe.forEach(t),Mze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Lx.$$.fragment,Ol),pxr=i(Ol),Lc=n(Ol,"P",{});var qte=s(Lc);_xr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pK=n(qte,"A",{href:!0});var qBt=s(pK);uxr=r(qBt,"from_pretrained()"),qBt.forEach(t),bxr=r(qte," class method or the "),_K=n(qte,"A",{href:!0});var jBt=s(_K);vxr=r(jBt,"from_config()"),jBt.forEach(t),Fxr=r(qte,` class
method.`),qte.forEach(t),Txr=i(Ol),yx=n(Ol,"P",{});var $We=s(yx);Mxr=r($We,"This class cannot be instantiated directly using "),zMe=n($We,"CODE",{});var DBt=s(zMe);Exr=r(DBt,"__init__()"),DBt.forEach(t),Cxr=r($We," (throws an error)."),$We.forEach(t),wxr=i(Ol),jt=n(Ol,"DIV",{class:!0});var uA=s(jt);T(xx.$$.fragment,uA),Axr=i(uA),QMe=n(uA,"P",{});var GBt=s(QMe);Lxr=r(GBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GBt.forEach(t),yxr=i(uA),yc=n(uA,"P",{});var jte=s(yc);xxr=r(jte,`Note:
Loading a model from its configuration file does `),WMe=n(jte,"STRONG",{});var OBt=s(WMe);$xr=r(OBt,"not"),OBt.forEach(t),kxr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(jte,"A",{href:!0});var VBt=s(uK);Sxr=r(VBt,"from_pretrained()"),VBt.forEach(t),Rxr=r(jte," to load the model weights."),jte.forEach(t),Pxr=i(uA),T(wE.$$.fragment,uA),uA.forEach(t),Bxr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T($x.$$.fragment,Vl),Ixr=i(Vl),HMe=n(Vl,"P",{});var XBt=s(HMe);Nxr=r(XBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XBt.forEach(t),qxr=i(Vl),hn=n(Vl,"P",{});var bA=s(hn);jxr=r(bA,"The model class to instantiate is selected based on the "),UMe=n(bA,"CODE",{});var zBt=s(UMe);Dxr=r(zBt,"model_type"),zBt.forEach(t),Gxr=r(bA,` property of the config object (either
passed as an argument or loaded from `),JMe=n(bA,"CODE",{});var QBt=s(JMe);Oxr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),Vxr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(bA,"CODE",{});var WBt=s(YMe);Xxr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),zxr=r(bA,":"),bA.forEach(t),Qxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);AE=n(Fe,"LI",{});var XDe=s(AE);KMe=n(XDe,"STRONG",{});var HBt=s(KMe);Wxr=r(HBt,"albert"),HBt.forEach(t),Hxr=r(XDe," \u2014 "),bK=n(XDe,"A",{href:!0});var UBt=s(bK);Uxr=r(UBt,"TFAlbertForMultipleChoice"),UBt.forEach(t),Jxr=r(XDe," (ALBERT model)"),XDe.forEach(t),Yxr=i(Fe),LE=n(Fe,"LI",{});var zDe=s(LE);ZMe=n(zDe,"STRONG",{});var JBt=s(ZMe);Kxr=r(JBt,"bert"),JBt.forEach(t),Zxr=r(zDe," \u2014 "),vK=n(zDe,"A",{href:!0});var YBt=s(vK);e$r=r(YBt,"TFBertForMultipleChoice"),YBt.forEach(t),o$r=r(zDe," (BERT model)"),zDe.forEach(t),r$r=i(Fe),yE=n(Fe,"LI",{});var QDe=s(yE);e4e=n(QDe,"STRONG",{});var KBt=s(e4e);t$r=r(KBt,"camembert"),KBt.forEach(t),a$r=r(QDe," \u2014 "),FK=n(QDe,"A",{href:!0});var ZBt=s(FK);n$r=r(ZBt,"TFCamembertForMultipleChoice"),ZBt.forEach(t),s$r=r(QDe," (CamemBERT model)"),QDe.forEach(t),l$r=i(Fe),xE=n(Fe,"LI",{});var WDe=s(xE);o4e=n(WDe,"STRONG",{});var eIt=s(o4e);i$r=r(eIt,"convbert"),eIt.forEach(t),d$r=r(WDe," \u2014 "),TK=n(WDe,"A",{href:!0});var oIt=s(TK);c$r=r(oIt,"TFConvBertForMultipleChoice"),oIt.forEach(t),f$r=r(WDe," (ConvBERT model)"),WDe.forEach(t),m$r=i(Fe),$E=n(Fe,"LI",{});var HDe=s($E);r4e=n(HDe,"STRONG",{});var rIt=s(r4e);g$r=r(rIt,"distilbert"),rIt.forEach(t),h$r=r(HDe," \u2014 "),MK=n(HDe,"A",{href:!0});var tIt=s(MK);p$r=r(tIt,"TFDistilBertForMultipleChoice"),tIt.forEach(t),_$r=r(HDe," (DistilBERT model)"),HDe.forEach(t),u$r=i(Fe),kE=n(Fe,"LI",{});var UDe=s(kE);t4e=n(UDe,"STRONG",{});var aIt=s(t4e);b$r=r(aIt,"electra"),aIt.forEach(t),v$r=r(UDe," \u2014 "),EK=n(UDe,"A",{href:!0});var nIt=s(EK);F$r=r(nIt,"TFElectraForMultipleChoice"),nIt.forEach(t),T$r=r(UDe," (ELECTRA model)"),UDe.forEach(t),M$r=i(Fe),SE=n(Fe,"LI",{});var JDe=s(SE);a4e=n(JDe,"STRONG",{});var sIt=s(a4e);E$r=r(sIt,"flaubert"),sIt.forEach(t),C$r=r(JDe," \u2014 "),CK=n(JDe,"A",{href:!0});var lIt=s(CK);w$r=r(lIt,"TFFlaubertForMultipleChoice"),lIt.forEach(t),A$r=r(JDe," (FlauBERT model)"),JDe.forEach(t),L$r=i(Fe),RE=n(Fe,"LI",{});var YDe=s(RE);n4e=n(YDe,"STRONG",{});var iIt=s(n4e);y$r=r(iIt,"funnel"),iIt.forEach(t),x$r=r(YDe," \u2014 "),wK=n(YDe,"A",{href:!0});var dIt=s(wK);$$r=r(dIt,"TFFunnelForMultipleChoice"),dIt.forEach(t),k$r=r(YDe," (Funnel Transformer model)"),YDe.forEach(t),S$r=i(Fe),PE=n(Fe,"LI",{});var KDe=s(PE);s4e=n(KDe,"STRONG",{});var cIt=s(s4e);R$r=r(cIt,"longformer"),cIt.forEach(t),P$r=r(KDe," \u2014 "),AK=n(KDe,"A",{href:!0});var fIt=s(AK);B$r=r(fIt,"TFLongformerForMultipleChoice"),fIt.forEach(t),I$r=r(KDe," (Longformer model)"),KDe.forEach(t),N$r=i(Fe),BE=n(Fe,"LI",{});var ZDe=s(BE);l4e=n(ZDe,"STRONG",{});var mIt=s(l4e);q$r=r(mIt,"mobilebert"),mIt.forEach(t),j$r=r(ZDe," \u2014 "),LK=n(ZDe,"A",{href:!0});var gIt=s(LK);D$r=r(gIt,"TFMobileBertForMultipleChoice"),gIt.forEach(t),G$r=r(ZDe," (MobileBERT model)"),ZDe.forEach(t),O$r=i(Fe),IE=n(Fe,"LI",{});var eGe=s(IE);i4e=n(eGe,"STRONG",{});var hIt=s(i4e);V$r=r(hIt,"mpnet"),hIt.forEach(t),X$r=r(eGe," \u2014 "),yK=n(eGe,"A",{href:!0});var pIt=s(yK);z$r=r(pIt,"TFMPNetForMultipleChoice"),pIt.forEach(t),Q$r=r(eGe," (MPNet model)"),eGe.forEach(t),W$r=i(Fe),NE=n(Fe,"LI",{});var oGe=s(NE);d4e=n(oGe,"STRONG",{});var _It=s(d4e);H$r=r(_It,"rembert"),_It.forEach(t),U$r=r(oGe," \u2014 "),xK=n(oGe,"A",{href:!0});var uIt=s(xK);J$r=r(uIt,"TFRemBertForMultipleChoice"),uIt.forEach(t),Y$r=r(oGe," (RemBERT model)"),oGe.forEach(t),K$r=i(Fe),qE=n(Fe,"LI",{});var rGe=s(qE);c4e=n(rGe,"STRONG",{});var bIt=s(c4e);Z$r=r(bIt,"roberta"),bIt.forEach(t),ekr=r(rGe," \u2014 "),$K=n(rGe,"A",{href:!0});var vIt=s($K);okr=r(vIt,"TFRobertaForMultipleChoice"),vIt.forEach(t),rkr=r(rGe," (RoBERTa model)"),rGe.forEach(t),tkr=i(Fe),jE=n(Fe,"LI",{});var tGe=s(jE);f4e=n(tGe,"STRONG",{});var FIt=s(f4e);akr=r(FIt,"roformer"),FIt.forEach(t),nkr=r(tGe," \u2014 "),kK=n(tGe,"A",{href:!0});var TIt=s(kK);skr=r(TIt,"TFRoFormerForMultipleChoice"),TIt.forEach(t),lkr=r(tGe," (RoFormer model)"),tGe.forEach(t),ikr=i(Fe),DE=n(Fe,"LI",{});var aGe=s(DE);m4e=n(aGe,"STRONG",{});var MIt=s(m4e);dkr=r(MIt,"xlm"),MIt.forEach(t),ckr=r(aGe," \u2014 "),SK=n(aGe,"A",{href:!0});var EIt=s(SK);fkr=r(EIt,"TFXLMForMultipleChoice"),EIt.forEach(t),mkr=r(aGe," (XLM model)"),aGe.forEach(t),gkr=i(Fe),GE=n(Fe,"LI",{});var nGe=s(GE);g4e=n(nGe,"STRONG",{});var CIt=s(g4e);hkr=r(CIt,"xlm-roberta"),CIt.forEach(t),pkr=r(nGe," \u2014 "),RK=n(nGe,"A",{href:!0});var wIt=s(RK);_kr=r(wIt,"TFXLMRobertaForMultipleChoice"),wIt.forEach(t),ukr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),bkr=i(Fe),OE=n(Fe,"LI",{});var sGe=s(OE);h4e=n(sGe,"STRONG",{});var AIt=s(h4e);vkr=r(AIt,"xlnet"),AIt.forEach(t),Fkr=r(sGe," \u2014 "),PK=n(sGe,"A",{href:!0});var LIt=s(PK);Tkr=r(LIt,"TFXLNetForMultipleChoice"),LIt.forEach(t),Mkr=r(sGe," (XLNet model)"),sGe.forEach(t),Fe.forEach(t),Ekr=i(Vl),T(VE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Eze=i(f),xc=n(f,"H2",{class:!0});var kWe=s(xc);XE=n(kWe,"A",{id:!0,class:!0,href:!0});var yIt=s(XE);p4e=n(yIt,"SPAN",{});var xIt=s(p4e);T(kx.$$.fragment,xIt),xIt.forEach(t),yIt.forEach(t),Ckr=i(kWe),_4e=n(kWe,"SPAN",{});var $It=s(_4e);wkr=r($It,"TFAutoModelForNextSentencePrediction"),$It.forEach(t),kWe.forEach(t),Cze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(Sx.$$.fragment,Xl),Akr=i(Xl),$c=n(Xl,"P",{});var Dte=s($c);Lkr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BK=n(Dte,"A",{href:!0});var kIt=s(BK);ykr=r(kIt,"from_pretrained()"),kIt.forEach(t),xkr=r(Dte," class method or the "),IK=n(Dte,"A",{href:!0});var SIt=s(IK);$kr=r(SIt,"from_config()"),SIt.forEach(t),kkr=r(Dte,` class
method.`),Dte.forEach(t),Skr=i(Xl),Rx=n(Xl,"P",{});var SWe=s(Rx);Rkr=r(SWe,"This class cannot be instantiated directly using "),u4e=n(SWe,"CODE",{});var RIt=s(u4e);Pkr=r(RIt,"__init__()"),RIt.forEach(t),Bkr=r(SWe," (throws an error)."),SWe.forEach(t),Ikr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var vA=s(Dt);T(Px.$$.fragment,vA),Nkr=i(vA),b4e=n(vA,"P",{});var PIt=s(b4e);qkr=r(PIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PIt.forEach(t),jkr=i(vA),kc=n(vA,"P",{});var Gte=s(kc);Dkr=r(Gte,`Note:
Loading a model from its configuration file does `),v4e=n(Gte,"STRONG",{});var BIt=s(v4e);Gkr=r(BIt,"not"),BIt.forEach(t),Okr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(Gte,"A",{href:!0});var IIt=s(NK);Vkr=r(IIt,"from_pretrained()"),IIt.forEach(t),Xkr=r(Gte," to load the model weights."),Gte.forEach(t),zkr=i(vA),T(zE.$$.fragment,vA),vA.forEach(t),Qkr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Bx.$$.fragment,zl),Wkr=i(zl),F4e=n(zl,"P",{});var NIt=s(F4e);Hkr=r(NIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NIt.forEach(t),Ukr=i(zl),pn=n(zl,"P",{});var FA=s(pn);Jkr=r(FA,"The model class to instantiate is selected based on the "),T4e=n(FA,"CODE",{});var qIt=s(T4e);Ykr=r(qIt,"model_type"),qIt.forEach(t),Kkr=r(FA,` property of the config object (either
passed as an argument or loaded from `),M4e=n(FA,"CODE",{});var jIt=s(M4e);Zkr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),eSr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(FA,"CODE",{});var DIt=s(E4e);oSr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),rSr=r(FA,":"),FA.forEach(t),tSr=i(zl),Ix=n(zl,"UL",{});var RWe=s(Ix);QE=n(RWe,"LI",{});var lGe=s(QE);C4e=n(lGe,"STRONG",{});var GIt=s(C4e);aSr=r(GIt,"bert"),GIt.forEach(t),nSr=r(lGe," \u2014 "),qK=n(lGe,"A",{href:!0});var OIt=s(qK);sSr=r(OIt,"TFBertForNextSentencePrediction"),OIt.forEach(t),lSr=r(lGe," (BERT model)"),lGe.forEach(t),iSr=i(RWe),WE=n(RWe,"LI",{});var iGe=s(WE);w4e=n(iGe,"STRONG",{});var VIt=s(w4e);dSr=r(VIt,"mobilebert"),VIt.forEach(t),cSr=r(iGe," \u2014 "),jK=n(iGe,"A",{href:!0});var XIt=s(jK);fSr=r(XIt,"TFMobileBertForNextSentencePrediction"),XIt.forEach(t),mSr=r(iGe," (MobileBERT model)"),iGe.forEach(t),RWe.forEach(t),gSr=i(zl),T(HE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),wze=i(f),Sc=n(f,"H2",{class:!0});var PWe=s(Sc);UE=n(PWe,"A",{id:!0,class:!0,href:!0});var zIt=s(UE);A4e=n(zIt,"SPAN",{});var QIt=s(A4e);T(Nx.$$.fragment,QIt),QIt.forEach(t),zIt.forEach(t),hSr=i(PWe),L4e=n(PWe,"SPAN",{});var WIt=s(L4e);pSr=r(WIt,"TFAutoModelForTableQuestionAnswering"),WIt.forEach(t),PWe.forEach(t),Aze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(qx.$$.fragment,Ql),_Sr=i(Ql),Rc=n(Ql,"P",{});var Ote=s(Rc);uSr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DK=n(Ote,"A",{href:!0});var HIt=s(DK);bSr=r(HIt,"from_pretrained()"),HIt.forEach(t),vSr=r(Ote," class method or the "),GK=n(Ote,"A",{href:!0});var UIt=s(GK);FSr=r(UIt,"from_config()"),UIt.forEach(t),TSr=r(Ote,` class
method.`),Ote.forEach(t),MSr=i(Ql),jx=n(Ql,"P",{});var BWe=s(jx);ESr=r(BWe,"This class cannot be instantiated directly using "),y4e=n(BWe,"CODE",{});var JIt=s(y4e);CSr=r(JIt,"__init__()"),JIt.forEach(t),wSr=r(BWe," (throws an error)."),BWe.forEach(t),ASr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var TA=s(Gt);T(Dx.$$.fragment,TA),LSr=i(TA),x4e=n(TA,"P",{});var YIt=s(x4e);ySr=r(YIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YIt.forEach(t),xSr=i(TA),Pc=n(TA,"P",{});var Vte=s(Pc);$Sr=r(Vte,`Note:
Loading a model from its configuration file does `),$4e=n(Vte,"STRONG",{});var KIt=s($4e);kSr=r(KIt,"not"),KIt.forEach(t),SSr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Vte,"A",{href:!0});var ZIt=s(OK);RSr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),PSr=r(Vte," to load the model weights."),Vte.forEach(t),BSr=i(TA),T(JE.$$.fragment,TA),TA.forEach(t),ISr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Gx.$$.fragment,Wl),NSr=i(Wl),k4e=n(Wl,"P",{});var eNt=s(k4e);qSr=r(eNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eNt.forEach(t),jSr=i(Wl),_n=n(Wl,"P",{});var MA=s(_n);DSr=r(MA,"The model class to instantiate is selected based on the "),S4e=n(MA,"CODE",{});var oNt=s(S4e);GSr=r(oNt,"model_type"),oNt.forEach(t),OSr=r(MA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(MA,"CODE",{});var rNt=s(R4e);VSr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),XSr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(MA,"CODE",{});var tNt=s(P4e);zSr=r(tNt,"pretrained_model_name_or_path"),tNt.forEach(t),QSr=r(MA,":"),MA.forEach(t),WSr=i(Wl),B4e=n(Wl,"UL",{});var aNt=s(B4e);YE=n(aNt,"LI",{});var dGe=s(YE);I4e=n(dGe,"STRONG",{});var nNt=s(I4e);HSr=r(nNt,"tapas"),nNt.forEach(t),USr=r(dGe," \u2014 "),VK=n(dGe,"A",{href:!0});var sNt=s(VK);JSr=r(sNt,"TFTapasForQuestionAnswering"),sNt.forEach(t),YSr=r(dGe," (TAPAS model)"),dGe.forEach(t),aNt.forEach(t),KSr=i(Wl),T(KE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lze=i(f),Bc=n(f,"H2",{class:!0});var IWe=s(Bc);ZE=n(IWe,"A",{id:!0,class:!0,href:!0});var lNt=s(ZE);N4e=n(lNt,"SPAN",{});var iNt=s(N4e);T(Ox.$$.fragment,iNt),iNt.forEach(t),lNt.forEach(t),ZSr=i(IWe),q4e=n(IWe,"SPAN",{});var dNt=s(q4e);eRr=r(dNt,"TFAutoModelForTokenClassification"),dNt.forEach(t),IWe.forEach(t),yze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Vx.$$.fragment,Hl),oRr=i(Hl),Ic=n(Hl,"P",{});var Xte=s(Ic);rRr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XK=n(Xte,"A",{href:!0});var cNt=s(XK);tRr=r(cNt,"from_pretrained()"),cNt.forEach(t),aRr=r(Xte," class method or the "),zK=n(Xte,"A",{href:!0});var fNt=s(zK);nRr=r(fNt,"from_config()"),fNt.forEach(t),sRr=r(Xte,` class
method.`),Xte.forEach(t),lRr=i(Hl),Xx=n(Hl,"P",{});var NWe=s(Xx);iRr=r(NWe,"This class cannot be instantiated directly using "),j4e=n(NWe,"CODE",{});var mNt=s(j4e);dRr=r(mNt,"__init__()"),mNt.forEach(t),cRr=r(NWe," (throws an error)."),NWe.forEach(t),fRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var EA=s(Ot);T(zx.$$.fragment,EA),mRr=i(EA),D4e=n(EA,"P",{});var gNt=s(D4e);gRr=r(gNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gNt.forEach(t),hRr=i(EA),Nc=n(EA,"P",{});var zte=s(Nc);pRr=r(zte,`Note:
Loading a model from its configuration file does `),G4e=n(zte,"STRONG",{});var hNt=s(G4e);_Rr=r(hNt,"not"),hNt.forEach(t),uRr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(zte,"A",{href:!0});var pNt=s(QK);bRr=r(pNt,"from_pretrained()"),pNt.forEach(t),vRr=r(zte," to load the model weights."),zte.forEach(t),FRr=i(EA),T(eC.$$.fragment,EA),EA.forEach(t),TRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Qx.$$.fragment,Ul),MRr=i(Ul),O4e=n(Ul,"P",{});var _Nt=s(O4e);ERr=r(_Nt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_Nt.forEach(t),CRr=i(Ul),un=n(Ul,"P",{});var CA=s(un);wRr=r(CA,"The model class to instantiate is selected based on the "),V4e=n(CA,"CODE",{});var uNt=s(V4e);ARr=r(uNt,"model_type"),uNt.forEach(t),LRr=r(CA,` property of the config object (either
passed as an argument or loaded from `),X4e=n(CA,"CODE",{});var bNt=s(X4e);yRr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),xRr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(CA,"CODE",{});var vNt=s(z4e);$Rr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),kRr=r(CA,":"),CA.forEach(t),SRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);oC=n(me,"LI",{});var cGe=s(oC);Q4e=n(cGe,"STRONG",{});var FNt=s(Q4e);RRr=r(FNt,"albert"),FNt.forEach(t),PRr=r(cGe," \u2014 "),WK=n(cGe,"A",{href:!0});var TNt=s(WK);BRr=r(TNt,"TFAlbertForTokenClassification"),TNt.forEach(t),IRr=r(cGe," (ALBERT model)"),cGe.forEach(t),NRr=i(me),rC=n(me,"LI",{});var fGe=s(rC);W4e=n(fGe,"STRONG",{});var MNt=s(W4e);qRr=r(MNt,"bert"),MNt.forEach(t),jRr=r(fGe," \u2014 "),HK=n(fGe,"A",{href:!0});var ENt=s(HK);DRr=r(ENt,"TFBertForTokenClassification"),ENt.forEach(t),GRr=r(fGe," (BERT model)"),fGe.forEach(t),ORr=i(me),tC=n(me,"LI",{});var mGe=s(tC);H4e=n(mGe,"STRONG",{});var CNt=s(H4e);VRr=r(CNt,"camembert"),CNt.forEach(t),XRr=r(mGe," \u2014 "),UK=n(mGe,"A",{href:!0});var wNt=s(UK);zRr=r(wNt,"TFCamembertForTokenClassification"),wNt.forEach(t),QRr=r(mGe," (CamemBERT model)"),mGe.forEach(t),WRr=i(me),aC=n(me,"LI",{});var gGe=s(aC);U4e=n(gGe,"STRONG",{});var ANt=s(U4e);HRr=r(ANt,"convbert"),ANt.forEach(t),URr=r(gGe," \u2014 "),JK=n(gGe,"A",{href:!0});var LNt=s(JK);JRr=r(LNt,"TFConvBertForTokenClassification"),LNt.forEach(t),YRr=r(gGe," (ConvBERT model)"),gGe.forEach(t),KRr=i(me),nC=n(me,"LI",{});var hGe=s(nC);J4e=n(hGe,"STRONG",{});var yNt=s(J4e);ZRr=r(yNt,"deberta"),yNt.forEach(t),ePr=r(hGe," \u2014 "),YK=n(hGe,"A",{href:!0});var xNt=s(YK);oPr=r(xNt,"TFDebertaForTokenClassification"),xNt.forEach(t),rPr=r(hGe," (DeBERTa model)"),hGe.forEach(t),tPr=i(me),sC=n(me,"LI",{});var pGe=s(sC);Y4e=n(pGe,"STRONG",{});var $Nt=s(Y4e);aPr=r($Nt,"deberta-v2"),$Nt.forEach(t),nPr=r(pGe," \u2014 "),KK=n(pGe,"A",{href:!0});var kNt=s(KK);sPr=r(kNt,"TFDebertaV2ForTokenClassification"),kNt.forEach(t),lPr=r(pGe," (DeBERTa-v2 model)"),pGe.forEach(t),iPr=i(me),lC=n(me,"LI",{});var _Ge=s(lC);K4e=n(_Ge,"STRONG",{});var SNt=s(K4e);dPr=r(SNt,"distilbert"),SNt.forEach(t),cPr=r(_Ge," \u2014 "),ZK=n(_Ge,"A",{href:!0});var RNt=s(ZK);fPr=r(RNt,"TFDistilBertForTokenClassification"),RNt.forEach(t),mPr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),gPr=i(me),iC=n(me,"LI",{});var uGe=s(iC);Z4e=n(uGe,"STRONG",{});var PNt=s(Z4e);hPr=r(PNt,"electra"),PNt.forEach(t),pPr=r(uGe," \u2014 "),eZ=n(uGe,"A",{href:!0});var BNt=s(eZ);_Pr=r(BNt,"TFElectraForTokenClassification"),BNt.forEach(t),uPr=r(uGe," (ELECTRA model)"),uGe.forEach(t),bPr=i(me),dC=n(me,"LI",{});var bGe=s(dC);eEe=n(bGe,"STRONG",{});var INt=s(eEe);vPr=r(INt,"flaubert"),INt.forEach(t),FPr=r(bGe," \u2014 "),oZ=n(bGe,"A",{href:!0});var NNt=s(oZ);TPr=r(NNt,"TFFlaubertForTokenClassification"),NNt.forEach(t),MPr=r(bGe," (FlauBERT model)"),bGe.forEach(t),EPr=i(me),cC=n(me,"LI",{});var vGe=s(cC);oEe=n(vGe,"STRONG",{});var qNt=s(oEe);CPr=r(qNt,"funnel"),qNt.forEach(t),wPr=r(vGe," \u2014 "),rZ=n(vGe,"A",{href:!0});var jNt=s(rZ);APr=r(jNt,"TFFunnelForTokenClassification"),jNt.forEach(t),LPr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),yPr=i(me),fC=n(me,"LI",{});var FGe=s(fC);rEe=n(FGe,"STRONG",{});var DNt=s(rEe);xPr=r(DNt,"layoutlm"),DNt.forEach(t),$Pr=r(FGe," \u2014 "),tZ=n(FGe,"A",{href:!0});var GNt=s(tZ);kPr=r(GNt,"TFLayoutLMForTokenClassification"),GNt.forEach(t),SPr=r(FGe," (LayoutLM model)"),FGe.forEach(t),RPr=i(me),mC=n(me,"LI",{});var TGe=s(mC);tEe=n(TGe,"STRONG",{});var ONt=s(tEe);PPr=r(ONt,"longformer"),ONt.forEach(t),BPr=r(TGe," \u2014 "),aZ=n(TGe,"A",{href:!0});var VNt=s(aZ);IPr=r(VNt,"TFLongformerForTokenClassification"),VNt.forEach(t),NPr=r(TGe," (Longformer model)"),TGe.forEach(t),qPr=i(me),gC=n(me,"LI",{});var MGe=s(gC);aEe=n(MGe,"STRONG",{});var XNt=s(aEe);jPr=r(XNt,"mobilebert"),XNt.forEach(t),DPr=r(MGe," \u2014 "),nZ=n(MGe,"A",{href:!0});var zNt=s(nZ);GPr=r(zNt,"TFMobileBertForTokenClassification"),zNt.forEach(t),OPr=r(MGe," (MobileBERT model)"),MGe.forEach(t),VPr=i(me),hC=n(me,"LI",{});var EGe=s(hC);nEe=n(EGe,"STRONG",{});var QNt=s(nEe);XPr=r(QNt,"mpnet"),QNt.forEach(t),zPr=r(EGe," \u2014 "),sZ=n(EGe,"A",{href:!0});var WNt=s(sZ);QPr=r(WNt,"TFMPNetForTokenClassification"),WNt.forEach(t),WPr=r(EGe," (MPNet model)"),EGe.forEach(t),HPr=i(me),pC=n(me,"LI",{});var CGe=s(pC);sEe=n(CGe,"STRONG",{});var HNt=s(sEe);UPr=r(HNt,"rembert"),HNt.forEach(t),JPr=r(CGe," \u2014 "),lZ=n(CGe,"A",{href:!0});var UNt=s(lZ);YPr=r(UNt,"TFRemBertForTokenClassification"),UNt.forEach(t),KPr=r(CGe," (RemBERT model)"),CGe.forEach(t),ZPr=i(me),_C=n(me,"LI",{});var wGe=s(_C);lEe=n(wGe,"STRONG",{});var JNt=s(lEe);eBr=r(JNt,"roberta"),JNt.forEach(t),oBr=r(wGe," \u2014 "),iZ=n(wGe,"A",{href:!0});var YNt=s(iZ);rBr=r(YNt,"TFRobertaForTokenClassification"),YNt.forEach(t),tBr=r(wGe," (RoBERTa model)"),wGe.forEach(t),aBr=i(me),uC=n(me,"LI",{});var AGe=s(uC);iEe=n(AGe,"STRONG",{});var KNt=s(iEe);nBr=r(KNt,"roformer"),KNt.forEach(t),sBr=r(AGe," \u2014 "),dZ=n(AGe,"A",{href:!0});var ZNt=s(dZ);lBr=r(ZNt,"TFRoFormerForTokenClassification"),ZNt.forEach(t),iBr=r(AGe," (RoFormer model)"),AGe.forEach(t),dBr=i(me),bC=n(me,"LI",{});var LGe=s(bC);dEe=n(LGe,"STRONG",{});var eqt=s(dEe);cBr=r(eqt,"xlm"),eqt.forEach(t),fBr=r(LGe," \u2014 "),cZ=n(LGe,"A",{href:!0});var oqt=s(cZ);mBr=r(oqt,"TFXLMForTokenClassification"),oqt.forEach(t),gBr=r(LGe," (XLM model)"),LGe.forEach(t),hBr=i(me),vC=n(me,"LI",{});var yGe=s(vC);cEe=n(yGe,"STRONG",{});var rqt=s(cEe);pBr=r(rqt,"xlm-roberta"),rqt.forEach(t),_Br=r(yGe," \u2014 "),fZ=n(yGe,"A",{href:!0});var tqt=s(fZ);uBr=r(tqt,"TFXLMRobertaForTokenClassification"),tqt.forEach(t),bBr=r(yGe," (XLM-RoBERTa model)"),yGe.forEach(t),vBr=i(me),FC=n(me,"LI",{});var xGe=s(FC);fEe=n(xGe,"STRONG",{});var aqt=s(fEe);FBr=r(aqt,"xlnet"),aqt.forEach(t),TBr=r(xGe," \u2014 "),mZ=n(xGe,"A",{href:!0});var nqt=s(mZ);MBr=r(nqt,"TFXLNetForTokenClassification"),nqt.forEach(t),EBr=r(xGe," (XLNet model)"),xGe.forEach(t),me.forEach(t),CBr=i(Ul),T(TC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),xze=i(f),qc=n(f,"H2",{class:!0});var qWe=s(qc);MC=n(qWe,"A",{id:!0,class:!0,href:!0});var sqt=s(MC);mEe=n(sqt,"SPAN",{});var lqt=s(mEe);T(Wx.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),wBr=i(qWe),gEe=n(qWe,"SPAN",{});var iqt=s(gEe);ABr=r(iqt,"TFAutoModelForQuestionAnswering"),iqt.forEach(t),qWe.forEach(t),$ze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Hx.$$.fragment,Jl),LBr=i(Jl),jc=n(Jl,"P",{});var Qte=s(jc);yBr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gZ=n(Qte,"A",{href:!0});var dqt=s(gZ);xBr=r(dqt,"from_pretrained()"),dqt.forEach(t),$Br=r(Qte," class method or the "),hZ=n(Qte,"A",{href:!0});var cqt=s(hZ);kBr=r(cqt,"from_config()"),cqt.forEach(t),SBr=r(Qte,` class
method.`),Qte.forEach(t),RBr=i(Jl),Ux=n(Jl,"P",{});var jWe=s(Ux);PBr=r(jWe,"This class cannot be instantiated directly using "),hEe=n(jWe,"CODE",{});var fqt=s(hEe);BBr=r(fqt,"__init__()"),fqt.forEach(t),IBr=r(jWe," (throws an error)."),jWe.forEach(t),NBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var wA=s(Vt);T(Jx.$$.fragment,wA),qBr=i(wA),pEe=n(wA,"P",{});var mqt=s(pEe);jBr=r(mqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mqt.forEach(t),DBr=i(wA),Dc=n(wA,"P",{});var Wte=s(Dc);GBr=r(Wte,`Note:
Loading a model from its configuration file does `),_Ee=n(Wte,"STRONG",{});var gqt=s(_Ee);OBr=r(gqt,"not"),gqt.forEach(t),VBr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Wte,"A",{href:!0});var hqt=s(pZ);XBr=r(hqt,"from_pretrained()"),hqt.forEach(t),zBr=r(Wte," to load the model weights."),Wte.forEach(t),QBr=i(wA),T(EC.$$.fragment,wA),wA.forEach(t),WBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Yx.$$.fragment,Yl),HBr=i(Yl),uEe=n(Yl,"P",{});var pqt=s(uEe);UBr=r(pqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pqt.forEach(t),JBr=i(Yl),bn=n(Yl,"P",{});var AA=s(bn);YBr=r(AA,"The model class to instantiate is selected based on the "),bEe=n(AA,"CODE",{});var _qt=s(bEe);KBr=r(_qt,"model_type"),_qt.forEach(t),ZBr=r(AA,` property of the config object (either
passed as an argument or loaded from `),vEe=n(AA,"CODE",{});var uqt=s(vEe);eIr=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),oIr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(AA,"CODE",{});var bqt=s(FEe);rIr=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),tIr=r(AA,":"),AA.forEach(t),aIr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);CC=n(ge,"LI",{});var $Ge=s(CC);TEe=n($Ge,"STRONG",{});var vqt=s(TEe);nIr=r(vqt,"albert"),vqt.forEach(t),sIr=r($Ge," \u2014 "),_Z=n($Ge,"A",{href:!0});var Fqt=s(_Z);lIr=r(Fqt,"TFAlbertForQuestionAnswering"),Fqt.forEach(t),iIr=r($Ge," (ALBERT model)"),$Ge.forEach(t),dIr=i(ge),wC=n(ge,"LI",{});var kGe=s(wC);MEe=n(kGe,"STRONG",{});var Tqt=s(MEe);cIr=r(Tqt,"bert"),Tqt.forEach(t),fIr=r(kGe," \u2014 "),uZ=n(kGe,"A",{href:!0});var Mqt=s(uZ);mIr=r(Mqt,"TFBertForQuestionAnswering"),Mqt.forEach(t),gIr=r(kGe," (BERT model)"),kGe.forEach(t),hIr=i(ge),AC=n(ge,"LI",{});var SGe=s(AC);EEe=n(SGe,"STRONG",{});var Eqt=s(EEe);pIr=r(Eqt,"camembert"),Eqt.forEach(t),_Ir=r(SGe," \u2014 "),bZ=n(SGe,"A",{href:!0});var Cqt=s(bZ);uIr=r(Cqt,"TFCamembertForQuestionAnswering"),Cqt.forEach(t),bIr=r(SGe," (CamemBERT model)"),SGe.forEach(t),vIr=i(ge),LC=n(ge,"LI",{});var RGe=s(LC);CEe=n(RGe,"STRONG",{});var wqt=s(CEe);FIr=r(wqt,"convbert"),wqt.forEach(t),TIr=r(RGe," \u2014 "),vZ=n(RGe,"A",{href:!0});var Aqt=s(vZ);MIr=r(Aqt,"TFConvBertForQuestionAnswering"),Aqt.forEach(t),EIr=r(RGe," (ConvBERT model)"),RGe.forEach(t),CIr=i(ge),yC=n(ge,"LI",{});var PGe=s(yC);wEe=n(PGe,"STRONG",{});var Lqt=s(wEe);wIr=r(Lqt,"deberta"),Lqt.forEach(t),AIr=r(PGe," \u2014 "),FZ=n(PGe,"A",{href:!0});var yqt=s(FZ);LIr=r(yqt,"TFDebertaForQuestionAnswering"),yqt.forEach(t),yIr=r(PGe," (DeBERTa model)"),PGe.forEach(t),xIr=i(ge),xC=n(ge,"LI",{});var BGe=s(xC);AEe=n(BGe,"STRONG",{});var xqt=s(AEe);$Ir=r(xqt,"deberta-v2"),xqt.forEach(t),kIr=r(BGe," \u2014 "),TZ=n(BGe,"A",{href:!0});var $qt=s(TZ);SIr=r($qt,"TFDebertaV2ForQuestionAnswering"),$qt.forEach(t),RIr=r(BGe," (DeBERTa-v2 model)"),BGe.forEach(t),PIr=i(ge),$C=n(ge,"LI",{});var IGe=s($C);LEe=n(IGe,"STRONG",{});var kqt=s(LEe);BIr=r(kqt,"distilbert"),kqt.forEach(t),IIr=r(IGe," \u2014 "),MZ=n(IGe,"A",{href:!0});var Sqt=s(MZ);NIr=r(Sqt,"TFDistilBertForQuestionAnswering"),Sqt.forEach(t),qIr=r(IGe," (DistilBERT model)"),IGe.forEach(t),jIr=i(ge),kC=n(ge,"LI",{});var NGe=s(kC);yEe=n(NGe,"STRONG",{});var Rqt=s(yEe);DIr=r(Rqt,"electra"),Rqt.forEach(t),GIr=r(NGe," \u2014 "),EZ=n(NGe,"A",{href:!0});var Pqt=s(EZ);OIr=r(Pqt,"TFElectraForQuestionAnswering"),Pqt.forEach(t),VIr=r(NGe," (ELECTRA model)"),NGe.forEach(t),XIr=i(ge),SC=n(ge,"LI",{});var qGe=s(SC);xEe=n(qGe,"STRONG",{});var Bqt=s(xEe);zIr=r(Bqt,"flaubert"),Bqt.forEach(t),QIr=r(qGe," \u2014 "),CZ=n(qGe,"A",{href:!0});var Iqt=s(CZ);WIr=r(Iqt,"TFFlaubertForQuestionAnsweringSimple"),Iqt.forEach(t),HIr=r(qGe," (FlauBERT model)"),qGe.forEach(t),UIr=i(ge),RC=n(ge,"LI",{});var jGe=s(RC);$Ee=n(jGe,"STRONG",{});var Nqt=s($Ee);JIr=r(Nqt,"funnel"),Nqt.forEach(t),YIr=r(jGe," \u2014 "),wZ=n(jGe,"A",{href:!0});var qqt=s(wZ);KIr=r(qqt,"TFFunnelForQuestionAnswering"),qqt.forEach(t),ZIr=r(jGe," (Funnel Transformer model)"),jGe.forEach(t),eNr=i(ge),PC=n(ge,"LI",{});var DGe=s(PC);kEe=n(DGe,"STRONG",{});var jqt=s(kEe);oNr=r(jqt,"gptj"),jqt.forEach(t),rNr=r(DGe," \u2014 "),AZ=n(DGe,"A",{href:!0});var Dqt=s(AZ);tNr=r(Dqt,"TFGPTJForQuestionAnswering"),Dqt.forEach(t),aNr=r(DGe," (GPT-J model)"),DGe.forEach(t),nNr=i(ge),BC=n(ge,"LI",{});var GGe=s(BC);SEe=n(GGe,"STRONG",{});var Gqt=s(SEe);sNr=r(Gqt,"longformer"),Gqt.forEach(t),lNr=r(GGe," \u2014 "),LZ=n(GGe,"A",{href:!0});var Oqt=s(LZ);iNr=r(Oqt,"TFLongformerForQuestionAnswering"),Oqt.forEach(t),dNr=r(GGe," (Longformer model)"),GGe.forEach(t),cNr=i(ge),IC=n(ge,"LI",{});var OGe=s(IC);REe=n(OGe,"STRONG",{});var Vqt=s(REe);fNr=r(Vqt,"mobilebert"),Vqt.forEach(t),mNr=r(OGe," \u2014 "),yZ=n(OGe,"A",{href:!0});var Xqt=s(yZ);gNr=r(Xqt,"TFMobileBertForQuestionAnswering"),Xqt.forEach(t),hNr=r(OGe," (MobileBERT model)"),OGe.forEach(t),pNr=i(ge),NC=n(ge,"LI",{});var VGe=s(NC);PEe=n(VGe,"STRONG",{});var zqt=s(PEe);_Nr=r(zqt,"mpnet"),zqt.forEach(t),uNr=r(VGe," \u2014 "),xZ=n(VGe,"A",{href:!0});var Qqt=s(xZ);bNr=r(Qqt,"TFMPNetForQuestionAnswering"),Qqt.forEach(t),vNr=r(VGe," (MPNet model)"),VGe.forEach(t),FNr=i(ge),qC=n(ge,"LI",{});var XGe=s(qC);BEe=n(XGe,"STRONG",{});var Wqt=s(BEe);TNr=r(Wqt,"rembert"),Wqt.forEach(t),MNr=r(XGe," \u2014 "),$Z=n(XGe,"A",{href:!0});var Hqt=s($Z);ENr=r(Hqt,"TFRemBertForQuestionAnswering"),Hqt.forEach(t),CNr=r(XGe," (RemBERT model)"),XGe.forEach(t),wNr=i(ge),jC=n(ge,"LI",{});var zGe=s(jC);IEe=n(zGe,"STRONG",{});var Uqt=s(IEe);ANr=r(Uqt,"roberta"),Uqt.forEach(t),LNr=r(zGe," \u2014 "),kZ=n(zGe,"A",{href:!0});var Jqt=s(kZ);yNr=r(Jqt,"TFRobertaForQuestionAnswering"),Jqt.forEach(t),xNr=r(zGe," (RoBERTa model)"),zGe.forEach(t),$Nr=i(ge),DC=n(ge,"LI",{});var QGe=s(DC);NEe=n(QGe,"STRONG",{});var Yqt=s(NEe);kNr=r(Yqt,"roformer"),Yqt.forEach(t),SNr=r(QGe," \u2014 "),SZ=n(QGe,"A",{href:!0});var Kqt=s(SZ);RNr=r(Kqt,"TFRoFormerForQuestionAnswering"),Kqt.forEach(t),PNr=r(QGe," (RoFormer model)"),QGe.forEach(t),BNr=i(ge),GC=n(ge,"LI",{});var WGe=s(GC);qEe=n(WGe,"STRONG",{});var Zqt=s(qEe);INr=r(Zqt,"xlm"),Zqt.forEach(t),NNr=r(WGe," \u2014 "),RZ=n(WGe,"A",{href:!0});var ejt=s(RZ);qNr=r(ejt,"TFXLMForQuestionAnsweringSimple"),ejt.forEach(t),jNr=r(WGe," (XLM model)"),WGe.forEach(t),DNr=i(ge),OC=n(ge,"LI",{});var HGe=s(OC);jEe=n(HGe,"STRONG",{});var ojt=s(jEe);GNr=r(ojt,"xlm-roberta"),ojt.forEach(t),ONr=r(HGe," \u2014 "),PZ=n(HGe,"A",{href:!0});var rjt=s(PZ);VNr=r(rjt,"TFXLMRobertaForQuestionAnswering"),rjt.forEach(t),XNr=r(HGe," (XLM-RoBERTa model)"),HGe.forEach(t),zNr=i(ge),VC=n(ge,"LI",{});var UGe=s(VC);DEe=n(UGe,"STRONG",{});var tjt=s(DEe);QNr=r(tjt,"xlnet"),tjt.forEach(t),WNr=r(UGe," \u2014 "),BZ=n(UGe,"A",{href:!0});var ajt=s(BZ);HNr=r(ajt,"TFXLNetForQuestionAnsweringSimple"),ajt.forEach(t),UNr=r(UGe," (XLNet model)"),UGe.forEach(t),ge.forEach(t),JNr=i(Yl),T(XC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),kze=i(f),Gc=n(f,"H2",{class:!0});var DWe=s(Gc);zC=n(DWe,"A",{id:!0,class:!0,href:!0});var njt=s(zC);GEe=n(njt,"SPAN",{});var sjt=s(GEe);T(Kx.$$.fragment,sjt),sjt.forEach(t),njt.forEach(t),YNr=i(DWe),OEe=n(DWe,"SPAN",{});var ljt=s(OEe);KNr=r(ljt,"TFAutoModelForVision2Seq"),ljt.forEach(t),DWe.forEach(t),Sze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Zx.$$.fragment,Kl),ZNr=i(Kl),Oc=n(Kl,"P",{});var Hte=s(Oc);eqr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IZ=n(Hte,"A",{href:!0});var ijt=s(IZ);oqr=r(ijt,"from_pretrained()"),ijt.forEach(t),rqr=r(Hte," class method or the "),NZ=n(Hte,"A",{href:!0});var djt=s(NZ);tqr=r(djt,"from_config()"),djt.forEach(t),aqr=r(Hte,` class
method.`),Hte.forEach(t),nqr=i(Kl),e$=n(Kl,"P",{});var GWe=s(e$);sqr=r(GWe,"This class cannot be instantiated directly using "),VEe=n(GWe,"CODE",{});var cjt=s(VEe);lqr=r(cjt,"__init__()"),cjt.forEach(t),iqr=r(GWe," (throws an error)."),GWe.forEach(t),dqr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var LA=s(Xt);T(o$.$$.fragment,LA),cqr=i(LA),XEe=n(LA,"P",{});var fjt=s(XEe);fqr=r(fjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fjt.forEach(t),mqr=i(LA),Vc=n(LA,"P",{});var Ute=s(Vc);gqr=r(Ute,`Note:
Loading a model from its configuration file does `),zEe=n(Ute,"STRONG",{});var mjt=s(zEe);hqr=r(mjt,"not"),mjt.forEach(t),pqr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Ute,"A",{href:!0});var gjt=s(qZ);_qr=r(gjt,"from_pretrained()"),gjt.forEach(t),uqr=r(Ute," to load the model weights."),Ute.forEach(t),bqr=i(LA),T(QC.$$.fragment,LA),LA.forEach(t),vqr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(r$.$$.fragment,Zl),Fqr=i(Zl),QEe=n(Zl,"P",{});var hjt=s(QEe);Tqr=r(hjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hjt.forEach(t),Mqr=i(Zl),vn=n(Zl,"P",{});var yA=s(vn);Eqr=r(yA,"The model class to instantiate is selected based on the "),WEe=n(yA,"CODE",{});var pjt=s(WEe);Cqr=r(pjt,"model_type"),pjt.forEach(t),wqr=r(yA,` property of the config object (either
passed as an argument or loaded from `),HEe=n(yA,"CODE",{});var _jt=s(HEe);Aqr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),Lqr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(yA,"CODE",{});var ujt=s(UEe);yqr=r(ujt,"pretrained_model_name_or_path"),ujt.forEach(t),xqr=r(yA,":"),yA.forEach(t),$qr=i(Zl),JEe=n(Zl,"UL",{});var bjt=s(JEe);WC=n(bjt,"LI",{});var JGe=s(WC);YEe=n(JGe,"STRONG",{});var vjt=s(YEe);kqr=r(vjt,"vision-encoder-decoder"),vjt.forEach(t),Sqr=r(JGe," \u2014 "),jZ=n(JGe,"A",{href:!0});var Fjt=s(jZ);Rqr=r(Fjt,"TFVisionEncoderDecoderModel"),Fjt.forEach(t),Pqr=r(JGe," (Vision Encoder decoder model)"),JGe.forEach(t),bjt.forEach(t),Bqr=i(Zl),T(HC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Rze=i(f),Xc=n(f,"H2",{class:!0});var OWe=s(Xc);UC=n(OWe,"A",{id:!0,class:!0,href:!0});var Tjt=s(UC);KEe=n(Tjt,"SPAN",{});var Mjt=s(KEe);T(t$.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),Iqr=i(OWe),ZEe=n(OWe,"SPAN",{});var Ejt=s(ZEe);Nqr=r(Ejt,"TFAutoModelForSpeechSeq2Seq"),Ejt.forEach(t),OWe.forEach(t),Pze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(a$.$$.fragment,ei),qqr=i(ei),zc=n(ei,"P",{});var Jte=s(zc);jqr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DZ=n(Jte,"A",{href:!0});var Cjt=s(DZ);Dqr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),Gqr=r(Jte," class method or the "),GZ=n(Jte,"A",{href:!0});var wjt=s(GZ);Oqr=r(wjt,"from_config()"),wjt.forEach(t),Vqr=r(Jte,` class
method.`),Jte.forEach(t),Xqr=i(ei),n$=n(ei,"P",{});var VWe=s(n$);zqr=r(VWe,"This class cannot be instantiated directly using "),eCe=n(VWe,"CODE",{});var Ajt=s(eCe);Qqr=r(Ajt,"__init__()"),Ajt.forEach(t),Wqr=r(VWe," (throws an error)."),VWe.forEach(t),Hqr=i(ei),zt=n(ei,"DIV",{class:!0});var xA=s(zt);T(s$.$$.fragment,xA),Uqr=i(xA),oCe=n(xA,"P",{});var Ljt=s(oCe);Jqr=r(Ljt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ljt.forEach(t),Yqr=i(xA),Qc=n(xA,"P",{});var Yte=s(Qc);Kqr=r(Yte,`Note:
Loading a model from its configuration file does `),rCe=n(Yte,"STRONG",{});var yjt=s(rCe);Zqr=r(yjt,"not"),yjt.forEach(t),ejr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Yte,"A",{href:!0});var xjt=s(OZ);ojr=r(xjt,"from_pretrained()"),xjt.forEach(t),rjr=r(Yte," to load the model weights."),Yte.forEach(t),tjr=i(xA),T(JC.$$.fragment,xA),xA.forEach(t),ajr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(l$.$$.fragment,oi),njr=i(oi),tCe=n(oi,"P",{});var $jt=s(tCe);sjr=r($jt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$jt.forEach(t),ljr=i(oi),Fn=n(oi,"P",{});var $A=s(Fn);ijr=r($A,"The model class to instantiate is selected based on the "),aCe=n($A,"CODE",{});var kjt=s(aCe);djr=r(kjt,"model_type"),kjt.forEach(t),cjr=r($A,` property of the config object (either
passed as an argument or loaded from `),nCe=n($A,"CODE",{});var Sjt=s(nCe);fjr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),mjr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n($A,"CODE",{});var Rjt=s(sCe);gjr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),hjr=r($A,":"),$A.forEach(t),pjr=i(oi),lCe=n(oi,"UL",{});var Pjt=s(lCe);YC=n(Pjt,"LI",{});var YGe=s(YC);iCe=n(YGe,"STRONG",{});var Bjt=s(iCe);_jr=r(Bjt,"speech_to_text"),Bjt.forEach(t),ujr=r(YGe," \u2014 "),VZ=n(YGe,"A",{href:!0});var Ijt=s(VZ);bjr=r(Ijt,"TFSpeech2TextForConditionalGeneration"),Ijt.forEach(t),vjr=r(YGe," (Speech2Text model)"),YGe.forEach(t),Pjt.forEach(t),Fjr=i(oi),T(KC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Bze=i(f),Wc=n(f,"H2",{class:!0});var XWe=s(Wc);ZC=n(XWe,"A",{id:!0,class:!0,href:!0});var Njt=s(ZC);dCe=n(Njt,"SPAN",{});var qjt=s(dCe);T(i$.$$.fragment,qjt),qjt.forEach(t),Njt.forEach(t),Tjr=i(XWe),cCe=n(XWe,"SPAN",{});var jjt=s(cCe);Mjr=r(jjt,"FlaxAutoModel"),jjt.forEach(t),XWe.forEach(t),Ize=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(d$.$$.fragment,ri),Ejr=i(ri),Hc=n(ri,"P",{});var Kte=s(Hc);Cjr=r(Kte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XZ=n(Kte,"A",{href:!0});var Djt=s(XZ);wjr=r(Djt,"from_pretrained()"),Djt.forEach(t),Ajr=r(Kte," class method or the "),zZ=n(Kte,"A",{href:!0});var Gjt=s(zZ);Ljr=r(Gjt,"from_config()"),Gjt.forEach(t),yjr=r(Kte,` class
method.`),Kte.forEach(t),xjr=i(ri),c$=n(ri,"P",{});var zWe=s(c$);$jr=r(zWe,"This class cannot be instantiated directly using "),fCe=n(zWe,"CODE",{});var Ojt=s(fCe);kjr=r(Ojt,"__init__()"),Ojt.forEach(t),Sjr=r(zWe," (throws an error)."),zWe.forEach(t),Rjr=i(ri),Qt=n(ri,"DIV",{class:!0});var kA=s(Qt);T(f$.$$.fragment,kA),Pjr=i(kA),mCe=n(kA,"P",{});var Vjt=s(mCe);Bjr=r(Vjt,"Instantiates one of the base model classes of the library from a configuration."),Vjt.forEach(t),Ijr=i(kA),Uc=n(kA,"P",{});var Zte=s(Uc);Njr=r(Zte,`Note:
Loading a model from its configuration file does `),gCe=n(Zte,"STRONG",{});var Xjt=s(gCe);qjr=r(Xjt,"not"),Xjt.forEach(t),jjr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Zte,"A",{href:!0});var zjt=s(QZ);Djr=r(zjt,"from_pretrained()"),zjt.forEach(t),Gjr=r(Zte," to load the model weights."),Zte.forEach(t),Ojr=i(kA),T(e3.$$.fragment,kA),kA.forEach(t),Vjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(m$.$$.fragment,ti),Xjr=i(ti),hCe=n(ti,"P",{});var Qjt=s(hCe);zjr=r(Qjt,"Instantiate one of the base model classes of the library from a pretrained model."),Qjt.forEach(t),Qjr=i(ti),Tn=n(ti,"P",{});var SA=s(Tn);Wjr=r(SA,"The model class to instantiate is selected based on the "),pCe=n(SA,"CODE",{});var Wjt=s(pCe);Hjr=r(Wjt,"model_type"),Wjt.forEach(t),Ujr=r(SA,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(SA,"CODE",{});var Hjt=s(_Ce);Jjr=r(Hjt,"pretrained_model_name_or_path"),Hjt.forEach(t),Yjr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(SA,"CODE",{});var Ujt=s(uCe);Kjr=r(Ujt,"pretrained_model_name_or_path"),Ujt.forEach(t),Zjr=r(SA,":"),SA.forEach(t),eDr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);o3=n(ae,"LI",{});var KGe=s(o3);bCe=n(KGe,"STRONG",{});var Jjt=s(bCe);oDr=r(Jjt,"albert"),Jjt.forEach(t),rDr=r(KGe," \u2014 "),WZ=n(KGe,"A",{href:!0});var Yjt=s(WZ);tDr=r(Yjt,"FlaxAlbertModel"),Yjt.forEach(t),aDr=r(KGe," (ALBERT model)"),KGe.forEach(t),nDr=i(ae),r3=n(ae,"LI",{});var ZGe=s(r3);vCe=n(ZGe,"STRONG",{});var Kjt=s(vCe);sDr=r(Kjt,"bart"),Kjt.forEach(t),lDr=r(ZGe," \u2014 "),HZ=n(ZGe,"A",{href:!0});var Zjt=s(HZ);iDr=r(Zjt,"FlaxBartModel"),Zjt.forEach(t),dDr=r(ZGe," (BART model)"),ZGe.forEach(t),cDr=i(ae),t3=n(ae,"LI",{});var eOe=s(t3);FCe=n(eOe,"STRONG",{});var eDt=s(FCe);fDr=r(eDt,"beit"),eDt.forEach(t),mDr=r(eOe," \u2014 "),UZ=n(eOe,"A",{href:!0});var oDt=s(UZ);gDr=r(oDt,"FlaxBeitModel"),oDt.forEach(t),hDr=r(eOe," (BEiT model)"),eOe.forEach(t),pDr=i(ae),a3=n(ae,"LI",{});var oOe=s(a3);TCe=n(oOe,"STRONG",{});var rDt=s(TCe);_Dr=r(rDt,"bert"),rDt.forEach(t),uDr=r(oOe," \u2014 "),JZ=n(oOe,"A",{href:!0});var tDt=s(JZ);bDr=r(tDt,"FlaxBertModel"),tDt.forEach(t),vDr=r(oOe," (BERT model)"),oOe.forEach(t),FDr=i(ae),n3=n(ae,"LI",{});var rOe=s(n3);MCe=n(rOe,"STRONG",{});var aDt=s(MCe);TDr=r(aDt,"big_bird"),aDt.forEach(t),MDr=r(rOe," \u2014 "),YZ=n(rOe,"A",{href:!0});var nDt=s(YZ);EDr=r(nDt,"FlaxBigBirdModel"),nDt.forEach(t),CDr=r(rOe," (BigBird model)"),rOe.forEach(t),wDr=i(ae),s3=n(ae,"LI",{});var tOe=s(s3);ECe=n(tOe,"STRONG",{});var sDt=s(ECe);ADr=r(sDt,"blenderbot"),sDt.forEach(t),LDr=r(tOe," \u2014 "),KZ=n(tOe,"A",{href:!0});var lDt=s(KZ);yDr=r(lDt,"FlaxBlenderbotModel"),lDt.forEach(t),xDr=r(tOe," (Blenderbot model)"),tOe.forEach(t),$Dr=i(ae),l3=n(ae,"LI",{});var aOe=s(l3);CCe=n(aOe,"STRONG",{});var iDt=s(CCe);kDr=r(iDt,"blenderbot-small"),iDt.forEach(t),SDr=r(aOe," \u2014 "),ZZ=n(aOe,"A",{href:!0});var dDt=s(ZZ);RDr=r(dDt,"FlaxBlenderbotSmallModel"),dDt.forEach(t),PDr=r(aOe," (BlenderbotSmall model)"),aOe.forEach(t),BDr=i(ae),i3=n(ae,"LI",{});var nOe=s(i3);wCe=n(nOe,"STRONG",{});var cDt=s(wCe);IDr=r(cDt,"clip"),cDt.forEach(t),NDr=r(nOe," \u2014 "),eee=n(nOe,"A",{href:!0});var fDt=s(eee);qDr=r(fDt,"FlaxCLIPModel"),fDt.forEach(t),jDr=r(nOe," (CLIP model)"),nOe.forEach(t),DDr=i(ae),d3=n(ae,"LI",{});var sOe=s(d3);ACe=n(sOe,"STRONG",{});var mDt=s(ACe);GDr=r(mDt,"distilbert"),mDt.forEach(t),ODr=r(sOe," \u2014 "),oee=n(sOe,"A",{href:!0});var gDt=s(oee);VDr=r(gDt,"FlaxDistilBertModel"),gDt.forEach(t),XDr=r(sOe," (DistilBERT model)"),sOe.forEach(t),zDr=i(ae),c3=n(ae,"LI",{});var lOe=s(c3);LCe=n(lOe,"STRONG",{});var hDt=s(LCe);QDr=r(hDt,"electra"),hDt.forEach(t),WDr=r(lOe," \u2014 "),ree=n(lOe,"A",{href:!0});var pDt=s(ree);HDr=r(pDt,"FlaxElectraModel"),pDt.forEach(t),UDr=r(lOe," (ELECTRA model)"),lOe.forEach(t),JDr=i(ae),f3=n(ae,"LI",{});var iOe=s(f3);yCe=n(iOe,"STRONG",{});var _Dt=s(yCe);YDr=r(_Dt,"gpt2"),_Dt.forEach(t),KDr=r(iOe," \u2014 "),tee=n(iOe,"A",{href:!0});var uDt=s(tee);ZDr=r(uDt,"FlaxGPT2Model"),uDt.forEach(t),eGr=r(iOe," (OpenAI GPT-2 model)"),iOe.forEach(t),oGr=i(ae),m3=n(ae,"LI",{});var dOe=s(m3);xCe=n(dOe,"STRONG",{});var bDt=s(xCe);rGr=r(bDt,"gpt_neo"),bDt.forEach(t),tGr=r(dOe," \u2014 "),aee=n(dOe,"A",{href:!0});var vDt=s(aee);aGr=r(vDt,"FlaxGPTNeoModel"),vDt.forEach(t),nGr=r(dOe," (GPT Neo model)"),dOe.forEach(t),sGr=i(ae),g3=n(ae,"LI",{});var cOe=s(g3);$Ce=n(cOe,"STRONG",{});var FDt=s($Ce);lGr=r(FDt,"gptj"),FDt.forEach(t),iGr=r(cOe," \u2014 "),nee=n(cOe,"A",{href:!0});var TDt=s(nee);dGr=r(TDt,"FlaxGPTJModel"),TDt.forEach(t),cGr=r(cOe," (GPT-J model)"),cOe.forEach(t),fGr=i(ae),h3=n(ae,"LI",{});var fOe=s(h3);kCe=n(fOe,"STRONG",{});var MDt=s(kCe);mGr=r(MDt,"longt5"),MDt.forEach(t),gGr=r(fOe," \u2014 "),see=n(fOe,"A",{href:!0});var EDt=s(see);hGr=r(EDt,"FlaxLongT5Model"),EDt.forEach(t),pGr=r(fOe," (LongT5 model)"),fOe.forEach(t),_Gr=i(ae),p3=n(ae,"LI",{});var mOe=s(p3);SCe=n(mOe,"STRONG",{});var CDt=s(SCe);uGr=r(CDt,"marian"),CDt.forEach(t),bGr=r(mOe," \u2014 "),lee=n(mOe,"A",{href:!0});var wDt=s(lee);vGr=r(wDt,"FlaxMarianModel"),wDt.forEach(t),FGr=r(mOe," (Marian model)"),mOe.forEach(t),TGr=i(ae),_3=n(ae,"LI",{});var gOe=s(_3);RCe=n(gOe,"STRONG",{});var ADt=s(RCe);MGr=r(ADt,"mbart"),ADt.forEach(t),EGr=r(gOe," \u2014 "),iee=n(gOe,"A",{href:!0});var LDt=s(iee);CGr=r(LDt,"FlaxMBartModel"),LDt.forEach(t),wGr=r(gOe," (mBART model)"),gOe.forEach(t),AGr=i(ae),u3=n(ae,"LI",{});var hOe=s(u3);PCe=n(hOe,"STRONG",{});var yDt=s(PCe);LGr=r(yDt,"mt5"),yDt.forEach(t),yGr=r(hOe," \u2014 "),dee=n(hOe,"A",{href:!0});var xDt=s(dee);xGr=r(xDt,"FlaxMT5Model"),xDt.forEach(t),$Gr=r(hOe," (MT5 model)"),hOe.forEach(t),kGr=i(ae),b3=n(ae,"LI",{});var pOe=s(b3);BCe=n(pOe,"STRONG",{});var $Dt=s(BCe);SGr=r($Dt,"opt"),$Dt.forEach(t),RGr=r(pOe," \u2014 "),cee=n(pOe,"A",{href:!0});var kDt=s(cee);PGr=r(kDt,"FlaxOPTModel"),kDt.forEach(t),BGr=r(pOe," (OPT model)"),pOe.forEach(t),IGr=i(ae),v3=n(ae,"LI",{});var _Oe=s(v3);ICe=n(_Oe,"STRONG",{});var SDt=s(ICe);NGr=r(SDt,"pegasus"),SDt.forEach(t),qGr=r(_Oe," \u2014 "),fee=n(_Oe,"A",{href:!0});var RDt=s(fee);jGr=r(RDt,"FlaxPegasusModel"),RDt.forEach(t),DGr=r(_Oe," (Pegasus model)"),_Oe.forEach(t),GGr=i(ae),F3=n(ae,"LI",{});var uOe=s(F3);NCe=n(uOe,"STRONG",{});var PDt=s(NCe);OGr=r(PDt,"roberta"),PDt.forEach(t),VGr=r(uOe," \u2014 "),mee=n(uOe,"A",{href:!0});var BDt=s(mee);XGr=r(BDt,"FlaxRobertaModel"),BDt.forEach(t),zGr=r(uOe," (RoBERTa model)"),uOe.forEach(t),QGr=i(ae),T3=n(ae,"LI",{});var bOe=s(T3);qCe=n(bOe,"STRONG",{});var IDt=s(qCe);WGr=r(IDt,"roformer"),IDt.forEach(t),HGr=r(bOe," \u2014 "),gee=n(bOe,"A",{href:!0});var NDt=s(gee);UGr=r(NDt,"FlaxRoFormerModel"),NDt.forEach(t),JGr=r(bOe," (RoFormer model)"),bOe.forEach(t),YGr=i(ae),M3=n(ae,"LI",{});var vOe=s(M3);jCe=n(vOe,"STRONG",{});var qDt=s(jCe);KGr=r(qDt,"t5"),qDt.forEach(t),ZGr=r(vOe," \u2014 "),hee=n(vOe,"A",{href:!0});var jDt=s(hee);eOr=r(jDt,"FlaxT5Model"),jDt.forEach(t),oOr=r(vOe," (T5 model)"),vOe.forEach(t),rOr=i(ae),E3=n(ae,"LI",{});var FOe=s(E3);DCe=n(FOe,"STRONG",{});var DDt=s(DCe);tOr=r(DDt,"vision-text-dual-encoder"),DDt.forEach(t),aOr=r(FOe," \u2014 "),pee=n(FOe,"A",{href:!0});var GDt=s(pee);nOr=r(GDt,"FlaxVisionTextDualEncoderModel"),GDt.forEach(t),sOr=r(FOe," (VisionTextDualEncoder model)"),FOe.forEach(t),lOr=i(ae),C3=n(ae,"LI",{});var TOe=s(C3);GCe=n(TOe,"STRONG",{});var ODt=s(GCe);iOr=r(ODt,"vit"),ODt.forEach(t),dOr=r(TOe," \u2014 "),_ee=n(TOe,"A",{href:!0});var VDt=s(_ee);cOr=r(VDt,"FlaxViTModel"),VDt.forEach(t),fOr=r(TOe," (ViT model)"),TOe.forEach(t),mOr=i(ae),w3=n(ae,"LI",{});var MOe=s(w3);OCe=n(MOe,"STRONG",{});var XDt=s(OCe);gOr=r(XDt,"wav2vec2"),XDt.forEach(t),hOr=r(MOe," \u2014 "),uee=n(MOe,"A",{href:!0});var zDt=s(uee);pOr=r(zDt,"FlaxWav2Vec2Model"),zDt.forEach(t),_Or=r(MOe," (Wav2Vec2 model)"),MOe.forEach(t),uOr=i(ae),A3=n(ae,"LI",{});var EOe=s(A3);VCe=n(EOe,"STRONG",{});var QDt=s(VCe);bOr=r(QDt,"xglm"),QDt.forEach(t),vOr=r(EOe," \u2014 "),bee=n(EOe,"A",{href:!0});var WDt=s(bee);FOr=r(WDt,"FlaxXGLMModel"),WDt.forEach(t),TOr=r(EOe," (XGLM model)"),EOe.forEach(t),MOr=i(ae),L3=n(ae,"LI",{});var COe=s(L3);XCe=n(COe,"STRONG",{});var HDt=s(XCe);EOr=r(HDt,"xlm-roberta"),HDt.forEach(t),COr=r(COe," \u2014 "),vee=n(COe,"A",{href:!0});var UDt=s(vee);wOr=r(UDt,"FlaxXLMRobertaModel"),UDt.forEach(t),AOr=r(COe," (XLM-RoBERTa model)"),COe.forEach(t),ae.forEach(t),LOr=i(ti),T(y3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Nze=i(f),Jc=n(f,"H2",{class:!0});var QWe=s(Jc);x3=n(QWe,"A",{id:!0,class:!0,href:!0});var JDt=s(x3);zCe=n(JDt,"SPAN",{});var YDt=s(zCe);T(g$.$$.fragment,YDt),YDt.forEach(t),JDt.forEach(t),yOr=i(QWe),QCe=n(QWe,"SPAN",{});var KDt=s(QCe);xOr=r(KDt,"FlaxAutoModelForCausalLM"),KDt.forEach(t),QWe.forEach(t),qze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(h$.$$.fragment,ai),$Or=i(ai),Yc=n(ai,"P",{});var eae=s(Yc);kOr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fee=n(eae,"A",{href:!0});var ZDt=s(Fee);SOr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),ROr=r(eae," class method or the "),Tee=n(eae,"A",{href:!0});var eGt=s(Tee);POr=r(eGt,"from_config()"),eGt.forEach(t),BOr=r(eae,` class
method.`),eae.forEach(t),IOr=i(ai),p$=n(ai,"P",{});var WWe=s(p$);NOr=r(WWe,"This class cannot be instantiated directly using "),WCe=n(WWe,"CODE",{});var oGt=s(WCe);qOr=r(oGt,"__init__()"),oGt.forEach(t),jOr=r(WWe," (throws an error)."),WWe.forEach(t),DOr=i(ai),Wt=n(ai,"DIV",{class:!0});var RA=s(Wt);T(_$.$$.fragment,RA),GOr=i(RA),HCe=n(RA,"P",{});var rGt=s(HCe);OOr=r(rGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rGt.forEach(t),VOr=i(RA),Kc=n(RA,"P",{});var oae=s(Kc);XOr=r(oae,`Note:
Loading a model from its configuration file does `),UCe=n(oae,"STRONG",{});var tGt=s(UCe);zOr=r(tGt,"not"),tGt.forEach(t),QOr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(oae,"A",{href:!0});var aGt=s(Mee);WOr=r(aGt,"from_pretrained()"),aGt.forEach(t),HOr=r(oae," to load the model weights."),oae.forEach(t),UOr=i(RA),T($3.$$.fragment,RA),RA.forEach(t),JOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(u$.$$.fragment,ni),YOr=i(ni),JCe=n(ni,"P",{});var nGt=s(JCe);KOr=r(nGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nGt.forEach(t),ZOr=i(ni),Mn=n(ni,"P",{});var PA=s(Mn);eVr=r(PA,"The model class to instantiate is selected based on the "),YCe=n(PA,"CODE",{});var sGt=s(YCe);oVr=r(sGt,"model_type"),sGt.forEach(t),rVr=r(PA,` property of the config object (either
passed as an argument or loaded from `),KCe=n(PA,"CODE",{});var lGt=s(KCe);tVr=r(lGt,"pretrained_model_name_or_path"),lGt.forEach(t),aVr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(PA,"CODE",{});var iGt=s(ZCe);nVr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),sVr=r(PA,":"),PA.forEach(t),lVr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);k3=n(Ne,"LI",{});var wOe=s(k3);e3e=n(wOe,"STRONG",{});var dGt=s(e3e);iVr=r(dGt,"bart"),dGt.forEach(t),dVr=r(wOe," \u2014 "),Eee=n(wOe,"A",{href:!0});var cGt=s(Eee);cVr=r(cGt,"FlaxBartForCausalLM"),cGt.forEach(t),fVr=r(wOe," (BART model)"),wOe.forEach(t),mVr=i(Ne),S3=n(Ne,"LI",{});var AOe=s(S3);o3e=n(AOe,"STRONG",{});var fGt=s(o3e);gVr=r(fGt,"bert"),fGt.forEach(t),hVr=r(AOe," \u2014 "),Cee=n(AOe,"A",{href:!0});var mGt=s(Cee);pVr=r(mGt,"FlaxBertForCausalLM"),mGt.forEach(t),_Vr=r(AOe," (BERT model)"),AOe.forEach(t),uVr=i(Ne),R3=n(Ne,"LI",{});var LOe=s(R3);r3e=n(LOe,"STRONG",{});var gGt=s(r3e);bVr=r(gGt,"big_bird"),gGt.forEach(t),vVr=r(LOe," \u2014 "),wee=n(LOe,"A",{href:!0});var hGt=s(wee);FVr=r(hGt,"FlaxBigBirdForCausalLM"),hGt.forEach(t),TVr=r(LOe," (BigBird model)"),LOe.forEach(t),MVr=i(Ne),P3=n(Ne,"LI",{});var yOe=s(P3);t3e=n(yOe,"STRONG",{});var pGt=s(t3e);EVr=r(pGt,"electra"),pGt.forEach(t),CVr=r(yOe," \u2014 "),Aee=n(yOe,"A",{href:!0});var _Gt=s(Aee);wVr=r(_Gt,"FlaxElectraForCausalLM"),_Gt.forEach(t),AVr=r(yOe," (ELECTRA model)"),yOe.forEach(t),LVr=i(Ne),B3=n(Ne,"LI",{});var xOe=s(B3);a3e=n(xOe,"STRONG",{});var uGt=s(a3e);yVr=r(uGt,"gpt2"),uGt.forEach(t),xVr=r(xOe," \u2014 "),Lee=n(xOe,"A",{href:!0});var bGt=s(Lee);$Vr=r(bGt,"FlaxGPT2LMHeadModel"),bGt.forEach(t),kVr=r(xOe," (OpenAI GPT-2 model)"),xOe.forEach(t),SVr=i(Ne),I3=n(Ne,"LI",{});var $Oe=s(I3);n3e=n($Oe,"STRONG",{});var vGt=s(n3e);RVr=r(vGt,"gpt_neo"),vGt.forEach(t),PVr=r($Oe," \u2014 "),yee=n($Oe,"A",{href:!0});var FGt=s(yee);BVr=r(FGt,"FlaxGPTNeoForCausalLM"),FGt.forEach(t),IVr=r($Oe," (GPT Neo model)"),$Oe.forEach(t),NVr=i(Ne),N3=n(Ne,"LI",{});var kOe=s(N3);s3e=n(kOe,"STRONG",{});var TGt=s(s3e);qVr=r(TGt,"gptj"),TGt.forEach(t),jVr=r(kOe," \u2014 "),xee=n(kOe,"A",{href:!0});var MGt=s(xee);DVr=r(MGt,"FlaxGPTJForCausalLM"),MGt.forEach(t),GVr=r(kOe," (GPT-J model)"),kOe.forEach(t),OVr=i(Ne),q3=n(Ne,"LI",{});var SOe=s(q3);l3e=n(SOe,"STRONG",{});var EGt=s(l3e);VVr=r(EGt,"opt"),EGt.forEach(t),XVr=r(SOe," \u2014 "),$ee=n(SOe,"A",{href:!0});var CGt=s($ee);zVr=r(CGt,"FlaxOPTForCausalLM"),CGt.forEach(t),QVr=r(SOe," (OPT model)"),SOe.forEach(t),WVr=i(Ne),j3=n(Ne,"LI",{});var ROe=s(j3);i3e=n(ROe,"STRONG",{});var wGt=s(i3e);HVr=r(wGt,"roberta"),wGt.forEach(t),UVr=r(ROe," \u2014 "),kee=n(ROe,"A",{href:!0});var AGt=s(kee);JVr=r(AGt,"FlaxRobertaForCausalLM"),AGt.forEach(t),YVr=r(ROe," (RoBERTa model)"),ROe.forEach(t),KVr=i(Ne),D3=n(Ne,"LI",{});var POe=s(D3);d3e=n(POe,"STRONG",{});var LGt=s(d3e);ZVr=r(LGt,"xglm"),LGt.forEach(t),eXr=r(POe," \u2014 "),See=n(POe,"A",{href:!0});var yGt=s(See);oXr=r(yGt,"FlaxXGLMForCausalLM"),yGt.forEach(t),rXr=r(POe," (XGLM model)"),POe.forEach(t),Ne.forEach(t),tXr=i(ni),T(G3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),jze=i(f),Zc=n(f,"H2",{class:!0});var HWe=s(Zc);O3=n(HWe,"A",{id:!0,class:!0,href:!0});var xGt=s(O3);c3e=n(xGt,"SPAN",{});var $Gt=s(c3e);T(b$.$$.fragment,$Gt),$Gt.forEach(t),xGt.forEach(t),aXr=i(HWe),f3e=n(HWe,"SPAN",{});var kGt=s(f3e);nXr=r(kGt,"FlaxAutoModelForPreTraining"),kGt.forEach(t),HWe.forEach(t),Dze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(v$.$$.fragment,si),sXr=i(si),ef=n(si,"P",{});var rae=s(ef);lXr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Ree=n(rae,"A",{href:!0});var SGt=s(Ree);iXr=r(SGt,"from_pretrained()"),SGt.forEach(t),dXr=r(rae," class method or the "),Pee=n(rae,"A",{href:!0});var RGt=s(Pee);cXr=r(RGt,"from_config()"),RGt.forEach(t),fXr=r(rae,` class
method.`),rae.forEach(t),mXr=i(si),F$=n(si,"P",{});var UWe=s(F$);gXr=r(UWe,"This class cannot be instantiated directly using "),m3e=n(UWe,"CODE",{});var PGt=s(m3e);hXr=r(PGt,"__init__()"),PGt.forEach(t),pXr=r(UWe," (throws an error)."),UWe.forEach(t),_Xr=i(si),Ht=n(si,"DIV",{class:!0});var BA=s(Ht);T(T$.$$.fragment,BA),uXr=i(BA),g3e=n(BA,"P",{});var BGt=s(g3e);bXr=r(BGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BGt.forEach(t),vXr=i(BA),of=n(BA,"P",{});var tae=s(of);FXr=r(tae,`Note:
Loading a model from its configuration file does `),h3e=n(tae,"STRONG",{});var IGt=s(h3e);TXr=r(IGt,"not"),IGt.forEach(t),MXr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(tae,"A",{href:!0});var NGt=s(Bee);EXr=r(NGt,"from_pretrained()"),NGt.forEach(t),CXr=r(tae," to load the model weights."),tae.forEach(t),wXr=i(BA),T(V3.$$.fragment,BA),BA.forEach(t),AXr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(M$.$$.fragment,li),LXr=i(li),p3e=n(li,"P",{});var qGt=s(p3e);yXr=r(qGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qGt.forEach(t),xXr=i(li),En=n(li,"P",{});var IA=s(En);$Xr=r(IA,"The model class to instantiate is selected based on the "),_3e=n(IA,"CODE",{});var jGt=s(_3e);kXr=r(jGt,"model_type"),jGt.forEach(t),SXr=r(IA,` property of the config object (either
passed as an argument or loaded from `),u3e=n(IA,"CODE",{});var DGt=s(u3e);RXr=r(DGt,"pretrained_model_name_or_path"),DGt.forEach(t),PXr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(IA,"CODE",{});var GGt=s(b3e);BXr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),IXr=r(IA,":"),IA.forEach(t),NXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);X3=n(we,"LI",{});var BOe=s(X3);v3e=n(BOe,"STRONG",{});var OGt=s(v3e);qXr=r(OGt,"albert"),OGt.forEach(t),jXr=r(BOe," \u2014 "),Iee=n(BOe,"A",{href:!0});var VGt=s(Iee);DXr=r(VGt,"FlaxAlbertForPreTraining"),VGt.forEach(t),GXr=r(BOe," (ALBERT model)"),BOe.forEach(t),OXr=i(we),z3=n(we,"LI",{});var IOe=s(z3);F3e=n(IOe,"STRONG",{});var XGt=s(F3e);VXr=r(XGt,"bart"),XGt.forEach(t),XXr=r(IOe," \u2014 "),Nee=n(IOe,"A",{href:!0});var zGt=s(Nee);zXr=r(zGt,"FlaxBartForConditionalGeneration"),zGt.forEach(t),QXr=r(IOe," (BART model)"),IOe.forEach(t),WXr=i(we),Q3=n(we,"LI",{});var NOe=s(Q3);T3e=n(NOe,"STRONG",{});var QGt=s(T3e);HXr=r(QGt,"bert"),QGt.forEach(t),UXr=r(NOe," \u2014 "),qee=n(NOe,"A",{href:!0});var WGt=s(qee);JXr=r(WGt,"FlaxBertForPreTraining"),WGt.forEach(t),YXr=r(NOe," (BERT model)"),NOe.forEach(t),KXr=i(we),W3=n(we,"LI",{});var qOe=s(W3);M3e=n(qOe,"STRONG",{});var HGt=s(M3e);ZXr=r(HGt,"big_bird"),HGt.forEach(t),ezr=r(qOe," \u2014 "),jee=n(qOe,"A",{href:!0});var UGt=s(jee);ozr=r(UGt,"FlaxBigBirdForPreTraining"),UGt.forEach(t),rzr=r(qOe," (BigBird model)"),qOe.forEach(t),tzr=i(we),H3=n(we,"LI",{});var jOe=s(H3);E3e=n(jOe,"STRONG",{});var JGt=s(E3e);azr=r(JGt,"electra"),JGt.forEach(t),nzr=r(jOe," \u2014 "),Dee=n(jOe,"A",{href:!0});var YGt=s(Dee);szr=r(YGt,"FlaxElectraForPreTraining"),YGt.forEach(t),lzr=r(jOe," (ELECTRA model)"),jOe.forEach(t),izr=i(we),U3=n(we,"LI",{});var DOe=s(U3);C3e=n(DOe,"STRONG",{});var KGt=s(C3e);dzr=r(KGt,"longt5"),KGt.forEach(t),czr=r(DOe," \u2014 "),Gee=n(DOe,"A",{href:!0});var ZGt=s(Gee);fzr=r(ZGt,"FlaxLongT5ForConditionalGeneration"),ZGt.forEach(t),mzr=r(DOe," (LongT5 model)"),DOe.forEach(t),gzr=i(we),J3=n(we,"LI",{});var GOe=s(J3);w3e=n(GOe,"STRONG",{});var eOt=s(w3e);hzr=r(eOt,"mbart"),eOt.forEach(t),pzr=r(GOe," \u2014 "),Oee=n(GOe,"A",{href:!0});var oOt=s(Oee);_zr=r(oOt,"FlaxMBartForConditionalGeneration"),oOt.forEach(t),uzr=r(GOe," (mBART model)"),GOe.forEach(t),bzr=i(we),Y3=n(we,"LI",{});var OOe=s(Y3);A3e=n(OOe,"STRONG",{});var rOt=s(A3e);vzr=r(rOt,"mt5"),rOt.forEach(t),Fzr=r(OOe," \u2014 "),Vee=n(OOe,"A",{href:!0});var tOt=s(Vee);Tzr=r(tOt,"FlaxMT5ForConditionalGeneration"),tOt.forEach(t),Mzr=r(OOe," (MT5 model)"),OOe.forEach(t),Ezr=i(we),K3=n(we,"LI",{});var VOe=s(K3);L3e=n(VOe,"STRONG",{});var aOt=s(L3e);Czr=r(aOt,"roberta"),aOt.forEach(t),wzr=r(VOe," \u2014 "),Xee=n(VOe,"A",{href:!0});var nOt=s(Xee);Azr=r(nOt,"FlaxRobertaForMaskedLM"),nOt.forEach(t),Lzr=r(VOe," (RoBERTa model)"),VOe.forEach(t),yzr=i(we),Z3=n(we,"LI",{});var XOe=s(Z3);y3e=n(XOe,"STRONG",{});var sOt=s(y3e);xzr=r(sOt,"roformer"),sOt.forEach(t),$zr=r(XOe," \u2014 "),zee=n(XOe,"A",{href:!0});var lOt=s(zee);kzr=r(lOt,"FlaxRoFormerForMaskedLM"),lOt.forEach(t),Szr=r(XOe," (RoFormer model)"),XOe.forEach(t),Rzr=i(we),e5=n(we,"LI",{});var zOe=s(e5);x3e=n(zOe,"STRONG",{});var iOt=s(x3e);Pzr=r(iOt,"t5"),iOt.forEach(t),Bzr=r(zOe," \u2014 "),Qee=n(zOe,"A",{href:!0});var dOt=s(Qee);Izr=r(dOt,"FlaxT5ForConditionalGeneration"),dOt.forEach(t),Nzr=r(zOe," (T5 model)"),zOe.forEach(t),qzr=i(we),o5=n(we,"LI",{});var QOe=s(o5);$3e=n(QOe,"STRONG",{});var cOt=s($3e);jzr=r(cOt,"wav2vec2"),cOt.forEach(t),Dzr=r(QOe," \u2014 "),Wee=n(QOe,"A",{href:!0});var fOt=s(Wee);Gzr=r(fOt,"FlaxWav2Vec2ForPreTraining"),fOt.forEach(t),Ozr=r(QOe," (Wav2Vec2 model)"),QOe.forEach(t),Vzr=i(we),r5=n(we,"LI",{});var WOe=s(r5);k3e=n(WOe,"STRONG",{});var mOt=s(k3e);Xzr=r(mOt,"xlm-roberta"),mOt.forEach(t),zzr=r(WOe," \u2014 "),Hee=n(WOe,"A",{href:!0});var gOt=s(Hee);Qzr=r(gOt,"FlaxXLMRobertaForMaskedLM"),gOt.forEach(t),Wzr=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),we.forEach(t),Hzr=i(li),T(t5.$$.fragment,li),li.forEach(t),si.forEach(t),Gze=i(f),rf=n(f,"H2",{class:!0});var JWe=s(rf);a5=n(JWe,"A",{id:!0,class:!0,href:!0});var hOt=s(a5);S3e=n(hOt,"SPAN",{});var pOt=s(S3e);T(E$.$$.fragment,pOt),pOt.forEach(t),hOt.forEach(t),Uzr=i(JWe),R3e=n(JWe,"SPAN",{});var _Ot=s(R3e);Jzr=r(_Ot,"FlaxAutoModelForMaskedLM"),_Ot.forEach(t),JWe.forEach(t),Oze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(C$.$$.fragment,ii),Yzr=i(ii),tf=n(ii,"P",{});var aae=s(tf);Kzr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Uee=n(aae,"A",{href:!0});var uOt=s(Uee);Zzr=r(uOt,"from_pretrained()"),uOt.forEach(t),eQr=r(aae," class method or the "),Jee=n(aae,"A",{href:!0});var bOt=s(Jee);oQr=r(bOt,"from_config()"),bOt.forEach(t),rQr=r(aae,` class
method.`),aae.forEach(t),tQr=i(ii),w$=n(ii,"P",{});var YWe=s(w$);aQr=r(YWe,"This class cannot be instantiated directly using "),P3e=n(YWe,"CODE",{});var vOt=s(P3e);nQr=r(vOt,"__init__()"),vOt.forEach(t),sQr=r(YWe," (throws an error)."),YWe.forEach(t),lQr=i(ii),Ut=n(ii,"DIV",{class:!0});var NA=s(Ut);T(A$.$$.fragment,NA),iQr=i(NA),B3e=n(NA,"P",{});var FOt=s(B3e);dQr=r(FOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FOt.forEach(t),cQr=i(NA),af=n(NA,"P",{});var nae=s(af);fQr=r(nae,`Note:
Loading a model from its configuration file does `),I3e=n(nae,"STRONG",{});var TOt=s(I3e);mQr=r(TOt,"not"),TOt.forEach(t),gQr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n(nae,"A",{href:!0});var MOt=s(Yee);hQr=r(MOt,"from_pretrained()"),MOt.forEach(t),pQr=r(nae," to load the model weights."),nae.forEach(t),_Qr=i(NA),T(n5.$$.fragment,NA),NA.forEach(t),uQr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(L$.$$.fragment,di),bQr=i(di),N3e=n(di,"P",{});var EOt=s(N3e);vQr=r(EOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EOt.forEach(t),FQr=i(di),Cn=n(di,"P",{});var qA=s(Cn);TQr=r(qA,"The model class to instantiate is selected based on the "),q3e=n(qA,"CODE",{});var COt=s(q3e);MQr=r(COt,"model_type"),COt.forEach(t),EQr=r(qA,` property of the config object (either
passed as an argument or loaded from `),j3e=n(qA,"CODE",{});var wOt=s(j3e);CQr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),wQr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=n(qA,"CODE",{});var AOt=s(D3e);AQr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),LQr=r(qA,":"),qA.forEach(t),yQr=i(di),$e=n(di,"UL",{});var qe=s($e);s5=n(qe,"LI",{});var HOe=s(s5);G3e=n(HOe,"STRONG",{});var LOt=s(G3e);xQr=r(LOt,"albert"),LOt.forEach(t),$Qr=r(HOe," \u2014 "),Kee=n(HOe,"A",{href:!0});var yOt=s(Kee);kQr=r(yOt,"FlaxAlbertForMaskedLM"),yOt.forEach(t),SQr=r(HOe," (ALBERT model)"),HOe.forEach(t),RQr=i(qe),l5=n(qe,"LI",{});var UOe=s(l5);O3e=n(UOe,"STRONG",{});var xOt=s(O3e);PQr=r(xOt,"bart"),xOt.forEach(t),BQr=r(UOe," \u2014 "),Zee=n(UOe,"A",{href:!0});var $Ot=s(Zee);IQr=r($Ot,"FlaxBartForConditionalGeneration"),$Ot.forEach(t),NQr=r(UOe," (BART model)"),UOe.forEach(t),qQr=i(qe),i5=n(qe,"LI",{});var JOe=s(i5);V3e=n(JOe,"STRONG",{});var kOt=s(V3e);jQr=r(kOt,"bert"),kOt.forEach(t),DQr=r(JOe," \u2014 "),eoe=n(JOe,"A",{href:!0});var SOt=s(eoe);GQr=r(SOt,"FlaxBertForMaskedLM"),SOt.forEach(t),OQr=r(JOe," (BERT model)"),JOe.forEach(t),VQr=i(qe),d5=n(qe,"LI",{});var YOe=s(d5);X3e=n(YOe,"STRONG",{});var ROt=s(X3e);XQr=r(ROt,"big_bird"),ROt.forEach(t),zQr=r(YOe," \u2014 "),ooe=n(YOe,"A",{href:!0});var POt=s(ooe);QQr=r(POt,"FlaxBigBirdForMaskedLM"),POt.forEach(t),WQr=r(YOe," (BigBird model)"),YOe.forEach(t),HQr=i(qe),c5=n(qe,"LI",{});var KOe=s(c5);z3e=n(KOe,"STRONG",{});var BOt=s(z3e);UQr=r(BOt,"distilbert"),BOt.forEach(t),JQr=r(KOe," \u2014 "),roe=n(KOe,"A",{href:!0});var IOt=s(roe);YQr=r(IOt,"FlaxDistilBertForMaskedLM"),IOt.forEach(t),KQr=r(KOe," (DistilBERT model)"),KOe.forEach(t),ZQr=i(qe),f5=n(qe,"LI",{});var ZOe=s(f5);Q3e=n(ZOe,"STRONG",{});var NOt=s(Q3e);eWr=r(NOt,"electra"),NOt.forEach(t),oWr=r(ZOe," \u2014 "),toe=n(ZOe,"A",{href:!0});var qOt=s(toe);rWr=r(qOt,"FlaxElectraForMaskedLM"),qOt.forEach(t),tWr=r(ZOe," (ELECTRA model)"),ZOe.forEach(t),aWr=i(qe),m5=n(qe,"LI",{});var eVe=s(m5);W3e=n(eVe,"STRONG",{});var jOt=s(W3e);nWr=r(jOt,"mbart"),jOt.forEach(t),sWr=r(eVe," \u2014 "),aoe=n(eVe,"A",{href:!0});var DOt=s(aoe);lWr=r(DOt,"FlaxMBartForConditionalGeneration"),DOt.forEach(t),iWr=r(eVe," (mBART model)"),eVe.forEach(t),dWr=i(qe),g5=n(qe,"LI",{});var oVe=s(g5);H3e=n(oVe,"STRONG",{});var GOt=s(H3e);cWr=r(GOt,"roberta"),GOt.forEach(t),fWr=r(oVe," \u2014 "),noe=n(oVe,"A",{href:!0});var OOt=s(noe);mWr=r(OOt,"FlaxRobertaForMaskedLM"),OOt.forEach(t),gWr=r(oVe," (RoBERTa model)"),oVe.forEach(t),hWr=i(qe),h5=n(qe,"LI",{});var rVe=s(h5);U3e=n(rVe,"STRONG",{});var VOt=s(U3e);pWr=r(VOt,"roformer"),VOt.forEach(t),_Wr=r(rVe," \u2014 "),soe=n(rVe,"A",{href:!0});var XOt=s(soe);uWr=r(XOt,"FlaxRoFormerForMaskedLM"),XOt.forEach(t),bWr=r(rVe," (RoFormer model)"),rVe.forEach(t),vWr=i(qe),p5=n(qe,"LI",{});var tVe=s(p5);J3e=n(tVe,"STRONG",{});var zOt=s(J3e);FWr=r(zOt,"xlm-roberta"),zOt.forEach(t),TWr=r(tVe," \u2014 "),loe=n(tVe,"A",{href:!0});var QOt=s(loe);MWr=r(QOt,"FlaxXLMRobertaForMaskedLM"),QOt.forEach(t),EWr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),qe.forEach(t),CWr=i(di),T(_5.$$.fragment,di),di.forEach(t),ii.forEach(t),Vze=i(f),nf=n(f,"H2",{class:!0});var KWe=s(nf);u5=n(KWe,"A",{id:!0,class:!0,href:!0});var WOt=s(u5);Y3e=n(WOt,"SPAN",{});var HOt=s(Y3e);T(y$.$$.fragment,HOt),HOt.forEach(t),WOt.forEach(t),wWr=i(KWe),K3e=n(KWe,"SPAN",{});var UOt=s(K3e);AWr=r(UOt,"FlaxAutoModelForSeq2SeqLM"),UOt.forEach(t),KWe.forEach(t),Xze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(x$.$$.fragment,ci),LWr=i(ci),sf=n(ci,"P",{});var sae=s(sf);yWr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ioe=n(sae,"A",{href:!0});var JOt=s(ioe);xWr=r(JOt,"from_pretrained()"),JOt.forEach(t),$Wr=r(sae," class method or the "),doe=n(sae,"A",{href:!0});var YOt=s(doe);kWr=r(YOt,"from_config()"),YOt.forEach(t),SWr=r(sae,` class
method.`),sae.forEach(t),RWr=i(ci),$$=n(ci,"P",{});var ZWe=s($$);PWr=r(ZWe,"This class cannot be instantiated directly using "),Z3e=n(ZWe,"CODE",{});var KOt=s(Z3e);BWr=r(KOt,"__init__()"),KOt.forEach(t),IWr=r(ZWe," (throws an error)."),ZWe.forEach(t),NWr=i(ci),Jt=n(ci,"DIV",{class:!0});var jA=s(Jt);T(k$.$$.fragment,jA),qWr=i(jA),e5e=n(jA,"P",{});var ZOt=s(e5e);jWr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZOt.forEach(t),DWr=i(jA),lf=n(jA,"P",{});var lae=s(lf);GWr=r(lae,`Note:
Loading a model from its configuration file does `),o5e=n(lae,"STRONG",{});var eVt=s(o5e);OWr=r(eVt,"not"),eVt.forEach(t),VWr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(lae,"A",{href:!0});var oVt=s(coe);XWr=r(oVt,"from_pretrained()"),oVt.forEach(t),zWr=r(lae," to load the model weights."),lae.forEach(t),QWr=i(jA),T(b5.$$.fragment,jA),jA.forEach(t),WWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(S$.$$.fragment,fi),HWr=i(fi),r5e=n(fi,"P",{});var rVt=s(r5e);UWr=r(rVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rVt.forEach(t),JWr=i(fi),wn=n(fi,"P",{});var DA=s(wn);YWr=r(DA,"The model class to instantiate is selected based on the "),t5e=n(DA,"CODE",{});var tVt=s(t5e);KWr=r(tVt,"model_type"),tVt.forEach(t),ZWr=r(DA,` property of the config object (either
passed as an argument or loaded from `),a5e=n(DA,"CODE",{});var aVt=s(a5e);eHr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),oHr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(DA,"CODE",{});var nVt=s(n5e);rHr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),tHr=r(DA,":"),DA.forEach(t),aHr=i(fi),ke=n(fi,"UL",{});var je=s(ke);v5=n(je,"LI",{});var aVe=s(v5);s5e=n(aVe,"STRONG",{});var sVt=s(s5e);nHr=r(sVt,"bart"),sVt.forEach(t),sHr=r(aVe," \u2014 "),foe=n(aVe,"A",{href:!0});var lVt=s(foe);lHr=r(lVt,"FlaxBartForConditionalGeneration"),lVt.forEach(t),iHr=r(aVe," (BART model)"),aVe.forEach(t),dHr=i(je),F5=n(je,"LI",{});var nVe=s(F5);l5e=n(nVe,"STRONG",{});var iVt=s(l5e);cHr=r(iVt,"blenderbot"),iVt.forEach(t),fHr=r(nVe," \u2014 "),moe=n(nVe,"A",{href:!0});var dVt=s(moe);mHr=r(dVt,"FlaxBlenderbotForConditionalGeneration"),dVt.forEach(t),gHr=r(nVe," (Blenderbot model)"),nVe.forEach(t),hHr=i(je),T5=n(je,"LI",{});var sVe=s(T5);i5e=n(sVe,"STRONG",{});var cVt=s(i5e);pHr=r(cVt,"blenderbot-small"),cVt.forEach(t),_Hr=r(sVe," \u2014 "),goe=n(sVe,"A",{href:!0});var fVt=s(goe);uHr=r(fVt,"FlaxBlenderbotSmallForConditionalGeneration"),fVt.forEach(t),bHr=r(sVe," (BlenderbotSmall model)"),sVe.forEach(t),vHr=i(je),M5=n(je,"LI",{});var lVe=s(M5);d5e=n(lVe,"STRONG",{});var mVt=s(d5e);FHr=r(mVt,"encoder-decoder"),mVt.forEach(t),THr=r(lVe," \u2014 "),hoe=n(lVe,"A",{href:!0});var gVt=s(hoe);MHr=r(gVt,"FlaxEncoderDecoderModel"),gVt.forEach(t),EHr=r(lVe," (Encoder decoder model)"),lVe.forEach(t),CHr=i(je),E5=n(je,"LI",{});var iVe=s(E5);c5e=n(iVe,"STRONG",{});var hVt=s(c5e);wHr=r(hVt,"longt5"),hVt.forEach(t),AHr=r(iVe," \u2014 "),poe=n(iVe,"A",{href:!0});var pVt=s(poe);LHr=r(pVt,"FlaxLongT5ForConditionalGeneration"),pVt.forEach(t),yHr=r(iVe," (LongT5 model)"),iVe.forEach(t),xHr=i(je),C5=n(je,"LI",{});var dVe=s(C5);f5e=n(dVe,"STRONG",{});var _Vt=s(f5e);$Hr=r(_Vt,"marian"),_Vt.forEach(t),kHr=r(dVe," \u2014 "),_oe=n(dVe,"A",{href:!0});var uVt=s(_oe);SHr=r(uVt,"FlaxMarianMTModel"),uVt.forEach(t),RHr=r(dVe," (Marian model)"),dVe.forEach(t),PHr=i(je),w5=n(je,"LI",{});var cVe=s(w5);m5e=n(cVe,"STRONG",{});var bVt=s(m5e);BHr=r(bVt,"mbart"),bVt.forEach(t),IHr=r(cVe," \u2014 "),uoe=n(cVe,"A",{href:!0});var vVt=s(uoe);NHr=r(vVt,"FlaxMBartForConditionalGeneration"),vVt.forEach(t),qHr=r(cVe," (mBART model)"),cVe.forEach(t),jHr=i(je),A5=n(je,"LI",{});var fVe=s(A5);g5e=n(fVe,"STRONG",{});var FVt=s(g5e);DHr=r(FVt,"mt5"),FVt.forEach(t),GHr=r(fVe," \u2014 "),boe=n(fVe,"A",{href:!0});var TVt=s(boe);OHr=r(TVt,"FlaxMT5ForConditionalGeneration"),TVt.forEach(t),VHr=r(fVe," (MT5 model)"),fVe.forEach(t),XHr=i(je),L5=n(je,"LI",{});var mVe=s(L5);h5e=n(mVe,"STRONG",{});var MVt=s(h5e);zHr=r(MVt,"pegasus"),MVt.forEach(t),QHr=r(mVe," \u2014 "),voe=n(mVe,"A",{href:!0});var EVt=s(voe);WHr=r(EVt,"FlaxPegasusForConditionalGeneration"),EVt.forEach(t),HHr=r(mVe," (Pegasus model)"),mVe.forEach(t),UHr=i(je),y5=n(je,"LI",{});var gVe=s(y5);p5e=n(gVe,"STRONG",{});var CVt=s(p5e);JHr=r(CVt,"t5"),CVt.forEach(t),YHr=r(gVe," \u2014 "),Foe=n(gVe,"A",{href:!0});var wVt=s(Foe);KHr=r(wVt,"FlaxT5ForConditionalGeneration"),wVt.forEach(t),ZHr=r(gVe," (T5 model)"),gVe.forEach(t),je.forEach(t),eUr=i(fi),T(x5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),zze=i(f),df=n(f,"H2",{class:!0});var eHe=s(df);$5=n(eHe,"A",{id:!0,class:!0,href:!0});var AVt=s($5);_5e=n(AVt,"SPAN",{});var LVt=s(_5e);T(R$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),oUr=i(eHe),u5e=n(eHe,"SPAN",{});var yVt=s(u5e);rUr=r(yVt,"FlaxAutoModelForSequenceClassification"),yVt.forEach(t),eHe.forEach(t),Qze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(P$.$$.fragment,mi),tUr=i(mi),cf=n(mi,"P",{});var iae=s(cf);aUr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Toe=n(iae,"A",{href:!0});var xVt=s(Toe);nUr=r(xVt,"from_pretrained()"),xVt.forEach(t),sUr=r(iae," class method or the "),Moe=n(iae,"A",{href:!0});var $Vt=s(Moe);lUr=r($Vt,"from_config()"),$Vt.forEach(t),iUr=r(iae,` class
method.`),iae.forEach(t),dUr=i(mi),B$=n(mi,"P",{});var oHe=s(B$);cUr=r(oHe,"This class cannot be instantiated directly using "),b5e=n(oHe,"CODE",{});var kVt=s(b5e);fUr=r(kVt,"__init__()"),kVt.forEach(t),mUr=r(oHe," (throws an error)."),oHe.forEach(t),gUr=i(mi),Yt=n(mi,"DIV",{class:!0});var GA=s(Yt);T(I$.$$.fragment,GA),hUr=i(GA),v5e=n(GA,"P",{});var SVt=s(v5e);pUr=r(SVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SVt.forEach(t),_Ur=i(GA),ff=n(GA,"P",{});var dae=s(ff);uUr=r(dae,`Note:
Loading a model from its configuration file does `),F5e=n(dae,"STRONG",{});var RVt=s(F5e);bUr=r(RVt,"not"),RVt.forEach(t),vUr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(dae,"A",{href:!0});var PVt=s(Eoe);FUr=r(PVt,"from_pretrained()"),PVt.forEach(t),TUr=r(dae," to load the model weights."),dae.forEach(t),MUr=i(GA),T(k5.$$.fragment,GA),GA.forEach(t),EUr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(N$.$$.fragment,gi),CUr=i(gi),T5e=n(gi,"P",{});var BVt=s(T5e);wUr=r(BVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BVt.forEach(t),AUr=i(gi),An=n(gi,"P",{});var OA=s(An);LUr=r(OA,"The model class to instantiate is selected based on the "),M5e=n(OA,"CODE",{});var IVt=s(M5e);yUr=r(IVt,"model_type"),IVt.forEach(t),xUr=r(OA,` property of the config object (either
passed as an argument or loaded from `),E5e=n(OA,"CODE",{});var NVt=s(E5e);$Ur=r(NVt,"pretrained_model_name_or_path"),NVt.forEach(t),kUr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(OA,"CODE",{});var qVt=s(C5e);SUr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),RUr=r(OA,":"),OA.forEach(t),PUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);S5=n(De,"LI",{});var hVe=s(S5);w5e=n(hVe,"STRONG",{});var jVt=s(w5e);BUr=r(jVt,"albert"),jVt.forEach(t),IUr=r(hVe," \u2014 "),Coe=n(hVe,"A",{href:!0});var DVt=s(Coe);NUr=r(DVt,"FlaxAlbertForSequenceClassification"),DVt.forEach(t),qUr=r(hVe," (ALBERT model)"),hVe.forEach(t),jUr=i(De),R5=n(De,"LI",{});var pVe=s(R5);A5e=n(pVe,"STRONG",{});var GVt=s(A5e);DUr=r(GVt,"bart"),GVt.forEach(t),GUr=r(pVe," \u2014 "),woe=n(pVe,"A",{href:!0});var OVt=s(woe);OUr=r(OVt,"FlaxBartForSequenceClassification"),OVt.forEach(t),VUr=r(pVe," (BART model)"),pVe.forEach(t),XUr=i(De),P5=n(De,"LI",{});var _Ve=s(P5);L5e=n(_Ve,"STRONG",{});var VVt=s(L5e);zUr=r(VVt,"bert"),VVt.forEach(t),QUr=r(_Ve," \u2014 "),Aoe=n(_Ve,"A",{href:!0});var XVt=s(Aoe);WUr=r(XVt,"FlaxBertForSequenceClassification"),XVt.forEach(t),HUr=r(_Ve," (BERT model)"),_Ve.forEach(t),UUr=i(De),B5=n(De,"LI",{});var uVe=s(B5);y5e=n(uVe,"STRONG",{});var zVt=s(y5e);JUr=r(zVt,"big_bird"),zVt.forEach(t),YUr=r(uVe," \u2014 "),Loe=n(uVe,"A",{href:!0});var QVt=s(Loe);KUr=r(QVt,"FlaxBigBirdForSequenceClassification"),QVt.forEach(t),ZUr=r(uVe," (BigBird model)"),uVe.forEach(t),eJr=i(De),I5=n(De,"LI",{});var bVe=s(I5);x5e=n(bVe,"STRONG",{});var WVt=s(x5e);oJr=r(WVt,"distilbert"),WVt.forEach(t),rJr=r(bVe," \u2014 "),yoe=n(bVe,"A",{href:!0});var HVt=s(yoe);tJr=r(HVt,"FlaxDistilBertForSequenceClassification"),HVt.forEach(t),aJr=r(bVe," (DistilBERT model)"),bVe.forEach(t),nJr=i(De),N5=n(De,"LI",{});var vVe=s(N5);$5e=n(vVe,"STRONG",{});var UVt=s($5e);sJr=r(UVt,"electra"),UVt.forEach(t),lJr=r(vVe," \u2014 "),xoe=n(vVe,"A",{href:!0});var JVt=s(xoe);iJr=r(JVt,"FlaxElectraForSequenceClassification"),JVt.forEach(t),dJr=r(vVe," (ELECTRA model)"),vVe.forEach(t),cJr=i(De),q5=n(De,"LI",{});var FVe=s(q5);k5e=n(FVe,"STRONG",{});var YVt=s(k5e);fJr=r(YVt,"mbart"),YVt.forEach(t),mJr=r(FVe," \u2014 "),$oe=n(FVe,"A",{href:!0});var KVt=s($oe);gJr=r(KVt,"FlaxMBartForSequenceClassification"),KVt.forEach(t),hJr=r(FVe," (mBART model)"),FVe.forEach(t),pJr=i(De),j5=n(De,"LI",{});var TVe=s(j5);S5e=n(TVe,"STRONG",{});var ZVt=s(S5e);_Jr=r(ZVt,"roberta"),ZVt.forEach(t),uJr=r(TVe," \u2014 "),koe=n(TVe,"A",{href:!0});var eXt=s(koe);bJr=r(eXt,"FlaxRobertaForSequenceClassification"),eXt.forEach(t),vJr=r(TVe," (RoBERTa model)"),TVe.forEach(t),FJr=i(De),D5=n(De,"LI",{});var MVe=s(D5);R5e=n(MVe,"STRONG",{});var oXt=s(R5e);TJr=r(oXt,"roformer"),oXt.forEach(t),MJr=r(MVe," \u2014 "),Soe=n(MVe,"A",{href:!0});var rXt=s(Soe);EJr=r(rXt,"FlaxRoFormerForSequenceClassification"),rXt.forEach(t),CJr=r(MVe," (RoFormer model)"),MVe.forEach(t),wJr=i(De),G5=n(De,"LI",{});var EVe=s(G5);P5e=n(EVe,"STRONG",{});var tXt=s(P5e);AJr=r(tXt,"xlm-roberta"),tXt.forEach(t),LJr=r(EVe," \u2014 "),Roe=n(EVe,"A",{href:!0});var aXt=s(Roe);yJr=r(aXt,"FlaxXLMRobertaForSequenceClassification"),aXt.forEach(t),xJr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),De.forEach(t),$Jr=i(gi),T(O5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Wze=i(f),mf=n(f,"H2",{class:!0});var rHe=s(mf);V5=n(rHe,"A",{id:!0,class:!0,href:!0});var nXt=s(V5);B5e=n(nXt,"SPAN",{});var sXt=s(B5e);T(q$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),kJr=i(rHe),I5e=n(rHe,"SPAN",{});var lXt=s(I5e);SJr=r(lXt,"FlaxAutoModelForQuestionAnswering"),lXt.forEach(t),rHe.forEach(t),Hze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(j$.$$.fragment,hi),RJr=i(hi),gf=n(hi,"P",{});var cae=s(gf);PJr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Poe=n(cae,"A",{href:!0});var iXt=s(Poe);BJr=r(iXt,"from_pretrained()"),iXt.forEach(t),IJr=r(cae," class method or the "),Boe=n(cae,"A",{href:!0});var dXt=s(Boe);NJr=r(dXt,"from_config()"),dXt.forEach(t),qJr=r(cae,` class
method.`),cae.forEach(t),jJr=i(hi),D$=n(hi,"P",{});var tHe=s(D$);DJr=r(tHe,"This class cannot be instantiated directly using "),N5e=n(tHe,"CODE",{});var cXt=s(N5e);GJr=r(cXt,"__init__()"),cXt.forEach(t),OJr=r(tHe," (throws an error)."),tHe.forEach(t),VJr=i(hi),Kt=n(hi,"DIV",{class:!0});var VA=s(Kt);T(G$.$$.fragment,VA),XJr=i(VA),q5e=n(VA,"P",{});var fXt=s(q5e);zJr=r(fXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fXt.forEach(t),QJr=i(VA),hf=n(VA,"P",{});var fae=s(hf);WJr=r(fae,`Note:
Loading a model from its configuration file does `),j5e=n(fae,"STRONG",{});var mXt=s(j5e);HJr=r(mXt,"not"),mXt.forEach(t),UJr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(fae,"A",{href:!0});var gXt=s(Ioe);JJr=r(gXt,"from_pretrained()"),gXt.forEach(t),YJr=r(fae," to load the model weights."),fae.forEach(t),KJr=i(VA),T(X5.$$.fragment,VA),VA.forEach(t),ZJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(O$.$$.fragment,pi),eYr=i(pi),D5e=n(pi,"P",{});var hXt=s(D5e);oYr=r(hXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hXt.forEach(t),rYr=i(pi),Ln=n(pi,"P",{});var XA=s(Ln);tYr=r(XA,"The model class to instantiate is selected based on the "),G5e=n(XA,"CODE",{});var pXt=s(G5e);aYr=r(pXt,"model_type"),pXt.forEach(t),nYr=r(XA,` property of the config object (either
passed as an argument or loaded from `),O5e=n(XA,"CODE",{});var _Xt=s(O5e);sYr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),lYr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(XA,"CODE",{});var uXt=s(V5e);iYr=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),dYr=r(XA,":"),XA.forEach(t),cYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);z5=n(Ge,"LI",{});var CVe=s(z5);X5e=n(CVe,"STRONG",{});var bXt=s(X5e);fYr=r(bXt,"albert"),bXt.forEach(t),mYr=r(CVe," \u2014 "),Noe=n(CVe,"A",{href:!0});var vXt=s(Noe);gYr=r(vXt,"FlaxAlbertForQuestionAnswering"),vXt.forEach(t),hYr=r(CVe," (ALBERT model)"),CVe.forEach(t),pYr=i(Ge),Q5=n(Ge,"LI",{});var wVe=s(Q5);z5e=n(wVe,"STRONG",{});var FXt=s(z5e);_Yr=r(FXt,"bart"),FXt.forEach(t),uYr=r(wVe," \u2014 "),qoe=n(wVe,"A",{href:!0});var TXt=s(qoe);bYr=r(TXt,"FlaxBartForQuestionAnswering"),TXt.forEach(t),vYr=r(wVe," (BART model)"),wVe.forEach(t),FYr=i(Ge),W5=n(Ge,"LI",{});var AVe=s(W5);Q5e=n(AVe,"STRONG",{});var MXt=s(Q5e);TYr=r(MXt,"bert"),MXt.forEach(t),MYr=r(AVe," \u2014 "),joe=n(AVe,"A",{href:!0});var EXt=s(joe);EYr=r(EXt,"FlaxBertForQuestionAnswering"),EXt.forEach(t),CYr=r(AVe," (BERT model)"),AVe.forEach(t),wYr=i(Ge),H5=n(Ge,"LI",{});var LVe=s(H5);W5e=n(LVe,"STRONG",{});var CXt=s(W5e);AYr=r(CXt,"big_bird"),CXt.forEach(t),LYr=r(LVe," \u2014 "),Doe=n(LVe,"A",{href:!0});var wXt=s(Doe);yYr=r(wXt,"FlaxBigBirdForQuestionAnswering"),wXt.forEach(t),xYr=r(LVe," (BigBird model)"),LVe.forEach(t),$Yr=i(Ge),U5=n(Ge,"LI",{});var yVe=s(U5);H5e=n(yVe,"STRONG",{});var AXt=s(H5e);kYr=r(AXt,"distilbert"),AXt.forEach(t),SYr=r(yVe," \u2014 "),Goe=n(yVe,"A",{href:!0});var LXt=s(Goe);RYr=r(LXt,"FlaxDistilBertForQuestionAnswering"),LXt.forEach(t),PYr=r(yVe," (DistilBERT model)"),yVe.forEach(t),BYr=i(Ge),J5=n(Ge,"LI",{});var xVe=s(J5);U5e=n(xVe,"STRONG",{});var yXt=s(U5e);IYr=r(yXt,"electra"),yXt.forEach(t),NYr=r(xVe," \u2014 "),Ooe=n(xVe,"A",{href:!0});var xXt=s(Ooe);qYr=r(xXt,"FlaxElectraForQuestionAnswering"),xXt.forEach(t),jYr=r(xVe," (ELECTRA model)"),xVe.forEach(t),DYr=i(Ge),Y5=n(Ge,"LI",{});var $Ve=s(Y5);J5e=n($Ve,"STRONG",{});var $Xt=s(J5e);GYr=r($Xt,"mbart"),$Xt.forEach(t),OYr=r($Ve," \u2014 "),Voe=n($Ve,"A",{href:!0});var kXt=s(Voe);VYr=r(kXt,"FlaxMBartForQuestionAnswering"),kXt.forEach(t),XYr=r($Ve," (mBART model)"),$Ve.forEach(t),zYr=i(Ge),K5=n(Ge,"LI",{});var kVe=s(K5);Y5e=n(kVe,"STRONG",{});var SXt=s(Y5e);QYr=r(SXt,"roberta"),SXt.forEach(t),WYr=r(kVe," \u2014 "),Xoe=n(kVe,"A",{href:!0});var RXt=s(Xoe);HYr=r(RXt,"FlaxRobertaForQuestionAnswering"),RXt.forEach(t),UYr=r(kVe," (RoBERTa model)"),kVe.forEach(t),JYr=i(Ge),Z5=n(Ge,"LI",{});var SVe=s(Z5);K5e=n(SVe,"STRONG",{});var PXt=s(K5e);YYr=r(PXt,"roformer"),PXt.forEach(t),KYr=r(SVe," \u2014 "),zoe=n(SVe,"A",{href:!0});var BXt=s(zoe);ZYr=r(BXt,"FlaxRoFormerForQuestionAnswering"),BXt.forEach(t),eKr=r(SVe," (RoFormer model)"),SVe.forEach(t),oKr=i(Ge),e0=n(Ge,"LI",{});var RVe=s(e0);Z5e=n(RVe,"STRONG",{});var IXt=s(Z5e);rKr=r(IXt,"xlm-roberta"),IXt.forEach(t),tKr=r(RVe," \u2014 "),Qoe=n(RVe,"A",{href:!0});var NXt=s(Qoe);aKr=r(NXt,"FlaxXLMRobertaForQuestionAnswering"),NXt.forEach(t),nKr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),Ge.forEach(t),sKr=i(pi),T(o0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Uze=i(f),pf=n(f,"H2",{class:!0});var aHe=s(pf);r0=n(aHe,"A",{id:!0,class:!0,href:!0});var qXt=s(r0);e0e=n(qXt,"SPAN",{});var jXt=s(e0e);T(V$.$$.fragment,jXt),jXt.forEach(t),qXt.forEach(t),lKr=i(aHe),o0e=n(aHe,"SPAN",{});var DXt=s(o0e);iKr=r(DXt,"FlaxAutoModelForTokenClassification"),DXt.forEach(t),aHe.forEach(t),Jze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(X$.$$.fragment,_i),dKr=i(_i),_f=n(_i,"P",{});var mae=s(_f);cKr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Woe=n(mae,"A",{href:!0});var GXt=s(Woe);fKr=r(GXt,"from_pretrained()"),GXt.forEach(t),mKr=r(mae," class method or the "),Hoe=n(mae,"A",{href:!0});var OXt=s(Hoe);gKr=r(OXt,"from_config()"),OXt.forEach(t),hKr=r(mae,` class
method.`),mae.forEach(t),pKr=i(_i),z$=n(_i,"P",{});var nHe=s(z$);_Kr=r(nHe,"This class cannot be instantiated directly using "),r0e=n(nHe,"CODE",{});var VXt=s(r0e);uKr=r(VXt,"__init__()"),VXt.forEach(t),bKr=r(nHe," (throws an error)."),nHe.forEach(t),vKr=i(_i),Zt=n(_i,"DIV",{class:!0});var zA=s(Zt);T(Q$.$$.fragment,zA),FKr=i(zA),t0e=n(zA,"P",{});var XXt=s(t0e);TKr=r(XXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XXt.forEach(t),MKr=i(zA),uf=n(zA,"P",{});var gae=s(uf);EKr=r(gae,`Note:
Loading a model from its configuration file does `),a0e=n(gae,"STRONG",{});var zXt=s(a0e);CKr=r(zXt,"not"),zXt.forEach(t),wKr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uoe=n(gae,"A",{href:!0});var QXt=s(Uoe);AKr=r(QXt,"from_pretrained()"),QXt.forEach(t),LKr=r(gae," to load the model weights."),gae.forEach(t),yKr=i(zA),T(t0.$$.fragment,zA),zA.forEach(t),xKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(W$.$$.fragment,ui),$Kr=i(ui),n0e=n(ui,"P",{});var WXt=s(n0e);kKr=r(WXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WXt.forEach(t),SKr=i(ui),yn=n(ui,"P",{});var QA=s(yn);RKr=r(QA,"The model class to instantiate is selected based on the "),s0e=n(QA,"CODE",{});var HXt=s(s0e);PKr=r(HXt,"model_type"),HXt.forEach(t),BKr=r(QA,` property of the config object (either
passed as an argument or loaded from `),l0e=n(QA,"CODE",{});var UXt=s(l0e);IKr=r(UXt,"pretrained_model_name_or_path"),UXt.forEach(t),NKr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(QA,"CODE",{});var JXt=s(i0e);qKr=r(JXt,"pretrained_model_name_or_path"),JXt.forEach(t),jKr=r(QA,":"),QA.forEach(t),DKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);a0=n(To,"LI",{});var PVe=s(a0);d0e=n(PVe,"STRONG",{});var YXt=s(d0e);GKr=r(YXt,"albert"),YXt.forEach(t),OKr=r(PVe," \u2014 "),Joe=n(PVe,"A",{href:!0});var KXt=s(Joe);VKr=r(KXt,"FlaxAlbertForTokenClassification"),KXt.forEach(t),XKr=r(PVe," (ALBERT model)"),PVe.forEach(t),zKr=i(To),n0=n(To,"LI",{});var BVe=s(n0);c0e=n(BVe,"STRONG",{});var ZXt=s(c0e);QKr=r(ZXt,"bert"),ZXt.forEach(t),WKr=r(BVe," \u2014 "),Yoe=n(BVe,"A",{href:!0});var ezt=s(Yoe);HKr=r(ezt,"FlaxBertForTokenClassification"),ezt.forEach(t),UKr=r(BVe," (BERT model)"),BVe.forEach(t),JKr=i(To),s0=n(To,"LI",{});var IVe=s(s0);f0e=n(IVe,"STRONG",{});var ozt=s(f0e);YKr=r(ozt,"big_bird"),ozt.forEach(t),KKr=r(IVe," \u2014 "),Koe=n(IVe,"A",{href:!0});var rzt=s(Koe);ZKr=r(rzt,"FlaxBigBirdForTokenClassification"),rzt.forEach(t),eZr=r(IVe," (BigBird model)"),IVe.forEach(t),oZr=i(To),l0=n(To,"LI",{});var NVe=s(l0);m0e=n(NVe,"STRONG",{});var tzt=s(m0e);rZr=r(tzt,"distilbert"),tzt.forEach(t),tZr=r(NVe," \u2014 "),Zoe=n(NVe,"A",{href:!0});var azt=s(Zoe);aZr=r(azt,"FlaxDistilBertForTokenClassification"),azt.forEach(t),nZr=r(NVe," (DistilBERT model)"),NVe.forEach(t),sZr=i(To),i0=n(To,"LI",{});var qVe=s(i0);g0e=n(qVe,"STRONG",{});var nzt=s(g0e);lZr=r(nzt,"electra"),nzt.forEach(t),iZr=r(qVe," \u2014 "),ere=n(qVe,"A",{href:!0});var szt=s(ere);dZr=r(szt,"FlaxElectraForTokenClassification"),szt.forEach(t),cZr=r(qVe," (ELECTRA model)"),qVe.forEach(t),fZr=i(To),d0=n(To,"LI",{});var jVe=s(d0);h0e=n(jVe,"STRONG",{});var lzt=s(h0e);mZr=r(lzt,"roberta"),lzt.forEach(t),gZr=r(jVe," \u2014 "),ore=n(jVe,"A",{href:!0});var izt=s(ore);hZr=r(izt,"FlaxRobertaForTokenClassification"),izt.forEach(t),pZr=r(jVe," (RoBERTa model)"),jVe.forEach(t),_Zr=i(To),c0=n(To,"LI",{});var DVe=s(c0);p0e=n(DVe,"STRONG",{});var dzt=s(p0e);uZr=r(dzt,"roformer"),dzt.forEach(t),bZr=r(DVe," \u2014 "),rre=n(DVe,"A",{href:!0});var czt=s(rre);vZr=r(czt,"FlaxRoFormerForTokenClassification"),czt.forEach(t),FZr=r(DVe," (RoFormer model)"),DVe.forEach(t),TZr=i(To),f0=n(To,"LI",{});var GVe=s(f0);_0e=n(GVe,"STRONG",{});var fzt=s(_0e);MZr=r(fzt,"xlm-roberta"),fzt.forEach(t),EZr=r(GVe," \u2014 "),tre=n(GVe,"A",{href:!0});var mzt=s(tre);CZr=r(mzt,"FlaxXLMRobertaForTokenClassification"),mzt.forEach(t),wZr=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),To.forEach(t),AZr=i(ui),T(m0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Yze=i(f),bf=n(f,"H2",{class:!0});var sHe=s(bf);g0=n(sHe,"A",{id:!0,class:!0,href:!0});var gzt=s(g0);u0e=n(gzt,"SPAN",{});var hzt=s(u0e);T(H$.$$.fragment,hzt),hzt.forEach(t),gzt.forEach(t),LZr=i(sHe),b0e=n(sHe,"SPAN",{});var pzt=s(b0e);yZr=r(pzt,"FlaxAutoModelForMultipleChoice"),pzt.forEach(t),sHe.forEach(t),Kze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(U$.$$.fragment,bi),xZr=i(bi),vf=n(bi,"P",{});var hae=s(vf);$Zr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),are=n(hae,"A",{href:!0});var _zt=s(are);kZr=r(_zt,"from_pretrained()"),_zt.forEach(t),SZr=r(hae," class method or the "),nre=n(hae,"A",{href:!0});var uzt=s(nre);RZr=r(uzt,"from_config()"),uzt.forEach(t),PZr=r(hae,` class
method.`),hae.forEach(t),BZr=i(bi),J$=n(bi,"P",{});var lHe=s(J$);IZr=r(lHe,"This class cannot be instantiated directly using "),v0e=n(lHe,"CODE",{});var bzt=s(v0e);NZr=r(bzt,"__init__()"),bzt.forEach(t),qZr=r(lHe," (throws an error)."),lHe.forEach(t),jZr=i(bi),ea=n(bi,"DIV",{class:!0});var WA=s(ea);T(Y$.$$.fragment,WA),DZr=i(WA),F0e=n(WA,"P",{});var vzt=s(F0e);GZr=r(vzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vzt.forEach(t),OZr=i(WA),Ff=n(WA,"P",{});var pae=s(Ff);VZr=r(pae,`Note:
Loading a model from its configuration file does `),T0e=n(pae,"STRONG",{});var Fzt=s(T0e);XZr=r(Fzt,"not"),Fzt.forEach(t),zZr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(pae,"A",{href:!0});var Tzt=s(sre);QZr=r(Tzt,"from_pretrained()"),Tzt.forEach(t),WZr=r(pae," to load the model weights."),pae.forEach(t),HZr=i(WA),T(h0.$$.fragment,WA),WA.forEach(t),UZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(K$.$$.fragment,vi),JZr=i(vi),M0e=n(vi,"P",{});var Mzt=s(M0e);YZr=r(Mzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mzt.forEach(t),KZr=i(vi),xn=n(vi,"P",{});var HA=s(xn);ZZr=r(HA,"The model class to instantiate is selected based on the "),E0e=n(HA,"CODE",{});var Ezt=s(E0e);eet=r(Ezt,"model_type"),Ezt.forEach(t),oet=r(HA,` property of the config object (either
passed as an argument or loaded from `),C0e=n(HA,"CODE",{});var Czt=s(C0e);ret=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),tet=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(HA,"CODE",{});var wzt=s(w0e);aet=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),net=r(HA,":"),HA.forEach(t),set=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);p0=n(Mo,"LI",{});var OVe=s(p0);A0e=n(OVe,"STRONG",{});var Azt=s(A0e);iet=r(Azt,"albert"),Azt.forEach(t),det=r(OVe," \u2014 "),lre=n(OVe,"A",{href:!0});var Lzt=s(lre);cet=r(Lzt,"FlaxAlbertForMultipleChoice"),Lzt.forEach(t),fet=r(OVe," (ALBERT model)"),OVe.forEach(t),met=i(Mo),_0=n(Mo,"LI",{});var VVe=s(_0);L0e=n(VVe,"STRONG",{});var yzt=s(L0e);get=r(yzt,"bert"),yzt.forEach(t),het=r(VVe," \u2014 "),ire=n(VVe,"A",{href:!0});var xzt=s(ire);pet=r(xzt,"FlaxBertForMultipleChoice"),xzt.forEach(t),_et=r(VVe," (BERT model)"),VVe.forEach(t),uet=i(Mo),u0=n(Mo,"LI",{});var XVe=s(u0);y0e=n(XVe,"STRONG",{});var $zt=s(y0e);bet=r($zt,"big_bird"),$zt.forEach(t),vet=r(XVe," \u2014 "),dre=n(XVe,"A",{href:!0});var kzt=s(dre);Fet=r(kzt,"FlaxBigBirdForMultipleChoice"),kzt.forEach(t),Tet=r(XVe," (BigBird model)"),XVe.forEach(t),Met=i(Mo),b0=n(Mo,"LI",{});var zVe=s(b0);x0e=n(zVe,"STRONG",{});var Szt=s(x0e);Eet=r(Szt,"distilbert"),Szt.forEach(t),Cet=r(zVe," \u2014 "),cre=n(zVe,"A",{href:!0});var Rzt=s(cre);wet=r(Rzt,"FlaxDistilBertForMultipleChoice"),Rzt.forEach(t),Aet=r(zVe," (DistilBERT model)"),zVe.forEach(t),Let=i(Mo),v0=n(Mo,"LI",{});var QVe=s(v0);$0e=n(QVe,"STRONG",{});var Pzt=s($0e);yet=r(Pzt,"electra"),Pzt.forEach(t),xet=r(QVe," \u2014 "),fre=n(QVe,"A",{href:!0});var Bzt=s(fre);$et=r(Bzt,"FlaxElectraForMultipleChoice"),Bzt.forEach(t),ket=r(QVe," (ELECTRA model)"),QVe.forEach(t),Set=i(Mo),F0=n(Mo,"LI",{});var WVe=s(F0);k0e=n(WVe,"STRONG",{});var Izt=s(k0e);Ret=r(Izt,"roberta"),Izt.forEach(t),Pet=r(WVe," \u2014 "),mre=n(WVe,"A",{href:!0});var Nzt=s(mre);Bet=r(Nzt,"FlaxRobertaForMultipleChoice"),Nzt.forEach(t),Iet=r(WVe," (RoBERTa model)"),WVe.forEach(t),Net=i(Mo),T0=n(Mo,"LI",{});var HVe=s(T0);S0e=n(HVe,"STRONG",{});var qzt=s(S0e);qet=r(qzt,"roformer"),qzt.forEach(t),jet=r(HVe," \u2014 "),gre=n(HVe,"A",{href:!0});var jzt=s(gre);Det=r(jzt,"FlaxRoFormerForMultipleChoice"),jzt.forEach(t),Get=r(HVe," (RoFormer model)"),HVe.forEach(t),Oet=i(Mo),M0=n(Mo,"LI",{});var UVe=s(M0);R0e=n(UVe,"STRONG",{});var Dzt=s(R0e);Vet=r(Dzt,"xlm-roberta"),Dzt.forEach(t),Xet=r(UVe," \u2014 "),hre=n(UVe,"A",{href:!0});var Gzt=s(hre);zet=r(Gzt,"FlaxXLMRobertaForMultipleChoice"),Gzt.forEach(t),Qet=r(UVe," (XLM-RoBERTa model)"),UVe.forEach(t),Mo.forEach(t),Wet=i(vi),T(E0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Zze=i(f),Tf=n(f,"H2",{class:!0});var iHe=s(Tf);C0=n(iHe,"A",{id:!0,class:!0,href:!0});var Ozt=s(C0);P0e=n(Ozt,"SPAN",{});var Vzt=s(P0e);T(Z$.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),Het=i(iHe),B0e=n(iHe,"SPAN",{});var Xzt=s(B0e);Uet=r(Xzt,"FlaxAutoModelForNextSentencePrediction"),Xzt.forEach(t),iHe.forEach(t),eQe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(ek.$$.fragment,Fi),Jet=i(Fi),Mf=n(Fi,"P",{});var _ae=s(Mf);Yet=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pre=n(_ae,"A",{href:!0});var zzt=s(pre);Ket=r(zzt,"from_pretrained()"),zzt.forEach(t),Zet=r(_ae," class method or the "),_re=n(_ae,"A",{href:!0});var Qzt=s(_re);eot=r(Qzt,"from_config()"),Qzt.forEach(t),oot=r(_ae,` class
method.`),_ae.forEach(t),rot=i(Fi),ok=n(Fi,"P",{});var dHe=s(ok);tot=r(dHe,"This class cannot be instantiated directly using "),I0e=n(dHe,"CODE",{});var Wzt=s(I0e);aot=r(Wzt,"__init__()"),Wzt.forEach(t),not=r(dHe," (throws an error)."),dHe.forEach(t),sot=i(Fi),oa=n(Fi,"DIV",{class:!0});var UA=s(oa);T(rk.$$.fragment,UA),lot=i(UA),N0e=n(UA,"P",{});var Hzt=s(N0e);iot=r(Hzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hzt.forEach(t),dot=i(UA),Ef=n(UA,"P",{});var uae=s(Ef);cot=r(uae,`Note:
Loading a model from its configuration file does `),q0e=n(uae,"STRONG",{});var Uzt=s(q0e);fot=r(Uzt,"not"),Uzt.forEach(t),mot=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(uae,"A",{href:!0});var Jzt=s(ure);got=r(Jzt,"from_pretrained()"),Jzt.forEach(t),hot=r(uae," to load the model weights."),uae.forEach(t),pot=i(UA),T(w0.$$.fragment,UA),UA.forEach(t),_ot=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(tk.$$.fragment,Ti),uot=i(Ti),j0e=n(Ti,"P",{});var Yzt=s(j0e);bot=r(Yzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yzt.forEach(t),vot=i(Ti),$n=n(Ti,"P",{});var JA=s($n);Fot=r(JA,"The model class to instantiate is selected based on the "),D0e=n(JA,"CODE",{});var Kzt=s(D0e);Tot=r(Kzt,"model_type"),Kzt.forEach(t),Mot=r(JA,` property of the config object (either
passed as an argument or loaded from `),G0e=n(JA,"CODE",{});var Zzt=s(G0e);Eot=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),Cot=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(JA,"CODE",{});var eQt=s(O0e);wot=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),Aot=r(JA,":"),JA.forEach(t),Lot=i(Ti),V0e=n(Ti,"UL",{});var oQt=s(V0e);A0=n(oQt,"LI",{});var JVe=s(A0);X0e=n(JVe,"STRONG",{});var rQt=s(X0e);yot=r(rQt,"bert"),rQt.forEach(t),xot=r(JVe," \u2014 "),bre=n(JVe,"A",{href:!0});var tQt=s(bre);$ot=r(tQt,"FlaxBertForNextSentencePrediction"),tQt.forEach(t),kot=r(JVe," (BERT model)"),JVe.forEach(t),oQt.forEach(t),Sot=i(Ti),T(L0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),oQe=i(f),Cf=n(f,"H2",{class:!0});var cHe=s(Cf);y0=n(cHe,"A",{id:!0,class:!0,href:!0});var aQt=s(y0);z0e=n(aQt,"SPAN",{});var nQt=s(z0e);T(ak.$$.fragment,nQt),nQt.forEach(t),aQt.forEach(t),Rot=i(cHe),Q0e=n(cHe,"SPAN",{});var sQt=s(Q0e);Pot=r(sQt,"FlaxAutoModelForImageClassification"),sQt.forEach(t),cHe.forEach(t),rQe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(nk.$$.fragment,Mi),Bot=i(Mi),wf=n(Mi,"P",{});var bae=s(wf);Iot=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vre=n(bae,"A",{href:!0});var lQt=s(vre);Not=r(lQt,"from_pretrained()"),lQt.forEach(t),qot=r(bae," class method or the "),Fre=n(bae,"A",{href:!0});var iQt=s(Fre);jot=r(iQt,"from_config()"),iQt.forEach(t),Dot=r(bae,` class
method.`),bae.forEach(t),Got=i(Mi),sk=n(Mi,"P",{});var fHe=s(sk);Oot=r(fHe,"This class cannot be instantiated directly using "),W0e=n(fHe,"CODE",{});var dQt=s(W0e);Vot=r(dQt,"__init__()"),dQt.forEach(t),Xot=r(fHe," (throws an error)."),fHe.forEach(t),zot=i(Mi),ra=n(Mi,"DIV",{class:!0});var YA=s(ra);T(lk.$$.fragment,YA),Qot=i(YA),H0e=n(YA,"P",{});var cQt=s(H0e);Wot=r(cQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cQt.forEach(t),Hot=i(YA),Af=n(YA,"P",{});var vae=s(Af);Uot=r(vae,`Note:
Loading a model from its configuration file does `),U0e=n(vae,"STRONG",{});var fQt=s(U0e);Jot=r(fQt,"not"),fQt.forEach(t),Yot=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tre=n(vae,"A",{href:!0});var mQt=s(Tre);Kot=r(mQt,"from_pretrained()"),mQt.forEach(t),Zot=r(vae," to load the model weights."),vae.forEach(t),ert=i(YA),T(x0.$$.fragment,YA),YA.forEach(t),ort=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(ik.$$.fragment,Ei),rrt=i(Ei),J0e=n(Ei,"P",{});var gQt=s(J0e);trt=r(gQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gQt.forEach(t),art=i(Ei),kn=n(Ei,"P",{});var KA=s(kn);nrt=r(KA,"The model class to instantiate is selected based on the "),Y0e=n(KA,"CODE",{});var hQt=s(Y0e);srt=r(hQt,"model_type"),hQt.forEach(t),lrt=r(KA,` property of the config object (either
passed as an argument or loaded from `),K0e=n(KA,"CODE",{});var pQt=s(K0e);irt=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),drt=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(KA,"CODE",{});var _Qt=s(Z0e);crt=r(_Qt,"pretrained_model_name_or_path"),_Qt.forEach(t),frt=r(KA,":"),KA.forEach(t),mrt=i(Ei),dk=n(Ei,"UL",{});var mHe=s(dk);$0=n(mHe,"LI",{});var YVe=s($0);ewe=n(YVe,"STRONG",{});var uQt=s(ewe);grt=r(uQt,"beit"),uQt.forEach(t),hrt=r(YVe," \u2014 "),Mre=n(YVe,"A",{href:!0});var bQt=s(Mre);prt=r(bQt,"FlaxBeitForImageClassification"),bQt.forEach(t),_rt=r(YVe," (BEiT model)"),YVe.forEach(t),urt=i(mHe),k0=n(mHe,"LI",{});var KVe=s(k0);owe=n(KVe,"STRONG",{});var vQt=s(owe);brt=r(vQt,"vit"),vQt.forEach(t),vrt=r(KVe," \u2014 "),Ere=n(KVe,"A",{href:!0});var FQt=s(Ere);Frt=r(FQt,"FlaxViTForImageClassification"),FQt.forEach(t),Trt=r(KVe," (ViT model)"),KVe.forEach(t),mHe.forEach(t),Mrt=i(Ei),T(S0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),tQe=i(f),Lf=n(f,"H2",{class:!0});var gHe=s(Lf);R0=n(gHe,"A",{id:!0,class:!0,href:!0});var TQt=s(R0);rwe=n(TQt,"SPAN",{});var MQt=s(rwe);T(ck.$$.fragment,MQt),MQt.forEach(t),TQt.forEach(t),Ert=i(gHe),twe=n(gHe,"SPAN",{});var EQt=s(twe);Crt=r(EQt,"FlaxAutoModelForVision2Seq"),EQt.forEach(t),gHe.forEach(t),aQe=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(fk.$$.fragment,Ci),wrt=i(Ci),yf=n(Ci,"P",{});var Fae=s(yf);Art=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=n(Fae,"A",{href:!0});var CQt=s(Cre);Lrt=r(CQt,"from_pretrained()"),CQt.forEach(t),yrt=r(Fae," class method or the "),wre=n(Fae,"A",{href:!0});var wQt=s(wre);xrt=r(wQt,"from_config()"),wQt.forEach(t),$rt=r(Fae,` class
method.`),Fae.forEach(t),krt=i(Ci),mk=n(Ci,"P",{});var hHe=s(mk);Srt=r(hHe,"This class cannot be instantiated directly using "),awe=n(hHe,"CODE",{});var AQt=s(awe);Rrt=r(AQt,"__init__()"),AQt.forEach(t),Prt=r(hHe," (throws an error)."),hHe.forEach(t),Brt=i(Ci),ta=n(Ci,"DIV",{class:!0});var ZA=s(ta);T(gk.$$.fragment,ZA),Irt=i(ZA),nwe=n(ZA,"P",{});var LQt=s(nwe);Nrt=r(LQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LQt.forEach(t),qrt=i(ZA),xf=n(ZA,"P",{});var Tae=s(xf);jrt=r(Tae,`Note:
Loading a model from its configuration file does `),swe=n(Tae,"STRONG",{});var yQt=s(swe);Drt=r(yQt,"not"),yQt.forEach(t),Grt=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Tae,"A",{href:!0});var xQt=s(Are);Ort=r(xQt,"from_pretrained()"),xQt.forEach(t),Vrt=r(Tae," to load the model weights."),Tae.forEach(t),Xrt=i(ZA),T(P0.$$.fragment,ZA),ZA.forEach(t),zrt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(hk.$$.fragment,wi),Qrt=i(wi),lwe=n(wi,"P",{});var $Qt=s(lwe);Wrt=r($Qt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Qt.forEach(t),Hrt=i(wi),Sn=n(wi,"P",{});var eL=s(Sn);Urt=r(eL,"The model class to instantiate is selected based on the "),iwe=n(eL,"CODE",{});var kQt=s(iwe);Jrt=r(kQt,"model_type"),kQt.forEach(t),Yrt=r(eL,` property of the config object (either
passed as an argument or loaded from `),dwe=n(eL,"CODE",{});var SQt=s(dwe);Krt=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),Zrt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cwe=n(eL,"CODE",{});var RQt=s(cwe);ett=r(RQt,"pretrained_model_name_or_path"),RQt.forEach(t),ott=r(eL,":"),eL.forEach(t),rtt=i(wi),fwe=n(wi,"UL",{});var PQt=s(fwe);B0=n(PQt,"LI",{});var ZVe=s(B0);mwe=n(ZVe,"STRONG",{});var BQt=s(mwe);ttt=r(BQt,"vision-encoder-decoder"),BQt.forEach(t),att=r(ZVe," \u2014 "),Lre=n(ZVe,"A",{href:!0});var IQt=s(Lre);ntt=r(IQt,"FlaxVisionEncoderDecoderModel"),IQt.forEach(t),stt=r(ZVe," (Vision Encoder decoder model)"),ZVe.forEach(t),PQt.forEach(t),ltt=i(wi),T(I0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(OHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(GS,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(OS,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertConfig"),c(VS,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartConfig"),c(XS,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitConfig"),c(zS,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertConfig"),c(QS,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(WS,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdConfig"),c(HS,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(US,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(JS,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(YS,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomConfig"),c(KS,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertConfig"),c(ZS,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineConfig"),c(eR,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPConfig"),c(oR,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenConfig"),c(rR,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertConfig"),c(tR,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextConfig"),c(aR,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLConfig"),c(nR,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtConfig"),c(sR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(iR,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dR,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaConfig"),c(cR,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(fR,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mR,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTConfig"),c(gR,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrConfig"),c(hR,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pR,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRConfig"),c(_R,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTConfig"),c(uR,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraConfig"),c(bR,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vR,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FR,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaConfig"),c(TR,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetConfig"),c(MR,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTConfig"),c(ER,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelConfig"),c(CR,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNConfig"),c(wR,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Config"),c(AR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LR,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yR,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJConfig"),c(xR,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTConfig"),c($R,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertConfig"),c(kR,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertConfig"),c(SR,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RR,"href","/docs/transformers/pr_17826/en/model_doc/jukebox#transformers.JukeboxConfig"),c(PR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(BR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(IR,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(NR,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDConfig"),c(qR,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitConfig"),c(jR,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerConfig"),c(DR,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Config"),c(GR,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeConfig"),c(OR,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertConfig"),c(VR,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Config"),c(XR,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianConfig"),c(zR,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(QR,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartConfig"),c(WR,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTConfig"),c(HR,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(UR,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(JR,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(YR,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetConfig"),c(KR,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Config"),c(ZR,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpConfig"),c(eP,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaConfig"),c(oP,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rP,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tP,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTConfig"),c(aP,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusConfig"),c(nP,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sP,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartConfig"),c(lP,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iP,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dP,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cP,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagConfig"),c(fP,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmConfig"),c(mP,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerConfig"),c(gP,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetConfig"),c(hP,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertConfig"),c(pP,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetConfig"),c(_P,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertConfig"),c(uP,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaConfig"),c(bP,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerConfig"),c(vP,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerConfig"),c(FP,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWConfig"),c(TP,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDConfig"),c(MP,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(EP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CP,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wP,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterConfig"),c(AP,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LP,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinConfig"),c(yP,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Config"),c(xP,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasConfig"),c($P,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kP,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SP,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRConfig"),c(RP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PP,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BP,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanConfig"),c(IP,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltConfig"),c(NP,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(qP,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jP,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DP,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTConfig"),c(GP,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VP,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XP,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMConfig"),c(zP,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMConfig"),c(QP,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMConfig"),c(WP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(UP,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JP,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetConfig"),c(YP,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosConfig"),c(KP,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(ZP,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizer"),c(tB,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartTokenizerFast"),c(aB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nB,"href","/docs/transformers/pr_17826/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sB,"href","/docs/transformers/pr_17826/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cB,"href","/docs/transformers/pr_17826/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fB,"href","/docs/transformers/pr_17826/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gB,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pB,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_B,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(uB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bB,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vB,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(FB,"href","/docs/transformers/pr_17826/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(TB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizer"),c(MB,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineTokenizer"),c(CB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(wB,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(LB,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(yB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xB,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($B,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizer"),c(kB,"href","/docs/transformers/pr_17826/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SB,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IB,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qB,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DB,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OB,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizer"),c(XB,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zB,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(QB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizer"),c(WB,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HB,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JB,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZB,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oI,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizer"),c(nI,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lI,"href","/docs/transformers/pr_17826/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iI,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cI,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pI,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_I,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uI,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bI,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vI,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizer"),c(FI,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDTokenizerFast"),c(TI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MI,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(CI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(wI,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeTokenizer"),c(AI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LI,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xI,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianTokenizer"),c($I,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizer"),c(kI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RI,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(BI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(II,"href","/docs/transformers/pr_17826/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NI,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qI,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DI,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(OI,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(VI,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizer"),c(XI,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(zI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(QI,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(WI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(HI,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JI,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YI,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZI,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eN,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oN,"href","/docs/transformers/pr_17826/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rN,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tN,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(nN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(sN,"href","/docs/transformers/pr_17826/en/model_doc/rag#transformers.RagTokenizer"),c(lN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizer"),c(iN,"href","/docs/transformers/pr_17826/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dN,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cN,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mN,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hN,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_N,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uN,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bN,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FN,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TN,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MN,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CN,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wN,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Tokenizer"),c(AN,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5TokenizerFast"),c(LN,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasTokenizer"),c(yN,"href","/docs/transformers/pr_17826/en/model_doc/tapex#transformers.TapexTokenizer"),c(xN,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($N,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(kN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(SN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizer"),c(RN,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertTokenizerFast"),c(PN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IN,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qN,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jN,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMTokenizer"),c(DN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GN,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(ON,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XN,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QN,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizer"),c(HN,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoFeatureExtractor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(UN,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JN,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YN,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mq,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c($q,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Sq,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Pq,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Bq,"href","/docs/transformers/pr_17826/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Iq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Nq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jq,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Dq,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Gq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltProcessor"),c(Xq,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Hq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertModel"),c(Kq,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartModel"),c(Zq,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitModel"),c(ej,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertModel"),c(oj,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(rj,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdModel"),c(tj,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(aj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(nj,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(sj,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomModel"),c(lj,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertModel"),c(ij,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineModel"),c(dj,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.CLIPModel"),c(cj,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenModel"),c(fj,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertModel"),c(mj,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextModel"),c(gj,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLModel"),c(hj,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtModel"),c(pj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_j,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uj,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(bj,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaModel"),c(vj,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Fj,"href","/docs/transformers/pr_17826/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Tj,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTModel"),c(Mj,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrModel"),c(Ej,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertModel"),c(Cj,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wj,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTModel"),c(Aj,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraModel"),c(Lj,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertModel"),c(yj,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaModel"),c(xj,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetModel"),c($j,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTModel"),c(kj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelModel"),c(Sj,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Rj,"href","/docs/transformers/pr_17826/en/model_doc/glpn#transformers.GLPNModel"),c(Pj,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2Model"),c(Bj,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ij,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Nj,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJModel"),c(qj,"href","/docs/transformers/pr_17826/en/model_doc/groupvit#transformers.GroupViTModel"),c(jj,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertModel"),c(Dj,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertModel"),c(Gj,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Oj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Vj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Xj,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(zj,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDModel"),c(Qj,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitModel"),c(Wj,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerModel"),c(Hj,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5Model"),c(Uj,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeModel"),c(Jj,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertModel"),c(Yj,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100Model"),c(Kj,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianModel"),c(Zj,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerModel"),c(eD,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartModel"),c(oD,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTModel"),c(rD,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tD,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aD,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTModel"),c(nD,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetModel"),c(sD,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5Model"),c(lD,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpModel"),c(iD,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaModel"),c(dD,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerModel"),c(cD,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(fD,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTModel"),c(mD,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusModel"),c(gD,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverModel"),c(hD,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartModel"),c(pD,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_D,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(uD,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bD,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModel"),c(vD,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetModel"),c(FD,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertModel"),c(TD,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetModel"),c(MD,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(ED,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaModel"),c(CD,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerModel"),c(wD,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerModel"),c(AD,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWModel"),c(LD,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDModel"),c(yD,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xD,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterModel"),c($D,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kD,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinModel"),c(SD,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5Model"),c(RD,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasModel"),c(PD,"href","/docs/transformers/pr_17826/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(BD,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(ID,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ND,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qD,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanModel"),c(jD,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltModel"),c(DD,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GD,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertModel"),c(OD,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTModel"),c(VD,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(XD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zD,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(QD,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMModel"),c(WD,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMModel"),c(HD,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMModel"),c(UD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(JD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(YD,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(KD,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetModel"),c(ZD,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosModel"),c(eG,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(oG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForPreTraining"),c(nG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForPreTraining"),c(lG,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(iG,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dG,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cG,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fG,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mG,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gG,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hG,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pG,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForPreTraining"),c(_G,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uG,"href","/docs/transformers/pr_17826/en/model_doc/flava#transformers.FlavaForPreTraining"),c(bG,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForPreTraining"),c(vG,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(TG,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(MG,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CG,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wG,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(AG,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(LG,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(yG,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xG,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c($G,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(kG,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SG,"href","/docs/transformers/pr_17826/en/model_doc/retribert#transformers.RetriBertModel"),c(RG,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PG,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(BG,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IG,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qG,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(DG,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(GG,"href","/docs/transformers/pr_17826/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(OG,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(VG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(XG,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(zG,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WG,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HG,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForCausalLM"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(UG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForCausalLM"),c(ZG,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertLMHeadModel"),c(eO,"href","/docs/transformers/pr_17826/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(oO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(rO,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(tO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(aO,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(nO,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForCausalLM"),c(sO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(lO,"href","/docs/transformers/pr_17826/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(iO,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(cO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForCausalLM"),c(fO,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(gO,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(hO,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(pO,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianForCausalLM"),c(_O,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForCausalLM"),c(uO,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(bO,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForCausalLM"),c(vO,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FO,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.OPTForCausalLM"),c(TO,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(MO,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(EO,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(CO,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(wO,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(AO,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(LO,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(yO,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(xO,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c($O,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(kO,"href","/docs/transformers/pr_17826/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(SO,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(RO,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(BO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(IO,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(NO,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForMaskedLM"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(qO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMaskedLM"),c(XO,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(zO,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QO,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HO,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(UO,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JO,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YO,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(KO,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ZO,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(eV,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(oV,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rV,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tV,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aV,"href","/docs/transformers/pr_17826/en/model_doc/luke#transformers.LukeForMaskedLM"),c(nV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(lV,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(fV,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mV,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gV,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uV,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bV,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vV,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(FV,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(EV,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForSeq2SeqLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(CV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(SV,"href","/docs/transformers/pr_17826/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17826/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.MarianMTModel"),c(NV,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17826/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17826/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForSequenceClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(zV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c($X,"href","/docs/transformers/pr_17826/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForMultipleChoice"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(XX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForNextSentencePrediction"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(yz,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForTokenClassification"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(qz,"href","/docs/transformers/pr_17826/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(jz,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(zz,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.AutoModelForQuestionAnswering"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17826/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17826/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PQ,"href","/docs/transformers/pr_17826/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17826/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17826/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17826/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17826/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17826/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17826/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17826/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17826/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17826/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(aW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(lW,"href","/docs/transformers/pr_17826/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForTableQuestionAnswering"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(iW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForImageClassification"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(mW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForImageClassification"),c(_W,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(uW,"href","/docs/transformers/pr_17826/en/model_doc/cvt#transformers.CvtForImageClassification"),c(bW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(vW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassification"),c(FW,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(TW,"href","/docs/transformers/pr_17826/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(MW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassification"),c(EW,"href","/docs/transformers/pr_17826/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(CW,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(wW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(AW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(LW,"href","/docs/transformers/pr_17826/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yW,"href","/docs/transformers/pr_17826/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(xW,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.RegNetForImageClassification"),c($W,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(kW,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(SW,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForImageClassification"),c(RW,"href","/docs/transformers/pr_17826/en/model_doc/van#transformers.VanForImageClassification"),c(PW,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForVision2Seq"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(BW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17826/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForAudioClassification"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(VW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.AutoModelForAudioFrameClassification"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(nH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(sH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(lH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForCTC"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gH,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.HubertForCTC"),c(hH,"href","/docs/transformers/pr_17826/en/model_doc/mctct#transformers.MCTCTForCTC"),c(pH,"href","/docs/transformers/pr_17826/en/model_doc/sew#transformers.SEWForCTC"),c(_H,"href","/docs/transformers/pr_17826/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(TH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(MH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17826/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AH,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.AutoModelForAudioXVector"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(LH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kH,"href","/docs/transformers/pr_17826/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RH,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(PH,"href","/docs/transformers/pr_17826/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.AutoModelForMaskedImageModeling"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17826/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jH,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(DH,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.AutoModelForObjectDetection"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(GH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zH,"href","/docs/transformers/pr_17826/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e8,"id","transformers.AutoModelForImageSegmentation"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(QH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17826/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n8,"id","transformers.AutoModelForSemanticSegmentation"),c(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n8,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(JH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oU,"href","/docs/transformers/pr_17826/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rU,"href","/docs/transformers/pr_17826/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_17826/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForInstanceSegmentation"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17826/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.TFAutoModel"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertModel"),c(mU,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartModel"),c(gU,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertModel"),c(hU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(pU,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(_U,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertModel"),c(uU,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.TFCLIPModel"),c(bU,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertModel"),c(vU,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextModel"),c(FU,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLModel"),c(TU,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(MU,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaModel"),c(EU,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(CU,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(wU,"href","/docs/transformers/pr_17826/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(AU,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraModel"),c(LU,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelModel"),c(xU,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c($U,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2Model"),c(kU,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJModel"),c(SU,"href","/docs/transformers/pr_17826/en/model_doc/hubert#transformers.TFHubertModel"),c(RU,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(PU,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDModel"),c(BU,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerModel"),c(IU,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NU,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianModel"),c(qU,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartModel"),c(jU,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(DU,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetModel"),c(GU,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5Model"),c(OU,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(VU,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTModel"),c(XU,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zU,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetModel"),c(QU,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertModel"),c(WU,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetModel"),c(HU,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaModel"),c(UU,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerModel"),c(JU,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(YU,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinModel"),c(KU,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5Model"),c(ZU,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasModel"),c(eJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(oJ,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTModel"),c(rJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(tJ,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMModel"),c(nJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.TFAutoModelForPreTraining"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(fJ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForPreTraining"),c(gJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pJ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_J,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(uJ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bJ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(vJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FJ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17826/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(MJ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xJ,"href","/docs/transformers/pr_17826/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c($J,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForCausalLM"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(NJ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(qJ,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(jJ,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DJ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(GJ,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OJ,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(VJ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(XJ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(zJ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(QJ,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WJ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HJ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a4,"id","transformers.TFAutoModelForImageClassification"),c(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a4,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17826/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ZJ,"href","/docs/transformers/pr_17826/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(eY,"href","/docs/transformers/pr_17826/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(oY,"href","/docs/transformers/pr_17826/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(rY,"href","/docs/transformers/pr_17826/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(tY,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.TFAutoModelForMaskedLM"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(dY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(fY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(mY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(gY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(pY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Y,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(uY,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bY,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(vY,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TY,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EY,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CY,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wY,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AY,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(LY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PY,"href","/docs/transformers/pr_17826/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.TFMarianMTModel"),c(IY,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForSequenceClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(DY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17826/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17826/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17826/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForMultipleChoice"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(pK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(jK,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17826/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForTokenClassification"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(UK,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(YK,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17826/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.TFAutoModelForQuestionAnswering"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(gZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17826/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17826/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17826/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17826/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(wZ,"href","/docs/transformers/pr_17826/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17826/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17826/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17826/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17826/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(PZ,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17826/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.TFAutoModelForVision2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17826/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModel"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HZ,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartModel"),c(UZ,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitModel"),c(JZ,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertModel"),c(YZ,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZZ,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eee,"href","/docs/transformers/pr_17826/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oee,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ree,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraModel"),c(tee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(see,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(lee,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianModel"),c(iee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTModel"),c(fee,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(mee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(gee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(hee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5Model"),c(pee,"href","/docs/transformers/pr_17826/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_ee,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTModel"),c(uee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(bee,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(vee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForCausalLM"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(Fee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Cee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(wee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Aee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Lee,"href","/docs/transformers/pr_17826/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yee,"href","/docs/transformers/pr_17826/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(xee,"href","/docs/transformers/pr_17826/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c($ee,"href","/docs/transformers/pr_17826/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(kee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(See,"href","/docs/transformers/pr_17826/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForPreTraining"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(Ree,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Nee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jee,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Dee,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Gee,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Oee,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zee,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Qee,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wee,"href","/docs/transformers/pr_17826/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Hee,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForMaskedLM"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(Uee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yee,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kee,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(roe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(toe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(aoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(noe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(soe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(loe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(ioe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(goe,"href","/docs/transformers/pr_17826/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17826/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(poe,"href","/docs/transformers/pr_17826/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17826/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uoe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_17826/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(voe,"href","/docs/transformers/pr_17826/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17826/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModelForSequenceClassification"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(Toe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($oe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(koe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Poe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17826/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_17826/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.FlaxAutoModelForTokenClassification"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Woe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uoe,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Joe,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Koe,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ere,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ore,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(are,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/pr_17826/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ire,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dre,"href","/docs/transformers/pr_17826/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cre,"href","/docs/transformers/pr_17826/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(fre,"href","/docs/transformers/pr_17826/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(mre,"href","/docs/transformers/pr_17826/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gre,"href","/docs/transformers/pr_17826/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hre,"href","/docs/transformers/pr_17826/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17826/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.FlaxAutoModelForImageClassification"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(vre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mre,"href","/docs/transformers/pr_17826/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ere,"href","/docs/transformers/pr_17826/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForVision2Seq"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_17826/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/pr_17826/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,oL),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,rL),e(Qe,Bn),e(Qe,In),e(In,tL),e(Qe,$i),e(Qe,Nn),e(Nn,aL),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,BS),e(Ae,Si),e(Si,IS),e(Ae,NS),b(f,Co,u),b(f,Ra,u),e(Ra,qS),e(Ra,If),e(If,jS),e(Ra,pHe),b(f,eXe,u),b(f,Ri,u),e(Ri,Nf),e(Nf,Mae),M(nL,Mae,null),e(Ri,_He),e(Ri,Eae),e(Eae,uHe),b(f,oXe,u),b(f,qn,u),e(qn,bHe),e(qn,Cae),e(Cae,vHe),e(qn,FHe),e(qn,wae),e(wae,THe),e(qn,MHe),b(f,rXe,u),M(sL,f,u),b(f,tXe,u),b(f,DS,u),e(DS,EHe),b(f,aXe,u),M(qf,f,u),b(f,nXe,u),b(f,Pi,u),e(Pi,jf),e(jf,Aae),M(lL,Aae,null),e(Pi,CHe),e(Pi,Lae),e(Lae,wHe),b(f,sXe,u),b(f,wo,u),M(iL,wo,null),e(wo,AHe),e(wo,dL),e(dL,LHe),e(dL,GS),e(GS,yHe),e(dL,xHe),e(wo,$He),e(wo,cL),e(cL,kHe),e(cL,yae),e(yae,SHe),e(cL,RHe),e(wo,PHe),e(wo,Lr),M(fL,Lr,null),e(Lr,BHe),e(Lr,xae),e(xae,IHe),e(Lr,NHe),e(Lr,Bi),e(Bi,qHe),e(Bi,$ae),e($ae,jHe),e(Bi,DHe),e(Bi,kae),e(kae,GHe),e(Bi,OHe),e(Lr,VHe),e(Lr,A),e(A,Df),e(Df,Sae),e(Sae,XHe),e(Df,zHe),e(Df,OS),e(OS,QHe),e(Df,WHe),e(A,HHe),e(A,Gf),e(Gf,Rae),e(Rae,UHe),e(Gf,JHe),e(Gf,VS),e(VS,YHe),e(Gf,KHe),e(A,ZHe),e(A,Of),e(Of,Pae),e(Pae,eUe),e(Of,oUe),e(Of,XS),e(XS,rUe),e(Of,tUe),e(A,aUe),e(A,Vf),e(Vf,Bae),e(Bae,nUe),e(Vf,sUe),e(Vf,zS),e(zS,lUe),e(Vf,iUe),e(A,dUe),e(A,Xf),e(Xf,Iae),e(Iae,cUe),e(Xf,fUe),e(Xf,QS),e(QS,mUe),e(Xf,gUe),e(A,hUe),e(A,zf),e(zf,Nae),e(Nae,pUe),e(zf,_Ue),e(zf,WS),e(WS,uUe),e(zf,bUe),e(A,vUe),e(A,Qf),e(Qf,qae),e(qae,FUe),e(Qf,TUe),e(Qf,HS),e(HS,MUe),e(Qf,EUe),e(A,CUe),e(A,Wf),e(Wf,jae),e(jae,wUe),e(Wf,AUe),e(Wf,US),e(US,LUe),e(Wf,yUe),e(A,xUe),e(A,Hf),e(Hf,Dae),e(Dae,$Ue),e(Hf,kUe),e(Hf,JS),e(JS,SUe),e(Hf,RUe),e(A,PUe),e(A,Uf),e(Uf,Gae),e(Gae,BUe),e(Uf,IUe),e(Uf,YS),e(YS,NUe),e(Uf,qUe),e(A,jUe),e(A,Jf),e(Jf,Oae),e(Oae,DUe),e(Jf,GUe),e(Jf,KS),e(KS,OUe),e(Jf,VUe),e(A,XUe),e(A,Yf),e(Yf,Vae),e(Vae,zUe),e(Yf,QUe),e(Yf,ZS),e(ZS,WUe),e(Yf,HUe),e(A,UUe),e(A,Kf),e(Kf,Xae),e(Xae,JUe),e(Kf,YUe),e(Kf,eR),e(eR,KUe),e(Kf,ZUe),e(A,eJe),e(A,Zf),e(Zf,zae),e(zae,oJe),e(Zf,rJe),e(Zf,oR),e(oR,tJe),e(Zf,aJe),e(A,nJe),e(A,em),e(em,Qae),e(Qae,sJe),e(em,lJe),e(em,rR),e(rR,iJe),e(em,dJe),e(A,cJe),e(A,om),e(om,Wae),e(Wae,fJe),e(om,mJe),e(om,tR),e(tR,gJe),e(om,hJe),e(A,pJe),e(A,rm),e(rm,Hae),e(Hae,_Je),e(rm,uJe),e(rm,aR),e(aR,bJe),e(rm,vJe),e(A,FJe),e(A,tm),e(tm,Uae),e(Uae,TJe),e(tm,MJe),e(tm,nR),e(nR,EJe),e(tm,CJe),e(A,wJe),e(A,am),e(am,Jae),e(Jae,AJe),e(am,LJe),e(am,sR),e(sR,yJe),e(am,xJe),e(A,$Je),e(A,nm),e(nm,Yae),e(Yae,kJe),e(nm,SJe),e(nm,lR),e(lR,RJe),e(nm,PJe),e(A,BJe),e(A,sm),e(sm,Kae),e(Kae,IJe),e(sm,NJe),e(sm,iR),e(iR,qJe),e(sm,jJe),e(A,DJe),e(A,lm),e(lm,Zae),e(Zae,GJe),e(lm,OJe),e(lm,dR),e(dR,VJe),e(lm,XJe),e(A,zJe),e(A,im),e(im,ene),e(ene,QJe),e(im,WJe),e(im,cR),e(cR,HJe),e(im,UJe),e(A,JJe),e(A,dm),e(dm,one),e(one,YJe),e(dm,KJe),e(dm,fR),e(fR,ZJe),e(dm,eYe),e(A,oYe),e(A,cm),e(cm,rne),e(rne,rYe),e(cm,tYe),e(cm,mR),e(mR,aYe),e(cm,nYe),e(A,sYe),e(A,fm),e(fm,tne),e(tne,lYe),e(fm,iYe),e(fm,gR),e(gR,dYe),e(fm,cYe),e(A,fYe),e(A,mm),e(mm,ane),e(ane,mYe),e(mm,gYe),e(mm,hR),e(hR,hYe),e(mm,pYe),e(A,_Ye),e(A,gm),e(gm,nne),e(nne,uYe),e(gm,bYe),e(gm,pR),e(pR,vYe),e(gm,FYe),e(A,TYe),e(A,hm),e(hm,sne),e(sne,MYe),e(hm,EYe),e(hm,_R),e(_R,CYe),e(hm,wYe),e(A,AYe),e(A,pm),e(pm,lne),e(lne,LYe),e(pm,yYe),e(pm,uR),e(uR,xYe),e(pm,$Ye),e(A,kYe),e(A,_m),e(_m,ine),e(ine,SYe),e(_m,RYe),e(_m,bR),e(bR,PYe),e(_m,BYe),e(A,IYe),e(A,um),e(um,dne),e(dne,NYe),e(um,qYe),e(um,vR),e(vR,jYe),e(um,DYe),e(A,GYe),e(A,bm),e(bm,cne),e(cne,OYe),e(bm,VYe),e(bm,FR),e(FR,XYe),e(bm,zYe),e(A,QYe),e(A,vm),e(vm,fne),e(fne,WYe),e(vm,HYe),e(vm,TR),e(TR,UYe),e(vm,JYe),e(A,YYe),e(A,Fm),e(Fm,mne),e(mne,KYe),e(Fm,ZYe),e(Fm,MR),e(MR,eKe),e(Fm,oKe),e(A,rKe),e(A,Tm),e(Tm,gne),e(gne,tKe),e(Tm,aKe),e(Tm,ER),e(ER,nKe),e(Tm,sKe),e(A,lKe),e(A,Mm),e(Mm,hne),e(hne,iKe),e(Mm,dKe),e(Mm,CR),e(CR,cKe),e(Mm,fKe),e(A,mKe),e(A,Em),e(Em,pne),e(pne,gKe),e(Em,hKe),e(Em,wR),e(wR,pKe),e(Em,_Ke),e(A,uKe),e(A,Cm),e(Cm,_ne),e(_ne,bKe),e(Cm,vKe),e(Cm,AR),e(AR,FKe),e(Cm,TKe),e(A,MKe),e(A,wm),e(wm,une),e(une,EKe),e(wm,CKe),e(wm,LR),e(LR,wKe),e(wm,AKe),e(A,LKe),e(A,Am),e(Am,bne),e(bne,yKe),e(Am,xKe),e(Am,yR),e(yR,$Ke),e(Am,kKe),e(A,SKe),e(A,Lm),e(Lm,vne),e(vne,RKe),e(Lm,PKe),e(Lm,xR),e(xR,BKe),e(Lm,IKe),e(A,NKe),e(A,ym),e(ym,Fne),e(Fne,qKe),e(ym,jKe),e(ym,$R),e($R,DKe),e(ym,GKe),e(A,OKe),e(A,xm),e(xm,Tne),e(Tne,VKe),e(xm,XKe),e(xm,kR),e(kR,zKe),e(xm,QKe),e(A,WKe),e(A,$m),e($m,Mne),e(Mne,HKe),e($m,UKe),e($m,SR),e(SR,JKe),e($m,YKe),e(A,KKe),e(A,km),e(km,Ene),e(Ene,ZKe),e(km,eZe),e(km,RR),e(RR,oZe),e(km,rZe),e(A,tZe),e(A,Sm),e(Sm,Cne),e(Cne,aZe),e(Sm,nZe),e(Sm,PR),e(PR,sZe),e(Sm,lZe),e(A,iZe),e(A,Rm),e(Rm,wne),e(wne,dZe),e(Rm,cZe),e(Rm,BR),e(BR,fZe),e(Rm,mZe),e(A,gZe),e(A,Pm),e(Pm,Ane),e(Ane,hZe),e(Pm,pZe),e(Pm,IR),e(IR,_Ze),e(Pm,uZe),e(A,bZe),e(A,Bm),e(Bm,Lne),e(Lne,vZe),e(Bm,FZe),e(Bm,NR),e(NR,TZe),e(Bm,MZe),e(A,EZe),e(A,Im),e(Im,yne),e(yne,CZe),e(Im,wZe),e(Im,qR),e(qR,AZe),e(Im,LZe),e(A,yZe),e(A,Nm),e(Nm,xne),e(xne,xZe),e(Nm,$Ze),e(Nm,jR),e(jR,kZe),e(Nm,SZe),e(A,RZe),e(A,qm),e(qm,$ne),e($ne,PZe),e(qm,BZe),e(qm,DR),e(DR,IZe),e(qm,NZe),e(A,qZe),e(A,jm),e(jm,kne),e(kne,jZe),e(jm,DZe),e(jm,GR),e(GR,GZe),e(jm,OZe),e(A,VZe),e(A,Dm),e(Dm,Sne),e(Sne,XZe),e(Dm,zZe),e(Dm,OR),e(OR,QZe),e(Dm,WZe),e(A,HZe),e(A,Gm),e(Gm,Rne),e(Rne,UZe),e(Gm,JZe),e(Gm,VR),e(VR,YZe),e(Gm,KZe),e(A,ZZe),e(A,Om),e(Om,Pne),e(Pne,eeo),e(Om,oeo),e(Om,XR),e(XR,reo),e(Om,teo),e(A,aeo),e(A,Vm),e(Vm,Bne),e(Bne,neo),e(Vm,seo),e(Vm,zR),e(zR,leo),e(Vm,ieo),e(A,deo),e(A,Xm),e(Xm,Ine),e(Ine,ceo),e(Xm,feo),e(Xm,QR),e(QR,meo),e(Xm,geo),e(A,heo),e(A,zm),e(zm,Nne),e(Nne,peo),e(zm,_eo),e(zm,WR),e(WR,ueo),e(zm,beo),e(A,veo),e(A,Qm),e(Qm,qne),e(qne,Feo),e(Qm,Teo),e(Qm,HR),e(HR,Meo),e(Qm,Eeo),e(A,Ceo),e(A,Wm),e(Wm,jne),e(jne,weo),e(Wm,Aeo),e(Wm,UR),e(UR,Leo),e(Wm,yeo),e(A,xeo),e(A,Hm),e(Hm,Dne),e(Dne,$eo),e(Hm,keo),e(Hm,JR),e(JR,Seo),e(Hm,Reo),e(A,Peo),e(A,Um),e(Um,Gne),e(Gne,Beo),e(Um,Ieo),e(Um,YR),e(YR,Neo),e(Um,qeo),e(A,jeo),e(A,Jm),e(Jm,One),e(One,Deo),e(Jm,Geo),e(Jm,KR),e(KR,Oeo),e(Jm,Veo),e(A,Xeo),e(A,Ym),e(Ym,Vne),e(Vne,zeo),e(Ym,Qeo),e(Ym,ZR),e(ZR,Weo),e(Ym,Heo),e(A,Ueo),e(A,Km),e(Km,Xne),e(Xne,Jeo),e(Km,Yeo),e(Km,eP),e(eP,Keo),e(Km,Zeo),e(A,eoo),e(A,Zm),e(Zm,zne),e(zne,ooo),e(Zm,roo),e(Zm,oP),e(oP,too),e(Zm,aoo),e(A,noo),e(A,eg),e(eg,Qne),e(Qne,soo),e(eg,loo),e(eg,rP),e(rP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,Wne),e(Wne,foo),e(og,moo),e(og,tP),e(tP,goo),e(og,hoo),e(A,poo),e(A,rg),e(rg,Hne),e(Hne,_oo),e(rg,uoo),e(rg,aP),e(aP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,Une),e(Une,Too),e(tg,Moo),e(tg,nP),e(nP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,Jne),e(Jne,Aoo),e(ag,Loo),e(ag,sP),e(sP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,Yne),e(Yne,koo),e(ng,Soo),e(ng,lP),e(lP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,Kne),e(Kne,Ioo),e(sg,Noo),e(sg,iP),e(iP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,Zne),e(Zne,Goo),e(lg,Ooo),e(lg,dP),e(dP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,ese),e(ese,Qoo),e(ig,Woo),e(ig,cP),e(cP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,ose),e(ose,Yoo),e(dg,Koo),e(dg,fP),e(fP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,rse),e(rse,rro),e(cg,tro),e(cg,mP),e(mP,aro),e(cg,nro),e(A,sro),e(A,fg),e(fg,tse),e(tse,lro),e(fg,iro),e(fg,gP),e(gP,dro),e(fg,cro),e(A,fro),e(A,mg),e(mg,ase),e(ase,mro),e(mg,gro),e(mg,hP),e(hP,hro),e(mg,pro),e(A,_ro),e(A,gg),e(gg,nse),e(nse,uro),e(gg,bro),e(gg,pP),e(pP,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,sse),e(sse,Mro),e(hg,Ero),e(hg,_P),e(_P,Cro),e(hg,wro),e(A,Aro),e(A,pg),e(pg,lse),e(lse,Lro),e(pg,yro),e(pg,uP),e(uP,xro),e(pg,$ro),e(A,kro),e(A,_g),e(_g,ise),e(ise,Sro),e(_g,Rro),e(_g,bP),e(bP,Pro),e(_g,Bro),e(A,Iro),e(A,ug),e(ug,dse),e(dse,Nro),e(ug,qro),e(ug,vP),e(vP,jro),e(ug,Dro),e(A,Gro),e(A,bg),e(bg,cse),e(cse,Oro),e(bg,Vro),e(bg,FP),e(FP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,fse),e(fse,Wro),e(vg,Hro),e(vg,TP),e(TP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,mse),e(mse,Kro),e(Fg,Zro),e(Fg,MP),e(MP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,gse),e(gse,tto),e(Tg,ato),e(Tg,EP),e(EP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,hse),e(hse,ito),e(Mg,dto),e(Mg,CP),e(CP,cto),e(Mg,fto),e(A,mto),e(A,Eg),e(Eg,pse),e(pse,gto),e(Eg,hto),e(Eg,wP),e(wP,pto),e(Eg,_to),e(A,uto),e(A,Cg),e(Cg,_se),e(_se,bto),e(Cg,vto),e(Cg,AP),e(AP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,use),e(use,Eto),e(wg,Cto),e(wg,LP),e(LP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,bse),e(bse,yto),e(Ag,xto),e(Ag,yP),e(yP,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,vse),e(vse,Rto),e(Lg,Pto),e(Lg,xP),e(xP,Bto),e(Lg,Ito),e(A,Nto),e(A,yg),e(yg,Fse),e(Fse,qto),e(yg,jto),e(yg,$P),e($P,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,Tse),e(Tse,Vto),e(xg,Xto),e(xg,kP),e(kP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,Mse),e(Mse,Hto),e($g,Uto),e($g,SP),e(SP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,Ese),e(Ese,Zto),e(kg,eao),e(kg,RP),e(RP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,Cse),e(Cse,aao),e(Sg,nao),e(Sg,PP),e(PP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,wse),e(wse,dao),e(Rg,cao),e(Rg,BP),e(BP,fao),e(Rg,mao),e(A,gao),e(A,Pg),e(Pg,Ase),e(Ase,hao),e(Pg,pao),e(Pg,IP),e(IP,_ao),e(Pg,uao),e(A,bao),e(A,Bg),e(Bg,Lse),e(Lse,vao),e(Bg,Fao),e(Bg,NP),e(NP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ig),e(Ig,yse),e(yse,Cao),e(Ig,wao),e(Ig,qP),e(qP,Aao),e(Ig,Lao),e(A,yao),e(A,Ng),e(Ng,xse),e(xse,xao),e(Ng,$ao),e(Ng,jP),e(jP,kao),e(Ng,Sao),e(A,Rao),e(A,qg),e(qg,$se),e($se,Pao),e(qg,Bao),e(qg,DP),e(DP,Iao),e(qg,Nao),e(A,qao),e(A,jg),e(jg,kse),e(kse,jao),e(jg,Dao),e(jg,GP),e(GP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Sse),e(Sse,Xao),e(Dg,zao),e(Dg,OP),e(OP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,Rse),e(Rse,Uao),e(Gg,Jao),e(Gg,VP),e(VP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,Pse),e(Pse,eno),e(Og,ono),e(Og,XP),e(XP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Bse),e(Bse,nno),e(Vg,sno),e(Vg,zP),e(zP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,Ise),e(Ise,cno),e(Xg,fno),e(Xg,QP),e(QP,mno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,Nse),e(Nse,pno),e(zg,_no),e(zg,WP),e(WP,uno),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,qse),e(qse,Fno),e(Qg,Tno),e(Qg,HP),e(HP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,jse),e(jse,wno),e(Wg,Ano),e(Wg,UP),e(UP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,Dse),e(Dse,$no),e(Hg,kno),e(Hg,JP),e(JP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Gse),e(Gse,Bno),e(Ug,Ino),e(Ug,YP),e(YP,Nno),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Ose),e(Ose,Dno),e(Jg,Gno),e(Jg,KP),e(KP,Ono),e(Jg,Vno),e(Lr,Xno),M(Yg,Lr,null),e(wo,zno),e(wo,Kg),M(mL,Kg,null),e(Kg,Qno),e(Kg,Vse),e(Vse,Wno),b(f,lXe,u),b(f,Ii,u),e(Ii,Zg),e(Zg,Xse),M(gL,Xse,null),e(Ii,Hno),e(Ii,zse),e(zse,Uno),b(f,iXe,u),b(f,Ao,u),M(hL,Ao,null),e(Ao,Jno),e(Ao,pL),e(pL,Yno),e(pL,ZP),e(ZP,Kno),e(pL,Zno),e(Ao,eso),e(Ao,_L),e(_L,oso),e(_L,Qse),e(Qse,rso),e(_L,tso),e(Ao,aso),e(Ao,yr),M(uL,yr,null),e(yr,nso),e(yr,Wse),e(Wse,sso),e(yr,lso),e(yr,Pa),e(Pa,iso),e(Pa,Hse),e(Hse,dso),e(Pa,cso),e(Pa,Use),e(Use,fso),e(Pa,mso),e(Pa,Jse),e(Jse,gso),e(Pa,hso),e(yr,pso),e(yr,k),e(k,jn),e(jn,Yse),e(Yse,_so),e(jn,uso),e(jn,eB),e(eB,bso),e(jn,vso),e(jn,oB),e(oB,Fso),e(jn,Tso),e(k,Mso),e(k,Dn),e(Dn,Kse),e(Kse,Eso),e(Dn,Cso),e(Dn,rB),e(rB,wso),e(Dn,Aso),e(Dn,tB),e(tB,Lso),e(Dn,yso),e(k,xso),e(k,Gn),e(Gn,Zse),e(Zse,$so),e(Gn,kso),e(Gn,aB),e(aB,Sso),e(Gn,Rso),e(Gn,nB),e(nB,Pso),e(Gn,Bso),e(k,Iso),e(k,eh),e(eh,ele),e(ele,Nso),e(eh,qso),e(eh,sB),e(sB,jso),e(eh,Dso),e(k,Gso),e(k,On),e(On,ole),e(ole,Oso),e(On,Vso),e(On,lB),e(lB,Xso),e(On,zso),e(On,iB),e(iB,Qso),e(On,Wso),e(k,Hso),e(k,oh),e(oh,rle),e(rle,Uso),e(oh,Jso),e(oh,dB),e(dB,Yso),e(oh,Kso),e(k,Zso),e(k,rh),e(rh,tle),e(tle,elo),e(rh,olo),e(rh,cB),e(cB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,ale),e(ale,nlo),e(th,slo),e(th,fB),e(fB,llo),e(th,ilo),e(k,dlo),e(k,Vn),e(Vn,nle),e(nle,clo),e(Vn,flo),e(Vn,mB),e(mB,mlo),e(Vn,glo),e(Vn,gB),e(gB,hlo),e(Vn,plo),e(k,_lo),e(k,Xn),e(Xn,sle),e(sle,ulo),e(Xn,blo),e(Xn,hB),e(hB,vlo),e(Xn,Flo),e(Xn,pB),e(pB,Tlo),e(Xn,Mlo),e(k,Elo),e(k,zn),e(zn,lle),e(lle,Clo),e(zn,wlo),e(zn,_B),e(_B,Alo),e(zn,Llo),e(zn,uB),e(uB,ylo),e(zn,xlo),e(k,$lo),e(k,ah),e(ah,ile),e(ile,klo),e(ah,Slo),e(ah,bB),e(bB,Rlo),e(ah,Plo),e(k,Blo),e(k,nh),e(nh,dle),e(dle,Ilo),e(nh,Nlo),e(nh,vB),e(vB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,cle),e(cle,Glo),e(sh,Olo),e(sh,FB),e(FB,Vlo),e(sh,Xlo),e(k,zlo),e(k,Qn),e(Qn,fle),e(fle,Qlo),e(Qn,Wlo),e(Qn,TB),e(TB,Hlo),e(Qn,Ulo),e(Qn,MB),e(MB,Jlo),e(Qn,Ylo),e(k,Klo),e(k,lh),e(lh,mle),e(mle,Zlo),e(lh,eio),e(lh,EB),e(EB,oio),e(lh,rio),e(k,tio),e(k,Wn),e(Wn,gle),e(gle,aio),e(Wn,nio),e(Wn,CB),e(CB,sio),e(Wn,lio),e(Wn,wB),e(wB,iio),e(Wn,dio),e(k,cio),e(k,Hn),e(Hn,hle),e(hle,fio),e(Hn,mio),e(Hn,AB),e(AB,gio),e(Hn,hio),e(Hn,LB),e(LB,pio),e(Hn,_io),e(k,uio),e(k,Un),e(Un,ple),e(ple,bio),e(Un,vio),e(Un,yB),e(yB,Fio),e(Un,Tio),e(Un,xB),e(xB,Mio),e(Un,Eio),e(k,Cio),e(k,Jn),e(Jn,_le),e(_le,wio),e(Jn,Aio),e(Jn,$B),e($B,Lio),e(Jn,yio),e(Jn,kB),e(kB,xio),e(Jn,$io),e(k,kio),e(k,ih),e(ih,ule),e(ule,Sio),e(ih,Rio),e(ih,SB),e(SB,Pio),e(ih,Bio),e(k,Iio),e(k,Yn),e(Yn,ble),e(ble,Nio),e(Yn,qio),e(Yn,RB),e(RB,jio),e(Yn,Dio),e(Yn,PB),e(PB,Gio),e(Yn,Oio),e(k,Vio),e(k,Kn),e(Kn,vle),e(vle,Xio),e(Kn,zio),e(Kn,BB),e(BB,Qio),e(Kn,Wio),e(Kn,IB),e(IB,Hio),e(Kn,Uio),e(k,Jio),e(k,Zn),e(Zn,Fle),e(Fle,Yio),e(Zn,Kio),e(Zn,NB),e(NB,Zio),e(Zn,edo),e(Zn,qB),e(qB,odo),e(Zn,rdo),e(k,tdo),e(k,es),e(es,Tle),e(Tle,ado),e(es,ndo),e(es,jB),e(jB,sdo),e(es,ldo),e(es,DB),e(DB,ido),e(es,ddo),e(k,cdo),e(k,os),e(os,Mle),e(Mle,fdo),e(os,mdo),e(os,GB),e(GB,gdo),e(os,hdo),e(os,OB),e(OB,pdo),e(os,_do),e(k,udo),e(k,rs),e(rs,Ele),e(Ele,bdo),e(rs,vdo),e(rs,VB),e(VB,Fdo),e(rs,Tdo),e(rs,XB),e(XB,Mdo),e(rs,Edo),e(k,Cdo),e(k,dh),e(dh,Cle),e(Cle,wdo),e(dh,Ado),e(dh,zB),e(zB,Ldo),e(dh,ydo),e(k,xdo),e(k,ts),e(ts,wle),e(wle,$do),e(ts,kdo),e(ts,QB),e(QB,Sdo),e(ts,Rdo),e(ts,WB),e(WB,Pdo),e(ts,Bdo),e(k,Ido),e(k,ch),e(ch,Ale),e(Ale,Ndo),e(ch,qdo),e(ch,HB),e(HB,jdo),e(ch,Ddo),e(k,Gdo),e(k,as),e(as,Lle),e(Lle,Odo),e(as,Vdo),e(as,UB),e(UB,Xdo),e(as,zdo),e(as,JB),e(JB,Qdo),e(as,Wdo),e(k,Hdo),e(k,ns),e(ns,yle),e(yle,Udo),e(ns,Jdo),e(ns,YB),e(YB,Ydo),e(ns,Kdo),e(ns,KB),e(KB,Zdo),e(ns,eco),e(k,oco),e(k,ss),e(ss,xle),e(xle,rco),e(ss,tco),e(ss,ZB),e(ZB,aco),e(ss,nco),e(ss,eI),e(eI,sco),e(ss,lco),e(k,ico),e(k,fh),e(fh,$le),e($le,dco),e(fh,cco),e(fh,oI),e(oI,fco),e(fh,mco),e(k,gco),e(k,ls),e(ls,kle),e(kle,hco),e(ls,pco),e(ls,rI),e(rI,_co),e(ls,uco),e(ls,tI),e(tI,bco),e(ls,vco),e(k,Fco),e(k,is),e(is,Sle),e(Sle,Tco),e(is,Mco),e(is,aI),e(aI,Eco),e(is,Cco),e(is,nI),e(nI,wco),e(is,Aco),e(k,Lco),e(k,ds),e(ds,Rle),e(Rle,yco),e(ds,xco),e(ds,sI),e(sI,$co),e(ds,kco),e(ds,lI),e(lI,Sco),e(ds,Rco),e(k,Pco),e(k,mh),e(mh,Ple),e(Ple,Bco),e(mh,Ico),e(mh,iI),e(iI,Nco),e(mh,qco),e(k,jco),e(k,cs),e(cs,Ble),e(Ble,Dco),e(cs,Gco),e(cs,dI),e(dI,Oco),e(cs,Vco),e(cs,cI),e(cI,Xco),e(cs,zco),e(k,Qco),e(k,gh),e(gh,Ile),e(Ile,Wco),e(gh,Hco),e(gh,Nle),e(Nle,Uco),e(gh,Jco),e(k,Yco),e(k,fs),e(fs,qle),e(qle,Kco),e(fs,Zco),e(fs,fI),e(fI,efo),e(fs,ofo),e(fs,mI),e(mI,rfo),e(fs,tfo),e(k,afo),e(k,ms),e(ms,jle),e(jle,nfo),e(ms,sfo),e(ms,gI),e(gI,lfo),e(ms,ifo),e(ms,hI),e(hI,dfo),e(ms,cfo),e(k,ffo),e(k,gs),e(gs,Dle),e(Dle,mfo),e(gs,gfo),e(gs,pI),e(pI,hfo),e(gs,pfo),e(gs,_I),e(_I,_fo),e(gs,ufo),e(k,bfo),e(k,hs),e(hs,Gle),e(Gle,vfo),e(hs,Ffo),e(hs,uI),e(uI,Tfo),e(hs,Mfo),e(hs,bI),e(bI,Efo),e(hs,Cfo),e(k,wfo),e(k,ps),e(ps,Ole),e(Ole,Afo),e(ps,Lfo),e(ps,vI),e(vI,yfo),e(ps,xfo),e(ps,FI),e(FI,$fo),e(ps,kfo),e(k,Sfo),e(k,_s),e(_s,Vle),e(Vle,Rfo),e(_s,Pfo),e(_s,TI),e(TI,Bfo),e(_s,Ifo),e(_s,MI),e(MI,Nfo),e(_s,qfo),e(k,jfo),e(k,us),e(us,Xle),e(Xle,Dfo),e(us,Gfo),e(us,EI),e(EI,Ofo),e(us,Vfo),e(us,CI),e(CI,Xfo),e(us,zfo),e(k,Qfo),e(k,hh),e(hh,zle),e(zle,Wfo),e(hh,Hfo),e(hh,wI),e(wI,Ufo),e(hh,Jfo),e(k,Yfo),e(k,bs),e(bs,Qle),e(Qle,Kfo),e(bs,Zfo),e(bs,AI),e(AI,emo),e(bs,omo),e(bs,LI),e(LI,rmo),e(bs,tmo),e(k,amo),e(k,ph),e(ph,Wle),e(Wle,nmo),e(ph,smo),e(ph,yI),e(yI,lmo),e(ph,imo),e(k,dmo),e(k,_h),e(_h,Hle),e(Hle,cmo),e(_h,fmo),e(_h,xI),e(xI,mmo),e(_h,gmo),e(k,hmo),e(k,vs),e(vs,Ule),e(Ule,pmo),e(vs,_mo),e(vs,$I),e($I,umo),e(vs,bmo),e(vs,kI),e(kI,vmo),e(vs,Fmo),e(k,Tmo),e(k,Fs),e(Fs,Jle),e(Jle,Mmo),e(Fs,Emo),e(Fs,SI),e(SI,Cmo),e(Fs,wmo),e(Fs,RI),e(RI,Amo),e(Fs,Lmo),e(k,ymo),e(k,Ts),e(Ts,Yle),e(Yle,xmo),e(Ts,$mo),e(Ts,PI),e(PI,kmo),e(Ts,Smo),e(Ts,BI),e(BI,Rmo),e(Ts,Pmo),e(k,Bmo),e(k,uh),e(uh,Kle),e(Kle,Imo),e(uh,Nmo),e(uh,II),e(II,qmo),e(uh,jmo),e(k,Dmo),e(k,Ms),e(Ms,Zle),e(Zle,Gmo),e(Ms,Omo),e(Ms,NI),e(NI,Vmo),e(Ms,Xmo),e(Ms,qI),e(qI,zmo),e(Ms,Qmo),e(k,Wmo),e(k,Es),e(Es,eie),e(eie,Hmo),e(Es,Umo),e(Es,jI),e(jI,Jmo),e(Es,Ymo),e(Es,DI),e(DI,Kmo),e(Es,Zmo),e(k,ego),e(k,Cs),e(Cs,oie),e(oie,ogo),e(Cs,rgo),e(Cs,GI),e(GI,tgo),e(Cs,ago),e(Cs,OI),e(OI,ngo),e(Cs,sgo),e(k,lgo),e(k,ws),e(ws,rie),e(rie,igo),e(ws,dgo),e(ws,VI),e(VI,cgo),e(ws,fgo),e(ws,XI),e(XI,mgo),e(ws,ggo),e(k,hgo),e(k,As),e(As,tie),e(tie,pgo),e(As,_go),e(As,zI),e(zI,ugo),e(As,bgo),e(As,QI),e(QI,vgo),e(As,Fgo),e(k,Tgo),e(k,Ls),e(Ls,aie),e(aie,Mgo),e(Ls,Ego),e(Ls,WI),e(WI,Cgo),e(Ls,wgo),e(Ls,HI),e(HI,Ago),e(Ls,Lgo),e(k,ygo),e(k,ys),e(ys,nie),e(nie,xgo),e(ys,$go),e(ys,UI),e(UI,kgo),e(ys,Sgo),e(ys,JI),e(JI,Rgo),e(ys,Pgo),e(k,Bgo),e(k,bh),e(bh,sie),e(sie,Igo),e(bh,Ngo),e(bh,YI),e(YI,qgo),e(bh,jgo),e(k,Dgo),e(k,xs),e(xs,lie),e(lie,Ggo),e(xs,Ogo),e(xs,KI),e(KI,Vgo),e(xs,Xgo),e(xs,ZI),e(ZI,zgo),e(xs,Qgo),e(k,Wgo),e(k,vh),e(vh,iie),e(iie,Hgo),e(vh,Ugo),e(vh,eN),e(eN,Jgo),e(vh,Ygo),e(k,Kgo),e(k,Fh),e(Fh,die),e(die,Zgo),e(Fh,eho),e(Fh,oN),e(oN,oho),e(Fh,rho),e(k,tho),e(k,Th),e(Th,cie),e(cie,aho),e(Th,nho),e(Th,rN),e(rN,sho),e(Th,lho),e(k,iho),e(k,Mh),e(Mh,fie),e(fie,dho),e(Mh,cho),e(Mh,tN),e(tN,fho),e(Mh,mho),e(k,gho),e(k,$s),e($s,mie),e(mie,hho),e($s,pho),e($s,aN),e(aN,_ho),e($s,uho),e($s,nN),e(nN,bho),e($s,vho),e(k,Fho),e(k,Eh),e(Eh,gie),e(gie,Tho),e(Eh,Mho),e(Eh,sN),e(sN,Eho),e(Eh,Cho),e(k,who),e(k,ks),e(ks,hie),e(hie,Aho),e(ks,Lho),e(ks,lN),e(lN,yho),e(ks,xho),e(ks,iN),e(iN,$ho),e(ks,kho),e(k,Sho),e(k,Ss),e(Ss,pie),e(pie,Rho),e(Ss,Pho),e(Ss,dN),e(dN,Bho),e(Ss,Iho),e(Ss,cN),e(cN,Nho),e(Ss,qho),e(k,jho),e(k,Rs),e(Rs,_ie),e(_ie,Dho),e(Rs,Gho),e(Rs,fN),e(fN,Oho),e(Rs,Vho),e(Rs,mN),e(mN,Xho),e(Rs,zho),e(k,Qho),e(k,Ps),e(Ps,uie),e(uie,Who),e(Ps,Hho),e(Ps,gN),e(gN,Uho),e(Ps,Jho),e(Ps,hN),e(hN,Yho),e(Ps,Kho),e(k,Zho),e(k,Bs),e(Bs,bie),e(bie,epo),e(Bs,opo),e(Bs,pN),e(pN,rpo),e(Bs,tpo),e(Bs,_N),e(_N,apo),e(Bs,npo),e(k,spo),e(k,Is),e(Is,vie),e(vie,lpo),e(Is,ipo),e(Is,uN),e(uN,dpo),e(Is,cpo),e(Is,bN),e(bN,fpo),e(Is,mpo),e(k,gpo),e(k,Ch),e(Ch,Fie),e(Fie,hpo),e(Ch,ppo),e(Ch,vN),e(vN,_po),e(Ch,upo),e(k,bpo),e(k,wh),e(wh,Tie),e(Tie,vpo),e(wh,Fpo),e(wh,FN),e(FN,Tpo),e(wh,Mpo),e(k,Epo),e(k,Ns),e(Ns,Mie),e(Mie,Cpo),e(Ns,wpo),e(Ns,TN),e(TN,Apo),e(Ns,Lpo),e(Ns,MN),e(MN,ypo),e(Ns,xpo),e(k,$po),e(k,qs),e(qs,Eie),e(Eie,kpo),e(qs,Spo),e(qs,EN),e(EN,Rpo),e(qs,Ppo),e(qs,CN),e(CN,Bpo),e(qs,Ipo),e(k,Npo),e(k,js),e(js,Cie),e(Cie,qpo),e(js,jpo),e(js,wN),e(wN,Dpo),e(js,Gpo),e(js,AN),e(AN,Opo),e(js,Vpo),e(k,Xpo),e(k,Ah),e(Ah,wie),e(wie,zpo),e(Ah,Qpo),e(Ah,LN),e(LN,Wpo),e(Ah,Hpo),e(k,Upo),e(k,Lh),e(Lh,Aie),e(Aie,Jpo),e(Lh,Ypo),e(Lh,yN),e(yN,Kpo),e(Lh,Zpo),e(k,e_o),e(k,yh),e(yh,Lie),e(Lie,o_o),e(yh,r_o),e(yh,xN),e(xN,t_o),e(yh,a_o),e(k,n_o),e(k,Ds),e(Ds,yie),e(yie,s_o),e(Ds,l_o),e(Ds,$N),e($N,i_o),e(Ds,d_o),e(Ds,kN),e(kN,c_o),e(Ds,f_o),e(k,m_o),e(k,Gs),e(Gs,xie),e(xie,g_o),e(Gs,h_o),e(Gs,SN),e(SN,p_o),e(Gs,__o),e(Gs,RN),e(RN,u_o),e(Gs,b_o),e(k,v_o),e(k,xh),e(xh,$ie),e($ie,F_o),e(xh,T_o),e(xh,PN),e(PN,M_o),e(xh,E_o),e(k,C_o),e(k,$h),e($h,kie),e(kie,w_o),e($h,A_o),e($h,BN),e(BN,L_o),e($h,y_o),e(k,x_o),e(k,kh),e(kh,Sie),e(Sie,$_o),e(kh,k_o),e(kh,IN),e(IN,S_o),e(kh,R_o),e(k,P_o),e(k,Os),e(Os,Rie),e(Rie,B_o),e(Os,I_o),e(Os,NN),e(NN,N_o),e(Os,q_o),e(Os,qN),e(qN,j_o),e(Os,D_o),e(k,G_o),e(k,Sh),e(Sh,Pie),e(Pie,O_o),e(Sh,V_o),e(Sh,jN),e(jN,X_o),e(Sh,z_o),e(k,Q_o),e(k,Rh),e(Rh,Bie),e(Bie,W_o),e(Rh,H_o),e(Rh,DN),e(DN,U_o),e(Rh,J_o),e(k,Y_o),e(k,Vs),e(Vs,Iie),e(Iie,K_o),e(Vs,Z_o),e(Vs,GN),e(GN,euo),e(Vs,ouo),e(Vs,ON),e(ON,ruo),e(Vs,tuo),e(k,auo),e(k,Xs),e(Xs,Nie),e(Nie,nuo),e(Xs,suo),e(Xs,VN),e(VN,luo),e(Xs,iuo),e(Xs,XN),e(XN,duo),e(Xs,cuo),e(k,fuo),e(k,zs),e(zs,qie),e(qie,muo),e(zs,guo),e(zs,zN),e(zN,huo),e(zs,puo),e(zs,QN),e(QN,_uo),e(zs,uuo),e(k,buo),e(k,Qs),e(Qs,jie),e(jie,vuo),e(Qs,Fuo),e(Qs,WN),e(WN,Tuo),e(Qs,Muo),e(Qs,HN),e(HN,Euo),e(Qs,Cuo),e(yr,wuo),M(Ph,yr,null),e(Ao,Auo),e(Ao,Bh),M(bL,Bh,null),e(Bh,Luo),e(Bh,Die),e(Die,yuo),b(f,dXe,u),b(f,Ni,u),e(Ni,Ih),e(Ih,Gie),M(vL,Gie,null),e(Ni,xuo),e(Ni,Oie),e(Oie,$uo),b(f,cXe,u),b(f,Lo,u),M(FL,Lo,null),e(Lo,kuo),e(Lo,TL),e(TL,Suo),e(TL,UN),e(UN,Ruo),e(TL,Puo),e(Lo,Buo),e(Lo,ML),e(ML,Iuo),e(ML,Vie),e(Vie,Nuo),e(ML,quo),e(Lo,juo),e(Lo,He),M(EL,He,null),e(He,Duo),e(He,Xie),e(Xie,Guo),e(He,Ouo),e(He,Ba),e(Ba,Vuo),e(Ba,zie),e(zie,Xuo),e(Ba,zuo),e(Ba,Qie),e(Qie,Quo),e(Ba,Wuo),e(Ba,Wie),e(Wie,Huo),e(Ba,Uuo),e(He,Juo),e(He,Y),e(Y,Nh),e(Nh,Hie),e(Hie,Yuo),e(Nh,Kuo),e(Nh,JN),e(JN,Zuo),e(Nh,e2o),e(Y,o2o),e(Y,qh),e(qh,Uie),e(Uie,r2o),e(qh,t2o),e(qh,YN),e(YN,a2o),e(qh,n2o),e(Y,s2o),e(Y,jh),e(jh,Jie),e(Jie,l2o),e(jh,i2o),e(jh,KN),e(KN,d2o),e(jh,c2o),e(Y,f2o),e(Y,Dh),e(Dh,Yie),e(Yie,m2o),e(Dh,g2o),e(Dh,ZN),e(ZN,h2o),e(Dh,p2o),e(Y,_2o),e(Y,Gh),e(Gh,Kie),e(Kie,u2o),e(Gh,b2o),e(Gh,eq),e(eq,v2o),e(Gh,F2o),e(Y,T2o),e(Y,Oh),e(Oh,Zie),e(Zie,M2o),e(Oh,E2o),e(Oh,oq),e(oq,C2o),e(Oh,w2o),e(Y,A2o),e(Y,Vh),e(Vh,ede),e(ede,L2o),e(Vh,y2o),e(Vh,rq),e(rq,x2o),e(Vh,$2o),e(Y,k2o),e(Y,Xh),e(Xh,ode),e(ode,S2o),e(Xh,R2o),e(Xh,tq),e(tq,P2o),e(Xh,B2o),e(Y,I2o),e(Y,zh),e(zh,rde),e(rde,N2o),e(zh,q2o),e(zh,aq),e(aq,j2o),e(zh,D2o),e(Y,G2o),e(Y,Qh),e(Qh,tde),e(tde,O2o),e(Qh,V2o),e(Qh,nq),e(nq,X2o),e(Qh,z2o),e(Y,Q2o),e(Y,Wh),e(Wh,ade),e(ade,W2o),e(Wh,H2o),e(Wh,sq),e(sq,U2o),e(Wh,J2o),e(Y,Y2o),e(Y,Hh),e(Hh,nde),e(nde,K2o),e(Hh,Z2o),e(Hh,lq),e(lq,e1o),e(Hh,o1o),e(Y,r1o),e(Y,Uh),e(Uh,sde),e(sde,t1o),e(Uh,a1o),e(Uh,iq),e(iq,n1o),e(Uh,s1o),e(Y,l1o),e(Y,Jh),e(Jh,lde),e(lde,i1o),e(Jh,d1o),e(Jh,dq),e(dq,c1o),e(Jh,f1o),e(Y,m1o),e(Y,Yh),e(Yh,ide),e(ide,g1o),e(Yh,h1o),e(Yh,cq),e(cq,p1o),e(Yh,_1o),e(Y,u1o),e(Y,Kh),e(Kh,dde),e(dde,b1o),e(Kh,v1o),e(Kh,fq),e(fq,F1o),e(Kh,T1o),e(Y,M1o),e(Y,Zh),e(Zh,cde),e(cde,E1o),e(Zh,C1o),e(Zh,mq),e(mq,w1o),e(Zh,A1o),e(Y,L1o),e(Y,ep),e(ep,fde),e(fde,y1o),e(ep,x1o),e(ep,gq),e(gq,$1o),e(ep,k1o),e(Y,S1o),e(Y,op),e(op,mde),e(mde,R1o),e(op,P1o),e(op,hq),e(hq,B1o),e(op,I1o),e(Y,N1o),e(Y,rp),e(rp,gde),e(gde,q1o),e(rp,j1o),e(rp,pq),e(pq,D1o),e(rp,G1o),e(Y,O1o),e(Y,tp),e(tp,hde),e(hde,V1o),e(tp,X1o),e(tp,_q),e(_q,z1o),e(tp,Q1o),e(Y,W1o),e(Y,ap),e(ap,pde),e(pde,H1o),e(ap,U1o),e(ap,uq),e(uq,J1o),e(ap,Y1o),e(Y,K1o),e(Y,np),e(np,_de),e(_de,Z1o),e(np,ebo),e(np,bq),e(bq,obo),e(np,rbo),e(Y,tbo),e(Y,sp),e(sp,ude),e(ude,abo),e(sp,nbo),e(sp,vq),e(vq,sbo),e(sp,lbo),e(Y,ibo),e(Y,lp),e(lp,bde),e(bde,dbo),e(lp,cbo),e(lp,Fq),e(Fq,fbo),e(lp,mbo),e(Y,gbo),e(Y,ip),e(ip,vde),e(vde,hbo),e(ip,pbo),e(ip,Tq),e(Tq,_bo),e(ip,ubo),e(Y,bbo),e(Y,dp),e(dp,Fde),e(Fde,vbo),e(dp,Fbo),e(dp,Mq),e(Mq,Tbo),e(dp,Mbo),e(Y,Ebo),e(Y,cp),e(cp,Tde),e(Tde,Cbo),e(cp,wbo),e(cp,Eq),e(Eq,Abo),e(cp,Lbo),e(Y,ybo),e(Y,fp),e(fp,Mde),e(Mde,xbo),e(fp,$bo),e(fp,Cq),e(Cq,kbo),e(fp,Sbo),e(Y,Rbo),e(Y,mp),e(mp,Ede),e(Ede,Pbo),e(mp,Bbo),e(mp,wq),e(wq,Ibo),e(mp,Nbo),e(Y,qbo),e(Y,gp),e(gp,Cde),e(Cde,jbo),e(gp,Dbo),e(gp,Aq),e(Aq,Gbo),e(gp,Obo),e(Y,Vbo),e(Y,hp),e(hp,wde),e(wde,Xbo),e(hp,zbo),e(hp,Lq),e(Lq,Qbo),e(hp,Wbo),e(Y,Hbo),e(Y,pp),e(pp,Ade),e(Ade,Ubo),e(pp,Jbo),e(pp,yq),e(yq,Ybo),e(pp,Kbo),e(Y,Zbo),e(Y,_p),e(_p,Lde),e(Lde,evo),e(_p,ovo),e(_p,xq),e(xq,rvo),e(_p,tvo),e(He,avo),M(up,He,null),e(He,nvo),M(bp,He,null),e(Lo,svo),e(Lo,vp),M(CL,vp,null),e(vp,lvo),e(vp,yde),e(yde,ivo),b(f,fXe,u),b(f,qi,u),e(qi,Fp),e(Fp,xde),M(wL,xde,null),e(qi,dvo),e(qi,$de),e($de,cvo),b(f,mXe,u),b(f,yo,u),M(AL,yo,null),e(yo,fvo),e(yo,LL),e(LL,mvo),e(LL,$q),e($q,gvo),e(LL,hvo),e(yo,pvo),e(yo,yL),e(yL,_vo),e(yL,kde),e(kde,uvo),e(yL,bvo),e(yo,vvo),e(yo,Ue),M(xL,Ue,null),e(Ue,Fvo),e(Ue,Sde),e(Sde,Tvo),e(Ue,Mvo),e(Ue,ji),e(ji,Evo),e(ji,Rde),e(Rde,Cvo),e(ji,wvo),e(ji,Pde),e(Pde,Avo),e(ji,Lvo),e(Ue,yvo),e(Ue,he),e(he,Tp),e(Tp,Bde),e(Bde,xvo),e(Tp,$vo),e(Tp,kq),e(kq,kvo),e(Tp,Svo),e(he,Rvo),e(he,Mp),e(Mp,Ide),e(Ide,Pvo),e(Mp,Bvo),e(Mp,Nde),e(Nde,Ivo),e(Mp,Nvo),e(he,qvo),e(he,Ep),e(Ep,qde),e(qde,jvo),e(Ep,Dvo),e(Ep,Sq),e(Sq,Gvo),e(Ep,Ovo),e(he,Vvo),e(he,Cp),e(Cp,jde),e(jde,Xvo),e(Cp,zvo),e(Cp,Rq),e(Rq,Qvo),e(Cp,Wvo),e(he,Hvo),e(he,wp),e(wp,Dde),e(Dde,Uvo),e(wp,Jvo),e(wp,Pq),e(Pq,Yvo),e(wp,Kvo),e(he,Zvo),e(he,Ap),e(Ap,Gde),e(Gde,eFo),e(Ap,oFo),e(Ap,Bq),e(Bq,rFo),e(Ap,tFo),e(he,aFo),e(he,Lp),e(Lp,Ode),e(Ode,nFo),e(Lp,sFo),e(Lp,Iq),e(Iq,lFo),e(Lp,iFo),e(he,dFo),e(he,yp),e(yp,Vde),e(Vde,cFo),e(yp,fFo),e(yp,Nq),e(Nq,mFo),e(yp,gFo),e(he,hFo),e(he,xp),e(xp,Xde),e(Xde,pFo),e(xp,_Fo),e(xp,qq),e(qq,uFo),e(xp,bFo),e(he,vFo),e(he,$p),e($p,zde),e(zde,FFo),e($p,TFo),e($p,jq),e(jq,MFo),e($p,EFo),e(he,CFo),e(he,kp),e(kp,Qde),e(Qde,wFo),e(kp,AFo),e(kp,Dq),e(Dq,LFo),e(kp,yFo),e(he,xFo),e(he,Sp),e(Sp,Wde),e(Wde,$Fo),e(Sp,kFo),e(Sp,Gq),e(Gq,SFo),e(Sp,RFo),e(he,PFo),e(he,Rp),e(Rp,Hde),e(Hde,BFo),e(Rp,IFo),e(Rp,Oq),e(Oq,NFo),e(Rp,qFo),e(he,jFo),e(he,Pp),e(Pp,Ude),e(Ude,DFo),e(Pp,GFo),e(Pp,Vq),e(Vq,OFo),e(Pp,VFo),e(he,XFo),e(he,Bp),e(Bp,Jde),e(Jde,zFo),e(Bp,QFo),e(Bp,Xq),e(Xq,WFo),e(Bp,HFo),e(he,UFo),e(he,Ip),e(Ip,Yde),e(Yde,JFo),e(Ip,YFo),e(Ip,zq),e(zq,KFo),e(Ip,ZFo),e(he,e6o),e(he,Np),e(Np,Kde),e(Kde,o6o),e(Np,r6o),e(Np,Qq),e(Qq,t6o),e(Np,a6o),e(he,n6o),e(he,qp),e(qp,Zde),e(Zde,s6o),e(qp,l6o),e(qp,Wq),e(Wq,i6o),e(qp,d6o),e(Ue,c6o),M(jp,Ue,null),e(Ue,f6o),M(Dp,Ue,null),e(yo,m6o),e(yo,Gp),M($L,Gp,null),e(Gp,g6o),e(Gp,ece),e(ece,h6o),b(f,gXe,u),b(f,Di,u),e(Di,Op),e(Op,oce),M(kL,oce,null),e(Di,p6o),e(Di,rce),e(rce,_6o),b(f,hXe,u),b(f,xo,u),M(SL,xo,null),e(xo,u6o),e(xo,Gi),e(Gi,b6o),e(Gi,Hq),e(Hq,v6o),e(Gi,F6o),e(Gi,Uq),e(Uq,T6o),e(Gi,M6o),e(xo,E6o),e(xo,RL),e(RL,C6o),e(RL,tce),e(tce,w6o),e(RL,A6o),e(xo,L6o),e(xo,lt),M(PL,lt,null),e(lt,y6o),e(lt,ace),e(ace,x6o),e(lt,$6o),e(lt,Oi),e(Oi,k6o),e(Oi,nce),e(nce,S6o),e(Oi,R6o),e(Oi,Jq),e(Jq,P6o),e(Oi,B6o),e(lt,I6o),M(Vp,lt,null),e(xo,N6o),e(xo,Je),M(BL,Je,null),e(Je,q6o),e(Je,sce),e(sce,j6o),e(Je,D6o),e(Je,Ia),e(Ia,G6o),e(Ia,lce),e(lce,O6o),e(Ia,V6o),e(Ia,ice),e(ice,X6o),e(Ia,z6o),e(Ia,dce),e(dce,Q6o),e(Ia,W6o),e(Je,H6o),e(Je,y),e(y,Xp),e(Xp,cce),e(cce,U6o),e(Xp,J6o),e(Xp,Yq),e(Yq,Y6o),e(Xp,K6o),e(y,Z6o),e(y,zp),e(zp,fce),e(fce,eTo),e(zp,oTo),e(zp,Kq),e(Kq,rTo),e(zp,tTo),e(y,aTo),e(y,Qp),e(Qp,mce),e(mce,nTo),e(Qp,sTo),e(Qp,Zq),e(Zq,lTo),e(Qp,iTo),e(y,dTo),e(y,Wp),e(Wp,gce),e(gce,cTo),e(Wp,fTo),e(Wp,ej),e(ej,mTo),e(Wp,gTo),e(y,hTo),e(y,Hp),e(Hp,hce),e(hce,pTo),e(Hp,_To),e(Hp,oj),e(oj,uTo),e(Hp,bTo),e(y,vTo),e(y,Up),e(Up,pce),e(pce,FTo),e(Up,TTo),e(Up,rj),e(rj,MTo),e(Up,ETo),e(y,CTo),e(y,Jp),e(Jp,_ce),e(_ce,wTo),e(Jp,ATo),e(Jp,tj),e(tj,LTo),e(Jp,yTo),e(y,xTo),e(y,Yp),e(Yp,uce),e(uce,$To),e(Yp,kTo),e(Yp,aj),e(aj,STo),e(Yp,RTo),e(y,PTo),e(y,Kp),e(Kp,bce),e(bce,BTo),e(Kp,ITo),e(Kp,nj),e(nj,NTo),e(Kp,qTo),e(y,jTo),e(y,Zp),e(Zp,vce),e(vce,DTo),e(Zp,GTo),e(Zp,sj),e(sj,OTo),e(Zp,VTo),e(y,XTo),e(y,e_),e(e_,Fce),e(Fce,zTo),e(e_,QTo),e(e_,lj),e(lj,WTo),e(e_,HTo),e(y,UTo),e(y,o_),e(o_,Tce),e(Tce,JTo),e(o_,YTo),e(o_,ij),e(ij,KTo),e(o_,ZTo),e(y,e7o),e(y,r_),e(r_,Mce),e(Mce,o7o),e(r_,r7o),e(r_,dj),e(dj,t7o),e(r_,a7o),e(y,n7o),e(y,t_),e(t_,Ece),e(Ece,s7o),e(t_,l7o),e(t_,cj),e(cj,i7o),e(t_,d7o),e(y,c7o),e(y,a_),e(a_,Cce),e(Cce,f7o),e(a_,m7o),e(a_,fj),e(fj,g7o),e(a_,h7o),e(y,p7o),e(y,n_),e(n_,wce),e(wce,_7o),e(n_,u7o),e(n_,mj),e(mj,b7o),e(n_,v7o),e(y,F7o),e(y,s_),e(s_,Ace),e(Ace,T7o),e(s_,M7o),e(s_,gj),e(gj,E7o),e(s_,C7o),e(y,w7o),e(y,l_),e(l_,Lce),e(Lce,A7o),e(l_,L7o),e(l_,hj),e(hj,y7o),e(l_,x7o),e(y,$7o),e(y,i_),e(i_,yce),e(yce,k7o),e(i_,S7o),e(i_,pj),e(pj,R7o),e(i_,P7o),e(y,B7o),e(y,d_),e(d_,xce),e(xce,I7o),e(d_,N7o),e(d_,_j),e(_j,q7o),e(d_,j7o),e(y,D7o),e(y,c_),e(c_,$ce),e($ce,G7o),e(c_,O7o),e(c_,uj),e(uj,V7o),e(c_,X7o),e(y,z7o),e(y,f_),e(f_,kce),e(kce,Q7o),e(f_,W7o),e(f_,bj),e(bj,H7o),e(f_,U7o),e(y,J7o),e(y,m_),e(m_,Sce),e(Sce,Y7o),e(m_,K7o),e(m_,vj),e(vj,Z7o),e(m_,e8o),e(y,o8o),e(y,g_),e(g_,Rce),e(Rce,r8o),e(g_,t8o),e(g_,Fj),e(Fj,a8o),e(g_,n8o),e(y,s8o),e(y,h_),e(h_,Pce),e(Pce,l8o),e(h_,i8o),e(h_,Tj),e(Tj,d8o),e(h_,c8o),e(y,f8o),e(y,p_),e(p_,Bce),e(Bce,m8o),e(p_,g8o),e(p_,Mj),e(Mj,h8o),e(p_,p8o),e(y,_8o),e(y,__),e(__,Ice),e(Ice,u8o),e(__,b8o),e(__,Ej),e(Ej,v8o),e(__,F8o),e(y,T8o),e(y,u_),e(u_,Nce),e(Nce,M8o),e(u_,E8o),e(u_,Cj),e(Cj,C8o),e(u_,w8o),e(y,A8o),e(y,b_),e(b_,qce),e(qce,L8o),e(b_,y8o),e(b_,wj),e(wj,x8o),e(b_,$8o),e(y,k8o),e(y,v_),e(v_,jce),e(jce,S8o),e(v_,R8o),e(v_,Aj),e(Aj,P8o),e(v_,B8o),e(y,I8o),e(y,F_),e(F_,Dce),e(Dce,N8o),e(F_,q8o),e(F_,Lj),e(Lj,j8o),e(F_,D8o),e(y,G8o),e(y,T_),e(T_,Gce),e(Gce,O8o),e(T_,V8o),e(T_,yj),e(yj,X8o),e(T_,z8o),e(y,Q8o),e(y,M_),e(M_,Oce),e(Oce,W8o),e(M_,H8o),e(M_,xj),e(xj,U8o),e(M_,J8o),e(y,Y8o),e(y,E_),e(E_,Vce),e(Vce,K8o),e(E_,Z8o),e(E_,$j),e($j,eMo),e(E_,oMo),e(y,rMo),e(y,Ws),e(Ws,Xce),e(Xce,tMo),e(Ws,aMo),e(Ws,kj),e(kj,nMo),e(Ws,sMo),e(Ws,Sj),e(Sj,lMo),e(Ws,iMo),e(y,dMo),e(y,C_),e(C_,zce),e(zce,cMo),e(C_,fMo),e(C_,Rj),e(Rj,mMo),e(C_,gMo),e(y,hMo),e(y,w_),e(w_,Qce),e(Qce,pMo),e(w_,_Mo),e(w_,Pj),e(Pj,uMo),e(w_,bMo),e(y,vMo),e(y,A_),e(A_,Wce),e(Wce,FMo),e(A_,TMo),e(A_,Bj),e(Bj,MMo),e(A_,EMo),e(y,CMo),e(y,L_),e(L_,Hce),e(Hce,wMo),e(L_,AMo),e(L_,Ij),e(Ij,LMo),e(L_,yMo),e(y,xMo),e(y,y_),e(y_,Uce),e(Uce,$Mo),e(y_,kMo),e(y_,Nj),e(Nj,SMo),e(y_,RMo),e(y,PMo),e(y,x_),e(x_,Jce),e(Jce,BMo),e(x_,IMo),e(x_,qj),e(qj,NMo),e(x_,qMo),e(y,jMo),e(y,$_),e($_,Yce),e(Yce,DMo),e($_,GMo),e($_,jj),e(jj,OMo),e($_,VMo),e(y,XMo),e(y,k_),e(k_,Kce),e(Kce,zMo),e(k_,QMo),e(k_,Dj),e(Dj,WMo),e(k_,HMo),e(y,UMo),e(y,S_),e(S_,Zce),e(Zce,JMo),e(S_,YMo),e(S_,Gj),e(Gj,KMo),e(S_,ZMo),e(y,e4o),e(y,R_),e(R_,efe),e(efe,o4o),e(R_,r4o),e(R_,ofe),e(ofe,t4o),e(R_,a4o),e(y,n4o),e(y,P_),e(P_,rfe),e(rfe,s4o),e(P_,l4o),e(P_,Oj),e(Oj,i4o),e(P_,d4o),e(y,c4o),e(y,B_),e(B_,tfe),e(tfe,f4o),e(B_,m4o),e(B_,Vj),e(Vj,g4o),e(B_,h4o),e(y,p4o),e(y,I_),e(I_,afe),e(afe,_4o),e(I_,u4o),e(I_,Xj),e(Xj,b4o),e(I_,v4o),e(y,F4o),e(y,N_),e(N_,nfe),e(nfe,T4o),e(N_,M4o),e(N_,zj),e(zj,E4o),e(N_,C4o),e(y,w4o),e(y,q_),e(q_,sfe),e(sfe,A4o),e(q_,L4o),e(q_,Qj),e(Qj,y4o),e(q_,x4o),e(y,$4o),e(y,j_),e(j_,lfe),e(lfe,k4o),e(j_,S4o),e(j_,Wj),e(Wj,R4o),e(j_,P4o),e(y,B4o),e(y,D_),e(D_,ife),e(ife,I4o),e(D_,N4o),e(D_,Hj),e(Hj,q4o),e(D_,j4o),e(y,D4o),e(y,G_),e(G_,dfe),e(dfe,G4o),e(G_,O4o),e(G_,Uj),e(Uj,V4o),e(G_,X4o),e(y,z4o),e(y,O_),e(O_,cfe),e(cfe,Q4o),e(O_,W4o),e(O_,Jj),e(Jj,H4o),e(O_,U4o),e(y,J4o),e(y,V_),e(V_,ffe),e(ffe,Y4o),e(V_,K4o),e(V_,Yj),e(Yj,Z4o),e(V_,eEo),e(y,oEo),e(y,X_),e(X_,mfe),e(mfe,rEo),e(X_,tEo),e(X_,Kj),e(Kj,aEo),e(X_,nEo),e(y,sEo),e(y,z_),e(z_,gfe),e(gfe,lEo),e(z_,iEo),e(z_,Zj),e(Zj,dEo),e(z_,cEo),e(y,fEo),e(y,Q_),e(Q_,hfe),e(hfe,mEo),e(Q_,gEo),e(Q_,eD),e(eD,hEo),e(Q_,pEo),e(y,_Eo),e(y,W_),e(W_,pfe),e(pfe,uEo),e(W_,bEo),e(W_,oD),e(oD,vEo),e(W_,FEo),e(y,TEo),e(y,H_),e(H_,_fe),e(_fe,MEo),e(H_,EEo),e(H_,rD),e(rD,CEo),e(H_,wEo),e(y,AEo),e(y,U_),e(U_,ufe),e(ufe,LEo),e(U_,yEo),e(U_,tD),e(tD,xEo),e(U_,$Eo),e(y,kEo),e(y,J_),e(J_,bfe),e(bfe,SEo),e(J_,REo),e(J_,aD),e(aD,PEo),e(J_,BEo),e(y,IEo),e(y,Y_),e(Y_,vfe),e(vfe,NEo),e(Y_,qEo),e(Y_,nD),e(nD,jEo),e(Y_,DEo),e(y,GEo),e(y,K_),e(K_,Ffe),e(Ffe,OEo),e(K_,VEo),e(K_,sD),e(sD,XEo),e(K_,zEo),e(y,QEo),e(y,Z_),e(Z_,Tfe),e(Tfe,WEo),e(Z_,HEo),e(Z_,lD),e(lD,UEo),e(Z_,JEo),e(y,YEo),e(y,eu),e(eu,Mfe),e(Mfe,KEo),e(eu,ZEo),e(eu,iD),e(iD,eCo),e(eu,oCo),e(y,rCo),e(y,ou),e(ou,Efe),e(Efe,tCo),e(ou,aCo),e(ou,dD),e(dD,nCo),e(ou,sCo),e(y,lCo),e(y,ru),e(ru,Cfe),e(Cfe,iCo),e(ru,dCo),e(ru,cD),e(cD,cCo),e(ru,fCo),e(y,mCo),e(y,tu),e(tu,wfe),e(wfe,gCo),e(tu,hCo),e(tu,fD),e(fD,pCo),e(tu,_Co),e(y,uCo),e(y,au),e(au,Afe),e(Afe,bCo),e(au,vCo),e(au,mD),e(mD,FCo),e(au,TCo),e(y,MCo),e(y,nu),e(nu,Lfe),e(Lfe,ECo),e(nu,CCo),e(nu,gD),e(gD,wCo),e(nu,ACo),e(y,LCo),e(y,su),e(su,yfe),e(yfe,yCo),e(su,xCo),e(su,hD),e(hD,$Co),e(su,kCo),e(y,SCo),e(y,lu),e(lu,xfe),e(xfe,RCo),e(lu,PCo),e(lu,pD),e(pD,BCo),e(lu,ICo),e(y,NCo),e(y,iu),e(iu,$fe),e($fe,qCo),e(iu,jCo),e(iu,_D),e(_D,DCo),e(iu,GCo),e(y,OCo),e(y,du),e(du,kfe),e(kfe,VCo),e(du,XCo),e(du,uD),e(uD,zCo),e(du,QCo),e(y,WCo),e(y,cu),e(cu,Sfe),e(Sfe,HCo),e(cu,UCo),e(cu,bD),e(bD,JCo),e(cu,YCo),e(y,KCo),e(y,fu),e(fu,Rfe),e(Rfe,ZCo),e(fu,e3o),e(fu,vD),e(vD,o3o),e(fu,r3o),e(y,t3o),e(y,mu),e(mu,Pfe),e(Pfe,a3o),e(mu,n3o),e(mu,FD),e(FD,s3o),e(mu,l3o),e(y,i3o),e(y,gu),e(gu,Bfe),e(Bfe,d3o),e(gu,c3o),e(gu,TD),e(TD,f3o),e(gu,m3o),e(y,g3o),e(y,hu),e(hu,Ife),e(Ife,h3o),e(hu,p3o),e(hu,MD),e(MD,_3o),e(hu,u3o),e(y,b3o),e(y,pu),e(pu,Nfe),e(Nfe,v3o),e(pu,F3o),e(pu,ED),e(ED,T3o),e(pu,M3o),e(y,E3o),e(y,_u),e(_u,qfe),e(qfe,C3o),e(_u,w3o),e(_u,CD),e(CD,A3o),e(_u,L3o),e(y,y3o),e(y,uu),e(uu,jfe),e(jfe,x3o),e(uu,$3o),e(uu,wD),e(wD,k3o),e(uu,S3o),e(y,R3o),e(y,bu),e(bu,Dfe),e(Dfe,P3o),e(bu,B3o),e(bu,AD),e(AD,I3o),e(bu,N3o),e(y,q3o),e(y,vu),e(vu,Gfe),e(Gfe,j3o),e(vu,D3o),e(vu,LD),e(LD,G3o),e(vu,O3o),e(y,V3o),e(y,Fu),e(Fu,Ofe),e(Ofe,X3o),e(Fu,z3o),e(Fu,yD),e(yD,Q3o),e(Fu,W3o),e(y,H3o),e(y,Tu),e(Tu,Vfe),e(Vfe,U3o),e(Tu,J3o),e(Tu,xD),e(xD,Y3o),e(Tu,K3o),e(y,Z3o),e(y,Mu),e(Mu,Xfe),e(Xfe,e5o),e(Mu,o5o),e(Mu,$D),e($D,r5o),e(Mu,t5o),e(y,a5o),e(y,Eu),e(Eu,zfe),e(zfe,n5o),e(Eu,s5o),e(Eu,kD),e(kD,l5o),e(Eu,i5o),e(y,d5o),e(y,Cu),e(Cu,Qfe),e(Qfe,c5o),e(Cu,f5o),e(Cu,SD),e(SD,m5o),e(Cu,g5o),e(y,h5o),e(y,wu),e(wu,Wfe),e(Wfe,p5o),e(wu,_5o),e(wu,RD),e(RD,u5o),e(wu,b5o),e(y,v5o),e(y,Au),e(Au,Hfe),e(Hfe,F5o),e(Au,T5o),e(Au,PD),e(PD,M5o),e(Au,E5o),e(y,C5o),e(y,Lu),e(Lu,Ufe),e(Ufe,w5o),e(Lu,A5o),e(Lu,BD),e(BD,L5o),e(Lu,y5o),e(y,x5o),e(y,yu),e(yu,Jfe),e(Jfe,$5o),e(yu,k5o),e(yu,ID),e(ID,S5o),e(yu,R5o),e(y,P5o),e(y,xu),e(xu,Yfe),e(Yfe,B5o),e(xu,I5o),e(xu,ND),e(ND,N5o),e(xu,q5o),e(y,j5o),e(y,$u),e($u,Kfe),e(Kfe,D5o),e($u,G5o),e($u,qD),e(qD,O5o),e($u,V5o),e(y,X5o),e(y,ku),e(ku,Zfe),e(Zfe,z5o),e(ku,Q5o),e(ku,jD),e(jD,W5o),e(ku,H5o),e(y,U5o),e(y,Su),e(Su,eme),e(eme,J5o),e(Su,Y5o),e(Su,DD),e(DD,K5o),e(Su,Z5o),e(y,e0o),e(y,Ru),e(Ru,ome),e(ome,o0o),e(Ru,r0o),e(Ru,GD),e(GD,t0o),e(Ru,a0o),e(y,n0o),e(y,Pu),e(Pu,rme),e(rme,s0o),e(Pu,l0o),e(Pu,OD),e(OD,i0o),e(Pu,d0o),e(y,c0o),e(y,Bu),e(Bu,tme),e(tme,f0o),e(Bu,m0o),e(Bu,VD),e(VD,g0o),e(Bu,h0o),e(y,p0o),e(y,Iu),e(Iu,ame),e(ame,_0o),e(Iu,u0o),e(Iu,XD),e(XD,b0o),e(Iu,v0o),e(y,F0o),e(y,Nu),e(Nu,nme),e(nme,T0o),e(Nu,M0o),e(Nu,zD),e(zD,E0o),e(Nu,C0o),e(y,w0o),e(y,qu),e(qu,sme),e(sme,A0o),e(qu,L0o),e(qu,QD),e(QD,y0o),e(qu,x0o),e(y,$0o),e(y,ju),e(ju,lme),e(lme,k0o),e(ju,S0o),e(ju,WD),e(WD,R0o),e(ju,P0o),e(y,B0o),e(y,Du),e(Du,ime),e(ime,I0o),e(Du,N0o),e(Du,HD),e(HD,q0o),e(Du,j0o),e(y,D0o),e(y,Gu),e(Gu,dme),e(dme,G0o),e(Gu,O0o),e(Gu,UD),e(UD,V0o),e(Gu,X0o),e(y,z0o),e(y,Ou),e(Ou,cme),e(cme,Q0o),e(Ou,W0o),e(Ou,JD),e(JD,H0o),e(Ou,U0o),e(y,J0o),e(y,Vu),e(Vu,fme),e(fme,Y0o),e(Vu,K0o),e(Vu,YD),e(YD,Z0o),e(Vu,ewo),e(y,owo),e(y,Xu),e(Xu,mme),e(mme,rwo),e(Xu,two),e(Xu,KD),e(KD,awo),e(Xu,nwo),e(y,swo),e(y,zu),e(zu,gme),e(gme,lwo),e(zu,iwo),e(zu,ZD),e(ZD,dwo),e(zu,cwo),e(y,fwo),e(y,Qu),e(Qu,hme),e(hme,mwo),e(Qu,gwo),e(Qu,eG),e(eG,hwo),e(Qu,pwo),e(Je,_wo),e(Je,Wu),e(Wu,uwo),e(Wu,pme),e(pme,bwo),e(Wu,vwo),e(Wu,_me),e(_me,Fwo),e(Je,Two),M(Hu,Je,null),b(f,pXe,u),b(f,Vi,u),e(Vi,Uu),e(Uu,ume),M(IL,ume,null),e(Vi,Mwo),e(Vi,bme),e(bme,Ewo),b(f,_Xe,u),b(f,$o,u),M(NL,$o,null),e($o,Cwo),e($o,Xi),e(Xi,wwo),e(Xi,oG),e(oG,Awo),e(Xi,Lwo),e(Xi,rG),e(rG,ywo),e(Xi,xwo),e($o,$wo),e($o,qL),e(qL,kwo),e(qL,vme),e(vme,Swo),e(qL,Rwo),e($o,Pwo),e($o,it),M(jL,it,null),e(it,Bwo),e(it,Fme),e(Fme,Iwo),e(it,Nwo),e(it,zi),e(zi,qwo),e(zi,Tme),e(Tme,jwo),e(zi,Dwo),e(zi,tG),e(tG,Gwo),e(zi,Owo),e(it,Vwo),M(Ju,it,null),e($o,Xwo),e($o,Ye),M(DL,Ye,null),e(Ye,zwo),e(Ye,Mme),e(Mme,Qwo),e(Ye,Wwo),e(Ye,Na),e(Na,Hwo),e(Na,Eme),e(Eme,Uwo),e(Na,Jwo),e(Na,Cme),e(Cme,Ywo),e(Na,Kwo),e(Na,wme),e(wme,Zwo),e(Na,eAo),e(Ye,oAo),e(Ye,G),e(G,Yu),e(Yu,Ame),e(Ame,rAo),e(Yu,tAo),e(Yu,aG),e(aG,aAo),e(Yu,nAo),e(G,sAo),e(G,Ku),e(Ku,Lme),e(Lme,lAo),e(Ku,iAo),e(Ku,nG),e(nG,dAo),e(Ku,cAo),e(G,fAo),e(G,Zu),e(Zu,yme),e(yme,mAo),e(Zu,gAo),e(Zu,sG),e(sG,hAo),e(Zu,pAo),e(G,_Ao),e(G,e2),e(e2,xme),e(xme,uAo),e(e2,bAo),e(e2,lG),e(lG,vAo),e(e2,FAo),e(G,TAo),e(G,o2),e(o2,$me),e($me,MAo),e(o2,EAo),e(o2,iG),e(iG,CAo),e(o2,wAo),e(G,AAo),e(G,r2),e(r2,kme),e(kme,LAo),e(r2,yAo),e(r2,dG),e(dG,xAo),e(r2,$Ao),e(G,kAo),e(G,t2),e(t2,Sme),e(Sme,SAo),e(t2,RAo),e(t2,cG),e(cG,PAo),e(t2,BAo),e(G,IAo),e(G,a2),e(a2,Rme),e(Rme,NAo),e(a2,qAo),e(a2,fG),e(fG,jAo),e(a2,DAo),e(G,GAo),e(G,n2),e(n2,Pme),e(Pme,OAo),e(n2,VAo),e(n2,mG),e(mG,XAo),e(n2,zAo),e(G,QAo),e(G,s2),e(s2,Bme),e(Bme,WAo),e(s2,HAo),e(s2,gG),e(gG,UAo),e(s2,JAo),e(G,YAo),e(G,l2),e(l2,Ime),e(Ime,KAo),e(l2,ZAo),e(l2,hG),e(hG,eLo),e(l2,oLo),e(G,rLo),e(G,i2),e(i2,Nme),e(Nme,tLo),e(i2,aLo),e(i2,pG),e(pG,nLo),e(i2,sLo),e(G,lLo),e(G,d2),e(d2,qme),e(qme,iLo),e(d2,dLo),e(d2,_G),e(_G,cLo),e(d2,fLo),e(G,mLo),e(G,c2),e(c2,jme),e(jme,gLo),e(c2,hLo),e(c2,uG),e(uG,pLo),e(c2,_Lo),e(G,uLo),e(G,f2),e(f2,Dme),e(Dme,bLo),e(f2,vLo),e(f2,bG),e(bG,FLo),e(f2,TLo),e(G,MLo),e(G,m2),e(m2,Gme),e(Gme,ELo),e(m2,CLo),e(m2,vG),e(vG,wLo),e(m2,ALo),e(G,LLo),e(G,g2),e(g2,Ome),e(Ome,yLo),e(g2,xLo),e(g2,FG),e(FG,$Lo),e(g2,kLo),e(G,SLo),e(G,h2),e(h2,Vme),e(Vme,RLo),e(h2,PLo),e(h2,TG),e(TG,BLo),e(h2,ILo),e(G,NLo),e(G,p2),e(p2,Xme),e(Xme,qLo),e(p2,jLo),e(p2,MG),e(MG,DLo),e(p2,GLo),e(G,OLo),e(G,_2),e(_2,zme),e(zme,VLo),e(_2,XLo),e(_2,EG),e(EG,zLo),e(_2,QLo),e(G,WLo),e(G,u2),e(u2,Qme),e(Qme,HLo),e(u2,ULo),e(u2,CG),e(CG,JLo),e(u2,YLo),e(G,KLo),e(G,b2),e(b2,Wme),e(Wme,ZLo),e(b2,eyo),e(b2,wG),e(wG,oyo),e(b2,ryo),e(G,tyo),e(G,v2),e(v2,Hme),e(Hme,ayo),e(v2,nyo),e(v2,AG),e(AG,syo),e(v2,lyo),e(G,iyo),e(G,F2),e(F2,Ume),e(Ume,dyo),e(F2,cyo),e(F2,LG),e(LG,fyo),e(F2,myo),e(G,gyo),e(G,T2),e(T2,Jme),e(Jme,hyo),e(T2,pyo),e(T2,yG),e(yG,_yo),e(T2,uyo),e(G,byo),e(G,M2),e(M2,Yme),e(Yme,vyo),e(M2,Fyo),e(M2,xG),e(xG,Tyo),e(M2,Myo),e(G,Eyo),e(G,E2),e(E2,Kme),e(Kme,Cyo),e(E2,wyo),e(E2,$G),e($G,Ayo),e(E2,Lyo),e(G,yyo),e(G,C2),e(C2,Zme),e(Zme,xyo),e(C2,$yo),e(C2,kG),e(kG,kyo),e(C2,Syo),e(G,Ryo),e(G,w2),e(w2,ege),e(ege,Pyo),e(w2,Byo),e(w2,SG),e(SG,Iyo),e(w2,Nyo),e(G,qyo),e(G,A2),e(A2,oge),e(oge,jyo),e(A2,Dyo),e(A2,RG),e(RG,Gyo),e(A2,Oyo),e(G,Vyo),e(G,L2),e(L2,rge),e(rge,Xyo),e(L2,zyo),e(L2,PG),e(PG,Qyo),e(L2,Wyo),e(G,Hyo),e(G,y2),e(y2,tge),e(tge,Uyo),e(y2,Jyo),e(y2,BG),e(BG,Yyo),e(y2,Kyo),e(G,Zyo),e(G,x2),e(x2,age),e(age,e9o),e(x2,o9o),e(x2,IG),e(IG,r9o),e(x2,t9o),e(G,a9o),e(G,$2),e($2,nge),e(nge,n9o),e($2,s9o),e($2,NG),e(NG,l9o),e($2,i9o),e(G,d9o),e(G,k2),e(k2,sge),e(sge,c9o),e(k2,f9o),e(k2,qG),e(qG,m9o),e(k2,g9o),e(G,h9o),e(G,S2),e(S2,lge),e(lge,p9o),e(S2,_9o),e(S2,jG),e(jG,u9o),e(S2,b9o),e(G,v9o),e(G,R2),e(R2,ige),e(ige,F9o),e(R2,T9o),e(R2,DG),e(DG,M9o),e(R2,E9o),e(G,C9o),e(G,P2),e(P2,dge),e(dge,w9o),e(P2,A9o),e(P2,GG),e(GG,L9o),e(P2,y9o),e(G,x9o),e(G,B2),e(B2,cge),e(cge,$9o),e(B2,k9o),e(B2,OG),e(OG,S9o),e(B2,R9o),e(G,P9o),e(G,I2),e(I2,fge),e(fge,B9o),e(I2,I9o),e(I2,VG),e(VG,N9o),e(I2,q9o),e(G,j9o),e(G,N2),e(N2,mge),e(mge,D9o),e(N2,G9o),e(N2,XG),e(XG,O9o),e(N2,V9o),e(G,X9o),e(G,q2),e(q2,gge),e(gge,z9o),e(q2,Q9o),e(q2,zG),e(zG,W9o),e(q2,H9o),e(G,U9o),e(G,j2),e(j2,hge),e(hge,J9o),e(j2,Y9o),e(j2,QG),e(QG,K9o),e(j2,Z9o),e(G,exo),e(G,D2),e(D2,pge),e(pge,oxo),e(D2,rxo),e(D2,WG),e(WG,txo),e(D2,axo),e(G,nxo),e(G,G2),e(G2,_ge),e(_ge,sxo),e(G2,lxo),e(G2,HG),e(HG,ixo),e(G2,dxo),e(Ye,cxo),e(Ye,O2),e(O2,fxo),e(O2,uge),e(uge,mxo),e(O2,gxo),e(O2,bge),e(bge,hxo),e(Ye,pxo),M(V2,Ye,null),b(f,uXe,u),b(f,Qi,u),e(Qi,X2),e(X2,vge),M(GL,vge,null),e(Qi,_xo),e(Qi,Fge),e(Fge,uxo),b(f,bXe,u),b(f,ko,u),M(OL,ko,null),e(ko,bxo),e(ko,Wi),e(Wi,vxo),e(Wi,UG),e(UG,Fxo),e(Wi,Txo),e(Wi,JG),e(JG,Mxo),e(Wi,Exo),e(ko,Cxo),e(ko,VL),e(VL,wxo),e(VL,Tge),e(Tge,Axo),e(VL,Lxo),e(ko,yxo),e(ko,dt),M(XL,dt,null),e(dt,xxo),e(dt,Mge),e(Mge,$xo),e(dt,kxo),e(dt,Hi),e(Hi,Sxo),e(Hi,Ege),e(Ege,Rxo),e(Hi,Pxo),e(Hi,YG),e(YG,Bxo),e(Hi,Ixo),e(dt,Nxo),M(z2,dt,null),e(ko,qxo),e(ko,Ke),M(zL,Ke,null),e(Ke,jxo),e(Ke,Cge),e(Cge,Dxo),e(Ke,Gxo),e(Ke,qa),e(qa,Oxo),e(qa,wge),e(wge,Vxo),e(qa,Xxo),e(qa,Age),e(Age,zxo),e(qa,Qxo),e(qa,Lge),e(Lge,Wxo),e(qa,Hxo),e(Ke,Uxo),e(Ke,z),e(z,Q2),e(Q2,yge),e(yge,Jxo),e(Q2,Yxo),e(Q2,KG),e(KG,Kxo),e(Q2,Zxo),e(z,e$o),e(z,W2),e(W2,xge),e(xge,o$o),e(W2,r$o),e(W2,ZG),e(ZG,t$o),e(W2,a$o),e(z,n$o),e(z,H2),e(H2,$ge),e($ge,s$o),e(H2,l$o),e(H2,eO),e(eO,i$o),e(H2,d$o),e(z,c$o),e(z,U2),e(U2,kge),e(kge,f$o),e(U2,m$o),e(U2,oO),e(oO,g$o),e(U2,h$o),e(z,p$o),e(z,J2),e(J2,Sge),e(Sge,_$o),e(J2,u$o),e(J2,rO),e(rO,b$o),e(J2,v$o),e(z,F$o),e(z,Y2),e(Y2,Rge),e(Rge,T$o),e(Y2,M$o),e(Y2,tO),e(tO,E$o),e(Y2,C$o),e(z,w$o),e(z,K2),e(K2,Pge),e(Pge,A$o),e(K2,L$o),e(K2,aO),e(aO,y$o),e(K2,x$o),e(z,$$o),e(z,Z2),e(Z2,Bge),e(Bge,k$o),e(Z2,S$o),e(Z2,nO),e(nO,R$o),e(Z2,P$o),e(z,B$o),e(z,e1),e(e1,Ige),e(Ige,I$o),e(e1,N$o),e(e1,sO),e(sO,q$o),e(e1,j$o),e(z,D$o),e(z,o1),e(o1,Nge),e(Nge,G$o),e(o1,O$o),e(o1,lO),e(lO,V$o),e(o1,X$o),e(z,z$o),e(z,r1),e(r1,qge),e(qge,Q$o),e(r1,W$o),e(r1,iO),e(iO,H$o),e(r1,U$o),e(z,J$o),e(z,t1),e(t1,jge),e(jge,Y$o),e(t1,K$o),e(t1,dO),e(dO,Z$o),e(t1,eko),e(z,oko),e(z,a1),e(a1,Dge),e(Dge,rko),e(a1,tko),e(a1,cO),e(cO,ako),e(a1,nko),e(z,sko),e(z,n1),e(n1,Gge),e(Gge,lko),e(n1,iko),e(n1,fO),e(fO,dko),e(n1,cko),e(z,fko),e(z,s1),e(s1,Oge),e(Oge,mko),e(s1,gko),e(s1,mO),e(mO,hko),e(s1,pko),e(z,_ko),e(z,l1),e(l1,Vge),e(Vge,uko),e(l1,bko),e(l1,gO),e(gO,vko),e(l1,Fko),e(z,Tko),e(z,i1),e(i1,Xge),e(Xge,Mko),e(i1,Eko),e(i1,hO),e(hO,Cko),e(i1,wko),e(z,Ako),e(z,d1),e(d1,zge),e(zge,Lko),e(d1,yko),e(d1,pO),e(pO,xko),e(d1,$ko),e(z,kko),e(z,c1),e(c1,Qge),e(Qge,Sko),e(c1,Rko),e(c1,_O),e(_O,Pko),e(c1,Bko),e(z,Iko),e(z,f1),e(f1,Wge),e(Wge,Nko),e(f1,qko),e(f1,uO),e(uO,jko),e(f1,Dko),e(z,Gko),e(z,m1),e(m1,Hge),e(Hge,Oko),e(m1,Vko),e(m1,bO),e(bO,Xko),e(m1,zko),e(z,Qko),e(z,g1),e(g1,Uge),e(Uge,Wko),e(g1,Hko),e(g1,vO),e(vO,Uko),e(g1,Jko),e(z,Yko),e(z,h1),e(h1,Jge),e(Jge,Kko),e(h1,Zko),e(h1,FO),e(FO,eSo),e(h1,oSo),e(z,rSo),e(z,p1),e(p1,Yge),e(Yge,tSo),e(p1,aSo),e(p1,TO),e(TO,nSo),e(p1,sSo),e(z,lSo),e(z,_1),e(_1,Kge),e(Kge,iSo),e(_1,dSo),e(_1,MO),e(MO,cSo),e(_1,fSo),e(z,mSo),e(z,u1),e(u1,Zge),e(Zge,gSo),e(u1,hSo),e(u1,EO),e(EO,pSo),e(u1,_So),e(z,uSo),e(z,b1),e(b1,ehe),e(ehe,bSo),e(b1,vSo),e(b1,CO),e(CO,FSo),e(b1,TSo),e(z,MSo),e(z,v1),e(v1,ohe),e(ohe,ESo),e(v1,CSo),e(v1,wO),e(wO,wSo),e(v1,ASo),e(z,LSo),e(z,F1),e(F1,rhe),e(rhe,ySo),e(F1,xSo),e(F1,AO),e(AO,$So),e(F1,kSo),e(z,SSo),e(z,T1),e(T1,the),e(the,RSo),e(T1,PSo),e(T1,LO),e(LO,BSo),e(T1,ISo),e(z,NSo),e(z,M1),e(M1,ahe),e(ahe,qSo),e(M1,jSo),e(M1,yO),e(yO,DSo),e(M1,GSo),e(z,OSo),e(z,E1),e(E1,nhe),e(nhe,VSo),e(E1,XSo),e(E1,xO),e(xO,zSo),e(E1,QSo),e(z,WSo),e(z,C1),e(C1,she),e(she,HSo),e(C1,USo),e(C1,$O),e($O,JSo),e(C1,YSo),e(z,KSo),e(z,w1),e(w1,lhe),e(lhe,ZSo),e(w1,eRo),e(w1,kO),e(kO,oRo),e(w1,rRo),e(z,tRo),e(z,A1),e(A1,ihe),e(ihe,aRo),e(A1,nRo),e(A1,SO),e(SO,sRo),e(A1,lRo),e(z,iRo),e(z,L1),e(L1,dhe),e(dhe,dRo),e(L1,cRo),e(L1,RO),e(RO,fRo),e(L1,mRo),e(z,gRo),e(z,y1),e(y1,che),e(che,hRo),e(y1,pRo),e(y1,PO),e(PO,_Ro),e(y1,uRo),e(z,bRo),e(z,x1),e(x1,fhe),e(fhe,vRo),e(x1,FRo),e(x1,BO),e(BO,TRo),e(x1,MRo),e(z,ERo),e(z,$1),e($1,mhe),e(mhe,CRo),e($1,wRo),e($1,IO),e(IO,ARo),e($1,LRo),e(z,yRo),e(z,k1),e(k1,ghe),e(ghe,xRo),e(k1,$Ro),e(k1,NO),e(NO,kRo),e(k1,SRo),e(Ke,RRo),e(Ke,S1),e(S1,PRo),e(S1,hhe),e(hhe,BRo),e(S1,IRo),e(S1,phe),e(phe,NRo),e(Ke,qRo),M(R1,Ke,null),b(f,vXe,u),b(f,Ui,u),e(Ui,P1),e(P1,_he),M(QL,_he,null),e(Ui,jRo),e(Ui,uhe),e(uhe,DRo),b(f,FXe,u),b(f,So,u),M(WL,So,null),e(So,GRo),e(So,Ji),e(Ji,ORo),e(Ji,qO),e(qO,VRo),e(Ji,XRo),e(Ji,jO),e(jO,zRo),e(Ji,QRo),e(So,WRo),e(So,HL),e(HL,HRo),e(HL,bhe),e(bhe,URo),e(HL,JRo),e(So,YRo),e(So,ct),M(UL,ct,null),e(ct,KRo),e(ct,vhe),e(vhe,ZRo),e(ct,ePo),e(ct,Yi),e(Yi,oPo),e(Yi,Fhe),e(Fhe,rPo),e(Yi,tPo),e(Yi,DO),e(DO,aPo),e(Yi,nPo),e(ct,sPo),M(B1,ct,null),e(So,lPo),e(So,Ze),M(JL,Ze,null),e(Ze,iPo),e(Ze,The),e(The,dPo),e(Ze,cPo),e(Ze,ja),e(ja,fPo),e(ja,Mhe),e(Mhe,mPo),e(ja,gPo),e(ja,Ehe),e(Ehe,hPo),e(ja,pPo),e(ja,Che),e(Che,_Po),e(ja,uPo),e(Ze,bPo),e(Ze,W),e(W,I1),e(I1,whe),e(whe,vPo),e(I1,FPo),e(I1,GO),e(GO,TPo),e(I1,MPo),e(W,EPo),e(W,N1),e(N1,Ahe),e(Ahe,CPo),e(N1,wPo),e(N1,OO),e(OO,APo),e(N1,LPo),e(W,yPo),e(W,q1),e(q1,Lhe),e(Lhe,xPo),e(q1,$Po),e(q1,VO),e(VO,kPo),e(q1,SPo),e(W,RPo),e(W,j1),e(j1,yhe),e(yhe,PPo),e(j1,BPo),e(j1,XO),e(XO,IPo),e(j1,NPo),e(W,qPo),e(W,D1),e(D1,xhe),e(xhe,jPo),e(D1,DPo),e(D1,zO),e(zO,GPo),e(D1,OPo),e(W,VPo),e(W,G1),e(G1,$he),e($he,XPo),e(G1,zPo),e(G1,QO),e(QO,QPo),e(G1,WPo),e(W,HPo),e(W,O1),e(O1,khe),e(khe,UPo),e(O1,JPo),e(O1,WO),e(WO,YPo),e(O1,KPo),e(W,ZPo),e(W,V1),e(V1,She),e(She,eBo),e(V1,oBo),e(V1,HO),e(HO,rBo),e(V1,tBo),e(W,aBo),e(W,X1),e(X1,Rhe),e(Rhe,nBo),e(X1,sBo),e(X1,UO),e(UO,lBo),e(X1,iBo),e(W,dBo),e(W,z1),e(z1,Phe),e(Phe,cBo),e(z1,fBo),e(z1,JO),e(JO,mBo),e(z1,gBo),e(W,hBo),e(W,Q1),e(Q1,Bhe),e(Bhe,pBo),e(Q1,_Bo),e(Q1,YO),e(YO,uBo),e(Q1,bBo),e(W,vBo),e(W,W1),e(W1,Ihe),e(Ihe,FBo),e(W1,TBo),e(W1,KO),e(KO,MBo),e(W1,EBo),e(W,CBo),e(W,H1),e(H1,Nhe),e(Nhe,wBo),e(H1,ABo),e(H1,ZO),e(ZO,LBo),e(H1,yBo),e(W,xBo),e(W,U1),e(U1,qhe),e(qhe,$Bo),e(U1,kBo),e(U1,eV),e(eV,SBo),e(U1,RBo),e(W,PBo),e(W,J1),e(J1,jhe),e(jhe,BBo),e(J1,IBo),e(J1,oV),e(oV,NBo),e(J1,qBo),e(W,jBo),e(W,Y1),e(Y1,Dhe),e(Dhe,DBo),e(Y1,GBo),e(Y1,rV),e(rV,OBo),e(Y1,VBo),e(W,XBo),e(W,K1),e(K1,Ghe),e(Ghe,zBo),e(K1,QBo),e(K1,tV),e(tV,WBo),e(K1,HBo),e(W,UBo),e(W,Z1),e(Z1,Ohe),e(Ohe,JBo),e(Z1,YBo),e(Z1,aV),e(aV,KBo),e(Z1,ZBo),e(W,eIo),e(W,eb),e(eb,Vhe),e(Vhe,oIo),e(eb,rIo),e(eb,nV),e(nV,tIo),e(eb,aIo),e(W,nIo),e(W,ob),e(ob,Xhe),e(Xhe,sIo),e(ob,lIo),e(ob,sV),e(sV,iIo),e(ob,dIo),e(W,cIo),e(W,rb),e(rb,zhe),e(zhe,fIo),e(rb,mIo),e(rb,lV),e(lV,gIo),e(rb,hIo),e(W,pIo),e(W,tb),e(tb,Qhe),e(Qhe,_Io),e(tb,uIo),e(tb,iV),e(iV,bIo),e(tb,vIo),e(W,FIo),e(W,ab),e(ab,Whe),e(Whe,TIo),e(ab,MIo),e(ab,dV),e(dV,EIo),e(ab,CIo),e(W,wIo),e(W,nb),e(nb,Hhe),e(Hhe,AIo),e(nb,LIo),e(nb,cV),e(cV,yIo),e(nb,xIo),e(W,$Io),e(W,sb),e(sb,Uhe),e(Uhe,kIo),e(sb,SIo),e(sb,fV),e(fV,RIo),e(sb,PIo),e(W,BIo),e(W,lb),e(lb,Jhe),e(Jhe,IIo),e(lb,NIo),e(lb,mV),e(mV,qIo),e(lb,jIo),e(W,DIo),e(W,ib),e(ib,Yhe),e(Yhe,GIo),e(ib,OIo),e(ib,gV),e(gV,VIo),e(ib,XIo),e(W,zIo),e(W,db),e(db,Khe),e(Khe,QIo),e(db,WIo),e(db,hV),e(hV,HIo),e(db,UIo),e(W,JIo),e(W,cb),e(cb,Zhe),e(Zhe,YIo),e(cb,KIo),e(cb,pV),e(pV,ZIo),e(cb,eNo),e(W,oNo),e(W,fb),e(fb,epe),e(epe,rNo),e(fb,tNo),e(fb,_V),e(_V,aNo),e(fb,nNo),e(W,sNo),e(W,mb),e(mb,ope),e(ope,lNo),e(mb,iNo),e(mb,uV),e(uV,dNo),e(mb,cNo),e(W,fNo),e(W,gb),e(gb,rpe),e(rpe,mNo),e(gb,gNo),e(gb,bV),e(bV,hNo),e(gb,pNo),e(W,_No),e(W,hb),e(hb,tpe),e(tpe,uNo),e(hb,bNo),e(hb,vV),e(vV,vNo),e(hb,FNo),e(W,TNo),e(W,pb),e(pb,ape),e(ape,MNo),e(pb,ENo),e(pb,npe),e(npe,CNo),e(pb,wNo),e(W,ANo),e(W,_b),e(_b,spe),e(spe,LNo),e(_b,yNo),e(_b,FV),e(FV,xNo),e(_b,$No),e(W,kNo),e(W,ub),e(ub,lpe),e(lpe,SNo),e(ub,RNo),e(ub,TV),e(TV,PNo),e(ub,BNo),e(W,INo),e(W,bb),e(bb,ipe),e(ipe,NNo),e(bb,qNo),e(bb,MV),e(MV,jNo),e(bb,DNo),e(W,GNo),e(W,vb),e(vb,dpe),e(dpe,ONo),e(vb,VNo),e(vb,EV),e(EV,XNo),e(vb,zNo),e(Ze,QNo),e(Ze,Fb),e(Fb,WNo),e(Fb,cpe),e(cpe,HNo),e(Fb,UNo),e(Fb,fpe),e(fpe,JNo),e(Ze,YNo),M(Tb,Ze,null),b(f,TXe,u),b(f,Ki,u),e(Ki,Mb),e(Mb,mpe),M(YL,mpe,null),e(Ki,KNo),e(Ki,gpe),e(gpe,ZNo),b(f,MXe,u),b(f,Ro,u),M(KL,Ro,null),e(Ro,eqo),e(Ro,Zi),e(Zi,oqo),e(Zi,CV),e(CV,rqo),e(Zi,tqo),e(Zi,wV),e(wV,aqo),e(Zi,nqo),e(Ro,sqo),e(Ro,ZL),e(ZL,lqo),e(ZL,hpe),e(hpe,iqo),e(ZL,dqo),e(Ro,cqo),e(Ro,ft),M(ey,ft,null),e(ft,fqo),e(ft,ppe),e(ppe,mqo),e(ft,gqo),e(ft,ed),e(ed,hqo),e(ed,_pe),e(_pe,pqo),e(ed,_qo),e(ed,AV),e(AV,uqo),e(ed,bqo),e(ft,vqo),M(Eb,ft,null),e(Ro,Fqo),e(Ro,eo),M(oy,eo,null),e(eo,Tqo),e(eo,upe),e(upe,Mqo),e(eo,Eqo),e(eo,Da),e(Da,Cqo),e(Da,bpe),e(bpe,wqo),e(Da,Aqo),e(Da,vpe),e(vpe,Lqo),e(Da,yqo),e(Da,Fpe),e(Fpe,xqo),e(Da,$qo),e(eo,kqo),e(eo,pe),e(pe,Cb),e(Cb,Tpe),e(Tpe,Sqo),e(Cb,Rqo),e(Cb,LV),e(LV,Pqo),e(Cb,Bqo),e(pe,Iqo),e(pe,wb),e(wb,Mpe),e(Mpe,Nqo),e(wb,qqo),e(wb,yV),e(yV,jqo),e(wb,Dqo),e(pe,Gqo),e(pe,Ab),e(Ab,Epe),e(Epe,Oqo),e(Ab,Vqo),e(Ab,xV),e(xV,Xqo),e(Ab,zqo),e(pe,Qqo),e(pe,Lb),e(Lb,Cpe),e(Cpe,Wqo),e(Lb,Hqo),e(Lb,$V),e($V,Uqo),e(Lb,Jqo),e(pe,Yqo),e(pe,yb),e(yb,wpe),e(wpe,Kqo),e(yb,Zqo),e(yb,kV),e(kV,ejo),e(yb,ojo),e(pe,rjo),e(pe,xb),e(xb,Ape),e(Ape,tjo),e(xb,ajo),e(xb,SV),e(SV,njo),e(xb,sjo),e(pe,ljo),e(pe,$b),e($b,Lpe),e(Lpe,ijo),e($b,djo),e($b,RV),e(RV,cjo),e($b,fjo),e(pe,mjo),e(pe,kb),e(kb,ype),e(ype,gjo),e(kb,hjo),e(kb,PV),e(PV,pjo),e(kb,_jo),e(pe,ujo),e(pe,Sb),e(Sb,xpe),e(xpe,bjo),e(Sb,vjo),e(Sb,BV),e(BV,Fjo),e(Sb,Tjo),e(pe,Mjo),e(pe,Rb),e(Rb,$pe),e($pe,Ejo),e(Rb,Cjo),e(Rb,IV),e(IV,wjo),e(Rb,Ajo),e(pe,Ljo),e(pe,Pb),e(Pb,kpe),e(kpe,yjo),e(Pb,xjo),e(Pb,NV),e(NV,$jo),e(Pb,kjo),e(pe,Sjo),e(pe,Bb),e(Bb,Spe),e(Spe,Rjo),e(Bb,Pjo),e(Bb,qV),e(qV,Bjo),e(Bb,Ijo),e(pe,Njo),e(pe,Ib),e(Ib,Rpe),e(Rpe,qjo),e(Ib,jjo),e(Ib,jV),e(jV,Djo),e(Ib,Gjo),e(pe,Ojo),e(pe,Nb),e(Nb,Ppe),e(Ppe,Vjo),e(Nb,Xjo),e(Nb,DV),e(DV,zjo),e(Nb,Qjo),e(pe,Wjo),e(pe,qb),e(qb,Bpe),e(Bpe,Hjo),e(qb,Ujo),e(qb,GV),e(GV,Jjo),e(qb,Yjo),e(pe,Kjo),e(pe,jb),e(jb,Ipe),e(Ipe,Zjo),e(jb,eDo),e(jb,OV),e(OV,oDo),e(jb,rDo),e(pe,tDo),e(pe,Db),e(Db,Npe),e(Npe,aDo),e(Db,nDo),e(Db,VV),e(VV,sDo),e(Db,lDo),e(pe,iDo),e(pe,Gb),e(Gb,qpe),e(qpe,dDo),e(Gb,cDo),e(Gb,XV),e(XV,fDo),e(Gb,mDo),e(eo,gDo),e(eo,Ob),e(Ob,hDo),e(Ob,jpe),e(jpe,pDo),e(Ob,_Do),e(Ob,Dpe),e(Dpe,uDo),e(eo,bDo),M(Vb,eo,null),b(f,EXe,u),b(f,od,u),e(od,Xb),e(Xb,Gpe),M(ry,Gpe,null),e(od,vDo),e(od,Ope),e(Ope,FDo),b(f,CXe,u),b(f,Po,u),M(ty,Po,null),e(Po,TDo),e(Po,rd),e(rd,MDo),e(rd,zV),e(zV,EDo),e(rd,CDo),e(rd,QV),e(QV,wDo),e(rd,ADo),e(Po,LDo),e(Po,ay),e(ay,yDo),e(ay,Vpe),e(Vpe,xDo),e(ay,$Do),e(Po,kDo),e(Po,mt),M(ny,mt,null),e(mt,SDo),e(mt,Xpe),e(Xpe,RDo),e(mt,PDo),e(mt,td),e(td,BDo),e(td,zpe),e(zpe,IDo),e(td,NDo),e(td,WV),e(WV,qDo),e(td,jDo),e(mt,DDo),M(zb,mt,null),e(Po,GDo),e(Po,oo),M(sy,oo,null),e(oo,ODo),e(oo,Qpe),e(Qpe,VDo),e(oo,XDo),e(oo,Ga),e(Ga,zDo),e(Ga,Wpe),e(Wpe,QDo),e(Ga,WDo),e(Ga,Hpe),e(Hpe,HDo),e(Ga,UDo),e(Ga,Upe),e(Upe,JDo),e(Ga,YDo),e(oo,KDo),e(oo,N),e(N,Qb),e(Qb,Jpe),e(Jpe,ZDo),e(Qb,eGo),e(Qb,HV),e(HV,oGo),e(Qb,rGo),e(N,tGo),e(N,Wb),e(Wb,Ype),e(Ype,aGo),e(Wb,nGo),e(Wb,UV),e(UV,sGo),e(Wb,lGo),e(N,iGo),e(N,Hb),e(Hb,Kpe),e(Kpe,dGo),e(Hb,cGo),e(Hb,JV),e(JV,fGo),e(Hb,mGo),e(N,gGo),e(N,Ub),e(Ub,Zpe),e(Zpe,hGo),e(Ub,pGo),e(Ub,YV),e(YV,_Go),e(Ub,uGo),e(N,bGo),e(N,Jb),e(Jb,e_e),e(e_e,vGo),e(Jb,FGo),e(Jb,KV),e(KV,TGo),e(Jb,MGo),e(N,EGo),e(N,Yb),e(Yb,o_e),e(o_e,CGo),e(Yb,wGo),e(Yb,ZV),e(ZV,AGo),e(Yb,LGo),e(N,yGo),e(N,Kb),e(Kb,r_e),e(r_e,xGo),e(Kb,$Go),e(Kb,eX),e(eX,kGo),e(Kb,SGo),e(N,RGo),e(N,Zb),e(Zb,t_e),e(t_e,PGo),e(Zb,BGo),e(Zb,oX),e(oX,IGo),e(Zb,NGo),e(N,qGo),e(N,ev),e(ev,a_e),e(a_e,jGo),e(ev,DGo),e(ev,rX),e(rX,GGo),e(ev,OGo),e(N,VGo),e(N,ov),e(ov,n_e),e(n_e,XGo),e(ov,zGo),e(ov,tX),e(tX,QGo),e(ov,WGo),e(N,HGo),e(N,rv),e(rv,s_e),e(s_e,UGo),e(rv,JGo),e(rv,aX),e(aX,YGo),e(rv,KGo),e(N,ZGo),e(N,tv),e(tv,l_e),e(l_e,eOo),e(tv,oOo),e(tv,nX),e(nX,rOo),e(tv,tOo),e(N,aOo),e(N,av),e(av,i_e),e(i_e,nOo),e(av,sOo),e(av,sX),e(sX,lOo),e(av,iOo),e(N,dOo),e(N,nv),e(nv,d_e),e(d_e,cOo),e(nv,fOo),e(nv,lX),e(lX,mOo),e(nv,gOo),e(N,hOo),e(N,sv),e(sv,c_e),e(c_e,pOo),e(sv,_Oo),e(sv,iX),e(iX,uOo),e(sv,bOo),e(N,vOo),e(N,lv),e(lv,f_e),e(f_e,FOo),e(lv,TOo),e(lv,dX),e(dX,MOo),e(lv,EOo),e(N,COo),e(N,iv),e(iv,m_e),e(m_e,wOo),e(iv,AOo),e(iv,cX),e(cX,LOo),e(iv,yOo),e(N,xOo),e(N,dv),e(dv,g_e),e(g_e,$Oo),e(dv,kOo),e(dv,fX),e(fX,SOo),e(dv,ROo),e(N,POo),e(N,cv),e(cv,h_e),e(h_e,BOo),e(cv,IOo),e(cv,mX),e(mX,NOo),e(cv,qOo),e(N,jOo),e(N,fv),e(fv,p_e),e(p_e,DOo),e(fv,GOo),e(fv,gX),e(gX,OOo),e(fv,VOo),e(N,XOo),e(N,mv),e(mv,__e),e(__e,zOo),e(mv,QOo),e(mv,hX),e(hX,WOo),e(mv,HOo),e(N,UOo),e(N,gv),e(gv,u_e),e(u_e,JOo),e(gv,YOo),e(gv,pX),e(pX,KOo),e(gv,ZOo),e(N,eVo),e(N,hv),e(hv,b_e),e(b_e,oVo),e(hv,rVo),e(hv,_X),e(_X,tVo),e(hv,aVo),e(N,nVo),e(N,pv),e(pv,v_e),e(v_e,sVo),e(pv,lVo),e(pv,uX),e(uX,iVo),e(pv,dVo),e(N,cVo),e(N,_v),e(_v,F_e),e(F_e,fVo),e(_v,mVo),e(_v,bX),e(bX,gVo),e(_v,hVo),e(N,pVo),e(N,uv),e(uv,T_e),e(T_e,_Vo),e(uv,uVo),e(uv,vX),e(vX,bVo),e(uv,vVo),e(N,FVo),e(N,bv),e(bv,M_e),e(M_e,TVo),e(bv,MVo),e(bv,FX),e(FX,EVo),e(bv,CVo),e(N,wVo),e(N,vv),e(vv,E_e),e(E_e,AVo),e(vv,LVo),e(vv,TX),e(TX,yVo),e(vv,xVo),e(N,$Vo),e(N,Fv),e(Fv,C_e),e(C_e,kVo),e(Fv,SVo),e(Fv,MX),e(MX,RVo),e(Fv,PVo),e(N,BVo),e(N,Tv),e(Tv,w_e),e(w_e,IVo),e(Tv,NVo),e(Tv,EX),e(EX,qVo),e(Tv,jVo),e(N,DVo),e(N,Mv),e(Mv,A_e),e(A_e,GVo),e(Mv,OVo),e(Mv,CX),e(CX,VVo),e(Mv,XVo),e(N,zVo),e(N,Ev),e(Ev,L_e),e(L_e,QVo),e(Ev,WVo),e(Ev,wX),e(wX,HVo),e(Ev,UVo),e(N,JVo),e(N,Cv),e(Cv,y_e),e(y_e,YVo),e(Cv,KVo),e(Cv,AX),e(AX,ZVo),e(Cv,eXo),e(N,oXo),e(N,wv),e(wv,x_e),e(x_e,rXo),e(wv,tXo),e(wv,LX),e(LX,aXo),e(wv,nXo),e(N,sXo),e(N,Av),e(Av,$_e),e($_e,lXo),e(Av,iXo),e(Av,yX),e(yX,dXo),e(Av,cXo),e(N,fXo),e(N,Lv),e(Lv,k_e),e(k_e,mXo),e(Lv,gXo),e(Lv,xX),e(xX,hXo),e(Lv,pXo),e(N,_Xo),e(N,yv),e(yv,S_e),e(S_e,uXo),e(yv,bXo),e(yv,$X),e($X,vXo),e(yv,FXo),e(N,TXo),e(N,xv),e(xv,R_e),e(R_e,MXo),e(xv,EXo),e(xv,kX),e(kX,CXo),e(xv,wXo),e(N,AXo),e(N,$v),e($v,P_e),e(P_e,LXo),e($v,yXo),e($v,SX),e(SX,xXo),e($v,$Xo),e(N,kXo),e(N,kv),e(kv,B_e),e(B_e,SXo),e(kv,RXo),e(kv,RX),e(RX,PXo),e(kv,BXo),e(N,IXo),e(N,Sv),e(Sv,I_e),e(I_e,NXo),e(Sv,qXo),e(Sv,PX),e(PX,jXo),e(Sv,DXo),e(N,GXo),e(N,Rv),e(Rv,N_e),e(N_e,OXo),e(Rv,VXo),e(Rv,BX),e(BX,XXo),e(Rv,zXo),e(N,QXo),e(N,Pv),e(Pv,q_e),e(q_e,WXo),e(Pv,HXo),e(Pv,IX),e(IX,UXo),e(Pv,JXo),e(N,YXo),e(N,Bv),e(Bv,j_e),e(j_e,KXo),e(Bv,ZXo),e(Bv,NX),e(NX,ezo),e(Bv,ozo),e(N,rzo),e(N,Iv),e(Iv,D_e),e(D_e,tzo),e(Iv,azo),e(Iv,qX),e(qX,nzo),e(Iv,szo),e(N,lzo),e(N,Nv),e(Nv,G_e),e(G_e,izo),e(Nv,dzo),e(Nv,jX),e(jX,czo),e(Nv,fzo),e(N,mzo),e(N,qv),e(qv,O_e),e(O_e,gzo),e(qv,hzo),e(qv,DX),e(DX,pzo),e(qv,_zo),e(N,uzo),e(N,jv),e(jv,V_e),e(V_e,bzo),e(jv,vzo),e(jv,GX),e(GX,Fzo),e(jv,Tzo),e(N,Mzo),e(N,Dv),e(Dv,X_e),e(X_e,Ezo),e(Dv,Czo),e(Dv,OX),e(OX,wzo),e(Dv,Azo),e(N,Lzo),e(N,Gv),e(Gv,z_e),e(z_e,yzo),e(Gv,xzo),e(Gv,VX),e(VX,$zo),e(Gv,kzo),e(oo,Szo),e(oo,Ov),e(Ov,Rzo),e(Ov,Q_e),e(Q_e,Pzo),e(Ov,Bzo),e(Ov,W_e),e(W_e,Izo),e(oo,Nzo),M(Vv,oo,null),b(f,wXe,u),b(f,ad,u),e(ad,Xv),e(Xv,H_e),M(ly,H_e,null),e(ad,qzo),e(ad,U_e),e(U_e,jzo),b(f,AXe,u),b(f,Bo,u),M(iy,Bo,null),e(Bo,Dzo),e(Bo,nd),e(nd,Gzo),e(nd,XX),e(XX,Ozo),e(nd,Vzo),e(nd,zX),e(zX,Xzo),e(nd,zzo),e(Bo,Qzo),e(Bo,dy),e(dy,Wzo),e(dy,J_e),e(J_e,Hzo),e(dy,Uzo),e(Bo,Jzo),e(Bo,gt),M(cy,gt,null),e(gt,Yzo),e(gt,Y_e),e(Y_e,Kzo),e(gt,Zzo),e(gt,sd),e(sd,eQo),e(sd,K_e),e(K_e,oQo),e(sd,rQo),e(sd,QX),e(QX,tQo),e(sd,aQo),e(gt,nQo),M(zv,gt,null),e(Bo,sQo),e(Bo,ro),M(fy,ro,null),e(ro,lQo),e(ro,Z_e),e(Z_e,iQo),e(ro,dQo),e(ro,Oa),e(Oa,cQo),e(Oa,eue),e(eue,fQo),e(Oa,mQo),e(Oa,oue),e(oue,gQo),e(Oa,hQo),e(Oa,rue),e(rue,pQo),e(Oa,_Qo),e(ro,uQo),e(ro,Z),e(Z,Qv),e(Qv,tue),e(tue,bQo),e(Qv,vQo),e(Qv,WX),e(WX,FQo),e(Qv,TQo),e(Z,MQo),e(Z,Wv),e(Wv,aue),e(aue,EQo),e(Wv,CQo),e(Wv,HX),e(HX,wQo),e(Wv,AQo),e(Z,LQo),e(Z,Hv),e(Hv,nue),e(nue,yQo),e(Hv,xQo),e(Hv,UX),e(UX,$Qo),e(Hv,kQo),e(Z,SQo),e(Z,Uv),e(Uv,sue),e(sue,RQo),e(Uv,PQo),e(Uv,JX),e(JX,BQo),e(Uv,IQo),e(Z,NQo),e(Z,Jv),e(Jv,lue),e(lue,qQo),e(Jv,jQo),e(Jv,YX),e(YX,DQo),e(Jv,GQo),e(Z,OQo),e(Z,Yv),e(Yv,iue),e(iue,VQo),e(Yv,XQo),e(Yv,KX),e(KX,zQo),e(Yv,QQo),e(Z,WQo),e(Z,Kv),e(Kv,due),e(due,HQo),e(Kv,UQo),e(Kv,ZX),e(ZX,JQo),e(Kv,YQo),e(Z,KQo),e(Z,Zv),e(Zv,cue),e(cue,ZQo),e(Zv,eWo),e(Zv,ez),e(ez,oWo),e(Zv,rWo),e(Z,tWo),e(Z,eF),e(eF,fue),e(fue,aWo),e(eF,nWo),e(eF,oz),e(oz,sWo),e(eF,lWo),e(Z,iWo),e(Z,oF),e(oF,mue),e(mue,dWo),e(oF,cWo),e(oF,rz),e(rz,fWo),e(oF,mWo),e(Z,gWo),e(Z,rF),e(rF,gue),e(gue,hWo),e(rF,pWo),e(rF,tz),e(tz,_Wo),e(rF,uWo),e(Z,bWo),e(Z,tF),e(tF,hue),e(hue,vWo),e(tF,FWo),e(tF,az),e(az,TWo),e(tF,MWo),e(Z,EWo),e(Z,aF),e(aF,pue),e(pue,CWo),e(aF,wWo),e(aF,nz),e(nz,AWo),e(aF,LWo),e(Z,yWo),e(Z,nF),e(nF,_ue),e(_ue,xWo),e(nF,$Wo),e(nF,sz),e(sz,kWo),e(nF,SWo),e(Z,RWo),e(Z,sF),e(sF,uue),e(uue,PWo),e(sF,BWo),e(sF,lz),e(lz,IWo),e(sF,NWo),e(Z,qWo),e(Z,lF),e(lF,bue),e(bue,jWo),e(lF,DWo),e(lF,iz),e(iz,GWo),e(lF,OWo),e(Z,VWo),e(Z,iF),e(iF,vue),e(vue,XWo),e(iF,zWo),e(iF,dz),e(dz,QWo),e(iF,WWo),e(Z,HWo),e(Z,dF),e(dF,Fue),e(Fue,UWo),e(dF,JWo),e(dF,cz),e(cz,YWo),e(dF,KWo),e(Z,ZWo),e(Z,cF),e(cF,Tue),e(Tue,eHo),e(cF,oHo),e(cF,fz),e(fz,rHo),e(cF,tHo),e(Z,aHo),e(Z,fF),e(fF,Mue),e(Mue,nHo),e(fF,sHo),e(fF,mz),e(mz,lHo),e(fF,iHo),e(Z,dHo),e(Z,mF),e(mF,Eue),e(Eue,cHo),e(mF,fHo),e(mF,gz),e(gz,mHo),e(mF,gHo),e(Z,hHo),e(Z,gF),e(gF,Cue),e(Cue,pHo),e(gF,_Ho),e(gF,hz),e(hz,uHo),e(gF,bHo),e(Z,vHo),e(Z,hF),e(hF,wue),e(wue,FHo),e(hF,THo),e(hF,pz),e(pz,MHo),e(hF,EHo),e(Z,CHo),e(Z,pF),e(pF,Aue),e(Aue,wHo),e(pF,AHo),e(pF,_z),e(_z,LHo),e(pF,yHo),e(Z,xHo),e(Z,_F),e(_F,Lue),e(Lue,$Ho),e(_F,kHo),e(_F,uz),e(uz,SHo),e(_F,RHo),e(Z,PHo),e(Z,uF),e(uF,yue),e(yue,BHo),e(uF,IHo),e(uF,bz),e(bz,NHo),e(uF,qHo),e(Z,jHo),e(Z,bF),e(bF,xue),e(xue,DHo),e(bF,GHo),e(bF,vz),e(vz,OHo),e(bF,VHo),e(Z,XHo),e(Z,vF),e(vF,$ue),e($ue,zHo),e(vF,QHo),e(vF,Fz),e(Fz,WHo),e(vF,HHo),e(Z,UHo),e(Z,FF),e(FF,kue),e(kue,JHo),e(FF,YHo),e(FF,Tz),e(Tz,KHo),e(FF,ZHo),e(Z,eUo),e(Z,TF),e(TF,Sue),e(Sue,oUo),e(TF,rUo),e(TF,Mz),e(Mz,tUo),e(TF,aUo),e(ro,nUo),e(ro,MF),e(MF,sUo),e(MF,Rue),e(Rue,lUo),e(MF,iUo),e(MF,Pue),e(Pue,dUo),e(ro,cUo),M(EF,ro,null),b(f,LXe,u),b(f,ld,u),e(ld,CF),e(CF,Bue),M(my,Bue,null),e(ld,fUo),e(ld,Iue),e(Iue,mUo),b(f,yXe,u),b(f,Io,u),M(gy,Io,null),e(Io,gUo),e(Io,id),e(id,hUo),e(id,Ez),e(Ez,pUo),e(id,_Uo),e(id,Cz),e(Cz,uUo),e(id,bUo),e(Io,vUo),e(Io,hy),e(hy,FUo),e(hy,Nue),e(Nue,TUo),e(hy,MUo),e(Io,EUo),e(Io,ht),M(py,ht,null),e(ht,CUo),e(ht,que),e(que,wUo),e(ht,AUo),e(ht,dd),e(dd,LUo),e(dd,jue),e(jue,yUo),e(dd,xUo),e(dd,wz),e(wz,$Uo),e(dd,kUo),e(ht,SUo),M(wF,ht,null),e(Io,RUo),e(Io,to),M(_y,to,null),e(to,PUo),e(to,Due),e(Due,BUo),e(to,IUo),e(to,Va),e(Va,NUo),e(Va,Gue),e(Gue,qUo),e(Va,jUo),e(Va,Oue),e(Oue,DUo),e(Va,GUo),e(Va,Vue),e(Vue,OUo),e(Va,VUo),e(to,XUo),e(to,No),e(No,AF),e(AF,Xue),e(Xue,zUo),e(AF,QUo),e(AF,Az),e(Az,WUo),e(AF,HUo),e(No,UUo),e(No,LF),e(LF,zue),e(zue,JUo),e(LF,YUo),e(LF,Lz),e(Lz,KUo),e(LF,ZUo),e(No,eJo),e(No,yF),e(yF,Que),e(Que,oJo),e(yF,rJo),e(yF,yz),e(yz,tJo),e(yF,aJo),e(No,nJo),e(No,xF),e(xF,Wue),e(Wue,sJo),e(xF,lJo),e(xF,xz),e(xz,iJo),e(xF,dJo),e(No,cJo),e(No,$F),e($F,Hue),e(Hue,fJo),e($F,mJo),e($F,$z),e($z,gJo),e($F,hJo),e(No,pJo),e(No,kF),e(kF,Uue),e(Uue,_Jo),e(kF,uJo),e(kF,kz),e(kz,bJo),e(kF,vJo),e(to,FJo),e(to,SF),e(SF,TJo),e(SF,Jue),e(Jue,MJo),e(SF,EJo),e(SF,Yue),e(Yue,CJo),e(to,wJo),M(RF,to,null),b(f,xXe,u),b(f,cd,u),e(cd,PF),e(PF,Kue),M(uy,Kue,null),e(cd,AJo),e(cd,Zue),e(Zue,LJo),b(f,$Xe,u),b(f,qo,u),M(by,qo,null),e(qo,yJo),e(qo,fd),e(fd,xJo),e(fd,Sz),e(Sz,$Jo),e(fd,kJo),e(fd,Rz),e(Rz,SJo),e(fd,RJo),e(qo,PJo),e(qo,vy),e(vy,BJo),e(vy,e2e),e(e2e,IJo),e(vy,NJo),e(qo,qJo),e(qo,pt),M(Fy,pt,null),e(pt,jJo),e(pt,o2e),e(o2e,DJo),e(pt,GJo),e(pt,md),e(md,OJo),e(md,r2e),e(r2e,VJo),e(md,XJo),e(md,Pz),e(Pz,zJo),e(md,QJo),e(pt,WJo),M(BF,pt,null),e(qo,HJo),e(qo,ao),M(Ty,ao,null),e(ao,UJo),e(ao,t2e),e(t2e,JJo),e(ao,YJo),e(ao,Xa),e(Xa,KJo),e(Xa,a2e),e(a2e,ZJo),e(Xa,eYo),e(Xa,n2e),e(n2e,oYo),e(Xa,rYo),e(Xa,s2e),e(s2e,tYo),e(Xa,aYo),e(ao,nYo),e(ao,U),e(U,IF),e(IF,l2e),e(l2e,sYo),e(IF,lYo),e(IF,Bz),e(Bz,iYo),e(IF,dYo),e(U,cYo),e(U,NF),e(NF,i2e),e(i2e,fYo),e(NF,mYo),e(NF,Iz),e(Iz,gYo),e(NF,hYo),e(U,pYo),e(U,qF),e(qF,d2e),e(d2e,_Yo),e(qF,uYo),e(qF,Nz),e(Nz,bYo),e(qF,vYo),e(U,FYo),e(U,jF),e(jF,c2e),e(c2e,TYo),e(jF,MYo),e(jF,qz),e(qz,EYo),e(jF,CYo),e(U,wYo),e(U,DF),e(DF,f2e),e(f2e,AYo),e(DF,LYo),e(DF,jz),e(jz,yYo),e(DF,xYo),e(U,$Yo),e(U,GF),e(GF,m2e),e(m2e,kYo),e(GF,SYo),e(GF,Dz),e(Dz,RYo),e(GF,PYo),e(U,BYo),e(U,OF),e(OF,g2e),e(g2e,IYo),e(OF,NYo),e(OF,Gz),e(Gz,qYo),e(OF,jYo),e(U,DYo),e(U,VF),e(VF,h2e),e(h2e,GYo),e(VF,OYo),e(VF,Oz),e(Oz,VYo),e(VF,XYo),e(U,zYo),e(U,XF),e(XF,p2e),e(p2e,QYo),e(XF,WYo),e(XF,Vz),e(Vz,HYo),e(XF,UYo),e(U,JYo),e(U,zF),e(zF,_2e),e(_2e,YYo),e(zF,KYo),e(zF,Xz),e(Xz,ZYo),e(zF,eKo),e(U,oKo),e(U,QF),e(QF,u2e),e(u2e,rKo),e(QF,tKo),e(QF,zz),e(zz,aKo),e(QF,nKo),e(U,sKo),e(U,WF),e(WF,b2e),e(b2e,lKo),e(WF,iKo),e(WF,Qz),e(Qz,dKo),e(WF,cKo),e(U,fKo),e(U,HF),e(HF,v2e),e(v2e,mKo),e(HF,gKo),e(HF,Wz),e(Wz,hKo),e(HF,pKo),e(U,_Ko),e(U,UF),e(UF,F2e),e(F2e,uKo),e(UF,bKo),e(UF,Hz),e(Hz,vKo),e(UF,FKo),e(U,TKo),e(U,JF),e(JF,T2e),e(T2e,MKo),e(JF,EKo),e(JF,Uz),e(Uz,CKo),e(JF,wKo),e(U,AKo),e(U,YF),e(YF,M2e),e(M2e,LKo),e(YF,yKo),e(YF,Jz),e(Jz,xKo),e(YF,$Ko),e(U,kKo),e(U,KF),e(KF,E2e),e(E2e,SKo),e(KF,RKo),e(KF,Yz),e(Yz,PKo),e(KF,BKo),e(U,IKo),e(U,ZF),e(ZF,C2e),e(C2e,NKo),e(ZF,qKo),e(ZF,Kz),e(Kz,jKo),e(ZF,DKo),e(U,GKo),e(U,e6),e(e6,w2e),e(w2e,OKo),e(e6,VKo),e(e6,Zz),e(Zz,XKo),e(e6,zKo),e(U,QKo),e(U,o6),e(o6,A2e),e(A2e,WKo),e(o6,HKo),e(o6,eQ),e(eQ,UKo),e(o6,JKo),e(U,YKo),e(U,r6),e(r6,L2e),e(L2e,KKo),e(r6,ZKo),e(r6,oQ),e(oQ,eZo),e(r6,oZo),e(U,rZo),e(U,t6),e(t6,y2e),e(y2e,tZo),e(t6,aZo),e(t6,rQ),e(rQ,nZo),e(t6,sZo),e(U,lZo),e(U,a6),e(a6,x2e),e(x2e,iZo),e(a6,dZo),e(a6,tQ),e(tQ,cZo),e(a6,fZo),e(U,mZo),e(U,n6),e(n6,$2e),e($2e,gZo),e(n6,hZo),e(n6,aQ),e(aQ,pZo),e(n6,_Zo),e(U,uZo),e(U,s6),e(s6,k2e),e(k2e,bZo),e(s6,vZo),e(s6,nQ),e(nQ,FZo),e(s6,TZo),e(U,MZo),e(U,l6),e(l6,S2e),e(S2e,EZo),e(l6,CZo),e(l6,sQ),e(sQ,wZo),e(l6,AZo),e(U,LZo),e(U,i6),e(i6,R2e),e(R2e,yZo),e(i6,xZo),e(i6,lQ),e(lQ,$Zo),e(i6,kZo),e(U,SZo),e(U,d6),e(d6,P2e),e(P2e,RZo),e(d6,PZo),e(d6,iQ),e(iQ,BZo),e(d6,IZo),e(U,NZo),e(U,c6),e(c6,B2e),e(B2e,qZo),e(c6,jZo),e(c6,dQ),e(dQ,DZo),e(c6,GZo),e(U,OZo),e(U,f6),e(f6,I2e),e(I2e,VZo),e(f6,XZo),e(f6,cQ),e(cQ,zZo),e(f6,QZo),e(U,WZo),e(U,m6),e(m6,N2e),e(N2e,HZo),e(m6,UZo),e(m6,fQ),e(fQ,JZo),e(m6,YZo),e(U,KZo),e(U,g6),e(g6,q2e),e(q2e,ZZo),e(g6,eer),e(g6,mQ),e(mQ,oer),e(g6,rer),e(U,ter),e(U,h6),e(h6,j2e),e(j2e,aer),e(h6,ner),e(h6,gQ),e(gQ,ser),e(h6,ler),e(U,ier),e(U,p6),e(p6,D2e),e(D2e,der),e(p6,cer),e(p6,hQ),e(hQ,fer),e(p6,mer),e(U,ger),e(U,_6),e(_6,G2e),e(G2e,her),e(_6,per),e(_6,pQ),e(pQ,_er),e(_6,uer),e(U,ber),e(U,u6),e(u6,O2e),e(O2e,ver),e(u6,Fer),e(u6,_Q),e(_Q,Ter),e(u6,Mer),e(ao,Eer),e(ao,b6),e(b6,Cer),e(b6,V2e),e(V2e,wer),e(b6,Aer),e(b6,X2e),e(X2e,Ler),e(ao,yer),M(v6,ao,null),b(f,kXe,u),b(f,gd,u),e(gd,F6),e(F6,z2e),M(My,z2e,null),e(gd,xer),e(gd,Q2e),e(Q2e,$er),b(f,SXe,u),b(f,jo,u),M(Ey,jo,null),e(jo,ker),e(jo,hd),e(hd,Ser),e(hd,uQ),e(uQ,Rer),e(hd,Per),e(hd,bQ),e(bQ,Ber),e(hd,Ier),e(jo,Ner),e(jo,Cy),e(Cy,qer),e(Cy,W2e),e(W2e,jer),e(Cy,Der),e(jo,Ger),e(jo,_t),M(wy,_t,null),e(_t,Oer),e(_t,H2e),e(H2e,Ver),e(_t,Xer),e(_t,pd),e(pd,zer),e(pd,U2e),e(U2e,Qer),e(pd,Wer),e(pd,vQ),e(vQ,Her),e(pd,Uer),e(_t,Jer),M(T6,_t,null),e(jo,Yer),e(jo,no),M(Ay,no,null),e(no,Ker),e(no,J2e),e(J2e,Zer),e(no,eor),e(no,za),e(za,oor),e(za,Y2e),e(Y2e,ror),e(za,tor),e(za,K2e),e(K2e,aor),e(za,nor),e(za,Z2e),e(Z2e,sor),e(za,lor),e(no,ior),e(no,V),e(V,M6),e(M6,e1e),e(e1e,dor),e(M6,cor),e(M6,FQ),e(FQ,mor),e(M6,gor),e(V,hor),e(V,E6),e(E6,o1e),e(o1e,por),e(E6,_or),e(E6,TQ),e(TQ,uor),e(E6,bor),e(V,vor),e(V,C6),e(C6,r1e),e(r1e,For),e(C6,Tor),e(C6,MQ),e(MQ,Mor),e(C6,Eor),e(V,Cor),e(V,w6),e(w6,t1e),e(t1e,wor),e(w6,Aor),e(w6,EQ),e(EQ,Lor),e(w6,yor),e(V,xor),e(V,A6),e(A6,a1e),e(a1e,$or),e(A6,kor),e(A6,CQ),e(CQ,Sor),e(A6,Ror),e(V,Por),e(V,L6),e(L6,n1e),e(n1e,Bor),e(L6,Ior),e(L6,wQ),e(wQ,Nor),e(L6,qor),e(V,jor),e(V,y6),e(y6,s1e),e(s1e,Dor),e(y6,Gor),e(y6,AQ),e(AQ,Oor),e(y6,Vor),e(V,Xor),e(V,x6),e(x6,l1e),e(l1e,zor),e(x6,Qor),e(x6,LQ),e(LQ,Wor),e(x6,Hor),e(V,Uor),e(V,$6),e($6,i1e),e(i1e,Jor),e($6,Yor),e($6,yQ),e(yQ,Kor),e($6,Zor),e(V,err),e(V,k6),e(k6,d1e),e(d1e,orr),e(k6,rrr),e(k6,xQ),e(xQ,trr),e(k6,arr),e(V,nrr),e(V,S6),e(S6,c1e),e(c1e,srr),e(S6,lrr),e(S6,$Q),e($Q,irr),e(S6,drr),e(V,crr),e(V,R6),e(R6,f1e),e(f1e,frr),e(R6,mrr),e(R6,kQ),e(kQ,grr),e(R6,hrr),e(V,prr),e(V,P6),e(P6,m1e),e(m1e,_rr),e(P6,urr),e(P6,SQ),e(SQ,brr),e(P6,vrr),e(V,Frr),e(V,B6),e(B6,g1e),e(g1e,Trr),e(B6,Mrr),e(B6,RQ),e(RQ,Err),e(B6,Crr),e(V,wrr),e(V,I6),e(I6,h1e),e(h1e,Arr),e(I6,Lrr),e(I6,PQ),e(PQ,yrr),e(I6,xrr),e(V,$rr),e(V,N6),e(N6,p1e),e(p1e,krr),e(N6,Srr),e(N6,BQ),e(BQ,Rrr),e(N6,Prr),e(V,Brr),e(V,q6),e(q6,_1e),e(_1e,Irr),e(q6,Nrr),e(q6,IQ),e(IQ,qrr),e(q6,jrr),e(V,Drr),e(V,j6),e(j6,u1e),e(u1e,Grr),e(j6,Orr),e(j6,NQ),e(NQ,Vrr),e(j6,Xrr),e(V,zrr),e(V,D6),e(D6,b1e),e(b1e,Qrr),e(D6,Wrr),e(D6,qQ),e(qQ,Hrr),e(D6,Urr),e(V,Jrr),e(V,G6),e(G6,v1e),e(v1e,Yrr),e(G6,Krr),e(G6,jQ),e(jQ,Zrr),e(G6,etr),e(V,otr),e(V,O6),e(O6,F1e),e(F1e,rtr),e(O6,ttr),e(O6,DQ),e(DQ,atr),e(O6,ntr),e(V,str),e(V,V6),e(V6,T1e),e(T1e,ltr),e(V6,itr),e(V6,GQ),e(GQ,dtr),e(V6,ctr),e(V,ftr),e(V,X6),e(X6,M1e),e(M1e,mtr),e(X6,gtr),e(X6,OQ),e(OQ,htr),e(X6,ptr),e(V,_tr),e(V,z6),e(z6,E1e),e(E1e,utr),e(z6,btr),e(z6,VQ),e(VQ,vtr),e(z6,Ftr),e(V,Ttr),e(V,Q6),e(Q6,C1e),e(C1e,Mtr),e(Q6,Etr),e(Q6,XQ),e(XQ,Ctr),e(Q6,wtr),e(V,Atr),e(V,W6),e(W6,w1e),e(w1e,Ltr),e(W6,ytr),e(W6,zQ),e(zQ,xtr),e(W6,$tr),e(V,ktr),e(V,H6),e(H6,A1e),e(A1e,Str),e(H6,Rtr),e(H6,QQ),e(QQ,Ptr),e(H6,Btr),e(V,Itr),e(V,U6),e(U6,L1e),e(L1e,Ntr),e(U6,qtr),e(U6,WQ),e(WQ,jtr),e(U6,Dtr),e(V,Gtr),e(V,J6),e(J6,y1e),e(y1e,Otr),e(J6,Vtr),e(J6,HQ),e(HQ,Xtr),e(J6,ztr),e(V,Qtr),e(V,Y6),e(Y6,x1e),e(x1e,Wtr),e(Y6,Htr),e(Y6,UQ),e(UQ,Utr),e(Y6,Jtr),e(V,Ytr),e(V,K6),e(K6,$1e),e($1e,Ktr),e(K6,Ztr),e(K6,JQ),e(JQ,ear),e(K6,oar),e(V,rar),e(V,Z6),e(Z6,k1e),e(k1e,tar),e(Z6,aar),e(Z6,YQ),e(YQ,nar),e(Z6,sar),e(V,lar),e(V,eT),e(eT,S1e),e(S1e,iar),e(eT,dar),e(eT,KQ),e(KQ,car),e(eT,far),e(V,mar),e(V,oT),e(oT,R1e),e(R1e,gar),e(oT,har),e(oT,ZQ),e(ZQ,par),e(oT,_ar),e(V,uar),e(V,rT),e(rT,P1e),e(P1e,bar),e(rT,Far),e(rT,eW),e(eW,Tar),e(rT,Mar),e(V,Ear),e(V,tT),e(tT,B1e),e(B1e,Car),e(tT,war),e(tT,oW),e(oW,Aar),e(tT,Lar),e(V,yar),e(V,aT),e(aT,I1e),e(I1e,xar),e(aT,$ar),e(aT,rW),e(rW,kar),e(aT,Sar),e(V,Rar),e(V,nT),e(nT,N1e),e(N1e,Par),e(nT,Bar),e(nT,tW),e(tW,Iar),e(nT,Nar),e(V,qar),e(V,sT),e(sT,q1e),e(q1e,jar),e(sT,Dar),e(sT,aW),e(aW,Gar),e(sT,Oar),e(V,Var),e(V,lT),e(lT,j1e),e(j1e,Xar),e(lT,zar),e(lT,nW),e(nW,Qar),e(lT,War),e(V,Har),e(V,iT),e(iT,D1e),e(D1e,Uar),e(iT,Jar),e(iT,sW),e(sW,Yar),e(iT,Kar),e(V,Zar),e(V,dT),e(dT,G1e),e(G1e,enr),e(dT,onr),e(dT,lW),e(lW,rnr),e(dT,tnr),e(no,anr),e(no,cT),e(cT,nnr),e(cT,O1e),e(O1e,snr),e(cT,lnr),e(cT,V1e),e(V1e,inr),e(no,dnr),M(fT,no,null),b(f,RXe,u),b(f,_d,u),e(_d,mT),e(mT,X1e),M(Ly,X1e,null),e(_d,cnr),e(_d,z1e),e(z1e,fnr),b(f,PXe,u),b(f,Do,u),M(yy,Do,null),e(Do,mnr),e(Do,ud),e(ud,gnr),e(ud,iW),e(iW,hnr),e(ud,pnr),e(ud,dW),e(dW,_nr),e(ud,unr),e(Do,bnr),e(Do,xy),e(xy,vnr),e(xy,Q1e),e(Q1e,Fnr),e(xy,Tnr),e(Do,Mnr),e(Do,ut),M($y,ut,null),e(ut,Enr),e(ut,W1e),e(W1e,Cnr),e(ut,wnr),e(ut,bd),e(bd,Anr),e(bd,H1e),e(H1e,Lnr),e(bd,ynr),e(bd,cW),e(cW,xnr),e(bd,$nr),e(ut,knr),M(gT,ut,null),e(Do,Snr),e(Do,so),M(ky,so,null),e(so,Rnr),e(so,U1e),e(U1e,Pnr),e(so,Bnr),e(so,Qa),e(Qa,Inr),e(Qa,J1e),e(J1e,Nnr),e(Qa,qnr),e(Qa,Y1e),e(Y1e,jnr),e(Qa,Dnr),e(Qa,K1e),e(K1e,Gnr),e(Qa,Onr),e(so,Vnr),e(so,Z1e),e(Z1e,hT),e(hT,ebe),e(ebe,Xnr),e(hT,znr),e(hT,fW),e(fW,Qnr),e(hT,Wnr),e(so,Hnr),e(so,pT),e(pT,Unr),e(pT,obe),e(obe,Jnr),e(pT,Ynr),e(pT,rbe),e(rbe,Knr),e(so,Znr),M(_T,so,null),b(f,BXe,u),b(f,vd,u),e(vd,uT),e(uT,tbe),M(Sy,tbe,null),e(vd,esr),e(vd,abe),e(abe,osr),b(f,IXe,u),b(f,Go,u),M(Ry,Go,null),e(Go,rsr),e(Go,Fd),e(Fd,tsr),e(Fd,mW),e(mW,asr),e(Fd,nsr),e(Fd,gW),e(gW,ssr),e(Fd,lsr),e(Go,isr),e(Go,Py),e(Py,dsr),e(Py,nbe),e(nbe,csr),e(Py,fsr),e(Go,msr),e(Go,bt),M(By,bt,null),e(bt,gsr),e(bt,sbe),e(sbe,hsr),e(bt,psr),e(bt,Td),e(Td,_sr),e(Td,lbe),e(lbe,usr),e(Td,bsr),e(Td,hW),e(hW,vsr),e(Td,Fsr),e(bt,Tsr),M(bT,bt,null),e(Go,Msr),e(Go,lo),M(Iy,lo,null),e(lo,Esr),e(lo,ibe),e(ibe,Csr),e(lo,wsr),e(lo,Wa),e(Wa,Asr),e(Wa,dbe),e(dbe,Lsr),e(Wa,ysr),e(Wa,cbe),e(cbe,xsr),e(Wa,$sr),e(Wa,fbe),e(fbe,ksr),e(Wa,Ssr),e(lo,Rsr),e(lo,ve),e(ve,vT),e(vT,mbe),e(mbe,Psr),e(vT,Bsr),e(vT,pW),e(pW,Isr),e(vT,Nsr),e(ve,qsr),e(ve,FT),e(FT,gbe),e(gbe,jsr),e(FT,Dsr),e(FT,_W),e(_W,Gsr),e(FT,Osr),e(ve,Vsr),e(ve,TT),e(TT,hbe),e(hbe,Xsr),e(TT,zsr),e(TT,uW),e(uW,Qsr),e(TT,Wsr),e(ve,Hsr),e(ve,MT),e(MT,pbe),e(pbe,Usr),e(MT,Jsr),e(MT,bW),e(bW,Ysr),e(MT,Ksr),e(ve,Zsr),e(ve,Hs),e(Hs,_be),e(_be,elr),e(Hs,olr),e(Hs,vW),e(vW,rlr),e(Hs,tlr),e(Hs,FW),e(FW,alr),e(Hs,nlr),e(ve,slr),e(ve,ET),e(ET,ube),e(ube,llr),e(ET,ilr),e(ET,TW),e(TW,dlr),e(ET,clr),e(ve,flr),e(ve,Us),e(Us,bbe),e(bbe,mlr),e(Us,glr),e(Us,MW),e(MW,hlr),e(Us,plr),e(Us,EW),e(EW,_lr),e(Us,ulr),e(ve,blr),e(ve,CT),e(CT,vbe),e(vbe,vlr),e(CT,Flr),e(CT,CW),e(CW,Tlr),e(CT,Mlr),e(ve,Elr),e(ve,vt),e(vt,Fbe),e(Fbe,Clr),e(vt,wlr),e(vt,wW),e(wW,Alr),e(vt,Llr),e(vt,AW),e(AW,ylr),e(vt,xlr),e(vt,LW),e(LW,$lr),e(vt,klr),e(ve,Slr),e(ve,wT),e(wT,Tbe),e(Tbe,Rlr),e(wT,Plr),e(wT,yW),e(yW,Blr),e(wT,Ilr),e(ve,Nlr),e(ve,AT),e(AT,Mbe),e(Mbe,qlr),e(AT,jlr),e(AT,xW),e(xW,Dlr),e(AT,Glr),e(ve,Olr),e(ve,LT),e(LT,Ebe),e(Ebe,Vlr),e(LT,Xlr),e(LT,$W),e($W,zlr),e(LT,Qlr),e(ve,Wlr),e(ve,yT),e(yT,Cbe),e(Cbe,Hlr),e(yT,Ulr),e(yT,kW),e(kW,Jlr),e(yT,Ylr),e(ve,Klr),e(ve,xT),e(xT,wbe),e(wbe,Zlr),e(xT,eir),e(xT,SW),e(SW,oir),e(xT,rir),e(ve,tir),e(ve,$T),e($T,Abe),e(Abe,air),e($T,nir),e($T,RW),e(RW,sir),e($T,lir),e(ve,iir),e(ve,kT),e(kT,Lbe),e(Lbe,dir),e(kT,cir),e(kT,PW),e(PW,fir),e(kT,mir),e(lo,gir),e(lo,ST),e(ST,hir),e(ST,ybe),e(ybe,pir),e(ST,_ir),e(ST,xbe),e(xbe,uir),e(lo,bir),M(RT,lo,null),b(f,NXe,u),b(f,Md,u),e(Md,PT),e(PT,$be),M(Ny,$be,null),e(Md,vir),e(Md,kbe),e(kbe,Fir),b(f,qXe,u),b(f,Oo,u),M(qy,Oo,null),e(Oo,Tir),e(Oo,Ed),e(Ed,Mir),e(Ed,BW),e(BW,Eir),e(Ed,Cir),e(Ed,IW),e(IW,wir),e(Ed,Air),e(Oo,Lir),e(Oo,jy),e(jy,yir),e(jy,Sbe),e(Sbe,xir),e(jy,$ir),e(Oo,kir),e(Oo,Ft),M(Dy,Ft,null),e(Ft,Sir),e(Ft,Rbe),e(Rbe,Rir),e(Ft,Pir),e(Ft,Cd),e(Cd,Bir),e(Cd,Pbe),e(Pbe,Iir),e(Cd,Nir),e(Cd,NW),e(NW,qir),e(Cd,jir),e(Ft,Dir),M(BT,Ft,null),e(Oo,Gir),e(Oo,io),M(Gy,io,null),e(io,Oir),e(io,Bbe),e(Bbe,Vir),e(io,Xir),e(io,Ha),e(Ha,zir),e(Ha,Ibe),e(Ibe,Qir),e(Ha,Wir),e(Ha,Nbe),e(Nbe,Hir),e(Ha,Uir),e(Ha,qbe),e(qbe,Jir),e(Ha,Yir),e(io,Kir),e(io,jbe),e(jbe,IT),e(IT,Dbe),e(Dbe,Zir),e(IT,edr),e(IT,qW),e(qW,odr),e(IT,rdr),e(io,tdr),e(io,NT),e(NT,adr),e(NT,Gbe),e(Gbe,ndr),e(NT,sdr),e(NT,Obe),e(Obe,ldr),e(io,idr),M(qT,io,null),b(f,jXe,u),b(f,wd,u),e(wd,jT),e(jT,Vbe),M(Oy,Vbe,null),e(wd,ddr),e(wd,Xbe),e(Xbe,cdr),b(f,DXe,u),b(f,Vo,u),M(Vy,Vo,null),e(Vo,fdr),e(Vo,Ad),e(Ad,mdr),e(Ad,jW),e(jW,gdr),e(Ad,hdr),e(Ad,DW),e(DW,pdr),e(Ad,_dr),e(Vo,udr),e(Vo,Xy),e(Xy,bdr),e(Xy,zbe),e(zbe,vdr),e(Xy,Fdr),e(Vo,Tdr),e(Vo,Tt),M(zy,Tt,null),e(Tt,Mdr),e(Tt,Qbe),e(Qbe,Edr),e(Tt,Cdr),e(Tt,Ld),e(Ld,wdr),e(Ld,Wbe),e(Wbe,Adr),e(Ld,Ldr),e(Ld,GW),e(GW,ydr),e(Ld,xdr),e(Tt,$dr),M(DT,Tt,null),e(Vo,kdr),e(Vo,co),M(Qy,co,null),e(co,Sdr),e(co,Hbe),e(Hbe,Rdr),e(co,Pdr),e(co,Ua),e(Ua,Bdr),e(Ua,Ube),e(Ube,Idr),e(Ua,Ndr),e(Ua,Jbe),e(Jbe,qdr),e(Ua,jdr),e(Ua,Ybe),e(Ybe,Ddr),e(Ua,Gdr),e(co,Odr),e(co,Kbe),e(Kbe,GT),e(GT,Zbe),e(Zbe,Vdr),e(GT,Xdr),e(GT,OW),e(OW,zdr),e(GT,Qdr),e(co,Wdr),e(co,OT),e(OT,Hdr),e(OT,eve),e(eve,Udr),e(OT,Jdr),e(OT,ove),e(ove,Ydr),e(co,Kdr),M(VT,co,null),b(f,GXe,u),b(f,yd,u),e(yd,XT),e(XT,rve),M(Wy,rve,null),e(yd,Zdr),e(yd,tve),e(tve,ecr),b(f,OXe,u),b(f,Xo,u),M(Hy,Xo,null),e(Xo,ocr),e(Xo,xd),e(xd,rcr),e(xd,VW),e(VW,tcr),e(xd,acr),e(xd,XW),e(XW,ncr),e(xd,scr),e(Xo,lcr),e(Xo,Uy),e(Uy,icr),e(Uy,ave),e(ave,dcr),e(Uy,ccr),e(Xo,fcr),e(Xo,Mt),M(Jy,Mt,null),e(Mt,mcr),e(Mt,nve),e(nve,gcr),e(Mt,hcr),e(Mt,$d),e($d,pcr),e($d,sve),e(sve,_cr),e($d,ucr),e($d,zW),e(zW,bcr),e($d,vcr),e(Mt,Fcr),M(zT,Mt,null),e(Xo,Tcr),e(Xo,fo),M(Yy,fo,null),e(fo,Mcr),e(fo,lve),e(lve,Ecr),e(fo,Ccr),e(fo,Ja),e(Ja,wcr),e(Ja,ive),e(ive,Acr),e(Ja,Lcr),e(Ja,dve),e(dve,ycr),e(Ja,xcr),e(Ja,cve),e(cve,$cr),e(Ja,kcr),e(fo,Scr),e(fo,Pe),e(Pe,QT),e(QT,fve),e(fve,Rcr),e(QT,Pcr),e(QT,QW),e(QW,Bcr),e(QT,Icr),e(Pe,Ncr),e(Pe,WT),e(WT,mve),e(mve,qcr),e(WT,jcr),e(WT,WW),e(WW,Dcr),e(WT,Gcr),e(Pe,Ocr),e(Pe,HT),e(HT,gve),e(gve,Vcr),e(HT,Xcr),e(HT,HW),e(HW,zcr),e(HT,Qcr),e(Pe,Wcr),e(Pe,UT),e(UT,hve),e(hve,Hcr),e(UT,Ucr),e(UT,UW),e(UW,Jcr),e(UT,Ycr),e(Pe,Kcr),e(Pe,JT),e(JT,pve),e(pve,Zcr),e(JT,efr),e(JT,JW),e(JW,ofr),e(JT,rfr),e(Pe,tfr),e(Pe,YT),e(YT,_ve),e(_ve,afr),e(YT,nfr),e(YT,YW),e(YW,sfr),e(YT,lfr),e(Pe,ifr),e(Pe,KT),e(KT,uve),e(uve,dfr),e(KT,cfr),e(KT,KW),e(KW,ffr),e(KT,mfr),e(Pe,gfr),e(Pe,ZT),e(ZT,bve),e(bve,hfr),e(ZT,pfr),e(ZT,ZW),e(ZW,_fr),e(ZT,ufr),e(Pe,bfr),e(Pe,e7),e(e7,vve),e(vve,vfr),e(e7,Ffr),e(e7,eH),e(eH,Tfr),e(e7,Mfr),e(fo,Efr),e(fo,o7),e(o7,Cfr),e(o7,Fve),e(Fve,wfr),e(o7,Afr),e(o7,Tve),e(Tve,Lfr),e(fo,yfr),M(r7,fo,null),b(f,VXe,u),b(f,kd,u),e(kd,t7),e(t7,Mve),M(Ky,Mve,null),e(kd,xfr),e(kd,Eve),e(Eve,$fr),b(f,XXe,u),b(f,zo,u),M(Zy,zo,null),e(zo,kfr),e(zo,Sd),e(Sd,Sfr),e(Sd,oH),e(oH,Rfr),e(Sd,Pfr),e(Sd,rH),e(rH,Bfr),e(Sd,Ifr),e(zo,Nfr),e(zo,e9),e(e9,qfr),e(e9,Cve),e(Cve,jfr),e(e9,Dfr),e(zo,Gfr),e(zo,Et),M(o9,Et,null),e(Et,Ofr),e(Et,wve),e(wve,Vfr),e(Et,Xfr),e(Et,Rd),e(Rd,zfr),e(Rd,Ave),e(Ave,Qfr),e(Rd,Wfr),e(Rd,tH),e(tH,Hfr),e(Rd,Ufr),e(Et,Jfr),M(a7,Et,null),e(zo,Yfr),e(zo,mo),M(r9,mo,null),e(mo,Kfr),e(mo,Lve),e(Lve,Zfr),e(mo,emr),e(mo,Ya),e(Ya,omr),e(Ya,yve),e(yve,rmr),e(Ya,tmr),e(Ya,xve),e(xve,amr),e(Ya,nmr),e(Ya,$ve),e($ve,smr),e(Ya,lmr),e(mo,imr),e(mo,ot),e(ot,n7),e(n7,kve),e(kve,dmr),e(n7,cmr),e(n7,aH),e(aH,fmr),e(n7,mmr),e(ot,gmr),e(ot,s7),e(s7,Sve),e(Sve,hmr),e(s7,pmr),e(s7,nH),e(nH,_mr),e(s7,umr),e(ot,bmr),e(ot,l7),e(l7,Rve),e(Rve,vmr),e(l7,Fmr),e(l7,sH),e(sH,Tmr),e(l7,Mmr),e(ot,Emr),e(ot,i7),e(i7,Pve),e(Pve,Cmr),e(i7,wmr),e(i7,lH),e(lH,Amr),e(i7,Lmr),e(ot,ymr),e(ot,d7),e(d7,Bve),e(Bve,xmr),e(d7,$mr),e(d7,iH),e(iH,kmr),e(d7,Smr),e(mo,Rmr),e(mo,c7),e(c7,Pmr),e(c7,Ive),e(Ive,Bmr),e(c7,Imr),e(c7,Nve),e(Nve,Nmr),e(mo,qmr),M(f7,mo,null),b(f,zXe,u),b(f,Pd,u),e(Pd,m7),e(m7,qve),M(t9,qve,null),e(Pd,jmr),e(Pd,jve),e(jve,Dmr),b(f,QXe,u),b(f,Qo,u),M(a9,Qo,null),e(Qo,Gmr),e(Qo,Bd),e(Bd,Omr),e(Bd,dH),e(dH,Vmr),e(Bd,Xmr),e(Bd,cH),e(cH,zmr),e(Bd,Qmr),e(Qo,Wmr),e(Qo,n9),e(n9,Hmr),e(n9,Dve),e(Dve,Umr),e(n9,Jmr),e(Qo,Ymr),e(Qo,Ct),M(s9,Ct,null),e(Ct,Kmr),e(Ct,Gve),e(Gve,Zmr),e(Ct,egr),e(Ct,Id),e(Id,ogr),e(Id,Ove),e(Ove,rgr),e(Id,tgr),e(Id,fH),e(fH,agr),e(Id,ngr),e(Ct,sgr),M(g7,Ct,null),e(Qo,lgr),e(Qo,go),M(l9,go,null),e(go,igr),e(go,Vve),e(Vve,dgr),e(go,cgr),e(go,Ka),e(Ka,fgr),e(Ka,Xve),e(Xve,mgr),e(Ka,ggr),e(Ka,zve),e(zve,hgr),e(Ka,pgr),e(Ka,Qve),e(Qve,_gr),e(Ka,ugr),e(go,bgr),e(go,Le),e(Le,h7),e(h7,Wve),e(Wve,vgr),e(h7,Fgr),e(h7,mH),e(mH,Tgr),e(h7,Mgr),e(Le,Egr),e(Le,p7),e(p7,Hve),e(Hve,Cgr),e(p7,wgr),e(p7,gH),e(gH,Agr),e(p7,Lgr),e(Le,ygr),e(Le,_7),e(_7,Uve),e(Uve,xgr),e(_7,$gr),e(_7,hH),e(hH,kgr),e(_7,Sgr),e(Le,Rgr),e(Le,u7),e(u7,Jve),e(Jve,Pgr),e(u7,Bgr),e(u7,pH),e(pH,Igr),e(u7,Ngr),e(Le,qgr),e(Le,b7),e(b7,Yve),e(Yve,jgr),e(b7,Dgr),e(b7,_H),e(_H,Ggr),e(b7,Ogr),e(Le,Vgr),e(Le,v7),e(v7,Kve),e(Kve,Xgr),e(v7,zgr),e(v7,uH),e(uH,Qgr),e(v7,Wgr),e(Le,Hgr),e(Le,F7),e(F7,Zve),e(Zve,Ugr),e(F7,Jgr),e(F7,bH),e(bH,Ygr),e(F7,Kgr),e(Le,Zgr),e(Le,T7),e(T7,eFe),e(eFe,ehr),e(T7,ohr),e(T7,vH),e(vH,rhr),e(T7,thr),e(Le,ahr),e(Le,M7),e(M7,oFe),e(oFe,nhr),e(M7,shr),e(M7,FH),e(FH,lhr),e(M7,ihr),e(Le,dhr),e(Le,E7),e(E7,rFe),e(rFe,chr),e(E7,fhr),e(E7,TH),e(TH,mhr),e(E7,ghr),e(go,hhr),e(go,C7),e(C7,phr),e(C7,tFe),e(tFe,_hr),e(C7,uhr),e(C7,aFe),e(aFe,bhr),e(go,vhr),M(w7,go,null),b(f,WXe,u),b(f,Nd,u),e(Nd,A7),e(A7,nFe),M(i9,nFe,null),e(Nd,Fhr),e(Nd,sFe),e(sFe,Thr),b(f,HXe,u),b(f,Wo,u),M(d9,Wo,null),e(Wo,Mhr),e(Wo,qd),e(qd,Ehr),e(qd,MH),e(MH,Chr),e(qd,whr),e(qd,EH),e(EH,Ahr),e(qd,Lhr),e(Wo,yhr),e(Wo,c9),e(c9,xhr),e(c9,lFe),e(lFe,$hr),e(c9,khr),e(Wo,Shr),e(Wo,wt),M(f9,wt,null),e(wt,Rhr),e(wt,iFe),e(iFe,Phr),e(wt,Bhr),e(wt,jd),e(jd,Ihr),e(jd,dFe),e(dFe,Nhr),e(jd,qhr),e(jd,CH),e(CH,jhr),e(jd,Dhr),e(wt,Ghr),M(L7,wt,null),e(Wo,Ohr),e(Wo,ho),M(m9,ho,null),e(ho,Vhr),e(ho,cFe),e(cFe,Xhr),e(ho,zhr),e(ho,Za),e(Za,Qhr),e(Za,fFe),e(fFe,Whr),e(Za,Hhr),e(Za,mFe),e(mFe,Uhr),e(Za,Jhr),e(Za,gFe),e(gFe,Yhr),e(Za,Khr),e(ho,Zhr),e(ho,g9),e(g9,y7),e(y7,hFe),e(hFe,epr),e(y7,opr),e(y7,wH),e(wH,rpr),e(y7,tpr),e(g9,apr),e(g9,x7),e(x7,pFe),e(pFe,npr),e(x7,spr),e(x7,AH),e(AH,lpr),e(x7,ipr),e(ho,dpr),e(ho,$7),e($7,cpr),e($7,_Fe),e(_Fe,fpr),e($7,mpr),e($7,uFe),e(uFe,gpr),e(ho,hpr),M(k7,ho,null),b(f,UXe,u),b(f,Dd,u),e(Dd,S7),e(S7,bFe),M(h9,bFe,null),e(Dd,ppr),e(Dd,vFe),e(vFe,_pr),b(f,JXe,u),b(f,Ho,u),M(p9,Ho,null),e(Ho,upr),e(Ho,Gd),e(Gd,bpr),e(Gd,LH),e(LH,vpr),e(Gd,Fpr),e(Gd,yH),e(yH,Tpr),e(Gd,Mpr),e(Ho,Epr),e(Ho,_9),e(_9,Cpr),e(_9,FFe),e(FFe,wpr),e(_9,Apr),e(Ho,Lpr),e(Ho,At),M(u9,At,null),e(At,ypr),e(At,TFe),e(TFe,xpr),e(At,$pr),e(At,Od),e(Od,kpr),e(Od,MFe),e(MFe,Spr),e(Od,Rpr),e(Od,xH),e(xH,Ppr),e(Od,Bpr),e(At,Ipr),M(R7,At,null),e(Ho,Npr),e(Ho,po),M(b9,po,null),e(po,qpr),e(po,EFe),e(EFe,jpr),e(po,Dpr),e(po,en),e(en,Gpr),e(en,CFe),e(CFe,Opr),e(en,Vpr),e(en,wFe),e(wFe,Xpr),e(en,zpr),e(en,AFe),e(AFe,Qpr),e(en,Wpr),e(po,Hpr),e(po,rt),e(rt,P7),e(P7,LFe),e(LFe,Upr),e(P7,Jpr),e(P7,$H),e($H,Ypr),e(P7,Kpr),e(rt,Zpr),e(rt,B7),e(B7,yFe),e(yFe,e_r),e(B7,o_r),e(B7,kH),e(kH,r_r),e(B7,t_r),e(rt,a_r),e(rt,I7),e(I7,xFe),e(xFe,n_r),e(I7,s_r),e(I7,SH),e(SH,l_r),e(I7,i_r),e(rt,d_r),e(rt,N7),e(N7,$Fe),e($Fe,c_r),e(N7,f_r),e(N7,RH),e(RH,m_r),e(N7,g_r),e(rt,h_r),e(rt,q7),e(q7,kFe),e(kFe,p_r),e(q7,__r),e(q7,PH),e(PH,u_r),e(q7,b_r),e(po,v_r),e(po,j7),e(j7,F_r),e(j7,SFe),e(SFe,T_r),e(j7,M_r),e(j7,RFe),e(RFe,E_r),e(po,C_r),M(D7,po,null),b(f,YXe,u),b(f,Vd,u),e(Vd,G7),e(G7,PFe),M(v9,PFe,null),e(Vd,w_r),e(Vd,BFe),e(BFe,A_r),b(f,KXe,u),b(f,Uo,u),M(F9,Uo,null),e(Uo,L_r),e(Uo,Xd),e(Xd,y_r),e(Xd,BH),e(BH,x_r),e(Xd,$_r),e(Xd,IH),e(IH,k_r),e(Xd,S_r),e(Uo,R_r),e(Uo,T9),e(T9,P_r),e(T9,IFe),e(IFe,B_r),e(T9,I_r),e(Uo,N_r),e(Uo,Lt),M(M9,Lt,null),e(Lt,q_r),e(Lt,NFe),e(NFe,j_r),e(Lt,D_r),e(Lt,zd),e(zd,G_r),e(zd,qFe),e(qFe,O_r),e(zd,V_r),e(zd,NH),e(NH,X_r),e(zd,z_r),e(Lt,Q_r),M(O7,Lt,null),e(Uo,W_r),e(Uo,_o),M(E9,_o,null),e(_o,H_r),e(_o,jFe),e(jFe,U_r),e(_o,J_r),e(_o,on),e(on,Y_r),e(on,DFe),e(DFe,K_r),e(on,Z_r),e(on,GFe),e(GFe,eur),e(on,our),e(on,OFe),e(OFe,rur),e(on,tur),e(_o,aur),e(_o,Qd),e(Qd,V7),e(V7,VFe),e(VFe,nur),e(V7,sur),e(V7,qH),e(qH,lur),e(V7,iur),e(Qd,dur),e(Qd,X7),e(X7,XFe),e(XFe,cur),e(X7,fur),e(X7,jH),e(jH,mur),e(X7,gur),e(Qd,hur),e(Qd,z7),e(z7,zFe),e(zFe,pur),e(z7,_ur),e(z7,DH),e(DH,uur),e(z7,bur),e(_o,vur),e(_o,Q7),e(Q7,Fur),e(Q7,QFe),e(QFe,Tur),e(Q7,Mur),e(Q7,WFe),e(WFe,Eur),e(_o,Cur),M(W7,_o,null),b(f,ZXe,u),b(f,Wd,u),e(Wd,H7),e(H7,HFe),M(C9,HFe,null),e(Wd,wur),e(Wd,UFe),e(UFe,Aur),b(f,eze,u),b(f,Jo,u),M(w9,Jo,null),e(Jo,Lur),e(Jo,Hd),e(Hd,yur),e(Hd,GH),e(GH,xur),e(Hd,$ur),e(Hd,OH),e(OH,kur),e(Hd,Sur),e(Jo,Rur),e(Jo,A9),e(A9,Pur),e(A9,JFe),e(JFe,Bur),e(A9,Iur),e(Jo,Nur),e(Jo,yt),M(L9,yt,null),e(yt,qur),e(yt,YFe),e(YFe,jur),e(yt,Dur),e(yt,Ud),e(Ud,Gur),e(Ud,KFe),e(KFe,Our),e(Ud,Vur),e(Ud,VH),e(VH,Xur),e(Ud,zur),e(yt,Qur),M(U7,yt,null),e(Jo,Wur),e(Jo,uo),M(y9,uo,null),e(uo,Hur),e(uo,ZFe),e(ZFe,Uur),e(uo,Jur),e(uo,rn),e(rn,Yur),e(rn,e6e),e(e6e,Kur),e(rn,Zur),e(rn,o6e),e(o6e,e2r),e(rn,o2r),e(rn,r6e),e(r6e,r2r),e(rn,t2r),e(uo,a2r),e(uo,x9),e(x9,J7),e(J7,t6e),e(t6e,n2r),e(J7,s2r),e(J7,XH),e(XH,l2r),e(J7,i2r),e(x9,d2r),e(x9,Y7),e(Y7,a6e),e(a6e,c2r),e(Y7,f2r),e(Y7,zH),e(zH,m2r),e(Y7,g2r),e(uo,h2r),e(uo,K7),e(K7,p2r),e(K7,n6e),e(n6e,_2r),e(K7,u2r),e(K7,s6e),e(s6e,b2r),e(uo,v2r),M(Z7,uo,null),b(f,oze,u),b(f,Jd,u),e(Jd,e8),e(e8,l6e),M($9,l6e,null),e(Jd,F2r),e(Jd,i6e),e(i6e,T2r),b(f,rze,u),b(f,Yo,u),M(k9,Yo,null),e(Yo,M2r),e(Yo,Yd),e(Yd,E2r),e(Yd,QH),e(QH,C2r),e(Yd,w2r),e(Yd,WH),e(WH,A2r),e(Yd,L2r),e(Yo,y2r),e(Yo,S9),e(S9,x2r),e(S9,d6e),e(d6e,$2r),e(S9,k2r),e(Yo,S2r),e(Yo,xt),M(R9,xt,null),e(xt,R2r),e(xt,c6e),e(c6e,P2r),e(xt,B2r),e(xt,Kd),e(Kd,I2r),e(Kd,f6e),e(f6e,N2r),e(Kd,q2r),e(Kd,HH),e(HH,j2r),e(Kd,D2r),e(xt,G2r),M(o8,xt,null),e(Yo,O2r),e(Yo,bo),M(P9,bo,null),e(bo,V2r),e(bo,m6e),e(m6e,X2r),e(bo,z2r),e(bo,tn),e(tn,Q2r),e(tn,g6e),e(g6e,W2r),e(tn,H2r),e(tn,h6e),e(h6e,U2r),e(tn,J2r),e(tn,p6e),e(p6e,Y2r),e(tn,K2r),e(bo,Z2r),e(bo,_6e),e(_6e,r8),e(r8,u6e),e(u6e,e1r),e(r8,o1r),e(r8,UH),e(UH,r1r),e(r8,t1r),e(bo,a1r),e(bo,t8),e(t8,n1r),e(t8,b6e),e(b6e,s1r),e(t8,l1r),e(t8,v6e),e(v6e,i1r),e(bo,d1r),M(a8,bo,null),b(f,tze,u),b(f,Zd,u),e(Zd,n8),e(n8,F6e),M(B9,F6e,null),e(Zd,c1r),e(Zd,T6e),e(T6e,f1r),b(f,aze,u),b(f,Ko,u),M(I9,Ko,null),e(Ko,m1r),e(Ko,ec),e(ec,g1r),e(ec,JH),e(JH,h1r),e(ec,p1r),e(ec,YH),e(YH,_1r),e(ec,u1r),e(Ko,b1r),e(Ko,N9),e(N9,v1r),e(N9,M6e),e(M6e,F1r),e(N9,T1r),e(Ko,M1r),e(Ko,$t),M(q9,$t,null),e($t,E1r),e($t,E6e),e(E6e,C1r),e($t,w1r),e($t,oc),e(oc,A1r),e(oc,C6e),e(C6e,L1r),e(oc,y1r),e(oc,KH),e(KH,x1r),e(oc,$1r),e($t,k1r),M(s8,$t,null),e(Ko,S1r),e(Ko,vo),M(j9,vo,null),e(vo,R1r),e(vo,w6e),e(w6e,P1r),e(vo,B1r),e(vo,an),e(an,I1r),e(an,A6e),e(A6e,N1r),e(an,q1r),e(an,L6e),e(L6e,j1r),e(an,D1r),e(an,y6e),e(y6e,G1r),e(an,O1r),e(vo,V1r),e(vo,tt),e(tt,l8),e(l8,x6e),e(x6e,X1r),e(l8,z1r),e(l8,ZH),e(ZH,Q1r),e(l8,W1r),e(tt,H1r),e(tt,i8),e(i8,$6e),e($6e,U1r),e(i8,J1r),e(i8,eU),e(eU,Y1r),e(i8,K1r),e(tt,Z1r),e(tt,d8),e(d8,k6e),e(k6e,ebr),e(d8,obr),e(d8,oU),e(oU,rbr),e(d8,tbr),e(tt,abr),e(tt,c8),e(c8,S6e),e(S6e,nbr),e(c8,sbr),e(c8,rU),e(rU,lbr),e(c8,ibr),e(tt,dbr),e(tt,f8),e(f8,R6e),e(R6e,cbr),e(f8,fbr),e(f8,tU),e(tU,mbr),e(f8,gbr),e(vo,hbr),e(vo,m8),e(m8,pbr),e(m8,P6e),e(P6e,_br),e(m8,ubr),e(m8,B6e),e(B6e,bbr),e(vo,vbr),M(g8,vo,null),b(f,nze,u),b(f,rc,u),e(rc,h8),e(h8,I6e),M(D9,I6e,null),e(rc,Fbr),e(rc,N6e),e(N6e,Tbr),b(f,sze,u),b(f,Zo,u),M(G9,Zo,null),e(Zo,Mbr),e(Zo,tc),e(tc,Ebr),e(tc,aU),e(aU,Cbr),e(tc,wbr),e(tc,nU),e(nU,Abr),e(tc,Lbr),e(Zo,ybr),e(Zo,O9),e(O9,xbr),e(O9,q6e),e(q6e,$br),e(O9,kbr),e(Zo,Sbr),e(Zo,kt),M(V9,kt,null),e(kt,Rbr),e(kt,j6e),e(j6e,Pbr),e(kt,Bbr),e(kt,ac),e(ac,Ibr),e(ac,D6e),e(D6e,Nbr),e(ac,qbr),e(ac,sU),e(sU,jbr),e(ac,Dbr),e(kt,Gbr),M(p8,kt,null),e(Zo,Obr),e(Zo,Fo),M(X9,Fo,null),e(Fo,Vbr),e(Fo,G6e),e(G6e,Xbr),e(Fo,zbr),e(Fo,nn),e(nn,Qbr),e(nn,O6e),e(O6e,Wbr),e(nn,Hbr),e(nn,V6e),e(V6e,Ubr),e(nn,Jbr),e(nn,X6e),e(X6e,Ybr),e(nn,Kbr),e(Fo,Zbr),e(Fo,z6e),e(z6e,_8),e(_8,Q6e),e(Q6e,evr),e(_8,ovr),e(_8,lU),e(lU,rvr),e(_8,tvr),e(Fo,avr),e(Fo,u8),e(u8,nvr),e(u8,W6e),e(W6e,svr),e(u8,lvr),e(u8,H6e),e(H6e,ivr),e(Fo,dvr),M(b8,Fo,null),b(f,lze,u),b(f,nc,u),e(nc,v8),e(v8,U6e),M(z9,U6e,null),e(nc,cvr),e(nc,J6e),e(J6e,fvr),b(f,ize,u),b(f,er,u),M(Q9,er,null),e(er,mvr),e(er,sc),e(sc,gvr),e(sc,iU),e(iU,hvr),e(sc,pvr),e(sc,dU),e(dU,_vr),e(sc,uvr),e(er,bvr),e(er,W9),e(W9,vvr),e(W9,Y6e),e(Y6e,Fvr),e(W9,Tvr),e(er,Mvr),e(er,St),M(H9,St,null),e(St,Evr),e(St,K6e),e(K6e,Cvr),e(St,wvr),e(St,lc),e(lc,Avr),e(lc,Z6e),e(Z6e,Lvr),e(lc,yvr),e(lc,cU),e(cU,xvr),e(lc,$vr),e(St,kvr),M(F8,St,null),e(er,Svr),e(er,xr),M(U9,xr,null),e(xr,Rvr),e(xr,eTe),e(eTe,Pvr),e(xr,Bvr),e(xr,sn),e(sn,Ivr),e(sn,oTe),e(oTe,Nvr),e(sn,qvr),e(sn,rTe),e(rTe,jvr),e(sn,Dvr),e(sn,tTe),e(tTe,Gvr),e(sn,Ovr),e(xr,Vvr),e(xr,q),e(q,T8),e(T8,aTe),e(aTe,Xvr),e(T8,zvr),e(T8,fU),e(fU,Qvr),e(T8,Wvr),e(q,Hvr),e(q,M8),e(M8,nTe),e(nTe,Uvr),e(M8,Jvr),e(M8,mU),e(mU,Yvr),e(M8,Kvr),e(q,Zvr),e(q,E8),e(E8,sTe),e(sTe,eFr),e(E8,oFr),e(E8,gU),e(gU,rFr),e(E8,tFr),e(q,aFr),e(q,C8),e(C8,lTe),e(lTe,nFr),e(C8,sFr),e(C8,hU),e(hU,lFr),e(C8,iFr),e(q,dFr),e(q,w8),e(w8,iTe),e(iTe,cFr),e(w8,fFr),e(w8,pU),e(pU,mFr),e(w8,gFr),e(q,hFr),e(q,A8),e(A8,dTe),e(dTe,pFr),e(A8,_Fr),e(A8,_U),e(_U,uFr),e(A8,bFr),e(q,vFr),e(q,L8),e(L8,cTe),e(cTe,FFr),e(L8,TFr),e(L8,uU),e(uU,MFr),e(L8,EFr),e(q,CFr),e(q,y8),e(y8,fTe),e(fTe,wFr),e(y8,AFr),e(y8,bU),e(bU,LFr),e(y8,yFr),e(q,xFr),e(q,x8),e(x8,mTe),e(mTe,$Fr),e(x8,kFr),e(x8,vU),e(vU,SFr),e(x8,RFr),e(q,PFr),e(q,$8),e($8,gTe),e(gTe,BFr),e($8,IFr),e($8,FU),e(FU,NFr),e($8,qFr),e(q,jFr),e(q,k8),e(k8,hTe),e(hTe,DFr),e(k8,GFr),e(k8,TU),e(TU,OFr),e(k8,VFr),e(q,XFr),e(q,S8),e(S8,pTe),e(pTe,zFr),e(S8,QFr),e(S8,MU),e(MU,WFr),e(S8,HFr),e(q,UFr),e(q,R8),e(R8,_Te),e(_Te,JFr),e(R8,YFr),e(R8,EU),e(EU,KFr),e(R8,ZFr),e(q,e6r),e(q,P8),e(P8,uTe),e(uTe,o6r),e(P8,r6r),e(P8,CU),e(CU,t6r),e(P8,a6r),e(q,n6r),e(q,B8),e(B8,bTe),e(bTe,s6r),e(B8,l6r),e(B8,wU),e(wU,i6r),e(B8,d6r),e(q,c6r),e(q,I8),e(I8,vTe),e(vTe,f6r),e(I8,m6r),e(I8,AU),e(AU,g6r),e(I8,h6r),e(q,p6r),e(q,N8),e(N8,FTe),e(FTe,_6r),e(N8,u6r),e(N8,LU),e(LU,b6r),e(N8,v6r),e(q,F6r),e(q,Js),e(Js,TTe),e(TTe,T6r),e(Js,M6r),e(Js,yU),e(yU,E6r),e(Js,C6r),e(Js,xU),e(xU,w6r),e(Js,A6r),e(q,L6r),e(q,q8),e(q8,MTe),e(MTe,y6r),e(q8,x6r),e(q8,$U),e($U,$6r),e(q8,k6r),e(q,S6r),e(q,j8),e(j8,ETe),e(ETe,R6r),e(j8,P6r),e(j8,kU),e(kU,B6r),e(j8,I6r),e(q,N6r),e(q,D8),e(D8,CTe),e(CTe,q6r),e(D8,j6r),e(D8,SU),e(SU,D6r),e(D8,G6r),e(q,O6r),e(q,G8),e(G8,wTe),e(wTe,V6r),e(G8,X6r),e(G8,RU),e(RU,z6r),e(G8,Q6r),e(q,W6r),e(q,O8),e(O8,ATe),e(ATe,H6r),e(O8,U6r),e(O8,PU),e(PU,J6r),e(O8,Y6r),e(q,K6r),e(q,V8),e(V8,LTe),e(LTe,Z6r),e(V8,eTr),e(V8,BU),e(BU,oTr),e(V8,rTr),e(q,tTr),e(q,X8),e(X8,yTe),e(yTe,aTr),e(X8,nTr),e(X8,IU),e(IU,sTr),e(X8,lTr),e(q,iTr),e(q,z8),e(z8,xTe),e(xTe,dTr),e(z8,cTr),e(z8,NU),e(NU,fTr),e(z8,mTr),e(q,gTr),e(q,Q8),e(Q8,$Te),e($Te,hTr),e(Q8,pTr),e(Q8,qU),e(qU,_Tr),e(Q8,uTr),e(q,bTr),e(q,W8),e(W8,kTe),e(kTe,vTr),e(W8,FTr),e(W8,jU),e(jU,TTr),e(W8,MTr),e(q,ETr),e(q,H8),e(H8,STe),e(STe,CTr),e(H8,wTr),e(H8,DU),e(DU,ATr),e(H8,LTr),e(q,yTr),e(q,U8),e(U8,RTe),e(RTe,xTr),e(U8,$Tr),e(U8,GU),e(GU,kTr),e(U8,STr),e(q,RTr),e(q,J8),e(J8,PTe),e(PTe,PTr),e(J8,BTr),e(J8,OU),e(OU,ITr),e(J8,NTr),e(q,qTr),e(q,Y8),e(Y8,BTe),e(BTe,jTr),e(Y8,DTr),e(Y8,VU),e(VU,GTr),e(Y8,OTr),e(q,VTr),e(q,K8),e(K8,ITe),e(ITe,XTr),e(K8,zTr),e(K8,XU),e(XU,QTr),e(K8,WTr),e(q,HTr),e(q,Z8),e(Z8,NTe),e(NTe,UTr),e(Z8,JTr),e(Z8,zU),e(zU,YTr),e(Z8,KTr),e(q,ZTr),e(q,eM),e(eM,qTe),e(qTe,e7r),e(eM,o7r),e(eM,QU),e(QU,r7r),e(eM,t7r),e(q,a7r),e(q,oM),e(oM,jTe),e(jTe,n7r),e(oM,s7r),e(oM,WU),e(WU,l7r),e(oM,i7r),e(q,d7r),e(q,rM),e(rM,DTe),e(DTe,c7r),e(rM,f7r),e(rM,HU),e(HU,m7r),e(rM,g7r),e(q,h7r),e(q,tM),e(tM,GTe),e(GTe,p7r),e(tM,_7r),e(tM,UU),e(UU,u7r),e(tM,b7r),e(q,v7r),e(q,aM),e(aM,OTe),e(OTe,F7r),e(aM,T7r),e(aM,JU),e(JU,M7r),e(aM,E7r),e(q,C7r),e(q,nM),e(nM,VTe),e(VTe,w7r),e(nM,A7r),e(nM,YU),e(YU,L7r),e(nM,y7r),e(q,x7r),e(q,sM),e(sM,XTe),e(XTe,$7r),e(sM,k7r),e(sM,KU),e(KU,S7r),e(sM,R7r),e(q,P7r),e(q,lM),e(lM,zTe),e(zTe,B7r),e(lM,I7r),e(lM,ZU),e(ZU,N7r),e(lM,q7r),e(q,j7r),e(q,iM),e(iM,QTe),e(QTe,D7r),e(iM,G7r),e(iM,eJ),e(eJ,O7r),e(iM,V7r),e(q,X7r),e(q,dM),e(dM,WTe),e(WTe,z7r),e(dM,Q7r),e(dM,oJ),e(oJ,W7r),e(dM,H7r),e(q,U7r),e(q,cM),e(cM,HTe),e(HTe,J7r),e(cM,Y7r),e(cM,rJ),e(rJ,K7r),e(cM,Z7r),e(q,e8r),e(q,fM),e(fM,UTe),e(UTe,o8r),e(fM,r8r),e(fM,tJ),e(tJ,t8r),e(fM,a8r),e(q,n8r),e(q,mM),e(mM,JTe),e(JTe,s8r),e(mM,l8r),e(mM,aJ),e(aJ,i8r),e(mM,d8r),e(q,c8r),e(q,gM),e(gM,YTe),e(YTe,f8r),e(gM,m8r),e(gM,nJ),e(nJ,g8r),e(gM,h8r),e(q,p8r),e(q,hM),e(hM,KTe),e(KTe,_8r),e(hM,u8r),e(hM,sJ),e(sJ,b8r),e(hM,v8r),e(xr,F8r),M(pM,xr,null),b(f,dze,u),b(f,ic,u),e(ic,_M),e(_M,ZTe),M(J9,ZTe,null),e(ic,T8r),e(ic,e7e),e(e7e,M8r),b(f,cze,u),b(f,or,u),M(Y9,or,null),e(or,E8r),e(or,dc),e(dc,C8r),e(dc,lJ),e(lJ,w8r),e(dc,A8r),e(dc,iJ),e(iJ,L8r),e(dc,y8r),e(or,x8r),e(or,K9),e(K9,$8r),e(K9,o7e),e(o7e,k8r),e(K9,S8r),e(or,R8r),e(or,Rt),M(Z9,Rt,null),e(Rt,P8r),e(Rt,r7e),e(r7e,B8r),e(Rt,I8r),e(Rt,cc),e(cc,N8r),e(cc,t7e),e(t7e,q8r),e(cc,j8r),e(cc,dJ),e(dJ,D8r),e(cc,G8r),e(Rt,O8r),M(uM,Rt,null),e(or,V8r),e(or,$r),M(ex,$r,null),e($r,X8r),e($r,a7e),e(a7e,z8r),e($r,Q8r),e($r,ln),e(ln,W8r),e(ln,n7e),e(n7e,H8r),e(ln,U8r),e(ln,s7e),e(s7e,J8r),e(ln,Y8r),e(ln,l7e),e(l7e,K8r),e(ln,Z8r),e($r,eMr),e($r,se),e(se,bM),e(bM,i7e),e(i7e,oMr),e(bM,rMr),e(bM,cJ),e(cJ,tMr),e(bM,aMr),e(se,nMr),e(se,vM),e(vM,d7e),e(d7e,sMr),e(vM,lMr),e(vM,fJ),e(fJ,iMr),e(vM,dMr),e(se,cMr),e(se,FM),e(FM,c7e),e(c7e,fMr),e(FM,mMr),e(FM,mJ),e(mJ,gMr),e(FM,hMr),e(se,pMr),e(se,TM),e(TM,f7e),e(f7e,_Mr),e(TM,uMr),e(TM,gJ),e(gJ,bMr),e(TM,vMr),e(se,FMr),e(se,MM),e(MM,m7e),e(m7e,TMr),e(MM,MMr),e(MM,hJ),e(hJ,EMr),e(MM,CMr),e(se,wMr),e(se,EM),e(EM,g7e),e(g7e,AMr),e(EM,LMr),e(EM,pJ),e(pJ,yMr),e(EM,xMr),e(se,$Mr),e(se,CM),e(CM,h7e),e(h7e,kMr),e(CM,SMr),e(CM,_J),e(_J,RMr),e(CM,PMr),e(se,BMr),e(se,wM),e(wM,p7e),e(p7e,IMr),e(wM,NMr),e(wM,uJ),e(uJ,qMr),e(wM,jMr),e(se,DMr),e(se,AM),e(AM,_7e),e(_7e,GMr),e(AM,OMr),e(AM,bJ),e(bJ,VMr),e(AM,XMr),e(se,zMr),e(se,LM),e(LM,u7e),e(u7e,QMr),e(LM,WMr),e(LM,vJ),e(vJ,HMr),e(LM,UMr),e(se,JMr),e(se,yM),e(yM,b7e),e(b7e,YMr),e(yM,KMr),e(yM,FJ),e(FJ,ZMr),e(yM,e4r),e(se,o4r),e(se,xM),e(xM,v7e),e(v7e,r4r),e(xM,t4r),e(xM,TJ),e(TJ,a4r),e(xM,n4r),e(se,s4r),e(se,$M),e($M,F7e),e(F7e,l4r),e($M,i4r),e($M,MJ),e(MJ,d4r),e($M,c4r),e(se,f4r),e(se,kM),e(kM,T7e),e(T7e,m4r),e(kM,g4r),e(kM,EJ),e(EJ,h4r),e(kM,p4r),e(se,_4r),e(se,SM),e(SM,M7e),e(M7e,u4r),e(SM,b4r),e(SM,CJ),e(CJ,v4r),e(SM,F4r),e(se,T4r),e(se,RM),e(RM,E7e),e(E7e,M4r),e(RM,E4r),e(RM,wJ),e(wJ,C4r),e(RM,w4r),e(se,A4r),e(se,PM),e(PM,C7e),e(C7e,L4r),e(PM,y4r),e(PM,AJ),e(AJ,x4r),e(PM,$4r),e(se,k4r),e(se,BM),e(BM,w7e),e(w7e,S4r),e(BM,R4r),e(BM,LJ),e(LJ,P4r),e(BM,B4r),e(se,I4r),e(se,IM),e(IM,A7e),e(A7e,N4r),e(IM,q4r),e(IM,yJ),e(yJ,j4r),e(IM,D4r),e(se,G4r),e(se,NM),e(NM,L7e),e(L7e,O4r),e(NM,V4r),e(NM,xJ),e(xJ,X4r),e(NM,z4r),e(se,Q4r),e(se,qM),e(qM,y7e),e(y7e,W4r),e(qM,H4r),e(qM,$J),e($J,U4r),e(qM,J4r),e(se,Y4r),e(se,jM),e(jM,x7e),e(x7e,K4r),e(jM,Z4r),e(jM,kJ),e(kJ,eEr),e(jM,oEr),e(se,rEr),e(se,DM),e(DM,$7e),e($7e,tEr),e(DM,aEr),e(DM,SJ),e(SJ,nEr),e(DM,sEr),e($r,lEr),M(GM,$r,null),b(f,fze,u),b(f,fc,u),e(fc,OM),e(OM,k7e),M(ox,k7e,null),e(fc,iEr),e(fc,S7e),e(S7e,dEr),b(f,mze,u),b(f,rr,u),M(rx,rr,null),e(rr,cEr),e(rr,mc),e(mc,fEr),e(mc,RJ),e(RJ,mEr),e(mc,gEr),e(mc,PJ),e(PJ,hEr),e(mc,pEr),e(rr,_Er),e(rr,tx),e(tx,uEr),e(tx,R7e),e(R7e,bEr),e(tx,vEr),e(rr,FEr),e(rr,Pt),M(ax,Pt,null),e(Pt,TEr),e(Pt,P7e),e(P7e,MEr),e(Pt,EEr),e(Pt,gc),e(gc,CEr),e(gc,B7e),e(B7e,wEr),e(gc,AEr),e(gc,BJ),e(BJ,LEr),e(gc,yEr),e(Pt,xEr),M(VM,Pt,null),e(rr,$Er),e(rr,kr),M(nx,kr,null),e(kr,kEr),e(kr,I7e),e(I7e,SEr),e(kr,REr),e(kr,dn),e(dn,PEr),e(dn,N7e),e(N7e,BEr),e(dn,IEr),e(dn,q7e),e(q7e,NEr),e(dn,qEr),e(dn,j7e),e(j7e,jEr),e(dn,DEr),e(kr,GEr),e(kr,Me),e(Me,XM),e(XM,D7e),e(D7e,OEr),e(XM,VEr),e(XM,IJ),e(IJ,XEr),e(XM,zEr),e(Me,QEr),e(Me,zM),e(zM,G7e),e(G7e,WEr),e(zM,HEr),e(zM,NJ),e(NJ,UEr),e(zM,JEr),e(Me,YEr),e(Me,QM),e(QM,O7e),e(O7e,KEr),e(QM,ZEr),e(QM,qJ),e(qJ,eCr),e(QM,oCr),e(Me,rCr),e(Me,WM),e(WM,V7e),e(V7e,tCr),e(WM,aCr),e(WM,jJ),e(jJ,nCr),e(WM,sCr),e(Me,lCr),e(Me,HM),e(HM,X7e),e(X7e,iCr),e(HM,dCr),e(HM,DJ),e(DJ,cCr),e(HM,fCr),e(Me,mCr),e(Me,UM),e(UM,z7e),e(z7e,gCr),e(UM,hCr),e(UM,GJ),e(GJ,pCr),e(UM,_Cr),e(Me,uCr),e(Me,JM),e(JM,Q7e),e(Q7e,bCr),e(JM,vCr),e(JM,OJ),e(OJ,FCr),e(JM,TCr),e(Me,MCr),e(Me,YM),e(YM,W7e),e(W7e,ECr),e(YM,CCr),e(YM,VJ),e(VJ,wCr),e(YM,ACr),e(Me,LCr),e(Me,KM),e(KM,H7e),e(H7e,yCr),e(KM,xCr),e(KM,XJ),e(XJ,$Cr),e(KM,kCr),e(Me,SCr),e(Me,ZM),e(ZM,U7e),e(U7e,RCr),e(ZM,PCr),e(ZM,zJ),e(zJ,BCr),e(ZM,ICr),e(Me,NCr),e(Me,e4),e(e4,J7e),e(J7e,qCr),e(e4,jCr),e(e4,QJ),e(QJ,DCr),e(e4,GCr),e(Me,OCr),e(Me,o4),e(o4,Y7e),e(Y7e,VCr),e(o4,XCr),e(o4,WJ),e(WJ,zCr),e(o4,QCr),e(Me,WCr),e(Me,r4),e(r4,K7e),e(K7e,HCr),e(r4,UCr),e(r4,HJ),e(HJ,JCr),e(r4,YCr),e(kr,KCr),M(t4,kr,null),b(f,gze,u),b(f,hc,u),e(hc,a4),e(a4,Z7e),M(sx,Z7e,null),e(hc,ZCr),e(hc,e8e),e(e8e,e3r),b(f,hze,u),b(f,tr,u),M(lx,tr,null),e(tr,o3r),e(tr,pc),e(pc,r3r),e(pc,UJ),e(UJ,t3r),e(pc,a3r),e(pc,JJ),e(JJ,n3r),e(pc,s3r),e(tr,l3r),e(tr,ix),e(ix,i3r),e(ix,o8e),e(o8e,d3r),e(ix,c3r),e(tr,f3r),e(tr,Bt),M(dx,Bt,null),e(Bt,m3r),e(Bt,r8e),e(r8e,g3r),e(Bt,h3r),e(Bt,_c),e(_c,p3r),e(_c,t8e),e(t8e,_3r),e(_c,u3r),e(_c,YJ),e(YJ,b3r),e(_c,v3r),e(Bt,F3r),M(n4,Bt,null),e(tr,T3r),e(tr,Sr),M(cx,Sr,null),e(Sr,M3r),e(Sr,a8e),e(a8e,E3r),e(Sr,C3r),e(Sr,cn),e(cn,w3r),e(cn,n8e),e(n8e,A3r),e(cn,L3r),e(cn,s8e),e(s8e,y3r),e(cn,x3r),e(cn,l8e),e(l8e,$3r),e(cn,k3r),e(Sr,S3r),e(Sr,ar),e(ar,s4),e(s4,i8e),e(i8e,R3r),e(s4,P3r),e(s4,KJ),e(KJ,B3r),e(s4,I3r),e(ar,N3r),e(ar,l4),e(l4,d8e),e(d8e,q3r),e(l4,j3r),e(l4,ZJ),e(ZJ,D3r),e(l4,G3r),e(ar,O3r),e(ar,i4),e(i4,c8e),e(c8e,V3r),e(i4,X3r),e(i4,eY),e(eY,z3r),e(i4,Q3r),e(ar,W3r),e(ar,d4),e(d4,f8e),e(f8e,H3r),e(d4,U3r),e(d4,oY),e(oY,J3r),e(d4,Y3r),e(ar,K3r),e(ar,c4),e(c4,m8e),e(m8e,Z3r),e(c4,e5r),e(c4,rY),e(rY,o5r),e(c4,r5r),e(ar,t5r),e(ar,f4),e(f4,g8e),e(g8e,a5r),e(f4,n5r),e(f4,tY),e(tY,s5r),e(f4,l5r),e(Sr,i5r),M(m4,Sr,null),b(f,pze,u),b(f,uc,u),e(uc,g4),e(g4,h8e),M(fx,h8e,null),e(uc,d5r),e(uc,p8e),e(p8e,c5r),b(f,_ze,u),b(f,nr,u),M(mx,nr,null),e(nr,f5r),e(nr,bc),e(bc,m5r),e(bc,aY),e(aY,g5r),e(bc,h5r),e(bc,nY),e(nY,p5r),e(bc,_5r),e(nr,u5r),e(nr,gx),e(gx,b5r),e(gx,_8e),e(_8e,v5r),e(gx,F5r),e(nr,T5r),e(nr,It),M(hx,It,null),e(It,M5r),e(It,u8e),e(u8e,E5r),e(It,C5r),e(It,vc),e(vc,w5r),e(vc,b8e),e(b8e,A5r),e(vc,L5r),e(vc,sY),e(sY,y5r),e(vc,x5r),e(It,$5r),M(h4,It,null),e(nr,k5r),e(nr,Rr),M(px,Rr,null),e(Rr,S5r),e(Rr,v8e),e(v8e,R5r),e(Rr,P5r),e(Rr,fn),e(fn,B5r),e(fn,F8e),e(F8e,I5r),e(fn,N5r),e(fn,T8e),e(T8e,q5r),e(fn,j5r),e(fn,M8e),e(M8e,D5r),e(fn,G5r),e(Rr,O5r),e(Rr,ie),e(ie,p4),e(p4,E8e),e(E8e,V5r),e(p4,X5r),e(p4,lY),e(lY,z5r),e(p4,Q5r),e(ie,W5r),e(ie,_4),e(_4,C8e),e(C8e,H5r),e(_4,U5r),e(_4,iY),e(iY,J5r),e(_4,Y5r),e(ie,K5r),e(ie,u4),e(u4,w8e),e(w8e,Z5r),e(u4,e0r),e(u4,dY),e(dY,o0r),e(u4,r0r),e(ie,t0r),e(ie,b4),e(b4,A8e),e(A8e,a0r),e(b4,n0r),e(b4,cY),e(cY,s0r),e(b4,l0r),e(ie,i0r),e(ie,v4),e(v4,L8e),e(L8e,d0r),e(v4,c0r),e(v4,fY),e(fY,f0r),e(v4,m0r),e(ie,g0r),e(ie,F4),e(F4,y8e),e(y8e,h0r),e(F4,p0r),e(F4,mY),e(mY,_0r),e(F4,u0r),e(ie,b0r),e(ie,T4),e(T4,x8e),e(x8e,v0r),e(T4,F0r),e(T4,gY),e(gY,T0r),e(T4,M0r),e(ie,E0r),e(ie,M4),e(M4,$8e),e($8e,C0r),e(M4,w0r),e(M4,hY),e(hY,A0r),e(M4,L0r),e(ie,y0r),e(ie,E4),e(E4,k8e),e(k8e,x0r),e(E4,$0r),e(E4,pY),e(pY,k0r),e(E4,S0r),e(ie,R0r),e(ie,C4),e(C4,S8e),e(S8e,P0r),e(C4,B0r),e(C4,_Y),e(_Y,I0r),e(C4,N0r),e(ie,q0r),e(ie,w4),e(w4,R8e),e(R8e,j0r),e(w4,D0r),e(w4,uY),e(uY,G0r),e(w4,O0r),e(ie,V0r),e(ie,A4),e(A4,P8e),e(P8e,X0r),e(A4,z0r),e(A4,bY),e(bY,Q0r),e(A4,W0r),e(ie,H0r),e(ie,L4),e(L4,B8e),e(B8e,U0r),e(L4,J0r),e(L4,vY),e(vY,Y0r),e(L4,K0r),e(ie,Z0r),e(ie,y4),e(y4,I8e),e(I8e,ewr),e(y4,owr),e(y4,FY),e(FY,rwr),e(y4,twr),e(ie,awr),e(ie,x4),e(x4,N8e),e(N8e,nwr),e(x4,swr),e(x4,TY),e(TY,lwr),e(x4,iwr),e(ie,dwr),e(ie,$4),e($4,q8e),e(q8e,cwr),e($4,fwr),e($4,MY),e(MY,mwr),e($4,gwr),e(ie,hwr),e(ie,k4),e(k4,j8e),e(j8e,pwr),e(k4,_wr),e(k4,EY),e(EY,uwr),e(k4,bwr),e(ie,vwr),e(ie,S4),e(S4,D8e),e(D8e,Fwr),e(S4,Twr),e(S4,CY),e(CY,Mwr),e(S4,Ewr),e(ie,Cwr),e(ie,R4),e(R4,G8e),e(G8e,wwr),e(R4,Awr),e(R4,wY),e(wY,Lwr),e(R4,ywr),e(ie,xwr),e(ie,P4),e(P4,O8e),e(O8e,$wr),e(P4,kwr),e(P4,AY),e(AY,Swr),e(P4,Rwr),e(Rr,Pwr),M(B4,Rr,null),b(f,uze,u),b(f,Fc,u),e(Fc,I4),e(I4,V8e),M(_x,V8e,null),e(Fc,Bwr),e(Fc,X8e),e(X8e,Iwr),b(f,bze,u),b(f,sr,u),M(ux,sr,null),e(sr,Nwr),e(sr,Tc),e(Tc,qwr),e(Tc,LY),e(LY,jwr),e(Tc,Dwr),e(Tc,yY),e(yY,Gwr),e(Tc,Owr),e(sr,Vwr),e(sr,bx),e(bx,Xwr),e(bx,z8e),e(z8e,zwr),e(bx,Qwr),e(sr,Wwr),e(sr,Nt),M(vx,Nt,null),e(Nt,Hwr),e(Nt,Q8e),e(Q8e,Uwr),e(Nt,Jwr),e(Nt,Mc),e(Mc,Ywr),e(Mc,W8e),e(W8e,Kwr),e(Mc,Zwr),e(Mc,xY),e(xY,eAr),e(Mc,oAr),e(Nt,rAr),M(N4,Nt,null),e(sr,tAr),e(sr,Pr),M(Fx,Pr,null),e(Pr,aAr),e(Pr,H8e),e(H8e,nAr),e(Pr,sAr),e(Pr,mn),e(mn,lAr),e(mn,U8e),e(U8e,iAr),e(mn,dAr),e(mn,J8e),e(J8e,cAr),e(mn,fAr),e(mn,Y8e),e(Y8e,mAr),e(mn,gAr),e(Pr,hAr),e(Pr,ye),e(ye,q4),e(q4,K8e),e(K8e,pAr),e(q4,_Ar),e(q4,$Y),e($Y,uAr),e(q4,bAr),e(ye,vAr),e(ye,j4),e(j4,Z8e),e(Z8e,FAr),e(j4,TAr),e(j4,kY),e(kY,MAr),e(j4,EAr),e(ye,CAr),e(ye,D4),e(D4,eMe),e(eMe,wAr),e(D4,AAr),e(D4,SY),e(SY,LAr),e(D4,yAr),e(ye,xAr),e(ye,G4),e(G4,oMe),e(oMe,$Ar),e(G4,kAr),e(G4,RY),e(RY,SAr),e(G4,RAr),e(ye,PAr),e(ye,O4),e(O4,rMe),e(rMe,BAr),e(O4,IAr),e(O4,PY),e(PY,NAr),e(O4,qAr),e(ye,jAr),e(ye,V4),e(V4,tMe),e(tMe,DAr),e(V4,GAr),e(V4,BY),e(BY,OAr),e(V4,VAr),e(ye,XAr),e(ye,X4),e(X4,aMe),e(aMe,zAr),e(X4,QAr),e(X4,IY),e(IY,WAr),e(X4,HAr),e(ye,UAr),e(ye,z4),e(z4,nMe),e(nMe,JAr),e(z4,YAr),e(z4,NY),e(NY,KAr),e(z4,ZAr),e(ye,eLr),e(ye,Q4),e(Q4,sMe),e(sMe,oLr),e(Q4,rLr),e(Q4,qY),e(qY,tLr),e(Q4,aLr),e(ye,nLr),e(ye,W4),e(W4,lMe),e(lMe,sLr),e(W4,lLr),e(W4,jY),e(jY,iLr),e(W4,dLr),e(Pr,cLr),M(H4,Pr,null),b(f,vze,u),b(f,Ec,u),e(Ec,U4),e(U4,iMe),M(Tx,iMe,null),e(Ec,fLr),e(Ec,dMe),e(dMe,mLr),b(f,Fze,u),b(f,lr,u),M(Mx,lr,null),e(lr,gLr),e(lr,Cc),e(Cc,hLr),e(Cc,DY),e(DY,pLr),e(Cc,_Lr),e(Cc,GY),e(GY,uLr),e(Cc,bLr),e(lr,vLr),e(lr,Ex),e(Ex,FLr),e(Ex,cMe),e(cMe,TLr),e(Ex,MLr),e(lr,ELr),e(lr,qt),M(Cx,qt,null),e(qt,CLr),e(qt,fMe),e(fMe,wLr),e(qt,ALr),e(qt,wc),e(wc,LLr),e(wc,mMe),e(mMe,yLr),e(wc,xLr),e(wc,OY),e(OY,$Lr),e(wc,kLr),e(qt,SLr),M(J4,qt,null),e(lr,RLr),e(lr,Br),M(wx,Br,null),e(Br,PLr),e(Br,gMe),e(gMe,BLr),e(Br,ILr),e(Br,gn),e(gn,NLr),e(gn,hMe),e(hMe,qLr),e(gn,jLr),e(gn,pMe),e(pMe,DLr),e(gn,GLr),e(gn,_Me),e(_Me,OLr),e(gn,VLr),e(Br,XLr),e(Br,te),e(te,Y4),e(Y4,uMe),e(uMe,zLr),e(Y4,QLr),e(Y4,VY),e(VY,WLr),e(Y4,HLr),e(te,ULr),e(te,K4),e(K4,bMe),e(bMe,JLr),e(K4,YLr),e(K4,XY),e(XY,KLr),e(K4,ZLr),e(te,eyr),e(te,Z4),e(Z4,vMe),e(vMe,oyr),e(Z4,ryr),e(Z4,zY),e(zY,tyr),e(Z4,ayr),e(te,nyr),e(te,eE),e(eE,FMe),e(FMe,syr),e(eE,lyr),e(eE,QY),e(QY,iyr),e(eE,dyr),e(te,cyr),e(te,oE),e(oE,TMe),e(TMe,fyr),e(oE,myr),e(oE,WY),e(WY,gyr),e(oE,hyr),e(te,pyr),e(te,rE),e(rE,MMe),e(MMe,_yr),e(rE,uyr),e(rE,HY),e(HY,byr),e(rE,vyr),e(te,Fyr),e(te,tE),e(tE,EMe),e(EMe,Tyr),e(tE,Myr),e(tE,UY),e(UY,Eyr),e(tE,Cyr),e(te,wyr),e(te,aE),e(aE,CMe),e(CMe,Ayr),e(aE,Lyr),e(aE,JY),e(JY,yyr),e(aE,xyr),e(te,$yr),e(te,nE),e(nE,wMe),e(wMe,kyr),e(nE,Syr),e(nE,YY),e(YY,Ryr),e(nE,Pyr),e(te,Byr),e(te,sE),e(sE,AMe),e(AMe,Iyr),e(sE,Nyr),e(sE,KY),e(KY,qyr),e(sE,jyr),e(te,Dyr),e(te,lE),e(lE,LMe),e(LMe,Gyr),e(lE,Oyr),e(lE,ZY),e(ZY,Vyr),e(lE,Xyr),e(te,zyr),e(te,iE),e(iE,yMe),e(yMe,Qyr),e(iE,Wyr),e(iE,eK),e(eK,Hyr),e(iE,Uyr),e(te,Jyr),e(te,dE),e(dE,xMe),e(xMe,Yyr),e(dE,Kyr),e(dE,oK),e(oK,Zyr),e(dE,e9r),e(te,o9r),e(te,cE),e(cE,$Me),e($Me,r9r),e(cE,t9r),e(cE,rK),e(rK,a9r),e(cE,n9r),e(te,s9r),e(te,fE),e(fE,kMe),e(kMe,l9r),e(fE,i9r),e(fE,tK),e(tK,d9r),e(fE,c9r),e(te,f9r),e(te,mE),e(mE,SMe),e(SMe,m9r),e(mE,g9r),e(mE,aK),e(aK,h9r),e(mE,p9r),e(te,_9r),e(te,gE),e(gE,RMe),e(RMe,u9r),e(gE,b9r),e(gE,nK),e(nK,v9r),e(gE,F9r),e(te,T9r),e(te,hE),e(hE,PMe),e(PMe,M9r),e(hE,E9r),e(hE,sK),e(sK,C9r),e(hE,w9r),e(te,A9r),e(te,pE),e(pE,BMe),e(BMe,L9r),e(pE,y9r),e(pE,lK),e(lK,x9r),e(pE,$9r),e(te,k9r),e(te,_E),e(_E,IMe),e(IMe,S9r),e(_E,R9r),e(_E,iK),e(iK,P9r),e(_E,B9r),e(te,I9r),e(te,uE),e(uE,NMe),e(NMe,N9r),e(uE,q9r),e(uE,dK),e(dK,j9r),e(uE,D9r),e(te,G9r),e(te,bE),e(bE,qMe),e(qMe,O9r),e(bE,V9r),e(bE,cK),e(cK,X9r),e(bE,z9r),e(te,Q9r),e(te,vE),e(vE,jMe),e(jMe,W9r),e(vE,H9r),e(vE,fK),e(fK,U9r),e(vE,J9r),e(te,Y9r),e(te,FE),e(FE,DMe),e(DMe,K9r),e(FE,Z9r),e(FE,mK),e(mK,exr),e(FE,oxr),e(te,rxr),e(te,TE),e(TE,GMe),e(GMe,txr),e(TE,axr),e(TE,gK),e(gK,nxr),e(TE,sxr),e(te,lxr),e(te,ME),e(ME,OMe),e(OMe,ixr),e(ME,dxr),e(ME,hK),e(hK,cxr),e(ME,fxr),e(Br,mxr),M(EE,Br,null),b(f,Tze,u),b(f,Ac,u),e(Ac,CE),e(CE,VMe),M(Ax,VMe,null),e(Ac,gxr),e(Ac,XMe),e(XMe,hxr),b(f,Mze,u),b(f,ir,u),M(Lx,ir,null),e(ir,pxr),e(ir,Lc),e(Lc,_xr),e(Lc,pK),e(pK,uxr),e(Lc,bxr),e(Lc,_K),e(_K,vxr),e(Lc,Fxr),e(ir,Txr),e(ir,yx),e(yx,Mxr),e(yx,zMe),e(zMe,Exr),e(yx,Cxr),e(ir,wxr),e(ir,jt),M(xx,jt,null),e(jt,Axr),e(jt,QMe),e(QMe,Lxr),e(jt,yxr),e(jt,yc),e(yc,xxr),e(yc,WMe),e(WMe,$xr),e(yc,kxr),e(yc,uK),e(uK,Sxr),e(yc,Rxr),e(jt,Pxr),M(wE,jt,null),e(ir,Bxr),e(ir,Ir),M($x,Ir,null),e(Ir,Ixr),e(Ir,HMe),e(HMe,Nxr),e(Ir,qxr),e(Ir,hn),e(hn,jxr),e(hn,UMe),e(UMe,Dxr),e(hn,Gxr),e(hn,JMe),e(JMe,Oxr),e(hn,Vxr),e(hn,YMe),e(YMe,Xxr),e(hn,zxr),e(Ir,Qxr),e(Ir,_e),e(_e,AE),e(AE,KMe),e(KMe,Wxr),e(AE,Hxr),e(AE,bK),e(bK,Uxr),e(AE,Jxr),e(_e,Yxr),e(_e,LE),e(LE,ZMe),e(ZMe,Kxr),e(LE,Zxr),e(LE,vK),e(vK,e$r),e(LE,o$r),e(_e,r$r),e(_e,yE),e(yE,e4e),e(e4e,t$r),e(yE,a$r),e(yE,FK),e(FK,n$r),e(yE,s$r),e(_e,l$r),e(_e,xE),e(xE,o4e),e(o4e,i$r),e(xE,d$r),e(xE,TK),e(TK,c$r),e(xE,f$r),e(_e,m$r),e(_e,$E),e($E,r4e),e(r4e,g$r),e($E,h$r),e($E,MK),e(MK,p$r),e($E,_$r),e(_e,u$r),e(_e,kE),e(kE,t4e),e(t4e,b$r),e(kE,v$r),e(kE,EK),e(EK,F$r),e(kE,T$r),e(_e,M$r),e(_e,SE),e(SE,a4e),e(a4e,E$r),e(SE,C$r),e(SE,CK),e(CK,w$r),e(SE,A$r),e(_e,L$r),e(_e,RE),e(RE,n4e),e(n4e,y$r),e(RE,x$r),e(RE,wK),e(wK,$$r),e(RE,k$r),e(_e,S$r),e(_e,PE),e(PE,s4e),e(s4e,R$r),e(PE,P$r),e(PE,AK),e(AK,B$r),e(PE,I$r),e(_e,N$r),e(_e,BE),e(BE,l4e),e(l4e,q$r),e(BE,j$r),e(BE,LK),e(LK,D$r),e(BE,G$r),e(_e,O$r),e(_e,IE),e(IE,i4e),e(i4e,V$r),e(IE,X$r),e(IE,yK),e(yK,z$r),e(IE,Q$r),e(_e,W$r),e(_e,NE),e(NE,d4e),e(d4e,H$r),e(NE,U$r),e(NE,xK),e(xK,J$r),e(NE,Y$r),e(_e,K$r),e(_e,qE),e(qE,c4e),e(c4e,Z$r),e(qE,ekr),e(qE,$K),e($K,okr),e(qE,rkr),e(_e,tkr),e(_e,jE),e(jE,f4e),e(f4e,akr),e(jE,nkr),e(jE,kK),e(kK,skr),e(jE,lkr),e(_e,ikr),e(_e,DE),e(DE,m4e),e(m4e,dkr),e(DE,ckr),e(DE,SK),e(SK,fkr),e(DE,mkr),e(_e,gkr),e(_e,GE),e(GE,g4e),e(g4e,hkr),e(GE,pkr),e(GE,RK),e(RK,_kr),e(GE,ukr),e(_e,bkr),e(_e,OE),e(OE,h4e),e(h4e,vkr),e(OE,Fkr),e(OE,PK),e(PK,Tkr),e(OE,Mkr),e(Ir,Ekr),M(VE,Ir,null),b(f,Eze,u),b(f,xc,u),e(xc,XE),e(XE,p4e),M(kx,p4e,null),e(xc,Ckr),e(xc,_4e),e(_4e,wkr),b(f,Cze,u),b(f,dr,u),M(Sx,dr,null),e(dr,Akr),e(dr,$c),e($c,Lkr),e($c,BK),e(BK,ykr),e($c,xkr),e($c,IK),e(IK,$kr),e($c,kkr),e(dr,Skr),e(dr,Rx),e(Rx,Rkr),e(Rx,u4e),e(u4e,Pkr),e(Rx,Bkr),e(dr,Ikr),e(dr,Dt),M(Px,Dt,null),e(Dt,Nkr),e(Dt,b4e),e(b4e,qkr),e(Dt,jkr),e(Dt,kc),e(kc,Dkr),e(kc,v4e),e(v4e,Gkr),e(kc,Okr),e(kc,NK),e(NK,Vkr),e(kc,Xkr),e(Dt,zkr),M(zE,Dt,null),e(dr,Qkr),e(dr,Nr),M(Bx,Nr,null),e(Nr,Wkr),e(Nr,F4e),e(F4e,Hkr),e(Nr,Ukr),e(Nr,pn),e(pn,Jkr),e(pn,T4e),e(T4e,Ykr),e(pn,Kkr),e(pn,M4e),e(M4e,Zkr),e(pn,eSr),e(pn,E4e),e(E4e,oSr),e(pn,rSr),e(Nr,tSr),e(Nr,Ix),e(Ix,QE),e(QE,C4e),e(C4e,aSr),e(QE,nSr),e(QE,qK),e(qK,sSr),e(QE,lSr),e(Ix,iSr),e(Ix,WE),e(WE,w4e),e(w4e,dSr),e(WE,cSr),e(WE,jK),e(jK,fSr),e(WE,mSr),e(Nr,gSr),M(HE,Nr,null),b(f,wze,u),b(f,Sc,u),e(Sc,UE),e(UE,A4e),M(Nx,A4e,null),e(Sc,hSr),e(Sc,L4e),e(L4e,pSr),b(f,Aze,u),b(f,cr,u),M(qx,cr,null),e(cr,_Sr),e(cr,Rc),e(Rc,uSr),e(Rc,DK),e(DK,bSr),e(Rc,vSr),e(Rc,GK),e(GK,FSr),e(Rc,TSr),e(cr,MSr),e(cr,jx),e(jx,ESr),e(jx,y4e),e(y4e,CSr),e(jx,wSr),e(cr,ASr),e(cr,Gt),M(Dx,Gt,null),e(Gt,LSr),e(Gt,x4e),e(x4e,ySr),e(Gt,xSr),e(Gt,Pc),e(Pc,$Sr),e(Pc,$4e),e($4e,kSr),e(Pc,SSr),e(Pc,OK),e(OK,RSr),e(Pc,PSr),e(Gt,BSr),M(JE,Gt,null),e(cr,ISr),e(cr,qr),M(Gx,qr,null),e(qr,NSr),e(qr,k4e),e(k4e,qSr),e(qr,jSr),e(qr,_n),e(_n,DSr),e(_n,S4e),e(S4e,GSr),e(_n,OSr),e(_n,R4e),e(R4e,VSr),e(_n,XSr),e(_n,P4e),e(P4e,zSr),e(_n,QSr),e(qr,WSr),e(qr,B4e),e(B4e,YE),e(YE,I4e),e(I4e,HSr),e(YE,USr),e(YE,VK),e(VK,JSr),e(YE,YSr),e(qr,KSr),M(KE,qr,null),b(f,Lze,u),b(f,Bc,u),e(Bc,ZE),e(ZE,N4e),M(Ox,N4e,null),e(Bc,ZSr),e(Bc,q4e),e(q4e,eRr),b(f,yze,u),b(f,fr,u),M(Vx,fr,null),e(fr,oRr),e(fr,Ic),e(Ic,rRr),e(Ic,XK),e(XK,tRr),e(Ic,aRr),e(Ic,zK),e(zK,nRr),e(Ic,sRr),e(fr,lRr),e(fr,Xx),e(Xx,iRr),e(Xx,j4e),e(j4e,dRr),e(Xx,cRr),e(fr,fRr),e(fr,Ot),M(zx,Ot,null),e(Ot,mRr),e(Ot,D4e),e(D4e,gRr),e(Ot,hRr),e(Ot,Nc),e(Nc,pRr),e(Nc,G4e),e(G4e,_Rr),e(Nc,uRr),e(Nc,QK),e(QK,bRr),e(Nc,vRr),e(Ot,FRr),M(eC,Ot,null),e(fr,TRr),e(fr,jr),M(Qx,jr,null),e(jr,MRr),e(jr,O4e),e(O4e,ERr),e(jr,CRr),e(jr,un),e(un,wRr),e(un,V4e),e(V4e,ARr),e(un,LRr),e(un,X4e),e(X4e,yRr),e(un,xRr),e(un,z4e),e(z4e,$Rr),e(un,kRr),e(jr,SRr),e(jr,de),e(de,oC),e(oC,Q4e),e(Q4e,RRr),e(oC,PRr),e(oC,WK),e(WK,BRr),e(oC,IRr),e(de,NRr),e(de,rC),e(rC,W4e),e(W4e,qRr),e(rC,jRr),e(rC,HK),e(HK,DRr),e(rC,GRr),e(de,ORr),e(de,tC),e(tC,H4e),e(H4e,VRr),e(tC,XRr),e(tC,UK),e(UK,zRr),e(tC,QRr),e(de,WRr),e(de,aC),e(aC,U4e),e(U4e,HRr),e(aC,URr),e(aC,JK),e(JK,JRr),e(aC,YRr),e(de,KRr),e(de,nC),e(nC,J4e),e(J4e,ZRr),e(nC,ePr),e(nC,YK),e(YK,oPr),e(nC,rPr),e(de,tPr),e(de,sC),e(sC,Y4e),e(Y4e,aPr),e(sC,nPr),e(sC,KK),e(KK,sPr),e(sC,lPr),e(de,iPr),e(de,lC),e(lC,K4e),e(K4e,dPr),e(lC,cPr),e(lC,ZK),e(ZK,fPr),e(lC,mPr),e(de,gPr),e(de,iC),e(iC,Z4e),e(Z4e,hPr),e(iC,pPr),e(iC,eZ),e(eZ,_Pr),e(iC,uPr),e(de,bPr),e(de,dC),e(dC,eEe),e(eEe,vPr),e(dC,FPr),e(dC,oZ),e(oZ,TPr),e(dC,MPr),e(de,EPr),e(de,cC),e(cC,oEe),e(oEe,CPr),e(cC,wPr),e(cC,rZ),e(rZ,APr),e(cC,LPr),e(de,yPr),e(de,fC),e(fC,rEe),e(rEe,xPr),e(fC,$Pr),e(fC,tZ),e(tZ,kPr),e(fC,SPr),e(de,RPr),e(de,mC),e(mC,tEe),e(tEe,PPr),e(mC,BPr),e(mC,aZ),e(aZ,IPr),e(mC,NPr),e(de,qPr),e(de,gC),e(gC,aEe),e(aEe,jPr),e(gC,DPr),e(gC,nZ),e(nZ,GPr),e(gC,OPr),e(de,VPr),e(de,hC),e(hC,nEe),e(nEe,XPr),e(hC,zPr),e(hC,sZ),e(sZ,QPr),e(hC,WPr),e(de,HPr),e(de,pC),e(pC,sEe),e(sEe,UPr),e(pC,JPr),e(pC,lZ),e(lZ,YPr),e(pC,KPr),e(de,ZPr),e(de,_C),e(_C,lEe),e(lEe,eBr),e(_C,oBr),e(_C,iZ),e(iZ,rBr),e(_C,tBr),e(de,aBr),e(de,uC),e(uC,iEe),e(iEe,nBr),e(uC,sBr),e(uC,dZ),e(dZ,lBr),e(uC,iBr),e(de,dBr),e(de,bC),e(bC,dEe),e(dEe,cBr),e(bC,fBr),e(bC,cZ),e(cZ,mBr),e(bC,gBr),e(de,hBr),e(de,vC),e(vC,cEe),e(cEe,pBr),e(vC,_Br),e(vC,fZ),e(fZ,uBr),e(vC,bBr),e(de,vBr),e(de,FC),e(FC,fEe),e(fEe,FBr),e(FC,TBr),e(FC,mZ),e(mZ,MBr),e(FC,EBr),e(jr,CBr),M(TC,jr,null),b(f,xze,u),b(f,qc,u),e(qc,MC),e(MC,mEe),M(Wx,mEe,null),e(qc,wBr),e(qc,gEe),e(gEe,ABr),b(f,$ze,u),b(f,mr,u),M(Hx,mr,null),e(mr,LBr),e(mr,jc),e(jc,yBr),e(jc,gZ),e(gZ,xBr),e(jc,$Br),e(jc,hZ),e(hZ,kBr),e(jc,SBr),e(mr,RBr),e(mr,Ux),e(Ux,PBr),e(Ux,hEe),e(hEe,BBr),e(Ux,IBr),e(mr,NBr),e(mr,Vt),M(Jx,Vt,null),e(Vt,qBr),e(Vt,pEe),e(pEe,jBr),e(Vt,DBr),e(Vt,Dc),e(Dc,GBr),e(Dc,_Ee),e(_Ee,OBr),e(Dc,VBr),e(Dc,pZ),e(pZ,XBr),e(Dc,zBr),e(Vt,QBr),M(EC,Vt,null),e(mr,WBr),e(mr,Dr),M(Yx,Dr,null),e(Dr,HBr),e(Dr,uEe),e(uEe,UBr),e(Dr,JBr),e(Dr,bn),e(bn,YBr),e(bn,bEe),e(bEe,KBr),e(bn,ZBr),e(bn,vEe),e(vEe,eIr),e(bn,oIr),e(bn,FEe),e(FEe,rIr),e(bn,tIr),e(Dr,aIr),e(Dr,ce),e(ce,CC),e(CC,TEe),e(TEe,nIr),e(CC,sIr),e(CC,_Z),e(_Z,lIr),e(CC,iIr),e(ce,dIr),e(ce,wC),e(wC,MEe),e(MEe,cIr),e(wC,fIr),e(wC,uZ),e(uZ,mIr),e(wC,gIr),e(ce,hIr),e(ce,AC),e(AC,EEe),e(EEe,pIr),e(AC,_Ir),e(AC,bZ),e(bZ,uIr),e(AC,bIr),e(ce,vIr),e(ce,LC),e(LC,CEe),e(CEe,FIr),e(LC,TIr),e(LC,vZ),e(vZ,MIr),e(LC,EIr),e(ce,CIr),e(ce,yC),e(yC,wEe),e(wEe,wIr),e(yC,AIr),e(yC,FZ),e(FZ,LIr),e(yC,yIr),e(ce,xIr),e(ce,xC),e(xC,AEe),e(AEe,$Ir),e(xC,kIr),e(xC,TZ),e(TZ,SIr),e(xC,RIr),e(ce,PIr),e(ce,$C),e($C,LEe),e(LEe,BIr),e($C,IIr),e($C,MZ),e(MZ,NIr),e($C,qIr),e(ce,jIr),e(ce,kC),e(kC,yEe),e(yEe,DIr),e(kC,GIr),e(kC,EZ),e(EZ,OIr),e(kC,VIr),e(ce,XIr),e(ce,SC),e(SC,xEe),e(xEe,zIr),e(SC,QIr),e(SC,CZ),e(CZ,WIr),e(SC,HIr),e(ce,UIr),e(ce,RC),e(RC,$Ee),e($Ee,JIr),e(RC,YIr),e(RC,wZ),e(wZ,KIr),e(RC,ZIr),e(ce,eNr),e(ce,PC),e(PC,kEe),e(kEe,oNr),e(PC,rNr),e(PC,AZ),e(AZ,tNr),e(PC,aNr),e(ce,nNr),e(ce,BC),e(BC,SEe),e(SEe,sNr),e(BC,lNr),e(BC,LZ),e(LZ,iNr),e(BC,dNr),e(ce,cNr),e(ce,IC),e(IC,REe),e(REe,fNr),e(IC,mNr),e(IC,yZ),e(yZ,gNr),e(IC,hNr),e(ce,pNr),e(ce,NC),e(NC,PEe),e(PEe,_Nr),e(NC,uNr),e(NC,xZ),e(xZ,bNr),e(NC,vNr),e(ce,FNr),e(ce,qC),e(qC,BEe),e(BEe,TNr),e(qC,MNr),e(qC,$Z),e($Z,ENr),e(qC,CNr),e(ce,wNr),e(ce,jC),e(jC,IEe),e(IEe,ANr),e(jC,LNr),e(jC,kZ),e(kZ,yNr),e(jC,xNr),e(ce,$Nr),e(ce,DC),e(DC,NEe),e(NEe,kNr),e(DC,SNr),e(DC,SZ),e(SZ,RNr),e(DC,PNr),e(ce,BNr),e(ce,GC),e(GC,qEe),e(qEe,INr),e(GC,NNr),e(GC,RZ),e(RZ,qNr),e(GC,jNr),e(ce,DNr),e(ce,OC),e(OC,jEe),e(jEe,GNr),e(OC,ONr),e(OC,PZ),e(PZ,VNr),e(OC,XNr),e(ce,zNr),e(ce,VC),e(VC,DEe),e(DEe,QNr),e(VC,WNr),e(VC,BZ),e(BZ,HNr),e(VC,UNr),e(Dr,JNr),M(XC,Dr,null),b(f,kze,u),b(f,Gc,u),e(Gc,zC),e(zC,GEe),M(Kx,GEe,null),e(Gc,YNr),e(Gc,OEe),e(OEe,KNr),b(f,Sze,u),b(f,gr,u),M(Zx,gr,null),e(gr,ZNr),e(gr,Oc),e(Oc,eqr),e(Oc,IZ),e(IZ,oqr),e(Oc,rqr),e(Oc,NZ),e(NZ,tqr),e(Oc,aqr),e(gr,nqr),e(gr,e$),e(e$,sqr),e(e$,VEe),e(VEe,lqr),e(e$,iqr),e(gr,dqr),e(gr,Xt),M(o$,Xt,null),e(Xt,cqr),e(Xt,XEe),e(XEe,fqr),e(Xt,mqr),e(Xt,Vc),e(Vc,gqr),e(Vc,zEe),e(zEe,hqr),e(Vc,pqr),e(Vc,qZ),e(qZ,_qr),e(Vc,uqr),e(Xt,bqr),M(QC,Xt,null),e(gr,vqr),e(gr,Gr),M(r$,Gr,null),e(Gr,Fqr),e(Gr,QEe),e(QEe,Tqr),e(Gr,Mqr),e(Gr,vn),e(vn,Eqr),e(vn,WEe),e(WEe,Cqr),e(vn,wqr),e(vn,HEe),e(HEe,Aqr),e(vn,Lqr),e(vn,UEe),e(UEe,yqr),e(vn,xqr),e(Gr,$qr),e(Gr,JEe),e(JEe,WC),e(WC,YEe),e(YEe,kqr),e(WC,Sqr),e(WC,jZ),e(jZ,Rqr),e(WC,Pqr),e(Gr,Bqr),M(HC,Gr,null),b(f,Rze,u),b(f,Xc,u),e(Xc,UC),e(UC,KEe),M(t$,KEe,null),e(Xc,Iqr),e(Xc,ZEe),e(ZEe,Nqr),b(f,Pze,u),b(f,hr,u),M(a$,hr,null),e(hr,qqr),e(hr,zc),e(zc,jqr),e(zc,DZ),e(DZ,Dqr),e(zc,Gqr),e(zc,GZ),e(GZ,Oqr),e(zc,Vqr),e(hr,Xqr),e(hr,n$),e(n$,zqr),e(n$,eCe),e(eCe,Qqr),e(n$,Wqr),e(hr,Hqr),e(hr,zt),M(s$,zt,null),e(zt,Uqr),e(zt,oCe),e(oCe,Jqr),e(zt,Yqr),e(zt,Qc),e(Qc,Kqr),e(Qc,rCe),e(rCe,Zqr),e(Qc,ejr),e(Qc,OZ),e(OZ,ojr),e(Qc,rjr),e(zt,tjr),M(JC,zt,null),e(hr,ajr),e(hr,Or),M(l$,Or,null),e(Or,njr),e(Or,tCe),e(tCe,sjr),e(Or,ljr),e(Or,Fn),e(Fn,ijr),e(Fn,aCe),e(aCe,djr),e(Fn,cjr),e(Fn,nCe),e(nCe,fjr),e(Fn,mjr),e(Fn,sCe),e(sCe,gjr),e(Fn,hjr),e(Or,pjr),e(Or,lCe),e(lCe,YC),e(YC,iCe),e(iCe,_jr),e(YC,ujr),e(YC,VZ),e(VZ,bjr),e(YC,vjr),e(Or,Fjr),M(KC,Or,null),b(f,Bze,u),b(f,Wc,u),e(Wc,ZC),e(ZC,dCe),M(i$,dCe,null),e(Wc,Tjr),e(Wc,cCe),e(cCe,Mjr),b(f,Ize,u),b(f,pr,u),M(d$,pr,null),e(pr,Ejr),e(pr,Hc),e(Hc,Cjr),e(Hc,XZ),e(XZ,wjr),e(Hc,Ajr),e(Hc,zZ),e(zZ,Ljr),e(Hc,yjr),e(pr,xjr),e(pr,c$),e(c$,$jr),e(c$,fCe),e(fCe,kjr),e(c$,Sjr),e(pr,Rjr),e(pr,Qt),M(f$,Qt,null),e(Qt,Pjr),e(Qt,mCe),e(mCe,Bjr),e(Qt,Ijr),e(Qt,Uc),e(Uc,Njr),e(Uc,gCe),e(gCe,qjr),e(Uc,jjr),e(Uc,QZ),e(QZ,Djr),e(Uc,Gjr),e(Qt,Ojr),M(e3,Qt,null),e(pr,Vjr),e(pr,Vr),M(m$,Vr,null),e(Vr,Xjr),e(Vr,hCe),e(hCe,zjr),e(Vr,Qjr),e(Vr,Tn),e(Tn,Wjr),e(Tn,pCe),e(pCe,Hjr),e(Tn,Ujr),e(Tn,_Ce),e(_Ce,Jjr),e(Tn,Yjr),e(Tn,uCe),e(uCe,Kjr),e(Tn,Zjr),e(Vr,eDr),e(Vr,oe),e(oe,o3),e(o3,bCe),e(bCe,oDr),e(o3,rDr),e(o3,WZ),e(WZ,tDr),e(o3,aDr),e(oe,nDr),e(oe,r3),e(r3,vCe),e(vCe,sDr),e(r3,lDr),e(r3,HZ),e(HZ,iDr),e(r3,dDr),e(oe,cDr),e(oe,t3),e(t3,FCe),e(FCe,fDr),e(t3,mDr),e(t3,UZ),e(UZ,gDr),e(t3,hDr),e(oe,pDr),e(oe,a3),e(a3,TCe),e(TCe,_Dr),e(a3,uDr),e(a3,JZ),e(JZ,bDr),e(a3,vDr),e(oe,FDr),e(oe,n3),e(n3,MCe),e(MCe,TDr),e(n3,MDr),e(n3,YZ),e(YZ,EDr),e(n3,CDr),e(oe,wDr),e(oe,s3),e(s3,ECe),e(ECe,ADr),e(s3,LDr),e(s3,KZ),e(KZ,yDr),e(s3,xDr),e(oe,$Dr),e(oe,l3),e(l3,CCe),e(CCe,kDr),e(l3,SDr),e(l3,ZZ),e(ZZ,RDr),e(l3,PDr),e(oe,BDr),e(oe,i3),e(i3,wCe),e(wCe,IDr),e(i3,NDr),e(i3,eee),e(eee,qDr),e(i3,jDr),e(oe,DDr),e(oe,d3),e(d3,ACe),e(ACe,GDr),e(d3,ODr),e(d3,oee),e(oee,VDr),e(d3,XDr),e(oe,zDr),e(oe,c3),e(c3,LCe),e(LCe,QDr),e(c3,WDr),e(c3,ree),e(ree,HDr),e(c3,UDr),e(oe,JDr),e(oe,f3),e(f3,yCe),e(yCe,YDr),e(f3,KDr),e(f3,tee),e(tee,ZDr),e(f3,eGr),e(oe,oGr),e(oe,m3),e(m3,xCe),e(xCe,rGr),e(m3,tGr),e(m3,aee),e(aee,aGr),e(m3,nGr),e(oe,sGr),e(oe,g3),e(g3,$Ce),e($Ce,lGr),e(g3,iGr),e(g3,nee),e(nee,dGr),e(g3,cGr),e(oe,fGr),e(oe,h3),e(h3,kCe),e(kCe,mGr),e(h3,gGr),e(h3,see),e(see,hGr),e(h3,pGr),e(oe,_Gr),e(oe,p3),e(p3,SCe),e(SCe,uGr),e(p3,bGr),e(p3,lee),e(lee,vGr),e(p3,FGr),e(oe,TGr),e(oe,_3),e(_3,RCe),e(RCe,MGr),e(_3,EGr),e(_3,iee),e(iee,CGr),e(_3,wGr),e(oe,AGr),e(oe,u3),e(u3,PCe),e(PCe,LGr),e(u3,yGr),e(u3,dee),e(dee,xGr),e(u3,$Gr),e(oe,kGr),e(oe,b3),e(b3,BCe),e(BCe,SGr),e(b3,RGr),e(b3,cee),e(cee,PGr),e(b3,BGr),e(oe,IGr),e(oe,v3),e(v3,ICe),e(ICe,NGr),e(v3,qGr),e(v3,fee),e(fee,jGr),e(v3,DGr),e(oe,GGr),e(oe,F3),e(F3,NCe),e(NCe,OGr),e(F3,VGr),e(F3,mee),e(mee,XGr),e(F3,zGr),e(oe,QGr),e(oe,T3),e(T3,qCe),e(qCe,WGr),e(T3,HGr),e(T3,gee),e(gee,UGr),e(T3,JGr),e(oe,YGr),e(oe,M3),e(M3,jCe),e(jCe,KGr),e(M3,ZGr),e(M3,hee),e(hee,eOr),e(M3,oOr),e(oe,rOr),e(oe,E3),e(E3,DCe),e(DCe,tOr),e(E3,aOr),e(E3,pee),e(pee,nOr),e(E3,sOr),e(oe,lOr),e(oe,C3),e(C3,GCe),e(GCe,iOr),e(C3,dOr),e(C3,_ee),e(_ee,cOr),e(C3,fOr),e(oe,mOr),e(oe,w3),e(w3,OCe),e(OCe,gOr),e(w3,hOr),e(w3,uee),e(uee,pOr),e(w3,_Or),e(oe,uOr),e(oe,A3),e(A3,VCe),e(VCe,bOr),e(A3,vOr),e(A3,bee),e(bee,FOr),e(A3,TOr),e(oe,MOr),e(oe,L3),e(L3,XCe),e(XCe,EOr),e(L3,COr),e(L3,vee),e(vee,wOr),e(L3,AOr),e(Vr,LOr),M(y3,Vr,null),b(f,Nze,u),b(f,Jc,u),e(Jc,x3),e(x3,zCe),M(g$,zCe,null),e(Jc,yOr),e(Jc,QCe),e(QCe,xOr),b(f,qze,u),b(f,_r,u),M(h$,_r,null),e(_r,$Or),e(_r,Yc),e(Yc,kOr),e(Yc,Fee),e(Fee,SOr),e(Yc,ROr),e(Yc,Tee),e(Tee,POr),e(Yc,BOr),e(_r,IOr),e(_r,p$),e(p$,NOr),e(p$,WCe),e(WCe,qOr),e(p$,jOr),e(_r,DOr),e(_r,Wt),M(_$,Wt,null),e(Wt,GOr),e(Wt,HCe),e(HCe,OOr),e(Wt,VOr),e(Wt,Kc),e(Kc,XOr),e(Kc,UCe),e(UCe,zOr),e(Kc,QOr),e(Kc,Mee),e(Mee,WOr),e(Kc,HOr),e(Wt,UOr),M($3,Wt,null),e(_r,JOr),e(_r,Xr),M(u$,Xr,null),e(Xr,YOr),e(Xr,JCe),e(JCe,KOr),e(Xr,ZOr),e(Xr,Mn),e(Mn,eVr),e(Mn,YCe),e(YCe,oVr),e(Mn,rVr),e(Mn,KCe),e(KCe,tVr),e(Mn,aVr),e(Mn,ZCe),e(ZCe,nVr),e(Mn,sVr),e(Xr,lVr),e(Xr,xe),e(xe,k3),e(k3,e3e),e(e3e,iVr),e(k3,dVr),e(k3,Eee),e(Eee,cVr),e(k3,fVr),e(xe,mVr),e(xe,S3),e(S3,o3e),e(o3e,gVr),e(S3,hVr),e(S3,Cee),e(Cee,pVr),e(S3,_Vr),e(xe,uVr),e(xe,R3),e(R3,r3e),e(r3e,bVr),e(R3,vVr),e(R3,wee),e(wee,FVr),e(R3,TVr),e(xe,MVr),e(xe,P3),e(P3,t3e),e(t3e,EVr),e(P3,CVr),e(P3,Aee),e(Aee,wVr),e(P3,AVr),e(xe,LVr),e(xe,B3),e(B3,a3e),e(a3e,yVr),e(B3,xVr),e(B3,Lee),e(Lee,$Vr),e(B3,kVr),e(xe,SVr),e(xe,I3),e(I3,n3e),e(n3e,RVr),e(I3,PVr),e(I3,yee),e(yee,BVr),e(I3,IVr),e(xe,NVr),e(xe,N3),e(N3,s3e),e(s3e,qVr),e(N3,jVr),e(N3,xee),e(xee,DVr),e(N3,GVr),e(xe,OVr),e(xe,q3),e(q3,l3e),e(l3e,VVr),e(q3,XVr),e(q3,$ee),e($ee,zVr),e(q3,QVr),e(xe,WVr),e(xe,j3),e(j3,i3e),e(i3e,HVr),e(j3,UVr),e(j3,kee),e(kee,JVr),e(j3,YVr),e(xe,KVr),e(xe,D3),e(D3,d3e),e(d3e,ZVr),e(D3,eXr),e(D3,See),e(See,oXr),e(D3,rXr),e(Xr,tXr),M(G3,Xr,null),b(f,jze,u),b(f,Zc,u),e(Zc,O3),e(O3,c3e),M(b$,c3e,null),e(Zc,aXr),e(Zc,f3e),e(f3e,nXr),b(f,Dze,u),b(f,ur,u),M(v$,ur,null),e(ur,sXr),e(ur,ef),e(ef,lXr),e(ef,Ree),e(Ree,iXr),e(ef,dXr),e(ef,Pee),e(Pee,cXr),e(ef,fXr),e(ur,mXr),e(ur,F$),e(F$,gXr),e(F$,m3e),e(m3e,hXr),e(F$,pXr),e(ur,_Xr),e(ur,Ht),M(T$,Ht,null),e(Ht,uXr),e(Ht,g3e),e(g3e,bXr),e(Ht,vXr),e(Ht,of),e(of,FXr),e(of,h3e),e(h3e,TXr),e(of,MXr),e(of,Bee),e(Bee,EXr),e(of,CXr),e(Ht,wXr),M(V3,Ht,null),e(ur,AXr),e(ur,zr),M(M$,zr,null),e(zr,LXr),e(zr,p3e),e(p3e,yXr),e(zr,xXr),e(zr,En),e(En,$Xr),e(En,_3e),e(_3e,kXr),e(En,SXr),e(En,u3e),e(u3e,RXr),e(En,PXr),e(En,b3e),e(b3e,BXr),e(En,IXr),e(zr,NXr),e(zr,Ee),e(Ee,X3),e(X3,v3e),e(v3e,qXr),e(X3,jXr),e(X3,Iee),e(Iee,DXr),e(X3,GXr),e(Ee,OXr),e(Ee,z3),e(z3,F3e),e(F3e,VXr),e(z3,XXr),e(z3,Nee),e(Nee,zXr),e(z3,QXr),e(Ee,WXr),e(Ee,Q3),e(Q3,T3e),e(T3e,HXr),e(Q3,UXr),e(Q3,qee),e(qee,JXr),e(Q3,YXr),e(Ee,KXr),e(Ee,W3),e(W3,M3e),e(M3e,ZXr),e(W3,ezr),e(W3,jee),e(jee,ozr),e(W3,rzr),e(Ee,tzr),e(Ee,H3),e(H3,E3e),e(E3e,azr),e(H3,nzr),e(H3,Dee),e(Dee,szr),e(H3,lzr),e(Ee,izr),e(Ee,U3),e(U3,C3e),e(C3e,dzr),e(U3,czr),e(U3,Gee),e(Gee,fzr),e(U3,mzr),e(Ee,gzr),e(Ee,J3),e(J3,w3e),e(w3e,hzr),e(J3,pzr),e(J3,Oee),e(Oee,_zr),e(J3,uzr),e(Ee,bzr),e(Ee,Y3),e(Y3,A3e),e(A3e,vzr),e(Y3,Fzr),e(Y3,Vee),e(Vee,Tzr),e(Y3,Mzr),e(Ee,Ezr),e(Ee,K3),e(K3,L3e),e(L3e,Czr),e(K3,wzr),e(K3,Xee),e(Xee,Azr),e(K3,Lzr),e(Ee,yzr),e(Ee,Z3),e(Z3,y3e),e(y3e,xzr),e(Z3,$zr),e(Z3,zee),e(zee,kzr),e(Z3,Szr),e(Ee,Rzr),e(Ee,e5),e(e5,x3e),e(x3e,Pzr),e(e5,Bzr),e(e5,Qee),e(Qee,Izr),e(e5,Nzr),e(Ee,qzr),e(Ee,o5),e(o5,$3e),e($3e,jzr),e(o5,Dzr),e(o5,Wee),e(Wee,Gzr),e(o5,Ozr),e(Ee,Vzr),e(Ee,r5),e(r5,k3e),e(k3e,Xzr),e(r5,zzr),e(r5,Hee),e(Hee,Qzr),e(r5,Wzr),e(zr,Hzr),M(t5,zr,null),b(f,Gze,u),b(f,rf,u),e(rf,a5),e(a5,S3e),M(E$,S3e,null),e(rf,Uzr),e(rf,R3e),e(R3e,Jzr),b(f,Oze,u),b(f,br,u),M(C$,br,null),e(br,Yzr),e(br,tf),e(tf,Kzr),e(tf,Uee),e(Uee,Zzr),e(tf,eQr),e(tf,Jee),e(Jee,oQr),e(tf,rQr),e(br,tQr),e(br,w$),e(w$,aQr),e(w$,P3e),e(P3e,nQr),e(w$,sQr),e(br,lQr),e(br,Ut),M(A$,Ut,null),e(Ut,iQr),e(Ut,B3e),e(B3e,dQr),e(Ut,cQr),e(Ut,af),e(af,fQr),e(af,I3e),e(I3e,mQr),e(af,gQr),e(af,Yee),e(Yee,hQr),e(af,pQr),e(Ut,_Qr),M(n5,Ut,null),e(br,uQr),e(br,Qr),M(L$,Qr,null),e(Qr,bQr),e(Qr,N3e),e(N3e,vQr),e(Qr,FQr),e(Qr,Cn),e(Cn,TQr),e(Cn,q3e),e(q3e,MQr),e(Cn,EQr),e(Cn,j3e),e(j3e,CQr),e(Cn,wQr),e(Cn,D3e),e(D3e,AQr),e(Cn,LQr),e(Qr,yQr),e(Qr,$e),e($e,s5),e(s5,G3e),e(G3e,xQr),e(s5,$Qr),e(s5,Kee),e(Kee,kQr),e(s5,SQr),e($e,RQr),e($e,l5),e(l5,O3e),e(O3e,PQr),e(l5,BQr),e(l5,Zee),e(Zee,IQr),e(l5,NQr),e($e,qQr),e($e,i5),e(i5,V3e),e(V3e,jQr),e(i5,DQr),e(i5,eoe),e(eoe,GQr),e(i5,OQr),e($e,VQr),e($e,d5),e(d5,X3e),e(X3e,XQr),e(d5,zQr),e(d5,ooe),e(ooe,QQr),e(d5,WQr),e($e,HQr),e($e,c5),e(c5,z3e),e(z3e,UQr),e(c5,JQr),e(c5,roe),e(roe,YQr),e(c5,KQr),e($e,ZQr),e($e,f5),e(f5,Q3e),e(Q3e,eWr),e(f5,oWr),e(f5,toe),e(toe,rWr),e(f5,tWr),e($e,aWr),e($e,m5),e(m5,W3e),e(W3e,nWr),e(m5,sWr),e(m5,aoe),e(aoe,lWr),e(m5,iWr),e($e,dWr),e($e,g5),e(g5,H3e),e(H3e,cWr),e(g5,fWr),e(g5,noe),e(noe,mWr),e(g5,gWr),e($e,hWr),e($e,h5),e(h5,U3e),e(U3e,pWr),e(h5,_Wr),e(h5,soe),e(soe,uWr),e(h5,bWr),e($e,vWr),e($e,p5),e(p5,J3e),e(J3e,FWr),e(p5,TWr),e(p5,loe),e(loe,MWr),e(p5,EWr),e(Qr,CWr),M(_5,Qr,null),b(f,Vze,u),b(f,nf,u),e(nf,u5),e(u5,Y3e),M(y$,Y3e,null),e(nf,wWr),e(nf,K3e),e(K3e,AWr),b(f,Xze,u),b(f,vr,u),M(x$,vr,null),e(vr,LWr),e(vr,sf),e(sf,yWr),e(sf,ioe),e(ioe,xWr),e(sf,$Wr),e(sf,doe),e(doe,kWr),e(sf,SWr),e(vr,RWr),e(vr,$$),e($$,PWr),e($$,Z3e),e(Z3e,BWr),e($$,IWr),e(vr,NWr),e(vr,Jt),M(k$,Jt,null),e(Jt,qWr),e(Jt,e5e),e(e5e,jWr),e(Jt,DWr),e(Jt,lf),e(lf,GWr),e(lf,o5e),e(o5e,OWr),e(lf,VWr),e(lf,coe),e(coe,XWr),e(lf,zWr),e(Jt,QWr),M(b5,Jt,null),e(vr,WWr),e(vr,Wr),M(S$,Wr,null),e(Wr,HWr),e(Wr,r5e),e(r5e,UWr),e(Wr,JWr),e(Wr,wn),e(wn,YWr),e(wn,t5e),e(t5e,KWr),e(wn,ZWr),e(wn,a5e),e(a5e,eHr),e(wn,oHr),e(wn,n5e),e(n5e,rHr),e(wn,tHr),e(Wr,aHr),e(Wr,ke),e(ke,v5),e(v5,s5e),e(s5e,nHr),e(v5,sHr),e(v5,foe),e(foe,lHr),e(v5,iHr),e(ke,dHr),e(ke,F5),e(F5,l5e),e(l5e,cHr),e(F5,fHr),e(F5,moe),e(moe,mHr),e(F5,gHr),e(ke,hHr),e(ke,T5),e(T5,i5e),e(i5e,pHr),e(T5,_Hr),e(T5,goe),e(goe,uHr),e(T5,bHr),e(ke,vHr),e(ke,M5),e(M5,d5e),e(d5e,FHr),e(M5,THr),e(M5,hoe),e(hoe,MHr),e(M5,EHr),e(ke,CHr),e(ke,E5),e(E5,c5e),e(c5e,wHr),e(E5,AHr),e(E5,poe),e(poe,LHr),e(E5,yHr),e(ke,xHr),e(ke,C5),e(C5,f5e),e(f5e,$Hr),e(C5,kHr),e(C5,_oe),e(_oe,SHr),e(C5,RHr),e(ke,PHr),e(ke,w5),e(w5,m5e),e(m5e,BHr),e(w5,IHr),e(w5,uoe),e(uoe,NHr),e(w5,qHr),e(ke,jHr),e(ke,A5),e(A5,g5e),e(g5e,DHr),e(A5,GHr),e(A5,boe),e(boe,OHr),e(A5,VHr),e(ke,XHr),e(ke,L5),e(L5,h5e),e(h5e,zHr),e(L5,QHr),e(L5,voe),e(voe,WHr),e(L5,HHr),e(ke,UHr),e(ke,y5),e(y5,p5e),e(p5e,JHr),e(y5,YHr),e(y5,Foe),e(Foe,KHr),e(y5,ZHr),e(Wr,eUr),M(x5,Wr,null),b(f,zze,u),b(f,df,u),e(df,$5),e($5,_5e),M(R$,_5e,null),e(df,oUr),e(df,u5e),e(u5e,rUr),b(f,Qze,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,tUr),e(Fr,cf),e(cf,aUr),e(cf,Toe),e(Toe,nUr),e(cf,sUr),e(cf,Moe),e(Moe,lUr),e(cf,iUr),e(Fr,dUr),e(Fr,B$),e(B$,cUr),e(B$,b5e),e(b5e,fUr),e(B$,mUr),e(Fr,gUr),e(Fr,Yt),M(I$,Yt,null),e(Yt,hUr),e(Yt,v5e),e(v5e,pUr),e(Yt,_Ur),e(Yt,ff),e(ff,uUr),e(ff,F5e),e(F5e,bUr),e(ff,vUr),e(ff,Eoe),e(Eoe,FUr),e(ff,TUr),e(Yt,MUr),M(k5,Yt,null),e(Fr,EUr),e(Fr,Hr),M(N$,Hr,null),e(Hr,CUr),e(Hr,T5e),e(T5e,wUr),e(Hr,AUr),e(Hr,An),e(An,LUr),e(An,M5e),e(M5e,yUr),e(An,xUr),e(An,E5e),e(E5e,$Ur),e(An,kUr),e(An,C5e),e(C5e,SUr),e(An,RUr),e(Hr,PUr),e(Hr,Se),e(Se,S5),e(S5,w5e),e(w5e,BUr),e(S5,IUr),e(S5,Coe),e(Coe,NUr),e(S5,qUr),e(Se,jUr),e(Se,R5),e(R5,A5e),e(A5e,DUr),e(R5,GUr),e(R5,woe),e(woe,OUr),e(R5,VUr),e(Se,XUr),e(Se,P5),e(P5,L5e),e(L5e,zUr),e(P5,QUr),e(P5,Aoe),e(Aoe,WUr),e(P5,HUr),e(Se,UUr),e(Se,B5),e(B5,y5e),e(y5e,JUr),e(B5,YUr),e(B5,Loe),e(Loe,KUr),e(B5,ZUr),e(Se,eJr),e(Se,I5),e(I5,x5e),e(x5e,oJr),e(I5,rJr),e(I5,yoe),e(yoe,tJr),e(I5,aJr),e(Se,nJr),e(Se,N5),e(N5,$5e),e($5e,sJr),e(N5,lJr),e(N5,xoe),e(xoe,iJr),e(N5,dJr),e(Se,cJr),e(Se,q5),e(q5,k5e),e(k5e,fJr),e(q5,mJr),e(q5,$oe),e($oe,gJr),e(q5,hJr),e(Se,pJr),e(Se,j5),e(j5,S5e),e(S5e,_Jr),e(j5,uJr),e(j5,koe),e(koe,bJr),e(j5,vJr),e(Se,FJr),e(Se,D5),e(D5,R5e),e(R5e,TJr),e(D5,MJr),e(D5,Soe),e(Soe,EJr),e(D5,CJr),e(Se,wJr),e(Se,G5),e(G5,P5e),e(P5e,AJr),e(G5,LJr),e(G5,Roe),e(Roe,yJr),e(G5,xJr),e(Hr,$Jr),M(O5,Hr,null),b(f,Wze,u),b(f,mf,u),e(mf,V5),e(V5,B5e),M(q$,B5e,null),e(mf,kJr),e(mf,I5e),e(I5e,SJr),b(f,Hze,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,RJr),e(Tr,gf),e(gf,PJr),e(gf,Poe),e(Poe,BJr),e(gf,IJr),e(gf,Boe),e(Boe,NJr),e(gf,qJr),e(Tr,jJr),e(Tr,D$),e(D$,DJr),e(D$,N5e),e(N5e,GJr),e(D$,OJr),e(Tr,VJr),e(Tr,Kt),M(G$,Kt,null),e(Kt,XJr),e(Kt,q5e),e(q5e,zJr),e(Kt,QJr),e(Kt,hf),e(hf,WJr),e(hf,j5e),e(j5e,HJr),e(hf,UJr),e(hf,Ioe),e(Ioe,JJr),e(hf,YJr),e(Kt,KJr),M(X5,Kt,null),e(Tr,ZJr),e(Tr,Ur),M(O$,Ur,null),e(Ur,eYr),e(Ur,D5e),e(D5e,oYr),e(Ur,rYr),e(Ur,Ln),e(Ln,tYr),e(Ln,G5e),e(G5e,aYr),e(Ln,nYr),e(Ln,O5e),e(O5e,sYr),e(Ln,lYr),e(Ln,V5e),e(V5e,iYr),e(Ln,dYr),e(Ur,cYr),e(Ur,Re),e(Re,z5),e(z5,X5e),e(X5e,fYr),e(z5,mYr),e(z5,Noe),e(Noe,gYr),e(z5,hYr),e(Re,pYr),e(Re,Q5),e(Q5,z5e),e(z5e,_Yr),e(Q5,uYr),e(Q5,qoe),e(qoe,bYr),e(Q5,vYr),e(Re,FYr),e(Re,W5),e(W5,Q5e),e(Q5e,TYr),e(W5,MYr),e(W5,joe),e(joe,EYr),e(W5,CYr),e(Re,wYr),e(Re,H5),e(H5,W5e),e(W5e,AYr),e(H5,LYr),e(H5,Doe),e(Doe,yYr),e(H5,xYr),e(Re,$Yr),e(Re,U5),e(U5,H5e),e(H5e,kYr),e(U5,SYr),e(U5,Goe),e(Goe,RYr),e(U5,PYr),e(Re,BYr),e(Re,J5),e(J5,U5e),e(U5e,IYr),e(J5,NYr),e(J5,Ooe),e(Ooe,qYr),e(J5,jYr),e(Re,DYr),e(Re,Y5),e(Y5,J5e),e(J5e,GYr),e(Y5,OYr),e(Y5,Voe),e(Voe,VYr),e(Y5,XYr),e(Re,zYr),e(Re,K5),e(K5,Y5e),e(Y5e,QYr),e(K5,WYr),e(K5,Xoe),e(Xoe,HYr),e(K5,UYr),e(Re,JYr),e(Re,Z5),e(Z5,K5e),e(K5e,YYr),e(Z5,KYr),e(Z5,zoe),e(zoe,ZYr),e(Z5,eKr),e(Re,oKr),e(Re,e0),e(e0,Z5e),e(Z5e,rKr),e(e0,tKr),e(e0,Qoe),e(Qoe,aKr),e(e0,nKr),e(Ur,sKr),M(o0,Ur,null),b(f,Uze,u),b(f,pf,u),e(pf,r0),e(r0,e0e),M(V$,e0e,null),e(pf,lKr),e(pf,o0e),e(o0e,iKr),b(f,Jze,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,dKr),e(Mr,_f),e(_f,cKr),e(_f,Woe),e(Woe,fKr),e(_f,mKr),e(_f,Hoe),e(Hoe,gKr),e(_f,hKr),e(Mr,pKr),e(Mr,z$),e(z$,_Kr),e(z$,r0e),e(r0e,uKr),e(z$,bKr),e(Mr,vKr),e(Mr,Zt),M(Q$,Zt,null),e(Zt,FKr),e(Zt,t0e),e(t0e,TKr),e(Zt,MKr),e(Zt,uf),e(uf,EKr),e(uf,a0e),e(a0e,CKr),e(uf,wKr),e(uf,Uoe),e(Uoe,AKr),e(uf,LKr),e(Zt,yKr),M(t0,Zt,null),e(Mr,xKr),e(Mr,Jr),M(W$,Jr,null),e(Jr,$Kr),e(Jr,n0e),e(n0e,kKr),e(Jr,SKr),e(Jr,yn),e(yn,RKr),e(yn,s0e),e(s0e,PKr),e(yn,BKr),e(yn,l0e),e(l0e,IKr),e(yn,NKr),e(yn,i0e),e(i0e,qKr),e(yn,jKr),e(Jr,DKr),e(Jr,Ve),e(Ve,a0),e(a0,d0e),e(d0e,GKr),e(a0,OKr),e(a0,Joe),e(Joe,VKr),e(a0,XKr),e(Ve,zKr),e(Ve,n0),e(n0,c0e),e(c0e,QKr),e(n0,WKr),e(n0,Yoe),e(Yoe,HKr),e(n0,UKr),e(Ve,JKr),e(Ve,s0),e(s0,f0e),e(f0e,YKr),e(s0,KKr),e(s0,Koe),e(Koe,ZKr),e(s0,eZr),e(Ve,oZr),e(Ve,l0),e(l0,m0e),e(m0e,rZr),e(l0,tZr),e(l0,Zoe),e(Zoe,aZr),e(l0,nZr),e(Ve,sZr),e(Ve,i0),e(i0,g0e),e(g0e,lZr),e(i0,iZr),e(i0,ere),e(ere,dZr),e(i0,cZr),e(Ve,fZr),e(Ve,d0),e(d0,h0e),e(h0e,mZr),e(d0,gZr),e(d0,ore),e(ore,hZr),e(d0,pZr),e(Ve,_Zr),e(Ve,c0),e(c0,p0e),e(p0e,uZr),e(c0,bZr),e(c0,rre),e(rre,vZr),e(c0,FZr),e(Ve,TZr),e(Ve,f0),e(f0,_0e),e(_0e,MZr),e(f0,EZr),e(f0,tre),e(tre,CZr),e(f0,wZr),e(Jr,AZr),M(m0,Jr,null),b(f,Yze,u),b(f,bf,u),e(bf,g0),e(g0,u0e),M(H$,u0e,null),e(bf,LZr),e(bf,b0e),e(b0e,yZr),b(f,Kze,u),b(f,Er,u),M(U$,Er,null),e(Er,xZr),e(Er,vf),e(vf,$Zr),e(vf,are),e(are,kZr),e(vf,SZr),e(vf,nre),e(nre,RZr),e(vf,PZr),e(Er,BZr),e(Er,J$),e(J$,IZr),e(J$,v0e),e(v0e,NZr),e(J$,qZr),e(Er,jZr),e(Er,ea),M(Y$,ea,null),e(ea,DZr),e(ea,F0e),e(F0e,GZr),e(ea,OZr),e(ea,Ff),e(Ff,VZr),e(Ff,T0e),e(T0e,XZr),e(Ff,zZr),e(Ff,sre),e(sre,QZr),e(Ff,WZr),e(ea,HZr),M(h0,ea,null),e(Er,UZr),e(Er,Yr),M(K$,Yr,null),e(Yr,JZr),e(Yr,M0e),e(M0e,YZr),e(Yr,KZr),e(Yr,xn),e(xn,ZZr),e(xn,E0e),e(E0e,eet),e(xn,oet),e(xn,C0e),e(C0e,ret),e(xn,tet),e(xn,w0e),e(w0e,aet),e(xn,net),e(Yr,set),e(Yr,Xe),e(Xe,p0),e(p0,A0e),e(A0e,iet),e(p0,det),e(p0,lre),e(lre,cet),e(p0,fet),e(Xe,met),e(Xe,_0),e(_0,L0e),e(L0e,get),e(_0,het),e(_0,ire),e(ire,pet),e(_0,_et),e(Xe,uet),e(Xe,u0),e(u0,y0e),e(y0e,bet),e(u0,vet),e(u0,dre),e(dre,Fet),e(u0,Tet),e(Xe,Met),e(Xe,b0),e(b0,x0e),e(x0e,Eet),e(b0,Cet),e(b0,cre),e(cre,wet),e(b0,Aet),e(Xe,Let),e(Xe,v0),e(v0,$0e),e($0e,yet),e(v0,xet),e(v0,fre),e(fre,$et),e(v0,ket),e(Xe,Set),e(Xe,F0),e(F0,k0e),e(k0e,Ret),e(F0,Pet),e(F0,mre),e(mre,Bet),e(F0,Iet),e(Xe,Net),e(Xe,T0),e(T0,S0e),e(S0e,qet),e(T0,jet),e(T0,gre),e(gre,Det),e(T0,Get),e(Xe,Oet),e(Xe,M0),e(M0,R0e),e(R0e,Vet),e(M0,Xet),e(M0,hre),e(hre,zet),e(M0,Qet),e(Yr,Wet),M(E0,Yr,null),b(f,Zze,u),b(f,Tf,u),e(Tf,C0),e(C0,P0e),M(Z$,P0e,null),e(Tf,Het),e(Tf,B0e),e(B0e,Uet),b(f,eQe,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,Jet),e(Cr,Mf),e(Mf,Yet),e(Mf,pre),e(pre,Ket),e(Mf,Zet),e(Mf,_re),e(_re,eot),e(Mf,oot),e(Cr,rot),e(Cr,ok),e(ok,tot),e(ok,I0e),e(I0e,aot),e(ok,not),e(Cr,sot),e(Cr,oa),M(rk,oa,null),e(oa,lot),e(oa,N0e),e(N0e,iot),e(oa,dot),e(oa,Ef),e(Ef,cot),e(Ef,q0e),e(q0e,fot),e(Ef,mot),e(Ef,ure),e(ure,got),e(Ef,hot),e(oa,pot),M(w0,oa,null),e(Cr,_ot),e(Cr,Kr),M(tk,Kr,null),e(Kr,uot),e(Kr,j0e),e(j0e,bot),e(Kr,vot),e(Kr,$n),e($n,Fot),e($n,D0e),e(D0e,Tot),e($n,Mot),e($n,G0e),e(G0e,Eot),e($n,Cot),e($n,O0e),e(O0e,wot),e($n,Aot),e(Kr,Lot),e(Kr,V0e),e(V0e,A0),e(A0,X0e),e(X0e,yot),e(A0,xot),e(A0,bre),e(bre,$ot),e(A0,kot),e(Kr,Sot),M(L0,Kr,null),b(f,oQe,u),b(f,Cf,u),e(Cf,y0),e(y0,z0e),M(ak,z0e,null),e(Cf,Rot),e(Cf,Q0e),e(Q0e,Pot),b(f,rQe,u),b(f,wr,u),M(nk,wr,null),e(wr,Bot),e(wr,wf),e(wf,Iot),e(wf,vre),e(vre,Not),e(wf,qot),e(wf,Fre),e(Fre,jot),e(wf,Dot),e(wr,Got),e(wr,sk),e(sk,Oot),e(sk,W0e),e(W0e,Vot),e(sk,Xot),e(wr,zot),e(wr,ra),M(lk,ra,null),e(ra,Qot),e(ra,H0e),e(H0e,Wot),e(ra,Hot),e(ra,Af),e(Af,Uot),e(Af,U0e),e(U0e,Jot),e(Af,Yot),e(Af,Tre),e(Tre,Kot),e(Af,Zot),e(ra,ert),M(x0,ra,null),e(wr,ort),e(wr,Zr),M(ik,Zr,null),e(Zr,rrt),e(Zr,J0e),e(J0e,trt),e(Zr,art),e(Zr,kn),e(kn,nrt),e(kn,Y0e),e(Y0e,srt),e(kn,lrt),e(kn,K0e),e(K0e,irt),e(kn,drt),e(kn,Z0e),e(Z0e,crt),e(kn,frt),e(Zr,mrt),e(Zr,dk),e(dk,$0),e($0,ewe),e(ewe,grt),e($0,hrt),e($0,Mre),e(Mre,prt),e($0,_rt),e(dk,urt),e(dk,k0),e(k0,owe),e(owe,brt),e(k0,vrt),e(k0,Ere),e(Ere,Frt),e(k0,Trt),e(Zr,Mrt),M(S0,Zr,null),b(f,tQe,u),b(f,Lf,u),e(Lf,R0),e(R0,rwe),M(ck,rwe,null),e(Lf,Ert),e(Lf,twe),e(twe,Crt),b(f,aQe,u),b(f,Ar,u),M(fk,Ar,null),e(Ar,wrt),e(Ar,yf),e(yf,Art),e(yf,Cre),e(Cre,Lrt),e(yf,yrt),e(yf,wre),e(wre,xrt),e(yf,$rt),e(Ar,krt),e(Ar,mk),e(mk,Srt),e(mk,awe),e(awe,Rrt),e(mk,Prt),e(Ar,Brt),e(Ar,ta),M(gk,ta,null),e(ta,Irt),e(ta,nwe),e(nwe,Nrt),e(ta,qrt),e(ta,xf),e(xf,jrt),e(xf,swe),e(swe,Drt),e(xf,Grt),e(xf,Are),e(Are,Ort),e(xf,Vrt),e(ta,Xrt),M(P0,ta,null),e(Ar,zrt),e(Ar,et),M(hk,et,null),e(et,Qrt),e(et,lwe),e(lwe,Wrt),e(et,Hrt),e(et,Sn),e(Sn,Urt),e(Sn,iwe),e(iwe,Jrt),e(Sn,Yrt),e(Sn,dwe),e(dwe,Krt),e(Sn,Zrt),e(Sn,cwe),e(cwe,ett),e(Sn,ott),e(et,rtt),e(et,fwe),e(fwe,B0),e(B0,mwe),e(mwe,ttt),e(B0,att),e(B0,Lre),e(Lre,ntt),e(B0,stt),e(et,ltt),M(I0,et,null),nQe=!0},p(f,[u]){const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),qf.$set(pk);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),Yg.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),Ph.$set(hwe);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),up.$set(pwe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),bp.$set(_k);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),jp.$set(_we);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),Vp.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),Hu.$set(bwe);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),Ju.$set(vwe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),V2.$set(uk);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),z2.$set(Fwe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),R1.$set(bk);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),B1.$set(Twe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),Tb.$set(vk);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),Eb.$set(Mwe);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),Vb.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),zb.$set(Cwe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Vv.$set($f);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),zv.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),EF.$set(Awe);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),wF.$set(Lwe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),RF.$set(Fk);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),BF.$set(ywe);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),v6.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),T6.$set($we);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),fT.$set(at);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),gT.$set(Tk);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),_T.$set(kwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),bT.$set(Mk);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),RT.$set(Swe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),BT.$set(nt);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),qT.$set(Rwe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),DT.$set(kf);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),VT.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),zT.$set(Bwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),r7.$set(L);const N0={};u&2&&(N0.$$scope={dirty:u,ctx:f}),a7.$set(N0);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),f7.$set(Iwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),g7.$set(Nwe);const q0={};u&2&&(q0.$$scope={dirty:u,ctx:f}),w7.$set(q0);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),L7.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),k7.$set(jwe);const j0={};u&2&&(j0.$$scope={dirty:u,ctx:f}),R7.$set(j0);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),D7.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),O7.$set(Gwe);const D0={};u&2&&(D0.$$scope={dirty:u,ctx:f}),W7.$set(D0);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),U7.$set(Owe);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),Z7.$set(Vwe);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),o8.$set(G0);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),a8.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),s8.$set(zwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),g8.$set(O0);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),p8.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),b8.$set(Wwe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),F8.$set(V0);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),pM.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),uM.$set(Uwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),GM.$set(X0);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),VM.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),t4.$set(Ywe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),n4.$set(z0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),m4.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),h4.$set(Zwe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),B4.$set(Q0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),N4.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),H4.$set(oAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),J4.$set(W0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),EE.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),wE.$set(tAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),VE.$set(H0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),zE.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),HE.$set(nAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),JE.$set(U0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),KE.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),eC.$set(lAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),TC.$set(J0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),EC.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),XC.$set(dAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),QC.$set(Y0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),HC.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),JC.$set(fAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),KC.$set(K0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),e3.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),y3.$set(gAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),$3.$set(Z0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),G3.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),V3.$set(pAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),t5.$set(ew);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),n5.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),_5.$set(uAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),b5.$set(ow);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),x5.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),k5.$set(vAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),O5.$set(rw);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),X5.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),o0.$set(TAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),t0.$set(tw);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),m0.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),h0.$set(EAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),E0.$set(aw);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),w0.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),L0.$set(wAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),x0.$set(nw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),S0.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),P0.$set(LAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),I0.$set(sw)},i(f){nQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(qf.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Yg.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Ph.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Vp.$$.fragment,f),E(BL.$$.fragment,f),E(Hu.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Ju.$$.fragment,f),E(DL.$$.fragment,f),E(V2.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(z2.$$.fragment,f),E(zL.$$.fragment,f),E(R1.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(B1.$$.fragment,f),E(JL.$$.fragment,f),E(Tb.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(Eb.$$.fragment,f),E(oy.$$.fragment,f),E(Vb.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(zb.$$.fragment,f),E(sy.$$.fragment,f),E(Vv.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(zv.$$.fragment,f),E(fy.$$.fragment,f),E(EF.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(wF.$$.fragment,f),E(_y.$$.fragment,f),E(RF.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(BF.$$.fragment,f),E(Ty.$$.fragment,f),E(v6.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(T6.$$.fragment,f),E(Ay.$$.fragment,f),E(fT.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(gT.$$.fragment,f),E(ky.$$.fragment,f),E(_T.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(bT.$$.fragment,f),E(Iy.$$.fragment,f),E(RT.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(BT.$$.fragment,f),E(Gy.$$.fragment,f),E(qT.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(DT.$$.fragment,f),E(Qy.$$.fragment,f),E(VT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(zT.$$.fragment,f),E(Yy.$$.fragment,f),E(r7.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(a7.$$.fragment,f),E(r9.$$.fragment,f),E(f7.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(g7.$$.fragment,f),E(l9.$$.fragment,f),E(w7.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(L7.$$.fragment,f),E(m9.$$.fragment,f),E(k7.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(R7.$$.fragment,f),E(b9.$$.fragment,f),E(D7.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(O7.$$.fragment,f),E(E9.$$.fragment,f),E(W7.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(U7.$$.fragment,f),E(y9.$$.fragment,f),E(Z7.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(o8.$$.fragment,f),E(P9.$$.fragment,f),E(a8.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(s8.$$.fragment,f),E(j9.$$.fragment,f),E(g8.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(p8.$$.fragment,f),E(X9.$$.fragment,f),E(b8.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(F8.$$.fragment,f),E(U9.$$.fragment,f),E(pM.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(uM.$$.fragment,f),E(ex.$$.fragment,f),E(GM.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(VM.$$.fragment,f),E(nx.$$.fragment,f),E(t4.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(n4.$$.fragment,f),E(cx.$$.fragment,f),E(m4.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(h4.$$.fragment,f),E(px.$$.fragment,f),E(B4.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(N4.$$.fragment,f),E(Fx.$$.fragment,f),E(H4.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(J4.$$.fragment,f),E(wx.$$.fragment,f),E(EE.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(wE.$$.fragment,f),E($x.$$.fragment,f),E(VE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(zE.$$.fragment,f),E(Bx.$$.fragment,f),E(HE.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(JE.$$.fragment,f),E(Gx.$$.fragment,f),E(KE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(eC.$$.fragment,f),E(Qx.$$.fragment,f),E(TC.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(EC.$$.fragment,f),E(Yx.$$.fragment,f),E(XC.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(QC.$$.fragment,f),E(r$.$$.fragment,f),E(HC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(JC.$$.fragment,f),E(l$.$$.fragment,f),E(KC.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(e3.$$.fragment,f),E(m$.$$.fragment,f),E(y3.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E($3.$$.fragment,f),E(u$.$$.fragment,f),E(G3.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(V3.$$.fragment,f),E(M$.$$.fragment,f),E(t5.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(n5.$$.fragment,f),E(L$.$$.fragment,f),E(_5.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(b5.$$.fragment,f),E(S$.$$.fragment,f),E(x5.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(k5.$$.fragment,f),E(N$.$$.fragment,f),E(O5.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(X5.$$.fragment,f),E(O$.$$.fragment,f),E(o0.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(t0.$$.fragment,f),E(W$.$$.fragment,f),E(m0.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(h0.$$.fragment,f),E(K$.$$.fragment,f),E(E0.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(w0.$$.fragment,f),E(tk.$$.fragment,f),E(L0.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(x0.$$.fragment,f),E(ik.$$.fragment,f),E(S0.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(P0.$$.fragment,f),E(hk.$$.fragment,f),E(I0.$$.fragment,f),nQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(qf.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Yg.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Ph.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Vp.$$.fragment,f),C(BL.$$.fragment,f),C(Hu.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Ju.$$.fragment,f),C(DL.$$.fragment,f),C(V2.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(z2.$$.fragment,f),C(zL.$$.fragment,f),C(R1.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(B1.$$.fragment,f),C(JL.$$.fragment,f),C(Tb.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(Eb.$$.fragment,f),C(oy.$$.fragment,f),C(Vb.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(zb.$$.fragment,f),C(sy.$$.fragment,f),C(Vv.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(zv.$$.fragment,f),C(fy.$$.fragment,f),C(EF.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(wF.$$.fragment,f),C(_y.$$.fragment,f),C(RF.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(BF.$$.fragment,f),C(Ty.$$.fragment,f),C(v6.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(T6.$$.fragment,f),C(Ay.$$.fragment,f),C(fT.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(gT.$$.fragment,f),C(ky.$$.fragment,f),C(_T.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(bT.$$.fragment,f),C(Iy.$$.fragment,f),C(RT.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(BT.$$.fragment,f),C(Gy.$$.fragment,f),C(qT.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(DT.$$.fragment,f),C(Qy.$$.fragment,f),C(VT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(zT.$$.fragment,f),C(Yy.$$.fragment,f),C(r7.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(a7.$$.fragment,f),C(r9.$$.fragment,f),C(f7.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(g7.$$.fragment,f),C(l9.$$.fragment,f),C(w7.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(L7.$$.fragment,f),C(m9.$$.fragment,f),C(k7.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(R7.$$.fragment,f),C(b9.$$.fragment,f),C(D7.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(O7.$$.fragment,f),C(E9.$$.fragment,f),C(W7.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(U7.$$.fragment,f),C(y9.$$.fragment,f),C(Z7.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(o8.$$.fragment,f),C(P9.$$.fragment,f),C(a8.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(s8.$$.fragment,f),C(j9.$$.fragment,f),C(g8.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(p8.$$.fragment,f),C(X9.$$.fragment,f),C(b8.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(F8.$$.fragment,f),C(U9.$$.fragment,f),C(pM.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(uM.$$.fragment,f),C(ex.$$.fragment,f),C(GM.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(VM.$$.fragment,f),C(nx.$$.fragment,f),C(t4.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(n4.$$.fragment,f),C(cx.$$.fragment,f),C(m4.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(h4.$$.fragment,f),C(px.$$.fragment,f),C(B4.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(N4.$$.fragment,f),C(Fx.$$.fragment,f),C(H4.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(J4.$$.fragment,f),C(wx.$$.fragment,f),C(EE.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(wE.$$.fragment,f),C($x.$$.fragment,f),C(VE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(zE.$$.fragment,f),C(Bx.$$.fragment,f),C(HE.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(JE.$$.fragment,f),C(Gx.$$.fragment,f),C(KE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(eC.$$.fragment,f),C(Qx.$$.fragment,f),C(TC.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(EC.$$.fragment,f),C(Yx.$$.fragment,f),C(XC.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(QC.$$.fragment,f),C(r$.$$.fragment,f),C(HC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(JC.$$.fragment,f),C(l$.$$.fragment,f),C(KC.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(e3.$$.fragment,f),C(m$.$$.fragment,f),C(y3.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C($3.$$.fragment,f),C(u$.$$.fragment,f),C(G3.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(V3.$$.fragment,f),C(M$.$$.fragment,f),C(t5.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(n5.$$.fragment,f),C(L$.$$.fragment,f),C(_5.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(b5.$$.fragment,f),C(S$.$$.fragment,f),C(x5.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(k5.$$.fragment,f),C(N$.$$.fragment,f),C(O5.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(X5.$$.fragment,f),C(O$.$$.fragment,f),C(o0.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(t0.$$.fragment,f),C(W$.$$.fragment,f),C(m0.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(h0.$$.fragment,f),C(K$.$$.fragment,f),C(E0.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(w0.$$.fragment,f),C(tk.$$.fragment,f),C(L0.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(x0.$$.fragment,f),C(ik.$$.fragment,f),C(S0.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(P0.$$.fragment,f),C(hk.$$.fragment,f),C(I0.$$.fragment,f),nQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(eXe),f&&t(Ri),w(nL),f&&t(oXe),f&&t(qn),f&&t(rXe),w(sL,f),f&&t(tXe),f&&t(DS),f&&t(aXe),w(qf,f),f&&t(nXe),f&&t(Pi),w(lL),f&&t(sXe),f&&t(wo),w(iL),w(fL),w(Yg),w(mL),f&&t(lXe),f&&t(Ii),w(gL),f&&t(iXe),f&&t(Ao),w(hL),w(uL),w(Ph),w(bL),f&&t(dXe),f&&t(Ni),w(vL),f&&t(cXe),f&&t(Lo),w(FL),w(EL),w(up),w(bp),w(CL),f&&t(fXe),f&&t(qi),w(wL),f&&t(mXe),f&&t(yo),w(AL),w(xL),w(jp),w(Dp),w($L),f&&t(gXe),f&&t(Di),w(kL),f&&t(hXe),f&&t(xo),w(SL),w(PL),w(Vp),w(BL),w(Hu),f&&t(pXe),f&&t(Vi),w(IL),f&&t(_Xe),f&&t($o),w(NL),w(jL),w(Ju),w(DL),w(V2),f&&t(uXe),f&&t(Qi),w(GL),f&&t(bXe),f&&t(ko),w(OL),w(XL),w(z2),w(zL),w(R1),f&&t(vXe),f&&t(Ui),w(QL),f&&t(FXe),f&&t(So),w(WL),w(UL),w(B1),w(JL),w(Tb),f&&t(TXe),f&&t(Ki),w(YL),f&&t(MXe),f&&t(Ro),w(KL),w(ey),w(Eb),w(oy),w(Vb),f&&t(EXe),f&&t(od),w(ry),f&&t(CXe),f&&t(Po),w(ty),w(ny),w(zb),w(sy),w(Vv),f&&t(wXe),f&&t(ad),w(ly),f&&t(AXe),f&&t(Bo),w(iy),w(cy),w(zv),w(fy),w(EF),f&&t(LXe),f&&t(ld),w(my),f&&t(yXe),f&&t(Io),w(gy),w(py),w(wF),w(_y),w(RF),f&&t(xXe),f&&t(cd),w(uy),f&&t($Xe),f&&t(qo),w(by),w(Fy),w(BF),w(Ty),w(v6),f&&t(kXe),f&&t(gd),w(My),f&&t(SXe),f&&t(jo),w(Ey),w(wy),w(T6),w(Ay),w(fT),f&&t(RXe),f&&t(_d),w(Ly),f&&t(PXe),f&&t(Do),w(yy),w($y),w(gT),w(ky),w(_T),f&&t(BXe),f&&t(vd),w(Sy),f&&t(IXe),f&&t(Go),w(Ry),w(By),w(bT),w(Iy),w(RT),f&&t(NXe),f&&t(Md),w(Ny),f&&t(qXe),f&&t(Oo),w(qy),w(Dy),w(BT),w(Gy),w(qT),f&&t(jXe),f&&t(wd),w(Oy),f&&t(DXe),f&&t(Vo),w(Vy),w(zy),w(DT),w(Qy),w(VT),f&&t(GXe),f&&t(yd),w(Wy),f&&t(OXe),f&&t(Xo),w(Hy),w(Jy),w(zT),w(Yy),w(r7),f&&t(VXe),f&&t(kd),w(Ky),f&&t(XXe),f&&t(zo),w(Zy),w(o9),w(a7),w(r9),w(f7),f&&t(zXe),f&&t(Pd),w(t9),f&&t(QXe),f&&t(Qo),w(a9),w(s9),w(g7),w(l9),w(w7),f&&t(WXe),f&&t(Nd),w(i9),f&&t(HXe),f&&t(Wo),w(d9),w(f9),w(L7),w(m9),w(k7),f&&t(UXe),f&&t(Dd),w(h9),f&&t(JXe),f&&t(Ho),w(p9),w(u9),w(R7),w(b9),w(D7),f&&t(YXe),f&&t(Vd),w(v9),f&&t(KXe),f&&t(Uo),w(F9),w(M9),w(O7),w(E9),w(W7),f&&t(ZXe),f&&t(Wd),w(C9),f&&t(eze),f&&t(Jo),w(w9),w(L9),w(U7),w(y9),w(Z7),f&&t(oze),f&&t(Jd),w($9),f&&t(rze),f&&t(Yo),w(k9),w(R9),w(o8),w(P9),w(a8),f&&t(tze),f&&t(Zd),w(B9),f&&t(aze),f&&t(Ko),w(I9),w(q9),w(s8),w(j9),w(g8),f&&t(nze),f&&t(rc),w(D9),f&&t(sze),f&&t(Zo),w(G9),w(V9),w(p8),w(X9),w(b8),f&&t(lze),f&&t(nc),w(z9),f&&t(ize),f&&t(er),w(Q9),w(H9),w(F8),w(U9),w(pM),f&&t(dze),f&&t(ic),w(J9),f&&t(cze),f&&t(or),w(Y9),w(Z9),w(uM),w(ex),w(GM),f&&t(fze),f&&t(fc),w(ox),f&&t(mze),f&&t(rr),w(rx),w(ax),w(VM),w(nx),w(t4),f&&t(gze),f&&t(hc),w(sx),f&&t(hze),f&&t(tr),w(lx),w(dx),w(n4),w(cx),w(m4),f&&t(pze),f&&t(uc),w(fx),f&&t(_ze),f&&t(nr),w(mx),w(hx),w(h4),w(px),w(B4),f&&t(uze),f&&t(Fc),w(_x),f&&t(bze),f&&t(sr),w(ux),w(vx),w(N4),w(Fx),w(H4),f&&t(vze),f&&t(Ec),w(Tx),f&&t(Fze),f&&t(lr),w(Mx),w(Cx),w(J4),w(wx),w(EE),f&&t(Tze),f&&t(Ac),w(Ax),f&&t(Mze),f&&t(ir),w(Lx),w(xx),w(wE),w($x),w(VE),f&&t(Eze),f&&t(xc),w(kx),f&&t(Cze),f&&t(dr),w(Sx),w(Px),w(zE),w(Bx),w(HE),f&&t(wze),f&&t(Sc),w(Nx),f&&t(Aze),f&&t(cr),w(qx),w(Dx),w(JE),w(Gx),w(KE),f&&t(Lze),f&&t(Bc),w(Ox),f&&t(yze),f&&t(fr),w(Vx),w(zx),w(eC),w(Qx),w(TC),f&&t(xze),f&&t(qc),w(Wx),f&&t($ze),f&&t(mr),w(Hx),w(Jx),w(EC),w(Yx),w(XC),f&&t(kze),f&&t(Gc),w(Kx),f&&t(Sze),f&&t(gr),w(Zx),w(o$),w(QC),w(r$),w(HC),f&&t(Rze),f&&t(Xc),w(t$),f&&t(Pze),f&&t(hr),w(a$),w(s$),w(JC),w(l$),w(KC),f&&t(Bze),f&&t(Wc),w(i$),f&&t(Ize),f&&t(pr),w(d$),w(f$),w(e3),w(m$),w(y3),f&&t(Nze),f&&t(Jc),w(g$),f&&t(qze),f&&t(_r),w(h$),w(_$),w($3),w(u$),w(G3),f&&t(jze),f&&t(Zc),w(b$),f&&t(Dze),f&&t(ur),w(v$),w(T$),w(V3),w(M$),w(t5),f&&t(Gze),f&&t(rf),w(E$),f&&t(Oze),f&&t(br),w(C$),w(A$),w(n5),w(L$),w(_5),f&&t(Vze),f&&t(nf),w(y$),f&&t(Xze),f&&t(vr),w(x$),w(k$),w(b5),w(S$),w(x5),f&&t(zze),f&&t(df),w(R$),f&&t(Qze),f&&t(Fr),w(P$),w(I$),w(k5),w(N$),w(O5),f&&t(Wze),f&&t(mf),w(q$),f&&t(Hze),f&&t(Tr),w(j$),w(G$),w(X5),w(O$),w(o0),f&&t(Uze),f&&t(pf),w(V$),f&&t(Jze),f&&t(Mr),w(X$),w(Q$),w(t0),w(W$),w(m0),f&&t(Yze),f&&t(bf),w(H$),f&&t(Kze),f&&t(Er),w(U$),w(Y$),w(h0),w(K$),w(E0),f&&t(Zze),f&&t(Tf),w(Z$),f&&t(eQe),f&&t(Cr),w(ek),w(rk),w(w0),w(tk),w(L0),f&&t(oQe),f&&t(Cf),w(ak),f&&t(rQe),f&&t(wr),w(nk),w(lk),w(x0),w(ik),w(S0),f&&t(tQe),f&&t(Lf),w(ck),f&&t(aQe),f&&t(Ar),w(fk),w(gk),w(P0),w(hk),w(I0)}}}const OHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function VHt($){return GQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class JHt extends NQt{constructor(g){super();qQt(this,g,VHt,GHt,jQt,{})}}export{JHt as default,OHt as metadata};
